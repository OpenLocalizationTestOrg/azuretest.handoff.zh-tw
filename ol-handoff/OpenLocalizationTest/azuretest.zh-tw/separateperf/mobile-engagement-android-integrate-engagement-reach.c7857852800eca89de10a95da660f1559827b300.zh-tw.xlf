<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Mobile Engagement Android SDK Integration</source>
          <target state="new">Azure Mobile Engagement Android SDK Integration</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Latest updates and procedures for Android SDK for Azure Mobile Engagement</source>
          <target state="new">Latest updates and procedures for Android SDK for Azure Mobile Engagement</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to Integrate Engagement Reach on Android</source>
          <target state="new">How to Integrate Engagement Reach on Android</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> You must follow the integration procedure described in the How to Integrate Engagement on Android document before following this guide.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> You must follow the integration procedure described in the How to Integrate Engagement on Android document before following this guide.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Standard integration</source>
          <target state="new">Standard integration</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Reach SDK requires the <bpt id="p1">**</bpt>Android Support library (v4)<ept id="p1">**</ept>.</source>
          <target state="new">The Reach SDK requires the <bpt id="p1">**</bpt>Android Support library (v4)<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The fastest way to add the library to your project in <bpt id="p1">**</bpt>Eclipse<ept id="p1">**</ept> is <ph id="ph1">`Right click on your project -&gt; Android Tools -&gt; Add Support Library...`</ph>.</source>
          <target state="new">The fastest way to add the library to your project in <bpt id="p1">**</bpt>Eclipse<ept id="p1">**</ept> is <ph id="ph1">`Right click on your project -&gt; Android Tools -&gt; Add Support Library...`</ph>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you don't use Eclipse, you can read the instructions <bpt id="p1">[</bpt><ept id="p1">here]</ept>.</source>
          <target state="new">If you don't use Eclipse, you can read the instructions <bpt id="p1">[</bpt><ept id="p1">here]</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Copy Reach resource files from the SDK in your project :</source>
          <target state="new">Copy Reach resource files from the SDK in your project :</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Copy the files from the <ph id="ph1">`res/layout`</ph> folder delivered with the SDK into the <ph id="ph2">`res/layout`</ph> folder of your application.</source>
          <target state="new">Copy the files from the <ph id="ph1">`res/layout`</ph> folder delivered with the SDK into the <ph id="ph2">`res/layout`</ph> folder of your application.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Copy the files from the <ph id="ph1">`res/drawable`</ph> folder delivered with the SDK into the <ph id="ph2">`res/drawable`</ph> folder of your application.</source>
          <target state="new">Copy the files from the <ph id="ph1">`res/drawable`</ph> folder delivered with the SDK into the <ph id="ph2">`res/drawable`</ph> folder of your application.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Edit your <ph id="ph1">`AndroidManifest.xml`</ph> file:</source>
          <target state="new">Edit your <ph id="ph1">`AndroidManifest.xml`</ph> file:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following section (between the <ph id="ph1">`&lt;application&gt;`</ph> and <ph id="ph2">`&lt;/application&gt;`</ph> tags):</source>
          <target state="new">Add the following section (between the <ph id="ph1">`&lt;application&gt;`</ph> and <ph id="ph2">`&lt;/application&gt;`</ph> tags):</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You need this permission to replay system notifications that were not clicked at boot (otherwise they will be kept on disk but won't be displayed anymore, you really have to include this).</source>
          <target state="new">You need this permission to replay system notifications that were not clicked at boot (otherwise they will be kept on disk but won't be displayed anymore, you really have to include this).</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Specify an icon used for notifications (both in app and system ones) by copying and editing the following section (between the <ph id="ph1">`&lt;application&gt;`</ph> and <ph id="ph2">`&lt;/application&gt;`</ph> tags):</source>
          <target state="new">Specify an icon used for notifications (both in app and system ones) by copying and editing the following section (between the <ph id="ph1">`&lt;application&gt;`</ph> and <ph id="ph2">`&lt;/application&gt;`</ph> tags):</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> This section is <bpt id="p1">**</bpt>mandatory<ept id="p1">**</ept> if you plan on using system notifications when creating Reach campaigns.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> This section is <bpt id="p1">**</bpt>mandatory<ept id="p1">**</ept> if you plan on using system notifications when creating Reach campaigns.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Android prevents system notifications without icons from being shown.</source>
          <target state="new">Android prevents system notifications without icons from being shown.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>So if you omit this section, your end users will not be able to receive them.</source>
          <target state="new">So if you omit this section, your end users will not be able to receive them.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you create campaigns with system notifications using big picture, you need to add the following permissions (after the <ph id="ph1">`&lt;/application&gt;`</ph> tag) if missing:</source>
          <target state="new">If you create campaigns with system notifications using big picture, you need to add the following permissions (after the <ph id="ph1">`&lt;/application&gt;`</ph> tag) if missing:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On Android M and if your application targets Android API level 23 or greater, <ph id="ph1">``WRITE_EXTERNAL_STORAGE``</ph> permission requires user approval.</source>
          <target state="new">On Android M and if your application targets Android API level 23 or greater, <ph id="ph1">``WRITE_EXTERNAL_STORAGE``</ph> permission requires user approval.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Please read <bpt id="p1">[</bpt>this section<ept id="p1">](mobile-engagement-android-integrate-engagement.md#android-m-permissions)</ept>.</source>
          <target state="new">Please read <bpt id="p1">[</bpt>this section<ept id="p1">](mobile-engagement-android-integrate-engagement.md#android-m-permissions)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For system notifications you can also specify in the Reach campaign if the device should ring and/or vibrate.</source>
          <target state="new">For system notifications you can also specify in the Reach campaign if the device should ring and/or vibrate.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For it to work, you have to make sure you declared the following permission (after the <ph id="ph1">`&lt;/application&gt;`</ph> tag):</source>
          <target state="new">For it to work, you have to make sure you declared the following permission (after the <ph id="ph1">`&lt;/application&gt;`</ph> tag):</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Without this permission, Android prevents system notifications from being shown if you checked the ring or the vibrate option in the Reach Campaign manager.</source>
          <target state="new">Without this permission, Android prevents system notifications from being shown if you checked the ring or the vibrate option in the Reach Campaign manager.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you build your application using <bpt id="p1">**</bpt>ProGuard<ept id="p1">**</ept> and have errors related to the Android Support library or the Engagement jar, add the following lines to your <ph id="ph1">`proguard.cfg`</ph> file:</source>
          <target state="new">If you build your application using <bpt id="p1">**</bpt>ProGuard<ept id="p1">**</ept> and have errors related to the Android Support library or the Engagement jar, add the following lines to your <ph id="ph1">`proguard.cfg`</ph> file:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Native Push</source>
          <target state="new">Native Push</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Now that you configured Reach module, you need to configure native push to be able to receive the campaigns on the device.</source>
          <target state="new">Now that you configured Reach module, you need to configure native push to be able to receive the campaigns on the device.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We support two services on Android:</source>
          <target state="new">We support two services on Android:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Google Play devices: Use <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging]</ept> by following the <bpt id="p2">[</bpt>How to Integrate GCM with Engagement guide<ept id="p2">](mobile-engagement-android-gcm-integrate.md)</ept> guide.</source>
          <target state="new">Google Play devices: Use <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging]</ept> by following the <bpt id="p2">[</bpt>How to Integrate GCM with Engagement guide<ept id="p2">](mobile-engagement-android-gcm-integrate.md)</ept> guide.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Amazon devices: Use <bpt id="p1">[</bpt><ept id="p1">Amazon Device Messaging]</ept> by following the <bpt id="p2">[</bpt>How to Integrate ADM with Engagement guide<ept id="p2">](mobile-engagement-android-adm-integrate.md)</ept> guide.</source>
          <target state="new">Amazon devices: Use <bpt id="p1">[</bpt><ept id="p1">Amazon Device Messaging]</ept> by following the <bpt id="p2">[</bpt>How to Integrate ADM with Engagement guide<ept id="p2">](mobile-engagement-android-adm-integrate.md)</ept> guide.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you want to target both Amazon and Google Play devices, its possible to have everything inside 1 AndroidManifest.xml/APK for development.</source>
          <target state="new">If you want to target both Amazon and Google Play devices, its possible to have everything inside 1 AndroidManifest.xml/APK for development.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>But when submitting to Amazon, they may reject your application if they find GCM code.</source>
          <target state="new">But when submitting to Amazon, they may reject your application if they find GCM code.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You should use multiple APKs in that case.</source>
          <target state="new">You should use multiple APKs in that case.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Your application is now ready to receive and display reach campaigns!</source>
          <target state="new">Your application is now ready to receive and display reach campaigns!</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How to handle data push</source>
          <target state="new">How to handle data push</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="new">Integration</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you want your application to be able to receive Reach data pushes, you have to create a sub-class of <ph id="ph1">`com.microsoft.azure.engagement.reach.EngagementReachDataPushReceiver`</ph> and reference it in the <ph id="ph2">`AndroidManifest.xml`</ph> file (between the <ph id="ph3">`&lt;application&gt;`</ph> and/or <ph id="ph4">`&lt;/application&gt;`</ph> tags):</source>
          <target state="new">If you want your application to be able to receive Reach data pushes, you have to create a sub-class of <ph id="ph1">`com.microsoft.azure.engagement.reach.EngagementReachDataPushReceiver`</ph> and reference it in the <ph id="ph2">`AndroidManifest.xml`</ph> file (between the <ph id="ph3">`&lt;application&gt;`</ph> and/or <ph id="ph4">`&lt;/application&gt;`</ph> tags):</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Then you can override the <ph id="ph1">`onDataPushStringReceived`</ph> and <ph id="ph2">`onDataPushBase64Received`</ph> callbacks.</source>
          <target state="new">Then you can override the <ph id="ph1">`onDataPushStringReceived`</ph> and <ph id="ph2">`onDataPushBase64Received`</ph> callbacks.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="new">Here is an example:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="new">Category</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The category parameter is optional when you create a Data Push campaign and allows you to filter data pushes.</source>
          <target state="new">The category parameter is optional when you create a Data Push campaign and allows you to filter data pushes.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is useful if you have several broadcast receivers handling different types of data pushes, or if you want to push different kinds of <ph id="ph1">`Base64`</ph> data and want to identify their type before parsing them.</source>
          <target state="new">This is useful if you have several broadcast receivers handling different types of data pushes, or if you want to push different kinds of <ph id="ph1">`Base64`</ph> data and want to identify their type before parsing them.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Callbacks' return parameter</source>
          <target state="new">Callbacks' return parameter</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Here are some guidelines to properly handle the return parameter of <ph id="ph1">`onDataPushStringReceived`</ph> and <ph id="ph2">`onDataPushBase64Received`</ph>:</source>
          <target state="new">Here are some guidelines to properly handle the return parameter of <ph id="ph1">`onDataPushStringReceived`</ph> and <ph id="ph2">`onDataPushBase64Received`</ph>:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A broadcast receiver should return <ph id="ph1">`null`</ph> in the callback if it does not know how to handle a data push.</source>
          <target state="new">A broadcast receiver should return <ph id="ph1">`null`</ph> in the callback if it does not know how to handle a data push.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You should use the category to determine whether your broadcast receiver should handle the data push or not.</source>
          <target state="new">You should use the category to determine whether your broadcast receiver should handle the data push or not.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>One of the broadcast receiver should return <ph id="ph1">`true`</ph> in the callback if it accepts the data push.</source>
          <target state="new">One of the broadcast receiver should return <ph id="ph1">`true`</ph> in the callback if it accepts the data push.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One of the broadcast receiver should return <ph id="ph1">`false`</ph> in the callback if it recognizes the data push, but discards it for whatever reason.</source>
          <target state="new">One of the broadcast receiver should return <ph id="ph1">`false`</ph> in the callback if it recognizes the data push, but discards it for whatever reason.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, return <ph id="ph1">`false`</ph> when the received data is invalid.</source>
          <target state="new">For example, return <ph id="ph1">`false`</ph> when the received data is invalid.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If one broadcast receiver returns <ph id="ph1">`true`</ph> while another one returns <ph id="ph2">`false`</ph> for the same data push, the behavior is undefined, you should never do that.</source>
          <target state="new">If one broadcast receiver returns <ph id="ph1">`true`</ph> while another one returns <ph id="ph2">`false`</ph> for the same data push, the behavior is undefined, you should never do that.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The return type is used only for the Reach statistics:</source>
          <target state="new">The return type is used only for the Reach statistics:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Replied`</ph> is incremented if one of the broadcast receivers returned either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
          <target state="new"><ph id="ph1">`Replied`</ph> is incremented if one of the broadcast receivers returned either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Actioned`</ph> is incremented only if one of the broadcast receivers returned <ph id="ph2">`true`</ph>.</source>
          <target state="new"><ph id="ph1">`Actioned`</ph> is incremented only if one of the broadcast receivers returned <ph id="ph2">`true`</ph>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>How to customize campaigns</source>
          <target state="new">How to customize campaigns</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To customize campaigns, you can modify the layouts provided in the Reach SDK.</source>
          <target state="new">To customize campaigns, you can modify the layouts provided in the Reach SDK.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You should keep all the identifiers used in the layouts and keep the types of the views that use an identifier, especially for text views and image views.</source>
          <target state="new">You should keep all the identifiers used in the layouts and keep the types of the views that use an identifier, especially for text views and image views.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some views are just used to hide or show areas so their type may be changed.</source>
          <target state="new">Some views are just used to hide or show areas so their type may be changed.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Please check the source code if you intend to change the type of a view in the provided layouts.</source>
          <target state="new">Please check the source code if you intend to change the type of a view in the provided layouts.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="new">Notifications</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>There are two types of notifications: system and in-app notifications which use different layout files.</source>
          <target state="new">There are two types of notifications: system and in-app notifications which use different layout files.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>System notifications</source>
          <target state="new">System notifications</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To customize system notifications you need to use the <bpt id="p1">**</bpt>categories<ept id="p1">**</ept>.</source>
          <target state="new">To customize system notifications you need to use the <bpt id="p1">**</bpt>categories<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can jump to <bpt id="p1">[</bpt>Categories<ept id="p1">](#categories)</ept>.</source>
          <target state="new">You can jump to <bpt id="p1">[</bpt>Categories<ept id="p1">](#categories)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In-app notifications</source>
          <target state="new">In-app notifications</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>By default, an in-app notification is a view that is dynamically added to the current activity user interface thanks to the Android method <ph id="ph1">`addContentView()`</ph>.</source>
          <target state="new">By default, an in-app notification is a view that is dynamically added to the current activity user interface thanks to the Android method <ph id="ph1">`addContentView()`</ph>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This is called a notification overlay.</source>
          <target state="new">This is called a notification overlay.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Notification overlays are great for a fast integration because they do not require you to modify any layout in your application.</source>
          <target state="new">Notification overlays are great for a fast integration because they do not require you to modify any layout in your application.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To modify the look of your notification overlays, you can simply modify the file <ph id="ph1">`engagement_notification_area.xml`</ph> to your needs.</source>
          <target state="new">To modify the look of your notification overlays, you can simply modify the file <ph id="ph1">`engagement_notification_area.xml`</ph> to your needs.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The file <ph id="ph2">`engagement_notification_overlay.xml`</ph> is the one that is used to create a notification overlay, it includes the file <ph id="ph3">`engagement_notification_area.xml`</ph>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The file <ph id="ph2">`engagement_notification_overlay.xml`</ph> is the one that is used to create a notification overlay, it includes the file <ph id="ph3">`engagement_notification_area.xml`</ph>.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can also customize it to suit your needs (such as for positioning the notification area within the overlay).</source>
          <target state="new">You can also customize it to suit your needs (such as for positioning the notification area within the overlay).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Include notification layout as part of an activity layout</source>
          <target state="new">Include notification layout as part of an activity layout</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Overlays are great for a fast integration but can be inconvenient or have side effects in special cases.</source>
          <target state="new">Overlays are great for a fast integration but can be inconvenient or have side effects in special cases.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The overlay system can be customized at an activity level, making it easy to prevent side effects for special activities.</source>
          <target state="new">The overlay system can be customized at an activity level, making it easy to prevent side effects for special activities.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can decide to include our notification layout in your existing layout thanks to the Android <bpt id="p1">**</bpt>include<ept id="p1">**</ept> statement.</source>
          <target state="new">You can decide to include our notification layout in your existing layout thanks to the Android <bpt id="p1">**</bpt>include<ept id="p1">**</ept> statement.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following is an example of a modified <ph id="ph1">`ListActivity`</ph> layout containing just a <ph id="ph2">`ListView`</ph>.</source>
          <target state="new">The following is an example of a modified <ph id="ph1">`ListActivity`</ph> layout containing just a <ph id="ph2">`ListView`</ph>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Before Engagement integration :</source>
          <target state="new">Before Engagement integration :</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>After Engagement integration :</source>
          <target state="new">After Engagement integration :</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this example we added a parent container since the original layout used a list view as the top level element.</source>
          <target state="new">In this example we added a parent container since the original layout used a list view as the top level element.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>We also added <ph id="ph1">`android:layout_weight="1"`</ph> to be able to add a view below a list view configured with <ph id="ph2">`android:layout_height="fill_parent"`</ph>.</source>
          <target state="new">We also added <ph id="ph1">`android:layout_weight="1"`</ph> to be able to add a view below a list view configured with <ph id="ph2">`android:layout_height="fill_parent"`</ph>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Engagement Reach SDK automatically detects that the notification layout is included in this activity and will not add an overlay for this activity.</source>
          <target state="new">The Engagement Reach SDK automatically detects that the notification layout is included in this activity and will not add an overlay for this activity.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> If you use a ListActivity in your application, a visible Reach overlay will prevent you from reacting to clicked items in the list view anymore.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> If you use a ListActivity in your application, a visible Reach overlay will prevent you from reacting to clicked items in the list view anymore.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is a known issue.</source>
          <target state="new">This is a known issue.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To work around this problem we suggest you to embed the notification layout in your own list activity layout like in the previous sample.</source>
          <target state="new">To work around this problem we suggest you to embed the notification layout in your own list activity layout like in the previous sample.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Disabling application notification per activity</source>
          <target state="new">Disabling application notification per activity</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you don't want the overlay to be added to your activity, and if you don't include the notification layout in your own layout, you can disable the overlay for this activity in the <ph id="ph1">`AndroidManifest.xml`</ph> by adding a <ph id="ph2">`meta-data`</ph> section like in the following example:</source>
          <target state="new">If you don't want the overlay to be added to your activity, and if you don't include the notification layout in your own layout, you can disable the overlay for this activity in the <ph id="ph1">`AndroidManifest.xml`</ph> by adding a <ph id="ph2">`meta-data`</ph> section like in the following example:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="categories"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Categories</source>
          <target state="new"><ph id="ph1">&lt;a name="categories"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Categories</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you modify the provided layouts, you modify the look of all your notifications.</source>
          <target state="new">When you modify the provided layouts, you modify the look of all your notifications.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Categories allow you to define various targeted looks (possibly behaviors) for notifications.</source>
          <target state="new">Categories allow you to define various targeted looks (possibly behaviors) for notifications.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A category can be specified when you create a Reach campaign.</source>
          <target state="new">A category can be specified when you create a Reach campaign.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Keep in mind that categories also let you customize announcements and polls, that is described later in this document.</source>
          <target state="new">Keep in mind that categories also let you customize announcements and polls, that is described later in this document.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To register a category handler for your notifications, you need to add a call when the application is initialized.</source>
          <target state="new">To register a category handler for your notifications, you need to add a call when the application is initialized.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> Please read the warning about the android:process attribute \&lt;android-sdk-engagement-process\&gt; in the How to Integrate Engagement on Android topic before proceeding.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> Please read the warning about the android:process attribute \&lt;android-sdk-engagement-process\&gt; in the How to Integrate Engagement on Android topic before proceeding.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following example assumes you acknowledged the previous warning and use a sub-class of <ph id="ph1">`EngagementApplication`</ph>:</source>
          <target state="new">The following example assumes you acknowledged the previous warning and use a sub-class of <ph id="ph1">`EngagementApplication`</ph>:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyNotifier`</ph> object is the implementation of the notification category handler.</source>
          <target state="new">The <ph id="ph1">`MyNotifier`</ph> object is the implementation of the notification category handler.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>It is either an implementation of the <ph id="ph1">`EngagementNotifier`</ph> interface or a sub class of the default implementation: <ph id="ph2">`EngagementDefaultNotifier`</ph>.</source>
          <target state="new">It is either an implementation of the <ph id="ph1">`EngagementNotifier`</ph> interface or a sub class of the default implementation: <ph id="ph2">`EngagementDefaultNotifier`</ph>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Note that the same notifier can handle several categories, you can register them like this:</source>
          <target state="new">Note that the same notifier can handle several categories, you can register them like this:</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To replace the default category implementation, you can register your implementation like in the following example:</source>
          <target state="new">To replace the default category implementation, you can register your implementation like in the following example:</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The current category used in a handler is passed as a parameter in most methods you can override in <ph id="ph1">`EngagementDefaultNotifier`</ph>.</source>
          <target state="new">The current category used in a handler is passed as a parameter in most methods you can override in <ph id="ph1">`EngagementDefaultNotifier`</ph>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>It is passed either as a <ph id="ph1">`String`</ph> parameter or indirectly in a <ph id="ph2">`EngagementReachContent`</ph> object which has a <ph id="ph3">`getCategory()`</ph> method.</source>
          <target state="new">It is passed either as a <ph id="ph1">`String`</ph> parameter or indirectly in a <ph id="ph2">`EngagementReachContent`</ph> object which has a <ph id="ph3">`getCategory()`</ph> method.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can change most of the notification creation process by redefining methods on <ph id="ph1">`EngagementDefaultNotifier`</ph>, for more advanced customization feel free to take a look at the technical documentation and at the source code.</source>
          <target state="new">You can change most of the notification creation process by redefining methods on <ph id="ph1">`EngagementDefaultNotifier`</ph>, for more advanced customization feel free to take a look at the technical documentation and at the source code.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In-app notifications</source>
          <target state="new">In-app notifications</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you just want to use alternate layouts for a specific category, you can implement this as in the following example:</source>
          <target state="new">If you just want to use alternate layouts for a specific category, you can implement this as in the following example:</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Example of <ph id="ph1">`my_notification_overlay.xml`</ph> :</source>
          <target state="new">Example of <ph id="ph1">`my_notification_overlay.xml`</ph> :</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>As you can see, the overlay view identifier is different than the standard one.</source>
          <target state="new">As you can see, the overlay view identifier is different than the standard one.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>It is important that each layout use a unique identifier for overlays.</source>
          <target state="new">It is important that each layout use a unique identifier for overlays.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example of <ph id="ph1">`my_notification_area.xml`</ph> :</source>
          <target state="new">Example of <ph id="ph1">`my_notification_area.xml`</ph> :</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>As you can see, the notification area view identifier is different than the standard one.</source>
          <target state="new">As you can see, the notification area view identifier is different than the standard one.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It is important that each layout uses a unique identifier for notification areas.</source>
          <target state="new">It is important that each layout uses a unique identifier for notification areas.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This simple example of category makes application (or in-app) notifications displayed at the top of the screen.</source>
          <target state="new">This simple example of category makes application (or in-app) notifications displayed at the top of the screen.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>We did not change the standard identifiers used in the notification area itself.</source>
          <target state="new">We did not change the standard identifiers used in the notification area itself.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If you want to change that, you have to redefine the <ph id="ph1">`EngagementDefaultNotifier.prepareInAppArea`</ph> method.</source>
          <target state="new">If you want to change that, you have to redefine the <ph id="ph1">`EngagementDefaultNotifier.prepareInAppArea`</ph> method.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>It's recommended to look at the technical documentation and at the source code of <ph id="ph1">`EngagementNotifier`</ph> and <ph id="ph2">`EngagementDefaultNotifier`</ph> if you want this level of advanced customization.</source>
          <target state="new">It's recommended to look at the technical documentation and at the source code of <ph id="ph1">`EngagementNotifier`</ph> and <ph id="ph2">`EngagementDefaultNotifier`</ph> if you want this level of advanced customization.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>System notifications</source>
          <target state="new">System notifications</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By extending <ph id="ph1">`EngagementDefaultNotifier`</ph>, you can override <ph id="ph2">`onNotificationPrepared`</ph> to alter the notification that was prepared by the default implementation.</source>
          <target state="new">By extending <ph id="ph1">`EngagementDefaultNotifier`</ph>, you can override <ph id="ph2">`onNotificationPrepared`</ph> to alter the notification that was prepared by the default implementation.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This example makes a system notification for a content being displayed as an ongoing event when the "ongoing" category is used.</source>
          <target state="new">This example makes a system notification for a content being displayed as an ongoing event when the "ongoing" category is used.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If you want to build the <ph id="ph1">`Notification`</ph> object from scratch, you can return <ph id="ph2">`false`</ph> to the method and call <ph id="ph3">`notify`</ph> yourself on the <ph id="ph4">`NotificationManager`</ph>.</source>
          <target state="new">If you want to build the <ph id="ph1">`Notification`</ph> object from scratch, you can return <ph id="ph2">`false`</ph> to the method and call <ph id="ph3">`notify`</ph> yourself on the <ph id="ph4">`NotificationManager`</ph>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In that case it's important that you keep a <ph id="ph1">`contentIntent`</ph>, a <ph id="ph2">`deleteIntent`</ph> and the notification identifier used by <ph id="ph3">`EngagementReachReceiver`</ph>.</source>
          <target state="new">In that case it's important that you keep a <ph id="ph1">`contentIntent`</ph>, a <ph id="ph2">`deleteIntent`</ph> and the notification identifier used by <ph id="ph3">`EngagementReachReceiver`</ph>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Here is a correct example of such an implementation:</source>
          <target state="new">Here is a correct example of such an implementation:</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Notification only announcements</source>
          <target state="new">Notification only announcements</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The management of the click on a notification only announcement can be customized by overriding <ph id="ph1">`EngagementDefaultNotifier.onNotifAnnouncementIntentPrepared`</ph> to modify the prepared <ph id="ph2">`Intent`</ph>.</source>
          <target state="new">The management of the click on a notification only announcement can be customized by overriding <ph id="ph1">`EngagementDefaultNotifier.onNotifAnnouncementIntentPrepared`</ph> to modify the prepared <ph id="ph2">`Intent`</ph>.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Using this method allows you to tune the flags easily.</source>
          <target state="new">Using this method allows you to tune the flags easily.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For example to add the <ph id="ph1">`SINGLE_TOP`</ph> flag:</source>
          <target state="new">For example to add the <ph id="ph1">`SINGLE_TOP`</ph> flag:</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For legacy Engagement users, please note that system notifications without action URL now launches the application if it was in background, so this method can be called with an announcement without action URL.</source>
          <target state="new">For legacy Engagement users, please note that system notifications without action URL now launches the application if it was in background, so this method can be called with an announcement without action URL.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You should consider that when customizing the intent.</source>
          <target state="new">You should consider that when customizing the intent.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can also implement <ph id="ph1">`EngagementNotifier.executeNotifAnnouncementAction`</ph> from scratch.</source>
          <target state="new">You can also implement <ph id="ph1">`EngagementNotifier.executeNotifAnnouncementAction`</ph> from scratch.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Notification life cycle</source>
          <target state="new">Notification life cycle</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When using the default category, some life cycle methods are called on the <ph id="ph1">`EngagementReachInteractiveContent`</ph> object to report statistics and update the campaign state:</source>
          <target state="new">When using the default category, some life cycle methods are called on the <ph id="ph1">`EngagementReachInteractiveContent`</ph> object to report statistics and update the campaign state:</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When the notification is displayed in application or put in the status bar, the <ph id="ph1">`displayNotification`</ph> method is called (which reports statistics) by <ph id="ph2">`EngagementReachAgent`</ph> if <ph id="ph3">`handleNotification`</ph> returns <ph id="ph4">`true`</ph>.</source>
          <target state="new">When the notification is displayed in application or put in the status bar, the <ph id="ph1">`displayNotification`</ph> method is called (which reports statistics) by <ph id="ph2">`EngagementReachAgent`</ph> if <ph id="ph3">`handleNotification`</ph> returns <ph id="ph4">`true`</ph>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the notification is dismissed, the <ph id="ph1">`exitNotification`</ph> method is called, statistic is reported and next campaigns can now be processed.</source>
          <target state="new">If the notification is dismissed, the <ph id="ph1">`exitNotification`</ph> method is called, statistic is reported and next campaigns can now be processed.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the notification is clicked, <ph id="ph1">`actionNotification`</ph> is called, statistic is reported and the associated intent is launched.</source>
          <target state="new">If the notification is clicked, <ph id="ph1">`actionNotification`</ph> is called, statistic is reported and the associated intent is launched.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If your implementation of <ph id="ph1">`EngagementNotifier`</ph> bypasses the default behavior, you have to call these life cycle methods by yourself.</source>
          <target state="new">If your implementation of <ph id="ph1">`EngagementNotifier`</ph> bypasses the default behavior, you have to call these life cycle methods by yourself.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following examples illustrate some cases where the default behavior is bypassed:</source>
          <target state="new">The following examples illustrate some cases where the default behavior is bypassed:</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You don't extend <ph id="ph1">`EngagementDefaultNotifier`</ph>, e.g. you implemented category handling from scratch.</source>
          <target state="new">You don't extend <ph id="ph1">`EngagementDefaultNotifier`</ph>, e.g. you implemented category handling from scratch.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For system notifications, you overrode the <ph id="ph1">`onNotificationPrepared`</ph> and you modified <ph id="ph2">`contentIntent`</ph> or <ph id="ph3">`deleteIntent`</ph> in the <ph id="ph4">`Notification`</ph> object.</source>
          <target state="new">For system notifications, you overrode the <ph id="ph1">`onNotificationPrepared`</ph> and you modified <ph id="ph2">`contentIntent`</ph> or <ph id="ph3">`deleteIntent`</ph> in the <ph id="ph4">`Notification`</ph> object.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For in-app notifications, you overrode <ph id="ph1">`prepareInAppArea`</ph>, be sure to map at least <ph id="ph2">`actionNotification`</ph> to one of your U.I controls.</source>
          <target state="new">For in-app notifications, you overrode <ph id="ph1">`prepareInAppArea`</ph>, be sure to map at least <ph id="ph2">`actionNotification`</ph> to one of your U.I controls.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If <ph id="ph2">`handleNotification`</ph> throws an exception, the content is deleted and <ph id="ph3">`dropContent`</ph> is called.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If <ph id="ph2">`handleNotification`</ph> throws an exception, the content is deleted and <ph id="ph3">`dropContent`</ph> is called.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This is reported in statistics and next campaigns can now be processed.</source>
          <target state="new">This is reported in statistics and next campaigns can now be processed.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Announcements and polls</source>
          <target state="new">Announcements and polls</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="new">Layouts</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You can modify the <ph id="ph1">`engagement_text_announcement.xml`</ph>, <ph id="ph2">`engagement_web_announcement.xml`</ph> and <ph id="ph3">`engagement_poll.xml`</ph> files to customize text announcements, web announcements and polls.</source>
          <target state="new">You can modify the <ph id="ph1">`engagement_text_announcement.xml`</ph>, <ph id="ph2">`engagement_web_announcement.xml`</ph> and <ph id="ph3">`engagement_poll.xml`</ph> files to customize text announcements, web announcements and polls.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>These files share two common layouts for the title area and the button area.</source>
          <target state="new">These files share two common layouts for the title area and the button area.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The layout for the title is <ph id="ph1">`engagement_content_title.xml`</ph> and uses the eponymous drawable file for the background.</source>
          <target state="new">The layout for the title is <ph id="ph1">`engagement_content_title.xml`</ph> and uses the eponymous drawable file for the background.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The layout for the action and exit buttons is <ph id="ph1">`engagement_button_bar.xml`</ph> and uses the eponymous drawable file for the background.</source>
          <target state="new">The layout for the action and exit buttons is <ph id="ph1">`engagement_button_bar.xml`</ph> and uses the eponymous drawable file for the background.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In a poll, the question layout and their choices are dynamically inflated using several times the <ph id="ph1">`engagement_question.xml`</ph> layout file for the questions and the <ph id="ph2">`engagement_choice.xml`</ph> file for the choices.</source>
          <target state="new">In a poll, the question layout and their choices are dynamically inflated using several times the <ph id="ph1">`engagement_question.xml`</ph> layout file for the questions and the <ph id="ph2">`engagement_choice.xml`</ph> file for the choices.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Categories</source>
          <target state="new">Categories</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Alternate layouts</source>
          <target state="new">Alternate layouts</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Like notifications, the campaign's category can be used to have alternate layouts for your announcements and polls.</source>
          <target state="new">Like notifications, the campaign's category can be used to have alternate layouts for your announcements and polls.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For example, to create a category for a text announcement, you can extend <ph id="ph1">`EngagementTextAnnouncementActivity`</ph> and reference it the <ph id="ph2">`AndroidManifest.xml`</ph> file:</source>
          <target state="new">For example, to create a category for a text announcement, you can extend <ph id="ph1">`EngagementTextAnnouncementActivity`</ph> and reference it the <ph id="ph2">`AndroidManifest.xml`</ph> file:</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Note that the category in the intent filter is used to make the difference with the default announcement activity.</source>
          <target state="new">Note that the category in the intent filter is used to make the difference with the default announcement activity.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The Reach SDK uses the intent system to resolve the right activity for a specific category and it falls back on the default category if the resolution failed.</source>
          <target state="new">The Reach SDK uses the intent system to resolve the right activity for a specific category and it falls back on the default category if the resolution failed.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Then you have to implement <ph id="ph1">`MyCustomTextAnnouncementActivity`</ph>, if you just want to change the layout (but keep the same view identifiers), you just have to define the class like in the following example:</source>
          <target state="new">Then you have to implement <ph id="ph1">`MyCustomTextAnnouncementActivity`</ph>, if you just want to change the layout (but keep the same view identifiers), you just have to define the class like in the following example:</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>To replace the default category of text announcements, simply replace <ph id="ph1">`android:name="com.microsoft.azure.engagement.reach.activity.EngagementTextAnnouncementActivity"`</ph> by your implementation.</source>
          <target state="new">To replace the default category of text announcements, simply replace <ph id="ph1">`android:name="com.microsoft.azure.engagement.reach.activity.EngagementTextAnnouncementActivity"`</ph> by your implementation.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Web announcements and polls can be customized in a similar fashion.</source>
          <target state="new">Web announcements and polls can be customized in a similar fashion.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For web announcements you can extend <ph id="ph1">`EngagementWebAnnouncementActivity`</ph> and declare your activity in the <ph id="ph2">`AndroidManifest.xml`</ph> like in the following example:</source>
          <target state="new">For web announcements you can extend <ph id="ph1">`EngagementWebAnnouncementActivity`</ph> and declare your activity in the <ph id="ph2">`AndroidManifest.xml`</ph> like in the following example:</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For polls you can extend <ph id="ph1">`EngagementPollActivity`</ph> and declare your in the <ph id="ph2">`AndroidManifest.xml`</ph> like in the following example:</source>
          <target state="new">For polls you can extend <ph id="ph1">`EngagementPollActivity`</ph> and declare your in the <ph id="ph2">`AndroidManifest.xml`</ph> like in the following example:</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Implementation from scratch</source>
          <target state="new">Implementation from scratch</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>You can implement categories for your announcement (and poll) activities without extending one of the <ph id="ph1">`Engagement*Activity`</ph> classes provided by the Reach SDK.</source>
          <target state="new">You can implement categories for your announcement (and poll) activities without extending one of the <ph id="ph1">`Engagement*Activity`</ph> classes provided by the Reach SDK.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This is useful for example if you want to define a layout that does not use the same views as the standard layouts.</source>
          <target state="new">This is useful for example if you want to define a layout that does not use the same views as the standard layouts.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Like for advanced notification customization, it is recommended to look at the source code of the standard implementation.</source>
          <target state="new">Like for advanced notification customization, it is recommended to look at the source code of the standard implementation.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Here are some things to keep in mind: Reach will launch the activity with a specific intent (corresponding to the intent filter) plus an extra parameter which is the content identifier.</source>
          <target state="new">Here are some things to keep in mind: Reach will launch the activity with a specific intent (corresponding to the intent filter) plus an extra parameter which is the content identifier.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To retrieve the content object which contain the fields you specified when creating the campaign on the web site you can do this:</source>
          <target state="new">To retrieve the content object which contain the fields you specified when creating the campaign on the web site you can do this:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For statistics, you should report the content is displayed in the <ph id="ph1">`onResume`</ph> event:</source>
          <target state="new">For statistics, you should report the content is displayed in the <ph id="ph1">`onResume`</ph> event:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Then, don't forget to call either <ph id="ph1">`actionContent(this)`</ph> or <ph id="ph2">`exitContent(this)`</ph> on the content object before the activity goes into background.</source>
          <target state="new">Then, don't forget to call either <ph id="ph1">`actionContent(this)`</ph> or <ph id="ph2">`exitContent(this)`</ph> on the content object before the activity goes into background.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If you don't call either <ph id="ph1">`actionContent`</ph> or <ph id="ph2">`exitContent`</ph>, statistics won't be sent (i.e. no analytics on the campaign) and more importantly, the next campaigns will not be notified until the application process is restarted.</source>
          <target state="new">If you don't call either <ph id="ph1">`actionContent`</ph> or <ph id="ph2">`exitContent`</ph>, statistics won't be sent (i.e. no analytics on the campaign) and more importantly, the next campaigns will not be notified until the application process is restarted.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Orientation or other configuration changes can make the code tricky to determine whether the activity goes into background or not, the standard implementation makes sure the content is reported as exited if the user leaves the activity (either by pressing <ph id="ph1">`HOME`</ph> or <ph id="ph2">`BACK`</ph>) but not if the orientation changes.</source>
          <target state="new">Orientation or other configuration changes can make the code tricky to determine whether the activity goes into background or not, the standard implementation makes sure the content is reported as exited if the user leaves the activity (either by pressing <ph id="ph1">`HOME`</ph> or <ph id="ph2">`BACK`</ph>) but not if the orientation changes.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Here is the interesting part of the implementation:</source>
          <target state="new">Here is the interesting part of the implementation:</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>As you can see, if you called <ph id="ph1">`actionContent(this)`</ph> then finished the activity, <ph id="ph2">`exitContent(this)`</ph> can be safely called without having any effect.</source>
          <target state="new">As you can see, if you called <ph id="ph1">`actionContent(this)`</ph> then finished the activity, <ph id="ph2">`exitContent(this)`</ph> can be safely called without having any effect.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Test</source>
          <target state="new">Test</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Now please verify your integration by reading How to Test Engagement Integration on Android.</source>
          <target state="new">Now please verify your integration by reading How to Test Engagement Integration on Android.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdcebc332d5d16de256dc27ce760a52e27fda8eb</xliffext:olfilehash>
  </header>
</xliff>