<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a Windows Store leaderboard app with .NET Backend | Microsoft Azure</source>
          <target state="new">Creating a Windows Store leaderboard app with .NET Backend | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to build a Windows Store leaderboard app using Azure Mobile Services with a .NET backend.</source>
          <target state="new">Learn how to build a Windows Store leaderboard app using Azure Mobile Services with a .NET backend.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creating a Leaderboard App with Azure Mobile Services .NET Backend</source>
          <target state="new">Creating a Leaderboard App with Azure Mobile Services .NET Backend</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial shows how build a Windows Store app using Azure Mobile Services with a .NET backend.</source>
          <target state="new">This tutorial shows how build a Windows Store app using Azure Mobile Services with a .NET backend.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Mobile Services provides a scalable and secure backend with built-in authentication, monitoring, push notifications, and other features, plus a cross-platform client library for building mobile apps.</source>
          <target state="new">Azure Mobile Services provides a scalable and secure backend with built-in authentication, monitoring, push notifications, and other features, plus a cross-platform client library for building mobile apps.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The .NET backend for Mobile Services is based on <bpt id="p1">[</bpt>ASP.NET Web API<ept id="p1">](http://asp.net/web-api)</ept>, and gives .NET developers a first-class way to create REST APIs.</source>
          <target state="new">The .NET backend for Mobile Services is based on <bpt id="p1">[</bpt>ASP.NET Web API<ept id="p1">](http://asp.net/web-api)</ept>, and gives .NET developers a first-class way to create REST APIs.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Web API is an open-source framework that gives .NET developers a first-class way to create REST APIs.</source>
          <target state="new">Web API is an open-source framework that gives .NET developers a first-class way to create REST APIs.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can host a Web API solution on Azure Websites, on Azure Mobile Services using the .NET backend, or even self-hosted in a custom process.</source>
          <target state="new">You can host a Web API solution on Azure Websites, on Azure Mobile Services using the .NET backend, or even self-hosted in a custom process.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Mobile Services is a hosting environment that is designed especially for mobile apps.</source>
          <target state="new">Mobile Services is a hosting environment that is designed especially for mobile apps.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you host your Web API service on Mobile Services, you get the following advantages in addition to data storage:</source>
          <target state="new">When you host your Web API service on Mobile Services, you get the following advantages in addition to data storage:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Built-in authentication with social providers and Azure Active Directory (AAD).</source>
          <target state="new">Built-in authentication with social providers and Azure Active Directory (AAD).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Push notifications to apps using device-specific notification services.</source>
          <target state="new">Push notifications to apps using device-specific notification services.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A full set of client libraries that make it easy to access your service from any app.</source>
          <target state="new">A full set of client libraries that make it easy to access your service from any app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Built-in logging and diagnostics.</source>
          <target state="new">Built-in logging and diagnostics.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this tutorial you will:</source>
          <target state="new">In this tutorial you will:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create a REST API using Azure Mobile Services.</source>
          <target state="new">Create a REST API using Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Publish the service to Azure.</source>
          <target state="new">Publish the service to Azure.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a Windows Store app that consumes the service.</source>
          <target state="new">Create a Windows Store app that consumes the service.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use Entity Framework (EF) to create foreign key relations and data transfer objects (DTOs).</source>
          <target state="new">Use Entity Framework (EF) to create foreign key relations and data transfer objects (DTOs).</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use ASP.NET Web API to define a custom API.</source>
          <target state="new">Use ASP.NET Web API to define a custom API.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This tutorial uses <bpt id="p1">[</bpt>Visual Studio 2013 latest update<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=390465)</ept>.</source>
          <target state="new">This tutorial uses <bpt id="p1">[</bpt>Visual Studio 2013 latest update<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=390465)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>About the sample app</source>
          <target state="new">About the sample app</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>leaderboard<ept id="p1">*</ept> shows a list of players for a game, along with their scores and the rank of each player.</source>
          <target state="new">A <bpt id="p1">*</bpt>leaderboard<ept id="p1">*</ept> shows a list of players for a game, along with their scores and the rank of each player.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A leaderboard might be part of a larger game, or could be a separate app.</source>
          <target state="new">A leaderboard might be part of a larger game, or could be a separate app.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A leaderboard is a real-world application, but is simple enough for a tutorial.</source>
          <target state="new">A leaderboard is a real-world application, but is simple enough for a tutorial.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here is a screen shot of the app:</source>
          <target state="new">Here is a screen shot of the app:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To keep the app simple, there is no actual game.</source>
          <target state="new">To keep the app simple, there is no actual game.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instead, you can add players and submit a score for each player.</source>
          <target state="new">Instead, you can add players and submit a score for each player.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you submit a score, the mobile service calculates the new rankings.</source>
          <target state="new">When you submit a score, the mobile service calculates the new rankings.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the back end, the mobile service creates a database with two tables:</source>
          <target state="new">On the back end, the mobile service creates a database with two tables:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Player.</source>
          <target state="new">Player.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Contains the player ID and name.</source>
          <target state="new">Contains the player ID and name.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>PlayerRank.</source>
          <target state="new">PlayerRank.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Contains a player's score and rank.</source>
          <target state="new">Contains a player's score and rank.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>PlayerRank has a foreign key to Player.</source>
          <target state="new">PlayerRank has a foreign key to Player.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each player has zero or one PlayerRank.</source>
          <target state="new">Each player has zero or one PlayerRank.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In a real leaderboard app, PlayerRank might also have a game ID, so that a player could submit scores for more than one game.</source>
          <target state="new">In a real leaderboard app, PlayerRank might also have a game ID, so that a player could submit scores for more than one game.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The client app can perform the full set of CRUD operations on Players.</source>
          <target state="new">The client app can perform the full set of CRUD operations on Players.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It can read or delete existing PlayerRank entities, but it cannot create or update them directly.</source>
          <target state="new">It can read or delete existing PlayerRank entities, but it cannot create or update them directly.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That's because the rank value is calculated by the service.</source>
          <target state="new">That's because the rank value is calculated by the service.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Instead, the client submits a score, and the service updates the ranks for all players.</source>
          <target state="new">Instead, the client submits a score, and the service updates the ranks for all players.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Download the completed project <bpt id="p1">[</bpt>here<ept id="p1">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.</source>
          <target state="new">Download the completed project <bpt id="p1">[</bpt>here<ept id="p1">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Create the project</source>
          <target state="new">Create the project</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Launch Visual Studio and create a new ASP.NET Web Application project.</source>
          <target state="new">Launch Visual Studio and create a new ASP.NET Web Application project.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Name the project Leaderboard.</source>
          <target state="new">Name the project Leaderboard.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2013, the ASP.NET Web Application project includes a template for Azure Mobile Service.</source>
          <target state="new">In Visual Studio 2013, the ASP.NET Web Application project includes a template for Azure Mobile Service.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Select this template and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Select this template and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The project template includes an example controller and data object.</source>
          <target state="new">The project template includes an example controller and data object.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These aren't needed for the tutorial, so you can delete them from the project.</source>
          <target state="new">These aren't needed for the tutorial, so you can delete them from the project.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Also remove the references to TodoItem  in WebApiConfig.cs and LeaderboardContext.cs.</source>
          <target state="new">Also remove the references to TodoItem  in WebApiConfig.cs and LeaderboardContext.cs.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Add data models</source>
          <target state="new">Add data models</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You will use <bpt id="p1">[</bpt>EF Code First<ept id="p1">](http://msdn.microsoft.com/data/ee712907#codefirst)</ept> to define the database tables.</source>
          <target state="new">You will use <bpt id="p1">[</bpt>EF Code First<ept id="p1">](http://msdn.microsoft.com/data/ee712907#codefirst)</ept> to define the database tables.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Under the DataObjects folder, add a class named <ph id="ph1">`Player`</ph>.</source>
          <target state="new">Under the DataObjects folder, add a class named <ph id="ph1">`Player`</ph>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add another class named <ph id="ph1">`PlayerRank`</ph>.</source>
          <target state="new">Add another class named <ph id="ph1">`PlayerRank`</ph>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Notice that both classes inherit from the <bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> class.</source>
          <target state="new">Notice that both classes inherit from the <bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Deriving from <bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> makes it easy for the app consume the data, using the cross-platform client library for Azure Mobile Services.</source>
          <target state="new">Deriving from <bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> makes it easy for the app consume the data, using the cross-platform client library for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> also makes it easier for an app to <bpt id="p2">[</bpt>handle database write conflicts<ept id="p2">](mobile-services-windows-store-dotnet-handle-database-conflicts.md)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>EntityData<ept id="p1">**</ept> also makes it easier for an app to <bpt id="p2">[</bpt>handle database write conflicts<ept id="p2">](mobile-services-windows-store-dotnet-handle-database-conflicts.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PlayerRank`</ph> class has a <bpt id="p1">[</bpt>navigation property<ept id="p1">](http://msdn.microsoft.com/data/jj713564.aspx)</ept> that points to the related <ph id="ph2">`Player`</ph> entity.</source>
          <target state="new">The <ph id="ph1">`PlayerRank`</ph> class has a <bpt id="p1">[</bpt>navigation property<ept id="p1">](http://msdn.microsoft.com/data/jj713564.aspx)</ept> that points to the related <ph id="ph2">`Player`</ph> entity.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>[ForeignKey]<ept id="p1">**</ept> attribute tells EF that the <ph id="ph1">`Player`</ph> property represents a foreign key.</source>
          <target state="new">The <bpt id="p1">**</bpt>[ForeignKey]<ept id="p1">**</ept> attribute tells EF that the <ph id="ph1">`Player`</ph> property represents a foreign key.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add Web API controllers</source>
          <target state="new">Add Web API controllers</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Next, you will add Web API controllers for <ph id="ph1">`Player`</ph> and <ph id="ph2">`PlayerRank`</ph>.</source>
          <target state="new">Next, you will add Web API controllers for <ph id="ph1">`Player`</ph> and <ph id="ph2">`PlayerRank`</ph>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Instead of plain Web API controllers, you will add a special kind of controller called a <bpt id="p1">*</bpt>table controller<ept id="p1">*</ept>, designed specifically for Azure Mobile Services.</source>
          <target state="new">Instead of plain Web API controllers, you will add a special kind of controller called a <bpt id="p1">*</bpt>table controller<ept id="p1">*</ept>, designed specifically for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Right click the Controllers folder &gt;  <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>New Scaffolded Item<ept id="p2">**</ept>.</source>
          <target state="new">Right click the Controllers folder &gt;  <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>New Scaffolded Item<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Scaffold<ept id="p1">**</ept> dialog, expand <bpt id="p2">**</bpt>Common<ept id="p2">**</ept> on the left and select <bpt id="p3">**</bpt>Azure Mobile Services<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add Scaffold<ept id="p1">**</ept> dialog, expand <bpt id="p2">**</bpt>Common<ept id="p2">**</ept> on the left and select <bpt id="p3">**</bpt>Azure Mobile Services<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Then select <bpt id="p1">**</bpt>Azure Mobile Services Table Controller<ept id="p1">**</ept>.</source>
          <target state="new">Then select <bpt id="p1">**</bpt>Azure Mobile Services Table Controller<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Controller<ept id="p1">**</ept> dialog:</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add Controller<ept id="p1">**</ept> dialog:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Model class<ept id="p1">**</ept>, select Player.</source>
          <target state="new">Under <bpt id="p1">**</bpt>Model class<ept id="p1">**</ept>, select Player.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Data context class<ept id="p1">**</ept>, select MobileServiceContext.</source>
          <target state="new">Under <bpt id="p1">**</bpt>Data context class<ept id="p1">**</ept>, select MobileServiceContext.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Name the controller "PlayerController".</source>
          <target state="new">Name the controller "PlayerController".</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This step adds a file named PlayerController.cs to the project.</source>
          <target state="new">This step adds a file named PlayerController.cs to the project.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The controller derives from <bpt id="p1">**</bpt>TableController<ph id="ph1">&lt;T&gt;</ph><ept id="p1">**</ept>.</source>
          <target state="new">The controller derives from <bpt id="p1">**</bpt>TableController<ph id="ph1">&lt;T&gt;</ph><ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This class inherits <bpt id="p1">**</bpt>ApiController<ept id="p1">**</ept>, but is specialized for Azure Mobile Services.</source>
          <target state="new">This class inherits <bpt id="p1">**</bpt>ApiController<ept id="p1">**</ept>, but is specialized for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Routing: The default route for a <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> is <ph id="ph1">`/tables/{table_name}/{id}`</ph>, where <bpt id="p2">*</bpt>table_name<ept id="p2">*</ept> matches the entity name.</source>
          <target state="new">Routing: The default route for a <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> is <ph id="ph1">`/tables/{table_name}/{id}`</ph>, where <bpt id="p2">*</bpt>table_name<ept id="p2">*</ept> matches the entity name.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>So the route for the Player controller is <bpt id="p1">*</bpt>/tables/player/{id}<ept id="p1">*</ept>.</source>
          <target state="new">So the route for the Player controller is <bpt id="p1">*</bpt>/tables/player/{id}<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This routing convention makes <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> consistent with the Mobile Services <bpt id="p2">[</bpt>REST API<ept id="p2">](http://msdn.microsoft.com/library/azure/jj710104.aspx)</ept>.</source>
          <target state="new">This routing convention makes <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> consistent with the Mobile Services <bpt id="p2">[</bpt>REST API<ept id="p2">](http://msdn.microsoft.com/library/azure/jj710104.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Data access: For database operations, the <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> class uses the <bpt id="p2">**</bpt>IDomainManager<ept id="p2">**</ept> interface, which defines an abstraction for data access.</source>
          <target state="new">Data access: For database operations, the <bpt id="p1">**</bpt>TableController<ept id="p1">**</ept> class uses the <bpt id="p2">**</bpt>IDomainManager<ept id="p2">**</ept> interface, which defines an abstraction for data access.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The scaffolding uses <bpt id="p1">**</bpt>EntityDomainManager<ept id="p1">**</ept>, which is a concrete implementation of <bpt id="p2">**</bpt>IDomainManager<ept id="p2">**</ept> that wraps an EF context.</source>
          <target state="new">The scaffolding uses <bpt id="p1">**</bpt>EntityDomainManager<ept id="p1">**</ept>, which is a concrete implementation of <bpt id="p2">**</bpt>IDomainManager<ept id="p2">**</ept> that wraps an EF context.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Now add a second controller for PlayerRank entities.</source>
          <target state="new">Now add a second controller for PlayerRank entities.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Follow the same steps, but choose PlayerRank for the model class.</source>
          <target state="new">Follow the same steps, but choose PlayerRank for the model class.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the same data context class; don't create a new one.</source>
          <target state="new">Use the same data context class; don't create a new one.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Name the controller "PlayerRankController".</source>
          <target state="new">Name the controller "PlayerRankController".</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Use a DTO to return related entities</source>
          <target state="new">Use a DTO to return related entities</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Recall that <ph id="ph1">`PlayerRank`</ph> has a related <ph id="ph2">`Player`</ph> entity:</source>
          <target state="new">Recall that <ph id="ph1">`PlayerRank`</ph> has a related <ph id="ph2">`Player`</ph> entity:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The Mobile Service client library does not support navigation properties, and they will not be serialized.</source>
          <target state="new">The Mobile Service client library does not support navigation properties, and they will not be serialized.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For example, here is the raw HTTP response for GET <ph id="ph1">`/tables/PlayerRank`</ph>:</source>
          <target state="new">For example, here is the raw HTTP response for GET <ph id="ph1">`/tables/PlayerRank`</ph>:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`Player`</ph> is not included in the object graph.</source>
          <target state="new">Notice that <ph id="ph1">`Player`</ph> is not included in the object graph.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To include the player, we can flatten the object graph by defining a <bpt id="p1">*</bpt>data transfer object<ept id="p1">*</ept> (DTO).</source>
          <target state="new">To include the player, we can flatten the object graph by defining a <bpt id="p1">*</bpt>data transfer object<ept id="p1">*</ept> (DTO).</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A DTO is an object that defines how data is sent over the network.</source>
          <target state="new">A DTO is an object that defines how data is sent over the network.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>DTOs are useful whenever you want the wire format to look different than your database model.</source>
          <target state="new">DTOs are useful whenever you want the wire format to look different than your database model.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To create a DTO for <ph id="ph1">`PlayerRank`</ph>, add a new class named <ph id="ph2">`PlayerRankDto`</ph> in the DataObjects folder.</source>
          <target state="new">To create a DTO for <ph id="ph1">`PlayerRank`</ph>, add a new class named <ph id="ph2">`PlayerRankDto`</ph> in the DataObjects folder.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`PlayerRankController`</ph> class, we'll use the LINQ <bpt id="p1">**</bpt>Select<ept id="p1">**</ept> method to convert <ph id="ph2">`PlayerRank`</ph> instances to <ph id="ph3">`PlayerRankDto`</ph> instances.</source>
          <target state="new">In the <ph id="ph1">`PlayerRankController`</ph> class, we'll use the LINQ <bpt id="p1">**</bpt>Select<ept id="p1">**</ept> method to convert <ph id="ph2">`PlayerRank`</ph> instances to <ph id="ph3">`PlayerRankDto`</ph> instances.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Update the <ph id="ph1">`GetAllPlayerRank`</ph> and <ph id="ph2">`GetPlayerRank`</ph> controller methods as follows:</source>
          <target state="new">Update the <ph id="ph1">`GetAllPlayerRank`</ph> and <ph id="ph2">`GetPlayerRank`</ph> controller methods as follows:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>With these changes, the two GET methods return <ph id="ph1">`PlayerRankDto`</ph> objects to the client.</source>
          <target state="new">With these changes, the two GET methods return <ph id="ph1">`PlayerRankDto`</ph> objects to the client.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PlayerRankDto.PlayerName`</ph> property is set to the player name.</source>
          <target state="new">The <ph id="ph1">`PlayerRankDto.PlayerName`</ph> property is set to the player name.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Here is an example response after making this change:</source>
          <target state="new">Here is an example response after making this change:</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Notice that the JSON payload now includes the player names.</source>
          <target state="new">Notice that the JSON payload now includes the player names.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Instead of using LINQ Select statements, another option is to use AutoMapper.</source>
          <target state="new">Instead of using LINQ Select statements, another option is to use AutoMapper.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This option requires some additional setup code, but enables automatic mapping from domain entities to DTOs.</source>
          <target state="new">This option requires some additional setup code, but enables automatic mapping from domain entities to DTOs.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Mapping between Database Types and Client Types in the .NET Backend using AutoMapper<ept id="p1">](http://blogs.msdn.com/b/azuremobile/archive/2014/05/19/mapping-between-database-types-and-client-type-in-the-net-backend-using-automapper.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Mapping between Database Types and Client Types in the .NET Backend using AutoMapper<ept id="p1">](http://blogs.msdn.com/b/azuremobile/archive/2014/05/19/mapping-between-database-types-and-client-type-in-the-net-backend-using-automapper.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Define a custom API to submit scores</source>
          <target state="new">Define a custom API to submit scores</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PlayerRank`</ph> entity includes a <ph id="ph2">`Rank`</ph> property.</source>
          <target state="new">The <ph id="ph1">`PlayerRank`</ph> entity includes a <ph id="ph2">`Rank`</ph> property.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This value is calculated by the server, and we don't want clients setting it.</source>
          <target state="new">This value is calculated by the server, and we don't want clients setting it.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Instead, clients will use a custom API to submit a player's score.</source>
          <target state="new">Instead, clients will use a custom API to submit a player's score.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When the server gets a new score, it will update all of the player ranks.</source>
          <target state="new">When the server gets a new score, it will update all of the player ranks.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>First, add a class named <ph id="ph1">`PlayerScore`</ph> to the DataObjects folder.</source>
          <target state="new">First, add a class named <ph id="ph1">`PlayerScore`</ph> to the DataObjects folder.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`PlayerRankController`</ph> class, move the <ph id="ph2">`MobileServiceContext`</ph> variable from the constructor to a class variable:</source>
          <target state="new">In the <ph id="ph1">`PlayerRankController`</ph> class, move the <ph id="ph2">`MobileServiceContext`</ph> variable from the constructor to a class variable:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Delete the following methods from <ph id="ph1">`PlayerRankController`</ph>:</source>
          <target state="new">Delete the following methods from <ph id="ph1">`PlayerRankController`</ph>:</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Then add the following code to <ph id="ph1">`PlayerRankController`</ph>:</source>
          <target state="new">Then add the following code to <ph id="ph1">`PlayerRankController`</ph>:</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PostPlayerScore`</ph> method takes a <ph id="ph2">`PlayerScore`</ph> instance as input.</source>
          <target state="new">The <ph id="ph1">`PostPlayerScore`</ph> method takes a <ph id="ph2">`PlayerScore`</ph> instance as input.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>(The client will send the <ph id="ph1">`PlayerScore`</ph> in an HTTP POST request.) The method does the following:</source>
          <target state="new">(The client will send the <ph id="ph1">`PlayerScore`</ph> in an HTTP POST request.) The method does the following:</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Adds a new <ph id="ph1">`PlayerRank`</ph> for the player, if there isn't one in the database already.</source>
          <target state="new">Adds a new <ph id="ph1">`PlayerRank`</ph> for the player, if there isn't one in the database already.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Updates the player's score.</source>
          <target state="new">Updates the player's score.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Run a SQL query that batch updates all of the player ranks.</source>
          <target state="new">Run a SQL query that batch updates all of the player ranks.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>[Route]<ept id="p1">**</ept> attribute defines a custom route for this method:</source>
          <target state="new">The <bpt id="p1">**</bpt>[Route]<ept id="p1">**</ept> attribute defines a custom route for this method:</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You could also put the method into a separate controller.</source>
          <target state="new">You could also put the method into a separate controller.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>There is no particular advantage either way, it just depends how you want to organize your code.</source>
          <target state="new">There is no particular advantage either way, it just depends how you want to organize your code.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To learn more about the <bpt id="p1">**</bpt>[Route]<ept id="p1">**</ept> attribute, see <bpt id="p2">[</bpt>Attribute Routing in Web API<ept id="p2">](http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2)</ept>.</source>
          <target state="new">To learn more about the <bpt id="p1">**</bpt>[Route]<ept id="p1">**</ept> attribute, see <bpt id="p2">[</bpt>Attribute Routing in Web API<ept id="p2">](http://www.asp.net/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2)</ept>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Create the Windows Store app</source>
          <target state="new">Create the Windows Store app</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this section, I'll describe the Windows Store app that consumes the mobile service.</source>
          <target state="new">In this section, I'll describe the Windows Store app that consumes the mobile service.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>However, I won't focus much on the XAML or the UI.</source>
          <target state="new">However, I won't focus much on the XAML or the UI.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Instead, I want to focus on the application logic.</source>
          <target state="new">Instead, I want to focus on the application logic.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can download the complete project <bpt id="p1">[</bpt>here<ept id="p1">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.</source>
          <target state="new">You can download the complete project <bpt id="p1">[</bpt>here<ept id="p1">](http://code.msdn.microsoft.com/Leaderboard-App-with-Azure-9acf63af)</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Add a new Windows Store App project to the solution.</source>
          <target state="new">Add a new Windows Store App project to the solution.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>I used the Blank App (Windows) template.</source>
          <target state="new">I used the Blank App (Windows) template.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Use NuGet Package Manager to add the Mobile Services client library.</source>
          <target state="new">Use NuGet Package Manager to add the Mobile Services client library.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In Visual Studio, from the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>NuGet Package Manager<ept id="p2">**</ept>.</source>
          <target state="new">In Visual Studio, from the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>NuGet Package Manager<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Then select <bpt id="p1">**</bpt>Package Manager Console<ept id="p1">**</ept>.</source>
          <target state="new">Then select <bpt id="p1">**</bpt>Package Manager Console<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In the Package Manager Console window, type the following command.</source>
          <target state="new">In the Package Manager Console window, type the following command.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The -Project switch specifies which project to install the package to.</source>
          <target state="new">The -Project switch specifies which project to install the package to.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Add model classes</source>
          <target state="new">Add model classes</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Create a folder named Models and add the following classes:</source>
          <target state="new">Create a folder named Models and add the following classes:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>These classes correspond directly to the data entities in the mobile service.</source>
          <target state="new">These classes correspond directly to the data entities in the mobile service.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Create a view model</source>
          <target state="new">Create a view model</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Model-View-ViewModel (MVVM) is a variant of Model-View-Controller (MVC).</source>
          <target state="new">Model-View-ViewModel (MVVM) is a variant of Model-View-Controller (MVC).</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The MVVM pattern helps separate application logic from presentation.</source>
          <target state="new">The MVVM pattern helps separate application logic from presentation.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The model represents the domain data (player, player rank, and player score).</source>
          <target state="new">The model represents the domain data (player, player rank, and player score).</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The view model is an abstract representation of the view.</source>
          <target state="new">The view model is an abstract representation of the view.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The view displays the view model and sends user input to the view model.</source>
          <target state="new">The view displays the view model and sends user input to the view model.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For a Windows Store app, the view is defined in XAML.</source>
          <target state="new">For a Windows Store app, the view is defined in XAML.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Add a class named <ph id="ph1">`LeaderboardViewModel`</ph>.</source>
          <target state="new">Add a class named <ph id="ph1">`LeaderboardViewModel`</ph>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> on the view model, so the view model can participate in data binding.</source>
          <target state="new">Implement <bpt id="p1">**</bpt>INotifyPropertyChanged<ept id="p1">**</ept> on the view model, so the view model can participate in data binding.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Next, add observable properties.</source>
          <target state="new">Next, add observable properties.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The XAML will data bind to these properties.</source>
          <target state="new">The XAML will data bind to these properties.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsPending`</ph> property is true while an async operation is pending on the service.</source>
          <target state="new">The <ph id="ph1">`IsPending`</ph> property is true while an async operation is pending on the service.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ErrorMessage`</ph> property holds any error message from the service.</source>
          <target state="new">The <ph id="ph1">`ErrorMessage`</ph> property holds any error message from the service.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Finally, add methods that call through to the service layer.</source>
          <target state="new">Finally, add methods that call through to the service layer.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Add a MobileServiceClient instance</source>
          <target state="new">Add a MobileServiceClient instance</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">*</bpt>App.xaml.cs<ept id="p1">*</ept>file and add a <bpt id="p2">**</bpt>MobileServiceClient<ept id="p2">**</ept> instance to the <ph id="ph1">`App`</ph> class.</source>
          <target state="new">Open the <bpt id="p1">*</bpt>App.xaml.cs<ept id="p1">*</ept>file and add a <bpt id="p2">**</bpt>MobileServiceClient<ept id="p2">**</ept> instance to the <ph id="ph1">`App`</ph> class.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When you debug locally, the mobile service runs on IIS express.</source>
          <target state="new">When you debug locally, the mobile service runs on IIS express.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Visual Studio assigns a random port number, so the local URL is http://localhost:<bpt id="p1">*</bpt>port<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>port<ept id="p2">*</ept> is the port number.</source>
          <target state="new">Visual Studio assigns a random port number, so the local URL is http://localhost:<bpt id="p1">*</bpt>port<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>port<ept id="p2">*</ept> is the port number.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To get the port number, start the service in Visual Studio by pressing F5 to debug.</source>
          <target state="new">To get the port number, start the service in Visual Studio by pressing F5 to debug.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Visual Studio will launch a browser and navigate to the service URL.</source>
          <target state="new">Visual Studio will launch a browser and navigate to the service URL.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You can also find the local URL in the project properties, under <bpt id="p1">**</bpt>Web<ept id="p1">**</ept>.</source>
          <target state="new">You can also find the local URL in the project properties, under <bpt id="p1">**</bpt>Web<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Create the main page</source>
          <target state="new">Create the main page</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In the main page, add an instance of the view model.</source>
          <target state="new">In the main page, add an instance of the view model.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Then set the view model as the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> for the page.</source>
          <target state="new">Then set the view model as the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> for the page.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>As I mentioned earlier, I won't show all of the XAML for the app.</source>
          <target state="new">As I mentioned earlier, I won't show all of the XAML for the app.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>One benefit of the MVVM pattern is to separate presentation from app logic, so it's easy to change the UI, if you don't like the sample app.</source>
          <target state="new">One benefit of the MVVM pattern is to separate presentation from app logic, so it's easy to change the UI, if you don't like the sample app.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The list of players is displayed in a <bpt id="p1">**</bpt>ListBox<ept id="p1">**</ept>:</source>
          <target state="new">The list of players is displayed in a <bpt id="p1">**</bpt>ListBox<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Rankings are displayed in a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>:</source>
          <target state="new">Rankings are displayed in a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>All data binding happens through the view model.</source>
          <target state="new">All data binding happens through the view model.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Publish your mobile service</source>
          <target state="new">Publish your mobile service</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In this step, you will publish your mobile service to Microsoft Azure and modify the app to use the live service.</source>
          <target state="new">In this step, you will publish your mobile service to Microsoft Azure and modify the app to use the live service.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the Leaderboard project and select <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the Leaderboard project and select <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept> dialog, click <bpt id="p2">**</bpt>Azure Mobile Services<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept> dialog, click <bpt id="p2">**</bpt>Azure Mobile Services<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If you are not signed into your Azure account already, click <bpt id="p1">**</bpt>Sign In<ept id="p1">**</ept>.</source>
          <target state="new">If you are not signed into your Azure account already, click <bpt id="p1">**</bpt>Sign In<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Select an existing Mobile Service, or click <bpt id="p1">**</bpt>New<ept id="p1">**</ept> to create a new one.</source>
          <target state="new">Select an existing Mobile Service, or click <bpt id="p1">**</bpt>New<ept id="p1">**</ept> to create a new one.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to publish.</source>
          <target state="new">Then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to publish.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The publishing process automatically creates the database.</source>
          <target state="new">The publishing process automatically creates the database.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You don't need to configure a connection string.</source>
          <target state="new">You don't need to configure a connection string.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Now you are ready to connect the leaderboard app to the live service.</source>
          <target state="new">Now you are ready to connect the leaderboard app to the live service.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You need two things:</source>
          <target state="new">You need two things:</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The URL of the service</source>
          <target state="new">The URL of the service</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The application key</source>
          <target state="new">The application key</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>You can get both from the Azure Management Portal.</source>
          <target state="new">You can get both from the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In the Management Portal, click <bpt id="p1">**</bpt>Mobile Services<ept id="p1">**</ept>, and then click the mobile service.</source>
          <target state="new">In the Management Portal, click <bpt id="p1">**</bpt>Mobile Services<ept id="p1">**</ept>, and then click the mobile service.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The service URL is listed on the dashboard tab.</source>
          <target state="new">The service URL is listed on the dashboard tab.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To get the application key, click <bpt id="p1">**</bpt>Manage Keys<ept id="p1">**</ept>.</source>
          <target state="new">To get the application key, click <bpt id="p1">**</bpt>Manage Keys<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Manage Access Keys<ept id="p1">**</ept> dialog, copy the value for the application key.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Manage Access Keys<ept id="p1">**</ept> dialog, copy the value for the application key.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Pass the service URL and the application key to the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> constructor.</source>
          <target state="new">Pass the service URL and the application key to the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> constructor.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Now when you run the app, it communicates with the real service.</source>
          <target state="new">Now when you run the app, it communicates with the real service.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>[Learn more about Azure Mobile Services]</source>
          <target state="new">[Learn more about Azure Mobile Services]</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>[Learn more about Web API]</source>
          <target state="new">[Learn more about Web API]</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>[Handle database write conflicts]</source>
          <target state="new">[Handle database write conflicts]</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>[Add push notifications]; for example, when someone adds a new player or updates a score.</source>
          <target state="new">[Add push notifications]; for example, when someone adds a new player or updates a score.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>[Get started with authentication]</source>
          <target state="new">[Get started with authentication]</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">933757cadfc171c12849235ed2c03f589ad1e335</xliffext:olfilehash>
  </header>
</xliff>