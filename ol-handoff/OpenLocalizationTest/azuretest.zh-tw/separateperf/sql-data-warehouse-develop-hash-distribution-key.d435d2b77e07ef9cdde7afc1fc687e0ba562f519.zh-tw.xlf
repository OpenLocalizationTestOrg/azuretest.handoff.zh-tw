<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Hash distribution and its effect on query performance in SQL Data Warehouse | Microsoft Azure</source>
          <target state="new">Hash distribution and its effect on query performance in SQL Data Warehouse | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about hash distributed tables and how they affect query performance in Azure SQL Data Warehouse for developing solutions.</source>
          <target state="new">Learn about hash distributed tables and how they affect query performance in Azure SQL Data Warehouse for developing solutions.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Hash distribution and its effect on query performance in SQL Data Warehouse</source>
          <target state="new">Hash distribution and its effect on query performance in SQL Data Warehouse</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Making smart hash distribution decisions is one of the most important ways to improve query performance.</source>
          <target state="new">Making smart hash distribution decisions is one of the most important ways to improve query performance.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are in fact three major factors:</source>
          <target state="new">There are in fact three major factors:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Minimize Data Movement</source>
          <target state="new">Minimize Data Movement</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Avoid Data Skew</source>
          <target state="new">Avoid Data Skew</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Provide Balanced Execution</source>
          <target state="new">Provide Balanced Execution</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Minimize data movement</source>
          <target state="new">Minimize data movement</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data Movement most commonly arises when tables are joined together or aggregations on tables are performed.</source>
          <target state="new">Data Movement most commonly arises when tables are joined together or aggregations on tables are performed.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Hash distributing tables on a shared key is one of the most effective methods for minimizing this movement.</source>
          <target state="new">Hash distributing tables on a shared key is one of the most effective methods for minimizing this movement.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, for the hash distribution to be effective in minimizing the movement the following criteria must all be true:</source>
          <target state="new">However, for the hash distribution to be effective in minimizing the movement the following criteria must all be true:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both tables need to be hash distributed and be joined on the shared distribution key</source>
          <target state="new">Both tables need to be hash distributed and be joined on the shared distribution key</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The data types of both columns need to match</source>
          <target state="new">The data types of both columns need to match</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The joining columns need to be equi-join (i.e. the values in the left table's column need to equal the values in the right table's column)</source>
          <target state="new">The joining columns need to be equi-join (i.e. the values in the left table's column need to equal the values in the right table's column)</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The join is <bpt id="p1">**</bpt>not<ept id="p1">**</ept> a <ph id="ph1">`CROSS JOIN`</ph></source>
          <target state="new">The join is <bpt id="p1">**</bpt>not<ept id="p1">**</ept> a <ph id="ph1">`CROSS JOIN`</ph></target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Columns used in <ph id="ph2">`JOIN`</ph>, <ph id="ph3">`GROUP BY`</ph>, <ph id="ph4">`DISTINCT`</ph> and <ph id="ph5">`HAVING`</ph> clauses all make for good HASH column candidates.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Columns used in <ph id="ph2">`JOIN`</ph>, <ph id="ph3">`GROUP BY`</ph>, <ph id="ph4">`DISTINCT`</ph> and <ph id="ph5">`HAVING`</ph> clauses all make for good HASH column candidates.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the other hand columns in the <ph id="ph1">`WHERE`</ph> clause do <bpt id="p1">**</bpt>not<ept id="p1">**</ept> make for good hash column candidates.</source>
          <target state="new">On the other hand columns in the <ph id="ph1">`WHERE`</ph> clause do <bpt id="p1">**</bpt>not<ept id="p1">**</ept> make for good hash column candidates.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See the section on balanced execution below.</source>
          <target state="new">See the section on balanced execution below.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Data movement may also arise from query syntax (<ph id="ph1">`COUNT DISTINCT`</ph> and the <ph id="ph2">`OVER`</ph> clause both being great examples) when used with columns that do not include the hash distribution key.</source>
          <target state="new">Data movement may also arise from query syntax (<ph id="ph1">`COUNT DISTINCT`</ph> and the <ph id="ph2">`OVER`</ph> clause both being great examples) when used with columns that do not include the hash distribution key.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Round-Robin tables typically generate data movement.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Round-Robin tables typically generate data movement.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The data in the table has been allocated in a non-deterministic fashion and so the data must first be moved prior to most queries being completed.</source>
          <target state="new">The data in the table has been allocated in a non-deterministic fashion and so the data must first be moved prior to most queries being completed.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Avoid data skew</source>
          <target state="new">Avoid data skew</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In order for hash distribution to be effective it is important that the column chosen exhibits the following properties:</source>
          <target state="new">In order for hash distribution to be effective it is important that the column chosen exhibits the following properties:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The column contains a significant number of distinct values.</source>
          <target state="new">The column contains a significant number of distinct values.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The column does not suffer from <bpt id="p1">**</bpt>data skew<ept id="p1">**</ept>.</source>
          <target state="new">The column does not suffer from <bpt id="p1">**</bpt>data skew<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each distinct value will be allocated to a distribution.</source>
          <target state="new">Each distinct value will be allocated to a distribution.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consequently, the data will require a reasonable number of distinct values to ensure enough unique hash values are generated.</source>
          <target state="new">Consequently, the data will require a reasonable number of distinct values to ensure enough unique hash values are generated.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Otherwise we might get a poor quality hash.</source>
          <target state="new">Otherwise we might get a poor quality hash.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the number of distributions exceeds the number of distinct values for example then some distributions will be left empty.</source>
          <target state="new">If the number of distributions exceeds the number of distinct values for example then some distributions will be left empty.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This would hurt performance.</source>
          <target state="new">This would hurt performance.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Similarly, if all of the rows for the hashed column contained the same value then the data is said to be <bpt id="p1">**</bpt>skewed<ept id="p1">**</ept>.</source>
          <target state="new">Similarly, if all of the rows for the hashed column contained the same value then the data is said to be <bpt id="p1">**</bpt>skewed<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this extreme case only one hash value would have been created resulting in all rows ending up inside a single distribution.</source>
          <target state="new">In this extreme case only one hash value would have been created resulting in all rows ending up inside a single distribution.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Ideally, each distinct value in the hashed column would have the same number of rows.</source>
          <target state="new">Ideally, each distinct value in the hashed column would have the same number of rows.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Round-robin tables do not exhibit signs of skew.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Round-robin tables do not exhibit signs of skew.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is because the data is stored evenly across the distributions.</source>
          <target state="new">This is because the data is stored evenly across the distributions.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Provide balanced execution</source>
          <target state="new">Provide balanced execution</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Balanced execution is achieved when each distribution has the same amount of work to perform.</source>
          <target state="new">Balanced execution is achieved when each distribution has the same amount of work to perform.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Massively Parallel Processing (MPP) is a team game; everyone has to cross the line before anyone can be declared the winner.</source>
          <target state="new">Massively Parallel Processing (MPP) is a team game; everyone has to cross the line before anyone can be declared the winner.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If every distribution has the same amount of work (i.e. data to process) then all of the queries will finish at about the same time.</source>
          <target state="new">If every distribution has the same amount of work (i.e. data to process) then all of the queries will finish at about the same time.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is known as balanced execution.</source>
          <target state="new">This is known as balanced execution.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As has been seen, data skew can affect balanced execution.</source>
          <target state="new">As has been seen, data skew can affect balanced execution.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, so can the choice of hash distribution key.</source>
          <target state="new">However, so can the choice of hash distribution key.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If a column has been chosen that appears in the <ph id="ph1">`WHERE`</ph> clause of a query then it is quite likely that the query will not be balanced.</source>
          <target state="new">If a column has been chosen that appears in the <ph id="ph1">`WHERE`</ph> clause of a query then it is quite likely that the query will not be balanced.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The <ph id="ph2">`WHERE`</ph> clause typically helps identify columns that are best used for partitioning.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The <ph id="ph2">`WHERE`</ph> clause typically helps identify columns that are best used for partitioning.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A good example of a column that appears in the <ph id="ph1">`WHERE`</ph> clause would be a date field.</source>
          <target state="new">A good example of a column that appears in the <ph id="ph1">`WHERE`</ph> clause would be a date field.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Date fields are a classic examples of great partitioning columns but often poor hash distribution columns.</source>
          <target state="new">Date fields are a classic examples of great partitioning columns but often poor hash distribution columns.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Typically, data warehouse queries are over a specified time period such as day, week or month.</source>
          <target state="new">Typically, data warehouse queries are over a specified time period such as day, week or month.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Hash distributing by date may have actually limited our scalablity and hurt our performance.</source>
          <target state="new">Hash distributing by date may have actually limited our scalablity and hurt our performance.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If for example the date range specified was for a week i.e. 7 days then the maximum number of hashes would be 7 - one for each day.</source>
          <target state="new">If for example the date range specified was for a week i.e. 7 days then the maximum number of hashes would be 7 - one for each day.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This means that only 7 of our distributions would contain data.</source>
          <target state="new">This means that only 7 of our distributions would contain data.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The remaining distributions would not have any data.</source>
          <target state="new">The remaining distributions would not have any data.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This would result in an unbalanced query execution as only 7 distributions are processing data.</source>
          <target state="new">This would result in an unbalanced query execution as only 7 distributions are processing data.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Round-robin tables typically provide balanced execution.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Round-robin tables typically provide balanced execution.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is because the data is stored evenly across the distributions.</source>
          <target state="new">This is because the data is stored evenly across the distributions.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
          <target state="new">Recommendations</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To maximize your performance and overall query throughput try and ensure that your hash distributed tables follow this pattern as much as possible:</source>
          <target state="new">To maximize your performance and overall query throughput try and ensure that your hash distributed tables follow this pattern as much as possible:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Hash distribution key:</source>
          <target state="new">Hash distribution key:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Is used in <ph id="ph1">`JOIN`</ph>, <ph id="ph2">`GROUP BY`</ph>, <ph id="ph3">`DISTINCT`</ph>, or <ph id="ph4">`HAVING`</ph> clauses in your queries.</source>
          <target state="new">Is used in <ph id="ph1">`JOIN`</ph>, <ph id="ph2">`GROUP BY`</ph>, <ph id="ph3">`DISTINCT`</ph>, or <ph id="ph4">`HAVING`</ph> clauses in your queries.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Is not used in <ph id="ph1">`WHERE`</ph> clauses</source>
          <target state="new">Is not used in <ph id="ph1">`WHERE`</ph> clauses</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Has lots of different values, at least 1000.</source>
          <target state="new">Has lots of different values, at least 1000.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Does not have a disproportionately large number of rows that will hash to a small number of distributions.</source>
          <target state="new">Does not have a disproportionately large number of rows that will hash to a small number of distributions.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Is defined as NOT NULL.</source>
          <target state="new">Is defined as NOT NULL.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>NULL rows will congregate in one distribution.</source>
          <target state="new">NULL rows will congregate in one distribution.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Hash distribution can be summarized as follows:</source>
          <target state="new">Hash distribution can be summarized as follows:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The hash function is deterministic.</source>
          <target state="new">The hash function is deterministic.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The same value is always assigned to the same distribution.</source>
          <target state="new">The same value is always assigned to the same distribution.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>One column is used as the distribution column.</source>
          <target state="new">One column is used as the distribution column.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The hash function uses the nominated column to compute the row assignments to distributions.</source>
          <target state="new">The hash function uses the nominated column to compute the row assignments to distributions.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The hash function is based on the type of the column not on the values themselves</source>
          <target state="new">The hash function is based on the type of the column not on the values themselves</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Hash distributing a table can sometimes result in a skewed table</source>
          <target state="new">Hash distributing a table can sometimes result in a skewed table</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Hash distributed tables generally require less data movement when resolving queries, and therefore improve query performance for large fact tables.</source>
          <target state="new">Hash distributed tables generally require less data movement when resolving queries, and therefore improve query performance for large fact tables.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Observe the recommendations for hash distributed column selection to enhance query throughput.</source>
          <target state="new">Observe the recommendations for hash distributed column selection to enhance query throughput.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> In SQL Data Warehouse data type consistency matters!</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> In SQL Data Warehouse data type consistency matters!</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Make sure that the existing schema is consistently using the same type for a column.</source>
          <target state="new">Make sure that the existing schema is consistently using the same type for a column.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is especially important for the distribution key.</source>
          <target state="new">This is especially important for the distribution key.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the distribution key data types are not synchronized and the tables are joined then needless data movement will occur.</source>
          <target state="new">If the distribution key data types are not synchronized and the tables are joined then needless data movement will occur.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This could be costly if the tables are large and would result in reduced throughput  and performance.</source>
          <target state="new">This could be costly if the tables are large and would result in reduced throughput  and performance.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</source>
          <target state="new">For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bcc6b06ae5da1b636294a5cae91fe1fba38db19</xliffext:olfilehash>
  </header>
</xliff>