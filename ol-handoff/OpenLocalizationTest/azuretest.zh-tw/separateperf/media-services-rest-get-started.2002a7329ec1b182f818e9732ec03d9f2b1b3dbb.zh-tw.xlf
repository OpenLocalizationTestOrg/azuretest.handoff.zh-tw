<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting Started with Delivering Video on Demand (VoD) using REST APIs</source>
          <target state="new">Getting Started with Delivering Video on Demand (VoD) using REST APIs</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial walks you through the steps of implementing a Video-on-Demand (VoD) content delivery application with Azure Media Services using REST APIs</source>
          <target state="new">This tutorial walks you through the steps of implementing a Video-on-Demand (VoD) content delivery application with Azure Media Services using REST APIs</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting Started with Delivering Video on Demand (VoD) using REST APIs</source>
          <target state="new">Getting Started with Delivering Video on Demand (VoD) using REST APIs</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To complete this tutorial, you need an Azure account.</source>
          <target state="new">To complete this tutorial, you need an Azure account.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you don't have an account, you can create a free trial account in just a couple of minutes.</source>
          <target state="new">If you don't have an account, you can create a free trial account in just a couple of minutes.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For details, see <ph id="ph1">&lt;a href="http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=A8A8397B5" target="_blank"&gt;</ph>Azure Free Trial<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">For details, see <ph id="ph1">&lt;a href="http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=A8A8397B5" target="_blank"&gt;</ph>Azure Free Trial<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This quickstart walks you through the steps of implementing a Video-on-Demand (VoD) content delivery application using Azure Media Services (AMS) REST APIs.</source>
          <target state="new">This quickstart walks you through the steps of implementing a Video-on-Demand (VoD) content delivery application using Azure Media Services (AMS) REST APIs.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The tutorial introduces the basic Media Services workflow and the most common programming objects and tasks required for Media Services development.</source>
          <target state="new">The tutorial introduces the basic Media Services workflow and the most common programming objects and tasks required for Media Services development.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At the completion of the tutorial, you will be able to stream or progressively download a sample media file that you uploaded, encoded, and downloaded.</source>
          <target state="new">At the completion of the tutorial, you will be able to stream or progressively download a sample media file that you uploaded, encoded, and downloaded.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following prerequisites are required to start developing with Media Services with REST APIs.</source>
          <target state="new">The following prerequisites are required to start developing with Media Services with REST APIs.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Understanding of how to develop with Media Services REST API.</source>
          <target state="new">Understanding of how to develop with Media Services REST API.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>media-services-rest-overview<ept id="p1">](http://msdn.microsoft.com/library/azure/hh973616.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>media-services-rest-overview<ept id="p1">](http://msdn.microsoft.com/library/azure/hh973616.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An application of your choice that can send HTTP requests and responses.</source>
          <target state="new">An application of your choice that can send HTTP requests and responses.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This tutorial uses <bpt id="p1">[</bpt>Fiddler<ept id="p1">](http://www.telerik.com/download/fiddler)</ept>.</source>
          <target state="new">This tutorial uses <bpt id="p1">[</bpt>Fiddler<ept id="p1">](http://www.telerik.com/download/fiddler)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following tasks are shown in this quickstart.</source>
          <target state="new">The following tasks are shown in this quickstart.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create a Media Services account using Portal.</source>
          <target state="new">Create a Media Services account using Portal.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Connect to the Media Services account with REST API.</source>
          <target state="new">Connect to the Media Services account with REST API.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a new asset and upload a video file with REST API.</source>
          <target state="new">Create a new asset and upload a video file with REST API.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Configure streaming units with REST API.</source>
          <target state="new">Configure streaming units with REST API.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Encode the source file into a set of adaptive bitrate MP4 files with REST API.</source>
          <target state="new">Encode the source file into a set of adaptive bitrate MP4 files with REST API.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Publish the asset and get streaming and progressive download URLs with REST API.</source>
          <target state="new">Publish the asset and get streaming and progressive download URLs with REST API.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Play your content.</source>
          <target state="new">Play your content.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="create_ams"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create a Media Services account using Portal</source>
          <target state="new"><ph id="ph1">&lt;a id="create_ams"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create a Media Services account using Portal</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the [Management Portal][], click <bpt id="p1">**</bpt>New<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Media Service<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Quick Create<ept id="p3">**</ept>.</source>
          <target state="new">In the [Management Portal][], click <bpt id="p1">**</bpt>New<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Media Service<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Quick Create<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Media Services Quick Create</source>
          <target state="new">Media Services Quick Create</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>NAME<ept id="p1">**</ept>, enter the name of the new account.</source>
          <target state="new">In <bpt id="p1">**</bpt>NAME<ept id="p1">**</ept>, enter the name of the new account.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A Media Services account name is all lower-case numbers or letters with no spaces, and is 3 - 24 characters in length.</source>
          <target state="new">A Media Services account name is all lower-case numbers or letters with no spaces, and is 3 - 24 characters in length.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>REGION<ept id="p1">**</ept>, select the geographic region that will be used to store the metadata records for your Media Services account.</source>
          <target state="new">In <bpt id="p1">**</bpt>REGION<ept id="p1">**</ept>, select the geographic region that will be used to store the metadata records for your Media Services account.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Only the available Media Services regions appear in the dropdown.</source>
          <target state="new">Only the available Media Services regions appear in the dropdown.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>STORAGE ACCOUNT<ept id="p1">**</ept>, select a storage account to provide blob storage of the media content from your Media Services account.</source>
          <target state="new">In <bpt id="p1">**</bpt>STORAGE ACCOUNT<ept id="p1">**</ept>, select a storage account to provide blob storage of the media content from your Media Services account.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can select an existing storage account in the same geographic region as your Media Services account, or you can create a new storage account.</source>
          <target state="new">You can select an existing storage account in the same geographic region as your Media Services account, or you can create a new storage account.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A new storage account is created in the same region.</source>
          <target state="new">A new storage account is created in the same region.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you created a new storage account, in <bpt id="p1">**</bpt>NEW STORAGE ACCOUNT NAME<ept id="p1">**</ept>, enter a name for the storage account.</source>
          <target state="new">If you created a new storage account, in <bpt id="p1">**</bpt>NEW STORAGE ACCOUNT NAME<ept id="p1">**</ept>, enter a name for the storage account.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The rules for storage account names are the same as for Media Services accounts.</source>
          <target state="new">The rules for storage account names are the same as for Media Services accounts.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Quick Create<ept id="p1">**</ept> at the bottom of the form.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Quick Create<ept id="p1">**</ept> at the bottom of the form.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can monitor the status of the process in the message area at the bottom of the window.</source>
          <target state="new">You can monitor the status of the process in the message area at the bottom of the window.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Once account is successfully created, the status changes to Active.</source>
          <target state="new">Once account is successfully created, the status changes to Active.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>At the bottom of the page, the <bpt id="p1">**</bpt>MANAGE KEYS<ept id="p1">**</ept> button appears.</source>
          <target state="new">At the bottom of the page, the <bpt id="p1">**</bpt>MANAGE KEYS<ept id="p1">**</ept> button appears.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you click on this button, a dialog with the Media Services account name and the primary and secondary keys is displayed.</source>
          <target state="new">When you click on this button, a dialog with the Media Services account name and the primary and secondary keys is displayed.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You will need the account name and the primary key information to programmatically access the Media Services account.</source>
          <target state="new">You will need the account name and the primary key information to programmatically access the Media Services account.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="connect"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Connect to the Media Services account with REST API</source>
          <target state="new"><ph id="ph1">&lt;a id="connect"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Connect to the Media Services account with REST API</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Two things are required when accessing Azure Media Services: an access token provided by Azure Access Control Services (ACS), and the URI of Media Services itself.</source>
          <target state="new">Two things are required when accessing Azure Media Services: an access token provided by Azure Access Control Services (ACS), and the URI of Media Services itself.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can use any means you want when creating these requests as long as you specify the correct header values and pass in the access token correctly when calling into Media Services.</source>
          <target state="new">You can use any means you want when creating these requests as long as you specify the correct header values and pass in the access token correctly when calling into Media Services.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following steps describe the most common workflow when using the Media Services REST API to connect to Media Services:</source>
          <target state="new">The following steps describe the most common workflow when using the Media Services REST API to connect to Media Services:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Getting an access token.</source>
          <target state="new">Getting an access token.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Connecting to the Media Services URI.</source>
          <target state="new">Connecting to the Media Services URI.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</source>
          <target state="new">After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You must make subsequent calls to the new URI.</source>
          <target state="new">You must make subsequent calls to the new URI.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You may also receive a HTTP/1.1 200 response that contains the ODATA API metadata description.</source>
          <target state="new">You may also receive a HTTP/1.1 200 response that contains the ODATA API metadata description.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Posting your subsequent API calls to the new URL.</source>
          <target state="new">Posting your subsequent API calls to the new URL.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, if after trying to connect, you got the following:</source>
          <target state="new">For example, if after trying to connect, you got the following:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should post your subsequent API calls to https://wamsbayclus001rest-hs.cloudapp.net/api/.</source>
          <target state="new">You should post your subsequent API calls to https://wamsbayclus001rest-hs.cloudapp.net/api/.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Getting an access token</source>
          <target state="new">Getting an access token</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To access Media Services directly through the REST API, retrieve an access token from ACS and use it during every HTTP request you make into the service.</source>
          <target state="new">To access Media Services directly through the REST API, retrieve an access token from ACS and use it during every HTTP request you make into the service.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This token is similar to other tokens provided by ACS based on access claims provided in the header of an HTTP request and using the OAuth v2 protocol.</source>
          <target state="new">This token is similar to other tokens provided by ACS based on access claims provided in the header of an HTTP request and using the OAuth v2 protocol.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You do not need any other prerequisites before directly connecting to Media Services.</source>
          <target state="new">You do not need any other prerequisites before directly connecting to Media Services.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shows the HTTP request header and body used to retrieve a token.</source>
          <target state="new">The following example shows the HTTP request header and body used to retrieve a token.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>Header<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Body<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>Body<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You need to proved the client_id and client_secret values in the body of this request; client_id and client_secret correspond to the AccountName and AccountKey values, respectively.</source>
          <target state="new">You need to proved the client_id and client_secret values in the body of this request; client_id and client_secret correspond to the AccountName and AccountKey values, respectively.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These values are provided to you by Media Services when you set up your account.</source>
          <target state="new">These values are provided to you by Media Services when you set up your account.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the AccountKey for your Media Services account must be URL-encoded when using it as the client_secret value in your access token request.</source>
          <target state="new">Note that the AccountKey for your Media Services account must be URL-encoded when using it as the client_secret value in your access token request.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example shows the HTTP response that contains the access token in the response body.</source>
          <target state="new">The following example shows the HTTP response that contains the access token in the response body.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It is recommended to cache the "access_token " and "expires_in " values to an external storage.</source>
          <target state="new">It is recommended to cache the "access_token " and "expires_in " values to an external storage.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The token data could later be retrieved from the storage and re-used in your Media Services REST API calls.</source>
          <target state="new">The token data could later be retrieved from the storage and re-used in your Media Services REST API calls.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is especially useful for scenarios where the token can be securely shared among multiple processes or computers.</source>
          <target state="new">This is especially useful for scenarios where the token can be securely shared among multiple processes or computers.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Make sure to monitor the "expires_in" value of the access token and update your REST API calls with new tokens as needed.</source>
          <target state="new">Make sure to monitor the "expires_in" value of the access token and update your REST API calls with new tokens as needed.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Connecting to the Media Services URI</source>
          <target state="new">Connecting to the Media Services URI</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The root URI for Media Services is https://media.windows.net/.</source>
          <target state="new">The root URI for Media Services is https://media.windows.net/.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You should initially connect to this URI, and if you get a 301 redirect back in response, you should make subsequent calls to the new URI.</source>
          <target state="new">You should initially connect to this URI, and if you get a 301 redirect back in response, you should make subsequent calls to the new URI.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In addition, do not use any auto-redirect/follow logic in your requests.</source>
          <target state="new">In addition, do not use any auto-redirect/follow logic in your requests.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>HTTP verbs and request bodies will not be forwarded to the new URI.</source>
          <target state="new">HTTP verbs and request bodies will not be forwarded to the new URI.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Note that the root URI for uploading and downloading Asset files is https://yourstorageaccount.blob.core.windows.net/ where the storage account name is the same one you used during your Media Services account setup.</source>
          <target state="new">Note that the root URI for uploading and downloading Asset files is https://yourstorageaccount.blob.core.windows.net/ where the storage account name is the same one you used during your Media Services account setup.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example demonstrates HTTP request to the Media Services root URI (https://media.windows.net/).</source>
          <target state="new">The following example demonstrates HTTP request to the Media Services root URI (https://media.windows.net/).</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The request gets a 301 redirect back in response.</source>
          <target state="new">The request gets a 301 redirect back in response.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The subsequent request is using the new URI (https://wamsbayclus001rest-hs.cloudapp.net/api/).</source>
          <target state="new">The subsequent request is using the new URI (https://wamsbayclus001rest-hs.cloudapp.net/api/).</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Response<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Response<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept> (using the new URI):</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept> (using the new URI):</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Response<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Response<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> From now on the new URI will be used in this tutorial.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> From now on the new URI will be used in this tutorial.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="upload"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create a new asset and upload a video file with REST API</source>
          <target state="new"><ph id="ph1">&lt;a id="upload"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create a new asset and upload a video file with REST API</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In Media Services, you upload your digital files into an asset.</source>
          <target state="new">In Media Services, you upload your digital files into an asset.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Asset<ept id="p1">**</ept> entity can contain video, audio, images, thumbnail collections, text tracks and closed caption files (and the metadata about these files.)  Once the files are uploaded into the asset, your content is stored securely in the cloud for further processing and streaming.</source>
          <target state="new">The <bpt id="p1">**</bpt>Asset<ept id="p1">**</ept> entity can contain video, audio, images, thumbnail collections, text tracks and closed caption files (and the metadata about these files.)  Once the files are uploaded into the asset, your content is stored securely in the cloud for further processing and streaming.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>One of the values that you have to provide when creating an asset is asset creation options.</source>
          <target state="new">One of the values that you have to provide when creating an asset is asset creation options.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> property is an enumeration value that describes the encryption options that an Asset can be created with.</source>
          <target state="new">The <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> property is an enumeration value that describes the encryption options that an Asset can be created with.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A valid value is one of the values from the list below, not a combination of values from this list:</source>
          <target state="new">A valid value is one of the values from the list below, not a combination of values from this list:</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>None<ept id="p1">**</ept> = <bpt id="p2">**</bpt>0<ept id="p2">**</ept> - No encryption is used.</source>
          <target state="new"><bpt id="p1">**</bpt>None<ept id="p1">**</ept> = <bpt id="p2">**</bpt>0<ept id="p2">**</ept> - No encryption is used.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Note that when using this option your content is not protected in transit or at rest in storage.</source>
          <target state="new">Note that when using this option your content is not protected in transit or at rest in storage.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you plan to deliver an MP4 using progressive download, use this option.</source>
          <target state="new">If you plan to deliver an MP4 using progressive download, use this option.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StorageEncrypted<ept id="p1">**</ept> = <bpt id="p2">**</bpt>1<ept id="p2">**</ept> - Encrypts your clear content locally using AES-256 bit encryption and then uploads it to Azure Storage where it is stored encrypted at rest.</source>
          <target state="new"><bpt id="p1">**</bpt>StorageEncrypted<ept id="p1">**</ept> = <bpt id="p2">**</bpt>1<ept id="p2">**</ept> - Encrypts your clear content locally using AES-256 bit encryption and then uploads it to Azure Storage where it is stored encrypted at rest.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Assets protected with Storage Encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset.</source>
          <target state="new">Assets protected with Storage Encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The primary use case for Storage Encryption is when you want to secure your high quality input media files with strong encryption at rest on disk.</source>
          <target state="new">The primary use case for Storage Encryption is when you want to secure your high quality input media files with strong encryption at rest on disk.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CommonEncryptionProtected<ept id="p1">**</ept> = <bpt id="p2">**</bpt>2<ept id="p2">**</ept> - Use this option if you are uploading content that has already been encrypted and protected with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM).</source>
          <target state="new"><bpt id="p1">**</bpt>CommonEncryptionProtected<ept id="p1">**</ept> = <bpt id="p2">**</bpt>2<ept id="p2">**</ept> - Use this option if you are uploading content that has already been encrypted and protected with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM).</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EnvelopeEncryptionProtected<ept id="p1">**</ept> = <bpt id="p2">**</bpt>4<ept id="p2">**</ept> – Use this option if you are uploading HLS encrypted with AES.</source>
          <target state="new"><bpt id="p1">**</bpt>EnvelopeEncryptionProtected<ept id="p1">**</ept> = <bpt id="p2">**</bpt>4<ept id="p2">**</ept> – Use this option if you are uploading HLS encrypted with AES.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Note that the files must have been encoded and encrypted by Transform Manager.</source>
          <target state="new">Note that the files must have been encoded and encrypted by Transform Manager.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Create an asset</source>
          <target state="new">Create an asset</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>An asset is a container for multiple types or sets of objects in Media Services, including video, audio, images, thumbnail collections, text tracks, and closed caption files.</source>
          <target state="new">An asset is a container for multiple types or sets of objects in Media Services, including video, audio, images, thumbnail collections, text tracks, and closed caption files.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the REST API, creating an Asset requires sending POST request to Media Services and placing any property information about your asset in the request body.</source>
          <target state="new">In the REST API, creating an Asset requires sending POST request to Media Services and placing any property information about your asset in the request body.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an asset.</source>
          <target state="new">The following example shows how to create an asset.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If successful, the following is returned:</source>
          <target state="new">If successful, the following is returned:</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Create an AssetFile</source>
          <target state="new">Create an AssetFile</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>AssetFile<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974275.aspx)</ept> entity represents a video or audio file that is stored in a blob container.</source>
          <target state="new">The <bpt id="p1">[</bpt>AssetFile<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974275.aspx)</ept> entity represents a video or audio file that is stored in a blob container.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An asset file is always associated with an asset, and an asset may contain one or many AssetFiles.</source>
          <target state="new">An asset file is always associated with an asset, and an asset may contain one or many AssetFiles.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The Media Services Encoder task fails if an asset file object is not associated with a digital file in a blob container.</source>
          <target state="new">The Media Services Encoder task fails if an asset file object is not associated with a digital file in a blob container.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>After you upload your digital media file into a blob container, you will use the <bpt id="p1">**</bpt>MERGE<ept id="p1">**</ept> HTTP request to update the AssetFile with information about your media file (as shown later in the topic).</source>
          <target state="new">After you upload your digital media file into a blob container, you will use the <bpt id="p1">**</bpt>MERGE<ept id="p1">**</ept> HTTP request to update the AssetFile with information about your media file (as shown later in the topic).</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Creating the AccessPolicy with write permission.</source>
          <target state="new">Creating the AccessPolicy with write permission.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Before uploading any files into blob storage, set the access policy rights for writing to an asset.</source>
          <target state="new">Before uploading any files into blob storage, set the access policy rights for writing to an asset.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To do that, POST an HTTP request to the AccessPolicies entity set.</source>
          <target state="new">To do that, POST an HTTP request to the AccessPolicies entity set.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Define a DurationInMinutes value upon creation or you will receive a 500 Internal Server error message back in response.</source>
          <target state="new">Define a DurationInMinutes value upon creation or you will receive a 500 Internal Server error message back in response.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information on AccessPolicies, see <bpt id="p1">[</bpt>AccessPolicy<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974297.aspx)</ept>.</source>
          <target state="new">For more information on AccessPolicies, see <bpt id="p1">[</bpt>AccessPolicy<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974297.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example shows how to create an AccessPolicy:</source>
          <target state="new">The following example shows how to create an AccessPolicy:</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Get the Upload URL</source>
          <target state="new">Get the Upload URL</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To receive the actual upload URL, create a SAS Locator.</source>
          <target state="new">To receive the actual upload URL, create a SAS Locator.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Locators define the start time and type of connection endpoint for clients that want to access Files in an Asset.</source>
          <target state="new">Locators define the start time and type of connection endpoint for clients that want to access Files in an Asset.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You can create multiple Locator entities for a given AccessPolicy and Asset pair to handle different client requests and needs.</source>
          <target state="new">You can create multiple Locator entities for a given AccessPolicy and Asset pair to handle different client requests and needs.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Each of these Locators use the StartTime value plus the DurationInMinutes value of the AccessPolicy to determine the length of time a URL can be used.</source>
          <target state="new">Each of these Locators use the StartTime value plus the DurationInMinutes value of the AccessPolicy to determine the length of time a URL can be used.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Locator<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974308.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Locator<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974308.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A SAS URL has the following format:</source>
          <target state="new">A SAS URL has the following format:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Some considerations apply:</source>
          <target state="new">Some considerations apply:</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You cannot have more than five unique Locators associated with a given Asset at one time.</source>
          <target state="new">You cannot have more than five unique Locators associated with a given Asset at one time.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see Locator.</source>
          <target state="new">For more information, see Locator.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you need to upload your files immediately, you should set your StartTime value to five minutes before the current time.</source>
          <target state="new">If you need to upload your files immediately, you should set your StartTime value to five minutes before the current time.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This is because there may be clock skew between your client machine and Media Services.</source>
          <target state="new">This is because there may be clock skew between your client machine and Media Services.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Also, your StartTime value must be in the following DateTime format: YYYY-MM-DDTHH:mm:ssZ (for example, "2014-05-23T17:53:50Z").</source>
          <target state="new">Also, your StartTime value must be in the following DateTime format: YYYY-MM-DDTHH:mm:ssZ (for example, "2014-05-23T17:53:50Z").</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>There may be a 30-40 second delay after a Locator is created to when it is available for use.</source>
          <target state="new">There may be a 30-40 second delay after a Locator is created to when it is available for use.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This issue applies to both SAS URL and Origin Locators.</source>
          <target state="new">This issue applies to both SAS URL and Origin Locators.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a SAS URL Locator, as defined by the Type property in the request body ("1" for a SAS locator and "2" for an On-Demand origin locator).</source>
          <target state="new">The following example shows how to create a SAS URL Locator, as defined by the Type property in the request body ("1" for a SAS locator and "2" for an On-Demand origin locator).</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property returned contains the URL that you must use to upload your file.</source>
          <target state="new">The <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property returned contains the URL that you must use to upload your file.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If successful, the following response is returned:</source>
          <target state="new">If successful, the following response is returned:</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Upload a file into a blob storage container</source>
          <target state="new">Upload a file into a blob storage container</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Once you have the AccessPolicy and Locator set, the actual file is uploaded to an Azure Blob Storage container using the Azure Storage REST APIs.</source>
          <target state="new">Once you have the AccessPolicy and Locator set, the actual file is uploaded to an Azure Blob Storage container using the Azure Storage REST APIs.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can either upload in page or block blobs.</source>
          <target state="new">You can either upload in page or block blobs.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You must add the file name for the file you want to upload to the Locator <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> value received in the previous section.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You must add the file name for the file you want to upload to the Locator <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> value received in the previous section.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, https://storagetestaccount001.blob.core.windows.net/asset-e7b02da4-5a69-40e7-a8db-e8f4f697aac0/BigBuckBunny.mp4?</source>
          <target state="new">For example, https://storagetestaccount001.blob.core.windows.net/asset-e7b02da4-5a69-40e7-a8db-e8f4f697aac0/BigBuckBunny.mp4?</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information on working with Azure storage blobs, see <bpt id="p1">[</bpt>Blob Service REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/dd135733.aspx)</ept>.</source>
          <target state="new">For more information on working with Azure storage blobs, see <bpt id="p1">[</bpt>Blob Service REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/dd135733.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Update the AssetFile</source>
          <target state="new">Update the AssetFile</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Now that you've uploaded your file, update the FileAsset size (and other) information.</source>
          <target state="new">Now that you've uploaded your file, update the FileAsset size (and other) information.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If successful, the following is returned:</source>
          <target state="new">If successful, the following is returned:</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 204 No Content</source>
          <target state="new">HTTP/1.1 204 No Content</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Delete the Locator and AccessPolicy</source>
          <target state="new">Delete the Locator and AccessPolicy</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If successful, the following is returned:</source>
          <target state="new">If successful, the following is returned:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If successful, the following is returned:</source>
          <target state="new">If successful, the following is returned:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="configure_streaming_units"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Configure streaming units with REST API</source>
          <target state="new"><ph id="ph1">&lt;a id="configure_streaming_units"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Configure streaming units with REST API</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When working with Azure Media Services one of the most common scenarios is delivering adaptive bitrate streaming to your clients.</source>
          <target state="new">When working with Azure Media Services one of the most common scenarios is delivering adaptive bitrate streaming to your clients.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>With adaptive bitrate streaming, the client can switch to a higher or lower bitrate stream as the video is displayed based on the current network bandwidth, CPU utilization, and other factors.</source>
          <target state="new">With adaptive bitrate streaming, the client can switch to a higher or lower bitrate stream as the video is displayed based on the current network bandwidth, CPU utilization, and other factors.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Media Services supports the following adaptive bitrate streaming technologies: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</source>
          <target state="new">Media Services supports the following adaptive bitrate streaming technologies: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Media Services provides dynamic packaging which allows you to deliver your adaptive bitrate MP4 or Smooth Streaming encoded content in streaming formats supported by Media Services (MPEG DASH, HLS, Smooth Streaming, HDS) without you having to re-package into these streaming formats.</source>
          <target state="new">Media Services provides dynamic packaging which allows you to deliver your adaptive bitrate MP4 or Smooth Streaming encoded content in streaming formats supported by Media Services (MPEG DASH, HLS, Smooth Streaming, HDS) without you having to re-package into these streaming formats.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To take advantage of dynamic packaging, you need to do the following:</source>
          <target state="new">To take advantage of dynamic packaging, you need to do the following:</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>get at least one streaming unit for the **streaming endpoint **from which you plan to deliver your content (described in this section).</source>
          <target state="new">get at least one streaming unit for the **streaming endpoint **from which you plan to deliver your content (described in this section).</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>encode or transcode your mezzanine (source) file into a set of adaptive bitrate MP4 files or adaptive bitrate Smooth Streaming files (the encoding steps are demonstrated later in this tutorial),</source>
          <target state="new">encode or transcode your mezzanine (source) file into a set of adaptive bitrate MP4 files or adaptive bitrate Smooth Streaming files (the encoding steps are demonstrated later in this tutorial),</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>With dynamic packaging you only need to store and pay for the files in single storage format and Media Services will build and serve the appropriate response based on requests from a client.</source>
          <target state="new">With dynamic packaging you only need to store and pay for the files in single storage format and Media Services will build and serve the appropriate response based on requests from a client.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For information about pricing details, see <bpt id="p1">[</bpt>Media Services Pricing Details<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=275107)</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For information about pricing details, see <bpt id="p1">[</bpt>Media Services Pricing Details<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=275107)</ept>.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>To change the number of streaming reserved units, do the following:</source>
          <target state="new">To change the number of streaming reserved units, do the following:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Get the streaming endpoint you want to update</source>
          <target state="new">Get the streaming endpoint you want to update</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For example, let's get the first streaming endpoint in your account (you can have up to 2 streaming endpoints in running state at the same time.)</source>
          <target state="new">For example, let's get the first streaming endpoint in your account (you can have up to 2 streaming endpoints in running state at the same time.)</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If successful, the following is returned:</source>
          <target state="new">If successful, the following is returned:</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Scale the streaming endpoint</source>
          <target state="new">Scale the streaming endpoint</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="long_running_op_status"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Check on the status of a long-running operation</source>
          <target state="new"><ph id="ph1">&lt;a id="long_running_op_status"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Check on the status of a long-running operation</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The allocation of any new units takes around 20 minutes to complete.</source>
          <target state="new">The allocation of any new units takes around 20 minutes to complete.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>To check the status of the operation use the <bpt id="p1">**</bpt>Operations<ept id="p1">**</ept> method and specify the Id of the operation.</source>
          <target state="new">To check the status of the operation use the <bpt id="p1">**</bpt>Operations<ept id="p1">**</ept> method and specify the Id of the operation.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The operation Id was returned in the response to the <bpt id="p1">**</bpt>Scale<ept id="p1">**</ept> request.</source>
          <target state="new">The operation Id was returned in the response to the <bpt id="p1">**</bpt>Scale<ept id="p1">**</ept> request.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Request<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="encode"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Encode the source file into a set of adaptive bitrate MP4 files</source>
          <target state="new"><ph id="ph1">&lt;a id="encode"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Encode the source file into a set of adaptive bitrate MP4 files</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>After ingesting Assets into Media Services, media can be encoded, transmuxed, watermarked, and so on, before it is delivered to clients.</source>
          <target state="new">After ingesting Assets into Media Services, media can be encoded, transmuxed, watermarked, and so on, before it is delivered to clients.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>These activities are scheduled and run against multiple background role instances to ensure high performance and availability.</source>
          <target state="new">These activities are scheduled and run against multiple background role instances to ensure high performance and availability.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>These activities are called Jobs and each <bpt id="p1">[</bpt>Job<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974289.aspx)</ept> is comprised of atomic Tasks that do the actual work on the Asset file.</source>
          <target state="new">These activities are called Jobs and each <bpt id="p1">[</bpt>Job<ept id="p1">](http://msdn.microsoft.com/library/azure/hh974289.aspx)</ept> is comprised of atomic Tasks that do the actual work on the Asset file.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>As was mentioned earlier, when working with Azure Media Services one of the most common scenarios is delivering adaptive bitrate streaming to your clients.</source>
          <target state="new">As was mentioned earlier, when working with Azure Media Services one of the most common scenarios is delivering adaptive bitrate streaming to your clients.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Media Services can dynamically package a set of adaptive bitrate MP4 files into one of the following formats: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</source>
          <target state="new">Media Services can dynamically package a set of adaptive bitrate MP4 files into one of the following formats: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To take advantage of dynamic packaging, you need to do the following:</source>
          <target state="new">To take advantage of dynamic packaging, you need to do the following:</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>encode or transcode your mezzanine (source) file into a set of adaptive bitrate MP4 files or adaptive bitrate Smooth Streaming files,</source>
          <target state="new">encode or transcode your mezzanine (source) file into a set of adaptive bitrate MP4 files or adaptive bitrate Smooth Streaming files,</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>get at least one streaming unit for the streaming endpoint from which you plan to deliver your content.</source>
          <target state="new">get at least one streaming unit for the streaming endpoint from which you plan to deliver your content.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following section shows how to create a job that contains one encoding task.</source>
          <target state="new">The following section shows how to create a job that contains one encoding task.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The task specifies to transcode the mezzanine file into a set of adaptive bitrate MP4s using <bpt id="p1">**</bpt>Azure Media Encoder<ept id="p1">**</ept>.</source>
          <target state="new">The task specifies to transcode the mezzanine file into a set of adaptive bitrate MP4s using <bpt id="p1">**</bpt>Azure Media Encoder<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The section also shows how to monitor the job processing progress.</source>
          <target state="new">The section also shows how to monitor the job processing progress.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>When the job is complete you you would be able to create locators that are needed to get access to your assets.</source>
          <target state="new">When the job is complete you you would be able to create locators that are needed to get access to your assets.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Get a media processor</source>
          <target state="new">Get a media processor</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In Media Services, a media processor is a component that handles a specific processing task, such as encoding, format conversion, encrypting, or decrypting media content.</source>
          <target state="new">In Media Services, a media processor is a component that handles a specific processing task, such as encoding, format conversion, encrypting, or decrypting media content.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For the encoding task shown in this tutorial we are going to use the Azure Media Encoder.</source>
          <target state="new">For the encoding task shown in this tutorial we are going to use the Azure Media Encoder.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The following code requests the encoder's id.</source>
          <target state="new">The following code requests the encoder's id.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Create a job</source>
          <target state="new">Create a job</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Each Job can have one or more Tasks depending on the type of processing that you want to accomplish.</source>
          <target state="new">Each Job can have one or more Tasks depending on the type of processing that you want to accomplish.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Through the REST API, you can create Jobs and their related Tasks in one of two ways: Tasks can be defined inline through the Tasks navigation property on Job entities, or through OData batch processing.</source>
          <target state="new">Through the REST API, you can create Jobs and their related Tasks in one of two ways: Tasks can be defined inline through the Tasks navigation property on Job entities, or through OData batch processing.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The Media Services SDK uses batch processing; however, for the readability of the code examples in this topic, tasks are defined inline.</source>
          <target state="new">The Media Services SDK uses batch processing; however, for the readability of the code examples in this topic, tasks are defined inline.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For information on batch processing, see <bpt id="p1">[</bpt>Open Data Protocol (OData) Batch Processing<ept id="p1">](http://www.odata.org/documentation/odata-version-3-0/batch-processing/)</ept>.</source>
          <target state="new">For information on batch processing, see <bpt id="p1">[</bpt>Open Data Protocol (OData) Batch Processing<ept id="p1">](http://www.odata.org/documentation/odata-version-3-0/batch-processing/)</ept>.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The following example shows you how to create and post a Job with one Task set to encode a video at a specific resolution and quality.</source>
          <target state="new">The following example shows you how to create and post a Job with one Task set to encode a video at a specific resolution and quality.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The following documentation section contains the list of all the <bpt id="p1">[</bpt>task presets<ept id="p1">](http://msdn.microsoft.com/library/azure/dn619392.aspx)</ept> supported by the Azure Media Processor.</source>
          <target state="new">The following documentation section contains the list of all the <bpt id="p1">[</bpt>task presets<ept id="p1">](http://msdn.microsoft.com/library/azure/dn619392.aspx)</ept> supported by the Azure Media Processor.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If successful, the following response is returned:</source>
          <target state="new">If successful, the following response is returned:</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>There are a few important things to note in any Job request:</source>
          <target state="new">There are a few important things to note in any Job request:</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>TaskBody properties MUST use literal XML to define the number of input, or output assets that will be used by the Task.</source>
          <target state="new">TaskBody properties MUST use literal XML to define the number of input, or output assets that will be used by the Task.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The Task topic contains the XML Schema Definition for the XML.</source>
          <target state="new">The Task topic contains the XML Schema Definition for the XML.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>In the TaskBody definition, each inner value for</source>
          <target state="new">In the TaskBody definition, each inner value for</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="new">and</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>must be set as JobInputAsset(value) or JobOutputAsset(value).</source>
          <target state="new">must be set as JobInputAsset(value) or JobOutputAsset(value).</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A task can have multiple output assets.</source>
          <target state="new">A task can have multiple output assets.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>One JobOutputAsset(x) can only be used once as an output of a task in a job.</source>
          <target state="new">One JobOutputAsset(x) can only be used once as an output of a task in a job.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can specify JobInputAsset or JobOutputAsset as an input asset of a task.</source>
          <target state="new">You can specify JobInputAsset or JobOutputAsset as an input asset of a task.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Tasks must not form a cycle.</source>
          <target state="new">Tasks must not form a cycle.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The value parameter that you pass to JobInputAsset or JobOutputAsset represents the index value for an Asset.</source>
          <target state="new">The value parameter that you pass to JobInputAsset or JobOutputAsset represents the index value for an Asset.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The actual Assets are defined in the InputMediaAssets and OutputMediaAssets navigation properties on the Job entity definition.</source>
          <target state="new">The actual Assets are defined in the InputMediaAssets and OutputMediaAssets navigation properties on the Job entity definition.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Because Media Services is built on OData v3, the individual assets in InputMediaAssets and OutputMediaAssets navigation property collections are referenced through a "__metadata : uri" name-value pair.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Because Media Services is built on OData v3, the individual assets in InputMediaAssets and OutputMediaAssets navigation property collections are referenced through a "__metadata : uri" name-value pair.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>InputMediaAssets maps to one or more Assets you have created in Media Services.</source>
          <target state="new">InputMediaAssets maps to one or more Assets you have created in Media Services.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>OutputMediaAssets are created by the system.</source>
          <target state="new">OutputMediaAssets are created by the system.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>They do not reference an existing asset.</source>
          <target state="new">They do not reference an existing asset.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>OutputMediaAssets can be named using the assetName attribute.</source>
          <target state="new">OutputMediaAssets can be named using the assetName attribute.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If this attribute is not present, then the name of the OutputMediaAsset will be whatever the inner text value of the</source>
          <target state="new">If this attribute is not present, then the name of the OutputMediaAsset will be whatever the inner text value of the</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>element is with a suffix of either the Job Name value, or the Job Id value (in the case where the Name property isn't defined).</source>
          <target state="new">element is with a suffix of either the Job Name value, or the Job Id value (in the case where the Name property isn't defined).</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For example, if you set a value for assetName to "Sample", then the OutputMediaAsset Name property would be set to "Sample".</source>
          <target state="new">For example, if you set a value for assetName to "Sample", then the OutputMediaAsset Name property would be set to "Sample".</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>However, if you did not set a value for assetName, but did set the job name to "NewJob", then the OutputMediaAsset Name would be "JobOutputAsset(value)_NewJob".</source>
          <target state="new">However, if you did not set a value for assetName, but did set the job name to "NewJob", then the OutputMediaAsset Name would be "JobOutputAsset(value)_NewJob".</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the assetName attribute:</source>
          <target state="new">The following example shows how to set the assetName attribute:</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>To enable task chaining:</source>
          <target state="new">To enable task chaining:</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A job must have at least 2 tasks</source>
          <target state="new">A job must have at least 2 tasks</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>There must be at least one task whose input is output of another task in the job.</source>
          <target state="new">There must be at least one task whose input is output of another task in the job.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>For more information see, <bpt id="p1">[</bpt>Creating an Encoding Job with the Media Services REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/jj129574.aspx)</ept>.</source>
          <target state="new">For more information see, <bpt id="p1">[</bpt>Creating an Encoding Job with the Media Services REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/jj129574.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Monitor Processing Progress</source>
          <target state="new">Monitor Processing Progress</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You can retrieve the Job status by using the State property, as shown in the following example.</source>
          <target state="new">You can retrieve the Job status by using the State property, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If successful, the following response is returned:</source>
          <target state="new">If successful, the following response is returned:</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Cancel a job</source>
          <target state="new">Cancel a job</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Media Services allows you to cancel running jobs through the CancelJob function.</source>
          <target state="new">Media Services allows you to cancel running jobs through the CancelJob function.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This call will return a 400 error code if you try to cancel a Job when its state is canceled, canceling, error, or finished.</source>
          <target state="new">This call will return a 400 error code if you try to cancel a Job when its state is canceled, canceling, error, or finished.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The following example shows how to call CancelJob.</source>
          <target state="new">The following example shows how to call CancelJob.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If successful, a 204 response code is returned with no message body.</source>
          <target state="new">If successful, a 204 response code is returned with no message body.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You must URL-encode the job id (normally nb:jid:UUID: somevalue) when passing it in as a parameter to CancelJob.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You must URL-encode the job id (normally nb:jid:UUID: somevalue) when passing it in as a parameter to CancelJob.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Get the output asset</source>
          <target state="new">Get the output asset</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The following code shows how to request the output asset Id.</source>
          <target state="new">The following code shows how to request the output asset Id.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>HTTP Request</source>
          <target state="new">HTTP Request</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>HTTP Response</source>
          <target state="new">HTTP Response</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="publish_get_urls"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Publish the asset and get streaming and progressive download URLs with REST API</source>
          <target state="new"><ph id="ph1">&lt;a id="publish_get_urls"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Publish the asset and get streaming and progressive download URLs with REST API</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>To stream or download an asset you first need to "publish" it by creating a locator.</source>
          <target state="new">To stream or download an asset you first need to "publish" it by creating a locator.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Locators provide access to files contained in the asset.</source>
          <target state="new">Locators provide access to files contained in the asset.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Media Services supports two types of locators: OnDemandOrigin locators, used to stream media (for example, MPEG DASH, HLS, or Smooth Streaming) and Access Signature (SAS) locators, used to download media files.</source>
          <target state="new">Media Services supports two types of locators: OnDemandOrigin locators, used to stream media (for example, MPEG DASH, HLS, or Smooth Streaming) and Access Signature (SAS) locators, used to download media files.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Once you create the locators, you can build the URLs that are used to stream or download your files.</source>
          <target state="new">Once you create the locators, you can build the URLs that are used to stream or download your files.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A streaming URL for Smooth Streaming has the following format:</source>
          <target state="new">A streaming URL for Smooth Streaming has the following format:</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A streaming URL for HLS has the following format:</source>
          <target state="new">A streaming URL for HLS has the following format:</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A streaming URL for MPEG DASH has the following format:</source>
          <target state="new">A streaming URL for MPEG DASH has the following format:</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A SAS URL used to download files has the following format:</source>
          <target state="new">A SAS URL used to download files has the following format:</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This sections shows how to perform the following tasks necessary to "publish" your assets.</source>
          <target state="new">This sections shows how to perform the following tasks necessary to "publish" your assets.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Creating the AccessPolicy with read permission</source>
          <target state="new">Creating the AccessPolicy with read permission</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Creating a SAS URL for downloading content</source>
          <target state="new">Creating a SAS URL for downloading content</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Creating an origin URL for streaming content</source>
          <target state="new">Creating an origin URL for streaming content</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Creating the AccessPolicy with read permission</source>
          <target state="new">Creating the AccessPolicy with read permission</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Before downloading or streaming any media content, first define an AccessPolicy with read permissions and create the appropriate Locator entity that specifies the type of delivery mechanism you want to enable for your clients.</source>
          <target state="new">Before downloading or streaming any media content, first define an AccessPolicy with read permissions and create the appropriate Locator entity that specifies the type of delivery mechanism you want to enable for your clients.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For more information on the properties available, see <bpt id="p1">[</bpt>AccessPolicy Entity Properties<ept id="p1">](https://msdn.microsoft.com/library/azure/hh974297.aspx#accesspolicy_properties)</ept>.</source>
          <target state="new">For more information on the properties available, see <bpt id="p1">[</bpt>AccessPolicy Entity Properties<ept id="p1">](https://msdn.microsoft.com/library/azure/hh974297.aspx#accesspolicy_properties)</ept>.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The following example shows how to specify the AccessPolicy for read permissions for a given Asset.</source>
          <target state="new">The following example shows how to specify the AccessPolicy for read permissions for a given Asset.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>If successful, a 201 success code is returned describing the AccessPolicy entity that you created.</source>
          <target state="new">If successful, a 201 success code is returned describing the AccessPolicy entity that you created.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>You will then use the AccessPolicy Id along with the Asset Id of the asset that contains the file you want to deliver(such as an output asset) to create the Locator entity.</source>
          <target state="new">You will then use the AccessPolicy Id along with the Asset Id of the asset that contains the file you want to deliver(such as an output asset) to create the Locator entity.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This basic workflow is the same as uploading a file when ingesting an Asset (as was discussed earlier in this topic).</source>
          <target state="new">This basic workflow is the same as uploading a file when ingesting an Asset (as was discussed earlier in this topic).</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Also, like uploading files, if you (or your clients) need to access your files immediately, set your StartTime value to five minutes before the current time.</source>
          <target state="new">Also, like uploading files, if you (or your clients) need to access your files immediately, set your StartTime value to five minutes before the current time.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This action is necessary because there may be clock skew between the client and Media Services.</source>
          <target state="new">This action is necessary because there may be clock skew between the client and Media Services.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The StartTime value must be in the following DateTime format: YYYY-MM-DDTHH:mm:ssZ (for example, "2014-05-23T17:53:50Z").</source>
          <target state="new">The StartTime value must be in the following DateTime format: YYYY-MM-DDTHH:mm:ssZ (for example, "2014-05-23T17:53:50Z").</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Creating a SAS URL for downloading content</source>
          <target state="new">Creating a SAS URL for downloading content</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The following code shows how to get a URL that can be used to download a media file created and uploaded previously.</source>
          <target state="new">The following code shows how to get a URL that can be used to download a media file created and uploaded previously.</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The AccessPolicy has read permissions set and the Locator path refers to a SAS download URL.</source>
          <target state="new">The AccessPolicy has read permissions set and the Locator path refers to a SAS download URL.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If successful, the following response is returned:</source>
          <target state="new">If successful, the following response is returned:</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The returned <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property contains the SAS URL.</source>
          <target state="new">The returned <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> property contains the SAS URL.</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If you download storage encrypted content, you must manually decrypt it before rendering it, or use the Storage Decryption MediaProcessor in a processing task to output processed files in the clear to an OutputAsset and then download from that Asset.</source>
          <target state="new">If you download storage encrypted content, you must manually decrypt it before rendering it, or use the Storage Decryption MediaProcessor in a processing task to output processed files in the clear to an OutputAsset and then download from that Asset.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For more information on processing, see Creating an Encoding Job with the Media Services REST API.</source>
          <target state="new">For more information on processing, see Creating an Encoding Job with the Media Services REST API.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Also, SAS URL Locators cannot be updated after they have been created.</source>
          <target state="new">Also, SAS URL Locators cannot be updated after they have been created.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>For example, you cannot reuse the same Locator with an updated StartTime value.</source>
          <target state="new">For example, you cannot reuse the same Locator with an updated StartTime value.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This is because of the way SAS URLs are created.</source>
          <target state="new">This is because of the way SAS URLs are created.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If you want to access an asset for download after a Locator has expired, then you must create a new one with a new StartTime.</source>
          <target state="new">If you want to access an asset for download after a Locator has expired, then you must create a new one with a new StartTime.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Download files</source>
          <target state="new">Download files</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Once you have the AccessPolicy and Locator set, you can download files using the Azure Storage REST APIs.</source>
          <target state="new">Once you have the AccessPolicy and Locator set, you can download files using the Azure Storage REST APIs.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You must add the file name for the file you want to download to the Locator <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> value received in the previous section.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You must add the file name for the file you want to download to the Locator <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> value received in the previous section.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For example, https://storagetestaccount001.blob.core.windows.net/asset-e7b02da4-5a69-40e7-a8db-e8f4f697aac0/BigBuckBunny.mp4?</source>
          <target state="new">For example, https://storagetestaccount001.blob.core.windows.net/asset-e7b02da4-5a69-40e7-a8db-e8f4f697aac0/BigBuckBunny.mp4?</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>For more information on working with Azure storage blobs, see <bpt id="p1">[</bpt>Blob Service REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/dd135733.aspx)</ept>.</source>
          <target state="new">For more information on working with Azure storage blobs, see <bpt id="p1">[</bpt>Blob Service REST API<ept id="p1">](http://msdn.microsoft.com/library/azure/dd135733.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>As a result of the encoding job that you performed earlier (encoding into Adaptive MP4 set), you have multiple MP4 files that you can progressively download.</source>
          <target state="new">As a result of the encoding job that you performed earlier (encoding into Adaptive MP4 set), you have multiple MP4 files that you can progressively download.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Creating an streaming URL for streaming content</source>
          <target state="new">Creating an streaming URL for streaming content</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The following code shows how to create a streaming URL Locator:</source>
          <target state="new">The following code shows how to create a streaming URL Locator:</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>If successful, the following response is returned:</source>
          <target state="new">If successful, the following response is returned:</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>To stream a Smooth Streaming origin URL in a streaming media player, you must append the Path property with the name of the Smooth Streaming manifest file, followed by "/manifest".</source>
          <target state="new">To stream a Smooth Streaming origin URL in a streaming media player, you must append the Path property with the name of the Smooth Streaming manifest file, followed by "/manifest".</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>To stream HLS, append (format=m3u8-aapl) after the "/manifest".</source>
          <target state="new">To stream HLS, append (format=m3u8-aapl) after the "/manifest".</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>To stream MPEG DASH, append (format=mpd-time-csf) after the "/manifest".</source>
          <target state="new">To stream MPEG DASH, append (format=mpd-time-csf) after the "/manifest".</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="play"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Play your content</source>
          <target state="new"><ph id="ph1">&lt;a id="play"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Play your content</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>To stream you video, use <bpt id="p1">[</bpt>Azure Media Services Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</source>
          <target state="new">To stream you video, use <bpt id="p1">[</bpt>Azure Media Services Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>To test progressive download, paste a URL into a browser (for example, IE, Chrome, Safari).</source>
          <target state="new">To test progressive download, paste a URL into a browser (for example, IE, Chrome, Safari).</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="new">Additional Resources</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://channel9.msdn.com/Shows/Azure-Friday/Azure-Media-Services-101-Get-your-video-online-now-"&gt;</ph>Azure Media Services 101 - Get your video online now!<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="http://channel9.msdn.com/Shows/Azure-Friday/Azure-Media-Services-101-Get-your-video-online-now-"&gt;</ph>Azure Media Services 101 - Get your video online now!<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://channel9.msdn.com/Shows/Azure-Friday/Azure-Media-Services-102-Dynamic-Packaging-and-Mobile-Devices"&gt;</ph>Azure Media Services 102 - Dynamic Packaging and Mobile Devices<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="http://channel9.msdn.com/Shows/Azure-Friday/Azure-Media-Services-102-Dynamic-Packaging-and-Mobile-Devices"&gt;</ph>Azure Media Services 102 - Dynamic Packaging and Mobile Devices<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa7ca3782b2d04a4b2dec4f6bef921deee4f2ccc</xliffext:olfilehash>
  </header>
</xliff>