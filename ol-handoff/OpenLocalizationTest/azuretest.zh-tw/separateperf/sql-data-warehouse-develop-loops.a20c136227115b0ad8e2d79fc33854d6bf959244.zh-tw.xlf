<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Loops in SQL Data Warehouse | Microsoft Azure</source>
          <target state="new">Loops in SQL Data Warehouse | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tips for Transact-SQL loops and replacing cursors in Azure SQL Data Warehouse for developing solutions.</source>
          <target state="new">Tips for Transact-SQL loops and replacing cursors in Azure SQL Data Warehouse for developing solutions.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Loops in SQL Data Warehouse</source>
          <target state="new">Loops in SQL Data Warehouse</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SQL Data Warehouse supports the <bpt id="p1">[</bpt>WHILE<ept id="p1">][]</ept> loop for repeatedly executing statement blocks.</source>
          <target state="new">SQL Data Warehouse supports the <bpt id="p1">[</bpt>WHILE<ept id="p1">][]</ept> loop for repeatedly executing statement blocks.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This will continue for as long as the specified conditions are true or until the code specifically terminates the loop using the <ph id="ph1">`BREAK`</ph> keyword.</source>
          <target state="new">This will continue for as long as the specified conditions are true or until the code specifically terminates the loop using the <ph id="ph1">`BREAK`</ph> keyword.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Loops are particularly useful for replacing cursors defined in SQL code.</source>
          <target state="new">Loops are particularly useful for replacing cursors defined in SQL code.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Fortunately, almost all cursors that are written in SQL code are of the fast forward, read only variety.</source>
          <target state="new">Fortunately, almost all cursors that are written in SQL code are of the fast forward, read only variety.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore <bpt id="p1">[</bpt><ept id="p1">WHILE]</ept> loops are a great alternative if you find yourself having to replace one.</source>
          <target state="new">Therefore <bpt id="p1">[</bpt><ept id="p1">WHILE]</ept> loops are a great alternative if you find yourself having to replace one.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Leveraging loops and replacing cursors in SQL Data Warehouse</source>
          <target state="new">Leveraging loops and replacing cursors in SQL Data Warehouse</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, before diving in head first you should ask yourself the following question: "Could this cursor be re-written to use set based operations?".</source>
          <target state="new">However, before diving in head first you should ask yourself the following question: "Could this cursor be re-written to use set based operations?".</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In many cases the answer will be yes.</source>
          <target state="new">In many cases the answer will be yes.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>More often than not the best approach is to do just that.</source>
          <target state="new">More often than not the best approach is to do just that.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A set based operation will often perform significantly faster than an iterative row by row approach.</source>
          <target state="new">A set based operation will often perform significantly faster than an iterative row by row approach.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Fast forward read only cursors can be easily replaced with a looping construct.</source>
          <target state="new">Fast forward read only cursors can be easily replaced with a looping construct.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Below is a simple example to convey the approach.</source>
          <target state="new">Below is a simple example to convey the approach.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The code example updates the statistics for every table in the database.</source>
          <target state="new">The code example updates the statistics for every table in the database.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By iterating over the tables in the loop we are able to execute each command in sequence.</source>
          <target state="new">By iterating over the tables in the loop we are able to execute each command in sequence.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Firstly, create a temporary table containing a unique row number used to identify the individual statements:</source>
          <target state="new">Firstly, create a temporary table containing a unique row number used to identify the individual statements:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Secondly, initialize the variables required to perform the loop:</source>
          <target state="new">Secondly, initialize the variables required to perform the loop:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Now loop over statements executing them one at a time:</source>
          <target state="new">Now loop over statements executing them one at a time:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally drop the temporary table created in the first step</source>
          <target state="new">Finally drop the temporary table created in the first step</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Next steps
For more development tips, see [development overview][].</source>
          <target state="new">Next steps
For more development tips, see [development overview][].</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a93d2d0dcd4c238df1aa934cc69c091c64b1646</xliffext:olfilehash>
  </header>
</xliff>