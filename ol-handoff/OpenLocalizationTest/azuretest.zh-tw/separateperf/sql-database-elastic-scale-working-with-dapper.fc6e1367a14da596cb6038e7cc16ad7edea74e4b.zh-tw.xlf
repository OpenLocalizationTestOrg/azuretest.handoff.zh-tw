<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using elastic database client library with Dapper</source>
          <target state="new">Using elastic database client library with Dapper</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using elastic database client library with Dapper.</source>
          <target state="new">Using elastic database client library with Dapper.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using elastic database client library with Dapper</source>
          <target state="new">Using elastic database client library with Dapper</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document is for developers that rely on Dapper to build applications, but also want to embrace <bpt id="p1">[</bpt>elastic database tooling<ept id="p1">](sql-database-elastic-scale-introduction.md)</ept> to create applications that implement sharding to scale-out their data tier.</source>
          <target state="new">This document is for developers that rely on Dapper to build applications, but also want to embrace <bpt id="p1">[</bpt>elastic database tooling<ept id="p1">](sql-database-elastic-scale-introduction.md)</ept> to create applications that implement sharding to scale-out their data tier.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document illustrates the changes in Dapper-based applications that are necessary to integrate with elastic database tools.</source>
          <target state="new">This document illustrates the changes in Dapper-based applications that are necessary to integrate with elastic database tools.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Our focus is on composing the elastic database shard management and data dependent routing with Dapper.</source>
          <target state="new">Our focus is on composing the elastic database shard management and data dependent routing with Dapper.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sample Code<ept id="p1">**</ept>: <bpt id="p2">[</bpt>Elastic database tools for Azure SQL Database - Dapper integration<ept id="p2">](https://code.msdn.microsoft.com/Elastic-Scale-with-Azure-e19fc77f)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Sample Code<ept id="p1">**</ept>: <bpt id="p2">[</bpt>Elastic database tools for Azure SQL Database - Dapper integration<ept id="p2">](https://code.msdn.microsoft.com/Elastic-Scale-with-Azure-e19fc77f)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Integrating <bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DapperExtensions<ept id="p2">**</ept> with the elastic database client library for Azure SQL Database is easy.</source>
          <target state="new">Integrating <bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DapperExtensions<ept id="p2">**</ept> with the elastic database client library for Azure SQL Database is easy.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Your applications can use data dependent routing by changing the creation and opening of new <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects to use the <bpt id="p2">[</bpt>OpenConnectionForKey<ept id="p2">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call from the <bpt id="p3">[</bpt>client library<ept id="p3">](http://msdn.microsoft.com/library/azure/dn765902.aspx)</ept>.</source>
          <target state="new">Your applications can use data dependent routing by changing the creation and opening of new <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects to use the <bpt id="p2">[</bpt>OpenConnectionForKey<ept id="p2">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call from the <bpt id="p3">[</bpt>client library<ept id="p3">](http://msdn.microsoft.com/library/azure/dn765902.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This limits changes in your application to only where new connections are created and opened.</source>
          <target state="new">This limits changes in your application to only where new connections are created and opened.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Dapper overview</source>
          <target state="new">Dapper overview</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> is an object-relational mapper.</source>
          <target state="new"><bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> is an object-relational mapper.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It maps .NET objects from your application to a relational database (and vice versa).</source>
          <target state="new">It maps .NET objects from your application to a relational database (and vice versa).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first part of the sample code illustrates how you can integrate the elastic database client library with Dapper-based applications.</source>
          <target state="new">The first part of the sample code illustrates how you can integrate the elastic database client library with Dapper-based applications.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The second part of the sample code illustrates how to integrate when using both Dapper and DapperExtensions.</source>
          <target state="new">The second part of the sample code illustrates how to integrate when using both Dapper and DapperExtensions.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The mapper functionality in Dapper provides extension methods on database connections that simplify submitting T-SQL statements for execution or querying the database.</source>
          <target state="new">The mapper functionality in Dapper provides extension methods on database connections that simplify submitting T-SQL statements for execution or querying the database.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For instance, Dapper makes it easy to map between your .NET objects and the parameters of SQL statements for <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> calls, or to consume the results of your SQL queries into .NET objects using <bpt id="p2">**</bpt>Query<ept id="p2">**</ept> calls from Dapper.</source>
          <target state="new">For instance, Dapper makes it easy to map between your .NET objects and the parameters of SQL statements for <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> calls, or to consume the results of your SQL queries into .NET objects using <bpt id="p2">**</bpt>Query<ept id="p2">**</ept> calls from Dapper.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When using DapperExtensions, you no longer need to provide the SQL statements.</source>
          <target state="new">When using DapperExtensions, you no longer need to provide the SQL statements.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Extensions methods such as <bpt id="p1">**</bpt>GetList<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept> over the database connection create the SQL statements behind the scenes.</source>
          <target state="new">Extensions methods such as <bpt id="p1">**</bpt>GetList<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept> over the database connection create the SQL statements behind the scenes.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Another benefit of Dapper and also DapperExtensions is that the application controls the creation of the database connection.</source>
          <target state="new">Another benefit of Dapper and also DapperExtensions is that the application controls the creation of the database connection.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This helps interact with the elastic database client library which brokers database connections based on the mapping of shardlets to databases.</source>
          <target state="new">This helps interact with the elastic database client library which brokers database connections based on the mapping of shardlets to databases.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To get the Dapper assemblies, see <bpt id="p1">[</bpt>Dapper dot net<ept id="p1">](http://www.nuget.org/packages/Dapper/)</ept>.</source>
          <target state="new">To get the Dapper assemblies, see <bpt id="p1">[</bpt>Dapper dot net<ept id="p1">](http://www.nuget.org/packages/Dapper/)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For the Dapper extensions, see <bpt id="p1">[</bpt>DapperExtensions<ept id="p1">](http://www.nuget.org/packages/DapperExtensions)</ept>.</source>
          <target state="new">For the Dapper extensions, see <bpt id="p1">[</bpt>DapperExtensions<ept id="p1">](http://www.nuget.org/packages/DapperExtensions)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A quick Look at the elastic database client library</source>
          <target state="new">A quick Look at the elastic database client library</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>With the elastic database client library, you define partitions of your application data called <bpt id="p1">*</bpt>shardlets<ept id="p1">*</ept> , map them to databases, and identify them by <bpt id="p2">*</bpt>sharding keys<ept id="p2">*</ept>.</source>
          <target state="new">With the elastic database client library, you define partitions of your application data called <bpt id="p1">*</bpt>shardlets<ept id="p1">*</ept> , map them to databases, and identify them by <bpt id="p2">*</bpt>sharding keys<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can have as many databases as you need and distribute your shardlets across these databases.</source>
          <target state="new">You can have as many databases as you need and distribute your shardlets across these databases.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The mapping of sharding key values to the databases is stored by a shard map provided by the library’s APIs.</source>
          <target state="new">The mapping of sharding key values to the databases is stored by a shard map provided by the library’s APIs.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This capability is called <bpt id="p1">**</bpt>shard map management<ept id="p1">**</ept>.</source>
          <target state="new">This capability is called <bpt id="p1">**</bpt>shard map management<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The shard map also serves as the broker of database connections for requests that carry a sharding key.</source>
          <target state="new">The shard map also serves as the broker of database connections for requests that carry a sharding key.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This capability is referred to as <bpt id="p1">**</bpt>data dependent routing<ept id="p1">**</ept>.</source>
          <target state="new">This capability is referred to as <bpt id="p1">**</bpt>data dependent routing<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>![Shard maps and data dependent routing][1]</source>
          <target state="new">![Shard maps and data dependent routing][1]</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The shard map manager protects users from inconsistent views into shardlet data that can occur when concurrent shardlet management operations are happening on the databases.</source>
          <target state="new">The shard map manager protects users from inconsistent views into shardlet data that can occur when concurrent shardlet management operations are happening on the databases.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To do so, the shard maps broker the database connections for an application built with the library.</source>
          <target state="new">To do so, the shard maps broker the database connections for an application built with the library.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When shard management operations could impact the shardlet, this allows the shard map functionality to automatically kill a database connection.</source>
          <target state="new">When shard management operations could impact the shardlet, this allows the shard map functionality to automatically kill a database connection.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead of using the traditional way to create connections for Dapper, we need to use the <bpt id="p1">[</bpt>OpenConnectionForKey method<ept id="p1">](http://msdn.microsoft.com/library/azure/dn824099.aspx)</ept>.</source>
          <target state="new">Instead of using the traditional way to create connections for Dapper, we need to use the <bpt id="p1">[</bpt>OpenConnectionForKey method<ept id="p1">](http://msdn.microsoft.com/library/azure/dn824099.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This ensures that all the validation takes place and connections are managed properly when any data moves between shards.</source>
          <target state="new">This ensures that all the validation takes place and connections are managed properly when any data moves between shards.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements for Dapper integration</source>
          <target state="new">Requirements for Dapper integration</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When working with both the elastic database client library and the Dapper APIs, we want to retain the following properties:</source>
          <target state="new">When working with both the elastic database client library and the Dapper APIs, we want to retain the following properties:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Scaleout<ept id="p1">**</ept>: We want to add or remove databases from the data tier of the sharded application as necessary for the capacity demands of the application.</source>
          <target state="new"><bpt id="p1">**</bpt>Scaleout<ept id="p1">**</ept>: We want to add or remove databases from the data tier of the sharded application as necessary for the capacity demands of the application.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Consistency<ept id="p1">**</ept>: Since our application is scaled out using sharding, we need to perform data dependent routing.</source>
          <target state="new"><bpt id="p1">**</bpt>Consistency<ept id="p1">**</ept>: Since our application is scaled out using sharding, we need to perform data dependent routing.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>We want to use the Data dependent routing capabilities of the library to do so.</source>
          <target state="new">We want to use the Data dependent routing capabilities of the library to do so.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In particular, we want to retain the validation and consistency guarantees provided by connections that are brokered through the shard map manager in order to avoid corruption or wrong query results.</source>
          <target state="new">In particular, we want to retain the validation and consistency guarantees provided by connections that are brokered through the shard map manager in order to avoid corruption or wrong query results.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This ensures that connections to a given shardlet are rejected or stopped if (for instance) the shardlet is currently moved to a different shard using Split/Merge APIs.</source>
          <target state="new">This ensures that connections to a given shardlet are rejected or stopped if (for instance) the shardlet is currently moved to a different shard using Split/Merge APIs.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object Mapping<ept id="p1">**</ept>: We want to retain the convenience of the mappings provided by Dapper to translate between classes in the application and the underlying database structures.</source>
          <target state="new"><bpt id="p1">**</bpt>Object Mapping<ept id="p1">**</ept>: We want to retain the convenience of the mappings provided by Dapper to translate between classes in the application and the underlying database structures.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following section provides guidance for these requirements for applications based on <bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DapperExtensions<ept id="p2">**</ept>.</source>
          <target state="new">The following section provides guidance for these requirements for applications based on <bpt id="p1">**</bpt>Dapper<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DapperExtensions<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Technical Guidance</source>
          <target state="new">Technical Guidance</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Data dependent routing with Dapper</source>
          <target state="new">Data dependent routing with Dapper</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With Dapper, the application is typically responsible for creating and opening the connections to the underlying database.</source>
          <target state="new">With Dapper, the application is typically responsible for creating and opening the connections to the underlying database.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Given a type T by the application, Dapper returns query results as .NET collections of type T. Dapper performs the mapping from the T-SQL result rows to the objects of type T. Similarly, Dapper maps .NET objects into SQL values or parameters for data manipulation language (DML) statements.</source>
          <target state="new">Given a type T by the application, Dapper returns query results as .NET collections of type T. Dapper performs the mapping from the T-SQL result rows to the objects of type T. Similarly, Dapper maps .NET objects into SQL values or parameters for data manipulation language (DML) statements.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Dapper offers this functionality via extension methods on the regular <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> object from the ADO .NET SQL Client libraries.</source>
          <target state="new">Dapper offers this functionality via extension methods on the regular <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> object from the ADO .NET SQL Client libraries.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The SQL connection returned by the Elastic Scale APIs for DDR are also regular <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects.</source>
          <target state="new">The SQL connection returned by the Elastic Scale APIs for DDR are also regular <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This allows us to directly use Dapper extensions over the type returned by the client library’s DDR API, as it is also a simple SQL Client connection.</source>
          <target state="new">This allows us to directly use Dapper extensions over the type returned by the client library’s DDR API, as it is also a simple SQL Client connection.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These observations make it straightforward to use connections brokered by the elastic database client library for Dapper.</source>
          <target state="new">These observations make it straightforward to use connections brokered by the elastic database client library for Dapper.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This code example (from the accompanying sample) illustrates the approach where the sharding key is provided by the application to the library to broker the connection to the right shard.</source>
          <target state="new">This code example (from the accompanying sample) illustrates the approach where the sharding key is provided by the application to the library to broker the connection to the right shard.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The call to the <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> API replaces the default creation and opening of a SQL Client connection.</source>
          <target state="new">The call to the <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> API replaces the default creation and opening of a SQL Client connection.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call takes the arguments that are required for data dependent routing:</source>
          <target state="new">The <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call takes the arguments that are required for data dependent routing:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The shard map to access the data dependent routing interfaces</source>
          <target state="new">The shard map to access the data dependent routing interfaces</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The sharding key to identify the shardlet</source>
          <target state="new">The sharding key to identify the shardlet</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The credentials (user name and password) to connect to the shard</source>
          <target state="new">The credentials (user name and password) to connect to the shard</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The shard map object creates a connection to the shard that holds the shardlet for the given sharding key.</source>
          <target state="new">The shard map object creates a connection to the shard that holds the shardlet for the given sharding key.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The elastic database client APIs also tag the connection to implement its consistency guarantees.</source>
          <target state="new">The elastic database client APIs also tag the connection to implement its consistency guarantees.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Since the call to <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> returns a regular SQL Client connection object, the subsequent call to the <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> extension method from Dapper follows the standard Dapper practice.</source>
          <target state="new">Since the call to <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> returns a regular SQL Client connection object, the subsequent call to the <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> extension method from Dapper follows the standard Dapper practice.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Queries work very much the same way – you first open the connection using <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> from the client API.</source>
          <target state="new">Queries work very much the same way – you first open the connection using <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> from the client API.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Then you use the regular Dapper extension methods to map the results of your SQL query into .NET objects:</source>
          <target state="new">Then you use the regular Dapper extension methods to map the results of your SQL query into .NET objects:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>using<ept id="p1">**</ept> block with the DDR connection scopes all database operations within the block to the one shard where tenantId1 is kept.</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>using<ept id="p1">**</ept> block with the DDR connection scopes all database operations within the block to the one shard where tenantId1 is kept.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The query only returns blogs stored on the current shard, but not the ones stored on any other shards.</source>
          <target state="new">The query only returns blogs stored on the current shard, but not the ones stored on any other shards.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Data dependent routing with Dapper and DapperExtensions</source>
          <target state="new">Data dependent routing with Dapper and DapperExtensions</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Dapper comes with an ecosystem of additional extensions that can provide further convenience and abstraction from the database when developing database applications.</source>
          <target state="new">Dapper comes with an ecosystem of additional extensions that can provide further convenience and abstraction from the database when developing database applications.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>DapperExtensions is an example.</source>
          <target state="new">DapperExtensions is an example.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Using DapperExtensions in your application does not change how database connections are created and managed.</source>
          <target state="new">Using DapperExtensions in your application does not change how database connections are created and managed.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It is still the application’s responsibility to open connections, and regular SQL Client connection objects are expected by the extension methods.</source>
          <target state="new">It is still the application’s responsibility to open connections, and regular SQL Client connection objects are expected by the extension methods.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We can rely on the <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> as outlined above.</source>
          <target state="new">We can rely on the <bpt id="p1">[</bpt>OpenConnectionForKey<ept id="p1">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> as outlined above.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>As the following code samples show, the only change is that we do no longer have to write the T-SQL statements:</source>
          <target state="new">As the following code samples show, the only change is that we do no longer have to write the T-SQL statements:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>And here is the code sample for the query:</source>
          <target state="new">And here is the code sample for the query:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Handling transient faults</source>
          <target state="new">Handling transient faults</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The Microsoft Patterns &amp; Practices team published the <bpt id="p1">[</bpt>Transient Fault Handling Application Block<ept id="p1">](http://msdn.microsoft.com/library/hh680934.aspx)</ept> to help application developers mitigate common transient fault conditions encountered when running in the cloud.</source>
          <target state="new">The Microsoft Patterns &amp; Practices team published the <bpt id="p1">[</bpt>Transient Fault Handling Application Block<ept id="p1">](http://msdn.microsoft.com/library/hh680934.aspx)</ept> to help application developers mitigate common transient fault conditions encountered when running in the cloud.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Perseverance, Secret of All Triumphs: Using the Transient Fault Handling Application Block<ept id="p1">](http://msdn.microsoft.com/library/dn440719.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Perseverance, Secret of All Triumphs: Using the Transient Fault Handling Application Block<ept id="p1">](http://msdn.microsoft.com/library/dn440719.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The code sample relies on the transient fault library to protect against transient faults.</source>
          <target state="new">The code sample relies on the transient fault library to protect against transient faults.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="p1">**</ept> in the code above is defined as a <bpt id="p2">**</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="p2">**</ept> with a retry count of 10, and 5 seconds wait time between retries.</source>
          <target state="new"><bpt id="p1">**</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="p1">**</ept> in the code above is defined as a <bpt id="p2">**</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="p2">**</ept> with a retry count of 10, and 5 seconds wait time between retries.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you are using transactions, make sure that your retry scope goes back to the beginning of the transaction in the case of a transient fault.</source>
          <target state="new">If you are using transactions, make sure that your retry scope goes back to the beginning of the transaction in the case of a transient fault.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="new">Limitations</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The approaches outlined in this document entail a couple of limitations:</source>
          <target state="new">The approaches outlined in this document entail a couple of limitations:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The sample code for this document does not demonstrate how to manage schema across shards.</source>
          <target state="new">The sample code for this document does not demonstrate how to manage schema across shards.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Given a request, we assume that all its database processing is contained within a single shard as identified by the sharding key provided by the request.</source>
          <target state="new">Given a request, we assume that all its database processing is contained within a single shard as identified by the sharding key provided by the request.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, this assumption does not always hold, for example, when it is not possible to make a sharding key available.</source>
          <target state="new">However, this assumption does not always hold, for example, when it is not possible to make a sharding key available.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To address this, the elastic database client library includes the <bpt id="p1">[</bpt>MultiShardQuery class<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.query.multishardexception.aspx)</ept>.</source>
          <target state="new">To address this, the elastic database client library includes the <bpt id="p1">[</bpt>MultiShardQuery class<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.query.multishardexception.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The class implements a connection abstraction for querying over several shards.</source>
          <target state="new">The class implements a connection abstraction for querying over several shards.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Using MultiShardQuery in combination with Dapper is beyond the scope of this document.</source>
          <target state="new">Using MultiShardQuery in combination with Dapper is beyond the scope of this document.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="new">Conclusion</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Applications using Dapper and DapperExtensions can easily benefit from elastic database tools for Azure SQL Database.</source>
          <target state="new">Applications using Dapper and DapperExtensions can easily benefit from elastic database tools for Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Through the steps outlined in this document, those applications can use the tool's capability for data dependent routing by changing the creation and opening of new <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects to use the <bpt id="p2">[</bpt>OpenConnectionForKey<ept id="p2">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call of the elastic database client library.</source>
          <target state="new">Through the steps outlined in this document, those applications can use the tool's capability for data dependent routing by changing the creation and opening of new <bpt id="p1">[</bpt>SqlConnection<ept id="p1">](http://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> objects to use the <bpt id="p2">[</bpt>OpenConnectionForKey<ept id="p2">](http://msdn.microsoft.com/library/azure/dn807226.aspx)</ept> call of the elastic database client library.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This limits the application changes required to those places where new connections are created and opened.</source>
          <target state="new">This limits the application changes required to those places where new connections are created and opened.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93fcf7c19a949f96a1c9dbfc7e3ee620721c2cd6</xliffext:olfilehash>
  </header>
</xliff>