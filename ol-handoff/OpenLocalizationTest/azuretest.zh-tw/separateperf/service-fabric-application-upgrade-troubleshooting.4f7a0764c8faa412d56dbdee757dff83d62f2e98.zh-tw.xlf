<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting Service Fabric application upgrades</source>
          <target state="new">Troubleshooting Service Fabric application upgrades</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article covers some common issues around upgrading a Service Fabric application and how to resolve them.</source>
          <target state="new">This article covers some common issues around upgrading a Service Fabric application and how to resolve them.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Troubleshoot application upgrades</source>
          <target state="new">Troubleshoot application upgrades</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article covers some of the common issues around upgrading a Service Fabric application and how to resolve them.</source>
          <target state="new">This article covers some of the common issues around upgrading a Service Fabric application and how to resolve them.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Troubleshoot a failed application upgrade</source>
          <target state="new">Troubleshoot a failed application upgrade</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When an upgrade fails, the output of the <bpt id="p1">**</bpt>Get-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command will contain some additional information for debugging the failure.</source>
          <target state="new">When an upgrade fails, the output of the <bpt id="p1">**</bpt>Get-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command will contain some additional information for debugging the failure.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This information can be used to:</source>
          <target state="new">This information can be used to:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Identify the failure type</source>
          <target state="new">Identify the failure type</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Identify the failure reason</source>
          <target state="new">Identify the failure reason</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Isolate the failing component(s) for further investigation</source>
          <target state="new">Isolate the failing component(s) for further investigation</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This information will be available as soon as Service Fabric detects the failure regardless of whether the <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept> is to rollback or suspend the upgrade.</source>
          <target state="new">This information will be available as soon as Service Fabric detects the failure regardless of whether the <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept> is to rollback or suspend the upgrade.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Identify the failure type</source>
          <target state="new">Identify the failure type</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the output of <bpt id="p1">**</bpt>Get-ServiceFabricApplicationUpgrade<ept id="p1">**</ept>, <bpt id="p2">**</bpt>FailureTimestampUtc<ept id="p2">**</ept> identifies the timestamp (in UTC) at which an upgrade failure was detected by Service Fabric and the <bpt id="p3">**</bpt>FailureAction<ept id="p3">**</ept> was triggered.</source>
          <target state="new">In the output of <bpt id="p1">**</bpt>Get-ServiceFabricApplicationUpgrade<ept id="p1">**</ept>, <bpt id="p2">**</bpt>FailureTimestampUtc<ept id="p2">**</ept> identifies the timestamp (in UTC) at which an upgrade failure was detected by Service Fabric and the <bpt id="p3">**</bpt>FailureAction<ept id="p3">**</ept> was triggered.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FailureReason<ept id="p1">**</ept> identifies one of three potential high-level causes of the failure:</source>
          <target state="new">The <bpt id="p1">**</bpt>FailureReason<ept id="p1">**</ept> identifies one of three potential high-level causes of the failure:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>UpgradeDomainTimeout - Indicates that a particular upgrade domain took too long to complete and <bpt id="p1">**</bpt>UpgradeDomainTimeout<ept id="p1">**</ept> expired.</source>
          <target state="new">UpgradeDomainTimeout - Indicates that a particular upgrade domain took too long to complete and <bpt id="p1">**</bpt>UpgradeDomainTimeout<ept id="p1">**</ept> expired.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>OverallUpgradeTimeout - Indicates that the overall upgrade took too long to complete and <bpt id="p1">**</bpt>UpgradeTimeout<ept id="p1">**</ept> expired.</source>
          <target state="new">OverallUpgradeTimeout - Indicates that the overall upgrade took too long to complete and <bpt id="p1">**</bpt>UpgradeTimeout<ept id="p1">**</ept> expired.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>HealthCheck - Indicates that after upgrading an Upgrade Domain, the application remained unhealthy according to the specified health policies and <bpt id="p1">**</bpt>HealthCheckRetryTimeout<ept id="p1">**</ept> expired.</source>
          <target state="new">HealthCheck - Indicates that after upgrading an Upgrade Domain, the application remained unhealthy according to the specified health policies and <bpt id="p1">**</bpt>HealthCheckRetryTimeout<ept id="p1">**</ept> expired.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These entries will only show up in the output when the upgrade fails and starts rolling back.</source>
          <target state="new">These entries will only show up in the output when the upgrade fails and starts rolling back.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Further information will be displayed depending on the type of the failure.</source>
          <target state="new">Further information will be displayed depending on the type of the failure.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Investigate upgrade timeouts</source>
          <target state="new">Investigate upgrade timeouts</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Upgrade timeout failures are most commonly caused by service availability issues.</source>
          <target state="new">Upgrade timeout failures are most commonly caused by service availability issues.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The output below is typical of upgrades where service replicas or instances fail to start in the new code version.</source>
          <target state="new">The output below is typical of upgrades where service replicas or instances fail to start in the new code version.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UpgradeDomainProgressAtFailure<ept id="p1">**</ept> field captures a snapshot of any pending upgrade work at the time of failure.</source>
          <target state="new">The <bpt id="p1">**</bpt>UpgradeDomainProgressAtFailure<ept id="p1">**</ept> field captures a snapshot of any pending upgrade work at the time of failure.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this example, we can see that the upgrade failed at upgrade domain <bpt id="p1">*</bpt>MYUD1<ept id="p1">*</ept> and two partitions (<bpt id="p2">*</bpt>744c8d9f-1d26-417e-a60e-cd48f5c098f0<ept id="p2">*</ept> and <bpt id="p3">*</bpt>4b43f4d8-b26b-424e-9307-7a7a62e79750<ept id="p3">*</ept>) were stuck, unable to place primary replicas (<bpt id="p4">*</bpt>WaitForPrimaryPlacement<ept id="p4">*</ept>) on target nodes <bpt id="p5">*</bpt>Node1<ept id="p5">*</ept> and <bpt id="p6">*</bpt>Node4<ept id="p6">*</ept>.</source>
          <target state="new">In this example, we can see that the upgrade failed at upgrade domain <bpt id="p1">*</bpt>MYUD1<ept id="p1">*</ept> and two partitions (<bpt id="p2">*</bpt>744c8d9f-1d26-417e-a60e-cd48f5c098f0<ept id="p2">*</ept> and <bpt id="p3">*</bpt>4b43f4d8-b26b-424e-9307-7a7a62e79750<ept id="p3">*</ept>) were stuck, unable to place primary replicas (<bpt id="p4">*</bpt>WaitForPrimaryPlacement<ept id="p4">*</ept>) on target nodes <bpt id="p5">*</bpt>Node1<ept id="p5">*</ept> and <bpt id="p6">*</bpt>Node4<ept id="p6">*</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-ServiceFabricNode<ept id="p1">**</ept> command can be used to verify that these two nodes are in upgrade domain <bpt id="p2">*</bpt>MYUD1<ept id="p2">*</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Get-ServiceFabricNode<ept id="p1">**</ept> command can be used to verify that these two nodes are in upgrade domain <bpt id="p2">*</bpt>MYUD1<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>UpgradePhase<ept id="p1">*</ept> says <bpt id="p2">*</bpt>PostUpgradeSafetyCheck<ept id="p2">*</ept>, which means that these safety checks are occurring after all nodes in the upgrade domain had finished upgrading.</source>
          <target state="new">The <bpt id="p1">*</bpt>UpgradePhase<ept id="p1">*</ept> says <bpt id="p2">*</bpt>PostUpgradeSafetyCheck<ept id="p2">*</ept>, which means that these safety checks are occurring after all nodes in the upgrade domain had finished upgrading.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All this information combined points to a potential issue with the new version of the application code.</source>
          <target state="new">All this information combined points to a potential issue with the new version of the application code.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The most common issues are service errors in the open or promotion to primary code paths.</source>
          <target state="new">The most common issues are service errors in the open or promotion to primary code paths.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>UpgradePhase<ept id="p1">*</ept> of <bpt id="p2">*</bpt>PreUpgradeSafetyCheck<ept id="p2">*</ept> means there were issues preparing the upgrade domain before actually performing the upgrade.</source>
          <target state="new">An <bpt id="p1">*</bpt>UpgradePhase<ept id="p1">*</ept> of <bpt id="p2">*</bpt>PreUpgradeSafetyCheck<ept id="p2">*</ept> means there were issues preparing the upgrade domain before actually performing the upgrade.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The most common issues in this case are service errors in the close or demotion from primary code paths.</source>
          <target state="new">The most common issues in this case are service errors in the close or demotion from primary code paths.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The current <bpt id="p1">**</bpt>UpgradeState<ept id="p1">**</ept> is <bpt id="p2">*</bpt>RollingBackCompleted<ept id="p2">*</ept>, so the original upgrade must have been performed with a rollback <bpt id="p3">**</bpt>FailureAction<ept id="p3">**</ept>, which automatically rolled back the upgrade upon failure.</source>
          <target state="new">The current <bpt id="p1">**</bpt>UpgradeState<ept id="p1">**</ept> is <bpt id="p2">*</bpt>RollingBackCompleted<ept id="p2">*</ept>, so the original upgrade must have been performed with a rollback <bpt id="p3">**</bpt>FailureAction<ept id="p3">**</ept>, which automatically rolled back the upgrade upon failure.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the original upgrade had been performed with a manual <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, then the upgrade would instead be in a suspended state to allow live debugging of the application.</source>
          <target state="new">If the original upgrade had been performed with a manual <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, then the upgrade would instead be in a suspended state to allow live debugging of the application.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Investigate health check failures</source>
          <target state="new">Investigate health check failures</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Health check failures can be triggered by a variety of additional issues that can happen after all nodes in an upgrade domain finish upgrading, passing all safety checks.</source>
          <target state="new">Health check failures can be triggered by a variety of additional issues that can happen after all nodes in an upgrade domain finish upgrading, passing all safety checks.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The output below is typical of an upgrade failure due to failed health checks.</source>
          <target state="new">The output below is typical of an upgrade failure due to failed health checks.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UnhealthyEvaluations<ept id="p1">**</ept> field captures a snapshot of all failing health checks at the time of the upgrade failure according the user-specified <bpt id="p2">[</bpt>Health Policy<ept id="p2">](service-fabric-health-introduction.md)</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>UnhealthyEvaluations<ept id="p1">**</ept> field captures a snapshot of all failing health checks at the time of the upgrade failure according the user-specified <bpt id="p2">[</bpt>Health Policy<ept id="p2">](service-fabric-health-introduction.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Investigating health check failures first requires an understanding of the Service Fabric health model, but even without such an in-depth understanding, we can see that two services are unhealthy: <bpt id="p1">*</bpt>fabric:/DemoApp/Svc3<ept id="p1">*</ept> and <bpt id="p2">*</bpt>fabric:/DemoApp/Svc2<ept id="p2">*</ept> along with the error health reports ("InjectedFault" in this case).</source>
          <target state="new">Investigating health check failures first requires an understanding of the Service Fabric health model, but even without such an in-depth understanding, we can see that two services are unhealthy: <bpt id="p1">*</bpt>fabric:/DemoApp/Svc3<ept id="p1">*</ept> and <bpt id="p2">*</bpt>fabric:/DemoApp/Svc2<ept id="p2">*</ept> along with the error health reports ("InjectedFault" in this case).</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this example, 2 out of 4 services are unhealthy, below the default target of 0% unhealthy (<bpt id="p1">*</bpt>MaxPercentUnhealthyServices<ept id="p1">*</ept>).</source>
          <target state="new">In this example, 2 out of 4 services are unhealthy, below the default target of 0% unhealthy (<bpt id="p1">*</bpt>MaxPercentUnhealthyServices<ept id="p1">*</ept>).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The upgrade was suspended upon failing by specifying a <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept> of manual when starting the upgrade, so we can investigate the live system in the failed state if desired before taking any further actions.</source>
          <target state="new">The upgrade was suspended upon failing by specifying a <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept> of manual when starting the upgrade, so we can investigate the live system in the failed state if desired before taking any further actions.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Recover from a suspended upgrade</source>
          <target state="new">Recover from a suspended upgrade</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>With a rollback <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, there is no recovery needed since the upgrade will automatically rollback upon failing.</source>
          <target state="new">With a rollback <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, there is no recovery needed since the upgrade will automatically rollback upon failing.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>With a manual <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, there are several recovery options:</source>
          <target state="new">With a manual <bpt id="p1">**</bpt>FailureAction<ept id="p1">**</ept>, there are several recovery options:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Manually trigger a rollback</source>
          <target state="new">Manually trigger a rollback</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Proceed through the remainder of the upgrade manually</source>
          <target state="new">Proceed through the remainder of the upgrade manually</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Resume the monitored upgrade</source>
          <target state="new">Resume the monitored upgrade</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-ServiceFabricApplicationRollback<ept id="p1">**</ept> command can be used at any time to start rolling back the application.</source>
          <target state="new">The <bpt id="p1">**</bpt>Start-ServiceFabricApplicationRollback<ept id="p1">**</ept> command can be used at any time to start rolling back the application.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Once the command returns successfully, the rollback request has been registered in the system and will start shortly.</source>
          <target state="new">Once the command returns successfully, the rollback request has been registered in the system and will start shortly.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Resume-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command can be used to proceed through the remainder of the upgrade manually, one upgrade domain at a time.</source>
          <target state="new">The <bpt id="p1">**</bpt>Resume-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command can be used to proceed through the remainder of the upgrade manually, one upgrade domain at a time.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this mode, only safety checks will be performed by the system - no more health checks will be performed.</source>
          <target state="new">In this mode, only safety checks will be performed by the system - no more health checks will be performed.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This command can only be used when the <bpt id="p1">*</bpt>UpgradeState<ept id="p1">*</ept> shows <bpt id="p2">*</bpt>RollingForwardPending<ept id="p2">*</ept>, which means that the current upgrade domain has finished upgrading but the next upgrade domain has not started yet (pending).</source>
          <target state="new">This command can only be used when the <bpt id="p1">*</bpt>UpgradeState<ept id="p1">*</ept> shows <bpt id="p2">*</bpt>RollingForwardPending<ept id="p2">*</ept>, which means that the current upgrade domain has finished upgrading but the next upgrade domain has not started yet (pending).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command can be used to resume the monitored upgrade with both safety and health checks being performed.</source>
          <target state="new">The <bpt id="p1">**</bpt>Update-ServiceFabricApplicationUpgrade<ept id="p1">**</ept> command can be used to resume the monitored upgrade with both safety and health checks being performed.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The upgrade will continue from the upgrade domain where it was last suspended and use the same upgrade parameters and health policies as before.</source>
          <target state="new">The upgrade will continue from the upgrade domain where it was last suspended and use the same upgrade parameters and health policies as before.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If needed, any of the upgrade parameters and health policies shown in the output above can be changed in the same command when resuming the upgrade.</source>
          <target state="new">If needed, any of the upgrade parameters and health policies shown in the output above can be changed in the same command when resuming the upgrade.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this example, the upgrade was resumed in Monitored mode leaving all other parameters unchanged, thereby using the same parameters and health policies as before.</source>
          <target state="new">In this example, the upgrade was resumed in Monitored mode leaving all other parameters unchanged, thereby using the same parameters and health policies as before.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Further troubleshooting</source>
          <target state="new">Further troubleshooting</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Service Fabric is not following the health policies specified</source>
          <target state="new">Service Fabric is not following the health policies specified</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Possible Cause 1:</source>
          <target state="new">Possible Cause 1:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Service Fabric translates all percentages into actual numbers of entities (e.g. replicas, partitions, and services) for health evaluation and always rounds up to the nearest number of whole entities.</source>
          <target state="new">Service Fabric translates all percentages into actual numbers of entities (e.g. replicas, partitions, and services) for health evaluation and always rounds up to the nearest number of whole entities.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, if the maximum <bpt id="p1">_</bpt>MaxPercentUnhealthyReplicasPerPartition<ept id="p1">_</ept> is 21% and there are 5 replicas, then Service Fabric will allow up to 2 replicas (i.e., <ph id="ph1">`Math.Ceiling (5\*0.21)`</ph>) to be unhealthy when evaluating partition health.</source>
          <target state="new">For example, if the maximum <bpt id="p1">_</bpt>MaxPercentUnhealthyReplicasPerPartition<ept id="p1">_</ept> is 21% and there are 5 replicas, then Service Fabric will allow up to 2 replicas (i.e., <ph id="ph1">`Math.Ceiling (5\*0.21)`</ph>) to be unhealthy when evaluating partition health.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Health policies should be set accordingly to account for this.</source>
          <target state="new">Health policies should be set accordingly to account for this.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Possible Cause 2:</source>
          <target state="new">Possible Cause 2:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Health policies are specified in terms of percentages of total services and not specific service instances.</source>
          <target state="new">Health policies are specified in terms of percentages of total services and not specific service instances.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, before an upgrade, assume that an application has four service instances A, B, C, and D, where service D is unhealthy but with no significant impact on the application.</source>
          <target state="new">For example, before an upgrade, assume that an application has four service instances A, B, C, and D, where service D is unhealthy but with no significant impact on the application.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We want to ignore the known unhealthy service D during upgrade and set the parameter <bpt id="p1">*</bpt>MaxPercentUnhealthyServices<ept id="p1">*</ept> to be 25% assuming only A, B, and C need to be healthy.</source>
          <target state="new">We want to ignore the known unhealthy service D during upgrade and set the parameter <bpt id="p1">*</bpt>MaxPercentUnhealthyServices<ept id="p1">*</ept> to be 25% assuming only A, B, and C need to be healthy.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>However, during the upgrade, D may become healthy while C becomes unhealthy.</source>
          <target state="new">However, during the upgrade, D may become healthy while C becomes unhealthy.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The upgrade would still complete successfully in this case since only 25% of the services are unhealthy, which might result in unanticipated errors due to C being unexpectedly unhealthy instead of D. In this situation, D should be modeled as a different Service Type from A, B, and C. Since health policies can be specified on a per-Service Type basis, this would allow applying different unhealthy percentage thresholds to different services based on their roles in the application.</source>
          <target state="new">The upgrade would still complete successfully in this case since only 25% of the services are unhealthy, which might result in unanticipated errors due to C being unexpectedly unhealthy instead of D. In this situation, D should be modeled as a different Service Type from A, B, and C. Since health policies can be specified on a per-Service Type basis, this would allow applying different unhealthy percentage thresholds to different services based on their roles in the application.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>I did not specify a health policy for application upgrade, but the upgrade still fails for some timeouts which I never specified</source>
          <target state="new">I did not specify a health policy for application upgrade, but the upgrade still fails for some timeouts which I never specified</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When health policies aren't provided to the upgrade request, they are taken from the <bpt id="p1">*</bpt>ApplicationManifest.xml<ept id="p1">*</ept> of the current application version (for example, if upgrading Application X from v1 to v2, application health policies specified for Application X in v1 are used).</source>
          <target state="new">When health policies aren't provided to the upgrade request, they are taken from the <bpt id="p1">*</bpt>ApplicationManifest.xml<ept id="p1">*</ept> of the current application version (for example, if upgrading Application X from v1 to v2, application health policies specified for Application X in v1 are used).</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If a different health policy should be used for the upgrade, then the policy needs to be specified as part of the application upgrade API call.</source>
          <target state="new">If a different health policy should be used for the upgrade, then the policy needs to be specified as part of the application upgrade API call.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Note that the policies specified as part of the API call only apply for the duration of the upgrade.</source>
          <target state="new">Note that the policies specified as part of the API call only apply for the duration of the upgrade.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Once the upgrade is completed, the policies specified in the <bpt id="p1">*</bpt>ApplicationManifest.xml<ept id="p1">*</ept> are used.</source>
          <target state="new">Once the upgrade is completed, the policies specified in the <bpt id="p1">*</bpt>ApplicationManifest.xml<ept id="p1">*</ept> are used.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Incorrect Timeouts specified.</source>
          <target state="new">Incorrect Timeouts specified.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Users may have wondered about what happens if the timeouts are set inconsistently, for example, having an <bpt id="p1">*</bpt>UpgradeTimeout<ept id="p1">*</ept> less than the <bpt id="p2">*</bpt>UpgradeDomainTimeout<ept id="p2">*</ept>.</source>
          <target state="new">Users may have wondered about what happens if the timeouts are set inconsistently, for example, having an <bpt id="p1">*</bpt>UpgradeTimeout<ept id="p1">*</ept> less than the <bpt id="p2">*</bpt>UpgradeDomainTimeout<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The answer is that an error is returned.</source>
          <target state="new">The answer is that an error is returned.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Other cases where this may happen is if <bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept> is less than the sum of <bpt id="p2">*</bpt>HealthCheckWaitDuration<ept id="p2">*</ept> and <bpt id="p3">*</bpt>HealthCheckRetryTimeout<ept id="p3">*</ept> or if <bpt id="p4">*</bpt>UpgradeDomainTimeout<ept id="p4">*</ept> is less than the sum of <bpt id="p5">*</bpt>HealthCheckWaitDuration<ept id="p5">*</ept> and <bpt id="p6">*</bpt>HealthCheckStableDuration<ept id="p6">*</ept>.</source>
          <target state="new">Other cases where this may happen is if <bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept> is less than the sum of <bpt id="p2">*</bpt>HealthCheckWaitDuration<ept id="p2">*</ept> and <bpt id="p3">*</bpt>HealthCheckRetryTimeout<ept id="p3">*</ept> or if <bpt id="p4">*</bpt>UpgradeDomainTimeout<ept id="p4">*</ept> is less than the sum of <bpt id="p5">*</bpt>HealthCheckWaitDuration<ept id="p5">*</ept> and <bpt id="p6">*</bpt>HealthCheckStableDuration<ept id="p6">*</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>My upgrades are taking too long</source>
          <target state="new">My upgrades are taking too long</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The time it takes for an upgrade to complete is dependent on the various health checks and timeouts specified, which in turn are dependent on the time it takes for your application to upgrade (including copying the package, deploying, and stabilizing).</source>
          <target state="new">The time it takes for an upgrade to complete is dependent on the various health checks and timeouts specified, which in turn are dependent on the time it takes for your application to upgrade (including copying the package, deploying, and stabilizing).</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Being too aggressive with timeouts might mean more failed upgrades, and thus starting conservatively with longer timeouts is recommended.</source>
          <target state="new">Being too aggressive with timeouts might mean more failed upgrades, and thus starting conservatively with longer timeouts is recommended.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A quick refresher on how the timeouts interact with the upgrade times:</source>
          <target state="new">A quick refresher on how the timeouts interact with the upgrade times:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Upgrade for a upgrade domain cannot complete faster than <bpt id="p1">*</bpt>HealthCheckWaitDuration<ept id="p1">*</ept> + <bpt id="p2">*</bpt>HealthCheckStableDuration<ept id="p2">*</ept>.</source>
          <target state="new">Upgrade for a upgrade domain cannot complete faster than <bpt id="p1">*</bpt>HealthCheckWaitDuration<ept id="p1">*</ept> + <bpt id="p2">*</bpt>HealthCheckStableDuration<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Upgrade failure cannot occur faster than <bpt id="p1">*</bpt>HealthCheckWaitDuration<ept id="p1">*</ept> + <bpt id="p2">*</bpt>HealthCheckRetryTimeout<ept id="p2">*</ept>.</source>
          <target state="new">Upgrade failure cannot occur faster than <bpt id="p1">*</bpt>HealthCheckWaitDuration<ept id="p1">*</ept> + <bpt id="p2">*</bpt>HealthCheckRetryTimeout<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The upgrade time for a upgrade domain is limited by <bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept>.</source>
          <target state="new">The upgrade time for a upgrade domain is limited by <bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>HealthCheckRetryTimeout<ept id="p1">*</ept> and <bpt id="p2">*</bpt>HealthCheckStableDuration<ept id="p2">*</ept> are both non-zero and the health of the application keeps switching back and forth, then the upgrade will eventually timeout on <bpt id="p3">*</bpt>UpgradeDomainTimeout<ept id="p3">*</ept>.</source>
          <target state="new">If <bpt id="p1">*</bpt>HealthCheckRetryTimeout<ept id="p1">*</ept> and <bpt id="p2">*</bpt>HealthCheckStableDuration<ept id="p2">*</ept> are both non-zero and the health of the application keeps switching back and forth, then the upgrade will eventually timeout on <bpt id="p3">*</bpt>UpgradeDomainTimeout<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept> starts counting down once the upgrade for the current upgrade domain begins.</source>
          <target state="new"><bpt id="p1">*</bpt>UpgradeDomainTimeout<ept id="p1">*</ept> starts counting down once the upgrade for the current upgrade domain begins.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Upgrade Tutorial</source>
          <target state="new">Upgrade Tutorial</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Upgrade Parameters</source>
          <target state="new">Upgrade Parameters</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Advanced Topics</source>
          <target state="new">Advanced Topics</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Data Serialization</source>
          <target state="new">Data Serialization</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09ccb2739de87984a0dba68daf91bc920795e1b8</xliffext:olfilehash>
  </header>
</xliff>