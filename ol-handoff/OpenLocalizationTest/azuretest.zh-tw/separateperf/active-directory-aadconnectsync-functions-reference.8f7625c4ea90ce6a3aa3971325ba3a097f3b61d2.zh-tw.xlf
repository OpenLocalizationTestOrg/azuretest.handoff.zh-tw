<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Sync: Functions Reference</source>
          <target state="new">Azure AD Connect Sync: Functions Reference</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reference of declarative provisioning expressions in Azure AD Connect Sync.</source>
          <target state="new">Reference of declarative provisioning expressions in Azure AD Connect Sync.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Sync: Functions Reference</source>
          <target state="new">Azure AD Connect Sync: Functions Reference</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization.</source>
          <target state="new">In Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Syntax of the functions is expressed using the following format:</source>
          <target state="new">The Syntax of the functions is expressed using the following format:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.</source>
          <target state="new">If a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The functions are strongly typed and they verify that the type passed in matches the documented type.</source>
          <target state="new">The functions are strongly typed and they verify that the type passed in matches the documented type.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An error is thrown if the type does not match.</source>
          <target state="new">An error is thrown if the type does not match.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The types are expressed with the following syntax:</source>
          <target state="new">The types are expressed with the following syntax:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bin<ept id="p1">**</ept> – Binary</source>
          <target state="new"><bpt id="p1">**</bpt>bin<ept id="p1">**</ept> – Binary</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bool<ept id="p1">**</ept> – Boolean</source>
          <target state="new"><bpt id="p1">**</bpt>bool<ept id="p1">**</ept> – Boolean</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dt<ept id="p1">**</ept> – UTC Date/Time</source>
          <target state="new"><bpt id="p1">**</bpt>dt<ept id="p1">**</ept> – UTC Date/Time</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>enum<ept id="p1">**</ept> – Enumeration of known constants</source>
          <target state="new"><bpt id="p1">**</bpt>enum<ept id="p1">**</ept> – Enumeration of known constants</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>exp<ept id="p1">**</ept> – Expression, which is expected to evaluate to a Boolean</source>
          <target state="new"><bpt id="p1">**</bpt>exp<ept id="p1">**</ept> – Expression, which is expected to evaluate to a Boolean</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>mvbin<ept id="p1">**</ept> – Multi Valued Binary</source>
          <target state="new"><bpt id="p1">**</bpt>mvbin<ept id="p1">**</ept> – Multi Valued Binary</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>mvstr<ept id="p1">**</ept> – Multi Valued Reference</source>
          <target state="new"><bpt id="p1">**</bpt>mvstr<ept id="p1">**</ept> – Multi Valued Reference</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>num<ept id="p1">**</ept> – Numeric</source>
          <target state="new"><bpt id="p1">**</bpt>num<ept id="p1">**</ept> – Numeric</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> – Single Valued Reference</source>
          <target state="new"><bpt id="p1">**</bpt>ref<ept id="p1">**</ept> – Single Valued Reference</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>str<ept id="p1">**</ept> – Single Valued String</source>
          <target state="new"><bpt id="p1">**</bpt>str<ept id="p1">**</ept> – Single Valued String</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>var<ept id="p1">**</ept> – A variant of (almost) any other type</source>
          <target state="new"><bpt id="p1">**</bpt>var<ept id="p1">**</ept> – A variant of (almost) any other type</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>void<ept id="p1">**</ept> – doesn’t return a value</source>
          <target state="new"><bpt id="p1">**</bpt>void<ept id="p1">**</ept> – doesn’t return a value</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Functions Reference</source>
          <target state="new">Functions Reference</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Conversion:</source>
          <target state="new">Conversion:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CBool<ept id="p1">](#cbool)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>CDate<ept id="p2">](#cdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>CGuid<ept id="p3">](#cguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>ConvertFromBase64<ept id="p4">](#convertfrombase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>ConvertToBase64<ept id="p5">](#converttobase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>ConvertFromUTF8Hex<ept id="p6">](#convertfromutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>ConvertToUTF8Hex<ept id="p7">](#converttoutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>CNum<ept id="p8">](#cnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p9">[</bpt>CRef<ept id="p9">](#cref)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p10">[</bpt>CStr<ept id="p10">](#cstr)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p11">[</bpt>StringFromGuid<ept id="p11">](#StringFromGuid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p12">[</bpt>StringFromSid<ept id="p12">](#stringfromsid)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>CBool<ept id="p1">](#cbool)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>CDate<ept id="p2">](#cdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>CGuid<ept id="p3">](#cguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>ConvertFromBase64<ept id="p4">](#convertfrombase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>ConvertToBase64<ept id="p5">](#converttobase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>ConvertFromUTF8Hex<ept id="p6">](#convertfromutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>ConvertToUTF8Hex<ept id="p7">](#converttoutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>CNum<ept id="p8">](#cnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p9">[</bpt>CRef<ept id="p9">](#cref)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p10">[</bpt>CStr<ept id="p10">](#cstr)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p11">[</bpt>StringFromGuid<ept id="p11">](#StringFromGuid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p12">[</bpt>StringFromSid<ept id="p12">](#stringfromsid)</ept></target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Date / Time:</source>
          <target state="new">Date / Time:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DateAdd<ept id="p1">](#dateadd)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>DateFromNum<ept id="p2">](#datefromnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>FormatDateTime<ept id="p3">](#formatdatetime)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>Now<ept id="p4">](#now)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>NumFromDate<ept id="p5">](#numfromdate)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>DateAdd<ept id="p1">](#dateadd)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>DateFromNum<ept id="p2">](#datefromnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>FormatDateTime<ept id="p3">](#formatdatetime)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>Now<ept id="p4">](#now)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>NumFromDate<ept id="p5">](#numfromdate)</ept></target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Directory</source>
          <target state="new">Directory</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DNComponent<ept id="p1">](#dncomponent)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>DNComponentRev<ept id="p2">](#dncomponentrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>EscapeDNComponent<ept id="p3">](#escapedncomponent)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>DNComponent<ept id="p1">](#dncomponent)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>DNComponentRev<ept id="p2">](#dncomponentrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>EscapeDNComponent<ept id="p3">](#escapedncomponent)</ept></target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Insprection:</source>
          <target state="new">Insprection:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsBitSet<ept id="p1">](#isbitset)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IsDate<ept id="p2">](#isdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>IsEmpty<ept id="p3">](#isempty)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>IsBitSet<ept id="p1">](#isbitset)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IsDate<ept id="p2">](#isdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>IsEmpty<ept id="p3">](#isempty)</ept></target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p1">[</bpt>IsGuid<ept id="p1">](#isguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IsNull<ept id="p2">](#isnull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>IsNullOrEmpty<ept id="p3">](#isnullorempty)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>IsNumeric<ept id="p4">](#isnumeric)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>IsPresent<ept id="p5">](#ispresent)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>IsString<ept id="p6">](#isstring)</ept></source>
          <target state="new">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p1">[</bpt>IsGuid<ept id="p1">](#isguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IsNull<ept id="p2">](#isnull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>IsNullOrEmpty<ept id="p3">](#isnullorempty)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>IsNumeric<ept id="p4">](#isnumeric)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>IsPresent<ept id="p5">](#ispresent)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>IsString<ept id="p6">](#isstring)</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Math:</source>
          <target state="new">Math:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BitAnd<ept id="p1">](#bitand)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>BitOr<ept id="p2">](#bitor)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>RandomNum<ept id="p3">](#randomnum)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>BitAnd<ept id="p1">](#bitand)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>BitOr<ept id="p2">](#bitor)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>RandomNum<ept id="p3">](#randomnum)</ept></target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Multi-valued</source>
          <target state="new">Multi-valued</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Contains<ept id="p1">](#contains)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>Count<ept id="p2">](#count)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Item<ept id="p3">](#item)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>ItemOrNull<ept id="p4">](#itemornull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Join<ept id="p5">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>RemoveDuplicates<ept id="p6">](#removeduplicates)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>Split<ept id="p7">](#split)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Contains<ept id="p1">](#contains)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>Count<ept id="p2">](#count)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Item<ept id="p3">](#item)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>ItemOrNull<ept id="p4">](#itemornull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Join<ept id="p5">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>RemoveDuplicates<ept id="p6">](#removeduplicates)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>Split<ept id="p7">](#split)</ept></target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Program Flow:</source>
          <target state="new">Program Flow:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Error<ept id="p1">](#error)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IIF<ept id="p2">](#iif)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Switch<ept id="p3">](#switch)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Error<ept id="p1">](#error)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>IIF<ept id="p2">](#iif)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Switch<ept id="p3">](#switch)</ept></target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="new">Text</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GUID<ept id="p1">](#guid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>InStr<ept id="p2">](#instr)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>InStrRev<ept id="p3">](#instrrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>LCase<ept id="p4">](#lcase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Left<ept id="p5">](#left)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>Len<ept id="p6">](#len)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>LTrim<ept id="p7">](#ltrim)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>Mid<ept id="p8">](#mid)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p9">[</bpt>PadLeft<ept id="p9">](#padleft)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p10">[</bpt>PadRight<ept id="p10">](#padright)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p11">[</bpt>PCase<ept id="p11">](#pcase)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p12">[</bpt>Replace<ept id="p12">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p13">[</bpt>ReplaceChars<ept id="p13">](#replacechars)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p14">[</bpt>Right<ept id="p14">](#right)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p15">[</bpt>RTrim<ept id="p15">](rtrim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p16">[</bpt>Trim<ept id="p16">](#trim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p17">[</bpt>UCase<ept id="p17">](#ucase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p18">[</bpt>Word<ept id="p18">](#word)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>GUID<ept id="p1">](#guid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>InStr<ept id="p2">](#instr)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>InStrRev<ept id="p3">](#instrrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>LCase<ept id="p4">](#lcase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Left<ept id="p5">](#left)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>Len<ept id="p6">](#len)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>LTrim<ept id="p7">](#ltrim)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>Mid<ept id="p8">](#mid)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p9">[</bpt>PadLeft<ept id="p9">](#padleft)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p10">[</bpt>PadRight<ept id="p10">](#padright)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p11">[</bpt>PCase<ept id="p11">](#pcase)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p12">[</bpt>Replace<ept id="p12">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p13">[</bpt>ReplaceChars<ept id="p13">](#replacechars)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p14">[</bpt>Right<ept id="p14">](#right)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p15">[</bpt>RTrim<ept id="p15">](rtrim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p16">[</bpt>Trim<ept id="p16">](#trim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p17">[</bpt>UCase<ept id="p17">](#ucase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p18">[</bpt>Word<ept id="p18">](#word)</ept></target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>BitAnd</source>
          <target state="new">BitAnd</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The BitAnd function sets specified bits on a value.</source>
          <target state="new">The BitAnd function sets specified bits on a value.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>value1, value2: numeric values which should be AND’ed together</source>
          <target state="new">value1, value2: numeric values which should be AND’ed together</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This function converts both parameters to the binary representation and sets a bit to:</source>
          <target state="new">This function converts both parameters to the binary representation and sets a bit to:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>0 - if one or both of the corresponding bits in <bpt id="p1">*</bpt>mask<ept id="p1">*</ept> and <bpt id="p2">*</bpt>flag<ept id="p2">*</ept> are 0</source>
          <target state="new">0 - if one or both of the corresponding bits in <bpt id="p1">*</bpt>mask<ept id="p1">*</ept> and <bpt id="p2">*</bpt>flag<ept id="p2">*</ept> are 0</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>1 - if both of the corresponding bits are 1.</source>
          <target state="new">1 - if both of the corresponding bits are 1.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1.</source>
          <target state="new">In other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns 7 because hexadecimal “F” AND “F7” evaluate to this value.</source>
          <target state="new">Returns 7 because hexadecimal “F” AND “F7” evaluate to this value.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>BitOr</source>
          <target state="new">BitOr</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The BitOr function sets specified bits on a value.</source>
          <target state="new">The BitOr function sets specified bits on a value.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>value1, value2: numeric values that should be OR’ed together</source>
          <target state="new">value1, value2: numeric values that should be OR’ed together</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0.</source>
          <target state="new">This function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0.</source>
          <target state="new">In other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CBool</source>
          <target state="new">CBool</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The CBool function returns a Boolean based on the evaluated expression</source>
          <target state="new">The CBool function returns a Boolean based on the evaluated expression</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a nonzero value then CBool returns True else it returns False.</source>
          <target state="new">If the expression evaluates to a nonzero value then CBool returns True else it returns False.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CBool([attrib1] = [attrib2])`</ph></source>
          <target state="new"><ph id="ph1">`CBool([attrib1] = [attrib2])`</ph></target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns True if both attributes have the same value.</source>
          <target state="new">Returns True if both attributes have the same value.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CDate</source>
          <target state="new">CDate</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The CDate function returns a UTC DateTime from a string.</source>
          <target state="new">The CDate function returns a UTC DateTime from a string.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>DateTime is not a native attribute type in Sync but is used by some functions.</source>
          <target state="new">DateTime is not a native attribute type in Sync but is used by some functions.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Value: A string with a date, time, and optionally time zone</source>
          <target state="new">Value: A string with a date, time, and optionally time zone</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The returned string is always in UTC.</source>
          <target state="new">The returned string is always in UTC.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDate([employeeStartTime])`</ph></source>
          <target state="new"><ph id="ph1">`CDate([employeeStartTime])`</ph></target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns a DateTime based on the employee’s start time</source>
          <target state="new">Returns a DateTime based on the employee’s start time</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CDate("2013-01-10 4:00 PM -8")`</ph></source>
          <target state="new"><ph id="ph1">`CDate("2013-01-10 4:00 PM -8")`</ph></target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns a DateTime representing "2013-01-11 12:00 AM"</source>
          <target state="new">Returns a DateTime representing "2013-01-11 12:00 AM"</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CGuid</source>
          <target state="new">CGuid</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The CGuid function converts the string representation of a GUID to its binary representation.</source>
          <target state="new">The CGuid function converts the string representation of a GUID to its binary representation.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</source>
          <target state="new">A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Contains</source>
          <target state="new">Contains</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The Contains function finds a string inside a multi-valued attribute</source>
          <target state="new">The Contains function finds a string inside a multi-valued attribute</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num Contains (mvstring attribute, str search)`</ph> - case sensitive</source>
          <target state="new"><ph id="ph1">`num Contains (mvstring attribute, str search)`</ph> - case sensitive</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num Contains (mvref attribute, str search)`</ph> - case sensitive</source>
          <target state="new"><ph id="ph1">`num Contains (mvref attribute, str search)`</ph> - case sensitive</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>attribute: the multi-valued attribute to search.</source>
          <target state="new">attribute: the multi-valued attribute to search.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>search: string to find in the attribute.</source>
          <target state="new">search: string to find in the attribute.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Casetype: CaseInsensitive or CaseSensitive.</source>
          <target state="new">Casetype: CaseInsensitive or CaseSensitive.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns index in the multi-valued attribute where the string was found.</source>
          <target state="new">Returns index in the multi-valued attribute where the string was found.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>0 is returned if the string is not found.</source>
          <target state="new">0 is returned if the string is not found.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For multi-valued string attributes the search will find substrings in the values.</source>
          <target state="new">For multi-valued string attributes the search will find substrings in the values.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For reference attributes, the searched string must exactly match the value to be considered a match.</source>
          <target state="new">For reference attributes, the searched string must exactly match the value to be considered a match.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.</source>
          <target state="new">If the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ConvertFromBase64</source>
          <target state="new">ConvertFromBase64</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The ConvertFromBase64 function converts the specified base64 encoded value to a regular string.</source>
          <target state="new">The ConvertFromBase64 function converts the specified base64 encoded value to a regular string.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str ConvertFromBase64(str source)`</ph> - assumes Unicode for encoding</source>
          <target state="new"><ph id="ph1">`str ConvertFromBase64(str source)`</ph> - assumes Unicode for encoding</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>source: Base64 encoded string</source>
          <target state="new">source: Base64 encoded string</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Encoding: Unicode, ASCII, UTF8</source>
          <target state="new">Encoding: Unicode, ASCII, UTF8</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Both examples return "<bpt id="p1">*</bpt>Hello world!<ept id="p1">*</ept>"</source>
          <target state="new">Both examples return "<bpt id="p1">*</bpt>Hello world!<ept id="p1">*</ept>"</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>ConvertFromUTF8Hex</source>
          <target state="new">ConvertFromUTF8Hex</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.</source>
          <target state="new">The ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>source: UTF8 2-byte encoded sting</source>
          <target state="new">source: UTF8 2-byte encoded sting</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.</source>
          <target state="new">The difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This format is used by Azure Active Directory as DN.</source>
          <target state="new">This format is used by Azure Active Directory as DN.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Returns "<bpt id="p1">*</bpt>Hello world!<ept id="p1">*</ept>"</source>
          <target state="new">Returns "<bpt id="p1">*</bpt>Hello world!<ept id="p1">*</ept>"</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>ConvertToBase64</source>
          <target state="new">ConvertToBase64</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The ConvertToBase64 function converts a string to a Unicode base64 string.</source>
          <target state="new">The ConvertToBase64 function converts a string to a Unicode base64 string.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Converts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="new">Converts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConvertToBase64("Hello world!")`</ph></source>
          <target state="new"><ph id="ph1">`ConvertToBase64("Hello world!")`</ph></target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Returns "SABlAGwAbABvACAAdwBvAHIAbABkACEA"</source>
          <target state="new">Returns "SABlAGwAbABvACAAdwBvAHIAbABkACEA"</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>ConvertToUTF8Hex</source>
          <target state="new">ConvertToUTF8Hex</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.</source>
          <target state="new">The ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The output format of this function is used by Azure Active Directory as DN attribute format.</source>
          <target state="new">The output format of this function is used by Azure Active Directory as DN attribute format.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConvertToUTF8Hex("Hello world!")`</ph></source>
          <target state="new"><ph id="ph1">`ConvertToUTF8Hex("Hello world!")`</ph></target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Returns 48656C6C6F20776F726C6421</source>
          <target state="new">Returns 48656C6C6F20776F726C6421</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Count</source>
          <target state="new">Count</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The Count function returns the number of elements in a multi-valued attribute</source>
          <target state="new">The Count function returns the number of elements in a multi-valued attribute</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CNum</source>
          <target state="new">CNum</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The CNum function takes a string and returns a numeric data type.</source>
          <target state="new">The CNum function takes a string and returns a numeric data type.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CRef</source>
          <target state="new">CRef</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Converts a string to a reference attribute</source>
          <target state="new">Converts a string to a reference attribute</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CStr</source>
          <target state="new">CStr</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The CStr function converts to a string data type.</source>
          <target state="new">The CStr function converts to a string data type.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str CStr(num value)`</ph></source>
          <target state="new"><ph id="ph1">`str CStr(num value)`</ph></target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str CStr(ref value)`</ph></source>
          <target state="new"><ph id="ph1">`str CStr(ref value)`</ph></target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str CStr(bool value)`</ph></source>
          <target state="new"><ph id="ph1">`str CStr(bool value)`</ph></target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>value: Can be a numeric value, reference attribute, or Boolean.</source>
          <target state="new">value: Can be a numeric value, reference attribute, or Boolean.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Could return “cn=Joe,dc=contoso,dc=com”</source>
          <target state="new">Could return “cn=Joe,dc=contoso,dc=com”</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>DateAdd</source>
          <target state="new">DateAdd</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Returns a Date containing a date to which a specified time interval has been added.</source>
          <target state="new">Returns a Date containing a date to which a specified time interval has been added.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>interval: String expression that is the interval of time you want to add.</source>
          <target state="new">interval: String expression that is the interval of time you want to add.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The string must have one of the following values:</source>
          <target state="new">The string must have one of the following values:</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>yyyy Year</source>
          <target state="new">yyyy Year</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>q Quarter</source>
          <target state="new">q Quarter</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>m Month</source>
          <target state="new">m Month</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>y Day of year</source>
          <target state="new">y Day of year</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>d Day</source>
          <target state="new">d Day</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>w Weekday</source>
          <target state="new">w Weekday</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>ww Week</source>
          <target state="new">ww Week</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>h Hour</source>
          <target state="new">h Hour</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>n Minute</source>
          <target state="new">n Minute</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>s Second</source>
          <target state="new">s Second</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>value: The number of units you want to add.</source>
          <target state="new">value: The number of units you want to add.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>It can be positive (to get dates in the future) or negative (to get dates in the past).</source>
          <target state="new">It can be positive (to get dates in the future) or negative (to get dates in the past).</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>date: DateTime representing date to which the interval is added.</source>
          <target state="new">date: DateTime representing date to which the interval is added.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateAdd("m", 3, CDate("2001-01-01"))`</ph></source>
          <target state="new"><ph id="ph1">`DateAdd("m", 3, CDate("2001-01-01"))`</ph></target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Adds 3 months and returns a DateTime representing "2001-04-01”</source>
          <target state="new">Adds 3 months and returns a DateTime representing "2001-04-01”</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>DateFromNum</source>
          <target state="new">DateFromNum</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The DateFromNum function converts a value in AD’s date format to a DateTime type.</source>
          <target state="new">The DateFromNum function converts a value in AD’s date format to a DateTime type.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateFromNum([lastLogonTimestamp])`</ph></source>
          <target state="new"><ph id="ph1">`DateFromNum([lastLogonTimestamp])`</ph></target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateFromNum(129699324000000000)`</ph></source>
          <target state="new"><ph id="ph1">`DateFromNum(129699324000000000)`</ph></target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns a DateTime representing 2012-01-01 23:00:00</source>
          <target state="new">Returns a DateTime representing 2012-01-01 23:00:00</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>DNComponent</source>
          <target state="new">DNComponent</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The DNComponent function returns the value of a specified DN component going from left.</source>
          <target state="new">The DNComponent function returns the value of a specified DN component going from left.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>dn: the reference attribute to interpret</source>
          <target state="new">dn: the reference attribute to interpret</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>ComponentNumber: The component in the DN to return</source>
          <target state="new">ComponentNumber: The component in the DN to return</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DNComponent([dn],1)`</ph></source>
          <target state="new"><ph id="ph1">`DNComponent([dn],1)`</ph></target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If dn is “cn=Joe,ou=…, it returns Joe</source>
          <target state="new">If dn is “cn=Joe,ou=…, it returns Joe</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>DNComponentRev</source>
          <target state="new">DNComponentRev</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The DNComponentRev function returns the value of a specified DN component going from right (the end).</source>
          <target state="new">The DNComponentRev function returns the value of a specified DN component going from right (the end).</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str DNComponentRev(ref dn, num ComponentNumber)`</ph></source>
          <target state="new"><ph id="ph1">`str DNComponentRev(ref dn, num ComponentNumber)`</ph></target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>dn: the reference attribute to interpret</source>
          <target state="new">dn: the reference attribute to interpret</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>ComponentNumber - The component in the DN to return</source>
          <target state="new">ComponentNumber - The component in the DN to return</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Options: DC – Ignore all components with “dc=”</source>
          <target state="new">Options: DC – Ignore all components with “dc=”</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)`</ph></source>
          <target state="new"><ph id="ph1">`If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)`</ph></target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DNComponentRev([dn],1,”DC”)`</ph></source>
          <target state="new"><ph id="ph1">`DNComponentRev([dn],1,”DC”)`</ph></target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Both return US.</source>
          <target state="new">Both return US.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="new">Error</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The Error function is used to return a custom error.</source>
          <target state="new">The Error function is used to return a custom error.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))`</ph></source>
          <target state="new"><ph id="ph1">`IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))`</ph></target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>If the attribute accountName is not present, throw an error on the object.</source>
          <target state="new">If the attribute accountName is not present, throw an error on the object.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>EscapeDNComponent</source>
          <target state="new">EscapeDNComponent</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.</source>
          <target state="new">The EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EscapeDNComponent(“cn=” &amp; [displayName]) &amp; “,” &amp; %ForestLDAP%`</ph></source>
          <target state="new"><ph id="ph1">`EscapeDNComponent(“cn=” &amp; [displayName]) &amp; “,” &amp; %ForestLDAP%`</ph></target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Makes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.</source>
          <target state="new">Makes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>FormatDateTime</source>
          <target state="new">FormatDateTime</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The FormatDateTime function is used to format a DateTime to a string with a specified format</source>
          <target state="new">The FormatDateTime function is used to format a DateTime to a string with a specified format</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>value: a value in the DateTime format</source>
          <target state="new">value: a value in the DateTime format</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>format: a string representing the format to convert to.</source>
          <target state="new">format: a string representing the format to convert to.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The possible values for the format can be found here: <bpt id="p1">[</bpt>User-Defined Date/Time Formats (Format Function)<ept id="p1">](http://msdn2.microsoft.com/library/73ctwf33\(VS.90\).aspx)</ept></source>
          <target state="new">The possible values for the format can be found here: <bpt id="p1">[</bpt>User-Defined Date/Time Formats (Format Function)<ept id="p1">](http://msdn2.microsoft.com/library/73ctwf33\(VS.90\).aspx)</ept></target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)`</ph></source>
          <target state="new"><ph id="ph1">`FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)`</ph></target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Results in “2007-12-25”.</source>
          <target state="new">Results in “2007-12-25”.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)`</ph></source>
          <target state="new"><ph id="ph1">`FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)`</ph></target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Can result in “20140905081453.0Z”</source>
          <target state="new">Can result in “20140905081453.0Z”</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>GUID</source>
          <target state="new">GUID</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The function GUID generates a new random GUID</source>
          <target state="new">The function GUID generates a new random GUID</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>IIF</source>
          <target state="new">IIF</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The IIF function returns one of a set of possible values based on a specified condition.</source>
          <target state="new">The IIF function returns one of a set of possible values based on a specified condition.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>condition: any value or expression that can be evaluated to true or false.</source>
          <target state="new">condition: any value or expression that can be evaluated to true or false.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>valueIfTrue: a value that will be returned if condition evaluates to true.</source>
          <target state="new">valueIfTrue: a value that will be returned if condition evaluates to true.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>valueIfFalse: a value that will be returned if condition evaluates to false.</source>
          <target state="new">valueIfFalse: a value that will be returned if condition evaluates to false.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IIF([employeeType]=“Intern”,”t-“&amp;[alias],[alias])`</ph></source>
          <target state="new"><ph id="ph1">`IIF([employeeType]=“Intern”,”t-“&amp;[alias],[alias])`</ph></target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Returns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.</source>
          <target state="new">Returns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>InStr</source>
          <target state="new">InStr</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The InStr function finds the first occurrence of a substring in a string</source>
          <target state="new">The InStr function finds the first occurrence of a substring in a string</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num InStr(str stringcheck, str stringmatch)`</ph></source>
          <target state="new"><ph id="ph1">`num InStr(str stringcheck, str stringmatch)`</ph></target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num InStr(str stringcheck, str stringmatch, num start)`</ph></source>
          <target state="new"><ph id="ph1">`num InStr(str stringcheck, str stringmatch, num start)`</ph></target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>stringcheck: string to be searched</source>
          <target state="new">stringcheck: string to be searched</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>stringmatch: string to be found</source>
          <target state="new">stringmatch: string to be found</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>start: starting position to find the substring</source>
          <target state="new">start: starting position to find the substring</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>compare: vbTextCompare or vbBinaryCompare</source>
          <target state="new">compare: vbTextCompare or vbBinaryCompare</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Returns the position where the substring was found or 0 if not found.</source>
          <target state="new">Returns the position where the substring was found or 0 if not found.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InStr("The quick brown fox","quick")`</ph></source>
          <target state="new"><ph id="ph1">`InStr("The quick brown fox","quick")`</ph></target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Evalues to 5</source>
          <target state="new">Evalues to 5</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InStr("repEated","e",3,vbBinaryCompare)`</ph></source>
          <target state="new"><ph id="ph1">`InStr("repEated","e",3,vbBinaryCompare)`</ph></target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Evaluates to 7</source>
          <target state="new">Evaluates to 7</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>InStrRev</source>
          <target state="new">InStrRev</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The InStrRev function finds the last occurrence of a substring in a string</source>
          <target state="new">The InStrRev function finds the last occurrence of a substring in a string</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num InstrRev(str stringcheck, str stringmatch)`</ph></source>
          <target state="new"><ph id="ph1">`num InstrRev(str stringcheck, str stringmatch)`</ph></target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`num InstrRev(str stringcheck, str stringmatch, num start)`</ph></source>
          <target state="new"><ph id="ph1">`num InstrRev(str stringcheck, str stringmatch, num start)`</ph></target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>stringcheck: string to be searched</source>
          <target state="new">stringcheck: string to be searched</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>stringmatch: string to be found</source>
          <target state="new">stringmatch: string to be found</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>start: starting position to find the substring</source>
          <target state="new">start: starting position to find the substring</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>compare: vbTextCompare or vbBinaryCompare</source>
          <target state="new">compare: vbTextCompare or vbBinaryCompare</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Returns the position where the substring was found or 0 if not found.</source>
          <target state="new">Returns the position where the substring was found or 0 if not found.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InStrRev("abbcdbbbef","bb")`</ph></source>
          <target state="new"><ph id="ph1">`InStrRev("abbcdbbbef","bb")`</ph></target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Returns 7</source>
          <target state="new">Returns 7</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>IsBitSet</source>
          <target state="new">IsBitSet</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The function IsBitSet Tests if a bit is set or not</source>
          <target state="new">The function IsBitSet Tests if a bit is set or not</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated</source>
          <target state="new">value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsBitSet(&amp;HF,4)`</ph></source>
          <target state="new"><ph id="ph1">`IsBitSet(&amp;HF,4)`</ph></target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Returns True because bit “4” is set in the hexadecimal value “F”</source>
          <target state="new">Returns True because bit “4” is set in the hexadecimal value “F”</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>IsDate</source>
          <target state="new">IsDate</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The IsDate function evaluates to True if the expression can be evaluates as a DateTime type.</source>
          <target state="new">The IsDate function evaluates to True if the expression can be evaluates as a DateTime type.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Used to determine if CDate() will be successful.</source>
          <target state="new">Used to determine if CDate() will be successful.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>IsEmpty</source>
          <target state="new">IsEmpty</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.</source>
          <target state="new">The IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>IsGuid</source>
          <target state="new">IsGuid</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The IsGuid function evaluated to true if the string could be converted to a GUID.</source>
          <target state="new">The IsGuid function evaluated to true if the string could be converted to a GUID.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</source>
          <target state="new">A GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Used to determine if CGuid() will be successful.</source>
          <target state="new">Used to determine if CGuid() will be successful.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)`</ph></source>
          <target state="new"><ph id="ph1">`IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)`</ph></target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>If the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.</source>
          <target state="new">If the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>IsNull</source>
          <target state="new">IsNull</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The IsNull function returns true if the expression evaluates to Null.</source>
          <target state="new">The IsNull function returns true if the expression evaluates to Null.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>For an attribute, a Null is expressed by the absence of the attribute.</source>
          <target state="new">For an attribute, a Null is expressed by the absence of the attribute.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNull([displayName])`</ph></source>
          <target state="new"><ph id="ph1">`IsNull([displayName])`</ph></target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Returns True if the attribute is not present in the CS or MV.</source>
          <target state="new">Returns True if the attribute is not present in the CS or MV.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>IsNullOrEmpty</source>
          <target state="new">IsNullOrEmpty</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The IsNullOrEmpty function returns true if the expression is null or an empty string.</source>
          <target state="new">The IsNullOrEmpty function returns true if the expression is null or an empty string.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>For an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.</source>
          <target state="new">For an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The inverse of this function is named IsPresent.</source>
          <target state="new">The inverse of this function is named IsPresent.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNull([displayName])`</ph></source>
          <target state="new"><ph id="ph1">`IsNull([displayName])`</ph></target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Returns True if the attribute is not present or is an empty string in the CS or MV.</source>
          <target state="new">Returns True if the attribute is not present or is an empty string in the CS or MV.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>IsNumeric</source>
          <target state="new">IsNumeric</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.</source>
          <target state="new">The IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Used to determine if CNum() will be successful to parse the expression.</source>
          <target state="new">Used to determine if CNum() will be successful to parse the expression.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>IsString</source>
          <target state="new">IsString</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The IsString function evaluates to True if the expression can be evaluated to a string type.</source>
          <target state="new">The IsString function evaluates to True if the expression can be evaluated to a string type.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Used to determine if CStr() will be successful to parse the expression.</source>
          <target state="new">Used to determine if CStr() will be successful to parse the expression.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>IsPresent</source>
          <target state="new">IsPresent</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.</source>
          <target state="new">The IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The inverse of this function is named IsNullOrEmpty.</source>
          <target state="new">The inverse of this function is named IsNullOrEmpty.</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Item</source>
          <target state="new">Item</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The Item function returns one item from a multi-valued string/attribute.</source>
          <target state="new">The Item function returns one item from a multi-valued string/attribute.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>attribute: multi-valued attribute</source>
          <target state="new">attribute: multi-valued attribute</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>index: index to an item in the multi-valued string.</source>
          <target state="new">index: index to an item in the multi-valued string.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</source>
          <target state="new">The Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Throws an error if index is out of bounds.</source>
          <target state="new">Throws an error if index is out of bounds.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)`</ph></source>
          <target state="new"><ph id="ph1">`Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)`</ph></target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Returns the primary email address.</source>
          <target state="new">Returns the primary email address.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>ItemOrNull</source>
          <target state="new">ItemOrNull</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The ItemOrNull function returns one item from a multi-valued string/attribute.</source>
          <target state="new">The ItemOrNull function returns one item from a multi-valued string/attribute.</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>attribute: multi-valued attribute</source>
          <target state="new">attribute: multi-valued attribute</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>index: index to an item in the multi-valued string.</source>
          <target state="new">index: index to an item in the multi-valued string.</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</source>
          <target state="new">The ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Returns a Null value if index is out of bounds.</source>
          <target state="new">Returns a Null value if index is out of bounds.</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="new">Join</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.</source>
          <target state="new">The Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str Join(mvstr attribute)`</ph></source>
          <target state="new"><ph id="ph1">`str Join(mvstr attribute)`</ph></target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>attribute: Multi-valued attribute containing strings to be joined.</source>
          <target state="new">attribute: Multi-valued attribute containing strings to be joined.</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>delimiter: Any string, used to separate the substrings in the returned string.</source>
          <target state="new">delimiter: Any string, used to separate the substrings in the returned string.</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If omitted, the space character (" ") is used.</source>
          <target state="new">If omitted, the space character (" ") is used.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If Delimiter is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</source>
          <target state="new">If Delimiter is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>There is parity between the Join and Split functions.</source>
          <target state="new">There is parity between the Join and Split functions.</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The Join function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
          <target state="new">The Join function takes an array of strings and joins them using a delimiter string, to return a single string.</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The Split function takes a string and separates it at the delimiter, to return an array of strings.</source>
          <target state="new">The Split function takes a string and separates it at the delimiter, to return an array of strings.</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.</source>
          <target state="new">However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Join([proxyAddresses],”,”)`</ph></source>
          <target state="new"><ph id="ph1">`Join([proxyAddresses],”,”)`</ph></target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Could return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”</source>
          <target state="new">Could return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>LCase</source>
          <target state="new">LCase</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The LCase function converts all characters in a string to lower case.</source>
          <target state="new">The LCase function converts all characters in a string to lower case.</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LCase(“TeSt”)`</ph></source>
          <target state="new"><ph id="ph1">`LCase(“TeSt”)`</ph></target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Returns “test”.</source>
          <target state="new">Returns “test”.</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Left</source>
          <target state="new">Left</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The Left function returns a specified number of characters from the left of a string.</source>
          <target state="new">The Left function returns a specified number of characters from the left of a string.</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>string: the string to return characters from</source>
          <target state="new">string: the string to return characters from</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>NumChars: a number identifying the number of characters to return from the beginning (left) of string</source>
          <target state="new">NumChars: a number identifying the number of characters to return from the beginning (left) of string</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>A string containing the first numChars characters in string:</source>
          <target state="new">A string containing the first numChars characters in string:</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If numChars = 0, return empty string.</source>
          <target state="new">If numChars = 0, return empty string.</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>If numChars &lt; 0, return input string.</source>
          <target state="new">If numChars &lt; 0, return input string.</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If string is null, return empty string.</source>
          <target state="new">If string is null, return empty string.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.</source>
          <target state="new">If string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Left(“John Doe”, 3)`</ph></source>
          <target state="new"><ph id="ph1">`Left(“John Doe”, 3)`</ph></target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Returns “Joh”.</source>
          <target state="new">Returns “Joh”.</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Len</source>
          <target state="new">Len</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>The Len function returns number of characters in a string.</source>
          <target state="new">The Len function returns number of characters in a string.</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Len(“John Doe”)`</ph></source>
          <target state="new"><ph id="ph1">`Len(“John Doe”)`</ph></target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Returns 8</source>
          <target state="new">Returns 8</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>LTrim</source>
          <target state="new">LTrim</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The LTrim function removes leading white spaces from a string.</source>
          <target state="new">The LTrim function removes leading white spaces from a string.</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LTrim(“ Test ”)`</ph></source>
          <target state="new"><ph id="ph1">`LTrim(“ Test ”)`</ph></target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Returns “Test ”</source>
          <target state="new">Returns “Test ”</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Mid</source>
          <target state="new">Mid</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The Mid function returns a specified number of characters from a specified position in a string.</source>
          <target state="new">The Mid function returns a specified number of characters from a specified position in a string.</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>string: the string to return characters from</source>
          <target state="new">string: the string to return characters from</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>start: a number identifying the starting position in string to return characters from</source>
          <target state="new">start: a number identifying the starting position in string to return characters from</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>NumChars: a number identifying the number of characters to return from position in string</source>
          <target state="new">NumChars: a number identifying the number of characters to return from position in string</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Return numChars characters starting from position start in string.</source>
          <target state="new">Return numChars characters starting from position start in string.</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>A string containing numChars characters from position start in string:</source>
          <target state="new">A string containing numChars characters from position start in string:</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>If numChars = 0, return empty string.</source>
          <target state="new">If numChars = 0, return empty string.</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If numChars &lt; 0, return input string.</source>
          <target state="new">If numChars &lt; 0, return input string.</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>If start &gt; the length of string, return input string.</source>
          <target state="new">If start &gt; the length of string, return input string.</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>If start &lt;= 0, return input string.</source>
          <target state="new">If start &lt;= 0, return input string.</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If string is null, return empty string.</source>
          <target state="new">If string is null, return empty string.</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>If there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.</source>
          <target state="new">If there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Mid(“John Doe”, 3, 5)`</ph></source>
          <target state="new"><ph id="ph1">`Mid(“John Doe”, 3, 5)`</ph></target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Returns “hn Do”.</source>
          <target state="new">Returns “hn Do”.</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Mid(“John Doe”, 6, 999)`</ph></source>
          <target state="new"><ph id="ph1">`Mid(“John Doe”, 6, 999)`</ph></target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Returns “Doe”</source>
          <target state="new">Returns “Doe”</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Now</source>
          <target state="new">Now</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The Now function returns a DateTime specifying the current date and time, according your computer's system date and time.</source>
          <target state="new">The Now function returns a DateTime specifying the current date and time, according your computer's system date and time.</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>NumFromDate</source>
          <target state="new">NumFromDate</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The NumFromDate function returns a date in AD’s date format.</source>
          <target state="new">The NumFromDate function returns a date in AD’s date format.</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NumFromDate(CDate("2012-01-01 23:00:00"))`</ph></source>
          <target state="new"><ph id="ph1">`NumFromDate(CDate("2012-01-01 23:00:00"))`</ph></target>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Returns 129699324000000000</source>
          <target state="new">Returns 129699324000000000</target>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>PadLeft</source>
          <target state="new">PadLeft</target>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The PadLeft function left-pads a string to a specified length using a provided padding character.</source>
          <target state="new">The PadLeft function left-pads a string to a specified length using a provided padding character.</target>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>string: the string to pad.</source>
          <target state="new">string: the string to pad.</target>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>length: An integer representing the desired length of string.</source>
          <target state="new">length: An integer representing the desired length of string.</target>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>padCharacter: A string consisting of a single character to use as the pad character</source>
          <target state="new">padCharacter: A string consisting of a single character to use as the pad character</target>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="new">Remarks</target>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.</source>
          <target state="new">If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.</target>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>PadCharacter can be a space character, but it cannot be a null value.</source>
          <target state="new">PadCharacter can be a space character, but it cannot be a null value.</target>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>If the length of string is equal to or greater than length, string is returned unchanged.</source>
          <target state="new">If the length of string is equal to or greater than length, string is returned unchanged.</target>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>If string has a length greater than or equal to length, a string identical to string is returned.</source>
          <target state="new">If string has a length greater than or equal to length, a string identical to string is returned.</target>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</source>
          <target state="new">If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</target>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>If string is null, the function returns an empty string.</source>
          <target state="new">If string is null, the function returns an empty string.</target>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PadLeft(“User”, 10, “0”)`</ph></source>
          <target state="new"><ph id="ph1">`PadLeft(“User”, 10, “0”)`</ph></target>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Returns “000000User”.</source>
          <target state="new">Returns “000000User”.</target>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>PadRight</source>
          <target state="new">PadRight</target>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The PadRight function right-pads a string to a specified length using a provided padding character.</source>
          <target state="new">The PadRight function right-pads a string to a specified length using a provided padding character.</target>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>string: the string to pad.</source>
          <target state="new">string: the string to pad.</target>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>length: An integer representing the desired length of string.</source>
          <target state="new">length: An integer representing the desired length of string.</target>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>padCharacter: A string consisting of a single character to use as the pad character</source>
          <target state="new">padCharacter: A string consisting of a single character to use as the pad character</target>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Remarks:</source>
          <target state="new">Remarks:</target>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.</source>
          <target state="new">If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.</target>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>padCharacter can be a space character, but it cannot be a null value.</source>
          <target state="new">padCharacter can be a space character, but it cannot be a null value.</target>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>If the length of string is equal to or greater than length, string is returned unchanged.</source>
          <target state="new">If the length of string is equal to or greater than length, string is returned unchanged.</target>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>If string has a length greater than or equal to length, a string identical to string is returned.</source>
          <target state="new">If string has a length greater than or equal to length, a string identical to string is returned.</target>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</source>
          <target state="new">If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</target>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>If string is null, the function returns an empty string.</source>
          <target state="new">If string is null, the function returns an empty string.</target>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PadRight(“User”, 10, “0”)`</ph></source>
          <target state="new"><ph id="ph1">`PadRight(“User”, 10, “0”)`</ph></target>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Returns “User000000”.</source>
          <target state="new">Returns “User000000”.</target>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>PCase</source>
          <target state="new">PCase</target>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.</source>
          <target state="new">The PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.</target>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PCase(“TEsT”)`</ph></source>
          <target state="new"><ph id="ph1">`PCase(“TEsT”)`</ph></target>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Returns “Test”.</source>
          <target state="new">Returns “Test”.</target>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>RandomNum</source>
          <target state="new">RandomNum</target>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The RandomNum function returns a random number between a specified interval.</source>
          <target state="new">The RandomNum function returns a random number between a specified interval.</target>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>start: a number identifying the lower limit of the random value to generate</source>
          <target state="new">start: a number identifying the lower limit of the random value to generate</target>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>end: a number identifying the upper limit of the random value to generate</source>
          <target state="new">end: a number identifying the upper limit of the random value to generate</target>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Random(100,999)`</ph></source>
          <target state="new"><ph id="ph1">`Random(100,999)`</ph></target>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Returns 734.</source>
          <target state="new">Returns 734.</target>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>RemoveDuplicates</source>
          <target state="new">RemoveDuplicates</target>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The RemoveDuplicates function takes a multi-valued string and make sure each value is unique.</source>
          <target state="new">The RemoveDuplicates function takes a multi-valued string and make sure each value is unique.</target>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveDuplicates([proxyAddresses])`</ph></source>
          <target state="new"><ph id="ph1">`RemoveDuplicates([proxyAddresses])`</ph></target>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Returns a sanitized proxyAddress attribute where all duplicate values have been removed.</source>
          <target state="new">Returns a sanitized proxyAddress attribute where all duplicate values have been removed.</target>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="new">Replace</target>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>The Replace function replaces all occurrences of a string to another string.</source>
          <target state="new">The Replace function replaces all occurrences of a string to another string.</target>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>string: A string to replace values in.</source>
          <target state="new">string: A string to replace values in.</target>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>OldValue: The string to search for and to replace.</source>
          <target state="new">OldValue: The string to search for and to replace.</target>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>NewValue: The string to replace to.</source>
          <target state="new">NewValue: The string to replace to.</target>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>The function recognizes the following special monikers:</source>
          <target state="new">The function recognizes the following special monikers:</target>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>\n – New Line</source>
          <target state="new">\n – New Line</target>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>\r – Carriage Return</source>
          <target state="new">\r – Carriage Return</target>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>\t – Tab</source>
          <target state="new">\t – Tab</target>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Replace([address],”\r\n”,”, “)`</ph></source>
          <target state="new"><ph id="ph1">`Replace([address],”\r\n”,”, “)`</ph></target>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Replaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”</source>
          <target state="new">Replaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”</target>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>ReplaceChars</source>
          <target state="new">ReplaceChars</target>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.</source>
          <target state="new">The ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.</target>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>string: A string to replace characters in.</source>
          <target state="new">string: A string to replace characters in.</target>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>ReplacePattern: a string containing a dictionary with characters to replace.</source>
          <target state="new">ReplacePattern: a string containing a dictionary with characters to replace.</target>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>The format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with.</source>
          <target state="new">The format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with.</target>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Remarks:</source>
          <target state="new">Remarks:</target>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>The function takes each occurrence of defined sources and replaces them with the targets.</source>
          <target state="new">The function takes each occurrence of defined sources and replaces them with the targets.</target>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The source must be exactly one (unicode) character.</source>
          <target state="new">The source must be exactly one (unicode) character.</target>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The source cannot be empty or longer than one character (parsing error).</source>
          <target state="new">The source cannot be empty or longer than one character (parsing error).</target>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>The target can have multiple characters, e.g. ö:oe, β:ss.</source>
          <target state="new">The target can have multiple characters, e.g. ö:oe, β:ss.</target>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The target can be empty indicating that the character should be removed.</source>
          <target state="new">The target can be empty indicating that the character should be removed.</target>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The source is case sensitive and must be an exact match.</source>
          <target state="new">The source is case sensitive and must be an exact match.</target>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The , (comma) and : (colon) are reserved characters and cannot be replaced using this function.</source>
          <target state="new">The , (comma) and : (colon) are reserved characters and cannot be replaced using this function.</target>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Spaces and other white characters in the ReplacePattern string are ignored.</source>
          <target state="new">Spaces and other white characters in the ReplacePattern string are ignored.</target>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'</source>
          <target state="new">'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'</target>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ReplaceChars(”Räksmörgås”,%ReplaceString%)`</ph></source>
          <target state="new"><ph id="ph1">`ReplaceChars(”Räksmörgås”,%ReplaceString%)`</ph></target>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Returns Raksmorgas</source>
          <target state="new">Returns Raksmorgas</target>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ReplaceChars(“O’Neil”,%ReplaceString%)`</ph></source>
          <target state="new"><ph id="ph1">`ReplaceChars(“O’Neil”,%ReplaceString%)`</ph></target>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Returns “ONeil”, the single tick is defined to be removed.</source>
          <target state="new">Returns “ONeil”, the single tick is defined to be removed.</target>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Right</source>
          <target state="new">Right</target>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The Right function returns a specified number of characters from the right (end) of a string.</source>
          <target state="new">The Right function returns a specified number of characters from the right (end) of a string.</target>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>string: the string to return characters from</source>
          <target state="new">string: the string to return characters from</target>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>NumChars: a number identifying the number of characters to return from the end (right) of string</source>
          <target state="new">NumChars: a number identifying the number of characters to return from the end (right) of string</target>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>NumChars characters are returned from the last position of string.</source>
          <target state="new">NumChars characters are returned from the last position of string.</target>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>A string containing the last numChars characters in string:</source>
          <target state="new">A string containing the last numChars characters in string:</target>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>If numChars = 0, return empty string.</source>
          <target state="new">If numChars = 0, return empty string.</target>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>If numChars &lt; 0, return input string.</source>
          <target state="new">If numChars &lt; 0, return input string.</target>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>If string is null, return empty string.</source>
          <target state="new">If string is null, return empty string.</target>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>If string contains fewer characters than the number specified in NumChars, a string identical to string is returned.</source>
          <target state="new">If string contains fewer characters than the number specified in NumChars, a string identical to string is returned.</target>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Right(“John Doe”, 3)`</ph></source>
          <target state="new"><ph id="ph1">`Right(“John Doe”, 3)`</ph></target>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Returns “Doe”.</source>
          <target state="new">Returns “Doe”.</target>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>RTrim</source>
          <target state="new">RTrim</target>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>The RTrim function removes trailing white spaces from a string.</source>
          <target state="new">The RTrim function removes trailing white spaces from a string.</target>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RTrim(“ Test ”)`</ph></source>
          <target state="new"><ph id="ph1">`RTrim(“ Test ”)`</ph></target>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Returns “ Test”.</source>
          <target state="new">Returns “ Test”.</target>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Split</source>
          <target state="new">Split</target>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>The Split function takes a string separated with a delimiter and makes it a multi-valued string.</source>
          <target state="new">The Split function takes a string separated with a delimiter and makes it a multi-valued string.</target>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`mvstr Split(str value, str delimiter)`</ph> &lt;br?</source>
          <target state="new"><ph id="ph1">`mvstr Split(str value, str delimiter)`</ph> &lt;br?</target>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>value: the string with a delimiter character to separate.</source>
          <target state="new">value: the string with a delimiter character to separate.</target>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>delimiter: single character to be used as the delimiter.</source>
          <target state="new">delimiter: single character to be used as the delimiter.</target>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>limit: maximum number of values which will be returned.</source>
          <target state="new">limit: maximum number of values which will be returned.</target>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)`</ph></source>
          <target state="new"><ph id="ph1">`Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)`</ph></target>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Returns a multi-valued string with 2 elements useful for the proxyAddress attribute</source>
          <target state="new">Returns a multi-valued string with 2 elements useful for the proxyAddress attribute</target>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>StringFromGuid</source>
          <target state="new">StringFromGuid</target>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>The StringFromGuid function takes a binary GUID and converts it to a string</source>
          <target state="new">The StringFromGuid function takes a binary GUID and converts it to a string</target>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>StringFromSid</source>
          <target state="new">StringFromSid</target>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.</source>
          <target state="new">The StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.</target>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str StringFromSid(bin ObjectSID)`</ph></source>
          <target state="new"><ph id="ph1">`str StringFromSid(bin ObjectSID)`</ph></target>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="new">Switch</target>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The Switch function is used to return a single value based on evaluated conditions.</source>
          <target state="new">The Switch function is used to return a single value based on evaluated conditions.</target>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>expr: Variant expression you want to evaluate.</source>
          <target state="new">expr: Variant expression you want to evaluate.</target>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>value: Value to be returned if the corresponding expression is True.</source>
          <target state="new">value: Value to be returned if the corresponding expression is True.</target>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>The Switch function argument list consists of pairs of expressions and values.</source>
          <target state="new">The Switch function argument list consists of pairs of expressions and values.</target>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned.</source>
          <target state="new">The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned.</target>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>If the parts aren't properly paired, a run-time error occurs.</source>
          <target state="new">If the parts aren't properly paired, a run-time error occurs.</target>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>For example, if expr1 is True, Switch returns value1.</source>
          <target state="new">For example, if expr1 is True, Switch returns value1.</target>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.</source>
          <target state="new">If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.</target>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Switch returns a Nothing if:</source>
          <target state="new">Switch returns a Nothing if:</target>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>None of the expressions are True.</source>
          <target state="new">None of the expressions are True.</target>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The first True expression has a corresponding value that is Null.</source>
          <target state="new">The first True expression has a corresponding value that is Null.</target>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Switch evaluates all of the expressions, even though it returns only one of them.</source>
          <target state="new">Switch evaluates all of the expressions, even though it returns only one of them.</target>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>For this reason, you should watch for undesirable side effects.</source>
          <target state="new">For this reason, you should watch for undesirable side effects.</target>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>For example, if the evaluation of any expression results in a division by zero error, an error occurs.</source>
          <target state="new">For example, if the evaluation of any expression results in a division by zero error, an error occurs.</target>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Value can also be the Error function which would return a custom string.</source>
          <target state="new">Value can also be the Error function which would return a custom string.</target>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Switch([city] = "London", "English", [city] = "Rome", "Italian", [city] = "Paris", "French", True, Error(“Unknown city”))`</ph></source>
          <target state="new"><ph id="ph1">`Switch([city] = "London", "English", [city] = "Rome", "Italian", [city] = "Paris", "French", True, Error(“Unknown city”))`</ph></target>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Returns the language spoken in some major cities, otherwise returns an Error.</source>
          <target state="new">Returns the language spoken in some major cities, otherwise returns an Error.</target>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Trim</source>
          <target state="new">Trim</target>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>The Trim function removes leading and trailing white spaces from a string.</source>
          <target state="new">The Trim function removes leading and trailing white spaces from a string.</target>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`str Trim(str value)`</ph></source>
          <target state="new"><ph id="ph1">`str Trim(str value)`</ph></target>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Trim(“ Test ”)`</ph></source>
          <target state="new"><ph id="ph1">`Trim(“ Test ”)`</ph></target>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Returns “Test”.</source>
          <target state="new">Returns “Test”.</target>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Trim([proxyAddresses])`</ph></source>
          <target state="new"><ph id="ph1">`Trim([proxyAddresses])`</ph></target>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Removes leading and trailing spaces for each value in the proxyAddress attribute.</source>
          <target state="new">Removes leading and trailing spaces for each value in the proxyAddress attribute.</target>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>UCase</source>
          <target state="new">UCase</target>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The UCase function converts all characters in a string to upper case.</source>
          <target state="new">The UCase function converts all characters in a string to upper case.</target>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UCase(“TeSt”)`</ph></source>
          <target state="new"><ph id="ph1">`UCase(“TeSt”)`</ph></target>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Returns “TEST”.</source>
          <target state="new">Returns “TEST”.</target>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Word</source>
          <target state="new">Word</target>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.</source>
          <target state="new">The Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.</target>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Syntax:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>string: the string to return a word from.</source>
          <target state="new">string: the string to return a word from.</target>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>WordNumber: a number identifying which word number should be returned.</source>
          <target state="new">WordNumber: a number identifying which word number should be returned.</target>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>delimiters: a string representing the delimiter(s) that should be used to identify words</source>
          <target state="new">delimiters: a string representing the delimiter(s) that should be used to identify words</target>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Remarks:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Each string of characters in string separated by the one of the characters in delimiters are identified as words:</source>
          <target state="new">Each string of characters in string separated by the one of the characters in delimiters are identified as words:</target>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>If number &lt; 1, returns empty string.</source>
          <target state="new">If number &lt; 1, returns empty string.</target>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>If string is null, returns empty string.</source>
          <target state="new">If string is null, returns empty string.</target>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>If string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.</source>
          <target state="new">If string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.</target>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Word(“The quick brown fox”,3,” “)`</ph></source>
          <target state="new"><ph id="ph1">`Word(“The quick brown fox”,3,” “)`</ph></target>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Returns “brown”</source>
          <target state="new">Returns “brown”</target>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Word(“This,string!has&amp;many seperators”,3,”,!&amp;#”)`</ph></source>
          <target state="new"><ph id="ph1">`Word(“This,string!has&amp;many seperators”,3,”,!&amp;#”)`</ph></target>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Would return “has”</source>
          <target state="new">Would return “has”</target>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="new">Additional Resources</target>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Understanding Declarative Provisioning Expressions</source>
          <target state="new">Understanding Declarative Provisioning Expressions</target>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Sync: Customizing Synchronization options</source>
          <target state="new">Azure AD Connect Sync: Customizing Synchronization options</target>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Integrating your on-premises identities with Azure Active Directory</source>
          <target state="new">Integrating your on-premises identities with Azure Active Directory</target>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d594b407d207f2d8beecf94fadc6a6958375fe99</xliffext:olfilehash>
  </header>
</xliff>