<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Technical Overview</source>
          <target state="new">Technical Overview</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A technical overview of Service Fabric.</source>
          <target state="new">A technical overview of Service Fabric.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Discusses key concepts and architectural overview</source>
          <target state="new">Discusses key concepts and architectural overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Technical overview of Service Fabric</source>
          <target state="new">Technical overview of Service Fabric</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Service Fabric is a distributed systems platform that makes it easy to build scalable, reliable, low-latency, and easily managed applications for the cloud.</source>
          <target state="new">Service Fabric is a distributed systems platform that makes it easy to build scalable, reliable, low-latency, and easily managed applications for the cloud.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means that you can focus on your business needs and let Service Fabric take care of ensuring your application is always available and scales.</source>
          <target state="new">This means that you can focus on your business needs and let Service Fabric take care of ensuring your application is always available and scales.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Key concepts</source>
          <target state="new">Key concepts</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cluster<ept id="p1">**</ept> - A network connected set of virtual or physical machines into which application instances are deployed.</source>
          <target state="new"><bpt id="p1">**</bpt>Cluster<ept id="p1">**</ept> - A network connected set of virtual or physical machines into which application instances are deployed.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Clusters can scale to thousands of machines.</source>
          <target state="new">Clusters can scale to thousands of machines.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Node<ept id="p1">**</ept> - An addressable unit in a cluster.</source>
          <target state="new"><bpt id="p1">**</bpt>Node<ept id="p1">**</ept> - An addressable unit in a cluster.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Nodes have characteristics such as placement properties and unique IDs.</source>
          <target state="new">Nodes have characteristics such as placement properties and unique IDs.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Nodes can join a cluster and correlate to an operating system instance with Fabric.exe running.</source>
          <target state="new">Nodes can join a cluster and correlate to an operating system instance with Fabric.exe running.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application / Application Type<ept id="p1">**</ept> - A collection of (micro)services.</source>
          <target state="new"><bpt id="p1">**</bpt>Application / Application Type<ept id="p1">**</ept> - A collection of (micro)services.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Think of an application type as a container for one or more service types.</source>
          <target state="new">Think of an application type as a container for one or more service types.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Please refer to the <bpt id="p1">[</bpt>Application Model<ept id="p1">](service-fabric-application-model.md)</ept> article to understand how a cluster (which itself consists of multiple nodes) may consist of multiple ApplicationTypes.</source>
          <target state="new">Please refer to the <bpt id="p1">[</bpt>Application Model<ept id="p1">](service-fabric-application-model.md)</ept> article to understand how a cluster (which itself consists of multiple nodes) may consist of multiple ApplicationTypes.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service / Service Type<ept id="p1">**</ept> - Code and configuration that performs a standalone function (it can start and run independently), for example, a queue service or database service.</source>
          <target state="new"><bpt id="p1">**</bpt>Service / Service Type<ept id="p1">**</ept> - Code and configuration that performs a standalone function (it can start and run independently), for example, a queue service or database service.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An ApplicationType may consist of one ore more ServiceTypes.</source>
          <target state="new">An ApplicationType may consist of one ore more ServiceTypes.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are two kinds of services types:</source>
          <target state="new">There are two kinds of services types:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Stateless service: A service that has state where the state is persisted to external storage, such as Azure Databases or Azure Table store.</source>
          <target state="new">Stateless service: A service that has state where the state is persisted to external storage, such as Azure Databases or Azure Table store.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a node on which an instance of this service is active goes down, another instance is automatically started on another node.</source>
          <target state="new">If a node on which an instance of this service is active goes down, another instance is automatically started on another node.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Stateful service: A service that has state and achieves reliability through replication between replicas on other nodes in the cluster.</source>
          <target state="new">Stateful service: A service that has state and achieves reliability through replication between replicas on other nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Stateful services have a primary and multiple secondary replicas.</source>
          <target state="new">Stateful services have a primary and multiple secondary replicas.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a node on which a replica of this service is active goes down, a new replica is started on another node and if this was the primary replica, a secondary replica is automatically promoted to a new primary.</source>
          <target state="new">If a node on which a replica of this service is active goes down, a new replica is started on another node and if this was the primary replica, a secondary replica is automatically promoted to a new primary.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application Instance<ept id="p1">**</ept> - In a cluster you can create many application instances of an application type, each of which has a specific name.</source>
          <target state="new"><bpt id="p1">**</bpt>Application Instance<ept id="p1">**</ept> - In a cluster you can create many application instances of an application type, each of which has a specific name.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each application instance can be independently managed and versioned from other application instances of the same type or different type.</source>
          <target state="new">Each application instance can be independently managed and versioned from other application instances of the same type or different type.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Additionally they define resource and security isolation.</source>
          <target state="new">Additionally they define resource and security isolation.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service Instance<ept id="p1">**</ept> -  Code that has been instantiated for a service type.</source>
          <target state="new"><bpt id="p1">**</bpt>Service Instance<ept id="p1">**</ept> -  Code that has been instantiated for a service type.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each service instance has a unique name starting with <ph id="ph1">`fabric:/`</ph> and is associated with an particular named application instance.</source>
          <target state="new">Each service instance has a unique name starting with <ph id="ph1">`fabric:/`</ph> and is associated with an particular named application instance.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application Package<ept id="p1">**</ept> - The collection of service code packages and the configuration files combined for a particular application.</source>
          <target state="new"><bpt id="p1">**</bpt>Application Package<ept id="p1">**</ept> - The collection of service code packages and the configuration files combined for a particular application.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These are the physical files that are deployed and is simply a file and folder format layout.</source>
          <target state="new">These are the physical files that are deployed and is simply a file and folder format layout.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, an application package for an email application could contain a queue service package, a frontend service package, and a database service package.</source>
          <target state="new">For example, an application package for an email application could contain a queue service package, a frontend service package, and a database service package.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Programming Models<ept id="p1">**</ept> - There are two programming models available in Service Fabric to build applications:</source>
          <target state="new"><bpt id="p1">**</bpt>Programming Models<ept id="p1">**</ept> - There are two programming models available in Service Fabric to build applications:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Reliable Services - An API to build stateless and stateful services based on <ph id="ph1">`StatelessService`</ph> and <ph id="ph2">`StatefulService`</ph> .NET classes, storing state in .NET reliable collections (Dictionary and Queue) and with the ability to plug in a variety of communication stacks such as Web API and WCF.</source>
          <target state="new">Reliable Services - An API to build stateless and stateful services based on <ph id="ph1">`StatelessService`</ph> and <ph id="ph2">`StatefulService`</ph> .NET classes, storing state in .NET reliable collections (Dictionary and Queue) and with the ability to plug in a variety of communication stacks such as Web API and WCF.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This programming model is suitable for applications where you need to perform compute across multiple units of state.</source>
          <target state="new">This programming model is suitable for applications where you need to perform compute across multiple units of state.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reliable Actors - An API to build stateless and stateful objects through the virtual Actor programming model which is suitable for applications with multiple independent units of state and compute.</source>
          <target state="new">Reliable Actors - An API to build stateless and stateful objects through the virtual Actor programming model which is suitable for applications with multiple independent units of state and compute.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
##</ph> Next steps
To learn more about Service Fabric, see:

<bpt id="p1">- [</bpt><ept id="p1">Application Model](service-fabric-application-model.md)</ept><bpt id="p2">
- [</bpt><ept id="p2">Application Scenarios](service-fabric-application-scenarios.md)</ept></source>
          <target state="new"><ph id="ph1">
##</ph> Next steps
To learn more about Service Fabric, see:

<bpt id="p1">- [</bpt><ept id="p1">Application Model](service-fabric-application-model.md)</ept><bpt id="p2">
- [</bpt><ept id="p2">Application Scenarios](service-fabric-application-scenarios.md)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9ccd63f065a85a17f09626622a4f56cc9f30f55</xliffext:olfilehash>
  </header>
</xliff>