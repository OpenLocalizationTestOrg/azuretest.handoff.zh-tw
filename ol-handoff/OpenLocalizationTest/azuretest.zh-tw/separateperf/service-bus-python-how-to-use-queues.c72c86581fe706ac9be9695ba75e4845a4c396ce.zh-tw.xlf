<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues (Python) | Microsoft Azure</source>
          <target state="new">How to use Service Bus queues (Python) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure Service Bus queues from Python.</source>
          <target state="new">Learn how to use Azure Service Bus queues from Python.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues</source>
          <target state="new">How to use Service Bus queues</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Service Bus queues.</source>
          <target state="new">This guide describes how to use Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The samples are written in Python and use the <bpt id="p1">[</bpt>Python Azure package<ept id="p1">][]</ept>.</source>
          <target state="new">The samples are written in Python and use the <bpt id="p1">[</bpt>Python Azure package<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The scenarios covered include <bpt id="p1">**</bpt>creating queues, sending and receiving messages<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>deleting queues<ept id="p2">**</ept>.</source>
          <target state="new">The scenarios covered include <bpt id="p1">**</bpt>creating queues, sending and receiving messages<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>deleting queues<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> To install Python or the <bpt id="p2">[</bpt>Python Azure package<ept id="p2">][]</ept>, see the <bpt id="p3">[</bpt>Python Installation Guide<ept id="p3">](../python-how-to-install.md)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> To install Python or the <bpt id="p2">[</bpt>Python Azure package<ept id="p2">][]</ept>, see the <bpt id="p3">[</bpt>Python Installation Guide<ept id="p3">](../python-how-to-install.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How to create a queue</source>
          <target state="new">How to create a queue</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object enables you to work with queues.</source>
          <target state="new">The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object enables you to work with queues.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add the following code near the top of any Python file in which you wish to programmatically access Azure Service Bus:</source>
          <target state="new">Add the following code near the top of any Python file in which you wish to programmatically access Azure Service Bus:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following code creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object.</source>
          <target state="new">The following code creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Replace 'mynamespace', 'sharedaccesskeyname' and 'sharedaccesskey' with your namespace, shared access signature (SAS) key name, and value.</source>
          <target state="new">Replace 'mynamespace', 'sharedaccesskeyname' and 'sharedaccesskey' with your namespace, shared access signature (SAS) key name, and value.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The values for the SAS key name and value can be found in the Azure portal connection information, or in the Visual Studio <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section).</source>
          <target state="new">The values for the SAS key name and value can be found in the Azure portal connection information, or in the Visual Studio <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>create_queue<ept id="p1">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.</source>
          <target state="new"><bpt id="p1">**</bpt>create_queue<ept id="p1">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example sets the maximum queue size to 5GB, and the time to live value of 1 minute:</source>
          <target state="new">The following example sets the maximum queue size to 5GB, and the time to live value of 1 minute:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>How to send messages to a queue</source>
          <target state="new">How to send messages to a queue</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To send a message to a Service Bus queue, your application calls the <bpt id="p1">**</bpt>send\_queue\_message<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">To send a message to a Service Bus queue, your application calls the <bpt id="p1">**</bpt>send\_queue\_message<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send a test message to the queue named <bpt id="p1">*</bpt>taskqueue using<ept id="p1">*</ept> <bpt id="p2">**</bpt>send\_queue\_message<ept id="p2">**</ept>:</source>
          <target state="new">The following example demonstrates how to send a test message to the queue named <bpt id="p1">*</bpt>taskqueue using<ept id="p1">*</ept> <bpt id="p2">**</bpt>send\_queue\_message<ept id="p2">**</ept>:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</source>
          <target state="new">Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</source>
          <target state="new">There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This queue size is defined at creation time, with an upper limit of 5 GB.</source>
          <target state="new">This queue size is defined at creation time, with an upper limit of 5 GB.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>How to receive messages from a queue</source>
          <target state="new">How to receive messages from a queue</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Messages are received from a queue using the <bpt id="p1">**</bpt>receive\_queue\_message<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object:</source>
          <target state="new">Messages are received from a queue using the <bpt id="p1">**</bpt>receive\_queue\_message<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Messages are deleted from the queue as they are read when the parameter <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>False<ept id="p2">**</ept>.</source>
          <target state="new">Messages are deleted from the queue as they are read when the parameter <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>False<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can read (peek) and lock the message without deleting it from the queue by setting the parameter <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> to <bpt id="p2">**</bpt>True<ept id="p2">**</ept>.</source>
          <target state="new">You can read (peek) and lock the message without deleting it from the queue by setting the parameter <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> to <bpt id="p2">**</bpt>True<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</source>
          <target state="new">The behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
          <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
          <target state="new">Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>True<ept id="p2">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</source>
          <target state="new">If the <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>True<ept id="p2">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
          <target state="new">When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> object.</source>
          <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the queue.</source>
          <target state="new">The <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the queue.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>How to handle application crashes and unreadable messages</source>
          <target state="new">How to handle application crashes and unreadable messages</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</source>
          <target state="new">Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlock<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> object.</source>
          <target state="new">If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlock<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</source>
          <target state="new">This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.</source>
          <target state="new">There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</source>
          <target state="new">In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</source>
          <target state="new">This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</source>
          <target state="new">If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is often achieved using the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</source>
          <target state="new">This is often achieved using the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Now that you have learned the basics of Service Bus queues, follow these links to learn more.</source>
          <target state="new">Now that you have learned the basics of Service Bus queues, follow these links to learn more.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept>.</source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">109c912a89b05484dd90f14cfdccbbe05616000c</xliffext:olfilehash>
  </header>
</xliff>