<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reliable Actors Distributed Computation pattern</source>
          <target state="new">Reliable Actors Distributed Computation pattern</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Fabric Reliable Actors are a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation.</source>
          <target state="new">Service Fabric Reliable Actors are a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reliable Actors design pattern: distributed computation</source>
          <target state="new">Reliable Actors design pattern: distributed computation</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We owe this one in part to watching a real life customer whip out a financial calculation in Service Fabric Reliable Actors in an absurdly small amount of time—a Monte Carlo simulation for risk calculation to be exact.</source>
          <target state="new">We owe this one in part to watching a real life customer whip out a financial calculation in Service Fabric Reliable Actors in an absurdly small amount of time—a Monte Carlo simulation for risk calculation to be exact.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At first, especially to those who do not have domain specific knowledge, Azure Service Fabric's handling of this kind of workload, as opposed to say more traditional approaches such as Map/Reduce or MPI, may not be obvious.</source>
          <target state="new">At first, especially to those who do not have domain specific knowledge, Azure Service Fabric's handling of this kind of workload, as opposed to say more traditional approaches such as Map/Reduce or MPI, may not be obvious.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>But it turns out that Azure Service Fabric is a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation as the following diagram depicts:</source>
          <target state="new">But it turns out that Azure Service Fabric is a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation as the following diagram depicts:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>![][1]</source>
          <target state="new">![][1]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the following example, we simply calculate Pi using a Monte Carlo Simulation.</source>
          <target state="new">In the following example, we simply calculate Pi using a Monte Carlo Simulation.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We have the following actors:</source>
          <target state="new">We have the following actors:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Processor responsible for calculating Pi using PoolTask Actors.</source>
          <target state="new">Processor responsible for calculating Pi using PoolTask Actors.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>PoolTask responsible for Monte Carlo simulation and sending results to Aggregator.</source>
          <target state="new">PoolTask responsible for Monte Carlo simulation and sending results to Aggregator.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Aggregator responsible for, well, aggregating results and sending them to Finaliser.</source>
          <target state="new">Aggregator responsible for, well, aggregating results and sending them to Finaliser.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finaliser responsible for calculating the final result and printing on screen.</source>
          <target state="new">Finaliser responsible for calculating the final result and printing on screen.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Distributed computation code sample – Monte Carlo simulation</source>
          <target state="new">Distributed computation code sample – Monte Carlo simulation</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A common way of aggregating results in Azure Service Fabric is to use timers.</source>
          <target state="new">A common way of aggregating results in Azure Service Fabric is to use timers.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>We are using stateless actors for two main reasons: the runtime will decide how many aggregators are needed dynamically, therefore giving us scale on demand; and it will instantiate these actors “locally” – in other words in the same silo of the calling actor, reducing network hops.</source>
          <target state="new">We are using stateless actors for two main reasons: the runtime will decide how many aggregators are needed dynamically, therefore giving us scale on demand; and it will instantiate these actors “locally” – in other words in the same silo of the calling actor, reducing network hops.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here is how the Aggregator and Finaliser look:</source>
          <target state="new">Here is how the Aggregator and Finaliser look:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Distributed computation code sample – aggregator</source>
          <target state="new">Distributed computation code sample – aggregator</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>At this point, it should be clear how we could potentially enhance the Leaderboard example with an aggregator for scale and performance.</source>
          <target state="new">At this point, it should be clear how we could potentially enhance the Leaderboard example with an aggregator for scale and performance.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We are by no means asserting that Azure Service Fabric is a drop-in replacement for other distributed computation of big data frameworks or high performance computing.</source>
          <target state="new">We are by no means asserting that Azure Service Fabric is a drop-in replacement for other distributed computation of big data frameworks or high performance computing.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are some things it is just built to handle better than others.</source>
          <target state="new">There are some things it is just built to handle better than others.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However one can model workflows and distributed parallel computation in Azure Service Fabric while still getting the simplicity benefits it provides.</source>
          <target state="new">However one can model workflows and distributed parallel computation in Azure Service Fabric while still getting the simplicity benefits it provides.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Pattern: Smart Cache</source>
          <target state="new">Pattern: Smart Cache</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pattern: Distributed Networks and Graphs</source>
          <target state="new">Pattern: Distributed Networks and Graphs</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pattern: Resource Governance</source>
          <target state="new">Pattern: Resource Governance</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pattern: Stateful Service Composition</source>
          <target state="new">Pattern: Stateful Service Composition</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern: Internet of Things</source>
          <target state="new">Pattern: Internet of Things</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Some Anti-patterns</source>
          <target state="new">Some Anti-patterns</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Introduction to Service Fabric Actors</source>
          <target state="new">Introduction to Service Fabric Actors</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b034e034d6971d77dabf1b1ebb7b5572c07c32f3</xliffext:olfilehash>
  </header>
</xliff>