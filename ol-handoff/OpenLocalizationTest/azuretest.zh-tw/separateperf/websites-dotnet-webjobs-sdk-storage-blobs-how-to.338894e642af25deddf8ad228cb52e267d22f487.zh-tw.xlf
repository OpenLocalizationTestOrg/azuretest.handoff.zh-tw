<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Azure blob storage with the WebJobs SDK</source>
          <target state="new">How to use Azure blob storage with the WebJobs SDK</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure blob storage with the WebJobs SDK.</source>
          <target state="new">Learn how to use Azure blob storage with the WebJobs SDK.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Trigger a process when a new blob appears in a container and handle 'poison blobs'.</source>
          <target state="new">Trigger a process when a new blob appears in a container and handle 'poison blobs'.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use Azure blob storage with the WebJobs SDK</source>
          <target state="new">How to use Azure blob storage with the WebJobs SDK</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This guide provides C# code samples that show how to trigger a process when an Azure blob is created or updated.</source>
          <target state="new">This guide provides C# code samples that show how to trigger a process when an Azure blob is created or updated.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The code samples use <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.</source>
          <target state="new">The code samples use <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For code samples that show how to create blobs, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</source>
          <target state="new">For code samples that show how to create blobs, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The guide assumes you know <bpt id="p1">[</bpt>how to create a WebJob project in Visual Studio with connection strings that point to your storage account<ept id="p1">](websites-dotnet-webjobs-sdk-get-started.md)</ept>.</source>
          <target state="new">The guide assumes you know <bpt id="p1">[</bpt>how to create a WebJob project in Visual Studio with connection strings that point to your storage account<ept id="p1">](websites-dotnet-webjobs-sdk-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="trigger"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to trigger a function when a blob is created or updated</source>
          <target state="new"><ph id="ph1">&lt;a id="trigger"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to trigger a function when a blob is created or updated</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This section shows how to use the <ph id="ph1">`BlobTrigger`</ph> attribute.</source>
          <target state="new">This section shows how to use the <ph id="ph1">`BlobTrigger`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The WebJobs SDK scans log files to watch for new or changed blobs.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The WebJobs SDK scans log files to watch for new or changed blobs.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This process is inherently slow; a function might not get triggered until several minutes or longer after the blob is created.</source>
          <target state="new">This process is inherently slow; a function might not get triggered until several minutes or longer after the blob is created.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If your application needs to process blobs immediately, the recommended method is to create a queue message when you create the blob, and use the <bpt id="p1">[</bpt>QueueTrigger<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#trigger)</ept> attribute instead of the <ph id="ph1">`BlobTrigger`</ph> attribute on the function that processes the blob.</source>
          <target state="new">If your application needs to process blobs immediately, the recommended method is to create a queue message when you create the blob, and use the <bpt id="p1">[</bpt>QueueTrigger<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#trigger)</ept> attribute instead of the <ph id="ph1">`BlobTrigger`</ph> attribute on the function that processes the blob.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Single placeholder for blob name with extension</source>
          <target state="new">Single placeholder for blob name with extension</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code sample copies text blobs that appear in the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> container to the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> container:</source>
          <target state="new">The following code sample copies text blobs that appear in the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> container to the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> container:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The attribute constructor takes a string parameter that specifies the container name and a placeholder for the blob name.</source>
          <target state="new">The attribute constructor takes a string parameter that specifies the container name and a placeholder for the blob name.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this example, if a blob named <bpt id="p1">*</bpt>Blob1.txt<ept id="p1">*</ept> is created in the <bpt id="p2">*</bpt>input<ept id="p2">*</ept> container, the function creates a blob named <bpt id="p3">*</bpt>Blob1.txt<ept id="p3">*</ept> in the <bpt id="p4">*</bpt>output<ept id="p4">*</ept> container.</source>
          <target state="new">In this example, if a blob named <bpt id="p1">*</bpt>Blob1.txt<ept id="p1">*</ept> is created in the <bpt id="p2">*</bpt>input<ept id="p2">*</ept> container, the function creates a blob named <bpt id="p3">*</bpt>Blob1.txt<ept id="p3">*</ept> in the <bpt id="p4">*</bpt>output<ept id="p4">*</ept> container.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can specify a name pattern with the blob name placeholder, as shown in the following code sample:</source>
          <target state="new">You can specify a name pattern with the blob name placeholder, as shown in the following code sample:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code copies only blobs that have names beginning with "original-".</source>
          <target state="new">This code copies only blobs that have names beginning with "original-".</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">*</bpt>original-Blob1.txt<ept id="p1">*</ept> in the <bpt id="p2">*</bpt>input<ept id="p2">*</ept> container is copied to <bpt id="p3">*</bpt>copy-Blob1.txt<ept id="p3">*</ept> in the <bpt id="p4">*</bpt>output<ept id="p4">*</ept> container.</source>
          <target state="new">For example, <bpt id="p1">*</bpt>original-Blob1.txt<ept id="p1">*</ept> in the <bpt id="p2">*</bpt>input<ept id="p2">*</ept> container is copied to <bpt id="p3">*</bpt>copy-Blob1.txt<ept id="p3">*</ept> in the <bpt id="p4">*</bpt>output<ept id="p4">*</ept> container.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you need to specify a name pattern for blob names that have curly braces in the name, double the curly braces.</source>
          <target state="new">If you need to specify a name pattern for blob names that have curly braces in the name, double the curly braces.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, if you want to find blobs in the <bpt id="p1">*</bpt>images<ept id="p1">*</ept> container that have names like this:</source>
          <target state="new">For example, if you want to find blobs in the <bpt id="p1">*</bpt>images<ept id="p1">*</ept> container that have names like this:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>use this for your pattern:</source>
          <target state="new">use this for your pattern:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the example, the <bpt id="p1">*</bpt>name<ept id="p1">*</ept> placeholder value would be <bpt id="p2">*</bpt>soundfile.mp3<ept id="p2">*</ept>.</source>
          <target state="new">In the example, the <bpt id="p1">*</bpt>name<ept id="p1">*</ept> placeholder value would be <bpt id="p2">*</bpt>soundfile.mp3<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Separate blob name and extension placeholders</source>
          <target state="new">Separate blob name and extension placeholders</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code sample changes the file extension as it copies blobs that appear in the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> container to the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> container.</source>
          <target state="new">The following code sample changes the file extension as it copies blobs that appear in the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> container to the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> container.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The code logs the extension of the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> blob and sets the extension of the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> blob to <bpt id="p3">*</bpt>.txt<ept id="p3">*</ept>.</source>
          <target state="new">The code logs the extension of the <bpt id="p1">*</bpt>input<ept id="p1">*</ept> blob and sets the extension of the <bpt id="p2">*</bpt>output<ept id="p2">*</ept> blob to <bpt id="p3">*</bpt>.txt<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Types that you can bind to blobs</source>
          <target state="new"><ph id="ph1">&lt;a id="types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Types that you can bind to blobs</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`BlobTrigger`</ph> attribute on the following types:</source>
          <target state="new">You can use the <ph id="ph1">`BlobTrigger`</ph> attribute on the following types:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Other types deserialized by <bpt id="p1">[</bpt>ICloudBlobStreamBinder<ept id="p1">](#icbsb)</ept></source>
          <target state="new">Other types deserialized by <bpt id="p1">[</bpt>ICloudBlobStreamBinder<ept id="p1">](#icbsb)</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you want to work directly with the Azure storage account, you can also add a <ph id="ph1">`CloudStorageAccount`</ph> parameter to the method signature.</source>
          <target state="new">If you want to work directly with the Azure storage account, you can also add a <ph id="ph1">`CloudStorageAccount`</ph> parameter to the method signature.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="string"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Getting text blob content by binding to string</source>
          <target state="new"><ph id="ph1">&lt;a id="string"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Getting text blob content by binding to string</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If text blobs are expected, <ph id="ph1">`BlobTrigger`</ph> can be applied to a <ph id="ph2">`string`</ph> parameter.</source>
          <target state="new">If text blobs are expected, <ph id="ph1">`BlobTrigger`</ph> can be applied to a <ph id="ph2">`string`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following code sample binds a text blob to a <ph id="ph1">`string`</ph> parameter named <ph id="ph2">`logMessage`</ph>.</source>
          <target state="new">The following code sample binds a text blob to a <ph id="ph1">`string`</ph> parameter named <ph id="ph2">`logMessage`</ph>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The function uses that parameter to write the contents of the blob to the WebJobs SDK dashboard.</source>
          <target state="new">The function uses that parameter to write the contents of the blob to the WebJobs SDK dashboard.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="icbsb"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Getting serialized blob content by using ICloudBlobStreamBinder</source>
          <target state="new"><ph id="ph1">&lt;a id="icbsb"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Getting serialized blob content by using ICloudBlobStreamBinder</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code sample uses a class that implements <ph id="ph1">`ICloudBlobStreamBinder`</ph> to enable the <ph id="ph2">`BlobTrigger`</ph> attribute to bind a blob to the <ph id="ph3">`WebImage`</ph> type.</source>
          <target state="new">The following code sample uses a class that implements <ph id="ph1">`ICloudBlobStreamBinder`</ph> to enable the <ph id="ph2">`BlobTrigger`</ph> attribute to bind a blob to the <ph id="ph3">`WebImage`</ph> type.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WebImage`</ph> binding code is provided in a <ph id="ph2">`WebImageBinder`</ph> class that derives from <ph id="ph3">`ICloudBlobStreamBinder`</ph>.</source>
          <target state="new">The <ph id="ph1">`WebImage`</ph> binding code is provided in a <ph id="ph2">`WebImageBinder`</ph> class that derives from <ph id="ph3">`ICloudBlobStreamBinder`</ph>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="poison"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to handle poison blobs</source>
          <target state="new"><ph id="ph1">&lt;a id="poison"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to handle poison blobs</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`BlobTrigger`</ph> function fails, the SDK calls it again, in case the failure was caused by a transient error.</source>
          <target state="new">When a <ph id="ph1">`BlobTrigger`</ph> function fails, the SDK calls it again, in case the failure was caused by a transient error.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the failure is caused by the content of the blob, the function fails every time it tries to process the blob.</source>
          <target state="new">If the failure is caused by the content of the blob, the function fails every time it tries to process the blob.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By default, the SDK calls a function up to 5 times for a given blob.</source>
          <target state="new">By default, the SDK calls a function up to 5 times for a given blob.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the fifth try fails, the SDK adds a message to a queue named <bpt id="p1">*</bpt>webjobs-blobtrigger-poison<ept id="p1">*</ept>.</source>
          <target state="new">If the fifth try fails, the SDK adds a message to a queue named <bpt id="p1">*</bpt>webjobs-blobtrigger-poison<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The maximum number of retries is configurable.</source>
          <target state="new">The maximum number of retries is configurable.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The same <bpt id="p1">[</bpt>MaxDequeueCount<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#configqueue)</ept> setting is used for poison blob handling and poison queue message handling.</source>
          <target state="new">The same <bpt id="p1">[</bpt>MaxDequeueCount<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#configqueue)</ept> setting is used for poison blob handling and poison queue message handling.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The queue message for poison blobs is a JSON object that contains the following properties:</source>
          <target state="new">The queue message for poison blobs is a JSON object that contains the following properties:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>FunctionId (in the format <bpt id="p1">*</bpt>{WebJob name}<ept id="p1">*</ept>.Functions.<bpt id="p2">*</bpt>{Function name}<ept id="p2">*</ept>, for example: WebJob1.Functions.CopyBlob)</source>
          <target state="new">FunctionId (in the format <bpt id="p1">*</bpt>{WebJob name}<ept id="p1">*</ept>.Functions.<bpt id="p2">*</bpt>{Function name}<ept id="p2">*</ept>, for example: WebJob1.Functions.CopyBlob)</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>BlobType ("BlockBlob" or "PageBlob")</source>
          <target state="new">BlobType ("BlockBlob" or "PageBlob")</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ContainerName</source>
          <target state="new">ContainerName</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>BlobName</source>
          <target state="new">BlobName</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ETag (a blob version identifier, for example: "0x8D1DC6E70A277EF")</source>
          <target state="new">ETag (a blob version identifier, for example: "0x8D1DC6E70A277EF")</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the following code sample, the <ph id="ph1">`CopyBlob`</ph> function has code that causes it to fail every time it's called.</source>
          <target state="new">In the following code sample, the <ph id="ph1">`CopyBlob`</ph> function has code that causes it to fail every time it's called.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>After the SDK calls it for the maximum number of retries, a message is created on the poison blob queue, and that message is processed by the <ph id="ph1">`LogPoisonBlob`</ph> function.</source>
          <target state="new">After the SDK calls it for the maximum number of retries, a message is created on the poison blob queue, and that message is processed by the <ph id="ph1">`LogPoisonBlob`</ph> function.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The SDK automatically deserializes the JSON message.</source>
          <target state="new">The SDK automatically deserializes the JSON message.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Here is the <ph id="ph1">`PoisonBlobMessage`</ph> class:</source>
          <target state="new">Here is the <ph id="ph1">`PoisonBlobMessage`</ph> class:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="polling"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Blob polling algorithm</source>
          <target state="new"><ph id="ph1">&lt;a id="polling"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Blob polling algorithm</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The WebJobs SDK scans all containers specified by <ph id="ph1">`BlobTrigger`</ph> attributes at application start.</source>
          <target state="new">The WebJobs SDK scans all containers specified by <ph id="ph1">`BlobTrigger`</ph> attributes at application start.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In a large storage account this scan can take some time, so it might be a while before new blobs are found and <ph id="ph1">`BlobTrigger`</ph> functions are executed.</source>
          <target state="new">In a large storage account this scan can take some time, so it might be a while before new blobs are found and <ph id="ph1">`BlobTrigger`</ph> functions are executed.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To detect new or changed blobs after application start, the SDK periodically reads from the blob storage logs.</source>
          <target state="new">To detect new or changed blobs after application start, the SDK periodically reads from the blob storage logs.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The blob logs are buffered and only get physically written every 10 minutes or so, so there may be significant delay after a blob is created or updated before the corresponding <ph id="ph1">`BlobTrigger`</ph> function executes.</source>
          <target state="new">The blob logs are buffered and only get physically written every 10 minutes or so, so there may be significant delay after a blob is created or updated before the corresponding <ph id="ph1">`BlobTrigger`</ph> function executes.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There is an exception for blobs that you create by using the <ph id="ph1">`Blob`</ph> attribute.</source>
          <target state="new">There is an exception for blobs that you create by using the <ph id="ph1">`Blob`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When the WebJobs SDK creates a new blob, it passes the new blob immediately to any matching <ph id="ph1">`BlobTrigger`</ph> functions.</source>
          <target state="new">When the WebJobs SDK creates a new blob, it passes the new blob immediately to any matching <ph id="ph1">`BlobTrigger`</ph> functions.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Therefore if you have a chain of blob inputs and outputs, the SDK can process them efficiently.</source>
          <target state="new">Therefore if you have a chain of blob inputs and outputs, the SDK can process them efficiently.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>But if you want low latency running your blob processing functions for blobs that are created or updated by other means, we recommend using <ph id="ph1">`QueueTrigger`</ph> rather than <ph id="ph2">`BlobTrigger`</ph>.</source>
          <target state="new">But if you want low latency running your blob processing functions for blobs that are created or updated by other means, we recommend using <ph id="ph1">`QueueTrigger`</ph> rather than <ph id="ph2">`BlobTrigger`</ph>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="receipts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Blob receipts</source>
          <target state="new"><ph id="ph1">&lt;a id="receipts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Blob receipts</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The WebJobs SDK makes sure that no <ph id="ph1">`BlobTrigger`</ph> function gets called more than once for the same new or updated blob.</source>
          <target state="new">The WebJobs SDK makes sure that no <ph id="ph1">`BlobTrigger`</ph> function gets called more than once for the same new or updated blob.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It does this by maintaining <bpt id="p1">*</bpt>blob receipts<ept id="p1">*</ept> in order to determine if a given blob version has been processed.</source>
          <target state="new">It does this by maintaining <bpt id="p1">*</bpt>blob receipts<ept id="p1">*</ept> in order to determine if a given blob version has been processed.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Blob receipts are stored in a container named <bpt id="p1">*</bpt>azure-webjobs-hosts<ept id="p1">*</ept> in the Azure storage account specified by the AzureWebJobsStorage connection string.</source>
          <target state="new">Blob receipts are stored in a container named <bpt id="p1">*</bpt>azure-webjobs-hosts<ept id="p1">*</ept> in the Azure storage account specified by the AzureWebJobsStorage connection string.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A blob receipt has the following  information:</source>
          <target state="new">A blob receipt has the following  information:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The function that was called for the blob ("<bpt id="p1">*</bpt>{WebJob name}<ept id="p1">*</ept>.Functions.<bpt id="p2">*</bpt>{Function name}<ept id="p2">*</ept>", for example: "WebJob1.Functions.CopyBlob")</source>
          <target state="new">The function that was called for the blob ("<bpt id="p1">*</bpt>{WebJob name}<ept id="p1">*</ept>.Functions.<bpt id="p2">*</bpt>{Function name}<ept id="p2">*</ept>", for example: "WebJob1.Functions.CopyBlob")</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The container name</source>
          <target state="new">The container name</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The blob type ("BlockBlob" or "PageBlob")</source>
          <target state="new">The blob type ("BlockBlob" or "PageBlob")</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The blob name</source>
          <target state="new">The blob name</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The ETag (a blob version identifier, for example: "0x8D1DC6E70A277EF")</source>
          <target state="new">The ETag (a blob version identifier, for example: "0x8D1DC6E70A277EF")</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If you want to force reprocessing of a blob, you can manually delete the blob receipt for that blob from the <bpt id="p1">*</bpt>azure-webjobs-hosts<ept id="p1">*</ept> container.</source>
          <target state="new">If you want to force reprocessing of a blob, you can manually delete the blob receipt for that blob from the <bpt id="p1">*</bpt>azure-webjobs-hosts<ept id="p1">*</ept> container.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Related topics covered by the queues article</source>
          <target state="new"><ph id="ph1">&lt;a id="queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Related topics covered by the queues article</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For information about how to handle blob processing triggered by a queue message, or for WebJobs SDK scenarios not specific to blob processing, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</source>
          <target state="new">For information about how to handle blob processing triggered by a queue message, or for WebJobs SDK scenarios not specific to blob processing, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Related topics covered in that article include the following:</source>
          <target state="new">Related topics covered in that article include the following:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Async functions</source>
          <target state="new">Async functions</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Multiple instances</source>
          <target state="new">Multiple instances</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="new">Graceful shutdown</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use WebJobs SDK attributes in the body of a function</source>
          <target state="new">Use WebJobs SDK attributes in the body of a function</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Set the SDK connection strings in code.</source>
          <target state="new">Set the SDK connection strings in code.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Set values for WebJobs SDK constructor parameters in code</source>
          <target state="new">Set values for WebJobs SDK constructor parameters in code</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Configure <ph id="ph1">`MaxDequeueCount`</ph> for poison blob handling.</source>
          <target state="new">Configure <ph id="ph1">`MaxDequeueCount`</ph> for poison blob handling.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Trigger a function manually</source>
          <target state="new">Trigger a function manually</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Write logs</source>
          <target state="new">Write logs</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Next steps</source>
          <target state="new"><ph id="ph1">&lt;a id="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Next steps</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This guide has provided code samples that show how to handle common scenarios for working with Azure blobs.</source>
          <target state="new">This guide has provided code samples that show how to handle common scenarios for working with Azure blobs.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</source>
          <target state="new">For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24670f9c2227d6f80b7081da0c30c9e332d5a95a</xliffext:olfilehash>
  </header>
</xliff>