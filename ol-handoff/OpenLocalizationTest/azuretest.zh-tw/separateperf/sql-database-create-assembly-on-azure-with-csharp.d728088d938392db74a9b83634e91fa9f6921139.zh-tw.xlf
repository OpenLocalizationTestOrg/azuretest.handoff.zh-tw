<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CREATE ASSEMBLY on Azure SQL Database with CSharp</source>
          <target state="new">CREATE ASSEMBLY on Azure SQL Database with CSharp</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Provides C# source code to issue CREATE ASSEMBLY to Azure SQL Database after first encoding a DLL file into a string that contains a long hexadecimal number.</source>
          <target state="new">Provides C# source code to issue CREATE ASSEMBLY to Azure SQL Database after first encoding a DLL file into a string that contains a long hexadecimal number.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CREATE ASSEMBLY on Azure SQL Database with CSharp</source>
          <target state="new">CREATE ASSEMBLY on Azure SQL Database with CSharp</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides a C# code sample you can use to issue a <bpt id="p1">[</bpt>CREATE ASSEMBLY<ept id="p1">](http://msdn.microsoft.com/library/ms189524.aspx)</ept> statement to Azure SQL Database.</source>
          <target state="new">This topic provides a C# code sample you can use to issue a <bpt id="p1">[</bpt>CREATE ASSEMBLY<ept id="p1">](http://msdn.microsoft.com/library/ms189524.aspx)</ept> statement to Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For SQL Database, the FROM clause cannot accept the simple format of a path on the local computer that hosts the database.</source>
          <target state="new">For SQL Database, the FROM clause cannot accept the simple format of a path on the local computer that hosts the database.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An alternative is to first encode the binary bits of the assembly DLL into a long string containing a hexadecimal number.</source>
          <target state="new">An alternative is to first encode the binary bits of the assembly DLL into a long string containing a hexadecimal number.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then give the string as the value on the FROM clause.</source>
          <target state="new">Then give the string as the value on the FROM clause.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To understand this topic, you must have already partially know the following:</source>
          <target state="new">To understand this topic, you must have already partially know the following:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLR Table-Valued Functions<ept id="p1">](http://msdn.microsoft.com/library/ms131103.aspx)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>CLR Table-Valued Functions<ept id="p1">](http://msdn.microsoft.com/library/ms131103.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Explains how the CREATE ASSEMBLY Transact-SQL statement works with other statements for the on-premises Microsoft SQL Server.</source>
          <target state="new">Explains how the CREATE ASSEMBLY Transact-SQL statement works with other statements for the on-premises Microsoft SQL Server.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A.</source>
          <target state="new">A.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Overall Technique</source>
          <target state="new">Overall Technique</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DROP FUNCTION and DROP ASSEMBLY, if necessary to clean up a previous run.</source>
          <target state="new">DROP FUNCTION and DROP ASSEMBLY, if necessary to clean up a previous run.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remember the location of the Microsoft .NET Framework assembly DLL file that you compiled from your own code.</source>
          <target state="new">Remember the location of the Microsoft .NET Framework assembly DLL file that you compiled from your own code.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You provide the location in the next step.</source>
          <target state="new">You provide the location in the next step.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Run the EXE for which the C# source code is given in this topic.</source>
          <target state="new">Run the EXE for which the C# source code is given in this topic.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Tell the EXE where your DLL file is.</source>
          <target state="new">Tell the EXE where your DLL file is.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Encodes your binary DLL into a long string containing a hexadecimal number.</source>
          <target state="new">Encodes your binary DLL into a long string containing a hexadecimal number.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Issues a CREATE ASSEMBLY statement with the hex string given in the FROM clause.</source>
          <target state="new">Issues a CREATE ASSEMBLY statement with the hex string given in the FROM clause.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CREATE FUNCTION<ept id="p1">](http://msdn.microsoft.com/library/ms186755.aspx)</ept> to reference a method in your assembly.</source>
          <target state="new"><bpt id="p1">[</bpt>CREATE FUNCTION<ept id="p1">](http://msdn.microsoft.com/library/ms186755.aspx)</ept> to reference a method in your assembly.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>T-SQL SELECT statement to call and test your function.</source>
          <target state="new">T-SQL SELECT statement to call and test your function.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The preceding list makes no mention of...</source>
          <target state="new">The preceding list makes no mention of...</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>execute sp_configure 'clr enabled', 1;<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>execute sp_configure 'clr enabled', 1;<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>...because this is not needed for Azure SQL Database, even though it is needed for Microsoft SQL Server.</source>
          <target state="new">...because this is not needed for Azure SQL Database, even though it is needed for Microsoft SQL Server.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If necessary for reruns, the T-SQL code to drop the function and assembly is the following:</source>
          <target state="new">If necessary for reruns, the T-SQL code to drop the function and assembly is the following:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>B.</source>
          <target state="new">B.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Simple Assembly DLL for T-SQL Function to Reference</source>
          <target state="new">Simple Assembly DLL for T-SQL Function to Reference</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The trivial C# code sample in this section can be compiled into an assembly DLL file.</source>
          <target state="new">The trivial C# code sample in this section can be compiled into an assembly DLL file.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This code sample contains the method <bpt id="p1">**</bpt>CompareCaseSensitiveNet<ept id="p1">**</ept> which is referenced later in a T-SQL CREATE FUNCTION statement.</source>
          <target state="new">This code sample contains the method <bpt id="p1">**</bpt>CompareCaseSensitiveNet<ept id="p1">**</ept> which is referenced later in a T-SQL CREATE FUNCTION statement.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Notice that the method is decorated with a .NET attribute named <bpt id="p1">**</bpt>SqlFunction<ept id="p1">**</ept>.</source>
          <target state="new">Notice that the method is decorated with a .NET attribute named <bpt id="p1">**</bpt>SqlFunction<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A method that is decorated with this attribute can be called by your T-SQL as a function.</source>
          <target state="new">A method that is decorated with this attribute can be called by your T-SQL as a function.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>C.</source>
          <target state="new">C.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>C&amp;#x23; Code Sample for EXE that Issues CREATE ASSEMBLY</source>
          <target state="new">C&amp;#x23; Code Sample for EXE that Issues CREATE ASSEMBLY</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following sequence occurs when you run the EXE that is built from this C# sample:</source>
          <target state="new">The following sequence occurs when you run the EXE that is built from this C# sample:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The command line run of the EXE calls the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method.</source>
          <target state="new">The command line run of the EXE calls the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Main calls the <bpt id="p1">**</bpt>ObtainHexStringOfAssembly<ept id="p1">**</ept> method.</source>
          <target state="new">Main calls the <bpt id="p1">**</bpt>ObtainHexStringOfAssembly<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The method outputs a SqlString that stores the assembly as a hexadecimal number.</source>
          <target state="new">The method outputs a SqlString that stores the assembly as a hexadecimal number.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Main calls the <bpt id="p1">**</bpt>SubmitCreateAssemblyToAzureSqlDb<ept id="p1">**</ept> method.</source>
          <target state="new">Main calls the <bpt id="p1">**</bpt>SubmitCreateAssemblyToAzureSqlDb<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The primary input is the SqlString.</source>
          <target state="new">The primary input is the SqlString.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The output is a CREATE ASSEMBLY call that is sent to Azure SQL Database.</source>
          <target state="new">The output is a CREATE ASSEMBLY call that is sent to Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>C.1 Compile References and Versions</source>
          <target state="new">C.1 Compile References and Versions</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When we compiled and tested the sample code for the EXE tool, we used the following:</source>
          <target state="new">When we compiled and tested the sample code for the EXE tool, we used the following:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013, update 4</source>
          <target state="new">Visual Studio 2013, update 4</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Our project template type was the simple console application.</source>
          <target state="new">Our project template type was the simple console application.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>.NET Framework 4.5</source>
          <target state="new">.NET Framework 4.5</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Our Visual Studio project referenced the following assemblies for compile:</source>
          <target state="new">Our Visual Studio project referenced the following assemblies for compile:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Microsoft.CSharp</source>
          <target state="new">Microsoft.CSharp</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="new">System</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>System.Core</source>
          <target state="new">System.Core</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>System.Data</source>
          <target state="new">System.Data</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>System.Data.DataSetExtensions</source>
          <target state="new">System.Data.DataSetExtensions</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>System.Xml</source>
          <target state="new">System.Xml</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>System.Xml.Linq</source>
          <target state="new">System.Xml.Linq</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>C.2 Command Line to Run the EXE</source>
          <target state="new">C.2 Command Line to Run the EXE</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following code block displays an example of the command line that you would enter to run the EXE from the console.</source>
          <target state="new">The following code block displays an example of the command line that you would enter to run the EXE from the console.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The parameters in the command line are artificially wrapped here for better display.</source>
          <target state="new">The parameters in the command line are artificially wrapped here for better display.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For simplicity of explanation this example passes the password as a command line parameter.</source>
          <target state="new">For simplicity of explanation this example passes the password as a command line parameter.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A better design is to have the C# code obtain the password from a CONFIG file.</source>
          <target state="new">A better design is to have the C# code obtain the password from a CONFIG file.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>D.</source>
          <target state="new">D.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Run a CREATE FUNCTION Statement</source>
          <target state="new">Run a CREATE FUNCTION Statement</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After the assembly is stored in your Azure SQL Database server, you must run a Transact-SQL CREATE FUNCTION statement that references the method in the assembly.</source>
          <target state="new">After the assembly is stored in your Azure SQL Database server, you must run a Transact-SQL CREATE FUNCTION statement that references the method in the assembly.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following block of Transact-SQL code includes a couple of nonessential SELECT statements to show proof that the database system has records for your assembly and your function.</source>
          <target state="new">The following block of Transact-SQL code includes a couple of nonessential SELECT statements to show proof that the database system has records for your assembly and your function.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally there is a SELECT that calls the function.</source>
          <target state="new">Finally there is a SELECT that calls the function.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The preceding Transact-SQL code block ends with a SELECT statement that calls the new function.</source>
          <target state="new">The preceding Transact-SQL code block ends with a SELECT statement that calls the new function.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You could place the SELECT statement into a stored procedure.</source>
          <target state="new">You could place the SELECT statement into a stored procedure.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2823a876628c2f88bb3c6ba10996889050fa47c</xliffext:olfilehash>
  </header>
</xliff>