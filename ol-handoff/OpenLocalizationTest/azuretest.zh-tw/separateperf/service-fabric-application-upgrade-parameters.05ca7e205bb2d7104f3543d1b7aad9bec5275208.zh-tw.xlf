<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade: Upgrade Parameters</source>
          <target state="new">Service Fabric Application Upgrade: Upgrade Parameters</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes the various parameters related to upgrading a Service Fabric application.</source>
          <target state="new">This article describes the various parameters related to upgrading a Service Fabric application.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Application Upgrade Parameters</source>
          <target state="new">Application Upgrade Parameters</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article describes the various parameters that apply during the upgrade of a Service Fabric application.</source>
          <target state="new">This article describes the various parameters that apply during the upgrade of a Service Fabric application.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The parameters include the name and version of the application, and are knobs that control the timeouts and health checks that are applied during the upgrade and specify the policies must be applied when an upgrade fails.</source>
          <target state="new">The parameters include the name and version of the application, and are knobs that control the timeouts and health checks that are applied during the upgrade and specify the policies must be applied when an upgrade fails.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="new">Parameter</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ApplicationName</source>
          <target state="new">ApplicationName</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Name of the application that is being upgraded.</source>
          <target state="new">Name of the application that is being upgraded.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Examples:fabric:/VisualObjects, fabric:/ClusterMonitor</source>
          <target state="new">Examples:fabric:/VisualObjects, fabric:/ClusterMonitor</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>TargetApplicationTypeVersion</source>
          <target state="new">TargetApplicationTypeVersion</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The version of the application type that the upgrade targets.</source>
          <target state="new">The version of the application type that the upgrade targets.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>FailureAction</source>
          <target state="new">FailureAction</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The FailureAction property describes the action to be taken by Service Fabric if the upgrade fails.</source>
          <target state="new">The FailureAction property describes the action to be taken by Service Fabric if the upgrade fails.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The application may be rolled back to the last version prior to the update (Rollback), or stop the application upgrade at the current upgrade domain and change the upgrade mode to manual.</source>
          <target state="new">The application may be rolled back to the last version prior to the update (Rollback), or stop the application upgrade at the current upgrade domain and change the upgrade mode to manual.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Allowed values are Rollback and Manual.</source>
          <target state="new">Allowed values are Rollback and Manual.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>HealthCheckWaitDurationSec</source>
          <target state="new">HealthCheckWaitDurationSec</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The time to wait (in seconds) after the upgrade has completed on the upgrade domain before Service Fabric evaluates the health of the application.</source>
          <target state="new">The time to wait (in seconds) after the upgrade has completed on the upgrade domain before Service Fabric evaluates the health of the application.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This duration can also be considered as the time an application should be running before it can be considered healthy.</source>
          <target state="new">This duration can also be considered as the time an application should be running before it can be considered healthy.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the health check passes, the upgrade process proceeds to the next upgrade domain.</source>
          <target state="new">If the health check passes, the upgrade process proceeds to the next upgrade domain.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the health check fails, Service Fabric waits for an interval (the UpgradeHealthCheckInterval) before retrying the health check again until the HealthCheckRetryTimeout is reached.</source>
          <target state="new">If the health check fails, Service Fabric waits for an interval (the UpgradeHealthCheckInterval) before retrying the health check again until the HealthCheckRetryTimeout is reached.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The default and recommended value is 0 seconds.</source>
          <target state="new">The default and recommended value is 0 seconds.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>HealthCheckRetryTimeoutSec</source>
          <target state="new">HealthCheckRetryTimeoutSec</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The duration (in seconds) that Service Fabric continues to perform health evaluation before declaring the upgrade as failed.</source>
          <target state="new">The duration (in seconds) that Service Fabric continues to perform health evaluation before declaring the upgrade as failed.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The default is 600 seconds.</source>
          <target state="new">The default is 600 seconds.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This duration starts after HealthCheckWaitDuration is reached.</source>
          <target state="new">This duration starts after HealthCheckWaitDuration is reached.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Within this HealthCheckRetryTimeout, Service Fabric might perform multiple health checks of the application health.</source>
          <target state="new">Within this HealthCheckRetryTimeout, Service Fabric might perform multiple health checks of the application health.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The default value is 10 minutes and is recommended to be customized appropriately for your application.</source>
          <target state="new">The default value is 10 minutes and is recommended to be customized appropriately for your application.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>HealthCheckStableDurationSec</source>
          <target state="new">HealthCheckStableDurationSec</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The duration (in seconds) to wait in order to verify that the application is stable before moving to the next upgrade domain or completing the upgrade.</source>
          <target state="new">The duration (in seconds) to wait in order to verify that the application is stable before moving to the next upgrade domain or completing the upgrade.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This wait duration is used to prevent undetected changes of health right after the health check is performed.</source>
          <target state="new">This wait duration is used to prevent undetected changes of health right after the health check is performed.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default value is 0 seconds, and is recommended to be customized appropriately for your application.</source>
          <target state="new">The default value is 0 seconds, and is recommended to be customized appropriately for your application.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>UpgradeDomainTimeoutSec</source>
          <target state="new">UpgradeDomainTimeoutSec</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Maximum time (in seconds) for upgrading a single upgrade domain.</source>
          <target state="new">Maximum time (in seconds) for upgrading a single upgrade domain.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If this time-out is reach, the upgrade stops and takes the action specified by UpgradeFailureAction.</source>
          <target state="new">If this time-out is reach, the upgrade stops and takes the action specified by UpgradeFailureAction.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The default value is never (infinite) and is recommended to be customized appropriately for your application.</source>
          <target state="new">The default value is never (infinite) and is recommended to be customized appropriately for your application.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>UpgradeTimeout</source>
          <target state="new">UpgradeTimeout</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A timeout (in seconds) that applies for the entire upgrade.</source>
          <target state="new">A timeout (in seconds) that applies for the entire upgrade.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If this time-out is reached, the upgrade stops and the UpgradeFailureAction is triggered.</source>
          <target state="new">If this time-out is reached, the upgrade stops and the UpgradeFailureAction is triggered.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The default value is never (infinite) and is recommended to be customized appropriately for your application.</source>
          <target state="new">The default value is never (infinite) and is recommended to be customized appropriately for your application.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>UpgradeHealthCheckInterval</source>
          <target state="new">UpgradeHealthCheckInterval</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Specified in the ClusterManager section of the <bpt id="p1">_</bpt>cluster<ept id="p1">_</ept> <bpt id="p2">_</bpt>manifest<ept id="p2">_</ept> (this is not specified as part of the upgrade cmdlet), this setting specifies the frequency that the health status is checked (the default is 60 seconds).</source>
          <target state="new">Specified in the ClusterManager section of the <bpt id="p1">_</bpt>cluster<ept id="p1">_</ept> <bpt id="p2">_</bpt>manifest<ept id="p2">_</ept> (this is not specified as part of the upgrade cmdlet), this setting specifies the frequency that the health status is checked (the default is 60 seconds).</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Service health evaluation during application upgrade</source>
          <target state="new">Service health evaluation during application upgrade</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The health evaluation criteria are optional.</source>
          <target state="new">The health evaluation criteria are optional.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the health evaluation criteria are not specified when starting an upgrade, Service Fabric uses the application health policies specified in the ApplicationManifest.xml of the application instance that is being upgraded.</source>
          <target state="new">If the health evaluation criteria are not specified when starting an upgrade, Service Fabric uses the application health policies specified in the ApplicationManifest.xml of the application instance that is being upgraded.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="new">Parameter</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ConsiderWarningAsError</source>
          <target state="new">ConsiderWarningAsError</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Default value is False.</source>
          <target state="new">Default value is False.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Treat the warning health events for the application as error when evaluating the health of the application during upgrade.</source>
          <target state="new">Treat the warning health events for the application as error when evaluating the health of the application during upgrade.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>By default, Service Fabric does not evaluate warning health events to be a failure (error), so the upgrade can proceed even if there are warning events.</source>
          <target state="new">By default, Service Fabric does not evaluate warning health events to be a failure (error), so the upgrade can proceed even if there are warning events.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>MaxPercentUnhealthyDeployedApplications</source>
          <target state="new">MaxPercentUnhealthyDeployedApplications</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Default and recommended value is 0.</source>
          <target state="new">Default and recommended value is 0.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specify the maximum number of deployed applications (see the <bpt id="p1">[</bpt>Health section<ept id="p1">](service-fabric-health-introduction.md)</ept>)that can be unhealthy before the application is consider unhealthy and fail the upgrade.</source>
          <target state="new">Specify the maximum number of deployed applications (see the <bpt id="p1">[</bpt>Health section<ept id="p1">](service-fabric-health-introduction.md)</ept>)that can be unhealthy before the application is consider unhealthy and fail the upgrade.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is the health of the application packaged that is on the node, hence this is useful to detect immediate issue during upgrade, and where the application package deployed on the node is unhealthy (crashing and etc).</source>
          <target state="new">This is the health of the application packaged that is on the node, hence this is useful to detect immediate issue during upgrade, and where the application package deployed on the node is unhealthy (crashing and etc).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In a typical case, the replicas of the application will get load balanced to the other node, hence makes the application appear healthy, thus allowing upgrade to proceed.</source>
          <target state="new">In a typical case, the replicas of the application will get load balanced to the other node, hence makes the application appear healthy, thus allowing upgrade to proceed.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>By specifying a strict MaxPercentUnhealthyDeployedApplications health, Service Fabric can detect a problem with the application package fast and result in a fail fast upgrade.</source>
          <target state="new">By specifying a strict MaxPercentUnhealthyDeployedApplications health, Service Fabric can detect a problem with the application package fast and result in a fail fast upgrade.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>MaxPercentUnhealthyServices</source>
          <target state="new">MaxPercentUnhealthyServices</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Default and recommended value is 0.</source>
          <target state="new">Default and recommended value is 0.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Specify the maximum number of services in the application instance can be unhealthy before the application is consider unhealthy and fails the upgrade.</source>
          <target state="new">Specify the maximum number of services in the application instance can be unhealthy before the application is consider unhealthy and fails the upgrade.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>MaxPercentUnhealthyPartitionsPerService</source>
          <target state="new">MaxPercentUnhealthyPartitionsPerService</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Default and recommended value is 0.</source>
          <target state="new">Default and recommended value is 0.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Specify the maximum number of partitions in a service can be unhealthy before the service is considered unhealthy.</source>
          <target state="new">Specify the maximum number of partitions in a service can be unhealthy before the service is considered unhealthy.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>MaxPercentUnhealthyReplicasPerPartition</source>
          <target state="new">MaxPercentUnhealthyReplicasPerPartition</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Default and recommended value is 0.</source>
          <target state="new">Default and recommended value is 0.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specify the maximum number of replicas in partition that be unhealthy before the partition is consider unhealthy.</source>
          <target state="new">Specify the maximum number of replicas in partition that be unhealthy before the partition is consider unhealthy.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>UpgradeReplicaSetCheckTimeout</source>
          <target state="new">UpgradeReplicaSetCheckTimeout</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Stateless service - Within a single upgrade domain, Service Fabric tries to ensure that additional instances of the service are available.</source>
          <target state="new">Stateless service - Within a single upgrade domain, Service Fabric tries to ensure that additional instances of the service are available.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the target instance count is more than one, Service Fabric waits for more than one instance to be available, up to a maximum timeout value (specified by the UpgradeReplicaSetCheckTimeout property).</source>
          <target state="new">If the target instance count is more than one, Service Fabric waits for more than one instance to be available, up to a maximum timeout value (specified by the UpgradeReplicaSetCheckTimeout property).</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the timeout expires, Service Fabric proceeds with the upgrade, regardless of the number of service instances.</source>
          <target state="new">If the timeout expires, Service Fabric proceeds with the upgrade, regardless of the number of service instances.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the target instance count is one, Service Fabric does not wait, and immediately proceeds with the upgrade.</source>
          <target state="new">If the target instance count is one, Service Fabric does not wait, and immediately proceeds with the upgrade.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Stateful service- Within a single upgrade domain, Service Fabric tries to ensure that the replica set has a quorum.</source>
          <target state="new">Stateful service- Within a single upgrade domain, Service Fabric tries to ensure that the replica set has a quorum.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Service Fabric waits for a quorum to be available, up to a maximum timeout value (specified by the UpgradeReplicaSetCheckTimeout property).</source>
          <target state="new">Service Fabric waits for a quorum to be available, up to a maximum timeout value (specified by the UpgradeReplicaSetCheckTimeout property).</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the timeout expires, Service Fabric proceeds with the upgrade, regardless of quorum.</source>
          <target state="new">If the timeout expires, Service Fabric proceeds with the upgrade, regardless of quorum.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This setting is set as never (infinite) when rolling forward (applied when upgrade proceeding as expected), and 900 seconds when rolling back (applied when upgrade ran into errors and is rolling back).</source>
          <target state="new">This setting is set as never (infinite) when rolling forward (applied when upgrade proceeding as expected), and 900 seconds when rolling back (applied when upgrade ran into errors and is rolling back).</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>ForceRestart</source>
          <target state="new">ForceRestart</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you update a configuration or data package, without updating the service code, Service Fabric does not restart the service unless the ForceRestart property is set to true as part of the API call.</source>
          <target state="new">If you update a configuration or data package, without updating the service code, Service Fabric does not restart the service unless the ForceRestart property is set to true as part of the API call.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When the update is complete, Service Fabric notifies the service that a new configuration package or data package is available.</source>
          <target state="new">When the update is complete, Service Fabric notifies the service that a new configuration package or data package is available.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The service is responsible for applying the changes.</source>
          <target state="new">The service is responsible for applying the changes.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If necessary, the service can restart itself.</source>
          <target state="new">If necessary, the service can restart itself.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The MaxPercentUnhealthyServices, MaxPercentUnhealthyPartitionsPerService and MaxPercentUnhealthyReplicasPerPartition criteria can be specified per service type for an application instance.</source>
          <target state="new">The MaxPercentUnhealthyServices, MaxPercentUnhealthyPartitionsPerService and MaxPercentUnhealthyReplicasPerPartition criteria can be specified per service type for an application instance.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This is to ensure that an application that contains different services types can have different evaluation policies for each of the service types.</source>
          <target state="new">This is to ensure that an application that contains different services types can have different evaluation policies for each of the service types.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>As an example, a stateless gateway service type can have a different MaxPercentUnhealthyPartitionsPerService that is different from a stateful engine service type for a particular application instance.</source>
          <target state="new">As an example, a stateless gateway service type can have a different MaxPercentUnhealthyPartitionsPerService that is different from a stateful engine service type for a particular application instance.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Upgrade Tutorial</source>
          <target state="new">Upgrade Tutorial</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Advanced Topics</source>
          <target state="new">Advanced Topics</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Troubleshooting Application Upgrade</source>
          <target state="new">Troubleshooting Application Upgrade</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Data Serialization</source>
          <target state="new">Data Serialization</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25cc9ed7e4e88318a7d1e93b81333fc236bc09a6</xliffext:olfilehash>
  </header>
</xliff>