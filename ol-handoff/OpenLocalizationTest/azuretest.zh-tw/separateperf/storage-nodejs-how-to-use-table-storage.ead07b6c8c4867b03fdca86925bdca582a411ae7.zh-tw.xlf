<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Table storage from Node.js | Microsoft Azure</source>
          <target state="new">How to use Table storage from Node.js | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use the table storage service in Azure.</source>
          <target state="new">Learn how to use the table storage service in Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples are written using the Node.js API.</source>
          <target state="new">Code samples are written using the Node.js API.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use Table storage from Node.js</source>
          <target state="new">How to use Table storage from Node.js</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic shows how to perform common scenarios using the</source>
          <target state="new">This topic shows how to perform common scenarios using the</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure Table service in a Node.js application.</source>
          <target state="new">Azure Table service in a Node.js application.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code examples in this topic assume you already have a Node.js application.</source>
          <target state="new">The code examples in this topic assume you already have a Node.js application.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For instructions on creating a Node.js application in Azure, see any of these topics:</source>
          <target state="new">For instructions on creating a Node.js application in Azure, see any of these topics:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Build and deploy a Node.js website to Azure</source>
          <target state="new">Build and deploy a Node.js website to Azure</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Build and deploy a Node.js website to Azure using WebMatrix<ept id="p1">][Web Site with WebMatrix]</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Build and deploy a Node.js website to Azure using WebMatrix<ept id="p1">][Web Site with WebMatrix]</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Build and deploy a Node.js application to an Azure Cloud Service<ept id="p1">][Node.js Cloud Service]</ept> (using Windows PowerShell)</source>
          <target state="new"><bpt id="p1">[</bpt>Build and deploy a Node.js application to an Azure Cloud Service<ept id="p1">][Node.js Cloud Service]</ept> (using Windows PowerShell)</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Configure your application to access Azure Storage</source>
          <target state="new">Configure your application to access Azure Storage</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that</source>
          <target state="new">To use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>communicate with the storage REST services.</source>
          <target state="new">communicate with the storage REST services.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use Node Package Manager (NPM) to install the package</source>
          <target state="new">Use Node Package Manager (NPM) to install the package</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use a command-line interface such as <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows) <bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac) or <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix), and navigate to the folder where you created your application.</source>
          <target state="new">Use a command-line interface such as <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows) <bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac) or <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix), and navigate to the folder where you created your application.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>npm install azure-storage<ept id="p1">**</ept> in the command window.</source>
          <target state="new">Type <bpt id="p1">**</bpt>npm install azure-storage<ept id="p1">**</ept> in the command window.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Output from the command is similar to the following example.</source>
          <target state="new">Output from the command is similar to the following example.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can manually run the <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> command to verify that a</source>
          <target state="new">You can manually run the <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> command to verify that a</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> folder was created.</source>
          <target state="new"><bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> folder was created.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Inside that folder you will</source>
          <target state="new">Inside that folder you will</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>find the <bpt id="p1">**</bpt>azure-storage<ept id="p1">**</ept> package, which contains the libraries you need to</source>
          <target state="new">find the <bpt id="p1">**</bpt>azure-storage<ept id="p1">**</ept> package, which contains the libraries you need to</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>access storage.</source>
          <target state="new">access storage.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Import the package</source>
          <target state="new">Import the package</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the following code to the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file in your application:</source>
          <target state="new">Add the following code to the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file in your application:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Setup an Azure Storage Connection</source>
          <target state="new">Setup an Azure Storage Connection</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The azure module will read the environment variables AZURE\_STORAGE\_ACCOUNT and AZURE\_STORAGE\_ACCESS\_KEY, or AZURE\_STORAGE\_CONNECTION\_STRING for information required to connect to your Azure storage account.</source>
          <target state="new">The azure module will read the environment variables AZURE\_STORAGE\_ACCOUNT and AZURE\_STORAGE\_ACCESS\_KEY, or AZURE\_STORAGE\_CONNECTION\_STRING for information required to connect to your Azure storage account.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If these environment variables are not set, you must specify the account information when calling <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept>.</source>
          <target state="new">If these environment variables are not set, you must specify the account information when calling <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id="p1">[</bpt><ept id="p1">Node.js Web Application with Storage]</ept></source>
          <target state="new">For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id="p1">[</bpt><ept id="p1">Node.js Web Application with Storage]</ept></target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create a table</source>
          <target state="new">Create a table</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code creates a <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept> object and uses it to</source>
          <target state="new">The following code creates a <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept> object and uses it to</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>create a new table.</source>
          <target state="new">create a new table.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add the following near the top of <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept>.</source>
          <target state="new">Add the following near the top of <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>createTableIfNotExists<ept id="p1">**</ept> will create a new table with the specified name if it does</source>
          <target state="new">The call to <bpt id="p1">**</bpt>createTableIfNotExists<ept id="p1">**</ept> will create a new table with the specified name if it does</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>not already exist.</source>
          <target state="new">not already exist.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example creates a new table named 'mytable' if it does not already exist:</source>
          <target state="new">The following example creates a new table named 'mytable' if it does not already exist:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`result`</ph> will be <ph id="ph2">`true`</ph> if a new table is created, and <ph id="ph3">`false`</ph> if the table already exists.</source>
          <target state="new">The <ph id="ph1">`result`</ph> will be <ph id="ph2">`true`</ph> if a new table is created, and <ph id="ph3">`false`</ph> if the table already exists.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`response`</ph> will contain information about the request.</source>
          <target state="new"><ph id="ph1">`response`</ph> will contain information about the request.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="new">Filters</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Optional filtering operations can be applied to operations performed using <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept>.</source>
          <target state="new">Optional filtering operations can be applied to operations performed using <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</source>
          <target state="new">Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</source>
          <target state="new">After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</source>
          <target state="new">In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>.</source>
          <target state="new">Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following creates a <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept> object that uses the <bpt id="p2">**</bpt>ExponentialRetryPolicyFilter<ept id="p2">**</ept>:</source>
          <target state="new">The following creates a <bpt id="p1">**</bpt>TableService<ept id="p1">**</ept> object that uses the <bpt id="p2">**</bpt>ExponentialRetryPolicyFilter<ept id="p2">**</ept>:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add an entity to a table</source>
          <target state="new">Add an entity to a table</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To add an entity, first create an object that defines your entity</source>
          <target state="new">To add an entity, first create an object that defines your entity</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>properties.</source>
          <target state="new">properties.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All entities must contain a <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>, which are unique identifiers for the entity.</source>
          <target state="new">All entities must contain a <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>, which are unique identifiers for the entity.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> - Determines the partition that the entity is stored in.</source>
          <target state="new"><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> - Determines the partition that the entity is stored in.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> - Uniquely identifies the entity within the partition.</source>
          <target state="new"><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> - Uniquely identifies the entity within the partition.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Both <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> must be string values.</source>
          <target state="new">Both <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> must be string values.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Understanding the Table Service data model<ept id="p1">](http://msdn.microsoft.com/library/azure/dd179338.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Understanding the Table Service data model<ept id="p1">](http://msdn.microsoft.com/library/azure/dd179338.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following is an example of defining an entity.</source>
          <target state="new">The following is an example of defining an entity.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>dueDate<ept id="p1">**</ept> is defined as a type of <bpt id="p2">**</bpt>Edm.DateTime<ept id="p2">**</ept>.</source>
          <target state="new">Note that <bpt id="p1">**</bpt>dueDate<ept id="p1">**</ept> is defined as a type of <bpt id="p2">**</bpt>Edm.DateTime<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Specifying the type is optional, and types will be inferred if not specified.</source>
          <target state="new">Specifying the type is optional, and types will be inferred if not specified.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> There is also a <bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept> field for each record, which is set by Azure when an entity is inserted or updated.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> There is also a <bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept> field for each record, which is set by Azure when an entity is inserted or updated.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">**</bpt>entityGenerator<ept id="p1">**</ept> to create entities.</source>
          <target state="new">You can also use the <bpt id="p1">**</bpt>entityGenerator<ept id="p1">**</ept> to create entities.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example creates the same task entity using the <bpt id="p1">**</bpt>entityGenerator<ept id="p1">**</ept>.</source>
          <target state="new">The following example creates the same task entity using the <bpt id="p1">**</bpt>entityGenerator<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To add an entity to your table, pass the entity object to</source>
          <target state="new">To add an entity to your table, pass the entity object to</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>the <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> method.</source>
          <target state="new">the <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the operation is successful, <ph id="ph1">`result`</ph> will contain the <bpt id="p1">[</bpt>ETag<ept id="p1">](http://en.wikipedia.org/wiki/HTTP_ETag)</ept> of the inserted record and <ph id="ph2">`response`</ph> will contain information about the operation.</source>
          <target state="new">If the operation is successful, <ph id="ph1">`result`</ph> will contain the <bpt id="p1">[</bpt>ETag<ept id="p1">](http://en.wikipedia.org/wiki/HTTP_ETag)</ept> of the inserted record and <ph id="ph2">`response`</ph> will contain information about the operation.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example response:</source>
          <target state="new">Example response:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> By default, <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> does not return the inserted entity as part of the <ph id="ph2">`response`</ph> information.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> By default, <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> does not return the inserted entity as part of the <ph id="ph2">`response`</ph> information.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you plan on performing other operations on this entity, or wish to cache the information, it can be useful to have it returned as part of the <ph id="ph1">`result`</ph>.</source>
          <target state="new">If you plan on performing other operations on this entity, or wish to cache the information, it can be useful to have it returned as part of the <ph id="ph1">`result`</ph>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can do this by enabling <bpt id="p1">**</bpt>echoContent<ept id="p1">**</ept> as follows:</source>
          <target state="new">You can do this by enabling <bpt id="p1">**</bpt>echoContent<ept id="p1">**</ept> as follows:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Update an entity</source>
          <target state="new">Update an entity</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are multiple methods available to update an existing entity:</source>
          <target state="new">There are multiple methods available to update an existing entity:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept> - Updates an existing entity by replacing it.</source>
          <target state="new"><bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept> - Updates an existing entity by replacing it.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>mergeEntity<ept id="p1">**</ept> - Updates an existing entity by merging new property values into the existing entity.</source>
          <target state="new"><bpt id="p1">**</bpt>mergeEntity<ept id="p1">**</ept> - Updates an existing entity by merging new property values into the existing entity.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>insertOrReplaceEntity<ept id="p1">**</ept> - Updates an existing entity by replacing it.</source>
          <target state="new"><bpt id="p1">**</bpt>insertOrReplaceEntity<ept id="p1">**</ept> - Updates an existing entity by replacing it.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If no entity exists, a new one will be inserted.</source>
          <target state="new">If no entity exists, a new one will be inserted.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept> - Updates an existing entity by merging new property values into the existing.</source>
          <target state="new"><bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept> - Updates an existing entity by merging new property values into the existing.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If no entity exists, a new one will be inserted.</source>
          <target state="new">If no entity exists, a new one will be inserted.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example demonstrates updating an entity using <bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept>:</source>
          <target state="new">The following example demonstrates updating an entity using <bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> By default, updating an entity does not check to see if the data being updated has previously been modified by another process.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> By default, updating an entity does not check to see if the data being updated has previously been modified by another process.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To support concurrent updates:</source>
          <target state="new">To support concurrent updates:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Get the ETag of the object being updated.</source>
          <target state="new">Get the ETag of the object being updated.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This is returned as part of the <ph id="ph1">`response`</ph> for any entity related operation and can be retrieved through <ph id="ph2">`response['.metadata'].etag`</ph>.</source>
          <target state="new">This is returned as part of the <ph id="ph1">`response`</ph> for any entity related operation and can be retrieved through <ph id="ph2">`response['.metadata'].etag`</ph>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When performing an update operation on an entity, add the ETag information previously retrieved to the new entity.</source>
          <target state="new">When performing an update operation on an entity, add the ETag information previously retrieved to the new entity.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Perform the update operation.</source>
          <target state="new">Perform the update operation.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the entity has been modified since you retrieved the ETag value, such as another instance of your application, an <ph id="ph1">`error`</ph> will be returned stating that the update condition specified in the request was not satisfied.</source>
          <target state="new">If the entity has been modified since you retrieved the ETag value, such as another instance of your application, an <ph id="ph1">`error`</ph> will be returned stating that the update condition specified in the request was not satisfied.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>With <bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept> and <bpt id="p2">**</bpt>mergeEntity<ept id="p2">**</ept>, if the entity that is being updated doesn't exist then the update operation will fail.</source>
          <target state="new">With <bpt id="p1">**</bpt>updateEntity<ept id="p1">**</ept> and <bpt id="p2">**</bpt>mergeEntity<ept id="p2">**</ept>, if the entity that is being updated doesn't exist then the update operation will fail.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Therefore if you wish to store an entity regardless of whether it already exists, use <bpt id="p1">**</bpt>insertOrReplaceEntity<ept id="p1">**</ept> or <bpt id="p2">**</bpt>insertOrMergeEntity<ept id="p2">**</ept>.</source>
          <target state="new">Therefore if you wish to store an entity regardless of whether it already exists, use <bpt id="p1">**</bpt>insertOrReplaceEntity<ept id="p1">**</ept> or <bpt id="p2">**</bpt>insertOrMergeEntity<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`result`</ph> for successful update operations will contain the <bpt id="p1">**</bpt>Etag<ept id="p1">**</ept> of the updated entity.</source>
          <target state="new">The <ph id="ph1">`result`</ph> for successful update operations will contain the <bpt id="p1">**</bpt>Etag<ept id="p1">**</ept> of the updated entity.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Work with groups of entities</source>
          <target state="new">Work with groups of entities</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sometimes it makes sense to submit multiple operations together in a</source>
          <target state="new">Sometimes it makes sense to submit multiple operations together in a</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>batch to ensure atomic processing by the server.</source>
          <target state="new">batch to ensure atomic processing by the server.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To accomplish that, use the <bpt id="p1">**</bpt>TableBatch<ept id="p1">**</ept> class to create a batch, and then use the <bpt id="p2">**</bpt>executeBatch<ept id="p2">**</ept> method of <bpt id="p3">**</bpt>TableService<ept id="p3">**</ept> to perform the batched operations.</source>
          <target state="new">To accomplish that, use the <bpt id="p1">**</bpt>TableBatch<ept id="p1">**</ept> class to create a batch, and then use the <bpt id="p2">**</bpt>executeBatch<ept id="p2">**</ept> method of <bpt id="p3">**</bpt>TableService<ept id="p3">**</ept> to perform the batched operations.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example demonstrates submitting two entities in a batch:</source>
          <target state="new">The following example demonstrates submitting two entities in a batch:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For successful batch operations, <ph id="ph1">`result`</ph> will contain information for each operation in the batch.</source>
          <target state="new">For successful batch operations, <ph id="ph1">`result`</ph> will contain information for each operation in the batch.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Work with batched operations</source>
          <target state="new">Work with batched operations</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Operations added to a batch can be inspected by viewing the <ph id="ph1">`operations`</ph> property.</source>
          <target state="new">Operations added to a batch can be inspected by viewing the <ph id="ph1">`operations`</ph> property.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can also use the following methods to work with operations.</source>
          <target state="new">You can also use the following methods to work with operations.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>clear<ept id="p1">**</ept> - clears all operations from a batch.</source>
          <target state="new"><bpt id="p1">**</bpt>clear<ept id="p1">**</ept> - clears all operations from a batch.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>getOperations<ept id="p1">**</ept> - gets an operation from the batch.</source>
          <target state="new"><bpt id="p1">**</bpt>getOperations<ept id="p1">**</ept> - gets an operation from the batch.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>hasOperations<ept id="p1">**</ept> - returns true if the batch contains operations.</source>
          <target state="new"><bpt id="p1">**</bpt>hasOperations<ept id="p1">**</ept> - returns true if the batch contains operations.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>removeOperations<ept id="p1">**</ept> - removes an operation.</source>
          <target state="new"><bpt id="p1">**</bpt>removeOperations<ept id="p1">**</ept> - removes an operation.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>size<ept id="p1">**</ept> - returns the number of operations in the batch.</source>
          <target state="new"><bpt id="p1">**</bpt>size<ept id="p1">**</ept> - returns the number of operations in the batch.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Retrieve an entity by key</source>
          <target state="new">Retrieve an entity by key</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To return a specific entity based on the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>, use the <bpt id="p3">**</bpt>retrieveEntity<ept id="p3">**</ept> method.</source>
          <target state="new">To return a specific entity based on the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>, use the <bpt id="p3">**</bpt>retrieveEntity<ept id="p3">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Once this operation completes, <ph id="ph1">`result`</ph> will contain the entity.</source>
          <target state="new">Once this operation completes, <ph id="ph1">`result`</ph> will contain the entity.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Query a set of Entities</source>
          <target state="new">Query a set of Entities</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To query a table, use the <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> object to build up a query</source>
          <target state="new">To query a table, use the <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> object to build up a query</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>expression using the following clauses:</source>
          <target state="new">expression using the following clauses:</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>select<ept id="p1">**</ept> - The fields to be returned from the query.</source>
          <target state="new"><bpt id="p1">**</bpt>select<ept id="p1">**</ept> - The fields to be returned from the query.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>where<ept id="p1">**</ept> - The where clause.</source>
          <target state="new"><bpt id="p1">**</bpt>where<ept id="p1">**</ept> - The where clause.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>and<ept id="p1">**</ept> - An <ph id="ph1">`and`</ph> where condition.</source>
          <target state="new"><bpt id="p1">**</bpt>and<ept id="p1">**</ept> - An <ph id="ph1">`and`</ph> where condition.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>or<ept id="p1">**</ept> - An <ph id="ph1">`or`</ph> where condition.</source>
          <target state="new"><bpt id="p1">**</bpt>or<ept id="p1">**</ept> - An <ph id="ph1">`or`</ph> where condition.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>top<ept id="p1">**</ept> - The number of items to fetch.</source>
          <target state="new"><bpt id="p1">**</bpt>top<ept id="p1">**</ept> - The number of items to fetch.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following example builds a query that will return the top 5 items with a PartitionKey of 'hometasks'.</source>
          <target state="new">The following example builds a query that will return the top 5 items with a PartitionKey of 'hometasks'.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Since <bpt id="p1">**</bpt>select<ept id="p1">**</ept> is not used, all fields will be returned.</source>
          <target state="new">Since <bpt id="p1">**</bpt>select<ept id="p1">**</ept> is not used, all fields will be returned.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>To perform the query against a table, use <bpt id="p1">**</bpt>queryEntities<ept id="p1">**</ept>.</source>
          <target state="new">To perform the query against a table, use <bpt id="p1">**</bpt>queryEntities<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The following example uses this query to return entities from 'mytable'.</source>
          <target state="new">The following example uses this query to return entities from 'mytable'.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If successful, <ph id="ph1">`result.entries`</ph> will contain an array of entities that match the query.</source>
          <target state="new">If successful, <ph id="ph1">`result.entries`</ph> will contain an array of entities that match the query.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the query was unable to return all entities, <ph id="ph1">`result.continuationToken`</ph> will be non-<bpt id="p1">*</bpt>null<ept id="p1">*</ept> and can be used as the third parameter of <bpt id="p2">**</bpt>queryEntities<ept id="p2">**</ept> to retrieve more results.</source>
          <target state="new">If the query was unable to return all entities, <ph id="ph1">`result.continuationToken`</ph> will be non-<bpt id="p1">*</bpt>null<ept id="p1">*</ept> and can be used as the third parameter of <bpt id="p2">**</bpt>queryEntities<ept id="p2">**</ept> to retrieve more results.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For the initial query, use <bpt id="p1">*</bpt>null<ept id="p1">*</ept> for the third parameter.</source>
          <target state="new">For the initial query, use <bpt id="p1">*</bpt>null<ept id="p1">*</ept> for the third parameter.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Query a Subset of Entity Properties</source>
          <target state="new">Query a Subset of Entity Properties</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A query to a table can retrieve just a few fields from an entity.</source>
          <target state="new">A query to a table can retrieve just a few fields from an entity.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This reduces bandwidth and can improve query performance, especially for large entities.</source>
          <target state="new">This reduces bandwidth and can improve query performance, especially for large entities.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>select<ept id="p1">**</ept> clause and pass the names of the fields to be returned.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>select<ept id="p1">**</ept> clause and pass the names of the fields to be returned.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, the following query will only return the <bpt id="p1">**</bpt>description<ept id="p1">**</ept> and <bpt id="p2">**</bpt>dueDate<ept id="p2">**</ept> fields.</source>
          <target state="new">For example, the following query will only return the <bpt id="p1">**</bpt>description<ept id="p1">**</ept> and <bpt id="p2">**</bpt>dueDate<ept id="p2">**</ept> fields.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Delete an Entity</source>
          <target state="new">Delete an Entity</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can delete an entity using its partition and row keys.</source>
          <target state="new">You can delete an entity using its partition and row keys.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In this</source>
          <target state="new">In this</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>example, the <bpt id="p1">**</bpt>task1<ept id="p1">**</ept> object contains the <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> and</source>
          <target state="new">example, the <bpt id="p1">**</bpt>task1<ept id="p1">**</ept> object contains the <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> and</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> values of the entity to be deleted.</source>
          <target state="new"><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> values of the entity to be deleted.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Then the object is</source>
          <target state="new">Then the object is</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>passed to the <bpt id="p1">**</bpt>deleteEntity<ept id="p1">**</ept> method.</source>
          <target state="new">passed to the <bpt id="p1">**</bpt>deleteEntity<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Consider using ETags when deleting items, to ensure that the item hasn't been modified by another process.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Consider using ETags when deleting items, to ensure that the item hasn't been modified by another process.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Update an Entity<ept id="p1">](#update-an-entity)</ept> for information in using ETags.</source>
          <target state="new">See <bpt id="p1">[</bpt>Update an Entity<ept id="p1">](#update-an-entity)</ept> for information in using ETags.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Delete a Table</source>
          <target state="new">Delete a Table</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following code deletes a table from a storage account.</source>
          <target state="new">The following code deletes a table from a storage account.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If you are uncertain whether the table exists, use <bpt id="p1">**</bpt>deleteTableIfExists<ept id="p1">**</ept>.</source>
          <target state="new">If you are uncertain whether the table exists, use <bpt id="p1">**</bpt>deleteTableIfExists<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Use continuation tokens</source>
          <target state="new">Use continuation tokens</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>When you are querying tables for large amounts of results, look for</source>
          <target state="new">When you are querying tables for large amounts of results, look for</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>continuation tokens.</source>
          <target state="new">continuation tokens.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>There may be large amounts of data available for your</source>
          <target state="new">There may be large amounts of data available for your</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>query that you might not realize if you do not build to recognize when a</source>
          <target state="new">query that you might not realize if you do not build to recognize when a</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>continuation token is present.</source>
          <target state="new">continuation token is present.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The results object returned when querying entities sets a <ph id="ph1">`continuationToken`</ph></source>
          <target state="new">The results object returned when querying entities sets a <ph id="ph1">`continuationToken`</ph></target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>property when such a token is present.</source>
          <target state="new">property when such a token is present.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You can then use this when performing</source>
          <target state="new">You can then use this when performing</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>a query to continue to move across the partition and table entities.</source>
          <target state="new">a query to continue to move across the partition and table entities.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>When querying, a continuationToken parameter may be provided between the</source>
          <target state="new">When querying, a continuationToken parameter may be provided between the</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>query object instance and the callback function:</source>
          <target state="new">query object instance and the callback function:</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If you inspect the <ph id="ph1">`continuationToken`</ph> object, you will find properties such as</source>
          <target state="new">If you inspect the <ph id="ph1">`continuationToken`</ph> object, you will find properties such as</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`nextPartitionKey`</ph>, <ph id="ph2">`nextRowKey`</ph> and <ph id="ph3">`targetLocation`</ph> which can be used to</source>
          <target state="new"><ph id="ph1">`nextPartitionKey`</ph>, <ph id="ph2">`nextRowKey`</ph> and <ph id="ph3">`targetLocation`</ph> which can be used to</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>iterate through all the results.</source>
          <target state="new">iterate through all the results.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>There is also a continuation sample within the Azure Storage Node.js repo on</source>
          <target state="new">There is also a continuation sample within the Azure Storage Node.js repo on</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>GitHub, look for <ph id="ph1">`examples/samples/continuationsample.js`</ph>.</source>
          <target state="new">GitHub, look for <ph id="ph1">`examples/samples/continuationsample.js`</ph>.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Work with Shared Access Signatures</source>
          <target state="new">Work with Shared Access Signatures</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Shared Access Signatures (SAS) are a secure way to provide granular access to tables without providing your storage account name or keys.</source>
          <target state="new">Shared Access Signatures (SAS) are a secure way to provide granular access to tables without providing your storage account name or keys.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>SAS are often used to provide limited access to your data, such as allowing a mobile app to query records.</source>
          <target state="new">SAS are often used to provide limited access to your data, such as allowing a mobile app to query records.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A trusted application such as a cloud-based service generates a SAS using the <bpt id="p1">**</bpt>generateSharedAccessSignature<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>TableService<ept id="p2">**</ept>, and provides it to an untrusted or semi-trusted application.</source>
          <target state="new">A trusted application such as a cloud-based service generates a SAS using the <bpt id="p1">**</bpt>generateSharedAccessSignature<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>TableService<ept id="p2">**</ept>, and provides it to an untrusted or semi-trusted application.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For example, a mobile app.</source>
          <target state="new">For example, a mobile app.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.</source>
          <target state="new">The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following example generates a new shared access policy that will allow the SAS holder to query ('r') the table, and expires 100 minutes after the time it is created.</source>
          <target state="new">The following example generates a new shared access policy that will allow the SAS holder to query ('r') the table, and expires 100 minutes after the time it is created.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Note that the host information must be provided also, as it is required when the SAS holder attempts to access the table.</source>
          <target state="new">Note that the host information must be provided also, as it is required when the SAS holder attempts to access the table.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The client application then uses the SAS with <bpt id="p1">**</bpt>TableServiceWithSAS<ept id="p1">**</ept> to perform operations against the table.</source>
          <target state="new">The client application then uses the SAS with <bpt id="p1">**</bpt>TableServiceWithSAS<ept id="p1">**</ept> to perform operations against the table.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following example connects to the table and performs a query.</source>
          <target state="new">The following example connects to the table and performs a query.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Since the SAS was generated with only query access, if an attempt were made to insert, update, or delete entities, an error would be returned.</source>
          <target state="new">Since the SAS was generated with only query access, if an attempt were made to insert, update, or delete entities, an error would be returned.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Access control lists</source>
          <target state="new">Access control lists</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You can also use an Access Control List (ACL) to set the access policy for a SAS.</source>
          <target state="new">You can also use an Access Control List (ACL) to set the access policy for a SAS.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This is useful if you wish to allow multiple clients to access the table, but provide different access policies for each client.</source>
          <target state="new">This is useful if you wish to allow multiple clients to access the table, but provide different access policies for each client.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>An ACL is implemented using an array of access policies, with an ID associated with each policy.</source>
          <target state="new">An ACL is implemented using an array of access policies, with an ID associated with each policy.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The  following example defines two policies; one for 'user1' and one for 'user2':</source>
          <target state="new">The  following example defines two policies; one for 'user1' and one for 'user2':</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The following example gets the current ACL for the <bpt id="p1">**</bpt>hometasks<ept id="p1">**</ept> table, then adds the new policies using <bpt id="p2">**</bpt>setTableAcl<ept id="p2">**</ept>.</source>
          <target state="new">The following example gets the current ACL for the <bpt id="p1">**</bpt>hometasks<ept id="p1">**</ept> table, then adds the new policies using <bpt id="p2">**</bpt>setTableAcl<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This approach allows:</source>
          <target state="new">This approach allows:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Once the ACL has been set, you can then create a SAS based on the ID for a policy.</source>
          <target state="new">Once the ACL has been set, you can then create a SAS based on the ID for a policy.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The following example creates a new SAS for 'user2':</source>
          <target state="new">The following example creates a new SAS for 'user2':</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of table storage, follow these links</source>
          <target state="new">Now that you've learned the basics of table storage, follow these links</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>to learn how to do more complex storage tasks.</source>
          <target state="new">to learn how to do more complex storage tasks.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Storing and Accessing Data in Azure<ept id="p1">][]</ept>.</source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Storing and Accessing Data in Azure<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visit the Azure Storage Team Blog<ept id="p1">][]</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Visit the Azure Storage Team Blog<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure Storage SDK for Node<ept id="p1">][]</ept> repository on GitHub.</source>
          <target state="new">Visit the <bpt id="p1">[</bpt>Azure Storage SDK for Node<ept id="p1">][]</ept> repository on GitHub.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">817358111a5295e49d004f657cd26c5e4367b61c</xliffext:olfilehash>
  </header>
</xliff>