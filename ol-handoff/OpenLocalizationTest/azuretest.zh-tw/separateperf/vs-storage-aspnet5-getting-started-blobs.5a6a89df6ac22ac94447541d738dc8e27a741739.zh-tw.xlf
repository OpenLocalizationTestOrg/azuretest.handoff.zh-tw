<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with Azure Blob storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure Blob storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to get started using Azure Blob storage in a Visual Studio ASP.NET 5 project</source>
          <target state="new">How to get started using Azure Blob storage in a Visual Studio ASP.NET 5 project</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting started with Azure Blob storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure Blob storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new">Getting started</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What happened</source>
          <target state="new">What happened</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blobs</source>
          <target state="new">Blobs</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="new">Tables</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes how get started using Azure Blob storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio Add Connected Services dialog.</source>
          <target state="new">This article describes how get started using Azure Blob storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio Add Connected Services dialog.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS.</source>
          <target state="new">Azure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A single blob can be any size.</source>
          <target state="new">A single blob can be any size.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Blobs can be things like images, audio and video files, raw data, and document files.</source>
          <target state="new">Blobs can be things like images, audio and video files, raw data, and document files.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This article describes how to get started with blob storage after you create an Azure storage account by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog in an ASP.NET 5 project.</source>
          <target state="new">This article describes how to get started with blob storage after you create an Azure storage account by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog in an ASP.NET 5 project.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Just as files live in folders, storage blobs live in containers.</source>
          <target state="new">Just as files live in folders, storage blobs live in containers.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After you have created a storage, you create one or more containers in the storage.</source>
          <target state="new">After you have created a storage, you create one or more containers in the storage.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, in a storage called “Scrapbook,” you can create containers in the storage called “images” to store pictures and another called “audio” to store audio files.</source>
          <target state="new">For example, in a storage called “Scrapbook,” you can create containers in the storage called “images” to store pictures and another called “audio” to store audio files.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After you create the containers, you can upload individual blob files to them.</source>
          <target state="new">After you create the containers, you can upload individual blob files to them.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">]</ept><bpt id="p2">(storage-dotnet-how-to-use-blobs.md "</bpt>How to use blob storage from .NET<ept id="p2">")</ept> for more information on programmatically manipulating blobs.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">]</ept><bpt id="p2">(storage-dotnet-how-to-use-blobs.md "</bpt>How to use blob storage from .NET<ept id="p2">")</ept> for more information on programmatically manipulating blobs.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Access blob containers in code</source>
          <target state="new">Access blob containers in code</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To programmatically access blobs in ASP.NET 5 projects, you need to add the following items, if they're not already present.</source>
          <target state="new">To programmatically access blobs in ASP.NET 5 projects, you need to add the following items, if they're not already present.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add the following code namespace declarations to the top of any C# file in which you want to programmatically access Azure storage.</source>
          <target state="new">Add the following code namespace declarations to the top of any C# file in which you want to programmatically access Azure storage.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">`CloudStorageAccount`</ph>object that represents your storage account information.</source>
          <target state="new">Get a <ph id="ph1">`CloudStorageAccount`</ph>object that represents your storage account information.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</source>
          <target state="new">Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Use all of the above code in front of the code in the following sections.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Use all of the above code in front of the code in the following sections.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`CloudBlobClient`</ph> object to get a <ph id="ph2">`CloudBlobContainer`</ph> reference to an existing container in your storage account.</source>
          <target state="new">Use a <ph id="ph1">`CloudBlobClient`</ph> object to get a <ph id="ph2">`CloudBlobContainer`</ph> reference to an existing container in your storage account.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a container in code</source>
          <target state="new">Create a container in code</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`CloudBlobClient`</ph> to create a container in your storage account.</source>
          <target state="new">You can also use the <ph id="ph1">`CloudBlobClient`</ph> to create a container in your storage account.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>All you need to do is to add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph> as in the following code:</source>
          <target state="new">All you need to do is to add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph> as in the following code:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> The APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> The APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code below assumes async programming methods are being used.</source>
          <target state="new">The code below assumes async programming methods are being used.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To make the files within the container available to everyone, you can set the container to be public by using the following code.</source>
          <target state="new">To make the files within the container available to everyone, you can set the container to be public by using the following code.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Upload a blob into a container</source>
          <target state="new">Upload a blob into a container</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To upload a blob file into a container, get a container reference and use it to get a blob reference.</source>
          <target state="new">To upload a blob file into a container, get a container reference and use it to get a blob reference.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After you have a blob reference, you can upload any stream of data to it by calling the <ph id="ph1">`UploadFromStreamAsync`</ph> method.</source>
          <target state="new">After you have a blob reference, you can upload any stream of data to it by calling the <ph id="ph1">`UploadFromStreamAsync`</ph> method.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This operation creates the blob if it’s not already there, or overwrites it if it does exist.</source>
          <target state="new">This operation creates the blob if it’s not already there, or overwrites it if it does exist.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example shows how to upload a blob into a container and assumes that the container was already created.</source>
          <target state="new">The following example shows how to upload a blob into a container and assumes that the container was already created.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>List the blobs in a container</source>
          <target state="new">List the blobs in a container</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To list the blobs in a container, first get a container reference.</source>
          <target state="new">To list the blobs in a container, first get a container reference.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can then call the container's <ph id="ph1">`ListBlobsSegmentedAsync`</ph> method to retrieve the blobs and/or directories within it.</source>
          <target state="new">You can then call the container's <ph id="ph1">`ListBlobsSegmentedAsync`</ph> method to retrieve the blobs and/or directories within it.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To access the rich set of properties and methods for a returned <ph id="ph1">`IListBlobItem`</ph>, you must cast it to a <ph id="ph2">`CloudBlockBlob`</ph>, <ph id="ph3">`CloudPageBlob`</ph>, or <ph id="ph4">`CloudBlobDirectory`</ph> object.</source>
          <target state="new">To access the rich set of properties and methods for a returned <ph id="ph1">`IListBlobItem`</ph>, you must cast it to a <ph id="ph2">`CloudBlockBlob`</ph>, <ph id="ph3">`CloudPageBlob`</ph>, or <ph id="ph4">`CloudBlobDirectory`</ph> object.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you don’t know the blob type, you can use a type check to determine which to cast it to.</source>
          <target state="new">If you don’t know the blob type, you can use a type check to determine which to cast it to.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to retrieve and output the URI of each item in a container.</source>
          <target state="new">The following code demonstrates how to retrieve and output the URI of each item in a container.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are others ways to list the contents of a blob container.</source>
          <target state="new">There are others ways to list the contents of a blob container.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">](storage-dotnet-how-to-use-blobs.md#list-the-blobs-in-a-container)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">](storage-dotnet-how-to-use-blobs.md#list-the-blobs-in-a-container)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Download a blob</source>
          <target state="new">Download a blob</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>TTo download a blob, first get a reference to the blob, and then call the <ph id="ph1">`DownloadToStreamAsync`</ph> method.</source>
          <target state="new">TTo download a blob, first get a reference to the blob, and then call the <ph id="ph1">`DownloadToStreamAsync`</ph> method.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`DownloadToStreamAsync`</ph> method to transfer the blob contents to a stream object that you can then save as a local file.</source>
          <target state="new">The following example uses the <ph id="ph1">`DownloadToStreamAsync`</ph> method to transfer the blob contents to a stream object that you can then save as a local file.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are other ways to save blobs as files.</source>
          <target state="new">There are other ways to save blobs as files.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">](storage-dotnet-how-to-use-blobs.md/#download-blobs)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use blob storage from .NET<ept id="p1">](storage-dotnet-how-to-use-blobs.md/#download-blobs)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Delete a blob</source>
          <target state="new">Delete a blob</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To delete a blob, first get a reference to the blob, and then call the <ph id="ph1">`DeleteAsync`</ph> method on it.</source>
          <target state="new">To delete a blob, first get a reference to the blob, and then call the <ph id="ph1">`DeleteAsync`</ph> method on it.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b732a28305a40068245a084915393d36f97a0ca6</xliffext:olfilehash>
  </header>
</xliff>