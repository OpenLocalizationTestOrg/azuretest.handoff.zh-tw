<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the HTTP Listener and Connector in Logic Apps | Microsoft Azure App Service</source>
          <target state="new">Using the HTTP Listener and Connector in Logic Apps | Microsoft Azure App Service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to create and configure the HTTP listener and HTTP action Connector or API app and use it in a logic app in Azure App Service</source>
          <target state="new">How to create and configure the HTTP listener and HTTP action Connector or API app and use it in a logic app in Azure App Service</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get started with the HTTP listener and HTTP action and add it to your Logic App</source>
          <target state="new">Get started with the HTTP listener and HTTP action and add it to your Logic App</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Connect directly to HTTP resources to listen for HTTP requests and configure HTTP web requests.</source>
          <target state="new">Connect directly to HTTP resources to listen for HTTP requests and configure HTTP web requests.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are some scenarios where you may need to work with direct HTTP connections, including:</source>
          <target state="new">There are some scenarios where you may need to work with direct HTTP connections, including:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To develop a logic App that supports a web or mobile user interactive front end.</source>
          <target state="new">To develop a logic App that supports a web or mobile user interactive front end.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To get and process data from a web service that doesn’t have an out of box connector.</source>
          <target state="new">To get and process data from a web service that doesn’t have an out of box connector.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To perform actions that are already exposed as a web service, but not available as an API app.</source>
          <target state="new">To perform actions that are already exposed as a web service, but not available as an API app.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For these scenarios, there are two options:</source>
          <target state="new">For these scenarios, there are two options:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP listener<ept id="p1">**</ept>: This connector acts as a trigger and listens for HTTP requests on a configured endpoint.</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP listener<ept id="p1">**</ept>: This connector acts as a trigger and listens for HTTP requests on a configured endpoint.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a call is received on the configured endpoint, it triggers a new instance of the flow and passes the data received in the request to the flow for processing.</source>
          <target state="new">When a call is received on the configured endpoint, it triggers a new instance of the flow and passes the data received in the request to the flow for processing.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It can also be configured to automatically respond to the incoming request when the flow has started, or let you construct a response based on the flow execution and send a response to the caller.</source>
          <target state="new">It can also be configured to automatically respond to the incoming request when the flow has started, or let you construct a response based on the flow execution and send a response to the caller.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP action<ept id="p1">**</ept>: This lets you configure a web request to any endpoint available on the internet, gets back a response, and makes it available for additional actions in the flow to consume.</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP action<ept id="p1">**</ept>: This lets you configure a web request to any endpoint available on the internet, gets back a response, and makes it available for additional actions in the flow to consume.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Logic apps can trigger based on a variety of data sources and offer connectors to get and process data as a part of the flow.</source>
          <target state="new">Logic apps can trigger based on a variety of data sources and offer connectors to get and process data as a part of the flow.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can add the HTTP connector to your business workflow and process data as part of this workflow within a Logic App.</source>
          <target state="new">You can add the HTTP connector to your business workflow and process data as part of this workflow within a Logic App.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating an HTTP listener for your Logic App</source>
          <target state="new">Creating an HTTP listener for your Logic App</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A connector can be created within a logic app or be created directly from the Azure Marketplace.</source>
          <target state="new">A connector can be created within a logic app or be created directly from the Azure Marketplace.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create a connector from the Marketplace:</source>
          <target state="new">To create a connector from the Marketplace:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the Azure startboard, select <bpt id="p1">**</bpt>Marketplace<ept id="p1">**</ept>.</source>
          <target state="new">In the Azure startboard, select <bpt id="p1">**</bpt>Marketplace<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Search for “HTTP”, select HTTP Listener, and select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
          <target state="new">Search for “HTTP”, select HTTP Listener, and select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Configure the HTTP listener as follows:</source>
          <target state="new">Configure the HTTP listener as follows:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>![][1]</source>
          <target state="new">![][1]</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When setting up the package settings, you’ll see the following option on whether the listener should respond automatically or require you to send an explicit response.</source>
          <target state="new">When setting up the package settings, you’ll see the following option on whether the listener should respond automatically or require you to send an explicit response.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Set this to <bpt id="p1">**</bpt>False<ept id="p1">**</ept> to send your own response:</source>
          <target state="new">Set this to <bpt id="p1">**</bpt>False<ept id="p1">**</ept> to send your own response:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>![][2]</source>
          <target state="new">![][2]</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to create.</source>
          <target state="new">Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to create.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once the API app instance is created, open the settings to configure the security.</source>
          <target state="new">Once the API app instance is created, open the settings to configure the security.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The HTTP listener currently supports Basic Authentication.</source>
          <target state="new">The HTTP listener currently supports Basic Authentication.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can configure this using the Security option when you open the HTTP listener:</source>
          <target state="new">You can configure this using the Security option when you open the HTTP listener:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>![][3]</source>
          <target state="new">![][3]</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Security settings show "None" as the default value, however it is undefined.</source>
          <target state="new">The Security settings show "None" as the default value, however it is undefined.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must change the setting to Basic and back to None before saving it to ensure that the HTTP Listener is configured correctly.</source>
          <target state="new">You must change the setting to Basic and back to None before saving it to ensure that the HTTP Listener is configured correctly.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Lastly, set the security settings of the API App to Public (Anonymous) to allow external clients to access the end point.</source>
          <target state="new">Lastly, set the security settings of the API App to Public (Anonymous) to allow external clients to access the end point.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This setting is available under "All settings &gt; Application Settings" of the HTTP Listener API App:</source>
          <target state="new">This setting is available under "All settings &gt; Application Settings" of the HTTP Listener API App:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>![][10]</source>
          <target state="new">![][10]</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Once that’s done, you can now create a logic app to use the HTTP listener.</source>
          <target state="new">Once that’s done, you can now create a logic app to use the HTTP listener.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Using the HTTP listener in your Logic App</source>
          <target state="new">Using the HTTP listener in your Logic App</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Once your API app is created, you can now use the HTTP listener as a trigger for your Logic App.</source>
          <target state="new">Once your API app is created, you can now use the HTTP listener as a trigger for your Logic App.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To do this, you need to:</source>
          <target state="new">To do this, you need to:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create a new Logic App.</source>
          <target state="new">Create a new Logic App.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Open “Triggers and Actions” to open the Logic Apps Designer and configure your flow.</source>
          <target state="new">Open “Triggers and Actions” to open the Logic Apps Designer and configure your flow.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The HTTP Listener is listed in the gallery.</source>
          <target state="new">The HTTP Listener is listed in the gallery.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Select it.</source>
          <target state="new">Select it.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can now set the HTTP Method and the relative URL on which you require the listener to trigger the flow:</source>
          <target state="new">You can now set the HTTP Method and the relative URL on which you require the listener to trigger the flow:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>![][4]</source>
          <target state="new">![][4]</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>![][5]</source>
          <target state="new">![][5]</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To get the complete URI, double click the HTTP Listener to view its configuration settings and copy the URL for the "Host" of your API app:</source>
          <target state="new">To get the complete URI, double click the HTTP Listener to view its configuration settings and copy the URL for the "Host" of your API app:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>![][6]</source>
          <target state="new">![][6]</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can now use the data received in the HTTP Request in other actions in the flow as follows:</source>
          <target state="new">You can now use the data received in the HTTP Request in other actions in the flow as follows:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>![][7]</source>
          <target state="new">![][7]</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>![][8]</source>
          <target state="new">![][8]</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Lastly, to send a response, add another HTTP Listener and select the Send HTTP Response action.</source>
          <target state="new">Lastly, to send a response, add another HTTP Listener and select the Send HTTP Response action.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Set the Request ID to the RequestID obtained from the HTTP Listener, and populate the response body and HTTP status you want to return back:</source>
          <target state="new">Set the Request ID to the RequestID obtained from the HTTP Listener, and populate the response body and HTTP status you want to return back:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>![][9]</source>
          <target state="new">![][9]</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using the HTTP action</source>
          <target state="new">Using the HTTP action</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The HTTP action is natively supported by Logic Apps and doesn't require an API app to be created first to be able to use it.</source>
          <target state="new">The HTTP action is natively supported by Logic Apps and doesn't require an API app to be created first to be able to use it.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can insert an HTTP action at any point in your Logic App and choose the URI, headers and body for the call.</source>
          <target state="new">You can insert an HTTP action at any point in your Logic App and choose the URI, headers and body for the call.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The HTTP action supports multiple options for client side security.</source>
          <target state="new">The HTTP action supports multiple options for client side security.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To use these, please review the article <bpt id="p1">[</bpt>here<ept id="p1">](http://aka.ms/logicapphttpauth)</ept>.</source>
          <target state="new">To use these, please review the article <bpt id="p1">[</bpt>here<ept id="p1">](http://aka.ms/logicapphttpauth)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The output of the HTTP action is headers and body, which can be used further downstream in the flow similar to how output of other actions and connectors is consumed.</source>
          <target state="new">The output of the HTTP action is headers and body, which can be used further downstream in the flow similar to how output of other actions and connectors is consumed.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Do more with your Connector</source>
          <target state="new">Do more with your Connector</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Now that the connector is created, you can add it to a business workflow using a Logic App.</source>
          <target state="new">Now that the connector is created, you can add it to a business workflow using a Logic App.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>What are Logic Apps?<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>What are Logic Apps?<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>View the Swagger REST API reference at <bpt id="p1">[</bpt>Connectors and API Apps Reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=529766)</ept>.</source>
          <target state="new">View the Swagger REST API reference at <bpt id="p1">[</bpt>Connectors and API Apps Reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=529766)</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also review performance statistics and control security to the connector.</source>
          <target state="new">You can also review performance statistics and control security to the connector.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Manage and Monitor your built-in API Apps and Connectors<ept id="p1">](app-service-logic-monitor-your-connectors.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Manage and Monitor your built-in API Apps and Connectors<ept id="p1">](app-service-logic-monitor-your-connectors.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d89e0ca086a339dc58e9af8e5693110563002e7</xliffext:olfilehash>
  </header>
</xliff>