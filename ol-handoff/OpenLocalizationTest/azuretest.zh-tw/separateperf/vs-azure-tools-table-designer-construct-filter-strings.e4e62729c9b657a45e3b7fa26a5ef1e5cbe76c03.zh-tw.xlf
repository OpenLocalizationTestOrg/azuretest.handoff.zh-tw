<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Constructing filter strings for the table designer</source>
          <target state="new">Constructing filter strings for the table designer</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Constructing filter strings for the table designer</source>
          <target state="new">Constructing filter strings for the table designer</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Constructing Filter Strings for the Table Designer</source>
          <target state="new">Constructing Filter Strings for the Table Designer</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To filter data in an Azure table that is displayed in the Visual Studio <bpt id="p1">**</bpt>Table Designer<ept id="p1">**</ept>, you construct a filter string and enter it into the filter field.</source>
          <target state="new">To filter data in an Azure table that is displayed in the Visual Studio <bpt id="p1">**</bpt>Table Designer<ept id="p1">**</ept>, you construct a filter string and enter it into the filter field.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The filter string syntax is defined by the WCF Data Services and is similar to a SQL WHERE clause, but is sent to the Table service via an HTTP request.</source>
          <target state="new">The filter string syntax is defined by the WCF Data Services and is similar to a SQL WHERE clause, but is sent to the Table service via an HTTP request.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Table Designer<ept id="p1">**</ept> handles the proper encoding for you, so to filter on a desired property value, you need only enter the property name, comparison operator, criteria value, and optionally, Boolean operator in the filter field.</source>
          <target state="new">The <bpt id="p1">**</bpt>Table Designer<ept id="p1">**</ept> handles the proper encoding for you, so to filter on a desired property value, you need only enter the property name, comparison operator, criteria value, and optionally, Boolean operator in the filter field.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You do not need to include the $filter query option as you would if you were constructing a URL to query the table via the <bpt id="p1">[</bpt>Storage Services REST API Reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400447)</ept>.</source>
          <target state="new">You do not need to include the $filter query option as you would if you were constructing a URL to query the table via the <bpt id="p1">[</bpt>Storage Services REST API Reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400447)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The WCF Data Services are based on the <bpt id="p1">[</bpt>Open Data Protocol<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=214805)</ept> (OData).</source>
          <target state="new">The WCF Data Services are based on the <bpt id="p1">[</bpt>Open Data Protocol<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=214805)</ept> (OData).</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For details on the filter system query option (<bpt id="p1">**</bpt>$filter<ept id="p1">**</ept>), see the <bpt id="p2">[</bpt>OData URI Conventions specification<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=214806)</ept>.</source>
          <target state="new">For details on the filter system query option (<bpt id="p1">**</bpt>$filter<ept id="p1">**</ept>), see the <bpt id="p2">[</bpt>OData URI Conventions specification<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=214806)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="new">Comparison Operators</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following logical operators are supported for all property types:</source>
          <target state="new">The following logical operators are supported for all property types:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Logical operator</source>
          <target state="new">Logical operator</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example filter string</source>
          <target state="new">Example filter string</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>eq</source>
          <target state="new">eq</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Equal</source>
          <target state="new">Equal</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>City eq 'Redmond'</source>
          <target state="new">City eq 'Redmond'</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>gt</source>
          <target state="new">gt</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Greater than</source>
          <target state="new">Greater than</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Price gt 20</source>
          <target state="new">Price gt 20</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ge</source>
          <target state="new">ge</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Greater than or equal to</source>
          <target state="new">Greater than or equal to</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Price ge 10</source>
          <target state="new">Price ge 10</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>lt</source>
          <target state="new">lt</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Less than</source>
          <target state="new">Less than</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Price lt 20</source>
          <target state="new">Price lt 20</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>le</source>
          <target state="new">le</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Less than or equal</source>
          <target state="new">Less than or equal</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Price le 100</source>
          <target state="new">Price le 100</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ne</source>
          <target state="new">ne</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Not equal</source>
          <target state="new">Not equal</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>City ne 'London'</source>
          <target state="new">City ne 'London'</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="new">and</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="new">And</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Price le 200 and Price gt 3.5</source>
          <target state="new">Price le 200 and Price gt 3.5</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="new">or</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Or</source>
          <target state="new">Or</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Price le 3.5 or Price gt 200</source>
          <target state="new">Price le 3.5 or Price gt 200</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="new">not</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Not</source>
          <target state="new">Not</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>not isAvailable</source>
          <target state="new">not isAvailable</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When constructing a filter string, the following rules are important:</source>
          <target state="new">When constructing a filter string, the following rules are important:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Use the logical operators to compare a property to a value.</source>
          <target state="new">Use the logical operators to compare a property to a value.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that it is not possible to compare a property to a dynamic value; one side of the expression must be a constant.</source>
          <target state="new">Note that it is not possible to compare a property to a dynamic value; one side of the expression must be a constant.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All parts of the filter string are case-sensitive.</source>
          <target state="new">All parts of the filter string are case-sensitive.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The constant value must be of the same data type as the property in order for the filter to return valid results.</source>
          <target state="new">The constant value must be of the same data type as the property in order for the filter to return valid results.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about supported property types, see <bpt id="p1">[</bpt>Understanding the Table Service Data Model<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400448)</ept>.</source>
          <target state="new">For more information about supported property types, see <bpt id="p1">[</bpt>Understanding the Table Service Data Model<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400448)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Filtering on String Properties</source>
          <target state="new">Filtering on String Properties</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you filter on string properties, enclose the string constant in single quotation marks.</source>
          <target state="new">When you filter on string properties, enclose the string constant in single quotation marks.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example filters on the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> properties; additional non-key properties could also be added to the filter string:</source>
          <target state="new">The following example filters on the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> and <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> properties; additional non-key properties could also be added to the filter string:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can enclose each filter expression in parentheses, although it is not required:</source>
          <target state="new">You can enclose each filter expression in parentheses, although it is not required:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that the Table service does not support wildcard queries, and they are not supported in the Table Designer either.</source>
          <target state="new">Note that the Table service does not support wildcard queries, and they are not supported in the Table Designer either.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, you can perform prefix matching by using comparison operators on the desired prefix.</source>
          <target state="new">However, you can perform prefix matching by using comparison operators on the desired prefix.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example returns entities with a LastName property beginning with the letter 'A':</source>
          <target state="new">The following example returns entities with a LastName property beginning with the letter 'A':</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Filtering on Numeric Properties</source>
          <target state="new">Filtering on Numeric Properties</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To filter on an integer or floating-point number, specify the number without quotation marks.</source>
          <target state="new">To filter on an integer or floating-point number, specify the number without quotation marks.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This example returns all entities with an Age property whose value is greater than 30:</source>
          <target state="new">This example returns all entities with an Age property whose value is greater than 30:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example returns all entities with an AmountDue property whose value is less than or equal to 100.25:</source>
          <target state="new">This example returns all entities with an AmountDue property whose value is less than or equal to 100.25:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Filtering on Boolean Properties</source>
          <target state="new">Filtering on Boolean Properties</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To filter on a Boolean value, specify <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept> without quotation marks.</source>
          <target state="new">To filter on a Boolean value, specify <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept> without quotation marks.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example returns all entities where the IsActive property is set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>:</source>
          <target state="new">The following example returns all entities where the IsActive property is set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can also write this filter expression without the logical operator.</source>
          <target state="new">You can also write this filter expression without the logical operator.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the following example, the Table service will also return all entities where IsActive is <bpt id="p1">**</bpt>true<ept id="p1">**</ept>:</source>
          <target state="new">In the following example, the Table service will also return all entities where IsActive is <bpt id="p1">**</bpt>true<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[Copy](javascript:if (window.epx.codeSnippet)window.epx.codeSnippet.copyCode('CodeSnippetContainerCode_3d6a191e-f389-447a-bbbb-ef8b163bc645');)</source>
          <target state="new">[Copy](javascript:if (window.epx.codeSnippet)window.epx.codeSnippet.copyCode('CodeSnippetContainerCode_3d6a191e-f389-447a-bbbb-ef8b163bc645');)</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To return all entities where IsActive is false, you can use the not operator:</source>
          <target state="new">To return all entities where IsActive is false, you can use the not operator:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Filtering on DateTime Properties</source>
          <target state="new">Filtering on DateTime Properties</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To filter on a DateTime value, specify the <bpt id="p1">**</bpt>datetime<ept id="p1">**</ept> keyword, followed by the date/time constant in single quotation marks.</source>
          <target state="new">To filter on a DateTime value, specify the <bpt id="p1">**</bpt>datetime<ept id="p1">**</ept> keyword, followed by the date/time constant in single quotation marks.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The date/time constant must be in combined UTC format, as described in <bpt id="p1">[</bpt>Formatting DateTime Property Values<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400449)</ept>.</source>
          <target state="new">The date/time constant must be in combined UTC format, as described in <bpt id="p1">[</bpt>Formatting DateTime Property Values<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=400449)</ept>.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example returns entities where the CustomerSince property is equal to July 10, 2008:</source>
          <target state="new">The following example returns entities where the CustomerSince property is equal to July 10, 2008:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d200af7f67edb24936db5081921155b2343ed695</xliffext:olfilehash>
  </header>
</xliff>