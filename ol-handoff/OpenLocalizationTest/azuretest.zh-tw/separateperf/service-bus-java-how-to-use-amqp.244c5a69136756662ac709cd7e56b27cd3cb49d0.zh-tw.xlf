<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use AMQP 1.0 with the Java Service Bus API | Microsoft Azure</source>
          <target state="new">How to use AMQP 1.0 with the Java Service Bus API | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use the Java Message Service (JMS) with Azure Service Bus and Advanced Message Queuing Protodol (AMQP) 1.0.</source>
          <target state="new">Learn how to use the Java Message Service (JMS) with Azure Service Bus and Advanced Message Queuing Protodol (AMQP) 1.0.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use the Java Message Service (JMS) API with Service Bus and AMQP 1.0</source>
          <target state="new">How to use the Java Message Service (JMS) API with Service Bus and AMQP 1.0</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that can be used to build robust, cross-platform, messaging applications.</source>
          <target state="new">The Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that can be used to build robust, cross-platform, messaging applications.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>AMQP 1.0 support was added to Azure Service Bus in October 2012 and transitioned to General Availability (GA) in May 2013.</source>
          <target state="new">AMQP 1.0 support was added to Azure Service Bus in October 2012 and transitioned to General Availability (GA) in May 2013.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The addition of AMQP 1.0 means that it’s now possible to leverage the queuing and publish/subscribe brokered messaging features of Service Bus from a range of platforms using an efficient binary protocol.</source>
          <target state="new">The addition of AMQP 1.0 means that it’s now possible to leverage the queuing and publish/subscribe brokered messaging features of Service Bus from a range of platforms using an efficient binary protocol.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Furthermore, you can build applications comprised of components built using a mix of languages, frameworks and operating systems.</source>
          <target state="new">Furthermore, you can build applications comprised of components built using a mix of languages, frameworks and operating systems.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from Java applications using the popular Java Message Service (JMS) API standard.</source>
          <target state="new">This how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from Java applications using the popular Java Message Service (JMS) API standard.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Get started with Service Bus</source>
          <target state="new">Get started with Service Bus</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This guide assumes that you already have a Service Bus namespace containing a queue named "queue1."</source>
          <target state="new">This guide assumes that you already have a Service Bus namespace containing a queue named "queue1."</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you do not, then you can create the namespace and queue using the <bpt id="p1">[</bpt>Azure Management Portal<ept id="p1">](http://manage.windowsazure.com)</ept>.</source>
          <target state="new">If you do not, then you can create the namespace and queue using the <bpt id="p1">[</bpt>Azure Management Portal<ept id="p1">](http://manage.windowsazure.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about how to create Service Bus namespaces and queues, see <bpt id="p1">[</bpt>How to Use Service Bus Queues<ept id="p1">](service-bus-dotnet-how-to-use-queues.md)</ept>.</source>
          <target state="new">For more information about how to create Service Bus namespaces and queues, see <bpt id="p1">[</bpt>How to Use Service Bus Queues<ept id="p1">](service-bus-dotnet-how-to-use-queues.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Downloading the AMQP 1.0 JMS client library</source>
          <target state="new">Downloading the AMQP 1.0 JMS client library</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For information about where to download the latest version of the Apache Qpid JMS AMQP 1.0 client library, visit <bpt id="p1">[</bpt>http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html<ept id="p1">](http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html)</ept>.</source>
          <target state="new">For information about where to download the latest version of the Apache Qpid JMS AMQP 1.0 client library, visit <bpt id="p1">[</bpt>http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html<ept id="p1">](http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You must add the following four JAR files from the Apache Qpid JMS AMQP 1.0 distribution archive to the Java CLASSPATH when building and running JMS applications with Service Bus:</source>
          <target state="new">You must add the following four JAR files from the Apache Qpid JMS AMQP 1.0 distribution archive to the Java CLASSPATH when building and running JMS applications with Service Bus:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>geronimo-jms\_1.1\_spec-1.0.jar</source>
          <target state="new">geronimo-jms\_1.1\_spec-1.0.jar</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>qpid-amqp-1-0-client-[version].jar</source>
          <target state="new">qpid-amqp-1-0-client-[version].jar</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>qpid-amqp-1-0-client-jms-[version].jar</source>
          <target state="new">qpid-amqp-1-0-client-jms-[version].jar</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>qpid-amqp-1-0-common-[version].jar</source>
          <target state="new">qpid-amqp-1-0-common-[version].jar</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Coding Java applications</source>
          <target state="new">Coding Java applications</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Java Naming and Directory Interface (JNDI)</source>
          <target state="new">Java Naming and Directory Interface (JNDI)</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>JMS uses the Java Naming and Directory Interface (JNDI) to create a separation between logical names and physical names.</source>
          <target state="new">JMS uses the Java Naming and Directory Interface (JNDI) to create a separation between logical names and physical names.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Two types of JMS objects are resolved using JNDI: ConnectionFactory and Destination.</source>
          <target state="new">Two types of JMS objects are resolved using JNDI: ConnectionFactory and Destination.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>JNDI uses a provider model into which you can plug different directory services to handle name resolution duties.</source>
          <target state="new">JNDI uses a provider model into which you can plug different directory services to handle name resolution duties.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The Apache Qpid JMS AMQP 1.0 library comes with a simple properties file-based JNDI Provider that is configured using a properties file of the following format:</source>
          <target state="new">The Apache Qpid JMS AMQP 1.0 library comes with a simple properties file-based JNDI Provider that is configured using a properties file of the following format:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Configuring the ConnectionFactory</source>
          <target state="new">Configuring the ConnectionFactory</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The entry used to define a <bpt id="p1">**</bpt>ConnectionFactory<ept id="p1">**</ept> in the Qpid Properties File JNDI Provider is of the following format:</source>
          <target state="new">The entry used to define a <bpt id="p1">**</bpt>ConnectionFactory<ept id="p1">**</ept> in the Qpid Properties File JNDI Provider is of the following format:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>[ConnectionURL]<ept id="p2">**</ept> have the following meanings:</source>
          <target state="new">Where <bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>[ConnectionURL]<ept id="p2">**</ept> have the following meanings:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept>: The logical name of the ConnectionFactory.</source>
          <target state="new"><bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept>: The logical name of the ConnectionFactory.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.</source>
          <target state="new">This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[ConnectionURL]<ept id="p1">**</ept>: A URL that provides the JMS library with the information required to the AMQP broker.</source>
          <target state="new"><bpt id="p1">**</bpt>[ConnectionURL]<ept id="p1">**</ept>: A URL that provides the JMS library with the information required to the AMQP broker.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The format of the <bpt id="p1">**</bpt>ConnectionURL<ept id="p1">**</ept> is as follows:</source>
          <target state="new">The format of the <bpt id="p1">**</bpt>ConnectionURL<ept id="p1">**</ept> is as follows:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">**</bpt>[namespace]<ept id="p1">**</ept>, <bpt id="p2">**</bpt>[username]<ept id="p2">**</ept> and <bpt id="p3">**</bpt>[password]<ept id="p3">**</ept> have the following meanings:</source>
          <target state="new">Where <bpt id="p1">**</bpt>[namespace]<ept id="p1">**</ept>, <bpt id="p2">**</bpt>[username]<ept id="p2">**</ept> and <bpt id="p3">**</bpt>[password]<ept id="p3">**</ept> have the following meanings:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[namespace]<ept id="p1">**</ept>: The Service Bus namespace.</source>
          <target state="new"><bpt id="p1">**</bpt>[namespace]<ept id="p1">**</ept>: The Service Bus namespace.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[username]<ept id="p1">**</ept>: The Service Bus issuer name.</source>
          <target state="new"><bpt id="p1">**</bpt>[username]<ept id="p1">**</ept>: The Service Bus issuer name.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[password]<ept id="p1">**</ept>: URL-encoded form of the Service Bus issuer key.</source>
          <target state="new"><bpt id="p1">**</bpt>[password]<ept id="p1">**</ept>: URL-encoded form of the Service Bus issuer key.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You must URL-encode the password manually.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You must URL-encode the password manually.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A useful URL-encoding utility is available at <bpt id="p1">[</bpt>http://www.w3schools.com/tags/ref_urlencode.asp<ept id="p1">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>.</source>
          <target state="new">A useful URL-encoding utility is available at <bpt id="p1">[</bpt>http://www.w3schools.com/tags/ref_urlencode.asp<ept id="p1">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Configuring Destinations</source>
          <target state="new">Configuring Destinations</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The entry used to define a destination in the Qpid Properties File JNDI Provider is of the following format:</source>
          <target state="new">The entry used to define a destination in the Qpid Properties File JNDI Provider is of the following format:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="new">or</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">**</bpt>[jndi\_name]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>[physical\_name]<ept id="p2">**</ept> have the following meanings:</source>
          <target state="new">Where <bpt id="p1">**</bpt>[jndi\_name]<ept id="p1">**</ept> and <bpt id="p2">**</bpt>[physical\_name]<ept id="p2">**</ept> have the following meanings:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept>: The logical name of the destination.</source>
          <target state="new"><bpt id="p1">**</bpt>[jndi_name]<ept id="p1">**</ept>: The logical name of the destination.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.</source>
          <target state="new">This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>[physical_name]<ept id="p1">**</ept>: The name of the Service Bus entity to which the application sends or receives messages.</source>
          <target state="new"><bpt id="p1">**</bpt>[physical_name]<ept id="p1">**</ept>: The name of the Service Bus entity to which the application sends or receives messages.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When receiving from a Service Bus topic subscription, the physical name specified in JNDI should be the name of the topic.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When receiving from a Service Bus topic subscription, the physical name specified in JNDI should be the name of the topic.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The subscription name is provided when the durable subscription is created in the JMS application code.</source>
          <target state="new">The subscription name is provided when the durable subscription is created in the JMS application code.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept> provides more details on working with Service Bus topic subscriptions from JMS.</source>
          <target state="new">The <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept> provides more details on working with Service Bus topic subscriptions from JMS.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Writing the JMS application</source>
          <target state="new">Writing the JMS application</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are no special APIs or options required when using JMS with Service Bus.</source>
          <target state="new">There are no special APIs or options required when using JMS with Service Bus.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, there are a few restrictions that will be covered later.</source>
          <target state="new">However, there are a few restrictions that will be covered later.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As with any JMS application, the first thing required is configuration of the JNDI environment, to be able to resolve a <bpt id="p1">**</bpt>ConnectionFactory<ept id="p1">**</ept> and destinations.</source>
          <target state="new">As with any JMS application, the first thing required is configuration of the JNDI environment, to be able to resolve a <bpt id="p1">**</bpt>ConnectionFactory<ept id="p1">**</ept> and destinations.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Configuring the JNDI InitialContext</source>
          <target state="new">Configuring the JNDI InitialContext</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The JNDI environment is configured by passing a hashtable of configuration information into the constructor of the javax.naming.InitialContext class.</source>
          <target state="new">The JNDI environment is configured by passing a hashtable of configuration information into the constructor of the javax.naming.InitialContext class.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The two required elements in the hashtable are the class name of the Initial Context Factory and the Provider URL.</source>
          <target state="new">The two required elements in the hashtable are the class name of the Initial Context Factory and the Provider URL.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following code shows how to configure the JNDI environment to use the Qpid properties file based JNDI Provider with a properties file named <bpt id="p1">**</bpt>servicebus.properties<ept id="p1">**</ept>.</source>
          <target state="new">The following code shows how to configure the JNDI environment to use the Qpid properties file based JNDI Provider with a properties file named <bpt id="p1">**</bpt>servicebus.properties<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A simple JMS application using a Service Bus queue</source>
          <target state="new">A simple JMS application using a Service Bus queue</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example program sends JMS TextMessages to a Service Bus queue with the JNDI logical name of QUEUE, and receives the messages back.</source>
          <target state="new">The following example program sends JMS TextMessages to a Service Bus queue with the JNDI logical name of QUEUE, and receives the messages back.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Running the application</source>
          <target state="new">Running the application</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Running the application produces the following output:</source>
          <target state="new">Running the application produces the following output:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Cross-platform messaging between JMS and .NET</source>
          <target state="new">Cross-platform messaging between JMS and .NET</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This guide showed how to send and receive messages to and from Service Bus using JMS.</source>
          <target state="new">This guide showed how to send and receive messages to and from Service Bus using JMS.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.</source>
          <target state="new">However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Using the sample JMS application described above and a similar .NET application taken from a companion guide, <bpt id="p1">[</bpt>How to use AMQP 1.0 with the .NET Service Bus .NET API<ept id="p1">](service-bus-dotnet-advanced-message-queuing.md)</ept>, you can exchange messages between .NET and Java.</source>
          <target state="new">Using the sample JMS application described above and a similar .NET application taken from a companion guide, <bpt id="p1">[</bpt>How to use AMQP 1.0 with the .NET Service Bus .NET API<ept id="p1">](service-bus-dotnet-advanced-message-queuing.md)</ept>, you can exchange messages between .NET and Java.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.</source>
          <target state="new">For more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>JMS to .NET</source>
          <target state="new">JMS to .NET</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To demonstrate JMS to .NET messaging:</source>
          <target state="new">To demonstrate JMS to .NET messaging:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Start the .NET sample application without any command-line arguments.</source>
          <target state="new">Start the .NET sample application without any command-line arguments.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Start the Java sample application with the “sendonly” command-line argument.</source>
          <target state="new">Start the Java sample application with the “sendonly” command-line argument.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this mode, the application will not receive messages from the queue, it will only send.</source>
          <target state="new">In this mode, the application will not receive messages from the queue, it will only send.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> a few times in the Java application console, which will cause messages to be sent.</source>
          <target state="new">Press <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> a few times in the Java application console, which will cause messages to be sent.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These messages are received by the .NET application.</source>
          <target state="new">These messages are received by the .NET application.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Output from JMS application</source>
          <target state="new">Output from JMS application</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Output from .NET application</source>
          <target state="new">Output from .NET application</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>.NET to JMS</source>
          <target state="new">.NET to JMS</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To demonstrate .NET to JMS messaging:</source>
          <target state="new">To demonstrate .NET to JMS messaging:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Start the .NET sample application with the “sendonly” command-line argument.</source>
          <target state="new">Start the .NET sample application with the “sendonly” command-line argument.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this mode, the application will not receive messages from the queue, it will only send.</source>
          <target state="new">In this mode, the application will not receive messages from the queue, it will only send.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Start the Java sample application without any command-line arguments.</source>
          <target state="new">Start the Java sample application without any command-line arguments.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> a few times in the .NET application console, which will cause messages to be sent.</source>
          <target state="new">Press <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> a few times in the .NET application console, which will cause messages to be sent.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These messages are received by the Java application.</source>
          <target state="new">These messages are received by the Java application.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Output from .NET application</source>
          <target state="new">Output from .NET application</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Output from JMS application</source>
          <target state="new">Output from JMS application</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Unsupported features and restrictions</source>
          <target state="new">Unsupported features and restrictions</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following restrictions exist when using JMS over AMQP 1.0 with Service Bus, namely:</source>
          <target state="new">The following restrictions exist when using JMS over AMQP 1.0 with Service Bus, namely:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Only one <bpt id="p1">**</bpt>MessageProducer<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MessageConsumer<ept id="p2">**</ept> is allowed per <bpt id="p3">**</bpt>Session<ept id="p3">**</ept>.</source>
          <target state="new">Only one <bpt id="p1">**</bpt>MessageProducer<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MessageConsumer<ept id="p2">**</ept> is allowed per <bpt id="p3">**</bpt>Session<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you need to create multiple <bpt id="p1">**</bpt>MessageProducers<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MessageConsumers<ept id="p2">**</ept> in an application, create a dedicated <bpt id="p3">**</bpt>Session<ept id="p3">**</ept> for each of them.</source>
          <target state="new">If you need to create multiple <bpt id="p1">**</bpt>MessageProducers<ept id="p1">**</ept> or <bpt id="p2">**</bpt>MessageConsumers<ept id="p2">**</ept> in an application, create a dedicated <bpt id="p3">**</bpt>Session<ept id="p3">**</ept> for each of them.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Volatile topic subscriptions are not currently supported.</source>
          <target state="new">Volatile topic subscriptions are not currently supported.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MessageSelectors<ept id="p1">**</ept> are not currently supported.</source>
          <target state="new"><bpt id="p1">**</bpt>MessageSelectors<ept id="p1">**</ept> are not currently supported.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Temporary destinations, i.e., <bpt id="p1">**</bpt>TemporaryQueue<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TemporaryTopic<ept id="p2">**</ept> are not currently supported, along with the <bpt id="p3">**</bpt>QueueRequestor<ept id="p3">**</ept> and <bpt id="p4">**</bpt>TopicRequestor<ept id="p4">**</ept> APIs that use them.</source>
          <target state="new">Temporary destinations, i.e., <bpt id="p1">**</bpt>TemporaryQueue<ept id="p1">**</ept>, <bpt id="p2">**</bpt>TemporaryTopic<ept id="p2">**</ept> are not currently supported, along with the <bpt id="p3">**</bpt>QueueRequestor<ept id="p3">**</ept> and <bpt id="p4">**</bpt>TopicRequestor<ept id="p4">**</ept> APIs that use them.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Transacted sessions and distributed transactions are not supported.</source>
          <target state="new">Transacted sessions and distributed transactions are not supported.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This how-to guide showed how to use Service Bus brokered messaging features (queues and publish/subscribe topics) from Java using the popular JMS API and AMQP 1.0.</source>
          <target state="new">This how-to guide showed how to use Service Bus brokered messaging features (queues and publish/subscribe topics) from Java using the popular JMS API and AMQP 1.0.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can also use Service Bus AMQP 1.0 from other languages, including .NET, C, Python, and PHP.</source>
          <target state="new">You can also use Service Bus AMQP 1.0 from other languages, including .NET, C, Python, and PHP.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Components built using these different languages can exchange messages reliably and at full fidelity using the AMQP 1.0 support in Service Bus.</source>
          <target state="new">Components built using these different languages can exchange messages reliably and at full fidelity using the AMQP 1.0 support in Service Bus.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.</source>
          <target state="new">For more information, see the <bpt id="p1">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id="p1">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>AMQP 1.0 support in Azure Service Bus</source>
          <target state="new">AMQP 1.0 support in Azure Service Bus</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>How to use AMQP 1.0 with the Service Bus .NET API</source>
          <target state="new">How to use AMQP 1.0 with the Service Bus .NET API</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Service Bus AMQP 1.0 Developer's Guide</source>
          <target state="new">Service Bus AMQP 1.0 Developer's Guide</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>How to Use Service Bus Queues</source>
          <target state="new">How to Use Service Bus Queues</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e61fde98b4b8b3ebce978f905210430752f8bc66</xliffext:olfilehash>
  </header>
</xliff>