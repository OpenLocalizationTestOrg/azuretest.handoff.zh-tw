<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C# Api App</source>
          <target state="new">C# Api App</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C# Api App</source>
          <target state="new">C# Api App</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C\# API App</source>
          <target state="new">C\# API App</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The C# API App gives you an easy way to run simple C# expressions <bpt id="p1">*</bpt>while your Logic App executes<ept id="p1">*</ept>.</source>
          <target state="new">The C# API App gives you an easy way to run simple C# expressions <bpt id="p1">*</bpt>while your Logic App executes<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When should you use this API app?</source>
          <target state="new">When should you use this API app?</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="p1">*</bpt>not<ept id="p1">*</ept> want the code to be called in any other scenarios.</source>
          <target state="new">The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="p1">*</bpt>not<ept id="p1">*</ept> want the code to be called in any other scenarios.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</source>
          <target state="new">On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</source>
          <target state="new">Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</source>
          <target state="new">If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>JavaScript API App<ept id="p1">](app-service-logic-javascript-api.md)</ept> if you would prefer to write your expressions in JS.</source>
          <target state="new">Use the <bpt id="p1">[</bpt>JavaScript API App<ept id="p1">](app-service-logic-javascript-api.md)</ept> if you would prefer to write your expressions in JS.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating a C\# API App</source>
          <target state="new">Creating a C\# API App</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To use the C# API App, you need to first create an instance of the C# API app.</source>
          <target state="new">To use the C# API App, you need to first create an instance of the C# API app.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</source>
          <target state="new">This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using C\# API App in Logic Apps designer surface</source>
          <target state="new">Using C\# API App in Logic Apps designer surface</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Trigger</source>
          <target state="new">Trigger</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <ph id="ph1">`false`</ph>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</source>
          <target state="new">You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <ph id="ph1">`false`</ph>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The inputs to the trigger are:</source>
          <target state="new">The inputs to the trigger are:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C# Expression<ept id="p1">**</ept>  - An expression that will be evaluated.</source>
          <target state="new"><bpt id="p1">**</bpt>C# Expression<ept id="p1">**</ept>  - An expression that will be evaluated.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It will be invoked inside a function and must return <ph id="ph1">`false`</ph> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</source>
          <target state="new">It will be invoked inside a function and must return <ph id="ph1">`false`</ph> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You will be able to use the content of the response in the actions of the Logic app.</source>
          <target state="new">You will be able to use the content of the response in the actions of the Logic app.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</source>
          <target state="new">For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="new">Action</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Likewise, you can provide an action to run.</source>
          <target state="new">Likewise, you can provide an action to run.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The inputs to the action are:</source>
          <target state="new">The inputs to the action are:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C# expression<ept id="p1">**</ept>  - An expression that will be evaluated.</source>
          <target state="new"><bpt id="p1">**</bpt>C# expression<ept id="p1">**</ept>  - An expression that will be evaluated.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You must include the <ph id="ph1">`return`</ph> statement to get any content.</source>
          <target state="new">You must include the <ph id="ph1">`return`</ph> statement to get any content.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Context object(s)<ept id="p1">**</ept> - An optional context object that can be passed into the trigger.</source>
          <target state="new"><bpt id="p1">**</bpt>Context object(s)<ept id="p1">**</ept> - An optional context object that can be passed into the trigger.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can define as many properties as you want, but the base must be a JObject <ph id="ph1">`{ ... }`</ph>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</source>
          <target state="new">You can define as many properties as you want, but the base must be a JObject <ph id="ph1">`{ ... }`</ph>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Libraries<ept id="p1">**</ept> - An optional array of .dll files to include on compiling the script.</source>
          <target state="new"><bpt id="p1">**</bpt>Libraries<ept id="p1">**</ept> - An optional array of .dll files to include on compiling the script.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</source>
          <target state="new">The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, imagine you are using the Office 365 trigger <bpt id="p1">**</bpt>New Email<ept id="p1">**</ept>.</source>
          <target state="new">For example, imagine you are using the Office 365 trigger <bpt id="p1">**</bpt>New Email<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>That returns the following object:</source>
          <target state="new">That returns the following object:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>But, you want to upload these attachments to a Yammer post.</source>
          <target state="new">But, you want to upload these attachments to a Yammer post.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Unfortunately, the schema for Yammer attachments is slightly different.</source>
          <target state="new">Unfortunately, the schema for Yammer attachments is slightly different.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Now, you can now parse this inside your Logic app.</source>
          <target state="new">Now, you can now parse this inside your Logic app.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For the context object just pass: <ph id="ph1">`@triggerBody()`</ph>, and for the expression, pass:</source>
          <target state="new">For the context object just pass: <ph id="ph1">`@triggerBody()`</ph>, and for the expression, pass:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The action returns the object that you returned from your function in a results object.</source>
          <target state="new">The action returns the object that you returned from your function in a results object.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Thus, in the Yammer API app you can reference <ph id="ph1">`@body('csapi').results`</ph> for the <bpt id="p1">**</bpt>Attachments<ept id="p1">**</ept> property.</source>
          <target state="new">Thus, in the Yammer API app you can reference <ph id="ph1">`@body('csapi').results`</ph> for the <bpt id="p1">**</bpt>Attachments<ept id="p1">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Do more with your Connector</source>
          <target state="new">Do more with your Connector</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Now that the connector is created, you can add it to a business flow using a Logic App.</source>
          <target state="new">Now that the connector is created, you can add it to a business flow using a Logic App.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>What are Logic Apps?<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>What are Logic Apps?<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also review performance statistics and control security to the connector.</source>
          <target state="new">You can also review performance statistics and control security to the connector.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Manage  and Monitor API apps and connector<ept id="p1">](../app-service-api/app-service-api-manage-in-portal.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Manage  and Monitor API apps and connector<ept id="p1">](../app-service-api/app-service-api-manage-in-portal.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5481efa401b393b66d51a0d50641b10b7280772</xliffext:olfilehash>
  </header>
</xliff>