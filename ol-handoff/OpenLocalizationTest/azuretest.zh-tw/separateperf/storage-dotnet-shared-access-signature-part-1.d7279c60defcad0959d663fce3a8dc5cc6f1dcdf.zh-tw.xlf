<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shared Access Signatures: Understanding the SAS Model | Microsoft Azure</source>
          <target state="new">Shared Access Signatures: Understanding the SAS Model | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about delegating access to Azure Storage resources, including blobs, queues, tables, and files, using shared access signatures (SAS).</source>
          <target state="new">Learn about delegating access to Azure Storage resources, including blobs, queues, tables, and files, using shared access signatures (SAS).</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>With shared access signatures, you can protect your storage account key while granting access to resources in your account to other users.</source>
          <target state="new">With shared access signatures, you can protect your storage account key while granting access to resources in your account to other users.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can control the permissions that you grant and the interval over which the SAS is valid.</source>
          <target state="new">You can control the permissions that you grant and the interval over which the SAS is valid.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you also establish a stored access policy, you can revoke the SAS should you fear your account security is compromised.</source>
          <target state="new">If you also establish a stored access policy, you can revoke the SAS should you fear your account security is compromised.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Shared Access Signatures, Part 1: Understanding the SAS Model</source>
          <target state="new">Shared Access Signatures, Part 1: Understanding the SAS Model</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using a shared access signature (SAS) is a powerful way to grant limited access to objects in your storage account to other clients, without having to expose your account key.</source>
          <target state="new">Using a shared access signature (SAS) is a powerful way to grant limited access to objects in your storage account to other clients, without having to expose your account key.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Part 1 of this tutorial on shared access signatures, we'll provide an overview of the SAS model and review SAS best practices.</source>
          <target state="new">In Part 1 of this tutorial on shared access signatures, we'll provide an overview of the SAS model and review SAS best practices.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Part 2<ept id="p1">](storage-dotnet-shared-access-signature-part-2.md)</ept> of the tutorial walks you through the process of creating shared access signatures with the Blob service.</source>
          <target state="new"><bpt id="p1">[</bpt>Part 2<ept id="p1">](storage-dotnet-shared-access-signature-part-2.md)</ept> of the tutorial walks you through the process of creating shared access signatures with the Blob service.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>What Is a Shared Access Signature?</source>
          <target state="new">What Is a Shared Access Signature?</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A shared access signature provides delegated access to resources in your storage account.</source>
          <target state="new">A shared access signature provides delegated access to resources in your storage account.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This means that you can grant a client limited permissions to objects in your storage account for a specified period of time and with a specified set of permissions, without having to share your account access keys.</source>
          <target state="new">This means that you can grant a client limited permissions to objects in your storage account for a specified period of time and with a specified set of permissions, without having to share your account access keys.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The SAS is a URI that encompasses in its query parameters all of the information necessary for authenticated access to a storage resource.</source>
          <target state="new">The SAS is a URI that encompasses in its query parameters all of the information necessary for authenticated access to a storage resource.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To access storage resources with the SAS, the client only needs to pass in the SAS to the appropriate constructor or method.</source>
          <target state="new">To access storage resources with the SAS, the client only needs to pass in the SAS to the appropriate constructor or method.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When Should You Use a Shared Access Signature?</source>
          <target state="new">When Should You Use a Shared Access Signature?</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use a SAS when you want to provide access to resources in your storage account to a client that can't be trusted with the account key.</source>
          <target state="new">You can use a SAS when you want to provide access to resources in your storage account to a client that can't be trusted with the account key.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your storage account keys include both a primary and secondary key, both of which grant administrative access to your account and all of the resources in it.</source>
          <target state="new">Your storage account keys include both a primary and secondary key, both of which grant administrative access to your account and all of the resources in it.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Exposing either of your account keys opens your account to the possibility of malicious or negligent use.</source>
          <target state="new">Exposing either of your account keys opens your account to the possibility of malicious or negligent use.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Shared access signatures provide a safe alternative that allows other clients to read, write, and delete data in your storage account according to the permissions you've granted, and without need for the account key.</source>
          <target state="new">Shared access signatures provide a safe alternative that allows other clients to read, write, and delete data in your storage account according to the permissions you've granted, and without need for the account key.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A common scenario where a SAS is useful is a service where users read and write their own data to your storage account.</source>
          <target state="new">A common scenario where a SAS is useful is a service where users read and write their own data to your storage account.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In a scenario where a storage account stores user data, there are two typical design patterns:</source>
          <target state="new">In a scenario where a storage account stores user data, there are two typical design patterns:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>1\.</source>
          <target state="new">1\.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Clients upload and download data via a front-end proxy service, which performs authentication.</source>
          <target state="new">Clients upload and download data via a front-end proxy service, which performs authentication.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This front-end proxy service has the advantage of allowing validation of business rules, but for large amounts of data or high-volume transactions, creating a service that can scale to match demand may be expensive or difficult.</source>
          <target state="new">This front-end proxy service has the advantage of allowing validation of business rules, but for large amounts of data or high-volume transactions, creating a service that can scale to match demand may be expensive or difficult.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>![sas-storage-fe-proxy-service][sas-storage-fe-proxy-service]</source>
          <target state="new">![sas-storage-fe-proxy-service][sas-storage-fe-proxy-service]</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>2\.</source>
          <target state="new">2\.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A lightweight service authenticates the client as needed and then generates a SAS.</source>
          <target state="new">A lightweight service authenticates the client as needed and then generates a SAS.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once the client receives the SAS, they can access storage account resources directly with the permissions defined by the SAS and for the interval allowed by the SAS.</source>
          <target state="new">Once the client receives the SAS, they can access storage account resources directly with the permissions defined by the SAS and for the interval allowed by the SAS.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The SAS mitigates the need for routing all data through the front-end proxy service.</source>
          <target state="new">The SAS mitigates the need for routing all data through the front-end proxy service.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>![sas-storage-provider-service][sas-storage-provider-service]</source>
          <target state="new">![sas-storage-provider-service][sas-storage-provider-service]</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Many real-world services may use a hybrid of these two approaches, depending on the scenario involved, with some data processed and validated via the front-end proxy while other data is saved and/or read directly using SAS.</source>
          <target state="new">Many real-world services may use a hybrid of these two approaches, depending on the scenario involved, with some data processed and validated via the front-end proxy while other data is saved and/or read directly using SAS.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Additionally, you will need to use a SAS to authenticate the source object in a copy operation in certain scenarios:</source>
          <target state="new">Additionally, you will need to use a SAS to authenticate the source object in a copy operation in certain scenarios:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you copy a blob to another blob that resides in a different storage account, you must use a SAS to authenticate the source blob.</source>
          <target state="new">When you copy a blob to another blob that resides in a different storage account, you must use a SAS to authenticate the source blob.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can optionally use a SAS to authenticate the destination blob, so long as you are using version 2013-08-15 of the storage services or later.</source>
          <target state="new">You can optionally use a SAS to authenticate the destination blob, so long as you are using version 2013-08-15 of the storage services or later.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you copy a file to another file that resides in a different storage account, you must use a SAS to authenticate the source file.</source>
          <target state="new">When you copy a file to another file that resides in a different storage account, you must use a SAS to authenticate the source file.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can optionally use a SAS to authenticate the destination file.</source>
          <target state="new">You can optionally use a SAS to authenticate the destination file.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you copy a blob to a file, or a file to a blob, you must use a SAS to authenticate the source object, even if the source and destination objects reside within the same storage account.</source>
          <target state="new">When you copy a blob to a file, or a file to a blob, you must use a SAS to authenticate the source object, even if the source and destination objects reside within the same storage account.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How a Shared Access Signature Works</source>
          <target state="new">How a Shared Access Signature Works</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A shared access signature is a URI that points to a storage resource and includes a special set of query parameters that indicate how the resource may be accessed by the client.</source>
          <target state="new">A shared access signature is a URI that points to a storage resource and includes a special set of query parameters that indicate how the resource may be accessed by the client.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One of these parameters, the signature, is constructed from the SAS parameters and signed with the account key.</source>
          <target state="new">One of these parameters, the signature, is constructed from the SAS parameters and signed with the account key.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This signature is used by Azure Storage to authenticate the SAS.</source>
          <target state="new">This signature is used by Azure Storage to authenticate the SAS.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A shared access signature has the following constraints that define it, each of which is represented as a parameter on the URI:</source>
          <target state="new">A shared access signature has the following constraints that define it, each of which is represented as a parameter on the URI:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The storage resource.</source>
          <target state="new">The storage resource.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Storage resources for which you can delegate access include:</source>
          <target state="new">Storage resources for which you can delegate access include:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Containers and blobs</source>
          <target state="new">Containers and blobs</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>File shares and files</source>
          <target state="new">File shares and files</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Tables and ranges of table entities.</source>
          <target state="new">Tables and ranges of table entities.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Start time.</source>
          <target state="new">Start time.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is the time at which the SAS becomes valid.</source>
          <target state="new">This is the time at which the SAS becomes valid.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The start time for a shared access signature is optional; if omitted, the SAS is effective immediately.</source>
          <target state="new">The start time for a shared access signature is optional; if omitted, the SAS is effective immediately.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Expiry time.</source>
          <target state="new">Expiry time.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This is the time after which the SAS is no longer valid.</source>
          <target state="new">This is the time after which the SAS is no longer valid.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Best practices recommend that you either specify an expiry time for a SAS, or associate it with a stored access policy (see more below).</source>
          <target state="new">Best practices recommend that you either specify an expiry time for a SAS, or associate it with a stored access policy (see more below).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Permissions.</source>
          <target state="new">Permissions.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The permissions specified on the SAS indicate what operations the client can perform against the storage resource using the SAS.</source>
          <target state="new">The permissions specified on the SAS indicate what operations the client can perform against the storage resource using the SAS.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Here is an example of a SAS URI that provides read and write permissions to a blob.</source>
          <target state="new">Here is an example of a SAS URI that provides read and write permissions to a blob.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The table breaks down each part of the URI to understand how it contributes to the SAS:</source>
          <target state="new">The table breaks down each part of the URI to understand how it contributes to the SAS:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Link section</source>
          <target state="new">Link section</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Blob URI</source>
          <target state="new">Blob URI</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>https://myaccount.blob.core.windows.net/sascontainer/sasblob.txt</source>
          <target state="new">https://myaccount.blob.core.windows.net/sascontainer/sasblob.txt</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The address of the blob.</source>
          <target state="new">The address of the blob.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Note that using HTTPS is highly recommended.</source>
          <target state="new">Note that using HTTPS is highly recommended.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Storage services version</source>
          <target state="new">Storage services version</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>sv=2012-02-12</source>
          <target state="new">sv=2012-02-12</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For storage services version 2012-02-12 and later, this parameter indicates the version to use.</source>
          <target state="new">For storage services version 2012-02-12 and later, this parameter indicates the version to use.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Start time</source>
          <target state="new">Start time</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>st=2013-04-29T22%3A18%3A26Z</source>
          <target state="new">st=2013-04-29T22%3A18%3A26Z</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Specified in an ISO 8061 format.</source>
          <target state="new">Specified in an ISO 8061 format.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you want the SAS to be valid immediately, omit the start time.</source>
          <target state="new">If you want the SAS to be valid immediately, omit the start time.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Expiry time</source>
          <target state="new">Expiry time</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>se=2013-04-30T02%3A23%3A26Z</source>
          <target state="new">se=2013-04-30T02%3A23%3A26Z</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specified in an ISO 8061 format.</source>
          <target state="new">Specified in an ISO 8061 format.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="new">Resource</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>sr=b</source>
          <target state="new">sr=b</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The resource is a blob.</source>
          <target state="new">The resource is a blob.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="new">Permissions</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>sp=rw</source>
          <target state="new">sp=rw</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The permissions granted by the SAS include Read (r) and Write (w).</source>
          <target state="new">The permissions granted by the SAS include Read (r) and Write (w).</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Signature</source>
          <target state="new">Signature</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D</source>
          <target state="new">sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Used to authenticate access to the blob.</source>
          <target state="new">Used to authenticate access to the blob.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The signature is an HMAC computed over a string-to-sign and key using the SHA256 algorithm, and then encoded using Base64 encoding.</source>
          <target state="new">The signature is an HMAC computed over a string-to-sign and key using the SHA256 algorithm, and then encoded using Base64 encoding.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Controlling Shared Access Signatures with a Stored Access Policy</source>
          <target state="new">Controlling Shared Access Signatures with a Stored Access Policy</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A shared access signature can take one of two forms:</source>
          <target state="new">A shared access signature can take one of two forms:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ad hoc SAS:<ept id="p1">**</ept> When you create an ad hoc SAS, the start time, expiry time, and permissions for the SAS are all specified on the SAS URI (or implied, in the case where start time is omitted).</source>
          <target state="new"><bpt id="p1">**</bpt>Ad hoc SAS:<ept id="p1">**</ept> When you create an ad hoc SAS, the start time, expiry time, and permissions for the SAS are all specified on the SAS URI (or implied, in the case where start time is omitted).</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This type of SAS may be created on a container, blob, file share, file, table, or queue.</source>
          <target state="new">This type of SAS may be created on a container, blob, file share, file, table, or queue.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SAS with stored access policy:<ept id="p1">**</ept> A stored access policy is defined on a resource container - a blob container, table, queue, or file share - and can be used to manage constraints for one or more shared access signatures.</source>
          <target state="new"><bpt id="p1">**</bpt>SAS with stored access policy:<ept id="p1">**</ept> A stored access policy is defined on a resource container - a blob container, table, queue, or file share - and can be used to manage constraints for one or more shared access signatures.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When you associate a SAS with a stored access policy, the SAS inherits the constraints - the start time, expiry time, and permissions - defined for the stored access policy.</source>
          <target state="new">When you associate a SAS with a stored access policy, the SAS inherits the constraints - the start time, expiry time, and permissions - defined for the stored access policy.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The difference between the two forms is important for one key scenario: revocation.</source>
          <target state="new">The difference between the two forms is important for one key scenario: revocation.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A SAS is a URL, so anyone who obtains the SAS can use it, regardless of who requested it to begin with.</source>
          <target state="new">A SAS is a URL, so anyone who obtains the SAS can use it, regardless of who requested it to begin with.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If a SAS is published publically, it can be used by anyone in the world.</source>
          <target state="new">If a SAS is published publically, it can be used by anyone in the world.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A SAS that is distributed is valid until one of four things happens:</source>
          <target state="new">A SAS that is distributed is valid until one of four things happens:</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The expiry time specified on the SAS is reached.</source>
          <target state="new">The expiry time specified on the SAS is reached.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The expiry time specified on the stored access policy referenced by the SAS is reached (if a stored access policy is referenced, and if it specifies an expiry time).</source>
          <target state="new">The expiry time specified on the stored access policy referenced by the SAS is reached (if a stored access policy is referenced, and if it specifies an expiry time).</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This can either occur because the interval elapses, or because you have modified the stored access policy to have an expiry time in the past, which is one way to revoke the SAS.</source>
          <target state="new">This can either occur because the interval elapses, or because you have modified the stored access policy to have an expiry time in the past, which is one way to revoke the SAS.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The stored access policy referenced by the SAS is deleted, which is another way to revoke the SAS.</source>
          <target state="new">The stored access policy referenced by the SAS is deleted, which is another way to revoke the SAS.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Note that if you recreate the stored access policy with exactly the same name, all existing SAS tokens will again be valid according to the permissions associated with that stored access policy (assuming that the expiry time on the SAS has not passed).</source>
          <target state="new">Note that if you recreate the stored access policy with exactly the same name, all existing SAS tokens will again be valid according to the permissions associated with that stored access policy (assuming that the expiry time on the SAS has not passed).</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you are intending to revoke the SAS, be sure to use a different name if you recreate the access policy with an expiry time in the future.</source>
          <target state="new">If you are intending to revoke the SAS, be sure to use a different name if you recreate the access policy with an expiry time in the future.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The account key that was used to create the SAS is regenerated.</source>
          <target state="new">The account key that was used to create the SAS is regenerated.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Note that doing this will cause all application components using that account key to fail to authenticate until they are updated to use either the other valid account key or the newly regenerated account key.</source>
          <target state="new">Note that doing this will cause all application components using that account key to fail to authenticate until they are updated to use either the other valid account key or the newly regenerated account key.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Best Practices for Using Shared Access Signatures</source>
          <target state="new">Best Practices for Using Shared Access Signatures</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When you use shared access signatures in your applications, you need to be aware of two potential risks:</source>
          <target state="new">When you use shared access signatures in your applications, you need to be aware of two potential risks:</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If a SAS is leaked, it can be used by anyone who obtains it, which can potentially compromise your storage account.</source>
          <target state="new">If a SAS is leaked, it can be used by anyone who obtains it, which can potentially compromise your storage account.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If a SAS provided to a client application expires and the application is unable to retrieve a new SAS from your service, then the application's functionality may be hindered.</source>
          <target state="new">If a SAS provided to a client application expires and the application is unable to retrieve a new SAS from your service, then the application's functionality may be hindered.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following recommendations for using shared access signatures will help balance these risks:</source>
          <target state="new">The following recommendations for using shared access signatures will help balance these risks:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Always use HTTPS<ept id="p1">**</ept> to create a SAS or to distribute a SAS.</source>
          <target state="new"><bpt id="p1">**</bpt>Always use HTTPS<ept id="p1">**</ept> to create a SAS or to distribute a SAS.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If a SAS is passed over HTTP and intercepted, an attacker performing a man-in-the-middle attack will be able to read the SAS and then use it just as the intended user could have, potentially compromising sensitive data or allowing for data corruption by the malicious user.</source>
          <target state="new">If a SAS is passed over HTTP and intercepted, an attacker performing a man-in-the-middle attack will be able to read the SAS and then use it just as the intended user could have, potentially compromising sensitive data or allowing for data corruption by the malicious user.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Reference stored access policies where possible.</source>
          <target state="new">Reference stored access policies where possible.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Stored access policies give you the option to revoke permissions without having to regenerate the storage account keys.</source>
          <target state="new">Stored access policies give you the option to revoke permissions without having to regenerate the storage account keys.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Set the expiration on these to be a very long time (or infinite)  and make sure that it is regularly updated to move it farther into the future.</source>
          <target state="new">Set the expiration on these to be a very long time (or infinite)  and make sure that it is regularly updated to move it farther into the future.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Use near-term expiration times on an ad hoc SAS.</source>
          <target state="new">Use near-term expiration times on an ad hoc SAS.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In this way, even if a SAS is compromised unknowingly, it will only be viable for a short time duration.</source>
          <target state="new">In this way, even if a SAS is compromised unknowingly, it will only be viable for a short time duration.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This practice is especially important if you cannot reference a stored access policy.</source>
          <target state="new">This practice is especially important if you cannot reference a stored access policy.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This practice also helps limit the amount of data that can be written to a blob by limiting the time available to upload to it.</source>
          <target state="new">This practice also helps limit the amount of data that can be written to a blob by limiting the time available to upload to it.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Have clients automatically renew the SAS if necessary.</source>
          <target state="new">Have clients automatically renew the SAS if necessary.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Clients should renew the SAS well before the expected expiration, in order to allow time for retries if the service providing the SAS is unavailable.</source>
          <target state="new">Clients should renew the SAS well before the expected expiration, in order to allow time for retries if the service providing the SAS is unavailable.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If your SAS is meant to be used for a small number of immediate, short-lived operations, which are expected to be completed within the expiration time given, then this may not be necessary, as the SAS is not expected be renewed.</source>
          <target state="new">If your SAS is meant to be used for a small number of immediate, short-lived operations, which are expected to be completed within the expiration time given, then this may not be necessary, as the SAS is not expected be renewed.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>However, if you have client that is routinely making requests via SAS, then the possibility of expiration comes into play.</source>
          <target state="new">However, if you have client that is routinely making requests via SAS, then the possibility of expiration comes into play.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The key consideration is to balance the need for the SAS to be short-lived (as stated above) with the need to ensure that the client is requesting renewal early enough to avoid disruption due to the SAS expiring prior to successful renewal.</source>
          <target state="new">The key consideration is to balance the need for the SAS to be short-lived (as stated above) with the need to ensure that the client is requesting renewal early enough to avoid disruption due to the SAS expiring prior to successful renewal.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Be careful with SAS start time.</source>
          <target state="new">Be careful with SAS start time.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If you set the start time for a SAS to <bpt id="p1">**</bpt>now<ept id="p1">**</ept>, then due to clock skew (differences in current time according to different machines), failures may be observed intermittently for the first few minutes.</source>
          <target state="new">If you set the start time for a SAS to <bpt id="p1">**</bpt>now<ept id="p1">**</ept>, then due to clock skew (differences in current time according to different machines), failures may be observed intermittently for the first few minutes.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In general, set the start time to be at least 15 minutes ago, or don't set it at all, which will make it valid immediately in all cases.</source>
          <target state="new">In general, set the start time to be at least 15 minutes ago, or don't set it at all, which will make it valid immediately in all cases.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The same generally applies to expiry time as well - remember that you may observe up to 15 minutes of clock skew in either direction on any request.</source>
          <target state="new">The same generally applies to expiry time as well - remember that you may observe up to 15 minutes of clock skew in either direction on any request.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Note for clients using a REST version prior to 2012-02-12, the maximum duration for a SAS that does not reference a stored access policy is 1 hour, and any policies specifying longer term than that will fail.</source>
          <target state="new">Note for clients using a REST version prior to 2012-02-12, the maximum duration for a SAS that does not reference a stored access policy is 1 hour, and any policies specifying longer term than that will fail.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Be specific with the resource to be accessed.</source>
          <target state="new">Be specific with the resource to be accessed.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A typical security best practice is to provide a user with the minimum required privileges.</source>
          <target state="new">A typical security best practice is to provide a user with the minimum required privileges.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If a user only needs read access to a single entity, then grant them read access to that single entity, and not read/write/delete access to all entities.</source>
          <target state="new">If a user only needs read access to a single entity, then grant them read access to that single entity, and not read/write/delete access to all entities.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This also helps mitigate the threat of the SAS being compromised, as the SAS has less power in the hands of an attacker.</source>
          <target state="new">This also helps mitigate the threat of the SAS being compromised, as the SAS has less power in the hands of an attacker.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Understand that your account will be billed for any usage, including that done with SAS.</source>
          <target state="new">Understand that your account will be billed for any usage, including that done with SAS.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you provide write access to a blob, a user may choose to upload a 200GB blob.</source>
          <target state="new">If you provide write access to a blob, a user may choose to upload a 200GB blob.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If you've given them read access as well, they may choose do download it 10 times, incurring 2TB in egress costs for you.</source>
          <target state="new">If you've given them read access as well, they may choose do download it 10 times, incurring 2TB in egress costs for you.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Again, provide limited permissions, to help mitigate the potential of malicious users.</source>
          <target state="new">Again, provide limited permissions, to help mitigate the potential of malicious users.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Use short-lived SAS to reduce this threat (but be mindful of clock skew on the end time).</source>
          <target state="new">Use short-lived SAS to reduce this threat (but be mindful of clock skew on the end time).</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Validate data written using SAS.</source>
          <target state="new">Validate data written using SAS.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When a client application writes data to your storage account, keep in mind that there can be problems with that data.</source>
          <target state="new">When a client application writes data to your storage account, keep in mind that there can be problems with that data.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If your application requires that that data be validated or authorized before it is ready to use, you should perform this validation after the data is written and before it is used by your application.</source>
          <target state="new">If your application requires that that data be validated or authorized before it is ready to use, you should perform this validation after the data is written and before it is used by your application.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This practice also protects against corrupt or malicious data being written to your account, either by a user who properly acquired the SAS, or by a user exploiting a leaked SAS.</source>
          <target state="new">This practice also protects against corrupt or malicious data being written to your account, either by a user who properly acquired the SAS, or by a user exploiting a leaked SAS.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Don't always use SAS.</source>
          <target state="new">Don't always use SAS.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Sometimes the risks associated with a particular operation against your storage account outweigh the benefits of SAS.</source>
          <target state="new">Sometimes the risks associated with a particular operation against your storage account outweigh the benefits of SAS.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For such operations, create a middle-tier service that writes to your storage account after performing business rule validation, authentication, and auditing.</source>
          <target state="new">For such operations, create a middle-tier service that writes to your storage account after performing business rule validation, authentication, and auditing.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Also, sometimes it's simpler to manage access in other ways.</source>
          <target state="new">Also, sometimes it's simpler to manage access in other ways.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For example, if you want to make all blobs in a container publically readable, you can make the container Public, rather than providing a SAS to every client for access.</source>
          <target state="new">For example, if you want to make all blobs in a container publically readable, you can make the container Public, rather than providing a SAS to every client for access.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Use Storage Analytics to monitor your application.</source>
          <target state="new">Use Storage Analytics to monitor your application.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can use logging and metrics to observe any spike in authentication failures due to an outage in your SAS provider service or or to the inadvertent removal of a stored access policy.</source>
          <target state="new">You can use logging and metrics to observe any spike in authentication failures due to an outage in your SAS provider service or or to the inadvertent removal of a stored access policy.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Azure Storage Team Blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/08/03/windows-azure-storage-logging-using-logs-to-track-storage-requests.aspx)</ept> for additional information.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Azure Storage Team Blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/08/03/windows-azure-storage-logging-using-logs-to-track-storage-requests.aspx)</ept> for additional information.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="new">Conclusion</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Shared access signatures are useful for providing limited permissions to your storage account to clients that should not have the account key.</source>
          <target state="new">Shared access signatures are useful for providing limited permissions to your storage account to clients that should not have the account key.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>As such, they are a vital part of the security model for any application using Azure Storage.</source>
          <target state="new">As such, they are a vital part of the security model for any application using Azure Storage.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you follow the best practices listed here, you can use SAS to provide greater flexibility of access to resources in your storage account, without compromising the security of your application.</source>
          <target state="new">If you follow the best practices listed here, you can use SAS to provide greater flexibility of access to resources in your storage account, without compromising the security of your application.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Shared Access Signatures, Part 2: Create and Use a SAS with the Blob Service</source>
          <target state="new">Shared Access Signatures, Part 2: Create and Use a SAS with the Blob Service</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>How to use Azure File storage with PowerShell and .NET</source>
          <target state="new">How to use Azure File storage with PowerShell and .NET</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Manage Access to Azure Storage Resources</source>
          <target state="new">Manage Access to Azure Storage Resources</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Delegating Access with a Shared Access Signature (REST API)</source>
          <target state="new">Delegating Access with a Shared Access Signature (REST API)</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introducing Table and Queue SAS<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-table-sas-shared-access-signature-queue-sas-and-update-to-blob-sas.aspx)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Introducing Table and Queue SAS<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-table-sas-shared-access-signature-queue-sas-and-update-to-blob-sas.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>[sas-storage-fe-proxy-service]: ./media/storage-dotnet-shared-access-signature-part-1/sas-storage-fe-proxy-service.png</source>
          <target state="new">[sas-storage-fe-proxy-service]: ./media/storage-dotnet-shared-access-signature-part-1/sas-storage-fe-proxy-service.png</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>[sas-storage-provider-service]: ./media/storage-dotnet-shared-access-signature-part-1/sas-storage-provider-service.png</source>
          <target state="new">[sas-storage-provider-service]: ./media/storage-dotnet-shared-access-signature-part-1/sas-storage-provider-service.png</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4d52546b43ccfe2283442abb66493b453c48206</xliffext:olfilehash>
  </header>
</xliff>