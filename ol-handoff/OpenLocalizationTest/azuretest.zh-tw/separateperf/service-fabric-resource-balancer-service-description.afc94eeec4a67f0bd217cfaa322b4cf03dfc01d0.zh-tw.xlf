<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resource Balancer Service Descriptions</source>
          <target state="new">Resource Balancer Service Descriptions</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>An overview of configuring service descriptions for the Resource Balancer to use</source>
          <target state="new">An overview of configuring service descriptions for the Resource Balancer to use</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service Description Overview</source>
          <target state="new">Service Description Overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Placement Constraints</source>
          <target state="new">Placement Constraints</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Placement Constraints<ept id="p1">](../service-fabric-placement-constraint)</ept> on a service are the mechanism whereby a particular service instance selects the node properties that it requires.</source>
          <target state="new"><bpt id="p1">[</bpt>Placement Constraints<ept id="p1">](../service-fabric-placement-constraint)</ept> on a service are the mechanism whereby a particular service instance selects the node properties that it requires.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Just like node properties, they are key/value pairs which describe the property name and the service’s requirements for the value.</source>
          <target state="new">Just like node properties, they are key/value pairs which describe the property name and the service’s requirements for the value.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Individual statements can be grouped together with simple Boolean logic to create the necessary constraint.</source>
          <target state="new">Individual statements can be grouped together with simple Boolean logic to create the necessary constraint.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that the Service Fabric Resource Balancer interprets the constraints.</source>
          <target state="new">Note that the Service Fabric Resource Balancer interprets the constraints.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Service placement constraints can be defined either via the service or application manifest or directly in code.</source>
          <target state="new">Service placement constraints can be defined either via the service or application manifest or directly in code.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The service manifest provides the ServiceTypes definitions.</source>
          <target state="new">The service manifest provides the ServiceTypes definitions.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The application manifest provides the ServiceTemplates or the DefaultServices definitions.</source>
          <target state="new">The application manifest provides the ServiceTemplates or the DefaultServices definitions.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following diagram shows that in the cluster with nodes, the only valid node for placement of this service is N5.</source>
          <target state="new">The following diagram shows that in the cluster with nodes, the only valid node for placement of this service is N5.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>![Placement Constraints][Image1]</source>
          <target state="new">![Placement Constraints][Image1]</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the service specifies a constraint for a property that a specific node does not have defined, that node is not considered a match regardless of the specified value.</source>
          <target state="new">If the service specifies a constraint for a property that a specific node does not have defined, that node is not considered a match regardless of the specified value.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Service Affinity</source>
          <target state="new">Service Affinity</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A special form of placement constraint, service affinity enables the description of different services which for varying reasons have a local dependency on each other, which means that both of the services must be running on the same node for them to work.</source>
          <target state="new">A special form of placement constraint, service affinity enables the description of different services which for varying reasons have a local dependency on each other, which means that both of the services must be running on the same node for them to work.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>While this sort of architecture is not expected to be common among Service Fabric applications, Service Fabric recognizes that it is a possible transitional architecture for certain types of legacy applications, and therefore makes this capability available.</source>
          <target state="new">While this sort of architecture is not expected to be common among Service Fabric applications, Service Fabric recognizes that it is a possible transitional architecture for certain types of legacy applications, and therefore makes this capability available.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Establishing service affinity between two services ensures that the Primary replicas of those services are always collocated on the same node.</source>
          <target state="new">Establishing service affinity between two services ensures that the Primary replicas of those services are always collocated on the same node.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Affinity relationships are represented by a parent-child hierarchy, that is, there are "parents" and "children".</source>
          <target state="new">Affinity relationships are represented by a parent-child hierarchy, that is, there are "parents" and "children".</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The service that is established first is the parent, and the service that is established second is the child in the relationship.</source>
          <target state="new">The service that is established first is the parent, and the service that is established second is the child in the relationship.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The relationship is modeled as a "hard" constraint.</source>
          <target state="new">The relationship is modeled as a "hard" constraint.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Service affinity currently has the following limitations:</source>
          <target state="new">Service affinity currently has the following limitations:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Cannot be used across stateless and stateful services.</source>
          <target state="new">Cannot be used across stateless and stateful services.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Cannot be used across stateless services with different instance counts, for example both stateless services should have the same InstanceCount property when they are created.</source>
          <target state="new">Cannot be used across stateless services with different instance counts, for example both stateless services should have the same InstanceCount property when they are created.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Cannot be used across stateful volatile or persistent services with different numbers of replicas, for example, both services must have the same specified Target and Min ReplicaSetSizes values.</source>
          <target state="new">Cannot be used across stateful volatile or persistent services with different numbers of replicas, for example, both services must have the same specified Target and Min ReplicaSetSizes values.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Cannot be used with partitioned services.</source>
          <target state="new">Cannot be used with partitioned services.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each service must have a FABRIC_PARTITION_SCHEME_SINGLETON partition scheme.</source>
          <target state="new">Each service must have a FABRIC_PARTITION_SCHEME_SINGLETON partition scheme.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Affinity relationships, like other properties of the service description, are set when the service is created and cannot be modified.</source>
          <target state="new">Affinity relationships, like other properties of the service description, are set when the service is created and cannot be modified.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Chains of services are not allowed.</source>
          <target state="new">Chains of services are not allowed.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If multiple services must be brought into an affinity relationship, they must use a "star" model.</source>
          <target state="new">If multiple services must be brought into an affinity relationship, they must use a "star" model.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The code example shows the alternate use of the DefaultServices definitions.</source>
          <target state="new">The code example shows the alternate use of the DefaultServices definitions.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The code example shows how to create an affinity relationship after the containing application has been created.</source>
          <target state="new">The code example shows how to create an affinity relationship after the containing application has been created.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Resource Balancing Metrics</source>
          <target state="new">Resource Balancing Metrics</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>While service placement constraints and node properties represent the hard rules and policies that describe what arrangements of services are valid, Resource Balancing Metrics generally help describe the optimal arrangement of services within the cluster.</source>
          <target state="new">While service placement constraints and node properties represent the hard rules and policies that describe what arrangements of services are valid, Resource Balancing Metrics generally help describe the optimal arrangement of services within the cluster.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The metrics that are defined by the service have several different properties which describe how they are used within the cluster.</source>
          <target state="new">The metrics that are defined by the service have several different properties which describe how they are used within the cluster.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Using Default Metrics</source>
          <target state="new">Using Default Metrics</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first thing to understand is that dealing with Resource Metrics is completely optional for services, and that by default the Service Fabric Resource Balancer uses some "built-in" system metrics to perform basic resource balancing without requiring that service or cluster administrators take any actions.</source>
          <target state="new">The first thing to understand is that dealing with Resource Metrics is completely optional for services, and that by default the Service Fabric Resource Balancer uses some "built-in" system metrics to perform basic resource balancing without requiring that service or cluster administrators take any actions.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default metrics that the Service Fabric Resource Balancer tracks and balances within the cluster are PrimaryCount, ReplicaCount, and Count.</source>
          <target state="new">The default metrics that the Service Fabric Resource Balancer tracks and balances within the cluster are PrimaryCount, ReplicaCount, and Count.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PrimaryCount is the count of Primary stateful service replicas on a node.</source>
          <target state="new">PrimaryCount is the count of Primary stateful service replicas on a node.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>ReplicaCount is the count of all stateful replicas on a node.</source>
          <target state="new">ReplicaCount is the count of all stateful replicas on a node.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Count is the total count of all service objects on the node, including both stateless and stateful services.</source>
          <target state="new">Count is the total count of all service objects on the node, including both stateless and stateful services.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Generally the PrimaryCount metric is considered the most important, and therefore has the highest weight as described in the following section.</source>
          <target state="new">Generally the PrimaryCount metric is considered the most important, and therefore has the highest weight as described in the following section.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The PrimaryCount metric is followed by the ReplicaCount metric and finally by the Count metric.</source>
          <target state="new">The PrimaryCount metric is followed by the ReplicaCount metric and finally by the Count metric.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following diagram shows an example of default balancing of three stateful services with three replicas each.</source>
          <target state="new">The following diagram shows an example of default balancing of three stateful services with three replicas each.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>![Default Metrics][Image2]</source>
          <target state="new">![Default Metrics][Image2]</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Generally the default metrics are sufficient for many services and should be used unless there is a specific requirement for additional metrics or capabilities.</source>
          <target state="new">Generally the default metrics are sufficient for many services and should be used unless there is a specific requirement for additional metrics or capabilities.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defining Custom Metrics</source>
          <target state="new">Defining Custom Metrics</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the default metrics are insufficient for a particular service, or that service has known requirements for requirements around a particular resource such as disk space or memory, custom medics should be used.</source>
          <target state="new">If the default metrics are insufficient for a particular service, or that service has known requirements for requirements around a particular resource such as disk space or memory, custom medics should be used.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Custom metrics are useful when a service has one or more resources that must be balanced well to prevent contention.</source>
          <target state="new">Custom metrics are useful when a service has one or more resources that must be balanced well to prevent contention.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the use of those metrics can vary significantly between replicas within the cluster, for example, one Primary might be using 100 percent of the metric, while another may be using only 20 percent.</source>
          <target state="new">When the use of those metrics can vary significantly between replicas within the cluster, for example, one Primary might be using 100 percent of the metric, while another may be using only 20 percent.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It can also be useful to use custom metrics to capture any resource which is severely limited on a computer, such as memory, disk space, or connections.</source>
          <target state="new">It can also be useful to use custom metrics to capture any resource which is severely limited on a computer, such as memory, disk space, or connections.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Additional custom metrics can sometimes be created, which capture or represent metrics that have no upper limits on nodes, but do represent work and resource consumption from the service’s perspective, for example, a "current outstanding transactions" metric.</source>
          <target state="new">Additional custom metrics can sometimes be created, which capture or represent metrics that have no upper limits on nodes, but do represent work and resource consumption from the service’s perspective, for example, a "current outstanding transactions" metric.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>While there might not be a limit to this metric a "capacity" on a given node, there is still a performance benefit by ensuring that this metric is distributed evenly throughout the cluster.</source>
          <target state="new">While there might not be a limit to this metric a "capacity" on a given node, there is still a performance benefit by ensuring that this metric is distributed evenly throughout the cluster.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Note that if a service defines any custom metric, the service does not use the default system-provided metrics.</source>
          <target state="new">Note that if a service defines any custom metric, the service does not use the default system-provided metrics.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The default metrics can still be used, but they must be explicitly re-included in the service’s list of metrics on creation.</source>
          <target state="new">The default metrics can still be used, but they must be explicitly re-included in the service’s list of metrics on creation.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Metric Names</source>
          <target state="new">Metric Names</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Custom metrics can be created merely by defining a Metric Name when you create a service.</source>
          <target state="new">Custom metrics can be created merely by defining a Metric Name when you create a service.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that the Service Fabric Resource Balancer associates metrics via their name, so if the metric is used as a capacity within node definitions or across services, then the metric names must match exactly so that the Service Fabric Resource Balancer can relate them.</source>
          <target state="new">Note that the Service Fabric Resource Balancer associates metrics via their name, so if the metric is used as a capacity within node definitions or across services, then the metric names must match exactly so that the Service Fabric Resource Balancer can relate them.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Metric Weights</source>
          <target state="new">Metric Weights</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When a service defines multiple metrics, it is also useful to define the metric weights for those metrics.</source>
          <target state="new">When a service defines multiple metrics, it is also useful to define the metric weights for those metrics.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Different metric weights instruct the Service Fabric Resource Balancer which metric is more important to the function of the service.</source>
          <target state="new">Different metric weights instruct the Service Fabric Resource Balancer which metric is more important to the function of the service.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, an in-memory queue might be affected by network bandwidth but is probably most constraint by actual memory use on the node.</source>
          <target state="new">For example, an in-memory queue might be affected by network bandwidth but is probably most constraint by actual memory use on the node.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Thus, while the queue might have multiple metrics, the metric that represents memory usage has the highest weight.</source>
          <target state="new">Thus, while the queue might have multiple metrics, the metric that represents memory usage has the highest weight.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Similarly, a persistent database probably depends on both memory and disk usage, but while limited memory reduces the ability to process complex queries, to run out of disk space would prevent further storage operations, which is probably a more critical situation.</source>
          <target state="new">Similarly, a persistent database probably depends on both memory and disk usage, but while limited memory reduces the ability to process complex queries, to run out of disk space would prevent further storage operations, which is probably a more critical situation.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Therefore, the persistent store probably chooses disk space as the metric with the higher weight.</source>
          <target state="new">Therefore, the persistent store probably chooses disk space as the metric with the higher weight.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Note that weight is really only used within the Service Fabric Resource Balancer when it cannot fully balance a set of metrics, and thus must find solutions where one metric ends up less balanced overall than another metric.</source>
          <target state="new">Note that weight is really only used within the Service Fabric Resource Balancer when it cannot fully balance a set of metrics, and thus must find solutions where one metric ends up less balanced overall than another metric.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this case, the balance of the metric with the lower weight is determined to be of lower priority than the metric with the higher weight, so the Service Fabric Resource Balancer comes up with proposals that favor the balancer of the higher weighted metric.</source>
          <target state="new">In this case, the balance of the metric with the lower weight is determined to be of lower priority than the metric with the higher weight, so the Service Fabric Resource Balancer comes up with proposals that favor the balancer of the higher weighted metric.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Also when the Service Fabric Resource Balancer recognizes that multiple services have defined the same metric by name, it considers those metrics to be the same metric.</source>
          <target state="new">Also when the Service Fabric Resource Balancer recognizes that multiple services have defined the same metric by name, it considers those metrics to be the same metric.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In cases where the metric is the same, but the weights are different, the Resource Balancer averages the specified weights to determine the actual weights that to be used during runtime.</source>
          <target state="new">In cases where the metric is the same, but the weights are different, the Resource Balancer averages the specified weights to determine the actual weights that to be used during runtime.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Therefore, if one service defines a weight of Zero, which indicates that it does not require balancing, but another service defines the same metric as having a weight of High, the real weight ends up somewhere in between.</source>
          <target state="new">Therefore, if one service defines a weight of Zero, which indicates that it does not require balancing, but another service defines the same metric as having a weight of High, the real weight ends up somewhere in between.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>![Metric Weights][Image3]</source>
          <target state="new">![Metric Weights][Image3]</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This example shows how two different metric weight scenarios result in two different balancing results where the more highly prioritized metric is better distributed over all.</source>
          <target state="new">This example shows how two different metric weight scenarios result in two different balancing results where the more highly prioritized metric is better distributed over all.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the left example, B is better balanced, while on the right, A is better balanced.</source>
          <target state="new">In the left example, B is better balanced, while on the right, A is better balanced.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because in this example there is no balancing solution that results in balance of both metrics, the Service Fabric Resource Balancer uses the Weight of the metrics to determine which is more important, and therefore which metric to prefer during balancing.</source>
          <target state="new">Because in this example there is no balancing solution that results in balance of both metrics, the Service Fabric Resource Balancer uses the Weight of the metrics to determine which is more important, and therefore which metric to prefer during balancing.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Note that the metric weight of Zero is provided for cases where a service tracks a metric but does not require balancing that is based on this metric.</source>
          <target state="new">Note that the metric weight of Zero is provided for cases where a service tracks a metric but does not require balancing that is based on this metric.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, consider a metric which has an explicit limit on several nodes, but for which "even utilization across nodes", which is what resource balancing normally guarantees is unimportant.</source>
          <target state="new">For example, consider a metric which has an explicit limit on several nodes, but for which "even utilization across nodes", which is what resource balancing normally guarantees is unimportant.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For these sorts of metrics that do not require balancing, but require enforcement of set limits at nodes, the balancing weight of Zero can be defined.</source>
          <target state="new">For these sorts of metrics that do not require balancing, but require enforcement of set limits at nodes, the balancing weight of Zero can be defined.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>During runtime, the Service Fabric Resource Balancer enforces capacity, but does not attempt to balance the metric proactively even if the use of that metric is very imbalanced across nodes.</source>
          <target state="new">During runtime, the Service Fabric Resource Balancer enforces capacity, but does not attempt to balance the metric proactively even if the use of that metric is very imbalanced across nodes.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Metric Default Load for a Primary or Secondary Role</source>
          <target state="new">Metric Default Load for a Primary or Secondary Role</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When you define a metric for a service, provide the expected consumption for that metric when the service is in either a Primary or Secondary role.</source>
          <target state="new">When you define a metric for a service, provide the expected consumption for that metric when the service is in either a Primary or Secondary role.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This information not only helps the Resource Balancer to initially place the service in an efficient way, but can serve as a good approximation of actual service use of the metrics it is related to throughout its lifetime.</source>
          <target state="new">This information not only helps the Resource Balancer to initially place the service in an efficient way, but can serve as a good approximation of actual service use of the metrics it is related to throughout its lifetime.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The Service Fabric Resource Balancer automatically takes this metric consumption into account not just when placing your service, but any time it must move replicas around due to balancing or to other changes in the cluster.</source>
          <target state="new">The Service Fabric Resource Balancer automatically takes this metric consumption into account not just when placing your service, but any time it must move replicas around due to balancing or to other changes in the cluster.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If a service’s load is fairly predictable and stable, then this means that by setting these values, the service can opt out of having to report load during runtime.</source>
          <target state="new">If a service’s load is fairly predictable and stable, then this means that by setting these values, the service can opt out of having to report load during runtime.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following code example shows a service which fully defines two custom metrics, one for memory usage and the other for disk space.</source>
          <target state="new">The following code example shows a service which fully defines two custom metrics, one for memory usage and the other for disk space.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The code example shows ServiceTypes definitions via the service manifest.</source>
          <target state="new">The code example shows ServiceTypes definitions via the service manifest.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The code example shows ServiceTemplates definitions via the application manifest.</source>
          <target state="new">The code example shows ServiceTemplates definitions via the application manifest.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The code example shows the DefaultServices definitions via application manifest.</source>
          <target state="new">The code example shows the DefaultServices definitions via application manifest.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because the default load values are not updated unless services specifically opt in to report load at runtime via code, the values can also be used to institute more of a "capacity reservation" resource balancing model.</source>
          <target state="new">Because the default load values are not updated unless services specifically opt in to report load at runtime via code, the values can also be used to institute more of a "capacity reservation" resource balancing model.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, if workloads generally fall into several size buckets, and a known number of units of work can be placed on a node at any time, a custom metric of "units" can be created, and then both node capacity and service default load are defined in terms of units.</source>
          <target state="new">For example, if workloads generally fall into several size buckets, and a known number of units of work can be placed on a node at any time, a custom metric of "units" can be created, and then both node capacity and service default load are defined in terms of units.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
##</ph> Next steps

For more information: <bpt id="p1">[</bpt><ept id="p1">Resource Balancer Architecture](service-fabric-resource-balancer-architecture.md)</ept>, <bpt id="p2">[</bpt><ept id="p2">Placement Constraints](service-fabric-placement-constraint.md)</ept><ph id="ph2">

[Image1]: media/service-fabric-resource-balancer-service-description/PC.png
[Image2]: media/service-fabric-resource-balancer-service-description/DM.png
[Image3]: media/service-fabric-resource-balancer-service-description/MW.png</ph></source>
          <target state="new"><ph id="ph1">
##</ph> Next steps

For more information: <bpt id="p1">[</bpt><ept id="p1">Resource Balancer Architecture](service-fabric-resource-balancer-architecture.md)</ept>, <bpt id="p2">[</bpt><ept id="p2">Placement Constraints](service-fabric-placement-constraint.md)</ept><ph id="ph2">

[Image1]: media/service-fabric-resource-balancer-service-description/PC.png
[Image2]: media/service-fabric-resource-balancer-service-description/DM.png
[Image3]: media/service-fabric-resource-balancer-service-description/MW.png</ph></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">873961199af40111ab3e36c9477b055fa9a34705</xliffext:olfilehash>
  </header>
</xliff>