<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Running the Chaos test.</source>
          <target state="new">Running the Chaos test.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article talks about the pre-canned service fabric scenarios shipped by Microsoft.</source>
          <target state="new">This article talks about the pre-canned service fabric scenarios shipped by Microsoft.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Testability Scenarios</source>
          <target state="new">Testability Scenarios</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Large distributed systems like cloud infrastructures are inherently unreliable.</source>
          <target state="new">Large distributed systems like cloud infrastructures are inherently unreliable.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Service Fabric provides developers the ability to write services to run on top of unreliable infrastructures.</source>
          <target state="new">Service Fabric provides developers the ability to write services to run on top of unreliable infrastructures.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In order to write high quality services, developers need to be able to induce such unreliable infrastructure to test the stability of their services.</source>
          <target state="new">In order to write high quality services, developers need to be able to induce such unreliable infrastructure to test the stability of their services.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Service Fabric gives developers the ability to induce fault actions to test services in presence of failures.</source>
          <target state="new">Service Fabric gives developers the ability to induce fault actions to test services in presence of failures.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, targeted simulated faults will only get you so far.</source>
          <target state="new">However, targeted simulated faults will only get you so far.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To take the testing further Service Fabric ships pre-canned test scenarios.</source>
          <target state="new">To take the testing further Service Fabric ships pre-canned test scenarios.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The scenarios simulate continuous interleaved faults, both graceful and ungraceful, throughout the cluster over extended periods of time.</source>
          <target state="new">The scenarios simulate continuous interleaved faults, both graceful and ungraceful, throughout the cluster over extended periods of time.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Once configured with the rate and kind of faults, it runs as a client side tool, through either C# APIs or PowerShell to generate faults in the cluster and your service.</source>
          <target state="new">Once configured with the rate and kind of faults, it runs as a client side tool, through either C# APIs or PowerShell to generate faults in the cluster and your service.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As part of the testability feature we ship the following scenarios.</source>
          <target state="new">As part of the testability feature we ship the following scenarios.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Chaos Test</source>
          <target state="new">Chaos Test</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Failover Test</source>
          <target state="new">Failover Test</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Chaos Test</source>
          <target state="new">Chaos Test</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The chaos scenario generates faults across the entire service fabric cluster.</source>
          <target state="new">The chaos scenario generates faults across the entire service fabric cluster.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The scenario compresses faults generally seen in months or years to a few hours.</source>
          <target state="new">The scenario compresses faults generally seen in months or years to a few hours.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The combination of interleaved faults with the high fault rate finds corner cases which are otherwise missed.</source>
          <target state="new">The combination of interleaved faults with the high fault rate finds corner cases which are otherwise missed.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This leads to a significant improvement in the code quality of the service.</source>
          <target state="new">This leads to a significant improvement in the code quality of the service.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Faults simulated in Chaos test</source>
          <target state="new">Faults simulated in Chaos test</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Restart of a Node</source>
          <target state="new">Restart of a Node</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Restart of a Deployed Code Package</source>
          <target state="new">Restart of a Deployed Code Package</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Remove of a Replicas</source>
          <target state="new">Remove of a Replicas</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Restart of a Replica</source>
          <target state="new">Restart of a Replica</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Move of a Primary Replica (optional)</source>
          <target state="new">Move of a Primary Replica (optional)</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Move of a secondary Replica (optional)</source>
          <target state="new">Move of a secondary Replica (optional)</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Chaos test runs multiple iterations of faults and cluster validations for the specified period of time.</source>
          <target state="new">Chaos test runs multiple iterations of faults and cluster validations for the specified period of time.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The time spent for the cluster to stabilize and validation to succeed is also configurable.</source>
          <target state="new">The time spent for the cluster to stabilize and validation to succeed is also configurable.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The scenario fails when we hit a single failure in cluster validation.</source>
          <target state="new">The scenario fails when we hit a single failure in cluster validation.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, consider a test set to run for 1 hour and with maximum 3 concurrent faults.</source>
          <target state="new">For example, consider a test set to run for 1 hour and with maximum 3 concurrent faults.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The test will induce 3 faults, then validate the cluster health.</source>
          <target state="new">The test will induce 3 faults, then validate the cluster health.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The test will iterate through the previous step till cluster becomes unhealthy or 1 hour passes.</source>
          <target state="new">The test will iterate through the previous step till cluster becomes unhealthy or 1 hour passes.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If in any iteration the cluster becomes unhealthy, i.e. not stabilize within a configured time, the test will fail with an exception.</source>
          <target state="new">If in any iteration the cluster becomes unhealthy, i.e. not stabilize within a configured time, the test will fail with an exception.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This exception indicates something has gone wrong and needs further investigation.</source>
          <target state="new">This exception indicates something has gone wrong and needs further investigation.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In its current form the test Chaos test fault generation engine induces only safe faults.</source>
          <target state="new">In its current form the test Chaos test fault generation engine induces only safe faults.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This means that in absence of external faults a quorum or data loss will never occur.</source>
          <target state="new">This means that in absence of external faults a quorum or data loss will never occur.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Important configuration options</source>
          <target state="new">Important configuration options</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TimeToRun<ept id="p1">**</ept>: Total time that the test will run before completing with success.</source>
          <target state="new"><bpt id="p1">**</bpt>TimeToRun<ept id="p1">**</ept>: Total time that the test will run before completing with success.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The test can complete earlier in lieu of a validation failure.</source>
          <target state="new">The test can complete earlier in lieu of a validation failure.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxClusterStabilizationTimeout<ept id="p1">**</ept>: Max amount of time to wait for the cluster to become healthy before failing the test.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxClusterStabilizationTimeout<ept id="p1">**</ept>: Max amount of time to wait for the cluster to become healthy before failing the test.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The checks performed are whether Cluster Health is OK, whether Service Health is OK, Target replica set size achieved for service partition and no InBuild replicas.</source>
          <target state="new">The checks performed are whether Cluster Health is OK, whether Service Health is OK, Target replica set size achieved for service partition and no InBuild replicas.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxConcurrentFaults<ept id="p1">**</ept>: Maximum number of concurrent faults induced in each iteration.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxConcurrentFaults<ept id="p1">**</ept>: Maximum number of concurrent faults induced in each iteration.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The higher the number the more aggressive the test hence resulting in more complex failovers and transition combinations.</source>
          <target state="new">The higher the number the more aggressive the test hence resulting in more complex failovers and transition combinations.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The test guarantees that in absence of external faults there will not be a quorum or data loss, irrespective of how high this configuration is.</source>
          <target state="new">The test guarantees that in absence of external faults there will not be a quorum or data loss, irrespective of how high this configuration is.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EnableMoveReplicaFaults<ept id="p1">**</ept>: Enables or disables the faults causing the move of the primary or secondary replicas.</source>
          <target state="new"><bpt id="p1">**</bpt>EnableMoveReplicaFaults<ept id="p1">**</ept>: Enables or disables the faults causing the move of the primary or secondary replicas.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>These faults are disabled by default.</source>
          <target state="new">These faults are disabled by default.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WaitTimeBetweenIterations<ept id="p1">**</ept>: Amount of time to wait between iterations i.e. after a round of Faults and corresponding validation.</source>
          <target state="new"><bpt id="p1">**</bpt>WaitTimeBetweenIterations<ept id="p1">**</ept>: Amount of time to wait between iterations i.e. after a round of Faults and corresponding validation.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>How to run Chaos Test</source>
          <target state="new">How to run Chaos Test</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>C# Sample</source>
          <target state="new">C# Sample</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Failover test</source>
          <target state="new">Failover test</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Failover test scenario is a version of the Chaos test scenario targeting a specific service partition.</source>
          <target state="new">The Failover test scenario is a version of the Chaos test scenario targeting a specific service partition.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It tests the effect of failover on a specific service partition while leaving the other services unaffected.</source>
          <target state="new">It tests the effect of failover on a specific service partition while leaving the other services unaffected.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Once configured with the target partition information and other parameters it runs as a client side tool either using C# APIs or Powershell to generate faults for a service partition.</source>
          <target state="new">Once configured with the target partition information and other parameters it runs as a client side tool either using C# APIs or Powershell to generate faults for a service partition.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The scenario iterates through a sequence of simulated faults and service validation while your business logic run on the side to provide a workload.</source>
          <target state="new">The scenario iterates through a sequence of simulated faults and service validation while your business logic run on the side to provide a workload.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A failure in service validation indicates an issue that needs further investigation.</source>
          <target state="new">A failure in service validation indicates an issue that needs further investigation.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Faults simulated in Failover test</source>
          <target state="new">Faults simulated in Failover test</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Restart a Deployed Code Package where partition is hosted</source>
          <target state="new">Restart a Deployed Code Package where partition is hosted</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Remove a Primary/Secondary replica or Stateless instance</source>
          <target state="new">Remove a Primary/Secondary replica or Stateless instance</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Restart a Primary Secondary Replica (If persisted service)</source>
          <target state="new">Restart a Primary Secondary Replica (If persisted service)</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Move a Primary Replica</source>
          <target state="new">Move a Primary Replica</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Move a secondary Replica</source>
          <target state="new">Move a secondary Replica</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Restart the partition.</source>
          <target state="new">Restart the partition.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Failover test works induces a chosen fault  and then runs validation on the service to ensure its stability.</source>
          <target state="new">Failover test works induces a chosen fault  and then runs validation on the service to ensure its stability.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The Failover test only induces one fault at a time as opposed to possible multiple faults in Chaos test.</source>
          <target state="new">The Failover test only induces one fault at a time as opposed to possible multiple faults in Chaos test.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If after each fault the service partition does not stabilize within the configured timeout the test fails The test induces only safe faults.</source>
          <target state="new">If after each fault the service partition does not stabilize within the configured timeout the test fails The test induces only safe faults.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This means that in absence of external failures a quorum or data loss will not occur.</source>
          <target state="new">This means that in absence of external failures a quorum or data loss will not occur.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Important configuration options</source>
          <target state="new">Important configuration options</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PartitionSelector<ept id="p1">**</ept>: Selector object specifying the partition that needs to be targeted.</source>
          <target state="new"><bpt id="p1">**</bpt>PartitionSelector<ept id="p1">**</ept>: Selector object specifying the partition that needs to be targeted.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TimeToRun<ept id="p1">**</ept>: Total time that the test will run before completing</source>
          <target state="new"><bpt id="p1">**</bpt>TimeToRun<ept id="p1">**</ept>: Total time that the test will run before completing</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxServiceStabilizationTimeout<ept id="p1">**</ept>: Max amount of time to wait for the cluster to become healthy before failing the test.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxServiceStabilizationTimeout<ept id="p1">**</ept>: Max amount of time to wait for the cluster to become healthy before failing the test.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The checks performed are whether Service Health is OK, Target replica set size achieved for all partitions and no InBuild replicas.</source>
          <target state="new">The checks performed are whether Service Health is OK, Target replica set size achieved for all partitions and no InBuild replicas.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WaitTimeBetweenFaults<ept id="p1">**</ept>: Amount of time to wait between every fault and validation cycle</source>
          <target state="new"><bpt id="p1">**</bpt>WaitTimeBetweenFaults<ept id="p1">**</ept>: Amount of time to wait between every fault and validation cycle</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>How to run Failover test</source>
          <target state="new">How to run Failover test</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>C# Sample</source>
          <target state="new">C# Sample</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95085bbaef0d684fa752dd5da0fae7c705bff216</xliffext:olfilehash>
  </header>
</xliff>