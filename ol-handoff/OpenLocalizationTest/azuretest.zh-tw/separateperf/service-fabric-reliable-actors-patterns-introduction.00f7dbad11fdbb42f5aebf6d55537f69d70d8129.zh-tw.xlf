<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Service Fabric Actors introduction to patterns &amp; anti-patterns</source>
          <target state="new">Azure Service Fabric Actors introduction to patterns &amp; anti-patterns</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>design patterns that work well with Service Fabric Actors</source>
          <target state="new">design patterns that work well with Service Fabric Actors</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Introduction to Reliable Actors design patterns</source>
          <target state="new">Introduction to Reliable Actors design patterns</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric's Reliable Actors programming model is a platform built around the actor model to solve real world problems at cloud scale.</source>
          <target state="new">Service Fabric's Reliable Actors programming model is a platform built around the actor model to solve real world problems at cloud scale.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Service Fabric is a platform for building highly reliable, scalable applications for both cloud and on premise that are easy to develop and manage.</source>
          <target state="new">Azure Service Fabric is a platform for building highly reliable, scalable applications for both cloud and on premise that are easy to develop and manage.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article is intended to be a practical paper about practical problems.</source>
          <target state="new">This article is intended to be a practical paper about practical problems.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>after reading through the various patterns, you should be able to understand how you can use the Service Fabric Actor Model to build solutions “enterprise” or “cloud” solutions.</source>
          <target state="new">after reading through the various patterns, you should be able to understand how you can use the Service Fabric Actor Model to build solutions “enterprise” or “cloud” solutions.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="new">Patterns</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this section, we will list a set of patterns and associated scenarios we harnessed during our engagements with customers.</source>
          <target state="new">In this section, we will list a set of patterns and associated scenarios we harnessed during our engagements with customers.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These patterns represent classes of problems that are applicable to a wide range of solutions our customers are building on Microsoft Azure.</source>
          <target state="new">These patterns represent classes of problems that are applicable to a wide range of solutions our customers are building on Microsoft Azure.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>While the scenarios are based on real cases we have stripped out most of the domain-specific concerns to make the patterns clearer for the reader.</source>
          <target state="new">While the scenarios are based on real cases we have stripped out most of the domain-specific concerns to make the patterns clearer for the reader.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You may find that much of the sample code is simple or obvious.</source>
          <target state="new">You may find that much of the sample code is simple or obvious.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We are including that code for the sake of completeness and not because it’s anything particularly clever or impressive.</source>
          <target state="new">We are including that code for the sake of completeness and not because it’s anything particularly clever or impressive.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The patterns presented in this paper are not intended to be comprehensive or canonical — some developers might solve the same problem or pattern a different way than we present.</source>
          <target state="new">The patterns presented in this paper are not intended to be comprehensive or canonical — some developers might solve the same problem or pattern a different way than we present.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pattern: Smart Cache</source>
          <target state="new">Pattern: Smart Cache</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Pattern: Distributed Networks and Graphs</source>
          <target state="new">Pattern: Distributed Networks and Graphs</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Pattern: Resource Governance</source>
          <target state="new">Pattern: Resource Governance</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pattern: Stateful Service Composition</source>
          <target state="new">Pattern: Stateful Service Composition</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Pattern: Internet of Things</source>
          <target state="new">Pattern: Internet of Things</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Pattern: Distributed Computation</source>
          <target state="new">Pattern: Distributed Computation</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some Anti-patterns</source>
          <target state="new">Some Anti-patterns</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about Actors, a brief history</source>
          <target state="new">Learn more about Actors, a brief history</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>paper<ept id="p1">](http://dl.acm.org/citation.cfm?id=1624804)</ept> by Hewitt et al. that is the origin of the actor model was published in 1973 yet it is only comparatively recently that the actor model has been gaining more attention as a means of dealing with concurrency and complexity in distributed systems.</source>
          <target state="new">The <bpt id="p1">[</bpt>paper<ept id="p1">](http://dl.acm.org/citation.cfm?id=1624804)</ept> by Hewitt et al. that is the origin of the actor model was published in 1973 yet it is only comparatively recently that the actor model has been gaining more attention as a means of dealing with concurrency and complexity in distributed systems.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The actor model supports fine-grain individual objects—actors—that are isolated from each other.</source>
          <target state="new">The actor model supports fine-grain individual objects—actors—that are isolated from each other.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>They communicate via asynchronous message passing, which enables direct communications between actors.</source>
          <target state="new">They communicate via asynchronous message passing, which enables direct communications between actors.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An actor executes with single-thread semantics.</source>
          <target state="new">An actor executes with single-thread semantics.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Coupled with encapsulation of the actor’s state and isolation from other actors, this simplifies writing highly parallel systems by removing concurrency concerns from the actor’s code.</source>
          <target state="new">Coupled with encapsulation of the actor’s state and isolation from other actors, this simplifies writing highly parallel systems by removing concurrency concerns from the actor’s code.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Actors are dynamically created on the pool of available hardware resources.</source>
          <target state="new">Actors are dynamically created on the pool of available hardware resources.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Erlang<ept id="p1">](http://www.erlang.org/)</ept>  is the most popular implementation of the actor model.</source>
          <target state="new"><bpt id="p1">[</bpt>Erlang<ept id="p1">](http://www.erlang.org/)</ept>  is the most popular implementation of the actor model.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Developers have started rediscovering the actor model, which stimulated renewed interest in Erlang and creation of new Erlang-like solutions: <bpt id="p1">[</bpt>Scala<ept id="p1">](http://www.scala-lang.org/)</ept> actors, <bpt id="p2">[</bpt>Akka<ept id="p2">](http://akka.io)</ept>, <bpt id="p3">[</bpt>Akka.net<ept id="p3">](http://getakka.net/)</ept>, <bpt id="p4">[</bpt>DCell<ept id="p4">](http://research.microsoft.com/pubs/75988/dcell.pdf)</ept>.</source>
          <target state="new">Developers have started rediscovering the actor model, which stimulated renewed interest in Erlang and creation of new Erlang-like solutions: <bpt id="p1">[</bpt>Scala<ept id="p1">](http://www.scala-lang.org/)</ept> actors, <bpt id="p2">[</bpt>Akka<ept id="p2">](http://akka.io)</ept>, <bpt id="p3">[</bpt>Akka.net<ept id="p3">](http://getakka.net/)</ept>, <bpt id="p4">[</bpt>DCell<ept id="p4">](http://research.microsoft.com/pubs/75988/dcell.pdf)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Brief Look at Azure Service Fabric</source>
          <target state="new">Brief Look at Azure Service Fabric</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Azure Fabric Actors is an implementation of the actor model that borrows some ideas from Erlang and distributed objects systems, adds a layer of actor indirection, and exposes them in an integrated, programming model that leverages the Azure Service Fabric platform.</source>
          <target state="new">Azure Fabric Actors is an implementation of the actor model that borrows some ideas from Erlang and distributed objects systems, adds a layer of actor indirection, and exposes them in an integrated, programming model that leverages the Azure Service Fabric platform.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The main benefits of Azure Fabric Actors are: 1) <bpt id="p1">**</bpt>developer productivity<ept id="p1">**</ept>, even for non-expert programmers; and 2) <bpt id="p2">**</bpt>transparent scalability by default<ept id="p2">**</ept> with no special effort from the programmer.</source>
          <target state="new">The main benefits of Azure Fabric Actors are: 1) <bpt id="p1">**</bpt>developer productivity<ept id="p1">**</ept>, even for non-expert programmers; and 2) <bpt id="p2">**</bpt>transparent scalability by default<ept id="p2">**</ept> with no special effort from the programmer.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Azure Fabric Actors is a.NET library that runs on top of Azure Fabric and tools that make development of complex distributed applications much easier and make the resulting applications scalable by design.</source>
          <target state="new">Azure Fabric Actors is a.NET library that runs on top of Azure Fabric and tools that make development of complex distributed applications much easier and make the resulting applications scalable by design.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>We expand on each of these benefits below.</source>
          <target state="new">We expand on each of these benefits below.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Azure Fabric Actors programming model raises productivity of both expert and non-expert programmers by providing the following key abstractions, guarantees and system services.</source>
          <target state="new">The Azure Fabric Actors programming model raises productivity of both expert and non-expert programmers by providing the following key abstractions, guarantees and system services.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Familiar object-oriented programming (OOP) paradigm<ept id="p1">*</ept>.</source>
          <target state="new"><bpt id="p1">*</bpt>Familiar object-oriented programming (OOP) paradigm<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Actors are .NET classes that implement declared .NET actor interfaces with asynchronous methods and properties.</source>
          <target state="new">Actors are .NET classes that implement declared .NET actor interfaces with asynchronous methods and properties.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Thus actors appear to the programmer as remote objects whose methods/properties can be directly invoked.</source>
          <target state="new">Thus actors appear to the programmer as remote objects whose methods/properties can be directly invoked.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This provides the programmer the familiar OOP paradigm by turning method calls into messages, routing them to the right endpoints, invoking the target actor’s methods and dealing with failures and corner cases in a completely transparent way.</source>
          <target state="new">This provides the programmer the familiar OOP paradigm by turning method calls into messages, routing them to the right endpoints, invoking the target actor’s methods and dealing with failures and corner cases in a completely transparent way.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Single-threaded execution of actors.</source>
          <target state="new">Single-threaded execution of actors.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Azure Fabric runtime guarantees that an actor never executes on more than one thread at a time.</source>
          <target state="new">The Azure Fabric runtime guarantees that an actor never executes on more than one thread at a time.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Combined with the isolation from other actors, the programmer never faces concurrency at the actor level, and hence never needs to use locks or other synchronization mechanisms to control access to shared data.</source>
          <target state="new">Combined with the isolation from other actors, the programmer never faces concurrency at the actor level, and hence never needs to use locks or other synchronization mechanisms to control access to shared data.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This feature alone makes development of distributed applications tractable for non-expert programmers.</source>
          <target state="new">This feature alone makes development of distributed applications tractable for non-expert programmers.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Transparent activation.</source>
          <target state="new">Transparent activation.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Azure Fabric runtime activates an actor as-needed, only when there is a message for it to process.</source>
          <target state="new">The Azure Fabric runtime activates an actor as-needed, only when there is a message for it to process.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This cleanly separates the notion of logical creation of an actor, which is visible to and controlled by application code, and physical activation of the actor in memory, which is transparent to the application.</source>
          <target state="new">This cleanly separates the notion of logical creation of an actor, which is visible to and controlled by application code, and physical activation of the actor in memory, which is transparent to the application.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Azure Fabric Actors is similar to virtual memory in that it decides when to “page out” (deactivate) or “page in” (activate) an actor; the application has uninterrupted access to the full “memory space” of logically created actors, whether or not they are in physical memory at any particular point in time.</source>
          <target state="new">Azure Fabric Actors is similar to virtual memory in that it decides when to “page out” (deactivate) or “page in” (activate) an actor; the application has uninterrupted access to the full “memory space” of logically created actors, whether or not they are in physical memory at any particular point in time.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Transparent activation enables dynamic, adaptive load balancing via placement and migration of actors across the pool of hardware resources.</source>
          <target state="new">Transparent activation enables dynamic, adaptive load balancing via placement and migration of actors across the pool of hardware resources.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Location transparency.</source>
          <target state="new">Location transparency.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An actor reference (proxy object) that the programmer uses to invoke the actor’s methods or pass to other components only contains the logical identity of the actor.</source>
          <target state="new">An actor reference (proxy object) that the programmer uses to invoke the actor’s methods or pass to other components only contains the logical identity of the actor.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The translation of the actor’s logical identity to its physical location and the corresponding routing of messages are done transparently by the Azure Fabric runtime.</source>
          <target state="new">The translation of the actor’s logical identity to its physical location and the corresponding routing of messages are done transparently by the Azure Fabric runtime.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Application code communicates with actors oblivious to their physical location, which may change over time due to failures or resource management, or because an actor is deactivated at the time it is called.</source>
          <target state="new">Application code communicates with actors oblivious to their physical location, which may change over time due to failures or resource management, or because an actor is deactivated at the time it is called.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Transparent integration with persistent store.</source>
          <target state="new">Transparent integration with persistent store.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Azure Fabric Actors allows for declarative mapping of actors’ in-memory state to persistent store.</source>
          <target state="new">Azure Fabric Actors allows for declarative mapping of actors’ in-memory state to persistent store.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It synchronizes updates, transparently guaranteeing that callers receive results only after the persistent state has been successfully updated.</source>
          <target state="new">It synchronizes updates, transparently guaranteeing that callers receive results only after the persistent state has been successfully updated.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>High Availability, Failover support &amp; Application Lifecycle Management.</source>
          <target state="new">High Availability, Failover support &amp; Application Lifecycle Management.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Azure Fabric Actors’ state is managed by the platform and replicated in such a way that it can be restored if, for instance, a node in the cluster fails.</source>
          <target state="new">Azure Fabric Actors’ state is managed by the platform and replicated in such a way that it can be restored if, for instance, a node in the cluster fails.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The Azure Service Fabric also manages the application lifecycle and allows zero-down time application upgrades.</source>
          <target state="new">The Azure Service Fabric also manages the application lifecycle and allows zero-down time application upgrades.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The Azure Fabric Actors programming model is designed to guide programmers down a path of likely success in scaling their application or service through several orders of magnitude.</source>
          <target state="new">The Azure Fabric Actors programming model is designed to guide programmers down a path of likely success in scaling their application or service through several orders of magnitude.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is done by incorporating proven best practices and patterns, and providing an efficient implementation of lower level system functionality.</source>
          <target state="new">This is done by incorporating proven best practices and patterns, and providing an efficient implementation of lower level system functionality.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Here are some key factors that enable scalability and performance of Azure Fabric applications.</source>
          <target state="new">Here are some key factors that enable scalability and performance of Azure Fabric applications.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Implicit fine grain partitioning of application state.</source>
          <target state="new">Implicit fine grain partitioning of application state.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>By using actors as directly addressable entities, programmers implicitly breaks down the overall state of their applications.</source>
          <target state="new">By using actors as directly addressable entities, programmers implicitly breaks down the overall state of their applications.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>While the Azure Fabric Actors programming model does not prescribe how big or small an actor should be, in most cases it makes sense to have a relative large number of actors – millions or more – with each representing a natural entity of the application, such as a user account, a purchase order, etc. With actors being individually addressable and their physical location abstracted away by the runtime, Azure Fabric Actors has enormous flexibility in balancing load and dealing with hot spots in a transparent and generic way without any thought from the application developer.</source>
          <target state="new">While the Azure Fabric Actors programming model does not prescribe how big or small an actor should be, in most cases it makes sense to have a relative large number of actors – millions or more – with each representing a natural entity of the application, such as a user account, a purchase order, etc. With actors being individually addressable and their physical location abstracted away by the runtime, Azure Fabric Actors has enormous flexibility in balancing load and dealing with hot spots in a transparent and generic way without any thought from the application developer.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Adaptive resource management.</source>
          <target state="new">Adaptive resource management.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>With actors making no assumption about locality of other actors they interact with and because of the location transparency, the Azure Fabric runtime can manage and adjust allocation of available HW resources in a very dynamic way by making fine grain decisions on placement/migration of actors across the compute cluster in reaction to load and communication patterns without failing incoming requests.</source>
          <target state="new">With actors making no assumption about locality of other actors they interact with and because of the location transparency, the Azure Fabric runtime can manage and adjust allocation of available HW resources in a very dynamic way by making fine grain decisions on placement/migration of actors across the compute cluster in reaction to load and communication patterns without failing incoming requests.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>By creating multiple replicas of a particular actor the runtime can increase throughput of the actor if necessary without making any changes to the application code.</source>
          <target state="new">By creating multiple replicas of a particular actor the runtime can increase throughput of the actor if necessary without making any changes to the application code.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Multiplexed communication.</source>
          <target state="new">Multiplexed communication.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Actors in Azure Fabric have logical endpoints, and messaging between them is multiplexed across a fixed set of all-to-all physical connections (TCP sockets).</source>
          <target state="new">Actors in Azure Fabric have logical endpoints, and messaging between them is multiplexed across a fixed set of all-to-all physical connections (TCP sockets).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This allows the Azure Fabric Actors runtime to host a very large number (millions) of addressable entities with zero OS overhead per actor.</source>
          <target state="new">This allows the Azure Fabric Actors runtime to host a very large number (millions) of addressable entities with zero OS overhead per actor.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In addition, activation/deactivation of an actor does not incur the cost of registering/unregistering a physical endpoint, such as a TCP port or a HTTP URL.</source>
          <target state="new">In addition, activation/deactivation of an actor does not incur the cost of registering/unregistering a physical endpoint, such as a TCP port or a HTTP URL.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Efficient scheduling.</source>
          <target state="new">Efficient scheduling.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The Azure Fabric runtime schedules execution of a large number of single-threaded actors across a custom thread pool with a thread per physical processor core.</source>
          <target state="new">The Azure Fabric runtime schedules execution of a large number of single-threaded actors across a custom thread pool with a thread per physical processor core.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>With actor code written in the non-blocking continuation-based style (a requirement of the Azure Fabric Actors programming model) application code runs in a very efficient “cooperative” multi-threaded manner with no contention.</source>
          <target state="new">With actor code written in the non-blocking continuation-based style (a requirement of the Azure Fabric Actors programming model) application code runs in a very efficient “cooperative” multi-threaded manner with no contention.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This allows the system to reach high throughput and run at very high CPU utilization (up to 90 + %) with great stability.</source>
          <target state="new">This allows the system to reach high throughput and run at very high CPU utilization (up to 90 + %) with great stability.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The fact that a growth in the number of actors in the system and the load does not lead to additional threads or other OS primitives helps scalability of individual nodes and the whole system.</source>
          <target state="new">The fact that a growth in the number of actors in the system and the load does not lead to additional threads or other OS primitives helps scalability of individual nodes and the whole system.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Explicit asynchrony.</source>
          <target state="new">Explicit asynchrony.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The Azure Fabric Actors programming model makes the asynchronous nature of a distributed application explicit and guides programmers to write non-blocking asynchronous code.</source>
          <target state="new">The Azure Fabric Actors programming model makes the asynchronous nature of a distributed application explicit and guides programmers to write non-blocking asynchronous code.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This enables a large degree of distributed parallelism and overall throughput without the explicit use of multi-threading.</source>
          <target state="new">This enables a large degree of distributed parallelism and overall throughput without the explicit use of multi-threading.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce6524fabd356f9dd0968081a3295252ba46c589</xliffext:olfilehash>
  </header>
</xliff>