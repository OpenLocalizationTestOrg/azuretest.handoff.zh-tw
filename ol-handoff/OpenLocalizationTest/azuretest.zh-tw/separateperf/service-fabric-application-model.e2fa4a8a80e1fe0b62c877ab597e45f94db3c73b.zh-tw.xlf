<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Service Fabric application model</source>
          <target state="new">Service Fabric application model</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to model an application in Service Fabric</source>
          <target state="new">How to model an application in Service Fabric</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Model an application in Service Fabric</source>
          <target state="new">Model an application in Service Fabric</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article provides an overview of the Service Fabric application model and describes how to define an application and service via manifest files and get the application packaged and ready for deployment.</source>
          <target state="new">This article provides an overview of the Service Fabric application model and describes how to define an application and service via manifest files and get the application packaged and ready for deployment.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Understand the application model</source>
          <target state="new">Understand the application model</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An application is a collection of constituent services that perform a certain function(s).</source>
          <target state="new">An application is a collection of constituent services that perform a certain function(s).</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A service performs a complete and standalone function (they can start and run independent of other services) and is composed of code, configuration, and data.</source>
          <target state="new">A service performs a complete and standalone function (they can start and run independent of other services) and is composed of code, configuration, and data.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For each service, code consists of the executable binaries, configuration consists of service settings that can be loaded at runtime, and data consists of arbitrary static data to be consumed by the service.</source>
          <target state="new">For each service, code consists of the executable binaries, configuration consists of service settings that can be loaded at runtime, and data consists of arbitrary static data to be consumed by the service.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each component in this hierarchical application model can be versioned and upgraded independently.</source>
          <target state="new">Each component in this hierarchical application model can be versioned and upgraded independently.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>![][1]</source>
          <target state="new">![][1]</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An application type is a categorization of an application, consisting of a bundle of service types.</source>
          <target state="new">An application type is a categorization of an application, consisting of a bundle of service types.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A service type is a categorization of a service, which can have different settings and configurations but the core functionality remains the same.</source>
          <target state="new">A service type is a categorization of a service, which can have different settings and configurations but the core functionality remains the same.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The instances of a service are the different service configuration variations of the same service type.</source>
          <target state="new">The instances of a service are the different service configuration variations of the same service type.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Classes (or "types") of applications and services are described using XML files (application manifests and service manifests) that are the templates against which applications can be instantiated.</source>
          <target state="new">Classes (or "types") of applications and services are described using XML files (application manifests and service manifests) that are the templates against which applications can be instantiated.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code for different application instances will run as separate processes even when hosted by the same Service Fabric node.</source>
          <target state="new">The code for different application instances will run as separate processes even when hosted by the same Service Fabric node.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Furthermore, the lifecycle of each application instance can be managed (i.e.</source>
          <target state="new">Furthermore, the lifecycle of each application instance can be managed (i.e.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>upgraded) independently.</source>
          <target state="new">upgraded) independently.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following diagram shows how application types are composed of service types, which in turn are composed of code, configuration, and packages.</source>
          <target state="new">The following diagram shows how application types are composed of service types, which in turn are composed of code, configuration, and packages.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>![Service Fabric ApplicationTypes and ServiceTypes][Image1]</source>
          <target state="new">![Service Fabric ApplicationTypes and ServiceTypes][Image1]</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Two different manifest files are used to describe applications and services: the service manifest and application manifest, which are covered in detail in the ensuing sections.</source>
          <target state="new">Two different manifest files are used to describe applications and services: the service manifest and application manifest, which are covered in detail in the ensuing sections.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There can be one or more instances of a service type active in the cluster.</source>
          <target state="new">There can be one or more instances of a service type active in the cluster.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, Stateful service instances, or replicas, achieve high reliability by replicating state between replicas located on different nodes in the cluster (essentially providing redundancy for the service to be available even if one node in a cluster fails).</source>
          <target state="new">For example, Stateful service instances, or replicas, achieve high reliability by replicating state between replicas located on different nodes in the cluster (essentially providing redundancy for the service to be available even if one node in a cluster fails).</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>partitioned service<ept id="p1">](service-fabric-concepts-partitioning.md)</ept> further divides its state (and access patterns to that state) across nodes in the cluster.</source>
          <target state="new">A <bpt id="p1">[</bpt>partitioned service<ept id="p1">](service-fabric-concepts-partitioning.md)</ept> further divides its state (and access patterns to that state) across nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following diagram shows the relationship between applications and service instances, partitions, and replicas.</source>
          <target state="new">The following diagram shows the relationship between applications and service instances, partitions, and replicas.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>![Partitions and Replicas within a Service][Image2]</source>
          <target state="new">![Partitions and Replicas within a Service][Image2]</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Describe a service</source>
          <target state="new">Describe a service</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The service manifest declaratively defines the service type and version and specifies service metadata such as service type, health properties, load balancing metrics, and the service binaries and configuration files.</source>
          <target state="new">The service manifest declaratively defines the service type and version and specifies service metadata such as service type, health properties, load balancing metrics, and the service binaries and configuration files.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Put another way, it describes the code, configuration, and data packages that compose a service package to support one or more service types.</source>
          <target state="new">Put another way, it describes the code, configuration, and data packages that compose a service package to support one or more service types.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Here is a simple example service manifest:</source>
          <target state="new">Here is a simple example service manifest:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Version<ept id="p1">**</ept> attributes are unstructured strings and not parsed by the system.</source>
          <target state="new"><bpt id="p1">**</bpt>Version<ept id="p1">**</ept> attributes are unstructured strings and not parsed by the system.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These are used to version each component for upgrades.</source>
          <target state="new">These are used to version each component for upgrades.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceTypes<ept id="p1">**</ept> declares what service types are supported by the <bpt id="p2">**</bpt>CodePackages<ept id="p2">**</ept> in this manifest.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceTypes<ept id="p1">**</ept> declares what service types are supported by the <bpt id="p2">**</bpt>CodePackages<ept id="p2">**</ept> in this manifest.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When a service is instantiated against one of these service types, all code packages declared in this manifest are activated by running their entry points.</source>
          <target state="new">When a service is instantiated against one of these service types, all code packages declared in this manifest are activated by running their entry points.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The resulting processes are expected to register the supported service types at runtime.</source>
          <target state="new">The resulting processes are expected to register the supported service types at runtime.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note that service types are declared at the manifest level and not the code package level.</source>
          <target state="new">Note that service types are declared at the manifest level and not the code package level.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>So when there are multiple code packages, they are all activated whenever the system looks for any one of the declared service types.</source>
          <target state="new">So when there are multiple code packages, they are all activated whenever the system looks for any one of the declared service types.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SetupEntryPoint<ept id="p1">**</ept> is a privileged entry point that runs with the same credentials as Service Fabric (typically the <bpt id="p2">*</bpt>LocalSystem<ept id="p2">*</ept> account) before any other entry point.</source>
          <target state="new"><bpt id="p1">**</bpt>SetupEntryPoint<ept id="p1">**</ept> is a privileged entry point that runs with the same credentials as Service Fabric (typically the <bpt id="p2">*</bpt>LocalSystem<ept id="p2">*</ept> account) before any other entry point.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The executable specified by <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> is typically the long-running service host, so having a separate setup entry point avoids having to run the service host with high privileges for extended periods of time.</source>
          <target state="new">The executable specified by <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> is typically the long-running service host, so having a separate setup entry point avoids having to run the service host with high privileges for extended periods of time.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The executable specified by <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> is run after <bpt id="p2">**</bpt>SetupEntryPoint<ept id="p2">**</ept> exits successfully.</source>
          <target state="new">The executable specified by <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> is run after <bpt id="p2">**</bpt>SetupEntryPoint<ept id="p2">**</ept> exits successfully.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The resulting process is monitored and re-started (beginning again with <bpt id="p1">**</bpt>SetupEntryPoint<ept id="p1">**</ept>) if it ever terminates or crashes.</source>
          <target state="new">The resulting process is monitored and re-started (beginning again with <bpt id="p1">**</bpt>SetupEntryPoint<ept id="p1">**</ept>) if it ever terminates or crashes.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept> declares a folder named by the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> attribute that contains arbitrary static data to be consumed by the process at runtime.</source>
          <target state="new"><bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept> declares a folder named by the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> attribute that contains arbitrary static data to be consumed by the process at runtime.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConfigPackage<ept id="p1">**</ept> declares a folder named by the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> attribute that contains a <bpt id="p3">*</bpt>Settings.xml<ept id="p3">*</ept> file.</source>
          <target state="new"><bpt id="p1">**</bpt>ConfigPackage<ept id="p1">**</ept> declares a folder named by the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> attribute that contains a <bpt id="p3">*</bpt>Settings.xml<ept id="p3">*</ept> file.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This file contains sections of user-defined, key-value pair settings that the process can read back at runtime.</source>
          <target state="new">This file contains sections of user-defined, key-value pair settings that the process can read back at runtime.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>During upgrade, if only the <bpt id="p1">**</bpt>ConfigPackage<ept id="p1">**</ept> <bpt id="p2">**</bpt>version<ept id="p2">**</ept> has changed, then the running process is not restarted.</source>
          <target state="new">During upgrade, if only the <bpt id="p1">**</bpt>ConfigPackage<ept id="p1">**</ept> <bpt id="p2">**</bpt>version<ept id="p2">**</ept> has changed, then the running process is not restarted.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Instead, a callback notifies the process that configuration settings have changed so they can be reloaded dynamically.</source>
          <target state="new">Instead, a callback notifies the process that configuration settings have changed so they can be reloaded dynamically.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here is an example <bpt id="p1">*</bpt>Settings.xml<ept id="p1">*</ept>  file:</source>
          <target state="new">Here is an example <bpt id="p1">*</bpt>Settings.xml<ept id="p1">*</ept>  file:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> A service manifest can contain multiple code, configuration, and data packages, each of which can be versioned independently.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> A service manifest can contain multiple code, configuration, and data packages, each of which can be versioned independently.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Describe an application</source>
          <target state="new">Describe an application</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The application manifest declaratively describes the application type and version and specifies service composition metadata such as stable names, partitioning scheme, instance count/replication factor, security/isolation policy, placement constraints, configuration overrides, and constituent service types.</source>
          <target state="new">The application manifest declaratively describes the application type and version and specifies service composition metadata such as stable names, partitioning scheme, instance count/replication factor, security/isolation policy, placement constraints, configuration overrides, and constituent service types.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The load balancing domains into which the application is placed are also described.</source>
          <target state="new">The load balancing domains into which the application is placed are also described.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Thus, an application manifest describes elements at the application level and references one or more service manifests to compose an application type.</source>
          <target state="new">Thus, an application manifest describes elements at the application level and references one or more service manifests to compose an application type.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Here is a simple example application manifest:</source>
          <target state="new">Here is a simple example application manifest:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Like service manifests, <bpt id="p1">**</bpt>Version<ept id="p1">**</ept> attributes are unstructured strings and not parsed by the system.</source>
          <target state="new">Like service manifests, <bpt id="p1">**</bpt>Version<ept id="p1">**</ept> attributes are unstructured strings and not parsed by the system.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These are also used to version each component for upgrades.</source>
          <target state="new">These are also used to version each component for upgrades.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceManifestImport<ept id="p1">**</ept> contains references to service manifests composing this application type.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceManifestImport<ept id="p1">**</ept> contains references to service manifests composing this application type.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Imported service manifests determine what service types are valid within this application type.</source>
          <target state="new">Imported service manifests determine what service types are valid within this application type.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DefaultServices<ept id="p1">**</ept> declares service instances that are automatically created whenever an application is instantiated against this application type.</source>
          <target state="new"><bpt id="p1">**</bpt>DefaultServices<ept id="p1">**</ept> declares service instances that are automatically created whenever an application is instantiated against this application type.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Default services are just a convenience and behave like normal services in every respect after they have been created.</source>
          <target state="new">Default services are just a convenience and behave like normal services in every respect after they have been created.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>They are upgraded along with any other services in the application instance and can be removed as well.</source>
          <target state="new">They are upgraded along with any other services in the application instance and can be removed as well.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> An application manifest can contain multiple service manifest imports and default services.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> An application manifest can contain multiple service manifest imports and default services.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each service manifest import can be versioned independently.</source>
          <target state="new">Each service manifest import can be versioned independently.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Package an application</source>
          <target state="new">Package an application</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Package layout</source>
          <target state="new">Package layout</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The application manifest, service manifest(s), and other necessary package files must be organized in a specific layout for deployment into a Service Fabric cluster.</source>
          <target state="new">The application manifest, service manifest(s), and other necessary package files must be organized in a specific layout for deployment into a Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The example manifests in this article would need to be organized in the following directory structure:</source>
          <target state="new">The example manifests in this article would need to be organized in the following directory structure:</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The folders are named to match the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> attributes of each corresponding element.</source>
          <target state="new">The folders are named to match the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> attributes of each corresponding element.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, if the service manifest contained two code packages with names <bpt id="p1">**</bpt>MyCodeA<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MyCodeB<ept id="p2">**</ept>, then there would need to be two folders with the same names containing the necessary binaries for each code package.</source>
          <target state="new">For example, if the service manifest contained two code packages with names <bpt id="p1">**</bpt>MyCodeA<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MyCodeB<ept id="p2">**</ept>, then there would need to be two folders with the same names containing the necessary binaries for each code package.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Building a package using Visual Studio</source>
          <target state="new">Building a package using Visual Studio</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you use Visual Studio 2015 to create your application, you can use the Package command to automatically create a package that matches the layout described above.</source>
          <target state="new">If you use Visual Studio 2015 to create your application, you can use the Package command to automatically create a package that matches the layout described above.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To create a package, simply right click on the application project in Solution Explorer and choose the Package command, as shown below:</source>
          <target state="new">To create a package, simply right click on the application project in Solution Explorer and choose the Package command, as shown below:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>![][2]</source>
          <target state="new">![][2]</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When packaging is complete, you will find the location of the package in the Output window.</source>
          <target state="new">When packaging is complete, you will find the location of the package in the Output window.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note that the packaging step occurs automatically when you deploy or debug your application in Visual Studio.</source>
          <target state="new">Note that the packaging step occurs automatically when you deploy or debug your application in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Testing the package</source>
          <target state="new">Testing the package</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The package structure can be locally verified through PowerShell using the <bpt id="p1">**</bpt>Test-ServiceFabricApplicationPackage<ept id="p1">**</ept> command, which will check for manifest parsing issues and verify all references.</source>
          <target state="new">The package structure can be locally verified through PowerShell using the <bpt id="p1">**</bpt>Test-ServiceFabricApplicationPackage<ept id="p1">**</ept> command, which will check for manifest parsing issues and verify all references.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Note that this command only verifies the structural correctness of the directories and files in the package - it will not verify any of the code or data package contents beyond checking that all necessary files are present:</source>
          <target state="new">Note that this command only verifies the structural correctness of the directories and files in the package - it will not verify any of the code or data package contents beyond checking that all necessary files are present:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This error shows that the <bpt id="p1">*</bpt>MySetup.bat<ept id="p1">*</ept> file referenced in the service manifest <bpt id="p2">**</bpt>SetupEntryPoint<ept id="p2">**</ept> is missing from the code package.</source>
          <target state="new">This error shows that the <bpt id="p1">*</bpt>MySetup.bat<ept id="p1">*</ept> file referenced in the service manifest <bpt id="p2">**</bpt>SetupEntryPoint<ept id="p2">**</ept> is missing from the code package.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>After adding the missing file, the application verification passes:</source>
          <target state="new">After adding the missing file, the application verification passes:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Once the application is packaged correctly and passes verification, then it's ready for deployment.</source>
          <target state="new">Once the application is packaged correctly and passes verification, then it's ready for deployment.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Deploy and remove applications</source>
          <target state="new">Deploy and remove applications</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd2835655d7d0501fbf3de74f144917c22d34164</xliffext:olfilehash>
  </header>
</xliff>