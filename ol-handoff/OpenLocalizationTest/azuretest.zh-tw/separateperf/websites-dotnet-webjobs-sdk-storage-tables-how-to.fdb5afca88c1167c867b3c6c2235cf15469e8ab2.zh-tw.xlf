<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Azure table storage with the WebJobs SDK</source>
          <target state="new">How to use Azure table storage with the WebJobs SDK</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure table storage with the WebJobs SDK.</source>
          <target state="new">Learn how to use Azure table storage with the WebJobs SDK.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create tables, add entities to tables, and read existing tables.</source>
          <target state="new">Create tables, add entities to tables, and read existing tables.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use Azure table storage with the WebJobs SDK</source>
          <target state="new">How to use Azure table storage with the WebJobs SDK</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This guide provides C# code samples that show how to read and write Azure storage tables by using <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.</source>
          <target state="new">This guide provides C# code samples that show how to read and write Azure storage tables by using <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The guide assumes you know <bpt id="p1">[</bpt>how to create a WebJob project in Visual Studio with connection strings that point to your storage account<ept id="p1">](websites-dotnet-webjobs-sdk-get-started.md)</ept>.</source>
          <target state="new">The guide assumes you know <bpt id="p1">[</bpt>how to create a WebJob project in Visual Studio with connection strings that point to your storage account<ept id="p1">](websites-dotnet-webjobs-sdk-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some of the code snippets show the <ph id="ph1">`Table`</ph> attribute used in functions that are <bpt id="p1">[</bpt>called manually<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#manual)</ept>, that is, not by using one of the trigger attributes.</source>
          <target state="new">Some of the code snippets show the <ph id="ph1">`Table`</ph> attribute used in functions that are <bpt id="p1">[</bpt>called manually<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#manual)</ept>, that is, not by using one of the trigger attributes.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="ingress"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to add entities to a table</source>
          <target state="new"><ph id="ph1">&lt;a id="ingress"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to add entities to a table</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To add entities to a table, use the <ph id="ph1">`Table`</ph> attribute with an <ph id="ph2">`ICollector&lt;T&gt;`</ph> or <ph id="ph3">`IAsyncCollector&lt;T&gt;`</ph> parameter where <ph id="ph4">`T`</ph> specifies the schema of the entities you want to add.</source>
          <target state="new">To add entities to a table, use the <ph id="ph1">`Table`</ph> attribute with an <ph id="ph2">`ICollector&lt;T&gt;`</ph> or <ph id="ph3">`IAsyncCollector&lt;T&gt;`</ph> parameter where <ph id="ph4">`T`</ph> specifies the schema of the entities you want to add.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The attribute constructor takes a string parameter that specifies the name of the table.</source>
          <target state="new">The attribute constructor takes a string parameter that specifies the name of the table.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code sample adds <ph id="ph1">`Person`</ph> entities to a table named <bpt id="p1">*</bpt>Ingress<ept id="p1">*</ept>.</source>
          <target state="new">The following code sample adds <ph id="ph1">`Person`</ph> entities to a table named <bpt id="p1">*</bpt>Ingress<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Typically the type you use with <ph id="ph1">`ICollector`</ph> derives from <ph id="ph2">`TableEntity`</ph> or implements <ph id="ph3">`ITableEntity`</ph>, but it doesn't have to.</source>
          <target state="new">Typically the type you use with <ph id="ph1">`ICollector`</ph> derives from <ph id="ph2">`TableEntity`</ph> or implements <ph id="ph3">`ITableEntity`</ph>, but it doesn't have to.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Either of the following <ph id="ph1">`Person`</ph> classes work with the code shown in the preceding <ph id="ph2">`Ingress`</ph> method.</source>
          <target state="new">Either of the following <ph id="ph1">`Person`</ph> classes work with the code shown in the preceding <ph id="ph2">`Ingress`</ph> method.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you want to work directly with the Azure storage API, you can add a <ph id="ph1">`CloudStorageAccount`</ph> parameter to the method signature.</source>
          <target state="new">If you want to work directly with the Azure storage API, you can add a <ph id="ph1">`CloudStorageAccount`</ph> parameter to the method signature.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="monitor"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Real-time monitoring</source>
          <target state="new"><ph id="ph1">&lt;a id="monitor"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Real-time monitoring</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because data ingress functions often process large volumes of data, the WebJobs SDK dashboard provides real-time monitoring data.</source>
          <target state="new">Because data ingress functions often process large volumes of data, the WebJobs SDK dashboard provides real-time monitoring data.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Invocation Log<ept id="p1">**</ept> section tells you if the function is still running.</source>
          <target state="new">The <bpt id="p1">**</bpt>Invocation Log<ept id="p1">**</ept> section tells you if the function is still running.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Ingress function running</source>
          <target state="new">Ingress function running</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Invocation Details<ept id="p1">**</ept> page reports the function's progress (number of entities written) while it's running and gives you an opportunity to abort it.</source>
          <target state="new">The <bpt id="p1">**</bpt>Invocation Details<ept id="p1">**</ept> page reports the function's progress (number of entities written) while it's running and gives you an opportunity to abort it.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Ingress function running</source>
          <target state="new">Ingress function running</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the function finishes, the <bpt id="p1">**</bpt>Invocation Details<ept id="p1">**</ept> page reports the number of rows written.</source>
          <target state="new">When the function finishes, the <bpt id="p1">**</bpt>Invocation Details<ept id="p1">**</ept> page reports the number of rows written.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Ingress function finished</source>
          <target state="new">Ingress function finished</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="multiple"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to read multiple entities from a table</source>
          <target state="new"><ph id="ph1">&lt;a id="multiple"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to read multiple entities from a table</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To read a table, use the <ph id="ph1">`Table`</ph> attribute with an <ph id="ph2">`IQueryable&lt;T&gt;`</ph> parameter where type <ph id="ph3">`T`</ph> derives from <ph id="ph4">`TableEntity`</ph> or implements <ph id="ph5">`ITableEntity`</ph>.</source>
          <target state="new">To read a table, use the <ph id="ph1">`Table`</ph> attribute with an <ph id="ph2">`IQueryable&lt;T&gt;`</ph> parameter where type <ph id="ph3">`T`</ph> derives from <ph id="ph4">`TableEntity`</ph> or implements <ph id="ph5">`ITableEntity`</ph>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code sample reads and logs all rows from the <ph id="ph1">`Ingress`</ph> table:</source>
          <target state="new">The following code sample reads and logs all rows from the <ph id="ph1">`Ingress`</ph> table:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="readone"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to read a single entity from a table</source>
          <target state="new"><ph id="ph1">&lt;a id="readone"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to read a single entity from a table</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There is a <ph id="ph1">`Table`</ph> attribute constructor with two additional parameters that let you specify the partition key and row key when you want to bind to a single table entity.</source>
          <target state="new">There is a <ph id="ph1">`Table`</ph> attribute constructor with two additional parameters that let you specify the partition key and row key when you want to bind to a single table entity.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code sample reads a table row for a <ph id="ph1">`Person`</ph> entity based on partition key and row key values received in a queue message:</source>
          <target state="new">The following code sample reads a table row for a <ph id="ph1">`Person`</ph> entity based on partition key and row key values received in a queue message:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Person`</ph> class in this example does not have to implement <ph id="ph2">`ITableEntity`</ph>.</source>
          <target state="new">The <ph id="ph1">`Person`</ph> class in this example does not have to implement <ph id="ph2">`ITableEntity`</ph>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="storageapi"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to use the .NET Storage API directly to work with a table</source>
          <target state="new"><ph id="ph1">&lt;a id="storageapi"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> How to use the .NET Storage API directly to work with a table</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Table`</ph> attribute with a <ph id="ph2">`CloudTable`</ph> object for more flexibility in working with a table.</source>
          <target state="new">You can also use the <ph id="ph1">`Table`</ph> attribute with a <ph id="ph2">`CloudTable`</ph> object for more flexibility in working with a table.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following code sample uses a <ph id="ph1">`CloudTable`</ph> object to add a single entity to the <bpt id="p1">*</bpt>Ingress<ept id="p1">*</ept> table.</source>
          <target state="new">The following code sample uses a <ph id="ph1">`CloudTable`</ph> object to add a single entity to the <bpt id="p1">*</bpt>Ingress<ept id="p1">*</ept> table.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information about how to use the <ph id="ph1">`CloudTable`</ph> object, see <bpt id="p1">[</bpt>How to use Table Storage from .NET<ept id="p1">](../storage-dotnet-how-to-use-tables.md)</ept>.</source>
          <target state="new">For more information about how to use the <ph id="ph1">`CloudTable`</ph> object, see <bpt id="p1">[</bpt>How to use Table Storage from .NET<ept id="p1">](../storage-dotnet-how-to-use-tables.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Related topics covered by the queues how-to article</source>
          <target state="new"><ph id="ph1">&lt;a id="queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Related topics covered by the queues how-to article</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For information about how to handle table processing triggered by a queue message, or for WebJobs SDK scenarios not specific to table processing, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</source>
          <target state="new">For information about how to handle table processing triggered by a queue message, or for WebJobs SDK scenarios not specific to table processing, see <bpt id="p1">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Topics covered in that article include the following:</source>
          <target state="new">Topics covered in that article include the following:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Async functions</source>
          <target state="new">Async functions</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Multiple instances</source>
          <target state="new">Multiple instances</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="new">Graceful shutdown</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use WebJobs SDK attributes in the body of a function</source>
          <target state="new">Use WebJobs SDK attributes in the body of a function</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Set the SDK connection strings in code</source>
          <target state="new">Set the SDK connection strings in code</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Set values for WebJobs SDK constructor parameters in code</source>
          <target state="new">Set values for WebJobs SDK constructor parameters in code</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Trigger a function manually</source>
          <target state="new">Trigger a function manually</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Write logs</source>
          <target state="new">Write logs</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Next steps</source>
          <target state="new"><ph id="ph1">&lt;a id="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Next steps</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This guide has provided code samples that show how to handle common scenarios for working with Azure tables.</source>
          <target state="new">This guide has provided code samples that show how to handle common scenarios for working with Azure tables.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</source>
          <target state="new">For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3e0fa785eed9bee0bd43db448b83695f4b12505</xliffext:olfilehash>
  </header>
</xliff>