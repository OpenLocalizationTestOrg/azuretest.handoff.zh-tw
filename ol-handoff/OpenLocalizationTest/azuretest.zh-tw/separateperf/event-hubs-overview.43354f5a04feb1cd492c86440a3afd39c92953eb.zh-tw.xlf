<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Event Hubs Overview</source>
          <target state="new">Event Hubs Overview</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction and overview of Azure Event Hubs.</source>
          <target state="new">Introduction and overview of Azure Event Hubs.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs overview</source>
          <target state="new">Azure Event Hubs overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Many modern solutions intend to provide adaptive customer experiences or to improve products through continuous feedback and automated telemetry.</source>
          <target state="new">Many modern solutions intend to provide adaptive customer experiences or to improve products through continuous feedback and automated telemetry.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Such solutions are faced with the challenge of how to securely and reliably process very large amounts of information from many concurrent publishers.</source>
          <target state="new">Such solutions are faced with the challenge of how to securely and reliably process very large amounts of information from many concurrent publishers.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Event Hubs is a managed platform service that provides a foundation for large-scale data intake in a broad variety of scenarios.</source>
          <target state="new">Microsoft Azure Event Hubs is a managed platform service that provides a foundation for large-scale data intake in a broad variety of scenarios.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Examples of such scenarios are behavior tracking in mobile apps, traffic information from web farms, in-game event capture in console games, or telemetry data collected from industrial machines or connected vehicles.</source>
          <target state="new">Examples of such scenarios are behavior tracking in mobile apps, traffic information from web farms, in-game event capture in console games, or telemetry data collected from industrial machines or connected vehicles.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The common role that Event Hubs plays in solution architectures is that it acts as the "front door" for an event pipeline, often called an <bpt id="p1">*</bpt>event ingestor<ept id="p1">*</ept>.</source>
          <target state="new">The common role that Event Hubs plays in solution architectures is that it acts as the "front door" for an event pipeline, often called an <bpt id="p1">*</bpt>event ingestor<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An event ingestor is a component or service that sits between event producers and event consumers to decouple the production of an event stream from the consumption of those events.</source>
          <target state="new">An event ingestor is a component or service that sits between event producers and event consumers to decouple the production of an event stream from the consumption of those events.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs is an event processing service that provides event and telemetry ingress to the cloud at massive scale, with low latency and high reliability.</source>
          <target state="new">Azure Event Hubs is an event processing service that provides event and telemetry ingress to the cloud at massive scale, with low latency and high reliability.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This service, used with other downstream services, is particularly useful in application instrumentation, user experience or workflow processing, and Internet of Things (IoT) scenarios.</source>
          <target state="new">This service, used with other downstream services, is particularly useful in application instrumentation, user experience or workflow processing, and Internet of Things (IoT) scenarios.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Event Hubs provides a message stream handling capability and though an Event Hub is an entity similar to queues and topics, it has characteristics that are very different from traditional enterprise messaging.</source>
          <target state="new">Event Hubs provides a message stream handling capability and though an Event Hub is an entity similar to queues and topics, it has characteristics that are very different from traditional enterprise messaging.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enterprise messaging scenarios commonly require a number of sophisticated capabilities such as sequencing, dead-lettering, transaction support, and strong delivery assurances, while the dominant concern for event intake is high throughput and processing flexibility for event streams.</source>
          <target state="new">Enterprise messaging scenarios commonly require a number of sophisticated capabilities such as sequencing, dead-lettering, transaction support, and strong delivery assurances, while the dominant concern for event intake is high throughput and processing flexibility for event streams.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, Azure Event Hubs capabilities differ from Service Bus topics in that they are strongly biased towards high throughput and event processing scenarios.</source>
          <target state="new">Therefore, Azure Event Hubs capabilities differ from Service Bus topics in that they are strongly biased towards high throughput and event processing scenarios.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As such, Event Hubs do not implement some of the messaging capabilities that are available for topics.</source>
          <target state="new">As such, Event Hubs do not implement some of the messaging capabilities that are available for topics.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you need those capabilities, topics remain the optimal choice.</source>
          <target state="new">If you need those capabilities, topics remain the optimal choice.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An Event Hub is created at the namespace level in Service Bus, similar to queues and topics.</source>
          <target state="new">An Event Hub is created at the namespace level in Service Bus, similar to queues and topics.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Event Hubs uses AMQP and HTTP as its primary API interfaces.</source>
          <target state="new">Event Hubs uses AMQP and HTTP as its primary API interfaces.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following diagram shows the relationship between Event Hubs and Service Bus.</source>
          <target state="new">The following diagram shows the relationship between Event Hubs and Service Bus.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Conceptual overview</source>
          <target state="new">Conceptual overview</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Event Hubs provides message streaming through a partitioned consumer pattern.</source>
          <target state="new">Event Hubs provides message streaming through a partitioned consumer pattern.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Queues and topics use a <bpt id="p1">[</bpt>Competing Consumer<ept id="p1">](https://msdn.microsoft.com/library/dn568101.aspx)</ept> model in which each consumer attempts to read from the same queue or resource.</source>
          <target state="new">Queues and topics use a <bpt id="p1">[</bpt>Competing Consumer<ept id="p1">](https://msdn.microsoft.com/library/dn568101.aspx)</ept> model in which each consumer attempts to read from the same queue or resource.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This competition for resources ultimately results in complexity and scale limits for stream processing applications.</source>
          <target state="new">This competition for resources ultimately results in complexity and scale limits for stream processing applications.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Event Hubs uses a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream.</source>
          <target state="new">Event Hubs uses a partitioned consumer pattern in which each consumer only reads a specific subset, or partition, of the message stream.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This pattern enables horizontal scale for event processing and provides other stream-focused features that are unavailable in queues and topics.</source>
          <target state="new">This pattern enables horizontal scale for event processing and provides other stream-focused features that are unavailable in queues and topics.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Partitions</source>
          <target state="new">Partitions</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A partition is an ordered sequence of events that is held in an Event Hub.</source>
          <target state="new">A partition is an ordered sequence of events that is held in an Event Hub.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As newer events arrive, they are added to the end of this sequence.</source>
          <target state="new">As newer events arrive, they are added to the end of this sequence.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A partition can be thought of as a "commit log."</source>
          <target state="new">A partition can be thought of as a "commit log."</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Partitions retain data for a configured retention time that is set at the Event Hub level.</source>
          <target state="new">Partitions retain data for a configured retention time that is set at the Event Hub level.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This setting applies across all partitions in the Event Hub.</source>
          <target state="new">This setting applies across all partitions in the Event Hub.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Events expire on a time basis; you cannot explicitly delete them.</source>
          <target state="new">Events expire on a time basis; you cannot explicitly delete them.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An Event Hub contains multiple partitions.</source>
          <target state="new">An Event Hub contains multiple partitions.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each partition is independent and contains its own sequence of data.</source>
          <target state="new">Each partition is independent and contains its own sequence of data.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As a result, partitions often grow at different rates.</source>
          <target state="new">As a result, partitions often grow at different rates.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The number of partitions is specified at the Event Hub creation time and must be between 8 and 32.</source>
          <target state="new">The number of partitions is specified at the Event Hub creation time and must be between 8 and 32.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Partitions are a data organization mechanism and are more related to the degree of downstream parallelism required in consuming applications than to Event Hubs throughput.</source>
          <target state="new">Partitions are a data organization mechanism and are more related to the degree of downstream parallelism required in consuming applications than to Event Hubs throughput.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This makes the choice of the number of partitions in an Event Hub directly related to the number of concurrent readers you expect to have.</source>
          <target state="new">This makes the choice of the number of partitions in an Event Hub directly related to the number of concurrent readers you expect to have.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After Event Hub creation, the partition count is not changeable; you should consider this number in terms of long-term expected scale.</source>
          <target state="new">After Event Hub creation, the partition count is not changeable; you should consider this number in terms of long-term expected scale.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can increase the 32 partition limit by contacting the Azure Service Bus team.</source>
          <target state="new">You can increase the 32 partition limit by contacting the Azure Service Bus team.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>While partitions are identifiable and can be sent to directly, it is generally best to avoid sending data to specific partitions.</source>
          <target state="new">While partitions are identifiable and can be sent to directly, it is generally best to avoid sending data to specific partitions.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Instead, you can use higher level constructs introduced in the <bpt id="p1">[</bpt>Event publisher<ept id="p1">](#Event-publisher)</ept> and <bpt id="p2">[</bpt>Publisher Policy<ept id="p2">](#Capacity-and-security)</ept> sections.</source>
          <target state="new">Instead, you can use higher level constructs introduced in the <bpt id="p1">[</bpt>Event publisher<ept id="p1">](#Event-publisher)</ept> and <bpt id="p2">[</bpt>Publisher Policy<ept id="p2">](#Capacity-and-security)</ept> sections.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the context of Event Hubs, messages are referred to as <bpt id="p1">*</bpt>event data<ept id="p1">*</ept>.</source>
          <target state="new">In the context of Event Hubs, messages are referred to as <bpt id="p1">*</bpt>event data<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Event data contains the body of the event, a user defined property bag, and various metadata about the event such as its offset in the partition and its number in the stream sequence.</source>
          <target state="new">Event data contains the body of the event, a user defined property bag, and various metadata about the event such as its offset in the partition and its number in the stream sequence.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Partitions are filled with a sequence of event data.</source>
          <target state="new">Partitions are filled with a sequence of event data.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Event publisher</source>
          <target state="new">Event publisher</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Any entity that sends events or data to an Event Hub is an <bpt id="p1">*</bpt>event publisher<ept id="p1">*</ept>.</source>
          <target state="new">Any entity that sends events or data to an Event Hub is an <bpt id="p1">*</bpt>event publisher<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Event publishers can publish events using either HTTPS or AMQP 1.0.</source>
          <target state="new">Event publishers can publish events using either HTTPS or AMQP 1.0.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Event publishers use a Shared Access Signature (SAS) token to identify themselves to an Event Hub, and can have a unique identity, or use a common SAS token, depending on the requirements of the scenario.</source>
          <target state="new">Event publishers use a Shared Access Signature (SAS) token to identify themselves to an Event Hub, and can have a unique identity, or use a common SAS token, depending on the requirements of the scenario.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information about working with SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</source>
          <target state="new">For more information about working with SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Common publisher tasks</source>
          <target state="new">Common publisher tasks</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This section describes common tasks for event publishers.</source>
          <target state="new">This section describes common tasks for event publishers.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Acquiring a SAS token</source>
          <target state="new">Acquiring a SAS token</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Shared Access Signature (SAS) is the authentication mechanism for Event Hubs.</source>
          <target state="new">Shared Access Signature (SAS) is the authentication mechanism for Event Hubs.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Service Bus provides SAS policies at the namespace and Event Hub level.</source>
          <target state="new">Service Bus provides SAS policies at the namespace and Event Hub level.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A SAS token is generated from a SAS key and is an SHA hash of a URL, encoded in a specific format.</source>
          <target state="new">A SAS token is generated from a SAS key and is an SHA hash of a URL, encoded in a specific format.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Using the name of the key (policy) and the token, Service Bus can regenerate the hash and thus authenticate the sender.</source>
          <target state="new">Using the name of the key (policy) and the token, Service Bus can regenerate the hash and thus authenticate the sender.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Normally, SAS tokens for event publishers are created with only <bpt id="p1">**</bpt>send<ept id="p1">**</ept> privileges on a specific Event Hub.</source>
          <target state="new">Normally, SAS tokens for event publishers are created with only <bpt id="p1">**</bpt>send<ept id="p1">**</ept> privileges on a specific Event Hub.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This SAS token URL mechanism is the basis for publisher identification introduced in the publisher policy.</source>
          <target state="new">This SAS token URL mechanism is the basis for publisher identification introduced in the publisher policy.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information about working with SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</source>
          <target state="new">For more information about working with SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Publishing an event</source>
          <target state="new">Publishing an event</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can publish an event via AMQP 1.0 or HTTPS.</source>
          <target state="new">You can publish an event via AMQP 1.0 or HTTPS.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Service Bus provides an <bpt id="p1">[</bpt>EventHubClient<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventhubclient.aspx)</ept> class for publishing events to an Event Hub from .NET clients.</source>
          <target state="new">Service Bus provides an <bpt id="p1">[</bpt>EventHubClient<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventhubclient.aspx)</ept> class for publishing events to an Event Hub from .NET clients.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For other runtimes and platforms, you can use any AMQP 1.0 client, such as <bpt id="p1">[</bpt>Apache Qpid<ept id="p1">](http://qpid.apache.org/)</ept>.</source>
          <target state="new">For other runtimes and platforms, you can use any AMQP 1.0 client, such as <bpt id="p1">[</bpt>Apache Qpid<ept id="p1">](http://qpid.apache.org/)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can publish events individually, or batched.</source>
          <target state="new">You can publish events individually, or batched.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A single publication (event data instance) has a limit of 256KB, regardless of whether it is a single event or a batch.</source>
          <target state="new">A single publication (event data instance) has a limit of 256KB, regardless of whether it is a single event or a batch.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Publishing events larger than this results in an error.</source>
          <target state="new">Publishing events larger than this results in an error.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It is a best practice for publishers to be unaware of partitions within the Event Hub and to only specify a <bpt id="p1">*</bpt>partition key<ept id="p1">*</ept> (introduced in the next section), or their identity via their SAS token.</source>
          <target state="new">It is a best practice for publishers to be unaware of partitions within the Event Hub and to only specify a <bpt id="p1">*</bpt>partition key<ept id="p1">*</ept> (introduced in the next section), or their identity via their SAS token.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The choice to use AMQP or HTTPS is specific to the usage scenario.</source>
          <target state="new">The choice to use AMQP or HTTPS is specific to the usage scenario.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>AMQP requires the establishment of a persistent bidirectional socket in addition to transport level security (TLS) or SSL/TLS.</source>
          <target state="new">AMQP requires the establishment of a persistent bidirectional socket in addition to transport level security (TLS) or SSL/TLS.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This can be a costly operation in terms of network traffic, but only happens at the beginning of an AMQP session.</source>
          <target state="new">This can be a costly operation in terms of network traffic, but only happens at the beginning of an AMQP session.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>HTTPS has a lower initial overhead, but requires additional SSL overhead for every request.</source>
          <target state="new">HTTPS has a lower initial overhead, but requires additional SSL overhead for every request.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For publishers who frequently publish events, AMQP offers significant performance, latency, and throughput savings.</source>
          <target state="new">For publishers who frequently publish events, AMQP offers significant performance, latency, and throughput savings.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Partition key</source>
          <target state="new">Partition key</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A partition key is a value that is used to map incoming event data into specific partitions for the purposes of data organization.</source>
          <target state="new">A partition key is a value that is used to map incoming event data into specific partitions for the purposes of data organization.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The partition key is a sender-supplied value passed into an Event Hub.</source>
          <target state="new">The partition key is a sender-supplied value passed into an Event Hub.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It is processed through a static hashing function, the result of which creates the partition assignment.</source>
          <target state="new">It is processed through a static hashing function, the result of which creates the partition assignment.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you don't specify a partition key when publishing an event, a round robin assignment is used.</source>
          <target state="new">If you don't specify a partition key when publishing an event, a round robin assignment is used.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When using partition keys, the event publisher is only aware of its partition key, not the partition to which the events are published.</source>
          <target state="new">When using partition keys, the event publisher is only aware of its partition key, not the partition to which the events are published.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This decoupling of key and partition insulates the sender from needing to know too much about the downstream processing and storage of events.</source>
          <target state="new">This decoupling of key and partition insulates the sender from needing to know too much about the downstream processing and storage of events.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Partition keys are important for organizing data for downstream processing, but are fundamentally unrelated to partitions themselves.</source>
          <target state="new">Partition keys are important for organizing data for downstream processing, but are fundamentally unrelated to partitions themselves.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A per-device or user unique identity makes a good partition key, but other attributes such as geography can also be used to group related events into a single partition.</source>
          <target state="new">A per-device or user unique identity makes a good partition key, but other attributes such as geography can also be used to group related events into a single partition.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following image shows event senders using partition keys to pin to partitions.</source>
          <target state="new">The following image shows event senders using partition keys to pin to partitions.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs ensures that any and all events sharing the same partition key value are delivered in order, and to the same partition.</source>
          <target state="new">Azure Event Hubs ensures that any and all events sharing the same partition key value are delivered in order, and to the same partition.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Importantly, if partition keys are used with publisher policies, described in the next section, then the identity of the publisher and the value of the partition key must match.</source>
          <target state="new">Importantly, if partition keys are used with publisher policies, described in the next section, then the identity of the publisher and the value of the partition key must match.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Otherwise, an error occurs.</source>
          <target state="new">Otherwise, an error occurs.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Event consumer</source>
          <target state="new">Event consumer</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Any entity that reads event data from an Event Hub is an event consumer.</source>
          <target state="new">Any entity that reads event data from an Event Hub is an event consumer.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>All event consumers read the event stream through partitions in a consumer group.</source>
          <target state="new">All event consumers read the event stream through partitions in a consumer group.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Each partition should have only one active reader at a time.</source>
          <target state="new">Each partition should have only one active reader at a time.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>All Event Hubs consumers connect via the AMQP 1.0 session, in which events are delivered as they become available.</source>
          <target state="new">All Event Hubs consumers connect via the AMQP 1.0 session, in which events are delivered as they become available.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The client does not need to poll for data availability.</source>
          <target state="new">The client does not need to poll for data availability.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Consumer groups</source>
          <target state="new">Consumer groups</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The publish/subscribe mechanism of Event Hubs is enabled through consumer groups.</source>
          <target state="new">The publish/subscribe mechanism of Event Hubs is enabled through consumer groups.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A consumer group is a view (state, position, or offset) of an entire Event Hub.</source>
          <target state="new">A consumer group is a view (state, position, or offset) of an entire Event Hub.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at their own pace and with their own offsets.</source>
          <target state="new">Consumer groups enable multiple consuming applications to each have a separate view of the event stream, and to read the stream independently at their own pace and with their own offsets.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In a stream processing architecture, each downstream application equates to a consumer group.</source>
          <target state="new">In a stream processing architecture, each downstream application equates to a consumer group.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you want to write event data to long-term storage, then that storage writer application is a consumer group.</source>
          <target state="new">If you want to write event data to long-term storage, then that storage writer application is a consumer group.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Complex event processing is performed by another, separate consumer group.</source>
          <target state="new">Complex event processing is performed by another, separate consumer group.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can only access partitions through a consumer group.</source>
          <target state="new">You can only access partitions through a consumer group.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There is always a default consumer group in an Event Hub, and you can create up to 20 consumer groups for a Standard tier Event Hub.</source>
          <target state="new">There is always a default consumer group in an Event Hub, and you can create up to 20 consumer groups for a Standard tier Event Hub.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following are examples of the consumer group URI convention:</source>
          <target state="new">The following are examples of the consumer group URI convention:</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following image shows the event consumers within consumer groups.</source>
          <target state="new">The following image shows the event consumers within consumer groups.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Stream offsets</source>
          <target state="new">Stream offsets</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An offset is the position of an event within a partition.</source>
          <target state="new">An offset is the position of an event within a partition.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can think of an offset as a client-side cursor.</source>
          <target state="new">You can think of an offset as a client-side cursor.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The offset is a byte numbering of the event.</source>
          <target state="new">The offset is a byte numbering of the event.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This enables an event consumer (reader) to specify a point in the event stream from which they want to begin reading events.</source>
          <target state="new">This enables an event consumer (reader) to specify a point in the event stream from which they want to begin reading events.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can specify the offset as a timestamp or as an offset value.</source>
          <target state="new">You can specify the offset as a timestamp or as an offset value.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Consumers are responsible for storing their own offset values outside of the Event Hubs service.</source>
          <target state="new">Consumers are responsible for storing their own offset values outside of the Event Hubs service.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Within a partition, each event includes an offset.</source>
          <target state="new">Within a partition, each event includes an offset.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This offset is used by consumers to show the location in the event sequence for a given partition.</source>
          <target state="new">This offset is used by consumers to show the location in the event sequence for a given partition.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Offsets can be passed to the Event Hub as either a number or as a timestamp value when a reader connects.</source>
          <target state="new">Offsets can be passed to the Event Hub as either a number or as a timestamp value when a reader connects.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Checkpointing</source>
          <target state="new">Checkpointing</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Checkpointing<ept id="p1">*</ept> is a process by which readers mark or commit their position within a partition event sequence.</source>
          <target state="new"><bpt id="p1">*</bpt>Checkpointing<ept id="p1">*</ept> is a process by which readers mark or commit their position within a partition event sequence.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Checkpointing is the responsibility of the consumer and occurs on a per-partition basis within a consumer group.</source>
          <target state="new">Checkpointing is the responsibility of the consumer and occurs on a per-partition basis within a consumer group.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This means that for each consumer group, each partition reader must keep track of its current position in the event stream, and can inform the service when it considers the data stream complete.</source>
          <target state="new">This means that for each consumer group, each partition reader must keep track of its current position in the event stream, and can inform the service when it considers the data stream complete.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If a reader disconnects from a partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of that partition in that consumer group.</source>
          <target state="new">If a reader disconnects from a partition, when it reconnects it begins reading at the checkpoint that was previously submitted by the last reader of that partition in that consumer group.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>When the reader connects, it passes this offset to the Event Hub to specify the location at which to start reading.</source>
          <target state="new">When the reader connects, it passes this offset to the Event Hub to specify the location at which to start reading.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In this way, you can use checkpointing to both mark events as "complete" by downstream applications, and to provide resiliency in the event of a failover between readers running on different machines.</source>
          <target state="new">In this way, you can use checkpointing to both mark events as "complete" by downstream applications, and to provide resiliency in the event of a failover between readers running on different machines.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Because event data is retained for the retention interval specified at the time the Event Hub is created, it is possible to return to older data by specifying a lower offset from this checkpointing process.</source>
          <target state="new">Because event data is retained for the retention interval specified at the time the Event Hub is created, it is possible to return to older data by specifying a lower offset from this checkpointing process.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Through this mechanism, checkpointing enables both failover resiliency and controlled event stream replay.</source>
          <target state="new">Through this mechanism, checkpointing enables both failover resiliency and controlled event stream replay.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Common consumer tasks</source>
          <target state="new">Common consumer tasks</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This section describes common tasks for Event Hubs event consumers or readers.</source>
          <target state="new">This section describes common tasks for Event Hubs event consumers or readers.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>All Event Hubs consumers connect via AMQP 1.0.</source>
          <target state="new">All Event Hubs consumers connect via AMQP 1.0.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>AMQP 1.0 is a session and state-aware bidirectional communication channel.</source>
          <target state="new">AMQP 1.0 is a session and state-aware bidirectional communication channel.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Each partition has an AMQP 1.0 link session that facilitates the transport of events segregated by partition.</source>
          <target state="new">Each partition has an AMQP 1.0 link session that facilitates the transport of events segregated by partition.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Connecting to a partition</source>
          <target state="new">Connecting to a partition</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In order to consume events from an Event Hub, a consumer must connect to a partition.</source>
          <target state="new">In order to consume events from an Event Hub, a consumer must connect to a partition.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>As mentioned previously, you always access partitions through a consumer group.</source>
          <target state="new">As mentioned previously, you always access partitions through a consumer group.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>As part of the partitioned consumer model, only a single reader should be active on a partition at any one time within a consumer group.</source>
          <target state="new">As part of the partitioned consumer model, only a single reader should be active on a partition at any one time within a consumer group.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>It is common practice when connecting directly to partitions to use a leasing mechanism in order to coordinate reader connections to specific partitions.</source>
          <target state="new">It is common practice when connecting directly to partitions to use a leasing mechanism in order to coordinate reader connections to specific partitions.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This way, it is possible for every partition in a consumer group to have only one active reader.</source>
          <target state="new">This way, it is possible for every partition in a consumer group to have only one active reader.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Managing the position in the sequence for a reader is an important task that is achieved through checkpointing.</source>
          <target state="new">Managing the position in the sequence for a reader is an important task that is achieved through checkpointing.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This functionality is simplified by using the <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)</ept> class for .NET clients.</source>
          <target state="new">This functionality is simplified by using the <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)</ept> class for .NET clients.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)</ept> is an intelligent consumer agent and is described in the next section.</source>
          <target state="new"><bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)</ept> is an intelligent consumer agent and is described in the next section.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Reading events</source>
          <target state="new">Reading events</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>After an AMQP 1.0 session and link is opened for a specific partition, events are delivered to the AMQP 1.0 client by the Event Hubs service.</source>
          <target state="new">After an AMQP 1.0 session and link is opened for a specific partition, events are delivered to the AMQP 1.0 client by the Event Hubs service.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This delivery mechanism enables higher throughput and lower latency than pull-based mechanisms such as HTTP GET.</source>
          <target state="new">This delivery mechanism enables higher throughput and lower latency than pull-based mechanisms such as HTTP GET.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>As events are sent to the client, each event data instance contains important metadata such as the offset and sequence number that are used to facilitate checkpointing on the event sequence.</source>
          <target state="new">As events are sent to the client, each event data instance contains important metadata such as the offset and sequence number that are used to facilitate checkpointing on the event sequence.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Event Hubs</source>
          <target state="new">Event Hubs</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It is the user's responsibility to manage this offset in a way that best enables managing progress in processing the stream.</source>
          <target state="new">It is the user's responsibility to manage this offset in a way that best enables managing progress in processing the stream.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Capacity and security</source>
          <target state="new">Capacity and security</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Event Hubs is a highly scalable parallel architecture for stream ingress.</source>
          <target state="new">Event Hubs is a highly scalable parallel architecture for stream ingress.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>As such, there are several key aspects to consider when sizing and scaling a solution based on Event Hubs.</source>
          <target state="new">As such, there are several key aspects to consider when sizing and scaling a solution based on Event Hubs.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The first of these capacity controls is <bpt id="p1">*</bpt>throughput units<ept id="p1">*</ept>, described in the following section.</source>
          <target state="new">The first of these capacity controls is <bpt id="p1">*</bpt>throughput units<ept id="p1">*</ept>, described in the following section.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Throughput units</source>
          <target state="new">Throughput units</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The throughput capacity of Event Hubs is controlled by throughput units.</source>
          <target state="new">The throughput capacity of Event Hubs is controlled by throughput units.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Throughput units are pre-purchased units of capacity.</source>
          <target state="new">Throughput units are pre-purchased units of capacity.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A single throughput unit includes the following:</source>
          <target state="new">A single throughput unit includes the following:</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Ingress: Up to 1MB per second or 1000 events per second.</source>
          <target state="new">Ingress: Up to 1MB per second or 1000 events per second.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Egress: Up to 2MB per second.</source>
          <target state="new">Egress: Up to 2MB per second.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Ingress is throttled to the amount of capacity provided by the number of throughput units purchased.</source>
          <target state="new">Ingress is throttled to the amount of capacity provided by the number of throughput units purchased.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Sending data above this amount results in a "quota exceeded" exception.</source>
          <target state="new">Sending data above this amount results in a "quota exceeded" exception.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This amount is either 1 MB per second or 1000 events per second, whichever comes first.</source>
          <target state="new">This amount is either 1 MB per second or 1000 events per second, whichever comes first.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Egress does not produce throttling exceptions, but is limited to the amount of data transfer provided for by the purchased throughput units: 2 MB per second per throughput unit.</source>
          <target state="new">Egress does not produce throttling exceptions, but is limited to the amount of data transfer provided for by the purchased throughput units: 2 MB per second per throughput unit.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you receive publishing rate exceptions or are expecting to see higher egress be sure to check how many throughput units you have purchased for the namespace in which the Event Hub was created.</source>
          <target state="new">If you receive publishing rate exceptions or are expecting to see higher egress be sure to check how many throughput units you have purchased for the namespace in which the Event Hub was created.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>To obtain more throughput units, you can adjust the setting on the <bpt id="p1">**</bpt>Namespaces<ept id="p1">**</ept> page on the <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept> tab in the Azure management portal.</source>
          <target state="new">To obtain more throughput units, you can adjust the setting on the <bpt id="p1">**</bpt>Namespaces<ept id="p1">**</ept> page on the <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept> tab in the Azure management portal.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You can also change this setting using the Azure APIs.</source>
          <target state="new">You can also change this setting using the Azure APIs.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>While partitions are a data organization concept, throughput units are purely a capacity concept.</source>
          <target state="new">While partitions are a data organization concept, throughput units are purely a capacity concept.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Throughput units are billed per hour and are pre-purchased.</source>
          <target state="new">Throughput units are billed per hour and are pre-purchased.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Once purchased, throughput units are billed for a minimum of one hour.</source>
          <target state="new">Once purchased, throughput units are billed for a minimum of one hour.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Up to 20 throughput units can be purchased for a Service Bus namespace, and there is an Azure account limit of 20 throughput units.</source>
          <target state="new">Up to 20 throughput units can be purchased for a Service Bus namespace, and there is an Azure account limit of 20 throughput units.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>These throughput units are shared across all Event Hubs in a given namespace.</source>
          <target state="new">These throughput units are shared across all Event Hubs in a given namespace.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Throughput units are provisioned on a best effort basis and may not always be available for immediate purchase.</source>
          <target state="new">Throughput units are provisioned on a best effort basis and may not always be available for immediate purchase.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you require a specific capacity, it is recommended that you purchase those throughput units ahead of time.</source>
          <target state="new">If you require a specific capacity, it is recommended that you purchase those throughput units ahead of time.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If you require more than 20 throughput units, you can contact Microsoft Azure Service Bus support to purchase more throughput units on a commitment basis in blocks of 20, up to the first 100 throughput units.</source>
          <target state="new">If you require more than 20 throughput units, you can contact Microsoft Azure Service Bus support to purchase more throughput units on a commitment basis in blocks of 20, up to the first 100 throughput units.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Beyond that, you can also purchase blocks of 100 throughput units.</source>
          <target state="new">Beyond that, you can also purchase blocks of 100 throughput units.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>It is recommended that you carefully balance throughput units and partitions in order to achieve optimal scale with Event Hubs.</source>
          <target state="new">It is recommended that you carefully balance throughput units and partitions in order to achieve optimal scale with Event Hubs.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A single partition has a maximum scale of one throughput unit.</source>
          <target state="new">A single partition has a maximum scale of one throughput unit.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The number of throughput units should be less than or equal to the number of partitions in an Event Hub.</source>
          <target state="new">The number of throughput units should be less than or equal to the number of partitions in an Event Hub.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For detailed pricing information, see <bpt id="p1">[</bpt>Event Hubs Pricing<ept id="p1">](http://azure.microsoft.com/pricing/details/event-hubs/)</ept>.</source>
          <target state="new">For detailed pricing information, see <bpt id="p1">[</bpt>Event Hubs Pricing<ept id="p1">](http://azure.microsoft.com/pricing/details/event-hubs/)</ept>.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Publisher policy</source>
          <target state="new">Publisher policy</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Event Hubs enables granular control over event producers through <bpt id="p1">*</bpt>publisher policies<ept id="p1">*</ept>.</source>
          <target state="new">Event Hubs enables granular control over event producers through <bpt id="p1">*</bpt>publisher policies<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Publisher policies are a set of run-time features designed to facilitate large numbers of independent event producers.</source>
          <target state="new">Publisher policies are a set of run-time features designed to facilitate large numbers of independent event producers.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>With publisher policies, each publisher uses its own unique identifier when publishing events to an Event Hub, using the following mechanism:</source>
          <target state="new">With publisher policies, each publisher uses its own unique identifier when publishing events to an Event Hub, using the following mechanism:</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You don't have to create publisher names ahead of time, but they must match the SAS token used when publishing an event, in order to ensure independent publisher identities.</source>
          <target state="new">You don't have to create publisher names ahead of time, but they must match the SAS token used when publishing an event, in order to ensure independent publisher identities.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information about SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</source>
          <target state="new">For more information about SAS, see <bpt id="p1">[</bpt>Shared Access Signature Authentication with Service Bus<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>When using publisher policies, the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> value is set to the publisher name.</source>
          <target state="new">When using publisher policies, the <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> value is set to the publisher name.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In order to work properly, these values must match.</source>
          <target state="new">In order to work properly, these values must match.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs provides a hyper-scale event and telemetry processing service that can be used for common application and user workflow monitoring at any scale.</source>
          <target state="new">Azure Event Hubs provides a hyper-scale event and telemetry processing service that can be used for common application and user workflow monitoring at any scale.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>With the ability to provide publish-subscribe capabilities with low latency and at massive scale, Event Hubs serve as the "on ramp" for Big Data.</source>
          <target state="new">With the ability to provide publish-subscribe capabilities with low latency and at massive scale, Event Hubs serve as the "on ramp" for Big Data.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>With publisher-based identity and revocation lists, these capabilities are extended into common Internet of Things scenarios.</source>
          <target state="new">With publisher-based identity and revocation lists, these capabilities are extended into common Internet of Things scenarios.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For more information about developing Event Hubs applications.</source>
          <target state="new">For more information about developing Event Hubs applications.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>see the <bpt id="p1">[</bpt>Event Hubs Programming Guide<ept id="p1">](https://msdn.microsoft.com/library/dn789972.aspx)</ept>.</source>
          <target state="new">see the <bpt id="p1">[</bpt>Event Hubs Programming Guide<ept id="p1">](https://msdn.microsoft.com/library/dn789972.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Now that you've learned about Event Hubs concepts, you can move on to the following scenarios:</source>
          <target state="new">Now that you've learned about Event Hubs concepts, you can move on to the following scenarios:</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Get started with an <bpt id="p1">[</bpt><ept id="p1">Event Hubs tutorial]</ept>.</source>
          <target state="new">Get started with an <bpt id="p1">[</bpt><ept id="p1">Event Hubs tutorial]</ept>.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A complete <bpt id="p1">[</bpt><ept id="p1">sample application that uses Event Hubs]</ept>.</source>
          <target state="new">A complete <bpt id="p1">[</bpt><ept id="p1">sample application that uses Event Hubs]</ept>.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><ept id="p1">queued messaging solution]</ept> using Service Bus queues.</source>
          <target state="new">A <bpt id="p1">[</bpt><ept id="p1">queued messaging solution]</ept> using Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e357e906ca17cb193a72a12555f25a0d1e26df36</xliffext:olfilehash>
  </header>
</xliff>