<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Azure Search from a .NET Application | Microsoft Azure</source>
          <target state="new">How to use Azure Search from a .NET Application | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to use Azure Search from a .NET Application</source>
          <target state="new">How to use Azure Search from a .NET Application</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use Azure Search from a .NET Application</source>
          <target state="new">How to use Azure Search from a .NET Application</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article is a walkthrough to get you up and running with the <bpt id="p1">[</bpt>Azure Search .NET SDK<ept id="p1">](https://msdn.microsoft.com/library/azure/dn951165.aspx)</ept>.</source>
          <target state="new">This article is a walkthrough to get you up and running with the <bpt id="p1">[</bpt>Azure Search .NET SDK<ept id="p1">](https://msdn.microsoft.com/library/azure/dn951165.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use the .NET SDK to implement a rich search experience in your application using Azure Search.</source>
          <target state="new">You can use the .NET SDK to implement a rich search experience in your application using Azure Search.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What's in the Azure Search SDK</source>
          <target state="new">What's in the Azure Search SDK</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The SDK consists of a client library, <ph id="ph1">`Microsoft.Azure.Search`</ph>.</source>
          <target state="new">The SDK consists of a client library, <ph id="ph1">`Microsoft.Azure.Search`</ph>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It enables you to manage your indexes, data sources, and indexers, as well as upload and manage documents, and execute queries, all without having to deal with the details of HTTP and JSON.</source>
          <target state="new">It enables you to manage your indexes, data sources, and indexers, as well as upload and manage documents, and execute queries, all without having to deal with the details of HTTP and JSON.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The client library defines classes like <ph id="ph1">`Index`</ph>, <ph id="ph2">`Field`</ph>, and <ph id="ph3">`Document`</ph>, as well as operations like <ph id="ph4">`Indexes.Create`</ph> and <ph id="ph5">`Documents.Search`</ph> on the <ph id="ph6">`SearchServiceClient`</ph> and <ph id="ph7">`SearchIndexClient`</ph> classes.</source>
          <target state="new">The client library defines classes like <ph id="ph1">`Index`</ph>, <ph id="ph2">`Field`</ph>, and <ph id="ph3">`Document`</ph>, as well as operations like <ph id="ph4">`Indexes.Create`</ph> and <ph id="ph5">`Documents.Search`</ph> on the <ph id="ph6">`SearchServiceClient`</ph> and <ph id="ph7">`SearchIndexClient`</ph> classes.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These classes are organized into the following namespaces:</source>
          <target state="new">These classes are organized into the following namespaces:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Microsoft.Azure.Search</source>
          <target state="new">Microsoft.Azure.Search</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Microsoft.Azure.Search.Models</source>
          <target state="new">Microsoft.Azure.Search.Models</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The current version of the Azure Search .NET SDK is a pre-release version.</source>
          <target state="new">The current version of the Azure Search .NET SDK is a pre-release version.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you would like to provide feedback for us to incorporate in the first stable version, please visit our <bpt id="p1">[</bpt>feedback page<ept id="p1">](http://feedback.azure.com/forums/263029-azure-search)</ept>.</source>
          <target state="new">If you would like to provide feedback for us to incorporate in the first stable version, please visit our <bpt id="p1">[</bpt>feedback page<ept id="p1">](http://feedback.azure.com/forums/263029-azure-search)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The .NET SDK supports version <ph id="ph1">`2015-02-28`</ph> of the Azure Search REST API, documented on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</source>
          <target state="new">The .NET SDK supports version <ph id="ph1">`2015-02-28`</ph> of the Azure Search REST API, documented on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>New features that are <bpt id="p1">*</bpt>not<ept id="p1">*</ept> part of this version, such as support for Microsoft's natural language processors or the <ph id="ph1">`moreLikeThis`</ph> search parameter, are in <bpt id="p2">[</bpt>preview<ept id="p2">](search-api-2015-02-28-preview.md)</ept> and not yet available in the SDK.</source>
          <target state="new">New features that are <bpt id="p1">*</bpt>not<ept id="p1">*</ept> part of this version, such as support for Microsoft's natural language processors or the <ph id="ph1">`moreLikeThis`</ph> search parameter, are in <bpt id="p2">[</bpt>preview<ept id="p2">](search-api-2015-02-28-preview.md)</ept> and not yet available in the SDK.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can check back on <bpt id="p1">[</bpt>Search service versioning<ept id="p1">](https://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> or <bpt id="p2">[</bpt>Latest updates to Azure Search<ept id="p2">](search-latest-updates.md)</ept> for status updates on either feature.</source>
          <target state="new">You can check back on <bpt id="p1">[</bpt>Search service versioning<ept id="p1">](https://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> or <bpt id="p2">[</bpt>Latest updates to Azure Search<ept id="p2">](search-latest-updates.md)</ept> for status updates on either feature.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Other features not supported in this SDK include:</source>
          <target state="new">Other features not supported in this SDK include:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Management Operations<ept id="p1">](https://msdn.microsoft.com/library/azure/dn832684.aspx)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Management Operations<ept id="p1">](https://msdn.microsoft.com/library/azure/dn832684.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Management operations include provisioning Azure Search services and managing API keys.</source>
          <target state="new">Management operations include provisioning Azure Search services and managing API keys.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These will be supported in a separate Azure Search .NET Management SDK in the future.</source>
          <target state="new">These will be supported in a separate Azure Search .NET Management SDK in the future.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Requirements for the SDK</source>
          <target state="new">Requirements for the SDK</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013 or a newer version.</source>
          <target state="new">Visual Studio 2013 or a newer version.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Your own Azure Search service.</source>
          <target state="new">Your own Azure Search service.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In order to use the SDK, you will need the name of your service and one or more API keys.</source>
          <target state="new">In order to use the SDK, you will need the name of your service and one or more API keys.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a service in the portal<ept id="p1">](search-create-service-portal.md)</ept> will help you through these steps.</source>
          <target state="new"><bpt id="p1">[</bpt>Create a service in the portal<ept id="p1">](search-create-service-portal.md)</ept> will help you through these steps.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Download the Azure Search .NET SDK <bpt id="p1">[</bpt>NuGet package<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.Search)</ept> by using "Manage NuGet Packages" in Visual Studio.</source>
          <target state="new">Download the Azure Search .NET SDK <bpt id="p1">[</bpt>NuGet package<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.Search)</ept> by using "Manage NuGet Packages" in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Just search for the package name <ph id="ph1">`Microsoft.Azure.Search`</ph> on NuGet.org.</source>
          <target state="new">Just search for the package name <ph id="ph1">`Microsoft.Azure.Search`</ph> on NuGet.org.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Make sure to select "Include Prerelease" to ensure that the pre-release SDK will appear in the search results.</source>
          <target state="new">Make sure to select "Include Prerelease" to ensure that the pre-release SDK will appear in the search results.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The Azure Search .NET SDK supports applications targeting the .NET Framework 4.0 or higher, as well as Windows Store apps targeting Windows 8.1 and Windows Phone 8.1.</source>
          <target state="new">The Azure Search .NET SDK supports applications targeting the .NET Framework 4.0 or higher, as well as Windows Store apps targeting Windows 8.1 and Windows Phone 8.1.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Silverlight is not supported.</source>
          <target state="new">Silverlight is not supported.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Core Scenarios</source>
          <target state="new">Core Scenarios</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>There are several things you'll need to do in your search application.</source>
          <target state="new">There are several things you'll need to do in your search application.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this tutorial, we'll cover these core scenarios:</source>
          <target state="new">In this tutorial, we'll cover these core scenarios:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creating an index</source>
          <target state="new">Creating an index</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Populating the index with documents</source>
          <target state="new">Populating the index with documents</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Searching for documents using full-text search and filters</source>
          <target state="new">Searching for documents using full-text search and filters</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The sample code that follows illustrates each of these.</source>
          <target state="new">The sample code that follows illustrates each of these.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Feel free to use the code snippets in your own application.</source>
          <target state="new">Feel free to use the code snippets in your own application.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The sample application we'll be exploring creates a new index named "hotels", populates it with a few documents, then executes some search queries.</source>
          <target state="new">The sample application we'll be exploring creates a new index named "hotels", populates it with a few documents, then executes some search queries.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here is the main program, showing the overall flow:</source>
          <target state="new">Here is the main program, showing the overall flow:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We'll walk through this step by step.</source>
          <target state="new">We'll walk through this step by step.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>First we need to create a new <ph id="ph1">`SearchServiceClient`</ph>.</source>
          <target state="new">First we need to create a new <ph id="ph1">`SearchServiceClient`</ph>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This object allows you to manage indexes.</source>
          <target state="new">This object allows you to manage indexes.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In order to construct one, you need to provide your Azure Search service name as well as an admin API key.</source>
          <target state="new">In order to construct one, you need to provide your Azure Search service name as well as an admin API key.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If you provide an incorrect key (for example, a query key where an admin key was required), the <ph id="ph2">`SearchServiceClient`</ph> will throw a <ph id="ph3">`CloudException`</ph> with the error message "Forbidden" the first time you call an operation method on it, such as <ph id="ph4">`Indexes.Create`</ph>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If you provide an incorrect key (for example, a query key where an admin key was required), the <ph id="ph2">`SearchServiceClient`</ph> will throw a <ph id="ph3">`CloudException`</ph> with the error message "Forbidden" the first time you call an operation method on it, such as <ph id="ph4">`Indexes.Create`</ph>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If this happens to you, double-check our API key.</source>
          <target state="new">If this happens to you, double-check our API key.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The next few lines call methods to create an index named "hotels", deleting it first if it already exists.</source>
          <target state="new">The next few lines call methods to create an index named "hotels", deleting it first if it already exists.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>We will walk through these methods a little later.</source>
          <target state="new">We will walk through these methods a little later.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Next, the index needs to be populated.</source>
          <target state="new">Next, the index needs to be populated.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To do this, we will need a <ph id="ph1">`SearchIndexClient`</ph>.</source>
          <target state="new">To do this, we will need a <ph id="ph1">`SearchIndexClient`</ph>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are two ways to obtain one: by constructing it, or by calling <ph id="ph1">`Indexes.GetClient`</ph> on the <ph id="ph2">`SearchServiceClient`</ph>.</source>
          <target state="new">There are two ways to obtain one: by constructing it, or by calling <ph id="ph1">`Indexes.GetClient`</ph> on the <ph id="ph2">`SearchServiceClient`</ph>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>We use the latter for convenience.</source>
          <target state="new">We use the latter for convenience.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> In a typical search application, index management and population is handled by a separate component from search queries.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> In a typical search application, index management and population is handled by a separate component from search queries.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Indexes.GetClient`</ph> is convenient for populating an index because it saves you the trouble of providing another <ph id="ph2">`SearchCredentials`</ph>.</source>
          <target state="new"><ph id="ph1">`Indexes.GetClient`</ph> is convenient for populating an index because it saves you the trouble of providing another <ph id="ph2">`SearchCredentials`</ph>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It does this by passing the admin key that you used to create the <ph id="ph1">`SearchServiceClient`</ph> to the new <ph id="ph2">`SearchIndexClient`</ph>.</source>
          <target state="new">It does this by passing the admin key that you used to create the <ph id="ph1">`SearchServiceClient`</ph> to the new <ph id="ph2">`SearchIndexClient`</ph>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>However, in the part of your application that executes queries, it is better to create the <ph id="ph1">`SearchIndexClient`</ph> directly so that you can pass in a query key instead of an admin key.</source>
          <target state="new">However, in the part of your application that executes queries, it is better to create the <ph id="ph1">`SearchIndexClient`</ph> directly so that you can pass in a query key instead of an admin key.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is consistent with the principle of least privilege and will help to make your application more secure.</source>
          <target state="new">This is consistent with the principle of least privilege and will help to make your application more secure.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can find out more about admin keys and query keys <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</source>
          <target state="new">You can find out more about admin keys and query keys <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Now that we have a <ph id="ph1">`SearchIndexClient`</ph>, we can populate the index.</source>
          <target state="new">Now that we have a <ph id="ph1">`SearchIndexClient`</ph>, we can populate the index.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is done by another method that we will walk through later.</source>
          <target state="new">This is done by another method that we will walk through later.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Finally, we execute a few search queries and display the results, again using the <ph id="ph1">`SearchIndexClient`</ph>:</source>
          <target state="new">Finally, we execute a few search queries and display the results, again using the <ph id="ph1">`SearchIndexClient`</ph>:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you run this application with a valid service name and API key, the output should look like this:</source>
          <target state="new">If you run this application with a valid service name and API key, the output should look like this:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The full source code of the application is provided at the end of this article.</source>
          <target state="new">The full source code of the application is provided at the end of this article.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Next, we will take a closer look at each of the methods called by <ph id="ph1">`Main`</ph>.</source>
          <target state="new">Next, we will take a closer look at each of the methods called by <ph id="ph1">`Main`</ph>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creating an Index</source>
          <target state="new">Creating an Index</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>After creating a <ph id="ph1">`SearchServiceClient`</ph>, the next thing <ph id="ph2">`Main`</ph> does is delete the "hotels" index if it already exists.</source>
          <target state="new">After creating a <ph id="ph1">`SearchServiceClient`</ph>, the next thing <ph id="ph2">`Main`</ph> does is delete the "hotels" index if it already exists.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>That is done by the following method:</source>
          <target state="new">That is done by the following method:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This method uses the given <ph id="ph1">`SearchServiceClient`</ph> to check if the index exists, and if so, delete it.</source>
          <target state="new">This method uses the given <ph id="ph1">`SearchServiceClient`</ph> to check if the index exists, and if so, delete it.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The example code in this article uses the synchronous methods of the Azure Search .NET SDK for simplicity.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The example code in this article uses the synchronous methods of the Azure Search .NET SDK for simplicity.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We recommend that you use the asynchronous methods in your own applications to keep them scalable and responsive.</source>
          <target state="new">We recommend that you use the asynchronous methods in your own applications to keep them scalable and responsive.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For example, in the method above you could use <ph id="ph1">`ExistsAsync`</ph> and <ph id="ph2">`DeleteAsync`</ph> instead of <ph id="ph3">`Exists`</ph> and <ph id="ph4">`Delete`</ph>.</source>
          <target state="new">For example, in the method above you could use <ph id="ph1">`ExistsAsync`</ph> and <ph id="ph2">`DeleteAsync`</ph> instead of <ph id="ph3">`Exists`</ph> and <ph id="ph4">`Delete`</ph>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Next, <ph id="ph1">`Main`</ph> creates a new "hotels" index by calling this method:</source>
          <target state="new">Next, <ph id="ph1">`Main`</ph> creates a new "hotels" index by calling this method:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This method creates a new <ph id="ph1">`Index`</ph> object with a list of <ph id="ph2">`Field`</ph> objects that defines the schema of the new index.</source>
          <target state="new">This method creates a new <ph id="ph1">`Index`</ph> object with a list of <ph id="ph2">`Field`</ph> objects that defines the schema of the new index.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Each field has a name, data type, and several attributes that define its search behavior.</source>
          <target state="new">Each field has a name, data type, and several attributes that define its search behavior.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In addition to fields, you can also add scoring profiles, suggesters, or CORS options to the Index (these are omitted from the sample for brevity).</source>
          <target state="new">In addition to fields, you can also add scoring profiles, suggesters, or CORS options to the Index (these are omitted from the sample for brevity).</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can find more information about the Index object and its constituent parts in the SDK reference on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.search.models.index_members.aspx)</ept>, as well as in the <bpt id="p2">[</bpt>Azure Search REST API reference<ept id="p2">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</source>
          <target state="new">You can find more information about the Index object and its constituent parts in the SDK reference on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.search.models.index_members.aspx)</ept>, as well as in the <bpt id="p2">[</bpt>Azure Search REST API reference<ept id="p2">](https://msdn.microsoft.com/library/azure/dn798935.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Populating the Index</source>
          <target state="new">Populating the Index</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The next step in <ph id="ph1">`Main`</ph> is to populate the newly-created index.</source>
          <target state="new">The next step in <ph id="ph1">`Main`</ph> is to populate the newly-created index.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is done in the following method:</source>
          <target state="new">This is done in the following method:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This method has four parts.</source>
          <target state="new">This method has four parts.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The first creates an array of <ph id="ph1">`Hotel`</ph> objects that will serve as our input data to upload to the index.</source>
          <target state="new">The first creates an array of <ph id="ph1">`Hotel`</ph> objects that will serve as our input data to upload to the index.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This data is hard-coded for simplicity.</source>
          <target state="new">This data is hard-coded for simplicity.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In your own application, your data will likely come from an external data source such as a SQL database.</source>
          <target state="new">In your own application, your data will likely come from an external data source such as a SQL database.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The second part creates an <ph id="ph1">`IndexAction`</ph> for each <ph id="ph2">`Hotel`</ph>, then groups those together in a new <ph id="ph3">`IndexBatch`</ph>.</source>
          <target state="new">The second part creates an <ph id="ph1">`IndexAction`</ph> for each <ph id="ph2">`Hotel`</ph>, then groups those together in a new <ph id="ph3">`IndexBatch`</ph>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The batch is then uploaded to the Azure Search index by the <ph id="ph1">`Documents.Index`</ph> method.</source>
          <target state="new">The batch is then uploaded to the Azure Search index by the <ph id="ph1">`Documents.Index`</ph> method.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> In this example, we are just uploading documents.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> In this example, we are just uploading documents.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If you wanted to merge changes into an existing document or a delete a document, you could create an <ph id="ph1">`IndexAction`</ph> with the corresponding <ph id="ph2">`IndexActionType`</ph>.</source>
          <target state="new">If you wanted to merge changes into an existing document or a delete a document, you could create an <ph id="ph1">`IndexAction`</ph> with the corresponding <ph id="ph2">`IndexActionType`</ph>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>We don't need to specify <ph id="ph1">`IndexActionType`</ph> in this example because the default is <ph id="ph2">`Upload`</ph>.</source>
          <target state="new">We don't need to specify <ph id="ph1">`IndexActionType`</ph> in this example because the default is <ph id="ph2">`Upload`</ph>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The third part of this method is a catch block that handles an important error case for indexing.</source>
          <target state="new">The third part of this method is a catch block that handles an important error case for indexing.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If your Azure Search service fails to index some of the documents in the batch, an <ph id="ph1">`IndexBatchException`</ph> is thrown by <ph id="ph2">`Documents.Index`</ph>.</source>
          <target state="new">If your Azure Search service fails to index some of the documents in the batch, an <ph id="ph1">`IndexBatchException`</ph> is thrown by <ph id="ph2">`Documents.Index`</ph>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This can happen if you are indexing documents while your service is under heavy load.</source>
          <target state="new">This can happen if you are indexing documents while your service is under heavy load.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We strongly recommend explicitly handling this case in your code.</source>
          <target state="new">We strongly recommend explicitly handling this case in your code.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can delay and then retry indexing the documents that failed, or you can log and continue like the sample does, or you can do something else depending on your application's data consistency requirements.</source>
          <target state="new">You can delay and then retry indexing the documents that failed, or you can log and continue like the sample does, or you can do something else depending on your application's data consistency requirements.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Finally, the method delays for two seconds.</source>
          <target state="new">Finally, the method delays for two seconds.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Indexing happens asynchronously in your Azure Search service, so the sample application needs to wait a short time to ensure that the documents are available for searching.</source>
          <target state="new">Indexing happens asynchronously in your Azure Search service, so the sample application needs to wait a short time to ensure that the documents are available for searching.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Delays like this are typically only necessary in demos, tests, and sample applications.</source>
          <target state="new">Delays like this are typically only necessary in demos, tests, and sample applications.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>How the .NET SDK Handles Documents</source>
          <target state="new">How the .NET SDK Handles Documents</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You may be wondering how the Azure Search .NET SDK is able to upload instances of a user-defined class like <ph id="ph1">`Hotel`</ph> to the index.</source>
          <target state="new">You may be wondering how the Azure Search .NET SDK is able to upload instances of a user-defined class like <ph id="ph1">`Hotel`</ph> to the index.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To help answer that question, let's look at the <ph id="ph1">`Hotel`</ph> class:</source>
          <target state="new">To help answer that question, let's look at the <ph id="ph1">`Hotel`</ph> class:</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The first thing to notice is that each public property of <ph id="ph1">`Hotel`</ph> corresponds to a field in the index definition, but with one crucial difference: The name of each field starts with a lower-case letter ("camel case"), while the name of each public property of <ph id="ph2">`Hotel`</ph> starts with an upper-case letter ("Pascal case").</source>
          <target state="new">The first thing to notice is that each public property of <ph id="ph1">`Hotel`</ph> corresponds to a field in the index definition, but with one crucial difference: The name of each field starts with a lower-case letter ("camel case"), while the name of each public property of <ph id="ph2">`Hotel`</ph> starts with an upper-case letter ("Pascal case").</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is a common scenario in .NET applications that perform data-binding where the target schema is outside the control of the application developer.</source>
          <target state="new">This is a common scenario in .NET applications that perform data-binding where the target schema is outside the control of the application developer.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Rather than having to violate the .NET naming guidelines by making property names camel-case, you can tell the SDK to map the property names to camel-case automatically with the <ph id="ph1">`[SerializePropertyNamesAsCamelCase]`</ph> attribute.</source>
          <target state="new">Rather than having to violate the .NET naming guidelines by making property names camel-case, you can tell the SDK to map the property names to camel-case automatically with the <ph id="ph1">`[SerializePropertyNamesAsCamelCase]`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The second important thing about the <ph id="ph1">`Hotel`</ph> class are the data types of the public properties.</source>
          <target state="new">The second important thing about the <ph id="ph1">`Hotel`</ph> class are the data types of the public properties.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The .NET types of  these properties map to their equivalent field types in the index definition.</source>
          <target state="new">The .NET types of  these properties map to their equivalent field types in the index definition.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Category`</ph> string property maps to the <ph id="ph2">`category`</ph> field, which is of type <ph id="ph3">`Edm.String`</ph>.</source>
          <target state="new">For example, the <ph id="ph1">`Category`</ph> string property maps to the <ph id="ph2">`category`</ph> field, which is of type <ph id="ph3">`Edm.String`</ph>.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>There are similar type mappings between <ph id="ph1">`bool?`</ph> and <ph id="ph2">`Edm.Boolean`</ph>, <ph id="ph3">`DateTimeOffset?`</ph> and <ph id="ph4">`Edm.DateTimeOffset`</ph>, etc. The specific rules for the type mapping are documented with the <ph id="ph5">`Documents.Get`</ph> method on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn931291.aspx)</ept>.</source>
          <target state="new">There are similar type mappings between <ph id="ph1">`bool?`</ph> and <ph id="ph2">`Edm.Boolean`</ph>, <ph id="ph3">`DateTimeOffset?`</ph> and <ph id="ph4">`Edm.DateTimeOffset`</ph>, etc. The specific rules for the type mapping are documented with the <ph id="ph5">`Documents.Get`</ph> method on <bpt id="p1">[</bpt>MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn931291.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that value types such as <ph id="ph1">`bool`</ph> and <ph id="ph2">`int`</ph> are nullable in the <ph id="ph3">`Hotel`</ph> class because all primitive field types in Azure Search are nullable.</source>
          <target state="new">Note that value types such as <ph id="ph1">`bool`</ph> and <ph id="ph2">`int`</ph> are nullable in the <ph id="ph3">`Hotel`</ph> class because all primitive field types in Azure Search are nullable.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This ability to use your own classes as documents works in both directions; You can also retrieve search results and have the SDK automatically deserialize them to a type of your choice, as we will see in the next section.</source>
          <target state="new">This ability to use your own classes as documents works in both directions; You can also retrieve search results and have the SDK automatically deserialize them to a type of your choice, as we will see in the next section.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The Azure Search .NET SDK also supports dynamically-typed documents using the <ph id="ph2">`Document`</ph> class, which is a key/value mapping of field names to field values.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The Azure Search .NET SDK also supports dynamically-typed documents using the <ph id="ph2">`Document`</ph> class, which is a key/value mapping of field names to field values.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This is useful in scenarios where you don't know the index schema at design-time, or where it would be inconvenient to bind to specific model classes.</source>
          <target state="new">This is useful in scenarios where you don't know the index schema at design-time, or where it would be inconvenient to bind to specific model classes.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>All the methods in the SDK that deal with documents have overloads that work with the <ph id="ph1">`Document`</ph> class, as well as strongly-typed overloads that take a generic type parameter.</source>
          <target state="new">All the methods in the SDK that deal with documents have overloads that work with the <ph id="ph1">`Document`</ph> class, as well as strongly-typed overloads that take a generic type parameter.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Only the latter are used in the sample code in this tutorial.</source>
          <target state="new">Only the latter are used in the sample code in this tutorial.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can find out more about the <ph id="ph1">`Document`</ph> class <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.search.models.document.aspx)</ept>.</source>
          <target state="new">You can find out more about the <ph id="ph1">`Document`</ph> class <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.search.models.document.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Searching for Documents in the Index</source>
          <target state="new">Searching for Documents in the Index</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The last step in the sample application is to search for some documents in the index.</source>
          <target state="new">The last step in the sample application is to search for some documents in the index.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following method does this:</source>
          <target state="new">The following method does this:</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>First, this method creates a new <ph id="ph1">`SearchParameters`</ph> object.</source>
          <target state="new">First, this method creates a new <ph id="ph1">`SearchParameters`</ph> object.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is used to specify additional options for the query such as sorting, filtering, paging, and faceting.</source>
          <target state="new">This is used to specify additional options for the query such as sorting, filtering, paging, and faceting.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In this example, we're only setting the <ph id="ph1">`Filter`</ph> property.</source>
          <target state="new">In this example, we're only setting the <ph id="ph1">`Filter`</ph> property.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The next step is to actually execute the search query.</source>
          <target state="new">The next step is to actually execute the search query.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This is done using the <ph id="ph1">`Documents.Search`</ph> method.</source>
          <target state="new">This is done using the <ph id="ph1">`Documents.Search`</ph> method.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In this case, we pass the search text to use as a string, plus the search parameters created earlier.</source>
          <target state="new">In this case, we pass the search text to use as a string, plus the search parameters created earlier.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>We also specify <ph id="ph1">`Hotel`</ph> as the type parameter for <ph id="ph2">`Documents.Search`</ph>, which tells the SDK to deserialize documents in the search results into objects of type <ph id="ph3">`Hotel`</ph>.</source>
          <target state="new">We also specify <ph id="ph1">`Hotel`</ph> as the type parameter for <ph id="ph2">`Documents.Search`</ph>, which tells the SDK to deserialize documents in the search results into objects of type <ph id="ph3">`Hotel`</ph>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Finally, this method iterates through all the matches in the search results, printing each document to the console.</source>
          <target state="new">Finally, this method iterates through all the matches in the search results, printing each document to the console.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Let's take a closer look at how this method is called:</source>
          <target state="new">Let's take a closer look at how this method is called:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In the first call, we're looking for all documents containing the query terms "fancy" or "wifi".</source>
          <target state="new">In the first call, we're looking for all documents containing the query terms "fancy" or "wifi".</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the second call, the search text is set to "*", which means "find everything".</source>
          <target state="new">In the second call, the search text is set to "*", which means "find everything".</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can find more information about the search query expression syntax <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798920.aspx)</ept>.</source>
          <target state="new">You can find more information about the search query expression syntax <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798920.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The second call uses an OData <ph id="ph1">`$filter`</ph> expression, <ph id="ph2">`category eq 'Luxury'`</ph>.</source>
          <target state="new">The second call uses an OData <ph id="ph1">`$filter`</ph> expression, <ph id="ph2">`category eq 'Luxury'`</ph>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This constrains the search to only return documents where the <ph id="ph1">`category`</ph> field exactly matches the string "Luxury".</source>
          <target state="new">This constrains the search to only return documents where the <ph id="ph1">`category`</ph> field exactly matches the string "Luxury".</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can find out more about the OData syntax that Azure Search supports <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798921.aspx)</ept>.</source>
          <target state="new">You can find out more about the OData syntax that Azure Search supports <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798921.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Now that you know what these two calls do, it should be easier to see why their output looks like this:</source>
          <target state="new">Now that you know what these two calls do, it should be easier to see why their output looks like this:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The first search returns two documents.</source>
          <target state="new">The first search returns two documents.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The first has "Fancy" in the name, while the second has "wifi" in the <ph id="ph1">`tags`</ph> field.</source>
          <target state="new">The first has "Fancy" in the name, while the second has "wifi" in the <ph id="ph1">`tags`</ph> field.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The second search returns two documents, which happen to be the only documents in the index that have the <ph id="ph1">`category`</ph> field set to "Luxury".</source>
          <target state="new">The second search returns two documents, which happen to be the only documents in the index that have the <ph id="ph1">`category`</ph> field set to "Luxury".</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This step completes the tutorial, but don't stop here.</source>
          <target state="new">This step completes the tutorial, but don't stop here.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Next steps<ept id="p1">**</ept> provides additional resources for learning more about Azure Search.</source>
          <target state="new"><bpt id="p1">**</bpt>Next steps<ept id="p1">**</ept> provides additional resources for learning more about Azure Search.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Deepen your knowledge through <bpt id="p1">[</bpt>videos and other samples and tutorials<ept id="p1">](https://msdn.microsoft.com/library/azure/dn818681.aspx)</ept>.</source>
          <target state="new">Deepen your knowledge through <bpt id="p1">[</bpt>videos and other samples and tutorials<ept id="p1">](https://msdn.microsoft.com/library/azure/dn818681.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Read about features and capabilities in this version of the Azure Search SDK: <bpt id="p1">[</bpt>Azure Search Overview<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798933.aspx)</ept></source>
          <target state="new">Read about features and capabilities in this version of the Azure Search SDK: <bpt id="p1">[</bpt>Azure Search Overview<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798933.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Review <bpt id="p1">[</bpt>naming conventions<ept id="p1">](https://msdn.microsoft.com/library/azure/dn857353.aspx)</ept> to learn the rules for naming various objects.</source>
          <target state="new">Review <bpt id="p1">[</bpt>naming conventions<ept id="p1">](https://msdn.microsoft.com/library/azure/dn857353.aspx)</ept> to learn the rules for naming various objects.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Review <bpt id="p1">[</bpt>supported data types<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798938.aspx)</ept> in Azure Search.</source>
          <target state="new">Review <bpt id="p1">[</bpt>supported data types<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798938.aspx)</ept> in Azure Search.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Sample Application Source Code</source>
          <target state="new">Sample Application Source Code</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Here is the full source code of the sample application used in this walk through.</source>
          <target state="new">Here is the full source code of the sample application used in this walk through.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Note that you will need to replace the service name and API key placeholders in Program.cs with your own values if you want to build and run the sample.</source>
          <target state="new">Note that you will need to replace the service name and API key placeholders in Program.cs with your own values if you want to build and run the sample.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Program.cs:</source>
          <target state="new">Program.cs:</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Hotel.cs:</source>
          <target state="new">Hotel.cs:</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66170c908b8c1fe90bd7de230e80dae495f69a86</xliffext:olfilehash>
  </header>
</xliff>