<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Polling Long-Running Operations</source>
          <target state="new">Polling Long-Running Operations</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic shows how to poll long-running operations.</source>
          <target state="new">This topic shows how to poll long-running operations.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Delivering Live Streaming with Azure Media Services</source>
          <target state="new">Delivering Live Streaming with Azure Media Services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Media Services offers APIs that send requests to Media Services to start operations (for example: create, start, stop, or delete a channel).</source>
          <target state="new">Microsoft Azure Media Services offers APIs that send requests to Media Services to start operations (for example: create, start, stop, or delete a channel).</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These operations are long-running.</source>
          <target state="new">These operations are long-running.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Media Services .NET SDK provides APIs that send the request and wait for the operation to complete (internally, the APIs are polling for operation progress at some intervals).</source>
          <target state="new">The Media Services .NET SDK provides APIs that send the request and wait for the operation to complete (internally, the APIs are polling for operation progress at some intervals).</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, when you call channel.Start(), the method returns after the channel is started.</source>
          <target state="new">For example, when you call channel.Start(), the method returns after the channel is started.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also use the asynchronous version: await channel.StartAsync() (for information about Task-based Asynchronous Pattern, see <bpt id="p1">[</bpt>TAP<ept id="p1">](https://msdn.microsoft.com/library/hh873175(v=vs.110).aspx)</ept>).</source>
          <target state="new">You can also use the asynchronous version: await channel.StartAsync() (for information about Task-based Asynchronous Pattern, see <bpt id="p1">[</bpt>TAP<ept id="p1">](https://msdn.microsoft.com/library/hh873175(v=vs.110).aspx)</ept>).</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>APIs that send an operation request and then poll for the status until the operation is complete are called “polling methods”.</source>
          <target state="new">APIs that send an operation request and then poll for the status until the operation is complete are called “polling methods”.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These methods (especially the Async version) are recommended for rich client applications and/or stateful services.</source>
          <target state="new">These methods (especially the Async version) are recommended for rich client applications and/or stateful services.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are scenarios where an application cannot wait for a long running http request and wants to poll for the operation progress manually.</source>
          <target state="new">There are scenarios where an application cannot wait for a long running http request and wants to poll for the operation progress manually.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A typical example would be a browser interacting with a stateless web service: when the browser requests to create a channel, the web service initiates a long running operation and returns the operation ID to the browser.</source>
          <target state="new">A typical example would be a browser interacting with a stateless web service: when the browser requests to create a channel, the web service initiates a long running operation and returns the operation ID to the browser.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The browser could then ask the web service to get the operation status based on the ID.</source>
          <target state="new">The browser could then ask the web service to get the operation status based on the ID.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Media Services .NET SDK provides APIs that are useful for this scenario.</source>
          <target state="new">The Media Services .NET SDK provides APIs that are useful for this scenario.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These APIs are called “non-polling methods”.</source>
          <target state="new">These APIs are called “non-polling methods”.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The “non-polling methods” have the following naming pattern: Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation (for example, SendCreateOperation).</source>
          <target state="new">The “non-polling methods” have the following naming pattern: Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation (for example, SendCreateOperation).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation methods return the <bpt id="p2">**</bpt>IOperation<ept id="p2">**</ept> object; the returned object contains information that can be used to track the operation.</source>
          <target state="new">Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation methods return the <bpt id="p2">**</bpt>IOperation<ept id="p2">**</ept> object; the returned object contains information that can be used to track the operation.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>OperationAsync methods return <bpt id="p2">**</bpt>Task<ph id="ph1">&lt;IOperation&gt;</ph><ept id="p2">**</ept>.</source>
          <target state="new">The Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>OperationAsync methods return <bpt id="p2">**</bpt>Task<ph id="ph1">&lt;IOperation&gt;</ph><ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Currently, the following classes support non-polling methods:  <bpt id="p1">**</bpt>Channel<ept id="p1">**</ept>, <bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Program<ept id="p3">**</ept>.</source>
          <target state="new">Currently, the following classes support non-polling methods:  <bpt id="p1">**</bpt>Channel<ept id="p1">**</ept>, <bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Program<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To poll for the operation status, use the <bpt id="p1">**</bpt>GetOperation<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>OperationBaseCollection<ept id="p2">**</ept> class.</source>
          <target state="new">To poll for the operation status, use the <bpt id="p1">**</bpt>GetOperation<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>OperationBaseCollection<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the following intervals to check the operation status: for <bpt id="p1">**</bpt>Channel<ept id="p1">**</ept> and <bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept> operations, use 30 seconds; for <bpt id="p3">**</bpt>Program<ept id="p3">**</ept> operations, use 10 seconds.</source>
          <target state="new">Use the following intervals to check the operation status: for <bpt id="p1">**</bpt>Channel<ept id="p1">**</ept> and <bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept> operations, use 30 seconds; for <bpt id="p3">**</bpt>Program<ept id="p3">**</ept> operations, use 10 seconds.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="new">Example</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example defines a class called <bpt id="p1">**</bpt>ChannelOperations<ept id="p1">**</ept>.</source>
          <target state="new">The following example defines a class called <bpt id="p1">**</bpt>ChannelOperations<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This class definition could be a starting point for your web service class definition.</source>
          <target state="new">This class definition could be a starting point for your web service class definition.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For simplicity, the following examples use the non-async versions of methods.</source>
          <target state="new">For simplicity, the following examples use the non-async versions of methods.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The example also shows how the client might use this class.</source>
          <target state="new">The example also shows how the client might use this class.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ChannelOperations class definition</source>
          <target state="new">ChannelOperations class definition</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The client code</source>
          <target state="new">The client code</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c587d99e2c51662d31d3fb9ac6817ceb904d396b</xliffext:olfilehash>
  </header>
</xliff>