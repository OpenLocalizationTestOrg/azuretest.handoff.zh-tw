<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>BizTalk Rules</source>
          <target state="new">BizTalk Rules</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic covers the features of BizTalk Rules and provides instructions on its usage</source>
          <target state="new">This topic covers the features of BizTalk Rules and provides instructions on its usage</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>BizTalk Rules</source>
          <target state="new">BizTalk Rules</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Business Rules encapsulates the policies and decisions that control business processes.</source>
          <target state="new">Business Rules encapsulates the policies and decisions that control business processes.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These policies may be formally defined in procedure manuals, contracts, or agreements, or may exist as knowledge or expertise embodied in employees.</source>
          <target state="new">These policies may be formally defined in procedure manuals, contracts, or agreements, or may exist as knowledge or expertise embodied in employees.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These policies are dynamic and subject to change over time due to changes in business plans, regulations or other reasons.</source>
          <target state="new">These policies are dynamic and subject to change over time due to changes in business plans, regulations or other reasons.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Implementing these policies in traditional programming languages requires substantial time and coordination, and does not enable non-programmers to participate in creation and maintenance of business policies.</source>
          <target state="new">Implementing these policies in traditional programming languages requires substantial time and coordination, and does not enable non-programmers to participate in creation and maintenance of business policies.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>BizTalk Business Rules provides a way to rapidly implement these policies and decouple the rest of the business process.</source>
          <target state="new">BizTalk Business Rules provides a way to rapidly implement these policies and decouple the rest of the business process.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This allows for making required changes to business policies without impacting the rest of the business process.</source>
          <target state="new">This allows for making required changes to business policies without impacting the rest of the business process.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Why Rules</source>
          <target state="new">Why Rules</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are 3 key reasons to use BizTalk Business Rules in business process:</source>
          <target state="new">There are 3 key reasons to use BizTalk Business Rules in business process:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decouple Business logic from Application code</source>
          <target state="new">Decouple Business logic from Application code</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Allow Business Analysts to have more control over business logic management</source>
          <target state="new">Allow Business Analysts to have more control over business logic management</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Changes to business logic go to production faster</source>
          <target state="new">Changes to business logic go to production faster</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Rules Concepts</source>
          <target state="new">Rules Concepts</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Vocabulary</source>
          <target state="new">Vocabulary</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The terms used to define rule conditions and actions are usually expressed by domain or industry-specific nomenclature.</source>
          <target state="new">The terms used to define rule conditions and actions are usually expressed by domain or industry-specific nomenclature.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, an e-mail user writes rules in terms of messages "received from" and messages "received after," while an insurance business analyst writes rules in terms of "risk factors" and "coverage amount."</source>
          <target state="new">For example, an e-mail user writes rules in terms of messages "received from" and messages "received after," while an insurance business analyst writes rules in terms of "risk factors" and "coverage amount."</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Underlying this domain-specific terminology are the technology artifacts (objects, database tables, and XML documents) that implement rule conditions and rule actions.</source>
          <target state="new">Underlying this domain-specific terminology are the technology artifacts (objects, database tables, and XML documents) that implement rule conditions and rule actions.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Vocabularies are designed to bridge the gap between business semantics and implementation.</source>
          <target state="new">Vocabularies are designed to bridge the gap between business semantics and implementation.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, a data binding for an approval status might point to a certain column in a certain row in a certain database, represented as an SQL query.</source>
          <target state="new">For example, a data binding for an approval status might point to a certain column in a certain row in a certain database, represented as an SQL query.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Instead of inserting this sort of complex representation in a rule, you might instead create a vocabulary definition, associated with that data binding, with a friendly name of "Status."</source>
          <target state="new">Instead of inserting this sort of complex representation in a rule, you might instead create a vocabulary definition, associated with that data binding, with a friendly name of "Status."</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Subsequently you can include "Status" in any number of rules, and the rule engine can retrieve the corresponding data from the table.</source>
          <target state="new">Subsequently you can include "Status" in any number of rules, and the rule engine can retrieve the corresponding data from the table.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">_</bpt>vocabulary<ept id="p1">_</ept> is a collection of definitions consisting of friendly names for the computing objects used in rule conditions and actions.</source>
          <target state="new">A <bpt id="p1">_</bpt>vocabulary<ept id="p1">_</ept> is a collection of definitions consisting of friendly names for the computing objects used in rule conditions and actions.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Vocabulary definitions make the rules easier to read, understand, and share by people in a particular business domain.</source>
          <target state="new">Vocabulary definitions make the rules easier to read, understand, and share by people in a particular business domain.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="new">Rule</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Business rules are declarative statements that govern the conduct of business processes.</source>
          <target state="new">Business rules are declarative statements that govern the conduct of business processes.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A rule consists of a condition and actions.</source>
          <target state="new">A rule consists of a condition and actions.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The condition is evaluated, and if it evaluates to true, the rule engine initiates one or more actions.</source>
          <target state="new">The condition is evaluated, and if it evaluates to true, the rule engine initiates one or more actions.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Rules in the Business Rules Framework are defined by using the following format:</source>
          <target state="new">Rules in the Business Rules Framework are defined by using the following format:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>IF<ept id="p1">_</ept> <bpt id="p2">_</bpt>condition<ept id="p2">_</ept> <bpt id="p3">_</bpt>THEN<ept id="p3">_</ept> <bpt id="p4">_</bpt>action<ept id="p4">_</ept></source>
          <target state="new"><bpt id="p1">_</bpt>IF<ept id="p1">_</ept> <bpt id="p2">_</bpt>condition<ept id="p2">_</ept> <bpt id="p3">_</bpt>THEN<ept id="p3">_</ept> <bpt id="p4">_</bpt>action<ept id="p4">_</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="new">Consider the following example:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>IF amount is less than or equal to available funds<ept id="p1">*</ept></source>
          <target state="new"><bpt id="p1">*</bpt>IF amount is less than or equal to available funds<ept id="p1">*</ept></target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>THEN conduct transaction and print receipt<ept id="p1">*</ept></source>
          <target state="new"><bpt id="p1">*</bpt>THEN conduct transaction and print receipt<ept id="p1">*</ept></target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This rule determines whether a transaction will be conducted by applying business logic, in the form of a comparison of two monetary values, in the form of a transaction amount and available funds.</source>
          <target state="new">This rule determines whether a transaction will be conducted by applying business logic, in the form of a comparison of two monetary values, in the form of a transaction amount and available funds.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use the Business Rule to create, modify, and deploy business rules.</source>
          <target state="new">You can use the Business Rule to create, modify, and deploy business rules.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Alternatively, you can perform the preceding tasks programmatically.</source>
          <target state="new">Alternatively, you can perform the preceding tasks programmatically.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="new">Conditions</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A condition is a true/false (Boolean) expression that consists of one or more predicates.</source>
          <target state="new">A condition is a true/false (Boolean) expression that consists of one or more predicates.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In our example, the predicate less than or equal to is applied to the amount and available funds.</source>
          <target state="new">In our example, the predicate less than or equal to is applied to the amount and available funds.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This condition will always evaluate to either true or false.</source>
          <target state="new">This condition will always evaluate to either true or false.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Predicates can be combined with the logical operators AND, OR, and NOT to form a logical expression that is potentially quite large, but will always evaluate to either true or false.</source>
          <target state="new">Predicates can be combined with the logical operators AND, OR, and NOT to form a logical expression that is potentially quite large, but will always evaluate to either true or false.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="new">Actions</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Actions are the functional consequences of condition evaluation.</source>
          <target state="new">Actions are the functional consequences of condition evaluation.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a rule condition is met, a corresponding action or actions are initiated.</source>
          <target state="new">If a rule condition is met, a corresponding action or actions are initiated.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In our example, "conduct transaction" and "print receipt" are actions that are carried out when, and only when, the condition (in this case, "IF amount is less than or equal to available funds") is true.</source>
          <target state="new">In our example, "conduct transaction" and "print receipt" are actions that are carried out when, and only when, the condition (in this case, "IF amount is less than or equal to available funds") is true.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Actions are represented in the Business Rules Framework by performing set operations on XML documents.</source>
          <target state="new">Actions are represented in the Business Rules Framework by performing set operations on XML documents.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Policy</source>
          <target state="new">Policy</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A policy is a logical grouping of rules.</source>
          <target state="new">A policy is a logical grouping of rules.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You compose a policy, save it, test it and, when you are satisfied with the results, use it in a production environment.</source>
          <target state="new">You compose a policy, save it, test it and, when you are satisfied with the results, use it in a production environment.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Policy composition</source>
          <target state="new">Policy composition</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can compose policies in the Rules portal.</source>
          <target state="new">You can compose policies in the Rules portal.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A policy can contain an arbitrarily large set of rules, but typically you compose a policy from rules that pertain to a specific business domain within the context of the application that will be using the policy.</source>
          <target state="new">A policy can contain an arbitrarily large set of rules, but typically you compose a policy from rules that pertain to a specific business domain within the context of the application that will be using the policy.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Policy testing</source>
          <target state="new">Policy testing</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can effectively perform a test run of your policy before it is used in a production environment.</source>
          <target state="new">You can effectively perform a test run of your policy before it is used in a production environment.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The Rules Portal allows you to supply inputs to a policy, run the policy, and view its output.</source>
          <target state="new">The Rules Portal allows you to supply inputs to a policy, run the policy, and view its output.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The output includes logs, rule execution, condition evaluation, and resulting outputs.</source>
          <target state="new">The output includes logs, rule execution, condition evaluation, and resulting outputs.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sample Scenario - Insurance Claims</source>
          <target state="new">Sample Scenario - Insurance Claims</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Let’s take a sample scenario and walk through it as we compose the Business Logic for the same.</source>
          <target state="new">Let’s take a sample scenario and walk through it as we compose the Business Logic for the same.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>![Alt text][1]</source>
          <target state="new">![Alt text][1]</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In a really simple Insurance Claims scenario, the Claimant submits his insurance claim (via any client like website, phone App, etc).</source>
          <target state="new">In a really simple Insurance Claims scenario, the Claimant submits his insurance claim (via any client like website, phone App, etc).</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This Claim Request gets sent to the business’s Claim Processing Unit and based on the result of the processing, the Claim can be either Approved, Rejected or sent along for further manual processing.</source>
          <target state="new">This Claim Request gets sent to the business’s Claim Processing Unit and based on the result of the processing, the Claim can be either Approved, Rejected or sent along for further manual processing.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The Claim Processing Unit in our scenario would be the one encompassing the Business logic for the system.</source>
          <target state="new">The Claim Processing Unit in our scenario would be the one encompassing the Business logic for the system.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Taking a closer look at this unit, we can see the following:</source>
          <target state="new">Taking a closer look at this unit, we can see the following:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>![Alt text][2]</source>
          <target state="new">![Alt text][2]</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Let us now use Business Rules to implement this business logic.</source>
          <target state="new">Let us now use Business Rules to implement this business logic.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creation of Rules Api App</source>
          <target state="new">Creation of Rules Api App</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Login to the Azure Portal and get to the home page.</source>
          <target state="new">Login to the Azure Portal and get to the home page.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Click on New-&gt;Azure Marketplace-&gt;API Apps-&gt;Biz Talk Rules-&gt;Create</source>
          <target state="new">Click on New-&gt;Azure Marketplace-&gt;API Apps-&gt;Biz Talk Rules-&gt;Create</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>![Alt text][3]</source>
          <target state="new">![Alt text][3]</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the new blade that opens, enter the following information:</source>
          <target state="new">In the new blade that opens, enter the following information:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Name – give a name for your Rules API App</source>
          <target state="new">Name – give a name for your Rules API App</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>App Hosting Plan – select or create a web hosting plan</source>
          <target state="new">App Hosting Plan – select or create a web hosting plan</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Pricing Tier – Choose the pricing tier you want this App to reside in</source>
          <target state="new">Pricing Tier – Choose the pricing tier you want this App to reside in</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Resource Group – Select or create Resource group where the App should reside in</source>
          <target state="new">Resource Group – Select or create Resource group where the App should reside in</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Location – Choose the geographic location where you would like the App to be deployed.</source>
          <target state="new">Location – Choose the geographic location where you would like the App to be deployed.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Click on Create.</source>
          <target state="new">Click on Create.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Within a few minutes your BizTalk Rules API App would be created.</source>
          <target state="new">Within a few minutes your BizTalk Rules API App would be created.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Vocabulary Creation</source>
          <target state="new">Vocabulary Creation</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>After creating a BizTalk Rules API App, the next step would be to create vocabularies.</source>
          <target state="new">After creating a BizTalk Rules API App, the next step would be to create vocabularies.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The expectation is that the developer is the more common persona to be doing this exercise.</source>
          <target state="new">The expectation is that the developer is the more common persona to be doing this exercise.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To do this follow the following steps:</source>
          <target state="new">To do this follow the following steps:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Browse to the created API App by Browse-&gt;API Apps-&gt;</source>
          <target state="new">Browse to the created API App by Browse-&gt;API Apps-&gt;</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This should get you to the Rules API App Dashboard similar to below:</source>
          <target state="new">This should get you to the Rules API App Dashboard similar to below:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>![Alt text][4]</source>
          <target state="new">![Alt text][4]</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>2.Next Click on “Vocabulary definitions”.</source>
          <target state="new">2.Next Click on “Vocabulary definitions”.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This would show you the Vocabulary Authoring Screen.</source>
          <target state="new">This would show you the Vocabulary Authoring Screen.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Click on “Add” to begin adding new vocabulary definitions.</source>
          <target state="new">Click on “Add” to begin adding new vocabulary definitions.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>There are 2 types of vocabulary definitions currently supported – Literal and XML.</source>
          <target state="new">There are 2 types of vocabulary definitions currently supported – Literal and XML.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Literal Definition</source>
          <target state="new">Literal Definition</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>After clicking on “Add”, a new “Add Definition” Blade Opens up.</source>
          <target state="new">After clicking on “Add”, a new “Add Definition” Blade Opens up.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Enter the following values</source>
          <target state="new">Enter the following values</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Name – only alphanumeric characters are expected without any special characters.</source>
          <target state="new">Name – only alphanumeric characters are expected without any special characters.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This should also be unique to your existing vocabulary definition list.</source>
          <target state="new">This should also be unique to your existing vocabulary definition list.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Description – optional field.</source>
          <target state="new">Description – optional field.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Type – there are 2 types supported.</source>
          <target state="new">Type – there are 2 types supported.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Choose Literal in this example</source>
          <target state="new">Choose Literal in this example</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Input type – this allows users to select the data type of the definition.</source>
          <target state="new">Input type – this allows users to select the data type of the definition.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Currently 4 data types are selectable:</source>
          <target state="new">Currently 4 data types are selectable:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>i.</source>
          <target state="new">i.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>String – these values must be entered in double quotes (“Example String”)</source>
          <target state="new">String – these values must be entered in double quotes (“Example String”)</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>ii.</source>
          <target state="new">ii.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Boolean – this can either be true or false</source>
          <target state="new">Boolean – this can either be true or false</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>iii.</source>
          <target state="new">iii.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Number – can be any decimal number</source>
          <target state="new">Number – can be any decimal number</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>iv.</source>
          <target state="new">iv.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>DateTime – this means that the def is of type date type.</source>
          <target state="new">DateTime – this means that the def is of type date type.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Data must be entered using this format – mm/dd/yyyy hh:mm:ss AM\PM</source>
          <target state="new">Data must be entered using this format – mm/dd/yyyy hh:mm:ss AM\PM</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>v.</source>
          <target state="new">v.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Input – This is where you enter the value of your definition.</source>
          <target state="new">Input – This is where you enter the value of your definition.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The values entered here must conform to the chosen data type.</source>
          <target state="new">The values entered here must conform to the chosen data type.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>User can either enter a single value, a set of values separated by commas, or a range of values using keyword to.</source>
          <target state="new">User can either enter a single value, a set of values separated by commas, or a range of values using keyword to.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For eg., user can enter unique value 1; a set 1, 2, 3; or a range 1 to 5.</source>
          <target state="new">For eg., user can enter unique value 1; a set 1, 2, 3; or a range 1 to 5.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Note that range is only supported for number.</source>
          <target state="new">Note that range is only supported for number.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>![Alt text][5]</source>
          <target state="new">![Alt text][5]</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>XML Definition</source>
          <target state="new">XML Definition</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If Vocabulary Type is chosen as XML, the following inputs needs to be specified</source>
          <target state="new">If Vocabulary Type is chosen as XML, the following inputs needs to be specified</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>a.</source>
          <target state="new">a.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Schema – Clicking on this will open a new blade allowing user to either choose from a list of already uploaded schemas or allowing to upload a new one.</source>
          <target state="new">Schema – Clicking on this will open a new blade allowing user to either choose from a list of already uploaded schemas or allowing to upload a new one.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>b.</source>
          <target state="new">b.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>XPATH – this input gets unlocked only after choosing a schema in the previous step.</source>
          <target state="new">XPATH – this input gets unlocked only after choosing a schema in the previous step.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Clicking on this will display the schema that was selected and allows the user to select the node for which a vocabulary definition needs to be created.</source>
          <target state="new">Clicking on this will display the schema that was selected and allows the user to select the node for which a vocabulary definition needs to be created.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>c.</source>
          <target state="new">c.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>FACT – This input identifies which data object would be fed to the rules engine for processing.</source>
          <target state="new">FACT – This input identifies which data object would be fed to the rules engine for processing.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This is an advanced property and by default is set to the parent of the selected XPATH.</source>
          <target state="new">This is an advanced property and by default is set to the parent of the selected XPATH.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>FACT becomes particularly important for chaining and collection scenarios.</source>
          <target state="new">FACT becomes particularly important for chaining and collection scenarios.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>![Alt text][6]</source>
          <target state="new">![Alt text][6]</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Add Bulk</source>
          <target state="new">Add Bulk</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The above steps have captured the experience for creating Vocabulary definitions.</source>
          <target state="new">The above steps have captured the experience for creating Vocabulary definitions.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Once created, the created vocabulary definitions will appear in list form.</source>
          <target state="new">Once created, the created vocabulary definitions will appear in list form.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>There are requirements to be able to generate multiple definitions from the same schema instead of repeating the above steps every single time.</source>
          <target state="new">There are requirements to be able to generate multiple definitions from the same schema instead of repeating the above steps every single time.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This is where Add Bulk capability becomes very useful.</source>
          <target state="new">This is where Add Bulk capability becomes very useful.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Clicking on “Add Bulk” will take you to a new blade.</source>
          <target state="new">Clicking on “Add Bulk” will take you to a new blade.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The first step is to select the schema for which multiple definitions are to be created.</source>
          <target state="new">The first step is to select the schema for which multiple definitions are to be created.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Clicking on this will open a new blade allowing user to either choose from a list of already uploaded schemas or allowing to upload a new one.</source>
          <target state="new">Clicking on this will open a new blade allowing user to either choose from a list of already uploaded schemas or allowing to upload a new one.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Now the XPATHS property gets unlocked.</source>
          <target state="new">Now the XPATHS property gets unlocked.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Clicking on this will open the Schema Viewer where multiple nodes can be selected.</source>
          <target state="new">Clicking on this will open the Schema Viewer where multiple nodes can be selected.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The names for the multiple definitions created will default to the name of the node selected.</source>
          <target state="new">The names for the multiple definitions created will default to the name of the node selected.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>These can always be modified after creation.</source>
          <target state="new">These can always be modified after creation.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>![Alt text][7]</source>
          <target state="new">![Alt text][7]</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Policy Creation</source>
          <target state="new">Policy Creation</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Once the developer has created required vocabularies, the expectation is that the Business Analyst would be the one creating Business Policies via the Azure Portal.</source>
          <target state="new">Once the developer has created required vocabularies, the expectation is that the Business Analyst would be the one creating Business Policies via the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>1.  On the Rules App created, there is a Policy lens clicking which the user will go into the Policy creation page.</source>
          <target state="new">1.  On the Rules App created, there is a Policy lens clicking which the user will go into the Policy creation page.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>2.  This page will show the list of policies, this particular Rules App has.</source>
          <target state="new">2.  This page will show the list of policies, this particular Rules App has.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>User can add a new Policy by simply typing a policy name and hitting tab.</source>
          <target state="new">User can add a new Policy by simply typing a policy name and hitting tab.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Multiple policies can reside in a single Rules API App.</source>
          <target state="new">Multiple policies can reside in a single Rules API App.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>3.  Clicking on the created Policy will take the user to the Policy details page where one can see the rules that are in the policy.</source>
          <target state="new">3.  Clicking on the created Policy will take the user to the Policy details page where one can see the rules that are in the policy.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>![Alt text][8]</source>
          <target state="new">![Alt text][8]</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>4.  Click on “Add New” to add a new rule.</source>
          <target state="new">4.  Click on “Add New” to add a new rule.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This will take you to a new blade.</source>
          <target state="new">This will take you to a new blade.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Rule Creation</source>
          <target state="new">Rule Creation</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A rule is collection of condition and action statements.</source>
          <target state="new">A rule is collection of condition and action statements.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The actions get executed if the condition evaluates to true.</source>
          <target state="new">The actions get executed if the condition evaluates to true.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In the Create Rule blade, give a unique rule name (for that policy) and description (optional).</source>
          <target state="new">In the Create Rule blade, give a unique rule name (for that policy) and description (optional).</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The Condition box can be used to create complex conditional statements.</source>
          <target state="new">The Condition box can be used to create complex conditional statements.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Following are the keywords supported:</source>
          <target state="new">Following are the keywords supported:</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>And – conditional operator</source>
          <target state="new">And – conditional operator</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Or – conditional operator</source>
          <target state="new">Or – conditional operator</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>does\_not\_exist</source>
          <target state="new">does\_not\_exist</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>exists</source>
          <target state="new">exists</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="new">false</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>is\_equal\_to</source>
          <target state="new">is\_equal\_to</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>is\_greater\_than</source>
          <target state="new">is\_greater\_than</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>is\_greater\_than\_equal\_to</source>
          <target state="new">is\_greater\_than\_equal\_to</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>is\_in</source>
          <target state="new">is\_in</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>is\_less\_than</source>
          <target state="new">is\_less\_than</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>is\_less\_than\_equal\_to</source>
          <target state="new">is\_less\_than\_equal\_to</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>is\_not\_in</source>
          <target state="new">is\_not\_in</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>is\_not\_equal\_to</source>
          <target state="new">is\_not\_equal\_to</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>mod</source>
          <target state="new">mod</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The Action(Then) box can contain multiple statements, one per line, to create actions that are to be executed.</source>
          <target state="new">The Action(Then) box can contain multiple statements, one per line, to create actions that are to be executed.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Following are the keywords supported:</source>
          <target state="new">Following are the keywords supported:</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>equals</source>
          <target state="new">equals</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="new">false</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>halt</source>
          <target state="new">halt</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>mod</source>
          <target state="new">mod</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="new">null</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>update</source>
          <target state="new">update</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Condition and action boxes provide Intellisense to help user author a rule quickly.</source>
          <target state="new">Condition and action boxes provide Intellisense to help user author a rule quickly.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This can be triggered by hitting ctrl+space or by just starting to type.</source>
          <target state="new">This can be triggered by hitting ctrl+space or by just starting to type.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Keywords matching typed characters will automatically be filtered down and shown.</source>
          <target state="new">Keywords matching typed characters will automatically be filtered down and shown.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The intellisense window will show all keywords and vocabulary definitions.</source>
          <target state="new">The intellisense window will show all keywords and vocabulary definitions.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>![Alt text][9]</source>
          <target state="new">![Alt text][9]</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Explicit Forward Chaining</source>
          <target state="new">Explicit Forward Chaining</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>BizTalk Rules supports explicit forward chaining.</source>
          <target state="new">BizTalk Rules supports explicit forward chaining.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>What this means is that if users would like to re-evaluate rules in response to certain actions, they can trigger this by using certain keywords.</source>
          <target state="new">What this means is that if users would like to re-evaluate rules in response to certain actions, they can trigger this by using certain keywords.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The following are the keywords supported:</source>
          <target state="new">The following are the keywords supported:</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>update</source>
          <target state="new">update</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>– this keyword re-evaluates all rules that use the specified vocabulary definition in its condition.</source>
          <target state="new">– this keyword re-evaluates all rules that use the specified vocabulary definition in its condition.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Halt – this keyword stops all rule executions</source>
          <target state="new">Halt – this keyword stops all rule executions</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Enable\Disable Rules</source>
          <target state="new">Enable\Disable Rules</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Each rule in the policy can be enabled or disabled.</source>
          <target state="new">Each rule in the policy can be enabled or disabled.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>By default all rules are enabled.</source>
          <target state="new">By default all rules are enabled.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Disabled rules wont be executed during policy execution.</source>
          <target state="new">Disabled rules wont be executed during policy execution.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Enable\Disable rules can be done either from the rule blade directly – the commands are available in the command bar at the top of the blade, or from the policy, the context menu (right-click on a rule) has the option to enable\disable.</source>
          <target state="new">Enable\Disable rules can be done either from the rule blade directly – the commands are available in the command bar at the top of the blade, or from the policy, the context menu (right-click on a rule) has the option to enable\disable.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Rule Priority</source>
          <target state="new">Rule Priority</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>All the rules of a policy are executed in order.</source>
          <target state="new">All the rules of a policy are executed in order.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority of execution is determined by the order in which they occur in the policy.</source>
          <target state="new">The priority of execution is determined by the order in which they occur in the policy.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This priority can be changed by simply dragging and dropping the rule.</source>
          <target state="new">This priority can be changed by simply dragging and dropping the rule.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Test Policy</source>
          <target state="new">Test Policy</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>After authoring your policy, before using it in production, there is provision for testing the policy.</source>
          <target state="new">After authoring your policy, before using it in production, there is provision for testing the policy.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>By using the “Test Policy” command, users can get into the Test Policy blade.</source>
          <target state="new">By using the “Test Policy” command, users can get into the Test Policy blade.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In this blade you can see a list of vocabulary definitions that are used in the policy that require a user input.</source>
          <target state="new">In this blade you can see a list of vocabulary definitions that are used in the policy that require a user input.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Users can manually add values for these inputs for their test scenario.</source>
          <target state="new">Users can manually add values for these inputs for their test scenario.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Alternately, users can also choose to import test XMLs for inputs.</source>
          <target state="new">Alternately, users can also choose to import test XMLs for inputs.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Once all the inputs are in, the test can be run and the outputs for each vocabulary definition will be displayed in the output column for easy comparison.</source>
          <target state="new">Once all the inputs are in, the test can be run and the outputs for each vocabulary definition will be displayed in the output column for easy comparison.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>To view Business Analyst friendly logs, click on “View Logs” to view the execution logs.</source>
          <target state="new">To view Business Analyst friendly logs, click on “View Logs” to view the execution logs.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To save the logs, the “Save Output” option is available to store all test related data for independent analysis.</source>
          <target state="new">To save the logs, the “Save Output” option is available to store all test related data for independent analysis.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Using Rules in Logic Apps</source>
          <target state="new">Using Rules in Logic Apps</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Once the policy has been authored and tested, it is now ready for consumption.</source>
          <target state="new">Once the policy has been authored and tested, it is now ready for consumption.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Users can create a new Logic App by doing New-&gt;Logic App.</source>
          <target state="new">Users can create a new Logic App by doing New-&gt;Logic App.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>In the designer, BizTalk Rules is  available in the gallery to the right.</source>
          <target state="new">In the designer, BizTalk Rules is  available in the gallery to the right.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This can now be dragged and dropped onto the designer surface.</source>
          <target state="new">This can now be dragged and dropped onto the designer surface.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Once this is done, there will be an option to choose which Rules API App(Action) to target.</source>
          <target state="new">Once this is done, there will be an option to choose which Rules API App(Action) to target.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Actions include the list of policies that are to be executed.</source>
          <target state="new">Actions include the list of policies that are to be executed.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Choose a specific policy after which the inputs required for the policy needs to be input.</source>
          <target state="new">Choose a specific policy after which the inputs required for the policy needs to be input.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Users can use the output from the Rules API App downstream for further decision making.</source>
          <target state="new">Users can use the output from the Rules API App downstream for further decision making.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Using Rules via APIs</source>
          <target state="new">Using Rules via APIs</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The Rules API App can also be invoked using a rich set of APIs available.</source>
          <target state="new">The Rules API App can also be invoked using a rich set of APIs available.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This way users aren’t restricted to just using flows and can use Rules in any application by making REST calls.</source>
          <target state="new">This way users aren’t restricted to just using flows and can use Rules in any application by making REST calls.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The exact REST APIs available can be viewed by clicking on the "API Definiton" lens in the Rules dashboard.</source>
          <target state="new">The exact REST APIs available can be viewed by clicking on the "API Definiton" lens in the Rules dashboard.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>![Alt text][10]</source>
          <target state="new">![Alt text][10]</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Following is an example of how one might use this API in C</source>
          <target state="new">Following is an example of how one might use this API in C</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Note that the above Rules API App has its security settings set to "Public Anon".</source>
          <target state="new">Note that the above Rules API App has its security settings set to "Public Anon".</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This can be set  from within the API App using - All settings-&gt;Application Settings -&gt; Access Level</source>
          <target state="new">This can be set  from within the API App using - All settings-&gt;Application Settings -&gt; Access Level</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>![Alt text][11]</source>
          <target state="new">![Alt text][11]</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Editing Vocabulary and Policy</source>
          <target state="new">Editing Vocabulary and Policy</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>One of the main advantages of using Business Rules is that changes to business logic can be pushed out to production a lot faster.</source>
          <target state="new">One of the main advantages of using Business Rules is that changes to business logic can be pushed out to production a lot faster.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Any change made to vocabulary and policies is immediately applied in production.</source>
          <target state="new">Any change made to vocabulary and policies is immediately applied in production.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>User simply needs to browse to the respective vocabulary definition or policy and make the change to have it come into effect.</source>
          <target state="new">User simply needs to browse to the respective vocabulary definition or policy and make the change to have it come into effect.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeb8abc0866b0e164a12476bd84e0d93c5b10c31</xliffext:olfilehash>
  </header>
</xliff>