<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Connecting to Media Services Account using .NET</source>
          <target state="new">Connecting to Media Services Account using .NET</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to connect to Media Services uisng .NET.</source>
          <target state="new">This topic demonstrates how to connect to Media Services uisng .NET.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Connecting to Media Services Account using Media Services SDK for .NET</source>
          <target state="new">Connecting to Media Services Account using Media Services SDK for .NET</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>REST</source>
          <target state="new">REST</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes how to obtain a programmatic connection to Microsoft Azure Media Services when you are programming with the Media Services SDK for .NET.</source>
          <target state="new">This topic describes how to obtain a programmatic connection to Microsoft Azure Media Services when you are programming with the Media Services SDK for .NET.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Connecting to Media Services</source>
          <target state="new">Connecting to Media Services</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To connect to Media Services programmatically, you must have previously set up an Azure account, configured Media Services on that account, and then set up a Visual Studio project for development with the Media Services SDK for .NET.</source>
          <target state="new">To connect to Media Services programmatically, you must have previously set up an Azure account, configured Media Services on that account, and then set up a Visual Studio project for development with the Media Services SDK for .NET.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see Setup for Development with the Media Services SDK for .NET.</source>
          <target state="new">For more information, see Setup for Development with the Media Services SDK for .NET.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At the end of the Media Services account setup process, you obtained the following required connection values.</source>
          <target state="new">At the end of the Media Services account setup process, you obtained the following required connection values.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use these to make programmatic connections to Media Services.</source>
          <target state="new">Use these to make programmatic connections to Media Services.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Your Media Services account name.</source>
          <target state="new">Your Media Services account name.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Your Media Services account key.</source>
          <target state="new">Your Media Services account key.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To find these values, go to the Azure Managment Portal, select your Media Service account, and click on the “<bpt id="p1">**</bpt>MANAGE KEYS<ept id="p1">**</ept>” icon on the bottom of the portal window.</source>
          <target state="new">To find these values, go to the Azure Managment Portal, select your Media Service account, and click on the “<bpt id="p1">**</bpt>MANAGE KEYS<ept id="p1">**</ept>” icon on the bottom of the portal window.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Clicking on the icon next to each text box copies the value to the system clipboard.</source>
          <target state="new">Clicking on the icon next to each text box copies the value to the system clipboard.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a CloudMediaContext Instance</source>
          <target state="new">Creating a CloudMediaContext Instance</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To start programming against Media Services you need to create a <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> instance that represents the server context.</source>
          <target state="new">To start programming against Media Services you need to create a <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> instance that represents the server context.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> includes references to important collections including jobs, assets, files, access policies, and locators.</source>
          <target state="new">The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> includes references to important collections including jobs, assets, files, access policies, and locators.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> class is not thread safe.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> class is not thread safe.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You should create a new CloudMediaContext per thread or per set of operations.</source>
          <target state="new">You should create a new CloudMediaContext per thread or per set of operations.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CloudMediaContext has five constructor overloads.</source>
          <target state="new">CloudMediaContext has five constructor overloads.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is recommended to use constructors that take <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> as a parameter.</source>
          <target state="new">It is recommended to use constructors that take <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> as a parameter.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>Reusing Access Control Service Tokens<ept id="p1">**</ept> that follows.</source>
          <target state="new">For more information, see the <bpt id="p1">**</bpt>Reusing Access Control Service Tokens<ept id="p1">**</ept> that follows.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example uses the public CloudMediaContext(MediaServicesCredentials credentials) constructor:</source>
          <target state="new">The following example uses the public CloudMediaContext(MediaServicesCredentials credentials) constructor:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reusing Access Control Service Tokens</source>
          <target state="new">Reusing Access Control Service Tokens</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This section shows how to reuse Access Control Service tokens by using CloudMediaContext constructors that take MediaServicesCredentials as a parameter.</source>
          <target state="new">This section shows how to reuse Access Control Service tokens by using CloudMediaContext constructors that take MediaServicesCredentials as a parameter.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Azure Active Directory Access Control<ept id="p1">](https://msdn.microsoft.com/library/hh147631.aspx)</ept> (also known as Access Control Service or ACS) is a cloud-based service that provides an easy way of authenticating and authorizing users to gain access to their web applications.</source>
          <target state="new"><bpt id="p1">[</bpt>Azure Active Directory Access Control<ept id="p1">](https://msdn.microsoft.com/library/hh147631.aspx)</ept> (also known as Access Control Service or ACS) is a cloud-based service that provides an easy way of authenticating and authorizing users to gain access to their web applications.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Media Services controls access to its services though OAuth protocol that requires an ACS token.</source>
          <target state="new">Microsoft Azure Media Services controls access to its services though OAuth protocol that requires an ACS token.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Media Services receives the ACS tokens from an authorization server.</source>
          <target state="new">Media Services receives the ACS tokens from an authorization server.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When developing with the Media Services SDK, you can choose to not deal with the tokens because the SDK code managers them for you.</source>
          <target state="new">When developing with the Media Services SDK, you can choose to not deal with the tokens because the SDK code managers them for you.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, letting the SDK fully manage the ACS tokens leads to unnecessary token requests.</source>
          <target state="new">However, letting the SDK fully manage the ACS tokens leads to unnecessary token requests.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Requesting tokens takes time and consumes the client and server resources.</source>
          <target state="new">Requesting tokens takes time and consumes the client and server resources.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Also, the ACS server throttles the requests if the rate is too high.</source>
          <target state="new">Also, the ACS server throttles the requests if the rate is too high.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The limit is 30 requests per second, see <bpt id="p1">[</bpt>ACS Service Limitations<ept id="p1">](https://msdn.microsoft.com/library/gg185909.aspx)</ept> for more details.</source>
          <target state="new">The limit is 30 requests per second, see <bpt id="p1">[</bpt>ACS Service Limitations<ept id="p1">](https://msdn.microsoft.com/library/gg185909.aspx)</ept> for more details.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Starting with the Media Services SDK version 3.0.0.0, you can reuse the ACS tokens.</source>
          <target state="new">Starting with the Media Services SDK version 3.0.0.0, you can reuse the ACS tokens.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> constructors that take <bpt id="p2">**</bpt>MediaServicesCredentials<ept id="p2">**</ept> as a parameter enable sharing the ACS tokens between multiple contexts.</source>
          <target state="new">The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> constructors that take <bpt id="p2">**</bpt>MediaServicesCredentials<ept id="p2">**</ept> as a parameter enable sharing the ACS tokens between multiple contexts.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The MediaServicesCredentials class encapsulates the Media Services credentials.</source>
          <target state="new">The MediaServicesCredentials class encapsulates the Media Services credentials.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If an ACS token is available and its expiration time is known, you can create a new MediaServicesCredentials instance with the token and pass it to the constructor of CloudMediaContext.</source>
          <target state="new">If an ACS token is available and its expiration time is known, you can create a new MediaServicesCredentials instance with the token and pass it to the constructor of CloudMediaContext.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Note that the Media Services SDK automatically refreshes tokens whenever they expire.</source>
          <target state="new">Note that the Media Services SDK automatically refreshes tokens whenever they expire.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are two ways to reuse ACS tokens, as shown in the examples below.</source>
          <target state="new">There are two ways to reuse ACS tokens, as shown in the examples below.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can cache the <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> object in memory (for example, in a static class variable).</source>
          <target state="new">You can cache the <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> object in memory (for example, in a static class variable).</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Then, pass the cached object to the CloudMediaContext constructor.</source>
          <target state="new">Then, pass the cached object to the CloudMediaContext constructor.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The MediaServicesCredentials object contains an ACS token that can be reused if it is still valid.</source>
          <target state="new">The MediaServicesCredentials object contains an ACS token that can be reused if it is still valid.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the token is not valid, it will be refreshed by the Media Services SDK using the credentials given to the MediaServicesCredentials constructor.</source>
          <target state="new">If the token is not valid, it will be refreshed by the Media Services SDK using the credentials given to the MediaServicesCredentials constructor.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> object gets a valid token after the RefreshToken is called.</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>MediaServicesCredentials<ept id="p1">**</ept> object gets a valid token after the RefreshToken is called.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> calls the <bpt id="p2">**</bpt>RefreshToken<ept id="p2">**</ept> method in the constructor.</source>
          <target state="new">The <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> calls the <bpt id="p2">**</bpt>RefreshToken<ept id="p2">**</ept> method in the constructor.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you are planning to save the token values to an external storage, make sure to check whether the TokenExpiration value is valid before saving the token data.</source>
          <target state="new">If you are planning to save the token values to an external storage, make sure to check whether the TokenExpiration value is valid before saving the token data.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If it is not valid, call RefreshToken before caching.</source>
          <target state="new">If it is not valid, call RefreshToken before caching.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can also cache the AccessToken string and the TokenExpiration values.</source>
          <target state="new">You can also cache the AccessToken string and the TokenExpiration values.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The values could later be used to create a new MediaServicesCredentials object with the cached token data.</source>
          <target state="new">The values could later be used to create a new MediaServicesCredentials object with the cached token data.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is especially useful for scenarios where the token can be securely shared among multiple processes or computers.</source>
          <target state="new">This is especially useful for scenarios where the token can be securely shared among multiple processes or computers.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following code snippets call the SaveTokenDataToExternalStorage, GetTokenDataFromExternalStorage, and UpdateTokenDataInExternalStorageIfNeeded methods that are not defined in this example.</source>
          <target state="new">The following code snippets call the SaveTokenDataToExternalStorage, GetTokenDataFromExternalStorage, and UpdateTokenDataInExternalStorageIfNeeded methods that are not defined in this example.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You could define these methods to store, retrieve, and update token data in an external storage.</source>
          <target state="new">You could define these methods to store, retrieve, and update token data in an external storage.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use the saved token values to create MediaServicesCredentials.</source>
          <target state="new">Use the saved token values to create MediaServicesCredentials.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you have multiple Media Services accounts (for example, for load sharing purposes or Geo-distribution) you can cache MediaServicesCredentials objects using the System.Collections.Concurrent.ConcurrentDictionary collection (the ConcurrentDictionary collection represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently).</source>
          <target state="new">If you have multiple Media Services accounts (for example, for load sharing purposes or Geo-distribution) you can cache MediaServicesCredentials objects using the System.Collections.Concurrent.ConcurrentDictionary collection (the ConcurrentDictionary collection represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can then use the GetOrAdd method to get the cached credentials.</source>
          <target state="new">You can then use the GetOrAdd method to get the cached credentials.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Connecting to a Media Services account located in the North China region</source>
          <target state="new">Connecting to a Media Services account located in the North China region</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your account is located in the North China region, use the following constructor:</source>
          <target state="new">If your account is located in the North China region, use the following constructor:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Storing Connection Values in Configuration</source>
          <target state="new">Storing Connection Values in Configuration</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It is a highly recommended practice to store connection values, especially sensitive values such as your account name and password, in configuration.</source>
          <target state="new">It is a highly recommended practice to store connection values, especially sensitive values such as your account name and password, in configuration.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Also, it is a recommended practice to encrypt sensitive configuration data.</source>
          <target state="new">Also, it is a recommended practice to encrypt sensitive configuration data.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can encrypt the entire configuration file by using the Windows Encrypting File System (EFS).</source>
          <target state="new">You can encrypt the entire configuration file by using the Windows Encrypting File System (EFS).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To enable EFS on a file, right-click the file, select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, and enable encryption in the <bpt id="p2">**</bpt>Advanced<ept id="p2">**</ept> settings tab.</source>
          <target state="new">To enable EFS on a file, right-click the file, select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, and enable encryption in the <bpt id="p2">**</bpt>Advanced<ept id="p2">**</ept> settings tab.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Or you can create a custom solution for encrypting selected portions of a configuration file by using protected configuration.</source>
          <target state="new">Or you can create a custom solution for encrypting selected portions of a configuration file by using protected configuration.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Encrypting Configuration Information Using Protected Configuration<ept id="p1">](https://msdn.microsoft.com/library/53tyfkaw.aspx)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Encrypting Configuration Information Using Protected Configuration<ept id="p1">](https://msdn.microsoft.com/library/53tyfkaw.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following App.config file contains the required connection values.</source>
          <target state="new">The following App.config file contains the required connection values.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The values in the</source>
          <target state="new">The values in the</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>element are the required values that you got from the Media Services account setup process.</source>
          <target state="new">element are the required values that you got from the Media Services account setup process.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>&amp;lt;configuration&amp;gt;</source>
          <target state="new">&amp;lt;configuration&amp;gt;</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&amp;lt;appSettings&amp;gt;</source>
          <target state="new">&amp;lt;appSettings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&amp;lt;add key="MediaServicesAccountName" value="Media-Services-Account-Name" /&amp;gt;</source>
          <target state="new">&amp;lt;add key="MediaServicesAccountName" value="Media-Services-Account-Name" /&amp;gt;</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>&amp;lt;add key="MediaServicesAccountKey" value="Media-Services-Account-Key" /&amp;gt;</source>
          <target state="new">&amp;lt;add key="MediaServicesAccountKey" value="Media-Services-Account-Key" /&amp;gt;</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&amp;lt;/appSettings&amp;gt;</source>
          <target state="new">&amp;lt;/appSettings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>&amp;lt;/configuration&amp;gt;</source>
          <target state="new">&amp;lt;/configuration&amp;gt;</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To retrieve connection values from configuration, you can use the <bpt id="p1">**</bpt>ConfigurationManager<ept id="p1">**</ept> class and then assign the values to fields in your code:</source>
          <target state="new">To retrieve connection values from configuration, you can use the <bpt id="p1">**</bpt>ConfigurationManager<ept id="p1">**</ept> class and then assign the values to fields in your code:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6519b6acd5dfbb9688a4418848f5b029ff5f3d90</xliffext:olfilehash>
  </header>
</xliff>