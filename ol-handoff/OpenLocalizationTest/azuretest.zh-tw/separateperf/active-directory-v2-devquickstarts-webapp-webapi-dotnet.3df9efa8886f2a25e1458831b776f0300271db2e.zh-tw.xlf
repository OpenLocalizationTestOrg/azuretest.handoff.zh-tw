<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>App Model v2.0 | Microsoft Azure</source>
          <target state="new">App Model v2.0 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a .NET MVC Web App that calls web services using personal Microsoft accounts and work or school accounts for sign-in.</source>
          <target state="new">How to build a .NET MVC Web App that calls web services using personal Microsoft accounts and work or school accounts for sign-in.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>App model v2.0 preview: Calling a web API from a .NET web app</source>
          <target state="new">App model v2.0 preview: Calling a web API from a .NET web app</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This information applies to the v2.0 endpoint public preview.</source>
          <target state="new">This information applies to the v2.0 endpoint public preview.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</source>
          <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With the v2.0 app model, you can quickly add authentication to your web apps and web APIs with support for both personal Microsoft accounts and work or school accounts.</source>
          <target state="new">With the v2.0 app model, you can quickly add authentication to your web apps and web APIs with support for both personal Microsoft accounts and work or school accounts.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Here, we'll build an MVC web app that:</source>
          <target state="new">Here, we'll build an MVC web app that:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Signs users in using OpenID Connect, with some help from Microsoft's OWIN middleware.</source>
          <target state="new">Signs users in using OpenID Connect, with some help from Microsoft's OWIN middleware.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets OAuth 2.0 access tokens for a web API using ADAL.</source>
          <target state="new">Gets OAuth 2.0 access tokens for a web API using ADAL.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creates, Reads, and Deletes items on a user's "To-Do List", which is hosted on the web api and secured by OAuth 2.0.</source>
          <target state="new">Creates, Reads, and Deletes items on a user's "To-Do List", which is hosted on the web api and secured by OAuth 2.0.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This tutorial will focus primarily on getting and using access tokens in a web app, described in full <bpt id="p1">[</bpt>here<ept id="p1">](active-directory-v2-flows.md#web-apps)</ept>.</source>
          <target state="new">This tutorial will focus primarily on getting and using access tokens in a web app, described in full <bpt id="p1">[</bpt>here<ept id="p1">](active-directory-v2-flows.md#web-apps)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As prerequisites, you may want to first learn how to <bpt id="p1">[</bpt>add basic sign-in to a web app<ept id="p1">](active-directory-v2-devquickstarts-dotnet-web.md)</ept> or how to <bpt id="p2">[</bpt>properly secure a web API<ept id="p2">](active-directory-v2-devquickstarts-dotnet-api.md)</ept>.</source>
          <target state="new">As prerequisites, you may want to first learn how to <bpt id="p1">[</bpt>add basic sign-in to a web app<ept id="p1">](active-directory-v2-devquickstarts-dotnet-web.md)</ept> or how to <bpt id="p2">[</bpt>properly secure a web API<ept id="p2">](active-directory-v2-devquickstarts-dotnet-api.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The basic steps to call the To-Do List Web API from the client are:</source>
          <target state="new">The basic steps to call the To-Do List Web API from the client are:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Register an app</source>
          <target state="new">Register an app</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Sign the user into the web app using OpenID Connect</source>
          <target state="new">Sign the user into the web app using OpenID Connect</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use ADAL to get an access token upon user sign-in</source>
          <target state="new">Use ADAL to get an access token upon user sign-in</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Call the To-Do List Web API with an access token.</source>
          <target state="new">Call the To-Do List Web API with an access token.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet)</ept>.</source>
          <target state="new">The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/skeleton.zip)</ept> or clone the skeleton:</source>
          <target state="new">To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/skeleton.zip)</ept> or clone the skeleton:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Alternatively, you can <bpt id="p1">[</bpt>download the completed app as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/complete.zip)</ept> or clone the completed app:</source>
          <target state="new">Alternatively, you can <bpt id="p1">[</bpt>download the completed app as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/complete.zip)</ept> or clone the completed app:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>1. Register an App</source>
          <target state="new">1. Register an App</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</source>
          <target state="new">Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Make sure to:</source>
          <target state="new">Make sure to:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create an <bpt id="p1">**</bpt>App Secret<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>Password<ept id="p2">**</ept> type, and copy down its value for later</source>
          <target state="new">Create an <bpt id="p1">**</bpt>App Secret<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>Password<ept id="p2">**</ept> type, and copy down its value for later</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>Web<ept id="p1">**</ept> platform for your app.</source>
          <target state="new">Add the <bpt id="p1">**</bpt>Web<ept id="p1">**</ept> platform for your app.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Enter the correct <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept>.</source>
          <target state="new">Enter the correct <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The redirect uri indicates to Azure AD where authentication responses should be directed - the default for this tutorial is <ph id="ph1">`https://localhost:44326/`</ph>.</source>
          <target state="new">The redirect uri indicates to Azure AD where authentication responses should be directed - the default for this tutorial is <ph id="ph1">`https://localhost:44326/`</ph>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>2. Sign the user in with OpenID Connect</source>
          <target state="new">2. Sign the user in with OpenID Connect</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Here, we'll configure the OWIN middleware to use the <bpt id="p1">[</bpt>OpenID Connect authentication protocol<ept id="p1">](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</source>
          <target state="new">Here, we'll configure the OWIN middleware to use the <bpt id="p1">[</bpt>OpenID Connect authentication protocol<ept id="p1">](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>OWIN will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
          <target state="new">OWIN will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To begin, open the <ph id="ph1">`web.config`</ph> file in the root of the <ph id="ph2">`TodoList-WebApp`</ph> project, and enter your app's configuration values in the <ph id="ph3">`&lt;appSettings&gt;`</ph> section.</source>
          <target state="new">To begin, open the <ph id="ph1">`web.config`</ph> file in the root of the <ph id="ph2">`TodoList-WebApp`</ph> project, and enter your app's configuration values in the <ph id="ph3">`&lt;appSettings&gt;`</ph> section.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ida:ClientId`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app in the registration portal.</source>
          <target state="new">The <ph id="ph1">`ida:ClientId`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app in the registration portal.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ida:ClientSecret`</ph> is the <bpt id="p1">**</bpt>App Secret<ept id="p1">**</ept> you created in the registration portal.</source>
          <target state="new">The <ph id="ph1">`ida:ClientSecret`</ph> is the <bpt id="p1">**</bpt>App Secret<ept id="p1">**</ept> you created in the registration portal.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ida:RedirectUri`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> you entered in the portal.</source>
          <target state="new">The <ph id="ph1">`ida:RedirectUri`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> you entered in the portal.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`web.config`</ph> file in the root of the <ph id="ph2">`TodoList-Service`</ph> project, and replace the <ph id="ph3">`ida:Audience`</ph> with the same <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> as above.</source>
          <target state="new">Open the <ph id="ph1">`web.config`</ph> file in the root of the <ph id="ph2">`TodoList-Service`</ph> project, and replace the <ph id="ph3">`ida:Audience`</ph> with the same <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> as above.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now add the OWIN middleware NuGet packages to the <ph id="ph1">`TodoList-WebApp`</ph> project using the Package Manager Console.</source>
          <target state="new">Now add the OWIN middleware NuGet packages to the <ph id="ph1">`TodoList-WebApp`</ph> project using the Package Manager Console.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Open the file <ph id="ph1">`App_Start\Startup.Auth.cs`</ph> and add <ph id="ph2">`using`</ph> statements for the above libraries.</source>
          <target state="new">Open the file <ph id="ph1">`App_Start\Startup.Auth.cs`</ph> and add <ph id="ph2">`using`</ph> statements for the above libraries.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the same file, implement the <ph id="ph1">`ConfigureAuth(...)`</ph> method.</source>
          <target state="new">In the same file, implement the <ph id="ph1">`ConfigureAuth(...)`</ph> method.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The parameters you provide in <ph id="ph1">`OpenIDConnectAuthenticationOptions`</ph> will serve as coordinates for your app to communicate with Azure AD.</source>
          <target state="new">The parameters you provide in <ph id="ph1">`OpenIDConnectAuthenticationOptions`</ph> will serve as coordinates for your app to communicate with Azure AD.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>3. Use ADAL to get an access token upon user sign-in</source>
          <target state="new">3. Use ADAL to get an access token upon user sign-in</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`AuthorizationCodeReceived`</ph> notification, we want to use <bpt id="p1">[</bpt>OAuth 2.0 in tandem with OpenID Connect<ept id="p1">](active-directory-v2-protocols.md#openid-connect-with-oauth-code-flow)</ept> to redeem the authorization_code for an access token to the To-Do List Service.</source>
          <target state="new">In the <ph id="ph1">`AuthorizationCodeReceived`</ph> notification, we want to use <bpt id="p1">[</bpt>OAuth 2.0 in tandem with OpenID Connect<ept id="p1">](active-directory-v2-protocols.md#openid-connect-with-oauth-code-flow)</ept> to redeem the authorization_code for an access token to the To-Do List Service.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>ADAL can make this process easy for you:</source>
          <target state="new">ADAL can make this process easy for you:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>First, install the preview version of ADAL:</source>
          <target state="new">First, install the preview version of ADAL:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>And add another <ph id="ph1">`using`</ph> statement to the <ph id="ph2">`App_Start\Startup.Auth.cs`</ph> file for ADAL.</source>
          <target state="new">And add another <ph id="ph1">`using`</ph> statement to the <ph id="ph2">`App_Start\Startup.Auth.cs`</ph> file for ADAL.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Now add a new method, the <ph id="ph1">`OnAuthorizationCodeReceived`</ph> event handler.</source>
          <target state="new">Now add a new method, the <ph id="ph1">`OnAuthorizationCodeReceived`</ph> event handler.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This handler will use ADAL to acquire an access token to the To-Do List API, and will store the token in ADAL's token cache for later:</source>
          <target state="new">This handler will use ADAL to acquire an access token to the To-Do List API, and will store the token in ADAL's token cache for later:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In web apps, ADAL has an extensible token cache that can be used to store tokens.</source>
          <target state="new">In web apps, ADAL has an extensible token cache that can be used to store tokens.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This sample implements the <ph id="ph1">`NaiveSessionCache`</ph> which uses http session storage to cache tokens.</source>
          <target state="new">This sample implements the <ph id="ph1">`NaiveSessionCache`</ph> which uses http session storage to cache tokens.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">


##</ph> 4. Call the To-Do List Web API
Now it's time to actually use the access_token you acquired in step 3.</source>
          <target state="new"><ph id="ph1">


##</ph> 4. Call the To-Do List Web API
Now it's time to actually use the access_token you acquired in step 3.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Open the web app's <ph id="ph1">`Controllers\TodoListController.cs`</ph> file, which makes all the CRUD requests to the To-Do List API.</source>
          <target state="new">Open the web app's <ph id="ph1">`Controllers\TodoListController.cs`</ph> file, which makes all the CRUD requests to the To-Do List API.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>- You can use ADAL again here to fetch access_tokens from the ADAL cache.</source>
          <target state="new">- You can use ADAL again here to fetch access_tokens from the ADAL cache.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>First, add a <ph id="ph1">`using`</ph> statement for ADAL to this file.</source>
          <target state="new">First, add a <ph id="ph1">`using`</ph> statement for ADAL to this file.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`using Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory;`</ph><ph id="ph2">

-</ph> In the <ph id="ph3">`Index`</ph> action, use ADAL's <ph id="ph4">`AcquireTokenSilentAsync`</ph> method to get an access_token that can be used to read data from the To-Do List service:

```C#
...
string userObjectID = ClaimsPrincipal.Current.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
string tenantID = ClaimsPrincipal.Current.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid").Value;
string authority = String.Format(CultureInfo.InvariantCulture, Startup.aadInstance, tenantID, string.Empty);
ClientCredential credential = new ClientCredential(Startup.clientId, Startup.clientSecret);

// Here you ask for a token using the web app's clientId as the scope, since the web app and service share the same clientId.</source>
          <target state="new"><ph id="ph1">`using Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory;`</ph><ph id="ph2">

-</ph> In the <ph id="ph3">`Index`</ph> action, use ADAL's <ph id="ph4">`AcquireTokenSilentAsync`</ph> method to get an access_token that can be used to read data from the To-Do List service:

```C#
...
string userObjectID = ClaimsPrincipal.Current.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
string tenantID = ClaimsPrincipal.Current.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid").Value;
string authority = String.Format(CultureInfo.InvariantCulture, Startup.aadInstance, tenantID, string.Empty);
ClientCredential credential = new ClientCredential(Startup.clientId, Startup.clientSecret);

// Here you ask for a token using the web app's clientId as the scope, since the web app and service share the same clientId.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AuthenticationContext authContext = new AuthenticationContext(authority, new NaiveSessionCache(userObjectID));
result = await authContext.AcquireTokenSilentAsync(new string[] { Startup.clientId }, credential, UserIdentifier.AnyUser);
...
```

- The sample then adds the resulting token to the HTTP GET request as the <ph id="ph1">`Authorization`</ph> header, which the To-Do List service uses to authenticate the request.</source>
          <target state="new">AuthenticationContext authContext = new AuthenticationContext(authority, new NaiveSessionCache(userObjectID));
result = await authContext.AcquireTokenSilentAsync(new string[] { Startup.clientId }, credential, UserIdentifier.AnyUser);
...
```

- The sample then adds the resulting token to the HTTP GET request as the <ph id="ph1">`Authorization`</ph> header, which the To-Do List service uses to authenticate the request.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>- If the To-Do List service returns a <ph id="ph1">`401 Unauthorized`</ph> response, the access_tokens in ADAL have become invalid for some reason.</source>
          <target state="new">- If the To-Do List service returns a <ph id="ph1">`401 Unauthorized`</ph> response, the access_tokens in ADAL have become invalid for some reason.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this case, you should drop any access_tokens from the ADAL cache and show the user a message that they may need to sign in again, which will restart the token acquisition flow.</source>
          <target state="new">In this case, you should drop any access_tokens from the ADAL cache and show the user a message that they may need to sign in again, which will restart the token acquisition flow.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>```C#
...
// If the call failed with access denied, then drop the current access token from the cache,
// and show the user an error indicating they might need to sign-in again.</source>
          <target state="new">```C#
...
// If the call failed with access denied, then drop the current access token from the cache,
// and show the user an error indicating they might need to sign-in again.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
{
        var todoTokens = authContext.TokenCache.ReadItems().Where(a =&gt; a.Scope.Contains(Startup.clientId));
        foreach (TokenCacheItem tci in todoTokens)
                authContext.TokenCache.DeleteItem(tci);

        return new RedirectResult("/Error?message=Error: " + response.ReasonPhrase + " You might need to sign in again.");
}
...
```

- Similarly, if ADAL is unable to return an access_token for any reason, you should instruct the user to sign in again.</source>
          <target state="new">if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
{
        var todoTokens = authContext.TokenCache.ReadItems().Where(a =&gt; a.Scope.Contains(Startup.clientId));
        foreach (TokenCacheItem tci in todoTokens)
                authContext.TokenCache.DeleteItem(tci);

        return new RedirectResult("/Error?message=Error: " + response.ReasonPhrase + " You might need to sign in again.");
}
...
```

- Similarly, if ADAL is unable to return an access_token for any reason, you should instruct the user to sign in again.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is as simple as catching any <ph id="ph1">`AdalException`</ph>:

```C#
...
catch (AdalException ee)
{
        // If ADAL could not get a token silently, show the user an error indicating they might need to sign in again.</source>
          <target state="new">This is as simple as catching any <ph id="ph1">`AdalException`</ph>:

```C#
...
catch (AdalException ee)
{
        // If ADAL could not get a token silently, show the user an error indicating they might need to sign in again.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>return new RedirectResult("/Error?message=An Error Occurred Reading To Do List: " + ee.Message + " You might need to log out and log back in.");
}
...
```

- The exact same <ph id="ph1">`AcquireTokenSilentAsync`</ph> call is implementd in the <ph id="ph2">`Create`</ph> and <ph id="ph3">`Delete`</ph> actions.</source>
          <target state="new">return new RedirectResult("/Error?message=An Error Occurred Reading To Do List: " + ee.Message + " You might need to log out and log back in.");
}
...
```

- The exact same <ph id="ph1">`AcquireTokenSilentAsync`</ph> call is implementd in the <ph id="ph2">`Create`</ph> and <ph id="ph3">`Delete`</ph> actions.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In web apps, you can use this ADAL method to get access_tokens whenever you need them in your app.</source>
          <target state="new">In web apps, you can use this ADAL method to get access_tokens whenever you need them in your app.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ADAL will take care of acquiring, caching, and refreshing tokens for you.</source>
          <target state="new">ADAL will take care of acquiring, caching, and refreshing tokens for you.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally, build and run your app!</source>
          <target state="new">Finally, build and run your app!</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sign in with either a Microsoft Account or an Azure AD Account, and notice how the user's identity is reflected in the top navigation bar.</source>
          <target state="new">Sign in with either a Microsoft Account or an Azure AD Account, and notice how the user's identity is reflected in the top navigation bar.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Add and delete some items from the user's To-Do List to see the OAuth 2.0 secured API calls in action.</source>
          <target state="new">Add and delete some items from the user's To-Do List to see the OAuth 2.0 secured API calls in action.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You now have a web app &amp; web API, both secured using industry standard protocols, that can authenticate users with both their personal and work/school accounts.</source>
          <target state="new">You now have a web app &amp; web API, both secured using industry standard protocols, that can authenticate users with both their personal and work/school accounts.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt><ept id="p1">is provided here](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/complete.zip)</ept>.</source>
          <target state="new">For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt><ept id="p1">is provided here](https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet/archive/complete.zip)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Next Steps

For additional resources, check out:
<bpt id="p1">- [</bpt><ept id="p1">The App Model v2.0 Preview &gt;&gt;](active-directory-appmodel-v2-overview.md)</ept><bpt id="p2">
- [</bpt><ept id="p2">StackOverflow "adal" tag &gt;&gt;](http://stackoverflow.com/questions/tagged/adal)</ept>

test</source>
          <target state="new">Next Steps

For additional resources, check out:
<bpt id="p1">- [</bpt><ept id="p1">The App Model v2.0 Preview &gt;&gt;](active-directory-appmodel-v2-overview.md)</ept><bpt id="p2">
- [</bpt><ept id="p2">StackOverflow "adal" tag &gt;&gt;](http://stackoverflow.com/questions/tagged/adal)</ept>

test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a08d4defe4789f5869a7843d26dc32baec75a91</xliffext:olfilehash>
  </header>
</xliff>