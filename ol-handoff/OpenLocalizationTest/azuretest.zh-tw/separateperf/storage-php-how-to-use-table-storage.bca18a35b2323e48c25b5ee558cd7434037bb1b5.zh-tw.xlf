<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use table storage from PHP | Microsoft Azure</source>
          <target state="new">How to use table storage from PHP | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use the Table service from PHP to create and delete a table, and insert, delete, and query the table.</source>
          <target state="new">Learn how to use the Table service from PHP to create and delete a table, and insert, delete, and query the table.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use table storage from PHP</source>
          <target state="new">How to use table storage from PHP</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide shows you how to perform common scenarios using the Azure Table service.</source>
          <target state="new">This guide shows you how to perform common scenarios using the Azure Table service.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The samples are written in PHP and use the <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">][download]</ept>.</source>
          <target state="new">The samples are written in PHP and use the <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">][download]</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The scenarios covered include <bpt id="p1">**</bpt>creating and deleting a table, and inserting, deleting, and querying entities in a table<ept id="p1">**</ept>.</source>
          <target state="new">The scenarios covered include <bpt id="p1">**</bpt>creating and deleting a table, and inserting, deleting, and querying entities in a table<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information on the Azure Table service, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#NextSteps)</ept> section.</source>
          <target state="new">For more information on the Azure Table service, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#NextSteps)</ept> section.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a PHP application</source>
          <target state="new">Create a PHP application</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The only requirement for creating a PHP application that accesses the Azure Table service is the referencing of classes in the Azure SDK for PHP from within your code.</source>
          <target state="new">The only requirement for creating a PHP application that accesses the Azure Table service is the referencing of classes in the Azure SDK for PHP from within your code.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use any development tools to create your application, including Notepad.</source>
          <target state="new">You can use any development tools to create your application, including Notepad.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this guide, you use Table service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.</source>
          <target state="new">In this guide, you use Table service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Get the Azure Client Libraries</source>
          <target state="new">Get the Azure Client Libraries</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Configure your application to access the Table service</source>
          <target state="new">Configure your application to access the Table service</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To use the Azure Table service APIs, you need to:</source>
          <target state="new">To use the Azure Table service APIs, you need to:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Reference the autoloader file using the <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> statement, and</source>
          <target state="new">Reference the autoloader file using the <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> statement, and</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reference any classes you might use.</source>
          <target state="new">Reference any classes you might use.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example shows how to include the autoloader file and reference the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</source>
          <target state="new">The following example shows how to include the autoloader file and reference the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you installed the libraries manually or as a PEAR package, you need to reference the <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">WindowsAzure.php</ph><ph id="ph3">&lt;/code&gt;</ph> autoloader file.</source>
          <target state="new">If you installed the libraries manually or as a PEAR package, you need to reference the <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">WindowsAzure.php</ph><ph id="ph3">&lt;/code&gt;</ph> autoloader file.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the examples below, the <ph id="ph1">`require_once`</ph> statement is always shown, but only the classes necessary for the example to execute are referenced.</source>
          <target state="new">In the examples below, the <ph id="ph1">`require_once`</ph> statement is always shown, but only the classes necessary for the example to execute are referenced.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Set up an Azure storage connection</source>
          <target state="new">Set up an Azure storage connection</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To instantiate an Azure Table service client, you must first have a valid connection string.</source>
          <target state="new">To instantiate an Azure Table service client, you must first have a valid connection string.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The format for the Table service connection string is:</source>
          <target state="new">The format for the Table service connection string is:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For accessing a live service:</source>
          <target state="new">For accessing a live service:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For accessing the emulator storage:</source>
          <target state="new">For accessing the emulator storage:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To create any Azure service client, you need to use the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</source>
          <target state="new">To create any Azure service client, you need to use the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can:</source>
          <target state="new">You can:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>pass the connection string directly to it or</source>
          <target state="new">pass the connection string directly to it or</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>use the <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> to check multiple external sources for the connection string:</source>
          <target state="new">use the <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> to check multiple external sources for the connection string:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>by default, it comes with support for one external source - environmental variables</source>
          <target state="new">by default, it comes with support for one external source - environmental variables</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>you can add new sources by extending the <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> class</source>
          <target state="new">you can add new sources by extending the <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> class</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the examples outlined here, the connection string will be passed directly.</source>
          <target state="new">For the examples outlined here, the connection string will be passed directly.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create a table</source>
          <target state="new">Create a table</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>TableRestProxy<ept id="p1">**</ept> object lets you create a table with the <bpt id="p2">**</bpt>createTable<ept id="p2">**</ept> method.</source>
          <target state="new">A <bpt id="p1">**</bpt>TableRestProxy<ept id="p1">**</ept> object lets you create a table with the <bpt id="p2">**</bpt>createTable<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When creating a table, you can set the Table service timeout.</source>
          <target state="new">When creating a table, you can set the Table service timeout.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(For more information about the Table service timeout, see <bpt id="p1">[</bpt>Setting timeouts for Table service operations<ept id="p1">][table-service-timeouts]</ept>.)</source>
          <target state="new">(For more information about the Table service timeout, see <bpt id="p1">[</bpt>Setting timeouts for Table service operations<ept id="p1">][table-service-timeouts]</ept>.)</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For information about restrictions on table names, see <bpt id="p1">[</bpt>Understanding the Table service data model<ept id="p1">][table-data-model]</ept>.</source>
          <target state="new">For information about restrictions on table names, see <bpt id="p1">[</bpt>Understanding the Table service data model<ept id="p1">][table-data-model]</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add an entity to a table</source>
          <target state="new">Add an entity to a table</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To add an entity to a table, create a new <bpt id="p1">**</bpt>Entity<ept id="p1">**</ept> object and pass it to <bpt id="p2">**</bpt>TableRestProxy-&gt;insertEntity<ept id="p2">**</ept>.</source>
          <target state="new">To add an entity to a table, create a new <bpt id="p1">**</bpt>Entity<ept id="p1">**</ept> object and pass it to <bpt id="p2">**</bpt>TableRestProxy-&gt;insertEntity<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that when you create an entity, you must specify a <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph>.</source>
          <target state="new">Note that when you create an entity, you must specify a <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These are the unique identifiers for an entity and are values that can be queried much faster than other entity properties.</source>
          <target state="new">These are the unique identifiers for an entity and are values that can be queried much faster than other entity properties.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The system uses <ph id="ph1">`PartitionKey`</ph> to automatically distribute the table’s entities over many storage nodes.</source>
          <target state="new">The system uses <ph id="ph1">`PartitionKey`</ph> to automatically distribute the table’s entities over many storage nodes.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Entities with the same <ph id="ph1">`PartitionKey`</ph> are stored on the same node.</source>
          <target state="new">Entities with the same <ph id="ph1">`PartitionKey`</ph> are stored on the same node.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Operations on multiple entities stored on the same node perform better than on entities stored across different nodes.) The <ph id="ph1">`RowKey`</ph> is the unique ID of an entity within a partition.</source>
          <target state="new">(Operations on multiple entities stored on the same node perform better than on entities stored across different nodes.) The <ph id="ph1">`RowKey`</ph> is the unique ID of an entity within a partition.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For information about Table properties and types, see <bpt id="p1">[</bpt>Understanding the Table service data model<ept id="p1">][table-data-model]</ept>.</source>
          <target state="new">For information about Table properties and types, see <bpt id="p1">[</bpt>Understanding the Table service data model<ept id="p1">][table-data-model]</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TableRestProxy<ept id="p1">**</ept> class offers two alternative methods for inserting entities: <bpt id="p2">**</bpt>insertOrMergeEntity<ept id="p2">**</ept> and <bpt id="p3">**</bpt>insertOrReplaceEntity<ept id="p3">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>TableRestProxy<ept id="p1">**</ept> class offers two alternative methods for inserting entities: <bpt id="p2">**</bpt>insertOrMergeEntity<ept id="p2">**</ept> and <bpt id="p3">**</bpt>insertOrReplaceEntity<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To use these methods, create a new <bpt id="p1">**</bpt>Entity<ept id="p1">**</ept> and pass it as a parameter to either method.</source>
          <target state="new">To use these methods, create a new <bpt id="p1">**</bpt>Entity<ept id="p1">**</ept> and pass it as a parameter to either method.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each method will insert the entity if it does not exist.</source>
          <target state="new">Each method will insert the entity if it does not exist.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the entity already exists, <bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept> updates property values if the properties already exist and adds new properties if they do not exist, while <bpt id="p2">**</bpt>insertOrReplaceEntity<ept id="p2">**</ept> completely replaces an existing entity.</source>
          <target state="new">If the entity already exists, <bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept> updates property values if the properties already exist and adds new properties if they do not exist, while <bpt id="p2">**</bpt>insertOrReplaceEntity<ept id="p2">**</ept> completely replaces an existing entity.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept>.</source>
          <target state="new">The following example shows how to use <bpt id="p1">**</bpt>insertOrMergeEntity<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the entity with <ph id="ph1">`PartitionKey`</ph> "tasksSeattle" and <ph id="ph2">`RowKey`</ph> "1" does not already exist, it will be inserted.</source>
          <target state="new">If the entity with <ph id="ph1">`PartitionKey`</ph> "tasksSeattle" and <ph id="ph2">`RowKey`</ph> "1" does not already exist, it will be inserted.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, if it has previously been inserted (as shown in the example above), the <ph id="ph1">`DueDate`</ph> property will be updated, and the <ph id="ph2">`Status`</ph> property will be added.</source>
          <target state="new">However, if it has previously been inserted (as shown in the example above), the <ph id="ph1">`DueDate`</ph> property will be updated, and the <ph id="ph2">`Status`</ph> property will be added.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Description`</ph> and <ph id="ph2">`Location`</ph> properties are also updated, but with values that effectively leave them unchanged.</source>
          <target state="new">The <ph id="ph1">`Description`</ph> and <ph id="ph2">`Location`</ph> properties are also updated, but with values that effectively leave them unchanged.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If these latter two properties were not added as shown in the example, but existed on the target entity, their existing values would remain unchanged.</source>
          <target state="new">If these latter two properties were not added as shown in the example, but existed on the target entity, their existing values would remain unchanged.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Retrieve a single entity</source>
          <target state="new">Retrieve a single entity</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TableRestProxy-&gt;getEntity<ept id="p1">**</ept> method allows you to retrieve a single entity by querying for its <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>TableRestProxy-&gt;getEntity<ept id="p1">**</ept> method allows you to retrieve a single entity by querying for its <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the example below, the partition key <ph id="ph1">`tasksSeattle`</ph> and row key <ph id="ph2">`1`</ph> are passed to the <bpt id="p1">**</bpt>getEntity<ept id="p1">**</ept> method.</source>
          <target state="new">In the example below, the partition key <ph id="ph1">`tasksSeattle`</ph> and row key <ph id="ph2">`1`</ph> are passed to the <bpt id="p1">**</bpt>getEntity<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieve all entities in a partition</source>
          <target state="new">Retrieve all entities in a partition</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Entity queries are constructed using filters (for more information, see <bpt id="p1">[</bpt>Querying Tables and Entities<ept id="p1">][filters]</ept>).</source>
          <target state="new">Entity queries are constructed using filters (for more information, see <bpt id="p1">[</bpt>Querying Tables and Entities<ept id="p1">][filters]</ept>).</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To retrieve all entities in partition, use the filter "PartitionKey eq <bpt id="p1">*</bpt>partition_name<ept id="p1">*</ept>".</source>
          <target state="new">To retrieve all entities in partition, use the filter "PartitionKey eq <bpt id="p1">*</bpt>partition_name<ept id="p1">*</ept>".</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows how to retrieve all entities in the <ph id="ph1">`tasksSeattle`</ph> partition by passing a filter to the <bpt id="p1">**</bpt>queryEntities<ept id="p1">**</ept> method.</source>
          <target state="new">The following example shows how to retrieve all entities in the <ph id="ph1">`tasksSeattle`</ph> partition by passing a filter to the <bpt id="p1">**</bpt>queryEntities<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieve a subset of entities in a partition</source>
          <target state="new">Retrieve a subset of entities in a partition</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The same pattern used in the previous example can be used to retrieve any subset of entities in a partition.</source>
          <target state="new">The same pattern used in the previous example can be used to retrieve any subset of entities in a partition.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The subset of entities you retrieve are determined by the filter you use (for more information, see <bpt id="p1">[</bpt>Querying tables and entities<ept id="p1">][filters]</ept>).The following example shows how to use a filter to retrieve all entities with a specific <ph id="ph1">`Location`</ph> and a <ph id="ph2">`DueDate`</ph> less than a specified date.</source>
          <target state="new">The subset of entities you retrieve are determined by the filter you use (for more information, see <bpt id="p1">[</bpt>Querying tables and entities<ept id="p1">][filters]</ept>).The following example shows how to use a filter to retrieve all entities with a specific <ph id="ph1">`Location`</ph> and a <ph id="ph2">`DueDate`</ph> less than a specified date.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieve a subset of entity properties</source>
          <target state="new">Retrieve a subset of entity properties</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A query can retrieve a subset of entity properties.</source>
          <target state="new">A query can retrieve a subset of entity properties.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This technique, called <bpt id="p1">*</bpt>projection<ept id="p1">*</ept>, reduces bandwidth and can improve query performance, especially for large entities.</source>
          <target state="new">This technique, called <bpt id="p1">*</bpt>projection<ept id="p1">*</ept>, reduces bandwidth and can improve query performance, especially for large entities.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To specify a property to be retrieved, pass the name of the property to the <bpt id="p1">**</bpt>Query-&gt;addSelectField<ept id="p1">**</ept> method.</source>
          <target state="new">To specify a property to be retrieved, pass the name of the property to the <bpt id="p1">**</bpt>Query-&gt;addSelectField<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can call this method multiple times to add more properties.</source>
          <target state="new">You can call this method multiple times to add more properties.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>After executing <bpt id="p1">**</bpt>TableRestProxy-&gt;queryEntities<ept id="p1">**</ept>, the returned entities will only have the selected properties.</source>
          <target state="new">After executing <bpt id="p1">**</bpt>TableRestProxy-&gt;queryEntities<ept id="p1">**</ept>, the returned entities will only have the selected properties.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>(If you want to return a subset of Table entities, use a filter as shown in the queries above.)</source>
          <target state="new">(If you want to return a subset of Table entities, use a filter as shown in the queries above.)</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Update an entity</source>
          <target state="new">Update an entity</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An existing entity can be updated by using the <bpt id="p1">**</bpt>Entity-&gt;setProperty<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Entity-&gt;addProperty<ept id="p2">**</ept> methods on the entity, and then calling <bpt id="p3">**</bpt>TableRestProxy-&gt;updateEntity<ept id="p3">**</ept>.</source>
          <target state="new">An existing entity can be updated by using the <bpt id="p1">**</bpt>Entity-&gt;setProperty<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Entity-&gt;addProperty<ept id="p2">**</ept> methods on the entity, and then calling <bpt id="p3">**</bpt>TableRestProxy-&gt;updateEntity<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example retrieves an entity, modifies one property, removes another property, and adds a new property.</source>
          <target state="new">The following example retrieves an entity, modifies one property, removes another property, and adds a new property.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Note that you can remove a property by setting its value to <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</source>
          <target state="new">Note that you can remove a property by setting its value to <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Delete an entity</source>
          <target state="new">Delete an entity</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To delete an entity, pass the table name, and the entity's <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph> to the <bpt id="p1">**</bpt>TableRestProxy-&gt;deleteEntity<ept id="p1">**</ept> method.</source>
          <target state="new">To delete an entity, pass the table name, and the entity's <ph id="ph1">`PartitionKey`</ph> and <ph id="ph2">`RowKey`</ph> to the <bpt id="p1">**</bpt>TableRestProxy-&gt;deleteEntity<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Note that for concurrency checks, you can set the Etag for an entity to be deleted by using the <bpt id="p1">**</bpt>DeleteEntityOptions-&gt;setEtag<ept id="p1">**</ept> method and passing the <bpt id="p2">**</bpt>DeleteEntityOptions<ept id="p2">**</ept> object to <bpt id="p3">**</bpt>deleteEntity<ept id="p3">**</ept> as a fourth parameter.</source>
          <target state="new">Note that for concurrency checks, you can set the Etag for an entity to be deleted by using the <bpt id="p1">**</bpt>DeleteEntityOptions-&gt;setEtag<ept id="p1">**</ept> method and passing the <bpt id="p2">**</bpt>DeleteEntityOptions<ept id="p2">**</ept> object to <bpt id="p3">**</bpt>deleteEntity<ept id="p3">**</ept> as a fourth parameter.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Batch table operations</source>
          <target state="new">Batch table operations</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TableRestProxy-&gt;batch<ept id="p1">**</ept> method allows you to execute multiple operations in a single request.</source>
          <target state="new">The <bpt id="p1">**</bpt>TableRestProxy-&gt;batch<ept id="p1">**</ept> method allows you to execute multiple operations in a single request.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The pattern here involves adding operations to <bpt id="p1">**</bpt>BatchRequest<ept id="p1">**</ept> object and then passing the <bpt id="p2">**</bpt>BatchRequest<ept id="p2">**</ept> object to the <bpt id="p3">**</bpt>TableRestProxy-&gt;batch<ept id="p3">**</ept> method.</source>
          <target state="new">The pattern here involves adding operations to <bpt id="p1">**</bpt>BatchRequest<ept id="p1">**</ept> object and then passing the <bpt id="p2">**</bpt>BatchRequest<ept id="p2">**</ept> object to the <bpt id="p3">**</bpt>TableRestProxy-&gt;batch<ept id="p3">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To add an operation to a <bpt id="p1">**</bpt>BatchRequest<ept id="p1">**</ept> object, you can call any of the following methods multiple times:</source>
          <target state="new">To add an operation to a <bpt id="p1">**</bpt>BatchRequest<ept id="p1">**</ept> object, you can call any of the following methods multiple times:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addInsertEntity<ept id="p1">**</ept> (adds an insertEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addInsertEntity<ept id="p1">**</ept> (adds an insertEntity operation)</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addUpdateEntity<ept id="p1">**</ept> (adds an updateEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addUpdateEntity<ept id="p1">**</ept> (adds an updateEntity operation)</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addMergeEntity<ept id="p1">**</ept> (adds a mergeEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addMergeEntity<ept id="p1">**</ept> (adds a mergeEntity operation)</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addInsertOrReplaceEntity<ept id="p1">**</ept> (adds an insertOrReplaceEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addInsertOrReplaceEntity<ept id="p1">**</ept> (adds an insertOrReplaceEntity operation)</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addInsertOrMergeEntity<ept id="p1">**</ept> (adds an insertOrMergeEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addInsertOrMergeEntity<ept id="p1">**</ept> (adds an insertOrMergeEntity operation)</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>addDeleteEntity<ept id="p1">**</ept> (adds a deleteEntity operation)</source>
          <target state="new"><bpt id="p1">**</bpt>addDeleteEntity<ept id="p1">**</ept> (adds a deleteEntity operation)</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example shows how to execute <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> and <bpt id="p2">**</bpt>deleteEntity<ept id="p2">**</ept> operations in a single request:</source>
          <target state="new">The following example shows how to execute <bpt id="p1">**</bpt>insertEntity<ept id="p1">**</ept> and <bpt id="p2">**</bpt>deleteEntity<ept id="p2">**</ept> operations in a single request:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information about batching Table operations, see <bpt id="p1">[</bpt>Performing entity group transactions<ept id="p1">][entity-group-transactions]</ept>.</source>
          <target state="new">For more information about batching Table operations, see <bpt id="p1">[</bpt>Performing entity group transactions<ept id="p1">][entity-group-transactions]</ept>.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Delete a table</source>
          <target state="new">Delete a table</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Finally, to delete a table, pass the table name to the <bpt id="p1">**</bpt>TableRestProxy-&gt;deleteTable<ept id="p1">**</ept> method.</source>
          <target state="new">Finally, to delete a table, pass the table name to the <bpt id="p1">**</bpt>TableRestProxy-&gt;deleteTable<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Now that you’ve learned the basics of the Azure Table service, follow these links to learn about more complex storage tasks.</source>
          <target state="new">Now that you’ve learned the basics of the Azure Table service, follow these links to learn about more complex storage tasks.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Azure Storage<ept id="p1">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept></source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Azure Storage<ept id="p1">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure Storage team blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></source>
          <target state="new">Visit the <bpt id="p1">[</bpt>Azure Storage team blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66a949ed77e378a0a1a61e9d570ebe0c115f11db</xliffext:olfilehash>
  </header>
</xliff>