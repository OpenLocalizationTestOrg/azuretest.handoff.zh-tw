<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using linked templates with Azure Resource Manager</source>
          <target state="new">Using linked templates with Azure Resource Manager</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes how to use linked templates in an Azure Resource Manager template to create a modular template solution.</source>
          <target state="new">Describes how to use linked templates in an Azure Resource Manager template to create a modular template solution.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Shows how to pass parameters values, specify a parameter file, and dynamically created URLs.</source>
          <target state="new">Shows how to pass parameters values, specify a parameter file, and dynamically created URLs.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using linked templates with Azure Resource Manager</source>
          <target state="new">Using linked templates with Azure Resource Manager</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>From within one Azure Resource Manager template, you can link to another template which enables you to decompose your deployment into a set of targeted, purpose-specific templates.</source>
          <target state="new">From within one Azure Resource Manager template, you can link to another template which enables you to decompose your deployment into a set of targeted, purpose-specific templates.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Just as with decomposing an application</source>
          <target state="new">Just as with decomposing an application</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>into a number of code classes, decomposition provides benefits in terms of testing, re-use, and readability.</source>
          <target state="new">into a number of code classes, decomposition provides benefits in terms of testing, re-use, and readability.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can pass parameters from a main template to a linked template, and those parameters can directly map to parameters or variables exposed by the calling template.</source>
          <target state="new">You can pass parameters from a main template to a linked template, and those parameters can directly map to parameters or variables exposed by the calling template.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The linked template can also pass an output variable back</source>
          <target state="new">The linked template can also pass an output variable back</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>to the source template, enabling a two-way data exchange between templates.</source>
          <target state="new">to the source template, enabling a two-way data exchange between templates.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Linking to a template</source>
          <target state="new">Linking to a template</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You create a link between two templates by adding a deployment resource within the main template that points to the linked template.</source>
          <target state="new">You create a link between two templates by adding a deployment resource within the main template that points to the linked template.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You set the <bpt id="p1">**</bpt>templateLink<ept id="p1">**</ept> property to the URI of the linked template.</source>
          <target state="new">You set the <bpt id="p1">**</bpt>templateLink<ept id="p1">**</ept> property to the URI of the linked template.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can</source>
          <target state="new">You can</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>provide parameter values for the linked template either by specifying the values directly in your template or by</source>
          <target state="new">provide parameter values for the linked template either by specifying the values directly in your template or by</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>linking to a parameter file.</source>
          <target state="new">linking to a parameter file.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property to specify a paramter value directly.</source>
          <target state="new">The following example uses the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property to specify a paramter value directly.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Resource Manager must be able to access the linked template, which means you cannot specify a local file for the linked template.</source>
          <target state="new">Resource Manager must be able to access the linked template, which means you cannot specify a local file for the linked template.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can only provide a URI value that includes either <bpt id="p1">**</bpt>http<ept id="p1">**</ept> or <bpt id="p2">**</bpt>https<ept id="p2">**</ept>.</source>
          <target state="new">You can only provide a URI value that includes either <bpt id="p1">**</bpt>http<ept id="p1">**</ept> or <bpt id="p2">**</bpt>https<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One option is to place your linked template in a storage account, and use the URI for that item, such as shown below.</source>
          <target state="new">One option is to place your linked template in a storage account, and use the URI for that item, such as shown below.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Linking to a parameter file</source>
          <target state="new">Linking to a parameter file</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The next example uses the <bpt id="p1">**</bpt>parametersLink<ept id="p1">**</ept> property to link to a parameter file.</source>
          <target state="new">The next example uses the <bpt id="p1">**</bpt>parametersLink<ept id="p1">**</ept> property to link to a parameter file.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The the URI value for the linked parameter file cannot be a local file, and must include either <bpt id="p1">**</bpt>http<ept id="p1">**</ept> or <bpt id="p2">**</bpt>https<ept id="p2">**</ept>.</source>
          <target state="new">The the URI value for the linked parameter file cannot be a local file, and must include either <bpt id="p1">**</bpt>http<ept id="p1">**</ept> or <bpt id="p2">**</bpt>https<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using variables to link templates</source>
          <target state="new">Using variables to link templates</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The previous examples showed hard-coded URL values for the template links.</source>
          <target state="new">The previous examples showed hard-coded URL values for the template links.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This approach might work for a simple template but it does not work well when working with a large set of modular templates.</source>
          <target state="new">This approach might work for a simple template but it does not work well when working with a large set of modular templates.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instead, you can create a static variable that stores a base URL</source>
          <target state="new">Instead, you can create a static variable that stores a base URL</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>for the main template and then dynamically create URLs for the linked templates from that base URL.</source>
          <target state="new">for the main template and then dynamically create URLs for the linked templates from that base URL.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The benefit of this approach is you can</source>
          <target state="new">The benefit of this approach is you can</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>easily move or fork the template because you only need to change the static variable in the main template.</source>
          <target state="new">easily move or fork the template because you only need to change the static variable in the main template.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The main template passes the correct URIs throughout the decomposed template.</source>
          <target state="new">The main template passes the correct URIs throughout the decomposed template.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example shows how to use a base URL to create two URLs for linked templates (<bpt id="p1">**</bpt>sharedTemplateUrl<ept id="p1">**</ept> and <bpt id="p2">**</bpt>vmTemplate<ept id="p2">**</ept>).</source>
          <target state="new">The following example shows how to use a base URL to create two URLs for linked templates (<bpt id="p1">**</bpt>sharedTemplateUrl<ept id="p1">**</ept> and <bpt id="p2">**</bpt>vmTemplate<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Passing values back from a linked template</source>
          <target state="new">Passing values back from a linked template</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you need to pass a value from linked template to the main template, you can create a value in <bpt id="p1">**</bpt>outputs<ept id="p1">**</ept> section of the linked template.</source>
          <target state="new">If you need to pass a value from linked template to the main template, you can create a value in <bpt id="p1">**</bpt>outputs<ept id="p1">**</ept> section of the linked template.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For an example, see</source>
          <target state="new">For an example, see</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sharing State in Azure Resource Manager Templates<ept id="p1">](best-practices-resource-manager-state.md)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Sharing State in Azure Resource Manager Templates<ept id="p1">](best-practices-resource-manager-state.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Authoring templates</source>
          <target state="new">Authoring templates</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Deploying templates</source>
          <target state="new">Deploying templates</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e643ce2ffbdb2c82baf297b6184ba79052d15cb</xliffext:olfilehash>
  </header>
</xliff>