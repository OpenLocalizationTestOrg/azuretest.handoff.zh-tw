<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Event Hubs Authentication and Security Model Overview</source>
          <target state="new">Event Hubs Authentication and Security Model Overview</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Event Hubs FAQ</source>
          <target state="new">Event Hubs FAQ</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Event Hubs authentication and security model overview</source>
          <target state="new">Event Hubs authentication and security model overview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Event Hubs security model meets the following requirements:</source>
          <target state="new">The Event Hubs security model meets the following requirements:</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Only devices that present valid credentials can send data to an Event Hub.</source>
          <target state="new">Only devices that present valid credentials can send data to an Event Hub.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A device cannot impersonate another device.</source>
          <target state="new">A device cannot impersonate another device.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A rogue device can be blocked from sending data to an Event Hub.</source>
          <target state="new">A rogue device can be blocked from sending data to an Event Hub.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Device authentication</source>
          <target state="new">Device authentication</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Event Hubs security model is based on a combination of <bpt id="p1">[</bpt>Shared Access Signature (SAS)<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept> tokens and event publishers.</source>
          <target state="new">The Event Hubs security model is based on a combination of <bpt id="p1">[</bpt>Shared Access Signature (SAS)<ept id="p1">](https://msdn.microsoft.com/library/dn170477.aspx)</ept> tokens and event publishers.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An event publisher defines a virtual endpoint for an Event Hub.</source>
          <target state="new">An event publisher defines a virtual endpoint for an Event Hub.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The publisher can only be used to send messages to an Event Hub.</source>
          <target state="new">The publisher can only be used to send messages to an Event Hub.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is not possible to receive messages from a publisher.</source>
          <target state="new">It is not possible to receive messages from a publisher.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Typically, an Event Hub employs one publisher per device.</source>
          <target state="new">Typically, an Event Hub employs one publisher per device.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All messages that are sent to any of the publishers of an Event Hub are enqueued within that Event Hub.</source>
          <target state="new">All messages that are sent to any of the publishers of an Event Hub are enqueued within that Event Hub.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Publishers allow fine-grained access control and throttling.</source>
          <target state="new">Publishers allow fine-grained access control and throttling.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each device is assigned a unique token, which is uploaded to the device.</source>
          <target state="new">Each device is assigned a unique token, which is uploaded to the device.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The tokens are produced such that each unique token grants access to a different unique publisher.</source>
          <target state="new">The tokens are produced such that each unique token grants access to a different unique publisher.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A device that possesses a token can only send to one publisher, but no other publisher.</source>
          <target state="new">A device that possesses a token can only send to one publisher, but no other publisher.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If multiple devices share the same token, then each of these devices shares a publisher.</source>
          <target state="new">If multiple devices share the same token, then each of these devices shares a publisher.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Although not recommended, it is possible to equip devices with tokens that grant direct access to an Event Hub.</source>
          <target state="new">Although not recommended, it is possible to equip devices with tokens that grant direct access to an Event Hub.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any device that holds such a token can send messages directly into that Event Hub.</source>
          <target state="new">Any device that holds such a token can send messages directly into that Event Hub.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Such a device will not be subject to throttling.</source>
          <target state="new">Such a device will not be subject to throttling.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Furthermore, the device cannot be blacklisted from sending to that Event Hub.</source>
          <target state="new">Furthermore, the device cannot be blacklisted from sending to that Event Hub.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All tokens are signed with a SAS key.</source>
          <target state="new">All tokens are signed with a SAS key.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Typically, all tokens are signed with the same key.</source>
          <target state="new">Typically, all tokens are signed with the same key.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Devices are not aware of the key; this prevents devices from manufacturing tokens.</source>
          <target state="new">Devices are not aware of the key; this prevents devices from manufacturing tokens.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creating the key</source>
          <target state="new">Creating the key</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When creating a namespace, Service Bus generates a 256-bit SAS key named <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept>.</source>
          <target state="new">When creating a namespace, Service Bus generates a 256-bit SAS key named <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This key grants send, listen, and manage rights to the namespace.</source>
          <target state="new">This key grants send, listen, and manage rights to the namespace.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can create additional keys.</source>
          <target state="new">You can create additional keys.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is recommended that you produce a key that grants send permissions to the specific Event Hub.</source>
          <target state="new">It is recommended that you produce a key that grants send permissions to the specific Event Hub.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For the remainder of this topic, it is assumed that you named this key <ph id="ph1">`EventHubSendKey`</ph>.</source>
          <target state="new">For the remainder of this topic, it is assumed that you named this key <ph id="ph1">`EventHubSendKey`</ph>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example creates a send-only key when creating the Event Hub:</source>
          <target state="new">The following example creates a send-only key when creating the Event Hub:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Generating tokens</source>
          <target state="new">Generating tokens</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can generate tokens using the SAS key.</source>
          <target state="new">You can generate tokens using the SAS key.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You must produce only one token per device.</source>
          <target state="new">You must produce only one token per device.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Tokens can then be produced using the following method.</source>
          <target state="new">Tokens can then be produced using the following method.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>All tokens are generated using the <bpt id="p1">**</bpt>EventHubSendKey<ept id="p1">**</ept> key.</source>
          <target state="new">All tokens are generated using the <bpt id="p1">**</bpt>EventHubSendKey<ept id="p1">**</ept> key.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each token is assigned a unique URI.</source>
          <target state="new">Each token is assigned a unique URI.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When calling this method, the URI should be specified as <ph id="ph1">`//&lt;NAMESPACE&gt;.servicebus.windows.net/&lt;EVENT_HUB_NAME&gt;/publishers/&lt;PUBLISHER_NAME&gt;`</ph>.</source>
          <target state="new">When calling this method, the URI should be specified as <ph id="ph1">`//&lt;NAMESPACE&gt;.servicebus.windows.net/&lt;EVENT_HUB_NAME&gt;/publishers/&lt;PUBLISHER_NAME&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For all tokens, the URI is identical, with the exception of <ph id="ph1">`PUBLISHER_NAME`</ph>, which should be different for each token.</source>
          <target state="new">For all tokens, the URI is identical, with the exception of <ph id="ph1">`PUBLISHER_NAME`</ph>, which should be different for each token.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Ideally, <ph id="ph1">`PUBLISHER_NAME`</ph> represents the ID of the device that receives that token.</source>
          <target state="new">Ideally, <ph id="ph1">`PUBLISHER_NAME`</ph> represents the ID of the device that receives that token.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method generates a token with the following structure:</source>
          <target state="new">This method generates a token with the following structure:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The token expiration time is specified in seconds from Jan 1, 1970.</source>
          <target state="new">The token expiration time is specified in seconds from Jan 1, 1970.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following is an example of a token:</source>
          <target state="new">The following is an example of a token:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Typically, the tokens have a lifespan that resembles or exceeds the lifespan of the device.</source>
          <target state="new">Typically, the tokens have a lifespan that resembles or exceeds the lifespan of the device.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the device has the capability to obtain a new token, tokens with a shorter lifespan can be used.</source>
          <target state="new">If the device has the capability to obtain a new token, tokens with a shorter lifespan can be used.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Devices sending data</source>
          <target state="new">Devices sending data</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Once the tokens have been created, each device is provisioned with its own unique token.</source>
          <target state="new">Once the tokens have been created, each device is provisioned with its own unique token.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the device sends data into an Event Hub, the device tags its token with the send request.</source>
          <target state="new">When the device sends data into an Event Hub, the device tags its token with the send request.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To prevent an attacker from eavesdropping and stealing the token, the communication between the device and the Event Hub must occur over an encrypted channel.</source>
          <target state="new">To prevent an attacker from eavesdropping and stealing the token, the communication between the device and the Event Hub must occur over an encrypted channel.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Blacklisting devices</source>
          <target state="new">Blacklisting devices</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If a token is stolen by an attacker, the attacker can impersonate the device whose token has been stolen.</source>
          <target state="new">If a token is stolen by an attacker, the attacker can impersonate the device whose token has been stolen.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Blacklisting a device renders the device unusable until the device is given a new token that uses a different publisher.</source>
          <target state="new">Blacklisting a device renders the device unusable until the device is given a new token that uses a different publisher.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Authentication of backend applications</source>
          <target state="new">Authentication of backend applications</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To authenticate backend applications that consume the data generated by devices, Event Hubs employs a security model that is similar to the model that is used for Service Bus topics.</source>
          <target state="new">To authenticate backend applications that consume the data generated by devices, Event Hubs employs a security model that is similar to the model that is used for Service Bus topics.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An Event Hubs consumer group is equivalent to a subscription to a Service Bus topic.</source>
          <target state="new">An Event Hubs consumer group is equivalent to a subscription to a Service Bus topic.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A client can create a consumer group if the request to create the consumer group is accompanied by a token that grants manage privileges for the Event Hub, or for the namespace to which the Event Hub belongs.</source>
          <target state="new">A client can create a consumer group if the request to create the consumer group is accompanied by a token that grants manage privileges for the Event Hub, or for the namespace to which the Event Hub belongs.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A client is allowed to consume data from a consumer group if the receive request is accompanied by a token that grants receive rights on that consumer group, the Event Hub, or the namespace to which the Event Hub belongs.</source>
          <target state="new">A client is allowed to consume data from a consumer group if the receive request is accompanied by a token that grants receive rights on that consumer group, the Event Hub, or the namespace to which the Event Hub belongs.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The current version of Service Bus does not support SAS rules for individual subscriptions.</source>
          <target state="new">The current version of Service Bus does not support SAS rules for individual subscriptions.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The same holds true for Event Hubs consumer groups.</source>
          <target state="new">The same holds true for Event Hubs consumer groups.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>SAS support will be added for both features in the future.</source>
          <target state="new">SAS support will be added for both features in the future.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the absence of SAS authentication for individual consumer groups, you can use SAS keys to secure all consumer groups with a common key.</source>
          <target state="new">In the absence of SAS authentication for individual consumer groups, you can use SAS keys to secure all consumer groups with a common key.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This approach enables an application to consume data from any of the consumer groups of an Event Hub.</source>
          <target state="new">This approach enables an application to consume data from any of the consumer groups of an Event Hub.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creating service identities, relying parties, and rules in ACS</source>
          <target state="new">Creating service identities, relying parties, and rules in ACS</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>ACS supports multiple ways to create service identities, relying parties, and rules, but the easiest way to do this is by using the <bpt id="p1">[</bpt>SBAZTool<ept id="p1">](http://code.msdn.microsoft.com/windowsazure/Authorization-SBAzTool-6fd76d93)</ept>.</source>
          <target state="new">ACS supports multiple ways to create service identities, relying parties, and rules, but the easiest way to do this is by using the <bpt id="p1">[</bpt>SBAZTool<ept id="p1">](http://code.msdn.microsoft.com/windowsazure/Authorization-SBAzTool-6fd76d93)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Create a service identity for an <bpt id="p1">**</bpt>EventHubSender<ept id="p1">**</ept>.</source>
          <target state="new">Create a service identity for an <bpt id="p1">**</bpt>EventHubSender<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This returns the name of the service identity that was created and its key:</source>
          <target state="new">This returns the name of the service identity that was created and its key:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Grant <bpt id="p1">**</bpt>EventHubSender<ept id="p1">**</ept> "Send Claims" to the Event Hub:</source>
          <target state="new">Grant <bpt id="p1">**</bpt>EventHubSender<ept id="p1">**</ept> "Send Claims" to the Event Hub:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Create a service identity for a receiver to Consumer Group 1:</source>
          <target state="new">Create a service identity for a receiver to Consumer Group 1:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Grant <ph id="ph1">`consumergroup1receiver`</ph> "Listen Claims" to <bpt id="p1">**</bpt>ConsumerGroup1<ept id="p1">**</ept>:</source>
          <target state="new">Grant <ph id="ph1">`consumergroup1receiver`</ph> "Listen Claims" to <bpt id="p1">**</bpt>ConsumerGroup1<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Create a service identity for a receiver to <bpt id="p1">**</bpt>Consumer Group 2<ept id="p1">**</ept>:</source>
          <target state="new">Create a service identity for a receiver to <bpt id="p1">**</bpt>Consumer Group 2<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Grant <ph id="ph1">`consumergroup2receiver`</ph> "Listen Claims" to <bpt id="p1">**</bpt>ConsumerGroup2<ept id="p1">**</ept>:</source>
          <target state="new">Grant <ph id="ph1">`consumergroup2receiver`</ph> "Listen Claims" to <bpt id="p1">**</bpt>ConsumerGroup2<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To learn more about Event Hubs, visit the following topics:</source>
          <target state="new">To learn more about Event Hubs, visit the following topics:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Event Hubs Overview</source>
          <target state="new">Event Hubs Overview</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A complete <bpt id="p1">[</bpt><ept id="p1">sample application that uses Event Hubs]</ept>.</source>
          <target state="new">A complete <bpt id="p1">[</bpt><ept id="p1">sample application that uses Event Hubs]</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt><ept id="p1">queued messaging solution]</ept> using Service Bus queues.</source>
          <target state="new">A <bpt id="p1">[</bpt><ept id="p1">queued messaging solution]</ept> using Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5fec5ec5c1498566bfb16758f659c41698b4872</xliffext:olfilehash>
  </header>
</xliff>