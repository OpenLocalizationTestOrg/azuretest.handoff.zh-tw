<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scheduler High-Availability and Reliability</source>
          <target state="new">Scheduler High-Availability and Reliability</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Scheduler High-Availability and Reliability</source>
          <target state="new">Scheduler High-Availability and Reliability</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure Scheduler High-Availability</source>
          <target state="new">Azure Scheduler High-Availability</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a core Azure platform service, Azure Scheduler is highly available and features both geo-redundant service deployment and geo-regional job replication.</source>
          <target state="new">As a core Azure platform service, Azure Scheduler is highly available and features both geo-redundant service deployment and geo-regional job replication.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Geo-redundant service deployment</source>
          <target state="new">Geo-redundant service deployment</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure Scheduler is available via the UI in almost every geo region that's in Azure today.</source>
          <target state="new">Azure Scheduler is available via the UI in almost every geo region that's in Azure today.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The list of regions that Azure Scheduler is available in is <bpt id="p1">[</bpt>listed here<ept id="p1">](http://azure.microsoft.com/regions/#services)</ept>.</source>
          <target state="new">The list of regions that Azure Scheduler is available in is <bpt id="p1">[</bpt>listed here<ept id="p1">](http://azure.microsoft.com/regions/#services)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a data center in a hosted region is rendered unavailable, the failover capabilities of Azure Scheduler are such that the service is available from another data center.</source>
          <target state="new">If a data center in a hosted region is rendered unavailable, the failover capabilities of Azure Scheduler are such that the service is available from another data center.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Geo-regional job replication</source>
          <target state="new">Geo-regional job replication</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Not only is the Azure Scheduler front-end available for management requests, but your own job is also geo-replicated.</source>
          <target state="new">Not only is the Azure Scheduler front-end available for management requests, but your own job is also geo-replicated.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When there’s an outage in one region, Azure Scheduler fails over and ensures that the job is run from another data center in the paired geographic region.</source>
          <target state="new">When there’s an outage in one region, Azure Scheduler fails over and ensures that the job is run from another data center in the paired geographic region.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you’ve created a job in South Central US, Azure Scheduler automatically replicates that job in North Central US.</source>
          <target state="new">For example, if you’ve created a job in South Central US, Azure Scheduler automatically replicates that job in North Central US.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When there’s a failure in South Central US, Azure Scheduler ensures that the job is run from North Central US.</source>
          <target state="new">When there’s a failure in South Central US, Azure Scheduler ensures that the job is run from North Central US.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The list of paired Azure regions is available here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn758204.aspx)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>The list of paired Azure regions is available here<ept id="p1">](https://msdn.microsoft.com/library/azure/dn758204.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As a result, Azure Scheduler ensures that your data stays within the same broader geographic region in case of an Azure failure.</source>
          <target state="new">As a result, Azure Scheduler ensures that your data stays within the same broader geographic region in case of an Azure failure.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As a result, you need not duplicate your job just to add high availability – Azure Scheduler automatically provides high-availability capabilities for your jobs.</source>
          <target state="new">As a result, you need not duplicate your job just to add high availability – Azure Scheduler automatically provides high-availability capabilities for your jobs.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Azure Scheduler Reliability</source>
          <target state="new">Azure Scheduler Reliability</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Azure Scheduler guarantees its own high-availability and takes a different approach to user-created jobs.</source>
          <target state="new">Azure Scheduler guarantees its own high-availability and takes a different approach to user-created jobs.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, your job may invoke an HTTP endpoint that’s unavailable.</source>
          <target state="new">For example, your job may invoke an HTTP endpoint that’s unavailable.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Azure Scheduler nonetheless tries to execute your job successfully, by giving you alternative options to deal with failure.</source>
          <target state="new">Azure Scheduler nonetheless tries to execute your job successfully, by giving you alternative options to deal with failure.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Azure Scheduler does this in two ways:</source>
          <target state="new">Azure Scheduler does this in two ways:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Configurable Retry Policy via “retryPolicy”</source>
          <target state="new">Configurable Retry Policy via “retryPolicy”</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Azure Scheduler allows you to configure a retry policy.</source>
          <target state="new">Azure Scheduler allows you to configure a retry policy.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, if a job fails, Scheduler tries the job again four more times, at 30-second intervals.</source>
          <target state="new">By default, if a job fails, Scheduler tries the job again four more times, at 30-second intervals.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You may re-configure this retry policy to be more aggressive (for example, ten times, at 30-second intervals) or looser (for example, two times, at daily intervals.)</source>
          <target state="new">You may re-configure this retry policy to be more aggressive (for example, ten times, at 30-second intervals) or looser (for example, two times, at daily intervals.)</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As an example of when this may help, you may create a job that runs once a week and invokes an HTTP endpoint.</source>
          <target state="new">As an example of when this may help, you may create a job that runs once a week and invokes an HTTP endpoint.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the HTTP endpoint is down for a few hours when your job runs, you may not want to wait one more week for the job to run again since even the default retry policy will fail.</source>
          <target state="new">If the HTTP endpoint is down for a few hours when your job runs, you may not want to wait one more week for the job to run again since even the default retry policy will fail.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In such cases, you may reconfigure the standard retry policy to retry every three hours (for example) instead of every 30 seconds.</source>
          <target state="new">In such cases, you may reconfigure the standard retry policy to retry every three hours (for example) instead of every 30 seconds.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To learn how to configure a retry policy, refer to <bpt id="p1">[</bpt>retryPolicy<ept id="p1">](scheduler-concepts-terms.md#retrypolicy)</ept>.</source>
          <target state="new">To learn how to configure a retry policy, refer to <bpt id="p1">[</bpt>retryPolicy<ept id="p1">](scheduler-concepts-terms.md#retrypolicy)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Alternate Endpoint Configurability via “errorAction”</source>
          <target state="new">Alternate Endpoint Configurability via “errorAction”</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the target endpoint for your Azure Scheduler job remains unreachable, Azure Scheduler falls back to the alternate error-handling endpoint after following its retry policy.</source>
          <target state="new">If the target endpoint for your Azure Scheduler job remains unreachable, Azure Scheduler falls back to the alternate error-handling endpoint after following its retry policy.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If an alternate error-handling endpoint is configured, Azure Scheduler invokes it.</source>
          <target state="new">If an alternate error-handling endpoint is configured, Azure Scheduler invokes it.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With an alternate endpoint, your own jobs are highly available in the face of failure.</source>
          <target state="new">With an alternate endpoint, your own jobs are highly available in the face of failure.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As an example, in the diagram below, Azure Scheduler follows its retry policy to hit a New York web service.</source>
          <target state="new">As an example, in the diagram below, Azure Scheduler follows its retry policy to hit a New York web service.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After the retries fail, it checks if there's an alternate.</source>
          <target state="new">After the retries fail, it checks if there's an alternate.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It then goes ahead and starts making requests to the alternate with the same retry policy.</source>
          <target state="new">It then goes ahead and starts making requests to the alternate with the same retry policy.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that the same retry policy applies to both the original action and the alternate error action.</source>
          <target state="new">Note that the same retry policy applies to both the original action and the alternate error action.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It’s also possible to have the alternate error action’s action type be different from the main action’s action type.</source>
          <target state="new">It’s also possible to have the alternate error action’s action type be different from the main action’s action type.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, while the main action may be invoking an HTTP endpoint, the error action may instead be a storage queue action that does error-logging.</source>
          <target state="new">For example, while the main action may be invoking an HTTP endpoint, the error action may instead be a storage queue action that does error-logging.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To learn how to configure an alternate endpoint, refer to <bpt id="p1">[</bpt>errorAction<ept id="p1">](scheduler-concepts-terms.md#action-and-erroraction)</ept>.</source>
          <target state="new">To learn how to configure an alternate endpoint, refer to <bpt id="p1">[</bpt>errorAction<ept id="p1">](scheduler-concepts-terms.md#action-and-erroraction)</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>What is Scheduler?</source>
          <target state="new">What is Scheduler?</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Scheduler Concepts, Terminology, and Entity Hierarchy</source>
          <target state="new">Scheduler Concepts, Terminology, and Entity Hierarchy</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Get Started Using Scheduler in the Management Portal</source>
          <target state="new">Get Started Using Scheduler in the Management Portal</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Plans and Billing in Azure Scheduler</source>
          <target state="new">Plans and Billing in Azure Scheduler</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>How to Build Complex Schedules and Advanced Recurrence with Azure Scheduler</source>
          <target state="new">How to Build Complex Schedules and Advanced Recurrence with Azure Scheduler</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Scheduler REST API Reference</source>
          <target state="new">Scheduler REST API Reference</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Scheduler PowerShell Cmdlets Reference</source>
          <target state="new">Scheduler PowerShell Cmdlets Reference</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Scheduler Limits, Defaults, and Error Codes</source>
          <target state="new">Scheduler Limits, Defaults, and Error Codes</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Scheduler Outbound Authentication</source>
          <target state="new">Scheduler Outbound Authentication</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb1796510ef27ac4a667647a33a94694489486d7</xliffext:olfilehash>
  </header>
</xliff>