<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Service Fabric How to monitor and diagnose services locally</source>
          <target state="new">Microsoft Azure Service Fabric How to monitor and diagnose services locally</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes how you can monitor and diagnose your services written using Microsoft Azure Service Fabric on a local development machine.</source>
          <target state="new">This article describes how you can monitor and diagnose your services written using Microsoft Azure Service Fabric on a local development machine.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Monitoring and Diagnosing Services in a local machine development setup</source>
          <target state="new">Monitoring and Diagnosing Services in a local machine development setup</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Monitoring, detecting, diagnosing and troubleshooting allows for services to continue with minimal disruption to user experience.</source>
          <target state="new">Monitoring, detecting, diagnosing and troubleshooting allows for services to continue with minimal disruption to user experience.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While it is critical in an actual deployed production environment, the efficacy will depend on adopting a similar model during development of services to ensure that it works when you move to a real world setup.</source>
          <target state="new">While it is critical in an actual deployed production environment, the efficacy will depend on adopting a similar model during development of services to ensure that it works when you move to a real world setup.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service Fabric makes it easy for service developers to implement diagnostics that can seamlessly work across single machine local development and real world production cluster setups.</source>
          <target state="new">Service Fabric makes it easy for service developers to implement diagnostics that can seamlessly work across single machine local development and real world production cluster setups.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Tracing and logging</source>
          <target state="new">Tracing and logging</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event Tracing for Windows<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb968803.aspx)</ept> (ETW) is the recommended technology for tracing messages in Service Fabric.</source>
          <target state="new"><bpt id="p1">[</bpt>Event Tracing for Windows<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb968803.aspx)</ept> (ETW) is the recommended technology for tracing messages in Service Fabric.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reasons for this are:</source>
          <target state="new">Reasons for this are:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>ETW is fast.</source>
          <target state="new">ETW is fast.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It was built as a tracing technology that has a minimal impact on your code execution times.</source>
          <target state="new">It was built as a tracing technology that has a minimal impact on your code execution times.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ETW tracing works seamlessly across local development environments and also real world cluster setups.</source>
          <target state="new">ETW tracing works seamlessly across local development environments and also real world cluster setups.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This  means you don't have to rewrite your tracing code when you are ready to deploy your code to a real cluster.</source>
          <target state="new">This  means you don't have to rewrite your tracing code when you are ready to deploy your code to a real cluster.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Service Fabric system code also uses ETW for internal tracing.</source>
          <target state="new">Service Fabric system code also uses ETW for internal tracing.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This allows you to view your application traces interleaved with Service Fabric system traces, making it easier to understand the and sequences and interrelationships between your application code and events in the underlying system.</source>
          <target state="new">This allows you to view your application traces interleaved with Service Fabric system traces, making it easier to understand the and sequences and interrelationships between your application code and events in the underlying system.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There is built-in support in Service Fabric Visual Studio tools to view ETW events.</source>
          <target state="new">There is built-in support in Service Fabric Visual Studio tools to view ETW events.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>View Service Fabric system events in Visual Studio</source>
          <target state="new">View Service Fabric system events in Visual Studio</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Service Fabric emits ETW events to help application developers understand what is happening in the platform.</source>
          <target state="new">Service Fabric emits ETW events to help application developers understand what is happening in the platform.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To view these events follow these steps:</source>
          <target state="new">To view these events follow these steps:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You must have the following pre-requisties installed.</source>
          <target state="new">You must have the following pre-requisties installed.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015</source>
          <target state="new">Visual Studio 2015</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Service Fabric SDK</source>
          <target state="new">Service Fabric SDK</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Launch Visual Studio as an administrator.</source>
          <target state="new">Launch Visual Studio as an administrator.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create (or open an existing) project for a stateful or stateless Actor or Service.</source>
          <target state="new">Create (or open an existing) project for a stateful or stateless Actor or Service.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create a Service Fabric Application</source>
          <target state="new">Create a Service Fabric Application</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create a Service Fabric Service</source>
          <target state="new">Create a Service Fabric Service</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Press F5 to debug the application.</source>
          <target state="new">Press F5 to debug the application.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Service Fabric events should show up in the Diagnostics Events window.</source>
          <target state="new">The Service Fabric events should show up in the Diagnostics Events window.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Each event has standard metadata information which tells you the node, application and service the event is coming from.</source>
          <target state="new">Each event has standard metadata information which tells you the node, application and service the event is coming from.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also filter the list of events using the "Filter events" box at the top of the windows, for example you can filter on Node Name or Service Name.</source>
          <target state="new">You can also filter the list of events using the "Filter events" box at the top of the windows, for example you can filter on Node Name or Service Name.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Visual Studio Diagnostics Events Viewer</source>
          <target state="new">Visual Studio Diagnostics Events Viewer</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the Diagnostics Events window does not automatically show, Go to Server Explorer tab in Visual Studio, right-click the Service Fabric cluster and choose "View Diagnostic Events" in the context menu.</source>
          <target state="new">If the Diagnostics Events window does not automatically show, Go to Server Explorer tab in Visual Studio, right-click the Service Fabric cluster and choose "View Diagnostic Events" in the context menu.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open the Visual Studio Diagnostics Events Viewer</source>
          <target state="new">Open the Visual Studio Diagnostics Events Viewer</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add your own custom traces to the application code</source>
          <target state="new">Add your own custom traces to the application code</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Service Fabric Visual Studio project templates contain sample code.</source>
          <target state="new">The Service Fabric Visual Studio project templates contain sample code.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The code shows how to add custom application code ETW traces which show up in the Visual Studio ETW viewer alongside system traces from Service Fabric.</source>
          <target state="new">The code shows how to add custom application code ETW traces which show up in the Visual Studio ETW viewer alongside system traces from Service Fabric.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The advantage of this method is that metadata is automatically added to traces, and the Visual Studio Diagnostic Viewer is already configured to display them.</source>
          <target state="new">The advantage of this method is that metadata is automatically added to traces, and the Visual Studio Diagnostic Viewer is already configured to display them.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For projects created from the <bpt id="p1">**</bpt>service templates<ept id="p1">**</ept> (stateless or stateful):</source>
          <target state="new">For projects created from the <bpt id="p1">**</bpt>service templates<ept id="p1">**</ept> (stateless or stateful):</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Service.cs<ept id="p1">**</ept> file.</source>
          <target state="new">Open the <bpt id="p1">**</bpt>Service.cs<ept id="p1">**</ept> file.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`ServiceEventSource.Current.Message`</ph> in the <bpt id="p1">*</bpt>RunAsync<ept id="p1">*</ept> method shows an example of a custom ETW trace from the application code.</source>
          <target state="new">The call to <ph id="ph1">`ServiceEventSource.Current.Message`</ph> in the <bpt id="p1">*</bpt>RunAsync<ept id="p1">*</ept> method shows an example of a custom ETW trace from the application code.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>ServiceEventSource.cs<ept id="p1">**</ept> file, the overloads of the <ph id="ph1">`ServiceEventSource.Message`</ph> method show an option of how to write custom ETW traces.</source>
          <target state="new">In the <bpt id="p1">**</bpt>ServiceEventSource.cs<ept id="p1">**</ept> file, the overloads of the <ph id="ph1">`ServiceEventSource.Message`</ph> method show an option of how to write custom ETW traces.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For projects created from the <bpt id="p1">**</bpt>actor templates<ept id="p1">**</ept> (stateless or stateful):</source>
          <target state="new">For projects created from the <bpt id="p1">**</bpt>actor templates<ept id="p1">**</ept> (stateless or stateful):</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>"ProjectName".cs<ept id="p1">**</ept> file where <bpt id="p2">*</bpt>ProjectName<ept id="p2">*</ept> is the name you chose for your Visual Studio project.</source>
          <target state="new">Open the <bpt id="p1">**</bpt>"ProjectName".cs<ept id="p1">**</ept> file where <bpt id="p2">*</bpt>ProjectName<ept id="p2">*</ept> is the name you chose for your Visual Studio project.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Find the code <ph id="ph1">`ActorEventSource.Current.ActorMessage(this, "Doing Work");`</ph> in the <bpt id="p1">*</bpt>DoWorkAsync<ept id="p1">*</ept> method.</source>
          <target state="new">Find the code <ph id="ph1">`ActorEventSource.Current.ActorMessage(this, "Doing Work");`</ph> in the <bpt id="p1">*</bpt>DoWorkAsync<ept id="p1">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is an example of a custom ETW trace from application code.</source>
          <target state="new">This is an example of a custom ETW trace from application code.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In file <bpt id="p1">**</bpt>ActorEventSource.cs<ept id="p1">**</ept>, the overloads for the <ph id="ph1">`ActorEventSource.ActorMessage`</ph> method show an option of how to write custom ETW traces.</source>
          <target state="new">In file <bpt id="p1">**</bpt>ActorEventSource.cs<ept id="p1">**</ept>, the overloads for the <ph id="ph1">`ActorEventSource.ActorMessage`</ph> method show an option of how to write custom ETW traces.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After adding custom ETW tracing to your service code, you can build, deploy, and run the application again to see your event(s) in the Diagnostic Viewer.</source>
          <target state="new">After adding custom ETW tracing to your service code, you can build, deploy, and run the application again to see your event(s) in the Diagnostic Viewer.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you debug the application with F5, the Diagnostic Viewer will  open automatically.</source>
          <target state="new">If you debug the application with F5, the Diagnostic Viewer will  open automatically.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Coming soon</source>
          <target state="new">Coming soon</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The same tracing code that you added to your application above for local diagnostics will work with tools that you can use to view these events when running the same code on an Azure cluster.</source>
          <target state="new">The same tracing code that you added to your application above for local diagnostics will work with tools that you can use to view these events when running the same code on an Azure cluster.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Details for this are coming soon.</source>
          <target state="new">Details for this are coming soon.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Service Fabric Health Introduction</source>
          <target state="new">Service Fabric Health Introduction</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Application Insights setup</source>
          <target state="new">Application Insights setup</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Azure Service Fabric Actors Diagnostics and Performance Monitoring</source>
          <target state="new">Azure Service Fabric Actors Diagnostics and Performance Monitoring</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Stateful Reliable Service Diagnostics</source>
          <target state="new">Stateful Reliable Service Diagnostics</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a5055338bfe257f905d67f2f96f25c820b9b735</xliffext:olfilehash>
  </header>
</xliff>