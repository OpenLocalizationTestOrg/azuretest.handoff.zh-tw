<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Windows Universal Apps Reach SDK Integration</source>
          <target state="new">Windows Universal Apps Reach SDK Integration</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to Integrate Azure Mobile Engagement Reach with Windows Universal Apps</source>
          <target state="new">How to Integrate Azure Mobile Engagement Reach with Windows Universal Apps</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Universal Apps Reach SDK Integration</source>
          <target state="new">Windows Universal Apps Reach SDK Integration</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You must follow the integration procedure described in the <bpt id="p1">[</bpt>Windows Universal Engagement SDK Integration<ept id="p1">](mobile-engagement-windows-store-integrate-engagement.md)</ept> before following this guide.</source>
          <target state="new">You must follow the integration procedure described in the <bpt id="p1">[</bpt>Windows Universal Engagement SDK Integration<ept id="p1">](mobile-engagement-windows-store-integrate-engagement.md)</ept> before following this guide.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Embed the Engagement Reach SDK into your Windows Universal project</source>
          <target state="new">Embed the Engagement Reach SDK into your Windows Universal project</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You do not have anything to add.</source>
          <target state="new">You do not have anything to add.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementReach`</ph> references and resources are already in your project.</source>
          <target state="new"><ph id="ph1">`EngagementReach`</ph> references and resources are already in your project.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> You can customize images located in the <ph id="ph2">`Resources`</ph> folder of your project, especially the brand icon (that default to the Engagement icon).</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> You can customize images located in the <ph id="ph2">`Resources`</ph> folder of your project, especially the brand icon (that default to the Engagement icon).</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On Universal Apps you can also move the <ph id="ph1">`Resources`</ph> folder on your shared project to share its content between apps, but you will have to keep the <ph id="ph2">`Resources\EngagementConfiguration.xml`</ph> file on its default location as it is platform dependent.</source>
          <target state="new">On Universal Apps you can also move the <ph id="ph1">`Resources`</ph> folder on your shared project to share its content between apps, but you will have to keep the <ph id="ph2">`Resources\EngagementConfiguration.xml`</ph> file on its default location as it is platform dependent.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Enable the Windows Notification Service</source>
          <target state="new">Enable the Windows Notification Service</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to use the <bpt id="p1">**</bpt>Windows Notification Service<ept id="p1">**</ept> (referred as WNS) in your <ph id="ph1">`Package.appxmanifest`</ph> file on <ph id="ph2">`Application UI`</ph> click on <ph id="ph3">`All Image Assets`</ph> in the left bot box.</source>
          <target state="new">In order to use the <bpt id="p1">**</bpt>Windows Notification Service<ept id="p1">**</ept> (referred as WNS) in your <ph id="ph1">`Package.appxmanifest`</ph> file on <ph id="ph2">`Application UI`</ph> click on <ph id="ph3">`All Image Assets`</ph> in the left bot box.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At the right of the box in <ph id="ph1">`Notifications`</ph>, change <ph id="ph2">`toast capable`</ph> from <ph id="ph3">`(not set)`</ph> to <ph id="ph4">`(Yes)`</ph>.</source>
          <target state="new">At the right of the box in <ph id="ph1">`Notifications`</ph>, change <ph id="ph2">`toast capable`</ph> from <ph id="ph3">`(not set)`</ph> to <ph id="ph4">`(Yes)`</ph>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Moreover, you need to synchronize your app to your Microsoft account and to the engagement platform.</source>
          <target state="new">Moreover, you need to synchronize your app to your Microsoft account and to the engagement platform.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For this you need to create an account or log on <bpt id="p1">[</bpt>windows dev center<ept id="p1">](https://dev.windows.com)</ept>.</source>
          <target state="new">For this you need to create an account or log on <bpt id="p1">[</bpt>windows dev center<ept id="p1">](https://dev.windows.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After that create a new application and find the SID and secret key.</source>
          <target state="new">After that create a new application and find the SID and secret key.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>On the engagement frontend, go on your app setting in <ph id="ph1">`native push`</ph> and paste your credentials.</source>
          <target state="new">On the engagement frontend, go on your app setting in <ph id="ph1">`native push`</ph> and paste your credentials.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After that, right click on your project, select <ph id="ph1">`store`</ph> and <ph id="ph2">`Associate App with the Store...`</ph>.</source>
          <target state="new">After that, right click on your project, select <ph id="ph1">`store`</ph> and <ph id="ph2">`Associate App with the Store...`</ph>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You just need to select the application you have create before to synchronize it.</source>
          <target state="new">You just need to select the application you have create before to synchronize it.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initialize the Engagement Reach SDK</source>
          <target state="new">Initialize the Engagement Reach SDK</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`App.xaml.cs`</ph>:</source>
          <target state="new">Modify the <ph id="ph1">`App.xaml.cs`</ph>:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add to your <ph id="ph1">`using`</ph> statements :</source>
          <target state="new">Add to your <ph id="ph1">`using`</ph> statements :</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Insert <ph id="ph1">`EngagementReach.Instance.Init`</ph> just after <ph id="ph2">`EngagementAgent.Instance.Init`</ph> in <ph id="ph3">`OnLaunched`</ph> :</source>
          <target state="new">Insert <ph id="ph1">`EngagementReach.Instance.Init`</ph> just after <ph id="ph2">`EngagementAgent.Instance.Init`</ph> in <ph id="ph3">`OnLaunched`</ph> :</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you want to enable engagement reach when your app is activated by a command, another application or a custom scheme, override <ph id="ph1">`OnActivated`</ph> method:</source>
          <target state="new">If you want to enable engagement reach when your app is activated by a command, another application or a custom scheme, override <ph id="ph1">`OnActivated`</ph> method:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EngagementReach.Instance.Init`</ph> runs in a dedicated thread.</source>
          <target state="new">The <ph id="ph1">`EngagementReach.Instance.Init`</ph> runs in a dedicated thread.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You do not have to do it yourself.</source>
          <target state="new">You do not have to do it yourself.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> You can specify the name of the WNS push channel of your application in the <ph id="ph2">`Resources\EngagementConfiguration.xml`</ph> file of your project on <ph id="ph3">`&lt;channelName&gt;&lt;/channelName&gt;`</ph>.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> You can specify the name of the WNS push channel of your application in the <ph id="ph2">`Resources\EngagementConfiguration.xml`</ph> file of your project on <ph id="ph3">`&lt;channelName&gt;&lt;/channelName&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>By default, Engagement creates a name based on the appId.</source>
          <target state="new">By default, Engagement creates a name based on the appId.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You have no need to specify the name yourself, except if you plan to use the push channel outside of Engagement.</source>
          <target state="new">You have no need to specify the name yourself, except if you plan to use the push channel outside of Engagement.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="new">Integration</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Engagement provides two ways to implement Reach notification and announcement: the Overlay integration and the Web View integration.</source>
          <target state="new">Engagement provides two ways to implement Reach notification and announcement: the Overlay integration and the Web View integration.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Overlay integration doesn't require a lot of code to write into your application.</source>
          <target state="new">Overlay integration doesn't require a lot of code to write into your application.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You just need to tag your pages, xaml and cs files, with EngagementPageOverlay.</source>
          <target state="new">You just need to tag your pages, xaml and cs files, with EngagementPageOverlay.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Moreover, if you customize the Engagement default view, your customization will be shared with all tagged pages and just defined once.</source>
          <target state="new">Moreover, if you customize the Engagement default view, your customization will be shared with all tagged pages and just defined once.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>But if your pages need to inherit from an object other than EngagementPageOverlay, you are stuck and forced to use Web View integration.</source>
          <target state="new">But if your pages need to inherit from an object other than EngagementPageOverlay, you are stuck and forced to use Web View integration.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Webview integration is more complicated to be implemented.</source>
          <target state="new">Webview integration is more complicated to be implemented.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>But if your App pages need to inherit from an object other than "Page", then you have to integrate the Web View and its behavior.</source>
          <target state="new">But if your App pages need to inherit from an object other than "Page", then you have to integrate the Web View and its behavior.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> You should consider adding a root level <ph id="ph2">`&lt;Grid&gt;&lt;/Grid&gt;`</ph> element to surround all page content.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> You should consider adding a root level <ph id="ph2">`&lt;Grid&gt;&lt;/Grid&gt;`</ph> element to surround all page content.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For Webview integration, just add Webview as child of this grid.</source>
          <target state="new">For Webview integration, just add Webview as child of this grid.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you need to set Engagement component elsewhere, remember that you have to manage the display size yourself.</source>
          <target state="new">If you need to set Engagement component elsewhere, remember that you have to manage the display size yourself.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Overlay integration</source>
          <target state="new">Overlay integration</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Engagement provides an overlay for notification and announcement display.</source>
          <target state="new">Engagement provides an overlay for notification and announcement display.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you want to use it, do not use webview integration.</source>
          <target state="new">If you want to use it, do not use webview integration.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In your .xaml file change EngagementPage reference to EngagementPageOverlay</source>
          <target state="new">In your .xaml file change EngagementPage reference to EngagementPageOverlay</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add to your namespaces declarations:</source>
          <target state="new">Add to your namespaces declarations:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`engagement:EngagementPage`</ph> with <ph id="ph2">`engagement:EngagementPageOverlay`</ph>:</source>
          <target state="new">Replace <ph id="ph1">`engagement:EngagementPage`</ph> with <ph id="ph2">`engagement:EngagementPageOverlay`</ph>:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>With EngagementPage:</source>
          <target state="new">With EngagementPage:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>With EngagementPageOverlay:</source>
          <target state="new">With EngagementPageOverlay:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With EngagementPageOverlay for 8.1:</source>
          <target state="new">With EngagementPageOverlay for 8.1:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Then in your .cs file tag your page in "EngagementPageOverlay" instead of "EngagementPage" and import "Microsoft.Azure.Engagement.Overlay".</source>
          <target state="new">Then in your .cs file tag your page in "EngagementPageOverlay" instead of "EngagementPage" and import "Microsoft.Azure.Engagement.Overlay".</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`EngagementPage`</ph> with <ph id="ph2">`EngagementPageOverlay`</ph>:</source>
          <target state="new">Replace <ph id="ph1">`EngagementPage`</ph> with <ph id="ph2">`EngagementPageOverlay`</ph>:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>With EngagementPage:</source>
          <target state="new">With EngagementPage:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>With EngagementPageOverlay:</source>
          <target state="new">With EngagementPageOverlay:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Now this page uses the engagement overlay mechanism, you don't have to insert a web view.</source>
          <target state="new">Now this page uses the engagement overlay mechanism, you don't have to insert a web view.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Engagement overlay uses the first “Grid” element it finds in your xaml file to add two web views on your page.</source>
          <target state="new">The Engagement overlay uses the first “Grid” element it finds in your xaml file to add two web views on your page.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you want to locate where web views will be set, you can define a grid named “EngagementGrid” like this:</source>
          <target state="new">If you want to locate where web views will be set, you can define a grid named “EngagementGrid” like this:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can customize the overlay notification and announcement directly on their xaml and cs files:</source>
          <target state="new">You can customize the overlay notification and announcement directly on their xaml and cs files:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementAnnouncement.html`</ph> : The <ph id="ph2">`Announcement`</ph> web view html design.</source>
          <target state="new"><ph id="ph1">`EngagementAnnouncement.html`</ph> : The <ph id="ph2">`Announcement`</ph> web view html design.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementOverlayAnnouncement.xaml`</ph> : The <ph id="ph2">`Announcement`</ph> xaml design.</source>
          <target state="new"><ph id="ph1">`EngagementOverlayAnnouncement.xaml`</ph> : The <ph id="ph2">`Announcement`</ph> xaml design.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementOverlayAnnouncement.xaml.cs`</ph> : The <ph id="ph2">`EngagementOverlayAnnouncement.xaml`</ph> linked code.</source>
          <target state="new"><ph id="ph1">`EngagementOverlayAnnouncement.xaml.cs`</ph> : The <ph id="ph2">`EngagementOverlayAnnouncement.xaml`</ph> linked code.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementNotification.html`</ph> : The <ph id="ph2">`Notification`</ph> web view html design.</source>
          <target state="new"><ph id="ph1">`EngagementNotification.html`</ph> : The <ph id="ph2">`Notification`</ph> web view html design.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementOverlayNotification.xaml`</ph> : The <ph id="ph2">`Notification`</ph> xaml design.</source>
          <target state="new"><ph id="ph1">`EngagementOverlayNotification.xaml`</ph> : The <ph id="ph2">`Notification`</ph> xaml design.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementOverlayNotification.xaml.cs`</ph> : The <ph id="ph2">`EngagementOverlayNotification.xaml`</ph> linked code.</source>
          <target state="new"><ph id="ph1">`EngagementOverlayNotification.xaml.cs`</ph> : The <ph id="ph2">`EngagementOverlayNotification.xaml`</ph> linked code.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EngagementPageOverlay.cs`</ph> : The <ph id="ph2">`Overlay`</ph> announcement and notification display code.</source>
          <target state="new"><ph id="ph1">`EngagementPageOverlay.cs`</ph> : The <ph id="ph2">`Overlay`</ph> announcement and notification display code.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Web View integration</source>
          <target state="new">Web View integration</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you want to use it, do not use Overlay integration.</source>
          <target state="new">If you want to use it, do not use Overlay integration.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To display engagement content, you need to integrate the two xaml WebView in each page and you need to display notification and announcement.</source>
          <target state="new">To display engagement content, you need to integrate the two xaml WebView in each page and you need to display notification and announcement.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>So add this code in your xaml file:</source>
          <target state="new">So add this code in your xaml file:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For 8.1 integration:</source>
          <target state="new">For 8.1 integration:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>And your associate .cs file have to look like:</source>
          <target state="new">And your associate .cs file have to look like:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This implementation embedded WebView resizing when the device screen is turned.</source>
          <target state="new">This implementation embedded WebView resizing when the device screen is turned.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Handle datapush (optional)</source>
          <target state="new">Handle datapush (optional)</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you want your application to be able to receive Reach data pushes, you have to implement two events of the EngagementReach class:</source>
          <target state="new">If you want your application to be able to receive Reach data pushes, you have to implement two events of the EngagementReach class:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In App.xaml.cs in "Public App(){}" add:</source>
          <target state="new">In App.xaml.cs in "Public App(){}" add:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can see that the callback of each method returns a boolean.</source>
          <target state="new">You can see that the callback of each method returns a boolean.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Engagement sends a feedback to its back-end after dispatching the data push.</source>
          <target state="new">Engagement sends a feedback to its back-end after dispatching the data push.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the callback returns false, the <ph id="ph1">`exit`</ph> feedback will be send.</source>
          <target state="new">If the callback returns false, the <ph id="ph1">`exit`</ph> feedback will be send.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Otherwise, it will be <ph id="ph1">`action`</ph>.</source>
          <target state="new">Otherwise, it will be <ph id="ph1">`action`</ph>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If no callback is set for the events, the <ph id="ph1">`drop`</ph> feedback will be returned to Engagement.</source>
          <target state="new">If no callback is set for the events, the <ph id="ph1">`drop`</ph> feedback will be returned to Engagement.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.WARNING]</ph> Engagement is not able to receive multiples feedbacks for a data push.</source>
          <target state="new"><ph id="ph1">[AZURE.WARNING]</ph> Engagement is not able to receive multiples feedbacks for a data push.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you plan to set several handlers on an event, be aware that the feedback will correspond to the last one sent.</source>
          <target state="new">If you plan to set several handlers on an event, be aware that the feedback will correspond to the last one sent.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this case, we recommend to always returns the same value to avoid having confusing feedback on the front-end.</source>
          <target state="new">In this case, we recommend to always returns the same value to avoid having confusing feedback on the front-end.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Customize UI (optional)</source>
          <target state="new">Customize UI (optional)</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First step</source>
          <target state="new">First step</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>We allow you to customize the reach UI.</source>
          <target state="new">We allow you to customize the reach UI.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To do so, you have to create a subclass of the <ph id="ph1">`EngagementReachHandler`</ph> class.</source>
          <target state="new">To do so, you have to create a subclass of the <ph id="ph1">`EngagementReachHandler`</ph> class.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Sample Code :</source>
          <target state="new">Sample Code :</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Then, set the content of the <ph id="ph1">`EngagementReach.Instance.Handler`</ph> field with your custom object in your <ph id="ph2">`App.xaml.cs`</ph> class within the <ph id="ph3">`App()`</ph> method.</source>
          <target state="new">Then, set the content of the <ph id="ph1">`EngagementReach.Instance.Handler`</ph> field with your custom object in your <ph id="ph2">`App.xaml.cs`</ph> class within the <ph id="ph3">`App()`</ph> method.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sample Code :</source>
          <target state="new">Sample Code :</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> By default, Engagement uses its own implementation of <ph id="ph2">`EngagementReachHandler`</ph>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> By default, Engagement uses its own implementation of <ph id="ph2">`EngagementReachHandler`</ph>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You don't have to create your own, and if you do so, you don't have to override every method.</source>
          <target state="new">You don't have to create your own, and if you do so, you don't have to override every method.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The default behavior is to select the Engagement base object.</source>
          <target state="new">The default behavior is to select the Engagement base object.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Web View</source>
          <target state="new">Web View</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>By default, Reach will use the embedded resources of the DLL to display the notifications and pages.</source>
          <target state="new">By default, Reach will use the embedded resources of the DLL to display the notifications and pages.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To provide a full customization possibilities we only use web view.</source>
          <target state="new">To provide a full customization possibilities we only use web view.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you want to customize layouts, override directly the resources files <ph id="ph1">`EngagementAnnouncement.html`</ph> and <ph id="ph2">`EngagementNotification.html`</ph>.</source>
          <target state="new">If you want to customize layouts, override directly the resources files <ph id="ph1">`EngagementAnnouncement.html`</ph> and <ph id="ph2">`EngagementNotification.html`</ph>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Engagement needs all code in <ph id="ph1">`&lt;body&gt;&lt;/body&gt;`</ph> to run correctly.</source>
          <target state="new">Engagement needs all code in <ph id="ph1">`&lt;body&gt;&lt;/body&gt;`</ph> to run correctly.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>But you can add tag outer <ph id="ph1">`engagement_webview_area`</ph>.</source>
          <target state="new">But you can add tag outer <ph id="ph1">`engagement_webview_area`</ph>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>However, you can decide to use your own resources.</source>
          <target state="new">However, you can decide to use your own resources.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can override <ph id="ph1">`EngagementReachHandler`</ph> methods in your subclass to tell Engagement to use your layouts, but take care to embedded the engagement mechanism:</source>
          <target state="new">You can override <ph id="ph1">`EngagementReachHandler`</ph> methods in your subclass to tell Engagement to use your layouts, but take care to embedded the engagement mechanism:</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Sample Code :</source>
          <target state="new">Sample Code :</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>By default, AnnouncementHTML is <ph id="ph1">`ms-appx-web:///Resources/EngagementAnnouncement.html`</ph>.</source>
          <target state="new">By default, AnnouncementHTML is <ph id="ph1">`ms-appx-web:///Resources/EngagementAnnouncement.html`</ph>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It represents the html file that design the content of a push message (Text announcement, Web anoucement and Poll announcement).</source>
          <target state="new">It represents the html file that design the content of a push message (Text announcement, Web anoucement and Poll announcement).</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>AnnouncementName is <ph id="ph1">`engagement_announcement_content`</ph>.</source>
          <target state="new">AnnouncementName is <ph id="ph1">`engagement_announcement_content`</ph>.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It is the name of the webview design in your xaml page.</source>
          <target state="new">It is the name of the webview design in your xaml page.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>NotfificationHTML is <ph id="ph1">`ms-appx-web:///Resources/EngagementNotification.html`</ph>.</source>
          <target state="new">NotfificationHTML is <ph id="ph1">`ms-appx-web:///Resources/EngagementNotification.html`</ph>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It represents the html file that design the notification of a push message.</source>
          <target state="new">It represents the html file that design the notification of a push message.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>NotfificationName is <ph id="ph1">`engagement_notification_content`</ph>.</source>
          <target state="new">NotfificationName is <ph id="ph1">`engagement_notification_content`</ph>.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It is the name of the webview design in your xaml page.</source>
          <target state="new">It is the name of the webview design in your xaml page.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Customization</source>
          <target state="new">Customization</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can customize notification and announcement web view has you want if you preserve Engagement object.</source>
          <target state="new">You can customize notification and announcement web view has you want if you preserve Engagement object.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Take care that webview object is described three times - the first time in your xaml, second time in your .cs file in the "setwebview()" method, and third time in the html file.</source>
          <target state="new">Take care that webview object is described three times - the first time in your xaml, second time in your .cs file in the "setwebview()" method, and third time in the html file.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In your xaml you describe the current graphical layout webview component.</source>
          <target state="new">In your xaml you describe the current graphical layout webview component.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In your .cs file you can define "setwebview()" in which you set the dimension of the two webview (notification, announcement).</source>
          <target state="new">In your .cs file you can define "setwebview()" in which you set the dimension of the two webview (notification, announcement).</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is very effective when the application is resizing.</source>
          <target state="new">It is very effective when the application is resizing.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the Engagement html file we describe the webview content, design and the elements positions between each other.</source>
          <target state="new">In the Engagement html file we describe the webview content, design and the elements positions between each other.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Launch message</source>
          <target state="new">Launch message</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>When a user clicks on a system notification (a toast), Engagement launches the application, load the content of the push messages, and display the page for the corresponding campaign.</source>
          <target state="new">When a user clicks on a system notification (a toast), Engagement launches the application, load the content of the push messages, and display the page for the corresponding campaign.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>There is a delay between the launch of the application and the display of the page (depending on the speed of your network).</source>
          <target state="new">There is a delay between the launch of the application and the display of the page (depending on the speed of your network).</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To indicate to the user that something is loading, you should provide a visual information, like a progress bar or a progress indicator.</source>
          <target state="new">To indicate to the user that something is loading, you should provide a visual information, like a progress bar or a progress indicator.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Engagement cannot handle that itself, but provides a few handlers for you.</source>
          <target state="new">Engagement cannot handle that itself, but provides a few handlers for you.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To implement the callback, in App.xaml.cs in "Public App(){}" add:</source>
          <target state="new">To implement the callback, in App.xaml.cs in "Public App(){}" add:</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can set the callback in your "Public App(){}" method of your <ph id="ph1">`App.xaml.cs`</ph> file, preferably before the <ph id="ph2">`EngagementReach.Instance.Init()`</ph> call.</source>
          <target state="new">You can set the callback in your "Public App(){}" method of your <ph id="ph1">`App.xaml.cs`</ph> file, preferably before the <ph id="ph2">`EngagementReach.Instance.Init()`</ph> call.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> Each handler is called by the UI Thread.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> Each handler is called by the UI Thread.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You do not have to worry when using a MessageBox or something UI-related.</source>
          <target state="new">You do not have to worry when using a MessageBox or something UI-related.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Custom scheme tip</source>
          <target state="new">Custom scheme tip</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>We provide custom scheme use.</source>
          <target state="new">We provide custom scheme use.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You can send different type of URI from engagement frontend to be used in your engagement application.</source>
          <target state="new">You can send different type of URI from engagement frontend to be used in your engagement application.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Default scheme like <ph id="ph1">`http, ftp, ...`</ph> are manage by Windows, a window will prompt if they are no default application installed on device.</source>
          <target state="new">Default scheme like <ph id="ph1">`http, ftp, ...`</ph> are manage by Windows, a window will prompt if they are no default application installed on device.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Other scheme like application scheme can be used.</source>
          <target state="new">Other scheme like application scheme can be used.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Moreover, you can use a custom scheme for your application.</source>
          <target state="new">Moreover, you can use a custom scheme for your application.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The simple way to set a custom scheme in your application is to open your <ph id="ph1">`Package.appxmanifest`</ph> go in <ph id="ph2">`Declarations`</ph> panel.</source>
          <target state="new">The simple way to set a custom scheme in your application is to open your <ph id="ph1">`Package.appxmanifest`</ph> go in <ph id="ph2">`Declarations`</ph> panel.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">`Protocol`</ph> in the Available Declarations scroll box and add it.</source>
          <target state="new">Select <ph id="ph1">`Protocol`</ph> in the Available Declarations scroll box and add it.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Edit the <ph id="ph1">`Name`</ph> field with your new protocol desired name.</source>
          <target state="new">Edit the <ph id="ph1">`Name`</ph> field with your new protocol desired name.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Now to use this protocol, edit your <ph id="ph1">`App.xaml.cs`</ph> with the <ph id="ph2">`OnActivated`</ph> method, and don't forget to initialize engagement here also:</source>
          <target state="new">Now to use this protocol, edit your <ph id="ph1">`App.xaml.cs`</ph> with the <ph id="ph2">`OnActivated`</ph> method, and don't forget to initialize engagement here also:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df1425f94632ca8ad899d62cc7d3dbecd5521579</xliffext:olfilehash>
  </header>
</xliff>