<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing Expressions for Attribute Mappings in Azure Active Directory</source>
          <target state="new">Writing Expressions for Attribute Mappings in Azure Active Directory</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.</source>
          <target state="new">Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Writing Expressions for Attribute Mappings in Azure Active Directory</source>
          <target state="new">Writing Expressions for Attribute Mappings in Azure Active Directory</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping.</source>
          <target state="new">When you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.</source>
          <target state="new">For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax Overview</source>
          <target state="new">Syntax Overview</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.</source>
          <target state="new">The syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses:</source>
          <target state="new">The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>FunctionName(&lt;&lt;argument 1&gt;&gt;,&lt;<ph id="ph1">&lt;argument N&gt;</ph>&gt;)<ept id="p1">*</ept></source>
          <target state="new"><bpt id="p1">*</bpt>FunctionName(&lt;&lt;argument 1&gt;&gt;,&lt;<ph id="ph1">&lt;argument N&gt;</ph>&gt;)<ept id="p1">*</ept></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You may nest functions within each other.</source>
          <target state="new">You may nest functions within each other.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>FunctionOne(FunctionTwo(&lt;<ph id="ph1">&lt;argument1&gt;</ph>&gt;))<ept id="p1">*</ept></source>
          <target state="new"><bpt id="p1">*</bpt>FunctionOne(FunctionTwo(&lt;<ph id="ph1">&lt;argument1&gt;</ph>&gt;))<ept id="p1">*</ept></target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can pass three different types of arguments into functions:</source>
          <target state="new">You can pass three different types of arguments into functions:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Attributes, which must be enclosed in square square brackets.</source>
          <target state="new">Attributes, which must be enclosed in square square brackets.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example: [attributeName]</source>
          <target state="new">For example: [attributeName]</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>String constants, which must be enclosed in double quotes.</source>
          <target state="new">String constants, which must be enclosed in double quotes.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example: "United States"</source>
          <target state="new">For example: "United States"</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Other Functions.</source>
          <target state="new">Other Functions.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example: FunctionOne(&lt;</source>
          <target state="new">For example: FunctionOne(&lt;</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&gt;, FunctionTwo(&lt;</source>
          <target state="new">&gt;, FunctionTwo(&lt;</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>&gt;))</source>
          <target state="new">&gt;))</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For string constants, if you need a backslash ( \ ) or quotation mark ( " ) in the string, it must be escaped with the backslash ( \ ) symbol.</source>
          <target state="new">For string constants, if you need a backslash ( \ ) or quotation mark ( " ) in the string, it must be escaped with the backslash ( \ ) symbol.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example: "Company name: \"Contoso\""</source>
          <target state="new">For example: "Company name: \"Contoso\""</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>List of Functions</source>
          <target state="new">List of Functions</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Append<ept id="p1">](#append)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>FormatDateTime<ept id="p2">](#formatdatetime)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Join<ept id="p3">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>Mid<ept id="p4">](#mid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Not<ept id="p5">](#not)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>Replace<ept id="p6">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>StripSpaces<ept id="p7">](#stripspaces)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>Switch<ept id="p8">](#switch)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Append<ept id="p1">](#append)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p2">[</bpt>FormatDateTime<ept id="p2">](#formatdatetime)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p3">[</bpt>Join<ept id="p3">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p4">[</bpt>Mid<ept id="p4">](#mid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p5">[</bpt>Not<ept id="p5">](#not)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p6">[</bpt>Replace<ept id="p6">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p7">[</bpt>StripSpaces<ept id="p7">](#stripspaces)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="p8">[</bpt>Switch<ept id="p8">](#switch)</ept></target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Append</source>
          <target state="new">Append</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Append(source, suffix)</source>
          <target state="new">Append(source, suffix)</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Takes a source string value and appends the suffix to the end of it.</source>
          <target state="new">Takes a source string value and appends the suffix to the end of it.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Usually name of the attribute from the source object</source>
          <target state="new">Usually name of the attribute from the source object</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>suffix</source>
          <target state="new">suffix</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The string that you want to append to the end of the source value.</source>
          <target state="new">The string that you want to append to the end of the source value.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>FormatDateTime</source>
          <target state="new">FormatDateTime</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>FormatDateTime(source, inputFormat, outputFormat)</source>
          <target state="new">FormatDateTime(source, inputFormat, outputFormat)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Takes a date string from one format and converts it into a different format.</source>
          <target state="new">Takes a date string from one format and converts it into a different format.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Usually name of the attribute from the source object.</source>
          <target state="new">Usually name of the attribute from the source object.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>inputFormat</source>
          <target state="new">inputFormat</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Expected format of the source value.</source>
          <target state="new">Expected format of the source value.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For supported formats, see <bpt id="p1">[</bpt>http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx<ept id="p1">](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx)</ept>.</source>
          <target state="new">For supported formats, see <bpt id="p1">[</bpt>http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx<ept id="p1">](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>outputFormat</source>
          <target state="new">outputFormat</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Format of the output date.</source>
          <target state="new">Format of the output date.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="new">Join</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Join(separator, source1, source2, …)</source>
          <target state="new">Join(separator, source1, source2, …)</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Join() is similar to Append(), except that it can combine multiple <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string values into a single string, and each value will be separated by a <bpt id="p2">**</bpt>separator<ept id="p2">**</ept> string.</source>
          <target state="new">Join() is similar to Append(), except that it can combine multiple <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string values into a single string, and each value will be separated by a <bpt id="p2">**</bpt>separator<ept id="p2">**</ept> string.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.</source>
          <target state="new">If one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>separator</source>
          <target state="new">separator</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>String used to separate source values when they are concatenated into one string.</source>
          <target state="new">String used to separate source values when they are concatenated into one string.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Can be "" if no separator is required.</source>
          <target state="new">Can be "" if no separator is required.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>**source1  …</source>
          <target state="new">**source1  …</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>sourceN **</source>
          <target state="new">sourceN **</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Required, variable-number of times</source>
          <target state="new">Required, variable-number of times</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>String values to be joined together.</source>
          <target state="new">String values to be joined together.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Mid</source>
          <target state="new">Mid</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Mid(source, start, length)</source>
          <target state="new">Mid(source, start, length)</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns a substring of the source value.</source>
          <target state="new">Returns a substring of the source value.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A substring is a string that contains only some of the characters from the source string.</source>
          <target state="new">A substring is a string that contains only some of the characters from the source string.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Usually name of the attribute.</source>
          <target state="new">Usually name of the attribute.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>start</source>
          <target state="new">start</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>integer</source>
          <target state="new">integer</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Index in the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string where substring should start.</source>
          <target state="new">Index in the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string where substring should start.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>First character in the string will have index of 1, second character will have index 2, and so on.</source>
          <target state="new">First character in the string will have index of 1, second character will have index 2, and so on.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>length</source>
          <target state="new">length</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>integer</source>
          <target state="new">integer</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Length of the substring.</source>
          <target state="new">Length of the substring.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If length ends outside the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string, function will return substring from <bpt id="p2">**</bpt>start<ept id="p2">**</ept> index till end of <bpt id="p3">**</bpt>source<ept id="p3">**</ept> string.</source>
          <target state="new">If length ends outside the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> string, function will return substring from <bpt id="p2">**</bpt>start<ept id="p2">**</ept> index till end of <bpt id="p3">**</bpt>source<ept id="p3">**</ept> string.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Not</source>
          <target state="new">Not</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Not(source)</source>
          <target state="new">Not(source)</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Flips the boolean value of the <bpt id="p1">**</bpt>source<ept id="p1">**</ept>.</source>
          <target state="new">Flips the boolean value of the <bpt id="p1">**</bpt>source<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value is "<bpt id="p2">*</bpt>True<ept id="p2">*</ept>", returns "<bpt id="p3">*</bpt>False<ept id="p3">*</ept>".</source>
          <target state="new">If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value is "<bpt id="p2">*</bpt>True<ept id="p2">*</ept>", returns "<bpt id="p3">*</bpt>False<ept id="p3">*</ept>".</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Otherwise, returns "<bpt id="p1">*</bpt>True<ept id="p1">*</ept>".</source>
          <target state="new">Otherwise, returns "<bpt id="p1">*</bpt>True<ept id="p1">*</ept>".</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Boolean String</source>
          <target state="new">Boolean String</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Expected <bpt id="p1">**</bpt>source<ept id="p1">**</ept> values are "True" or "False"..</source>
          <target state="new">Expected <bpt id="p1">**</bpt>source<ept id="p1">**</ept> values are "True" or "False"..</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="new">Replace</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>ObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)</source>
          <target state="new">ObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Replaces values within a string.</source>
          <target state="new">Replaces values within a string.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It works differently depending on the parameters provided:</source>
          <target state="new">It works differently depending on the parameters provided:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> and <bpt id="p2">**</bpt>replacementValue<ept id="p2">**</ept> are provided:</source>
          <target state="new">When <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> and <bpt id="p2">**</bpt>replacementValue<ept id="p2">**</ept> are provided:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of oldValue in the source  with replacementValue</source>
          <target state="new">Replaces all occurrences of oldValue in the source  with replacementValue</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> and <bpt id="p2">**</bpt>template<ept id="p2">**</ept> are provided:</source>
          <target state="new">When <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> and <bpt id="p2">**</bpt>template<ept id="p2">**</ept> are provided:</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Replaces all occurrences of the <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>template<ept id="p2">**</ept> with the <bpt id="p3">**</bpt>source<ept id="p3">**</ept> value</source>
          <target state="new">Replaces all occurrences of the <bpt id="p1">**</bpt>oldValue<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>template<ept id="p2">**</ept> with the <bpt id="p3">**</bpt>source<ept id="p3">**</ept> value</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>oldValueRegexPattern<ept id="p1">**</ept>, <bpt id="p2">**</bpt>oldValueRegexGroupName<ept id="p2">**</ept>, <bpt id="p3">**</bpt>replacementValue<ept id="p3">**</ept> are provided:</source>
          <target state="new">When <bpt id="p1">**</bpt>oldValueRegexPattern<ept id="p1">**</ept>, <bpt id="p2">**</bpt>oldValueRegexGroupName<ept id="p2">**</ept>, <bpt id="p3">**</bpt>replacementValue<ept id="p3">**</ept> are provided:</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Replaces all values matching oldValueRegexPattern in the source string with replacementValue</source>
          <target state="new">Replaces all values matching oldValueRegexPattern in the source string with replacementValue</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>oldValueRegexPattern<ept id="p1">**</ept>, <bpt id="p2">**</bpt>oldValueRegexGroupName<ept id="p2">**</ept>, <bpt id="p3">**</bpt>replacementPropertyName<ept id="p3">**</ept> are provided:</source>
          <target state="new">When <bpt id="p1">**</bpt>oldValueRegexPattern<ept id="p1">**</ept>, <bpt id="p2">**</bpt>oldValueRegexGroupName<ept id="p2">**</ept>, <bpt id="p3">**</bpt>replacementPropertyName<ept id="p3">**</ept> are provided:</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> has value, <bpt id="p2">**</bpt>source<ept id="p2">**</ept> is returned</source>
          <target state="new">If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> has value, <bpt id="p2">**</bpt>source<ept id="p2">**</ept> is returned</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> has no value, uses <bpt id="p2">**</bpt>oldValueRegexPattern<ept id="p2">**</ept> and <bpt id="p3">**</bpt>oldValueRegexGroupName<ept id="p3">**</ept> to extract replacement value from the property with <bpt id="p4">**</bpt>replacementPropertyName<ept id="p4">**</ept>.</source>
          <target state="new">If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> has no value, uses <bpt id="p2">**</bpt>oldValueRegexPattern<ept id="p2">**</ept> and <bpt id="p3">**</bpt>oldValueRegexGroupName<ept id="p3">**</ept> to extract replacement value from the property with <bpt id="p4">**</bpt>replacementPropertyName<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Replacement value is returned as the result</source>
          <target state="new">Replacement value is returned as the result</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Usually name of the attribute from the source object.</source>
          <target state="new">Usually name of the attribute from the source object.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>oldValue</source>
          <target state="new">oldValue</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Value to be replaced in <bpt id="p1">**</bpt>source<ept id="p1">**</ept> or <bpt id="p2">**</bpt>template<ept id="p2">**</ept>.</source>
          <target state="new">Value to be replaced in <bpt id="p1">**</bpt>source<ept id="p1">**</ept> or <bpt id="p2">**</bpt>template<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>regexPattern</source>
          <target state="new">regexPattern</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Regex pattern for the value to be replaced in <bpt id="p1">**</bpt>source<ept id="p1">**</ept>.</source>
          <target state="new">Regex pattern for the value to be replaced in <bpt id="p1">**</bpt>source<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Or, when replacementPropertyName is used, pattern to extract value from replacement property.</source>
          <target state="new">Or, when replacementPropertyName is used, pattern to extract value from replacement property.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>regexGroupName</source>
          <target state="new">regexGroupName</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Name of the group inside <bpt id="p1">**</bpt>regexPattern<ept id="p1">**</ept>.</source>
          <target state="new">Name of the group inside <bpt id="p1">**</bpt>regexPattern<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property.</source>
          <target state="new">Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>replacementValue</source>
          <target state="new">replacementValue</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>New value to replace old one with.</source>
          <target state="new">New value to replace old one with.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>replacementAttributeName</source>
          <target state="new">replacementAttributeName</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Name of the attribute to be used for replacement value, when source has no value.</source>
          <target state="new">Name of the attribute to be used for replacement value, when source has no value.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>template</source>
          <target state="new">template</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>template<ept id="p1">**</ept> value is provided, we will look for <bpt id="p2">**</bpt>oldValue<ept id="p2">**</ept> inside the template and replace it with source value.</source>
          <target state="new">When <bpt id="p1">**</bpt>template<ept id="p1">**</ept> value is provided, we will look for <bpt id="p2">**</bpt>oldValue<ept id="p2">**</ept> inside the template and replace it with source value.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>StripSpaces</source>
          <target state="new">StripSpaces</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>StripSpaces(source)</source>
          <target state="new">StripSpaces(source)</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Removes all space (" ") characters from the source string.</source>
          <target state="new">Removes all space (" ") characters from the source string.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>source<ept id="p1">**</ept> value to update.</source>
          <target state="new"><bpt id="p1">**</bpt>source<ept id="p1">**</ept> value to update.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="new">Switch</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Function:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Switch(source, defaultValue, key1, value1, key2, value2, …)</source>
          <target state="new">Switch(source, defaultValue, key1, value1, key2, value2, …)</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Description:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value matches a <bpt id="p2">**</bpt>key<ept id="p2">**</ept>, returns <bpt id="p3">**</bpt>value<ept id="p3">**</ept> for that <bpt id="p4">**</bpt>key<ept id="p4">**</ept>.</source>
          <target state="new">When <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value matches a <bpt id="p2">**</bpt>key<ept id="p2">**</ept>, returns <bpt id="p3">**</bpt>value<ept id="p3">**</ept> for that <bpt id="p4">**</bpt>key<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value doesn't match any keys, returns <bpt id="p2">**</bpt>defaultValue<ept id="p2">**</ept>.</source>
          <target state="new">If <bpt id="p1">**</bpt>source<ept id="p1">**</ept> value doesn't match any keys, returns <bpt id="p2">**</bpt>defaultValue<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> and <bpt id="p2">**</bpt>value<ept id="p2">**</ept> parameters must always come in pairs.</source>
          <target state="new"><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> and <bpt id="p2">**</bpt>value<ept id="p2">**</ept> parameters must always come in pairs.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The function always expects an even number of parameters.</source>
          <target state="new">The function always expects an even number of parameters.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Parameters:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Required/ Repeating</source>
          <target state="new">Required/ Repeating</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="new">source</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Source<ept id="p1">**</ept> value to update.</source>
          <target state="new"><bpt id="p1">**</bpt>Source<ept id="p1">**</ept> value to update.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>defaultValue</source>
          <target state="new">defaultValue</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="new">Optional</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Default value to be used when source doesn't match any keys.</source>
          <target state="new">Default value to be used when source doesn't match any keys.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Can be empty string ("").</source>
          <target state="new">Can be empty string ("").</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>key</source>
          <target state="new">key</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> to compare <bpt id="p2">**</bpt>source<ept id="p2">**</ept> value with.</source>
          <target state="new"><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> to compare <bpt id="p2">**</bpt>source<ept id="p2">**</ept> value with.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="new">value</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="new">Required</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Replacement value for the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> matching the key.</source>
          <target state="new">Replacement value for the <bpt id="p1">**</bpt>source<ept id="p1">**</ept> matching the key.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Strip known domain name</source>
          <target state="new">Strip known domain name</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>You need to strip a known domain name from a user’s email to obtain a user name.</source>
          <target state="new">You need to strip a known domain name from a user’s email to obtain a user name.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For example, if the domain is "contoso.com", then you could use the following expression:</source>
          <target state="new">For example, if the domain is "contoso.com", then you could use the following expression:</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sample input / output:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Sample input / output:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (mail): "john.doe@contoso.com"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (mail): "john.doe@contoso.com"</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "john.doe"</source>
          <target state="new"><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "john.doe"</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Append constant suffix to user name</source>
          <target state="new">Append constant suffix to user name</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>If you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.</source>
          <target state="new">If you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sample input/output:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Sample input/output:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept>: (userPrincipalName): "John.Doe@contoso.com"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept>: (userPrincipalName): "John.Doe@contoso.com"</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "John.Doe@contoso.com.test"</source>
          <target state="new"><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "John.Doe@contoso.com.test"</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Generate user alias by concatenating parts of first and last name</source>
          <target state="new">Generate user alias by concatenating parts of first and last name</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.</source>
          <target state="new">You need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sample input/output:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Sample input/output:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (givenName): "John"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (givenName): "John"</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (surname): "Doe"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (surname): "Doe"</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "JohDoe"</source>
          <target state="new"><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "JohDoe"</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Output date as a string in a certain format</source>
          <target state="new">Output date as a string in a certain format</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>You want to send dates to a SaaS application in a certain format.</source>
          <target state="new">You want to send dates to a SaaS application in a certain format.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>For example, you want to format dates for ServiceNow.</source>
          <target state="new">For example, you want to format dates for ServiceNow.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Sample input/output:</source>
          <target state="new">Sample input/output:</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (extensionAttribute1): "20150123105347.1Z"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (extensionAttribute1): "20150123105347.1Z"</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "2015-01-23"</source>
          <target state="new"><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>:  "2015-01-23"</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Replace a value based on predefined set of options</source>
          <target state="new">Replace a value based on predefined set of options</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You need to define the time zone of the user based on the state code stored in Azure AD.</source>
          <target state="new">You need to define the time zone of the user based on the state code stored in Azure AD.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>If the state code doesn't match any of the predefined options, use default value of "Australia/Sydney".</source>
          <target state="new">If the state code doesn't match any of the predefined options, use default value of "Australia/Sydney".</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Expression:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Sample input/output:</source>
          <target state="new">Sample input/output:</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (state): "QLD"</source>
          <target state="new"><bpt id="p1">**</bpt>INPUT<ept id="p1">**</ept> (state): "QLD"</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>: "Australia/Brisbane"</source>
          <target state="new"><bpt id="p1">**</bpt>OUTPUT<ept id="p1">**</ept>: "Australia/Brisbane"</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">525ee7e03895bb9f66f4f0dc91bbc09a534c869b</xliffext:olfilehash>
  </header>
</xliff>