<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reliable Actors Timers and Reminders</source>
          <target state="new">Reliable Actors Timers and Reminders</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Timers and Reminders for Service Fabric Reliable Actors.</source>
          <target state="new">Introduction to Timers and Reminders for Service Fabric Reliable Actors.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Actor Timers</source>
          <target state="new">Actor Timers</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</source>
          <target state="new">Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Actors can use the <ph id="ph1">`RegisterTimer`</ph> and <ph id="ph2">`UnregisterTimer`</ph> methods on their base class to register and unregister their timers.</source>
          <target state="new">Actors can use the <ph id="ph1">`RegisterTimer`</ph> and <ph id="ph2">`UnregisterTimer`</ph> methods on their base class to register and unregister their timers.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The example below shows the use of timer APIs.</source>
          <target state="new">The example below shows the use of timer APIs.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The APIs are very similar to the .NET timer.</source>
          <target state="new">The APIs are very similar to the .NET timer.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the example below when the timer is due the <ph id="ph1">`MoveObject`</ph> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</source>
          <target state="new">In the example below when the timer is due the <ph id="ph1">`MoveObject`</ph> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The next period of the timer starts after the callback completes execution.</source>
          <target state="new">The next period of the timer starts after the callback completes execution.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</source>
          <target state="new">This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</source>
          <target state="new">The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
          <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="p1">[</bpt>readonly methods<ept id="p1">](service-fabric-reliable-actors-introduction.md#readonly-methods)</ept>.</source>
          <target state="new">A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="p1">[</bpt>readonly methods<ept id="p1">](service-fabric-reliable-actors-introduction.md#readonly-methods)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</source>
          <target state="new">All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</source>
          <target state="new">Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is up to the actor to register any timers that it needs when it is reactivated in the future.</source>
          <target state="new">It is up to the actor to register any timers that it needs when it is reactivated in the future.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, please see the section on <bpt id="p1">[</bpt>actor garbage collection<ept id="p1">](service-fabric-reliable-actors-lifecycle.md)</ept>.</source>
          <target state="new">For more information, please see the section on <bpt id="p1">[</bpt>actor garbage collection<ept id="p1">](service-fabric-reliable-actors-lifecycle.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Actor Reminders</source>
          <target state="new">Actor Reminders</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</source>
          <target state="new">Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</source>
          <target state="new">Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</source>
          <target state="new">Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Reminders are supported for stateful actors only.</source>
          <target state="new">Reminders are supported for stateful actors only.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Stateless actors cannot use reminders.</source>
          <target state="new">Stateless actors cannot use reminders.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The actors state providers are responsible for storing information about the reminders that have been registered by actors.</source>
          <target state="new">The actors state providers are responsible for storing information about the reminders that have been registered by actors.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To register a reminder an actor calls the <ph id="ph1">`RegisterReminder`</ph> method provided on base class, as shown in the example below.</source>
          <target state="new">To register a reminder an actor calls the <ph id="ph1">`RegisterReminder`</ph> method provided on base class, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the example above, <ph id="ph1">`"Pay cell phone bill"`</ph> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</source>
          <target state="new">In the example above, <ph id="ph1">`"Pay cell phone bill"`</ph> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BitConverter.GetBytes(amountInDollars)`</ph> is the context that is associated with the reminder.</source>
          <target state="new"><ph id="ph1">`BitConverter.GetBytes(amountInDollars)`</ph> is the context that is associated with the reminder.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It will be passed back to the actor as an argument to the reminder callback, i.e.</source>
          <target state="new">It will be passed back to the actor as an argument to the reminder callback, i.e.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IRemindable.ReceiveReminderAsync`</ph>.</source>
          <target state="new"><ph id="ph1">`IRemindable.ReceiveReminderAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Actors that use reminders must implement <ph id="ph1">`IRemindable`</ph> interface, as shown in the example below.</source>
          <target state="new">Actors that use reminders must implement <ph id="ph1">`IRemindable`</ph> interface, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a reminder is triggered, Fabric Actors runtime will invoke <ph id="ph1">`ReceiveReminderAsync`</ph> method on the Actor.</source>
          <target state="new">When a reminder is triggered, Fabric Actors runtime will invoke <ph id="ph1">`ReceiveReminderAsync`</ph> method on the Actor.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An actor can register multiple reminders and the <ph id="ph1">`ReceiveReminderAsync`</ph> method is invoked any time any of those reminders is triggered.</source>
          <target state="new">An actor can register multiple reminders and the <ph id="ph1">`ReceiveReminderAsync`</ph> method is invoked any time any of those reminders is triggered.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The actor can use the reminder name that is passed in to the <ph id="ph1">`ReceiveReminderAsync`</ph> method to figure out which reminder was triggered.</source>
          <target state="new">The actor can use the reminder name that is passed in to the <ph id="ph1">`ReceiveReminderAsync`</ph> method to figure out which reminder was triggered.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Actors runtime saves the actor state when the <ph id="ph1">`ReceiveReminderAsync`</ph> call completes.</source>
          <target state="new">The Actors runtime saves the actor state when the <ph id="ph1">`ReceiveReminderAsync`</ph> call completes.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
          <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To specify that the state need not be saved upon completion of the reminder callback, the <ph id="ph1">`ActorReminderAttributes.ReadOnly`</ph> flag can be set in the <ph id="ph2">`attributes`</ph> parameter when the <ph id="ph3">`RegisterReminder`</ph> method is called to create the reminder.</source>
          <target state="new">To specify that the state need not be saved upon completion of the reminder callback, the <ph id="ph1">`ActorReminderAttributes.ReadOnly`</ph> flag can be set in the <ph id="ph2">`attributes`</ph> parameter when the <ph id="ph3">`RegisterReminder`</ph> method is called to create the reminder.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To unregister a reminder, the <ph id="ph1">`UnregisterReminder`</ph> method should be called, as shown in the example below.</source>
          <target state="new">To unregister a reminder, the <ph id="ph1">`UnregisterReminder`</ph> method should be called, as shown in the example below.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As shown above, the <ph id="ph1">`UnregisterReminder`</ph> method accepts an <ph id="ph2">`IActorReminder`</ph> interface.</source>
          <target state="new">As shown above, the <ph id="ph1">`UnregisterReminder`</ph> method accepts an <ph id="ph2">`IActorReminder`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The actor base class supports a <ph id="ph1">`GetReminder`</ph> method that can be used to retrieve the <ph id="ph2">`IActorReminder`</ph> interface by passing in the reminder name.</source>
          <target state="new">The actor base class supports a <ph id="ph1">`GetReminder`</ph> method that can be used to retrieve the <ph id="ph2">`IActorReminder`</ph> interface by passing in the reminder name.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is convenient because the actor does not need to persist the <ph id="ph1">`IActorReminder`</ph> interface that was returned from the <ph id="ph2">`RegisterReminder`</ph> method call.</source>
          <target state="new">This is convenient because the actor does not need to persist the <ph id="ph1">`IActorReminder`</ph> interface that was returned from the <ph id="ph2">`RegisterReminder`</ph> method call.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41151d0b1626a8b45439034db32b4cde783ec59f</xliffext:olfilehash>
  </header>
</xliff>