<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Group by options in SQL Data Warehouse | Microsoft Azure</source>
          <target state="new">Group by options in SQL Data Warehouse | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tips for implementing group by options in Azure SQL Data Warehouse for developing solutions.</source>
          <target state="new">Tips for implementing group by options in Azure SQL Data Warehouse for developing solutions.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Group by options in SQL Data Warehouse</source>
          <target state="new">Group by options in SQL Data Warehouse</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The [GROUP BY] clause is used to aggregate data to a summary set of rows.</source>
          <target state="new">The [GROUP BY] clause is used to aggregate data to a summary set of rows.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It also has a few options that extend it's functionality that need to be worked around as they are not directly supported by Azure SQL Data Warehouse.</source>
          <target state="new">It also has a few options that extend it's functionality that need to be worked around as they are not directly supported by Azure SQL Data Warehouse.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These options are</source>
          <target state="new">These options are</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>GROUP BY with ROLLUP</source>
          <target state="new">GROUP BY with ROLLUP</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>GROUPING SETS</source>
          <target state="new">GROUPING SETS</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>GROUP BY with CUBE</source>
          <target state="new">GROUP BY with CUBE</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Rollup and grouping sets options</source>
          <target state="new">Rollup and grouping sets options</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The simplest option here is to use <ph id="ph1">`UNION ALL`</ph> instead to perform the rollup rather than relying on the explicit syntax.</source>
          <target state="new">The simplest option here is to use <ph id="ph1">`UNION ALL`</ph> instead to perform the rollup rather than relying on the explicit syntax.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The result is exactly the same</source>
          <target state="new">The result is exactly the same</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Below is an example of a group by statement using the <ph id="ph1">`ROLLUP`</ph> option:</source>
          <target state="new">Below is an example of a group by statement using the <ph id="ph1">`ROLLUP`</ph> option:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>By using ROLLUP we have requested the following aggregations:</source>
          <target state="new">By using ROLLUP we have requested the following aggregations:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Country and Region</source>
          <target state="new">Country and Region</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Country</source>
          <target state="new">Country</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Grand Total</source>
          <target state="new">Grand Total</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To replace this you will need to use <ph id="ph1">`UNION ALL`</ph>; specifying the aggregations required explicitly to return the same results:</source>
          <target state="new">To replace this you will need to use <ph id="ph1">`UNION ALL`</ph>; specifying the aggregations required explicitly to return the same results:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For GROUPING SETS all we need to do is adopt the same principal but only create UNION ALL sections for the aggregation levels we want to see</source>
          <target state="new">For GROUPING SETS all we need to do is adopt the same principal but only create UNION ALL sections for the aggregation levels we want to see</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Cube options</source>
          <target state="new">Cube options</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is possible to create a GROUP BY WITH CUBE using the UNION ALL approach.</source>
          <target state="new">It is possible to create a GROUP BY WITH CUBE using the UNION ALL approach.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The problem is that the code can quickly become cumbersome and unwieldy.</source>
          <target state="new">The problem is that the code can quickly become cumbersome and unwieldy.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To mitigate this you can use this more advanced approach.</source>
          <target state="new">To mitigate this you can use this more advanced approach.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Let's use the example above.</source>
          <target state="new">Let's use the example above.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The first step is to define the 'cube' that defines all the levels of aggregation that we want to create.</source>
          <target state="new">The first step is to define the 'cube' that defines all the levels of aggregation that we want to create.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It is important to take note of the CROSS JOIN of the two derived tables.</source>
          <target state="new">It is important to take note of the CROSS JOIN of the two derived tables.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This generates all the levels for us.</source>
          <target state="new">This generates all the levels for us.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The rest of the code is really there for formatting.</source>
          <target state="new">The rest of the code is really there for formatting.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The results of the CTAS can be seen below:</source>
          <target state="new">The results of the CTAS can be seen below:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>![][1]</source>
          <target state="new">![][1]</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The second step is to specify a target table to store interim results:</source>
          <target state="new">The second step is to specify a target table to store interim results:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The third step is to loop over our cube of columns performing the aggregation.</source>
          <target state="new">The third step is to loop over our cube of columns performing the aggregation.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The query will run once for every row in the #Cube temporary table and store the results in the #Results temp table</source>
          <target state="new">The query will run once for every row in the #Cube temporary table and store the results in the #Results temp table</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Lastly we can return the results by simply reading from the #Results temporary table</source>
          <target state="new">Lastly we can return the results by simply reading from the #Results temporary table</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By breaking the code up into sections and generating a looping construct the code becomes more manageable and maintainable.</source>
          <target state="new">By breaking the code up into sections and generating a looping construct the code becomes more manageable and maintainable.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</source>
          <target state="new">For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5484e1d2dcfde4c953200a7db8d5b06f98f9708</xliffext:olfilehash>
  </header>
</xliff>