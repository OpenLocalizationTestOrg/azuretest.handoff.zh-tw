<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Get Started with Reliable Actors | Microsoft Azure</source>
          <target state="new">Get Started with Reliable Actors | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This tutorial walks you through the steps of creating, debugging, and deploying a canonical HelloWorld service using Service Fabric Reliable Actors.</source>
          <target state="new">This tutorial walks you through the steps of creating, debugging, and deploying a canonical HelloWorld service using Service Fabric Reliable Actors.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reliable Actors: The canonical HelloWorld walk-through scenario</source>
          <target state="new">Reliable Actors: The canonical HelloWorld walk-through scenario</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article explains the basics of Service Fabric Reliable Actors and walks you through creating, debugging, and deploying a simple HelloWorld application in Visual Studio.</source>
          <target state="new">This article explains the basics of Service Fabric Reliable Actors and walks you through creating, debugging, and deploying a simple HelloWorld application in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Installation and setup</source>
          <target state="new">Installation and setup</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before starting, make sure you have the Service Fabric development environment setup on your machine.</source>
          <target state="new">Before starting, make sure you have the Service Fabric development environment setup on your machine.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Detailed instructions on how to setup the development environment can be found <bpt id="p1">[</bpt>here<ept id="p1">](service-fabric-get-started.md)</ept>.</source>
          <target state="new">Detailed instructions on how to setup the development environment can be found <bpt id="p1">[</bpt>here<ept id="p1">](service-fabric-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Basic concepts</source>
          <target state="new">Basic concepts</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In order to get started with Reliable Actors you just need to understand 4 basic concepts:</source>
          <target state="new">In order to get started with Reliable Actors you just need to understand 4 basic concepts:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Actor Service<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Actor Service<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Reliable Actors are packaged in Services that can be deployed in the Service Fabric infrastructure.</source>
          <target state="new">Reliable Actors are packaged in Services that can be deployed in the Service Fabric infrastructure.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A service can host one or more actors.</source>
          <target state="new">A service can host one or more actors.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We will go into more details about the trade-offs of one vs. multiple actors per service later.</source>
          <target state="new">We will go into more details about the trade-offs of one vs. multiple actors per service later.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For now let's assume we need to implement only one actor.</source>
          <target state="new">For now let's assume we need to implement only one actor.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Actor Interface<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Actor Interface<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Actor interface is used to define the public interface of an actor.</source>
          <target state="new">The Actor interface is used to define the public interface of an actor.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Actor model terminology it defines the type of messages that the actor is able to understand process.</source>
          <target state="new">In Actor model terminology it defines the type of messages that the actor is able to understand process.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Actor interface is used by other Actors or client applications to 'send' (asynchronously) messages to the Actor.</source>
          <target state="new">The Actor interface is used by other Actors or client applications to 'send' (asynchronously) messages to the Actor.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Reliable Actors can implement multiple interfaces, as we will see, an HelloWorld Actor can implement the IHelloWorld interface but also an ILogging interface that defines different messages/functionalities.</source>
          <target state="new">Reliable Actors can implement multiple interfaces, as we will see, an HelloWorld Actor can implement the IHelloWorld interface but also an ILogging interface that defines different messages/functionalities.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Actor Registration<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Actor Registration<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the Actor Service, the Actor Type needs to be registered so Service Fabric is aware of the new type and can use it to create new actors.</source>
          <target state="new">In the Actor Service, the Actor Type needs to be registered so Service Fabric is aware of the new type and can use it to create new actors.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ActorProxy Class<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>ActorProxy Class<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The ActorProxy class is used to bind to an Actor and invoke the methods exposed through its interfaces.</source>
          <target state="new">The ActorProxy class is used to bind to an Actor and invoke the methods exposed through its interfaces.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The ActorProxy class provides two important functionalities:</source>
          <target state="new">The ActorProxy class provides two important functionalities:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Name resolution: it is able to locate the Actor in the cluster (find in which node of the cluster it is hosted).</source>
          <target state="new">Name resolution: it is able to locate the Actor in the cluster (find in which node of the cluster it is hosted).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Handle failures: it can re-try method invocations and re-determine the Actor location after, for instance, a failure that requires the actor to be relocated to another node in the cluster.</source>
          <target state="new">Handle failures: it can re-try method invocations and re-determine the Actor location after, for instance, a failure that requires the actor to be relocated to another node in the cluster.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create a new project in Visual Studio</source>
          <target state="new">Create a new project in Visual Studio</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After you install the Service Fabric Tools for Visual Studio, you can create a new project types.</source>
          <target state="new">After you install the Service Fabric Tools for Visual Studio, you can create a new project types.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The new project types are under the 'Cloud' category of the New Project Dialog</source>
          <target state="new">The new project types are under the 'Cloud' category of the New Project Dialog</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>![Service Fabric tools for VS - New project][1]</source>
          <target state="new">![Service Fabric tools for VS - New project][1]</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the next dialog you can choose the type of project that you want to create.</source>
          <target state="new">In the next dialog you can choose the type of project that you want to create.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>![Service Fabric Project Templates][5]</source>
          <target state="new">![Service Fabric Project Templates][5]</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the HelloWorld project, let's use the Service Fabric Actor Service.</source>
          <target state="new">For the HelloWorld project, let's use the Service Fabric Actor Service.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once the solution is created you should see the following structure:</source>
          <target state="new">Once the solution is created you should see the following structure:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>![Service Fabric Project Structure][2]</source>
          <target state="new">![Service Fabric Project Structure][2]</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reliable Actors basic building blocks</source>
          <target state="new">Reliable Actors basic building blocks</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A typical Reliable Actors solution is composed of 3 projects:</source>
          <target state="new">A typical Reliable Actors solution is composed of 3 projects:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Application project (HelloWorldApplication).</source>
          <target state="new">The Application project (HelloWorldApplication).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is the project that packages all the services together for deployment.</source>
          <target state="new">This is the project that packages all the services together for deployment.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It contains the ApplicationManifest.xml and PowerShell scripts for managing the application.</source>
          <target state="new">It contains the ApplicationManifest.xml and PowerShell scripts for managing the application.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The Interface project (HelloWorld.Interfaces).</source>
          <target state="new">The Interface project (HelloWorld.Interfaces).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is the project that contains the interface definition for the actor.</source>
          <target state="new">This is the project that contains the interface definition for the actor.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the Interfaces project you can define the interfaces that will be used by the actors in the solution.</source>
          <target state="new">In the Interfaces project you can define the interfaces that will be used by the actors in the solution.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The Service project (HelloWorld).</source>
          <target state="new">The Service project (HelloWorld).</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is the project used to define the Service Fabric service that is going to host the actor.</source>
          <target state="new">This is the project used to define the Service Fabric service that is going to host the actor.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It contains some boilerplate code that does not need to be edited in most cases (ServiceHost.cs) and the implementation of the Actor.</source>
          <target state="new">It contains some boilerplate code that does not need to be edited in most cases (ServiceHost.cs) and the implementation of the Actor.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Implementation of the actor involves implementing a class that derives from a base type (Actor) and implements the interface(s) defined in the .Interfaces project.</source>
          <target state="new">Implementation of the actor involves implementing a class that derives from a base type (Actor) and implements the interface(s) defined in the .Interfaces project.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The Actor Service project contains the code to create a Service Fabric service, in the service definition, Actor type(s) are registered so they can be used to instantiate new actors.</source>
          <target state="new">The Actor Service project contains the code to create a Service Fabric service, in the service definition, Actor type(s) are registered so they can be used to instantiate new actors.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you start from a new project in Visual Studio and you have only one Actor definition, the registration is included by default in the code that Visual Studio generates.</source>
          <target state="new">If you start from a new project in Visual Studio and you have only one Actor definition, the registration is included by default in the code that Visual Studio generates.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you define other actors in the service, you need to add the Actor registration using:</source>
          <target state="new">If you define other actors in the service, you need to add the Actor registration using:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="new">Debugging</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Service Fabric tools for Visual Studio supports debugging on the local machine.</source>
          <target state="new">Service Fabric tools for Visual Studio supports debugging on the local machine.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can start a debugging session by hitting F5.</source>
          <target state="new">You can start a debugging session by hitting F5.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Visual Studio builds (if necessary), packages and deploys the application on the local Service Fabric cluster and attaches the debugger.</source>
          <target state="new">Visual Studio builds (if necessary), packages and deploys the application on the local Service Fabric cluster and attaches the debugger.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The experience is similar to debugging an ASP.NET application.</source>
          <target state="new">The experience is similar to debugging an ASP.NET application.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>During the deployment process you can see progress in the Output Window</source>
          <target state="new">During the deployment process you can see progress in the Output Window</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>![Service Fabric Debugging output window][3]</source>
          <target state="new">![Service Fabric Debugging output window][3]</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to Service Fabric Reliable Actors<ept id="p1">](service-fabric-reliable-actors-introduction.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Introduction to Service Fabric Reliable Actors<ept id="p1">](service-fabric-reliable-actors-introduction.md)</ept></target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Actors APIs Reference Documentation<ept id="p1">](https://msdn.microsoft.com/library/azure/dn971626.aspx)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Actors APIs Reference Documentation<ept id="p1">](https://msdn.microsoft.com/library/azure/dn971626.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sample code<ept id="p1">](https://github.com/Azure/servicefabric-samples)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Sample code<ept id="p1">](https://github.com/Azure/servicefabric-samples)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a7bdee5fae0f9fe07ee591097edcc81071d9164</xliffext:olfilehash>
  </header>
</xliff>