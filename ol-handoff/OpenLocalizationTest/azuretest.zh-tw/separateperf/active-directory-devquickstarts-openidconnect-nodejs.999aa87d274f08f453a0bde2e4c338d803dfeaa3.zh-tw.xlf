<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with Azure AD sign in and sign out using node.js</source>
          <target state="new">Getting started with Azure AD sign in and sign out using node.js</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a node.js Express MVC Web App that integrates with Azure AD for sign in.</source>
          <target state="new">How to build a node.js Express MVC Web App that integrates with Azure AD for sign in.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Web App Sign In &amp; Sign Out with Azure AD</source>
          <target state="new">Web App Sign In &amp; Sign Out with Azure AD</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here we'll use Passport to:</source>
          <target state="new">Here we'll use Passport to:</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sign the user into the app using Azure AD and the v2.0 app model.</source>
          <target state="new">Sign the user into the app using Azure AD and the v2.0 app model.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Display some information about the user.</source>
          <target state="new">Display some information about the user.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sign the user out of the app.</source>
          <target state="new">Sign the user out of the app.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Passport<ept id="p1">**</ept> is authentication middleware for Node.js.</source>
          <target state="new"><bpt id="p1">**</bpt>Passport<ept id="p1">**</ept> is authentication middleware for Node.js.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</source>
          <target state="new">Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</source>
          <target state="new">A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We have developed a strategy for Microsoft Azure Active Directory.</source>
          <target state="new">We have developed a strategy for Microsoft Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We will install this module and then add the Microsoft Azure Active Directory <ph id="ph1">`passport-azure-ad`</ph> plug-in.</source>
          <target state="new">We will install this module and then add the Microsoft Azure Active Directory <ph id="ph1">`passport-azure-ad`</ph> plug-in.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In order to do this, you'll need to:</source>
          <target state="new">In order to do this, you'll need to:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Register an app.</source>
          <target state="new">Register an app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Set up your app to use the Passport-azure-ad strategy.</source>
          <target state="new">Set up your app to use the Passport-azure-ad strategy.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use Passport to issue sign-in and sign-out requests to Azure AD.</source>
          <target state="new">Use Passport to issue sign-in and sign-out requests to Azure AD.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Print out data about the user.</source>
          <target state="new">Print out data about the user.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS)</ept>.</source>
          <target state="new">The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS/archive/skeleton.zip)</ept> or clone the skeleton:</source>
          <target state="new">To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS/archive/skeleton.zip)</ept> or clone the skeleton:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The completed application is provided at the end of this tutorial as well.</source>
          <target state="new">The completed application is provided at the end of this tutorial as well.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>1. Register an App</source>
          <target state="new">1. Register an App</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Sign into the Azure Management Portal.</source>
          <target state="new">Sign into the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</source>
          <target state="new">In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Select the tenant where you wish to register the application.</source>
          <target state="new">Select the tenant where you wish to register the application.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</source>
          <target state="new">Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</source>
          <target state="new">The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</source>
          <target state="new">The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The skeleton's default is `http://localhost:3000/auth/openid/return``.</source>
          <target state="new">The skeleton's default is `http://localhost:3000/auth/openid/return``.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</source>
          <target state="new">The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`https://contoso.onmicrosoft.com/my-first-aad-app`</ph></source>
          <target state="new">The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`https://contoso.onmicrosoft.com/my-first-aad-app`</ph></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once you've completed registration, AAD will assign your app a unique client identifier.</source>
          <target state="new">Once you've completed registration, AAD will assign your app a unique client identifier.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You'll need this value in the next sections, so copy it from the Configure tab.</source>
          <target state="new">You'll need this value in the next sections, so copy it from the Configure tab.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>2. Add pre-requisities to your directory</source>
          <target state="new">2. Add pre-requisities to your directory</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to your root folder if not already there and run the following commands:</source>
          <target state="new">From the command-line, change directories to your root folder if not already there and run the following commands:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition, you'll need our <ph id="ph1">`passport-azure-ad`</ph> as well:</source>
          <target state="new">In addition, you'll need our <ph id="ph1">`passport-azure-ad`</ph> as well:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This will install the libraries that passport-azure-ad depend on.</source>
          <target state="new">This will install the libraries that passport-azure-ad depend on.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>3. Set up your app to use the passport-node-js strategy</source>
          <target state="new">3. Set up your app to use the passport-node-js strategy</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here, we'll configure the Express middleware to use the OpenID Connect authentication protocol.</source>
          <target state="new">Here, we'll configure the Express middleware to use the OpenID Connect authentication protocol.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Passport will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
          <target state="new">Passport will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To begin, open the <ph id="ph1">`config.js`</ph> file in the root of the project, and enter your app's configuration values in the <ph id="ph2">`exports.creds`</ph> section.</source>
          <target state="new">To begin, open the <ph id="ph1">`config.js`</ph> file in the root of the project, and enter your app's configuration values in the <ph id="ph2">`exports.creds`</ph> section.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`clientID:`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app in the registration portal.</source>
          <target state="new">The <ph id="ph1">`clientID:`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app in the registration portal.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`returnURL`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> you entered in the portal.</source>
          <target state="new">The <ph id="ph1">`returnURL`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> you entered in the portal.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`clientSecret`</ph> is the secret you generated in the portal</source>
          <target state="new">The <ph id="ph1">`clientSecret`</ph> is the secret you generated in the portal</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Next open <ph id="ph1">`app.js`</ph> file in the root of the proejct and add the follwing call to invoke the <ph id="ph2">`OIDCStrategy`</ph> strategy that comes with <ph id="ph3">`passport-azure-ad`</ph></source>
          <target state="new">Next open <ph id="ph1">`app.js`</ph> file in the root of the proejct and add the follwing call to invoke the <ph id="ph2">`OIDCStrategy`</ph> strategy that comes with <ph id="ph3">`passport-azure-ad`</ph></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>After that, use the strategy we just referenced to handle our login requests</source>
          <target state="new">After that, use the strategy we just referenced to handle our login requests</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.) that all Strategy writers adhere to.</source>
          <target state="new">Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.) that all Strategy writers adhere to.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</source>
          <target state="new">Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The strategy will dutifully come back to us once it does all it’s work.</source>
          <target state="new">The strategy will dutifully come back to us once it does all it’s work.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</source>
          <target state="new">Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The code above takes any user that happens to authenticate to our server.</source>
          <target state="new">The code above takes any user that happens to authenticate to our server.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is known as auto registration.</source>
          <target state="new">This is known as auto registration.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</source>
          <target state="new">In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</source>
          <target state="new">This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If this wasn’t a sample application, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</source>
          <target state="new">If this wasn’t a sample application, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Since this is a test server we simply add them to the in-memory database.</source>
          <target state="new">Since this is a test server we simply add them to the in-memory database.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Next, let's add the methods that will allow us to keep track of the logged in users as required by Passport.</source>
          <target state="new">Next, let's add the methods that will allow us to keep track of the logged in users as required by Passport.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This includes serializing and deserializing the user's information:</source>
          <target state="new">This includes serializing and deserializing the user's information:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Next, let's add the code to load the express engine.</source>
          <target state="new">Next, let's add the code to load the express engine.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Here you see we use the default /views and /routes pattern that Express provides.</source>
          <target state="new">Here you see we use the default /views and /routes pattern that Express provides.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Finally, let's add the routes that will hand off the actual login requests to the <ph id="ph1">`passport-azure-ad`</ph> engine:</source>
          <target state="new">Finally, let's add the routes that will hand off the actual login requests to the <ph id="ph1">`passport-azure-ad`</ph> engine:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>4. Use Passport to issue sign-in and sign-out requests to Azure AD</source>
          <target state="new">4. Use Passport to issue sign-in and sign-out requests to Azure AD</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your app is now properly configured to communicate with the v2.0 endpoint using the OpenID Connect authentication protocol.</source>
          <target state="new">Your app is now properly configured to communicate with the v2.0 endpoint using the OpenID Connect authentication protocol.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`passport-azure-ad`</ph> has taken care of all of the ugly details of crafting authentication messages, validating tokens from Azure AD, and maintaining user session.</source>
          <target state="new"><ph id="ph1">`passport-azure-ad`</ph> has taken care of all of the ugly details of crafting authentication messages, validating tokens from Azure AD, and maintaining user session.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>All that remains is to give your users a way to sign in, sign out, and gather additional info on the logged in user.</source>
          <target state="new">All that remains is to give your users a way to sign in, sign out, and gather additional info on the logged in user.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>First, lets add the default, login, account, and logout methods to our <ph id="ph1">`app.js`</ph> file:</source>
          <target state="new">First, lets add the default, login, account, and logout methods to our <ph id="ph1">`app.js`</ph> file:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Let's review these in detail:</source>
          <target state="new">Let's review these in detail:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/`</ph> route will redirect to the index.ejs view passing the user in the request (if it exists)</source>
          <target state="new">The <ph id="ph1">`/`</ph> route will redirect to the index.ejs view passing the user in the request (if it exists)</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/account`</ph> route will first <bpt id="p1">***</bpt>ensure we are authenticated<ept id="p1">***</ept> (we implement that below) and then pass the user in the request so that we can get additional information about the user.</source>
          <target state="new">The <ph id="ph1">`/account`</ph> route will first <bpt id="p1">***</bpt>ensure we are authenticated<ept id="p1">***</ept> (we implement that below) and then pass the user in the request so that we can get additional information about the user.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/login`</ph> route will call our azuread-openidconnect authenticator from <ph id="ph2">`passport-azuread`</ph> and if that doesn't succeed will redirect the user back to /login</source>
          <target state="new">The <ph id="ph1">`/login`</ph> route will call our azuread-openidconnect authenticator from <ph id="ph2">`passport-azuread`</ph> and if that doesn't succeed will redirect the user back to /login</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/logout`</ph> will simply call the logout.ejs (and route) which clears cookies and then return the user back to index.ejs</source>
          <target state="new">The <ph id="ph1">`/logout`</ph> will simply call the logout.ejs (and route) which clears cookies and then return the user back to index.ejs</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For the last part of <ph id="ph1">`app.js`</ph>, let's add the EnsureAuthenticated method that is used in <ph id="ph2">`/account`</ph> above.</source>
          <target state="new">For the last part of <ph id="ph1">`app.js`</ph>, let's add the EnsureAuthenticated method that is used in <ph id="ph2">`/account`</ph> above.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Finally, let's actually create the server itself in <ph id="ph1">`app.js`</ph>:</source>
          <target state="new">Finally, let's actually create the server itself in <ph id="ph1">`app.js`</ph>:</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>5. Create the views and routes in express to display our user in the website</source>
          <target state="new">5. Create the views and routes in express to display our user in the website</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>We have our <ph id="ph1">`app.js`</ph> complete.</source>
          <target state="new">We have our <ph id="ph1">`app.js`</ph> complete.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Now we simply need to add the routes and views that will show the information we get to the user as well as handle the <ph id="ph1">`/logout`</ph> and <ph id="ph2">`/login`</ph> routes we've created.</source>
          <target state="new">Now we simply need to add the routes and views that will show the information we get to the user as well as handle the <ph id="ph1">`/logout`</ph> and <ph id="ph2">`/login`</ph> routes we've created.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Create the <ph id="ph1">`/routes/index.js`</ph> route under the root directory.</source>
          <target state="new">Create the <ph id="ph1">`/routes/index.js`</ph> route under the root directory.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Create the <ph id="ph1">`/routes/user.js`</ph> route under the root directory</source>
          <target state="new">Create the <ph id="ph1">`/routes/user.js`</ph> route under the root directory</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>These simple routes will just pass along the request to our views, including the user if present.</source>
          <target state="new">These simple routes will just pass along the request to our views, including the user if present.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Create the <ph id="ph1">`/views/index.ejs`</ph> view under the root directory.</source>
          <target state="new">Create the <ph id="ph1">`/views/index.ejs`</ph> view under the root directory.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>this is a simple page that will call our login and logout methods and allow us to grab account information.</source>
          <target state="new">this is a simple page that will call our login and logout methods and allow us to grab account information.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Notice that we can use the conditional <ph id="ph1">`if (!user)`</ph> as the user being passed through in the request is evidence we have a logged in user.</source>
          <target state="new">Notice that we can use the conditional <ph id="ph1">`if (!user)`</ph> as the user being passed through in the request is evidence we have a logged in user.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Create the <ph id="ph1">`/views/account.ejs`</ph> view under the root directory so that we can view additional information that <ph id="ph2">`passport-azuread`</ph> has put in the user request.</source>
          <target state="new">Create the <ph id="ph1">`/views/account.ejs`</ph> view under the root directory so that we can view additional information that <ph id="ph2">`passport-azuread`</ph> has put in the user request.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Finally, let's make this look pretty by adding a layout.</source>
          <target state="new">Finally, let's make this look pretty by adding a layout.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Create the '/views/layout.ejs' view under the root directory</source>
          <target state="new">Create the '/views/layout.ejs' view under the root directory</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3c2abc8e46038e54aff7bfd3eb10bc06c39e493</xliffext:olfilehash>
  </header>
</xliff>