<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Client-Side Encryption for Microsoft Azure Storage | Microsoft Azure</source>
          <target state="new">Client-Side Encryption for Microsoft Azure Storage | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Azure Storage Client Library for .NET supports client-side encryption and integration with Azure Key Vault for maximum security for your Azure Storage applications.</source>
          <target state="new">The Azure Storage Client Library for .NET supports client-side encryption and integration with Azure Key Vault for maximum security for your Azure Storage applications.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Client-Side Encryption and Azure Key Vault for Microsoft Azure Storage</source>
          <target state="new">Client-Side Encryption and Azure Key Vault for Microsoft Azure Storage</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Azure Storage Client Library for .NET<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.Storage)</ept> supports encrypting data within client applications before uploading to Azure Storage, and decrypting data while downloading to the client.</source>
          <target state="new">The <bpt id="p1">[</bpt>Azure Storage Client Library for .NET<ept id="p1">](https://www.nuget.org/packages/WindowsAzure.Storage)</ept> supports encrypting data within client applications before uploading to Azure Storage, and decrypting data while downloading to the client.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The library also supports integration with <bpt id="p1">[</bpt>Azure Key Vault<ept id="p1">](http://azure.microsoft.com/services/key-vault/)</ept> for storage account key management.</source>
          <target state="new">The library also supports integration with <bpt id="p1">[</bpt>Azure Key Vault<ept id="p1">](http://azure.microsoft.com/services/key-vault/)</ept> for storage account key management.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Encryption and decryption via the envelope technique</source>
          <target state="new">Encryption and decryption via the envelope technique</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The processes of encryption and decryption follow the envelope technique.</source>
          <target state="new">The processes of encryption and decryption follow the envelope technique.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Encryption via the envelope technique</source>
          <target state="new">Encryption via the envelope technique</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Encryption via the envelope technique works in the following way:</source>
          <target state="new">Encryption via the envelope technique works in the following way:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Azure storage client library generates a content encryption key (CEK), which is a one-time-use symmetric key.</source>
          <target state="new">The Azure storage client library generates a content encryption key (CEK), which is a one-time-use symmetric key.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>User data is encrypted using this CEK.</source>
          <target state="new">User data is encrypted using this CEK.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The CEK is then wrapped (encrypted) using the key encryption key (KEK).</source>
          <target state="new">The CEK is then wrapped (encrypted) using the key encryption key (KEK).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The KEK is identified by a key identifier and can be an asymmetric key pair or a symmetric key and can be managed locally or stored in Azure Key Vaults.</source>
          <target state="new">The KEK is identified by a key identifier and can be an asymmetric key pair or a symmetric key and can be managed locally or stored in Azure Key Vaults.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The storage client library itself never has access to KEK.</source>
          <target state="new">The storage client library itself never has access to KEK.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The library invokes the key wrapping algorithm that is provided by Key Vault.</source>
          <target state="new">The library invokes the key wrapping algorithm that is provided by Key Vault.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Users can choose to use custom providers for key wrapping/unwrapping if desired.</source>
          <target state="new">Users can choose to use custom providers for key wrapping/unwrapping if desired.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The encrypted data is then uploaded to the Azure Storage service.</source>
          <target state="new">The encrypted data is then uploaded to the Azure Storage service.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The wrapped key along with some additional encryption metadata is either stored as metadata (on a blob) or interpolated with the encrypted data (queue messages and table entities).</source>
          <target state="new">The wrapped key along with some additional encryption metadata is either stored as metadata (on a blob) or interpolated with the encrypted data (queue messages and table entities).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Decryption via the envelope technique</source>
          <target state="new">Decryption via the envelope technique</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Decryption via the envelope technique works in the following way:</source>
          <target state="new">Decryption via the envelope technique works in the following way:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The client library assumes that the user is managing the key encryption key (KEK) either locally or in Azure Key Vaults.</source>
          <target state="new">The client library assumes that the user is managing the key encryption key (KEK) either locally or in Azure Key Vaults.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The user does not need to know the specific key that was used for encryption.</source>
          <target state="new">The user does not need to know the specific key that was used for encryption.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Instead, a key resolver which resolves different key identifiers to keys can be set up and used.</source>
          <target state="new">Instead, a key resolver which resolves different key identifiers to keys can be set up and used.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The client library downloads the encrypted data along with any encryption material that is stored on the service.</source>
          <target state="new">The client library downloads the encrypted data along with any encryption material that is stored on the service.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The wrapped content encryption key (CEK) is then unwrapped (decrypted) using the key encryption key (KEK).</source>
          <target state="new">The wrapped content encryption key (CEK) is then unwrapped (decrypted) using the key encryption key (KEK).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here again, the client library does not have access to KEK.</source>
          <target state="new">Here again, the client library does not have access to KEK.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It simply invokes the custom or Key Vault provider’s unwrapping algorithm.</source>
          <target state="new">It simply invokes the custom or Key Vault provider’s unwrapping algorithm.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The content encryption key (CEK) is then used to decrypt the encrypted user data.</source>
          <target state="new">The content encryption key (CEK) is then used to decrypt the encrypted user data.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Encryption Mechanism</source>
          <target state="new">Encryption Mechanism</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The storage client library uses <bpt id="p1">[</bpt>AES<ept id="p1">](http://en.wikipedia.org/wiki/Advanced_Encryption_Standard)</ept> in order to encrypt user data.</source>
          <target state="new">The storage client library uses <bpt id="p1">[</bpt>AES<ept id="p1">](http://en.wikipedia.org/wiki/Advanced_Encryption_Standard)</ept> in order to encrypt user data.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifically, <bpt id="p1">[</bpt>Cipher Block Chaining (CBC)<ept id="p1">](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29)</ept> mode with AES.</source>
          <target state="new">Specifically, <bpt id="p1">[</bpt>Cipher Block Chaining (CBC)<ept id="p1">](http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29)</ept> mode with AES.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each service works somewhat differently, so we will discuss each of them here.</source>
          <target state="new">Each service works somewhat differently, so we will discuss each of them here.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Blobs</source>
          <target state="new">Blobs</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The client library currently supports encryption of whole blobs only.</source>
          <target state="new">The client library currently supports encryption of whole blobs only.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Specifically, encryption is supported when users use the <bpt id="p1">**</bpt>UploadFrom<ept id="p1">**</ept>* methods or the <bpt id="p2">**</bpt>OpenWrite<ept id="p2">**</ept> method.</source>
          <target state="new">Specifically, encryption is supported when users use the <bpt id="p1">**</bpt>UploadFrom<ept id="p1">**</ept>* methods or the <bpt id="p2">**</bpt>OpenWrite<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For downloads, both complete and range downloads are supported.</source>
          <target state="new">For downloads, both complete and range downloads are supported.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>During encryption, the client library will generate a random Initialization Vector (IV) of 16 bytes, together with a random content encryption key (CEK) of 32 bytes, and perform envelope encryption of the blob data using this information.</source>
          <target state="new">During encryption, the client library will generate a random Initialization Vector (IV) of 16 bytes, together with a random content encryption key (CEK) of 32 bytes, and perform envelope encryption of the blob data using this information.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The wrapped CEK and some additional encryption metadata are then stored as blob metadata along with the encrypted blob on the service.</source>
          <target state="new">The wrapped CEK and some additional encryption metadata are then stored as blob metadata along with the encrypted blob on the service.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.WARNING]</ph> If you are editing or uploading your own metadata for the blob, you need to ensure that this metadata is preserved.</source>
          <target state="new"><ph id="ph1">[AZURE.WARNING]</ph> If you are editing or uploading your own metadata for the blob, you need to ensure that this metadata is preserved.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you upload new metadata without this metadata, the wrapped CEK, IV and other metadata will be lost and the blob content will never be retrievable again.</source>
          <target state="new">If you upload new metadata without this metadata, the wrapped CEK, IV and other metadata will be lost and the blob content will never be retrievable again.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Downloading an encrypted blob involves retrieving the content of the entire blob using the <bpt id="p1">**</bpt>DownloadTo<ept id="p1">**</ept><bpt id="p2">*</bpt>/<ept id="p2">*</ept><bpt id="p3">*</bpt>BlobReadStream<ept id="p3">*</ept>* convenience methods.</source>
          <target state="new">Downloading an encrypted blob involves retrieving the content of the entire blob using the <bpt id="p1">**</bpt>DownloadTo<ept id="p1">**</ept><bpt id="p2">*</bpt>/<ept id="p2">*</ept><bpt id="p3">*</bpt>BlobReadStream<ept id="p3">*</ept>* convenience methods.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The wrapped CEK is unwrapped and used together with the IV (stored as blob metadata in this case) to return the decrypted data to the users.</source>
          <target state="new">The wrapped CEK is unwrapped and used together with the IV (stored as blob metadata in this case) to return the decrypted data to the users.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Downloading an arbitrary range (<bpt id="p1">**</bpt>DownloadRange<ept id="p1">**</ept>* methods) in the encrypted blob involves adjusting the range provided by users in order to get a small amount of additional data that can be used to successfully decrypt the requested range.</source>
          <target state="new">Downloading an arbitrary range (<bpt id="p1">**</bpt>DownloadRange<ept id="p1">**</ept>* methods) in the encrypted blob involves adjusting the range provided by users in order to get a small amount of additional data that can be used to successfully decrypt the requested range.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All blob types (block blobs, page blobs, and append blobs) can be encrypted/decrypted using this scheme.</source>
          <target state="new">All blob types (block blobs, page blobs, and append blobs) can be encrypted/decrypted using this scheme.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Since queue messages can be of any format, the client library defines a custom format that includes the Initialization Vector (IV) and the encrypted content encryption key (CEK) in the message text.</source>
          <target state="new">Since queue messages can be of any format, the client library defines a custom format that includes the Initialization Vector (IV) and the encrypted content encryption key (CEK) in the message text.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>During encryption, the client library generates a random IV of 16 bytes along with a random CEK of 32 bytes and performs envelope encryption of the queue message text using this information.</source>
          <target state="new">During encryption, the client library generates a random IV of 16 bytes along with a random CEK of 32 bytes and performs envelope encryption of the queue message text using this information.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The wrapped CEK and some additional encryption metadata are then added to the encrypted queue message.</source>
          <target state="new">The wrapped CEK and some additional encryption metadata are then added to the encrypted queue message.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This modified message (shown below) is stored on the service.</source>
          <target state="new">This modified message (shown below) is stored on the service.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>During decryption, the wrapped key is extracted from the queue message and unwrapped.</source>
          <target state="new">During decryption, the wrapped key is extracted from the queue message and unwrapped.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The IV is also extracted from the queue message and used along with the unwrapped key to decrypt the queue message data.</source>
          <target state="new">The IV is also extracted from the queue message and used along with the unwrapped key to decrypt the queue message data.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that the encryption metadata is small (under 500 bytes), so while it does count toward the 64KB limit for a queue message, the impact should be manageable.</source>
          <target state="new">Note that the encryption metadata is small (under 500 bytes), so while it does count toward the 64KB limit for a queue message, the impact should be manageable.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="new">Tables</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The client library supports encryption of entity properties for insert and replace operations.</source>
          <target state="new">The client library supports encryption of entity properties for insert and replace operations.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Merge is not currently supported.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Merge is not currently supported.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Since a subset of properties may have been encrypted previously using a different key, simply merging the new properties and updating the metadata will result in data loss.</source>
          <target state="new">Since a subset of properties may have been encrypted previously using a different key, simply merging the new properties and updating the metadata will result in data loss.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Merging either requires making extra service calls to read the pre-existing entity from the service, or using a new key per property, both of which are not suitable for performance reasons.</source>
          <target state="new">Merging either requires making extra service calls to read the pre-existing entity from the service, or using a new key per property, both of which are not suitable for performance reasons.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Table data encryption works as follows:</source>
          <target state="new">Table data encryption works as follows:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Users specify the properties to be encrypted.</source>
          <target state="new">Users specify the properties to be encrypted.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The client library generates a random Initialization Vector (IV) of 16 bytes along with a random content encryption key (CEK) of 32 bytes for every entity, and performs envelope encryption on the individual properties to be encrypted by deriving a new IV per property.</source>
          <target state="new">The client library generates a random Initialization Vector (IV) of 16 bytes along with a random content encryption key (CEK) of 32 bytes for every entity, and performs envelope encryption on the individual properties to be encrypted by deriving a new IV per property.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The encrypted property is stored as binary data.</source>
          <target state="new">The encrypted property is stored as binary data.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The wrapped CEK and some additional encryption metadata are then stored as two additional reserved properties.</source>
          <target state="new">The wrapped CEK and some additional encryption metadata are then stored as two additional reserved properties.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The first reserved property (_ClientEncryptionMetadata1) is a string property that holds the information about IV, version, and wrapped key.</source>
          <target state="new">The first reserved property (_ClientEncryptionMetadata1) is a string property that holds the information about IV, version, and wrapped key.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The second reserved property (_ClientEncryptionMetadata2) is a binary property that holds the information about the properties that are encrypted.</source>
          <target state="new">The second reserved property (_ClientEncryptionMetadata2) is a binary property that holds the information about the properties that are encrypted.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The information in this second property (_ClientEncryptionMetadata2) is itself encrypted.</source>
          <target state="new">The information in this second property (_ClientEncryptionMetadata2) is itself encrypted.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Due to these additional reserved properties required for encryption, users may now have only 250 custom properties instead of 252.</source>
          <target state="new">Due to these additional reserved properties required for encryption, users may now have only 250 custom properties instead of 252.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The total size of the entity must be less than 1MB.</source>
          <target state="new">The total size of the entity must be less than 1MB.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Note that only string properties can be encrypted.</source>
          <target state="new">Note that only string properties can be encrypted.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If other types of properties are to be encrypted, they must be converted to strings.</source>
          <target state="new">If other types of properties are to be encrypted, they must be converted to strings.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The encrypted strings are stored on the service as binary properties, and they are converted back to strings after decryption.</source>
          <target state="new">The encrypted strings are stored on the service as binary properties, and they are converted back to strings after decryption.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For tables, in addition to the encryption policy, users must specify the properties to be encrypted.</source>
          <target state="new">For tables, in addition to the encryption policy, users must specify the properties to be encrypted.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This can be done by either specifying an [EncryptProperty] attribute (for POCO entities that derive from TableEntity) or an encryption resolver in request options.</source>
          <target state="new">This can be done by either specifying an [EncryptProperty] attribute (for POCO entities that derive from TableEntity) or an encryption resolver in request options.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An encryption resolver is a delegate that takes a partition key, row key, and property name and returns a Boolean that indicates whether that property should be encrypted.</source>
          <target state="new">An encryption resolver is a delegate that takes a partition key, row key, and property name and returns a Boolean that indicates whether that property should be encrypted.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>During encryption, the client library will use this information to decide whether a property should be encrypted while writing to the wire.</source>
          <target state="new">During encryption, the client library will use this information to decide whether a property should be encrypted while writing to the wire.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The delegate also provides for the possibility of logic around how properties are encrypted.</source>
          <target state="new">The delegate also provides for the possibility of logic around how properties are encrypted.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>(For example, if X, then encrypt property A; otherwise encrypt properties A and B.) Note that it is not necessary to provide this information while reading or querying entities.</source>
          <target state="new">(For example, if X, then encrypt property A; otherwise encrypt properties A and B.) Note that it is not necessary to provide this information while reading or querying entities.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Batch Operations</source>
          <target state="new">Batch Operations</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In batch operations, the same KEK will be used across all the rows in that batch operation because the client library only allows one options object (and hence one policy/KEK) per batch operation.</source>
          <target state="new">In batch operations, the same KEK will be used across all the rows in that batch operation because the client library only allows one options object (and hence one policy/KEK) per batch operation.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>However, the client library will internally generate a new random IV and random CEK per row in the batch.</source>
          <target state="new">However, the client library will internally generate a new random IV and random CEK per row in the batch.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Users can also choose to encrypt different properties for every operation in the batch by defining this behavior in the encryption resolver.</source>
          <target state="new">Users can also choose to encrypt different properties for every operation in the batch by defining this behavior in the encryption resolver.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Queries</source>
          <target state="new">Queries</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To perform query operations, you must specify a key resolver that is able to resolve all the keys in the result set.</source>
          <target state="new">To perform query operations, you must specify a key resolver that is able to resolve all the keys in the result set.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If an entity contained in the query result cannot be resolved to a provider, the client library will throw an error.</source>
          <target state="new">If an entity contained in the query result cannot be resolved to a provider, the client library will throw an error.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For any query that performs server side projections, the client library will add the special encryption metadata properties (_ClientEncryptionMetadata1 and _ClientEncryptionMetadata2) by default to the selected columns.</source>
          <target state="new">For any query that performs server side projections, the client library will add the special encryption metadata properties (_ClientEncryptionMetadata1 and _ClientEncryptionMetadata2) by default to the selected columns.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Azure Key Vault</source>
          <target state="new">Azure Key Vault</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Azure Key Vault helps safeguard cryptographic keys and secrets used by cloud applications and services.</source>
          <target state="new">Azure Key Vault helps safeguard cryptographic keys and secrets used by cloud applications and services.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>By using Azure Key Vault, users can encrypt keys and secrets (such as authentication keys, storage account keys, data encryption keys, .PFX files, and passwords) by using keys that are protected by hardware security modules (HSMs).</source>
          <target state="new">By using Azure Key Vault, users can encrypt keys and secrets (such as authentication keys, storage account keys, data encryption keys, .PFX files, and passwords) by using keys that are protected by hardware security modules (HSMs).</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>What is Azure Key Vault?<ept id="p1">](../articles/key-vault-whatis.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>What is Azure Key Vault?<ept id="p1">](../articles/key-vault-whatis.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The storage client library uses the Key Vault core library in order to provide a common framework across Azure for managing keys.</source>
          <target state="new">The storage client library uses the Key Vault core library in order to provide a common framework across Azure for managing keys.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Users also get the additional benefit of using the Key Vault extensions library.</source>
          <target state="new">Users also get the additional benefit of using the Key Vault extensions library.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The extensions library provides useful functionality around simple and seamless Symmetric/RSA local and cloud key providers as well as with aggregation and caching.</source>
          <target state="new">The extensions library provides useful functionality around simple and seamless Symmetric/RSA local and cloud key providers as well as with aggregation and caching.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Interface and dependencies</source>
          <target state="new">Interface and dependencies</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>There are three Key Vault packages:</source>
          <target state="new">There are three Key Vault packages:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Microsoft.Azure.KeyVault.Core contains the IKey and IKeyResolver.</source>
          <target state="new">Microsoft.Azure.KeyVault.Core contains the IKey and IKeyResolver.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It is a small package with no dependencies.</source>
          <target state="new">It is a small package with no dependencies.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The storage client library for .NET defines it as a dependency.</source>
          <target state="new">The storage client library for .NET defines it as a dependency.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Microsoft.Azure.KeyVault contains the Key Vault REST client.</source>
          <target state="new">Microsoft.Azure.KeyVault contains the Key Vault REST client.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Microsoft.Azure.KeyVault.Extensions contains extension code that includes implementations of cryptographic algorithms and an RSAKey and a SymmetricKey.</source>
          <target state="new">Microsoft.Azure.KeyVault.Extensions contains extension code that includes implementations of cryptographic algorithms and an RSAKey and a SymmetricKey.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It depends on the Core and KeyVault namespaces and provides functionality to define an aggregate resolver (when users want to use multiple key providers) and a caching key resolver.</source>
          <target state="new">It depends on the Core and KeyVault namespaces and provides functionality to define an aggregate resolver (when users want to use multiple key providers) and a caching key resolver.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Although the storage client library does not directly depend on this package, if users wish to use Azure Key Vault to store their keys or to use the Key Vault extensions to consume the local and cloud cryptographic providers, they will need this package.</source>
          <target state="new">Although the storage client library does not directly depend on this package, if users wish to use Azure Key Vault to store their keys or to use the Key Vault extensions to consume the local and cloud cryptographic providers, they will need this package.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Key Vault is designed for high-value master keys, and throttling limits per Key Vault are designed with this in mind.</source>
          <target state="new">Key Vault is designed for high-value master keys, and throttling limits per Key Vault are designed with this in mind.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When performing client-side encryption with Key Vault, the preferred model is to use symmetric master keys stored as secrets in Key Vault and cached locally.</source>
          <target state="new">When performing client-side encryption with Key Vault, the preferred model is to use symmetric master keys stored as secrets in Key Vault and cached locally.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Users must do the following:</source>
          <target state="new">Users must do the following:</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Create a secret offline and upload it to Key Vault.</source>
          <target state="new">Create a secret offline and upload it to Key Vault.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Use the secret's base identifier as a parameter to resolve the current version of the secret for encryption and cache this information locally.</source>
          <target state="new">Use the secret's base identifier as a parameter to resolve the current version of the secret for encryption and cache this information locally.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use CachingKeyResolver for caching; users are not expected to implement their own caching logic.</source>
          <target state="new">Use CachingKeyResolver for caching; users are not expected to implement their own caching logic.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Use the caching resolver as an input while creating the encryption policy.</source>
          <target state="new">Use the caching resolver as an input while creating the encryption policy.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>More information regarding Key Vault usage can be found in the <bpt id="p1">[</bpt>encryption code samples<ept id="p1">](https://github.com/Azure/azure-storage-net/tree/master/Samples/GettingStarted/EncryptionSamples)</ept>.</source>
          <target state="new">More information regarding Key Vault usage can be found in the <bpt id="p1">[</bpt>encryption code samples<ept id="p1">](https://github.com/Azure/azure-storage-net/tree/master/Samples/GettingStarted/EncryptionSamples)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="new">Best practices</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Encryption support is available only in the storage client library for .NET.</source>
          <target state="new">Encryption support is available only in the storage client library for .NET.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Windows Phone and Windows Runtime do not currently support encryption.</source>
          <target state="new">Windows Phone and Windows Runtime do not currently support encryption.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> Be aware of these important points when using client-side encryption:</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> Be aware of these important points when using client-side encryption:</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When reading from or writing to an encrypted blob, use whole blob upload commands and range/whole blob download commands.</source>
          <target state="new">When reading from or writing to an encrypted blob, use whole blob upload commands and range/whole blob download commands.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Avoid writing to an encrypted blob using protocol operations such as Put Block, Put Block List, Write Pages, Clear Pages, or Append Block; otherwise you may corrupt the encrypted blob and make it unreadable.</source>
          <target state="new">Avoid writing to an encrypted blob using protocol operations such as Put Block, Put Block List, Write Pages, Clear Pages, or Append Block; otherwise you may corrupt the encrypted blob and make it unreadable.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For tables, a similar constraint exists.</source>
          <target state="new">For tables, a similar constraint exists.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Be careful to not update encrypted properties without updating the encryption metadata.</source>
          <target state="new">Be careful to not update encrypted properties without updating the encryption metadata.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If you set metadata on the encrypted blob, you may overwrite the encryption-related metadata required for decryption, since setting metadata is not additive.</source>
          <target state="new">If you set metadata on the encrypted blob, you may overwrite the encryption-related metadata required for decryption, since setting metadata is not additive.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is also true for snapshots; avoid specifying metadata while creating a snapshot of an encrypted blob.</source>
          <target state="new">This is also true for snapshots; avoid specifying metadata while creating a snapshot of an encrypted blob.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If metadata must be set, be sure to call the <bpt id="p1">**</bpt>FetchAttributes<ept id="p1">**</ept> method first to get the current encryption metadata, and avoid concurrent writes while metadata is being set.</source>
          <target state="new">If metadata must be set, be sure to call the <bpt id="p1">**</bpt>FetchAttributes<ept id="p1">**</ept> method first to get the current encryption metadata, and avoid concurrent writes while metadata is being set.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Enable the <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property in the default request options for users that should work only with encrypted data.</source>
          <target state="new">Enable the <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property in the default request options for users that should work only with encrypted data.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See below for more info.</source>
          <target state="new">See below for more info.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Client API / Interface</source>
          <target state="new">Client API / Interface</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>While creating an EncryptionPolicy object, users can provide only a Key (implementing IKey), only a resolver (implementing IKeyResolver), or both.</source>
          <target state="new">While creating an EncryptionPolicy object, users can provide only a Key (implementing IKey), only a resolver (implementing IKeyResolver), or both.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>IKey is the basic key type that is identified using a key identifier and that provides the logic for wrapping/unwrapping.</source>
          <target state="new">IKey is the basic key type that is identified using a key identifier and that provides the logic for wrapping/unwrapping.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>IKeyResolver is used to resolve a key during the decryption process.</source>
          <target state="new">IKeyResolver is used to resolve a key during the decryption process.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It defines a ResolveKey method that returns an IKey given a key identifier.</source>
          <target state="new">It defines a ResolveKey method that returns an IKey given a key identifier.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This provides users the ability to choose between multiple keys that are managed in multiple locations.</source>
          <target state="new">This provides users the ability to choose between multiple keys that are managed in multiple locations.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For encryption, the key is used always and the absence of a key will result in an error.</source>
          <target state="new">For encryption, the key is used always and the absence of a key will result in an error.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For decryption:</source>
          <target state="new">For decryption:</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The key resolver is invoked if specified to get the key.</source>
          <target state="new">The key resolver is invoked if specified to get the key.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If the resolver is specified but does not have a mapping for the key identifier, an error is thrown.</source>
          <target state="new">If the resolver is specified but does not have a mapping for the key identifier, an error is thrown.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If resolver is not specified but a key is specified, the key is used if its identifier matches the required key identifier.</source>
          <target state="new">If resolver is not specified but a key is specified, the key is used if its identifier matches the required key identifier.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If the identifier does not match, an error is thrown.</source>
          <target state="new">If the identifier does not match, an error is thrown.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>encryption samples<ept id="p1">](https://github.com/Azure/azure-storage-net/tree/master/Samples/GettingStarted/EncryptionSamples)</ept> demonstrate a more detailed end-to-end scenario for blobs, queues and tables, along with Key Vault integration.</source>
          <target state="new">The <bpt id="p1">[</bpt>encryption samples<ept id="p1">](https://github.com/Azure/azure-storage-net/tree/master/Samples/GettingStarted/EncryptionSamples)</ept> demonstrate a more detailed end-to-end scenario for blobs, queues and tables, along with Key Vault integration.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>RequireEncryption mode</source>
          <target state="new">RequireEncryption mode</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Users can optionally enable a mode of operation where all uploads and downloads must be encrypted.</source>
          <target state="new">Users can optionally enable a mode of operation where all uploads and downloads must be encrypted.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In this mode, attempts to upload data without an encryption policy or download data that is not encrypted on the service will fail on the client.</source>
          <target state="new">In this mode, attempts to upload data without an encryption policy or download data that is not encrypted on the service will fail on the client.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property of the request options object controls this behavior.</source>
          <target state="new">The <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property of the request options object controls this behavior.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If your application will encrypt all objects stored in Azure Storage, then you can set the <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property on the default request options for the service client object.</source>
          <target state="new">If your application will encrypt all objects stored in Azure Storage, then you can set the <bpt id="p1">**</bpt>RequireEncryption<ept id="p1">**</ept> property on the default request options for the service client object.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For example, set <bpt id="p1">**</bpt>CloudBlobClient.DefaultRequestOptions.RequireEncryption<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> to require encryption for all blob operations performed through that client object.</source>
          <target state="new">For example, set <bpt id="p1">**</bpt>CloudBlobClient.DefaultRequestOptions.RequireEncryption<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> to require encryption for all blob operations performed through that client object.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Blob service encryption</source>
          <target state="new">Blob service encryption</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">**</bpt>BlobEncryptionPolicy<ept id="p1">**</ept> object and set it in the request options (per API or at a client level by using <bpt id="p2">**</bpt>DefaultRequestOptions<ept id="p2">**</ept>).</source>
          <target state="new">Create a <bpt id="p1">**</bpt>BlobEncryptionPolicy<ept id="p1">**</ept> object and set it in the request options (per API or at a client level by using <bpt id="p2">**</bpt>DefaultRequestOptions<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Everything else will be handled by the client library internally.</source>
          <target state="new">Everything else will be handled by the client library internally.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Queue service encryption</source>
          <target state="new">Queue service encryption</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">**</bpt>QueueEncryptionPolicy<ept id="p1">**</ept> object and set it in the request options (per API or at a client level by using <bpt id="p2">**</bpt>DefaultRequestOptions<ept id="p2">**</ept>).</source>
          <target state="new">Create a <bpt id="p1">**</bpt>QueueEncryptionPolicy<ept id="p1">**</ept> object and set it in the request options (per API or at a client level by using <bpt id="p2">**</bpt>DefaultRequestOptions<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Everything else will be handled by the client library internally.</source>
          <target state="new">Everything else will be handled by the client library internally.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Table service encryption</source>
          <target state="new">Table service encryption</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In addition to creating an encryption policy and setting it on request options, you must either specify an <bpt id="p1">**</bpt>EncryptionResolver<ept id="p1">**</ept> in <bpt id="p2">**</bpt>TableRequestOptions<ept id="p2">**</ept>, or set the [EncryptProperty] attribute on the entity.</source>
          <target state="new">In addition to creating an encryption policy and setting it on request options, you must either specify an <bpt id="p1">**</bpt>EncryptionResolver<ept id="p1">**</ept> in <bpt id="p2">**</bpt>TableRequestOptions<ept id="p2">**</ept>, or set the [EncryptProperty] attribute on the entity.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Using the resolver</source>
          <target state="new">Using the resolver</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Using attributes</source>
          <target state="new">Using attributes</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>As mentioned above, if the entity implements TableEntity, then the properties can be decorated with the [EncryptProperty] attribute instead of specifying the <bpt id="p1">**</bpt>EncryptionResolver<ept id="p1">**</ept>.</source>
          <target state="new">As mentioned above, if the entity implements TableEntity, then the properties can be decorated with the [EncryptProperty] attribute instead of specifying the <bpt id="p1">**</bpt>EncryptionResolver<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Encryption and performance</source>
          <target state="new">Encryption and performance</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Note that encrypting your storage data results in additional performance overhead.</source>
          <target state="new">Note that encrypting your storage data results in additional performance overhead.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The content key and IV must be generated, the content itself must be encrypted, and additional meta-data must be formatted and uploaded.</source>
          <target state="new">The content key and IV must be generated, the content itself must be encrypted, and additional meta-data must be formatted and uploaded.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This overhead will vary depending on the quantity of data being encrypted.</source>
          <target state="new">This overhead will vary depending on the quantity of data being encrypted.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>We recommend that customers always test their applications for performance during development.</source>
          <target state="new">We recommend that customers always test their applications for performance during development.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Azure Storage Client Library for .NET NuGet package<ept id="p1">](http://www.nuget.org/packages/WindowsAzure.Storage/5.0.0)</ept></source>
          <target state="new">Download the <bpt id="p1">[</bpt>Azure Storage Client Library for .NET NuGet package<ept id="p1">](http://www.nuget.org/packages/WindowsAzure.Storage/5.0.0)</ept></target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Azure Storage Client Library for .NET Source Code<ept id="p1">](https://github.com/Azure/azure-storage-net)</ept> from GitHub</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Azure Storage Client Library for .NET Source Code<ept id="p1">](https://github.com/Azure/azure-storage-net)</ept> from GitHub</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Download the Azure Key Vault NuGet <bpt id="p1">[</bpt>Core<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Core/)</ept>, <bpt id="p2">[</bpt>Client<ept id="p2">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault/)</ept>, and <bpt id="p3">[</bpt>Extensions<ept id="p3">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Extensions/)</ept> packages</source>
          <target state="new">Download the Azure Key Vault NuGet <bpt id="p1">[</bpt>Core<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Core/)</ept>, <bpt id="p2">[</bpt>Client<ept id="p2">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault/)</ept>, and <bpt id="p3">[</bpt>Extensions<ept id="p3">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Extensions/)</ept> packages</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure Key Vault Documentation<ept id="p1">](../articles/key-vault-whatis.md)</ept></source>
          <target state="new">Visit the <bpt id="p1">[</bpt>Azure Key Vault Documentation<ept id="p1">](../articles/key-vault-whatis.md)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f212fc928dbd9e6301a301c0ec5fd1c052718d04</xliffext:olfilehash>
  </header>
</xliff>