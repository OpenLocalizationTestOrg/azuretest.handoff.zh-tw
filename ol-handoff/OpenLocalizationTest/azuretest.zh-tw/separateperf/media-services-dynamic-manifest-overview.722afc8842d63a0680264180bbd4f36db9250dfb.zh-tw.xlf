<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Filters and Dynamic Manifests</source>
          <target state="new">Filters and Dynamic Manifests</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes how to create filters so your client can use them to stream specific sections of a stream.</source>
          <target state="new">This topic describes how to create filters so your client can use them to stream specific sections of a stream.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Media Services creates dynamic manifests to achive this selective streaming.</source>
          <target state="new">Media Services creates dynamic manifests to achive this selective streaming.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Filters and Dynamic Manifests</source>
          <target state="new">Filters and Dynamic Manifests</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Starting with 2.11 release, Media Services enables you to define filters for your assets.</source>
          <target state="new">Starting with 2.11 release, Media Services enables you to define filters for your assets.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These filters are server side rules that will allow your customers to choose to do things like: playback only a section of a video (instead of playing the whole video), or specify only a subset of audio and video renditions that your customer's device can handle (instead of all the renditions that are associated with the asset).</source>
          <target state="new">These filters are server side rules that will allow your customers to choose to do things like: playback only a section of a video (instead of playing the whole video), or specify only a subset of audio and video renditions that your customer's device can handle (instead of all the renditions that are associated with the asset).</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This filtering of your assets is achieved through <bpt id="p1">**</bpt>Dynamic Manifest<ept id="p1">**</ept>s that are created upon your customer's request to stream a video based on specified filter(s).</source>
          <target state="new">This filtering of your assets is achieved through <bpt id="p1">**</bpt>Dynamic Manifest<ept id="p1">**</ept>s that are created upon your customer's request to stream a video based on specified filter(s).</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topics discusses common scenarios in which using filters would be very beneficial to your customers and links to topics that demonstrate how to create filters programmatically (currently, you can create filters with REST APIs only).</source>
          <target state="new">This topics discusses common scenarios in which using filters would be very beneficial to your customers and links to topics that demonstrate how to create filters programmatically (currently, you can create filters with REST APIs only).</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When delivering your content to customers (streaming live events or video-on-demand) your goal is to deliver a high quality video to various devices under different network conditions.</source>
          <target state="new">When delivering your content to customers (streaming live events or video-on-demand) your goal is to deliver a high quality video to various devices under different network conditions.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To achieve this goal do the following:</source>
          <target state="new">To achieve this goal do the following:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>encode your stream to multi-bitrate (<bpt id="p1">[</bpt>adaptive bitrate<ept id="p1">](http://en.wikipedia.org/wiki/Adaptive_bitrate_streaming)</ept>) video stream (this will take care of quality and network conditions) and</source>
          <target state="new">encode your stream to multi-bitrate (<bpt id="p1">[</bpt>adaptive bitrate<ept id="p1">](http://en.wikipedia.org/wiki/Adaptive_bitrate_streaming)</ept>) video stream (this will take care of quality and network conditions) and</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>use Media Services <bpt id="p1">[</bpt>Dynamic Packaging<ept id="p1">](media-services-dynamic-packaging-overview.md)</ept> to dynamically re-package your stream into different protocols (this will take care of streaming on different devices).</source>
          <target state="new">use Media Services <bpt id="p1">[</bpt>Dynamic Packaging<ept id="p1">](media-services-dynamic-packaging-overview.md)</ept> to dynamically re-package your stream into different protocols (this will take care of streaming on different devices).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Media Services supports delivery of the following adaptive bitrate streaming technologies: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</source>
          <target state="new">Media Services supports delivery of the following adaptive bitrate streaming technologies: HTTP Live Streaming (HLS), Smooth Streaming, MPEG DASH, and HDS (for Adobe PrimeTime/Access licensees only).</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Manifest files</source>
          <target state="new">Manifest files</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you encode an asset for adaptive bitrate streaming, a <bpt id="p1">**</bpt>manifest<ept id="p1">**</ept> (playlist) file is created (the file is text-based or XML-based).</source>
          <target state="new">When you encode an asset for adaptive bitrate streaming, a <bpt id="p1">**</bpt>manifest<ept id="p1">**</ept> (playlist) file is created (the file is text-based or XML-based).</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>manifest<ept id="p1">**</ept> file includes streaming metadata such as: track type (audio, video, or text), track name, start and end time, bitrate (qualities), track languages, presentation window (sliding window of fixed duration), video codec (FourCC).</source>
          <target state="new">The <bpt id="p1">**</bpt>manifest<ept id="p1">**</ept> file includes streaming metadata such as: track type (audio, video, or text), track name, start and end time, bitrate (qualities), track languages, presentation window (sliding window of fixed duration), video codec (FourCC).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also instructs the player to retrieve the next fragment by providing information about the next playable video fragments available and their location.</source>
          <target state="new">It also instructs the player to retrieve the next fragment by providing information about the next playable video fragments available and their location.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Fragments (or segments) are the actual “chunks” of a video content.</source>
          <target state="new">Fragments (or segments) are the actual “chunks” of a video content.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Here is an example of a manifest file:</source>
          <target state="new">Here is an example of a manifest file:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Dynamic manifests</source>
          <target state="new">Dynamic manifests</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are <bpt id="p1">[</bpt>scenarios<ept id="p1">](media-services-dynamic-manifest-overview.md#scenarios)</ept> when your client needs more flexibility than what's described in the default asset's manifest file.</source>
          <target state="new">There are <bpt id="p1">[</bpt>scenarios<ept id="p1">](media-services-dynamic-manifest-overview.md#scenarios)</ept> when your client needs more flexibility than what's described in the default asset's manifest file.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Device specific: deliver only the specified renditions and\or specified language tracks that are supported by the device that is used to playback the content ("rendition filtering").</source>
          <target state="new">Device specific: deliver only the specified renditions and\or specified language tracks that are supported by the device that is used to playback the content ("rendition filtering").</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reduce the manifest to show a sub-clip of a live event ("sub-clip filtering").</source>
          <target state="new">Reduce the manifest to show a sub-clip of a live event ("sub-clip filtering").</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Trim the start of a video ("trimming a video").</source>
          <target state="new">Trim the start of a video ("trimming a video").</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adjust Presentation Window (DVR) in order to provide a limited length of the DVR window in the player ("adjusting presentation window") .</source>
          <target state="new">Adjust Presentation Window (DVR) in order to provide a limited length of the DVR window in the player ("adjusting presentation window") .</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To achieve this flexibility, Media Services offers <bpt id="p1">**</bpt>Dynamic Manifests<ept id="p1">**</ept> based on pre-defined <bpt id="p2">[</bpt>filters<ept id="p2">](media-services-dynamic-manifest-overview.md#filters)</ept>.</source>
          <target state="new">To achieve this flexibility, Media Services offers <bpt id="p1">**</bpt>Dynamic Manifests<ept id="p1">**</ept> based on pre-defined <bpt id="p2">[</bpt>filters<ept id="p2">](media-services-dynamic-manifest-overview.md#filters)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once you define the filters, your clients could use them to stream a specific rendition or sub-clips of your video.</source>
          <target state="new">Once you define the filters, your clients could use them to stream a specific rendition or sub-clips of your video.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>They would specify filter(s) in the streaming URL.</source>
          <target state="new">They would specify filter(s) in the streaming URL.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Filters could be applied to adaptive bitrate streaming protocols supported by <bpt id="p1">[</bpt>Dynamic Packaging<ept id="p1">](media-services-dynamic-packaging-overview.md)</ept>: HLS, MPEG-DASH, Smooth Streaming, and HDS.</source>
          <target state="new">Filters could be applied to adaptive bitrate streaming protocols supported by <bpt id="p1">[</bpt>Dynamic Packaging<ept id="p1">](media-services-dynamic-packaging-overview.md)</ept>: HLS, MPEG-DASH, Smooth Streaming, and HDS.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>MPEG DASH URL with filter</source>
          <target state="new">MPEG DASH URL with filter</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Smooth Streaming URL with filter</source>
          <target state="new">Smooth Streaming URL with filter</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about how to deliver your content and build streaming URLs, see <bpt id="p1">[</bpt>Delivering content overview<ept id="p1">](media-services-deliver-content-overview/)</ept>.</source>
          <target state="new">For more information about how to deliver your content and build streaming URLs, see <bpt id="p1">[</bpt>Delivering content overview<ept id="p1">](media-services-deliver-content-overview/)</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Note that Dynamic Manifests do not change the asset and the default manifest for that asset.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Note that Dynamic Manifests do not change the asset and the default manifest for that asset.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Your client can choose to request a stream with or without filters.</source>
          <target state="new">Your client can choose to request a stream with or without filters.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="filters"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Filters</source>
          <target state="new"><ph id="ph1">&lt;a id="filters"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Filters</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There are two types of asset filters:</source>
          <target state="new">There are two types of asset filters:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Global filters (can be applied to any asset in the Azure Media Services account, have a lifetime of the account) and</source>
          <target state="new">Global filters (can be applied to any asset in the Azure Media Services account, have a lifetime of the account) and</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Local filters (can only be applied to an asset with which the filter was associated upon creation, have a lifetime of the asset).</source>
          <target state="new">Local filters (can only be applied to an asset with which the filter was associated upon creation, have a lifetime of the asset).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Global and local filter types have exactly the same properties.</source>
          <target state="new">Global and local filter types have exactly the same properties.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The main difference between the two is for which scenarios what type of a filer is more suitable.</source>
          <target state="new">The main difference between the two is for which scenarios what type of a filer is more suitable.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Global filters are generally suitable for device profiles (rendition filtering) where local filters could be used to trim a specific asset.</source>
          <target state="new">Global filters are generally suitable for device profiles (rendition filtering) where local filters could be used to trim a specific asset.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="scenarios"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Common scenarios</source>
          <target state="new"><ph id="ph1">&lt;a id="scenarios"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Common scenarios</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As was mentioned before, when delivering your content to customers (streaming live events or video-on-demand) your goal is to deliver a high quality video to various devices under different network conditions.</source>
          <target state="new">As was mentioned before, when delivering your content to customers (streaming live events or video-on-demand) your goal is to deliver a high quality video to various devices under different network conditions.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In addition, your might have other requirements that involve filtering your assets and using of <bpt id="p1">**</bpt>Dynamic Manifest<ept id="p1">**</ept>s.</source>
          <target state="new">In addition, your might have other requirements that involve filtering your assets and using of <bpt id="p1">**</bpt>Dynamic Manifest<ept id="p1">**</ept>s.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following sections give a short overview of different filtering scenarios.</source>
          <target state="new">The following sections give a short overview of different filtering scenarios.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specify only a subset of audio and video renditions that certain devices can handle (instead of all the renditions that are associated with the asset).</source>
          <target state="new">Specify only a subset of audio and video renditions that certain devices can handle (instead of all the renditions that are associated with the asset).</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Playing back only a section of a video (instead of playing the whole video).</source>
          <target state="new">Playing back only a section of a video (instead of playing the whole video).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Adjust DVR presentation window.</source>
          <target state="new">Adjust DVR presentation window.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Rendition filtering</source>
          <target state="new">Rendition filtering</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You may choose to encode your asset to multiple encoding profiles (H.264 Baseline, H.264 High, AACL, AACH, Dolby Digital Plus) and multiple quality bitrates.</source>
          <target state="new">You may choose to encode your asset to multiple encoding profiles (H.264 Baseline, H.264 High, AACL, AACH, Dolby Digital Plus) and multiple quality bitrates.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, not all client devices will support all your asset's profiles and bitrates.</source>
          <target state="new">However, not all client devices will support all your asset's profiles and bitrates.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, older Android devices only supports H.264 Baseline+AACL.</source>
          <target state="new">For example, older Android devices only supports H.264 Baseline+AACL.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Sending higher bitrates to a device which cannot get the benefits, wastes bandwidth and device computation.</source>
          <target state="new">Sending higher bitrates to a device which cannot get the benefits, wastes bandwidth and device computation.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Such device must decode all the given information, only to scale it down for display.</source>
          <target state="new">Such device must decode all the given information, only to scale it down for display.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>With Dynamic Manifest, you can create device profiles such as mobile, console, HD/SD, etc. and include the tracks and qualities which you want to be a part of each profile.</source>
          <target state="new">With Dynamic Manifest, you can create device profiles such as mobile, console, HD/SD, etc. and include the tracks and qualities which you want to be a part of each profile.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Rendition filtering example</source>
          <target state="new">Rendition filtering example</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the following example, Azure Media Encoder was used to encode a mezzanine asset into seven ISO MP4s video renditions (from 180p to 1080p).</source>
          <target state="new">In the following example, Azure Media Encoder was used to encode a mezzanine asset into seven ISO MP4s video renditions (from 180p to 1080p).</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The encoded asset can be dynamically packaged into any of the following streaming protocols: HLS, Smooth, MPEG DASH, and HDS.</source>
          <target state="new">The encoded asset can be dynamically packaged into any of the following streaming protocols: HLS, Smooth, MPEG DASH, and HDS.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>At the top of the diagram, the HLS manifest for the asset with no filters is shown (it contains all seven renditions).</source>
          <target state="new">At the top of the diagram, the HLS manifest for the asset with no filters is shown (it contains all seven renditions).</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the bottom left, the HLS manifest to which a filter named "ott" was applied is shown.</source>
          <target state="new">In the bottom left, the HLS manifest to which a filter named "ott" was applied is shown.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The "ott" filter specifies to remove all bitrates below 1Mbps, which resulted in the bottom two quality levels being stripped off in the response.</source>
          <target state="new">The "ott" filter specifies to remove all bitrates below 1Mbps, which resulted in the bottom two quality levels being stripped off in the response.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the bottom right,   the HLS manifest to which a filter named "mobile" was applied is shown.</source>
          <target state="new">In the bottom right,   the HLS manifest to which a filter named "mobile" was applied is shown.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The "mobile" filter specifies to remove renditions where the resolution is larger than 720p, which resulted in the two 1080p renditions being stripped off.</source>
          <target state="new">The "mobile" filter specifies to remove renditions where the resolution is larger than 720p, which resulted in the two 1080p renditions being stripped off.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Rendition filtering</source>
          <target state="new">Rendition filtering</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Removing language tracks</source>
          <target state="new">Removing language tracks</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Your assets might include multiple audio languages such as English, Spanish, French, etc. Usually, the Player SDK managers default audio track selection and available audio tracks per user selection.</source>
          <target state="new">Your assets might include multiple audio languages such as English, Spanish, French, etc. Usually, the Player SDK managers default audio track selection and available audio tracks per user selection.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It is challenging to develop such Player SDKs, it requires different implementations across device-specific player-frameworks.</source>
          <target state="new">It is challenging to develop such Player SDKs, it requires different implementations across device-specific player-frameworks.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, on some platforms, Player APIs are limited and do not include audio selection feature where users cannot select or change the default audio track.</source>
          <target state="new">Also, on some platforms, Player APIs are limited and do not include audio selection feature where users cannot select or change the default audio track.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With asset filters, you can control the behavior by creating filters that only include desired audio languages.</source>
          <target state="new">With asset filters, you can control the behavior by creating filters that only include desired audio languages.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Language tracks filtering</source>
          <target state="new">Language tracks filtering</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Trimming start of an asset</source>
          <target state="new">Trimming start of an asset</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In most live streaming events, operators run some tests before the actual event.</source>
          <target state="new">In most live streaming events, operators run some tests before the actual event.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, they might include a slate like this before the start of the event: "Program will begin momentarily".</source>
          <target state="new">For example, they might include a slate like this before the start of the event: "Program will begin momentarily".</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the program is archiving, the test and slate data are also archived and will be included in the presentation.</source>
          <target state="new">If the program is archiving, the test and slate data are also archived and will be included in the presentation.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, this information should not be shown to the clients.</source>
          <target state="new">However, this information should not be shown to the clients.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>With Dynamic Manifest, you can create a start time filter and remove the unwanted data from the manifest.</source>
          <target state="new">With Dynamic Manifest, you can create a start time filter and remove the unwanted data from the manifest.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Trimming start</source>
          <target state="new">Trimming start</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Creating sub-clips (views) from a live archive</source>
          <target state="new">Creating sub-clips (views) from a live archive</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Many live events are long running and live archive might include multiple events.</source>
          <target state="new">Many live events are long running and live archive might include multiple events.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After the live event ends broadcasters may want to break up the live archive into logical program start and stop sequences.</source>
          <target state="new">After the live event ends broadcasters may want to break up the live archive into logical program start and stop sequences.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Then, publish these virtual programs separately without post processing the live archive and not creating separate assets (which will not get benefit of the existing cached fragments in the CDNs).</source>
          <target state="new">Then, publish these virtual programs separately without post processing the live archive and not creating separate assets (which will not get benefit of the existing cached fragments in the CDNs).</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Examples of such virtual programs (sub-clips) are the quarters of a football or basketball game, the innings in baseball, or individual events of an afternoon of Olympics program.</source>
          <target state="new">Examples of such virtual programs (sub-clips) are the quarters of a football or basketball game, the innings in baseball, or individual events of an afternoon of Olympics program.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>With Dynamic Manifest, you can create filters using start/end times and create virtual views over the top of your live archive.</source>
          <target state="new">With Dynamic Manifest, you can create filters using start/end times and create virtual views over the top of your live archive.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Subclip filter</source>
          <target state="new">Subclip filter</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Filtered Asset:</source>
          <target state="new">Filtered Asset:</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Skiing</source>
          <target state="new">Skiing</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Adjusting Presentation Window (DVR)</source>
          <target state="new">Adjusting Presentation Window (DVR)</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Currently, Azure Media Services offers circular archive where the duration can be configured between 5 minutes - 25 hours.</source>
          <target state="new">Currently, Azure Media Services offers circular archive where the duration can be configured between 5 minutes - 25 hours.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Manifest filtering can be used to create a rolling DVR window over the top of the archive, without deleting media.</source>
          <target state="new">Manifest filtering can be used to create a rolling DVR window over the top of the archive, without deleting media.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>There are many scenarios where broadcasters want to provide a limited DVR window which moves with the live edge and at the same time keep a bigger archiving window.</source>
          <target state="new">There are many scenarios where broadcasters want to provide a limited DVR window which moves with the live edge and at the same time keep a bigger archiving window.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A broadcaster may want to use the data that is out of the DVR window to highlight clips, or he\she may want to provide different DVR windows for different devices.</source>
          <target state="new">A broadcaster may want to use the data that is out of the DVR window to highlight clips, or he\she may want to provide different DVR windows for different devices.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, most of the mobile devices don’t handle big DVR windows (you can have a 2 minute DVR window for mobile devices and 1 hour for desktop clients).</source>
          <target state="new">For example, most of the mobile devices don’t handle big DVR windows (you can have a 2 minute DVR window for mobile devices and 1 hour for desktop clients).</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>DVR window</source>
          <target state="new">DVR window</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Adjusting LiveBackoff (live position)</source>
          <target state="new">Adjusting LiveBackoff (live position)</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Manifest filtering can be used to remove several seconds from the live edge of a live program.</source>
          <target state="new">Manifest filtering can be used to remove several seconds from the live edge of a live program.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This allows broadcasters to watch the presentation on the preview publication point and create advertisement insertion points before the viewers receive the stream (usually backed-off by 30 seconds).</source>
          <target state="new">This allows broadcasters to watch the presentation on the preview publication point and create advertisement insertion points before the viewers receive the stream (usually backed-off by 30 seconds).</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Broadcasters can then push these advertisements to their client frameworks in time for them to received and process the information before the advertisement opportunity.</source>
          <target state="new">Broadcasters can then push these advertisements to their client frameworks in time for them to received and process the information before the advertisement opportunity.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In addition to the advertisement support, LiveBackoff can be used for adjusting client live download position so that when clients drift and hit the live edge they can still get fragments from server instead of getting 404 or 412 HTTP errors.</source>
          <target state="new">In addition to the advertisement support, LiveBackoff can be used for adjusting client live download position so that when clients drift and hit the live edge they can still get fragments from server instead of getting 404 or 412 HTTP errors.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>livebackoff_filter</source>
          <target state="new">livebackoff_filter</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Combining multiple rules in a single filter</source>
          <target state="new">Combining multiple rules in a single filter</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can combine multiple filtering rules in a single filter.</source>
          <target state="new">You can combine multiple filtering rules in a single filter.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>As an example you can define a range rule to remove slate from a live archive and also filter available bitrates.</source>
          <target state="new">As an example you can define a range rule to remove slate from a live archive and also filter available bitrates.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For multiple filtering rules the end result is the composition (intersection only) of these rules.</source>
          <target state="new">For multiple filtering rules the end result is the composition (intersection only) of these rules.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>multiple-rules</source>
          <target state="new">multiple-rules</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Create filters programmatically</source>
          <target state="new">Create filters programmatically</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following topic discusses Media Services entities that are related to filters.</source>
          <target state="new">The following topic discusses Media Services entities that are related to filters.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The topic also shows how to programmatically create filters.</source>
          <target state="new">The topic also shows how to programmatically create filters.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create filters with REST APIs<ept id="p1">](media-services-rest-dynamic-manifest.md)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Create filters with REST APIs<ept id="p1">](media-services-rest-dynamic-manifest.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Know issues and limitations</source>
          <target state="new">Know issues and limitations</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Dynamic manifest operates in GOP boundaries (Key Frames) hence trimming has GOP accuracy.</source>
          <target state="new">Dynamic manifest operates in GOP boundaries (Key Frames) hence trimming has GOP accuracy.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can use same filter name for local and global filters.</source>
          <target state="new">You can use same filter name for local and global filters.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Note that local filter have higher precedence and will override global filters.</source>
          <target state="new">Note that local filter have higher precedence and will override global filters.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If you update a filter, it can take up to 2 minutes for streaming endpoint to refresh the rules.</source>
          <target state="new">If you update a filter, it can take up to 2 minutes for streaming endpoint to refresh the rules.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the content was served using some filters (and cached in proxies and CDN caches), updating these filters can result in player failures.</source>
          <target state="new">If the content was served using some filters (and cached in proxies and CDN caches), updating these filters can result in player failures.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It is recommend to clear the cache after updating the filter.</source>
          <target state="new">It is recommend to clear the cache after updating the filter.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If this option is not possible, consider using a different filter.</source>
          <target state="new">If this option is not possible, consider using a different filter.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06d910facf660d9117cdce385bf1d3a17195b733</xliffext:olfilehash>
  </header>
</xliff>