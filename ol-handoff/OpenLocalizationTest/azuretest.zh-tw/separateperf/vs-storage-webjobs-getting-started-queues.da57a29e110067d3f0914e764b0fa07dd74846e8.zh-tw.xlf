<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with Azure Queue storage and Visual Studio connected services (WebJob projects)</source>
          <target state="new">Getting started with Azure Queue storage and Visual Studio connected services (WebJob projects)</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to get started using Queue storage in an Azure storage account that was created using Visual Studio's Add Connected Services dialog box in a WebJob project.</source>
          <target state="new">How to get started using Queue storage in an Azure storage account that was created using Visual Studio's Add Connected Services dialog box in a WebJob project.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting started with Azure Queue storage and Visual Studio connected services (WebJob Projects)</source>
          <target state="new">Getting started with Azure Queue storage and Visual Studio connected services (WebJob Projects)</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new">Getting started</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What happened</source>
          <target state="new">What happened</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blobs</source>
          <target state="new">Blobs</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="new">Tables</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes how get started using Azure Queue storage in a Visual Studio Azure WebJob project after you have created or referenced an Azure storage account by using the Visual Studio  <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog box.</source>
          <target state="new">This article describes how get started using Azure Queue storage in a Visual Studio Azure WebJob project after you have created or referenced an Azure storage account by using the Visual Studio  <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog box.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you add a storage account to a WebJob project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog, the appropriate Azure Storage NuGet packages are installed, the appropriate .NET references are added to the project, and connection strings for the storage account are updated in the App.config file.</source>
          <target state="new">When you add a storage account to a WebJob project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog, the appropriate Azure Storage NuGet packages are installed, the appropriate .NET references are added to the project, and connection strings for the storage account are updated in the App.config file.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This article provides C# code samples that show how to use the Azure WebJobs SDK version 1.x with the Azure Queue storage service.</source>
          <target state="new">This article provides C# code samples that show how to use the Azure WebJobs SDK version 1.x with the Azure Queue storage service.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Azure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.</source>
          <target state="new">Azure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.</source>
          <target state="new">A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use Queue Storage from .NET<ept id="p1">](storage-dotnet-how-to-use-queues.md)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use Queue Storage from .NET<ept id="p1">](storage-dotnet-how-to-use-queues.md)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about ASP.NET, see <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept>.</source>
          <target state="new">For more information about ASP.NET, see <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>How to trigger a function when a queue message is received</source>
          <target state="new">How to trigger a function when a queue message is received</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To write a function that the WebJobs SDK calls when a queue message is received, use the <ph id="ph1">`QueueTrigger`</ph> attribute.</source>
          <target state="new">To write a function that the WebJobs SDK calls when a queue message is received, use the <ph id="ph1">`QueueTrigger`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The attribute constructor takes a string parameter that specifies the name of the queue to poll.</source>
          <target state="new">The attribute constructor takes a string parameter that specifies the name of the queue to poll.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also <bpt id="p1">[</bpt>set the queue name dynamically<ept id="p1">](#config)</ept>.</source>
          <target state="new">You can also <bpt id="p1">[</bpt>set the queue name dynamically<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>String queue messages</source>
          <target state="new">String queue messages</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the following example, the queue contains a string message, so <ph id="ph1">`QueueTrigger`</ph> is applied to a string parameter named <ph id="ph2">`logMessage`</ph> which contains the content of the queue message.</source>
          <target state="new">In the following example, the queue contains a string message, so <ph id="ph1">`QueueTrigger`</ph> is applied to a string parameter named <ph id="ph2">`logMessage`</ph> which contains the content of the queue message.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The function <bpt id="p1">[</bpt>writes a log message to the Dashboard<ept id="p1">](#logs)</ept>.</source>
          <target state="new">The function <bpt id="p1">[</bpt>writes a log message to the Dashboard<ept id="p1">](#logs)</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Besides <ph id="ph1">`string`</ph>, the parameter may be a byte array, a <ph id="ph2">`CloudQueueMessage`</ph> object, or a POCO  that you define.</source>
          <target state="new">Besides <ph id="ph1">`string`</ph>, the parameter may be a byte array, a <ph id="ph2">`CloudQueueMessage`</ph> object, or a POCO  that you define.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</source>
          <target state="new">POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following example, the queue message contains JSON for a <ph id="ph1">`BlobInformation`</ph> object which includes a <ph id="ph2">`BlobName`</ph> property.</source>
          <target state="new">In the following example, the queue message contains JSON for a <ph id="ph1">`BlobInformation`</ph> object which includes a <ph id="ph2">`BlobName`</ph> property.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The SDK automatically deserializes the object.</source>
          <target state="new">The SDK automatically deserializes the object.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The SDK uses the <bpt id="p1">[</bpt>Newtonsoft.Json NuGet package<ept id="p1">](http://www.nuget.org/packages/Newtonsoft.Json)</ept> to serialize and deserialize messages.</source>
          <target state="new">The SDK uses the <bpt id="p1">[</bpt>Newtonsoft.Json NuGet package<ept id="p1">](http://www.nuget.org/packages/Newtonsoft.Json)</ept> to serialize and deserialize messages.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you create queue messages in a program that doesn't use the WebJobs SDK, you can write code like the following example to create a POCO queue message that the SDK can parse.</source>
          <target state="new">If you create queue messages in a program that doesn't use the WebJobs SDK, you can write code like the following example to create a POCO queue message that the SDK can parse.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Async functions</source>
          <target state="new">Async functions</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following async function <bpt id="p1">[</bpt>writes a log to the Dashboard<ept id="p1">](#logs)</ept>.</source>
          <target state="new">The following async function <bpt id="p1">[</bpt>writes a log to the Dashboard<ept id="p1">](#logs)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Async functions may take a <bpt id="p1">[</bpt>cancellation token<ept id="p1">](http://www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4#CancelToken)</ept>, as shown in the following example which copies a blob.</source>
          <target state="new">Async functions may take a <bpt id="p1">[</bpt>cancellation token<ept id="p1">](http://www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4#CancelToken)</ept>, as shown in the following example which copies a blob.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(For an explanation of the <ph id="ph1">`queueTrigger`</ph> placeholder, see the <bpt id="p1">[</bpt>Blobs<ept id="p1">](#blobs)</ept> section.)</source>
          <target state="new">(For an explanation of the <ph id="ph1">`queueTrigger`</ph> placeholder, see the <bpt id="p1">[</bpt>Blobs<ept id="p1">](#blobs)</ept> section.)</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Types the QueueTrigger attribute works with</source>
          <target state="new">Types the QueueTrigger attribute works with</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`QueueTrigger`</ph> with the following types:</source>
          <target state="new">You can use <ph id="ph1">`QueueTrigger`</ph> with the following types:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A POCO type serialized as JSON</source>
          <target state="new">A POCO type serialized as JSON</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Polling algorithm</source>
          <target state="new">Polling algorithm</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The SDK implements a random exponential back-off algorithm to reduce the effect of idle-queue polling on storage transaction costs.</source>
          <target state="new">The SDK implements a random exponential back-off algorithm to reduce the effect of idle-queue polling on storage transaction costs.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When a message is found, the SDK waits two seconds and then checks for another message; when no message is found it waits about four seconds before trying again.</source>
          <target state="new">When a message is found, the SDK waits two seconds and then checks for another message; when no message is found it waits about four seconds before trying again.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After subsequent failed attempts to get a queue message, the wait time continues to increase until it reaches the maximum wait time, which defaults to one minute.</source>
          <target state="new">After subsequent failed attempts to get a queue message, the wait time continues to increase until it reaches the maximum wait time, which defaults to one minute.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The maximum wait time is configurable<ept id="p1">](#config)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>The maximum wait time is configurable<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Multiple instances</source>
          <target state="new">Multiple instances</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If your web app runs on multiple instances, a continuous WebJobs runs on each machine, and each machine will wait for triggers and attempt to run functions.</source>
          <target state="new">If your web app runs on multiple instances, a continuous WebJobs runs on each machine, and each machine will wait for triggers and attempt to run functions.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In some scenarios this can lead to some functions processing the same data twice, so functions should be idempotent (written so that calling them repeatedly with the same input data doesn't produce duplicate results).</source>
          <target state="new">In some scenarios this can lead to some functions processing the same data twice, so functions should be idempotent (written so that calling them repeatedly with the same input data doesn't produce duplicate results).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parallel execution</source>
          <target state="new">Parallel execution</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you have multiple functions listening on different queues, the SDK will call them in parallel when messages are received simultaneously.</source>
          <target state="new">If you have multiple functions listening on different queues, the SDK will call them in parallel when messages are received simultaneously.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The same is true when multiple messages are received for a single queue.</source>
          <target state="new">The same is true when multiple messages are received for a single queue.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By default, the SDK gets a batch of 16 queue messages at a time and executes the function that processes them in parallel.</source>
          <target state="new">By default, the SDK gets a batch of 16 queue messages at a time and executes the function that processes them in parallel.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The batch size is configurable<ept id="p1">](#config)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>The batch size is configurable<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the number being processed gets down to half of the batch size, the SDK gets another batch and starts processing those messages.</source>
          <target state="new">When the number being processed gets down to half of the batch size, the SDK gets another batch and starts processing those messages.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Therefore the maximum number of concurrent messages being processed per function is one and a half times the batch size.</source>
          <target state="new">Therefore the maximum number of concurrent messages being processed per function is one and a half times the batch size.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This limit applies separately to each function that has a <ph id="ph1">`QueueTrigger`</ph> attribute.</source>
          <target state="new">This limit applies separately to each function that has a <ph id="ph1">`QueueTrigger`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you don't want parallel execution for messages received on one queue, set the batch size to 1.</source>
          <target state="new">If you don't want parallel execution for messages received on one queue, set the batch size to 1.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Get queue or queue message metadata</source>
          <target state="new">Get queue or queue message metadata</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can get the following message properties by adding parameters to the method signature:</source>
          <target state="new">You can get the following message properties by adding parameters to the method signature:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateTimeOffset`</ph> expirationTime</source>
          <target state="new"><ph id="ph1">`DateTimeOffset`</ph> expirationTime</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateTimeOffset`</ph> insertionTime</source>
          <target state="new"><ph id="ph1">`DateTimeOffset`</ph> insertionTime</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DateTimeOffset`</ph> nextVisibleTime</source>
          <target state="new"><ph id="ph1">`DateTimeOffset`</ph> nextVisibleTime</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> queueTrigger (contains message text)</source>
          <target state="new"><ph id="ph1">`string`</ph> queueTrigger (contains message text)</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> id</source>
          <target state="new"><ph id="ph1">`string`</ph> id</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> popReceipt</source>
          <target state="new"><ph id="ph1">`string`</ph> popReceipt</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`int`</ph> dequeueCount</source>
          <target state="new"><ph id="ph1">`int`</ph> dequeueCount</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you want to work directly with the Azure storage API, you can also add a <ph id="ph1">`CloudStorageAccount`</ph> parameter.</source>
          <target state="new">If you want to work directly with the Azure storage API, you can also add a <ph id="ph1">`CloudStorageAccount`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following example writes all of this metadata to an INFO application log.</source>
          <target state="new">The following example writes all of this metadata to an INFO application log.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the example, both logMessage and queueTrigger contain the content of the queue message.</source>
          <target state="new">In the example, both logMessage and queueTrigger contain the content of the queue message.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Here is a sample log written by the sample code:</source>
          <target state="new">Here is a sample log written by the sample code:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Graceful shutdown</source>
          <target state="new">Graceful shutdown</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A function that runs in a continuous WebJob can accept a <ph id="ph1">`CancellationToken`</ph> parameter which enables the operating system to notify the function when the WebJob is about to be terminated.</source>
          <target state="new">A function that runs in a continuous WebJob can accept a <ph id="ph1">`CancellationToken`</ph> parameter which enables the operating system to notify the function when the WebJob is about to be terminated.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can use this notification to make sure the function doesn't terminate unexpectedly in a way that leaves data in an inconsistent state.</source>
          <target state="new">You can use this notification to make sure the function doesn't terminate unexpectedly in a way that leaves data in an inconsistent state.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example shows how to check for impending WebJob termination in a function.</source>
          <target state="new">The following example shows how to check for impending WebJob termination in a function.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The Dashboard might not correctly show the status and output of functions that have been shut down.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The Dashboard might not correctly show the status and output of functions that have been shut down.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>WebJobs Graceful Shutdown<ept id="p1">](http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown/#.VCt1GXl0wpR)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>WebJobs Graceful Shutdown<ept id="p1">](http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown/#.VCt1GXl0wpR)</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>How to create a queue message while processing a queue message</source>
          <target state="new">How to create a queue message while processing a queue message</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To write a function that creates a new queue message, use the <ph id="ph1">`Queue`</ph> attribute.</source>
          <target state="new">To write a function that creates a new queue message, use the <ph id="ph1">`Queue`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">`QueueTrigger`</ph>, you pass in the queue name as a string or you can <bpt id="p1">[</bpt>set the queue name dynamically<ept id="p1">](#config)</ept>.</source>
          <target state="new">Like <ph id="ph1">`QueueTrigger`</ph>, you pass in the queue name as a string or you can <bpt id="p1">[</bpt>set the queue name dynamically<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>String queue messages</source>
          <target state="new">String queue messages</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following non-async code sample creates a new queue message in the queue named "outputqueue" with the same content as the queue message received in the queue named "inputqueue".</source>
          <target state="new">The following non-async code sample creates a new queue message in the queue named "outputqueue" with the same content as the queue message received in the queue named "inputqueue".</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(For async functions use <ph id="ph1">`IAsyncCollector&lt;T&gt;`</ph> as shown later in this section.)</source>
          <target state="new">(For async functions use <ph id="ph1">`IAsyncCollector&lt;T&gt;`</ph> as shown later in this section.)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</source>
          <target state="new">POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To create a queue message that contains a POCO rather than a string, pass the POCO type as an output parameter to the <ph id="ph1">`Queue`</ph> attribute constructor.</source>
          <target state="new">To create a queue message that contains a POCO rather than a string, pass the POCO type as an output parameter to the <ph id="ph1">`Queue`</ph> attribute constructor.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The SDK automatically serializes the object to JSON.</source>
          <target state="new">The SDK automatically serializes the object to JSON.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A queue message is always created, even if the object is null.</source>
          <target state="new">A queue message is always created, even if the object is null.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Create multiple messages or in async functions</source>
          <target state="new">Create multiple messages or in async functions</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To create multiple messages, make the parameter type for the output queue <ph id="ph1">`ICollector&lt;T&gt;`</ph> or <ph id="ph2">`IAsyncCollector&lt;T&gt;`</ph>, as shown in the following example.</source>
          <target state="new">To create multiple messages, make the parameter type for the output queue <ph id="ph1">`ICollector&lt;T&gt;`</ph> or <ph id="ph2">`IAsyncCollector&lt;T&gt;`</ph>, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Each queue message is created immediately when the <ph id="ph1">`Add`</ph> method is called.</source>
          <target state="new">Each queue message is created immediately when the <ph id="ph1">`Add`</ph> method is called.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Types that the Queue attribute works with</source>
          <target state="new">Types that the Queue attribute works with</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Queue`</ph> attribute on the following parameter types:</source>
          <target state="new">You can use the <ph id="ph1">`Queue`</ph> attribute on the following parameter types:</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out string`</ph> (creates queue message if parameter value is non-null when the function ends)</source>
          <target state="new"><ph id="ph1">`out string`</ph> (creates queue message if parameter value is non-null when the function ends)</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out byte[]`</ph> (works like <ph id="ph2">`string`</ph>)</source>
          <target state="new"><ph id="ph1">`out byte[]`</ph> (works like <ph id="ph2">`string`</ph>)</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out CloudQueueMessage`</ph> (works like <ph id="ph2">`string`</ph>)</source>
          <target state="new"><ph id="ph1">`out CloudQueueMessage`</ph> (works like <ph id="ph2">`string`</ph>)</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out POCO`</ph> (a serializable type, creates a message with a null object if the paramter is null when the function ends)</source>
          <target state="new"><ph id="ph1">`out POCO`</ph> (a serializable type, creates a message with a null object if the paramter is null when the function ends)</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudQueue`</ph> (for creating messages manually using the Azure Storage API directly)</source>
          <target state="new"><ph id="ph1">`CloudQueue`</ph> (for creating messages manually using the Azure Storage API directly)</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use WebJobs SDK attributes in the body of a function</source>
          <target state="new">Use WebJobs SDK attributes in the body of a function</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you need to do some work in your function before using a WebJobs SDK attribute such as <ph id="ph1">`Queue`</ph>, <ph id="ph2">`Blob`</ph>, or <ph id="ph3">`Table`</ph>, you can use the <ph id="ph4">`IBinder`</ph> interface.</source>
          <target state="new">If you need to do some work in your function before using a WebJobs SDK attribute such as <ph id="ph1">`Queue`</ph>, <ph id="ph2">`Blob`</ph>, or <ph id="ph3">`Table`</ph>, you can use the <ph id="ph4">`IBinder`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following example takes an input queue message and creates a new message with the same content in an output queue.</source>
          <target state="new">The following example takes an input queue message and creates a new message with the same content in an output queue.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The output queue name is set by code in the body of the function.</source>
          <target state="new">The output queue name is set by code in the body of the function.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IBinder`</ph> interface can also be used with the <ph id="ph2">`Table`</ph> and <ph id="ph3">`Blob`</ph> attributes.</source>
          <target state="new">The <ph id="ph1">`IBinder`</ph> interface can also be used with the <ph id="ph2">`Table`</ph> and <ph id="ph3">`Blob`</ph> attributes.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>How to read and write blobs and tables while processing a queue message</source>
          <target state="new">How to read and write blobs and tables while processing a queue message</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Blob`</ph> and <ph id="ph2">`Table`</ph> attributes enable you to read and write blobs and tables.</source>
          <target state="new">The <ph id="ph1">`Blob`</ph> and <ph id="ph2">`Table`</ph> attributes enable you to read and write blobs and tables.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The samples in this section apply to blobs.</source>
          <target state="new">The samples in this section apply to blobs.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For code samples that show how to trigger processes when blobs are created or updated, see <bpt id="p1">[</bpt>How to use Azure blob storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-blobs-how-to.md)</ept>, and for code samples that read and write tables, see <bpt id="p2">[</bpt>How to use Azure table storage with the WebJobs SDK<ept id="p2">](websites-dotnet-webjobs-sdk-storage-tables-how-to.md)</ept>.</source>
          <target state="new">For code samples that show how to trigger processes when blobs are created or updated, see <bpt id="p1">[</bpt>How to use Azure blob storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-blobs-how-to.md)</ept>, and for code samples that read and write tables, see <bpt id="p2">[</bpt>How to use Azure table storage with the WebJobs SDK<ept id="p2">](websites-dotnet-webjobs-sdk-storage-tables-how-to.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>String queue messages triggering blob operations</source>
          <target state="new">String queue messages triggering blob operations</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For a queue message that contains a string, <ph id="ph1">`queueTrigger`</ph> is a placeholder you can use in the <ph id="ph2">`Blob`</ph> attribute's <ph id="ph3">`blobPath`</ph> parameter that contains the contents of the message.</source>
          <target state="new">For a queue message that contains a string, <ph id="ph1">`queueTrigger`</ph> is a placeholder you can use in the <ph id="ph2">`Blob`</ph> attribute's <ph id="ph3">`blobPath`</ph> parameter that contains the contents of the message.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`Stream`</ph> objects to read and write blobs.</source>
          <target state="new">The following example uses <ph id="ph1">`Stream`</ph> objects to read and write blobs.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The queue message is the name of a blob located in the textblobs container.</source>
          <target state="new">The queue message is the name of a blob located in the textblobs container.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A copy of the blob with "-new" appended to the name is created in the same container.</source>
          <target state="new">A copy of the blob with "-new" appended to the name is created in the same container.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Blob`</ph> attribute constructor takes a <ph id="ph2">`blobPath`</ph> parameter that specifies the container and blob name.</source>
          <target state="new">The <ph id="ph1">`Blob`</ph> attribute constructor takes a <ph id="ph2">`blobPath`</ph> parameter that specifies the container and blob name.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information about this placeholder, see <bpt id="p1">[</bpt>How to use Azure blob storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-blobs-how-to.md)</ept>,</source>
          <target state="new">For more information about this placeholder, see <bpt id="p1">[</bpt>How to use Azure blob storage with the WebJobs SDK<ept id="p1">](websites-dotnet-webjobs-sdk-storage-blobs-how-to.md)</ept>,</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the attribute decorates a <ph id="ph1">`Stream`</ph> object, another constructor parameter specifies the <ph id="ph2">`FileAccess`</ph> mode as read, write, or read/write.</source>
          <target state="new">When the attribute decorates a <ph id="ph1">`Stream`</ph> object, another constructor parameter specifies the <ph id="ph2">`FileAccess`</ph> mode as read, write, or read/write.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">`CloudBlockBlob`</ph> object to delete a blob.</source>
          <target state="new">The following example uses a <ph id="ph1">`CloudBlockBlob`</ph> object to delete a blob.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The queue message is the name of the blob.</source>
          <target state="new">The queue message is the name of the blob.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</source>
          <target state="new">POCO <bpt id="p1">[</bpt>(Plain Old CLR Object<ept id="p1">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) queue messages</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For a POCO stored as JSON in the queue message, you can use placeholders that name properties of the object in the <ph id="ph1">`Queue`</ph> attribute's <ph id="ph2">`blobPath`</ph> parameter.</source>
          <target state="new">For a POCO stored as JSON in the queue message, you can use placeholders that name properties of the object in the <ph id="ph1">`Queue`</ph> attribute's <ph id="ph2">`blobPath`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You can also use <bpt id="p1">[</bpt>queue metadata property names<ept id="p1">](#queuemetadata)</ept> as placeholders.</source>
          <target state="new">You can also use <bpt id="p1">[</bpt>queue metadata property names<ept id="p1">](#queuemetadata)</ept> as placeholders.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example copies a blob to a new blob with a different extension.</source>
          <target state="new">The following example copies a blob to a new blob with a different extension.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The queue message is a <ph id="ph1">`BlobInformation`</ph> object that includes <ph id="ph2">`BlobName`</ph> and <ph id="ph3">`BlobNameWithoutExtension`</ph> properties.</source>
          <target state="new">The queue message is a <ph id="ph1">`BlobInformation`</ph> object that includes <ph id="ph2">`BlobName`</ph> and <ph id="ph3">`BlobNameWithoutExtension`</ph> properties.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The property names are used as placeholders in the blob path for the <ph id="ph1">`Blob`</ph> attributes.</source>
          <target state="new">The property names are used as placeholders in the blob path for the <ph id="ph1">`Blob`</ph> attributes.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The SDK uses the <bpt id="p1">[</bpt>Newtonsoft.Json NuGet package<ept id="p1">](http://www.nuget.org/packages/Newtonsoft.Json)</ept> to serialize and deserialize messages.</source>
          <target state="new">The SDK uses the <bpt id="p1">[</bpt>Newtonsoft.Json NuGet package<ept id="p1">](http://www.nuget.org/packages/Newtonsoft.Json)</ept> to serialize and deserialize messages.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If you create queue messages in a program that doesn't use the WebJobs SDK, you can write code like the following example to create a POCO queue message that the SDK can parse.</source>
          <target state="new">If you create queue messages in a program that doesn't use the WebJobs SDK, you can write code like the following example to create a POCO queue message that the SDK can parse.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you need to do some work in your function before binding a blob to an object, you can use the attribute in the body of the function, <bpt id="p1">[</bpt>as shown earlier for the Queue attribute<ept id="p1">](#ibinder)</ept>.</source>
          <target state="new">If you need to do some work in your function before binding a blob to an object, you can use the attribute in the body of the function, <bpt id="p1">[</bpt>as shown earlier for the Queue attribute<ept id="p1">](#ibinder)</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Types you can use the Blob attribute with</source>
          <target state="new">Types you can use the Blob attribute with</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Blob`</ph> attribute can be used with the following types:</source>
          <target state="new">The <ph id="ph1">`Blob`</ph> attribute can be used with the following types:</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Stream`</ph> (read or write, specified by using the FileAccess constructor parameter)</source>
          <target state="new"><ph id="ph1">`Stream`</ph> (read or write, specified by using the FileAccess constructor parameter)</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`string`</ph> (read)</source>
          <target state="new"><ph id="ph1">`string`</ph> (read)</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out string`</ph> (write; creates a blob only if the string parameter is non-null when the function returns)</source>
          <target state="new"><ph id="ph1">`out string`</ph> (write; creates a blob only if the string parameter is non-null when the function returns)</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>POCO (read)</source>
          <target state="new">POCO (read)</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>out POCO (write; always creates a blob, creates as null object if POCO parameter is null when the function returns)</source>
          <target state="new">out POCO (write; always creates a blob, creates as null object if POCO parameter is null when the function returns)</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudBlobStream`</ph> (write)</source>
          <target state="new"><ph id="ph1">`CloudBlobStream`</ph> (write)</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ICloudBlob`</ph> (read or write)</source>
          <target state="new"><ph id="ph1">`ICloudBlob`</ph> (read or write)</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudBlockBlob`</ph> (read or write)</source>
          <target state="new"><ph id="ph1">`CloudBlockBlob`</ph> (read or write)</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudPageBlob`</ph> (read or write)</source>
          <target state="new"><ph id="ph1">`CloudPageBlob`</ph> (read or write)</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>How to handle poison messages</source>
          <target state="new">How to handle poison messages</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Messages whose content causes a function to fail are called <bpt id="p1">*</bpt>poison messages<ept id="p1">*</ept>.</source>
          <target state="new">Messages whose content causes a function to fail are called <bpt id="p1">*</bpt>poison messages<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When the function fails, the queue message is not deleted and eventually is picked up again, causing the cycle to be repeated.</source>
          <target state="new">When the function fails, the queue message is not deleted and eventually is picked up again, causing the cycle to be repeated.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The SDK can automatically interrupt the cycle after a limited number of iterations, or you can do it manually.</source>
          <target state="new">The SDK can automatically interrupt the cycle after a limited number of iterations, or you can do it manually.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Automatic poison message handling</source>
          <target state="new">Automatic poison message handling</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The SDK will call a function up to 5 times to process a queue message.</source>
          <target state="new">The SDK will call a function up to 5 times to process a queue message.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the fifth try fails, the message is moved to a poison queue.</source>
          <target state="new">If the fifth try fails, the message is moved to a poison queue.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The maximum number of retries is configurable<ept id="p1">](#config)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>The maximum number of retries is configurable<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The poison queue is named <bpt id="p1">*</bpt>{originalqueuename}<ept id="p1">*</ept>-poison.</source>
          <target state="new">The poison queue is named <bpt id="p1">*</bpt>{originalqueuename}<ept id="p1">*</ept>-poison.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can write a function to process messages from the poison queue by logging them or sending a notification that manual attention is needed.</source>
          <target state="new">You can write a function to process messages from the poison queue by logging them or sending a notification that manual attention is needed.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>In the following example the <ph id="ph1">`CopyBlob`</ph> function will fail when a queue message contains the name of a blob that doesn't exist.</source>
          <target state="new">In the following example the <ph id="ph1">`CopyBlob`</ph> function will fail when a queue message contains the name of a blob that doesn't exist.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>When that happens, the message is moved from the copyblobqueue queue to the copyblobqueue-poison queue.</source>
          <target state="new">When that happens, the message is moved from the copyblobqueue queue to the copyblobqueue-poison queue.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProcessPoisonMessage`</ph> then logs the poison message.</source>
          <target state="new">The <ph id="ph1">`ProcessPoisonMessage`</ph> then logs the poison message.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The following illustration shows console output from these functions when a poison message is processed.</source>
          <target state="new">The following illustration shows console output from these functions when a poison message is processed.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Console output for poison message handling</source>
          <target state="new">Console output for poison message handling</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Manual poison message handling</source>
          <target state="new">Manual poison message handling</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can get the number of times a message has been picked up for processing by adding an <ph id="ph1">`int`</ph> parameter named <ph id="ph2">`dequeueCount`</ph> to your function.</source>
          <target state="new">You can get the number of times a message has been picked up for processing by adding an <ph id="ph1">`int`</ph> parameter named <ph id="ph2">`dequeueCount`</ph> to your function.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can then check the dequeue count in function code and perform your own poison message handling when the number exceeds a threshold, as shown in the following example.</source>
          <target state="new">You can then check the dequeue count in function code and perform your own poison message handling when the number exceeds a threshold, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>How to set configuration options</source>
          <target state="new">How to set configuration options</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`JobHostConfiguration`</ph> type to set the following configuration options:</source>
          <target state="new">You can use the <ph id="ph1">`JobHostConfiguration`</ph> type to set the following configuration options:</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Set the SDK connection strings in code.</source>
          <target state="new">Set the SDK connection strings in code.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Configure <ph id="ph1">`QueueTrigger`</ph> settings such as maximum dequeue count.</source>
          <target state="new">Configure <ph id="ph1">`QueueTrigger`</ph> settings such as maximum dequeue count.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Get queue names from configuration.</source>
          <target state="new">Get queue names from configuration.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Set SDK connection strings in code</source>
          <target state="new">Set SDK connection strings in code</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Setting the SDK connection strings in code enables you to use your own connection string names in configuration files or environment variables, as shown in the following example.</source>
          <target state="new">Setting the SDK connection strings in code enables you to use your own connection string names in configuration files or environment variables, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Configure QueueTrigger  settings</source>
          <target state="new">Configure QueueTrigger  settings</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You can configure the following settings that apply to the queue message processing:</source>
          <target state="new">You can configure the following settings that apply to the queue message processing:</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The maximum number of queue messages that are picked up simultaneously to be executed in parallel (default is 16).</source>
          <target state="new">The maximum number of queue messages that are picked up simultaneously to be executed in parallel (default is 16).</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The maximum number of retries before a queue message is sent to a poison queue (default is 5).</source>
          <target state="new">The maximum number of retries before a queue message is sent to a poison queue (default is 5).</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The maximum wait time before polling again when a queue is empty (default is 1 minute).</source>
          <target state="new">The maximum wait time before polling again when a queue is empty (default is 1 minute).</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The following example shows how to configure these settings:</source>
          <target state="new">The following example shows how to configure these settings:</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Set values for WebJobs SDK constructor parameters in code</source>
          <target state="new">Set values for WebJobs SDK constructor parameters in code</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Sometimes you want to specify a queue name, a blob name or container, or a table name in code rather than hard-code it.</source>
          <target state="new">Sometimes you want to specify a queue name, a blob name or container, or a table name in code rather than hard-code it.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For example, you might want to specify the queue name for <ph id="ph1">`QueueTrigger`</ph> in a configuration file or environment variable.</source>
          <target state="new">For example, you might want to specify the queue name for <ph id="ph1">`QueueTrigger`</ph> in a configuration file or environment variable.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>You can do that by passing in a <ph id="ph1">`NameResolver`</ph> object to the <ph id="ph2">`JobHostConfiguration`</ph> type.</source>
          <target state="new">You can do that by passing in a <ph id="ph1">`NameResolver`</ph> object to the <ph id="ph2">`JobHostConfiguration`</ph> type.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You include special placeholders surrounded by percent (%) signs in WebJobs SDK attribute constructor parameters, and your <ph id="ph1">`NameResolver`</ph> code specifies the actual values to be used in place of those placeholders.</source>
          <target state="new">You include special placeholders surrounded by percent (%) signs in WebJobs SDK attribute constructor parameters, and your <ph id="ph1">`NameResolver`</ph> code specifies the actual values to be used in place of those placeholders.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to use a queue named logqueuetest in the test environment and one named logqueueprod in production.</source>
          <target state="new">For example, suppose you want to use a queue named logqueuetest in the test environment and one named logqueueprod in production.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Instead of a hard-coded queue name, you want to specify the name of an entry in the <ph id="ph1">`appSettings`</ph> collection that would have the actual queue name.</source>
          <target state="new">Instead of a hard-coded queue name, you want to specify the name of an entry in the <ph id="ph1">`appSettings`</ph> collection that would have the actual queue name.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`appSettings`</ph> key is logqueue, your function could look like the following example.</source>
          <target state="new">If the <ph id="ph1">`appSettings`</ph> key is logqueue, your function could look like the following example.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`NameResolver`</ph> class could then get the queue name from <ph id="ph2">`appSettings`</ph> as shown in the following example:</source>
          <target state="new">Your <ph id="ph1">`NameResolver`</ph> class could then get the queue name from <ph id="ph2">`appSettings`</ph> as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>You pass the <ph id="ph1">`NameResolver`</ph> class in to the <ph id="ph2">`JobHost`</ph> object as shown in the following example.</source>
          <target state="new">You pass the <ph id="ph1">`NameResolver`</ph> class in to the <ph id="ph2">`JobHost`</ph> object as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Queue, table, and blob names are resolved each time a function is called, but blob container names are resolved only when the application starts.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Queue, table, and blob names are resolved each time a function is called, but blob container names are resolved only when the application starts.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can't change blob container name while the job is running.</source>
          <target state="new">You can't change blob container name while the job is running.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>How to trigger a function manually</source>
          <target state="new">How to trigger a function manually</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>To trigger a function manually, use the <ph id="ph1">`Call`</ph> or <ph id="ph2">`CallAsync`</ph> method on the <ph id="ph3">`JobHost`</ph> object and the <ph id="ph4">`NoAutomaticTrigger`</ph> attribute on the function, as shown in the following example.</source>
          <target state="new">To trigger a function manually, use the <ph id="ph1">`Call`</ph> or <ph id="ph2">`CallAsync`</ph> method on the <ph id="ph3">`JobHost`</ph> object and the <ph id="ph4">`NoAutomaticTrigger`</ph> attribute on the function, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>How to write logs</source>
          <target state="new">How to write logs</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The Dashboard shows logs in two places: the page for the WebJob, and the page for a particular WebJob invocation.</source>
          <target state="new">The Dashboard shows logs in two places: the page for the WebJob, and the page for a particular WebJob invocation.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Logs in WebJob page</source>
          <target state="new">Logs in WebJob page</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Logs in function invocation page</source>
          <target state="new">Logs in function invocation page</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Output from Console methods that you call in a function or in the <ph id="ph1">`Main()`</ph> method appears in the Dashboard page for the WebJob, not in the page for a particular method invocation.</source>
          <target state="new">Output from Console methods that you call in a function or in the <ph id="ph1">`Main()`</ph> method appears in the Dashboard page for the WebJob, not in the page for a particular method invocation.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Output from the TextWriter object that you get from a parameter in your method signature appears in the Dashboard page for a method invocation.</source>
          <target state="new">Output from the TextWriter object that you get from a parameter in your method signature appears in the Dashboard page for a method invocation.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Console output can't be linked to a particular method invocation because the Console is single-threaded, while many job functions may be running at the same time.</source>
          <target state="new">Console output can't be linked to a particular method invocation because the Console is single-threaded, while many job functions may be running at the same time.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>That's why the  SDK provides each function invocation with its own unique log writer object.</source>
          <target state="new">That's why the  SDK provides each function invocation with its own unique log writer object.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To write <bpt id="p1">[</bpt>application tracing logs<ept id="p1">](web-sites-dotnet-troubleshoot-visual-studio.md#logsoverview)</ept>, use <ph id="ph1">`Console.Out`</ph> (creates logs marked as INFO) and <ph id="ph2">`Console.Error`</ph> (creates logs marked as ERROR).</source>
          <target state="new">To write <bpt id="p1">[</bpt>application tracing logs<ept id="p1">](web-sites-dotnet-troubleshoot-visual-studio.md#logsoverview)</ept>, use <ph id="ph1">`Console.Out`</ph> (creates logs marked as INFO) and <ph id="ph2">`Console.Error`</ph> (creates logs marked as ERROR).</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An alternative is to use <bpt id="p1">[</bpt>Trace or TraceSource<ept id="p1">](http://blogs.msdn.com/b/mcsuksoldev/archive/2014/09/04/adding-trace-to-azure-web-sites-and-web-jobs.aspx)</ept>, which provides Verbose, Warning, and Critical levels in addition to Info and Error.</source>
          <target state="new">An alternative is to use <bpt id="p1">[</bpt>Trace or TraceSource<ept id="p1">](http://blogs.msdn.com/b/mcsuksoldev/archive/2014/09/04/adding-trace-to-azure-web-sites-and-web-jobs.aspx)</ept>, which provides Verbose, Warning, and Critical levels in addition to Info and Error.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Application tracing logs appear in the web app log files, Azure tables, or Azure blobs depending on how you configure your Azure web app.</source>
          <target state="new">Application tracing logs appear in the web app log files, Azure tables, or Azure blobs depending on how you configure your Azure web app.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>As is true of all Console output, the most recent 100 application logs also appear in the Dashboard page for the WebJob, not the page for a function invocation.</source>
          <target state="new">As is true of all Console output, the most recent 100 application logs also appear in the Dashboard page for the WebJob, not the page for a function invocation.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Console output appears in the Dashboard only if the program is running in an Azure WebJob, not if the program is running locally or in some other environment.</source>
          <target state="new">Console output appears in the Dashboard only if the program is running in an Azure WebJob, not if the program is running locally or in some other environment.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>You can disable logging by <bpt id="p1">[</bpt>setting the Dashboard connection string to null<ept id="p1">](#config)</ept>.</source>
          <target state="new">You can disable logging by <bpt id="p1">[</bpt>setting the Dashboard connection string to null<ept id="p1">](#config)</ept>.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The following example shows several ways to write logs:</source>
          <target state="new">The following example shows several ways to write logs:</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>In the WebJobs SDK Dashboard, the output from the <ph id="ph1">`TextWriter`</ph> object shows up when you go to the page for a particular function invocation and click <bpt id="p1">**</bpt>Toggle Output<ept id="p1">**</ept>:</source>
          <target state="new">In the WebJobs SDK Dashboard, the output from the <ph id="ph1">`TextWriter`</ph> object shows up when you go to the page for a particular function invocation and click <bpt id="p1">**</bpt>Toggle Output<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Click function invocation link</source>
          <target state="new">Click function invocation link</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Logs in function invocation page</source>
          <target state="new">Logs in function invocation page</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In the WebJobs SDK Dashboard, the most recent 100 lines of Console output show up when you go to the page for the WebJob (not for the function invocation) and click <bpt id="p1">**</bpt>Toggle Output<ept id="p1">**</ept>.</source>
          <target state="new">In the WebJobs SDK Dashboard, the most recent 100 lines of Console output show up when you go to the page for the WebJob (not for the function invocation) and click <bpt id="p1">**</bpt>Toggle Output<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Click Toggle Output</source>
          <target state="new">Click Toggle Output</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In a continuous WebJob, application logs show up in /data/jobs/continuous/<bpt id="p1">*</bpt>{webjobname}<ept id="p1">*</ept>/job_log.txt in the web app file system.</source>
          <target state="new">In a continuous WebJob, application logs show up in /data/jobs/continuous/<bpt id="p1">*</bpt>{webjobname}<ept id="p1">*</ept>/job_log.txt in the web app file system.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In an Azure blob the application logs look like this:</source>
          <target state="new">In an Azure blob the application logs look like this:</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738373502,0,17404,17,Console.Write - Hello world!,</source>
          <target state="new">2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738373502,0,17404,17,Console.Write - Hello world!,</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>2014-09-26T21:01:13,Error,contosoadsnew,491e54,635473620738373502,0,17404,19,Console.Error - Hello world!,</source>
          <target state="new">2014-09-26T21:01:13,Error,contosoadsnew,491e54,635473620738373502,0,17404,19,Console.Error - Hello world!,</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738529920,0,17404,17,Console.Out - Hello world!,</source>
          <target state="new">2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738529920,0,17404,17,Console.Out - Hello world!,</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>And in an Azure table the <ph id="ph1">`Console.Out`</ph> and <ph id="ph2">`Console.Error`</ph> logs look like this:</source>
          <target state="new">And in an Azure table the <ph id="ph1">`Console.Out`</ph> and <ph id="ph2">`Console.Error`</ph> logs look like this:</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Info log in table</source>
          <target state="new">Info log in table</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Error log in table</source>
          <target state="new">Error log in table</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>This article has provided code samples that show how to handle common scenarios for working with Azure queues.</source>
          <target state="new">This article has provided code samples that show how to handle common scenarios for working with Azure queues.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</source>
          <target state="new">For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id="p1">[</bpt>Azure WebJobs Recommended Resources<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b0be9f3f2d976f46e42ab9f2a2b76fab8e3b851</xliffext:olfilehash>
  </header>
</xliff>