<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Service Bus topics (.NET) | Microsoft Azure</source>
          <target state="new">How to use Service Bus topics (.NET) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Service Bus topics and subscriptions in Azure.</source>
          <target state="new">Learn how to use Service Bus topics and subscriptions in Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples are written for .NET applications.</source>
          <target state="new">Code samples are written for .NET applications.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use Azure Service Bus topics and subscriptions</source>
          <target state="new">How to use Azure Service Bus topics and subscriptions</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article describes how to use Service Bus topics and subscriptions.</source>
          <target state="new">This article describes how to use Service Bus topics and subscriptions.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The samples are written in C# and use the .NET APIs.</source>
          <target state="new">The samples are written in C# and use the .NET APIs.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The scenarios covered include creating topics and subscriptions, creating subscription filters, sending messages to a topic, receiving messages from a subscription, and deleting topics and subscriptions.</source>
          <target state="new">The scenarios covered include creating topics and subscriptions, creating subscription filters, sending messages to a topic, receiving messages from a subscription, and deleting topics and subscriptions.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about topics and subscriptions, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#Next-steps)</ept> section.</source>
          <target state="new">For more information about topics and subscriptions, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#Next-steps)</ept> section.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Configure the application to use Service Bus</source>
          <target state="new">Configure the application to use Service Bus</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.</source>
          <target state="new">When you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Get the Service Bus NuGet package</source>
          <target state="new">Get the Service Bus NuGet package</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies.</source>
          <target state="new">The Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express.</source>
          <target state="new">The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Service Bus NuGet package is the easiest way</source>
          <target state="new">The Service Bus NuGet package is the easiest way</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>to get the Service Bus API and to configure your application with all of the Service Bus dependencies.</source>
          <target state="new">to get the Service Bus API and to configure your application with all of the Service Bus dependencies.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To install the NuGet package in your application, do the following:</source>
          <target state="new">To install the NuGet package in your application, do the following:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click <bpt id="p1">**</bpt>References<ept id="p1">**</ept>, then click</source>
          <target state="new">In Solution Explorer, right-click <bpt id="p1">**</bpt>References<ept id="p1">**</ept>, then click</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Search for "Service Bus" and select the <bpt id="p1">**</bpt>Microsoft Azure
Service Bus<ept id="p1">**</ept> item.</source>
          <target state="new">Search for "Service Bus" and select the <bpt id="p1">**</bpt>Microsoft Azure
Service Bus<ept id="p1">**</ept> item.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept> to complete the installation,</source>
          <target state="new">Click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept> to complete the installation,</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>then close the following dialog box.</source>
          <target state="new">then close the following dialog box.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You are now ready to write code for Service Bus.</source>
          <target state="new">You are now ready to write code for Service Bus.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>How to set up a Service Bus connection string</source>
          <target state="new">How to set up a Service Bus connection string</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Service Bus uses a connection string to store endpoints and credentials.</source>
          <target state="new">Service Bus uses a connection string to store endpoints and credentials.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can put your connection string in a configuration file, rather than hard-coding it:</source>
          <target state="new">You can put your connection string in a configuration file, rather than hard-coding it:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).</source>
          <target state="new">When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).</source>
          <target state="new">When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In both cases, you can retrieve your connection string using the <ph id="ph1">`CloudConfigurationManager.GetSetting`</ph> method, as shown later in this article.</source>
          <target state="new">In both cases, you can retrieve your connection string using the <ph id="ph1">`CloudConfigurationManager.GetSetting`</ph> method, as shown later in this article.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Configuring your connection string when using Cloud Services</source>
          <target state="new">Configuring your connection string when using Cloud Services</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application.</source>
          <target state="new">The service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, add a <ph id="ph1">`Setting`</ph> label to your service definition (*<bpt id="p1">**</bpt>.csdef<ept id="p1">**</ept>) file, as shown in the next example.</source>
          <target state="new">For example, add a <ph id="ph1">`Setting`</ph> label to your service definition (*<bpt id="p1">**</bpt>.csdef<ept id="p1">**</ept>) file, as shown in the next example.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You then specify values in the service configuration (.cscfg) file.</source>
          <target state="new">You then specify values in the service configuration (.cscfg) file.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as</source>
          <target state="new">Use the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>described in the previous section.</source>
          <target state="new">described in the previous section.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Configuring your connection string when using Azure websites or Azure Virtual Machines</source>
          <target state="new">Configuring your connection string when using Azure websites or Azure Virtual Machines</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When using websites or Virtual Machines, it is recommended you use the .NET configuration system (for example, Web.config).</source>
          <target state="new">When using websites or Virtual Machines, it is recommended you use the .NET configuration system (for example, Web.config).</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You store the connection string using the <ph id="ph1">`&lt;appSettings&gt;`</ph> element.</source>
          <target state="new">You store the connection string using the <ph id="ph1">`&lt;appSettings&gt;`</ph> element.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.</source>
          <target state="new">Use the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How to create a topic</source>
          <target state="new">How to create a topic</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can perform management operations for Service Bus topics and subscriptions using the <bpt id="p1">[</bpt><ph id="ph1">`NamespaceManager`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.</source>
          <target state="new">You can perform management operations for Service Bus topics and subscriptions using the <bpt id="p1">[</bpt><ph id="ph1">`NamespaceManager`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This class provides methods to create, enumerate, and delete topics.</source>
          <target state="new">This class provides methods to create, enumerate, and delete topics.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example constructs a <ph id="ph1">`NamespaceManager`</ph> object using the Azure <ph id="ph2">`CloudConfigurationManager`</ph> class</source>
          <target state="new">The following example constructs a <ph id="ph1">`NamespaceManager`</ph> object using the Azure <ph id="ph2">`CloudConfigurationManager`</ph> class</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>with a connection string consisting of the base address of a Service Bus service namespace and the appropriate</source>
          <target state="new">with a connection string consisting of the base address of a Service Bus service namespace and the appropriate</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>SAS credentials with permissions to manage it.</source>
          <target state="new">SAS credentials with permissions to manage it.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This connection string is of the following form.</source>
          <target state="new">This connection string is of the following form.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use the following example, given the configuration settings in the previous section.</source>
          <target state="new">Use the following example, given the configuration settings in the previous section.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are overloads of the <bpt id="p1">[</bpt><ph id="ph1">`CreateTopic`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.createtopic.aspx)</ept> method that enable you to tune properties of the topic, for example, to set the default "time-to-live" value to be applied to messages sent to the topic.</source>
          <target state="new">There are overloads of the <bpt id="p1">[</bpt><ph id="ph1">`CreateTopic`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.createtopic.aspx)</ept> method that enable you to tune properties of the topic, for example, to set the default "time-to-live" value to be applied to messages sent to the topic.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These settings are applied by using the <bpt id="p1">[</bpt><ph id="ph1">`TopicDescription`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicdescription.aspx)</ept> class.</source>
          <target state="new">These settings are applied by using the <bpt id="p1">[</bpt><ph id="ph1">`TopicDescription`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicdescription.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a topic named TestTopic with a maximum size of 5 GB and a default message time-to-live of 1 minute.</source>
          <target state="new">The following example shows how to create a topic named TestTopic with a maximum size of 5 GB and a default message time-to-live of 1 minute.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You can use the <bpt id="p1">[</bpt><ph id="ph2">`TopicExists`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.topicexists.aspx)</ept> method on <bpt id="p2">[</bpt><ph id="ph3">`NamespaceManager`</ph><ept id="p2">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> objects to check whether a topic with a specified name already exists within a service namespace.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You can use the <bpt id="p1">[</bpt><ph id="ph2">`TopicExists`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.topicexists.aspx)</ept> method on <bpt id="p2">[</bpt><ph id="ph3">`NamespaceManager`</ph><ept id="p2">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> objects to check whether a topic with a specified name already exists within a service namespace.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>How to create a subscription</source>
          <target state="new">How to create a subscription</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also create topic subscriptions using the <bpt id="p1">[</bpt><ph id="ph1">`NamespaceManager`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.</source>
          <target state="new">You can also create topic subscriptions using the <bpt id="p1">[</bpt><ph id="ph1">`NamespaceManager`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Subscriptions are named and can have an optional filter that</source>
          <target state="new">Subscriptions are named and can have an optional filter that</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>restricts the set of messages passed to the subscription's virtual</source>
          <target state="new">restricts the set of messages passed to the subscription's virtual</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>queue.</source>
          <target state="new">queue.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Create a subscription with the default (MatchAll) filter</source>
          <target state="new">Create a subscription with the default (MatchAll) filter</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.</source>
          <target state="new">The <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter, all messages published to the topic are placed in the subscription's virtual queue.</source>
          <target state="new">When you use the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter, all messages published to the topic are placed in the subscription's virtual queue.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example creates a subscription named "AllMessages" and uses the default <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter.</source>
          <target state="new">The following example creates a subscription named "AllMessages" and uses the default <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Create subscriptions with filters</source>
          <target state="new">Create subscriptions with filters</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can also set up filters that enable you to specify which messages sent to a topic should appear within a specific topic subscription.</source>
          <target state="new">You can also set up filters that enable you to specify which messages sent to a topic should appear within a specific topic subscription.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The most flexible type of filter supported by subscriptions is the <bpt id="p1">[</bpt><ept id="p1">SqlFilter]</ept> class, which implements a subset of SQL92.</source>
          <target state="new">The most flexible type of filter supported by subscriptions is the <bpt id="p1">[</bpt><ept id="p1">SqlFilter]</ept> class, which implements a subset of SQL92.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>SQL filters operate on the properties of the messages that are published to the topic.</source>
          <target state="new">SQL filters operate on the properties of the messages that are published to the topic.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information about the expressions that can be used with a SQL filter, see the <bpt id="p1">[</bpt>SqlFilter.SqlExpression<ept id="p1">][]</ept> syntax.</source>
          <target state="new">For more information about the expressions that can be used with a SQL filter, see the <bpt id="p1">[</bpt>SqlFilter.SqlExpression<ept id="p1">][]</ept> syntax.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example creates a subscription named <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><ept id="p2">SqlFilter]</ept> object that only selects messages that have a custom <bpt id="p3">**</bpt>MessageNumber<ept id="p3">**</ept> property greater than 3.</source>
          <target state="new">The following example creates a subscription named <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><ept id="p2">SqlFilter]</ept> object that only selects messages that have a custom <bpt id="p3">**</bpt>MessageNumber<ept id="p3">**</ept> property greater than 3.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Similarly, the following example creates a subscription named <bpt id="p1">**</bpt>LowMessages<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><ept id="p2">SqlFilter]</ept> that only selects messages that have a <bpt id="p3">**</bpt>MessageNumber<ept id="p3">**</ept> property less than or equal to 3.</source>
          <target state="new">Similarly, the following example creates a subscription named <bpt id="p1">**</bpt>LowMessages<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><ept id="p2">SqlFilter]</ept> that only selects messages that have a <bpt id="p3">**</bpt>MessageNumber<ept id="p3">**</ept> property less than or equal to 3.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Now when a message is sent to <ph id="ph1">`TestTopic`</ph>, it is always delivered to receivers subscribed to the <bpt id="p1">**</bpt>AllMessages<ept id="p1">**</ept> topic subscription, and selectively delivered to receivers subscribed to the <bpt id="p2">**</bpt>HighMessages<ept id="p2">**</ept> and <bpt id="p3">**</bpt>LowMessages<ept id="p3">**</ept> topic subscriptions (depending on the message content).</source>
          <target state="new">Now when a message is sent to <ph id="ph1">`TestTopic`</ph>, it is always delivered to receivers subscribed to the <bpt id="p1">**</bpt>AllMessages<ept id="p1">**</ept> topic subscription, and selectively delivered to receivers subscribed to the <bpt id="p2">**</bpt>HighMessages<ept id="p2">**</ept> and <bpt id="p3">**</bpt>LowMessages<ept id="p3">**</ept> topic subscriptions (depending on the message content).</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>How to send messages to a topic</source>
          <target state="new">How to send messages to a topic</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To send a message to a Service Bus topic, your application creates a <bpt id="p1">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object using the connection string.</source>
          <target state="new">To send a message to a Service Bus topic, your application creates a <bpt id="p1">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object using the connection string.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to create a <bpt id="p1">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.aspx)</ept> object for the <bpt id="p2">**</bpt>TestTopic<ept id="p2">**</ept> topic created earlier using the <bpt id="p3">[</bpt><ph id="ph2">`CreateFromConnectionString`</ph><ept id="p3">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx)</ept> API call.</source>
          <target state="new">The following code demonstrates how to create a <bpt id="p1">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.aspx)</ept> object for the <bpt id="p2">**</bpt>TestTopic<ept id="p2">**</ept> topic created earlier using the <bpt id="p3">[</bpt><ph id="ph2">`CreateFromConnectionString`</ph><ept id="p3">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx)</ept> API call.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Messages sent to Service Bus topics are instances of the <bpt id="p1">[</bpt><ph id="ph1">`BrokeredMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> class.</source>
          <target state="new">Messages sent to Service Bus topics are instances of the <bpt id="p1">[</bpt><ph id="ph1">`BrokeredMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects have a set of</source>
          <target state="new"><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects have a set of</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>standard properties (such as <bpt id="p1">[</bpt><ph id="ph1">`Label`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`TimeToLive`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>), a dictionary that is used to hold custom application-specific properties, and a body of arbitrary application data.</source>
          <target state="new">standard properties (such as <bpt id="p1">[</bpt><ph id="ph1">`Label`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`TimeToLive`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>), a dictionary that is used to hold custom application-specific properties, and a body of arbitrary application data.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An application can set the body of the</source>
          <target state="new">An application can set the body of the</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>message by passing any serializable object to the constructor of the <bpt id="p1">[</bpt><ph id="ph1">`BrokeredMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> object, and the appropriate <bpt id="p2">**</bpt>DataContractSerializer<ept id="p2">**</ept> is then used to serialize the object.</source>
          <target state="new">message by passing any serializable object to the constructor of the <bpt id="p1">[</bpt><ph id="ph1">`BrokeredMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> object, and the appropriate <bpt id="p2">**</bpt>DataContractSerializer<ept id="p2">**</ept> is then used to serialize the object.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Alternatively, a <bpt id="p1">**</bpt>System.IO.Stream<ept id="p1">**</ept> can be provided.</source>
          <target state="new">Alternatively, a <bpt id="p1">**</bpt>System.IO.Stream<ept id="p1">**</ept> can be provided.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send five test messages to the <bpt id="p1">**</bpt>TestTopic<ept id="p1">**</ept> <bpt id="p2">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object obtained in the previous code example.</source>
          <target state="new">The following example demonstrates how to send five test messages to the <bpt id="p1">**</bpt>TestTopic<ept id="p1">**</ept> <bpt id="p2">[</bpt><ph id="ph1">`TopicClient`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object obtained in the previous code example.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">[</bpt><ph id="ph1">`MessageNumber`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx)</ept> property value of each message varies depending on the iteration of the loop (this determines which subscriptions receive it).</source>
          <target state="new">Note that the <bpt id="p1">[</bpt><ph id="ph1">`MessageNumber`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx)</ept> property value of each message varies depending on the iteration of the loop (this determines which subscriptions receive it).</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Service Bus topics support a <bpt id="p1">[</bpt>maximum message size of 256 KB<ept id="p1">](service-bus-quotas.md)</ept> (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</source>
          <target state="new">Service Bus topics support a <bpt id="p1">[</bpt>maximum message size of 256 KB<ept id="p1">](service-bus-quotas.md)</ept> (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.</source>
          <target state="new">There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This topic size is defined at creation time, with an upper limit of 5 GB.</source>
          <target state="new">This topic size is defined at creation time, with an upper limit of 5 GB.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If partitioning is enabled, the upper limit is higher.</source>
          <target state="new">If partitioning is enabled, the upper limit is higher.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Partitioning Messaging Entities<ept id="p1">](https://msdn.microsoft.com/library/azure/dn520246.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Partitioning Messaging Entities<ept id="p1">](https://msdn.microsoft.com/library/azure/dn520246.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>How to receive messages from a subscription</source>
          <target state="new">How to receive messages from a subscription</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The recommended way to receive messages from a subscription is to use a <bpt id="p1">[</bpt><ph id="ph1">`SubscriptionClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx)</ept> object.</source>
          <target state="new">The recommended way to receive messages from a subscription is to use a <bpt id="p1">[</bpt><ph id="ph1">`SubscriptionClient`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx)</ept> object.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SubscriptionClient<ept id="p1">**</ept> objects can work in two different modes: <bpt id="p2">[</bpt><ph id="ph1">`ReceiveAndDelete`</ph> and <ph id="ph2">`PeekLock`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>SubscriptionClient<ept id="p1">**</ept> objects can work in two different modes: <bpt id="p2">[</bpt><ph id="ph1">`ReceiveAndDelete`</ph> and <ph id="ph2">`PeekLock`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application.</source>
          <target state="new">When using the <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</source>
          <target state="new"><bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
          <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Because Service Bus will have marked</source>
          <target state="new">Because Service Bus will have marked</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>the message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
          <target state="new">the message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode (which is the default mode), the receive process becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages.</source>
          <target state="new">In <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode (which is the default mode), the receive process becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When Service Bus receives a request,</source>
          <target state="new">When Service Bus receives a request,</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
          <target state="new">it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.</source>
          <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When Service Bus sees the <ph id="ph1">`Complete`</ph> call, it marks the message as being consumed and removes it from the subscription.</source>
          <target state="new">When Service Bus sees the <ph id="ph1">`Complete`</ph> call, it marks the message as being consumed and removes it from the subscription.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how messages can be received and processed using the default <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode.</source>
          <target state="new">The following example demonstrates how messages can be received and processed using the default <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To specify a different <bpt id="p1">[</bpt><ph id="ph1">`ReceiveMode`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> value, you can use another overload for <bpt id="p2">[</bpt><ph id="ph2">`CreateFromConnectionString`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx)</ept>.</source>
          <target state="new">To specify a different <bpt id="p1">[</bpt><ph id="ph1">`ReceiveMode`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> value, you can use another overload for <bpt id="p2">[</bpt><ph id="ph2">`CreateFromConnectionString`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This example uses the <bpt id="p1">[</bpt><ph id="ph1">`OnMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback to process messages as they arrive</source>
          <target state="new">This example uses the <bpt id="p1">[</bpt><ph id="ph1">`OnMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback to process messages as they arrive</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>in the <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> subscription.</source>
          <target state="new">in the <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> subscription.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This example configures the <bpt id="p1">[</bpt><ph id="ph1">`OnMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback using an <bpt id="p2">[</bpt><ph id="ph2">`OnMessageOptions`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> object.</source>
          <target state="new">This example configures the <bpt id="p1">[</bpt><ph id="ph1">`OnMessage`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback using an <bpt id="p2">[</bpt><ph id="ph2">`OnMessageOptions`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> object.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`AutoComplete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept> is set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept> to enable manual control of when to call <bpt id="p3">[</bpt><ph id="ph2">`Complete`</ph><ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.</source>
          <target state="new"><bpt id="p1">[</bpt><ph id="ph1">`AutoComplete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept> is set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept> to enable manual control of when to call <bpt id="p3">[</bpt><ph id="ph2">`Complete`</ph><ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`AutoRenewTimeout`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages.</source>
          <target state="new"><bpt id="p1">[</bpt><ph id="ph1">`AutoRenewTimeout`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This property value reduces the number of times the client makes</source>
          <target state="new">This property value reduces the number of times the client makes</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>chargeable calls that do not retrieve messages.</source>
          <target state="new">chargeable calls that do not retrieve messages.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>How to handle application crashes and unreadable messages</source>
          <target state="new">How to handle application crashes and unreadable messages</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</source>
          <target state="new">Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If a receiving application is unable to process the message for some reason, then it can call the <bpt id="p1">[</bpt><ph id="ph1">`Abandon`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> method on the received message (instead</source>
          <target state="new">If a receiving application is unable to process the message for some reason, then it can call the <bpt id="p1">[</bpt><ph id="ph1">`Abandon`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> method on the received message (instead</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>of the <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> method).</source>
          <target state="new">of the <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> method).</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This causes Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.</source>
          <target state="new">This causes Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>There is also a time-out associated with a message locked within the subscription, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.</source>
          <target state="new">There is also a time-out associated with a message locked within the subscription, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the event that the application crashes after processing the message but before the <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> request is issued, the message will be redelivered to the application when it restarts.</source>
          <target state="new">In the event that the application crashes after processing the message but before the <bpt id="p1">[</bpt><ph id="ph1">`Complete`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> request is issued, the message will be redelivered to the application when it restarts.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>; that is, each message is processed at least once but in certain situations the same message may be</source>
          <target state="new">This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>; that is, each message is processed at least once but in certain situations the same message may be</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>redelivered.</source>
          <target state="new">redelivered.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</source>
          <target state="new">If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This is often achieved using the</source>
          <target state="new">This is often achieved using the</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`MessageId`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> property of the message, which will remain constant across delivery attempts.</source>
          <target state="new"><bpt id="p1">[</bpt><ph id="ph1">`MessageId`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> property of the message, which will remain constant across delivery attempts.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>How to delete topics and subscriptions</source>
          <target state="new">How to delete topics and subscriptions</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to delete the topic <bpt id="p1">**</bpt>TestTopic<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>HowToSample<ept id="p2">**</ept> service namespace.</source>
          <target state="new">The following example demonstrates how to delete the topic <bpt id="p1">**</bpt>TestTopic<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>HowToSample<ept id="p2">**</ept> service namespace.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Deleting a topic also deletes any subscriptions that are registered with the topic.</source>
          <target state="new">Deleting a topic also deletes any subscriptions that are registered with the topic.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Subscriptions can also be deleted independently.</source>
          <target state="new">Subscriptions can also be deleted independently.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to delete a subscription named <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>TestTopic<ept id="p2">**</ept> topic.</source>
          <target state="new">The following code demonstrates how to delete a subscription named <bpt id="p1">**</bpt>HighMessages<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>TestTopic<ept id="p2">**</ept> topic.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of Service Bus topics and subscriptions, follow these links to learn more.</source>
          <target state="new">Now that you've learned the basics of Service Bus topics and subscriptions, follow these links to learn more.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept>.</source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>API reference for <bpt id="p1">[</bpt>SqlFilter<ept id="p1">][]</ept>.</source>
          <target state="new">API reference for <bpt id="p1">[</bpt>SqlFilter<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Build a working application that sends and receives messages to and from a Service Bus queue: <bpt id="p1">[</bpt>Service Bus Brokered Messaging .NET Tutorial<ept id="p1">][]</ept>.</source>
          <target state="new">Build a working application that sends and receives messages to and from a Service Bus queue: <bpt id="p1">[</bpt>Service Bus Brokered Messaging .NET Tutorial<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Service Bus samples: Download from <bpt id="p1">[</bpt>Azure Samples<ept id="p1">][]</ept> or see the overview on <bpt id="p2">[</bpt>MSDN<ept id="p2">][]</ept>.</source>
          <target state="new">Service Bus samples: Download from <bpt id="p1">[</bpt>Azure Samples<ept id="p1">][]</ept> or see the overview on <bpt id="p2">[</bpt>MSDN<ept id="p2">][]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01676f97ca88ce2a93817a7198d6d198e1a9c38e</xliffext:olfilehash>
  </header>
</xliff>