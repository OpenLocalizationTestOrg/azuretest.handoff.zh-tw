<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Authentication Scenarios for Azure AD</source>
          <target state="new">Authentication Scenarios for Azure AD</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>An overview of the five most common authentication scenarios for Azure Active Directory (AAD)</source>
          <target state="new">An overview of the five most common authentication scenarios for Azure Active Directory (AAD)</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Authentication Scenarios for Azure AD</source>
          <target state="new">Authentication Scenarios for Azure AD</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure Active Directory (Azure AD) simplifies authentication for developers by providing identity as a service, with support for industry-standard protocols such as OAuth 2.0 and OpenID Connect, as well as open source libraries for different platforms to help you start coding quickly.</source>
          <target state="new">Azure Active Directory (Azure AD) simplifies authentication for developers by providing identity as a service, with support for industry-standard protocols such as OAuth 2.0 and OpenID Connect, as well as open source libraries for different platforms to help you start coding quickly.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This document will help you understand the various scenarios Azure AD supports and will show you how to get started.</source>
          <target state="new">This document will help you understand the various scenarios Azure AD supports and will show you how to get started.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It’s divided into the following sections:</source>
          <target state="new">It’s divided into the following sections:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Basics of Authentication in Azure AD</source>
          <target state="new">Basics of Authentication in Azure AD</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Claims in Azure AD Security Tokens</source>
          <target state="new">Claims in Azure AD Security Tokens</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Basics of Registering an Application in Azure AD</source>
          <target state="new">Basics of Registering an Application in Azure AD</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Application Types and Scenarios</source>
          <target state="new">Application Types and Scenarios</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Web Browser to Web Application</source>
          <target state="new">Web Browser to Web Application</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Single Page Application (SPA)</source>
          <target state="new">Single Page Application (SPA)</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Native Application to Web API</source>
          <target state="new">Native Application to Web API</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Web Application to Web API</source>
          <target state="new">Web Application to Web API</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Daemon or Server Application to Web API</source>
          <target state="new">Daemon or Server Application to Web API</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Basics of Authentication in Azure AD</source>
          <target state="new">Basics of Authentication in Azure AD</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with basic concepts of authentication in Azure AD, read this section.</source>
          <target state="new">If you are unfamiliar with basic concepts of authentication in Azure AD, read this section.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise, you may want to skip down to <bpt id="p1">[</bpt>Application Types and Scenarios<ept id="p1">](#application-types-and-scenarios)</ept>.</source>
          <target state="new">Otherwise, you may want to skip down to <bpt id="p1">[</bpt>Application Types and Scenarios<ept id="p1">](#application-types-and-scenarios)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Let’s consider the most basic scenario where identity is required: a user in a web browser needs to authenticate to a web application.</source>
          <target state="new">Let’s consider the most basic scenario where identity is required: a user in a web browser needs to authenticate to a web application.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This scenario is described in greater detail in the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> section, but it’s a useful starting point to illustrate the capabilities of Azure AD and conceptualize how the scenario works.</source>
          <target state="new">This scenario is described in greater detail in the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> section, but it’s a useful starting point to illustrate the capabilities of Azure AD and conceptualize how the scenario works.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Consider the following diagram for this scenario:</source>
          <target state="new">Consider the following diagram for this scenario:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Overview of sign-on to web application</source>
          <target state="new">Overview of sign-on to web application</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>With the diagram above in mind, here’s what you need to know about its various components:</source>
          <target state="new">With the diagram above in mind, here’s what you need to know about its various components:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Azure AD is the identity provider, responsible for verifying the identity of users and applications that exist in an organization’s directory, and ultimately issuing security tokens upon successful authentication of those users and applications.</source>
          <target state="new">Azure AD is the identity provider, responsible for verifying the identity of users and applications that exist in an organization’s directory, and ultimately issuing security tokens upon successful authentication of those users and applications.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An application that wants to outsource authentication to Azure AD must be registered in Azure AD, which registers and uniquely identifies the app in the directory.</source>
          <target state="new">An application that wants to outsource authentication to Azure AD must be registered in Azure AD, which registers and uniquely identifies the app in the directory.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Developers can use the open source Azure AD authentication libraries to make authentication easy by handling the protocol details for you.</source>
          <target state="new">Developers can use the open source Azure AD authentication libraries to make authentication easy by handling the protocol details for you.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Azure Active Directory Authentication Libraries<ept id="p1">](active-directory-authentication-libraries.md)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Azure Active Directory Authentication Libraries<ept id="p1">](active-directory-authentication-libraries.md)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>• Once a user has been authenticated, the application must validate the user’s security token to ensure that authentication was successful for the intended parties.</source>
          <target state="new">• Once a user has been authenticated, the application must validate the user’s security token to ensure that authentication was successful for the intended parties.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Developers can use the provided authentication libraries to handle validation of any token from Azure AD, including JSON Web Tokens (JWT) or SAML 2.0.</source>
          <target state="new">Developers can use the provided authentication libraries to handle validation of any token from Azure AD, including JSON Web Tokens (JWT) or SAML 2.0.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you want to perform validation manually, see the <bpt id="p1">[</bpt>JWT Token Handler<ept id="p1">](https://msdn.microsoft.com/library/dn205065(v=vs.110).aspx)</ept> documentation.</source>
          <target state="new">If you want to perform validation manually, see the <bpt id="p1">[</bpt>JWT Token Handler<ept id="p1">](https://msdn.microsoft.com/library/dn205065(v=vs.110).aspx)</ept> documentation.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> Azure AD uses public key cryptography to sign tokens and verify that they are valid.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> Azure AD uses public key cryptography to sign tokens and verify that they are valid.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Important Information About Signing Key Rollover in Azure AD<ept id="p1">](https://msdn.microsoft.com/library/azure/dn641920.aspx)</ept> for more information on the necessary logic you must have in your application to ensure it’s always updated with the latest keys.</source>
          <target state="new">See <bpt id="p1">[</bpt>Important Information About Signing Key Rollover in Azure AD<ept id="p1">](https://msdn.microsoft.com/library/azure/dn641920.aspx)</ept> for more information on the necessary logic you must have in your application to ensure it’s always updated with the latest keys.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>• The flow of requests and responses for the authentication process is determined by the authentication protocol that was used, such as OAuth 2.0, OpenID Connect, WS-Federation, or SAML 2.0.</source>
          <target state="new">• The flow of requests and responses for the authentication process is determined by the authentication protocol that was used, such as OAuth 2.0, OpenID Connect, WS-Federation, or SAML 2.0.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These protocols are discussed in more detail in the <bpt id="p1">[</bpt>Azure Active Directory Authentication Protocols<ept id="p1">](https://msdn.microsoft.com/library/azure/dn151124.aspx)</ept> topic and in the sections below.</source>
          <target state="new">These protocols are discussed in more detail in the <bpt id="p1">[</bpt>Azure Active Directory Authentication Protocols<ept id="p1">](https://msdn.microsoft.com/library/azure/dn151124.aspx)</ept> topic and in the sections below.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Azure AD supports the OAuth 2.0 and OpenID Connect standards that make extensive use of bearer tokens, including bearer tokens represented as JWTs.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Azure AD supports the OAuth 2.0 and OpenID Connect standards that make extensive use of bearer tokens, including bearer tokens represented as JWTs.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A bearer token is a lightweight security token that grants the “bearer” access to a protected resource.</source>
          <target state="new">A bearer token is a lightweight security token that grants the “bearer” access to a protected resource.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In this sense, the “bearer” is any party that can present the token.</source>
          <target state="new">In this sense, the “bearer” is any party that can present the token.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Though a party must first authenticate with Azure AD to receive the bearer token, if the required steps are not taken to secure the token in transmission and storage, it can be intercepted and used by an unintended party.</source>
          <target state="new">Though a party must first authenticate with Azure AD to receive the bearer token, if the required steps are not taken to secure the token in transmission and storage, it can be intercepted and used by an unintended party.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>While some security tokens have a built-in mechanism for preventing unauthorized parties from using them, bearer tokens do not have this mechanism and must be transported in a secure channel such as transport layer security (HTTPS).</source>
          <target state="new">While some security tokens have a built-in mechanism for preventing unauthorized parties from using them, bearer tokens do not have this mechanism and must be transported in a secure channel such as transport layer security (HTTPS).</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a bearer token is transmitted in the clear, a man-in the middle attack can be used by a malicious party to acquire the token and use it for an unauthorized access to a protected resource.</source>
          <target state="new">If a bearer token is transmitted in the clear, a man-in the middle attack can be used by a malicious party to acquire the token and use it for an unauthorized access to a protected resource.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The same security principles apply when storing or caching bearer tokens for later use.</source>
          <target state="new">The same security principles apply when storing or caching bearer tokens for later use.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Always ensure that your application transmits and stores bearer tokens in a secure manner.</source>
          <target state="new">Always ensure that your application transmits and stores bearer tokens in a secure manner.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more security considerations on bearer tokens, see <bpt id="p1">[</bpt>RFC 6750 Section 5<ept id="p1">](http://tools.ietf.org/html/rfc6750)</ept>.</source>
          <target state="new">For more security considerations on bearer tokens, see <bpt id="p1">[</bpt>RFC 6750 Section 5<ept id="p1">](http://tools.ietf.org/html/rfc6750)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Now that you have an overview of the basics, read the sections below to understand how provisioning works in Azure AD and the common scenarios Azure AD supports.</source>
          <target state="new">Now that you have an overview of the basics, read the sections below to understand how provisioning works in Azure AD and the common scenarios Azure AD supports.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Claims in Azure AD Security Tokens</source>
          <target state="new">Claims in Azure AD Security Tokens</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Security tokens issued by Azure AD contain claims, or assertions of information about the subject that has been authenticated.</source>
          <target state="new">Security tokens issued by Azure AD contain claims, or assertions of information about the subject that has been authenticated.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These claims can be used by the application for various tasks.</source>
          <target state="new">These claims can be used by the application for various tasks.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, they can be used to validate the token, identify the subject's directory tenant, display user information, determine the subject's authorization, and so on.</source>
          <target state="new">For example, they can be used to validate the token, identify the subject's directory tenant, display user information, determine the subject's authorization, and so on.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The claims present in any given security token are dependent upon the type of token, the type of credential used to authenticate the user, and the application configuration.</source>
          <target state="new">The claims present in any given security token are dependent upon the type of token, the type of credential used to authenticate the user, and the application configuration.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A brief description of each type of claim emitted by Azure AD is provided in the table below.</source>
          <target state="new">A brief description of each type of claim emitted by Azure AD is provided in the table below.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, refer to <bpt id="p1">[</bpt>Supported Token and Claim Types<ept id="p1">](active-directory-token-and-claims.md)</ept>.</source>
          <target state="new">For more information, refer to <bpt id="p1">[</bpt>Supported Token and Claim Types<ept id="p1">](active-directory-token-and-claims.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Claim</source>
          <target state="new">Claim</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Application ID</source>
          <target state="new">Application ID</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Identifies the application that is using the token.</source>
          <target state="new">Identifies the application that is using the token.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Audience</source>
          <target state="new">Audience</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Identifies the recipient resource the token is intended for.</source>
          <target state="new">Identifies the recipient resource the token is intended for.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Application Authentication Context Class Reference</source>
          <target state="new">Application Authentication Context Class Reference</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Indicates how the client was authenticated (public client vs. confidential client).</source>
          <target state="new">Indicates how the client was authenticated (public client vs. confidential client).</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Authentication Instant</source>
          <target state="new">Authentication Instant</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Records the date and time when the authentication occurred.</source>
          <target state="new">Records the date and time when the authentication occurred.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Authentication Method</source>
          <target state="new">Authentication Method</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Indicates how the subject of the token was authenticated (password, certificate, etc.).</source>
          <target state="new">Indicates how the subject of the token was authenticated (password, certificate, etc.).</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>First Name</source>
          <target state="new">First Name</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Provides the given name of the user as set in Azure AD.</source>
          <target state="new">Provides the given name of the user as set in Azure AD.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="new">Groups</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Contains object Ids of Azure AD groups the user is a member of.</source>
          <target state="new">Contains object Ids of Azure AD groups the user is a member of.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Identity Provider</source>
          <target state="new">Identity Provider</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Records the identity provider that authenticated the subject of the token.</source>
          <target state="new">Records the identity provider that authenticated the subject of the token.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Issued At</source>
          <target state="new">Issued At</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Records the time at which the token was issued, often used for token freshness.</source>
          <target state="new">Records the time at which the token was issued, often used for token freshness.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Issuer</source>
          <target state="new">Issuer</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Identifies the STS that emitted the token as well as the Azure AD tenant.</source>
          <target state="new">Identifies the STS that emitted the token as well as the Azure AD tenant.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Last Name</source>
          <target state="new">Last Name</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Provides the surname of the user as set in Azure AD.</source>
          <target state="new">Provides the surname of the user as set in Azure AD.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Provides a human readable value that identifies the subject of the token.</source>
          <target state="new">Provides a human readable value that identifies the subject of the token.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Object Id</source>
          <target state="new">Object Id</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Contains an immutable, unique identifier of the subject in Azure AD.</source>
          <target state="new">Contains an immutable, unique identifier of the subject in Azure AD.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Roles</source>
          <target state="new">Roles</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Contains friendly names of Azure AD Application Roles that the user has been granted.</source>
          <target state="new">Contains friendly names of Azure AD Application Roles that the user has been granted.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="new">Scope</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Indicates the permissions granted to the client application.</source>
          <target state="new">Indicates the permissions granted to the client application.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Subject</source>
          <target state="new">Subject</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Indicates the principal about which the token asserts information.</source>
          <target state="new">Indicates the principal about which the token asserts information.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Tenant Id</source>
          <target state="new">Tenant Id</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Contains an immutable, unique identifier of the directory tenant that issued the token.</source>
          <target state="new">Contains an immutable, unique identifier of the directory tenant that issued the token.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Token Lifetime</source>
          <target state="new">Token Lifetime</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Defines the time interval within which a token is valid.</source>
          <target state="new">Defines the time interval within which a token is valid.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>User Principal Name</source>
          <target state="new">User Principal Name</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Contains the user principal name of the subject.</source>
          <target state="new">Contains the user principal name of the subject.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="new">Version</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Contains the version number of the token.</source>
          <target state="new">Contains the version number of the token.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Basics of Registering an Application in Azure AD</source>
          <target state="new">Basics of Registering an Application in Azure AD</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Any application that outsources authentication to Azure AD must be registered in a directory.</source>
          <target state="new">Any application that outsources authentication to Azure AD must be registered in a directory.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This step involves telling Azure AD about your application, including the URL where it’s located, the URL to send replies after authentication, the URI to identify your application, and more.</source>
          <target state="new">This step involves telling Azure AD about your application, including the URL where it’s located, the URL to send replies after authentication, the URI to identify your application, and more.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This information is required for a few key reasons:</source>
          <target state="new">This information is required for a few key reasons:</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Azure AD needs coordinates to communicate with the application when handling sign-on or exchanging tokens.</source>
          <target state="new">Azure AD needs coordinates to communicate with the application when handling sign-on or exchanging tokens.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
          <target state="new">These include the following:</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Application ID URI: The identifier for an application.</source>
          <target state="new">Application ID URI: The identifier for an application.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This value is sent to Azure AD during authentication to indicate which application the caller wants a token for.</source>
          <target state="new">This value is sent to Azure AD during authentication to indicate which application the caller wants a token for.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Additionally, this value is included in the token so that the application knows it was the intended target.</source>
          <target state="new">Additionally, this value is included in the token so that the application knows it was the intended target.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Reply URL and Redirect URI: In the case of a web API or web application, the Reply URL is the location to which Azure AD will send the authentication response, including a token if authentication was successful.</source>
          <target state="new">Reply URL and Redirect URI: In the case of a web API or web application, the Reply URL is the location to which Azure AD will send the authentication response, including a token if authentication was successful.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the case of a native application, the Redirect URI is a unique identifier to which Azure AD will redirect the user-agent in an OAuth 2.0 request.</source>
          <target state="new">In the case of a native application, the Redirect URI is a unique identifier to which Azure AD will redirect the user-agent in an OAuth 2.0 request.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Client ID: The ID for an application, which is generated by Azure AD when the application is registered.</source>
          <target state="new">Client ID: The ID for an application, which is generated by Azure AD when the application is registered.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When requesting an authorization code or token, the client ID and key are sent to Azure AD during authentication.</source>
          <target state="new">When requesting an authorization code or token, the client ID and key are sent to Azure AD during authentication.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Key: The key that is sent along with a client ID when authenticating to Azure AD to call a web API.</source>
          <target state="new">Key: The key that is sent along with a client ID when authenticating to Azure AD to call a web API.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Azure AD needs to ensure the application has the required permissions to access your directory data, other applications in your organization, and so on</source>
          <target state="new">Azure AD needs to ensure the application has the required permissions to access your directory data, other applications in your organization, and so on</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Provisioning becomes clearer when you understand that there are two categories of applications that can be developed and integrated with Azure AD:</source>
          <target state="new">Provisioning becomes clearer when you understand that there are two categories of applications that can be developed and integrated with Azure AD:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Single tenant application: A single tenant application is intended for use in one organization.</source>
          <target state="new">Single tenant application: A single tenant application is intended for use in one organization.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>These are typically line-of-business (LoB) applications written by an enterprise developer.</source>
          <target state="new">These are typically line-of-business (LoB) applications written by an enterprise developer.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A single tenant application only needs to be accessed by users in one directory, and as a result, it only needs to be provisioned in one directory.</source>
          <target state="new">A single tenant application only needs to be accessed by users in one directory, and as a result, it only needs to be provisioned in one directory.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>These applications are typically registered by a developer in the organization.</source>
          <target state="new">These applications are typically registered by a developer in the organization.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Multi-tenant application: A multi-tenant application is intended for use in many organizations, not just one organization.</source>
          <target state="new">Multi-tenant application: A multi-tenant application is intended for use in many organizations, not just one organization.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>These are typically software-as-a-service (SaaS) applications written by an independent software vendor (ISV).</source>
          <target state="new">These are typically software-as-a-service (SaaS) applications written by an independent software vendor (ISV).</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Multi-tenant applications need to be provisioned in each directory where they will be used, which requires user or administrator consent to register them.</source>
          <target state="new">Multi-tenant applications need to be provisioned in each directory where they will be used, which requires user or administrator consent to register them.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This consent process starts when an application has been registered in the directory and is given access to the Graph API or perhaps another web API.</source>
          <target state="new">This consent process starts when an application has been registered in the directory and is given access to the Graph API or perhaps another web API.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When a user or administrator from a different organization signs up to use the application, they are presented with a dialog that displays the permissions the application requires.</source>
          <target state="new">When a user or administrator from a different organization signs up to use the application, they are presented with a dialog that displays the permissions the application requires.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The user or administrator can then consent to the application, which gives the application access to the stated data, and finally registers the application in their directory.</source>
          <target state="new">The user or administrator can then consent to the application, which gives the application access to the stated data, and finally registers the application in their directory.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overview of the Consent Framework<ept id="p1">](active-directory-integrating-applications.md#overview-of-the-consent-framework)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Overview of the Consent Framework<ept id="p1">](active-directory-integrating-applications.md#overview-of-the-consent-framework)</ept>.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Some additional considerations arise when developing a multi-tenant application instead of a single tenant application.</source>
          <target state="new">Some additional considerations arise when developing a multi-tenant application instead of a single tenant application.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, if you are making your application available to users in multiple directories, you need a mechanism to determine which tenant they’re in.</source>
          <target state="new">For example, if you are making your application available to users in multiple directories, you need a mechanism to determine which tenant they’re in.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A single tenant application only needs to look in its own directory for a user, while a multi-tenant application needs to identify a specific user from all the directories in Azure AD.</source>
          <target state="new">A single tenant application only needs to look in its own directory for a user, while a multi-tenant application needs to identify a specific user from all the directories in Azure AD.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>To accomplish this task, Azure AD provides a common authentication endpoint where any multi-tenant application can direct sign-in requests, instead of a tenant-specific endpoint.</source>
          <target state="new">To accomplish this task, Azure AD provides a common authentication endpoint where any multi-tenant application can direct sign-in requests, instead of a tenant-specific endpoint.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This endpoint is https://login.microsoftonline.com/common for all directories in Azure AD, whereas a tenant-specific endpoint might be https://login.microsoftonline.com/contoso.onmicrosoft.com.</source>
          <target state="new">This endpoint is https://login.microsoftonline.com/common for all directories in Azure AD, whereas a tenant-specific endpoint might be https://login.microsoftonline.com/contoso.onmicrosoft.com.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The common endpoint is especially important to consider when developing your application because you’ll need the necessary logic to handle multiple tenants during sign-in, sign-out, and token validation.</source>
          <target state="new">The common endpoint is especially important to consider when developing your application because you’ll need the necessary logic to handle multiple tenants during sign-in, sign-out, and token validation.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If you are currently developing a single tenant application but want to make it available to many organizations, you can easily make changes to the application and its configuration in Azure AD to make it multi-tenant capable.</source>
          <target state="new">If you are currently developing a single tenant application but want to make it available to many organizations, you can easily make changes to the application and its configuration in Azure AD to make it multi-tenant capable.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In addition, Azure AD uses the same signing key for all tokens in all directories, whether you are providing authentication in a single tenant or multi-tenant application.</source>
          <target state="new">In addition, Azure AD uses the same signing key for all tokens in all directories, whether you are providing authentication in a single tenant or multi-tenant application.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Each scenario listed in this document includes a sub-section that describes its provisioning requirements.</source>
          <target state="new">Each scenario listed in this document includes a sub-section that describes its provisioning requirements.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more in-depth information about provisioning an application in Azure AD and the differences between single and multi-tenant applications, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept> for more information.</source>
          <target state="new">For more in-depth information about provisioning an application in Azure AD and the differences between single and multi-tenant applications, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Continue reading to understand the common application scenarios in Azure AD.</source>
          <target state="new">Continue reading to understand the common application scenarios in Azure AD.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Application Types and Scenarios</source>
          <target state="new">Application Types and Scenarios</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Each of the scenarios described in this document can be developed using various languages and platforms, and there are <bpt id="p1">[</bpt>complete code samples available on GitHub<ept id="p1">](https://github.com/AzureADSamples)</ept> for each of them.</source>
          <target state="new">Each of the scenarios described in this document can be developed using various languages and platforms, and there are <bpt id="p1">[</bpt>complete code samples available on GitHub<ept id="p1">](https://github.com/AzureADSamples)</ept> for each of them.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In addition, if your application needs a specific piece or segment of an end-to-end scenario, in most cases that functionality can be added independently.</source>
          <target state="new">In addition, if your application needs a specific piece or segment of an end-to-end scenario, in most cases that functionality can be added independently.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For example, if you have a native application that calls a web API, you can easily add a web application that also calls the web API.</source>
          <target state="new">For example, if you have a native application that calls a web API, you can easily add a web application that also calls the web API.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following diagram illustrates these scenarios and application types, and how different components can be added:</source>
          <target state="new">The following diagram illustrates these scenarios and application types, and how different components can be added:</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Application Types and scenarios</source>
          <target state="new">Application Types and scenarios</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>These are the five primary application scenarios supported by Azure AD:</source>
          <target state="new">These are the five primary application scenarios supported by Azure AD:</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept>: A user needs to sign in to a web application that is secured by Azure AD.</source>
          <target state="new"><bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept>: A user needs to sign in to a web application that is secured by Azure AD.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single Page Application (SPA)<ept id="p1">](#single-page-application-spa)</ept>: A user needs to sign in to a single page application that is secured by Azure AD.</source>
          <target state="new"><bpt id="p1">[</bpt>Single Page Application (SPA)<ept id="p1">](#single-page-application-spa)</ept>: A user needs to sign in to a single page application that is secured by Azure AD.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Native Application to Web API<ept id="p1">](#native-application-to-web-api)</ept>: A native application that runs on a phone, tablet, or PC needs to authenticate a user to get resources from a web API that is secured by Azure AD.</source>
          <target state="new"><bpt id="p1">[</bpt>Native Application to Web API<ept id="p1">](#native-application-to-web-api)</ept>: A native application that runs on a phone, tablet, or PC needs to authenticate a user to get resources from a web API that is secured by Azure AD.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Web Application to Web API<ept id="p1">](#web-application-to-web-api)</ept>: A web application needs to get resources from a web API secured by Azure AD.</source>
          <target state="new"><bpt id="p1">[</bpt>Web Application to Web API<ept id="p1">](#web-application-to-web-api)</ept>: A web application needs to get resources from a web API secured by Azure AD.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Daemon or Server Application to Web API<ept id="p1">](#daemon-or-server-application-to-web-api)</ept>: A daemon application or a server application with no web user interface needs to get resources from a web API secured by Azure AD.</source>
          <target state="new"><bpt id="p1">[</bpt>Daemon or Server Application to Web API<ept id="p1">](#daemon-or-server-application-to-web-api)</ept>: A daemon application or a server application with no web user interface needs to get resources from a web API secured by Azure AD.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Web Browser to Web Application</source>
          <target state="new">Web Browser to Web Application</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This section describes an application that authenticates a user in a web browser to a web application.</source>
          <target state="new">This section describes an application that authenticates a user in a web browser to a web application.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In this scenario, the web application directs the user’s browser to sign them in to Azure AD.</source>
          <target state="new">In this scenario, the web application directs the user’s browser to sign them in to Azure AD.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Azure AD returns a sign-in response through the user’s browser, which contains claims about the user in a security token.</source>
          <target state="new">Azure AD returns a sign-in response through the user’s browser, which contains claims about the user in a security token.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This scenario supports sign-on using the WS-Federation, SAML 2.0, and OpenID Connect protocols.</source>
          <target state="new">This scenario supports sign-on using the WS-Federation, SAML 2.0, and OpenID Connect protocols.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Diagram</source>
          <target state="new">Diagram</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Authentication flow for browser to web application</source>
          <target state="new">Authentication flow for browser to web application</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Description of Protocol Flow</source>
          <target state="new">Description of Protocol Flow</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When a user visits the application and needs to sign in, they are redirected via a sign-in request to the authentication endpoint in Azure AD.</source>
          <target state="new">When a user visits the application and needs to sign in, they are redirected via a sign-in request to the authentication endpoint in Azure AD.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The user signs in on the sign-in page.</source>
          <target state="new">The user signs in on the sign-in page.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If authentication is successful, Azure AD creates an authentication token and returns a sign-in response to the application’s Reply URL that was configured in the Azure Management Portal.</source>
          <target state="new">If authentication is successful, Azure AD creates an authentication token and returns a sign-in response to the application’s Reply URL that was configured in the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For a production application, this Reply URL should be HTTPS.</source>
          <target state="new">For a production application, this Reply URL should be HTTPS.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The returned token includes claims about the user and Azure AD that are required by the application to validate the token.</source>
          <target state="new">The returned token includes claims about the user and Azure AD that are required by the application to validate the token.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The application validates the token by using a public signing key and issuer information available at the federation metadata document for Azure AD.</source>
          <target state="new">The application validates the token by using a public signing key and issuer information available at the federation metadata document for Azure AD.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>After the application validates the token, Azure AD starts a new session with the user.</source>
          <target state="new">After the application validates the token, Azure AD starts a new session with the user.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This session allows the user to access the application until it expires.</source>
          <target state="new">This session allows the user to access the application until it expires.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
          <target state="new">Code Samples</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>See the code samples for Web Browser to Web Application scenarios.</source>
          <target state="new">See the code samples for Web Browser to Web Application scenarios.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>And, check back frequently -- we add new samples all the time.</source>
          <target state="new">And, check back frequently -- we add new samples all the time.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](active-directory-code-samples.md#web-browser-to-web-application)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](active-directory-code-samples.md#web-browser-to-web-application)</ept>.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Registering</source>
          <target state="new">Registering</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Single Tenant: If you are building an application just for your organization, it must be registered in your company’s directory by using the Azure Management Portal.</source>
          <target state="new">Single Tenant: If you are building an application just for your organization, it must be registered in your company’s directory by using the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Multi-Tenant: If you are building an application that can be used by users outside your organization, it must be registered in your company’s directory, but also must be registered in each organization’s directory that will be using the application.</source>
          <target state="new">Multi-Tenant: If you are building an application that can be used by users outside your organization, it must be registered in your company’s directory, but also must be registered in each organization’s directory that will be using the application.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>To make your application available in their directory, you can include a sign-up process for your customers that enables them to consent to your application.</source>
          <target state="new">To make your application available in their directory, you can include a sign-up process for your customers that enables them to consent to your application.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When they sign up for your application, they will be presented with a dialog that shows the permissions the application requires, and then the option to consent.</source>
          <target state="new">When they sign up for your application, they will be presented with a dialog that shows the permissions the application requires, and then the option to consent.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Depending on the required permissions, an administrator in the other organization may be required to give consent.</source>
          <target state="new">Depending on the required permissions, an administrator in the other organization may be required to give consent.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>When the user or administrator consents, the application is registered in their directory.</source>
          <target state="new">When the user or administrator consents, the application is registered in their directory.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Token Expiration</source>
          <target state="new">Token Expiration</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The user’s session expires when the lifetime of the token issued by Azure AD expires.</source>
          <target state="new">The user’s session expires when the lifetime of the token issued by Azure AD expires.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Your application can shorten this time period if desired, such as signing out users based on a period of inactivity.</source>
          <target state="new">Your application can shorten this time period if desired, such as signing out users based on a period of inactivity.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>When the session expires, the user will be prompted to sign in again.</source>
          <target state="new">When the session expires, the user will be prompted to sign in again.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Single Page Application (SPA)</source>
          <target state="new">Single Page Application (SPA)</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This section describes authentication for a single page application that uses Azure AD to secure its web API back end.</source>
          <target state="new">This section describes authentication for a single page application that uses Azure AD to secure its web API back end.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Single page applications are typically structured as a JavaScript presentation layer (front end) that runs in the browser and a web API back end that runs on a server and implements the application’s business logic.</source>
          <target state="new">Single page applications are typically structured as a JavaScript presentation layer (front end) that runs in the browser and a web API back end that runs on a server and implements the application’s business logic.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In this scenario, when the user signs in, the JavaScript front end uses <bpt id="p1">[</bpt>Active Directory Authentication Library for JavaScript (ADAL.JS)<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js/tree/dev)</ept> preview and the OAuth 2.0 Implicit Grant protocol to obtain an ID token (id_token) from Azure AD.</source>
          <target state="new">In this scenario, when the user signs in, the JavaScript front end uses <bpt id="p1">[</bpt>Active Directory Authentication Library for JavaScript (ADAL.JS)<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js/tree/dev)</ept> preview and the OAuth 2.0 Implicit Grant protocol to obtain an ID token (id_token) from Azure AD.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The token is cached and the client attaches it to the request as the bearer token when making calls to its web API back end, which is secured using the OWIN middleware.</source>
          <target state="new">The token is cached and the client attaches it to the request as the bearer token when making calls to its web API back end, which is secured using the OWIN middleware.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Diagram</source>
          <target state="new">Diagram</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Single Page Application diagram</source>
          <target state="new">Single Page Application diagram</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Description of Protocol Flow</source>
          <target state="new">Description of Protocol Flow</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The user navigates to the web application.</source>
          <target state="new">The user navigates to the web application.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The application returns the JavaScript front end (presentation layer) to the browser.</source>
          <target state="new">The application returns the JavaScript front end (presentation layer) to the browser.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The user initiates sign in, for example by clicking a sign in link.</source>
          <target state="new">The user initiates sign in, for example by clicking a sign in link.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The browser sends a GET to the Azure AD authorization endpoint to request an ID token.</source>
          <target state="new">The browser sends a GET to the Azure AD authorization endpoint to request an ID token.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This request includes the client ID and reply URL in the query parameters.</source>
          <target state="new">This request includes the client ID and reply URL in the query parameters.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Azure AD validates the Reply URL against the registered Reply URL that was configured in the Azure Management Portal.</source>
          <target state="new">Azure AD validates the Reply URL against the registered Reply URL that was configured in the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The user signs in on the sign-in page.</source>
          <target state="new">The user signs in on the sign-in page.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If authentication is successful, Azure AD creates an ID token and returns it as a URL fragment (#) to the application’s Reply URL.</source>
          <target state="new">If authentication is successful, Azure AD creates an ID token and returns it as a URL fragment (#) to the application’s Reply URL.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For a production application, this Reply URL should be HTTPS.</source>
          <target state="new">For a production application, this Reply URL should be HTTPS.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The returned token includes claims about the user and Azure AD that are required by the application to validate the token.</source>
          <target state="new">The returned token includes claims about the user and Azure AD that are required by the application to validate the token.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The JavaScript client code running in the browser extracts the token from the response to use in securing calls to the application’s web API back end.</source>
          <target state="new">The JavaScript client code running in the browser extracts the token from the response to use in securing calls to the application’s web API back end.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The browser calls the application’s web API back end with the access token in the authorization header.</source>
          <target state="new">The browser calls the application’s web API back end with the access token in the authorization header.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
          <target state="new">Code Samples</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>See the code samples for Single Page Application (SPA) scenarios.</source>
          <target state="new">See the code samples for Single Page Application (SPA) scenarios.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Be sure to check back frequently -- we add new samples all the time.</source>
          <target state="new">Be sure to check back frequently -- we add new samples all the time.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Single Page Application (SPA)<ept id="p1">](active-directory-code-samples.md#single-page-application-spa)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Single Page Application (SPA)<ept id="p1">](active-directory-code-samples.md#single-page-application-spa)</ept>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Registering</source>
          <target state="new">Registering</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Single Tenant: If you are building an application just for your organization, it must be registered in your company’s directory by using the Azure Management Portal.</source>
          <target state="new">Single Tenant: If you are building an application just for your organization, it must be registered in your company’s directory by using the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Multi-Tenant: If you are building an application that can be used by users outside your organization, it must be registered in your company’s directory, but also must be registered in each organization’s directory that will be using the application.</source>
          <target state="new">Multi-Tenant: If you are building an application that can be used by users outside your organization, it must be registered in your company’s directory, but also must be registered in each organization’s directory that will be using the application.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>To make your application available in their directory, you can include a sign-up process for your customers that enables them to consent to your application.</source>
          <target state="new">To make your application available in their directory, you can include a sign-up process for your customers that enables them to consent to your application.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>When they sign up for your application, they will be presented with a dialog that shows the permissions the application requires, and then the option to consent.</source>
          <target state="new">When they sign up for your application, they will be presented with a dialog that shows the permissions the application requires, and then the option to consent.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Depending on the required permissions, an administrator in the other organization may be required to give consent.</source>
          <target state="new">Depending on the required permissions, an administrator in the other organization may be required to give consent.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>When the user or administrator consents, the application is registered in their directory.</source>
          <target state="new">When the user or administrator consents, the application is registered in their directory.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>After registering the application, it must be configured to use OAuth 2.0 Implicit Grant protocol.</source>
          <target state="new">After registering the application, it must be configured to use OAuth 2.0 Implicit Grant protocol.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>By default, this protocol is disabled for applications.</source>
          <target state="new">By default, this protocol is disabled for applications.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>To enable the OAuth2 Implicit Grant protocol for your application, download its application manifest from the Azure Management Portal, set the “oauth2AllowImplicitFlow” value to true, and then upload the manifest back to the portal.</source>
          <target state="new">To enable the OAuth2 Implicit Grant protocol for your application, download its application manifest from the Azure Management Portal, set the “oauth2AllowImplicitFlow” value to true, and then upload the manifest back to the portal.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>For detailed instructions, see <bpt id="p1">[</bpt>Enabling OAuth 2.0 Implicit Grant for Single Page Applications<ept id="p1">](active-directory-integrating-applications.md)</ept>.</source>
          <target state="new">For detailed instructions, see <bpt id="p1">[</bpt>Enabling OAuth 2.0 Implicit Grant for Single Page Applications<ept id="p1">](active-directory-integrating-applications.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Token Expiration</source>
          <target state="new">Token Expiration</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>When you use ADAL.js to manage authentication with Azure AD, you benefit from several features that facilitate refreshing an expired token as well as getting tokens for additional web API resources that may be called by the application.</source>
          <target state="new">When you use ADAL.js to manage authentication with Azure AD, you benefit from several features that facilitate refreshing an expired token as well as getting tokens for additional web API resources that may be called by the application.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>When the user successfully authenticates with Azure AD, a session secured by a cookie is established for the user between the browser and Azure AD.</source>
          <target state="new">When the user successfully authenticates with Azure AD, a session secured by a cookie is established for the user between the browser and Azure AD.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>It’s important to note that the session exists between the user and Azure AD and not between the user and the web application running on the server.</source>
          <target state="new">It’s important to note that the session exists between the user and Azure AD and not between the user and the web application running on the server.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>When a token expires, ADAL.js uses this session to silently obtain another token.</source>
          <target state="new">When a token expires, ADAL.js uses this session to silently obtain another token.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>It does this by using a hidden iFrame to send and receive the request using the OAuth Implicit Grant protocol.</source>
          <target state="new">It does this by using a hidden iFrame to send and receive the request using the OAuth Implicit Grant protocol.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>ADAL.js can also use this same mechanism to silently obtain access tokens from Azure AD for other web API resources that the application calls as long as these resources support cross-origin resource sharing (CORS), are registered in the user’s directory, and any required consent was given by the user during sign-in.</source>
          <target state="new">ADAL.js can also use this same mechanism to silently obtain access tokens from Azure AD for other web API resources that the application calls as long as these resources support cross-origin resource sharing (CORS), are registered in the user’s directory, and any required consent was given by the user during sign-in.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Native Application to Web API</source>
          <target state="new">Native Application to Web API</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This section describes a native application that calls a web API on behalf of a user.</source>
          <target state="new">This section describes a native application that calls a web API on behalf of a user.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This scenario is built on the OAuth 2.0 authorization code grant type with a public client, as described in section 4.1 of the <bpt id="p1">[</bpt>OAuth 2.0 specification<ept id="p1">](http://tools.ietf.org/html/rfc6749)</ept>.</source>
          <target state="new">This scenario is built on the OAuth 2.0 authorization code grant type with a public client, as described in section 4.1 of the <bpt id="p1">[</bpt>OAuth 2.0 specification<ept id="p1">](http://tools.ietf.org/html/rfc6749)</ept>.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The native application obtains an access token for the user by using the OAuth 2.0 protocol.</source>
          <target state="new">The native application obtains an access token for the user by using the OAuth 2.0 protocol.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This access token is then sent in the request to the web API, which authorizes the user and returns the desired resource.</source>
          <target state="new">This access token is then sent in the request to the web API, which authorizes the user and returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Diagram</source>
          <target state="new">Diagram</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Native Application to Web API Diagram</source>
          <target state="new">Native Application to Web API Diagram</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Authentication flow for native application to API</source>
          <target state="new">Authentication flow for native application to API</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Description of Protocol Flow</source>
          <target state="new">Description of Protocol Flow</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If you are using the AD Authentication Libraries, most of the protocol details described below are handled for you, such as the browser pop-up, token caching, and handling of refresh tokens.</source>
          <target state="new">If you are using the AD Authentication Libraries, most of the protocol details described below are handled for you, such as the browser pop-up, token caching, and handling of refresh tokens.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Using a browser pop-up, the native application makes a request to the authorization endpoint in Azure AD.</source>
          <target state="new">Using a browser pop-up, the native application makes a request to the authorization endpoint in Azure AD.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This request includes the client ID and the redirect URI of the native application as shown in the Management Portal, and the application ID URI for the web API.</source>
          <target state="new">This request includes the client ID and the redirect URI of the native application as shown in the Management Portal, and the application ID URI for the web API.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the user hasn’t already signed in, they are prompted to sign in again</source>
          <target state="new">If the user hasn’t already signed in, they are prompted to sign in again</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Azure AD authenticates the user.</source>
          <target state="new">Azure AD authenticates the user.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>If it is a multi-tenant application and consent is required to use the application, the user will be required to consent if they haven’t already done so.</source>
          <target state="new">If it is a multi-tenant application and consent is required to use the application, the user will be required to consent if they haven’t already done so.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>After granting consent and upon successful authentication, Azure AD issues an authorization code response back to the client application’s redirect URI.</source>
          <target state="new">After granting consent and upon successful authentication, Azure AD issues an authorization code response back to the client application’s redirect URI.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>When Azure AD issues an authorization code response back to the redirect URI, the client application stops browser interaction and extracts the authorization code from the response.</source>
          <target state="new">When Azure AD issues an authorization code response back to the redirect URI, the client application stops browser interaction and extracts the authorization code from the response.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Using this authorization code, the client application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</source>
          <target state="new">Using this authorization code, the client application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The authorization code and information about the client application and web API are validated by Azure AD.</source>
          <target state="new">The authorization code and information about the client application and web API are validated by Azure AD.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</source>
          <target state="new">Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>In addition, Azure AD returns basic information about the user, such as their display name and tenant ID.</source>
          <target state="new">In addition, Azure AD returns basic information about the user, such as their display name and tenant ID.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the client application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</source>
          <target state="new">Over HTTPS, the client application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The web API then validates the JWT token, and if validation is successful, returns the desired resource.</source>
          <target state="new">The web API then validates the JWT token, and if validation is successful, returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>When the access token expires, the client application will receive an error that indicates the user needs to authenticate again.</source>
          <target state="new">When the access token expires, the client application will receive an error that indicates the user needs to authenticate again.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If the application has a valid refresh token, it can be used to acquire a new access token without prompting the user to sign in again.</source>
          <target state="new">If the application has a valid refresh token, it can be used to acquire a new access token without prompting the user to sign in again.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If the refresh token expires, the application will need to interactively authenticate the user once again.</source>
          <target state="new">If the refresh token expires, the application will need to interactively authenticate the user once again.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The refresh token issued by Azure AD can be used to access multiple resources.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The refresh token issued by Azure AD can be used to access multiple resources.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For example, if you have a client application that has permission to call two web APIs, the refresh token can be used to get an access token to the other web API as well.</source>
          <target state="new">For example, if you have a client application that has permission to call two web APIs, the refresh token can be used to get an access token to the other web API as well.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
          <target state="new">Code Samples</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>See the code samples for Native Application to Web API scenarios.</source>
          <target state="new">See the code samples for Native Application to Web API scenarios.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>And, check back frequently -- we add new samples all the time.</source>
          <target state="new">And, check back frequently -- we add new samples all the time.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Native Application to Web API<ept id="p1">](active-directory-code-samples.md#native-application-to-web-api)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Native Application to Web API<ept id="p1">](active-directory-code-samples.md#native-application-to-web-api)</ept>.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Registering</source>
          <target state="new">Registering</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Single Tenant: Both the native application and the web API must be registered in the same directory in Azure AD.</source>
          <target state="new">Single Tenant: Both the native application and the web API must be registered in the same directory in Azure AD.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The web API can be configured to expose a set of permissions, which are used to limit the native application’s access to its resources.</source>
          <target state="new">The web API can be configured to expose a set of permissions, which are used to limit the native application’s access to its resources.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The client application then selects the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</source>
          <target state="new">The client application then selects the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Multi-Tenant: First, the native application only ever registered in the developer or publisher’s directory.</source>
          <target state="new">Multi-Tenant: First, the native application only ever registered in the developer or publisher’s directory.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Second, the native application is configured to indicate the permissions it requires to be functional.</source>
          <target state="new">Second, the native application is configured to indicate the permissions it requires to be functional.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</source>
          <target state="new">This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Some applications require just user-level permissions, which any user in the organization can consent to.</source>
          <target state="new">Some applications require just user-level permissions, which any user in the organization can consent to.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Other applications require administrator-level permissions, which a user in the organization cannot consent to.</source>
          <target state="new">Other applications require administrator-level permissions, which a user in the organization cannot consent to.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Only a directory administrator can give consent to applications that require this level of permissions.</source>
          <target state="new">Only a directory administrator can give consent to applications that require this level of permissions.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>When the user or administrator consents, only the web API is registered in their directory.</source>
          <target state="new">When the user or administrator consents, only the web API is registered in their directory.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Integrating Applications with Azure Active Directory<ept id="p1">](active-directory-integrating-applications.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Token Expiration</source>
          <target state="new">Token Expiration</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>When the native application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</source>
          <target state="new">When the native application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>When the access token expires, the refresh token can be used to re-authenticate the user without requiring them to sign in again.</source>
          <target state="new">When the access token expires, the refresh token can be used to re-authenticate the user without requiring them to sign in again.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</source>
          <target state="new">This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Web Application to Web API</source>
          <target state="new">Web Application to Web API</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This section describes a web application that needs to get resources from a web API.</source>
          <target state="new">This section describes a web application that needs to get resources from a web API.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>In this scenario, there are two identity types that the web application can use to authenticate and call the web API: an application identity, or a delegated user identity.</source>
          <target state="new">In this scenario, there are two identity types that the web application can use to authenticate and call the web API: an application identity, or a delegated user identity.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For the application identity type, this scenario uses OAuth 2.0 client credentials grant to authenticate as the application and access the web API.</source>
          <target state="new">For the application identity type, this scenario uses OAuth 2.0 client credentials grant to authenticate as the application and access the web API.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>When using an application identity, the web API can only detect that the web application is calling it, as the web API does not receive any information about the user.</source>
          <target state="new">When using an application identity, the web API can only detect that the web application is calling it, as the web API does not receive any information about the user.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>If the application receives information about the user, it will be sent via the application protocol, and it is not signed by Azure AD.</source>
          <target state="new">If the application receives information about the user, it will be sent via the application protocol, and it is not signed by Azure AD.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The web API trusts that the web application authenticated the user.</source>
          <target state="new">The web API trusts that the web application authenticated the user.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For this reason, this pattern is called a trusted subsystem.</source>
          <target state="new">For this reason, this pattern is called a trusted subsystem.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For the delegated user identity type, the scenario can be accomplished in two ways: OpenID Connect, and OAuth 2.0 authorization code grant with a confidential client.</source>
          <target state="new">For the delegated user identity type, the scenario can be accomplished in two ways: OpenID Connect, and OAuth 2.0 authorization code grant with a confidential client.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The web application obtains an access token for the user, which proves to the web API that the user successfully authenticated to the web application and that the web application was able to obtain a delegated user identity to call the web API.</source>
          <target state="new">The web application obtains an access token for the user, which proves to the web API that the user successfully authenticated to the web application and that the web application was able to obtain a delegated user identity to call the web API.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This access token is sent in the request to the web API, which authorizes the user and returns the desired resource.</source>
          <target state="new">This access token is sent in the request to the web API, which authorizes the user and returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Diagram</source>
          <target state="new">Diagram</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Web Application to Web API diagram</source>
          <target state="new">Web Application to Web API diagram</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Description of Protocol Flow</source>
          <target state="new">Description of Protocol Flow</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Both the application identity and delegated user identity types are discussed in the flow below.</source>
          <target state="new">Both the application identity and delegated user identity types are discussed in the flow below.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The key difference between them is that the delegated user identity must first acquire an authorization code before the user can sign-in and gain access to the web API.</source>
          <target state="new">The key difference between them is that the delegated user identity must first acquire an authorization code before the user can sign-in and gain access to the web API.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Application Identity with OAuth 2.0 Client Credentials Grant</source>
          <target state="new">Application Identity with OAuth 2.0 Client Credentials Grant</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A user is signed in to Azure AD in the web application (see the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> above).</source>
          <target state="new">A user is signed in to Azure AD in the web application (see the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> above).</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The web application needs to acquire an access token so that it can authenticate to the web API and retrieve the desired resource.</source>
          <target state="new">The web application needs to acquire an access token so that it can authenticate to the web API and retrieve the desired resource.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>It makes a request to Azure AD’s token endpoint, providing the credential, client ID, and web API’s application ID URI.</source>
          <target state="new">It makes a request to Azure AD’s token endpoint, providing the credential, client ID, and web API’s application ID URI.</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Azure AD authenticates the application and returns a JWT access token that is used to call the web API.</source>
          <target state="new">Azure AD authenticates the application and returns a JWT access token that is used to call the web API.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</source>
          <target state="new">Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The web API then validates the JWT token, and if validation is successful, returns the desired resource.</source>
          <target state="new">The web API then validates the JWT token, and if validation is successful, returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Delegated User Identity with OpenID Connect</source>
          <target state="new">Delegated User Identity with OpenID Connect</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A user is signed in to a web application using Azure AD (see the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> section above).</source>
          <target state="new">A user is signed in to a web application using Azure AD (see the <bpt id="p1">[</bpt>Web Browser to Web Application<ept id="p1">](#web-browser-to-web-application)</ept> section above).</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If the user of the web application has not yet consented to allowing the web application to call the web API on its behalf, the user will need to consent.</source>
          <target state="new">If the user of the web application has not yet consented to allowing the web application to call the web API on its behalf, the user will need to consent.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The application will display the permissions it requires, and if any of these are administrator-level permissions, a normal user in the directory will not be able to consent.</source>
          <target state="new">The application will display the permissions it requires, and if any of these are administrator-level permissions, a normal user in the directory will not be able to consent.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This consent process only applies to multi-tenant applications, not single tenant applications, as the application will already have the necessary permissions.</source>
          <target state="new">This consent process only applies to multi-tenant applications, not single tenant applications, as the application will already have the necessary permissions.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>When the user signed in, the web application received an ID token with information about the user, as well as an authorization code.</source>
          <target state="new">When the user signed in, the web application received an ID token with information about the user, as well as an authorization code.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Using the authorization code issued by Azure AD, the web application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</source>
          <target state="new">Using the authorization code issued by Azure AD, the web application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The authorization code and information about the web application and web API are validated by Azure AD.</source>
          <target state="new">The authorization code and information about the web application and web API are validated by Azure AD.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</source>
          <target state="new">Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</source>
          <target state="new">Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The web API then validates the JWT token, and if validation is successful, returns the desired resource.</source>
          <target state="new">The web API then validates the JWT token, and if validation is successful, returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Delegated User Identity with OAuth 2.0 Authorization Code Grant</source>
          <target state="new">Delegated User Identity with OAuth 2.0 Authorization Code Grant</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>A user is already signed in to a web application, whose authentication mechanism is independent of Azure AD.</source>
          <target state="new">A user is already signed in to a web application, whose authentication mechanism is independent of Azure AD.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The web application requires an authorization code to acquire an access token, so it issues a request through the browser to Azure AD’s authorization endpoint, providing the client ID and redirect URI for the web application after successful authentication.</source>
          <target state="new">The web application requires an authorization code to acquire an access token, so it issues a request through the browser to Azure AD’s authorization endpoint, providing the client ID and redirect URI for the web application after successful authentication.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The user signs in to Azure AD.</source>
          <target state="new">The user signs in to Azure AD.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>If the user of the web application has not yet consented to allowing the web application to call the web API on its behalf, the user will need to consent.</source>
          <target state="new">If the user of the web application has not yet consented to allowing the web application to call the web API on its behalf, the user will need to consent.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The application will display the permissions it requires, and if any of these are administrator-level permissions, a normal user in the directory will not be able to consent.</source>
          <target state="new">The application will display the permissions it requires, and if any of these are administrator-level permissions, a normal user in the directory will not be able to consent.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This consent process only applies to multi-tenant applications, not single tenant applications, as the application will already have the necessary permissions.</source>
          <target state="new">This consent process only applies to multi-tenant applications, not single tenant applications, as the application will already have the necessary permissions.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>After the user has consented, the web application receives the authorization code that it needs to acquire an access token.</source>
          <target state="new">After the user has consented, the web application receives the authorization code that it needs to acquire an access token.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Using the authorization code issued by Azure AD, the web application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</source>
          <target state="new">Using the authorization code issued by Azure AD, the web application sends a request to Azure AD’s token endpoint that includes the authorization code, details about the client application (client ID and redirect URI), and the desired resource (application ID URI for the web API).</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The authorization code and information about the web application and web API are validated by Azure AD.</source>
          <target state="new">The authorization code and information about the web application and web API are validated by Azure AD.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</source>
          <target state="new">Upon successful validation, Azure AD returns two tokens: a JWT access token and a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</source>
          <target state="new">Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The web API then validates the JWT token, and if validation is successful, returns the desired resource.</source>
          <target state="new">The web API then validates the JWT token, and if validation is successful, returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
          <target state="new">Code Samples</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>See the code samples for Web Application to Web API scenarios.</source>
          <target state="new">See the code samples for Web Application to Web API scenarios.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>And, check back frequently -- we add new samples all the time.</source>
          <target state="new">And, check back frequently -- we add new samples all the time.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Web <bpt id="p1">[</bpt>Application to Web API<ept id="p1">](active-directory-code-samples.md#web-application-to-web-api)</ept>.</source>
          <target state="new">Web <bpt id="p1">[</bpt>Application to Web API<ept id="p1">](active-directory-code-samples.md#web-application-to-web-api)</ept>.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Registering</source>
          <target state="new">Registering</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Single Tenant: For both the application identity and delegated user identity cases, the web application and the web API must be registered in the same directory in Azure AD.</source>
          <target state="new">Single Tenant: For both the application identity and delegated user identity cases, the web application and the web API must be registered in the same directory in Azure AD.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The web API can be configured to expose a set of permissions, which are used to limit the web application’s access to its resources.</source>
          <target state="new">The web API can be configured to expose a set of permissions, which are used to limit the web application’s access to its resources.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If a delegated user identity type is being used, the web application needs to select the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</source>
          <target state="new">If a delegated user identity type is being used, the web application needs to select the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This step is not required if the application identity type is being used.</source>
          <target state="new">This step is not required if the application identity type is being used.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Multi-Tenant: First, the web application is configured to indicate the permissions it requires to be functional.</source>
          <target state="new">Multi-Tenant: First, the web application is configured to indicate the permissions it requires to be functional.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</source>
          <target state="new">This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Some applications require just user-level permissions, which any user in the organization can consent to.</source>
          <target state="new">Some applications require just user-level permissions, which any user in the organization can consent to.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Other applications require administrator-level permissions, which a user in the organization cannot consent to.</source>
          <target state="new">Other applications require administrator-level permissions, which a user in the organization cannot consent to.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Only a directory administrator can give consent to applications that require this level of permissions.</source>
          <target state="new">Only a directory administrator can give consent to applications that require this level of permissions.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>When the user or administrator consents, the web application and the web API are both registered in their directory.</source>
          <target state="new">When the user or administrator consents, the web application and the web API are both registered in their directory.</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Token Expiration</source>
          <target state="new">Token Expiration</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>When the web application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</source>
          <target state="new">When the web application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>When the access token expires, the refresh token can be used to re-authenticate the user without requiring them to sign in again.</source>
          <target state="new">When the access token expires, the refresh token can be used to re-authenticate the user without requiring them to sign in again.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</source>
          <target state="new">This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Daemon or Server Application to Web API</source>
          <target state="new">Daemon or Server Application to Web API</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>This section describes a daemon or server application that needs to get resources from a web API.</source>
          <target state="new">This section describes a daemon or server application that needs to get resources from a web API.</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>There are two sub-scenarios that apply to this section: A daemon that needs to call a web API, built on OAuth 2.0 client credentials grant type; and a server application (such as a web API) that needs to call a web API, built on OAuth 2.0 On-Behalf-Of draft specification.</source>
          <target state="new">There are two sub-scenarios that apply to this section: A daemon that needs to call a web API, built on OAuth 2.0 client credentials grant type; and a server application (such as a web API) that needs to call a web API, built on OAuth 2.0 On-Behalf-Of draft specification.</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>For the scenario when a daemon application needs to call a web API, it’s important to understand a few things.</source>
          <target state="new">For the scenario when a daemon application needs to call a web API, it’s important to understand a few things.</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>First, user interaction is not possible with a daemon application, which requires the application to have its own identity.</source>
          <target state="new">First, user interaction is not possible with a daemon application, which requires the application to have its own identity.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>An example of a daemon application is a batch job, or an operating system service running in the background.</source>
          <target state="new">An example of a daemon application is a batch job, or an operating system service running in the background.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This type of application requests an access token by using its application identity and presenting its client ID, credential (password or certificate), and application ID URI to Azure AD.</source>
          <target state="new">This type of application requests an access token by using its application identity and presenting its client ID, credential (password or certificate), and application ID URI to Azure AD.</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>After successful authentication, the daemon receives an access token from Azure AD, which is then used to call the web API.</source>
          <target state="new">After successful authentication, the daemon receives an access token from Azure AD, which is then used to call the web API.</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>For the scenario when a server application needs to call a web API, it’s helpful to use an example.</source>
          <target state="new">For the scenario when a server application needs to call a web API, it’s helpful to use an example.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Imagine that a user has authenticated on a native application, and this native application needs to call a web API.</source>
          <target state="new">Imagine that a user has authenticated on a native application, and this native application needs to call a web API.</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Azure AD issues a JWT access token to call the web API.</source>
          <target state="new">Azure AD issues a JWT access token to call the web API.</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If the web API needs to call another downstream web API, it can use the on-behalf-of flow to delegate the user’s identity and authenticate to the second-tier web API.</source>
          <target state="new">If the web API needs to call another downstream web API, it can use the on-behalf-of flow to delegate the user’s identity and authenticate to the second-tier web API.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Diagram</source>
          <target state="new">Diagram</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Daemon or Server Application to Web API diagram</source>
          <target state="new">Daemon or Server Application to Web API diagram</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Description of Protocol Flow</source>
          <target state="new">Description of Protocol Flow</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Application Identity with OAuth 2.0 Client Credentials Grant</source>
          <target state="new">Application Identity with OAuth 2.0 Client Credentials Grant</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>First, the server application needs to authenticate with Azure AD as itself, without any human interaction such as an interactive sign-on dialog.</source>
          <target state="new">First, the server application needs to authenticate with Azure AD as itself, without any human interaction such as an interactive sign-on dialog.</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>It makes a request to Azure AD’s token endpoint, providing the credential, client ID, and application ID URI.</source>
          <target state="new">It makes a request to Azure AD’s token endpoint, providing the credential, client ID, and application ID URI.</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Azure AD authenticates the application and returns a JWT access token that is used to call the web API.</source>
          <target state="new">Azure AD authenticates the application and returns a JWT access token that is used to call the web API.</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</source>
          <target state="new">Over HTTPS, the web application uses the returned JWT access token to add the JWT string with a “Bearer” designation in the Authorization header of the request to the web API.</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The web API then validates the JWT token, and if validation is successful, returns the desired resource.</source>
          <target state="new">The web API then validates the JWT token, and if validation is successful, returns the desired resource.</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Delegated User Identity with OAuth 2.0 On-Behalf-Of Draft Specification</source>
          <target state="new">Delegated User Identity with OAuth 2.0 On-Behalf-Of Draft Specification</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The flow discussed below assumes that a user has been authenticated on another application (such as a native application), and their user identity has been used to acquire an access token to the first-tier web API.</source>
          <target state="new">The flow discussed below assumes that a user has been authenticated on another application (such as a native application), and their user identity has been used to acquire an access token to the first-tier web API.</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The native application sends the access token to the first-tier web API.</source>
          <target state="new">The native application sends the access token to the first-tier web API.</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The first-tier web API sends a request to Azure AD’s token endpoint, providing its client ID and credentials, as well as the user’s access token.</source>
          <target state="new">The first-tier web API sends a request to Azure AD’s token endpoint, providing its client ID and credentials, as well as the user’s access token.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>In addition, the request is sent with an on_behalf_of parameter that indicates the web API is requesting new tokens to call a downstream web API on behalf of the original user.</source>
          <target state="new">In addition, the request is sent with an on_behalf_of parameter that indicates the web API is requesting new tokens to call a downstream web API on behalf of the original user.</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Azure AD verifies that the first-tier web API has permissions to access the second-tier web API and validates the request, returning a JWT access token and a JWT refresh token to the first-tier web API.</source>
          <target state="new">Azure AD verifies that the first-tier web API has permissions to access the second-tier web API and validates the request, returning a JWT access token and a JWT refresh token to the first-tier web API.</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Over HTTPS, the first-tier web API then calls the second-tier web API by appending the token string in the Authorization header in the request.</source>
          <target state="new">Over HTTPS, the first-tier web API then calls the second-tier web API by appending the token string in the Authorization header in the request.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The first-tier web API can continue to call the second-tier web API as long as the access token and refresh tokens are valid.</source>
          <target state="new">The first-tier web API can continue to call the second-tier web API as long as the access token and refresh tokens are valid.</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
          <target state="new">Code Samples</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>See the code samples for Daemon or Server Application to Web API scenarios.</source>
          <target state="new">See the code samples for Daemon or Server Application to Web API scenarios.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>And, check back frequently -- we add new samples all the time.</source>
          <target state="new">And, check back frequently -- we add new samples all the time.</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Server or Daemon Application to Web API<ept id="p1">](active-directory-code-samples.md#server-or-daemon-application-to-web-api)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Server or Daemon Application to Web API<ept id="p1">](active-directory-code-samples.md#server-or-daemon-application-to-web-api)</ept></target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Registering</source>
          <target state="new">Registering</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Single Tenant: For both the application identity and delegated user identity cases, the daemon or server application must be registered in the same directory in Azure AD.</source>
          <target state="new">Single Tenant: For both the application identity and delegated user identity cases, the daemon or server application must be registered in the same directory in Azure AD.</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The web API can be configured to expose a set of permissions, which are used to limit the daemon or server’s access to its resources.</source>
          <target state="new">The web API can be configured to expose a set of permissions, which are used to limit the daemon or server’s access to its resources.</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If a delegated user identity type is being used, the server application needs to select the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</source>
          <target state="new">If a delegated user identity type is being used, the server application needs to select the desired permissions from the “Permissions to Other Applications” drop-down menu in the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This step is not required if the application identity type is being used.</source>
          <target state="new">This step is not required if the application identity type is being used.</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Multi-Tenant: First, the daemon or server application is configured to indicate the permissions it requires to be functional.</source>
          <target state="new">Multi-Tenant: First, the daemon or server application is configured to indicate the permissions it requires to be functional.</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</source>
          <target state="new">This list of required permissions is shown in a dialog when a user or administrator in the destination directory gives consent to the application, which makes it available to their organization.</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Some applications require just user-level permissions, which any user in the organization can consent to.</source>
          <target state="new">Some applications require just user-level permissions, which any user in the organization can consent to.</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Other applications require administrator-level permissions, which a user in the organization cannot consent to.</source>
          <target state="new">Other applications require administrator-level permissions, which a user in the organization cannot consent to.</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Only a directory administrator can give consent to applications that require this level of permissions.</source>
          <target state="new">Only a directory administrator can give consent to applications that require this level of permissions.</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>When the user or administrator consents, both of the web APIs registered in their directory.</source>
          <target state="new">When the user or administrator consents, both of the web APIs registered in their directory.</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Token Expiration</source>
          <target state="new">Token Expiration</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>When the first application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</source>
          <target state="new">When the first application uses its authorization code to get a JWT access token, it also receives a JWT refresh token.</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>When the access token expires, the refresh token can be used to re-authenticate the user without prompting for credentials.</source>
          <target state="new">When the access token expires, the refresh token can be used to re-authenticate the user without prompting for credentials.</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</source>
          <target state="new">This refresh token is then used to authenticate the user, which results in a new access token and refresh token.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Azure Active Directory Code Samples</source>
          <target state="new">Azure Active Directory Code Samples</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Important Information About Signing Key Rollover in Azure AD</source>
          <target state="new">Important Information About Signing Key Rollover in Azure AD</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>OAuth 2.0 in Azure AD</source>
          <target state="new">OAuth 2.0 in Azure AD</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0d1e680f265d8afa90300fbf06185026d03a41f</xliffext:olfilehash>
  </header>
</xliff>