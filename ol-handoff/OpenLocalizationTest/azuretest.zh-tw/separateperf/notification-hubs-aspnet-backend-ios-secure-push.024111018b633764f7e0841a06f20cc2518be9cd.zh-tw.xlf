<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Notification Hubs Secure Push</source>
          <target state="new">Azure Notification Hubs Secure Push</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to send secure push notifications to an iOS app from Azure.</source>
          <target state="new">Learn how to send secure push notifications to an iOS app from Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples written in Objective-C and C#.</source>
          <target state="new">Code samples written in Objective-C and C#.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure Notification Hubs Secure Push</source>
          <target state="new">Azure Notification Hubs Secure Push</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Windows Universal</source>
          <target state="new">Windows Universal</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>iOS</source>
          <target state="new">iOS</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="new">Android</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Push notification support in Microsoft Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</source>
          <target state="new">Push notification support in Microsoft Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Due to regulatory or security constraints, sometimes an application might want to include something in the notification that cannot be transmitted through the standard push notification infrastructure.</source>
          <target state="new">Due to regulatory or security constraints, sometimes an application might want to include something in the notification that cannot be transmitted through the standard push notification infrastructure.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This tutorial describes how to achieve the same experience by sending sensitive information through a secure, authenticated connection between the client device and the app backend.</source>
          <target state="new">This tutorial describes how to achieve the same experience by sending sensitive information through a secure, authenticated connection between the client device and the app backend.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>At a high level, the flow is as follows:</source>
          <target state="new">At a high level, the flow is as follows:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The app back-end:</source>
          <target state="new">The app back-end:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Stores secure payload in back-end database.</source>
          <target state="new">Stores secure payload in back-end database.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Sends the ID of this notification to the device (no secure information is sent).</source>
          <target state="new">Sends the ID of this notification to the device (no secure information is sent).</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The app on the device, when receiving the notification:</source>
          <target state="new">The app on the device, when receiving the notification:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The device contacts the back-end requesting the secure payload.</source>
          <target state="new">The device contacts the back-end requesting the secure payload.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The app can show the payload as a notification on the device.</source>
          <target state="new">The app can show the payload as a notification on the device.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is important to note that in the preceding flow (and in this tutorial), we assume that the device stores an authentication token in local storage, after the user logs in.</source>
          <target state="new">It is important to note that in the preceding flow (and in this tutorial), we assume that the device stores an authentication token in local storage, after the user logs in.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This guarantees a completely seamless experience, as the device can retrieve the notification’s secure payload using this token.</source>
          <target state="new">This guarantees a completely seamless experience, as the device can retrieve the notification’s secure payload using this token.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If your application does not store authentication tokens on the device, or if these tokens can be expired, the device app, upon receiving the notification should display a generic notification prompting the user to launch the app.</source>
          <target state="new">If your application does not store authentication tokens on the device, or if these tokens can be expired, the device app, upon receiving the notification should display a generic notification prompting the user to launch the app.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The app then authenticates the user and shows the notification payload.</source>
          <target state="new">The app then authenticates the user and shows the notification payload.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This Secure Push tutorial shows how to send a push notification securely.</source>
          <target state="new">This Secure Push tutorial shows how to send a push notification securely.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The tutorial builds on the <bpt id="p1">**</bpt>Notify Users<ept id="p1">**</ept> tutorial, so you should complete the steps in that tutorial first.</source>
          <target state="new">The tutorial builds on the <bpt id="p1">**</bpt>Notify Users<ept id="p1">**</ept> tutorial, so you should complete the steps in that tutorial first.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial assumes that you have created and configured your notification hub as described in <bpt id="p1">[</bpt>Getting Started with Notification Hubs (iOS)<ept id="p1">](notification-hubs-ios-get-started.md)</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial assumes that you have created and configured your notification hub as described in <bpt id="p1">[</bpt>Getting Started with Notification Hubs (iOS)<ept id="p1">](notification-hubs-ios-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Modify the iOS project</source>
          <target state="new">Modify the iOS project</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Now that you modified your app back-end to send just the <bpt id="p1">*</bpt>id<ept id="p1">*</ept> of a notification, you have to change your iOS app to handle that notification and call back your back-end to retrieve the secure message to be displayed.</source>
          <target state="new">Now that you modified your app back-end to send just the <bpt id="p1">*</bpt>id<ept id="p1">*</ept> of a notification, you have to change your iOS app to handle that notification and call back your back-end to retrieve the secure message to be displayed.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To achieve this goal, we have to write the logic to retrieve the secure content from the app back-end.</source>
          <target state="new">To achieve this goal, we have to write the logic to retrieve the secure content from the app back-end.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept>, make sure the app registers for silent notifications so it processes the notification id sent from the backend.</source>
          <target state="new">In <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept>, make sure the app registers for silent notifications so it processes the notification id sent from the backend.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>UIRemoteNotificationTypeNewsstandContentAvailability<ept id="p1">**</ept> option in didFinishLaunchingWithOptions:</source>
          <target state="new">Add the <bpt id="p1">**</bpt>UIRemoteNotificationTypeNewsstandContentAvailability<ept id="p1">**</ept> option in didFinishLaunchingWithOptions:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In your <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept> add an implementation section at the top with the following declaration:</source>
          <target state="new">In your <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept> add an implementation section at the top with the following declaration:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Then add in the implementation section the following code, substituting the placeholder <ph id="ph1">`{back-end endpoint}`</ph> with the endpoint for your back-end obtained previously:</source>
          <target state="new">Then add in the implementation section the following code, substituting the placeholder <ph id="ph1">`{back-end endpoint}`</ph> with the endpoint for your back-end obtained previously:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now we have to handle the incoming notification and use the method above to retrieve the content to display.</source>
          <target state="new">Now we have to handle the incoming notification and use the method above to retrieve the content to display.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>First, we have to enable your iOS app to run in the background when receiving a push notification.</source>
          <target state="new">First, we have to enable your iOS app to run in the background when receiving a push notification.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>XCode<ept id="p1">**</ept>, select your app project on the left panel, then click your main app target in the <bpt id="p2">**</bpt>Targets<ept id="p2">**</ept> section from the central pane.</source>
          <target state="new">In <bpt id="p1">**</bpt>XCode<ept id="p1">**</ept>, select your app project on the left panel, then click your main app target in the <bpt id="p2">**</bpt>Targets<ept id="p2">**</ept> section from the central pane.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Then click your <bpt id="p1">**</bpt>Capabilities<ept id="p1">**</ept> tab at the top of your central pane, and check the <bpt id="p2">**</bpt>Remote Notifications<ept id="p2">**</ept> checkbox.</source>
          <target state="new">Then click your <bpt id="p1">**</bpt>Capabilities<ept id="p1">**</ept> tab at the top of your central pane, and check the <bpt id="p2">**</bpt>Remote Notifications<ept id="p2">**</ept> checkbox.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept> add the following method to handle push notifications:</source>
          <target state="new">In <bpt id="p1">**</bpt>AppDelegate.m<ept id="p1">**</ept> add the following method to handle push notifications:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that it is preferable to handle the cases of missing authentication header property or rejection by the back-end.</source>
          <target state="new">Note that it is preferable to handle the cases of missing authentication header property or rejection by the back-end.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The specific handling of these cases depend mostly on your target user experience.</source>
          <target state="new">The specific handling of these cases depend mostly on your target user experience.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One option is to display a notification with a generic prompt for the user to authenticate to retrieve the actual notification.</source>
          <target state="new">One option is to display a notification with a generic prompt for the user to authenticate to retrieve the actual notification.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Run the Application</source>
          <target state="new">Run the Application</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To run the application, do the following:</source>
          <target state="new">To run the application, do the following:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).</source>
          <target state="new">In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the iOS app UI, enter a username and password.</source>
          <target state="new">In the iOS app UI, enter a username and password.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>These can be any string, but they must be the same value.</source>
          <target state="new">These can be any string, but they must be the same value.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the iOS app UI, click <bpt id="p1">**</bpt>Log in<ept id="p1">**</ept>.</source>
          <target state="new">In the iOS app UI, click <bpt id="p1">**</bpt>Log in<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Then click <bpt id="p1">**</bpt>Send push<ept id="p1">**</ept>.</source>
          <target state="new">Then click <bpt id="p1">**</bpt>Send push<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You should see the secure notification being displayed in your notification center.</source>
          <target state="new">You should see the secure notification being displayed in your notification center.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2b30c095d5ea034920d9dfd5791e75e447274cb</xliffext:olfilehash>
  </header>
</xliff>