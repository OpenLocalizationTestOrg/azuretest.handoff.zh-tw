<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to Use docker-machine with Azure</source>
          <target state="new">How to Use docker-machine with Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shows how to get up and running on Azure with Docker Machine on Ubuntu.</source>
          <target state="new">Shows how to get up and running on Azure with Docker Machine on Ubuntu.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use docker-machine with Azure</source>
          <target state="new">How to use docker-machine with Azure</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes how to use <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com/)</ept> with <bpt id="p2">[</bpt>machine<ept id="p2">](https://github.com/docker/machine)</ept> and the <bpt id="p3">[</bpt>Azure CLI<ept id="p3">](https://github.com/Azure/azure-xplat-cli)</ept> to create an Azure Virtual Machine to quickly and easily manage Linux containers from a computer running Ubuntu.</source>
          <target state="new">This topic describes how to use <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com/)</ept> with <bpt id="p2">[</bpt>machine<ept id="p2">](https://github.com/docker/machine)</ept> and the <bpt id="p3">[</bpt>Azure CLI<ept id="p3">](https://github.com/Azure/azure-xplat-cli)</ept> to create an Azure Virtual Machine to quickly and easily manage Linux containers from a computer running Ubuntu.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To demonstrate, the tutorial shows how to deploy both the <bpt id="p1">[</bpt>busybox Docker Hub image<ept id="p1">](https://registry.hub.docker.com/_/busybox/)</ept> image and also the <bpt id="p2">[</bpt>nginx Docker Hub image<ept id="p2">](https://registry.hub.docker.com/_/nginx/)</ept> and configures the container to route web requests to the nginx container.</source>
          <target state="new">To demonstrate, the tutorial shows how to deploy both the <bpt id="p1">[</bpt>busybox Docker Hub image<ept id="p1">](https://registry.hub.docker.com/_/busybox/)</ept> image and also the <bpt id="p2">[</bpt>nginx Docker Hub image<ept id="p2">](https://registry.hub.docker.com/_/nginx/)</ept> and configures the container to route web requests to the nginx container.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(The Docker <bpt id="p1">**</bpt>machine<ept id="p1">**</ept> documentation describes how to modify these instructions for other platforms.)</source>
          <target state="new">(The Docker <bpt id="p1">**</bpt>machine<ept id="p1">**</ept> documentation describes how to modify these instructions for other platforms.)</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are some prerequisites for completing this tutorial.</source>
          <target state="new">There are some prerequisites for completing this tutorial.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You will need to install the following:</source>
          <target state="new">You will need to install the following:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>npm<ept id="p1">](https://docs.npmjs.com/)</ept> and <bpt id="p2">[</bpt>Node.js<ept id="p2">](http://nodejs.org/)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>npm<ept id="p1">](https://docs.npmjs.com/)</ept> and <bpt id="p2">[</bpt>Node.js<ept id="p2">](http://nodejs.org/)</ept></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Azure CLI</source>
          <target state="new">The Azure CLI</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>Docker client<ept id="p1">](https://docs.docker.com/installation/)</ept></source>
          <target state="new">A <bpt id="p1">[</bpt>Docker client<ept id="p1">](https://docs.docker.com/installation/)</ept></target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you install those items in that order, your Ubuntu computer will be ready for the tutorial.</source>
          <target state="new">If you install those items in that order, your Ubuntu computer will be ready for the tutorial.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(This tutorial should be largely the same for any other dpkg-based distro such as Debian.</source>
          <target state="new">(This tutorial should be largely the same for any other dpkg-based distro such as Debian.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let us know in comments if you discover extra requirements or steps.)</source>
          <target state="new">Let us know in comments if you discover extra requirements or steps.)</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Get docker-machine -- or build it</source>
          <target state="new">Get docker-machine -- or build it</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The quickest way to get going with <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> is to download the appropriate release directly from the <bpt id="p2">[</bpt>release share<ept id="p2">](https://github.com/docker/machine/releases)</ept>.</source>
          <target state="new">The quickest way to get going with <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> is to download the appropriate release directly from the <bpt id="p2">[</bpt>release share<ept id="p2">](https://github.com/docker/machine/releases)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The client computer in this tutorial was running Ubuntu on an x64 computer, so the <bpt id="p1">**</bpt>docker-machine_linux-amd64<ept id="p1">**</ept> image is the one used.</source>
          <target state="new">The client computer in this tutorial was running Ubuntu on an x64 computer, so the <bpt id="p1">**</bpt>docker-machine_linux-amd64<ept id="p1">**</ept> image is the one used.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also build your <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> yourself by following the steps for <bpt id="p2">[</bpt>contributing to machine<ept id="p2">](https://github.com/docker/machine#contributing)</ept>.</source>
          <target state="new">You can also build your <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> yourself by following the steps for <bpt id="p2">[</bpt>contributing to machine<ept id="p2">](https://github.com/docker/machine#contributing)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You should be ready to download as much as 1 GB or more to perform the build, but by doing so you can customize your experience precisely the way you want.</source>
          <target state="new">You should be ready to download as much as 1 GB or more to perform the build, but by doing so you can customize your experience precisely the way you want.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You might well create a <bpt id="p1">[</bpt>symbolic link<ept id="p1">](http://en.wikipedia.org/wiki/Symbolic_link)</ept> to your platform version of it, but this tutorial uses the binary directly to demonstrate behavior very clearly.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You might well create a <bpt id="p1">[</bpt>symbolic link<ept id="p1">](http://en.wikipedia.org/wiki/Symbolic_link)</ept> to your platform version of it, but this tutorial uses the binary directly to demonstrate behavior very clearly.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The result is that instead of commands such as <ph id="ph1">`docker-machine env`</ph> as the <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> documentation shows, this tutorial  uses <ph id="ph2">`docker-machine_linux-amd64 env`</ph> instead.</source>
          <target state="new">The result is that instead of commands such as <ph id="ph1">`docker-machine env`</ph> as the <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> documentation shows, this tutorial  uses <ph id="ph2">`docker-machine_linux-amd64 env`</ph> instead.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Whether you create a symlink or just use the binary name directly is up to you, but if you change the name you are using, remember to modify the name in the instructions below.</source>
          <target state="new">Whether you create a symlink or just use the binary name directly is up to you, but if you change the name you are using, remember to modify the name in the instructions below.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Whichever method you choose, you must either call in the binary directly on the command line or place the binary the path such as <bpt id="p1">**</bpt>/usr/local/bin<ept id="p1">**</ept>.</source>
          <target state="new">Whichever method you choose, you must either call in the binary directly on the command line or place the binary the path such as <bpt id="p1">**</bpt>/usr/local/bin<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remember to make sure it is marked as executable by typing <ph id="ph1">`chmod +x`</ph> &amp;lt;<bpt id="p1">*</bpt><ph id="ph2">`binaryName`</ph><ept id="p1">*</ept>&amp;gt; where &amp;lt;<bpt id="p2">*</bpt><ph id="ph3">`binaryName`</ph><ept id="p2">*</ept>&amp;gt; is the name of your Docker machine executable.</source>
          <target state="new">Remember to make sure it is marked as executable by typing <ph id="ph1">`chmod +x`</ph> &amp;lt;<bpt id="p1">*</bpt><ph id="ph2">`binaryName`</ph><ept id="p1">*</ept>&amp;gt; where &amp;lt;<bpt id="p2">*</bpt><ph id="ph3">`binaryName`</ph><ept id="p2">*</ept>&amp;gt; is the name of your Docker machine executable.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This tutorial uses <bpt id="p1">**</bpt>docker-machine_linux-amd64<ept id="p1">**</ept>.</source>
          <target state="new">This tutorial uses <bpt id="p1">**</bpt>docker-machine_linux-amd64<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create the certificate and key files for docker, machine, and Azure</source>
          <target state="new">Create the certificate and key files for docker, machine, and Azure</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Now you must create the certificate and key files that Azure needs to confirm your identity and permissions as well as those <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> needs to communicate with your Azure Virtual Machine to create and manage containers remotely.</source>
          <target state="new">Now you must create the certificate and key files that Azure needs to confirm your identity and permissions as well as those <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> needs to communicate with your Azure Virtual Machine to create and manage containers remotely.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you already have these files in a directory -- perhaps for use with docker -- you can reuse them.</source>
          <target state="new">If you already have these files in a directory -- perhaps for use with docker -- you can reuse them.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, the best practice for testing <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> would be to create them in a separate directory and point docker-machine at them.</source>
          <target state="new">However, the best practice for testing <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> would be to create them in a separate directory and point docker-machine at them.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If you end up trying <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> over and over again, be sure to either reuse the same certificate and key files.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If you end up trying <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> over and over again, be sure to either reuse the same certificate and key files.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> creates a set of client certs as well -- everything it creates can be examined in <ph id="ph1">`~/.docker/machine`</ph>.</source>
          <target state="new"><bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> creates a set of client certs as well -- everything it creates can be examined in <ph id="ph1">`~/.docker/machine`</ph>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you move those certs to another computer, you'll need to move the <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> certificate folders as well.</source>
          <target state="new">If you move those certs to another computer, you'll need to move the <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> certificate folders as well.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This makes a difference if you're going to use <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> on another platform, for example, just to see how it all works.</source>
          <target state="new">This makes a difference if you're going to use <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> on another platform, for example, just to see how it all works.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you have experience with Linux distributions, you may already have these files available to use on your computer in a specific place, and the <bpt id="p1">[</bpt>Docker HTTPS documentation explains these steps well<ept id="p1">](https://docs.docker.com/articles/https/)</ept>.</source>
          <target state="new">If you have experience with Linux distributions, you may already have these files available to use on your computer in a specific place, and the <bpt id="p1">[</bpt>Docker HTTPS documentation explains these steps well<ept id="p1">](https://docs.docker.com/articles/https/)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, the following is the simplest form of this step.</source>
          <target state="new">However, the following is the simplest form of this step.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create a local folder and on the command-line, navigate to that folder and type:</source>
          <target state="new">Create a local folder and on the command-line, navigate to that folder and type:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Be ready here to enter the export password for your certificate and capture it for future usage.</source>
          <target state="new">Be ready here to enter the export password for your certificate and capture it for future usage.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Then type:</source>
          <target state="new">Then type:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Upload your certificate's .cer file to Azure.</source>
          <target state="new">Upload your certificate's .cer file to Azure.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](https://manage.windowsazure.com)</ept>, click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> in the bottom left of the service area (shown below)</source>
          <target state="new">In the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](https://manage.windowsazure.com)</ept>, click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> in the bottom left of the service area (shown below)</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>and then click <bpt id="p1">**</bpt>Management Certificates<ept id="p1">**</ept>:</source>
          <target state="new">and then click <bpt id="p1">**</bpt>Management Certificates<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>and then <bpt id="p1">**</bpt>Upload<ept id="p1">**</ept> (at the bottom of the page) <ph id="ph1">![][uploaditem]</ph> to upload the <bpt id="p2">**</bpt>mycert.cer<ept id="p2">**</ept> file you created in the previous step.</source>
          <target state="new">and then <bpt id="p1">**</bpt>Upload<ept id="p1">**</ept> (at the bottom of the page) <ph id="ph1">![][uploaditem]</ph> to upload the <bpt id="p2">**</bpt>mycert.cer<ept id="p2">**</ept> file you created in the previous step.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the same <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> pane in the portal, click <bpt id="p2">**</bpt>Subscriptions<ept id="p2">**</ept> and capture the subscription ID to use when creating your VM, because you'll use it in the next step.</source>
          <target state="new">In the same <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> pane in the portal, click <bpt id="p2">**</bpt>Subscriptions<ept id="p2">**</ept> and capture the subscription ID to use when creating your VM, because you'll use it in the next step.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(You can also locate the subscription id on the command line using the Azure CLI command <ph id="ph1">`azure account list`</ph>, which displays the subscription id for each subscription you have in the account.)</source>
          <target state="new">(You can also locate the subscription id on the command line using the Azure CLI command <ph id="ph1">`azure account list`</ph>, which displays the subscription id for each subscription you have in the account.)</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Create a docker host VM on Azure using the <bpt id="p1">**</bpt>docker-machine create<ept id="p1">**</ept> command.</source>
          <target state="new">Create a docker host VM on Azure using the <bpt id="p1">**</bpt>docker-machine create<ept id="p1">**</ept> command.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command requires the subscription ID you just captured in the previous step and the path to the <bpt id="p1">**</bpt>.pem<ept id="p1">**</ept> file you created in step 1.</source>
          <target state="new">The command requires the subscription ID you just captured in the previous step and the path to the <bpt id="p1">**</bpt>.pem<ept id="p1">**</ept> file you created in step 1.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This topic uses "machine-name" as the Azure Cloud Service (and your VM) name, but you should replace that with your own choice and remember to use your cloud service name in any other step that requires the vm name.</source>
          <target state="new">This topic uses "machine-name" as the Azure Cloud Service (and your VM) name, but you should replace that with your own choice and remember to use your cloud service name in any other step that requires the vm name.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>(Remember that in this example, we are using the full binary name and not a <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> symlink.)</source>
          <target state="new">(Remember that in this example, we are using the full binary name and not a <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> symlink.)</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As the first two steps require the creation of a new VM and the loading of the Linux Azure agent as well as the updating of the new VM, you should see something like the following.</source>
          <target state="new">As the first two steps require the creation of a new VM and the loading of the Linux Azure agent as well as the updating of the new VM, you should see something like the following.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Because a VM is being created, it may take a few minutes to be in a ready state.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Because a VM is being created, it may take a few minutes to be in a ready state.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>While you're waiting, you can check the state of your new Docker host by typing <ph id="ph1">`azure vm list`</ph> using the Azure CLI until you see your VMs with the <bpt id="p1">**</bpt>ReadyRole<ept id="p1">**</ept> status.</source>
          <target state="new">While you're waiting, you can check the state of your new Docker host by typing <ph id="ph1">`azure vm list`</ph> using the Azure CLI until you see your VMs with the <bpt id="p1">**</bpt>ReadyRole<ept id="p1">**</ept> status.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Set the docker and machine environment variables for the terminal session.</source>
          <target state="new">Set the docker and machine environment variables for the terminal session.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The last line of feedback suggest that you immediately run the <bpt id="p1">**</bpt>env<ept id="p1">**</ept> command to export the environment variables necessary to use your docker client directly with a specific machine.</source>
          <target state="new">The last line of feedback suggest that you immediately run the <bpt id="p1">**</bpt>env<ept id="p1">**</ept> command to export the environment variables necessary to use your docker client directly with a specific machine.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Once you do so, you do not need any special commands to use your local docker client to connect to the VM that Docker <bpt id="p1">**</bpt>machine<ept id="p1">**</ept> created.</source>
          <target state="new">Once you do so, you do not need any special commands to use your local docker client to connect to the VM that Docker <bpt id="p1">**</bpt>machine<ept id="p1">**</ept> created.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial shows <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> creating one VM.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial shows <bpt id="p1">**</bpt>docker-machine<ept id="p1">**</ept> creating one VM.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>However, you can repeat the steps to create as many machines as you want.</source>
          <target state="new">However, you can repeat the steps to create as many machines as you want.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you do so, the best way to switch between VMs with docker is to use the <bpt id="p1">**</bpt>env<ept id="p1">**</ept> command inline to set the <bpt id="p2">**</bpt>docker<ept id="p2">**</ept> environment variables for each individual command.</source>
          <target state="new">If you do so, the best way to switch between VMs with docker is to use the <bpt id="p1">**</bpt>env<ept id="p1">**</ept> command inline to set the <bpt id="p2">**</bpt>docker<ept id="p2">**</ept> environment variables for each individual command.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, to use <bpt id="p1">**</bpt>docker info<ept id="p1">**</ept> with a different VM, you can type <ph id="ph1">`docker $(docker-machine env &lt;VM name&gt;) info`</ph> and the <bpt id="p2">**</bpt>env<ept id="p2">**</ept> command fills in the docker connection information to use with that VM.</source>
          <target state="new">For example, to use <bpt id="p1">**</bpt>docker info<ept id="p1">**</ept> with a different VM, you can type <ph id="ph1">`docker $(docker-machine env &lt;VM name&gt;) info`</ph> and the <bpt id="p2">**</bpt>env<ept id="p2">**</ept> command fills in the docker connection information to use with that VM.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>We're done.</source>
          <target state="new">We're done.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Let's run some applications remotely using docker and images from the Docker Hub.</source>
          <target state="new">Let's run some applications remotely using docker and images from the Docker Hub.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can now use docker in the normal way to create an application in the container.</source>
          <target state="new">You can now use docker in the normal way to create an application in the container.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The easiest to demonstrate is <bpt id="p1">[</bpt>busybox<ept id="p1">](https://registry.hub.docker.com/_/busybox/)</ept>:</source>
          <target state="new">The easiest to demonstrate is <bpt id="p1">[</bpt>busybox<ept id="p1">](https://registry.hub.docker.com/_/busybox/)</ept>:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, you may want to create an application that you can see immediately on the internet, such as the <bpt id="p1">[</bpt>nginx<ept id="p1">](https://registry.hub.docker.com/_/nginx/)</ept> from the <bpt id="p2">[</bpt>Docker Hub<ept id="p2">](https://registry.hub.docker.com/)</ept>.</source>
          <target state="new">However, you may want to create an application that you can see immediately on the internet, such as the <bpt id="p1">[</bpt>nginx<ept id="p1">](https://registry.hub.docker.com/_/nginx/)</ept> from the <bpt id="p2">[</bpt>Docker Hub<ept id="p2">](https://registry.hub.docker.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Remember to use the <bpt id="p1">**</bpt>-P<ept id="p1">**</ept> option to have <bpt id="p2">**</bpt>docker<ept id="p2">**</ept> assign random ports to the image, and <bpt id="p3">**</bpt>-d<ept id="p3">**</ept> to ensure that the container runs in the background continuously.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Remember to use the <bpt id="p1">**</bpt>-P<ept id="p1">**</ept> option to have <bpt id="p2">**</bpt>docker<ept id="p2">**</ept> assign random ports to the image, and <bpt id="p3">**</bpt>-d<ept id="p3">**</ept> to ensure that the container runs in the background continuously.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(If you forget, you'll start nginx and then it will immediately shut down.</source>
          <target state="new">(If you forget, you'll start nginx and then it will immediately shut down.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Don't forget!)</source>
          <target state="new">Don't forget!)</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To see it from the internet, create a public endpoint on port 80 for the Azure VM and map that port to the nginx container's port.</source>
          <target state="new">To see it from the internet, create a public endpoint on port 80 for the Azure VM and map that port to the nginx container's port.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>First, use <ph id="ph1">`docker ps -a`</ph> to locate the container and find which ports <bpt id="p1">**</bpt>docker<ept id="p1">**</ept> has assigned to the container's port 80.</source>
          <target state="new">First, use <ph id="ph1">`docker ps -a`</ph> to locate the container and find which ports <bpt id="p1">**</bpt>docker<ept id="p1">**</ept> has assigned to the container's port 80.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>(Below the displayed information is edited to show only port information; you'll see more.)</source>
          <target state="new">(Below the displayed information is edited to show only port information; you'll see more.)</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>We can see that docker has assigned the container's port 80 to the VM's port 49153.</source>
          <target state="new">We can see that docker has assigned the container's port 80 to the VM's port 49153.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>We can now use the Azure CLI to map the external Cloud Service's public port 80 to port 49153 on the VM.</source>
          <target state="new">We can now use the Azure CLI to map the external Cloud Service's public port 80 to port 49153 on the VM.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Docker then ensures that inbound tcp traffic on VM port 49153 is routed to the nginx container.</source>
          <target state="new">Docker then ensures that inbound tcp traffic on VM port 49153 is routed to the nginx container.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Open your favorite browser and have a look.</source>
          <target state="new">Open your favorite browser and have a look.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
##</ph> Next steps
Go to the <bpt id="p1">[</bpt><ept id="p1">Docker user guide](https://docs.docker.com/userguide/)</ept> and create some applications on Microsoft Azure.</source>
          <target state="new"><ph id="ph1">
##</ph> Next steps
Go to the <bpt id="p1">[</bpt><ept id="p1">Docker user guide](https://docs.docker.com/userguide/)</ept> and create some applications on Microsoft Azure.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Or, go play with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>docker<ept id="p2">**</ept> and swarm<ept id="p1">](https://github.com/docker/swarm)</ept> on Azure](virtual-machines-docker-swarm) and see how swarm can be used with docker and Azure.</source>
          <target state="new">Or, go play with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>docker<ept id="p2">**</ept> and swarm<ept id="p1">](https://github.com/docker/swarm)</ept> on Azure](virtual-machines-docker-swarm) and see how swarm can be used with docker and Azure.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85e6907f869ad530ab014d6035d05b1e6e04ac0c</xliffext:olfilehash>
  </header>
</xliff>