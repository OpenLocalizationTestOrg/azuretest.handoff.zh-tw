<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Service Communication Model Overview</source>
          <target state="new">Service Communication Model Overview</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes the basics of Communication model supported by the Reliable Service's api.</source>
          <target state="new">This article describes the basics of Communication model supported by the Reliable Service's api.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service Communication Model</source>
          <target state="new">Service Communication Model</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Reliable Services programming model allows service authors to specify the communication mechanism they want to use to expose their service endpoints and also provides abstractions which clients can use to discover and communicate with the service endpoint.</source>
          <target state="new">The Reliable Services programming model allows service authors to specify the communication mechanism they want to use to expose their service endpoints and also provides abstractions which clients can use to discover and communicate with the service endpoint.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Setting up the Service communication stack</source>
          <target state="new">Setting up the Service communication stack</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reliable Services API allows service authors to plugin the communication stack of their choice in the service by implementing the following method in their service,</source>
          <target state="new">Reliable Services API allows service authors to plugin the communication stack of their choice in the service by implementing the following method in their service,</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ICommunicationListener`</ph> interface defines the interface that must be implemented by the communication listener for a service.</source>
          <target state="new">The <ph id="ph1">`ICommunicationListener`</ph> interface defines the interface that must be implemented by the communication listener for a service.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The endpoints that are required for the service are described via the <bpt id="p1">[</bpt>Service manifest<ept id="p1">](service-fabric-application-model.md)</ept> under the Endpoints section.</source>
          <target state="new">The endpoints that are required for the service are described via the <bpt id="p1">[</bpt>Service manifest<ept id="p1">](service-fabric-application-model.md)</ept> under the Endpoints section.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The communication listener can access the endpoint resources allocated to it from the <ph id="ph1">`CodePackageActivationContext`</ph> in the <ph id="ph2">`ServiceInitializationParameters`</ph>, and start listening for requests when it is opened.</source>
          <target state="new">The communication listener can access the endpoint resources allocated to it from the <ph id="ph1">`CodePackageActivationContext`</ph> in the <ph id="ph2">`ServiceInitializationParameters`</ph>, and start listening for requests when it is opened.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The Endpoints resources are common to the entire service package and are allocated by Service Fabric when the service package is activated.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The Endpoints resources are common to the entire service package and are allocated by Service Fabric when the service package is activated.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>So all the replicas hosted in the same ServiceHost share the same port.</source>
          <target state="new">So all the replicas hosted in the same ServiceHost share the same port.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This means that the communication listener should support port sharing.</source>
          <target state="new">This means that the communication listener should support port sharing.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The recommended way of doing this, is for the communication listener to use the partition Id and replica/instance Id when generating the listen address.</source>
          <target state="new">The recommended way of doing this, is for the communication listener to use the partition Id and replica/instance Id when generating the listen address.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Client to Service Communication</source>
          <target state="new">Client to Service Communication</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Reliable Services API provides the following abstractions which make writing clients for communicating with Services easy.</source>
          <target state="new">Reliable Services API provides the following abstractions which make writing clients for communicating with Services easy.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ServicePartitionResolver</source>
          <target state="new">ServicePartitionResolver</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>ServicePartitionResolver class helps the client to determine the endpoint of a Service Fabric service at runtime.</source>
          <target state="new">ServicePartitionResolver class helps the client to determine the endpoint of a Service Fabric service at runtime.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> The process of determining the endpoint of a service is referred to as Service Endpoint Resolution in Service Fabric terminology.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> The process of determining the endpoint of a service is referred to as Service Endpoint Resolution in Service Fabric terminology.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> FabricClient is the object that is used to communicate to the Service Fabric cluster for various management operations on the Service Fabric cluster.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> FabricClient is the object that is used to communicate to the Service Fabric cluster for various management operations on the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Typically client code need not work with <ph id="ph1">`ServicePartitionResolver`</ph> directly.</source>
          <target state="new">Typically client code need not work with <ph id="ph1">`ServicePartitionResolver`</ph> directly.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is created and passed on to other helper classes in the Reliable Service's API, which internally use the resolver and help the client communicate with the service.</source>
          <target state="new">It is created and passed on to other helper classes in the Reliable Service's API, which internally use the resolver and help the client communicate with the service.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CommunicationClientFactory</source>
          <target state="new">CommunicationClientFactory</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ICommunicationClientFactory`</ph> defines the base interface implemented by a communication client factory that produces clients that can talk to a ServiceFabric service.</source>
          <target state="new"><ph id="ph1">`ICommunicationClientFactory`</ph> defines the base interface implemented by a communication client factory that produces clients that can talk to a ServiceFabric service.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The implementation of the CommunicationClientFactory will depend on the communication stack used by the Service Fabric service to which the client wants to communicate to.</source>
          <target state="new">The implementation of the CommunicationClientFactory will depend on the communication stack used by the Service Fabric service to which the client wants to communicate to.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reliable Service's API provides a CommunicationClientFactoryBase</source>
          <target state="new">Reliable Service's API provides a CommunicationClientFactoryBase</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>which provides a base implementation of this <ph id="ph1">`ICommunicationClientFactory`</ph> interface and performs tasks which are common for all the communication stacks.(like using a <ph id="ph2">`ServicePartitionResolver`</ph> to determine the service endpoint).</source>
          <target state="new">which provides a base implementation of this <ph id="ph1">`ICommunicationClientFactory`</ph> interface and performs tasks which are common for all the communication stacks.(like using a <ph id="ph2">`ServicePartitionResolver`</ph> to determine the service endpoint).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Clients usually implement the abstract CommunicationClientFactoryBase class to handle communication stack specific logic.</source>
          <target state="new">Clients usually implement the abstract CommunicationClientFactoryBase class to handle communication stack specific logic.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ServicePartitionClient</source>
          <target state="new">ServicePartitionClient</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ServicePartitionClient`</ph> uses the CommunicationClientFactory(and internally the ServicePartitionResolver) and helps in communicating with the service by handling retries for common communication and Service Fabric Transient exceptions.</source>
          <target state="new"><ph id="ph1">`ServicePartitionClient`</ph> uses the CommunicationClientFactory(and internally the ServicePartitionResolver) and helps in communicating with the service by handling retries for common communication and Service Fabric Transient exceptions.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A typical usage pattern would look like this,</source>
          <target state="new">A typical usage pattern would look like this,</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Default communication stack provided by the Reliable Services Framework</source>
          <target state="new">Default communication stack provided by the Reliable Services Framework</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>WCF based communication stack provided by the Reliable Services Framework</source>
          <target state="new">WCF based communication stack provided by the Reliable Services Framework</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Writing a Service using Reliable Services API that uses WebAPI communication stack</source>
          <target state="new">Writing a Service using Reliable Services API that uses WebAPI communication stack</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00fac782edcc64b6c612daf01fe4e059f33f6852</xliffext:olfilehash>
  </header>
</xliff>