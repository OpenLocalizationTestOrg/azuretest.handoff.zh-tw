<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Get Started with Docker and Compose on an Azure virtual machine</source>
          <target state="new">Get Started with Docker and Compose on an Azure virtual machine</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Quick introduction to working with Compose and Docker on Azure</source>
          <target state="new">Quick introduction to working with Compose and Docker on Azure</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get Started with Docker and Compose on an Azure virtual machine</source>
          <target state="new">Get Started with Docker and Compose on an Azure virtual machine</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article shows you how to get started using Docker and <bpt id="p1">[</bpt>Compose<ept id="p1">](http://github.com/docker/compose)</ept> to define and run a complex application on a Linux virtual machine in Azure.</source>
          <target state="new">This article shows you how to get started using Docker and <bpt id="p1">[</bpt>Compose<ept id="p1">](http://github.com/docker/compose)</ept> to define and run a complex application on a Linux virtual machine in Azure.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With Compose (the successor to <bpt id="p1">*</bpt>Fig<ept id="p1">*</ept>), you use a simple text file to define an application consisting of multiple Docker containers.</source>
          <target state="new">With Compose (the successor to <bpt id="p1">*</bpt>Fig<ept id="p1">*</ept>), you use a simple text file to define an application consisting of multiple Docker containers.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Then you spin up your application in a single command which does everything to get it running on the VM.</source>
          <target state="new">Then you spin up your application in a single command which does everything to get it running on the VM.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As an example, this article shows you how to quickly set up a WordPress blog with a backend MariaDB SQL database, but you can also use Compose to set up more complex applications.</source>
          <target state="new">As an example, this article shows you how to quickly set up a WordPress blog with a backend MariaDB SQL database, but you can also use Compose to set up more complex applications.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you're new to Docker and containers, see the <bpt id="p1">[</bpt>Docker high level whiteboard<ept id="p1">](http://azure.microsoft.com/documentation/videos/docker-high-level-whiteboard/)</ept>.</source>
          <target state="new">If you're new to Docker and containers, see the <bpt id="p1">[</bpt>Docker high level whiteboard<ept id="p1">](http://azure.microsoft.com/documentation/videos/docker-high-level-whiteboard/)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Step 1: Set up a Linux VM as a Docker host</source>
          <target state="new">Step 1: Set up a Linux VM as a Docker host</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use a variety of Azure procedures and available images in the Azure Markeplace to create a Linux VM and set it up as a Docker host.</source>
          <target state="new">You can use a variety of Azure procedures and available images in the Azure Markeplace to create a Linux VM and set it up as a Docker host.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, see <bpt id="p1">[</bpt>Using the Docker VM Extension from the Azure Command-Line Interface<ept id="p1">](virtual-machines-docker-with-xplat-cli.md)</ept> for a quick procedure to create an Ubuntu VM with the Docker VM extension.</source>
          <target state="new">For example, see <bpt id="p1">[</bpt>Using the Docker VM Extension from the Azure Command-Line Interface<ept id="p1">](virtual-machines-docker-with-xplat-cli.md)</ept> for a quick procedure to create an Ubuntu VM with the Docker VM extension.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you use the Docker VM extension, your VM is automatically set up as a Docker host.</source>
          <target state="new">When you use the Docker VM extension, your VM is automatically set up as a Docker host.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The example in that article shows you how to use the the <bpt id="p1">[</bpt>Azure command-line interface for Mac, Linux, and Windows<ept id="p1">](../xplat-cli.md)</ept> (the Azure CLI) in Service Management mode to create the VM.</source>
          <target state="new">The example in that article shows you how to use the the <bpt id="p1">[</bpt>Azure command-line interface for Mac, Linux, and Windows<ept id="p1">](../xplat-cli.md)</ept> (the Azure CLI) in Service Management mode to create the VM.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Step 2: Install Compose</source>
          <target state="new">Step 2: Install Compose</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After the Linux VM is running with Docker, connect to it from your client computer using SSH.</source>
          <target state="new">After the Linux VM is running with Docker, connect to it from your client computer using SSH.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you need to, install <bpt id="p1">[</bpt>Compose<ept id="p1">](https://github.com/docker/compose/blob/882dc673ce84b0b29cd59b6815cb93f74a6c4134/docs/install.md)</ept> by running the following two commands.</source>
          <target state="new">If you need to, install <bpt id="p1">[</bpt>Compose<ept id="p1">](https://github.com/docker/compose/blob/882dc673ce84b0b29cd59b6815cb93f74a6c4134/docs/install.md)</ept> by running the following two commands.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> If you used the Docker VM extension to create your VM, Compose is already installed for you.</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> If you used the Docker VM extension to create your VM, Compose is already installed for you.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Skip these commands and go to Step 3.</source>
          <target state="new">Skip these commands and go to Step 3.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You only need to install Compose if you installed Docker on the VM yourself.</source>
          <target state="new">You only need to install Compose if you installed Docker on the VM yourself.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>If you get a "Permission denied" error, your /usr/local/bin directory on the VM probably isn't writable and you'll need to install Compose as the superuser.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>If you get a "Permission denied" error, your /usr/local/bin directory on the VM probably isn't writable and you'll need to install Compose as the superuser.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`sudo -i`</ph>, then the two commands above, then <ph id="ph2">`exit`</ph>.</source>
          <target state="new">Run <ph id="ph1">`sudo -i`</ph>, then the two commands above, then <ph id="ph2">`exit`</ph>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To test your installation of Compose, run the following command.</source>
          <target state="new">To test your installation of Compose, run the following command.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You will see output similar to</source>
          <target state="new">You will see output similar to</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Step 3: Create a docker-compose.yml configuration file</source>
          <target state="new">Step 3: Create a docker-compose.yml configuration file</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next you'll create a <ph id="ph1">`docker-compose.yml`</ph> file, which is just a text configuration file, to define the Docker containers to run on the VM.</source>
          <target state="new">Next you'll create a <ph id="ph1">`docker-compose.yml`</ph> file, which is just a text configuration file, to define the Docker containers to run on the VM.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The file specifies the image to run on each container (or it could be a build from a Dockerfile), necessary environment variables and dependencies, ports, links between containers, and so on.</source>
          <target state="new">The file specifies the image to run on each container (or it could be a build from a Dockerfile), necessary environment variables and dependencies, ports, links between containers, and so on.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For details on yml file syntax, see <bpt id="p1">[</bpt>docker-compose.yml reference<ept id="p1">](http://docs.docker.com/compose/yml/)</ept>.</source>
          <target state="new">For details on yml file syntax, see <bpt id="p1">[</bpt>docker-compose.yml reference<ept id="p1">](http://docs.docker.com/compose/yml/)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create a working directory on your VM, and use your favorite text editor to create <ph id="ph1">`docker-compose.yml`</ph>.</source>
          <target state="new">Create a working directory on your VM, and use your favorite text editor to create <ph id="ph1">`docker-compose.yml`</ph>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To try a simple example, copy the following text to the file.</source>
          <target state="new">To try a simple example, copy the following text to the file.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This configuration uses images from the <bpt id="p1">[</bpt>DockerHub Registry<ept id="p1">](https://registry.hub.docker.com/_/wordpress/)</ept> to install WordPress (the open source blogging and content management system) and a linked backend MariaDB SQL database.</source>
          <target state="new">This configuration uses images from the <bpt id="p1">[</bpt>DockerHub Registry<ept id="p1">](https://registry.hub.docker.com/_/wordpress/)</ept> to install WordPress (the open source blogging and content management system) and a linked backend MariaDB SQL database.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Step 4: Start the containers with Compose</source>
          <target state="new">Step 4: Start the containers with Compose</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the working directory on your VM, simply run the following command.</source>
          <target state="new">In the working directory on your VM, simply run the following command.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This starts the Docker containers specified in <ph id="ph1">`docker-compose.yml`</ph>.</source>
          <target state="new">This starts the Docker containers specified in <ph id="ph1">`docker-compose.yml`</ph>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You'll see output similar to:</source>
          <target state="new">You'll see output similar to:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Be sure to use the <bpt id="p1">**</bpt>-d<ept id="p1">**</ept> option on start-up so that the containers run in the background continuously.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Be sure to use the <bpt id="p1">**</bpt>-d<ept id="p1">**</ept> option on start-up so that the containers run in the background continuously.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To verify that the containers are up, type <ph id="ph1">`docker-compose ps`</ph>.</source>
          <target state="new">To verify that the containers are up, type <ph id="ph1">`docker-compose ps`</ph>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should see something like:</source>
          <target state="new">You should see something like:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can now connect to WordPress directly on the VM by browsing to <ph id="ph1">`http://localhost:8080`</ph>.</source>
          <target state="new">You can now connect to WordPress directly on the VM by browsing to <ph id="ph1">`http://localhost:8080`</ph>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you want to connect to the VM over the Internet, first configure an HTTP endpoint on the VM that maps public port 80 to private port 8080.</source>
          <target state="new">If you want to connect to the VM over the Internet, first configure an HTTP endpoint on the VM that maps public port 80 to private port 8080.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, in an Azure Service Management deployment, run the following Azure CLI command:</source>
          <target state="new">For example, in an Azure Service Management deployment, run the following Azure CLI command:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You should now see the WordPress start screen, where you can complete the installation and get started with the application.</source>
          <target state="new">You should now see the WordPress start screen, where you can complete the installation and get started with the application.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>![WordPress start screen][wordpress_start]</source>
          <target state="new">![WordPress start screen][wordpress_start]</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Check out the <bpt id="p1">[</bpt>Compose CLI reference<ept id="p1">](http://docs.docker.com/compose/cli/)</ept> and <bpt id="p2">[</bpt>user guide<ept id="p2">](http://docs.docker.com/compose/)</ept> for more examples of building and deploying multi-container apps.</source>
          <target state="new">Check out the <bpt id="p1">[</bpt>Compose CLI reference<ept id="p1">](http://docs.docker.com/compose/cli/)</ept> and <bpt id="p2">[</bpt>user guide<ept id="p2">](http://docs.docker.com/compose/)</ept> for more examples of building and deploying multi-container apps.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use an Azure Resource Manager template, either your own or one contributed from the <bpt id="p1">[</bpt>community<ept id="p1">](http://azure.microsoft.com/documentation/templates/)</ept>, to deploy an Azure VM with Docker and an application set up with Compose.</source>
          <target state="new">Use an Azure Resource Manager template, either your own or one contributed from the <bpt id="p1">[</bpt>community<ept id="p1">](http://azure.microsoft.com/documentation/templates/)</ept>, to deploy an Azure VM with Docker and an application set up with Compose.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Deploy a WordPress blog with Docker<ept id="p1">](https://azure.microsoft.com/documentation/templates/docker-wordpress-mysql/)</ept> template uses Docker and Compose to quickly deploy WordPress with a MySQL backend on an Ubuntu VM.</source>
          <target state="new">For example, the <bpt id="p1">[</bpt>Deploy a WordPress blog with Docker<ept id="p1">](https://azure.microsoft.com/documentation/templates/docker-wordpress-mysql/)</ept> template uses Docker and Compose to quickly deploy WordPress with a MySQL backend on an Ubuntu VM.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Try integrating Docker Compose with a <bpt id="p1">[</bpt>Docker Swarm<ept id="p1">](virtual-machines-docker-swarm.md)</ept> cluster.</source>
          <target state="new">Try integrating Docker Compose with a <bpt id="p1">[</bpt>Docker Swarm<ept id="p1">](virtual-machines-docker-swarm.md)</ept> cluster.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See</source>
          <target state="new">See</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker Compose/Swarm integration<ept id="p1">](https://github.com/docker/compose/blob/master/SWARM.md)</ept> for scenarios.</source>
          <target state="new"><bpt id="p1">[</bpt>Docker Compose/Swarm integration<ept id="p1">](https://github.com/docker/compose/blob/master/SWARM.md)</ept> for scenarios.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a678f012c3ffb51d6170086227a267532188af2c</xliffext:olfilehash>
  </header>
</xliff>