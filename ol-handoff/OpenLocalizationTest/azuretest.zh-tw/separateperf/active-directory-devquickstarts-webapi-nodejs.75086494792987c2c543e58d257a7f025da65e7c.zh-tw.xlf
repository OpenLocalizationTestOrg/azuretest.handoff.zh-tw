<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD NodeJS Getting Started | Microsoft Azure</source>
          <target state="new">Azure AD NodeJS Getting Started | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a Node.js Web API that integrates with Azure AD for authentication.</source>
          <target state="new">How to build a Node.js Web API that integrates with Azure AD for authentication.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting Started With WEB-API for Node</source>
          <target state="new">Getting Started With WEB-API for Node</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough will give you  a quick and easy way to set up a REST API Service that is integrated with  Azure Active Directory for API protection using the OAuth2 protocol.</source>
          <target state="new">This walkthrough will give you  a quick and easy way to set up a REST API Service that is integrated with  Azure Active Directory for API protection using the OAuth2 protocol.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The sample server included in the download are designed to run on any platform but target OSX and Linux.</source>
          <target state="new">The sample server included in the download are designed to run on any platform but target OSX and Linux.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By the end of this walk-through, you should be able to build a running REST API server with the following features:</source>
          <target state="new">By the end of this walk-through, you should be able to build a running REST API server with the following features:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A node.js server running an REST API interface with JSON using MongoDB as persistant storage</source>
          <target state="new">A node.js server running an REST API interface with JSON using MongoDB as persistant storage</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>REST APIs leveraging OAuth2 API protection with Bearer tokens using Azure Active Directory</source>
          <target state="new">REST APIs leveraging OAuth2 API protection with Bearer tokens using Azure Active Directory</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We've released all of the source code for this running example in GitHub under an Apache 2.0 license, so feel free to clone (or even better, fork!) and provide feedback and pull requests.</source>
          <target state="new">We've released all of the source code for this running example in GitHub under an Apache 2.0 license, so feel free to clone (or even better, fork!) and provide feedback and pull requests.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>About Node.js Modules</source>
          <target state="new">About Node.js Modules</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We will be using Node.js modules in this walkthrough.</source>
          <target state="new">We will be using Node.js modules in this walkthrough.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Modules are loadable JavaScript packages that provide specific functionality for your application.</source>
          <target state="new">Modules are loadable JavaScript packages that provide specific functionality for your application.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You usually install modules by using the Node.js NPM command-line tool in the NPM installation directory, but some modules, such as the HTTP module, are included the core Node.js package.</source>
          <target state="new">You usually install modules by using the Node.js NPM command-line tool in the NPM installation directory, but some modules, such as the HTTP module, are included the core Node.js package.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Installed modules are saved in the node_modules directory at the root of your Node.js installation directory.</source>
          <target state="new">Installed modules are saved in the node_modules directory at the root of your Node.js installation directory.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each module in the node_modules directory maintains its own node_modules directory that contains any modules that it depends on, and each required module has a node_modules directory.</source>
          <target state="new">Each module in the node_modules directory maintains its own node_modules directory that contains any modules that it depends on, and each required module has a node_modules directory.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This recursive directory structure represents the dependency chain.</source>
          <target state="new">This recursive directory structure represents the dependency chain.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This dependency chain structure results in a larger application footprint, but it guarantees that all dependencies are met and that the version of the modules used in development will also be used in production.</source>
          <target state="new">This dependency chain structure results in a larger application footprint, but it guarantees that all dependencies are met and that the version of the modules used in development will also be used in production.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This makes the production app behavior more predictable and prevents versioning problems that might affect users.</source>
          <target state="new">This makes the production app behavior more predictable and prevents versioning problems that might affect users.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Step 1: Register a Azure AD Tenant</source>
          <target state="new">Step 1: Register a Azure AD Tenant</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To use this sample you will need a Azure Active Directory Tenant.</source>
          <target state="new">To use this sample you will need a Azure Active Directory Tenant.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you're not sure what a tenant is or how you would get one, see  <bpt id="p1">[</bpt>How to get an Azure AD tenant<ept id="p1">](active-directory-howto-tenant.md)</ept>.</source>
          <target state="new">If you're not sure what a tenant is or how you would get one, see  <bpt id="p1">[</bpt>How to get an Azure AD tenant<ept id="p1">](active-directory-howto-tenant.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Step 2: Add A Web API to your tenant</source>
          <target state="new">Step 2: Add A Web API to your tenant</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>After you get your Azure Active Directory tenant, add this sample app to your tenant so you can use it to protect the API.</source>
          <target state="new">After you get your Azure Active Directory tenant, add this sample app to your tenant so you can use it to protect the API.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To enable your app to authenticate users, you'll first need to register a new application in your tenant.</source>
          <target state="new">To enable your app to authenticate users, you'll first need to register a new application in your tenant.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Sign into the Azure Management Portal.</source>
          <target state="new">Sign into the Azure Management Portal.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</source>
          <target state="new">In the left hand nav, click on <bpt id="p1">**</bpt>Active Directory<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Select the tenant where you wish to register the application.</source>
          <target state="new">Select the tenant where you wish to register the application.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab, and click add in the bottom drawer.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</source>
          <target state="new">Follow the prompts and create a new <bpt id="p1">**</bpt>Web Application and/or WebAPI<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</source>
          <target state="new">The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> of the application will describe your application to end-users</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</source>
          <target state="new">The <bpt id="p1">**</bpt>Sign-On URL<ept id="p1">**</ept> is the base URL of your app.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The skeleton’s default is <ph id="ph1">`https://localhost:8888`</ph>.</source>
          <target state="new">The skeleton’s default is <ph id="ph1">`https://localhost:8888`</ph>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</source>
          <target state="new">The <bpt id="p1">**</bpt>App ID URI<ept id="p1">**</ept> is a unique identifier for your application.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`https://contoso.onmicrosoft.com/my-first-aad-app`</ph></source>
          <target state="new">The convention is to use <ph id="ph1">`https://&lt;tenant-domain&gt;/&lt;app-name&gt;`</ph>, e.g. <ph id="ph2">`https://contoso.onmicrosoft.com/my-first-aad-app`</ph></target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Once you’ve completed registration, AAD will assign your app a unique client identifier.</source>
          <target state="new">Once you’ve completed registration, AAD will assign your app a unique client identifier.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You’ll need this value in the next sections, so copy it from the Configure tab.</source>
          <target state="new">You’ll need this value in the next sections, so copy it from the Configure tab.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Step 3: Download node.js for your platform</source>
          <target state="new">Step 3: Download node.js for your platform</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To successfully use this sample, you must have a working installation of Node.js.</source>
          <target state="new">To successfully use this sample, you must have a working installation of Node.js.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Install Node.js from <bpt id="p1">[</bpt>http://nodejs.org<ept id="p1">](http://nodejs.org)</ept>.</source>
          <target state="new">Install Node.js from <bpt id="p1">[</bpt>http://nodejs.org<ept id="p1">](http://nodejs.org)</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Step 4: Install MongoDB on to your platform</source>
          <target state="new">Step 4: Install MongoDB on to your platform</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To successfully use this sample, you must have a working installation of MongoDB.</source>
          <target state="new">To successfully use this sample, you must have a working installation of MongoDB.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>We will use MongoDB to make our REST API persistant across server instances.</source>
          <target state="new">We will use MongoDB to make our REST API persistant across server instances.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Install MongoDB from <bpt id="p1">[</bpt>http://mongodb.org<ept id="p1">](http://www.mongodb.org)</ept>.</source>
          <target state="new">Install MongoDB from <bpt id="p1">[</bpt>http://mongodb.org<ept id="p1">](http://www.mongodb.org)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> This walkthrough assumes that you use the default installation and server endpoints for MongoDB, which at the time of this writing is: mongodb://localhost</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> This walkthrough assumes that you use the default installation and server endpoints for MongoDB, which at the time of this writing is: mongodb://localhost</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Step 5: Install the Restify modules in to your Web API</source>
          <target state="new">Step 5: Install the Restify modules in to your Web API</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>We will be using Resitfy to build our REST API.</source>
          <target state="new">We will be using Resitfy to build our REST API.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Restify is a minimal and flexible Node.js application framework derived from Express that has a robust set of features for building REST APIs on top of Connect.</source>
          <target state="new">Restify is a minimal and flexible Node.js application framework derived from Express that has a robust set of features for building REST APIs on top of Connect.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Install Restify</source>
          <target state="new">Install Restify</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the azuread directory.</source>
          <target state="new">From the command-line, change directories to the azuread directory.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory does not exist, create it.</source>
          <target state="new">If the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory does not exist, create it.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Type the following command:</source>
          <target state="new">Type the following command:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This command installs Restify.</source>
          <target state="new">This command installs Restify.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>DID YOU GET AN ERROR?</source>
          <target state="new">DID YOU GET AN ERROR?</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When using npm on some operating systems, you may receive an error of Error: EPERM, chmod '/usr/local/bin/..'</source>
          <target state="new">When using npm on some operating systems, you may receive an error of Error: EPERM, chmod '/usr/local/bin/..'</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>and a request to try running the account as an administrator.</source>
          <target state="new">and a request to try running the account as an administrator.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If this occurs, use the sudo command to run npm at a higher privilege level.</source>
          <target state="new">If this occurs, use the sudo command to run npm at a higher privilege level.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>DID YOU GET AN ERROR REGARDING DTRACE?</source>
          <target state="new">DID YOU GET AN ERROR REGARDING DTRACE?</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You may see something like this when installing Restify:</source>
          <target state="new">You may see something like this when installing Restify:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Restify provides a powerful mechanism to trace REST calls using DTrace.</source>
          <target state="new">Restify provides a powerful mechanism to trace REST calls using DTrace.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, many operating systems do not have DTrace available.</source>
          <target state="new">However, many operating systems do not have DTrace available.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can safely ignore these errors.</source>
          <target state="new">You can safely ignore these errors.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The output of this command should appear similar to the following:</source>
          <target state="new">The output of this command should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Step 6: Install Passport.js in to your Web API</source>
          <target state="new">Step 6: Install Passport.js in to your Web API</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept> is authentication middleware for Node.js.</source>
          <target state="new"><bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept> is authentication middleware for Node.js.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</source>
          <target state="new">Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</source>
          <target state="new">A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>We have developed a strategy for Azure Active Directory.</source>
          <target state="new">We have developed a strategy for Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>We will install this module and then add the Azure Active Directory strategy plug-in.</source>
          <target state="new">We will install this module and then add the Azure Active Directory strategy plug-in.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the azuread directory.</source>
          <target state="new">From the command-line, change directories to the azuread directory.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Enter the following command to install passport.js</source>
          <target state="new">Enter the following command to install passport.js</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The output of the commadn should appear similar to the following:</source>
          <target state="new">The output of the commadn should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Step 7: Add Passport.js Bearer Token Support to your Web API</source>
          <target state="new">Step 7: Add Passport.js Bearer Token Support to your Web API</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Next, we will add the Bearer strategy, using passport-bearer-http, a Bearner handler for <bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept>.</source>
          <target state="new">Next, we will add the Bearer strategy, using passport-bearer-http, a Bearner handler for <bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>We will also add JWT token handler support by using node-jwt.</source>
          <target state="new">We will also add JWT token handler support by using node-jwt.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Although OAuth2 provides a framework in which any known token type can be issued, only certain token types have gained wide-spread use.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Although OAuth2 provides a framework in which any known token type can be issued, only certain token types have gained wide-spread use.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For protecting endpoints, that has turned out to be Bearer Tokens.</source>
          <target state="new">For protecting endpoints, that has turned out to be Bearer Tokens.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Bearer tokens are the most widely issued type of token in OAuth2, and many implementations assume that bearer tokens are the only type of token issued.</source>
          <target state="new">Bearer tokens are the most widely issued type of token in OAuth2, and many implementations assume that bearer tokens are the only type of token issued.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory.</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Type the following command to install Passport.js modules:</source>
          <target state="new">Type the following command to install Passport.js modules:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The output of the commamd should appear similar to the following:</source>
          <target state="new">The output of the commamd should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Step 8: Add MongoDB modules to your Web API</source>
          <target state="new">Step 8: Add MongoDB modules to your Web API</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>We will be using MongoDB as our datastore For that reason, we need to install both the widely used plug-in to manage models and schemas called Mongoose, as well as the database driver for MongoDB, also called MongoDB.</source>
          <target state="new">We will be using MongoDB as our datastore For that reason, we need to install both the widely used plug-in to manage models and schemas called Mongoose, as well as the database driver for MongoDB, also called MongoDB.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Step 9:  Install additional modules</source>
          <target state="new">Step 9:  Install additional modules</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Next, we'll install the remaining required modules.</source>
          <target state="new">Next, we'll install the remaining required modules.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Enter the following commands to install the following modules in your node_modules directory:</source>
          <target state="new">Enter the following commands to install the following modules in your node_modules directory:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Step 10: Create a server.js with your dependencies</source>
          <target state="new">Step 10: Create a server.js with your dependencies</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The server.js file will be providing the majority of our functionality for our Web API server.</source>
          <target state="new">The server.js file will be providing the majority of our functionality for our Web API server.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We will be adding most of our code to this file.</source>
          <target state="new">We will be adding most of our code to this file.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For production purposes you would refactor the functionality in to smaller files, such as separate routes and controllers.</source>
          <target state="new">For production purposes you would refactor the functionality in to smaller files, such as separate routes and controllers.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For the purpose of this demo we will use server.js for this functionality.</source>
          <target state="new">For the purpose of this demo we will use server.js for this functionality.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Create a <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
          <target state="new">Save the file.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>We will return to it shortly.</source>
          <target state="new">We will return to it shortly.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Step 11: Create a config file to store your Azure AD settings</source>
          <target state="new">Step 11: Create a config file to store your Azure AD settings</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This code file passes the configuration parameters from your Azure Active Directory Portal to Passport.js.</source>
          <target state="new">This code file passes the configuration parameters from your Azure Active Directory Portal to Passport.js.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You created these configuration values when you added the Web API to the portal in the first part of the walkthrough.</source>
          <target state="new">You created these configuration values when you added the Web API to the portal in the first part of the walkthrough.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>We will explain what to put in the values of these parameters after you've copied the code.</source>
          <target state="new">We will explain what to put in the values of these parameters after you've copied the code.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`config.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Create a <ph id="ph1">`config.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> You will most likely never need to change these values.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> You will most likely never need to change these values.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> We roll our keys at frequent intervals.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> We roll our keys at frequent intervals.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Please ensure that you are always pulling from the "openid_keys" URL and that the app can access the internet.</source>
          <target state="new">Please ensure that you are always pulling from the "openid_keys" URL and that the app can access the internet.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Step 12: Add configuration to your server.js file</source>
          <target state="new">Step 12: Add configuration to your server.js file</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>We need to read these values from the Config file you just created across our application.</source>
          <target state="new">We need to read these values from the Config file you just created across our application.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To do this, we simply add the .config file as a required resource in our application and then set the global variables to those in the config.js document</source>
          <target state="new">To do this, we simply add the .config file as a required resource in our application and then set the global variables to those in the config.js document</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Then, add a new section to <ph id="ph1">`server.js`</ph> with the following code:</source>
          <target state="new">Then, add a new section to <ph id="ph1">`server.js`</ph> with the following code:</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Step 13: Create a metadata.js helper file to aid in parsing metadata/tokens</source>
          <target state="new">Step 13: Create a metadata.js helper file to aid in parsing metadata/tokens</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Since the goal is to keep only application logic in the server.js file, it makes sense to put some helper methods in a separate file.</source>
          <target state="new">Since the goal is to keep only application logic in the server.js file, it makes sense to put some helper methods in a separate file.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>These methods simply help us parse the OpenID Connect metadata and do not relate to the core scenario.</source>
          <target state="new">These methods simply help us parse the OpenID Connect metadata and do not relate to the core scenario.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It's better to stuff them away.</source>
          <target state="new">It's better to stuff them away.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>We will be adding more to this file as we go through the Walkthrough.</source>
          <target state="new">We will be adding more to this file as we go through the Walkthrough.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>NOTE:<ept id="p1">***</ept> You'll notice that this metadata.js file parses XML for SAML and WS-Fed as well as JSON for OpenID Connect.</source>
          <target state="new"><bpt id="p1">***</bpt>NOTE:<ept id="p1">***</ept> You'll notice that this metadata.js file parses XML for SAML and WS-Fed as well as JSON for OpenID Connect.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>That is by design as you'll use this file in our other samples as well.</source>
          <target state="new">That is by design as you'll use this file in our other samples as well.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can safely ignore it now.</source>
          <target state="new">You can safely ignore it now.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`metadata.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Create a <ph id="ph1">`metadata.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>As you can see from the code, it simply takes the openid URL you passed in <ph id="ph1">`config.js`</ph> and then parses it for information which we will use in the <ph id="ph2">`server.js`</ph> file.</source>
          <target state="new">As you can see from the code, it simply takes the openid URL you passed in <ph id="ph1">`config.js`</ph> and then parses it for information which we will use in the <ph id="ph2">`server.js`</ph> file.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You are more than welcome to investigate this code and expand it if needed.</source>
          <target state="new">You are more than welcome to investigate this code and expand it if needed.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Load the metadata.js file in your server.js</source>
          <target state="new">Load the metadata.js file in your server.js</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>We need to tell our server where to get the methods you jus wrote.</source>
          <target state="new">We need to tell our server where to get the methods you jus wrote.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Next, add to the end of the <ph id="ph1">`Configuration`</ph> section this call to send the metadata document in our <ph id="ph2">`config.js`</ph> to the parser we just wrote:</source>
          <target state="new">Next, add to the end of the <ph id="ph1">`Configuration`</ph> section this call to send the metadata document in our <ph id="ph2">`config.js`</ph> to the parser we just wrote:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Step 14: Add The MongoDB Model and Schema Information using Moongoose</source>
          <target state="new">Step 14: Add The MongoDB Model and Schema Information using Moongoose</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Now all this preparation is going to start paying off as we wind these three files together in to a REST API service.</source>
          <target state="new">Now all this preparation is going to start paying off as we wind these three files together in to a REST API service.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For this walkthrough we will be using MongoDB to store our Tasks as discussed in <bpt id="p1">***</bpt>Step 4<ept id="p1">***</ept>.</source>
          <target state="new">For this walkthrough we will be using MongoDB to store our Tasks as discussed in <bpt id="p1">***</bpt>Step 4<ept id="p1">***</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you recall from the <ph id="ph1">`config.js`</ph> file we created in <bpt id="p1">***</bpt>Step 11<ept id="p1">***</ept> we called our database <ph id="ph2">`tasklist`</ph> as that was what we put at the end of our mogoose_auth_local connection URL.</source>
          <target state="new">If you recall from the <ph id="ph1">`config.js`</ph> file we created in <bpt id="p1">***</bpt>Step 11<ept id="p1">***</ept> we called our database <ph id="ph2">`tasklist`</ph> as that was what we put at the end of our mogoose_auth_local connection URL.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>You don't need to create this database beforehand in MongoDB, it will create this for us on first run of our server application (assuming it does not already exist).</source>
          <target state="new">You don't need to create this database beforehand in MongoDB, it will create this for us on first run of our server application (assuming it does not already exist).</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Now that we've told the server what MongoDB database we'd like to use, we need to write some additional code to create the model and schema for our server's Tasks.</source>
          <target state="new">Now that we've told the server what MongoDB database we'd like to use, we need to write some additional code to create the model and schema for our server's Tasks.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Discussion of the model</source>
          <target state="new">Discussion of the model</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Our Schema model is very simple, and you expand it as required.</source>
          <target state="new">Our Schema model is very simple, and you expand it as required.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>NAME - The name of who is assigned to the task.</source>
          <target state="new">NAME - The name of who is assigned to the task.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>TASK - The task itself.</source>
          <target state="new">TASK - The task itself.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>DATE - The date that the task is due.</source>
          <target state="new">DATE - The date that the task is due.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>DATETIME<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>DATETIME<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>COMPLETED - If the Task is completed or not.</source>
          <target state="new">COMPLETED - If the Task is completed or not.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>BOOLEAN<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>BOOLEAN<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Creating the schema in the code</source>
          <target state="new">Creating the schema in the code</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the configuration entry:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the configuration entry:</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This will connect to the MongoDB server and hand back a Schema object to us.</source>
          <target state="new">This will connect to the MongoDB server and hand back a Schema object to us.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Using the Schema, create our model in the code</source>
          <target state="new">Using the Schema, create our model in the code</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Below the code you wrote above, add the following code:</source>
          <target state="new">Below the code you wrote above, add the following code:</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>As you can tell from the code, we create our Schema and then create a model object we will use to store our data throughout the code when we define our <bpt id="p1">***</bpt>Routes<ept id="p1">***</ept>.</source>
          <target state="new">As you can tell from the code, we create our Schema and then create a model object we will use to store our data throughout the code when we define our <bpt id="p1">***</bpt>Routes<ept id="p1">***</ept>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Step 15: Add our Routes for our Task REST API server</source>
          <target state="new">Step 15: Add our Routes for our Task REST API server</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Now that we have a database model to work with, let's add the routes we will use for our REST API server.</source>
          <target state="new">Now that we have a database model to work with, let's add the routes we will use for our REST API server.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>About Routes in Restify</source>
          <target state="new">About Routes in Restify</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Routes work in Restify in the exact same way they do using the Express stack.</source>
          <target state="new">Routes work in Restify in the exact same way they do using the Express stack.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You define routes using the URI that you expect the client applicaitons to call.</source>
          <target state="new">You define routes using the URI that you expect the client applicaitons to call.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Usually, you define your routes in a separate file.</source>
          <target state="new">Usually, you define your routes in a separate file.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For our purposes, we will put our routes in the server.js file.</source>
          <target state="new">For our purposes, we will put our routes in the server.js file.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>We recommend you factor these in to their own file for production use.</source>
          <target state="new">We recommend you factor these in to their own file for production use.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A typical pattern for a Restify Route is:</source>
          <target state="new">A typical pattern for a Restify Route is:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This is the pattern at the most basic level.</source>
          <target state="new">This is the pattern at the most basic level.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Resitfy (and Express) provide much deeper functionaltiy such as defining application types and doing complex routing across different endpoints.</source>
          <target state="new">Resitfy (and Express) provide much deeper functionaltiy such as defining application types and doing complex routing across different endpoints.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For our purposes, we will keep these routes very simply.</source>
          <target state="new">For our purposes, we will keep these routes very simply.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Add default routes to our server</source>
          <target state="new">Add default routes to our server</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>We will now add the basic CRUD routes of Create, Retrieve, Update, and Delete.</source>
          <target state="new">We will now add the basic CRUD routes of Create, Retrieve, Update, and Delete.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the database entries you made above:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the database entries you made above:</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Add some error handling for the routes</source>
          <target state="new">Add some error handling for the routes</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>It makes sense to add some error handling so we can communicate back to the client the problem we encountered in a way it can understand.</source>
          <target state="new">It makes sense to add some error handling so we can communicate back to the client the problem we encountered in a way it can understand.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Add the following code underneath the code you've written above:</source>
          <target state="new">Add the following code underneath the code you've written above:</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Step 16: Create your Server!</source>
          <target state="new">Step 16: Create your Server!</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>We have our database defined, we have our routes in place, and the last thing to do is add our server instance that will manage our calls.</source>
          <target state="new">We have our database defined, we have our routes in place, and the last thing to do is add our server instance that will manage our calls.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Restify (and Express) have a lot of deep customization you can do for a REST API server, but again we will use the most basic setup for our purposes.</source>
          <target state="new">Restify (and Express) have a lot of deep customization you can do for a REST API server, but again we will use the most basic setup for our purposes.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Step 17: Before we add OAuth support, let's run the server.</source>
          <target state="new">Step 17: Before we add OAuth support, let's run the server.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It's a good idea to make sure we have no mistakes before we continue on to the OAuth part of the Walkthrough.</source>
          <target state="new">It's a good idea to make sure we have no mistakes before we continue on to the OAuth part of the Walkthrough.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is by using <ph id="ph1">`curl`</ph> in a command line.</source>
          <target state="new">The easiest way to do this is by using <ph id="ph1">`curl`</ph> in a command line.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Before we do that, we need a simple utility that allows us to parse output as JSON.</source>
          <target state="new">Before we do that, we need a simple utility that allows us to parse output as JSON.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>To do that, install the <bpt id="p1">[</bpt>json<ept id="p1">](https://github.com/trentm/json)</ept> tool as all the examples below use that.</source>
          <target state="new">To do that, install the <bpt id="p1">[</bpt>json<ept id="p1">](https://github.com/trentm/json)</ept> tool as all the examples below use that.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This installs the JSON tool globally.</source>
          <target state="new">This installs the JSON tool globally.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Now that we've accomplished that - let's play with the server:</source>
          <target state="new">Now that we've accomplished that - let's play with the server:</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>First, make sure that your monogoDB isntance is running..</source>
          <target state="new">First, make sure that your monogoDB isntance is running..</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Then, change to the directory and start curling..</source>
          <target state="new">Then, change to the directory and start curling..</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Then, we can add a task this way:</source>
          <target state="new">Then, we can add a task this way:</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The response should be:</source>
          <target state="new">The response should be:</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>And we can list tasks for Brandon this way:</source>
          <target state="new">And we can list tasks for Brandon this way:</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If all this works out, we are ready to add OAuth to the REST API server.</source>
          <target state="new">If all this works out, we are ready to add OAuth to the REST API server.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Step 18: Add Passport.js code to our REST API Server</source>
          <target state="new">Step 18: Add Passport.js code to our REST API Server</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Now that we have a running REST API (congrats, btw!) let's get to making it useful against Azure AD.</source>
          <target state="new">Now that we have a running REST API (congrats, btw!) let's get to making it useful against Azure AD.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Step 1: Add our Passport modules</source>
          <target state="new">Step 1: Add our Passport modules</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below where you previously stated the modules to load.</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below where you previously stated the modules to load.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This is towards the top of the file and should be right after the <ph id="ph1">`var aadutils = require('./aadutils');`</ph> import.</source>
          <target state="new">This is towards the top of the file and should be right after the <ph id="ph1">`var aadutils = require('./aadutils');`</ph> import.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>2. Tell our server we are using authentication</source>
          <target state="new">2. Tell our server we are using authentication</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information <bpt id="p1">**</bpt>below the server.get()<ept id="p1">**</ept> where you defined your Routes but above the <bpt id="p2">**</bpt>server.listen()<ept id="p2">**</ept> method.</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information <bpt id="p1">**</bpt>below the server.get()<ept id="p1">**</ept> where you defined your Routes but above the <bpt id="p2">**</bpt>server.listen()<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>We need to tell Restify to begin using its <ph id="ph1">`authorizationParser()`</ph> and look at the contents of the Authorization header.</source>
          <target state="new">We need to tell Restify to begin using its <ph id="ph1">`authorizationParser()`</ph> and look at the contents of the Authorization header.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>3. Add the Passport OAuth2 module to our code</source>
          <target state="new">3. Add the Passport OAuth2 module to our code</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Here we use the specific OAuth2 parameters we added to the config.js file.</source>
          <target state="new">Here we use the specific OAuth2 parameters we added to the config.js file.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If our <ph id="ph1">`aadutils.js`</ph> file did its job parsing our Federation Metadata document, all these values should be populated for us even if they are blank in the config.js file.</source>
          <target state="new">If our <ph id="ph1">`aadutils.js`</ph> file did its job parsing our Federation Metadata document, all these values should be populated for us even if they are blank in the config.js file.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Step 4: Add Routes for OAuth authentication</source>
          <target state="new">Step 4: Add Routes for OAuth authentication</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Step 5: Add a IsAuthenticated() Helper Method to the Routes</source>
          <target state="new">Step 5: Add a IsAuthenticated() Helper Method to the Routes</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Step 6: Add a caching mechnaism for the cookies</source>
          <target state="new">Step 6: Add a caching mechnaism for the cookies</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Step 7: Finally, protect some endpoints</source>
          <target state="new">Step 7: Finally, protect some endpoints</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>You protect endpoints by specifying the passport.authenticate() call with the protocol you wish to use.</source>
          <target state="new">You protect endpoints by specifying the passport.authenticate() call with the protocol you wish to use.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Let's edit our route in our server code to do something more interesting:</source>
          <target state="new">Let's edit our route in our server code to do something more interesting:</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Step 19: Run your server application again and ensure it rejects you</source>
          <target state="new">Step 19: Run your server application again and ensure it rejects you</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Let's use <ph id="ph1">`curl`</ph> again to see if we now have OAuth2 protection against our endpoints.</source>
          <target state="new">Let's use <ph id="ph1">`curl`</ph> again to see if we now have OAuth2 protection against our endpoints.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>We will do this before runnning any of our client SDKs against this endpoint.</source>
          <target state="new">We will do this before runnning any of our client SDKs against this endpoint.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The headers returned should be enough to tell us we are down the right path.</source>
          <target state="new">The headers returned should be enough to tell us we are down the right path.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>First, make sure that your monogoDB isntance is running..</source>
          <target state="new">First, make sure that your monogoDB isntance is running..</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Then, change to the directory and start curling..</source>
          <target state="new">Then, change to the directory and start curling..</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Try a basic GET:</source>
          <target state="new">Try a basic GET:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A 302 is the response you are looking for here, as that indicates that the Passport layer is trying to redirect to the authorize endpoint, which is exactly what you want.</source>
          <target state="new">A 302 is the response you are looking for here, as that indicates that the Passport layer is trying to redirect to the authorize endpoint, which is exactly what you want.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>You have a REST API Service using OAuth2!</source>
          <target state="new">You have a REST API Service using OAuth2!</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>You've went as far as you can with this server without using an OAuth2 compatible client.</source>
          <target state="new">You've went as far as you can with this server without using an OAuth2 compatible client.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>You will need to go through an additional walkthrough.</source>
          <target state="new">You will need to go through an additional walkthrough.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If you were just looking for information on how to implement a REST API using Restify and OAuth2, you have more than enough code to keep developing your service and learning how to build on this example.</source>
          <target state="new">If you were just looking for information on how to implement a REST API using Restify and OAuth2, you have more than enough code to keep developing your service and learning how to build on this example.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you are interested in the next steps in your ADAL journey, here are some supported ADAL clients we recommend for you to keep working:</source>
          <target state="new">If you are interested in the next steps in your ADAL journey, here are some supported ADAL clients we recommend for you to keep working:</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Simply clone down to your developer machine and configure as stated in the Walkthrough.</source>
          <target state="new">Simply clone down to your developer machine and configure as stated in the Walkthrough.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>ADAL for iOS</source>
          <target state="new">ADAL for iOS</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>ADAL for Android</source>
          <target state="new">ADAL for Android</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>ADAL for .Net</source>
          <target state="new">ADAL for .Net</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92f3b44377d0c1430ad617846e9a88672e7e3f17</xliffext:olfilehash>
  </header>
</xliff>