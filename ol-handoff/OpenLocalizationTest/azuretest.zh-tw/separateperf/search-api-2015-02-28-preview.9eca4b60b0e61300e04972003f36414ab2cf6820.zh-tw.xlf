<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Search Service REST API Version 2015-02-28-Preview | Microsoft Azure</source>
          <target state="new">Azure Search Service REST API Version 2015-02-28-Preview | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Azure Search Service REST API Version 2015-02-28-Preview includes experimental features such as Natural Language Analyzers and moreLikeThis searches.</source>
          <target state="new">Azure Search Service REST API Version 2015-02-28-Preview includes experimental features such as Natural Language Analyzers and moreLikeThis searches.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure Search Service REST API: Version 2015-02-28-Preview</source>
          <target state="new">Azure Search Service REST API: Version 2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article is the reference documentation for <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">This article is the reference documentation for <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This preview extends the current generally available version, <bpt id="p1">[</bpt>api-version=2015-02-28<ept id="p1">](https://msdn.microsoft.com/library/dn798935.aspx)</ept>, by providing the following experimental features:</source>
          <target state="new">This preview extends the current generally available version, <bpt id="p1">[</bpt>api-version=2015-02-28<ept id="p1">](https://msdn.microsoft.com/library/dn798935.aspx)</ept>, by providing the following experimental features:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Natural language processors<ept id="p1">](#LanguageSupport)</ept> from Microsoft (the same ones used by Office and Bing) offer greater precision over query results and more languages.</source>
          <target state="new"><bpt id="p1">[</bpt>Natural language processors<ept id="p1">](#LanguageSupport)</ept> from Microsoft (the same ones used by Office and Bing) offer greater precision over query results and more languages.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`moreLikeThis`</ph> is a a query parameter used in <bpt id="p1">[</bpt>Search operations<ept id="p1">](#SearchDocs)</ept> that finds other documents that are relevant to another specific document.</source>
          <target state="new"><ph id="ph1">`moreLikeThis`</ph> is a a query parameter used in <bpt id="p1">[</bpt>Search operations<ept id="p1">](#SearchDocs)</ept> that finds other documents that are relevant to another specific document.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A POST alternative to the GET syntax for both the <bpt id="p1">[</bpt>Search<ept id="p1">](#SearchDocs)</ept> and <bpt id="p2">[</bpt>Suggestions<ept id="p2">](#Suggestions)</ept> API, useful when the overall URL length would otherwise exceed 8KB.</source>
          <target state="new">A POST alternative to the GET syntax for both the <bpt id="p1">[</bpt>Search<ept id="p1">](#SearchDocs)</ept> and <bpt id="p2">[</bpt>Suggestions<ept id="p2">](#Suggestions)</ept> API, useful when the overall URL length would otherwise exceed 8KB.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A few additional features in <ph id="ph1">`2015-02-28-Preview`</ph> are documented separately.</source>
          <target state="new">A few additional features in <ph id="ph1">`2015-02-28-Preview`</ph> are documented separately.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These include:</source>
          <target state="new">These include:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Scoring Profiles</source>
          <target state="new">Scoring Profiles</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Indexers</source>
          <target state="new">Indexers</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure Search service is available in multiple versions.</source>
          <target state="new">Azure Search service is available in multiple versions.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Please refer to <bpt id="p1">[</bpt>Search Service Versioning<ept id="p1">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details.</source>
          <target state="new">Please refer to <bpt id="p1">[</bpt>Search Service Versioning<ept id="p1">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>APIs in this document</source>
          <target state="new">APIs in this document</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Azure Search Service API supports two syntaxes for entity lookup: <bpt id="p1">[</bpt>simple<ept id="p1">](https://msdn.microsoft.com/library/dn798920.aspx)</ept> and alternate OData syntax (see <bpt id="p2">[</bpt>Support for OData (Azure Search API)<ept id="p2">](http://msdn.microsoft.com/library/azure/dn798932.aspx)</ept> for details).</source>
          <target state="new">The Azure Search Service API supports two syntaxes for entity lookup: <bpt id="p1">[</bpt>simple<ept id="p1">](https://msdn.microsoft.com/library/dn798920.aspx)</ept> and alternate OData syntax (see <bpt id="p2">[</bpt>Support for OData (Azure Search API)<ept id="p2">](http://msdn.microsoft.com/library/azure/dn798932.aspx)</ept> for details).</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following list shows the simple syntax.</source>
          <target state="new">The following list shows the simple syntax.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create Index</source>
          <target state="new">Create Index</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Update Index</source>
          <target state="new">Update Index</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Get Index</source>
          <target state="new">Get Index</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Listing Indexes</source>
          <target state="new">Listing Indexes</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Get Index Statistics</source>
          <target state="new">Get Index Statistics</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Delete an Index</source>
          <target state="new">Delete an Index</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add, Delete, and Update Data within an Index</source>
          <target state="new">Add, Delete, and Update Data within an Index</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Search Documents</source>
          <target state="new">Search Documents</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Lookup Document</source>
          <target state="new">Lookup Document</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Count Documents</source>
          <target state="new">Count Documents</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Suggestions</source>
          <target state="new">Suggestions</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Index Operations</source>
          <target state="new">Index Operations</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can create and manage indexes in Azure Search service via simple HTTP requests (POST, GET, PUT, DELETE) against a given index resource.</source>
          <target state="new">You can create and manage indexes in Azure Search service via simple HTTP requests (POST, GET, PUT, DELETE) against a given index resource.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To create an index, you first POST a JSON document that describes the index schema.</source>
          <target state="new">To create an index, you first POST a JSON document that describes the index schema.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The schema defines the fields of the index, their data types, and how they can be used (for example, in full-text searches, filters, sorting, or faceting).</source>
          <target state="new">The schema defines the fields of the index, their data types, and how they can be used (for example, in full-text searches, filters, sorting, or faceting).</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It also defines scoring profiles, suggesters and other attributes to configure the behavior of the index.</source>
          <target state="new">It also defines scoring profiles, suggesters and other attributes to configure the behavior of the index.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example provides an illustration of a schema used for searching on hotel information with the Description field defined in two languages.</source>
          <target state="new">The following example provides an illustration of a schema used for searching on hotel information with the Description field defined in two languages.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Notice how attributes control how the field is used.</source>
          <target state="new">Notice how attributes control how the field is used.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example the <ph id="ph1">`hotelId`</ph> is used as the document key (<ph id="ph2">`"key": true`</ph>) and is excluded from full-text searches (<ph id="ph3">`"searchable": false`</ph>).</source>
          <target state="new">For example the <ph id="ph1">`hotelId`</ph> is used as the document key (<ph id="ph2">`"key": true`</ph>) and is excluded from full-text searches (<ph id="ph3">`"searchable": false`</ph>).</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After the index is created, you'll upload documents that populate the index.</source>
          <target state="new">After the index is created, you'll upload documents that populate the index.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Add or Update Documents<ept id="p1">](#AddOrUpdateDocuments)</ept> for this next step.</source>
          <target state="new">See <bpt id="p1">[</bpt>Add or Update Documents<ept id="p1">](#AddOrUpdateDocuments)</ept> for this next step.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For a video introduction to indexing in Azure Search, see the <bpt id="p1">[</bpt>Channel 9 Cloud Cover episode on Azure Search<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=511509)</ept>.</source>
          <target state="new">For a video introduction to indexing in Azure Search, see the <bpt id="p1">[</bpt>Channel 9 Cloud Cover episode on Azure Search<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=511509)</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create Index</source>
          <target state="new">Create Index</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An index is the primary means of organizing and searching documents in Azure Search, similar to how a table organizes records in a database.</source>
          <target state="new">An index is the primary means of organizing and searching documents in Azure Search, similar to how a table organizes records in a database.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each index has a collection of documents that all conform to the index schema (field names, data types, and properties), but indexes also specify additional constructs (suggesters, scoring profiles, and CORS options) that define other search behaviors.</source>
          <target state="new">Each index has a collection of documents that all conform to the index schema (field names, data types, and properties), but indexes also specify additional constructs (suggesters, scoring profiles, and CORS options) that define other search behaviors.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can create a new index within an Azure Search service using an HTTP POST or PUT request.</source>
          <target state="new">You can create a new index within an Azure Search service using an HTTP POST or PUT request.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The body of the request is a JSON schema that specifies the index and configuration information.</source>
          <target state="new">The body of the request is a JSON schema that specifies the index and configuration information.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use PUT and specify the index name on the URI.</source>
          <target state="new">Alternatively, you can use PUT and specify the index name on the URI.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the index does not exist, it will be created.</source>
          <target state="new">If the index does not exist, it will be created.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creating an index determines the structure of the documents stored and used in search operations.</source>
          <target state="new">Creating an index determines the structure of the documents stored and used in search operations.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Populating the index is a separate operation.</source>
          <target state="new">Populating the index is a separate operation.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For this step, you can use an <bpt id="p1">[</bpt>indexer<ept id="p1">](https://msdn.microsoft.com/library/azure/mt183328.aspx)</ept> (available for supported data sources) or an <bpt id="p2">[</bpt>Add, Update, or Delete Documents<ept id="p2">](https://msdn.microsoft.com/library/azure/dn798930.aspx)</ept> operation.</source>
          <target state="new">For this step, you can use an <bpt id="p1">[</bpt>indexer<ept id="p1">](https://msdn.microsoft.com/library/azure/mt183328.aspx)</ept> (available for supported data sources) or an <bpt id="p2">[</bpt>Add, Update, or Delete Documents<ept id="p2">](https://msdn.microsoft.com/library/azure/dn798930.aspx)</ept> operation.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The inverted index is generated when the documents are posted.</source>
          <target state="new">The inverted index is generated when the documents are posted.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: The maximum number of indexes allowed varies by pricing tier.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: The maximum number of indexes allowed varies by pricing tier.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The free service allows up to 3 indexes.</source>
          <target state="new">The free service allows up to 3 indexes.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Standard service allows 50 indexes per Search service.</source>
          <target state="new">Standard service allows 50 indexes per Search service.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Limits and constraints<ept id="p1">](http://msdn.microsoft.com/library/azure/dn798934.aspx)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt>Limits and constraints<ept id="p1">](http://msdn.microsoft.com/library/azure/dn798934.aspx)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="new">Request</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>HTTPS is required for all service requests.</source>
          <target state="new">HTTPS is required for all service requests.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create Index<ept id="p1">**</ept> request can be constructed using either a POST or PUT method.</source>
          <target state="new">The <bpt id="p1">**</bpt>Create Index<ept id="p1">**</ept> request can be constructed using either a POST or PUT method.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When using POST, you must provide an index name in the request body along with the index schema definition.</source>
          <target state="new">When using POST, you must provide an index name in the request body along with the index schema definition.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With PUT, the index name is part of the URL.</source>
          <target state="new">With PUT, the index name is part of the URL.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the index doesn't exist, it is created.</source>
          <target state="new">If the index doesn't exist, it is created.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If it already exists, it is updated to the new definition.</source>
          <target state="new">If it already exists, it is updated to the new definition.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.</source>
          <target state="new">The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.</source>
          <target state="new">After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-version`</ph> is required.</source>
          <target state="new">The <ph id="ph1">`api-version`</ph> is required.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Search Service Versioning<ept id="p1">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for a list of available versions.</source>
          <target state="new">See <bpt id="p1">[</bpt>Search Service Versioning<ept id="p1">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for a list of available versions.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Request Headers</source>
          <target state="new">Request Headers</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following list describes the required and optional request headers.</source>
          <target state="new">The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Content-Type`</ph>: Required.</source>
          <target state="new"><ph id="ph1">`Content-Type`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Set this to <ph id="ph1">`application/json`</ph></source>
          <target state="new">Set this to <ph id="ph1">`application/json`</ph></target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-key`</ph>: Required.</source>
          <target state="new"><ph id="ph1">`api-key`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-key`</ph> is used to</source>
          <target state="new">The <ph id="ph1">`api-key`</ph> is used to</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>authenticate the request to your Search service.</source>
          <target state="new">authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Create Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Create an Azure Search service in the portal<ept id="p1">](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt>Create an Azure Search service in the portal<ept id="p1">](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body Syntax<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Request Body Syntax<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The body of the request contains a schema definition, which includes the list of data fields within documents that will be fed into this index, data types, attributes, as well as an optional list of scoring profiles that are used to score matching documents at query time.</source>
          <target state="new">The body of the request contains a schema definition, which includes the list of data fields within documents that will be fed into this index, data types, attributes, as well as an optional list of scoring profiles that are used to score matching documents at query time.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Note that for a POST request, you must specify the index name in the request body.</source>
          <target state="new">Note that for a POST request, you must specify the index name in the request body.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>There can only be one key field in the index.</source>
          <target state="new">There can only be one key field in the index.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It has to be a string field.</source>
          <target state="new">It has to be a string field.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This field represents the unique identifier for each document stored within the index.</source>
          <target state="new">This field represents the unique identifier for each document stored within the index.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The main parts of an index include the following:</source>
          <target state="new">The main parts of an index include the following:</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`fields`</ph> that will be fed into this index, including name, data type, and properties that define allowable actions on that field.</source>
          <target state="new"><ph id="ph1">`fields`</ph> that will be fed into this index, including name, data type, and properties that define allowable actions on that field.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`suggesters`</ph> used for auto-complete or type-ahead queries.</source>
          <target state="new"><ph id="ph1">`suggesters`</ph> used for auto-complete or type-ahead queries.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`scoringProfiles`</ph> used for custom search score ranking.</source>
          <target state="new"><ph id="ph1">`scoringProfiles`</ph> used for custom search score ranking.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Add scoring profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt>Add scoring profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`defaultScoringProfile`</ph> used to overwrite the default scoring behaviors.</source>
          <target state="new"><ph id="ph1">`defaultScoringProfile`</ph> used to overwrite the default scoring behaviors.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`corsOptions`</ph> to allow cross-origin queries against your index.</source>
          <target state="new"><ph id="ph1">`corsOptions`</ph> to allow cross-origin queries against your index.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The syntax for structuring the request payload is as follows.</source>
          <target state="new">The syntax for structuring the request payload is as follows.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A sample request is provided further on in this topic.</source>
          <target state="new">A sample request is provided further on in this topic.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Index Attributes</source>
          <target state="new">Index Attributes</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following attributes can be set when creating an index.</source>
          <target state="new">The following attributes can be set when creating an index.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For details about scoring and scoring profiles, see <bpt id="p1">[</bpt>Add scoring Profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept>.</source>
          <target state="new">For details about scoring and scoring profiles, see <bpt id="p1">[</bpt>Add scoring Profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`name`</ph> - Sets the name of the field.</source>
          <target state="new"><ph id="ph1">`name`</ph> - Sets the name of the field.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`type`</ph> - Sets the data type for the field.</source>
          <target state="new"><ph id="ph1">`type`</ph> - Sets the data type for the field.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Supported Data Types<ept id="p1">](#DataTypes)</ept> for a list of supported types.</source>
          <target state="new">See <bpt id="p1">[</bpt>Supported Data Types<ept id="p1">](#DataTypes)</ept> for a list of supported types.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`searchable`</ph> - Marks the field as full-text search-able.</source>
          <target state="new"><ph id="ph1">`searchable`</ph> - Marks the field as full-text search-able.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This means it will undergo analysis such as word-breaking during indexing.</source>
          <target state="new">This means it will undergo analysis such as word-breaking during indexing.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you set a <ph id="ph1">`searchable`</ph> field to a value like "sunny day", internally it will be split into the individual tokens "sunny" and "day".</source>
          <target state="new">If you set a <ph id="ph1">`searchable`</ph> field to a value like "sunny day", internally it will be split into the individual tokens "sunny" and "day".</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This enables full-text searches for these terms.</source>
          <target state="new">This enables full-text searches for these terms.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Fields of type <ph id="ph1">`Edm.String`</ph> or <ph id="ph2">`Collection(Edm.String)`</ph> are <ph id="ph3">`searchable`</ph> by default.</source>
          <target state="new">Fields of type <ph id="ph1">`Edm.String`</ph> or <ph id="ph2">`Collection(Edm.String)`</ph> are <ph id="ph3">`searchable`</ph> by default.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Fields of other types cannot be <ph id="ph1">`searchable`</ph>.</source>
          <target state="new">Fields of other types cannot be <ph id="ph1">`searchable`</ph>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: <ph id="ph1">`searchable`</ph> fields consume extra space in your index since Azure Search will store an additional tokenized version of the field value for full-text searches.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: <ph id="ph1">`searchable`</ph> fields consume extra space in your index since Azure Search will store an additional tokenized version of the field value for full-text searches.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you want to save space in your index and you don't need a field to be included in searches, set <ph id="ph1">`searchable`</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="new">If you want to save space in your index and you don't need a field to be included in searches, set <ph id="ph1">`searchable`</ph> to <ph id="ph2">`false`</ph>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`filterable`</ph> - Allows the field to be referenced in <ph id="ph2">`$filter`</ph> queries.</source>
          <target state="new"><ph id="ph1">`filterable`</ph> - Allows the field to be referenced in <ph id="ph2">`$filter`</ph> queries.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`filterable`</ph> differs from <ph id="ph2">`searchable`</ph> in how strings are handled.</source>
          <target state="new"><ph id="ph1">`filterable`</ph> differs from <ph id="ph2">`searchable`</ph> in how strings are handled.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Fields of type <ph id="ph1">`Edm.String`</ph> or <ph id="ph2">`Collection(Edm.String)`</ph> that are <ph id="ph3">`filterable`</ph> do not undergo word-breaking, so comparisons are for exact matches only.</source>
          <target state="new">Fields of type <ph id="ph1">`Edm.String`</ph> or <ph id="ph2">`Collection(Edm.String)`</ph> that are <ph id="ph3">`filterable`</ph> do not undergo word-breaking, so comparisons are for exact matches only.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For example, if you set such a field <ph id="ph1">`f`</ph> to "sunny day", <ph id="ph2">`$filter=f eq 'sunny'`</ph> will find no matches, but <ph id="ph3">`$filter=f eq 'sunny day'`</ph> will.</source>
          <target state="new">For example, if you set such a field <ph id="ph1">`f`</ph> to "sunny day", <ph id="ph2">`$filter=f eq 'sunny'`</ph> will find no matches, but <ph id="ph3">`$filter=f eq 'sunny day'`</ph> will.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>All fields are <ph id="ph1">`filterable`</ph> by default.</source>
          <target state="new">All fields are <ph id="ph1">`filterable`</ph> by default.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`sortable`</ph> - By default the system sorts results by score, but in many experiences users will want to sort by fields in the documents.</source>
          <target state="new"><ph id="ph1">`sortable`</ph> - By default the system sorts results by score, but in many experiences users will want to sort by fields in the documents.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Fields of type <ph id="ph1">`Collection(Edm.String)`</ph> cannot be <ph id="ph2">`sortable`</ph>.</source>
          <target state="new">Fields of type <ph id="ph1">`Collection(Edm.String)`</ph> cannot be <ph id="ph2">`sortable`</ph>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>All other fields are <ph id="ph1">`sortable`</ph> by default.</source>
          <target state="new">All other fields are <ph id="ph1">`sortable`</ph> by default.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`facetable`</ph>- Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, etc.).</source>
          <target state="new"><ph id="ph1">`facetable`</ph>- Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, etc.).</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This option cannot be used with fields of type <ph id="ph1">`Edm.GeographyPoint`</ph>.</source>
          <target state="new">This option cannot be used with fields of type <ph id="ph1">`Edm.GeographyPoint`</ph>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>All other fields are <ph id="ph1">`facetable`</ph> by default.</source>
          <target state="new">All other fields are <ph id="ph1">`facetable`</ph> by default.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: Fields of type <ph id="ph1">`Edm.String`</ph> that are <ph id="ph2">`filterable`</ph>, <ph id="ph3">`sortable`</ph>, or <ph id="ph4">`facetable`</ph> can be at most 32KB in length.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: Fields of type <ph id="ph1">`Edm.String`</ph> that are <ph id="ph2">`filterable`</ph>, <ph id="ph3">`sortable`</ph>, or <ph id="ph4">`facetable`</ph> can be at most 32KB in length.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is because such fields are treated as a single search term, and the maximum length of a term in Azure Search is 32KB.</source>
          <target state="new">This is because such fields are treated as a single search term, and the maximum length of a term in Azure Search is 32KB.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If you need to store more text than this in a single string field, you will need to explicitly set <ph id="ph1">`filterable`</ph>, <ph id="ph2">`sortable`</ph>, and <ph id="ph3">`facetable`</ph> to <ph id="ph4">`false`</ph> in your index definition.</source>
          <target state="new">If you need to store more text than this in a single string field, you will need to explicitly set <ph id="ph1">`filterable`</ph>, <ph id="ph2">`sortable`</ph>, and <ph id="ph3">`facetable`</ph> to <ph id="ph4">`false`</ph> in your index definition.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: If a field has none of the above attributes set to <ph id="ph1">`true`</ph> (<ph id="ph2">`searchable`</ph>, <ph id="ph3">`filterable`</ph>, <ph id="ph4">`sortable`</ph>,  or<ph id="ph5">`facetable`</ph>) the field is effectively excluded from the inverted index.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: If a field has none of the above attributes set to <ph id="ph1">`true`</ph> (<ph id="ph2">`searchable`</ph>, <ph id="ph3">`filterable`</ph>, <ph id="ph4">`sortable`</ph>,  or<ph id="ph5">`facetable`</ph>) the field is effectively excluded from the inverted index.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This option is useful for fields that are not used in queries, but are needed in search results.</source>
          <target state="new">This option is useful for fields that are not used in queries, but are needed in search results.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Excluding such fields from the index improves performance.</source>
          <target state="new">Excluding such fields from the index improves performance.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`suggestions`</ph> - Previous versions of the API included a <ph id="ph2">`suggestions`</ph> property.</source>
          <target state="new"><ph id="ph1">`suggestions`</ph> - Previous versions of the API included a <ph id="ph2">`suggestions`</ph> property.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This boolean property is now deprecated and no longer available in either <ph id="ph1">`2015-02-28`</ph> or <ph id="ph2">`2015-02-28-Preview`</ph>.</source>
          <target state="new">This boolean property is now deprecated and no longer available in either <ph id="ph1">`2015-02-28`</ph> or <ph id="ph2">`2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Please use the <bpt id="p1">[</bpt>Suggesters API<ept id="p1">](#Suggesters)</ept> instead.</source>
          <target state="new">Please use the <bpt id="p1">[</bpt>Suggesters API<ept id="p1">](#Suggesters)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`2014-07-31`</ph> version, the <ph id="ph2">`suggestions`</ph> property was used to specify whether the field could be used for auto-complete for type ahead, for fields of type <ph id="ph3">`Edm.String`</ph> or <ph id="ph4">`Collection(Edm.String)`</ph>.</source>
          <target state="new">In the <ph id="ph1">`2014-07-31`</ph> version, the <ph id="ph2">`suggestions`</ph> property was used to specify whether the field could be used for auto-complete for type ahead, for fields of type <ph id="ph3">`Edm.String`</ph> or <ph id="ph4">`Collection(Edm.String)`</ph>.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`suggestions`</ph> was <ph id="ph2">`false`</ph> by default because it required extra space in your index, but if you enabled it, see <bpt id="p1">[</bpt>Transition from Preview to General Release in Azure Search<ept id="p1">](search-transition-from-preview.md)</ept> for instructions on how to transition to the new API.</source>
          <target state="new">The <ph id="ph1">`suggestions`</ph> was <ph id="ph2">`false`</ph> by default because it required extra space in your index, but if you enabled it, see <bpt id="p1">[</bpt>Transition from Preview to General Release in Azure Search<ept id="p1">](search-transition-from-preview.md)</ept> for instructions on how to transition to the new API.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`key`</ph> - Marks the field as containing unique identifiers for documents within the index.</source>
          <target state="new"><ph id="ph1">`key`</ph> - Marks the field as containing unique identifiers for documents within the index.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Exactly one field must be chosen as the <ph id="ph1">`key`</ph> field and it must be of type <ph id="ph2">`Edm.String`</ph>.</source>
          <target state="new">Exactly one field must be chosen as the <ph id="ph1">`key`</ph> field and it must be of type <ph id="ph2">`Edm.String`</ph>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Key fields can be used to look up documents directly via the <bpt id="p1">[</bpt>Lookup API<ept id="p1">](#LookupAPI)</ept>.</source>
          <target state="new">Key fields can be used to look up documents directly via the <bpt id="p1">[</bpt>Lookup API<ept id="p1">](#LookupAPI)</ept>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`retrievable`</ph> - Sets whether the field can be returned in a search result.</source>
          <target state="new"><ph id="ph1">`retrievable`</ph> - Sets whether the field can be returned in a search result.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This is useful when you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user.</source>
          <target state="new">This is useful when you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This attribute must be <ph id="ph1">`true`</ph> for <ph id="ph2">`key`</ph> fields.</source>
          <target state="new">This attribute must be <ph id="ph1">`true`</ph> for <ph id="ph2">`key`</ph> fields.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`analyzer`</ph> - Sets the name of the text analyzer to use for the field.</source>
          <target state="new"><ph id="ph1">`analyzer`</ph> - Sets the name of the text analyzer to use for the field.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For the allowed set of values see <bpt id="p1">[</bpt>Language Support<ept id="p1">](#LanguageSupport)</ept>.</source>
          <target state="new">For the allowed set of values see <bpt id="p1">[</bpt>Language Support<ept id="p1">](#LanguageSupport)</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This option can be used only with <ph id="ph1">`searchable`</ph> fields.</source>
          <target state="new">This option can be used only with <ph id="ph1">`searchable`</ph> fields.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Once the analyzer is chosen, it cannot be changed for the field.</source>
          <target state="new">Once the analyzer is chosen, it cannot be changed for the field.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`suggesters`</ph> - Sets the search mode and fields that are the source of the content for suggestions.</source>
          <target state="new"><ph id="ph1">`suggesters`</ph> - Sets the search mode and fields that are the source of the content for suggestions.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Suggesters<ept id="p1">](#Suggesters)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt>Suggesters<ept id="p1">](#Suggesters)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`scoringProfiles`</ph> - Defines custom scoring behaviors that let you influence which items appear higher in search results.</source>
          <target state="new"><ph id="ph1">`scoringProfiles`</ph> - Defines custom scoring behaviors that let you influence which items appear higher in search results.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Scoring profiles are made up of field weights and functions.</source>
          <target state="new">Scoring profiles are made up of field weights and functions.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Add scoring Profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information about the attributes used in a scoring profile.</source>
          <target state="new">See <bpt id="p1">[</bpt>Add scoring Profiles<ept id="p1">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information about the attributes used in a scoring profile.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&lt;a name="LanguageSupport"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Language support<ept id="p1">**</ept>

Searchable fields undergo analysis that most frequently involves word-breaking, text normalization, and filtering out terms.</source>
          <target state="new"><ph id="ph1">
&lt;a name="LanguageSupport"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Language support<ept id="p1">**</ept>

Searchable fields undergo analysis that most frequently involves word-breaking, text normalization, and filtering out terms.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>By default, searchable fields in Azure Search are analyzed with the <bpt id="p1">[</bpt><ept id="p1">Apache Lucene Standard analyzer](http://lucene.apache.org/core/4_9_0/analyzers-common/index.html)</ept> which breaks text into elements following the<bpt id="p2">[</bpt><ept id="p2">"Unicode Text Segmentation"](http://unicode.org/reports/tr29/)</ept> rules.</source>
          <target state="new">By default, searchable fields in Azure Search are analyzed with the <bpt id="p1">[</bpt><ept id="p1">Apache Lucene Standard analyzer](http://lucene.apache.org/core/4_9_0/analyzers-common/index.html)</ept> which breaks text into elements following the<bpt id="p2">[</bpt><ept id="p2">"Unicode Text Segmentation"](http://unicode.org/reports/tr29/)</ept> rules.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Additionally, the standard analyzer converts all characters to their lower case form.</source>
          <target state="new">Additionally, the standard analyzer converts all characters to their lower case form.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Both indexed documents and search terms go through the analysis during indexing and query processing.</source>
          <target state="new">Both indexed documents and search terms go through the analysis during indexing and query processing.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Azure Search supports a variety of languages.</source>
          <target state="new">Azure Search supports a variety of languages.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Each language requires a non-standard text analyzer which accounts for characteristics of a given language.</source>
          <target state="new">Each language requires a non-standard text analyzer which accounts for characteristics of a given language.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Azure Search offers two types of analyzers:

- 35 analyzers backed by Lucene.</source>
          <target state="new">Azure Search offers two types of analyzers:

- 35 analyzers backed by Lucene.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>- 50 analyzers backed by proprietary Microsoft natural language processing technology used in Office and Bing.</source>
          <target state="new">- 50 analyzers backed by proprietary Microsoft natural language processing technology used in Office and Bing.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Some developers might prefer the more familiar, simple, open-source solution of Lucene.</source>
          <target state="new">Some developers might prefer the more familiar, simple, open-source solution of Lucene.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Lucene analyzers are faster, but the Microsoft analyzers have advanced capabilities, such as lemmatization, word decompounding (in languages like German, Danish, Dutch, Swedish, Norwegian, Estonian, Finish, Hungarian, Slovak) and entity recognition (URLs, emails, dates, numbers).</source>
          <target state="new">Lucene analyzers are faster, but the Microsoft analyzers have advanced capabilities, such as lemmatization, word decompounding (in languages like German, Danish, Dutch, Swedish, Norwegian, Estonian, Finish, Hungarian, Slovak) and entity recognition (URLs, emails, dates, numbers).</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If possible, you should run comparisons of both the Microsoft and Lucene analyzers to decide which one is a better fit.</source>
          <target state="new">If possible, you should run comparisons of both the Microsoft and Lucene analyzers to decide which one is a better fit.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>How they compare<ept id="p1">***</ept>

The Lucene analyzer for English extends the standard analyzer.</source>
          <target state="new"><bpt id="p1">***</bpt>How they compare<ept id="p1">***</ept>

The Lucene analyzer for English extends the standard analyzer.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>It removes possessives (trailing 's) from words, applies stemming as per <bpt id="p1">[</bpt><ept id="p1">Porter Stemming algorithm](http://tartarus.org/~martin/PorterStemmer/)</ept>, and removes English <bpt id="p2">[</bpt><ept id="p2">stop words](http://en.wikipedia.org/wiki/Stop_words)</ept>.</source>
          <target state="new">It removes possessives (trailing 's) from words, applies stemming as per <bpt id="p1">[</bpt><ept id="p1">Porter Stemming algorithm](http://tartarus.org/~martin/PorterStemmer/)</ept>, and removes English <bpt id="p2">[</bpt><ept id="p2">stop words](http://en.wikipedia.org/wiki/Stop_words)</ept>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In comparison, the Microsoft analyzer performs lemmatization instead of stemming.</source>
          <target state="new">In comparison, the Microsoft analyzer performs lemmatization instead of stemming.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>It means it can handle inflected and irregular word forms much better what results in more relevant search results (watch module 7 of <bpt id="p1">[</bpt><ept id="p1">Azure Search MVA presentation](http://www.microsoftvirtualacademy.com/training-courses/adding-microsoft-azure-search-to-your-websites-and-apps)</ept> for more details).</source>
          <target state="new">It means it can handle inflected and irregular word forms much better what results in more relevant search results (watch module 7 of <bpt id="p1">[</bpt><ept id="p1">Azure Search MVA presentation](http://www.microsoftvirtualacademy.com/training-courses/adding-microsoft-azure-search-to-your-websites-and-apps)</ept> for more details).</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Indexing with Microsoft analyzers is on average two to three times slower than their Lucene equivalents, depending on the language.</source>
          <target state="new">Indexing with Microsoft analyzers is on average two to three times slower than their Lucene equivalents, depending on the language.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Search performance should not be significantly affected for average size queries.</source>
          <target state="new">Search performance should not be significantly affected for average size queries.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Configuration<ept id="p1">***</ept>

For each field in the index definition, you can set the <ph id="ph1">`analyzer`</ph> property to an analyzer name that specifies which language and vendor.</source>
          <target state="new"><bpt id="p1">***</bpt>Configuration<ept id="p1">***</ept>

For each field in the index definition, you can set the <ph id="ph1">`analyzer`</ph> property to an analyzer name that specifies which language and vendor.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The same analyzer will be applied when indexing and searching for that field.</source>
          <target state="new">The same analyzer will be applied when indexing and searching for that field.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For example, you can have separate fields for English, French, and Spanish hotel descriptions that exist side-by-side in the same index.</source>
          <target state="new">For example, you can have separate fields for English, French, and Spanish hotel descriptions that exist side-by-side in the same index.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ept id="p1">'searchFields' query parameter](#SearchQueryParameters)</ept> to specify which language-specific field to search against in your queries.</source>
          <target state="new">Use the <bpt id="p1">[</bpt><ept id="p1">'searchFields' query parameter](#SearchQueryParameters)</ept> to specify which language-specific field to search against in your queries.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You can review query examples that include the <ph id="ph1">`analyzer`</ph> property in <bpt id="p1">[</bpt><ept id="p1">Search Documents](#SearchDocs)</ept>.</source>
          <target state="new">You can review query examples that include the <ph id="ph1">`analyzer`</ph> property in <bpt id="p1">[</bpt><ept id="p1">Search Documents](#SearchDocs)</ept>.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Analyzer list<ept id="p1">***</ept>

Below is the list of supported languages together with Lucene and Microsoft analyzer names.</source>
          <target state="new"><bpt id="p1">***</bpt>Analyzer list<ept id="p1">***</ept>

Below is the list of supported languages together with Lucene and Microsoft analyzer names.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="new">Language</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Microsoft analyzer name</source>
          <target state="new">Microsoft analyzer name</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Lucene analyzer name</source>
          <target state="new">Lucene analyzer name</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="new">Arabic</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>ar.microsoft</source>
          <target state="new">ar.microsoft</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>ar.lucene</source>
          <target state="new">ar.lucene</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Armenian</source>
          <target state="new">Armenian</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>hy.lucene</source>
          <target state="new">hy.lucene</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Bangla</source>
          <target state="new">Bangla</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>bn.microsoft</source>
          <target state="new">bn.microsoft</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Basque</source>
          <target state="new">Basque</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>eu.lucene</source>
          <target state="new">eu.lucene</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Bulgarian</source>
          <target state="new">Bulgarian</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>bg.microsoft</source>
          <target state="new">bg.microsoft</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>bg.lucene</source>
          <target state="new">bg.lucene</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Catalan</source>
          <target state="new">Catalan</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>ca.microsoft</source>
          <target state="new">ca.microsoft</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>ca.lucene</source>
          <target state="new">ca.lucene</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Chinese Simplified</source>
          <target state="new">Chinese Simplified</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>zh-Hans.microsoft</source>
          <target state="new">zh-Hans.microsoft</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>zh-Hans.lucene</source>
          <target state="new">zh-Hans.lucene</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Chinese Traditional</source>
          <target state="new">Chinese Traditional</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>zh-Hant.microsoft</source>
          <target state="new">zh-Hant.microsoft</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>zh-Hant.lucene</source>
          <target state="new">zh-Hant.lucene</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Croatian</source>
          <target state="new">Croatian</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>hr.microsoft</source>
          <target state="new">hr.microsoft</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Czech</source>
          <target state="new">Czech</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>cs.microsoft</source>
          <target state="new">cs.microsoft</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>cs.lucene</source>
          <target state="new">cs.lucene</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Danish</source>
          <target state="new">Danish</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>da.microsoft</source>
          <target state="new">da.microsoft</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>da.lucene</source>
          <target state="new">da.lucene</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Dutch</source>
          <target state="new">Dutch</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>nl.microsoft</source>
          <target state="new">nl.microsoft</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>nl.lucene</source>
          <target state="new">nl.lucene</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>English</source>
          <target state="new">English</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>en.microsoft</source>
          <target state="new">en.microsoft</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>en.lucene</source>
          <target state="new">en.lucene</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Estonian</source>
          <target state="new">Estonian</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>et.microsoft</source>
          <target state="new">et.microsoft</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Finnish</source>
          <target state="new">Finnish</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>fi.microsoft</source>
          <target state="new">fi.microsoft</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>fi.lucene</source>
          <target state="new">fi.lucene</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>French</source>
          <target state="new">French</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>fr.microsoft</source>
          <target state="new">fr.microsoft</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>fr.lucene</source>
          <target state="new">fr.lucene</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Galician</source>
          <target state="new">Galician</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>gl.lucene</source>
          <target state="new">gl.lucene</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>German</source>
          <target state="new">German</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>de.microsoft</source>
          <target state="new">de.microsoft</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>de.lucene</source>
          <target state="new">de.lucene</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Greek</source>
          <target state="new">Greek</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>el.microsoft</source>
          <target state="new">el.microsoft</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>el.lucene</source>
          <target state="new">el.lucene</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Gujarati</source>
          <target state="new">Gujarati</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>gu.microsoft</source>
          <target state="new">gu.microsoft</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="new">Hebrew</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>he.microsoft</source>
          <target state="new">he.microsoft</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Hindi</source>
          <target state="new">Hindi</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>hi.microsoft</source>
          <target state="new">hi.microsoft</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>hi.lucene</source>
          <target state="new">hi.lucene</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Hungarian</source>
          <target state="new">Hungarian</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>hu.microsoft</source>
          <target state="new">hu.microsoft</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>hu.lucene</source>
          <target state="new">hu.lucene</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Icelandic</source>
          <target state="new">Icelandic</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>is.microsoft</source>
          <target state="new">is.microsoft</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Indonesian (Bahasa)</source>
          <target state="new">Indonesian (Bahasa)</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>id.microsoft</source>
          <target state="new">id.microsoft</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>id.lucene</source>
          <target state="new">id.lucene</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Irish</source>
          <target state="new">Irish</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>ga.lucene</source>
          <target state="new">ga.lucene</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Italian</source>
          <target state="new">Italian</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>it.microsoft</source>
          <target state="new">it.microsoft</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>it.lucene</source>
          <target state="new">it.lucene</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Japanese</source>
          <target state="new">Japanese</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>ja.microsoft</source>
          <target state="new">ja.microsoft</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>ja.lucene</source>
          <target state="new">ja.lucene</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Kannada</source>
          <target state="new">Kannada</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>ka.microsoft</source>
          <target state="new">ka.microsoft</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Korean</source>
          <target state="new">Korean</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>ko.lucene</source>
          <target state="new">ko.lucene</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Latvian</source>
          <target state="new">Latvian</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>lv.microsoft</source>
          <target state="new">lv.microsoft</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>lv.lucene</source>
          <target state="new">lv.lucene</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Lithuanian</source>
          <target state="new">Lithuanian</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>lt.microsoft</source>
          <target state="new">lt.microsoft</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Malayalam</source>
          <target state="new">Malayalam</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>ml.microsoft</source>
          <target state="new">ml.microsoft</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Malay (Latin)</source>
          <target state="new">Malay (Latin)</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>ms.microsoft</source>
          <target state="new">ms.microsoft</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Marathi</source>
          <target state="new">Marathi</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>mr.microsoft</source>
          <target state="new">mr.microsoft</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Norwegian</source>
          <target state="new">Norwegian</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>nb.microsoft</source>
          <target state="new">nb.microsoft</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>no.lucene</source>
          <target state="new">no.lucene</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Persian</source>
          <target state="new">Persian</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>fa.lucene</source>
          <target state="new">fa.lucene</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Polish</source>
          <target state="new">Polish</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>pl.microsoft</source>
          <target state="new">pl.microsoft</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>pl.lucene</source>
          <target state="new">pl.lucene</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Portuguese (Brazil)</source>
          <target state="new">Portuguese (Brazil)</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>pt-Br.microsoft</source>
          <target state="new">pt-Br.microsoft</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>pt-Br.lucene</source>
          <target state="new">pt-Br.lucene</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Portuguese (Portugal)</source>
          <target state="new">Portuguese (Portugal)</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>pt-Pt.microsoft</source>
          <target state="new">pt-Pt.microsoft</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>pt-Pt.lucene</source>
          <target state="new">pt-Pt.lucene</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Punjabi</source>
          <target state="new">Punjabi</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>pa.microsoft</source>
          <target state="new">pa.microsoft</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Romanian</source>
          <target state="new">Romanian</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>ro.microsoft</source>
          <target state="new">ro.microsoft</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>ro.lucene</source>
          <target state="new">ro.lucene</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Russian</source>
          <target state="new">Russian</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>ru.microsoft</source>
          <target state="new">ru.microsoft</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>ru.lucene</source>
          <target state="new">ru.lucene</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Serbian (Cyrillic)</source>
          <target state="new">Serbian (Cyrillic)</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>sr-cyrillic.microsoft</source>
          <target state="new">sr-cyrillic.microsoft</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Serbian (Latin)</source>
          <target state="new">Serbian (Latin)</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>sr-latin.microsoft</source>
          <target state="new">sr-latin.microsoft</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Slovak</source>
          <target state="new">Slovak</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>sk.microsoft</source>
          <target state="new">sk.microsoft</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Slovenian</source>
          <target state="new">Slovenian</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>sl.microsoft</source>
          <target state="new">sl.microsoft</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Spanish</source>
          <target state="new">Spanish</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>es.microsoft</source>
          <target state="new">es.microsoft</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>es.lucene</source>
          <target state="new">es.lucene</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Swedish</source>
          <target state="new">Swedish</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>sv.microsoft</source>
          <target state="new">sv.microsoft</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>sv.lucene</source>
          <target state="new">sv.lucene</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Tamil</source>
          <target state="new">Tamil</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>ta.microsoft</source>
          <target state="new">ta.microsoft</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Telugu</source>
          <target state="new">Telugu</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>te.microsoft</source>
          <target state="new">te.microsoft</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Thai</source>
          <target state="new">Thai</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>th.microsoft</source>
          <target state="new">th.microsoft</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>th.lucene</source>
          <target state="new">th.lucene</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Turkish</source>
          <target state="new">Turkish</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>tr.microsoft</source>
          <target state="new">tr.microsoft</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>tr.lucene</source>
          <target state="new">tr.lucene</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Ukrainian</source>
          <target state="new">Ukrainian</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>uk.microsoft</source>
          <target state="new">uk.microsoft</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Urdu</source>
          <target state="new">Urdu</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>ur.microsoft</source>
          <target state="new">ur.microsoft</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Vietnamese</source>
          <target state="new">Vietnamese</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>vi.microsoft</source>
          <target state="new">vi.microsoft</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Additionally Azure Search provides language-agnostic analyzer configurations</source>
          <target state="new">Additionally Azure Search provides language-agnostic analyzer configurations</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Standard ASCII Folding</source>
          <target state="new">Standard ASCII Folding</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>standardasciifolding.lucene</source>
          <target state="new">standardasciifolding.lucene</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Unicode text segmentation (Standard Tokenizer)</source>
          <target state="new">Unicode text segmentation (Standard Tokenizer)</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>ASCII folding filter - converts Unicode characters that don't belong to the set of first 127 ASCII characters into their ASCII equivalents.</source>
          <target state="new">ASCII folding filter - converts Unicode characters that don't belong to the set of first 127 ASCII characters into their ASCII equivalents.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>This is useful for removing diacritics.</source>
          <target state="new">This is useful for removing diacritics.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>All analyzers with names annotated with <ph id="ph1">&lt;i&gt;</ph>lucene<ph id="ph2">&lt;/i&gt;</ph> are powered by <bpt id="p1">[</bpt><ept id="p1">Apache Lucene's language analyzers](http://lucene.apache.org/core/4_9_0/analyzers-common/overview-summary.html)</ept>.</source>
          <target state="new">All analyzers with names annotated with <ph id="ph1">&lt;i&gt;</ph>lucene<ph id="ph2">&lt;/i&gt;</ph> are powered by <bpt id="p1">[</bpt><ept id="p1">Apache Lucene's language analyzers](http://lucene.apache.org/core/4_9_0/analyzers-common/overview-summary.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>More information about the ASCII folding filter can be found <bpt id="p1">[</bpt><ept id="p1">here](http://lucene.apache.org/core/4_9_0/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html)</ept>.</source>
          <target state="new">More information about the ASCII folding filter can be found <bpt id="p1">[</bpt><ept id="p1">here](http://lucene.apache.org/core/4_9_0/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Suggesters<ept id="p1">**</ept>

A <ph id="ph1">`suggester`</ph> defines which fields in an index are used to support auto-complete in searches.</source>
          <target state="new"><bpt id="p1">**</bpt>Suggesters<ept id="p1">**</ept>

A <ph id="ph1">`suggester`</ph> defines which fields in an index are used to support auto-complete in searches.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Typically partial search strings are sent to the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> while the user is typing a search query, and the API returns a set of suggested phrases.</source>
          <target state="new">Typically partial search strings are sent to the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> while the user is typing a search query, and the API returns a set of suggested phrases.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A suggester that you define in the index determines which fields are used to build the type-ahead search terms.</source>
          <target state="new">A suggester that you define in the index determines which fields are used to build the type-ahead search terms.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Suggesters](#Suggesters)</ept> for configuration details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Suggesters](#Suggesters)</ept> for configuration details.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Scoring profiles<ept id="p1">**</ept>

A <ph id="ph1">`scoringProfile`</ph> defines custom scoring behaviors that let you influence which items appear higher in the search results.</source>
          <target state="new"><bpt id="p1">**</bpt>Scoring profiles<ept id="p1">**</ept>

A <ph id="ph1">`scoringProfile`</ph> defines custom scoring behaviors that let you influence which items appear higher in the search results.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Scoring profiles are made up of field weights and functions.</source>
          <target state="new">Scoring profiles are made up of field weights and functions.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>To use them, you specify a profile by name on the query string.</source>
          <target state="new">To use them, you specify a profile by name on the query string.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A default scoring profile operates behind the scenes to compute a search score for every item in a result set.</source>
          <target state="new">A default scoring profile operates behind the scenes to compute a search score for every item in a result set.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>You can use the internal, unnamed scoring profile.</source>
          <target state="new">You can use the internal, unnamed scoring profile.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Alternatively, set <ph id="ph1">`defaultScoringProfile`</ph> to use a custom profile as the default, invoked whenever a custom profile is not specified on the query string.</source>
          <target state="new">Alternatively, set <ph id="ph1">`defaultScoringProfile`</ph> to use a custom profile as the default, invoked whenever a custom profile is not specified on the query string.</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Add scoring profiles to a search index (Azure Search Service REST API)](search-api-scoring-profiles-2015-02-28.md)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Add scoring profiles to a search index (Azure Search Service REST API)](search-api-scoring-profiles-2015-02-28.md)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CORS Options<ept id="p1">**</ept>

Client-side Javascript cannot call any APIs by default since the browser will prevent all cross-origin requests.</source>
          <target state="new"><bpt id="p1">**</bpt>CORS Options<ept id="p1">**</ept>

Client-side Javascript cannot call any APIs by default since the browser will prevent all cross-origin requests.</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Enable CORS (Cross-Origin Resource Sharing) by setting the <ph id="ph1">`corsOptions`</ph> attribute to allow cross-origin queries to your index.</source>
          <target state="new">Enable CORS (Cross-Origin Resource Sharing) by setting the <ph id="ph1">`corsOptions`</ph> attribute to allow cross-origin queries to your index.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Note that only query APIs support CORS for security reasons.</source>
          <target state="new">Note that only query APIs support CORS for security reasons.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The following options can be set for CORS:

<ph id="ph1">- `allowedOrigins`</ph> (required): This is a list of origins that will be granted access to your index.</source>
          <target state="new">The following options can be set for CORS:

<ph id="ph1">- `allowedOrigins`</ph> (required): This is a list of origins that will be granted access to your index.</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>This means that any Javascript code served from those origins will be allowed to query your index (assuming it provides the correct API key).</source>
          <target state="new">This means that any Javascript code served from those origins will be allowed to query your index (assuming it provides the correct API key).</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Each origin is typically of the form <ph id="ph1">`protocol://fully-qualified-domain-name:port`</ph> although the port is often omitted.</source>
          <target state="new">Each origin is typically of the form <ph id="ph1">`protocol://fully-qualified-domain-name:port`</ph> although the port is often omitted.</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">this article](http://go.microsoft.com/fwlink/?LinkId=330822)</ept> for more details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">this article](http://go.microsoft.com/fwlink/?LinkId=330822)</ept> for more details.</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>- If you want to allow access to all origins, include <ph id="ph1">`*`</ph> as a single item in the <ph id="ph2">`allowedOrigins`</ph> array.</source>
          <target state="new">- If you want to allow access to all origins, include <ph id="ph1">`*`</ph> as a single item in the <ph id="ph2">`allowedOrigins`</ph> array.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>this is not recommended practice for production search services.<ept id="p1">**</ept> However, it may be useful for development or debugging purposes.</source>
          <target state="new">Note that <bpt id="p1">**</bpt>this is not recommended practice for production search services.<ept id="p1">**</ept> However, it may be useful for development or debugging purposes.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `maxAgeInSeconds`</ph> (optional): Browsers use this value to determine the duration (in seconds) to cache CORS preflight responses.</source>
          <target state="new"><ph id="ph1">- `maxAgeInSeconds`</ph> (optional): Browsers use this value to determine the duration (in seconds) to cache CORS preflight responses.</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>This must be a non-negative integer.</source>
          <target state="new">This must be a non-negative integer.</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The larger this value is, the better performance will be, but the longer it will take for CORS policy changes to take effect.</source>
          <target state="new">The larger this value is, the better performance will be, but the longer it will take for CORS policy changes to take effect.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>If it is not set, a default duration of 5 minutes will be used.</source>
          <target state="new">If it is not set, a default duration of 5 minutes will be used.</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="CreateUpdateIndexExample"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Request Body Example<ept id="p1">**</ept><bpt id="p2">

    {
      "name": "hotels",  
      "fields": [
        {"name": "hotelId", "type": "Edm.String", "key": true, "searchable": false},
        {"name": "baseRate", "type": "Edm.Double"},
        {"name": "description", "type": "Edm.String", "filterable": false, "sortable": false, "facetable": false},
        {"name": "description_fr", "type": "Edm.String", "filterable": false, "sortable": false, "facetable": false, "analyzer"="fr.lucene"},
        {"name": "hotelName", "type": "Edm.String"},
        {"name": "category", "type": "Edm.String"},
        {"name": "tags", "type": "Collection(Edm.String)"},
        {"name": "parkingIncluded", "type": "Edm.Boolean"},
        {"name": "smokingAllowed", "type": "Edm.Boolean"},
        {"name": "lastRenovationDate", "type": "Edm.DateTimeOffset"},
        {"name": "rating", "type": "Edm.Int32"},
        {"name": "location", "type": "Edm.GeographyPoint"}
      ],
      "suggesters": [
        {
          "name": "sg",
          "searchMode": "analyzingInfixMatching",
          "sourceFields": ["hotelName"]
        }
      ]
    }

**</bpt>Response<ept id="p2">**</ept>

For a successful request: "201 Created".</source>
          <target state="new"><ph id="ph1">&lt;a name="CreateUpdateIndexExample"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Request Body Example<ept id="p1">**</ept><bpt id="p2">

    {
      "name": "hotels",  
      "fields": [
        {"name": "hotelId", "type": "Edm.String", "key": true, "searchable": false},
        {"name": "baseRate", "type": "Edm.Double"},
        {"name": "description", "type": "Edm.String", "filterable": false, "sortable": false, "facetable": false},
        {"name": "description_fr", "type": "Edm.String", "filterable": false, "sortable": false, "facetable": false, "analyzer"="fr.lucene"},
        {"name": "hotelName", "type": "Edm.String"},
        {"name": "category", "type": "Edm.String"},
        {"name": "tags", "type": "Collection(Edm.String)"},
        {"name": "parkingIncluded", "type": "Edm.Boolean"},
        {"name": "smokingAllowed", "type": "Edm.Boolean"},
        {"name": "lastRenovationDate", "type": "Edm.DateTimeOffset"},
        {"name": "rating", "type": "Edm.Int32"},
        {"name": "location", "type": "Edm.GeographyPoint"}
      ],
      "suggesters": [
        {
          "name": "sg",
          "searchMode": "analyzingInfixMatching",
          "sourceFields": ["hotelName"]
        }
      ]
    }

**</bpt>Response<ept id="p2">**</ept>

For a successful request: "201 Created".</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>By default the response body will contain the JSON for the index definition that was created.</source>
          <target state="new">By default the response body will contain the JSON for the index definition that was created.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Prefer`</ph> request header is set to <ph id="ph2">`return=minimal`</ph>, the response body will be empty and the success status code will be "204 No Content" instead of "201 Created".</source>
          <target state="new">If the <ph id="ph1">`Prefer`</ph> request header is set to <ph id="ph2">`return=minimal`</ph>, the response body will be empty and the success status code will be "204 No Content" instead of "201 Created".</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>This is true regardless of whether PUT or POST was used to create the index.</source>
          <target state="new">This is true regardless of whether PUT or POST was used to create the index.</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept>

Currently, there is limited support for index schema updates.</source>
          <target state="new"><bpt id="p1">**</bpt>Remarks<ept id="p1">**</ept>

Currently, there is limited support for index schema updates.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Any schema updates that would require re-indexing such as changing field types are not currently supported.</source>
          <target state="new">Any schema updates that would require re-indexing such as changing field types are not currently supported.</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Although existing fields cannot be changed or deleted, new fields can be added to an existing index at any time.</source>
          <target state="new">Although existing fields cannot be changed or deleted, new fields can be added to an existing index at any time.</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>When a new field is added, all existing documents in the index will automatically have a null value for that field.</source>
          <target state="new">When a new field is added, all existing documents in the index will automatically have a null value for that field.</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>No additional storage space will be consumed until new documents are added to the index.</source>
          <target state="new">No additional storage space will be consumed until new documents are added to the index.</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="Suggesters"&gt;&lt;/a&gt;</ph>
##Suggesters

The suggestions feature in Azure Search is a type-ahead or auto-complete query capability, providing a list of potential search terms in response to partial string inputs entered into a search box.</source>
          <target state="new"><ph id="ph1">&lt;a name="Suggesters"&gt;&lt;/a&gt;</ph>
##Suggesters

The suggestions feature in Azure Search is a type-ahead or auto-complete query capability, providing a list of potential search terms in response to partial string inputs entered into a search box.</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>You've probably noticed query suggestions when using commercial web search engines: typing ".NET" in Bing produces a list of terms for ".NET 4.5", ".NET Framework 3.5", and so forth.</source>
          <target state="new">You've probably noticed query suggestions when using commercial web search engines: typing ".NET" in Bing produces a list of terms for ".NET 4.5", ".NET Framework 3.5", and so forth.</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>When using the Search service REST API, implementing suggestions in a custom Azure Search application requires the following:

- Enable suggestions by adding a <bpt id="p1">**</bpt>suggester<ept id="p1">**</ept> construction in your index, giving the name, search mode, and a list of fields for which type-ahead is invoked.</source>
          <target state="new">When using the Search service REST API, implementing suggestions in a custom Azure Search application requires the following:

- Enable suggestions by adding a <bpt id="p1">**</bpt>suggester<ept id="p1">**</ept> construction in your index, giving the name, search mode, and a list of fields for which type-ahead is invoked.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>For example, if you specify "cityName" as a source field, typing a partial search string of "Sea" will result in "Seattle", "Seaside", and "Seatac" (all three are actual city names) offered up as query suggestions to the user.</source>
          <target state="new">For example, if you specify "cityName" as a source field, typing a partial search string of "Sea" will result in "Seattle", "Seaside", and "Seatac" (all three are actual city names) offered up as query suggestions to the user.</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>- Invoke suggestions by calling the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> in your application code.</source>
          <target state="new">- Invoke suggestions by calling the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> in your application code.</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Typically partial search strings are sent to the service while the user is typing a search query, and this API returns a set of suggested phrases.</source>
          <target state="new">Typically partial search strings are sent to the service while the user is typing a search query, and this API returns a set of suggested phrases.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>This article explains how to configure a <bpt id="p1">**</bpt>suggester<ept id="p1">**</ept>.</source>
          <target state="new">This article explains how to configure a <bpt id="p1">**</bpt>suggester<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>You should also review the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> for details on how a suggester is used.</source>
          <target state="new">You should also review the <bpt id="p1">[</bpt><ept id="p1">Suggestions API](#Suggestions)</ept> for details on how a suggester is used.</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Usage<ept id="p1">**</ept><ph id="ph1">

`Suggesters`</ph> are created in the index and work best when used to suggest specific documents rather than loose terms or phrases.</source>
          <target state="new"><bpt id="p1">**</bpt>Usage<ept id="p1">**</ept><ph id="ph1">

`Suggesters`</ph> are created in the index and work best when used to suggest specific documents rather than loose terms or phrases.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The best candidate fields are titles, names, and other relatively short phrases that can identify an item.</source>
          <target state="new">The best candidate fields are titles, names, and other relatively short phrases that can identify an item.</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Less effective are repetitive fields, such as categories and tags, or very long fields such as descriptions or comments fields.</source>
          <target state="new">Less effective are repetitive fields, such as categories and tags, or very long fields such as descriptions or comments fields.</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>As part of the index definition, you can add a single suggester to the <ph id="ph1">`suggesters`</ph> collection.</source>
          <target state="new">As part of the index definition, you can add a single suggester to the <ph id="ph1">`suggesters`</ph> collection.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Properties that define a suggester include the following:

<ph id="ph1">- `name`</ph>: The name of the suggester.</source>
          <target state="new">Properties that define a suggester include the following:

<ph id="ph1">- `name`</ph>: The name of the suggester.</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>You use the name of the suggester when calling the <ph id="ph1">`suggest`</ph> API.</source>
          <target state="new">You use the name of the suggester when calling the <ph id="ph1">`suggest`</ph> API.</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `searchMode`</ph>: The strategy used to search for candidate phrases.</source>
          <target state="new"><ph id="ph1">- `searchMode`</ph>: The strategy used to search for candidate phrases.</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The only mode currently supported is <ph id="ph1">`analyzingInfixMatching`</ph>, which performs flexible matching of phrases at the beginning or in the middle of sentences.</source>
          <target state="new">The only mode currently supported is <ph id="ph1">`analyzingInfixMatching`</ph>, which performs flexible matching of phrases at the beginning or in the middle of sentences.</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `sourceFields`</ph>: A list of one or more fields that are the source of the content for suggestions.</source>
          <target state="new"><ph id="ph1">- `sourceFields`</ph>: A list of one or more fields that are the source of the content for suggestions.</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Only fields of type <ph id="ph1">`Edm.String`</ph> and <ph id="ph2">`Collection(Edm.String)`</ph> may be sources for suggestions.</source>
          <target state="new">Only fields of type <ph id="ph1">`Edm.String`</ph> and <ph id="ph2">`Collection(Edm.String)`</ph> may be sources for suggestions.</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Only fields that don't have a custom language analyzer set can be used.</source>
          <target state="new">Only fields that don't have a custom language analyzer set can be used.</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Suggester Example<ept id="p1">**</ept>

A suggester is part of the index.</source>
          <target state="new"><bpt id="p1">**</bpt>Suggester Example<ept id="p1">**</ept>

A suggester is part of the index.</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Only one suggester can exist in the <ph id="ph1">`suggesters`</ph> collection in the current version, alongside the fields collection and <ph id="ph2">`scoringProfiles`</ph>.</source>
          <target state="new">Only one suggester can exist in the <ph id="ph1">`suggesters`</ph> collection in the current version, alongside the fields collection and <ph id="ph2">`scoringProfiles`</ph>.</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><ph id="ph1">{
          "name": "hotels",
          "fields": [
             . . .
           ],
          "suggesters": [
            {
            "name": "sg",
            "searchMode": "analyzingInfixMatching",
            "sourceFields: ["hotelName", "category"]
            }
          ],
          "scoringProfiles": [
             . . .
          ]
        }

&gt; [AZURE.NOTE]</ph>  If you used the public preview version of Azure Search, <ph id="ph2">`suggesters`</ph> replaces an older boolean property (<ph id="ph3">`"suggestions": false`</ph>) that only supported prefix suggestions for short strings (3-25 characters).</source>
          <target state="new"><ph id="ph1">{
          "name": "hotels",
          "fields": [
             . . .
           ],
          "suggesters": [
            {
            "name": "sg",
            "searchMode": "analyzingInfixMatching",
            "sourceFields: ["hotelName", "category"]
            }
          ],
          "scoringProfiles": [
             . . .
          ]
        }

&gt; [AZURE.NOTE]</ph>  If you used the public preview version of Azure Search, <ph id="ph2">`suggesters`</ph> replaces an older boolean property (<ph id="ph3">`"suggestions": false`</ph>) that only supported prefix suggestions for short strings (3-25 characters).</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Its replacement, <ph id="ph1">`suggesters`</ph>, supports infix matching that finds matching terms at the beginning or in the middle of field content, with better tolerance for mistakes in search strings.</source>
          <target state="new">Its replacement, <ph id="ph1">`suggesters`</ph>, supports infix matching that finds matching terms at the beginning or in the middle of field content, with better tolerance for mistakes in search strings.</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Starting with the generally available release, this is now the only implementation of the suggestions API.</source>
          <target state="new">Starting with the generally available release, this is now the only implementation of the suggestions API.</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The older <ph id="ph1">`suggestions`</ph> property that was introduced in <ph id="ph2">`api-version=2014-07-31-Preview`</ph> continues to work in that version, but is not operational in the <ph id="ph3">`2015-02-28`</ph> or later versions of Azure Search.</source>
          <target state="new">The older <ph id="ph1">`suggestions`</ph> property that was introduced in <ph id="ph2">`api-version=2014-07-31-Preview`</ph> continues to work in that version, but is not operational in the <ph id="ph3">`2015-02-28`</ph> or later versions of Azure Search.</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="UpdateIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Update Index

You can update an existing index within Azure Search using an HTTP PUT request.</source>
          <target state="new"><ph id="ph1">&lt;a name="UpdateIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Update Index

You can update an existing index within Azure Search using an HTTP PUT request.</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Updates can include adding new fields to the existing schema, modifying CORS options, and modifying scoring profiles.</source>
          <target state="new">Updates can include adding new fields to the existing schema, modifying CORS options, and modifying scoring profiles.</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>You specify the name of the index to update on the request URI:

    <bpt id="p1">PUT https://[search service url]/indexes/[index name]?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin key]

**</bpt>Important:<ept id="p1">**</ept> Support for index schema updates is limited to operations that don't require rebuilding the search index.</source>
          <target state="new">You specify the name of the index to update on the request URI:

    <bpt id="p1">PUT https://[search service url]/indexes/[index name]?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin key]

**</bpt>Important:<ept id="p1">**</ept> Support for index schema updates is limited to operations that don't require rebuilding the search index.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Any schema updates that would require re-indexing, such as changing field types, are not currently supported.</source>
          <target state="new">Any schema updates that would require re-indexing, such as changing field types, are not currently supported.</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>New fields can be added at any time, although existing fields cannot be changed or deleted.</source>
          <target state="new">New fields can be added at any time, although existing fields cannot be changed or deleted.</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The same applies to <ph id="ph1">`suggesters`</ph>.</source>
          <target state="new">The same applies to <ph id="ph1">`suggesters`</ph>.</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>New fields may be added to a suggester at the time the fields are added, but fields cannot be removed from <ph id="ph1">`suggesters`</ph> and existing fields cannot be added to <ph id="ph2">`suggesters`</ph>.</source>
          <target state="new">New fields may be added to a suggester at the time the fields are added, but fields cannot be removed from <ph id="ph1">`suggesters`</ph> and existing fields cannot be added to <ph id="ph2">`suggesters`</ph>.</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>When adding a new field to an index, all existing documents in the index will automatically have a null value for that field.</source>
          <target state="new">When adding a new field to an index, all existing documents in the index will automatically have a null value for that field.</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>No additional storage space will be consumed until new documents are added to the index.</source>
          <target state="new">No additional storage space will be consumed until new documents are added to the index.</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</source>
          <target state="new"><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update Index<ept id="p1">**</ept> request is constructed using HTTP PUT.</source>
          <target state="new">The <bpt id="p1">**</bpt>Update Index<ept id="p1">**</ept> request is constructed using HTTP PUT.</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>With PUT, the index name is part of the URL.</source>
          <target state="new">With PUT, the index name is part of the URL.</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>If the index doesn't exist, it is created.</source>
          <target state="new">If the index doesn't exist, it is created.</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>If the index already exists, it is updated to the new definition.</source>
          <target state="new">If the index already exists, it is updated to the new definition.</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.</source>
          <target state="new">The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.</source>
          <target state="new">After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `Content-Type`</ph>: Required.</source>
          <target state="new"><ph id="ph1">- `Content-Type`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Set this to <ph id="ph1">`application/json`</ph><ph id="ph2">
- `api-key`</ph>: Required.</source>
          <target state="new">Set this to <ph id="ph1">`application/json`</ph><ph id="ph2">
- `api-key`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new">The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Update Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body Syntax<ept id="p1">**</ept>

When updating an existing index, the body must include the original schema definition, plus the new fields you are adding, as well as the modified scoring profiles, suggesters and CORS options, if any.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body Syntax<ept id="p1">**</ept>

When updating an existing index, the body must include the original schema definition, plus the new fields you are adding, as well as the modified scoring profiles, suggesters and CORS options, if any.</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If you are not modifying the scoring profiles and CORS options, you must include the originals from when the index was created.</source>
          <target state="new">If you are not modifying the scoring profiles and CORS options, you must include the originals from when the index was created.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>In general the best pattern to use for updates is to retrieve the index definition with a GET, modify it, then update it with PUT.</source>
          <target state="new">In general the best pattern to use for updates is to retrieve the index definition with a GET, modify it, then update it with PUT.</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The schema syntax used to create an index is reproduced here for convenience.</source>
          <target state="new">The schema syntax used to create an index is reproduced here for convenience.</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create Index](#CreateIndex)</ept> for more details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create Index](#CreateIndex)</ept> for more details.</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">{
      "name": (optional) "name_of_index",
      "fields": [
        {
          "name": "name_of_field",
          "type": "Edm.String | Collection(Edm.String) | Edm.Int32 | Edm.Int64 | Edm.Double | Edm.Boolean | Edm.DateTimeOffset | Edm.GeographyPoint",
          "searchable": true (default where applicable) | false (only Edm.String and Collection(Edm.String) fields can be searchable),
          "filterable": true (default) | false,
          "sortable": true (default where applicable) | false (Collection(Edm.String) fields cannot be sortable),
          "facetable": true (default where applicable) | false (Edm.GeographyPoint fields cannot be facetable),
          "key": true | false (default, only Edm.String fields can be keys),
          "retrievable": true (default) | false,
          "analyzer": "name of text analyzer"
        }
      ],
      "suggesters": [
        {
          "name": "name of suggester",
          "searchMode": "analyzingInfixMatching" (other modes may be added in the future),
          "sourceFields": ["field1", "field2", ...]
        }
      ],
      "scoringProfiles": [
        {
          "name": "name of scoring profile",
          "text": (optional, only applies to searchable fields) {
            "weights": {
              "searchable_field_name": relative_weight_value (positive numbers),
              ...
            }
          },
          "functions": (optional) [
            {
              "type": "magnitude | freshness | distance | tag",
              "boost": # (positive number used as multiplier for raw score != 1),
              "fieldName": "...",
              "interpolation": "constant | linear (default) | quadratic | logarithmic",
              "magnitude": {
                "boostingRangeStart": #,
                "boostingRangeEnd": #,
                "constantBoostBeyondRange": true | false (default)
              },
              "freshness": {
                "boostingDuration": "..." (value representing timespan leading to now over which boosting occurs)
              },
              "distance": {
                "referencePointParameter": "...", (parameter to be passed in queries to use as reference location, see "scoringParameter" for syntax details)
                "boostingDistance": # (the distance in kilometers from the reference location where the boosting range ends)
              },
              "tag": {
                "tagsParameter": "..." (parameter to be passed in queries to specify list of tags to compare against target field, see "scoringParameter" for syntax details)
              }
            }
          ],
          "functionAggregation": (optional, applies only when functions are specified)
            "sum (default) | average | minimum | maximum | firstMatching"
        }
      ],
      "defaultScoringProfile": (optional) "...",
      "corsOptions": (optional) {
        "allowedOrigins": ["*"] | ["origin_1", "origin_2", ...],
        "maxAgeInSeconds": (optional) max_age_in_seconds (non-negative integer)
      }
    }


**</bpt>Response<ept id="p1">**</ept>

For a successful request: "204 No Content".</source>
          <target state="new"><bpt id="p1">{
      "name": (optional) "name_of_index",
      "fields": [
        {
          "name": "name_of_field",
          "type": "Edm.String | Collection(Edm.String) | Edm.Int32 | Edm.Int64 | Edm.Double | Edm.Boolean | Edm.DateTimeOffset | Edm.GeographyPoint",
          "searchable": true (default where applicable) | false (only Edm.String and Collection(Edm.String) fields can be searchable),
          "filterable": true (default) | false,
          "sortable": true (default where applicable) | false (Collection(Edm.String) fields cannot be sortable),
          "facetable": true (default where applicable) | false (Edm.GeographyPoint fields cannot be facetable),
          "key": true | false (default, only Edm.String fields can be keys),
          "retrievable": true (default) | false,
          "analyzer": "name of text analyzer"
        }
      ],
      "suggesters": [
        {
          "name": "name of suggester",
          "searchMode": "analyzingInfixMatching" (other modes may be added in the future),
          "sourceFields": ["field1", "field2", ...]
        }
      ],
      "scoringProfiles": [
        {
          "name": "name of scoring profile",
          "text": (optional, only applies to searchable fields) {
            "weights": {
              "searchable_field_name": relative_weight_value (positive numbers),
              ...
            }
          },
          "functions": (optional) [
            {
              "type": "magnitude | freshness | distance | tag",
              "boost": # (positive number used as multiplier for raw score != 1),
              "fieldName": "...",
              "interpolation": "constant | linear (default) | quadratic | logarithmic",
              "magnitude": {
                "boostingRangeStart": #,
                "boostingRangeEnd": #,
                "constantBoostBeyondRange": true | false (default)
              },
              "freshness": {
                "boostingDuration": "..." (value representing timespan leading to now over which boosting occurs)
              },
              "distance": {
                "referencePointParameter": "...", (parameter to be passed in queries to use as reference location, see "scoringParameter" for syntax details)
                "boostingDistance": # (the distance in kilometers from the reference location where the boosting range ends)
              },
              "tag": {
                "tagsParameter": "..." (parameter to be passed in queries to specify list of tags to compare against target field, see "scoringParameter" for syntax details)
              }
            }
          ],
          "functionAggregation": (optional, applies only when functions are specified)
            "sum (default) | average | minimum | maximum | firstMatching"
        }
      ],
      "defaultScoringProfile": (optional) "...",
      "corsOptions": (optional) {
        "allowedOrigins": ["*"] | ["origin_1", "origin_2", ...],
        "maxAgeInSeconds": (optional) max_age_in_seconds (non-negative integer)
      }
    }


**</bpt>Response<ept id="p1">**</ept>

For a successful request: "204 No Content".</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>By default the response body will be empty.</source>
          <target state="new">By default the response body will be empty.</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>However, if the <ph id="ph1">`Prefer`</ph> request header is set to <ph id="ph2">`return=representation`</ph>, the response body will contain the JSON for the index definition that was updated.</source>
          <target state="new">However, if the <ph id="ph1">`Prefer`</ph> request header is set to <ph id="ph2">`return=representation`</ph>, the response body will contain the JSON for the index definition that was updated.</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>In this case, the success status code will be "200 OK".</source>
          <target state="new">In this case, the success status code will be "200 OK".</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="ListIndexes"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> List Indexes

The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> operation returns a list of the indexes currently in your Azure Search service.</source>
          <target state="new"><ph id="ph1">&lt;a name="ListIndexes"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> List Indexes

The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> operation returns a list of the indexes currently in your Azure Search service.</target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> request can be constructed using the GET method.</source>
          <target state="new">The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> request can be constructed using the GET method.</target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: Required.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new">The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>List Indexes<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Here is an example response body:

    {
      "value": [
        {
          "name": "Books",
          "fields": [
            {"name": "ISBN", ...},
            ...
          ]
        },
        {
          "name": "Games",
          ...
        },
        ...
      ]
    }

Note that you can filter the response down to just the properties you're interested in.</source>
          <target state="new">Here is an example response body:

    {
      "value": [
        {
          "name": "Books",
          "fields": [
            {"name": "ISBN", ...},
            ...
          ]
        },
        {
          "name": "Games",
          ...
        },
        ...
      ]
    }

Note that you can filter the response down to just the properties you're interested in.</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>For example, if you want only a list of index names, use the OData <ph id="ph1">`$select`</ph> query option:

    GET /indexes?api-version=2015-02-28-Preview&amp;$select=name

In this case, the response from the above example would appear as follows:

    {
      "value": [
        {"name": "Books"},
        {"name": "Games"},
        ...
      ]
    }

This is a useful technique to save bandwidth if you have a lot of indexes in your Search service.</source>
          <target state="new">For example, if you want only a list of index names, use the OData <ph id="ph1">`$select`</ph> query option:

    GET /indexes?api-version=2015-02-28-Preview&amp;$select=name

In this case, the response from the above example would appear as follows:

    {
      "value": [
        {"name": "Books"},
        {"name": "Games"},
        ...
      ]
    }

This is a useful technique to save bandwidth if you have a lot of indexes in your Search service.</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="GetIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Get Index

The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> operation gets the index definition from Azure Search.</source>
          <target state="new"><ph id="ph1">&lt;a name="GetIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Get Index

The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> operation gets the index definition from Azure Search.</target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> request can be constructed using the GET method.</source>
          <target state="new">The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> request can be constructed using the GET method.</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The [index name] in the request URI specifies which index to return from the indexes collection.</source>
          <target state="new">The [index name] in the request URI specifies which index to return from the indexes collection.</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Get Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>See the example JSON in <bpt id="p1">[</bpt><ept id="p1">Creating and Updating an Index](#CreateUpdateIndexExample)</ept> for an example of the response payload.</source>
          <target state="new">See the example JSON in <bpt id="p1">[</bpt><ept id="p1">Creating and Updating an Index](#CreateUpdateIndexExample)</ept> for an example of the response payload.</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="DeleteIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Delete Index

The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> operation removes an index and associated documents from your Azure Search service.</source>
          <target state="new"><ph id="ph1">&lt;a name="DeleteIndex"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Delete Index

The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> operation removes an index and associated documents from your Azure Search service.</target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>You can get the index name from the service dashboard in the Azure portal, or from the API.</source>
          <target state="new">You can get the index name from the service dashboard in the Azure portal, or from the API.</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">List Indexes](#ListIndexes)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">List Indexes](#ListIndexes)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">DELETE https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">DELETE https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> request can be constructed using the DELETE method.</source>
          <target state="new">The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> request can be constructed using the DELETE method.</target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The [index name] in the request URI specifies which index to delete from the indexes collection.</source>
          <target state="new">The [index name] in the request URI specifies which index to delete from the indexes collection.</target>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: Required.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new">The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service URL.</source>
          <target state="new">It is a string value, unique to your service URL.</target>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Delete Index<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 204 No Content is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 204 No Content is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="GetIndexStats"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Get Index Statistics

The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> operation returns from Azure Search a document count for the current index, plus storage usage.</source>
          <target state="new"><ph id="ph1">&lt;a name="GetIndexStats"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Get Index Statistics

The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> operation returns from Azure Search a document count for the current index, plus storage usage.</target>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/stats?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all services requests.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/stats?api-version=[api-version]
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all services requests.</target>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> request can be constructed using the GET method.</source>
          <target state="new">The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> request can be constructed using the GET method.</target>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The [index name] in the request URI tells the service to return index statistics for the specified index.</source>
          <target state="new">The [index name] in the request URI tells the service to return index statistics for the specified index.</target>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Get Index Statistics<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> set to an admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The response body is in the following format:

    <ph id="ph1">{
      "documentCount": number,
      "storageSize": number (size of the index in bytes)
    }

________________________________________
&lt;a name="DocOps"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Document Operations

In Azure Search, an index is stored in the cloud and populated using JSON documents that you upload to the service.</source>
          <target state="new">The response body is in the following format:

    <ph id="ph1">{
      "documentCount": number,
      "storageSize": number (size of the index in bytes)
    }

________________________________________
&lt;a name="DocOps"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Document Operations

In Azure Search, an index is stored in the cloud and populated using JSON documents that you upload to the service.</target>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>All the documents that you upload comprise the corpus of your search data.</source>
          <target state="new">All the documents that you upload comprise the corpus of your search data.</target>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Documents contain fields, some of which are tokenized into search terms as they are uploaded.</source>
          <target state="new">Documents contain fields, some of which are tokenized into search terms as they are uploaded.</target>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/docs`</ph> URL segment in the Azure Search API represents the collection of documents in an index.</source>
          <target state="new">The <ph id="ph1">`/docs`</ph> URL segment in the Azure Search API represents the collection of documents in an index.</target>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>All operations performed on the collection such as uploading, merging, deleting, or querying documents take place in the context of a single index, so the URLs for these operations will always start with <ph id="ph1">`/indexes/[index name]/docs`</ph> for a given index name.</source>
          <target state="new">All operations performed on the collection such as uploading, merging, deleting, or querying documents take place in the context of a single index, so the URLs for these operations will always start with <ph id="ph1">`/indexes/[index name]/docs`</ph> for a given index name.</target>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Your application code must either generate JSON documents to upload to Azure Search or you can use an <bpt id="p1">[</bpt><ept id="p1">indexer](https://msdn.microsoft.com/library/dn946891.aspx)</ept> to load documents if the data source is either Azure SQL Database or DocumentDB.</source>
          <target state="new">Your application code must either generate JSON documents to upload to Azure Search or you can use an <bpt id="p1">[</bpt><ept id="p1">indexer](https://msdn.microsoft.com/library/dn946891.aspx)</ept> to load documents if the data source is either Azure SQL Database or DocumentDB.</target>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Typically, indexes are populated from a single dataset that you provide.</source>
          <target state="new">Typically, indexes are populated from a single dataset that you provide.</target>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>You should plan on having one document for each item that you want to search.</source>
          <target state="new">You should plan on having one document for each item that you want to search.</target>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>A movie rental application might have one document per movie, a storefront application might have one document per SKU, an online courseware application might have one document per course, a research firm might have one document for each academic paper in their repository, and so on.</source>
          <target state="new">A movie rental application might have one document per movie, a storefront application might have one document per SKU, an online courseware application might have one document per course, a research firm might have one document for each academic paper in their repository, and so on.</target>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Documents consist of one or more fields.</source>
          <target state="new">Documents consist of one or more fields.</target>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Fields can contain text that is tokenized by Azure Search into search terms, as well as non-tokenized or non-text values that can be used in filters or scoring profiles.</source>
          <target state="new">Fields can contain text that is tokenized by Azure Search into search terms, as well as non-tokenized or non-text values that can be used in filters or scoring profiles.</target>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The names, data types, and search features supported for each field are determined by the index schema.</source>
          <target state="new">The names, data types, and search features supported for each field are determined by the index schema.</target>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>One of the fields in each index schema must be designated as an ID, and each document must have a value for the ID field that uniquely identifies that document in the index.</source>
          <target state="new">One of the fields in each index schema must be designated as an ID, and each document must have a value for the ID field that uniquely identifies that document in the index.</target>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>All other document fields are optional and will default to a null value if left unspecified.</source>
          <target state="new">All other document fields are optional and will default to a null value if left unspecified.</target>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Note that null values do not take up space in the search index.</source>
          <target state="new">Note that null values do not take up space in the search index.</target>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Before you can upload documents, you must have already created the index on the service.</source>
          <target state="new">Before you can upload documents, you must have already created the index on the service.</target>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create Index](#CreateIndex)</ept> for details about this first step.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create Index](#CreateIndex)</ept> for details about this first step.</target>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="AddOrUpdateDocuments"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Add, Update, or Delete Documents

You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.</source>
          <target state="new"><ph id="ph1">&lt;a name="AddOrUpdateDocuments"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Add, Update, or Delete Documents

You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.</target>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>For large numbers of updates, batching of documents (up to 1000 documents per batch or about 16 MB per batch) is recommended.</source>
          <target state="new">For large numbers of updates, batching of documents (up to 1000 documents per batch or about 16 MB per batch) is recommended.</target>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">POST https://[service name].search.windows.net/indexes/[index name]/docs/index?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</source>
          <target state="new"><bpt id="p1">POST https://[service name].search.windows.net/indexes/[index name]/docs/index?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for all service requests.</target>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.</source>
          <target state="new">You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.</target>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The request URI includes [index name], specifying which index to post documents.</source>
          <target state="new">The request URI includes [index name], specifying which index to post documents.</target>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>You can only post documents to one index at a time.</source>
          <target state="new">You can only post documents to one index at a time.</target>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `Content-Type`</ph>: Required.</source>
          <target state="new"><ph id="ph1">- `Content-Type`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Set this to <ph id="ph1">`application/json`</ph><ph id="ph2">
- `api-key`</ph>: Required.</source>
          <target state="new">Set this to <ph id="ph1">`application/json`</ph><ph id="ph2">
- `api-key`</ph>: Required.</target>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new">The <ph id="ph1">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service.</source>
          <target state="new">It is a string value, unique to your service.</target>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Documents<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</source>
          <target state="new">The <bpt id="p1">**</bpt>Add Documents<ept id="p1">**</ept> request must include an <ph id="ph1">`api-key`</ph> header set to your admin key (as opposed to a query key).</target>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](.search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](.search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

The body of the request contains one or more documents to be indexed.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

The body of the request contains one or more documents to be indexed.</target>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Documents are identified by a unique key.</source>
          <target state="new">Documents are identified by a unique key.</target>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Each document is associated with an action: upload, merge, mergeOrUpload or delete.</source>
          <target state="new">Each document is associated with an action: upload, merge, mergeOrUpload or delete.</target>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Upload requests must include the document data as a set of key/value pairs.</source>
          <target state="new">Upload requests must include the document data as a set of key/value pairs.</target>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">{
      "value": [
        {
          "@search.action": "upload (default) | merge | mergeOrUpload | delete",
          "key_field_name": "unique_key_of_document", (key/value pair for key field from index schema)
          "field_name": field_value (key/value pairs matching index schema)
            ...
        },
        ...
      ]
    }

**</bpt>Document Actions<ept id="p1">**</ept><ph id="ph1">

- `upload`</ph>: An upload action is similar to an "upsert" where the document will be inserted if it is new and updated/replaced if it exists.</source>
          <target state="new"><bpt id="p1">{
      "value": [
        {
          "@search.action": "upload (default) | merge | mergeOrUpload | delete",
          "key_field_name": "unique_key_of_document", (key/value pair for key field from index schema)
          "field_name": field_value (key/value pairs matching index schema)
            ...
        },
        ...
      ]
    }

**</bpt>Document Actions<ept id="p1">**</ept><ph id="ph1">

- `upload`</ph>: An upload action is similar to an "upsert" where the document will be inserted if it is new and updated/replaced if it exists.</target>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Note that all fields are replaced in the update case.</source>
          <target state="new">Note that all fields are replaced in the update case.</target>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `merge`</ph>: Merge updates an existing document with the specified fields.</source>
          <target state="new"><ph id="ph1">- `merge`</ph>: Merge updates an existing document with the specified fields.</target>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>If the document doesn't exist, the merge will fail.</source>
          <target state="new">If the document doesn't exist, the merge will fail.</target>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Any field you specify in a merge will replace the existing field in the document.</source>
          <target state="new">Any field you specify in a merge will replace the existing field in the document.</target>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>This includes fields of type <ph id="ph1">`Collection(Edm.String)`</ph>.</source>
          <target state="new">This includes fields of type <ph id="ph1">`Collection(Edm.String)`</ph>.</target>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>For example, if the document contains a field "tags" with value <ph id="ph1">`["budget"]`</ph> and you execute a merge with value <ph id="ph2">`["economy", "pool"]`</ph> for "tags", the final value of the "tags" field will be <ph id="ph3">`["economy", "pool"]`</ph>.</source>
          <target state="new">For example, if the document contains a field "tags" with value <ph id="ph1">`["budget"]`</ph> and you execute a merge with value <ph id="ph2">`["economy", "pool"]`</ph> for "tags", the final value of the "tags" field will be <ph id="ph3">`["economy", "pool"]`</ph>.</target>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>It will <bpt id="p1">**</bpt>not<ept id="p1">**</ept> be <ph id="ph1">`["budget", "economy", "pool"]`</ph>.</source>
          <target state="new">It will <bpt id="p1">**</bpt>not<ept id="p1">**</ept> be <ph id="ph1">`["budget", "economy", "pool"]`</ph>.</target>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `mergeOrUpload`</ph>: behaves like <ph id="ph2">`merge`</ph> if a document with the given key already exists in the index.</source>
          <target state="new"><ph id="ph1">- `mergeOrUpload`</ph>: behaves like <ph id="ph2">`merge`</ph> if a document with the given key already exists in the index.</target>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>If the document does not exist it behaves like <ph id="ph1">`upload`</ph> with a new document.</source>
          <target state="new">If the document does not exist it behaves like <ph id="ph1">`upload`</ph> with a new document.</target>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `delete`</ph>: Delete removes the specified document from the index.</source>
          <target state="new"><ph id="ph1">- `delete`</ph>: Delete removes the specified document from the index.</target>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Note that you can specify only the key field value in a <ph id="ph1">`delete`</ph> operation.</source>
          <target state="new">Note that you can specify only the key field value in a <ph id="ph1">`delete`</ph> operation.</target>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Attempting to specify other fields will result in an HTTP 400 error.</source>
          <target state="new">Attempting to specify other fields will result in an HTTP 400 error.</target>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>If you want to remove an individual field from a document, use <ph id="ph1">`merge`</ph> instead and simply set the field explicitly to <ph id="ph2">`null`</ph>.</source>
          <target state="new">If you want to remove an individual field from a document, use <ph id="ph1">`merge`</ph> instead and simply set the field explicitly to <ph id="ph2">`null`</ph>.</target>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status code: 200 OK is returned for a successful response, meaning that all items have been successfully indexed (as indicated by the 'status' field set to true for all items):

    {
      "value": [
        {
          "key": "unique_key_of_document",
          "status": true,
          "errorMessage": null
        }
      ]
    }  

Status code: 207 is returned when at least one item was not successfully indexed (as indicated by the 'status' field set to false for items that have not been indexed):

    {
      "value": [
        {
          "key": "unique_key_of_document",
          "status": false,
          "errorMessage": "The search service is too busy to process this document.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status code: 200 OK is returned for a successful response, meaning that all items have been successfully indexed (as indicated by the 'status' field set to true for all items):

    {
      "value": [
        {
          "key": "unique_key_of_document",
          "status": true,
          "errorMessage": null
        }
      ]
    }  

Status code: 207 is returned when at least one item was not successfully indexed (as indicated by the 'status' field set to false for items that have not been indexed):

    {
      "value": [
        {
          "key": "unique_key_of_document",
          "status": false,
          "errorMessage": "The search service is too busy to process this document.</target>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Please try again later."</source>
          <target state="new">Please try again later."</target>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>}
      ]
    }  

The <ph id="ph1">`errorMessage`</ph> property will indicate the reason for the indexing error if possible.</source>
          <target state="new">}
      ]
    }  

The <ph id="ph1">`errorMessage`</ph> property will indicate the reason for the indexing error if possible.</target>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: If your client code frequently encounters a 207 response, one possible reason is that the system is under load.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: If your client code frequently encounters a 207 response, one possible reason is that the system is under load.</target>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>You can confirm this by checking the <ph id="ph1">`errorMessage`</ph> property.</source>
          <target state="new">You can confirm this by checking the <ph id="ph1">`errorMessage`</ph> property.</target>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>If this is the case, we recommend <bpt id="p1">***</bpt>throttling indexing requests<ept id="p1">***</ept>.</source>
          <target state="new">If this is the case, we recommend <bpt id="p1">***</bpt>throttling indexing requests<ept id="p1">***</ept>.</target>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Otherwise, if indexing traffic doesn't subside, the system could start rejecting all requests with 503 errors.</source>
          <target state="new">Otherwise, if indexing traffic doesn't subside, the system could start rejecting all requests with 503 errors.</target>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Status code: 429 indicates that you have exceeded your quota on the number of documents per index.</source>
          <target state="new">Status code: 429 indicates that you have exceeded your quota on the number of documents per index.</target>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>You must either create a new index or upgrade for higher capacity limits.</source>
          <target state="new">You must either create a new index or upgrade for higher capacity limits.</target>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept><ph id="ph1">

    {
      "value": [
        {
          "@search.action": "upload",
          "hotelId": "1",
          "baseRate": 199.0,
          "description": "Best hotel in town",
          "description_fr": "Meilleur hôtel en ville",
          "hotelName": "Fancy Stay",
          "category": "Luxury",
          "tags": ["pool", "view", "wifi", "concierge"],
          "parkingIncluded": false,
          "smokingAllowed": false,
          "lastRenovationDate": "2010-06-27T00:00:00Z",
          "rating": 5,
          "location": { "type": "Point", "coordinates": [-122.131577, 47.678581] }
        },
        {
          "@search.action": "upload",
          "hotelId": "2",
          "baseRate": 79.99,
          "description": "Cheapest hotel in town",
          "description_fr": "Hôtel le moins cher en ville",
          "hotelName": "Roach Motel",
          "category": "Budget",
          "tags": ["motel", "budget"],
          "parkingIncluded": true,
          "smokingAllowed": true,
          "lastRenovationDate": "1982-04-28T00:00:00Z",
          "rating": 1,
          "location": { "type": "Point", "coordinates": [-122.131577, 49.678581] }
        },
        {
          "@search.action": "merge",
          "hotelId": "3",
          "baseRate": 279.99,
          "description": "Surprisingly expensive",
          "lastRenovationDate": null
        },
        {
          "@search.action": "delete",
          "hotelId": "4"
        }
      ]
    }
________________________________________
&lt;a name="SearchDocs"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Search Documents

A <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> operation is issued as a GET or POST request and specifies parameters that give the criteria for selecting matching documents.</source>
          <target state="new"><bpt id="p1">**</bpt>Example:<ept id="p1">**</ept><ph id="ph1">

    {
      "value": [
        {
          "@search.action": "upload",
          "hotelId": "1",
          "baseRate": 199.0,
          "description": "Best hotel in town",
          "description_fr": "Meilleur hôtel en ville",
          "hotelName": "Fancy Stay",
          "category": "Luxury",
          "tags": ["pool", "view", "wifi", "concierge"],
          "parkingIncluded": false,
          "smokingAllowed": false,
          "lastRenovationDate": "2010-06-27T00:00:00Z",
          "rating": 5,
          "location": { "type": "Point", "coordinates": [-122.131577, 47.678581] }
        },
        {
          "@search.action": "upload",
          "hotelId": "2",
          "baseRate": 79.99,
          "description": "Cheapest hotel in town",
          "description_fr": "Hôtel le moins cher en ville",
          "hotelName": "Roach Motel",
          "category": "Budget",
          "tags": ["motel", "budget"],
          "parkingIncluded": true,
          "smokingAllowed": true,
          "lastRenovationDate": "1982-04-28T00:00:00Z",
          "rating": 1,
          "location": { "type": "Point", "coordinates": [-122.131577, 49.678581] }
        },
        {
          "@search.action": "merge",
          "hotelId": "3",
          "baseRate": 279.99,
          "description": "Surprisingly expensive",
          "lastRenovationDate": null
        },
        {
          "@search.action": "delete",
          "hotelId": "4"
        }
      ]
    }
________________________________________
&lt;a name="SearchDocs"&gt;&lt;/a&gt;</ph><ph id="ph2">
##</ph> Search Documents

A <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> operation is issued as a GET or POST request and specifies parameters that give the criteria for selecting matching documents.</target>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs?[query parameters]
    api-key: [admin or query key]

    POST https://[service name].search.windows.net/indexes/[index name]/docs/search?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin or query key]

**</bpt>When to use POST instead of GET<ept id="p1">**</ept>

When you use HTTP GET to call the <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs?[query parameters]
    api-key: [admin or query key]

    POST https://[service name].search.windows.net/indexes/[index name]/docs/search?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin or query key]

**</bpt>When to use POST instead of GET<ept id="p1">**</ept>

When you use HTTP GET to call the <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.</target>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>This is usually enough for most applications.</source>
          <target state="new">This is usually enough for most applications.</target>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>However, some applications produce very large queries, specifically OData filter expressions.</source>
          <target state="new">However, some applications produce very large queries, specifically OData filter expressions.</target>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>For these applications, using HTTP POST is a better choice.</source>
          <target state="new">For these applications, using HTTP POST is a better choice.</target>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.</source>
          <target state="new">The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.</target>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> request can be constructed using the GET or POST methods.</source>
          <target state="new">The <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> request can be constructed using the GET or POST methods.</target>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>The request URI specifies which index to query, for all documents that match the parameters.</source>
          <target state="new">The request URI specifies which index to query, for all documents that match the parameters.</target>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Parameters are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.</source>
          <target state="new">Parameters are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.</target>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>As a best practice when creating GET requests, remember to <bpt id="p1">[</bpt><ept id="p1">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.</source>
          <target state="new">As a best practice when creating GET requests, remember to <bpt id="p1">[</bpt><ept id="p1">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.</target>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> operations, this includes:

<ph id="ph1">- `$filter`</ph><ph id="ph2">
- `facet`</ph><ph id="ph3">
- `highlightPreTag`</ph><ph id="ph4">
- `highlightPostTag`</ph><ph id="ph5">
- `search`</ph><ph id="ph6">
- `moreLikeThis`</ph>

URL encoding is only recommended on the above query parameters.</source>
          <target state="new">For <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> operations, this includes:

<ph id="ph1">- `$filter`</ph><ph id="ph2">
- `facet`</ph><ph id="ph3">
- `highlightPreTag`</ph><ph id="ph4">
- `highlightPostTag`</ph><ph id="ph5">
- `search`</ph><ph id="ph6">
- `moreLikeThis`</ph>

URL encoding is only recommended on the above query parameters.</target>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.</source>
          <target state="new">If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.</target>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Also, URL encoding is only necessary when calling the REST API directly using GET.</source>
          <target state="new">Also, URL encoding is only necessary when calling the REST API directly using GET.</target>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>No URL encoding is necessary when calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, or when using the <bpt id="p2">[</bpt><ept id="p2">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.</source>
          <target state="new">No URL encoding is necessary when calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, or when using the <bpt id="p2">[</bpt><ept id="p2">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.</target>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="SearchQueryParameters"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Query Parameters<ept id="p1">**</ept><bpt id="p2">

**</bpt>Search<ept id="p2">**</ept> accepts several parameters that provide query criteria and also specify search behavior.</source>
          <target state="new"><ph id="ph1">&lt;a name="SearchQueryParameters"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Query Parameters<ept id="p1">**</ept><bpt id="p2">

**</bpt>Search<ept id="p2">**</ept> accepts several parameters that provide query criteria and also specify search behavior.</target>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>You provide these parameters in the URL query string when calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> via GET, and as JSON properties in the request body when calling <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> via POST.</source>
          <target state="new">You provide these parameters in the URL query string when calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> via GET, and as JSON properties in the request body when calling <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> via POST.</target>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The syntax for some parameters is slightly different between GET and POST.</source>
          <target state="new">The syntax for some parameters is slightly different between GET and POST.</target>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>These differences are noted as applicable below:

<ph id="ph1">`search=[string]`</ph> (optional) - The text to search for.</source>
          <target state="new">These differences are noted as applicable below:

<ph id="ph1">`search=[string]`</ph> (optional) - The text to search for.</target>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`searchable`</ph> fields are searched by default unless <ph id="ph2">`searchFields`</ph> is specified.</source>
          <target state="new">All <ph id="ph1">`searchable`</ph> fields are searched by default unless <ph id="ph2">`searchFields`</ph> is specified.</target>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>When searching <ph id="ph1">`searchable`</ph> fields, the search text itself is tokenized, so multiple terms can be separated by white space (for example: <ph id="ph2">`search=hello world`</ph>).</source>
          <target state="new">When searching <ph id="ph1">`searchable`</ph> fields, the search text itself is tokenized, so multiple terms can be separated by white space (for example: <ph id="ph2">`search=hello world`</ph>).</target>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>To match any term, use <ph id="ph1">`*`</ph> (this can be useful for boolean filter queries).</source>
          <target state="new">To match any term, use <ph id="ph1">`*`</ph> (this can be useful for boolean filter queries).</target>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Omitting this parameter has the same effect as setting it to <ph id="ph1">`*`</ph>.</source>
          <target state="new">Omitting this parameter has the same effect as setting it to <ph id="ph1">`*`</ph>.</target>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Simple Query Syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept> for specifics on the search syntax.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Simple Query Syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept> for specifics on the search syntax.</target>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: The results can sometimes be surprising when querying over <ph id="ph1">`searchable`</ph> fields.</source>
          <target state="new"><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: The results can sometimes be surprising when querying over <ph id="ph1">`searchable`</ph> fields.</target>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>The tokenizer includes logic to handle cases common to English text like apostrophes, commas in numbers, etc. For example, <ph id="ph1">`search=123,456`</ph> will match a single term 123,456 rather than the individual terms 123 and 456, since commas are used as thousand-separators for large numbers in English.</source>
          <target state="new">The tokenizer includes logic to handle cases common to English text like apostrophes, commas in numbers, etc. For example, <ph id="ph1">`search=123,456`</ph> will match a single term 123,456 rather than the individual terms 123 and 456, since commas are used as thousand-separators for large numbers in English.</target>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>For this reason, we recommend using white space rather than punctuation to separate terms in the <ph id="ph1">`search`</ph> parameter.</source>
          <target state="new">For this reason, we recommend using white space rather than punctuation to separate terms in the <ph id="ph1">`search`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`searchMode=any|all`</ph> (optional, defaults to <ph id="ph2">`any`</ph>) - whether any or all of the search terms must be matched in order to count the document as a match.</source>
          <target state="new"><ph id="ph1">`searchMode=any|all`</ph> (optional, defaults to <ph id="ph2">`any`</ph>) - whether any or all of the search terms must be matched in order to count the document as a match.</target>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`searchFields=[string]`</ph> (optional) - The list of comma-separated field names to search for the specified text.</source>
          <target state="new"><ph id="ph1">`searchFields=[string]`</ph> (optional) - The list of comma-separated field names to search for the specified text.</target>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Target fields must be marked as <ph id="ph1">`searchable`</ph>.</source>
          <target state="new">Target fields must be marked as <ph id="ph1">`searchable`</ph>.</target>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`moreLikeThis=[key]`</ph> (optional) <bpt id="p1">**</bpt>Important:<ept id="p1">**</ept> This feature is only available in <ph id="ph2">`2015-02-28-Preview`</ph>.</source>
          <target state="new"><ph id="ph1">`moreLikeThis=[key]`</ph> (optional) <bpt id="p1">**</bpt>Important:<ept id="p1">**</ept> This feature is only available in <ph id="ph2">`2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>This option cannot be used in a query that contains the text search parameter, <ph id="ph1">`search=[string]`</ph>.</source>
          <target state="new">This option cannot be used in a query that contains the text search parameter, <ph id="ph1">`search=[string]`</ph>.</target>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`moreLikeThis`</ph> parameter finds documents that are similar to the document specified by the document key.</source>
          <target state="new">The <ph id="ph1">`moreLikeThis`</ph> parameter finds documents that are similar to the document specified by the document key.</target>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>When a search request is made with <ph id="ph1">`moreLikeThis`</ph>, a list of search terms is generated based on the frequency and rarity of terms in the source document.</source>
          <target state="new">When a search request is made with <ph id="ph1">`moreLikeThis`</ph>, a list of search terms is generated based on the frequency and rarity of terms in the source document.</target>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Those terms are then used to make the request.</source>
          <target state="new">Those terms are then used to make the request.</target>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>By default, the contents of all <ph id="ph1">`searchable`</ph> fields are considered unless <ph id="ph2">`searchFields`</ph> is used to restrict which fields are searched.</source>
          <target state="new">By default, the contents of all <ph id="ph1">`searchable`</ph> fields are considered unless <ph id="ph2">`searchFields`</ph> is used to restrict which fields are searched.</target>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$skip=#`</ph> (optional) - the number of search results to skip; Cannot be greater than 100,000.</source>
          <target state="new"><ph id="ph1">`$skip=#`</ph> (optional) - the number of search results to skip; Cannot be greater than 100,000.</target>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>If you need to scan documents in sequence but cannot use <ph id="ph1">`$skip`</ph> due to this limitation, consider using <ph id="ph2">`$orderby`</ph> on a totally-ordered key and <ph id="ph3">`$filter`</ph> with a range query instead.</source>
          <target state="new">If you need to scan documents in sequence but cannot use <ph id="ph1">`$skip`</ph> due to this limitation, consider using <ph id="ph2">`$orderby`</ph> on a totally-ordered key and <ph id="ph3">`$filter`</ph> with a range query instead.</target>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`skip`</ph> instead of <ph id="ph3">`$skip`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`skip`</ph> instead of <ph id="ph3">`$skip`</ph>.</target>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$top=#`</ph> (optional) - the number of search results to retrieve.</source>
          <target state="new"><ph id="ph1">`$top=#`</ph> (optional) - the number of search results to retrieve.</target>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>This can be used in conjunction with <ph id="ph1">`$skip`</ph> to implement client-side paging of search results.</source>
          <target state="new">This can be used in conjunction with <ph id="ph1">`$skip`</ph> to implement client-side paging of search results.</target>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> Azure Search uses <bpt id="p1">***</bpt>server-side paging<ept id="p1">***</ept> to prevent queries from retrieving too many documents at once.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> Azure Search uses <bpt id="p1">***</bpt>server-side paging<ept id="p1">***</ept> to prevent queries from retrieving too many documents at once.</target>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>The default page size is 50, while the maximum page size is 1000.</source>
          <target state="new">The default page size is 50, while the maximum page size is 1000.</target>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>This means that by default <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> returns at most 50 results if you don't specify <ph id="ph1">`$top`</ph>.</source>
          <target state="new">This means that by default <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> returns at most 50 results if you don't specify <ph id="ph1">`$top`</ph>.</target>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>If there are more than 50 results, the response includes information to retrieve the next page of at most 50 results (see <ph id="ph1">`@odata.nextLink`</ph> and <ph id="ph2">`@search.nextPageParameters`</ph> in <bpt id="p1">[</bpt><ept id="p1">the example below](#SearchResponse)</ept>).</source>
          <target state="new">If there are more than 50 results, the response includes information to retrieve the next page of at most 50 results (see <ph id="ph1">`@odata.nextLink`</ph> and <ph id="ph2">`@search.nextPageParameters`</ph> in <bpt id="p1">[</bpt><ept id="p1">the example below](#SearchResponse)</ept>).</target>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Similarly, if you specify a value greater than 1000 for <ph id="ph1">`$top`</ph> and there are more than 1000 results, only the first 1000 results are returned, along with information to retrieve the next page of at most 1000 results.</source>
          <target state="new">Similarly, if you specify a value greater than 1000 for <ph id="ph1">`$top`</ph> and there are more than 1000 results, only the first 1000 results are returned, along with information to retrieve the next page of at most 1000 results.</target>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`top`</ph> instead of <ph id="ph3">`$top`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`top`</ph> instead of <ph id="ph3">`$top`</ph>.</target>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$count=true|false`</ph> (optional, defaults to <ph id="ph2">`false`</ph>) - Specifies whether to fetch the total count of results.</source>
          <target state="new"><ph id="ph1">`$count=true|false`</ph> (optional, defaults to <ph id="ph2">`false`</ph>) - Specifies whether to fetch the total count of results.</target>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Setting this value to <ph id="ph1">`true`</ph> may have a performance impact.</source>
          <target state="new">Setting this value to <ph id="ph1">`true`</ph> may have a performance impact.</target>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Note that the count returned is an approximation.</source>
          <target state="new">Note that the count returned is an approximation.</target>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`count`</ph> instead of <ph id="ph3">`$count`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`count`</ph> instead of <ph id="ph3">`$count`</ph>.</target>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$orderby=[string]`</ph> (optional) - A list of comma-separated expressions to sort the results by.</source>
          <target state="new"><ph id="ph1">`$orderby=[string]`</ph> (optional) - A list of comma-separated expressions to sort the results by.</target>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Each expression can be either a field name or a call to the <ph id="ph1">`geo.distance()`</ph> function.</source>
          <target state="new">Each expression can be either a field name or a call to the <ph id="ph1">`geo.distance()`</ph> function.</target>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Each expression can be followed by <ph id="ph1">`asc`</ph> to indicated ascending, and <ph id="ph2">`desc`</ph> to indicate descending.</source>
          <target state="new">Each expression can be followed by <ph id="ph1">`asc`</ph> to indicated ascending, and <ph id="ph2">`desc`</ph> to indicate descending.</target>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The default is ascending order.</source>
          <target state="new">The default is ascending order.</target>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Ties will be broken by the match scores of documents.</source>
          <target state="new">Ties will be broken by the match scores of documents.</target>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`$orderby`</ph> is specified, the default sort order is descending by document match score.</source>
          <target state="new">If no <ph id="ph1">`$orderby`</ph> is specified, the default sort order is descending by document match score.</target>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>There is a limit of 32 clauses for <ph id="ph1">`$orderby`</ph>.</source>
          <target state="new">There is a limit of 32 clauses for <ph id="ph1">`$orderby`</ph>.</target>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`orderby`</ph> instead of <ph id="ph3">`$orderby`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`orderby`</ph> instead of <ph id="ph3">`$orderby`</ph>.</target>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$select=[string]`</ph> (optional) - A list of comma-separated fields to retrieve.</source>
          <target state="new"><ph id="ph1">`$select=[string]`</ph> (optional) - A list of comma-separated fields to retrieve.</target>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>If unspecified, all fields marked as retrievable in the schema are included.</source>
          <target state="new">If unspecified, all fields marked as retrievable in the schema are included.</target>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>You can also explicitly request all fields by setting this parameter to <ph id="ph1">`*`</ph>.</source>
          <target state="new">You can also explicitly request all fields by setting this parameter to <ph id="ph1">`*`</ph>.</target>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`select`</ph> instead of <ph id="ph3">`$select`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`select`</ph> instead of <ph id="ph3">`$select`</ph>.</target>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`facet=[string]`</ph> (zero or more) - A field to facet by.</source>
          <target state="new"><ph id="ph1">`facet=[string]`</ph> (zero or more) - A field to facet by.</target>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Optionally the string may contain parameters to customize the faceting expressed as comma-separated <ph id="ph1">`name:value`</ph> pairs.</source>
          <target state="new">Optionally the string may contain parameters to customize the faceting expressed as comma-separated <ph id="ph1">`name:value`</ph> pairs.</target>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Valid parameters are:

<ph id="ph1">- `count`</ph> (max number of facet terms; default is 10).</source>
          <target state="new">Valid parameters are:

<ph id="ph1">- `count`</ph> (max number of facet terms; default is 10).</target>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>There is no maximum, but higher values incur a corresponding performance penalty, especially if the faceted field contains a large number of unique terms.</source>
          <target state="new">There is no maximum, but higher values incur a corresponding performance penalty, especially if the faceted field contains a large number of unique terms.</target>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>- For example: <ph id="ph1">`facet=category,count:5`</ph> gets the top five categories in facet results.</source>
          <target state="new">- For example: <ph id="ph1">`facet=category,count:5`</ph> gets the top five categories in facet results.</target>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: If the <ph id="ph1">`count`</ph> parameter is less than the number of unique terms, the results may not be accurate.</source>
          <target state="new"><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: If the <ph id="ph1">`count`</ph> parameter is less than the number of unique terms, the results may not be accurate.</target>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>This is due to the way faceting queries are distributed across shards.</source>
          <target state="new">This is due to the way faceting queries are distributed across shards.</target>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Increasing <ph id="ph1">`count`</ph> generally increases the accuracy of the term counts, but at a performance cost.</source>
          <target state="new">Increasing <ph id="ph1">`count`</ph> generally increases the accuracy of the term counts, but at a performance cost.</target>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `sort`</ph> (one of <ph id="ph2">`count`</ph> to sort <bpt id="p1">*</bpt>descending<ept id="p1">*</ept> by count, <ph id="ph3">`-count`</ph> to sort <bpt id="p2">*</bpt>ascending<ept id="p2">*</ept> by count, <ph id="ph4">`value`</ph> to sort <bpt id="p3">*</bpt>ascending<ept id="p3">*</ept> by value, or <ph id="ph5">`-value`</ph> to sort <bpt id="p4">*</bpt>descending<ept id="p4">*</ept> by value)
  - For example: <ph id="ph6">`facet=category,count:3,sort:count`</ph> gets the top three categories in facet results in descending order by the number of documents with each city name.</source>
          <target state="new"><ph id="ph1">- `sort`</ph> (one of <ph id="ph2">`count`</ph> to sort <bpt id="p1">*</bpt>descending<ept id="p1">*</ept> by count, <ph id="ph3">`-count`</ph> to sort <bpt id="p2">*</bpt>ascending<ept id="p2">*</ept> by count, <ph id="ph4">`value`</ph> to sort <bpt id="p3">*</bpt>ascending<ept id="p3">*</ept> by value, or <ph id="ph5">`-value`</ph> to sort <bpt id="p4">*</bpt>descending<ept id="p4">*</ept> by value)
  - For example: <ph id="ph6">`facet=category,count:3,sort:count`</ph> gets the top three categories in facet results in descending order by the number of documents with each city name.</target>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>For example, if the top three categories are Budget, Motel, and Luxury, and Budget has 5 hits, Motel has 6, and Luxury has 4, then the buckets will be in the order Motel, Budget, Luxury.</source>
          <target state="new">For example, if the top three categories are Budget, Motel, and Luxury, and Budget has 5 hits, Motel has 6, and Luxury has 4, then the buckets will be in the order Motel, Budget, Luxury.</target>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>- For example: <ph id="ph1">`facet=rating,sort:-value`</ph> produces buckets for all possible ratings, in descending order by value.</source>
          <target state="new">- For example: <ph id="ph1">`facet=rating,sort:-value`</ph> produces buckets for all possible ratings, in descending order by value.</target>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>For example, if the ratings are from 1 to 5, the buckets will be ordered 5, 4, 3, 2, 1, irrespective of how many documents match each rating.</source>
          <target state="new">For example, if the ratings are from 1 to 5, the buckets will be ordered 5, 4, 3, 2, 1, irrespective of how many documents match each rating.</target>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `values`</ph> (pipe-delimited numeric or <ph id="ph2">`Edm.DateTimeOffset`</ph> values specifying a dynamic set of facet entry values)
  - For example: <ph id="ph3">`facet=baseRate,values:10|20`</ph> produces three buckets: One for base rate 0 up to but not including 10, one for 10 up to but not including 20, and one for 20 or higher.</source>
          <target state="new"><ph id="ph1">- `values`</ph> (pipe-delimited numeric or <ph id="ph2">`Edm.DateTimeOffset`</ph> values specifying a dynamic set of facet entry values)
  - For example: <ph id="ph3">`facet=baseRate,values:10|20`</ph> produces three buckets: One for base rate 0 up to but not including 10, one for 10 up to but not including 20, and one for 20 or higher.</target>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>- For example: <ph id="ph1">`facet=lastRenovationDate,values:2010-02-01T00:00:00Z`</ph> produces two buckets: One for hotels renovated before February 2010, and one for hotels renovated February 1st, 2010 or later.</source>
          <target state="new">- For example: <ph id="ph1">`facet=lastRenovationDate,values:2010-02-01T00:00:00Z`</ph> produces two buckets: One for hotels renovated before February 2010, and one for hotels renovated February 1st, 2010 or later.</target>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `interval`</ph> (integer interval greater than 0 for numbers, or <ph id="ph2">`minute`</ph>, <ph id="ph3">`hour`</ph>, <ph id="ph4">`day`</ph>, <ph id="ph5">`week`</ph>, <ph id="ph6">`month`</ph>, <ph id="ph7">`quarter`</ph>, <ph id="ph8">`year`</ph> for date time values)
  - For example: <ph id="ph9">`facet=baseRate,interval:100`</ph> produces buckets based on base rate ranges of size 100.</source>
          <target state="new"><ph id="ph1">- `interval`</ph> (integer interval greater than 0 for numbers, or <ph id="ph2">`minute`</ph>, <ph id="ph3">`hour`</ph>, <ph id="ph4">`day`</ph>, <ph id="ph5">`week`</ph>, <ph id="ph6">`month`</ph>, <ph id="ph7">`quarter`</ph>, <ph id="ph8">`year`</ph> for date time values)
  - For example: <ph id="ph9">`facet=baseRate,interval:100`</ph> produces buckets based on base rate ranges of size 100.</target>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>For example, if base rates are all between $60 and $600, there will be buckets for 0-100, 100-200, 200-300, 300-400, 400-500, and 500-600.</source>
          <target state="new">For example, if base rates are all between $60 and $600, there will be buckets for 0-100, 100-200, 200-300, 300-400, 400-500, and 500-600.</target>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>- For example: <ph id="ph1">`facet=lastRenovationDate,interval:year`</ph> produces one bucket for each year when hotels were renovated.</source>
          <target state="new">- For example: <ph id="ph1">`facet=lastRenovationDate,interval:year`</ph> produces one bucket for each year when hotels were renovated.</target>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: <ph id="ph1">`count`</ph> and <ph id="ph2">`sort`</ph> can be combined in the same facet specification, but they cannot be combined with <ph id="ph3">`interval`</ph> or <ph id="ph4">`values`</ph>, and <ph id="ph5">`interval`</ph> and <ph id="ph6">`values`</ph> cannot be combined together.</source>
          <target state="new"><bpt id="p1">- **</bpt>Note<ept id="p1">**</ept>: <ph id="ph1">`count`</ph> and <ph id="ph2">`sort`</ph> can be combined in the same facet specification, but they cannot be combined with <ph id="ph3">`interval`</ph> or <ph id="ph4">`values`</ph>, and <ph id="ph5">`interval`</ph> and <ph id="ph6">`values`</ph> cannot be combined together.</target>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`facets`</ph> instead of <ph id="ph3">`facet`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`facets`</ph> instead of <ph id="ph3">`facet`</ph>.</target>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Also, you specify it as a JSON array of strings where each string is a separate facet expression.</source>
          <target state="new">Also, you specify it as a JSON array of strings where each string is a separate facet expression.</target>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$filter=[string]`</ph> (optional) - A structured search expression in standard OData syntax.</source>
          <target state="new"><ph id="ph1">`$filter=[string]`</ph> (optional) - A structured search expression in standard OData syntax.</target>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">OData Expression Syntax](#ODataExpressionSyntax)</ept> for details on the subset of the OData expression grammar that Azure Search supports.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">OData Expression Syntax](#ODataExpressionSyntax)</ept> for details on the subset of the OData expression grammar that Azure Search supports.</target>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`filter`</ph> instead of <ph id="ph3">`$filter`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`filter`</ph> instead of <ph id="ph3">`$filter`</ph>.</target>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`highlight=[string]`</ph> (optional) - A set of comma-separated field names used for hit highlights.</source>
          <target state="new"><ph id="ph1">`highlight=[string]`</ph> (optional) - A set of comma-separated field names used for hit highlights.</target>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Only <ph id="ph1">`searchable`</ph> fields can be used for hit highlighting.</source>
          <target state="new">Only <ph id="ph1">`searchable`</ph> fields can be used for hit highlighting.</target>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`highlightPreTag=[string]`</ph> (optional, defaults to `<ph id="ph2">&lt;em&gt;</ph><ph id="ph3">`) - A string tag that prepends to hit highlights. Must be set with `</ph>highlightPostTag`.</source>
          <target state="new"><ph id="ph1">`highlightPreTag=[string]`</ph> (optional, defaults to `<ph id="ph2">&lt;em&gt;</ph><ph id="ph3">`) - A string tag that prepends to hit highlights. Must be set with `</ph>highlightPostTag`.</target>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</target>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`highlightPostTag=[string]`</ph> (optional, defaults to `<ph id="ph2">&lt;/em&gt;</ph><ph id="ph3">`) - a string tag that appends to hit highlights. Must be set with `</ph>highlightPreTag`.</source>
          <target state="new"><ph id="ph1">`highlightPostTag=[string]`</ph> (optional, defaults to `<ph id="ph2">&lt;/em&gt;</ph><ph id="ph3">`) - a string tag that appends to hit highlights. Must be set with `</ph>highlightPreTag`.</target>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</target>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`scoringProfile=[string]`</ph> (optional) - The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.</source>
          <target state="new"><ph id="ph1">`scoringProfile=[string]`</ph> (optional) - The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.</target>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`scoringParameter=[string]`</ph> (zero or more) - Indicates the value for each parameter defined in a scoring function (for example, <ph id="ph2">`referencePointParameter`</ph>) using the format name:value.</source>
          <target state="new"><ph id="ph1">`scoringParameter=[string]`</ph> (zero or more) - Indicates the value for each parameter defined in a scoring function (for example, <ph id="ph2">`referencePointParameter`</ph>) using the format name:value.</target>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>For example, if the scoring profile defines a function with a parameter called "mylocation" the query string option would be &amp;scoringParameter=mylocation:-122.2,44.8

<ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`scoringParameters`</ph> instead of <ph id="ph3">`scoringParameter`</ph>.</source>
          <target state="new">For example, if the scoring profile defines a function with a parameter called "mylocation" the query string option would be &amp;scoringParameter=mylocation:-122.2,44.8

<ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`scoringParameters`</ph> instead of <ph id="ph3">`scoringParameter`</ph>.</target>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Also, you specify it as a JSON array of strings where each string is a separate name:value pair.</source>
          <target state="new">Also, you specify it as a JSON array of strings where each string is a separate name:value pair.</target>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`minimumCoverage`</ph> (optional, defaults to 100) - a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success.</source>
          <target state="new"><ph id="ph1">`minimumCoverage`</ph> (optional, defaults to 100) - a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success.</target>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>By default, the entire index must be available or <ph id="ph1">`Search`</ph> will return HTTP status code 503.</source>
          <target state="new">By default, the entire index must be available or <ph id="ph1">`Search`</ph> will return HTTP status code 503.</target>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>If you set <ph id="ph1">`minimumCoverage`</ph> and <ph id="ph2">`Search`</ph> succeeds, it will return HTTP 200 and include a <ph id="ph3">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.</source>
          <target state="new">If you set <ph id="ph1">`minimumCoverage`</ph> and <ph id="ph2">`Search`</ph> succeeds, it will return HTTP 200 and include a <ph id="ph3">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.</target>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.</target>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>However, not all matching documents are guaranteed to be present in the search results.</source>
          <target state="new">However, not all matching documents are guaranteed to be present in the search results.</target>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>If search recall is more important to your application than availability, then it's best to leave <ph id="ph1">`minimumCoverage`</ph> at its default value of 100.</source>
          <target state="new">If search recall is more important to your application than availability, then it's best to leave <ph id="ph1">`minimumCoverage`</ph> at its default value of 100.</target>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> with GET or POST.</source>
          <target state="new">Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> with GET or POST.</target>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service URL.</source>
          <target state="new">It is a string value, unique to your service URL.</target>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</target>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

For GET: None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

For GET: None.</target>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>For POST:

    <ph id="ph1">{
      "count": true | false (default),
      "facets": [ "facet_expression_1", "facet_expression_2", ... ],
      "filter": "odata_filter_expression",
      "highlight": "highlight_field_1, highlight_field_2, ...",
      "highlightPreTag": "pre_tag",
      "highlightPostTag": "post_tag",
      "minimumCoverage": # (% of index that must be covered to declare query successful; default 100),
      "moreLikeThis": "document_key" (mutually exclusive with "search" parameter),
      "orderby": "orderby_expression",
      "scoringParameters": [ "scoring_parameter_1", "scoring_parameter_2", ... ],
      "scoringProfile": "scoring_profile_name",
      "search": "simple_query_expression",
      "searchFields": "field_name_1, field_name_2, ...",
      "searchMode": "any" (default) | "all",
      "select": "field_name_1, field_name_2, ...",
      "skip": # (default 0),
      "top": #
    }

&lt;a name="SearchResponse"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new">For POST:

    <ph id="ph1">{
      "count": true | false (default),
      "facets": [ "facet_expression_1", "facet_expression_2", ... ],
      "filter": "odata_filter_expression",
      "highlight": "highlight_field_1, highlight_field_2, ...",
      "highlightPreTag": "pre_tag",
      "highlightPostTag": "post_tag",
      "minimumCoverage": # (% of index that must be covered to declare query successful; default 100),
      "moreLikeThis": "document_key" (mutually exclusive with "search" parameter),
      "orderby": "orderby_expression",
      "scoringParameters": [ "scoring_parameter_1", "scoring_parameter_2", ... ],
      "scoringProfile": "scoring_profile_name",
      "search": "simple_query_expression",
      "searchFields": "field_name_1, field_name_2, ...",
      "searchMode": "any" (default) | "all",
      "select": "field_name_1, field_name_2, ...",
      "skip": # (default 0),
      "top": #
    }

&lt;a name="SearchResponse"&gt;&lt;/a&gt;</ph><bpt id="p1">
**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source><bpt id="p1">{
      "@odata.count": # (if $count=true was provided in the query),
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "@search.facets": { (if faceting was specified in the query)
        "facet_field": [
          {
            "value": facet_entry_value (for non-range facets),
            "from": facet_entry_value (for range facets),
            "to": facet_entry_value (for range facets),
            "count": number_of_documents
          }
        ],
        ...
      },
      "@search.nextPageParameters": { (request body to fetch the next page of results if result count exceeds page size and Search was called with POST)
        "count": ... (value from request body if present),
        "facets": ... (value from request body if present),
        "filter": ... (value from request body if present),
        "highlight": ... (value from request body if present),
        "highlightPreTag": ... (value from request body if present),
        "highlightPostTag": ... (value from request body if present),
        "minimumCoverage": ... (value from request body if present),
        "moreLikeThis": ... (value from request body if present),
        "orderby": ... (value from request body if present),
        "scoringParameters": ... (value from request body if present),
        "scoringProfile": ... (value from request body if present),
        "search": ... (value from request body if present),
        "searchFields": ... (value from request body if present),
        "searchMode": ... (value from request body if present),
        "select": ... (value from request body if present),
        "skip": ... (page size plus value from request body if present),
        "top": ... (value from request body if present minus page size),
      },
      "value": [
        {
          "@search.score": document_score (if a text query was provided),
          "@search.highlights": {
            field_name: [ subset of text, ... ],
            ...
          },
          key_field_name: document_key,
          field_name: field_value (retrievable fields or specified projection),
          ...
        },
        ...
      ],
      "@odata.nextLink": (URL to fetch the next page of results if result count exceeds page size; Applies to both GET and POST)
    }

**</bpt>Examples:<ept id="p1">**</ept>

You can find additional examples on the <bpt id="p2">[</bpt><ept id="p2">OData Expression Syntax for Azure Search](https://msdn.microsoft.com/library/azure/dn798921.aspx)</ept> page.</source>
          <target state="new"><bpt id="p1">{
      "@odata.count": # (if $count=true was provided in the query),
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "@search.facets": { (if faceting was specified in the query)
        "facet_field": [
          {
            "value": facet_entry_value (for non-range facets),
            "from": facet_entry_value (for range facets),
            "to": facet_entry_value (for range facets),
            "count": number_of_documents
          }
        ],
        ...
      },
      "@search.nextPageParameters": { (request body to fetch the next page of results if result count exceeds page size and Search was called with POST)
        "count": ... (value from request body if present),
        "facets": ... (value from request body if present),
        "filter": ... (value from request body if present),
        "highlight": ... (value from request body if present),
        "highlightPreTag": ... (value from request body if present),
        "highlightPostTag": ... (value from request body if present),
        "minimumCoverage": ... (value from request body if present),
        "moreLikeThis": ... (value from request body if present),
        "orderby": ... (value from request body if present),
        "scoringParameters": ... (value from request body if present),
        "scoringProfile": ... (value from request body if present),
        "search": ... (value from request body if present),
        "searchFields": ... (value from request body if present),
        "searchMode": ... (value from request body if present),
        "select": ... (value from request body if present),
        "skip": ... (page size plus value from request body if present),
        "top": ... (value from request body if present minus page size),
      },
      "value": [
        {
          "@search.score": document_score (if a text query was provided),
          "@search.highlights": {
            field_name: [ subset of text, ... ],
            ...
          },
          key_field_name: document_key,
          field_name: field_value (retrievable fields or specified projection),
          ...
        },
        ...
      ],
      "@odata.nextLink": (URL to fetch the next page of results if result count exceeds page size; Applies to both GET and POST)
    }

**</bpt>Examples:<ept id="p1">**</ept>

You can find additional examples on the <bpt id="p2">[</bpt><ept id="p2">OData Expression Syntax for Azure Search](https://msdn.microsoft.com/library/azure/dn798921.aspx)</ept> page.</target>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>1)  Search the Index sorted descending by date.</source>
          <target state="new">1)  Search the Index sorted descending by date.</target>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>GET /indexes/hotels/docs?search=*&amp;$orderby=lastRenovationDate desc&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">GET /indexes/hotels/docs?search=*&amp;$orderby=lastRenovationDate desc&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>{
      "searc</source>
          <target state="new">{
      "searc</target>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source><ph id="ph1">":</ph> "*",
      "orderby": [ "lastRenovation</source>
          <target state="new"><ph id="ph1">":</ph> "*",
      "orderby": [ "lastRenovation</target>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>ate desc" ]
    }

2)  In a faceted search, search the index and retrieve facets for categories, rating, tags, as well as items with baseRate in specific ranges:

    GET /indexes/hotels/docs?search=test&amp;facet=category&amp;facet=rating&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">ate desc" ]
    }

2)  In a faceted search, search the index and retrieve facets for categories, rating, tags, as well as items with baseRate in specific ranges:

    GET /indexes/hotels/docs?search=test&amp;facet=category&amp;facet=rating&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>{
      "search":</source>
          <target state="new">{
      "search":</target>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source><ph id="ph1">"t</ph>est",
      "facets": [ "category", "rating", "tags", "baseRate,values:8</source>
          <target state="new"><ph id="ph1">"t</ph>est",
      "facets": [ "category", "rating", "tags", "baseRate,values:8</target>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>|150|220" ]
    }

3)  Using a filter, narrow down the previous faceted query results after the user clicks on rating 3 and category "Motel":

    GET /indexes/hotels/docs?search=test&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;$filter=rating eq 3 and category eq 'Motel'&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">|150|220" ]
    }

3)  Using a filter, narrow down the previous faceted query results after the user clicks on rating 3 and category "Motel":

    GET /indexes/hotels/docs?search=test&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;$filter=rating eq 3 and category eq 'Motel'&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>{
      "search":</source>
          <target state="new">{
      "search":</target>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><ph id="ph1">"t</ph>est",
      "facets": [ "tags", "baseRate,values:80</source>
          <target state="new"><ph id="ph1">"t</ph>est",
      "facets": [ "tags", "baseRate,values:80</target>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source><ph id="ph1">15</ph>0|220" ],
      "filter": "rating eq 3 and cate</source>
          <target state="new"><ph id="ph1">15</ph>0|220" ],
      "filter": "rating eq 3 and cate</target>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>ory eq 'Motel'"
    }

4) In a faceted search, set an upper limit on unique terms returned in a query.</source>
          <target state="new">ory eq 'Motel'"
    }

4) In a faceted search, set an upper limit on unique terms returned in a query.</target>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The default is 10, but you can increase or decrease this value using the <ph id="ph1">`count`</ph> parameter on the <ph id="ph2">`facet`</ph> attribute:

    GET /indexes/hotels/docs?search=test&amp;facet=city,count:5&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">The default is 10, but you can increase or decrease this value using the <ph id="ph1">`count`</ph> parameter on the <ph id="ph2">`facet`</ph> attribute:

    GET /indexes/hotels/docs?search=test&amp;facet=city,count:5&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> {</ph>
      "search": "</source>
          <target state="new"><ph id="ph1"> {</ph>
      "search": "</target>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">est</ph>",
      "facets": [ "city,c</source>
          <target state="new"><ph id="ph1">est</ph>",
      "facets": [ "city,c</target>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source><ph id="ph1">u</ph>nt:5" ]
    }

5)  Search the Index within specific fields; For example, a language-specific field:

    GET /indexes/hotels/docs?search=hôtel&amp;searchFields=description_fr&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new"><ph id="ph1">u</ph>nt:5" ]
    }

5)  Search the Index within specific fields; For example, a language-specific field:

    GET /indexes/hotels/docs?search=hôtel&amp;searchFields=description_fr&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>{
      "search":</source>
          <target state="new">{
      "search":</target>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source><ph id="ph1">hô</ph>tel",
      "searchFields": [ "descr</source>
          <target state="new"><ph id="ph1">hô</ph>tel",
      "searchFields": [ "descr</target>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>ption_fr" ]
    }

6) Search the Index across multiple fields.</source>
          <target state="new">ption_fr" ]
    }

6) Search the Index across multiple fields.</target>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>For example, you can store and query searchable fields in multiple languages, all within the same index.</source>
          <target state="new">For example, you can store and query searchable fields in multiple languages, all within the same index.</target>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>If English and French descriptions co-exist in the same document, you can return any or all in the query results:

    GET /indexes/hotels/docs?search=hotel&amp;searchFields=description,description_fr&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">If English and French descriptions co-exist in the same document, you can return any or all in the query results:

    GET /indexes/hotels/docs?search=hotel&amp;searchFields=description,description_fr&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> {</ph>
      "search": "h</source>
          <target state="new"><ph id="ph1"> {</ph>
      "search": "h</target>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source><ph id="ph1">tel</ph>",
      "searchFields": [ "description", "descript</source>
          <target state="new"><ph id="ph1">tel</ph>",
      "searchFields": [ "description", "descript</target>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source><ph id="ph1">o</ph>n_fr" ]
    }

Note that you can only query one index at a time.</source>
          <target state="new"><ph id="ph1">o</ph>n_fr" ]
    }

Note that you can only query one index at a time.</target>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Do not create multiple indexes for each language unless you plan to query one at a time.</source>
          <target state="new">Do not create multiple indexes for each language unless you plan to query one at a time.</target>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>7)  Paging - Get the 1st page of items (page size is 10):

    GET /indexes/hotels/docs?search=*&amp;$skip=0&amp;$top=10&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">7)  Paging - Get the 1st page of items (page size is 10):

    GET /indexes/hotels/docs?search=*&amp;$skip=0&amp;$top=10&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>{
      "searc</source>
          <target state="new">{
      "searc</target>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source><ph id="ph1">":</ph> "*",</source>
          <target state="new"><ph id="ph1">":</ph> "*",</target>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> "</ph>skip": 0,</source>
          <target state="new"><ph id="ph1"> "</ph>skip": 0,</target>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>"top": 10
    }

8)  Paging - Get the 2nd page of items (page size is 10):

    GET /indexes/hotels/docs?search=*&amp;$skip=10&amp;$top=10&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">"top": 10
    }

8)  Paging - Get the 2nd page of items (page size is 10):

    GET /indexes/hotels/docs?search=*&amp;$skip=10&amp;$top=10&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>{
      "searc</source>
          <target state="new">{
      "searc</target>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source><ph id="ph1">":</ph> "*",</source>
          <target state="new"><ph id="ph1">":</ph> "*",</target>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">"s</ph>kip": 10,</source>
          <target state="new"><ph id="ph1">"s</ph>kip": 10,</target>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>"top": 10
    }

9)  Retrieve a specific set of fields:

    GET /indexes/hotels/docs?search=*&amp;$select=hotelName,description&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">"top": 10
    }

9)  Retrieve a specific set of fields:

    GET /indexes/hotels/docs?search=*&amp;$select=hotelName,description&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>{
      "searc</source>
          <target state="new">{
      "searc</target>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source><ph id="ph1">":</ph> "*",
      "select": [ "hotelName", "de</source>
          <target state="new"><ph id="ph1">":</ph> "*",
      "select": [ "hotelName", "de</target>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>cription" ]
    }

10)  Retrieve documents matching a specific filter expression

    GET /indexes/hotels/docs?$filter=(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview
    {
      "filter": "(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'"
    }

11) Search the index and return fragments with hit highlights

    GET /indexes/hotels/docs?search=something&amp;highlight=description&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">cription" ]
    }

10)  Retrieve documents matching a specific filter expression

    GET /indexes/hotels/docs?$filter=(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview
    {
      "filter": "(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'"
    }

11) Search the index and return fragments with hit highlights

    GET /indexes/hotels/docs?search=something&amp;highlight=description&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>{
      "search": "som</source>
          <target state="new">{
      "search": "som</target>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source><ph id="ph1">th</ph>ing",
      "highlight": "</source>
          <target state="new"><ph id="ph1">th</ph>ing",
      "highlight": "</target>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>escription"
    }

12) Search the index and return documents sorted from closer to farther away from a reference location

    GET /indexes/hotels/docs?search=something&amp;$orderby=geo.distance(location, geography'POINT(-122.12315 47.88121)')&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">escription"
    }

12) Search the index and return documents sorted from closer to farther away from a reference location

    GET /indexes/hotels/docs?search=something&amp;$orderby=geo.distance(location, geography'POINT(-122.12315 47.88121)')&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>{
      "search": "som</source>
          <target state="new">{
      "search": "som</target>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source><ph id="ph1">th</ph>ing",
      "orderby": [ "geo.distance(location, geography'POINT(-122.12315 47</source>
          <target state="new"><ph id="ph1">th</ph>ing",
      "orderby": [ "geo.distance(location, geography'POINT(-122.12315 47</target>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>88121)')" ]
    }

13) Search the index assuming there's a scoring profile called "geo" with two distance scoring functions, one defining a parameter called "currentLocation" and one defining a parameter called "lastLocation"

    GET /indexes/hotels/docs?search=something&amp;scoringProfile=geo&amp;scoringParameter=currentLocation:-122.123,44.77233&amp;scoringParameter=lastLocation:-121.499,44.2113&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">88121)')" ]
    }

13) Search the index assuming there's a scoring profile called "geo" with two distance scoring functions, one defining a parameter called "currentLocation" and one defining a parameter called "lastLocation"

    GET /indexes/hotels/docs?search=something&amp;scoringProfile=geo&amp;scoringParameter=currentLocation:-122.123,44.77233&amp;scoringParameter=lastLocation:-121.499,44.2113&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>{
      "search": "som</source>
          <target state="new">{
      "search": "som</target>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source><ph id="ph1">th</ph>ing",
      "scoringProf</source>
          <target state="new"><ph id="ph1">th</ph>ing",
      "scoringProf</target>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source><ph id="ph1">le</ph>": "geo",
      "scoringParameters": [ "currentLocation:-122.123,44.77233", "lastLocation:-12</source>
          <target state="new"><ph id="ph1">le</ph>": "geo",
      "scoringParameters": [ "currentLocation:-122.123,44.77233", "lastLocation:-12</target>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>.499,44.2113" ]
    }

14) Find documents in the index using <bpt id="p1">[</bpt><ept id="p1">simple query syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept>.</source>
          <target state="new">.499,44.2113" ]
    }

14) Find documents in the index using <bpt id="p1">[</bpt><ept id="p1">simple query syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>This query returns hotels where searchable fields contain the terms "comfort" and "location" but not "motel":

    GET /indexes/hotels/docs?search=comfort +location -motel&amp;searchMode=all&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</source>
          <target state="new">This query returns hotels where searchable fields contain the terms "comfort" and "location" but not "motel":

    GET /indexes/hotels/docs?search=comfort +location -motel&amp;searchMode=all&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview</target>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>{
      "search": "comfort +location</source>
          <target state="new">{
      "search": "comfort +location</target>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source><ph id="ph1">mo</ph>tel",
      "search</source>
          <target state="new"><ph id="ph1">mo</ph>tel",
      "search</target>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>ode": "all"
    }

Note the use of <ph id="ph1">`searchMode=all`</ph> above.</source>
          <target state="new">ode": "all"
    }

Note the use of <ph id="ph1">`searchMode=all`</ph> above.</target>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Including this parameter overrides the default of <ph id="ph1">`searchMode=any`</ph>, ensuring that <ph id="ph2">`-motel`</ph> means "AND NOT" instead of "OR NOT".</source>
          <target state="new">Including this parameter overrides the default of <ph id="ph1">`searchMode=any`</ph>, ensuring that <ph id="ph2">`-motel`</ph> means "AND NOT" instead of "OR NOT".</target>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Without <ph id="ph1">`searchMode=all`</ph>, you get "OR NOT" which expands rather than restricts search results, and this can be counter-intuitive to some users.</source>
          <target state="new">Without <ph id="ph1">`searchMode=all`</ph>, you get "OR NOT" which expands rather than restricts search results, and this can be counter-intuitive to some users.</target>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="LookupAPI"&gt;&lt;/a&gt;</ph>
##Lookup Document

The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> operation retrieves a document from Azure Search.</source>
          <target state="new"><ph id="ph1">&lt;a name="LookupAPI"&gt;&lt;/a&gt;</ph>
##Lookup Document

The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> operation retrieves a document from Azure Search.</target>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>This is useful when a user clicks on a specific search result, and you want to look up specific details about that document.</source>
          <target state="new">This is useful when a user clicks on a specific search result, and you want to look up specific details about that document.</target>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/[key]?[query parameters]
    api-key: [admin or query key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/[key]?[query parameters]
    api-key: [admin or query key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> request can be constructed as follows.</source>
          <target state="new">The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> request can be constructed as follows.</target>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>GET /indexes/[index name]/docs/key?[query parameters]

Alternatively, you can use the traditional OData syntax for key lookup:

    GET /indexes('[index name]')/docs('[key]')?[query parameters]

The request URI includes an [index name] and [key], specifying which document to retrieve from which index.</source>
          <target state="new">GET /indexes/[index name]/docs/key?[query parameters]

Alternatively, you can use the traditional OData syntax for key lookup:

    GET /indexes('[index name]')/docs('[key]')?[query parameters]

The request URI includes an [index name] and [key], specifying which document to retrieve from which index.</target>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>You can only get one document at a time.</source>
          <target state="new">You can only get one document at a time.</target>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> to get multiple documents in a single request.</source>
          <target state="new">Use <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> to get multiple documents in a single request.</target>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query Parameters<ept id="p1">**</ept><ph id="ph1">

`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.</source>
          <target state="new"><bpt id="p1">**</bpt>Query Parameters<ept id="p1">**</ept><ph id="ph1">

`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.</target>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>If unspecified or set to <ph id="ph1">`*`</ph>, all fields marked as retrievable in the schema are included in the projection.</source>
          <target state="new">If unspecified or set to <ph id="ph1">`*`</ph>, all fields marked as retrievable in the schema are included in the projection.</target>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter.</source>
          <target state="new">Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter.</target>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service URL.</source>
          <target state="new">It is a string value, unique to your service URL.</target>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Lookup Document<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</target>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source><bpt id="p1">{
      field_name: field_value (fields matching the default or specified projection)
    }

**</bpt>Example<ept id="p1">**</ept>

Lookup the document that has key '2'

    GET /indexes/hotels/docs/2?api-version=2015-02-28-Preview

Lookup the document that has key '3' using OData syntax:

    <ph id="ph1">GET /indexes('hotels')/docs('3')?api-version=2015-02-28-Preview

&lt;a name="CountDocs"&gt;&lt;/a&gt;</ph>
##Count Documents

The <bpt id="p2">**</bpt>Count Documents<ept id="p2">**</ept> operation retrieves a count of the number of documents in a search index.</source>
          <target state="new"><bpt id="p1">{
      field_name: field_value (fields matching the default or specified projection)
    }

**</bpt>Example<ept id="p1">**</ept>

Lookup the document that has key '2'

    GET /indexes/hotels/docs/2?api-version=2015-02-28-Preview

Lookup the document that has key '3' using OData syntax:

    <ph id="ph1">GET /indexes('hotels')/docs('3')?api-version=2015-02-28-Preview

&lt;a name="CountDocs"&gt;&lt;/a&gt;</ph>
##Count Documents

The <bpt id="p2">**</bpt>Count Documents<ept id="p2">**</ept> operation retrieves a count of the number of documents in a search index.</target>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`$count`</ph> syntax is part of the OData protocol.</source>
          <target state="new">The <ph id="ph1">`$count`</ph> syntax is part of the OData protocol.</target>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/$count?api-version=[api-version]
    Accept: text/plain
    api-key: [admin or query key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/$count?api-version=[api-version]
    Accept: text/plain
    api-key: [admin or query key]

**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Count Documents<ept id="p1">**</ept> request can be constructed using the GET method.</source>
          <target state="new">The <bpt id="p1">**</bpt>Count Documents<ept id="p1">**</ept> request can be constructed using the GET method.</target>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>The [index name] in the request URI tells the service to return a count of all items in the docs collection of the specified index.</source>
          <target state="new">The [index name] in the request URI tells the service to return a count of all items in the docs collection of the specified index.</target>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers.</target>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `Accept`</ph>: This value must be set to <ph id="ph2">`text/plain`</ph>.</source>
          <target state="new"><ph id="ph1">- `Accept`</ph>: This value must be set to <ph id="ph2">`text/plain`</ph>.</target>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service URL.</source>
          <target state="new">It is a string value, unique to your service URL.</target>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Count Documents<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Count Documents<ept id="p1">**</ept> request can specify either an admin key or query key for <ph id="ph1">`api-key`</ph>.</target>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

None.</target>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new"><bpt id="p1">**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>The response body contains the count value as an integer formatted in plain text.</source>
          <target state="new">The response body contains the count value as an integer formatted in plain text.</target>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="Suggestions"&gt;&lt;/a&gt;</ph>
##Suggestions

The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operation retrieves suggestions based on partial search input.</source>
          <target state="new"><ph id="ph1">&lt;a name="Suggestions"&gt;&lt;/a&gt;</ph>
##Suggestions

The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operation retrieves suggestions based on partial search input.</target>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>It's typically used in search boxes to provide type-ahead suggestions as users are entering search terms.</source>
          <target state="new">It's typically used in search boxes to provide type-ahead suggestions as users are entering search terms.</target>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Suggestion requests aim at suggesting target documents, so the suggested text may be repeated if multiple candidate documents match the same search input.</source>
          <target state="new">Suggestion requests aim at suggesting target documents, so the suggested text may be repeated if multiple candidate documents match the same search input.</target>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`$select`</ph> to retrieve other document fields (including the document key) so that you can tell which document is the source for each suggestion.</source>
          <target state="new">You can use <ph id="ph1">`$select`</ph> to retrieve other document fields (including the document key) so that you can tell which document is the source for each suggestion.</target>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operation is issued as a GET or POST request.</source>
          <target state="new">A <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operation is issued as a GET or POST request.</target>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/suggest?[query parameters]
    api-key: [admin or query key]

    POST https://[service name].search.windows.net/indexes/[index name]/docs/suggest?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin or query key]

**</bpt>When to use POST instead of GET<ept id="p1">**</ept>

When you use HTTP GET to call the <bpt id="p2">**</bpt>Suggestions<ept id="p2">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.</source>
          <target state="new"><bpt id="p1">GET https://[service name].search.windows.net/indexes/[index name]/docs/suggest?[query parameters]
    api-key: [admin or query key]

    POST https://[service name].search.windows.net/indexes/[index name]/docs/suggest?api-version=[api-version]
    Content-Type: application/json
    api-key: [admin or query key]

**</bpt>When to use POST instead of GET<ept id="p1">**</ept>

When you use HTTP GET to call the <bpt id="p2">**</bpt>Suggestions<ept id="p2">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.</target>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>This is usually enough for most applications.</source>
          <target state="new">This is usually enough for most applications.</target>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>However, some applications produce very large queries, specifically OData filter expressions.</source>
          <target state="new">However, some applications produce very large queries, specifically OData filter expressions.</target>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>For these applications, using HTTP POST is a better choice.</source>
          <target state="new">For these applications, using HTTP POST is a better choice.</target>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.</source>
          <target state="new">The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.</target>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</source>
          <target state="new"><bpt id="p1">**</bpt>Request<ept id="p1">**</ept>

HTTPS is required for service requests.</target>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> request can be constructed using the GET or POST methods.</source>
          <target state="new">The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> request can be constructed using the GET or POST methods.</target>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>The request URI specifies the name of the index to query.</source>
          <target state="new">The request URI specifies the name of the index to query.</target>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>Parameters, such as the partially input search term, are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.</source>
          <target state="new">Parameters, such as the partially input search term, are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.</target>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>As a best practice when creating GET requests, remember to <bpt id="p1">[</bpt><ept id="p1">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.</source>
          <target state="new">As a best practice when creating GET requests, remember to <bpt id="p1">[</bpt><ept id="p1">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.</target>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operations, this includes:

<ph id="ph1">- `$filter`</ph><ph id="ph2">
- `highlightPreTag`</ph><ph id="ph3">
- `highlightPostTag`</ph><ph id="ph4">
- `search`</ph>

URL encoding is only recommended on the above query parameters.</source>
          <target state="new">For <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> operations, this includes:

<ph id="ph1">- `$filter`</ph><ph id="ph2">
- `highlightPreTag`</ph><ph id="ph3">
- `highlightPostTag`</ph><ph id="ph4">
- `search`</ph>

URL encoding is only recommended on the above query parameters.</target>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.</source>
          <target state="new">If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.</target>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Also, URL encoding is only necessary when calling the REST API directly using GET.</source>
          <target state="new">Also, URL encoding is only necessary when calling the REST API directly using GET.</target>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>No URL encoding is necessary when calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, or when using the <bpt id="p2">[</bpt><ept id="p2">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.</source>
          <target state="new">No URL encoding is necessary when calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, or when using the <bpt id="p2">[</bpt><ept id="p2">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.</target>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query Parameters<ept id="p1">**</ept><bpt id="p2">

**</bpt>Suggestions<ept id="p2">**</ept> accepts several parameters that provide query criteria and also specify search behavior.</source>
          <target state="new"><bpt id="p1">**</bpt>Query Parameters<ept id="p1">**</ept><bpt id="p2">

**</bpt>Suggestions<ept id="p2">**</ept> accepts several parameters that provide query criteria and also specify search behavior.</target>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>You provide these parameters in the URL query string when calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> via GET, and as JSON properties in the request body when calling <bpt id="p2">**</bpt>Suggestions<ept id="p2">**</ept> via POST.</source>
          <target state="new">You provide these parameters in the URL query string when calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> via GET, and as JSON properties in the request body when calling <bpt id="p2">**</bpt>Suggestions<ept id="p2">**</ept> via POST.</target>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The syntax for some parameters is slightly different between GET and POST.</source>
          <target state="new">The syntax for some parameters is slightly different between GET and POST.</target>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>These differences are noted as applicable below:

<ph id="ph1">`search=[string]`</ph> - the search text to use to suggest queries.</source>
          <target state="new">These differences are noted as applicable below:

<ph id="ph1">`search=[string]`</ph> - the search text to use to suggest queries.</target>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Must be at least 1 character, and no more than 100 characters.</source>
          <target state="new">Must be at least 1 character, and no more than 100 characters.</target>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`highlightPreTag=[string]`</ph> (optional) - a string tag that prepends to search hits.</source>
          <target state="new"><ph id="ph1">`highlightPreTag=[string]`</ph> (optional) - a string tag that prepends to search hits.</target>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Must be set with <ph id="ph1">`highlightPostTag`</ph>.</source>
          <target state="new">Must be set with <ph id="ph1">`highlightPostTag`</ph>.</target>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</target>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`highlightPostTag=[string]`</ph> (optional) - a string tag that appends to search hits.</source>
          <target state="new"><ph id="ph1">`highlightPostTag=[string]`</ph> (optional) - a string tag that appends to search hits.</target>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Must be set with <ph id="ph1">`highlightPreTag`</ph>.</source>
          <target state="new">Must be set with <ph id="ph1">`highlightPreTag`</ph>.</target>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).</target>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`suggesterName=[string]`</ph> - the name of the suggester as specified in the <ph id="ph2">`suggesters`</ph> collection that's part of the index definition.</source>
          <target state="new"><ph id="ph1">`suggesterName=[string]`</ph> - the name of the suggester as specified in the <ph id="ph2">`suggesters`</ph> collection that's part of the index definition.</target>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`suggester`</ph> determines which fields are scanned for suggested query terms.</source>
          <target state="new">A <ph id="ph1">`suggester`</ph> determines which fields are scanned for suggested query terms.</target>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Suggesters](#Suggesters)</ept> for details.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Suggesters](#Suggesters)</ept> for details.</target>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`fuzzy=[boolean]`</ph> (optional, default = false) - when set to true this API will find suggestions even if there's a substituted or missing character in the search text.</source>
          <target state="new"><ph id="ph1">`fuzzy=[boolean]`</ph> (optional, default = false) - when set to true this API will find suggestions even if there's a substituted or missing character in the search text.</target>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.</source>
          <target state="new">While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.</target>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`searchFields=[string]`</ph> (optional) - the list of comma-separated field names to search for the specified search text.</source>
          <target state="new"><ph id="ph1">`searchFields=[string]`</ph> (optional) - the list of comma-separated field names to search for the specified search text.</target>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Target fields must be enabled for suggestions.</source>
          <target state="new">Target fields must be enabled for suggestions.</target>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$top=#`</ph> (optional, default = 5) - the number of suggestions to retrieve.</source>
          <target state="new"><ph id="ph1">`$top=#`</ph> (optional, default = 5) - the number of suggestions to retrieve.</target>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Must be a number between 1 and 100.</source>
          <target state="new">Must be a number between 1 and 100.</target>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`top`</ph> instead of <ph id="ph3">`$top`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`top`</ph> instead of <ph id="ph3">`$top`</ph>.</target>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$filter=[string]`</ph> (optional) - an expression that filters the documents considered for suggestions.</source>
          <target state="new"><ph id="ph1">`$filter=[string]`</ph> (optional) - an expression that filters the documents considered for suggestions.</target>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`filter`</ph> instead of <ph id="ph3">`$filter`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`filter`</ph> instead of <ph id="ph3">`$filter`</ph>.</target>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$orderby=[string]`</ph> (optional) - a list of comma-separated expressions to sort the results by.</source>
          <target state="new"><ph id="ph1">`$orderby=[string]`</ph> (optional) - a list of comma-separated expressions to sort the results by.</target>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Each expression can be either a field name or a call to the <ph id="ph1">`geo.distance()`</ph> function.</source>
          <target state="new">Each expression can be either a field name or a call to the <ph id="ph1">`geo.distance()`</ph> function.</target>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Each expression can be followed by <ph id="ph1">`asc`</ph> to indicated ascending, and <ph id="ph2">`desc`</ph> to indicate descending.</source>
          <target state="new">Each expression can be followed by <ph id="ph1">`asc`</ph> to indicated ascending, and <ph id="ph2">`desc`</ph> to indicate descending.</target>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The default is ascending order.</source>
          <target state="new">The default is ascending order.</target>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>There is a limit of 32 clauses for <ph id="ph1">`$orderby`</ph>.</source>
          <target state="new">There is a limit of 32 clauses for <ph id="ph1">`$orderby`</ph>.</target>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`orderby`</ph> instead of <ph id="ph3">`$orderby`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`orderby`</ph> instead of <ph id="ph3">`$orderby`</ph>.</target>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.</source>
          <target state="new"><ph id="ph1">`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.</target>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>If unspecified, only the document key and suggestion text is returned.</source>
          <target state="new">If unspecified, only the document key and suggestion text is returned.</target>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`select`</ph> instead of <ph id="ph3">`$select`</ph>.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> When calling <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> using POST, this parameter is named <ph id="ph2">`select`</ph> instead of <ph id="ph3">`$select`</ph>.</target>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`minimumCoverage`</ph> (optional, defaults to 80) - a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success.</source>
          <target state="new"><ph id="ph1">`minimumCoverage`</ph> (optional, defaults to 80) - a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success.</target>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>By default, at least 80% of the index must be available or <ph id="ph1">`Suggest`</ph> will return HTTP status code 503.</source>
          <target state="new">By default, at least 80% of the index must be available or <ph id="ph1">`Suggest`</ph> will return HTTP status code 503.</target>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>If you set <ph id="ph1">`minimumCoverage`</ph> and <ph id="ph2">`Suggest`</ph> succeeds, it will return HTTP 200 and include a <ph id="ph3">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.</source>
          <target state="new">If you set <ph id="ph1">`minimumCoverage`</ph> and <ph id="ph2">`Suggest`</ph> succeeds, it will return HTTP 200 and include a <ph id="ph3">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.</target>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.</source>
          <target state="new"><ph id="ph1">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.</target>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>However, not all matching suggestions are guaranteed to be present in the results.</source>
          <target state="new">However, not all matching suggestions are guaranteed to be present in the results.</target>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>If recall is more important to your application than availability, then it's best not to lower <ph id="ph1">`minimumCoverage`</ph> below its default value of 80.</source>
          <target state="new">If recall is more important to your application than availability, then it's best not to lower <ph id="ph1">`minimumCoverage`</ph> below its default value of 80.</target>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`api-version=[string]`</ph> (required).</source>
          <target state="new"><ph id="ph1">`api-version=[string]`</ph> (required).</target>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</source>
          <target state="new">The preview version is <ph id="ph1">`api-version=2015-02-28-Preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.</target>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> with GET or POST.</source>
          <target state="new">Note: For this operation, the <ph id="ph1">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> with GET or POST.</target>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers

<ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Headers<ept id="p1">**</ept>

The following list describes the required and optional request headers

<ph id="ph1">- `api-key`</ph>: The <ph id="ph2">`api-key`</ph> is used to authenticate the request to your Search service.</target>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>It is a string value, unique to your service URL.</source>
          <target state="new">It is a string value, unique to your service URL.</target>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> request can specify either an admin key or query key as the <ph id="ph1">`api-key`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>Suggestions<ept id="p1">**</ept> request can specify either an admin key or query key as the <ph id="ph1">`api-key`</ph>.</target>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>You will also need the service name to construct the request URL.</source>
          <target state="new">You will also need the service name to construct the request URL.</target>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</source>
          <target state="new">You can get the service name and <ph id="ph1">`api-key`</ph> from your service dashboard in the Azure Portal.</target>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</source>
          <target state="new">See <bpt id="p1">[</bpt><ept id="p1">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.</target>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

For GET: None.</source>
          <target state="new"><bpt id="p1">**</bpt>Request Body<ept id="p1">**</ept>

For GET: None.</target>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>For POST:

    <bpt id="p1">{
      "filter": "odata_filter_expression",
      "fuzzy": true | false (default),
      "highlightPreTag": "pre_tag",
      "highlightPostTag": "post_tag",
      "minimumCoverage": # (% of index that must be covered to declare query successful; default 80),
      "orderby": "orderby_expression",
      "search": "partial_search_input",
      "searchFields": "field_name_1, field_name_2, ...",
      "select": "field_name_1, field_name_2, ...",
      "suggesterName": "suggester_name",
      "top": # (default 5)
    }

**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</source>
          <target state="new">For POST:

    <bpt id="p1">{
      "filter": "odata_filter_expression",
      "fuzzy": true | false (default),
      "highlightPreTag": "pre_tag",
      "highlightPostTag": "post_tag",
      "minimumCoverage": # (% of index that must be covered to declare query successful; default 80),
      "orderby": "orderby_expression",
      "search": "partial_search_input",
      "searchFields": "field_name_1, field_name_2, ...",
      "select": "field_name_1, field_name_2, ...",
      "suggesterName": "suggester_name",
      "top": # (default 5)
    }

**</bpt>Response<ept id="p1">**</ept>

Status Code: 200 OK is returned for a successful response.</target>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source><ph id="ph1">{
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "value": [
        {
          "@search.text": "...",
          "</ph></source>
          <target state="new"><ph id="ph1">{
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "value": [
        {
          "@search.text": "...",
          "</ph></target>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>": "..."</source>
          <target state="new">": "..."</target>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>},</source>
          <target state="new">},</target>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>]</source>
          <target state="new">]</target>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>}

If the projection option is used to retrieve fields they are included in each element of the array:

    <ph id="ph1">{
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "value": [
        {
          "@search.text": "...",
          "</ph></source>
          <target state="new">}

If the projection option is used to retrieve fields they are included in each element of the array:

    <ph id="ph1">{
      "@search.coverage": # (if minimumCoverage was provided in the query),
      "value": [
        {
          "@search.text": "...",
          "</ph></target>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>": "..."</source>
          <target state="new">": "..."</target>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source><bpt id="p1">
        },
        ...
      ]
    }

**</bpt>Example<ept id="p1">**</ept>

Retrieve 5 suggestions where the partial search input is 'lux'

    <ph id="ph1">GET /indexes/hotels/docs/suggest?search=lux&amp;$top=5&amp;suggesterName=sg&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/suggest?api-version=2015-02-28-Preview
    {
      "search": "lux",
      "top": 5,
      "suggesterName": "sg"
    }</ph></source>
          <target state="new"><bpt id="p1">
        },
        ...
      ]
    }

**</bpt>Example<ept id="p1">**</ept>

Retrieve 5 suggestions where the partial search input is 'lux'

    <ph id="ph1">GET /indexes/hotels/docs/suggest?search=lux&amp;$top=5&amp;suggesterName=sg&amp;api-version=2015-02-28-Preview

    POST /indexes/hotels/docs/suggest?api-version=2015-02-28-Preview
    {
      "search": "lux",
      "top": 5,
      "suggesterName": "sg"
    }</ph></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">340d66a649504b0df2e998014eaf9d028ce76f5b</xliffext:olfilehash>
  </header>
</xliff>