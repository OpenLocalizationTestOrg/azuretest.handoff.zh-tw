<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to call the custom API</source>
          <target state="new"><ph id="ph1">&lt;a name="update-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to call the custom API</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We will add a button labelled "Complete All" next to the existing button, and move both buttons down a line.</source>
          <target state="new">We will add a button labelled "Complete All" next to the existing button, and move both buttons down a line.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In Android Studio, open the <bpt id="p1">*</bpt>res\layout\activity_to_do.xml<ept id="p1">*</ept> file in your quickstart project, locate the <bpt id="p2">**</bpt>LinearLayout<ept id="p2">**</ept> element that contains the <bpt id="p3">**</bpt>Button<ept id="p3">**</ept> element named <ph id="ph1">`buttonAddToDo`</ph>.</source>
          <target state="new">In Android Studio, open the <bpt id="p1">*</bpt>res\layout\activity_to_do.xml<ept id="p1">*</ept> file in your quickstart project, locate the <bpt id="p2">**</bpt>LinearLayout<ept id="p2">**</ept> element that contains the <bpt id="p3">**</bpt>Button<ept id="p3">**</ept> element named <ph id="ph1">`buttonAddToDo`</ph>.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept> and paste it immediately following the original one.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept> and paste it immediately following the original one.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Delete the <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> element from the first <bpt id="p2">**</bpt>LinearLayout<ept id="p2">**</ept>.</source>
          <target state="new">Delete the <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> element from the first <bpt id="p2">**</bpt>LinearLayout<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the second <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept>, delete the <bpt id="p2">**</bpt>EditText<ept id="p2">**</ept> element, and add the following  code immediately following the existing <bpt id="p3">**</bpt>Button<ept id="p3">**</ept> element:</source>
          <target state="new">In the second <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept>, delete the <bpt id="p2">**</bpt>EditText<ept id="p2">**</ept> element, and add the following  code immediately following the existing <bpt id="p3">**</bpt>Button<ept id="p3">**</ept> element:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This adds a new button to the page, on a separate line, next to the existing button.</source>
          <target state="new">This adds a new button to the page, on a separate line, next to the existing button.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The second <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept> now looks like this:</source>
          <target state="new">The second <bpt id="p1">**</bpt>LinearLayout<ept id="p1">**</ept> now looks like this:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Open the res\values\string.xml file and add the following line of code:</source>
          <target state="new">Open the res\values\string.xml file and add the following line of code:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In Project Explorer, right click the project name in the <bpt id="p1">*</bpt>src<ept id="p1">*</ept> folder (<ph id="ph1">`com.example.{your projects name}`</ph>), choose <bpt id="p2">**</bpt>New<ept id="p2">**</ept> then <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</source>
          <target state="new">In Project Explorer, right click the project name in the <bpt id="p1">*</bpt>src<ept id="p1">*</ept> folder (<ph id="ph1">`com.example.{your projects name}`</ph>), choose <bpt id="p2">**</bpt>New<ept id="p2">**</ept> then <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the dialog, enter <bpt id="p1">**</bpt>MarkAllResult<ept id="p1">**</ept> in the class name field, choose OK, and replace the resulting class definition with the following code:</source>
          <target state="new">In the dialog, enter <bpt id="p1">**</bpt>MarkAllResult<ept id="p1">**</ept> in the class name field, choose OK, and replace the resulting class definition with the following code:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This class is used to hold the row count value returned by the custom API.</source>
          <target state="new">This class is used to hold the row count value returned by the custom API.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Locate the <bpt id="p1">**</bpt>refreshItemsFromTable<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>ToDoActivity.java<ept id="p2">**</ept> file, and make sure that the first line of code in the <ph id="ph1">`try`</ph> block looks like this:</source>
          <target state="new">Locate the <bpt id="p1">**</bpt>refreshItemsFromTable<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>ToDoActivity.java<ept id="p2">**</ept> file, and make sure that the first line of code in the <ph id="ph1">`try`</ph> block looks like this:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This filters the items so that completed items are not returned by the query.</source>
          <target state="new">This filters the items so that completed items are not returned by the query.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> contains the following imports at the beginning of the file:</source>
          <target state="new">Make sure that <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> contains the following imports at the beginning of the file:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file, add the following method:</source>
          <target state="new">In the <bpt id="p1">**</bpt>ToDoActivity.java<ept id="p1">**</ept> file, add the following method:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>public void completeItem(View view) {</source>
          <target state="new">public void completeItem(View view) {</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This method handles the <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event for the new button.</source>
          <target state="new">This method handles the <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event for the new button.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method is called on the client, which sends a POST request to the new custom API.</source>
          <target state="new">The <bpt id="p1">**</bpt>invokeApi<ept id="p1">**</ept> method is called on the client, which sends a POST request to the new custom API.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The result returned by the custom API is displayed in a message dialog, as are any errors.</source>
          <target state="new">The result returned by the custom API is displayed in a message dialog, as are any errors.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Test the app</source>
          <target state="new">Test the app</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run app<ept id="p2">**</ept> to start the project in the Android emulator, or in a connected Android device.</source>
          <target state="new">From the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run app<ept id="p2">**</ept> to start the project in the Android emulator, or in a connected Android device.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This executes your app, built with the Android SDK, that uses the client library to send a query that returns items from your mobile service.</source>
          <target state="new">This executes your app, built with the Android SDK, that uses the client library to send a query that returns items from your mobile service.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the app, type some text in <bpt id="p1">**</bpt>Insert a TodoItem<ept id="p1">**</ept>, then click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
          <target state="new">In the app, type some text in <bpt id="p1">**</bpt>Insert a TodoItem<ept id="p1">**</ept>, then click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Repeat the previous step until you have added several todo items to the list.</source>
          <target state="new">Repeat the previous step until you have added several todo items to the list.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Complete All<ept id="p1">**</ept> button.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Complete All<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A message dialog is displayed that indicates the number of items marked complete and the filtered query is executed again, which clears all items from the list.</source>
          <target state="new">A message dialog is displayed that indicates the number of items marked complete and the filtered query is executed again, which clears all items from the list.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d012f614cd061f09079604b8d2f7cb234f50df6</xliffext:olfilehash>
  </header>
</xliff>