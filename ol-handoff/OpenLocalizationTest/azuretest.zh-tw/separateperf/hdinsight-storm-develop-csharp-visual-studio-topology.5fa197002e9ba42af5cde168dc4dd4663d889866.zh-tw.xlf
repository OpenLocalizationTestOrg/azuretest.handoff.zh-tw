<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Apache Storm topologies with Visual Studio and C#  | Microsoft Azure</source>
          <target state="new">Apache Storm topologies with Visual Studio and C#  | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create Storm topologies in C# by creating a simple word count topology in Visual Studio using the HDInsight Tools for Visual Studio.</source>
          <target state="new">Learn how to create Storm topologies in C# by creating a simple word count topology in Visual Studio using the HDInsight Tools for Visual Studio.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Develop C# topologies for Apache Storm on HDInsight using Hadoop tools for Visual Studio</source>
          <target state="new">Develop C# topologies for Apache Storm on HDInsight using Hadoop tools for Visual Studio</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Learn how to create a C# Storm topology by using the HDInsight tools for Visual Studio.</source>
          <target state="new">Learn how to create a C# Storm topology by using the HDInsight tools for Visual Studio.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial walks through the process of creating a new Storm project in Visual Studio, testing it locally, and deploying it to an Apache Storm on HDInsight cluster.</source>
          <target state="new">This tutorial walks through the process of creating a new Storm project in Visual Studio, testing it locally, and deploying it to an Apache Storm on HDInsight cluster.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You will also learn how to create hybrid topologies that use C# and Java components.</source>
          <target state="new">You will also learn how to create hybrid topologies that use C# and Java components.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One of the following versions of Visual Studio</source>
          <target state="new">One of the following versions of Visual Studio</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Visual Studio 2012 with <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=39305)</ept></source>
          <target state="new">Visual Studio 2012 with <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=39305)</ept></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013 with <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=44921)</ept> or <bpt id="p2">[</bpt>Visual Studio 2013 Community<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=517284)</ept></source>
          <target state="new">Visual Studio 2013 with <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=44921)</ept> or <bpt id="p2">[</bpt>Visual Studio 2013 Community<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=517284)</ept></target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 or <bpt id="p1">[</bpt>Visual Studio 2015 Community<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=532606)</ept></source>
          <target state="new">Visual Studio 2015 or <bpt id="p1">[</bpt>Visual Studio 2015 Community<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=532606)</ept></target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure SDK 2.5.1 or later</source>
          <target state="new">Azure SDK 2.5.1 or later</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>HDInsight Tools for Visual Studio: See <bpt id="p1">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id="p1">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept> to install and configure the HDInsight tools for Visual Studio.</source>
          <target state="new">HDInsight Tools for Visual Studio: See <bpt id="p1">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id="p1">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept> to install and configure the HDInsight tools for Visual Studio.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> HDInsight Tools for Visual Studio are not supported on Visual Studio Express</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> HDInsight Tools for Visual Studio are not supported on Visual Studio Express</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Apache Storm on HDInsight cluster: See <bpt id="p1">[</bpt>Getting started with Apache Storm on HDInsight<ept id="p1">](hdinsight-storm-getting-started.md)</ept> for steps to create a cluster.</source>
          <target state="new">Apache Storm on HDInsight cluster: See <bpt id="p1">[</bpt>Getting started with Apache Storm on HDInsight<ept id="p1">](hdinsight-storm-getting-started.md)</ept> for steps to create a cluster.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Currently, the HDInsight Tools for Visual Studio only support Storm on HDInsight versions 3.2 clusters.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Currently, the HDInsight Tools for Visual Studio only support Storm on HDInsight versions 3.2 clusters.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="new">Templates</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The HDInsight Tools for Visual Studio provide the following templates::</source>
          <target state="new">The HDInsight Tools for Visual Studio provide the following templates::</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Project type</source>
          <target state="new">Project type</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
          <target state="new">Demonstrates</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Storm Application</source>
          <target state="new">Storm Application</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An empty Storm topology project</source>
          <target state="new">An empty Storm topology project</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Storm Azure SQL Writer Sample</source>
          <target state="new">Storm Azure SQL Writer Sample</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>How to write to Azure SQL Database</source>
          <target state="new">How to write to Azure SQL Database</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Storm DocumentDB Reader Sample</source>
          <target state="new">Storm DocumentDB Reader Sample</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to read from Azure DocumentDB</source>
          <target state="new">How to read from Azure DocumentDB</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Storm DocumentDB Writer Sample</source>
          <target state="new">Storm DocumentDB Writer Sample</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>How to write to Azure DocumentDB</source>
          <target state="new">How to write to Azure DocumentDB</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Storm EventHub Reader Sample</source>
          <target state="new">Storm EventHub Reader Sample</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>How to read from Azure Event Hubs</source>
          <target state="new">How to read from Azure Event Hubs</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Storm EventHub Writer Sample</source>
          <target state="new">Storm EventHub Writer Sample</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>How to write to Azure Event Hubs</source>
          <target state="new">How to write to Azure Event Hubs</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Storm HBase Reader Sample</source>
          <target state="new">Storm HBase Reader Sample</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How to read from HBase on HDInsight clusters</source>
          <target state="new">How to read from HBase on HDInsight clusters</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Storm HBase Writer Sample</source>
          <target state="new">Storm HBase Writer Sample</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>How to write to HBase on HDInsight clusters</source>
          <target state="new">How to write to HBase on HDInsight clusters</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Storm Hybrid Sample</source>
          <target state="new">Storm Hybrid Sample</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>How to use a Java component</source>
          <target state="new">How to use a Java component</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Storm Sample</source>
          <target state="new">Storm Sample</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A basic word count topology</source>
          <target state="new">A basic word count topology</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The HBase reader and writer samples use the HBase REST API to communicate with an HBase on HDInsight cluster, not the HBase Java API.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The HBase reader and writer samples use the HBase REST API to communicate with an HBase on HDInsight cluster, not the HBase Java API.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the steps in this document, you will use the basic Storm Application project type to create a new topology.</source>
          <target state="new">In the steps in this document, you will use the basic Storm Application project type to create a new topology.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Create a C# topology</source>
          <target state="new">Create a C# topology</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see <bpt id="p1">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id="p1">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept>.</source>
          <target state="new">If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see <bpt id="p1">[</bpt>Get started using HDInsight Tools for Visual Studio<ept id="p1">](hdinsight-hadoop-visual-studio-tools-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open Visual Studio, select <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
          <target state="new">Open Visual Studio, select <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> screen, expand <bpt id="p2">**</bpt>Installed<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Templates<ept id="p3">**</ept>, and select <bpt id="p4">**</bpt>HDInsight<ept id="p4">**</ept>.</source>
          <target state="new">From the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> screen, expand <bpt id="p2">**</bpt>Installed<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Templates<ept id="p3">**</ept>, and select <bpt id="p4">**</bpt>HDInsight<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>From the list of templates, select <bpt id="p1">**</bpt>Storm Application<ept id="p1">**</ept>.</source>
          <target state="new">From the list of templates, select <bpt id="p1">**</bpt>Storm Application<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>At the bottom of the screen, enter <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> as the name of the application.</source>
          <target state="new">At the bottom of the screen, enter <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> as the name of the application.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>image</source>
          <target state="new">image</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After the project has been created, you should have the following files:</source>
          <target state="new">After the project has been created, you should have the following files:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>: This defines the topology for your project.</source>
          <target state="new"><bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>: This defines the topology for your project.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note that a default topology that consists of one spout and one bolt is created by default.</source>
          <target state="new">Note that a default topology that consists of one spout and one bolt is created by default.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Spout.cs<ept id="p1">**</ept>: An example spout that emits random numbers.</source>
          <target state="new"><bpt id="p1">**</bpt>Spout.cs<ept id="p1">**</ept>: An example spout that emits random numbers.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Bolt.cs<ept id="p1">**</ept>: An example bolt that keeps a count of numbers emitted by the spout.</source>
          <target state="new"><bpt id="p1">**</bpt>Bolt.cs<ept id="p1">**</ept>: An example bolt that keeps a count of numbers emitted by the spout.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As part of project creation, the latest <bpt id="p1">[</bpt>SCP.NET packages<ept id="p1">](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/)</ept> will be downloaded from NuGet.</source>
          <target state="new">As part of project creation, the latest <bpt id="p1">[</bpt>SCP.NET packages<ept id="p1">](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/)</ept> will be downloaded from NuGet.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the next sections, you will modify this project into a basic WordCount application.</source>
          <target state="new">In the next sections, you will modify this project into a basic WordCount application.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Implement the spout</source>
          <target state="new">Implement the spout</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Spout.cs<ept id="p1">**</ept>.</source>
          <target state="new">Open <bpt id="p1">**</bpt>Spout.cs<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Spouts are used to read data in a topology from an external source.</source>
          <target state="new">Spouts are used to read data in a topology from an external source.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The main components for a spout are:</source>
          <target state="new">The main components for a spout are:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NextTuple<ept id="p1">**</ept>: Called by Storm when the spout is allowed to emit new tuples.</source>
          <target state="new"><bpt id="p1">**</bpt>NextTuple<ept id="p1">**</ept>: Called by Storm when the spout is allowed to emit new tuples.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ack<ept id="p1">**</ept> (transactional topology only): Handles acknowledgements initiated by other components in the topology for tuples sent from this spout.</source>
          <target state="new"><bpt id="p1">**</bpt>Ack<ept id="p1">**</ept> (transactional topology only): Handles acknowledgements initiated by other components in the topology for tuples sent from this spout.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Acknowledging a tuple lets the spout know that it was processed successfully by downstream components.</source>
          <target state="new">Acknowledging a tuple lets the spout know that it was processed successfully by downstream components.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept> (transactional topology only): Handles tuples that are fail-processing other components in the topology.</source>
          <target state="new"><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept> (transactional topology only): Handles tuples that are fail-processing other components in the topology.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This provides the opportunity to re-emit the tuple so that it can be processed again.</source>
          <target state="new">This provides the opportunity to re-emit the tuple so that it can be processed again.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Replace the contents of the <bpt id="p1">**</bpt>Spout<ept id="p1">**</ept> class with the following.</source>
          <target state="new">Replace the contents of the <bpt id="p1">**</bpt>Spout<ept id="p1">**</ept> class with the following.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This creates a spout that randomly emits a sentence into the topology.</source>
          <target state="new">This creates a spout that randomly emits a sentence into the topology.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the comments to understand what this code does.</source>
          <target state="new">Take a moment to read through the comments to understand what this code does.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Implement the bolts</source>
          <target state="new">Implement the bolts</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Delete the existing <bpt id="p1">**</bpt>Bolt.cs<ept id="p1">**</ept> file from the project.</source>
          <target state="new">Delete the existing <bpt id="p1">**</bpt>Bolt.cs<ept id="p1">**</ept> file from the project.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>New item<ept id="p3">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>New item<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>From the list, select <bpt id="p1">**</bpt>Storm Bolt<ept id="p1">**</ept>, and enter <bpt id="p2">**</bpt>Splitter.cs<ept id="p2">**</ept> as the name.</source>
          <target state="new">From the list, select <bpt id="p1">**</bpt>Storm Bolt<ept id="p1">**</ept>, and enter <bpt id="p2">**</bpt>Splitter.cs<ept id="p2">**</ept> as the name.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Repeat this to create a second bolt named <bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept>.</source>
          <target state="new">Repeat this to create a second bolt named <bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Splitter.cs<ept id="p1">**</ept>: Implements a bolt that splits sentences into individual words and emits a new stream of words.</source>
          <target state="new"><bpt id="p1">**</bpt>Splitter.cs<ept id="p1">**</ept>: Implements a bolt that splits sentences into individual words and emits a new stream of words.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept>: Implements a bolt that counts each word and emits a new stream of words and the count for each word.</source>
          <target state="new"><bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept>: Implements a bolt that counts each word and emits a new stream of words and the count for each word.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> These bolts simply read and write to streams, but you can also use a bolt to communicate with sources such as a database or service.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> These bolts simply read and write to streams, but you can also use a bolt to communicate with sources such as a database or service.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Splitter.cs<ept id="p1">**</ept>.</source>
          <target state="new">Open <bpt id="p1">**</bpt>Splitter.cs<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that it has only one method by default: <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>.</source>
          <target state="new">Note that it has only one method by default: <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is called when the bolt receives a tuple for processing.</source>
          <target state="new">This is called when the bolt receives a tuple for processing.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Here, you can read and process incoming tuples, and emit outbound tuples.</source>
          <target state="new">Here, you can read and process incoming tuples, and emit outbound tuples.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Replace the contents of the <bpt id="p1">**</bpt>Splitter<ept id="p1">**</ept> class with the following code:</source>
          <target state="new">Replace the contents of the <bpt id="p1">**</bpt>Splitter<ept id="p1">**</ept> class with the following code:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the comments to understand what this code does.</source>
          <target state="new">Take a moment to read through the comments to understand what this code does.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept> and replace the class contents with the following:</source>
          <target state="new">Open <bpt id="p1">**</bpt>Counter.cs<ept id="p1">**</ept> and replace the class contents with the following:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the comments to understand what this code does.</source>
          <target state="new">Take a moment to read through the comments to understand what this code does.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Define the topology</source>
          <target state="new">Define the topology</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Spouts and bolts are arranged in a graph, which defines how the data flows between components.</source>
          <target state="new">Spouts and bolts are arranged in a graph, which defines how the data flows between components.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For this topology, the graph is as follows:</source>
          <target state="new">For this topology, the graph is as follows:</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>image of how components are arranged</source>
          <target state="new">image of how components are arranged</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sentences are emitted from the spout, which are distributed to instances of the Splitter bolt.</source>
          <target state="new">Sentences are emitted from the spout, which are distributed to instances of the Splitter bolt.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The Splitter bolt breaks the sentences into words, which are distributed to the Counter bolt.</source>
          <target state="new">The Splitter bolt breaks the sentences into words, which are distributed to the Counter bolt.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Because word count is held locally in the Counter instance, we want to make sure that specific words flow to the same Counter bolt instance, so we have only one instance keeping track of a specific word.</source>
          <target state="new">Because word count is held locally in the Counter instance, we want to make sure that specific words flow to the same Counter bolt instance, so we have only one instance keeping track of a specific word.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>But for the Splitter bolt, it really doesn't matter which bolt receives which sentence, so we simply want to load balance sentences across those instances.</source>
          <target state="new">But for the Splitter bolt, it really doesn't matter which bolt receives which sentence, so we simply want to load balance sentences across those instances.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</source>
          <target state="new">Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The important method is <bpt id="p1">**</bpt>ITopologyBuilder<ept id="p1">**</ept>, which is used to define the topology that is submitted to Storm.</source>
          <target state="new">The important method is <bpt id="p1">**</bpt>ITopologyBuilder<ept id="p1">**</ept>, which is used to define the topology that is submitted to Storm.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Replace the contents of <bpt id="p1">**</bpt>ITopologyBuilder<ept id="p1">**</ept> with the following code to implement the topology described previously:</source>
          <target state="new">Replace the contents of <bpt id="p1">**</bpt>ITopologyBuilder<ept id="p1">**</ept> with the following code to implement the topology described previously:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the comments to understand what this code does.</source>
          <target state="new">Take a moment to read through the comments to understand what this code does.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Submit the topology</source>
          <target state="new">Submit the topology</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, and select <bpt id="p2">**</bpt>Submit to Storm on HDInsight<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, and select <bpt id="p2">**</bpt>Submit to Storm on HDInsight<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If prompted, enter the login credentials for your Azure subscription.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If prompted, enter the login credentials for your Azure subscription.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If you have more than one subscription, log in to the one that contains your Storm on HDInsight cluster.</source>
          <target state="new">If you have more than one subscription, log in to the one that contains your Storm on HDInsight cluster.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Select your Storm on HDInsight cluster from the <bpt id="p1">**</bpt>Storm Cluster<ept id="p1">**</ept> drop-down list, and then select <bpt id="p2">**</bpt>Submit<ept id="p2">**</ept>.</source>
          <target state="new">Select your Storm on HDInsight cluster from the <bpt id="p1">**</bpt>Storm Cluster<ept id="p1">**</ept> drop-down list, and then select <bpt id="p2">**</bpt>Submit<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You can monitor if the submission is successful by using the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window.</source>
          <target state="new">You can monitor if the submission is successful by using the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When the topology has been successfully submitted, the <bpt id="p1">**</bpt>Storm Topologies<ept id="p1">**</ept> for the cluster should appear.</source>
          <target state="new">When the topology has been successfully submitted, the <bpt id="p1">**</bpt>Storm Topologies<ept id="p1">**</ept> for the cluster should appear.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> topology from the list to view information about the running topology.</source>
          <target state="new">Select the <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> topology from the list to view information about the running topology.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You can also view <bpt id="p1">**</bpt>Storm Topologies<ept id="p1">**</ept> from <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>: Expand <bpt id="p3">**</bpt>Azure<ept id="p3">**</ept> &gt; <bpt id="p4">**</bpt>HDInsight<ept id="p4">**</ept>, right-click a Storm on HDInsight cluster, and then select <bpt id="p5">**</bpt>View Storm Topologies<ept id="p5">**</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You can also view <bpt id="p1">**</bpt>Storm Topologies<ept id="p1">**</ept> from <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>: Expand <bpt id="p3">**</bpt>Azure<ept id="p3">**</ept> &gt; <bpt id="p4">**</bpt>HDInsight<ept id="p4">**</ept>, right-click a Storm on HDInsight cluster, and then select <bpt id="p5">**</bpt>View Storm Topologies<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Use the links for the spouts or bolts to view information about these components.</source>
          <target state="new">Use the links for the spouts or bolts to view information about these components.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A new window will be opened for each item selected.</source>
          <target state="new">A new window will be opened for each item selected.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Topology Summary<ept id="p1">**</ept> view, click <bpt id="p2">**</bpt>Kill<ept id="p2">**</ept> to stop the topology.</source>
          <target state="new">From the <bpt id="p1">**</bpt>Topology Summary<ept id="p1">**</ept> view, click <bpt id="p2">**</bpt>Kill<ept id="p2">**</ept> to stop the topology.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Storm topologies continue to run until they are deactivated, or the cluster is deleted.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Storm topologies continue to run until they are deactivated, or the cluster is deleted.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Transactional topology</source>
          <target state="new">Transactional topology</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The previous topology is non-transactional.</source>
          <target state="new">The previous topology is non-transactional.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The components within the topology do not implement any functionality for replaying messages if processing fails by a component in the topology.</source>
          <target state="new">The components within the topology do not implement any functionality for replaying messages if processing fails by a component in the topology.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For an example transactional topology, create a new project and select <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> as the project type.</source>
          <target state="new">For an example transactional topology, create a new project and select <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> as the project type.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Transactional topologies implement the following to support replay of data:</source>
          <target state="new">Transactional topologies implement the following to support replay of data:</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Metadata caching<ept id="p1">**</ept>: The spout must store metadata about the data emitted so that the data can be retrieved and emitted again if a failure occurs.</source>
          <target state="new"><bpt id="p1">**</bpt>Metadata caching<ept id="p1">**</ept>: The spout must store metadata about the data emitted so that the data can be retrieved and emitted again if a failure occurs.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Because the data emitted by the sample is small, the raw data for each tuple is stored in a dictionary for replay.</source>
          <target state="new">Because the data emitted by the sample is small, the raw data for each tuple is stored in a dictionary for replay.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ack<ept id="p1">**</ept>: Each bolt in the topology can call <ph id="ph1">`this.ctx.Ack(tuple)`</ph> to ack that it has successfully processed a tuple.</source>
          <target state="new"><bpt id="p1">**</bpt>Ack<ept id="p1">**</ept>: Each bolt in the topology can call <ph id="ph1">`this.ctx.Ack(tuple)`</ph> to ack that it has successfully processed a tuple.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When all bolts have acked the tuple, the <ph id="ph1">`Ack`</ph> method of the spout is invoked.</source>
          <target state="new">When all bolts have acked the tuple, the <ph id="ph1">`Ack`</ph> method of the spout is invoked.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This allows the spout to remove cached data for replay because the data was completely processed.</source>
          <target state="new">This allows the spout to remove cached data for replay because the data was completely processed.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept>: Each bolt can call <ph id="ph1">`this.ctx.Fail(tuple)`</ph> to indicate that processing has failed for a tuple.</source>
          <target state="new"><bpt id="p1">**</bpt>Fail<ept id="p1">**</ept>: Each bolt can call <ph id="ph1">`this.ctx.Fail(tuple)`</ph> to indicate that processing has failed for a tuple.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The failure propagates to the <ph id="ph1">`Fail`</ph> method of the spout, where the tuple can be replayed by using cached metadata.</source>
          <target state="new">The failure propagates to the <ph id="ph1">`Fail`</ph> method of the spout, where the tuple can be replayed by using cached metadata.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sequence ID<ept id="p1">**</ept>: When emitting a tuple, a sequence ID can be specified.</source>
          <target state="new"><bpt id="p1">**</bpt>Sequence ID<ept id="p1">**</ept>: When emitting a tuple, a sequence ID can be specified.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This should be a value that identifies the tuple for replay (Ack and Fail) processing.</source>
          <target state="new">This should be a value that identifies the tuple for replay (Ack and Fail) processing.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, the spout in the <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> project uses the following when emitting data:</source>
          <target state="new">For example, the spout in the <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> project uses the following when emitting data:</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This emits a new tuple that contains a sentence to the default stream, with the sequence ID value contained in <bpt id="p1">**</bpt>lastSeqId<ept id="p1">**</ept>.</source>
          <target state="new">This emits a new tuple that contains a sentence to the default stream, with the sequence ID value contained in <bpt id="p1">**</bpt>lastSeqId<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For this example, <bpt id="p1">**</bpt>lastSeqId<ept id="p1">**</ept> is simply incremented for every tuple emitted.</source>
          <target state="new">For this example, <bpt id="p1">**</bpt>lastSeqId<ept id="p1">**</ept> is simply incremented for every tuple emitted.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>As demonstrated in the <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> project, whether a component is transactional can be set at run time, based on configuration.</source>
          <target state="new">As demonstrated in the <bpt id="p1">**</bpt>Storm Sample<ept id="p1">**</ept> project, whether a component is transactional can be set at run time, based on configuration.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Hybrid topology</source>
          <target state="new">Hybrid topology</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>HDInsight tools for Visual Studio can also be used to create hybrid topologies, where some components are C# and others are Java.</source>
          <target state="new">HDInsight tools for Visual Studio can also be used to create hybrid topologies, where some components are C# and others are Java.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For an example hybrid topology, create a new project, and select <bpt id="p1">**</bpt>Storm Hybrid Sample<ept id="p1">**</ept>.</source>
          <target state="new">For an example hybrid topology, create a new project, and select <bpt id="p1">**</bpt>Storm Hybrid Sample<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This creates a fully commented sample that contains several topologies that demonstrate the following:</source>
          <target state="new">This creates a fully commented sample that contains several topologies that demonstrate the following:</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Java spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>C# bolt<ept id="p2">**</ept>: Defined in <bpt id="p3">**</bpt>HybridTopology_javaSpout_csharpBolt<ept id="p3">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Java spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>C# bolt<ept id="p2">**</ept>: Defined in <bpt id="p3">**</bpt>HybridTopology_javaSpout_csharpBolt<ept id="p3">**</ept></target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A transactional version is defined in <bpt id="p1">**</bpt>HybridTopologyTx_javaSpout_csharpBolt<ept id="p1">**</ept></source>
          <target state="new">A transactional version is defined in <bpt id="p1">**</bpt>HybridTopologyTx_javaSpout_csharpBolt<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>C# spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Java bolt<ept id="p2">**</ept>: Defined in <bpt id="p3">**</bpt>HybridTopology_csharpSpout_javaBolt<ept id="p3">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>C# spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Java bolt<ept id="p2">**</ept>: Defined in <bpt id="p3">**</bpt>HybridTopology_csharpSpout_javaBolt<ept id="p3">**</ept></target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A transactional version is defined in <bpt id="p1">**</bpt>HybridTopologyTx_csharpSpout_javaBolt<ept id="p1">**</ept></source>
          <target state="new">A transactional version is defined in <bpt id="p1">**</bpt>HybridTopologyTx_csharpSpout_javaBolt<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This version also demonstrates how to use Clojure code from a text file as a Java component.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This version also demonstrates how to use Clojure code from a text file as a Java component.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To switch between the topology that is used when the project is submitted, simply move the <ph id="ph1">`[Active(true)]`</ph> statement to the topology you want to use before submitting it to the cluster.</source>
          <target state="new">To switch between the topology that is used when the project is submitted, simply move the <ph id="ph1">`[Active(true)]`</ph> statement to the topology you want to use before submitting it to the cluster.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> All the Java files that are required are provided as part of this project in the <bpt id="p1">**</bpt>JavaDependency<ept id="p1">**</ept> folder.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> All the Java files that are required are provided as part of this project in the <bpt id="p1">**</bpt>JavaDependency<ept id="p1">**</ept> folder.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Consider the following when creating and submitting a hybrid topology:</source>
          <target state="new">Consider the following when creating and submitting a hybrid topology:</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JavaComponentConstructor<ept id="p1">**</ept> must be used to create a new instance of the Java class for a spout or bolt.</source>
          <target state="new"><bpt id="p1">**</bpt>JavaComponentConstructor<ept id="p1">**</ept> must be used to create a new instance of the Java class for a spout or bolt.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer<ept id="p1">**</ept> should be used to serialize data in to or out of Java components from Java objects to JSON.</source>
          <target state="new"><bpt id="p1">**</bpt>microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer<ept id="p1">**</ept> should be used to serialize data in to or out of Java components from Java objects to JSON.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>When submitting the topology to the server, you must use the <bpt id="p1">**</bpt>Additional configurations<ept id="p1">**</ept> option to specify the <bpt id="p2">**</bpt>Java File paths<ept id="p2">**</ept>.</source>
          <target state="new">When submitting the topology to the server, you must use the <bpt id="p1">**</bpt>Additional configurations<ept id="p1">**</ept> option to specify the <bpt id="p2">**</bpt>Java File paths<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The path specified should be the directory that contains the JAR files that contain your Java classes.</source>
          <target state="new">The path specified should be the directory that contains the JAR files that contain your Java classes.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs</source>
          <target state="new">Azure Event Hubs</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>SCP.Net version 0.9.4.203 introduces a new class and method specifically for working with the Event Hub Spout (a Java spout that reads from Event Hub.) When creating a topology that uses this spout, use the following methods:</source>
          <target state="new">SCP.Net version 0.9.4.203 introduces a new class and method specifically for working with the Event Hub Spout (a Java spout that reads from Event Hub.) When creating a topology that uses this spout, use the following methods:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EventHubSpoutConfig<ept id="p1">**</ept> class: creates an object that contains the configuration for the spout component</source>
          <target state="new"><bpt id="p1">**</bpt>EventHubSpoutConfig<ept id="p1">**</ept> class: creates an object that contains the configuration for the spout component</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TopologyBuilder.SetEventHubSpout<ept id="p1">**</ept> method: adds the Event Hub Spout component to the topology</source>
          <target state="new"><bpt id="p1">**</bpt>TopologyBuilder.SetEventHubSpout<ept id="p1">**</ept> method: adds the Event Hub Spout component to the topology</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> While these make it easier to work with the Event Hub Spout than other Java components, you must still use the CustomizedInteropJSONSerializer to serialize data produced by the spout.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> While these make it easier to work with the Event Hub Spout than other Java components, you must still use the CustomizedInteropJSONSerializer to serialize data produced by the spout.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>How to update SCP.NET</source>
          <target state="new">How to update SCP.NET</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Recent releases of SCP.NET support package upgrade through NuGet.</source>
          <target state="new">Recent releases of SCP.NET support package upgrade through NuGet.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>When a new update is available, you will receive an upgrade notification.</source>
          <target state="new">When a new update is available, you will receive an upgrade notification.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To manually check for an upgrade, perform these steps:</source>
          <target state="new">To manually check for an upgrade, perform these steps:</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>From the package manager, select <bpt id="p1">**</bpt>Updates<ept id="p1">**</ept>.</source>
          <target state="new">From the package manager, select <bpt id="p1">**</bpt>Updates<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If an update is available, it will be listed.</source>
          <target state="new">If an update is available, it will be listed.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> button for the package to install it.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> button for the package to install it.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> If your project was created with one of the earlier versions of SCP.NET that did not use NuGet for package updates, you must perform the following steps to update to the new version:</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> If your project was created with one of the earlier versions of SCP.NET that did not use NuGet for package updates, you must perform the following steps to update to the new version:</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project and select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> field, search for, and then add, <bpt id="p2">**</bpt>Microsoft.SCP.Net.SDK<ept id="p2">**</ept> to the project.</source>
          <target state="new">Using the <bpt id="p1">**</bpt>Search<ept id="p1">**</ept> field, search for, and then add, <bpt id="p2">**</bpt>Microsoft.SCP.Net.SDK<ept id="p2">**</ept> to the project.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="new">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Test a topology locally</source>
          <target state="new">Test a topology locally</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Although it is easy to deploy a topology to a cluster, in some cases, you may need to test a topology locally.</source>
          <target state="new">Although it is easy to deploy a topology to a cluster, in some cases, you may need to test a topology locally.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Use the following steps to run and test the example topology in this tutorial locally in your development environment.</source>
          <target state="new">Use the following steps to run and test the example topology in this tutorial locally in your development environment.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.WARNING]</ph> Local testing only works for basic, C# only topologies.</source>
          <target state="new"><ph id="ph1">[AZURE.WARNING]</ph> Local testing only works for basic, C# only topologies.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You should not use local testing for hybrid topologies or topologies that use multiple streams, as you will receive errors.</source>
          <target state="new">You should not use local testing for hybrid topologies or topologies that use multiple streams, as you will receive errors.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, and select <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, and select <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In the project properties, change the <bpt id="p1">**</bpt>Output type<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Console Application<ept id="p2">**</ept>.</source>
          <target state="new">In the project properties, change the <bpt id="p1">**</bpt>Output type<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Console Application<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>output type</source>
          <target state="new">output type</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Remember to change the <bpt id="p1">**</bpt>Output type<ept id="p1">**</ept> back to <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> before you deploy the topology to a cluster.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Remember to change the <bpt id="p1">**</bpt>Output type<ept id="p1">**</ept> back to <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> before you deploy the topology to a cluster.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, then select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>New Item<ept id="p3">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the project, then select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>New Item<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> and enter <bpt id="p2">**</bpt>LocalTest.cs<ept id="p2">**</ept> as the class name.</source>
          <target state="new">Select <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> and enter <bpt id="p2">**</bpt>LocalTest.cs<ept id="p2">**</ept> as the class name.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Finally, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
          <target state="new">Finally, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>LocalTest.cs<ept id="p1">**</ept> and add the following <bpt id="p2">**</bpt>using<ept id="p2">**</ept> statement at the top:</source>
          <target state="new">Open <bpt id="p1">**</bpt>LocalTest.cs<ept id="p1">**</ept> and add the following <bpt id="p2">**</bpt>using<ept id="p2">**</ept> statement at the top:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Use the following as the contents of the <bpt id="p1">**</bpt>LocalTest<ept id="p1">**</ept> class:</source>
          <target state="new">Use the following as the contents of the <bpt id="p1">**</bpt>LocalTest<ept id="p1">**</ept> class:</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the code comments.</source>
          <target state="new">Take a moment to read through the code comments.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This code uses <bpt id="p1">**</bpt>LocalContext<ept id="p1">**</ept> to run the components in the development environment, and it persists the data stream between components to text files on the local drive.</source>
          <target state="new">This code uses <bpt id="p1">**</bpt>LocalContext<ept id="p1">**</ept> to run the components in the development environment, and it persists the data stream between components to text files on the local drive.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> and add the following to the <bpt id="p2">**</bpt>Main<ept id="p2">**</ept> method:</source>
          <target state="new">Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> and add the following to the <bpt id="p2">**</bpt>Main<ept id="p2">**</ept> method:</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Save the changes, then click <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or select <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Start Debugging<ept id="p3">**</ept> to start the project.</source>
          <target state="new">Save the changes, then click <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> or select <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Start Debugging<ept id="p3">**</ept> to start the project.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A console window should appear, and log status as the tests progress.</source>
          <target state="new">A console window should appear, and log status as the tests progress.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>Tests finished<ept id="p1">**</ept> appears, press any key to close the window.</source>
          <target state="new">When <bpt id="p1">**</bpt>Tests finished<ept id="p1">**</ept> appears, press any key to close the window.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>Windows Explorer<ept id="p1">**</ept> to locate the directory that contains your project, for example, <bpt id="p2">**</bpt>C:\Users\&lt;your_user_name&gt;\Documents\Visual Studio 2013\Projects\WordCount\WordCount<ept id="p2">**</ept>.</source>
          <target state="new">Use <bpt id="p1">**</bpt>Windows Explorer<ept id="p1">**</ept> to locate the directory that contains your project, for example, <bpt id="p2">**</bpt>C:\Users\&lt;your_user_name&gt;\Documents\Visual Studio 2013\Projects\WordCount\WordCount<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In this directory, open <bpt id="p1">**</bpt>Bin<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept>.</source>
          <target state="new">In this directory, open <bpt id="p1">**</bpt>Bin<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You should see the text files that were produced when the tests ran: sentences.txt, counter.txt, and splitter.txt.</source>
          <target state="new">You should see the text files that were produced when the tests ran: sentences.txt, counter.txt, and splitter.txt.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Open each text file and inspect the data.</source>
          <target state="new">Open each text file and inspect the data.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> String data is persisted as an array of decimal values in these files.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> String data is persisted as an array of decimal values in these files.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For example, \[[97,103,111]] in the <bpt id="p1">**</bpt>splitter.txt<ept id="p1">**</ept> file is the word 'and'.</source>
          <target state="new">For example, \[[97,103,111]] in the <bpt id="p1">**</bpt>splitter.txt<ept id="p1">**</ept> file is the word 'and'.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Although testing a basic word count application locally is pretty trivial, the real value comes when you have a complex topology that communicates with external data sources or performs complex data analysis.</source>
          <target state="new">Although testing a basic word count application locally is pretty trivial, the real value comes when you have a complex topology that communicates with external data sources or performs complex data analysis.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>When you are working on such a project, you may need to set breakpoints and step through the code in your components to isolate issues.</source>
          <target state="new">When you are working on such a project, you may need to set breakpoints and step through the code in your components to isolate issues.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Be sure to set the <bpt id="p1">**</bpt>Project type<ept id="p1">**</ept> back to <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> before deploying to a Storm on HDInsight cluster.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Be sure to set the <bpt id="p1">**</bpt>Project type<ept id="p1">**</ept> back to <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> before deploying to a Storm on HDInsight cluster.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Log information</source>
          <target state="new">Log information</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>You can easily log information from your topology components by using <ph id="ph1">`Context.Logger`</ph>.</source>
          <target state="new">You can easily log information from your topology components by using <ph id="ph1">`Context.Logger`</ph>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>For example, the following will create an informational log entry:</source>
          <target state="new">For example, the following will create an informational log entry:</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Logged information can be viewed from the <bpt id="p1">**</bpt>Hadoop Service Log<ept id="p1">**</ept>, which is found in <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>.</source>
          <target state="new">Logged information can be viewed from the <bpt id="p1">**</bpt>Hadoop Service Log<ept id="p1">**</ept>, which is found in <bpt id="p2">**</bpt>Server Explorer<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Expand the entry for your Storm on HDInsight cluster, then expand <bpt id="p1">**</bpt>Hadoop Service Log<ept id="p1">**</ept>.</source>
          <target state="new">Expand the entry for your Storm on HDInsight cluster, then expand <bpt id="p1">**</bpt>Hadoop Service Log<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Finally, select the log file to view.</source>
          <target state="new">Finally, select the log file to view.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The logs are stored in the Azure Storage account that is used by your cluster.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The logs are stored in the Azure Storage account that is used by your cluster.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If this is a different subscription than the one you are logged in to with Visual Studio, you need to log in to the subscription that contains the storage account to view this information.</source>
          <target state="new">If this is a different subscription than the one you are logged in to with Visual Studio, you need to log in to the subscription that contains the storage account to view this information.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>View error information</source>
          <target state="new">View error information</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>To view errors that have occurred in a running topology, use the following steps:</source>
          <target state="new">To view errors that have occurred in a running topology, use the following steps:</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>From <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>, right-click the Storm on HDInsight cluster, and select <bpt id="p2">**</bpt>View Storm topologies<ept id="p2">**</ept>.</source>
          <target state="new">From <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>, right-click the Storm on HDInsight cluster, and select <bpt id="p2">**</bpt>View Storm topologies<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">**</bpt>Spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Bolts<ept id="p2">**</ept>, the <bpt id="p3">**</bpt>Last Error<ept id="p3">**</ept> column will have information on the last error that has occurred.</source>
          <target state="new">For the <bpt id="p1">**</bpt>Spout<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Bolts<ept id="p2">**</ept>, the <bpt id="p3">**</bpt>Last Error<ept id="p3">**</ept> column will have information on the last error that has occurred.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Spout Id<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Bolt Id<ept id="p2">**</ept> for the component that has an error listed.</source>
          <target state="new">Select the <bpt id="p1">**</bpt>Spout Id<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Bolt Id<ept id="p2">**</ept> for the component that has an error listed.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>On the details page that is displayed, additional error information will be listed in the <bpt id="p1">**</bpt>Errors<ept id="p1">**</ept> section at the bottom of the page.</source>
          <target state="new">On the details page that is displayed, additional error information will be listed in the <bpt id="p1">**</bpt>Errors<ept id="p1">**</ept> section at the bottom of the page.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To obtain more information, select a <bpt id="p1">**</bpt>Port<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Executors<ept id="p2">**</ept> section of the page to see the Storm worker log for the last few minutes.</source>
          <target state="new">To obtain more information, select a <bpt id="p1">**</bpt>Port<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Executors<ept id="p2">**</ept> section of the page to see the Storm worker log for the last few minutes.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Now that you have learned how to develop and deploy Storm topologies from the HDInsight tools for Visual Studio, learn how to <bpt id="p1">[</bpt>Process events from Azure Event Hub with Storm on HDInsight<ept id="p1">](hdinsight-storm-develop-csharp-event-hub-topology.md)</ept>.</source>
          <target state="new">Now that you have learned how to develop and deploy Storm topologies from the HDInsight tools for Visual Studio, learn how to <bpt id="p1">[</bpt>Process events from Azure Event Hub with Storm on HDInsight<ept id="p1">](hdinsight-storm-develop-csharp-event-hub-topology.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For an example of a C# topology that splits stream data into multiple streams, see <bpt id="p1">[</bpt>C# Storm example<ept id="p1">](https://github.com/Blackmist/csharp-storm-example)</ept>.</source>
          <target state="new">For an example of a C# topology that splits stream data into multiple streams, see <bpt id="p1">[</bpt>C# Storm example<ept id="p1">](https://github.com/Blackmist/csharp-storm-example)</ept>.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>To discover more information about creating C# topologies, visit <bpt id="p1">[</bpt>SCP.NET GettingStarted.md<ept id="p1">](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md)</ept>.</source>
          <target state="new">To discover more information about creating C# topologies, visit <bpt id="p1">[</bpt>SCP.NET GettingStarted.md<ept id="p1">](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more ways to work with HDInsight and more Storm on HDinsight samples, see the following:</source>
          <target state="new">For more ways to work with HDInsight and more Storm on HDinsight samples, see the following:</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Apache Storm on HDInsight</source>
          <target state="new">Apache Storm on HDInsight</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Deploy and monitor topologies with Apache Storm on HDInsight</source>
          <target state="new">Deploy and monitor topologies with Apache Storm on HDInsight</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Example topologies for Storm on HDInsight</source>
          <target state="new">Example topologies for Storm on HDInsight</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Apache Hadoop on HDInsight</source>
          <target state="new">Apache Hadoop on HDInsight</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Use Hive with Hadoop on HDInsight</source>
          <target state="new">Use Hive with Hadoop on HDInsight</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Use Pig with Hadoop on HDInsight</source>
          <target state="new">Use Pig with Hadoop on HDInsight</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Use MapReduce with Hadoop on HDInsight</source>
          <target state="new">Use MapReduce with Hadoop on HDInsight</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Apache HBase on HDInsight</source>
          <target state="new">Apache HBase on HDInsight</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Getting started with HBase on HDInsight</source>
          <target state="new">Getting started with HBase on HDInsight</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd2e4fca1e15b2a5a0ad0aedc319ee00123648c7</xliffext:olfilehash>
  </header>
</xliff>