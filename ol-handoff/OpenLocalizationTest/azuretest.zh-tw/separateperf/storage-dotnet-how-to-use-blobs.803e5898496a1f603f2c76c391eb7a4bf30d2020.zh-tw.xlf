<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Blob storage from .NET | Microsoft Azure</source>
          <target state="new">How to use Blob storage from .NET | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about Azure Blob storage, and how to create a container and to upload, download, list, and delete blob content.</source>
          <target state="new">Learn about Azure Blob storage, and how to create a container and to upload, download, list, and delete blob content.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use Blob storage from .NET</source>
          <target state="new">How to use Blob storage from .NET</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will demonstrate how to perform common scenarios using the</source>
          <target state="new">This guide will demonstrate how to perform common scenarios using the</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure Blob storage service.</source>
          <target state="new">Azure Blob storage service.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The samples are written in C\# and</source>
          <target state="new">The samples are written in C\# and</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>use the Azure Storage Client Library for .NET.</source>
          <target state="new">use the Azure Storage Client Library for .NET.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The scenarios covered include</source>
          <target state="new">The scenarios covered include</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>uploading<ept id="p1">**</ept>, <bpt id="p2">**</bpt>listing<ept id="p2">**</ept>, <bpt id="p3">**</bpt>downloading<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>deleting<ept id="p4">**</ept> blobs.</source>
          <target state="new"><bpt id="p1">**</bpt>uploading<ept id="p1">**</ept>, <bpt id="p2">**</bpt>listing<ept id="p2">**</ept>, <bpt id="p3">**</bpt>downloading<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>deleting<ept id="p4">**</ept> blobs.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Programmatically access Blob storage</source>
          <target state="new">Programmatically access Blob storage</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Namespace declarations</source>
          <target state="new">Namespace declarations</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following namespace declarations to the top of any C\# file</source>
          <target state="new">Add the following namespace declarations to the top of any C\# file</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>in which you wish to programmatically access Azure Storage:</source>
          <target state="new">in which you wish to programmatically access Azure Storage:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make sure you reference the <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly.</source>
          <target state="new">Make sure you reference the <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> type allows you to retrieve objects that represent</source>
          <target state="new">A <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> type allows you to retrieve objects that represent</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>containers and blobs stored within the Blob Storage Service.</source>
          <target state="new">containers and blobs stored within the Blob Storage Service.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>following code creates a <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> object using the storage</source>
          <target state="new">following code creates a <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> object using the storage</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>account object we retrieved above:</source>
          <target state="new">account object we retrieved above:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a container</source>
          <target state="new">Create a container</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example shows how to create a container if it does not already exist:</source>
          <target state="new">This example shows how to create a container if it does not already exist:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, the new container is private and you must specify your</source>
          <target state="new">By default, the new container is private and you must specify your</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>storage access key to download blobs from this</source>
          <target state="new">storage access key to download blobs from this</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>container.</source>
          <target state="new">container.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to make the files within the container available</source>
          <target state="new">If you want to make the files within the container available</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>to everyone, you can set the container to be public using the following</source>
          <target state="new">to everyone, you can set the container to be public using the following</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>code:</source>
          <target state="new">code:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Anyone on the Internet can see blobs in a public container, but you can</source>
          <target state="new">Anyone on the Internet can see blobs in a public container, but you can</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>modify or delete them only if you have the appropriate access key.</source>
          <target state="new">modify or delete them only if you have the appropriate access key.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Upload a blob into a container</source>
          <target state="new">Upload a blob into a container</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Azure Blob Storage supports block blobs and page blobs.</source>
          <target state="new">Azure Blob Storage supports block blobs and page blobs.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the majority of cases, block blob is the recommended type to use.</source>
          <target state="new">In the majority of cases, block blob is the recommended type to use.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To upload a file to a block blob, get a container reference and use it to get</source>
          <target state="new">To upload a file to a block blob, get a container reference and use it to get</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>a block blob reference.</source>
          <target state="new">a block blob reference.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Once you have a blob reference, you can upload any</source>
          <target state="new">Once you have a blob reference, you can upload any</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>stream of data to it by calling the <bpt id="p1">**</bpt>UploadFromStream<ept id="p1">**</ept> method.</source>
          <target state="new">stream of data to it by calling the <bpt id="p1">**</bpt>UploadFromStream<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This operation will create the blob if it didn't previously exist,</source>
          <target state="new">This operation will create the blob if it didn't previously exist,</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>or overwrite it if it does exist.</source>
          <target state="new">or overwrite it if it does exist.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example shows how to upload a blob into a container and assumes that the container was already created.</source>
          <target state="new">The following example shows how to upload a blob into a container and assumes that the container was already created.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>List the blobs in a container</source>
          <target state="new">List the blobs in a container</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To list the blobs in a container, first get a container reference.</source>
          <target state="new">To list the blobs in a container, first get a container reference.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You</source>
          <target state="new">You</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>can then use the container's <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> method to retrieve the blobs and/or directories</source>
          <target state="new">can then use the container's <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> method to retrieve the blobs and/or directories</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>within it.</source>
          <target state="new">within it.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To access the rich set of properties and methods for a</source>
          <target state="new">To access the rich set of properties and methods for a</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>returned <bpt id="p1">**</bpt>IListBlobItem<ept id="p1">**</ept>, you must cast it to a <bpt id="p2">**</bpt>CloudBlockBlob<ept id="p2">**</ept>,</source>
          <target state="new">returned <bpt id="p1">**</bpt>IListBlobItem<ept id="p1">**</ept>, you must cast it to a <bpt id="p2">**</bpt>CloudBlockBlob<ept id="p2">**</ept>,</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudPageBlob<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> object.</source>
          <target state="new"><bpt id="p1">**</bpt>CloudPageBlob<ept id="p1">**</ept>, or <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the type is unknown, you can use a</source>
          <target state="new">If the type is unknown, you can use a</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>type check to determine which to cast it to.</source>
          <target state="new">type check to determine which to cast it to.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code</source>
          <target state="new">The following code</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>demonstrates how to retrieve and output the URI of each item in</source>
          <target state="new">demonstrates how to retrieve and output the URI of each item in</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>the <ph id="ph1">`photos`</ph> container:</source>
          <target state="new">the <ph id="ph1">`photos`</ph> container:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As shown above, you can name blobs with path information in their names.</source>
          <target state="new">As shown above, you can name blobs with path information in their names.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This creates a virtual directory structure that you can organize and traverse as you would a traditional file system.</source>
          <target state="new">This creates a virtual directory structure that you can organize and traverse as you would a traditional file system.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that the directory structure is virtual only - the only resources available in Blob storage are containers and blobs.</source>
          <target state="new">Note that the directory structure is virtual only - the only resources available in Blob storage are containers and blobs.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>However, the storage client library offers a <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> object to refer to a virtual directory and simplify the process of working with blobs that are organized in this way.</source>
          <target state="new">However, the storage client library offers a <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> object to refer to a virtual directory and simplify the process of working with blobs that are organized in this way.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, consider the following set of block blobs in a container named <ph id="ph1">`photos`</ph>:</source>
          <target state="new">For example, consider the following set of block blobs in a container named <ph id="ph1">`photos`</ph>:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> on the 'photos' container (as in the above sample), a hierarchical listing is returned.</source>
          <target state="new">When you call <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> on the 'photos' container (as in the above sample), a hierarchical listing is returned.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It contains both <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CloudBlockBlob<ept id="p2">**</ept> objects, representing the directories and blobs in the container, respectively.</source>
          <target state="new">It contains both <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CloudBlockBlob<ept id="p2">**</ept> objects, representing the directories and blobs in the container, respectively.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The resulting output looks like:</source>
          <target state="new">The resulting output looks like:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Optionally, you can set the <bpt id="p1">**</bpt>UseFlatBlobListing<ept id="p1">**</ept> parameter of of the <bpt id="p2">**</bpt>ListBlobs<ept id="p2">**</ept> method to</source>
          <target state="new">Optionally, you can set the <bpt id="p1">**</bpt>UseFlatBlobListing<ept id="p1">**</ept> parameter of of the <bpt id="p2">**</bpt>ListBlobs<ept id="p2">**</ept> method to</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>true<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this case, every blob in the container is returned as a <bpt id="p1">**</bpt>CloudBlockBlob<ept id="p1">**</ept> object.</source>
          <target state="new">In this case, every blob in the container is returned as a <bpt id="p1">**</bpt>CloudBlockBlob<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> to return a flat listing looks like this:</source>
          <target state="new">The call to <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> to return a flat listing looks like this:</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>and the results look like this:</source>
          <target state="new">and the results look like this:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Download blobs</source>
          <target state="new">Download blobs</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To download blobs, first retrieve a blob reference and then call the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method.</source>
          <target state="new">To download blobs, first retrieve a blob reference and then call the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following</source>
          <target state="new">The following</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>example uses the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method to transfer the blob</source>
          <target state="new">example uses the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method to transfer the blob</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>contents to a stream object that you can then persist to a local file.</source>
          <target state="new">contents to a stream object that you can then persist to a local file.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method to download the contents of a blob as a text string.</source>
          <target state="new">You can also use the <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> method to download the contents of a blob as a text string.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Delete blobs</source>
          <target state="new">Delete blobs</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To delete a blob, first get a blob reference and then call the</source>
          <target state="new">To delete a blob, first get a blob reference and then call the</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> method on it.</source>
          <target state="new"><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> method on it.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>List blobs in pages asynchronously</source>
          <target state="new">List blobs in pages asynchronously</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results.</source>
          <target state="new">If you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.</source>
          <target state="new">This example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the <ph id="ph1">`useFlatBlobListing`</ph> parameter of the <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> method to <ph id="ph2">`false`</ph>.</source>
          <target state="new">This example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the <ph id="ph1">`useFlatBlobListing`</ph> parameter of the <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> method to <ph id="ph2">`false`</ph>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Because the sample method calls an asynchronous method, it must be prefaced with the <ph id="ph1">`async`</ph> keyword, and it must return a <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> object.</source>
          <target state="new">Because the sample method calls an asynchronous method, it must be prefaced with the <ph id="ph1">`async`</ph> keyword, and it must return a <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The await keyword specified for the <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> method suspends execution of the sample method until the listing task completes.</source>
          <target state="new">The await keyword specified for the <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> method suspends execution of the sample method until the listing task completes.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Writing to an append blob</source>
          <target state="new">Writing to an append blob</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An append blob is a new type of blob, introduced with version 5.x of the Azure storage client library for .NET.</source>
          <target state="new">An append blob is a new type of blob, introduced with version 5.x of the Azure storage client library for .NET.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An append blob is optimized for append operations, such as logging.</source>
          <target state="new">An append blob is optimized for append operations, such as logging.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Like a block blob, an append blob is comprised of blocks, but when you add a new block to an append blob, it is always appended to the end of the blob.</source>
          <target state="new">Like a block blob, an append blob is comprised of blocks, but when you add a new block to an append blob, it is always appended to the end of the blob.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You cannot update or delete an existing block in an append blob.</source>
          <target state="new">You cannot update or delete an existing block in an append blob.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The block IDs for an append blob are not exposed as they are for a block blob.</source>
          <target state="new">The block IDs for an append blob are not exposed as they are for a block blob.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Each block in an append blob can be a different size, up to a maximum of 4 MB, and an append blob can include a maximum of 50,000 blocks.</source>
          <target state="new">Each block in an append blob can be a different size, up to a maximum of 4 MB, and an append blob can include a maximum of 50,000 blocks.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The maximum size of an append blob is therefore slightly more than 195 GB (4 MB X 50,000 blocks).</source>
          <target state="new">The maximum size of an append blob is therefore slightly more than 195 GB (4 MB X 50,000 blocks).</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The example below creates a new append blob and appends some data to it, simulating a simple logging operation.</source>
          <target state="new">The example below creates a new append blob and appends some data to it, simulating a simple logging operation.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Understanding Block Blobs, Page Blobs, and Append Blobs<ept id="p1">](https://msdn.microsoft.com/library/azure/ee691964.aspx)</ept> for more information about the differences between the three types of blobs.</source>
          <target state="new">See <bpt id="p1">[</bpt>Understanding Block Blobs, Page Blobs, and Append Blobs<ept id="p1">](https://msdn.microsoft.com/library/azure/ee691964.aspx)</ept> for more information about the differences between the three types of blobs.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of blob storage, follow these links</source>
          <target state="new">Now that you've learned the basics of blob storage, follow these links</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>to learn about more complex storage tasks.</source>
          <target state="new">to learn about more complex storage tasks.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>View the Blob service reference documentation for complete details about available APIs:</source>
          <target state="new">View the Blob service reference documentation for complete details about available APIs:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Storage Client Library for .NET reference<ph id="ph1">&lt;/a&gt;</ph><ph id="ph2">
    </ph></source>
          <target state="new">Storage Client Library for .NET reference<ph id="ph1">&lt;/a&gt;</ph><ph id="ph2">
    </ph></target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>REST API reference</source>
          <target state="new">REST API reference</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Learn about more advanced tasks you can perform with Azure Storage at <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/azure/gg433040.aspx"&gt;</ph>Storing and Accessing Data in Azure<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">Learn about more advanced tasks you can perform with Azure Storage at <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/azure/gg433040.aspx"&gt;</ph>Storing and Accessing Data in Azure<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Learn how to simplify the code you write to work with Azure Storage by using the <ph id="ph1">&lt;a href="../websites-dotnet-webjobs-sdk/"&gt;</ph>Azure WebJobs SDK.</source>
          <target state="new">Learn how to simplify the code you write to work with Azure Storage by using the <ph id="ph1">&lt;a href="../websites-dotnet-webjobs-sdk/"&gt;</ph>Azure WebJobs SDK.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>View more feature guides to learn about additional options for storing data in Azure.</source>
          <target state="new">View more feature guides to learn about additional options for storing data in Azure.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-tables/"&gt;</ph>Table Storage<ph id="ph2">&lt;/a&gt;</ph> to store structured data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-tables/"&gt;</ph>Table Storage<ph id="ph2">&lt;/a&gt;</ph> to store structured data.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-queues/"&gt;</ph>Queue Storage<ph id="ph2">&lt;/a&gt;</ph> to store unstructured data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-queues/"&gt;</ph>Queue Storage<ph id="ph2">&lt;/a&gt;</ph> to store unstructured data.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/sql-database-dotnet-how-to-use/"&gt;</ph>SQL Database<ph id="ph2">&lt;/a&gt;</ph> to store relational data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/sql-database-dotnet-how-to-use/"&gt;</ph>SQL Database<ph id="ph2">&lt;/a&gt;</ph> to store relational data.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad4de3c405ffe4ca69386bf5fc6c5ce3a236223f</xliffext:olfilehash>
  </header>
</xliff>