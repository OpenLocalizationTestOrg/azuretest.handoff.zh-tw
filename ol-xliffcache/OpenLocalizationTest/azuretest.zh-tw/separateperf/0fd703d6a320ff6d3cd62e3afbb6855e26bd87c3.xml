{
  "nodes": [
    {
      "content": "Get started with Azure Queue storage and Visual Studio connected services | Microsoft Azure",
      "pos": [
        27,
        118
      ]
    },
    {
      "content": "How to get started using Azure Queue storage in an ASP.NET project in Visual Studio",
      "pos": [
        137,
        220
      ]
    },
    {
      "content": "Get started with Azure Queue storage and Visual Studio connected services",
      "pos": [
        531,
        604
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        608,
        624
      ]
    },
    {
      "content": "Getting Started",
      "pos": [
        630,
        645
      ]
    },
    {
      "content": "What Happened",
      "pos": [
        697,
        710
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        751,
        767
      ]
    },
    {
      "content": "Blobs",
      "pos": [
        773,
        778
      ]
    },
    {
      "content": "Queues",
      "pos": [
        829,
        835
      ]
    },
    {
      "content": "Tables",
      "pos": [
        887,
        893
      ]
    },
    {
      "content": "Overview",
      "pos": [
        944,
        952
      ]
    },
    {
      "pos": [
        954,
        1182
      ],
      "content": "This article describes how get started using Azure Queue storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET project by using the  Visual Studio <bpt id=\"p1\">**</bpt>Add Connected Services<ept id=\"p1\">**</ept> dialog."
    },
    {
      "content": "We'll show you how to create and access an Azure Queue in your storage account.",
      "pos": [
        1184,
        1263
      ]
    },
    {
      "content": "We'll also show you how to perform basic queue operations, such as adding, modifying, reading and removing queue messages.",
      "pos": [
        1264,
        1386
      ]
    },
    {
      "content": "The samples are written in C# code and use the <bpt id=\"p1\">[</bpt>Azure Storage Client Library for .NET<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn261237.aspx)</ept>.",
      "pos": [
        1387,
        1530
      ]
    },
    {
      "content": "For more information about ASP.NET, see <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>.",
      "pos": [
        1531,
        1601
      ]
    },
    {
      "content": "Azure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.",
      "pos": [
        1603,
        1766
      ]
    },
    {
      "content": "A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.",
      "pos": [
        1767,
        1916
      ]
    },
    {
      "content": "Access queues in code",
      "pos": [
        1921,
        1942
      ]
    },
    {
      "content": "To access queues in ASP.NET projects, you need to include the following items to any C# source file that access Azure Queue storage.",
      "pos": [
        1944,
        2076
      ]
    },
    {
      "pos": [
        2081,
        2177
      ],
      "content": "Make sure the namespace declarations at the top of the C# file include these <ph id=\"ph1\">`using`</ph> statements."
    },
    {
      "content": "Get a <ph id=\"ph1\">`CloudStorageAccount`</ph> object that represents your storage account information.",
      "pos": [
        2330,
        2414
      ]
    },
    {
      "content": "Use the following code to get the your storage connection string and storage account information from the Azure service configuration.",
      "pos": [
        2415,
        2549
      ]
    },
    {
      "pos": [
        2733,
        2819
      ],
      "content": "Get a <ph id=\"ph1\">`CloudQueueClient`</ph> object to reference the queueobjects in your storage account."
    },
    {
      "pos": [
        2942,
        2998
      ],
      "content": "Get a <ph id=\"ph1\">`CloudQueue`</ph> object to reference a specific queue."
    },
    {
      "pos": [
        3142,
        3223
      ],
      "content": "<bpt id=\"p1\">**</bpt>NOTE<ept id=\"p1\">**</ept> Use all of the above code in front of the code in the following samples."
    },
    {
      "content": "Create a queue in code",
      "pos": [
        3228,
        3250
      ]
    },
    {
      "pos": [
        3252,
        3343
      ],
      "content": "To create an Azure queue in code, just add a call to <ph id=\"ph1\">`CreateIfNotExists`</ph> to the code above."
    },
    {
      "content": "Add a message to a queue",
      "pos": [
        3443,
        3467
      ]
    },
    {
      "pos": [
        3469,
        3588
      ],
      "content": "To insert a message into an existing queue, create a new <ph id=\"ph1\">`CloudQueueMessage`</ph> object, then call the <ph id=\"ph2\">`AddMessage`</ph> method."
    },
    {
      "pos": [
        3590,
        3689
      ],
      "content": "A <ph id=\"ph1\">`CloudQueueMessage`</ph> object can be created from either a string (in UTF-8 format) or a byte array."
    },
    {
      "content": "Here is an example which inserts the message 'Hello, World'.",
      "pos": [
        3691,
        3751
      ]
    },
    {
      "content": "Read a message in a queue",
      "pos": [
        4026,
        4051
      ]
    },
    {
      "content": "You can peek at the message in the front of a queue without removing it from the queue by calling the PeekMessage() method.",
      "pos": [
        4053,
        4176
      ]
    },
    {
      "content": "Read and remove a message in a queue",
      "pos": [
        4391,
        4427
      ]
    },
    {
      "content": "Your code can remove (de-queue) a message from a queue in two steps.",
      "pos": [
        4429,
        4497
      ]
    },
    {
      "content": "Call GetMessage() to get the next message in a queue.",
      "pos": [
        4501,
        4554
      ]
    },
    {
      "content": "A message returned from GetMessage() becomes invisible to any other code reading messages from this queue.",
      "pos": [
        4555,
        4661
      ]
    },
    {
      "content": "By default, this message stays invisible for 30 seconds.",
      "pos": [
        4662,
        4718
      ]
    },
    {
      "pos": [
        4723,
        4791
      ],
      "content": "To finish removing the message from the queue, call <ph id=\"ph1\">`DeleteMessage`</ph>."
    },
    {
      "content": "This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.",
      "pos": [
        4793,
        4996
      ]
    },
    {
      "content": "The following code calls <ph id=\"ph1\">`DeleteMessage`</ph> right after the message has been processed.",
      "pos": [
        4997,
        5081
      ]
    },
    {
      "content": "Use additional options for de-queuing messages",
      "pos": [
        5450,
        5496
      ]
    },
    {
      "content": "There are two ways you can customize message retrieval from a queue.",
      "pos": [
        5498,
        5566
      ]
    },
    {
      "content": "First, you can get a batch of messages (up to 32).",
      "pos": [
        5567,
        5617
      ]
    },
    {
      "content": "Second, you can set a",
      "pos": [
        5618,
        5639
      ]
    },
    {
      "content": "longer or shorter invisibility timeout, allowing your code more or less",
      "pos": [
        5640,
        5711
      ]
    },
    {
      "content": "time to fully process each message.",
      "pos": [
        5712,
        5747
      ]
    },
    {
      "content": "The following code example uses the",
      "pos": [
        5748,
        5783
      ]
    },
    {
      "content": "<ph id=\"ph1\">`GetMessages`</ph> method to get 20 messages in one call.",
      "pos": [
        5784,
        5836
      ]
    },
    {
      "content": "Then it processes",
      "pos": [
        5837,
        5854
      ]
    },
    {
      "content": "each message using a <ph id=\"ph1\">`foreach`</ph> loop.",
      "pos": [
        5855,
        5891
      ]
    },
    {
      "content": "It also sets the invisibility",
      "pos": [
        5892,
        5921
      ]
    },
    {
      "content": "timeout to five minutes for each message.",
      "pos": [
        5922,
        5963
      ]
    },
    {
      "content": "Note that the 5 minutes starts",
      "pos": [
        5964,
        5994
      ]
    },
    {
      "content": "for all messages at the same time, so after 5 minutes have passed since",
      "pos": [
        5995,
        6066
      ]
    },
    {
      "content": "the call to <ph id=\"ph1\">`GetMessages`</ph>, any messages which have not been deleted",
      "pos": [
        6067,
        6134
      ]
    },
    {
      "content": "will become visible again.",
      "pos": [
        6135,
        6161
      ]
    },
    {
      "content": "Get the queue length",
      "pos": [
        6729,
        6749
      ]
    },
    {
      "content": "You can get an estimate of the number of messages in a queue.",
      "pos": [
        6751,
        6812
      ]
    },
    {
      "content": "The",
      "pos": [
        6813,
        6816
      ]
    },
    {
      "content": "<ph id=\"ph1\">`FetchAttributes`</ph> method asks the queueservice to",
      "pos": [
        6817,
        6866
      ]
    },
    {
      "content": "retrieve the queue attributes, including the message count.",
      "pos": [
        6867,
        6926
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`ApproximateMethodCount`</ph>",
      "pos": [
        6927,
        6955
      ]
    },
    {
      "content": "property returns the last value retrieved by the",
      "pos": [
        6956,
        7004
      ]
    },
    {
      "content": "<ph id=\"ph1\">`FetchAttributes`</ph> method, without calling the queueservice.",
      "pos": [
        7005,
        7064
      ]
    },
    {
      "content": "Use Async-Await pattern with common queueAPIs",
      "pos": [
        7488,
        7533
      ]
    },
    {
      "content": "This example shows how to use the Async-Await pattern with common queueAPIs.",
      "pos": [
        7535,
        7611
      ]
    },
    {
      "content": "The sample calls the async version of each of the given methods, this can be seen by the Async post-fix of each method.",
      "pos": [
        7612,
        7731
      ]
    },
    {
      "content": "When an async method is used the async-await pattern suspends local execution until the call completes.",
      "pos": [
        7732,
        7835
      ]
    },
    {
      "content": "This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application.",
      "pos": [
        7836,
        7995
      ]
    },
    {
      "content": "For more details on using the Async-Await pattern in .NET see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)",
      "pos": [
        7996,
        8148
      ]
    },
    {
      "content": "Delete a queue",
      "pos": [
        8860,
        8874
      ]
    },
    {
      "content": "To delete a queue and all the messages contained in it, call the",
      "pos": [
        8876,
        8940
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Delete`</ph> method on the queue object.",
      "pos": [
        8941,
        8977
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        9148,
        9158
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with Azure Queue storage and Visual Studio connected services | Microsoft Azure\"\n    description=\"How to get started using Azure Queue storage in an ASP.NET project in Visual Studio\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"patshea123\"\n    manager=\"douge\"\n    editor=\"tglee\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"web\"\n    ms.tgt_pltfrm=\"vs-getting-started\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/04/2015\"\n    ms.author=\"patshea123\"/>\n\n# Get started with Azure Queue storage and Visual Studio connected services\n\n> [AZURE.SELECTOR]\n> - [Getting Started](vs-storage-aspnet-getting-started-queues.md)\n> - [What Happened](vs-storage-aspnet-what-happened.md)\n\n> [AZURE.SELECTOR]\n> - [Blobs](vs-storage-aspnet-getting-started-blobs.md)\n> - [Queues](vs-storage-aspnet-getting-started-queues.md)\n> - [Tables](vs-storage-aspnet-getting-started-tables.md)\n\n## Overview\n\nThis article describes how get started using Azure Queue storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET project by using the  Visual Studio **Add Connected Services** dialog.\n\nWe'll show you how to create and access an Azure Queue in your storage account. We'll also show you how to perform basic queue operations, such as adding, modifying, reading and removing queue messages. The samples are written in C# code and use the [Azure Storage Client Library for .NET](https://msdn.microsoft.com/library/azure/dn261237.aspx). For more information about ASP.NET, see [ASP.NET](http://www.asp.net).\n\nAzure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS. A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\n## Access queues in code\n\nTo access queues in ASP.NET projects, you need to include the following items to any C# source file that access Azure Queue storage.\n\n1. Make sure the namespace declarations at the top of the C# file include these `using` statements.\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Queue;\n\n2. Get a `CloudStorageAccount` object that represents your storage account information. Use the following code to get the your storage connection string and storage account information from the Azure service configuration.\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n3. Get a `CloudQueueClient` object to reference the queueobjects in your storage account.  \n\n        // Create the queueclient.\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n4. Get a `CloudQueue` object to reference a specific queue.\n\n        // Get a reference to a queue named \"messageQueue\"\n        CloudQueue messageQueue = queueClient.GetQueueReference(\"messageQueue\");\n\n\n**NOTE** Use all of the above code in front of the code in the following samples.\n\n## Create a queue in code\n\nTo create an Azure queue in code, just add a call to `CreateIfNotExists` to the code above.\n\n    // Create the CloudQuecClient  if it does not exist\n    messageQueue.CreateIfNotExists();\n\n## Add a message to a queue\n\nTo insert a message into an existing queue, create a new `CloudQueueMessage` object, then call the `AddMessage` method.\n\nA `CloudQueueMessage` object can be created from either a string (in UTF-8 format) or a byte array.\n\nHere is an example which inserts the message 'Hello, World'.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Create a message and add it to the queue.\n    CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n    messageQueue.AddMessage(message);\n\n## Read a message in a queue\n\nYou can peek at the message in the front of a queue without removing it from the queue by calling the PeekMessage() method.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Peek at the next message\n    CloudQueueMessage peekedMessage = messageQueue.PeekMessage();\n\n## Read and remove a message in a queue\n\nYour code can remove (de-queue) a message from a queue in two steps.\n1. Call GetMessage() to get the next message in a queue. A message returned from GetMessage() becomes invisible to any other code reading messages from this queue. By default, this message stays invisible for 30 seconds.\n2.  To finish removing the message from the queue, call `DeleteMessage`.\n\nThis two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again. The following code calls `DeleteMessage` right after the message has been processed.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Get the next message in the queue.\n    CloudQueueMessage retrievedMessage = messageQueue.GetMessage();\n\n    // Process the message in less than 30 seconds\n\n    // Then delete the message.\n    await messageQueue.DeleteMessage(retrievedMessage);\n\n\n## Use additional options for de-queuing messages\n\nThere are two ways you can customize message retrieval from a queue.\nFirst, you can get a batch of messages (up to 32). Second, you can set a\nlonger or shorter invisibility timeout, allowing your code more or less\ntime to fully process each message. The following code example uses the\n`GetMessages` method to get 20 messages in one call. Then it processes\neach message using a `foreach` loop. It also sets the invisibility\ntimeout to five minutes for each message. Note that the 5 minutes starts\nfor all messages at the same time, so after 5 minutes have passed since\nthe call to `GetMessages`, any messages which have not been deleted\nwill become visible again.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    foreach (CloudQueueMessage message in queue.GetMessages(20, TimeSpan.FromMinutes(5)))\n    {\n        // Process all messages in less than 5 minutes, deleting each message after processing.\n        queue.DeleteMessage(message);\n    }\n\n## Get the queue length\n\nYou can get an estimate of the number of messages in a queue. The\n`FetchAttributes` method asks the queueservice to\nretrieve the queue attributes, including the message count. The `ApproximateMethodCount`\nproperty returns the last value retrieved by the\n`FetchAttributes` method, without calling the queueservice.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Fetch the queue attributes.\n    messageQueue.FetchAttributes();\n\n    // Retrieve the cached approximate message count.\n    int? cachedMessageCount = messageQueue.ApproximateMessageCount;\n\n    // Display number of messages.\n    Console.WriteLine(\"Number of messages in queue: \" + cachedMessageCount);\n\n## Use Async-Await pattern with common queueAPIs\n\nThis example shows how to use the Async-Await pattern with common queueAPIs. The sample calls the async version of each of the given methods, this can be seen by the Async post-fix of each method. When an async method is used the async-await pattern suspends local execution until the call completes. This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application. For more details on using the Async-Await pattern in .NET see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Create a message to put in the queue\n    CloudQueueMessage cloudQueueMessage = new CloudQueueMessage(\"My message\");\n\n    // Async enqueue the message\n    await messageQueue.AddMessageAsync(cloudQueueMessage);\n    Console.WriteLine(\"Message added\");\n\n    // Async dequeue the message\n    CloudQueueMessage retrievedMessage = await messageQueue.GetMessageAsync();\n    Console.WriteLine(\"Retrieved message with content '{0}'\", retrievedMessage.AsString);\n\n    // Async delete the message\n    await messageQueue.DeleteMessageAsync(retrievedMessage);\n    Console.WriteLine(\"Deleted message\");\n\n## Delete a queue\n\nTo delete a queue and all the messages contained in it, call the\n`Delete` method on the queue object.\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Delete the queue.\n    messageQueue.Delete();\n\n\n\n## Next steps\n\n[AZURE.INCLUDE [vs-storage-dotnet-queues-next-steps](../../includes/vs-storage-dotnet-queues-next-steps.md)]\n"
}