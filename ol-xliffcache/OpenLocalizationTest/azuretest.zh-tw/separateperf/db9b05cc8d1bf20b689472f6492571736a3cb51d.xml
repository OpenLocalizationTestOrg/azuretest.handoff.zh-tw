{
  "nodes": [
    {
      "content": "Configure Content Key Authorization Policy using REST",
      "pos": [
        28,
        81
      ]
    },
    {
      "content": "Learn how to configure an authorization policy for a content key.",
      "pos": [
        101,
        166
      ]
    },
    {
      "content": "Dynamic encryption: Configure Content Key Authorization Policy",
      "pos": [
        478,
        540
      ]
    },
    {
      "content": "Overivew",
      "pos": [
        681,
        689
      ]
    },
    {
      "content": "Microsoft Azure Media Services enables you to deliver your content encrypted (dynamically) with Advanced Encryption Standard (AES) (using 128-bit encryption keys) and PlayReady DRM.",
      "pos": [
        691,
        872
      ]
    },
    {
      "content": "Media Services also provides a service for delivering keys and PlayReady licenses to authorized clients.",
      "pos": [
        873,
        977
      ]
    },
    {
      "pos": [
        980,
        1285
      ],
      "content": "If you want for Media Services to encrypt an asset, you need to associate an encryption key (<bpt id=\"p1\">**</bpt>CommonEncryption<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>EnvelopeEncryption<ept id=\"p2\">**</ept>) with the asset (as described <bpt id=\"p3\">[</bpt>here<ept id=\"p3\">](media-services-rest-create-contentkey.md)</ept>) and also configure authorization policies for the key (as described in this article)."
    },
    {
      "content": "Currently, you can encrypt the following streaming formats: HLS, MPEG DASH, and Smooth Streaming.",
      "pos": [
        1288,
        1385
      ]
    },
    {
      "content": "You cannot encrypt HDS streaming format, or progressive downloads.",
      "pos": [
        1386,
        1452
      ]
    },
    {
      "content": "When a stream is requested by a player, Media Services uses the specified key to dynamically encrypt your content using AES or PlayReady encryption.",
      "pos": [
        1454,
        1602
      ]
    },
    {
      "content": "To decrypt the stream, the player will request the key from the key delivery service.",
      "pos": [
        1603,
        1688
      ]
    },
    {
      "content": "To decide whether or not the user is authorized to get the key, the service evaluates the authorization policies that you specified for the key.",
      "pos": [
        1689,
        1833
      ]
    },
    {
      "content": "Media Services supports multiple ways of authenticating users who make key requests.",
      "pos": [
        1835,
        1919
      ]
    },
    {
      "content": "The content key authorization policy could have one or more authorization restrictions: <bpt id=\"p1\">**</bpt>open<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>token<ept id=\"p2\">**</ept> restriction, or <bpt id=\"p3\">**</bpt>IP<ept id=\"p3\">**</ept> restriction.",
      "pos": [
        1920,
        2063
      ]
    },
    {
      "content": "The token restricted policy must be accompanied by a token issued by a Secure Token Service (STS).",
      "pos": [
        2064,
        2162
      ]
    },
    {
      "content": "Media Services supports tokens in the <bpt id=\"p1\">**</bpt>Simple Web Tokens<ept id=\"p1\">**</ept> (<bpt id=\"p2\">[</bpt>SWT<ept id=\"p2\">](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_2)</ept>) format and **JSON Web Token **(JWT) format.",
      "pos": [
        2163,
        2331
      ]
    },
    {
      "content": "Media Services does not provide Secure Token Services.",
      "pos": [
        2335,
        2389
      ]
    },
    {
      "content": "You can create a custom STS or leverage Microsoft Azure ACS to issue tokens.",
      "pos": [
        2390,
        2466
      ]
    },
    {
      "content": "The STS must be configured to create a token signed with the specified key and issue claims that you specified in the token restriction configuration (as described in this article).",
      "pos": [
        2467,
        2648
      ]
    },
    {
      "content": "The Media Services key delivery service will return the encryption key to the client if the token is valid and the claims in the token match those configured for the content key.",
      "pos": [
        2649,
        2827
      ]
    },
    {
      "content": "For more information, see",
      "pos": [
        2829,
        2854
      ]
    },
    {
      "content": "JWT token authenitcation",
      "pos": [
        2858,
        2882
      ]
    },
    {
      "pos": [
        2995,
        3212
      ],
      "content": "<bpt id=\"p1\">[</bpt>Integrate Azure Media Services OWIN MVC based app with Azure Active Directory and restrict content key delivery based on JWT claims<ept id=\"p1\">](http://www.gtrifonov.com/2015/01/24/mvc-owin-azure-media-services-ad-integration/)</ept>."
    },
    {
      "pos": [
        3214,
        3289
      ],
      "content": "<bpt id=\"p1\">[</bpt>Use Azure ACS to issue tokens<ept id=\"p1\">](http://mingfeiy.com/acs-with-key-services)</ept>."
    },
    {
      "content": "Some considerations apply:",
      "pos": [
        3294,
        3320
      ]
    },
    {
      "content": "To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one  streaming reserved unit.",
      "pos": [
        3324,
        3449
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>How to Scale a Media Service<ept id=\"p1\">](media-services-manage-origins.md#scale_streaming_endpoints)</ept>.",
      "pos": [
        3450,
        3567
      ]
    },
    {
      "content": "Your asset must contain a set of adaptive bitrate MP4s or  adaptive bitrate Smooth Streaming files.",
      "pos": [
        3571,
        3670
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Encode an asset<ept id=\"p1\">](media-services-encode-asset.md)</ept>.",
      "pos": [
        3671,
        3747
      ]
    },
    {
      "pos": [
        3752,
        3837
      ],
      "content": "Upload and encode your assets using <bpt id=\"p1\">**</bpt>AssetCreationOptions.StorageEncrypted<ept id=\"p1\">**</ept> option."
    },
    {
      "content": "If you plan to have multiple content keys that require the same policy configuration, it is strongly recommended to create a single authorization policy and reuse it with multiple content keys.",
      "pos": [
        3840,
        4033
      ]
    },
    {
      "content": "The Key Delivery service caches ContentKeyAuthorizationPolicy and its related objects (policy options and restrictions) for 15 minutes.",
      "pos": [
        4036,
        4171
      ]
    },
    {
      "content": "If you create a ContentKeyAuthorizationPolicy and specify to use a “Token” restriction, then test it, and then update the policy to “Open” restriction, it will take roughly 15 minutes before the policy switches to the “Open” version of the policy.",
      "pos": [
        4173,
        4420
      ]
    },
    {
      "content": "If you add or update your asset’s delivery policy, you must delete an existing locator (if any) and create a new locator.",
      "pos": [
        4423,
        4544
      ]
    },
    {
      "content": "AES-128 Dynamic Encryption",
      "pos": [
        4549,
        4575
      ]
    },
    {
      "pos": [
        4579,
        4674
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:"
    },
    {
      "content": "When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.",
      "pos": [
        4678,
        4790
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Setup for Media Services REST API Development<ept id=\"p1\">](media-services-rest-how-to-use.md)</ept>.",
      "pos": [
        4791,
        4900
      ]
    },
    {
      "content": "After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.",
      "pos": [
        4903,
        5033
      ]
    },
    {
      "content": "You must make subsequent calls to the new URI as described in <bpt id=\"p1\">[</bpt>Connecting to Media Services using REST API<ept id=\"p1\">](media-services-rest-connect_programmatically.md)</ept>.",
      "pos": [
        5034,
        5191
      ]
    },
    {
      "content": "Open Restriction",
      "pos": [
        5198,
        5214
      ]
    },
    {
      "content": "Open restriction means the system will deliver the key to anyone who makes a key request.",
      "pos": [
        5216,
        5305
      ]
    },
    {
      "content": "This restriction might be useful for testing purposes.",
      "pos": [
        5306,
        5360
      ]
    },
    {
      "content": "The following example creates an open authorization policy and adds it to the content key.",
      "pos": [
        5362,
        5452
      ]
    },
    {
      "pos": [
        5458,
        5540
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyAuthorizationPolicies\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create ContentKeyAuthorizationPolicies"
    },
    {
      "content": "Request:",
      "pos": [
        5542,
        5550
      ]
    },
    {
      "content": "Response:",
      "pos": [
        6565,
        6574
      ]
    },
    {
      "pos": [
        7526,
        7618
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyAuthorizationPolicyOptions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create ContentKeyAuthorizationPolicyOptions"
    },
    {
      "content": "Request:",
      "pos": [
        7624,
        7632
      ]
    },
    {
      "content": "Response:",
      "pos": [
        8769,
        8778
      ]
    },
    {
      "pos": [
        9877,
        9985
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"LinkContentKeyAuthorizationPoliciesWithOptions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Link ContentKeyAuthorizationPolicies with Options"
    },
    {
      "content": "Request:",
      "pos": [
        9987,
        9995
      ]
    },
    {
      "content": "Response:",
      "pos": [
        11192,
        11201
      ]
    },
    {
      "pos": [
        11236,
        11319
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"AddAuthorizationPolicyToKey\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Add authorization policy to the content key"
    },
    {
      "content": "Request:",
      "pos": [
        11321,
        11329
      ]
    },
    {
      "content": "Response:",
      "pos": [
        12411,
        12420
      ]
    },
    {
      "content": "Token Restriction",
      "pos": [
        12454,
        12471
      ]
    },
    {
      "content": "This section describes how to create a content key authorization policy and associate it with the content key.",
      "pos": [
        12473,
        12583
      ]
    },
    {
      "content": "The authorization policy describes what authorization requirements must be met to determine if the user is authorized to receive the key (for example, does the “verification key” list contain the key that the token was signed with).",
      "pos": [
        12584,
        12816
      ]
    },
    {
      "content": "To configure the token restriction option, you need to use an XML to describe the token’s authorization requirements.",
      "pos": [
        12818,
        12935
      ]
    },
    {
      "content": "The token restriction configuration XML must conform to the following XML schema.",
      "pos": [
        12936,
        13017
      ]
    },
    {
      "pos": [
        13023,
        13066
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"schema\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Token restriction schema"
    },
    {
      "content": "When configuring the <bpt id=\"p1\">**</bpt>token<ept id=\"p1\">**</ept> restricted policy, you must specify the primary** verification key**, <bpt id=\"p2\">**</bpt>issuer<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>audience<ept id=\"p3\">**</ept> parameters.",
      "pos": [
        15866,
        16006
      ]
    },
    {
      "content": "The **primary verification key **contains the key that the token was signed with, <bpt id=\"p1\">**</bpt>issuer<ept id=\"p1\">**</ept> is the secure token service that issues the token.",
      "pos": [
        16007,
        16150
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>audience<ept id=\"p1\">**</ept> (sometimes called <bpt id=\"p2\">**</bpt>scope<ept id=\"p2\">**</ept>) describes the intent of the token or the resource the token authorizes access to.",
      "pos": [
        16151,
        16278
      ]
    },
    {
      "content": "The Media Services key delivery service validates that these values in the token match the values in the template.",
      "pos": [
        16279,
        16393
      ]
    },
    {
      "content": "The following example creates an authorization policy with a token restriction.",
      "pos": [
        16396,
        16475
      ]
    },
    {
      "content": "In this example, the client would have to present a token that contains: signing key (VerificationKey), a token issuer, and required claims.",
      "pos": [
        16476,
        16616
      ]
    },
    {
      "content": "Create ContentKeyAuthorizationPolicies",
      "pos": [
        16625,
        16663
      ]
    },
    {
      "pos": [
        16665,
        16753
      ],
      "content": "Create the \"Token Restriction Policy\" as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#ContentKeyAuthorizationPolicies)</ept>."
    },
    {
      "content": "Create ContentKeyAuthorizationPolicyOptions",
      "pos": [
        16759,
        16802
      ]
    },
    {
      "content": "Request:",
      "pos": [
        16804,
        16812
      ]
    },
    {
      "content": "Response:",
      "pos": [
        18867,
        18876
      ]
    },
    {
      "content": "Link ContentKeyAuthorizationPolicies with Options",
      "pos": [
        20891,
        20940
      ]
    },
    {
      "pos": [
        20942,
        21042
      ],
      "content": "Link ContentKeyAuthorizationPolicies with Options as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#ContentKeyAuthorizationPolicies)</ept>."
    },
    {
      "content": "Add authorization policy to the content key",
      "pos": [
        21048,
        21091
      ]
    },
    {
      "pos": [
        21093,
        21181
      ],
      "content": "Add AuthorizationPolicy to the ContentKey as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#AddAuthorizationPolicyToKey)</ept>."
    },
    {
      "content": "PlayReady Dynamic Encryption",
      "pos": [
        21186,
        21214
      ]
    },
    {
      "content": "Media Services enables you to configure the rights and restrictions that you want for the PlayReady DRM runtime to enforce when a user is trying to play back protected content.",
      "pos": [
        21217,
        21393
      ]
    },
    {
      "pos": [
        21396,
        21627
      ],
      "content": "When protecting your content with PlayReady, one of the things you need to specify in your authorization policy is an XML string that defines the <bpt id=\"p1\">[</bpt>PlayReady license template<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn783459.aspx)</ept>."
    },
    {
      "content": "Open Restriction",
      "pos": [
        21633,
        21649
      ]
    },
    {
      "content": "Open restriction means the system will deliver the key to anyone who makes a key request.",
      "pos": [
        21655,
        21744
      ]
    },
    {
      "content": "This restriction might be useful for testing purposes.",
      "pos": [
        21745,
        21799
      ]
    },
    {
      "content": "The following example creates an open authorization policy and adds it to the content key.",
      "pos": [
        21801,
        21891
      ]
    },
    {
      "pos": [
        21901,
        21984
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyAuthorizationPolicies2\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create ContentKeyAuthorizationPolicies"
    },
    {
      "content": "Request:",
      "pos": [
        21986,
        21994
      ]
    },
    {
      "content": "Response:",
      "pos": [
        23001,
        23010
      ]
    },
    {
      "content": "Create ContentKeyAuthorizationPolicyOptions",
      "pos": [
        23969,
        24012
      ]
    },
    {
      "content": "Request:",
      "pos": [
        24014,
        24022
      ]
    },
    {
      "content": "Response:",
      "pos": [
        25596,
        25605
      ]
    },
    {
      "content": "Link ContentKeyAuthorizationPolicies with Options",
      "pos": [
        27126,
        27175
      ]
    },
    {
      "pos": [
        27177,
        27277
      ],
      "content": "Link ContentKeyAuthorizationPolicies with Options as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#ContentKeyAuthorizationPolicies)</ept>."
    },
    {
      "content": "Add authorization policy to the content key",
      "pos": [
        27283,
        27326
      ]
    },
    {
      "pos": [
        27328,
        27416
      ],
      "content": "Add AuthorizationPolicy to the ContentKey as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#AddAuthorizationPolicyToKey)</ept>."
    },
    {
      "content": "Token Restriction",
      "pos": [
        27422,
        27439
      ]
    },
    {
      "content": "To configure the token restriction option, you need to use an XML to describe the token’s authorization requirements.",
      "pos": [
        27441,
        27558
      ]
    },
    {
      "content": "The token restriction configuration XML must conform to the XML schema shown in <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](#schema)</ept> section.",
      "pos": [
        27559,
        27663
      ]
    },
    {
      "content": "Create ContentKeyAuthorizationPolicies",
      "pos": [
        27673,
        27711
      ]
    },
    {
      "pos": [
        27717,
        27807
      ],
      "content": "Create ContentKeyAuthorizationPolicies as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#ContentKeyAuthorizationPolicies2)</ept>."
    },
    {
      "content": "Create ContentKeyAuthorizationPolicyOptions",
      "pos": [
        27813,
        27856
      ]
    },
    {
      "content": "Request:",
      "pos": [
        27862,
        27870
      ]
    },
    {
      "content": "Response:",
      "pos": [
        30371,
        30380
      ]
    },
    {
      "content": "Link ContentKeyAuthorizationPolicies with Options",
      "pos": [
        32834,
        32883
      ]
    },
    {
      "pos": [
        32885,
        32985
      ],
      "content": "Link ContentKeyAuthorizationPolicies with Options as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#ContentKeyAuthorizationPolicies)</ept>."
    },
    {
      "content": "Add authorization policy to the content key",
      "pos": [
        32991,
        33034
      ]
    },
    {
      "pos": [
        33036,
        33124
      ],
      "content": "Add AuthorizationPolicy to the ContentKey as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](#AddAuthorizationPolicyToKey)</ept>."
    },
    {
      "pos": [
        33129,
        33201
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Types used when defining ContentKeyAuthorizationPolicy"
    },
    {
      "pos": [
        33206,
        33269
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyRestrictionType\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ContentKeyRestrictionType"
    },
    {
      "pos": [
        33402,
        33459
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyDeliveryType\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ContentKeyDeliveryType"
    },
    {
      "content": "Next Steps",
      "pos": [
        33590,
        33600
      ]
    },
    {
      "content": "Now that you have configured content key's authorization policy, go to the <bpt id=\"p1\">[</bpt>How to configure asset delivery policy<ept id=\"p1\">](media-services-rest-configure-asset-delivery-policy.md)</ept> topic.",
      "pos": [
        33601,
        33779
      ]
    },
    {
      "content": "test",
      "pos": [
        33783,
        33787
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Configure Content Key Authorization Policy using REST\" \n    description=\"Learn how to configure an authorization policy for a content key.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\"\n    ms.author=\"juliako\"/>\n\n\n#Dynamic encryption: Configure Content Key Authorization Policy \n[AZURE.INCLUDE [media-services-selector-content-key-auth-policy](../../includes/media-services-selector-content-key-auth-policy.md)] \n \n\n##Overivew\n\nMicrosoft Azure Media Services enables you to deliver your content encrypted (dynamically) with Advanced Encryption Standard (AES) (using 128-bit encryption keys) and PlayReady DRM. Media Services also provides a service for delivering keys and PlayReady licenses to authorized clients. \n\nIf you want for Media Services to encrypt an asset, you need to associate an encryption key (**CommonEncryption** or **EnvelopeEncryption**) with the asset (as described [here](media-services-rest-create-contentkey.md)) and also configure authorization policies for the key (as described in this article). \n\nCurrently, you can encrypt the following streaming formats: HLS, MPEG DASH, and Smooth Streaming. You cannot encrypt HDS streaming format, or progressive downloads.\n\nWhen a stream is requested by a player, Media Services uses the specified key to dynamically encrypt your content using AES or PlayReady encryption. To decrypt the stream, the player will request the key from the key delivery service. To decide whether or not the user is authorized to get the key, the service evaluates the authorization policies that you specified for the key.\n\nMedia Services supports multiple ways of authenticating users who make key requests. The content key authorization policy could have one or more authorization restrictions: **open**, **token** restriction, or **IP** restriction. The token restricted policy must be accompanied by a token issued by a Secure Token Service (STS). Media Services supports tokens in the **Simple Web Tokens** ([SWT](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_2)) format and **JSON Web Token **(JWT) format.  \n\nMedia Services does not provide Secure Token Services. You can create a custom STS or leverage Microsoft Azure ACS to issue tokens. The STS must be configured to create a token signed with the specified key and issue claims that you specified in the token restriction configuration (as described in this article). The Media Services key delivery service will return the encryption key to the client if the token is valid and the claims in the token match those configured for the content key.\n\nFor more information, see \n\n[JWT token authenitcation](http://www.gtrifonov.com/2015/01/03/jwt-token-authentication-in-azure-media-services-and-dynamic-encryption/)\n\n[Integrate Azure Media Services OWIN MVC based app with Azure Active Directory and restrict content key delivery based on JWT claims](http://www.gtrifonov.com/2015/01/24/mvc-owin-azure-media-services-ad-integration/).\n\n[Use Azure ACS to issue tokens](http://mingfeiy.com/acs-with-key-services).\n\n###Some considerations apply:\n\n- To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one  streaming reserved unit. For more information, see [How to Scale a Media Service](media-services-manage-origins.md#scale_streaming_endpoints). \n- Your asset must contain a set of adaptive bitrate MP4s or  adaptive bitrate Smooth Streaming files. For more information, see [Encode an asset](media-services-encode-asset.md).  \n- Upload and encode your assets using **AssetCreationOptions.StorageEncrypted** option.\n- If you plan to have multiple content keys that require the same policy configuration, it is strongly recommended to create a single authorization policy and reuse it with multiple content keys.\n- The Key Delivery service caches ContentKeyAuthorizationPolicy and its related objects (policy options and restrictions) for 15 minutes.  If you create a ContentKeyAuthorizationPolicy and specify to use a “Token” restriction, then test it, and then update the policy to “Open” restriction, it will take roughly 15 minutes before the policy switches to the “Open” version of the policy.\n- If you add or update your asset’s delivery policy, you must delete an existing locator (if any) and create a new locator.\n\n\n##AES-128 Dynamic Encryption \n\n>[AZURE.NOTE] When working with the Media Services REST API, the following considerations apply:\n>\n>When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests. For more information, see [Setup for Media Services REST API Development](media-services-rest-how-to-use.md).\n\n>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI. You must make subsequent calls to the new URI as described in [Connecting to Media Services using REST API](media-services-rest-connect_programmatically.md). \n\n\n###Open Restriction\n\nOpen restriction means the system will deliver the key to anyone who makes a key request. This restriction might be useful for testing purposes.\n\nThe following example creates an open authorization policy and adds it to the content key.\n\n####<a id=\"ContentKeyAuthorizationPolicies\"></a>Create ContentKeyAuthorizationPolicies\n\nRequest:\n        \n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=bbbef702-e769-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423578086&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=lZlyQ2%2bvH73qtJsb42%2fH3xF7r7EvQFR3UXyezuDENFU%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: d732dbfa-54fc-474c-99d6-9b46a006f389\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 36\n    \n    {\"Name\":\"Open Authorization Policy\"}\n    \nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 211\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicies('nb%3Ackpid%3AUUID%3Adb4593da-f4d1-4cc5-a92a-d20eacbabee4')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: d732dbfa-54fc-474c-99d6-9b46a006f389\n    request-id: aabfa731-e884-4bf3-8314-492b04747ac4\n    x-ms-request-id: aabfa731-e884-4bf3-8314-492b04747ac4\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 08:25:56 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicies/@Element\",\"Id\":\"nb:ckpid:UUID:db4593da-f4d1-4cc5-a92a-d20eacbabee4\",\"Name\":\"Open Authorization Policy\"}\n\n####<a id=\"ContentKeyAuthorizationPolicyOptions\"></a>Create ContentKeyAuthorizationPolicyOptions\n    \nRequest:\n\n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 3.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=bbbef702-e769-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423580006&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=Ref3EsonGF7fUKCwGwGgiMnZitzIzsDOvvMTeVrVVPg%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: d225e357-e60e-4f42-add8-9d93aba1409a\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 168\n    \n    {\"Name\":\"policy\",\"KeyDeliveryType\":2,\"KeyDeliveryConfiguration\":\"\",\"Restrictions\":[{\"Name\":\"HLS Open Authorization Policy\",\"KeyRestrictionType\":0,\"Requirements\":null}]}\n\nResponse:   \n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 349\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions('nb%3Ackpoid%3AUUID%3A57829b17-1101-4797-919b-f816f4a007b7')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: d225e357-e60e-4f42-add8-9d93aba1409a\n    request-id: 81bcad37-295b-431f-972f-b23f2e4172c9\n    x-ms-request-id: 81bcad37-295b-431f-972f-b23f2e4172c9\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 08:56:40 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicyOptions/@Element\",\"Id\":\"nb:ckpoid:UUID:57829b17-1101-4797-919b-f816f4a007b7\",\"Name\":\"policy\",\"KeyDeliveryType\":2,\"KeyDeliveryConfiguration\":\"\",\"Restrictions\":[{\"Name\":\"HLS Open Authorization Policy\",\"KeyRestrictionType\":0,\"Requirements\":null}]}\n\n####<a id=\"LinkContentKeyAuthorizationPoliciesWithOptions\"></a>Link ContentKeyAuthorizationPolicies with Options\n\nRequest:\n    \n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicies('nb%3Ackpid%3AUUID%3A0baa438b-8ac2-4c40-a53c-4d4722b78715')/$links/Options HTTP/1.1\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Content-Type: application/json\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423580006&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=Ref3EsonGF7fUKCwGwGgiMnZitzIzsDOvvMTeVrVVPg%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 9847f705-f2ca-4e95-a478-8f823dbbaa29\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 154\n    \n    {\"uri\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions('nb%3Ackpoid%3AUUID%3A57829b17-1101-4797-919b-f816f4a007b7')\"}\n\nResponse:\n\n    HTTP/1.1 204 No Content\n\n####<a id=\"AddAuthorizationPolicyToKey\"></a>Add authorization policy to the content key\n\nRequest:\n\n    PUT https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeys('nb%3Akid%3AUUID%3A2e6d36a7-a17c-4e9a-830d-eca23ad1a6f9') HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423581565&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=JiNSG3w6r2C0nIyfKvTZj1uPJGjuitD%2b0sbfZ%2b2JDZI%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: e613efff-cb6a-41b4-984a-f4f8fb6e76a4\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 78\n    \n    {\"AuthorizationPolicyId\":\"nb:ckpid:UUID:c06cebb8-c4f0-4d1a-ba00-3273fb2bc3ad\"}\n\nResponse:\n\n    HTTP/1.1 204 No Content\n\n###Token Restriction\n\nThis section describes how to create a content key authorization policy and associate it with the content key. The authorization policy describes what authorization requirements must be met to determine if the user is authorized to receive the key (for example, does the “verification key” list contain the key that the token was signed with).\n\nTo configure the token restriction option, you need to use an XML to describe the token’s authorization requirements. The token restriction configuration XML must conform to the following XML schema.\n\n####<a id=\"schema\"></a>Token restriction schema\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <xs:schema xmlns:tns=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" elementFormDefault=\"qualified\" targetNamespace=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n      <xs:complexType name=\"TokenClaim\">\n        <xs:sequence>\n          <xs:element name=\"ClaimType\" nillable=\"true\" type=\"xs:string\" />\n          <xs:element minOccurs=\"0\" name=\"ClaimValue\" nillable=\"true\" type=\"xs:string\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\n      <xs:complexType name=\"TokenRestrictionTemplate\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" name=\"AlternateVerificationKeys\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\n          <xs:element name=\"Audience\" nillable=\"true\" type=\"xs:anyURI\" />\n          <xs:element name=\"Issuer\" nillable=\"true\" type=\"xs:anyURI\" />\n          <xs:element name=\"PrimaryVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n          <xs:element minOccurs=\"0\" name=\"RequiredClaims\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"TokenRestrictionTemplate\" nillable=\"true\" type=\"tns:TokenRestrictionTemplate\" />\n      <xs:complexType name=\"ArrayOfTokenVerificationKey\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"ArrayOfTokenVerificationKey\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\n      <xs:complexType name=\"TokenVerificationKey\">\n        <xs:sequence />\n      </xs:complexType>\n      <xs:element name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n      <xs:complexType name=\"ArrayOfTokenClaim\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"ArrayOfTokenClaim\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\n      <xs:complexType name=\"SymmetricVerificationKey\">\n        <xs:complexContent mixed=\"false\">\n          <xs:extension base=\"tns:TokenVerificationKey\">\n            <xs:sequence>\n              <xs:element name=\"KeyValue\" nillable=\"true\" type=\"xs:base64Binary\" />\n            </xs:sequence>\n          </xs:extension>\n        </xs:complexContent>\n      </xs:complexType>\n      <xs:element name=\"SymmetricVerificationKey\" nillable=\"true\" type=\"tns:SymmetricVerificationKey\" />\n    </xs:schema>\n\nWhen configuring the **token** restricted policy, you must specify the primary** verification key**, **issuer** and **audience** parameters. The **primary verification key **contains the key that the token was signed with, **issuer** is the secure token service that issues the token. The **audience** (sometimes called **scope**) describes the intent of the token or the resource the token authorizes access to. The Media Services key delivery service validates that these values in the token match the values in the template. \n\nThe following example creates an authorization policy with a token restriction. In this example, the client would have to present a token that contains: signing key (VerificationKey), a token issuer, and required claims.\n    \n###Create ContentKeyAuthorizationPolicies\n\nCreate the \"Token Restriction Policy\" as shown [here](#ContentKeyAuthorizationPolicies).\n\n\n###Create ContentKeyAuthorizationPolicyOptions\n\nRequest:\n    \n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 3.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=bbbef702-e769-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423580720&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=5LsNu%2b0D4eD3UOP3BviTLDkUjaErdUx0ekJ8402xidQ%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 2643d836-bfe7-438e-9ba2-bc6ff28e4a53\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 1079\n    \n    {\"Name\":\"Token option for HLS\",\"KeyDeliveryType\":2,\"KeyDeliveryConfiguration\":null,\"Restrictions\":[{\"Name\":\"Token Authorization Policy\",\"KeyRestrictionType\":1,\"Requirements\":\"<TokenRestrictionTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\\\"><AlternateVerificationKeys><TokenVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>BklyAFiPTQsuJNKriQJBZHYaKM2CkCTDQX2bw9sMYuvEC9sjW0W7GUIBygQL/+POEeUqCYPnmEU2g0o1GW2Oqg==</KeyValue></TokenVerificationKey></AlternateVerificationKeys><Audience>urn:test</Audience><Issuer>http://testacs.com/</Issuer><PrimaryVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>E5BUHiN4vBdzUzdP0IWaHFMMU3D1uRZgF16TOhSfwwHGSw+Kbf0XqsHzEIYk11M372viB9vbiacsdcQksA0ftw==</KeyValue></PrimaryVerificationKey><RequiredClaims><TokenClaim><ClaimType>urn:microsoft:azure:mediaservices:contentkeyidentifier</ClaimType><ClaimValue i:nil=\\\"true\\\" /></TokenClaim></RequiredClaims><TokenType>SWT</TokenType></TokenRestrictionTemplate>\"}]}\n\nResponse:   \n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 1260\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions('nb%3Ackpoid%3AUUID%3Ae1ef6145-46e8-4ee6-9756-b1cf96328c23')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: 2643d836-bfe7-438e-9ba2-bc6ff28e4a53\n    request-id: 2310b716-aeaa-421e-913e-3ce2f6f685ca\n    x-ms-request-id: 2310b716-aeaa-421e-913e-3ce2f6f685ca\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 09:10:37 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicyOptions/@Element\",\"Id\":\"nb:ckpoid:UUID:e1ef6145-46e8-4ee6-9756-b1cf96328c23\",\"Name\":\"Token option for HLS\",\"KeyDeliveryType\":2,\"KeyDeliveryConfiguration\":null,\"Restrictions\":[{\"Name\":\"Token Authorization Policy\",\"KeyRestrictionType\":1,\"Requirements\":\"<TokenRestrictionTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\\\"><AlternateVerificationKeys><TokenVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>BklyAFiPTQsuJNKriQJBZHYaKM2CkCTDQX2bw9sMYuvEC9sjW0W7GUIBygQL/+POEeUqCYPnmEU2g0o1GW2Oqg==</KeyValue></TokenVerificationKey></AlternateVerificationKeys><Audience>urn:test</Audience><Issuer>http://testacs.com/</Issuer><PrimaryVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>E5BUHiN4vBdzUzdP0IWaHFMMU3D1uRZgF16TOhSfwwHGSw+Kbf0XqsHzEIYk11M372viB9vbiacsdcQksA0ftw==</KeyValue></PrimaryVerificationKey><RequiredClaims><TokenClaim><ClaimType>urn:microsoft:azure:mediaservices:contentkeyidentifier</ClaimType><ClaimValue i:nil=\\\"true\\\" /></TokenClaim></RequiredClaims><TokenType>SWT</TokenType></TokenRestrictionTemplate>\"}]}\n    \n####Link ContentKeyAuthorizationPolicies with Options\n\nLink ContentKeyAuthorizationPolicies with Options as shown [here](#ContentKeyAuthorizationPolicies).\n\n####Add authorization policy to the content key\n\nAdd AuthorizationPolicy to the ContentKey as shown [here](#AddAuthorizationPolicyToKey).\n\n\n##PlayReady Dynamic Encryption \n\nMedia Services enables you to configure the rights and restrictions that you want for the PlayReady DRM runtime to enforce when a user is trying to play back protected content. \n\nWhen protecting your content with PlayReady, one of the things you need to specify in your authorization policy is an XML string that defines the [PlayReady license template](https://msdn.microsoft.com/library/azure/dn783459.aspx). \n\n###Open Restriction\n    \nOpen restriction means the system will deliver the key to anyone who makes a key request. This restriction might be useful for testing purposes.\n\nThe following example creates an open authorization policy and adds it to the content key.\n    \n####<a id=\"ContentKeyAuthorizationPolicies2\"></a>Create ContentKeyAuthorizationPolicies\n\nRequest:\n\n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=bbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423581565&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=JiNSG3w6r2C0nIyfKvTZj1uPJGjuitD%2b0sbfZ%2b2JDZI%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 9e7fa407-f84e-43aa-8f05-9790b46e279b\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 58\n    \n    {\"Name\":\"Deliver Common Content Key\"}\n    \nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 233\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicies('nb%3Ackpid%3AUUID%3Acc3c64a8-e2fc-4e09-bf60-ac954251a387')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: 9e7fa407-f84e-43aa-8f05-9790b46e279b\n    request-id: b3d33c1b-a9cb-4120-ac0c-18f64846c147\n    x-ms-request-id: b3d33c1b-a9cb-4120-ac0c-18f64846c147\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 09:26:00 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicies/@Element\",\"Id\":\"nb:ckpid:UUID:cc3c64a8-e2fc-4e09-bf60-ac954251a387\",\"Name\":\"Deliver Common Content Key\"}\n    \n\n#### Create ContentKeyAuthorizationPolicyOptions\n\nRequest:\n    \n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 3.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423581565&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=JiNSG3w6r2C0nIyfKvTZj1uPJGjuitD%2b0sbfZ%2b2JDZI%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: f160ad25-b457-4bc6-8197-315604c5e585\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 593\n    \n    {\"Name\":\"\",\"KeyDeliveryType\":1,\"KeyDeliveryConfiguration\":\"<PlayReadyLicenseResponseTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/PlayReadyTemplate/v1\\\"><LicenseTemplates><PlayReadyLicenseTemplate><AllowTestDevices>false</AllowTestDevices><ContentKey i:type=\\\"ContentEncryptionKeyFromHeader\\\" /><LicenseType>Nonpersistent</LicenseType><PlayRight /></PlayReadyLicenseTemplate></LicenseTemplates></PlayReadyLicenseResponseTemplate>\",\"Restrictions\":[{\"Name\":\"Open\",\"KeyRestrictionType\":0,\"Requirements\":null}]}\n    \nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 774\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions('nb%3Ackpoid%3AUUID%3A1052308c-4df7-4fdb-8d21-4d2141fc2be0')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: f160ad25-b457-4bc6-8197-315604c5e585\n    request-id: 563f5a42-50a4-4c4a-add8-a833f8364231\n    x-ms-request-id: 563f5a42-50a4-4c4a-add8-a833f8364231\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 09:23:24 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicyOptions/@Element\",\"Id\":\"nb:ckpoid:UUID:1052308c-4df7-4fdb-8d21-4d2141fc2be0\",\"Name\":\"\",\"KeyDeliveryType\":1,\"KeyDeliveryConfiguration\":\"<PlayReadyLicenseResponseTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/PlayReadyTemplate/v1\\\"><LicenseTemplates><PlayReadyLicenseTemplate><AllowTestDevices>false</AllowTestDevices><ContentKey i:type=\\\"ContentEncryptionKeyFromHeader\\\" /><LicenseType>Nonpersistent</LicenseType><PlayRight /></PlayReadyLicenseTemplate></LicenseTemplates></PlayReadyLicenseResponseTemplate>\",\"Restrictions\":[{\"Name\":\"Open\",\"KeyRestrictionType\":0,\"Requirements\":null}]}\n\n####Link ContentKeyAuthorizationPolicies with Options\n\nLink ContentKeyAuthorizationPolicies with Options as shown [here](#ContentKeyAuthorizationPolicies).\n\n####Add authorization policy to the content key\n\nAdd AuthorizationPolicy to the ContentKey as shown [here](#AddAuthorizationPolicyToKey).\n\n\n###Token Restriction\n\nTo configure the token restriction option, you need to use an XML to describe the token’s authorization requirements. The token restriction configuration XML must conform to the XML schema shown in [this](#schema) section.\n    \n####Create ContentKeyAuthorizationPolicies\n    \nCreate ContentKeyAuthorizationPolicies as shown [here](#ContentKeyAuthorizationPolicies2).\n\n####Create ContentKeyAuthorizationPolicyOptions\n    \nRequest:\n\n    POST https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 3.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=juliakoams1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423583561&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=5eZnkOsSv%2fLLEKmS%2bWObBlsNYyee8BQlp%2bUYbjugcJg%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: ab079b0e-2ba9-4cf1-b549-a97bfa6cd2d3\n    Host: wamsbayclus001rest-hs.cloudapp.net\n    Content-Length: 1525\n    \n    {\"Name\":\"Token option\",\"KeyDeliveryType\":1,\"KeyDeliveryConfiguration\":\"<PlayReadyLicenseResponseTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/PlayReadyTemplate/v1\\\"><LicenseTemplates><PlayReadyLicenseTemplate><AllowTestDevices>false</AllowTestDevices><ContentKey i:type=\\\"ContentEncryptionKeyFromHeader\\\" /><LicenseType>Nonpersistent</LicenseType><PlayRight /></PlayReadyLicenseTemplate></LicenseTemplates></PlayReadyLicenseResponseTemplate>\",\"Restrictions\":[{\"Name\":\"Token Authorization Policy\",\"KeyRestrictionType\":1,\"Requirements\":\"<TokenRestrictionTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\\\"><AlternateVerificationKeys><TokenVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>w52OyHVqXT8aaupGxuJ3NGt8M6opHDOtx132p4r6q4hLI6ffnLusgEGie1kedUewVoIe1tqDkVE6xsIV7O91KA==</KeyValue></TokenVerificationKey></AlternateVerificationKeys><Audience>urn:test</Audience><Issuer>http://testacs.com/</Issuer><PrimaryVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>dYwLKIEMBljLeY9VM7vWdlhps31Fbt0XXhqP5VyjQa33bJXleBtkzQ6dF5AtwI9gDcdM2dV2TvYNhCilBKjMCg==</KeyValue></PrimaryVerificationKey><RequiredClaims><TokenClaim><ClaimType>urn:microsoft:azure:mediaservices:contentkeyidentifier</ClaimType><ClaimValue i:nil=\\\"true\\\" /></TokenClaim></RequiredClaims><TokenType>SWT</TokenType></TokenRestrictionTemplate>\"}]}\n\nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 1706\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://wamsbayclus001rest-hs.cloudapp.net/api/ContentKeyAuthorizationPolicyOptions('nb%3Ackpoid%3AUUID%3Ae42bbeae-de42-4077-90e9-a844f297ef70')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: ab079b0e-2ba9-4cf1-b549-a97bfa6cd2d3\n    request-id: ccf8a4ba-731e-4124-8192-079592c251cc\n    x-ms-request-id: ccf8a4ba-731e-4124-8192-079592c251cc\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Tue, 10 Feb 2015 09:58:47 GMT\n    \n    {\"odata.metadata\":\"https://wamsbayclus001rest-hs.cloudapp.net/api/$metadata#ContentKeyAuthorizationPolicyOptions/@Element\",\"Id\":\"nb:ckpoid:UUID:e42bbeae-de42-4077-90e9-a844f297ef70\",\"Name\":\"Token option\",\"KeyDeliveryType\":1,\"KeyDeliveryConfiguration\":\"<PlayReadyLicenseResponseTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/PlayReadyTemplate/v1\\\"><LicenseTemplates><PlayReadyLicenseTemplate><AllowTestDevices>false</AllowTestDevices><ContentKey i:type=\\\"ContentEncryptionKeyFromHeader\\\" /><LicenseType>Nonpersistent</LicenseType><PlayRight /></PlayReadyLicenseTemplate></LicenseTemplates></PlayReadyLicenseResponseTemplate>\",\"Restrictions\":[{\"Name\":\"Token Authorization Policy\",\"KeyRestrictionType\":1,\"Requirements\":\"<TokenRestrictionTemplate xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\\\"><AlternateVerificationKeys><TokenVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>w52OyHVqXT8aaupGxuJ3NGt8M6opHDOtx132p4r6q4hLI6ffnLusgEGie1kedUewVoIe1tqDkVE6xsIV7O91KA==</KeyValue></TokenVerificationKey></AlternateVerificationKeys><Audience>urn:test</Audience><Issuer>http://testacs.com/</Issuer><PrimaryVerificationKey i:type=\\\"SymmetricVerificationKey\\\"><KeyValue>dYwLKIEMBljLeY9VM7vWdlhps31Fbt0XXhqP5VyjQa33bJXleBtkzQ6dF5AtwI9gDcdM2dV2TvYNhCilBKjMCg==</KeyValue></PrimaryVerificationKey><RequiredClaims><TokenClaim><ClaimType>urn:microsoft:azure:mediaservices:contentkeyidentifier</ClaimType><ClaimValue i:nil=\\\"true\\\" /></TokenClaim></RequiredClaims><TokenType>SWT</TokenType></TokenRestrictionTemplate>\"}]}\n\n####Link ContentKeyAuthorizationPolicies with Options\n\nLink ContentKeyAuthorizationPolicies with Options as shown [here](#ContentKeyAuthorizationPolicies).\n\n####Add authorization policy to the content key\n\nAdd AuthorizationPolicy to the ContentKey as shown [here](#AddAuthorizationPolicyToKey).\n\n\n##<a id=\"types\"></a>Types used when defining ContentKeyAuthorizationPolicy\n\n###<a id=\"ContentKeyRestrictionType\"></a>ContentKeyRestrictionType\n\n    public enum ContentKeyRestrictionType\n    {\n        Open = 0,\n        TokenRestricted = 1,\n        IPRestricted = 2,\n    }\n\n###<a id=\"ContentKeyDeliveryType\"></a>ContentKeyDeliveryType\n\n    public enum ContentKeyDeliveryType\n    {\n        None = 0,\n        PlayReadyLicense = 1,\n        BaselineHttp = 2,\n    }\n\n\n##Next Steps\nNow that you have configured content key's authorization policy, go to the [How to configure asset delivery policy](media-services-rest-configure-asset-delivery-policy.md) topic.\n\n \ntest\n"
}