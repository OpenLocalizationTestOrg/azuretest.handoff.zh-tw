{
  "nodes": [
    {
      "content": "How to use Service Bus topics (Java) | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus topics and subscriptions in Azure.",
      "pos": [
        100,
        163
      ]
    },
    {
      "content": "Code samples are written for Java applications.",
      "pos": [
        164,
        211
      ]
    },
    {
      "content": "How to use Service Bus topics/subscriptions",
      "pos": [
        511,
        554
      ]
    },
    {
      "content": "This guide describes how to use Service Bus topics and",
      "pos": [
        556,
        610
      ]
    },
    {
      "content": "subscriptions.",
      "pos": [
        611,
        625
      ]
    },
    {
      "content": "The samples are written in Java and use the <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept>.",
      "pos": [
        626,
        693
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating topics\nand subscriptions<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>creating subscription filters<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>sending\nmessages to a topic<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>receiving messages from a subscription<ept id=\"p4\">**</ept>, and",
      "pos": [
        694,
        878
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>deleting topics and subscriptions<ept id=\"p1\">**</ept>.",
      "pos": [
        879,
        917
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        1034,
        1079
      ]
    },
    {
      "content": "Make sure you have installed the <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept> before building this sample.",
      "pos": [
        1080,
        1164
      ]
    },
    {
      "content": "If you are using Eclipse, you can install the <bpt id=\"p1\">[</bpt>Azure Toolkit for Eclipse<ept id=\"p1\">][]</ept> that includes the Azure SDK for Java.",
      "pos": [
        1165,
        1278
      ]
    },
    {
      "content": "You can then add the <bpt id=\"p1\">**</bpt>Microsoft Azure Libraries for Java<ept id=\"p1\">**</ept> to your project:",
      "pos": [
        1279,
        1355
      ]
    },
    {
      "content": "Add the following import statements to the top of the Java file:",
      "pos": [
        1433,
        1497
      ]
    },
    {
      "content": "Add the Azure Libraries for Java to your build path and include it in your project deployment assembly.",
      "pos": [
        1769,
        1872
      ]
    },
    {
      "content": "How to create a topic",
      "pos": [
        1877,
        1898
      ]
    },
    {
      "content": "Management operations for Service Bus topics can be performed via the",
      "pos": [
        1900,
        1969
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> class.",
      "pos": [
        1970,
        1999
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object is",
      "pos": [
        2000,
        2034
      ]
    },
    {
      "content": "constructed with an appropriate configuration that encapsulates the",
      "pos": [
        2035,
        2102
      ]
    },
    {
      "content": "SAS token with permissions to manage it, and the <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> class is",
      "pos": [
        2103,
        2183
      ]
    },
    {
      "content": "the sole point of communication with Azure.",
      "pos": [
        2184,
        2227
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> class provides methods to create, enumerate,",
      "pos": [
        2229,
        2299
      ]
    },
    {
      "content": "and delete topics.",
      "pos": [
        2300,
        2318
      ]
    },
    {
      "content": "The example below shows how a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object",
      "pos": [
        2319,
        2377
      ]
    },
    {
      "content": "can be used to create a topic named \"TestTopic\", with a namespace named \"HowToSample\":",
      "pos": [
        2378,
        2464
      ]
    },
    {
      "content": "There are methods on <bpt id=\"p1\">**</bpt>TopicInfo<ept id=\"p1\">**</ept> that enable properties of the topic to",
      "pos": [
        3077,
        3150
      ]
    },
    {
      "content": "be tuned (for example: to set the default \"time-to-live\" value to be",
      "pos": [
        3151,
        3219
      ]
    },
    {
      "content": "applied to messages sent to the topic).",
      "pos": [
        3220,
        3259
      ]
    },
    {
      "content": "The following example shows how",
      "pos": [
        3260,
        3291
      ]
    },
    {
      "content": "to create a topic named \"TestTopic\" with a maximum size of 5GB:",
      "pos": [
        3292,
        3355
      ]
    },
    {
      "content": "Note that you can use the <bpt id=\"p1\">**</bpt>listTopics<ept id=\"p1\">**</ept> method on",
      "pos": [
        3572,
        3622
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> objects to check if a topic with a specified name",
      "pos": [
        3623,
        3695
      ]
    },
    {
      "content": "already exists within a service namespace.",
      "pos": [
        3696,
        3738
      ]
    },
    {
      "content": "How to create subscriptions",
      "pos": [
        3743,
        3770
      ]
    },
    {
      "content": "Topic subscriptions are also created with the <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept>",
      "pos": [
        3772,
        3839
      ]
    },
    {
      "content": "class.",
      "pos": [
        3840,
        3846
      ]
    },
    {
      "content": "Subscriptions are named and can have an optional filter that",
      "pos": [
        3847,
        3907
      ]
    },
    {
      "content": "restricts the set of messages passed to the subscription's virtual",
      "pos": [
        3908,
        3974
      ]
    },
    {
      "content": "queue.",
      "pos": [
        3975,
        3981
      ]
    },
    {
      "content": "Create a subscription with the default (MatchAll) filter",
      "pos": [
        3987,
        4043
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is the default filter that is used if no filter",
      "pos": [
        4045,
        4116
      ]
    },
    {
      "content": "is specified when a new subscription is created.",
      "pos": [
        4117,
        4165
      ]
    },
    {
      "content": "When the <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept>",
      "pos": [
        4166,
        4187
      ]
    },
    {
      "content": "filter is used, all messages published to the topic are placed in the",
      "pos": [
        4188,
        4257
      ]
    },
    {
      "content": "subscription's virtual queue.",
      "pos": [
        4258,
        4287
      ]
    },
    {
      "content": "The following example creates a",
      "pos": [
        4288,
        4319
      ]
    },
    {
      "content": "subscription named \"AllMessages\" and uses the default <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept>",
      "pos": [
        4320,
        4386
      ]
    },
    {
      "content": "filter.",
      "pos": [
        4387,
        4394
      ]
    },
    {
      "content": "Create subscriptions with filters",
      "pos": [
        4565,
        4598
      ]
    },
    {
      "content": "You can also setup filters that allow you to scope which messages sent",
      "pos": [
        4600,
        4670
      ]
    },
    {
      "content": "to a topic should show up within a specific topic subscription.",
      "pos": [
        4671,
        4734
      ]
    },
    {
      "content": "The most flexible type of filter supported by subscriptions is the",
      "pos": [
        4736,
        4802
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept>, which implements a subset of SQL92.",
      "pos": [
        4803,
        4853
      ]
    },
    {
      "content": "SQL filters operate",
      "pos": [
        4854,
        4873
      ]
    },
    {
      "content": "on the properties of the messages that are published to the topic.",
      "pos": [
        4874,
        4940
      ]
    },
    {
      "content": "For",
      "pos": [
        4941,
        4944
      ]
    },
    {
      "content": "more details about the expressions that can be used with a SQL filter,",
      "pos": [
        4945,
        5015
      ]
    },
    {
      "content": "review the SqlFilter.SqlExpression syntax.",
      "pos": [
        5016,
        5058
      ]
    },
    {
      "content": "The example below creates a subscription named \"HighMessages\" with a",
      "pos": [
        5060,
        5128
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept> that only selects messages that have a custom",
      "pos": [
        5129,
        5188
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>MessageNumber<ept id=\"p1\">**</ept> property greater than 3:",
      "pos": [
        5189,
        5231
      ]
    },
    {
      "content": "Similarly, the following example creates a subscription named",
      "pos": [
        5814,
        5875
      ]
    },
    {
      "content": "\"LowMessages\" with",
      "pos": [
        5876,
        5894
      ]
    },
    {
      "content": "a SqlFilter that only selects messages that have a MessageNumber",
      "pos": [
        5896,
        5960
      ]
    },
    {
      "content": "property less",
      "pos": [
        5961,
        5974
      ]
    },
    {
      "content": "than or equal to 3:",
      "pos": [
        5976,
        5995
      ]
    },
    {
      "content": "When a message is now sent to the \"TestTopic\", it will always be",
      "pos": [
        6574,
        6638
      ]
    },
    {
      "content": "delivered to receivers subscribed to the \"AllMessages\" topic",
      "pos": [
        6639,
        6699
      ]
    },
    {
      "content": "subscription, and selectively delivered to receivers subscribed to the",
      "pos": [
        6700,
        6770
      ]
    },
    {
      "content": "\"HighMessages\" and \"LowMessages\" topic subscriptions (depending upon the",
      "pos": [
        6771,
        6843
      ]
    },
    {
      "content": "message content).",
      "pos": [
        6844,
        6861
      ]
    },
    {
      "content": "How to send messages to a topic",
      "pos": [
        6866,
        6897
      ]
    },
    {
      "content": "To send a message to a Service Bus Topic, your application will obtain a",
      "pos": [
        6899,
        6971
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object.",
      "pos": [
        6972,
        7002
      ]
    },
    {
      "content": "The below code demonstrates how to send a",
      "pos": [
        7003,
        7044
      ]
    },
    {
      "content": "message for the \"TestTopic\" topic we created above within our",
      "pos": [
        7045,
        7106
      ]
    },
    {
      "content": "\"HowToSample\" service namespace:",
      "pos": [
        7107,
        7139
      ]
    },
    {
      "content": "Messages sent to Service Bus Topics are instances of the",
      "pos": [
        7258,
        7314
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> class.",
      "pos": [
        7315,
        7341
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set of",
      "pos": [
        7342,
        7383
      ]
    },
    {
      "content": "standard methods (such as <bpt id=\"p1\">**</bpt>setLabel<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TimeToLive<ept id=\"p2\">**</ept>), a dictionary",
      "pos": [
        7384,
        7456
      ]
    },
    {
      "content": "that is used to hold custom application specific properties, and a body",
      "pos": [
        7457,
        7528
      ]
    },
    {
      "content": "of arbitrary application data.",
      "pos": [
        7529,
        7559
      ]
    },
    {
      "content": "An application can set the body of the",
      "pos": [
        7560,
        7598
      ]
    },
    {
      "content": "message by passing any serializable object into the constructor of the",
      "pos": [
        7599,
        7669
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept>, and the appropriate <bpt id=\"p2\">**</bpt>DataContractSerializer<ept id=\"p2\">**</ept> will",
      "pos": [
        7670,
        7742
      ]
    },
    {
      "content": "then be used to serialize the object.",
      "pos": [
        7743,
        7780
      ]
    },
    {
      "content": "Alternatively, a",
      "pos": [
        7781,
        7797
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>java.io.InputStream<ept id=\"p1\">**</ept> can be provided.",
      "pos": [
        7798,
        7838
      ]
    },
    {
      "content": "The following example demonstrates how to send five test messages to the",
      "pos": [
        7840,
        7912
      ]
    },
    {
      "content": "\"TestTopic\" <bpt id=\"p1\">**</bpt>MessageSender<ept id=\"p1\">**</ept> we obtained in the code snippet above.",
      "pos": [
        7913,
        7981
      ]
    },
    {
      "content": "Note how the <bpt id=\"p1\">**</bpt>MessageNumber<ept id=\"p1\">**</ept> property value of each message varies on",
      "pos": [
        7982,
        8053
      ]
    },
    {
      "content": "the iteration of the loop (this will determine which subscriptions",
      "pos": [
        8054,
        8120
      ]
    },
    {
      "content": "receive it):",
      "pos": [
        8121,
        8133
      ]
    },
    {
      "content": "Service Bus topics support a maximum message size of 256 MB (the header,",
      "pos": [
        8516,
        8588
      ]
    },
    {
      "content": "which includes the standard and custom application properties, can have",
      "pos": [
        8589,
        8660
      ]
    },
    {
      "content": "a maximum size of 64 MB).",
      "pos": [
        8661,
        8686
      ]
    },
    {
      "content": "There is no limit on the number of messages",
      "pos": [
        8687,
        8730
      ]
    },
    {
      "content": "held in a topic but there is a cap on the total size of the messages",
      "pos": [
        8731,
        8799
      ]
    },
    {
      "content": "held by a topic.",
      "pos": [
        8800,
        8816
      ]
    },
    {
      "content": "This topic size is defined at creation time, with an",
      "pos": [
        8817,
        8869
      ]
    },
    {
      "content": "upper limit of 5 GB.",
      "pos": [
        8870,
        8890
      ]
    },
    {
      "content": "How to receive messages from a subscription",
      "pos": [
        8895,
        8938
      ]
    },
    {
      "content": "The primary way to receive messages from a subscription is to use a",
      "pos": [
        8940,
        9007
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object.",
      "pos": [
        9008,
        9038
      ]
    },
    {
      "content": "Received messages can work in two",
      "pos": [
        9039,
        9072
      ]
    },
    {
      "content": "different modes: <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PeekLock<ept id=\"p2\">**</ept>.",
      "pos": [
        9073,
        9128
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, receive is a single-shot",
      "pos": [
        9130,
        9196
      ]
    },
    {
      "content": "operation - that is, when Service Bus receives a read request for a",
      "pos": [
        9197,
        9264
      ]
    },
    {
      "content": "message, it marks the message as being consumed and returns it to the",
      "pos": [
        9265,
        9334
      ]
    },
    {
      "content": "application.",
      "pos": [
        9335,
        9347
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode is the simplest model and works",
      "pos": [
        9348,
        9405
      ]
    },
    {
      "content": "best for scenarios in which an application can tolerate not processing a",
      "pos": [
        9406,
        9478
      ]
    },
    {
      "content": "message in the event of a failure.",
      "pos": [
        9479,
        9513
      ]
    },
    {
      "content": "To understand this, consider a",
      "pos": [
        9514,
        9544
      ]
    },
    {
      "content": "scenario in which the consumer issues the receive request and then",
      "pos": [
        9545,
        9611
      ]
    },
    {
      "content": "crashes before processing it.",
      "pos": [
        9612,
        9641
      ]
    },
    {
      "content": "Because Service Bus will have marked the",
      "pos": [
        9642,
        9682
      ]
    },
    {
      "content": "message as being consumed, then when the application restarts and begins",
      "pos": [
        9683,
        9755
      ]
    },
    {
      "content": "consuming messages again, it will have missed the message that was",
      "pos": [
        9756,
        9822
      ]
    },
    {
      "content": "consumed prior to the crash.",
      "pos": [
        9823,
        9851
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode, receive becomes a two stage operation, which makes",
      "pos": [
        9853,
        9925
      ]
    },
    {
      "content": "it possible to support applications that cannot tolerate missing",
      "pos": [
        9926,
        9990
      ]
    },
    {
      "content": "messages.",
      "pos": [
        9991,
        10000
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message",
      "pos": [
        10001,
        10063
      ]
    },
    {
      "content": "to be consumed, locks it to prevent other consumers receiving it, and",
      "pos": [
        10064,
        10133
      ]
    },
    {
      "content": "then returns it to the application.",
      "pos": [
        10134,
        10169
      ]
    },
    {
      "content": "After the application finishes",
      "pos": [
        10170,
        10200
      ]
    },
    {
      "content": "processing the message (or stores it reliably for future processing), it",
      "pos": [
        10201,
        10273
      ]
    },
    {
      "content": "completes the second stage of the receive process by calling <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept>",
      "pos": [
        10274,
        10345
      ]
    },
    {
      "content": "on the received message.",
      "pos": [
        10346,
        10370
      ]
    },
    {
      "content": "When Service Bus sees the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> call, it",
      "pos": [
        10371,
        10416
      ]
    },
    {
      "content": "will mark the message as being consumed and remove it from the topic.",
      "pos": [
        10417,
        10486
      ]
    },
    {
      "content": "The example below demonstrates how messages can be received and",
      "pos": [
        10488,
        10551
      ]
    },
    {
      "content": "processed using <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (not the default mode).",
      "pos": [
        10552,
        10609
      ]
    },
    {
      "content": "The example",
      "pos": [
        10610,
        10621
      ]
    },
    {
      "content": "below performs a loop and processes messages in the \"HighMessages\" subscription and then exits when there are no more messages (alternatively, it could be set to wait for new messages).",
      "pos": [
        10622,
        10807
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        12737,
        12794
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from",
      "pos": [
        12796,
        12866
      ]
    },
    {
      "content": "errors in your application or difficulties processing a message.",
      "pos": [
        12867,
        12931
      ]
    },
    {
      "content": "If a",
      "pos": [
        12932,
        12936
      ]
    },
    {
      "content": "receiver application is unable to process the message for some reason,",
      "pos": [
        12937,
        13007
      ]
    },
    {
      "content": "then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the received message",
      "pos": [
        13008,
        13077
      ]
    },
    {
      "content": "(instead of the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method).",
      "pos": [
        13078,
        13120
      ]
    },
    {
      "content": "This will cause Service Bus",
      "pos": [
        13121,
        13148
      ]
    },
    {
      "content": "to unlock the message within the topic and make it available to be",
      "pos": [
        13149,
        13215
      ]
    },
    {
      "content": "received again, either by the same consuming application or by another",
      "pos": [
        13216,
        13286
      ]
    },
    {
      "content": "consuming application.",
      "pos": [
        13287,
        13309
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the",
      "pos": [
        13311,
        13378
      ]
    },
    {
      "content": "topic, and if the application fails to process the message before the",
      "pos": [
        13379,
        13448
      ]
    },
    {
      "content": "lock timeout expires (e.g., if the application crashes), then Service",
      "pos": [
        13449,
        13518
      ]
    },
    {
      "content": "Bus will unlock the message automatically and make it available to be",
      "pos": [
        13519,
        13588
      ]
    },
    {
      "content": "received again.",
      "pos": [
        13589,
        13604
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message",
      "pos": [
        13606,
        13676
      ]
    },
    {
      "content": "but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> request is issued, then the message",
      "pos": [
        13677,
        13745
      ]
    },
    {
      "content": "will be redelivered to the application when it restarts.",
      "pos": [
        13746,
        13802
      ]
    },
    {
      "content": "This is often",
      "pos": [
        13803,
        13816
      ]
    },
    {
      "content": "called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be",
      "pos": [
        13817,
        13883
      ]
    },
    {
      "content": "processed at least once but in certain situations the same message may",
      "pos": [
        13884,
        13954
      ]
    },
    {
      "content": "be redelivered.",
      "pos": [
        13955,
        13970
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing,",
      "pos": [
        13971,
        14024
      ]
    },
    {
      "content": "then application developers should add additional logic to their",
      "pos": [
        14025,
        14089
      ]
    },
    {
      "content": "application to handle duplicate message delivery.",
      "pos": [
        14090,
        14139
      ]
    },
    {
      "content": "This is often achieved",
      "pos": [
        14140,
        14162
      ]
    },
    {
      "content": "using the <bpt id=\"p1\">**</bpt>getMessageId<ept id=\"p1\">**</ept> method of the message, which will remain",
      "pos": [
        14163,
        14230
      ]
    },
    {
      "content": "constant across delivery attempts.",
      "pos": [
        14231,
        14265
      ]
    },
    {
      "content": "How to delete topics and subscriptions",
      "pos": [
        14270,
        14308
      ]
    },
    {
      "content": "The primary way to delete topics and subscriptions is to use a",
      "pos": [
        14310,
        14372
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object.",
      "pos": [
        14373,
        14403
      ]
    },
    {
      "content": "Deleting a topic will also delete any subscriptions that are registered",
      "pos": [
        14404,
        14475
      ]
    },
    {
      "content": "with the topic.",
      "pos": [
        14476,
        14491
      ]
    },
    {
      "content": "Subscriptions can also be deleted independently.",
      "pos": [
        14492,
        14540
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        14816,
        14826
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus queues, see the MSDN",
      "pos": [
        14828,
        14898
      ]
    },
    {
      "content": "topic <bpt id=\"p1\">[</bpt>Service Bus Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept> for more information.",
      "pos": [
        14899,
        14976
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus topics (Java) | Microsoft Azure\"\n    description=\"Learn how to use Service Bus topics and subscriptions in Azure. Code samples are written for Java applications.\"\n    services=\"service-bus\"\n    documentationCenter=\"java\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"Java\"\n    ms.topic=\"article\"\n    ms.date=\"06/19/2015\"\n    ms.author=\"sethm\"/>\n\n# How to use Service Bus topics/subscriptions\n\nThis guide describes how to use Service Bus topics and\nsubscriptions. The samples are written in Java and use the [Azure SDK for Java][]. The scenarios covered include **creating topics\nand subscriptions**, **creating subscription filters**, **sending\nmessages to a topic**, **receiving messages from a subscription**, and\n**deleting topics and subscriptions**.\n\n[AZURE.INCLUDE [service-bus-java-how-to-create-topic](../../includes/service-bus-java-how-to-create-topic.md)]\n\n## Configure your application to use Service Bus\nMake sure you have installed the [Azure SDK for Java][] before building this sample. If you are using Eclipse, you can install the [Azure Toolkit for Eclipse][] that includes the Azure SDK for Java. You can then add the **Microsoft Azure Libraries for Java** to your project:\n![](media/service-bus-java-how-to-use-topics-subscriptions/eclipselibs.png)\n\nAdd the following import statements to the top of the Java file:\n\n    // Include the following imports to use service bus APIs\n    import com.microsoft.windowsazure.services.servicebus.*;\n    import com.microsoft.windowsazure.services.servicebus.models.*;\n    import com.microsoft.windowsazure.core.*;\n    import javax.xml.datatype.*;\n\nAdd the Azure Libraries for Java to your build path and include it in your project deployment assembly.\n\n## How to create a topic\n\nManagement operations for Service Bus topics can be performed via the\n**ServiceBusContract** class. A **ServiceBusContract** object is\nconstructed with an appropriate configuration that encapsulates the\nSAS token with permissions to manage it, and the **ServiceBusContract** class is\nthe sole point of communication with Azure.\n\nThe **ServiceBusService** class provides methods to create, enumerate,\nand delete topics. The example below shows how a **ServiceBusService** object\ncan be used to create a topic named \"TestTopic\", with a namespace named \"HowToSample\":\n\n    Configuration config =\n        ServiceBusConfiguration.configureWithSASAuthentication(\n          \"HowToSample\",\n          \"RootManageSharedAccessKey\",\n          \"SAS_key_value\",\n          \".servicebus.windows.net\"\n          );\n\n    ServiceBusContract service = ServiceBusService.create(config);\n    TopicInfo topicInfo = new TopicInfo(\"TestTopic\");\n    try  \n    {\n        CreateTopicResult result = service.createTopic(topicInfo);\n    }\n    catch (ServiceException e) {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\nThere are methods on **TopicInfo** that enable properties of the topic to\nbe tuned (for example: to set the default \"time-to-live\" value to be\napplied to messages sent to the topic). The following example shows how\nto create a topic named \"TestTopic\" with a maximum size of 5GB:\n\n    long maxSizeInMegabytes = 5120;  \n    TopicInfo topicInfo = new TopicInfo(\"TestTopic\");  \n    topicInfo.setMaxSizeInMegabytes(maxSizeInMegabytes);\n    CreateTopicResult result = service.createTopic(topicInfo);\n\nNote that you can use the **listTopics** method on\n**ServiceBusContract** objects to check if a topic with a specified name\nalready exists within a service namespace.\n\n## How to create subscriptions\n\nTopic subscriptions are also created with the **ServiceBusService**\nclass. Subscriptions are named and can have an optional filter that\nrestricts the set of messages passed to the subscription's virtual\nqueue.\n\n### Create a subscription with the default (MatchAll) filter\n\nThe **MatchAll** filter is the default filter that is used if no filter\nis specified when a new subscription is created. When the **MatchAll**\nfilter is used, all messages published to the topic are placed in the\nsubscription's virtual queue. The following example creates a\nsubscription named \"AllMessages\" and uses the default **MatchAll**\nfilter.\n\n    SubscriptionInfo subInfo = new SubscriptionInfo(\"AllMessages\");\n    CreateSubscriptionResult result =\n        service.createSubscription(\"TestTopic\", subInfo);\n\n### Create subscriptions with filters\n\nYou can also setup filters that allow you to scope which messages sent\nto a topic should show up within a specific topic subscription.\n\nThe most flexible type of filter supported by subscriptions is the\n**SqlFilter**, which implements a subset of SQL92. SQL filters operate\non the properties of the messages that are published to the topic. For\nmore details about the expressions that can be used with a SQL filter,\nreview the SqlFilter.SqlExpression syntax.\n\nThe example below creates a subscription named \"HighMessages\" with a\n**SqlFilter** that only selects messages that have a custom\n**MessageNumber** property greater than 3:\n\n    // Create a \"HighMessages\" filtered subscription  \n    SubscriptionInfo subInfo = new SubscriptionInfo(\"HighMessages\");\n    CreateSubscriptionResult result =\n        service.createSubscription(\"TestTopic\", subInfo);\n    RuleInfo ruleInfo = new RuleInfo(\"myRuleGT3\");\n    ruleInfo = ruleInfo.withSqlExpressionFilter(\"MessageNumber > 3\");\n    CreateRuleResult ruleResult =\n        service.createRule(\"TestTopic\", \"HighMessages\", ruleInfo);\n    // Delete the default rule, otherwise the new rule won't be invoked.\n    service.deleteRule(\"TestTopic\", \"HighMessages\", \"$Default\");\n\nSimilarly, the following example creates a subscription named\n\"LowMessages\" with\n a SqlFilter that only selects messages that have a MessageNumber\nproperty less\n than or equal to 3:\n\n    // Create a \"LowMessages\" filtered subscription\n    SubscriptionInfo subInfo = new SubscriptionInfo(\"LowMessages\");\n    CreateSubscriptionResult result =\n        service.createSubscription(\"TestTopic\", subInfo);\n    RuleInfo ruleInfo = new RuleInfo(\"myRuleLE3\");\n    ruleInfo = ruleInfo.withSqlExpressionFilter(\"MessageNumber <= 3\");\n    CreateRuleResult ruleResult =\n        service.createRule(\"TestTopic\", \"LowMessages\", ruleInfo);\n    // Delete the default rule, otherwise the new rule won't be invoked.\n    service.deleteRule(\"TestTopic\", \"LowMessages\", \"$Default\");\n\n\nWhen a message is now sent to the \"TestTopic\", it will always be\ndelivered to receivers subscribed to the \"AllMessages\" topic\nsubscription, and selectively delivered to receivers subscribed to the\n\"HighMessages\" and \"LowMessages\" topic subscriptions (depending upon the\nmessage content).\n\n## How to send messages to a topic\n\nTo send a message to a Service Bus Topic, your application will obtain a\n**ServiceBusContract** object. The below code demonstrates how to send a\nmessage for the \"TestTopic\" topic we created above within our\n\"HowToSample\" service namespace:\n\n    BrokeredMessage message = new BrokeredMessage(\"MyMessage\");\n    service.sendTopicMessage(\"TestTopic\", message);\n\nMessages sent to Service Bus Topics are instances of the\n**BrokeredMessage** class. **BrokeredMessage** objects have a set of\nstandard methods (such as **setLabel** and **TimeToLive**), a dictionary\nthat is used to hold custom application specific properties, and a body\nof arbitrary application data. An application can set the body of the\nmessage by passing any serializable object into the constructor of the\n**BrokeredMessage**, and the appropriate **DataContractSerializer** will\nthen be used to serialize the object. Alternatively, a\n**java.io.InputStream** can be provided.\n\nThe following example demonstrates how to send five test messages to the\n\"TestTopic\" **MessageSender** we obtained in the code snippet above.\nNote how the **MessageNumber** property value of each message varies on\nthe iteration of the loop (this will determine which subscriptions\nreceive it):\n\n    for (int i=0; i<5; i++)  {\n        // Create message, passing a string message for the body\n        BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n        // Set some additional custom app-specific property\n        message.setProperty(\"MessageNumber\", i);\n        // Send message to the topic\n        service.sendTopicMessage(\"TestTopic\", message);\n    }\n\nService Bus topics support a maximum message size of 256 MB (the header,\nwhich includes the standard and custom application properties, can have\na maximum size of 64 MB). There is no limit on the number of messages\nheld in a topic but there is a cap on the total size of the messages\nheld by a topic. This topic size is defined at creation time, with an\nupper limit of 5 GB.\n\n## How to receive messages from a subscription\n\nThe primary way to receive messages from a subscription is to use a\n**ServiceBusContract** object. Received messages can work in two\ndifferent modes: **ReceiveAndDelete** and **PeekLock**.\n\nWhen using the **ReceiveAndDelete** mode, receive is a single-shot\noperation - that is, when Service Bus receives a read request for a\nmessage, it marks the message as being consumed and returns it to the\napplication. **ReceiveAndDelete** mode is the simplest model and works\nbest for scenarios in which an application can tolerate not processing a\nmessage in the event of a failure. To understand this, consider a\nscenario in which the consumer issues the receive request and then\ncrashes before processing it. Because Service Bus will have marked the\nmessage as being consumed, then when the application restarts and begins\nconsuming messages again, it will have missed the message that was\nconsumed prior to the crash.\n\nIn **PeekLock** mode, receive becomes a two stage operation, which makes\nit possible to support applications that cannot tolerate missing\nmessages. When Service Bus receives a request, it finds the next message\nto be consumed, locks it to prevent other consumers receiving it, and\nthen returns it to the application. After the application finishes\nprocessing the message (or stores it reliably for future processing), it\ncompletes the second stage of the receive process by calling **Delete**\non the received message. When Service Bus sees the **Delete** call, it\nwill mark the message as being consumed and remove it from the topic.\n\nThe example below demonstrates how messages can be received and\nprocessed using **PeekLock** mode (not the default mode). The example\nbelow performs a loop and processes messages in the \"HighMessages\" subscription and then exits when there are no more messages (alternatively, it could be set to wait for new messages).\n\n    try\n    {\n        ReceiveMessageOptions opts = ReceiveMessageOptions.DEFAULT;\n        opts.setReceiveMode(ReceiveMode.PEEK_LOCK);\n\n        while(true)  {\n            ReceiveSubscriptionMessageResult  resultSubMsg =\n                service.receiveSubscriptionMessage(\"TestTopic\", \"HighMessages\", opts);\n            BrokeredMessage message = resultSubMsg.getValue();\n            if (message != null && message.getMessageId() != null)\n            {\n                System.out.println(\"MessageID: \" + message.getMessageId());\n                // Display the topic message.\n                System.out.print(\"From topic: \");\n                byte[] b = new byte[200];\n                String s = null;\n                int numRead = message.getBody().read(b);\n                while (-1 != numRead)\n                {\n                    s = new String(b);\n                    s = s.trim();\n                    System.out.print(s);\n                    numRead = message.getBody().read(b);\n                }\n                System.out.println();\n                System.out.println(\"Custom Property: \" +\n                    message.getProperty(\"MessageNumber\"));\n                // Delete message.\n                System.out.println(\"Deleting this message.\");\n                service.deleteMessage(message);\n            }  \n            else  \n            {\n                System.out.println(\"Finishing up - no more messages.\");\n                break;\n                // Added to handle no more messages.\n                // Could instead wait for more messages to be added.\n            }\n        }\n    }\n    catch (ServiceException e) {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n    catch (Exception e) {\n        System.out.print(\"Generic exception encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from\nerrors in your application or difficulties processing a message. If a\nreceiver application is unable to process the message for some reason,\nthen it can call the **unlockMessage** method on the received message\n(instead of the **deleteMessage** method). This will cause Service Bus\nto unlock the message within the topic and make it available to be\nreceived again, either by the same consuming application or by another\nconsuming application.\n\nThere is also a timeout associated with a message locked within the\ntopic, and if the application fails to process the message before the\nlock timeout expires (e.g., if the application crashes), then Service\nBus will unlock the message automatically and make it available to be\nreceived again.\n\nIn the event that the application crashes after processing the message\nbut before the **deleteMessage** request is issued, then the message\nwill be redelivered to the application when it restarts. This is often\ncalled **At Least Once Processing**, that is, each message will be\nprocessed at least once but in certain situations the same message may\nbe redelivered. If the scenario cannot tolerate duplicate processing,\nthen application developers should add additional logic to their\napplication to handle duplicate message delivery. This is often achieved\nusing the **getMessageId** method of the message, which will remain\nconstant across delivery attempts.\n\n## How to delete topics and subscriptions\n\nThe primary way to delete topics and subscriptions is to use a\n**ServiceBusContract** object. Deleting a topic will also delete any subscriptions that are registered\nwith the topic. Subscriptions can also be deleted independently.\n\n    // Delete subscriptions\n    service.deleteSubscription(\"TestTopic\", \"AllMessages\");\n    service.deleteSubscription(\"TestTopic\", \"HighMessages\");\n    service.deleteSubscription(\"TestTopic\", \"LowMessages\");\n\n    // Delete a topic\n    service.deleteTopic(\"TestTopic\");\n\n## Next Steps\n\nNow that you've learned the basics of Service Bus queues, see the MSDN\ntopic [Service Bus Queues, Topics, and Subscriptions][] for more information.\n\n  [Azure SDK for Java]: http://azure.microsoft.com/develop/java/\n  [Azure Toolkit for Eclipse]: https://msdn.microsoft.com/en-us/library/azure/hh694271.aspx\n  [What are Service Bus Topics and Subscriptions?]: #what-are-service-bus-topics\n  [Create a Service Namespace]: #create-a-service-namespace\n  [Obtain the Default Management Credentials for the Namespace]: #obtain-default-credentials\n  [Configure Your Application to Use Service Bus]: #bkmk_ConfigYourApp\n  [How to: Create a Topic]: #bkmk_HowToCreateTopic\n  [How to: Create Subscriptions]: #bkmk_HowToCreateSubscrip\n  [How to: Send Messages to a Topic]: #bkmk_HowToSendMsgs\n  [How to: Receive Messages from a Subscription]: #bkmk_HowToReceiveMsgs\n  [How to: Handle Application Crashes and Unreadable Messages]: #bkmk_HowToHandleAppCrash\n  [How to: Delete Topics and Subscriptions]: #bkmk_HowToDeleteTopics\n  [Next Steps]: #bkmk_NextSteps\n  [Service Bus Topics diagram]: ../../../DevCenter/Java/Media/SvcBusTopics_01_FlowDiagram.jpg\n  [Azure Management Portal]: http://manage.windowsazure.com/\n  [Service Bus Node screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-03.png\n  [Create a New Namespace ]: ../../../DevCenter/dotNet/Media/sb-queues-04.png\n  [Namespace List screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-05.png\n  [Properties Pane screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-06.png\n  [Default Key screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-07.png\n  [Service Bus Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/hh367516.aspx\n \n"
}