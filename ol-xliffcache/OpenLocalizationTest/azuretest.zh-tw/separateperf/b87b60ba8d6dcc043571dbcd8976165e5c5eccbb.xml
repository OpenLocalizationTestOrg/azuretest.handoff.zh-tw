{
  "nodes": [
    {
      "content": "Event Hubs API Overview",
      "pos": [
        27,
        50
      ]
    },
    {
      "content": "A summary of some of the key Event Hubs .NET client APIs.",
      "pos": [
        68,
        125
      ]
    },
    {
      "content": "Event Hubs API overview",
      "pos": [
        410,
        433
      ]
    },
    {
      "content": "This article summarizes some of the key Event Hubs .NET client APIs.",
      "pos": [
        435,
        503
      ]
    },
    {
      "content": "There are two categories: management and runtime APIs.",
      "pos": [
        504,
        558
      ]
    },
    {
      "content": "Runtime APIs consist of all operations needed to send and receive a message.",
      "pos": [
        559,
        635
      ]
    },
    {
      "content": "Management operations enable you to manage the Event Hubs entity state by creating, updating, and deleting entities.",
      "pos": [
        636,
        752
      ]
    },
    {
      "content": "Monitoring scenarios span both management and runtime.",
      "pos": [
        754,
        808
      ]
    },
    {
      "content": "For detailed reference documentation on the .NET APIs, see the <bpt id=\"p1\">[</bpt>.NET Class Library<ept id=\"p1\">](https://msdn.microsoft.com/library/jj933431.aspx)</ept> and <bpt id=\"p2\">[</bpt>EventProcessorHost API<ept id=\"p2\">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.aspx)</ept> references.",
      "pos": [
        809,
        1055
      ]
    },
    {
      "content": "Management API",
      "pos": [
        1060,
        1074
      ]
    },
    {
      "pos": [
        1076,
        1189
      ],
      "content": "To perform the following management operations you must have <bpt id=\"p1\">**</bpt>Manage<ept id=\"p1\">**</ept> permissions on the Service Bus namespace:"
    },
    {
      "content": "Create",
      "pos": [
        1195,
        1201
      ]
    },
    {
      "content": "Update",
      "pos": [
        1405,
        1411
      ]
    },
    {
      "content": "Delete",
      "pos": [
        1923,
        1929
      ]
    },
    {
      "content": "Runtime APIs",
      "pos": [
        2006,
        2018
      ]
    },
    {
      "content": "Create publisher",
      "pos": [
        2024,
        2040
      ]
    },
    {
      "content": "Publish message",
      "pos": [
        2218,
        2233
      ]
    },
    {
      "content": "Create consumer",
      "pos": [
        2827,
        2842
      ]
    },
    {
      "content": "Consume message",
      "pos": [
        3532,
        3547
      ]
    },
    {
      "content": "Event processor host APIs",
      "pos": [
        3805,
        3830
      ]
    },
    {
      "content": "These APIs provide resiliency to worker processes that may become unavailable, but distributing shards across available workers.",
      "pos": [
        3832,
        3960
      ]
    },
    {
      "pos": [
        4869,
        5011
      ],
      "content": "The <bpt id=\"p1\">[</bpt>IEventProcessor<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.ieventprocessor.aspx)</ept> interface is defined as follows:"
    },
    {
      "content": "Next steps",
      "pos": [
        5917,
        5927
      ]
    },
    {
      "content": "To learn more about Event Hubs scenarios, visit these links:",
      "pos": [
        5929,
        5989
      ]
    },
    {
      "content": "Event Hubs programming guide",
      "pos": [
        5994,
        6022
      ]
    },
    {
      "content": "Event Hubs overview",
      "pos": [
        6060,
        6079
      ]
    },
    {
      "content": "[Event Hubs Code Samples](http://code.msdn.microsoft.com/site/search?query=event hub&amp;f[0].Value=event hub&amp;f[0].Type=SearchText&amp;ac=5)",
      "pos": [
        6107,
        6239
      ]
    },
    {
      "content": "The .NET API references are here:",
      "pos": [
        6241,
        6274
      ]
    },
    {
      "content": "Service Bus and Event Hubs .NET API reference",
      "pos": [
        6279,
        6324
      ]
    },
    {
      "content": "Event processor host API reference",
      "pos": [
        6379,
        6413
      ]
    },
    {
      "content": "test",
      "pos": [
        6507,
        6511
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"Event Hubs API Overview\"\n   description=\"A summary of some of the key Event Hubs .NET client APIs. \"\n   services=\"event-hubs\"\n   documentationCenter=\"na\"\n   authors=\"sethmanheim\"\n   manager=\"timlt\"\n   editor=\"\" />\n<tags \n   ms.service=\"event-hubs\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"tbd\"\n   ms.date=\"07/10/2015\"\n   ms.author=\"sethm\" />\n\n# Event Hubs API overview\n\nThis article summarizes some of the key Event Hubs .NET client APIs. There are two categories: management and runtime APIs. Runtime APIs consist of all operations needed to send and receive a message. Management operations enable you to manage the Event Hubs entity state by creating, updating, and deleting entities.\n\nMonitoring scenarios span both management and runtime. For detailed reference documentation on the .NET APIs, see the [.NET Class Library](https://msdn.microsoft.com/library/jj933431.aspx) and [EventProcessorHost API](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.aspx) references.\n\n## Management API\n\nTo perform the following management operations you must have **Manage** permissions on the Service Bus namespace:\n\n### Create\n\n```\n// Create the Event Hub\nEventHubDescription ehd = new EventHubDescription(eventHubName);\nehd.PartitionCount = SampleManager.numPartitions;\nnamespaceManager.CreateEventHubAsync(ehd).Wait();\n```\n\n### Update\n\n```\nEventHubDescription ehd = await namespaceManager.GetEventHubAsync(eventHubName);\n\n// Create a customer SAS rule with Manage permissions\nehd.UserMetadata = \"Some updated info\";\nstring ruleName = \"myeventhubmanagerule\";\nstring ruleKey = SharedAccessAuthorizationRule.GenerateRandomKey();\nehd.Authorization.Add(new SharedAccessAuthorizationRule(ruleName, ruleKey, new AccessRights[] {AccessRights.Manage, AccessRights.Listen, AccessRights.Send} )); \nnamespaceManager.UpdateEventHubAsync(ehd).Wait();\n```\n\n### Delete\n\n```\nnamespaceManager.DeleteEventHubAsync(\"event hub name\").Wait();\n```\n\n## Runtime APIs\n\n### Create publisher\n\n```\n// EventHubClient model (uses implicit factory instance, so all links on same connection)\nEventHubClient eventHubClient = EventHubClient.Create(\"event hub name\");\n```\n\n### Publish message\n\n```\n// Create the device/temperature metric\nMetricEvent info = new MetricEvent() { DeviceId = random.Next(SampleManager.NumDevices), Temperature = random.Next(100) };\nEventData data = new EventData(new byte[10]); // Byte array\nEventData data = new EventData(Stream); // Stream \nEventData data = new EventData(info, serializer) //Object and serializer \n    {\n       PartitionKey = info.DeviceId.ToString()\n    };\n\n// Set user properties if needed\ndata.Properties.Add(\"Type\", \"Telemetry_\" + DateTime.Now.ToLongTimeString());\n\n// Send single message async\nawait client.SendAsync(data);\n```\n\n### Create consumer\n\n```\n// Create the Event Hub client\nEventHubClient eventHubClient = EventHubClient.Create(EventHubName);\n\n// Get the default subscriber group\nEventHubSubscriberGroup defaultSubscriberGroup = eventHubClient.GetDefaultSubscriberGroup();\n\n// All messages\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index);\n\n// From one day ago\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index, startingDateTimeUtc:DateTime.Now.AddDays(-1));\n                        \n// From specific offset, -1 means oldest\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index,startingOffset:-1); \n```\n\n### Consume message\n\n```\nvar message = await consumer.ReceiveAsync();\n\n// Provide a serializer\nvar info = message.GetBody<Type>(Serializer)\n                                    \n// Get a byte[]\nvar info = message.GetBytes(); \nmsg = UnicodeEncoding.UTF8.GetString(info);\n```\n\n## Event processor host APIs\n\nThese APIs provide resiliency to worker processes that may become unavailable, but distributing shards across available workers.\n\n```\n// Checkpointing is done within the SimpleEventProcessor and on a per-consumerGroup per-partition basis, workers resume from where they last left off.\n// Use the EventData.Offset value for checkpointing yourself, this value is unique per partition.\nstring eventHubConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"Microsoft.ServiceBus.ConnectionString\"];\nstring blobConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"AzureStorageConnectionString\"]; // Required for checkpoint/state\n\nEventHubDescription eventHubDescription = new EventHubDescription(EventHubName);\nEventProcessorHost host = new EventProcessorHost(WorkerName, EventHubName, defaultConsumerGroup.GroupName, eventHubConnectionString, blobConnectionString);\n            host.RegisterEventProcessorAsync<SimpleEventProcessor>();\n\n// To close\nhost.UnregisterEventProcessorAsync().Wait();   \n```\n\nThe [IEventProcessor](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.ieventprocessor.aspx) interface is defined as follows:\n\n```\npublic class SimpleEventProcessor : IEventProcessor\n{\n    IDictionary<string, string> map;\n    PartitionContext partitionContext;\n\n    public SimpleEventProcessor()\n    {\n        this.map = new Dictionary<string, string>();\n    }\n\n    public Task OpenAsync(PartitionContext context)\n    {\n        this.partitionContext = context;\n\n        return Task.FromResult<object>(null);\n    }\n\n    public async Task ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n    {\n        foreach (EventData message in messages)\n        {\n            Process messages here\n        }\n        \n        // Checkpoint when appropriate\n        await context.CheckpointAsync();\n\n    }\n\n\n    public async Task CloseAsync(PartitionContext context, CloseReason reason)\n    {\n        if (reason == CloseReason.Shutdown)\n        {\n            await context.CheckpointAsync();\n        }\n    }\n}\n```\n\n## Next steps\n\nTo learn more about Event Hubs scenarios, visit these links:\n\n- [Event Hubs programming guide](event-hubs-programming-guide.md)\n- [Event Hubs overview](event-hubs-overview.md)\n- [Event Hubs Code Samples](http://code.msdn.microsoft.com/site/search?query=event hub&f[0].Value=event hub&f[0].Type=SearchText&ac=5)\n\nThe .NET API references are here:\n\n- [Service Bus and Event Hubs .NET API reference](https://msdn.microsoft.com/library/jj933424.aspx)\n- [Event processor host API reference](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)\n\ntest\n"
}