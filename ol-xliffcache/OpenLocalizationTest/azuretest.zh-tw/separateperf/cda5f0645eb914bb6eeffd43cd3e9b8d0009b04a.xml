{
  "nodes": [
    {
      "content": "Troubleshoot a web app in Azure App Service using Visual Studio",
      "pos": [
        28,
        91
      ]
    },
    {
      "content": "Learn how to troubleshoot an Azure web app by using remote debugging, tracing, and logging tools that are built in to Visual Studio 2013.",
      "pos": [
        111,
        248
      ]
    },
    {
      "content": "Troubleshoot a web app in Azure App Service using Visual Studio",
      "pos": [
        573,
        636
      ]
    },
    {
      "content": "Overview",
      "pos": [
        641,
        649
      ]
    },
    {
      "pos": [
        651,
        964
      ],
      "content": "This tutorial shows how to use Visual Studio tools that help debug a web app while it runs in <bpt id=\"p1\">[</bpt>App Service<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529714)</ept>, by running in <bpt id=\"p2\">[</bpt>debug mode<ept id=\"p2\">](http://www.visualstudio.com/en-us/get-started/debug-your-app-vs.aspx)</ept> remotely or by viewing application logs and web server logs."
    },
    {
      "content": "You'll learn:",
      "pos": [
        966,
        979
      ]
    },
    {
      "content": "Which Azure web app management functions are available in Visual Studio.",
      "pos": [
        983,
        1055
      ]
    },
    {
      "content": "How to use Visual Studio remote view to make quick changes in a remote web app.",
      "pos": [
        1058,
        1137
      ]
    },
    {
      "content": "How to run debug mode remotely while a project is running in Azure, both for a web app and for a WebJob.",
      "pos": [
        1140,
        1244
      ]
    },
    {
      "content": "How to create application trace logs and view them while the application is creating them.",
      "pos": [
        1247,
        1337
      ]
    },
    {
      "content": "How to view web server logs, including detailed error messages and failed request tracing.",
      "pos": [
        1340,
        1430
      ]
    },
    {
      "content": "How to send diagnostic logs to an Azure Storage account and view them there.",
      "pos": [
        1433,
        1509
      ]
    },
    {
      "content": "If you have Visual Studio Ultimate, you can also use <bpt id=\"p1\">[</bpt>IntelliTrace<ept id=\"p1\">](http://msdn.microsoft.com/library/vstudio/dd264915.aspx)</ept> for debugging.",
      "pos": [
        1511,
        1650
      ]
    },
    {
      "content": "IntelliTrace is not covered in this tutorial.",
      "pos": [
        1651,
        1696
      ]
    },
    {
      "pos": [
        1701,
        1742
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"prerequisites\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Prerequisites"
    },
    {
      "content": "This tutorial works with the development environment, web project, and Azure web app that you set up in <bpt id=\"p1\">[</bpt>Get started with Azure and ASP.NET<ept id=\"p1\">][GetStarted]</ept>.",
      "pos": [
        1744,
        1897
      ]
    },
    {
      "content": "For the WebJobs sections, you'll need the application that you create in <bpt id=\"p1\">[</bpt>Get Started with the Azure WebJobs SDK<ept id=\"p1\">][GetStartedWJ]</ept>.",
      "pos": [
        1898,
        2026
      ]
    },
    {
      "content": "The code samples shown in this tutorial are for a C# MVC web application, but the troubleshooting procedures are the same for Visual Basic and Web Forms applications.",
      "pos": [
        2028,
        2194
      ]
    },
    {
      "content": "Remote debugging requires Visual Studio 2013 or Visual Studio 2012 with Update 4.",
      "pos": [
        2196,
        2277
      ]
    },
    {
      "content": "The remote debugging and <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept> features for WebJobs require <bpt id=\"p2\">[</bpt>Visual Studio 2013 Update 4<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=510314)</ept> or later.",
      "pos": [
        2278,
        2438
      ]
    },
    {
      "content": "The other features shown in the tutorial also work in Visual Studio 2013 Express for Web, and Visual Studio 2012 Express for Web.",
      "pos": [
        2439,
        2568
      ]
    },
    {
      "content": "The streaming logs feature only works for applications that target .NET Framework 4 or later.",
      "pos": [
        2571,
        2664
      ]
    },
    {
      "pos": [
        2669,
        2734
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sitemanagement\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Web app configuration and management"
    },
    {
      "content": "Visual Studio provides access to a subset of the web app management functions and configuration settings available in the <bpt id=\"p1\">[</bpt>Azure Portal<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529715)</ept>.",
      "pos": [
        2736,
        2920
      ]
    },
    {
      "content": "In this section you'll see what's available.",
      "pos": [
        2921,
        2965
      ]
    },
    {
      "pos": [
        2970,
        3090
      ],
      "content": "If you aren't already signed in to Azure in Visual Studio, click the <bpt id=\"p1\">**</bpt>Connect to Azure<ept id=\"p1\">**</ept> button in <bpt id=\"p2\">**</bpt>Server Explorer<ept id=\"p2\">**</ept>."
    },
    {
      "content": "An alternative is to install a management certificate that enables access to your account.",
      "pos": [
        3096,
        3186
      ]
    },
    {
      "content": "If you choose to install a certificate, right-click the <bpt id=\"p1\">**</bpt>Azure<ept id=\"p1\">**</ept> node in <bpt id=\"p2\">**</bpt>Server Explorer<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Manage Subscriptions<ept id=\"p3\">**</ept> in the context menu.",
      "pos": [
        3187,
        3342
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Manage Azure Subscriptions<ept id=\"p1\">**</ept> dialog box, click the <bpt id=\"p2\">**</bpt>Certificates<ept id=\"p2\">**</ept> tab, and then click <bpt id=\"p3\">**</bpt>Import<ept id=\"p3\">**</ept>.",
      "pos": [
        3343,
        3451
      ]
    },
    {
      "content": "Follow the directions to download and then import a subscription file (also called a <bpt id=\"p1\">*</bpt>.publishsettings<ept id=\"p1\">*</ept> file) for your Azure account.",
      "pos": [
        3452,
        3585
      ]
    },
    {
      "pos": [
        3593,
        3904
      ],
      "content": "[AZURE.NOTE]\nIf you download a subscription file, save it to a folder outside your source code directories (for example, in the Downloads folder), and then delete it once the import has completed. A malicious user who gains access to the subscription file can edit, create, and delete your Azure services.",
      "leadings": [
        "",
        "    > "
      ],
      "nodes": [
        {
          "content": "If you download a subscription file, save it to a folder outside your source code directories (for example, in the Downloads folder), and then delete it once the import has completed. A malicious user who gains access to the subscription file can edit, create, and delete your Azure services.",
          "pos": [
            13,
            305
          ],
          "nodes": [
            {
              "content": "If you download a subscription file, save it to a folder outside your source code directories (for example, in the Downloads folder), and then delete it once the import has completed.",
              "pos": [
                0,
                183
              ]
            },
            {
              "content": "A malicious user who gains access to the subscription file can edit, create, and delete your Azure services.",
              "pos": [
                184,
                292
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        3910,
        4115
      ],
      "content": "For more information about connecting to Azure resources from Visual Studio, see <bpt id=\"p1\">[</bpt>Manage Accounts, Subscriptions, and Administrative Roles<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=324796#BKMK_AccountVCert)</ept>."
    },
    {
      "pos": [
        4120,
        4191
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, expand <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept>, and then expand <bpt id=\"p3\">**</bpt>Web Apps<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        4196,
        4340
      ],
      "content": "Right-click the node for the web app that you created in <bpt id=\"p1\">[</bpt>Getting started with Azure and ASP.NET<ept id=\"p1\">][GetStarted]</ept>, and then click <bpt id=\"p2\">**</bpt>View Settings<ept id=\"p2\">**</ept>."
    },
    {
      "content": "View Settings in Server Explorer",
      "pos": [
        4348,
        4380
      ]
    },
    {
      "pos": [
        4461,
        4601
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Azure Web App<ept id=\"p1\">**</ept> tab appears, and you can see there the web app management and configuration tasks that are available in Visual Studio."
    },
    {
      "content": "Azure Web App window",
      "pos": [
        4609,
        4629
      ]
    },
    {
      "content": "In this tutorial you'll be using the logging and tracing drop-downs.",
      "pos": [
        4707,
        4775
      ]
    },
    {
      "content": "You'll also use remote debugging but you'll use a different method to enable it.",
      "pos": [
        4776,
        4856
      ]
    },
    {
      "pos": [
        4865,
        5161
      ],
      "content": "For information about the App Settings and Connection Strings boxes in this window, see <bpt id=\"p1\">[</bpt>Azure Web Apps: How Application Strings and Connection Strings Work<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazure/archive/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work.aspx)</ept>."
    },
    {
      "content": "If you want to perform a web app management task that can't be done in this window, you can click <bpt id=\"p1\">**</bpt>Full Web App Settings<ept id=\"p1\">**</ept> to open a browser window to the management portal.",
      "pos": [
        5167,
        5341
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>How to Configure Web Apps<ept id=\"p1\">](/en-us/manage/services/web-sites/how-to-configure-websites/#howtochangeconfig)</ept>.",
      "pos": [
        5342,
        5475
      ]
    },
    {
      "pos": [
        5480,
        5544
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"remoteview\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Access web app files in Server Explorer"
    },
    {
      "content": "You typically deploy a web project with the <ph id=\"ph1\">`customErrors`</ph> flag in the Web.config file set to <ph id=\"ph2\">`On`</ph> or <ph id=\"ph3\">`RemoteOnly`</ph>, which means you don't get a helpful error message when something goes wrong.",
      "pos": [
        5546,
        5738
      ]
    },
    {
      "content": "For many errors all you get is a page like one of the following ones.",
      "pos": [
        5739,
        5808
      ]
    },
    {
      "content": "Server Error in '/' Application:",
      "pos": [
        5812,
        5844
      ]
    },
    {
      "content": "Unhelpful error page",
      "pos": [
        5850,
        5870
      ]
    },
    {
      "content": "An error occurred:",
      "pos": [
        5945,
        5963
      ]
    },
    {
      "content": "Unhelpful error page",
      "pos": [
        5969,
        5989
      ]
    },
    {
      "content": "The website cannot display the page",
      "pos": [
        6065,
        6100
      ]
    },
    {
      "content": "Unhelpful error page",
      "pos": [
        6106,
        6126
      ]
    },
    {
      "content": "Frequently the easiest way to find the cause of the error is to enable detailed error messages, which the first of the preceding screenshots explains how to do.",
      "pos": [
        6200,
        6360
      ]
    },
    {
      "content": "That requires a change in the deployed Web.config file.",
      "pos": [
        6361,
        6416
      ]
    },
    {
      "content": "You could edit the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> file in the project and redeploy the project, or create a <bpt id=\"p2\">[</bpt>Web.config transform<ept id=\"p2\">](http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/web-config-transformations)</ept> and deploy a debug build, but there's a quicker way: in <bpt id=\"p3\">**</bpt>Solution Explorer<ept id=\"p3\">**</ept> you can directly view and edit files in the remote web app by using the <bpt id=\"p4\">*</bpt>remote view<ept id=\"p4\">*</ept> feature.",
      "pos": [
        6417,
        6803
      ]
    },
    {
      "pos": [
        6808,
        6975
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, expand <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept>, expand <bpt id=\"p3\">**</bpt>App Service<ept id=\"p3\">**</ept>, expand the resource group that your web app is located in, and then expand the node for your web app."
    },
    {
      "content": "You see nodes that give you access to the web app's content files and log files.",
      "pos": [
        6981,
        7061
      ]
    },
    {
      "pos": [
        7066,
        7132
      ],
      "content": "Expand the <bpt id=\"p1\">**</bpt>Files<ept id=\"p1\">**</ept> node, and double-click the <bpt id=\"p2\">*</bpt>Web.config<ept id=\"p2\">*</ept> file."
    },
    {
      "content": "Open Web.config",
      "pos": [
        7140,
        7155
      ]
    },
    {
      "content": "Visual Studio opens the Web.config file from the remote web app and shows [Remote] next to the file name in the title bar.",
      "pos": [
        7229,
        7351
      ]
    },
    {
      "pos": [
        7356,
        7407
      ],
      "content": "Add the following line to the <ph id=\"ph1\">`system.web`</ph> element:"
    },
    {
      "content": "Edit Web.config",
      "pos": [
        7463,
        7478
      ]
    },
    {
      "content": "Refresh the browser that is showing the unhelpful error message, and now you get a detailed error message, such as the following example:",
      "pos": [
        7555,
        7692
      ]
    },
    {
      "content": "Detailed error message",
      "pos": [
        7700,
        7722
      ]
    },
    {
      "pos": [
        7800,
        7891
      ],
      "content": "(The error shown was created by adding the line shown in red to <bpt id=\"p1\">*</bpt>Views\\Home\\Index.cshtml<ept id=\"p1\">*</ept>.)"
    },
    {
      "content": "Editing the Web.config file is only one example of scenarios in which the ability to read and edit files on your Azure web app make troubleshooting easier.",
      "pos": [
        7893,
        8048
      ]
    },
    {
      "pos": [
        8053,
        8104
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"remotedebug\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Remote debugging web apps"
    },
    {
      "content": "If the detailed error message doesn't provide enough information, and you can't re-create the error locally, another way to troubleshoot is to run in debug mode remotely.",
      "pos": [
        8106,
        8276
      ]
    },
    {
      "content": "You can set breakpoints, manipulate memory directly, step through code, and even change the code path.",
      "pos": [
        8277,
        8379
      ]
    },
    {
      "content": "Remote debugging does not work in Express editions of Visual Studio.",
      "pos": [
        8382,
        8450
      ]
    },
    {
      "pos": [
        8452,
        8578
      ],
      "content": "This section shows how to debug remotely using the project you create in <bpt id=\"p1\">[</bpt>Getting started with Azure and ASP.NET<ept id=\"p1\">][GetStarted]</ept>."
    },
    {
      "pos": [
        8583,
        8677
      ],
      "content": "Open the web project that you created in <bpt id=\"p1\">[</bpt>Getting started with Azure and ASP.NET<ept id=\"p1\">][GetStarted]</ept>."
    },
    {
      "pos": [
        8682,
        8719
      ],
      "content": "Open <bpt id=\"p1\">*</bpt>Controllers\\HomeController.cs<ept id=\"p1\">*</ept>."
    },
    {
      "pos": [
        8724,
        8795
      ],
      "content": "Delete the <ph id=\"ph1\">`About()`</ph> method and insert the following code in its place."
    },
    {
      "pos": [
        9018,
        9131
      ],
      "content": "<bpt id=\"p1\">[</bpt>Set a breakpoint<ept id=\"p1\">](http://www.visualstudio.com/get-started/debug-your-app-vs.aspx)</ept> on the <ph id=\"ph1\">`ViewBag.Message`</ph> line."
    },
    {
      "pos": [
        9136,
        9209
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the project, and click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        9214,
        9343
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Profile<ept id=\"p1\">**</ept> drop-down list, select the same profile that you used in <bpt id=\"p2\">[</bpt>Getting started with Azure and ASP.NET<ept id=\"p2\">][GetStarted]</ept>."
    },
    {
      "pos": [
        9348,
        9446
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> tab, and change <bpt id=\"p2\">**</bpt>Configuration<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Debug<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Publish<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Publish in debug mode",
      "pos": [
        9454,
        9475
      ]
    },
    {
      "content": "After deployment finishes and your browser opens to the Azure URL of your web app, close the browser.",
      "pos": [
        9555,
        9656
      ]
    },
    {
      "pos": [
        9661,
        9803
      ],
      "content": "For Visual Studio 2013: In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept> expand <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept>, expand <bpt id=\"p3\">**</bpt>Web Apps<ept id=\"p3\">**</ept>, right-click your web app, and click <bpt id=\"p4\">**</bpt>Attach Debugger<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Attach debugger",
      "pos": [
        9812,
        9827
      ]
    },
    {
      "content": "The browser automatically opens to your home page running in Azure.",
      "pos": [
        9910,
        9977
      ]
    },
    {
      "content": "You might have to wait 20 seconds or so while Azure sets up the server for debugging.",
      "pos": [
        9978,
        10063
      ]
    },
    {
      "content": "This delay only happens the first time you run in debug mode on a web app.",
      "pos": [
        10064,
        10138
      ]
    },
    {
      "content": "Subsequent times within the next 48 hours when you start debugging again there won't be a delay.",
      "pos": [
        10139,
        10235
      ]
    },
    {
      "pos": [
        10240,
        10296
      ],
      "content": "For Visual Studio 2012 with Update 4:<ph id=\"ph1\">&lt;a id=\"vs2012\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        10304,
        10446
      ],
      "content": "In the Azure Management Portal, go to <bpt id=\"p1\">**</bpt>Settings &gt; Application settings<ept id=\"p1\">**</ept> for your web app, and then scroll down to the <bpt id=\"p2\">**</bpt>Debugging<ept id=\"p2\">**</ept> section."
    },
    {
      "pos": [
        10454,
        10543
      ],
      "content": "Set <bpt id=\"p1\">**</bpt>Remote Debugging<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>On<ept id=\"p2\">**</ept>, and set <bpt id=\"p3\">**</bpt>Remote Visual Studio Version<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>2012<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        10551,
        10616
      ],
      "content": "In the Visual Studio <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Attach to Process<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        10624,
        10711
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Qualifier<ept id=\"p1\">**</ept> box, enter the URL for your web app, without the <ph id=\"ph1\">`http://`</ph> prefix."
    },
    {
      "pos": [
        10720,
        10761
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Show processes from all users<ept id=\"p1\">**</ept>."
    },
    {
      "content": "When you're prompted for credentials, enter the user name and password that has permissions to deploy content to the web app.",
      "pos": [
        10769,
        10894
      ]
    },
    {
      "content": "To get these credentials, go to the Dashboard tab for your web app in the management portal and click <bpt id=\"p1\">**</bpt>Download the publish profile<ept id=\"p1\">**</ept>.",
      "pos": [
        10895,
        11030
      ]
    },
    {
      "content": "Open the file in a text editor, and you'll find the user name and password after the first occurrences of <bpt id=\"p1\">**</bpt>userName=<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>userPWD=<ept id=\"p2\">**</ept>.",
      "pos": [
        11031,
        11168
      ]
    },
    {
      "pos": [
        11177,
        11288
      ],
      "content": "When the processes appear in the <bpt id=\"p1\">**</bpt>Available Processes<ept id=\"p1\">**</ept> table, select <bpt id=\"p2\">**</bpt>w3wp.exe<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Attach<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Open a browser to the URL of your web app.",
      "pos": [
        11296,
        11338
      ]
    },
    {
      "content": "You might have to wait 20 seconds or so while Azure sets up the server for debugging.",
      "pos": [
        11344,
        11429
      ]
    },
    {
      "content": "This delay only happens the first time you run in debug mode on a web app.",
      "pos": [
        11430,
        11504
      ]
    },
    {
      "content": "Subsequent times within the next 48 hours when you start debugging again there won't be a delay.",
      "pos": [
        11505,
        11601
      ]
    },
    {
      "pos": [
        11606,
        11634
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>About<ept id=\"p1\">**</ept> in the menu."
    },
    {
      "content": "Visual Studio stops on the breakpoint, and the code is running in Azure, not on your local computer.",
      "pos": [
        11640,
        11740
      ]
    },
    {
      "pos": [
        11745,
        11805
      ],
      "content": "Hover over the <ph id=\"ph1\">`currentTime`</ph> variable to see the time value."
    },
    {
      "content": "View variable in debug mode running in Azure",
      "pos": [
        11813,
        11857
      ]
    },
    {
      "content": "The time you see is the Azure server time, which may be in a different time zone than your local computer.",
      "pos": [
        11939,
        12045
      ]
    },
    {
      "pos": [
        12050,
        12131
      ],
      "content": "Enter a new value for the <ph id=\"ph1\">`currentTime`</ph> variable, such as \"Now running in Azure\"."
    },
    {
      "content": "Press F5 to continue running.",
      "pos": [
        12136,
        12165
      ]
    },
    {
      "content": "The About page running in Azure displays the new value that you entered into the currentTime variable.",
      "pos": [
        12171,
        12273
      ]
    },
    {
      "content": "About page with new value",
      "pos": [
        12281,
        12306
      ]
    },
    {
      "pos": [
        12389,
        12442
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"remotedebugwj\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Remote debugging WebJobs"
    },
    {
      "content": "This section shows how to debug remotely using the project and web app you create in <bpt id=\"p1\">[</bpt>Get Started with the Azure WebJobs SDK<ept id=\"p1\">](websites-dotnet-webjobs-sdk.md)</ept>.",
      "pos": [
        12444,
        12602
      ]
    },
    {
      "content": "The features shown on in this section are available only in Visual Studio 2013 with Update 4.",
      "pos": [
        12603,
        12696
      ]
    },
    {
      "content": "Remote debugging only works with continuous WebJobs.",
      "pos": [
        12697,
        12749
      ]
    },
    {
      "content": "Scheduled and on-demand WebJobs don't support debugging.",
      "pos": [
        12750,
        12806
      ]
    },
    {
      "pos": [
        12811,
        12907
      ],
      "content": "Open the web project that you created in <bpt id=\"p1\">[</bpt>Get Started with the Azure WebJobs SDK<ept id=\"p1\">][GetStartedWJ]</ept>."
    },
    {
      "pos": [
        12912,
        12965
      ],
      "content": "In the ContosoAdsWebJob project, open <bpt id=\"p1\">*</bpt>Functions.cs<ept id=\"p1\">*</ept>."
    },
    {
      "pos": [
        12970,
        13109
      ],
      "content": "<bpt id=\"p1\">[</bpt>Set a breakpoint<ept id=\"p1\">](http://www.visualstudio.com/get-started/debug-your-app-vs.aspx)</ept> on the first statement in the <ph id=\"ph1\">`GnerateThumbnail`</ph> method."
    },
    {
      "content": "Set breakpoint",
      "pos": [
        13117,
        13131
      ]
    },
    {
      "pos": [
        13207,
        13309
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the web project (not the WebJob project), and click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        13314,
        13463
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Profile<ept id=\"p1\">**</ept> drop-down list, select the same profile that you used in <bpt id=\"p2\">[</bpt>Get Started with the Azure WebJobs SDK<ept id=\"p2\">](websites-dotnet-webjobs-sdk.md)</ept>."
    },
    {
      "pos": [
        13468,
        13566
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> tab, and change <bpt id=\"p2\">**</bpt>Configuration<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Debug<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Publish<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Visual Studio deploys the web and WebJob projects, and your browser opens to the Azure URL of your web app.",
      "pos": [
        13572,
        13679
      ]
    },
    {
      "pos": [
        13684,
        13828
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept> expand <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Web Apps<ept id=\"p3\">**</ept> &gt; your web app &gt; <bpt id=\"p4\">**</bpt>WebJobs<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>Continuous<ept id=\"p5\">**</ept>, and then right-click <bpt id=\"p6\">**</bpt>ContosoAdsWebJob<ept id=\"p6\">**</ept>."
    },
    {
      "pos": [
        13833,
        13859
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Attach Debugger<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Attach debugger",
      "pos": [
        13868,
        13883
      ]
    },
    {
      "content": "The browser automatically opens to your home page running in Azure.",
      "pos": [
        13956,
        14023
      ]
    },
    {
      "content": "You might have to wait 20 seconds or so while Azure sets up the server for debugging.",
      "pos": [
        14024,
        14109
      ]
    },
    {
      "content": "This delay only happens the first time you run in debug mode on a web app.",
      "pos": [
        14110,
        14184
      ]
    },
    {
      "content": "The next time you attach the debugger there won't be a delay, if you do it within 48 hours.",
      "pos": [
        14185,
        14276
      ]
    },
    {
      "content": "In the web browser that is opened to the Contoso Ads home page, create a new ad.",
      "pos": [
        14281,
        14361
      ]
    },
    {
      "content": "Creating an ad causes a queue message to be created, which will be picked up by the WebJob and processed.",
      "pos": [
        14368,
        14473
      ]
    },
    {
      "content": "When the WebJobs SDK calls the function to process the queue message, the code will hit your breakpoint.",
      "pos": [
        14474,
        14578
      ]
    },
    {
      "content": "When the debugger breaks at your breakpoint, you can examine and change variable values while the program is running the cloud.",
      "pos": [
        14583,
        14710
      ]
    },
    {
      "content": "In the following illustration the debugger shows the contents of the blobInfo object that was passed to the GenerateThumbnail method.",
      "pos": [
        14711,
        14844
      ]
    },
    {
      "content": "blobInfo object in debugger",
      "pos": [
        14852,
        14879
      ]
    },
    {
      "content": "Press F5 to continue running.",
      "pos": [
        14952,
        14981
      ]
    },
    {
      "content": "The GenerateThumbnail method finishes creating the thumbnail.",
      "pos": [
        14987,
        15048
      ]
    },
    {
      "content": "In the browser, refresh the Index page and you see the thumbnail.",
      "pos": [
        15053,
        15118
      ]
    },
    {
      "content": "In Visual Studio, press SHIFT+F5 to stop debugging.",
      "pos": [
        15123,
        15174
      ]
    },
    {
      "pos": [
        15179,
        15270
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, right-click the ContosoAdsWebJob node and click <bpt id=\"p2\">**</bpt>View Dashboard<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Sign in with your Azure credentials, and then click the WebJob name to go to the page for your WebJob.",
      "pos": [
        15275,
        15377
      ]
    },
    {
      "content": "Click ContosoAdsWebJob",
      "pos": [
        15386,
        15408
      ]
    },
    {
      "content": "The Dashboard shows that the GenerateThumbnail function executed recently.",
      "pos": [
        15481,
        15555
      ]
    },
    {
      "pos": [
        15561,
        15692
      ],
      "content": "(The next time you click <bpt id=\"p1\">**</bpt>View Dashboard<ept id=\"p1\">**</ept>, you don't have to sign in, and the browser goes directly to the page for your WebJob.)"
    },
    {
      "content": "Click the function name to see details about the function execution.",
      "pos": [
        15697,
        15765
      ]
    },
    {
      "content": "Function details",
      "pos": [
        15773,
        15789
      ]
    },
    {
      "pos": [
        15861,
        15996
      ],
      "content": "If your function <bpt id=\"p1\">[</bpt>wrote logs<ept id=\"p1\">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#logs)</ept>, you could click <bpt id=\"p2\">**</bpt>ToggleOutput<ept id=\"p2\">**</ept> to see them."
    },
    {
      "content": "Notes about remote debugging",
      "pos": [
        16001,
        16029
      ]
    },
    {
      "content": "Running in debug mode in production is not recommended.",
      "pos": [
        16033,
        16088
      ]
    },
    {
      "content": "If your production web app is not scaled out to multiple server instances, debugging will prevent the web server from responding to other requests.",
      "pos": [
        16089,
        16236
      ]
    },
    {
      "content": "If you do have multiple web server instances, when you attach to the debugger you'll get a random instance, and you have no way to ensure that subsequent browser requests will go to that instance.",
      "pos": [
        16237,
        16433
      ]
    },
    {
      "content": "Also, you typically don't deploy a debug build to production, and compiler optimizations for release builds might make it impossible to show what is happening line by line in your source code.",
      "pos": [
        16434,
        16626
      ]
    },
    {
      "content": "For troubleshooting production problems, your best resource is application tracing and web server logs.",
      "pos": [
        16627,
        16730
      ]
    },
    {
      "content": "Avoid long stops at breakpoints when remote debugging.",
      "pos": [
        16734,
        16788
      ]
    },
    {
      "content": "Azure treats a process that is stopped for longer than a few minutes as an unresponsive process, and shuts it down.",
      "pos": [
        16789,
        16904
      ]
    },
    {
      "content": "While you're debugging, the server is sending data to Visual Studio, which could affect bandwidth charges.",
      "pos": [
        16908,
        17014
      ]
    },
    {
      "content": "For information about bandwidth rates, see <bpt id=\"p1\">[</bpt>Azure Pricing<ept id=\"p1\">](/pricing/calculator/)</ept>.",
      "pos": [
        17015,
        17096
      ]
    },
    {
      "content": "Make sure that the <ph id=\"ph1\">`debug`</ph> attribute of the <ph id=\"ph2\">`compilation`</ph> element in the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> file is set to true.",
      "pos": [
        17100,
        17206
      ]
    },
    {
      "content": "It is set to true by default when you publish a debug build configuration.",
      "pos": [
        17207,
        17281
      ]
    },
    {
      "content": "If you find that the debugger won't step into code that you want to debug, you might have to change the Just My Code setting.",
      "pos": [
        17438,
        17563
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Restrict stepping to Just My Code<ept id=\"p1\">](http://msdn.microsoft.com/library/vstudio/y740d9d3.aspx#BKMK_Restrict_stepping_to_Just_My_Code)</ept>.",
      "pos": [
        17565,
        17723
      ]
    },
    {
      "content": "A timer starts on the server when you enable the remote debugging feature, and after 48 hours the feature is automatically turned off.",
      "pos": [
        17727,
        17861
      ]
    },
    {
      "content": "This 48 hour limit is done for security and performance reasons.",
      "pos": [
        17862,
        17926
      ]
    },
    {
      "content": "You can easily turn the feature back on as many times as you like.",
      "pos": [
        17927,
        17993
      ]
    },
    {
      "content": "We recommend leaving it disabled when you are not actively debugging.",
      "pos": [
        17994,
        18063
      ]
    },
    {
      "content": "You can manually attach the debugger to any process, not only the web app process (w3wp.exe).",
      "pos": [
        18067,
        18160
      ]
    },
    {
      "content": "For more information about how to use debug mode in Visual Studio, see <bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/vstudio/sc65sadd.aspx)</ept>.",
      "pos": [
        18161,
        18324
      ]
    },
    {
      "pos": [
        18329,
        18380
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"logsoverview\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Diagnostic logs overview"
    },
    {
      "content": "An ASP.NET application that runs in an Azure web app can create the following kinds of logs:",
      "pos": [
        18382,
        18474
      ]
    },
    {
      "pos": [
        18478,
        18673
      ],
      "content": "**Application tracing logs**<br/>\nThe application creates these logs by calling methods of the [System.Diagnostics.Trace](http://msdn.microsoft.com/library/system.diagnostics.trace.aspx) class.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Application tracing logs<ept id=\"p1\">**</ept>",
          "pos": [
            0,
            28
          ]
        },
        {
          "content": "The application creates these logs by calling methods of the <bpt id=\"p1\">[</bpt>System.Diagnostics.Trace<ept id=\"p1\">](http://msdn.microsoft.com/library/system.diagnostics.trace.aspx)</ept> class.",
          "pos": [
            34,
            193
          ]
        }
      ]
    },
    {
      "pos": [
        18676,
        18776
      ],
      "content": "**Web server logs**<br/>\nThe web server creates a log entry for every HTTP request to the web app.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Web server logs<ept id=\"p1\">**</ept>",
          "pos": [
            0,
            19
          ]
        },
        {
          "content": "The web server creates a log entry for every HTTP request to the web app.",
          "pos": [
            25,
            98
          ]
        }
      ]
    },
    {
      "pos": [
        18779,
        18962
      ],
      "content": "**Detailed error message logs**<br/>\nThe web server creates an HTML page with some additional information for failed HTTP requests (those that result in status code 400 or greater).",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Detailed error message logs<ept id=\"p1\">**</ept>",
          "pos": [
            0,
            31
          ]
        },
        {
          "content": "The web server creates an HTML page with some additional information for failed HTTP requests (those that result in status code 400 or greater).",
          "pos": [
            37,
            181
          ]
        }
      ]
    },
    {
      "pos": [
        18966,
        19172
      ],
      "content": "**Failed request tracing logs**<br/>\nThe web server creates an XML file with detailed tracing information for failed HTTP requests. The web server also provides an XSL file to format the XML in a browser.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Failed request tracing logs<ept id=\"p1\">**</ept>",
          "pos": [
            0,
            31
          ]
        },
        {
          "content": "The web server creates an XML file with detailed tracing information for failed HTTP requests. The web server also provides an XSL file to format the XML in a browser.",
          "pos": [
            37,
            204
          ],
          "nodes": [
            {
              "content": "The web server creates an XML file with detailed tracing information for failed HTTP requests.",
              "pos": [
                0,
                94
              ]
            },
            {
              "content": "The web server also provides an XSL file to format the XML in a browser.",
              "pos": [
                95,
                167
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "Logging affects web app performance, so Azure gives you the ability to enable or disable each type of log as needed.",
      "pos": [
        19176,
        19292
      ]
    },
    {
      "content": "For application logs, you can specify that only logs above a certain severity level should be written.",
      "pos": [
        19293,
        19395
      ]
    },
    {
      "content": "When you create a new web app, by default all logging is disabled.",
      "pos": [
        19396,
        19462
      ]
    },
    {
      "content": "Logs are written to files in a <bpt id=\"p1\">*</bpt>LogFiles<ept id=\"p1\">*</ept> folder in the file system of your web app and are accessible via FTP.",
      "pos": [
        19464,
        19575
      ]
    },
    {
      "content": "Web server logs and application logs can also be written to an Azure Storage account.",
      "pos": [
        19576,
        19661
      ]
    },
    {
      "content": "You can retain a greater volume of logs in a storage account than is possible in the file system.",
      "pos": [
        19662,
        19759
      ]
    },
    {
      "content": "You're limited to a maximum of 100 megabytes of logs when you use the file system.",
      "pos": [
        19760,
        19842
      ]
    },
    {
      "content": "(File system logs are only for short-term retention.",
      "pos": [
        19843,
        19895
      ]
    },
    {
      "content": "Azure deletes old log files to make room for new ones after the limit is reached.)",
      "pos": [
        19896,
        19978
      ]
    },
    {
      "pos": [
        19985,
        20050
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"apptracelogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create and view application trace logs"
    },
    {
      "content": "In this section you'll do the following tasks:",
      "pos": [
        20052,
        20098
      ]
    },
    {
      "pos": [
        20102,
        20213
      ],
      "content": "Add tracing statements to the web project that you created in <bpt id=\"p1\">[</bpt>Get started with Azure and ASP.NET<ept id=\"p1\">][GetStarted]</ept>."
    },
    {
      "content": "View the logs when you run the project locally.",
      "pos": [
        20216,
        20263
      ]
    },
    {
      "content": "View the logs as they are generated by the application running in Azure.",
      "pos": [
        20266,
        20338
      ]
    },
    {
      "content": "For information about how to create application logs in WebJobs, see <bpt id=\"p1\">[</bpt>How to work with Azure queue storage using the WebJobs SDK - How to write logs<ept id=\"p1\">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#logs)</ept>.",
      "pos": [
        20341,
        20550
      ]
    },
    {
      "content": "The following instructions for viewing logs and controlling how they're stored in Azure apply also to application logs created by WebJobs.",
      "pos": [
        20551,
        20689
      ]
    },
    {
      "content": "Add tracing statements to the application",
      "pos": [
        20696,
        20737
      ]
    },
    {
      "pos": [
        20742,
        20918
      ],
      "content": "Open <bpt id=\"p1\">*</bpt>Controllers\\HomeController.cs<ept id=\"p1\">*</ept>, and replace the file contents with the following code in order to add <ph id=\"ph1\">`Trace`</ph> statements and a <ph id=\"ph2\">`using`</ph> statement for <ph id=\"ph3\">`System.Diagnostics`</ph>:"
    },
    {
      "content": "View the tracing output locally",
      "pos": [
        22658,
        22689
      ]
    },
    {
      "content": "Press F5 to run the application in debug mode.",
      "pos": [
        22694,
        22740
      ]
    },
    {
      "content": "The default trace listener writes all trace output to the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window, along with other Debug output.",
      "pos": [
        22746,
        22853
      ]
    },
    {
      "content": "The following illustration shows the output from the trace statements that you added to the <ph id=\"ph1\">`Index`</ph> method.",
      "pos": [
        22854,
        22961
      ]
    },
    {
      "content": "Tracing in Debug window",
      "pos": [
        22969,
        22992
      ]
    },
    {
      "content": "The following steps show how to view trace output in a web page, without compiling in debug mode.",
      "pos": [
        23073,
        23170
      ]
    },
    {
      "pos": [
        23175,
        23367
      ],
      "content": "Open the application Web.config file (the one located in the project folder) and add a <ph id=\"ph1\">`&lt;system.diagnostics&gt;`</ph> element at the end of the file just before the closing <ph id=\"ph2\">`&lt;/configuration&gt;`</ph> element:"
    },
    {
      "pos": [
        23802,
        23884
      ],
      "content": "The <ph id=\"ph1\">`WebPageTraceListener`</ph> lets you view trace output by browsing to <ph id=\"ph2\">`/trace.axd`</ph>."
    },
    {
      "pos": [
        23889,
        24064
      ],
      "content": "Add a <ph id=\"ph1\">&lt;a href=\"http://msdn.microsoft.com/library/vstudio/6915t83k(v=vs.100).aspx\"&gt;</ph>trace element<ph id=\"ph2\">&lt;/a&gt;</ph> under <ph id=\"ph3\">`&lt;system.web&gt;`</ph> in the Web.config file, such as the following example:"
    },
    {
      "content": "Press CTRL+F5 to run the application.",
      "pos": [
        24171,
        24208
      ]
    },
    {
      "pos": [
        24213,
        24366
      ],
      "content": "In the address bar of the browser window, add <bpt id=\"p1\">*</bpt>trace.axd<ept id=\"p1\">*</ept> to the URL, and then press Enter (the URL will be similar to http://localhost:53370/trace.axd)."
    },
    {
      "pos": [
        24371,
        24474
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Application Trace<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>View Details<ept id=\"p2\">**</ept> on the first line (not the BrowserLink line)."
    },
    {
      "content": "trace.axd",
      "pos": [
        24482,
        24491
      ]
    },
    {
      "pos": [
        24569,
        24730
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Request Details<ept id=\"p1\">**</ept> page appears, and in the <bpt id=\"p2\">**</bpt>Trace Information<ept id=\"p2\">**</ept> section you see the output from the trace statements that you added to the <ph id=\"ph1\">`Index`</ph> method."
    },
    {
      "content": "trace.axd",
      "pos": [
        24738,
        24747
      ]
    },
    {
      "content": "By default, <ph id=\"ph1\">`trace.axd`</ph> is only available locally.",
      "pos": [
        24825,
        24875
      ]
    },
    {
      "content": "If you wanted to make it available from a remote web app, you could add <ph id=\"ph1\">`localOnly=\"false\"`</ph> to the <ph id=\"ph2\">`trace`</ph> element in the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> file, as shown in the following example:",
      "pos": [
        24876,
        25051
      ]
    },
    {
      "pos": [
        25177,
        25378
      ],
      "content": "However, enabling <ph id=\"ph1\">`trace.axd`</ph> in a production web app is generally not recommended for security reasons, and in the following sections you'll see an easier way to read tracing logs in an Azure web app."
    },
    {
      "content": "View the tracing output in Azure",
      "pos": [
        25384,
        25416
      ]
    },
    {
      "pos": [
        25421,
        25497
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the web project and click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        25502,
        25555
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Publish Web<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        25561,
        25722
      ],
      "content": "After Visual Studio publishes your update, it opens a browser window to your home page (assuming you didn't clear <bpt id=\"p1\">**</bpt>Destination URL<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> tab)."
    },
    {
      "pos": [
        25727,
        25811
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, right-click your web app and select <bpt id=\"p2\">**</bpt>View Streaming Logs<ept id=\"p2\">**</ept>."
    },
    {
      "content": "View Streaming Logs in context menu",
      "pos": [
        25820,
        25855
      ]
    },
    {
      "pos": [
        25936,
        26096
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window shows that you are connected to the log-streaming service, and adds a notification line each minute that goes by without a log to display."
    },
    {
      "content": "View Streaming Logs in context menu",
      "pos": [
        26104,
        26139
      ]
    },
    {
      "pos": [
        26216,
        26295
      ],
      "content": "In the browser window that shows your application home page, click <bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        26301,
        26427
      ],
      "content": "Within a few seconds the output from the error-level trace you added to the <ph id=\"ph1\">`Contact`</ph> method appears in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window."
    },
    {
      "content": "Error trace in Output window",
      "pos": [
        26435,
        26463
      ]
    },
    {
      "content": "Visual Studio is only showing error-level traces because that is the default setting when you enable the log monitoring service.",
      "pos": [
        26542,
        26670
      ]
    },
    {
      "content": "When you create a new Azure web app, all logging is disabled by default, as you saw when you opened the settings page earlier:",
      "pos": [
        26671,
        26797
      ]
    },
    {
      "content": "Application Logging off",
      "pos": [
        26805,
        26828
      ]
    },
    {
      "pos": [
        27370,
        27471
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, right-click the web app, and then click <bpt id=\"p2\">**</bpt>View Settings<ept id=\"p2\">**</ept> as you did earlier."
    },
    {
      "pos": [
        27476,
        27561
      ],
      "content": "Change <bpt id=\"p1\">**</bpt>Application Logging (File System)<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Verbose<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Save<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Setting trace level to Verbose",
      "pos": [
        27570,
        27600
      ]
    },
    {
      "pos": [
        27681,
        27811
      ],
      "content": "In the browser window that is now showing your <bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Home<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>About<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Contact<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        27817,
        27894
      ],
      "content": "Within a few seconds, the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window shows all of your tracing output."
    },
    {
      "content": "Verbose trace output",
      "pos": [
        27902,
        27922
      ]
    },
    {
      "content": "In this section you enabled and disabled logging by using Azure web app settings.",
      "pos": [
        28004,
        28085
      ]
    },
    {
      "content": "You can also enable and disable trace listeners by modifying the Web.config file.",
      "pos": [
        28086,
        28167
      ]
    },
    {
      "content": "However, modifying the Web.config file causes the app domain to recycle, while enabling logging via the web app configuration doesn't do that.",
      "pos": [
        28168,
        28310
      ]
    },
    {
      "content": "If the problem takes a long time to reproduce, or is intermittent, recycling the app domain might \"fix\" it and force you to wait until it happens again.",
      "pos": [
        28311,
        28463
      ]
    },
    {
      "content": "Enabling diagnostics in Azure doesn't do this, so you can start capturing error information immediately.",
      "pos": [
        28464,
        28568
      ]
    },
    {
      "content": "Output window features",
      "pos": [
        28574,
        28596
      ]
    },
    {
      "pos": [
        28598,
        28681
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Azure Logs<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Output<ept id=\"p2\">**</ept> Window has several buttons and a text box:"
    },
    {
      "content": "Logs tab buttons",
      "pos": [
        28685,
        28701
      ]
    },
    {
      "content": "These perform the following functions:",
      "pos": [
        28771,
        28809
      ]
    },
    {
      "pos": [
        28813,
        28841
      ],
      "content": "Clear the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window."
    },
    {
      "content": "Enable or disable word wrap.",
      "pos": [
        28844,
        28872
      ]
    },
    {
      "content": "Start or stop monitoring logs.",
      "pos": [
        28875,
        28905
      ]
    },
    {
      "content": "Specify which logs to monitor.",
      "pos": [
        28908,
        28938
      ]
    },
    {
      "content": "Download logs.",
      "pos": [
        28941,
        28955
      ]
    },
    {
      "content": "Filter logs based on a search string or a regular expression.",
      "pos": [
        28958,
        29019
      ]
    },
    {
      "pos": [
        29022,
        29050
      ],
      "content": "Close the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window."
    },
    {
      "content": "If you enter a search string or regular expression, Visual Studio filters logging information at the client.",
      "pos": [
        29052,
        29160
      ]
    },
    {
      "content": "That means you can enter the criteria after the logs are displayed in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window and you can change filtering criteria without having to regenerate the logs.",
      "pos": [
        29161,
        29329
      ]
    },
    {
      "pos": [
        29334,
        29382
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"webserverlogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>View web server logs"
    },
    {
      "content": "Web server logs record all HTTP activity for the web app.",
      "pos": [
        29384,
        29441
      ]
    },
    {
      "content": "In order to see them in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window you have to enable them for the web app and tell Visual Studio that you want to monitor them.",
      "pos": [
        29442,
        29581
      ]
    },
    {
      "pos": [
        29587,
        29733
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Azure Web App Configuration<ept id=\"p1\">**</ept> tab that you opened from <bpt id=\"p2\">**</bpt>Server Explorer<ept id=\"p2\">**</ept>, change Web Server Logging to <bpt id=\"p3\">**</bpt>On<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Save<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Enable web server logging",
      "pos": [
        29741,
        29766
      ]
    },
    {
      "pos": [
        29852,
        29935
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> Window, click the <bpt id=\"p2\">**</bpt>Specify which Azure logs to monitor<ept id=\"p2\">**</ept> button."
    },
    {
      "content": "Specify which Azure logs to monitor",
      "pos": [
        29947,
        29982
      ]
    },
    {
      "pos": [
        30061,
        30156
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Azure Logging Options<ept id=\"p1\">**</ept> dialog box, select <bpt id=\"p2\">**</bpt>Web server logs<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Monitor web server logs",
      "pos": [
        30164,
        30187
      ]
    },
    {
      "pos": [
        30270,
        30381
      ],
      "content": "In the browser window that shows the web app, click <bpt id=\"p1\">**</bpt>Home<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>About<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Contact<ept id=\"p3\">**</ept>."
    },
    {
      "content": "The application logs generally appear first, followed by the web server logs.",
      "pos": [
        30387,
        30464
      ]
    },
    {
      "content": "You might have to wait a while for the logs to appear.",
      "pos": [
        30465,
        30519
      ]
    },
    {
      "content": "Web server logs in Output window",
      "pos": [
        30528,
        30560
      ]
    },
    {
      "content": "By default, when you first enable web server logs by using Visual Studio, Azure writes the logs to the file system.",
      "pos": [
        30632,
        30747
      ]
    },
    {
      "content": "As an alternative, you can use the management portal to specify that web server logs should be written to a blob container in a storage account.",
      "pos": [
        30748,
        30892
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">**</bpt>site diagnostics<ept id=\"p1\">**</ept> section in <bpt id=\"p2\">[</bpt>How to Configure Web Sites<ept id=\"p2\">](/manage/services/web-sites/how-to-configure-websites/#howtochangeconfig)</ept>.",
      "pos": [
        30893,
        31057
      ]
    },
    {
      "content": "If you use the management portal to enable web server logging to an Azure storage account, and then disable logging in Visual Studio, when you re-enable logging in Visual Studio your storage account settings are restored.",
      "pos": [
        31060,
        31281
      ]
    },
    {
      "pos": [
        31287,
        31351
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"detailederrorlogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>View detailed error message logs"
    },
    {
      "content": "Detailed error logs provide some additional information about HTTP requests that result in error response codes (400 or above).",
      "pos": [
        31353,
        31480
      ]
    },
    {
      "content": "In order to see them in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window, you have to enable them for the web app and tell Visual Studio that you want to monitor them.",
      "pos": [
        31481,
        31621
      ]
    },
    {
      "pos": [
        31626,
        31781
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Azure Web App Configuration<ept id=\"p1\">**</ept> tab that you opened from <bpt id=\"p2\">**</bpt>Server Explorer<ept id=\"p2\">**</ept>, change <bpt id=\"p3\">**</bpt>Detailed Error Messages<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>On<ept id=\"p4\">**</ept>, and then click <bpt id=\"p5\">**</bpt>Save<ept id=\"p5\">**</ept>."
    },
    {
      "content": "Enable detailed error messages",
      "pos": [
        31789,
        31819
      ]
    },
    {
      "pos": [
        31901,
        31984
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> Window, click the <bpt id=\"p2\">**</bpt>Specify which Azure logs to monitor<ept id=\"p2\">**</ept> button."
    },
    {
      "pos": [
        31989,
        32076
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Azure Logging Options<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>All logs<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Monitor all logs",
      "pos": [
        32084,
        32100
      ]
    },
    {
      "pos": [
        32178,
        32346
      ],
      "content": "In the address bar of the browser window, add an extra character to the URL to cause a 404 error (for example, <ph id=\"ph1\">`http://localhost:53370/Home/Contactx`</ph>), and press Enter."
    },
    {
      "pos": [
        32352,
        32444
      ],
      "content": "After several seconds the detailed error log appears in the Visual Studio <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window."
    },
    {
      "content": "Detailed error log in Output window",
      "pos": [
        32452,
        32487
      ]
    },
    {
      "content": "Control+click the link to see the log output formatted in a browser:",
      "pos": [
        32572,
        32640
      ]
    },
    {
      "content": "Detailed error log in browser window",
      "pos": [
        32648,
        32684
      ]
    },
    {
      "pos": [
        32777,
        32829
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"downloadlogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Download file system logs"
    },
    {
      "pos": [
        32831,
        32926
      ],
      "content": "Any logs that you can monitor in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window can also be downloaded as a <bpt id=\"p2\">*</bpt>.zip<ept id=\"p2\">*</ept> file."
    },
    {
      "pos": [
        32932,
        32992
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>Download Streaming Logs<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Logs tab buttons",
      "pos": [
        33000,
        33016
      ]
    },
    {
      "pos": [
        33097,
        33178
      ],
      "content": "File Explorer opens to your <bpt id=\"p1\">*</bpt>Downloads<ept id=\"p1\">*</ept> folder with the downloaded file selected."
    },
    {
      "content": "Downloaded file",
      "pos": [
        33186,
        33201
      ]
    },
    {
      "pos": [
        33283,
        33351
      ],
      "content": "Extract the <bpt id=\"p1\">*</bpt>.zip<ept id=\"p1\">*</ept> file, and you see the following folder structure:"
    },
    {
      "content": "Downloaded file",
      "pos": [
        33359,
        33374
      ]
    },
    {
      "pos": [
        33459,
        33541
      ],
      "content": "Application tracing logs are in <bpt id=\"p1\">*</bpt>.txt<ept id=\"p1\">*</ept> files in the <bpt id=\"p2\">*</bpt>LogFiles\\Application<ept id=\"p2\">*</ept> folder."
    },
    {
      "content": "Web server logs are in <bpt id=\"p1\">*</bpt>.log<ept id=\"p1\">*</ept> files in the <bpt id=\"p2\">*</bpt>LogFiles\\http\\RawLogs<ept id=\"p2\">*</ept> folder.",
      "pos": [
        33548,
        33622
      ]
    },
    {
      "content": "You can use a tool such as <bpt id=\"p1\">[</bpt>Log Parser<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?displaylang=en&amp;id=24659)</ept> to view and manipulate these files.",
      "pos": [
        33623,
        33770
      ]
    },
    {
      "pos": [
        33777,
        33866
      ],
      "content": "Detailed error message logs are in <bpt id=\"p1\">*</bpt>.html<ept id=\"p1\">*</ept> files in the <bpt id=\"p2\">*</bpt>LogFiles\\DetailedErrors<ept id=\"p2\">*</ept> folder."
    },
    {
      "content": "(The <bpt id=\"p1\">*</bpt>deployments<ept id=\"p1\">*</ept> folder is for files created by source control publishing; it doesn't have anything related to Visual Studio publishing.",
      "pos": [
        33872,
        34010
      ]
    },
    {
      "content": "The <bpt id=\"p1\">*</bpt>Git<ept id=\"p1\">*</ept> folder is for traces related to source control publishing and the log file streaming service.)",
      "pos": [
        34011,
        34115
      ]
    },
    {
      "pos": [
        34122,
        34165
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"storagelogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>View storage logs"
    },
    {
      "content": "Application tracing logs can also be sent to an Azure storage account, and you can view them in Visual Studio.",
      "pos": [
        34167,
        34277
      ]
    },
    {
      "content": "To do that you'll create a storage account, enable storage logs in the management portal, and view them in the <bpt id=\"p1\">**</bpt>Logs<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Azure Web App<ept id=\"p2\">**</ept> window.",
      "pos": [
        34278,
        34434
      ]
    },
    {
      "content": "You can send logs to any or all of three destinations:",
      "pos": [
        34436,
        34490
      ]
    },
    {
      "content": "The file system.",
      "pos": [
        34494,
        34510
      ]
    },
    {
      "content": "Storage account tables.",
      "pos": [
        34513,
        34536
      ]
    },
    {
      "content": "Storage account blobs.",
      "pos": [
        34539,
        34561
      ]
    },
    {
      "content": "You can specify a different severity level for each destination.",
      "pos": [
        34563,
        34627
      ]
    },
    {
      "content": "Tables make it easy to view details of logs online, and they support streaming; you can query logs in tables and see new logs as they are being created.",
      "pos": [
        34630,
        34782
      ]
    },
    {
      "content": "Blobs make it easy to download logs in files and to analyze them using HDInsight, because HDInsight knows how to work with blob storage.",
      "pos": [
        34783,
        34919
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">**</bpt>Hadoop and MapReduce<ept id=\"p1\">**</ept> in <bpt id=\"p2\">[</bpt>Data Storage Options (Building Real-World Cloud Apps with Azure)<ept id=\"p2\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/data-storage-options)</ept>.",
      "pos": [
        34920,
        35183
      ]
    },
    {
      "content": "You currently have file system logs set to verbose level; the following steps walk you through setting up information level logs to go to storage account tables.",
      "pos": [
        35185,
        35346
      ]
    },
    {
      "content": "Information level means all logs created by calling <ph id=\"ph1\">`Trace.TraceInformation`</ph>, <ph id=\"ph2\">`Trace.TraceWarning`</ph>, and <ph id=\"ph3\">`Trace.TraceError`</ph> will be displayed, but not logs created by calling <ph id=\"ph4\">`Trace.WriteLine`</ph>.",
      "pos": [
        35347,
        35539
      ]
    },
    {
      "content": "Storage accounts offer more storage and longer-lasting retention for logs compared to the file system.",
      "pos": [
        35541,
        35643
      ]
    },
    {
      "content": "Another advantage of sending application tracing logs to storage is that you get some additional information with each log that you don't get from file system logs.",
      "pos": [
        35644,
        35808
      ]
    },
    {
      "pos": [
        35813,
        35901
      ],
      "content": "Right-click <bpt id=\"p1\">**</bpt>Storage<ept id=\"p1\">**</ept> under the Azure node, and then click <bpt id=\"p2\">**</bpt>Create Storage Account<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Create Storage Account",
      "pos": [
        35905,
        35927
      ]
    },
    {
      "pos": [
        36001,
        36080
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Create Storage Account<ept id=\"p1\">**</ept> dialog, enter a name for the storage account."
    },
    {
      "content": "The name must be must be unique (no other Azure storage account can have the same name).",
      "pos": [
        36087,
        36175
      ]
    },
    {
      "content": "If the name you enter is already in use you'll get a chance to change it.",
      "pos": [
        36176,
        36249
      ]
    },
    {
      "pos": [
        36255,
        36328
      ],
      "content": "The URL to access your storage account will be <bpt id=\"p1\">*</bpt>{name}<ept id=\"p1\">*</ept>.core.windows.net."
    },
    {
      "pos": [
        36334,
        36415
      ],
      "content": "Set the <bpt id=\"p1\">**</bpt>Region or Affinity Group<ept id=\"p1\">**</ept> drop-down list to the region closest to you."
    },
    {
      "content": "This setting specifies which Azure datacenter will host your storage account.",
      "pos": [
        36421,
        36498
      ]
    },
    {
      "content": "For this tutorial your choice won't make a noticeable difference, but for a production web app you want your web server and your storage account to be in the same region to minimize latency and data egress charges.",
      "pos": [
        36499,
        36713
      ]
    },
    {
      "content": "The web app (which you'll create later) should run in a region as close as possible to the browsers accessing your web app in order to minimize latency.",
      "pos": [
        36714,
        36866
      ]
    },
    {
      "pos": [
        36871,
        36935
      ],
      "content": "Set the <bpt id=\"p1\">**</bpt>Replication<ept id=\"p1\">**</ept> drop-down list to <bpt id=\"p2\">**</bpt>Locally redundant<ept id=\"p2\">**</ept>."
    },
    {
      "content": "When geo-replication is enabled for a storage account, the stored content is replicated to a secondary datacenter to enable failover to that location in case of a major disaster in the primary location.",
      "pos": [
        36942,
        37144
      ]
    },
    {
      "content": "Geo-replication can incur additional costs.",
      "pos": [
        37145,
        37188
      ]
    },
    {
      "content": "For test and development accounts, you generally don't want to pay for geo-replication.",
      "pos": [
        37189,
        37276
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Create, manage, or delete a storage account<ept id=\"p1\">](../storage-create-storage-account/#replication-options)</ept>.",
      "pos": [
        37277,
        37405
      ]
    },
    {
      "pos": [
        37410,
        37427
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "New storage account",
      "pos": [
        37436,
        37455
      ]
    },
    {
      "pos": [
        37531,
        37660
      ],
      "content": "In the Visual Studio <bpt id=\"p1\">**</bpt>Azure Web App<ept id=\"p1\">**</ept> window, click the <bpt id=\"p2\">**</bpt>Logs<ept id=\"p2\">**</ept> tab, and then click <bpt id=\"p3\">**</bpt>Configure Logging in Management Portal<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        37666,
        37843
      ],
      "content": "<!-- todo:screenshot of new portal if the VS page link goes to new portal -->\n ![Configure logging](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-configlogging.png)",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Configure logging",
          "pos": [
            81,
            98
          ]
        }
      ]
    },
    {
      "content": "This opens the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab in the management portal for your web app.",
      "pos": [
        37849,
        37924
      ]
    },
    {
      "content": "Another way to get here is to click the <bpt id=\"p1\">**</bpt>Web Apps<ept id=\"p1\">**</ept> tab, click your web app, and then click the <bpt id=\"p2\">**</bpt>Configure<ept id=\"p2\">**</ept> tab.",
      "pos": [
        37925,
        38040
      ]
    },
    {
      "pos": [
        38045,
        38207
      ],
      "content": "In the management portal <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab, scroll down to the application diagnostics section, and then change <bpt id=\"p2\">**</bpt>Application Logging (Table Storage)<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>On<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        38212,
        38256
      ],
      "content": "Change <bpt id=\"p1\">**</bpt>Logging Level<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Information<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        38261,
        38292
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Manage Table Storage<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click Manage TableStorage",
      "pos": [
        38300,
        38325
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Manage table storage for application diagnostics<ept id=\"p1\">**</ept> box, you can choose your storage account if you have more than one.",
      "pos": [
        38415,
        38542
      ]
    },
    {
      "content": "You can create a new table or use an existing one.",
      "pos": [
        38543,
        38593
      ]
    },
    {
      "content": "Manage table storage",
      "pos": [
        38601,
        38621
      ]
    },
    {
      "pos": [
        38706,
        38808
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Manage table storage for application diagnostics<ept id=\"p1\">**</ept> box click the check mark to close the box."
    },
    {
      "pos": [
        38813,
        38872
      ],
      "content": "In the management portal <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab, click <bpt id=\"p2\">**</bpt>Save<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        38877,
        39003
      ],
      "content": "In the browser window that displays the application web app, click <bpt id=\"p1\">**</bpt>Home<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>About<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Contact<ept id=\"p3\">**</ept>."
    },
    {
      "content": "The logging information produced by browsing these web pages will be written to the storage account.",
      "pos": [
        39009,
        39109
      ]
    },
    {
      "pos": [
        39114,
        39231
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Logs<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Azure Web App<ept id=\"p2\">**</ept> window in Visual Studio, click <bpt id=\"p3\">**</bpt>Refresh<ept id=\"p3\">**</ept> under <bpt id=\"p4\">**</bpt>Diagnostic Summary<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Click Refresh",
      "pos": [
        39239,
        39252
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Diagnostic Summary<ept id=\"p1\">**</ept> section shows logs for the last 15 minutes by default.",
      "pos": [
        39335,
        39416
      ]
    },
    {
      "content": "You can change the period to see more logs.",
      "pos": [
        39417,
        39460
      ]
    },
    {
      "pos": [
        39467,
        39647
      ],
      "content": "(If you get a \"table not found\" error, verify that you browsed to the pages that do the tracing after you enabled <bpt id=\"p1\">**</bpt>Application Logging (Storage)<ept id=\"p1\">**</ept> and after you clicked <bpt id=\"p2\">**</bpt>Save<ept id=\"p2\">**</ept>.)"
    },
    {
      "content": "Storage logs",
      "pos": [
        39655,
        39667
      ]
    },
    {
      "content": "Notice that in this view you see <bpt id=\"p1\">**</bpt>Process ID<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Thread ID<ept id=\"p2\">**</ept> for each log, which you don't get in the file system logs.",
      "pos": [
        39747,
        39871
      ]
    },
    {
      "content": "You can see additional fields by viewing the Azure storage table directly.",
      "pos": [
        39872,
        39946
      ]
    },
    {
      "pos": [
        39951,
        39987
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>View all application logs<ept id=\"p1\">**</ept>."
    },
    {
      "content": "The trace log table appears in the Azure storage table viewer.",
      "pos": [
        39993,
        40055
      ]
    },
    {
      "pos": [
        40064,
        40265
      ],
      "content": "(If you get a \"sequence contains no elements\" error, open <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, expand the node for your storage account under the <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept> node, and then right-click <bpt id=\"p3\">**</bpt>Tables<ept id=\"p3\">**</ept> and click <bpt id=\"p4\">**</bpt>Refresh<ept id=\"p4\">**</ept>.)"
    },
    {
      "content": "Storage logs in table view",
      "pos": [
        40273,
        40299
      ]
    },
    {
      "content": "This view shows additional fields you don't see in any other views.",
      "pos": [
        40385,
        40452
      ]
    },
    {
      "content": "This view also enables you to filter logs by using special Query Builder UI for constructing a query.",
      "pos": [
        40453,
        40554
      ]
    },
    {
      "content": "For more information, see Working with Table Resources - Filtering Entities in <bpt id=\"p1\">[</bpt>Browsing Storage Resources with Server Explorer<ept id=\"p1\">](http://msdn.microsoft.com/library/ff683677.aspx)</ept>.",
      "pos": [
        40555,
        40733
      ]
    },
    {
      "content": "To look at the details for a single row, double-click one of the rows.",
      "pos": [
        40738,
        40808
      ]
    },
    {
      "content": "Trace table in Server Explorer",
      "pos": [
        40816,
        40846
      ]
    },
    {
      "pos": [
        40927,
        40991
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"failedrequestlogs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>View failed request tracing logs"
    },
    {
      "content": "Failed request tracing logs are useful when you need to understand the details of how IIS is handling an HTTP request, in scenarios such as URL rewriting or authentication problems.",
      "pos": [
        40993,
        41174
      ]
    },
    {
      "content": "Azure web apps use the same failed request tracing functionality that has been available with IIS 7.0 and later.",
      "pos": [
        41177,
        41289
      ]
    },
    {
      "content": "You don't have access to the IIS settings that configure which errors get logged, however.",
      "pos": [
        41290,
        41380
      ]
    },
    {
      "content": "When you enable failed request tracing, all errors are captured.",
      "pos": [
        41381,
        41445
      ]
    },
    {
      "content": "You can enable failed request tracing by using Visual Studio, but you can't view them in Visual Studio.",
      "pos": [
        41448,
        41551
      ]
    },
    {
      "content": "These logs are XML files.",
      "pos": [
        41552,
        41577
      ]
    },
    {
      "content": "The streaming log service only monitors files that are deemed readable in plain text mode:  <bpt id=\"p1\">*</bpt>.txt<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>.html<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>.log<ept id=\"p3\">*</ept> files.",
      "pos": [
        41578,
        41704
      ]
    },
    {
      "content": "You can view failed request tracing logs in a browser directly via FTP or locally after using an FTP tool to download them to your local computer.",
      "pos": [
        41706,
        41852
      ]
    },
    {
      "content": "In this section you'll view them in a browser directly.",
      "pos": [
        41853,
        41908
      ]
    },
    {
      "pos": [
        41913,
        42085
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Azure Web App<ept id=\"p2\">**</ept> window that you opened from <bpt id=\"p3\">**</bpt>Server Explorer<ept id=\"p3\">**</ept>, change <bpt id=\"p4\">**</bpt>Failed Request Tracing<ept id=\"p4\">**</ept> to <bpt id=\"p5\">**</bpt>On<ept id=\"p5\">**</ept>, and then click <bpt id=\"p6\">**</bpt>Save<ept id=\"p6\">**</ept>."
    },
    {
      "content": "Enable failed request tracing",
      "pos": [
        42093,
        42122
      ]
    },
    {
      "content": "In the address bar of the browser window that shows the web app, add an extra character to the URL and click Enter to cause a 404 error.",
      "pos": [
        42205,
        42341
      ]
    },
    {
      "content": "This causes a failed request tracing log to be created, and the following steps show how to view or download the log.",
      "pos": [
        42347,
        42464
      ]
    },
    {
      "pos": [
        42469,
        42585
      ],
      "content": "In Visual Studio, in the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Azure Web App<ept id=\"p2\">**</ept> window, click <bpt id=\"p3\">**</bpt>Open in Management Portal<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        42590,
        42741
      ],
      "content": "In the management portal blade for your web app, click <bpt id=\"p1\">**</bpt>All settings &gt; Deployment credentials<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Reset your deployment credentials<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Enter a new user name and password.",
      "pos": [
        42746,
        42781
      ]
    },
    {
      "content": "New FTP user name and password",
      "pos": [
        42789,
        42819
      ]
    },
    {
      "content": "In the management portal <bpt id=\"p1\">**</bpt>Dashboard<ept id=\"p1\">**</ept> tab press F5 to refresh the page, and then scroll down to where you see <bpt id=\"p2\">**</bpt>Deployment / FTP User<ept id=\"p2\">**</ept>.",
      "pos": [
        42906,
        43043
      ]
    },
    {
      "content": "Notice that the user name has the web app name prefixed to it.",
      "pos": [
        43044,
        43106
      ]
    },
    {
      "content": "When you log in, you have to use this full user name with the web app name prefixed to it as shown here.",
      "pos": [
        43109,
        43213
      ]
    },
    {
      "content": "**",
      "pos": [
        43213,
        43215
      ]
    },
    {
      "content": "In a new browser window, go to the URL that is shown under <bpt id=\"p1\">**</bpt>FTP Host Name<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Dashboard<ept id=\"p2\">**</ept> tab of the management portal page for your web app.",
      "pos": [
        43220,
        43369
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FTP Host Name<ept id=\"p1\">**</ept> is located near <bpt id=\"p2\">**</bpt>Deployment / FTP User<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Quick Glance<ept id=\"p3\">**</ept> section.",
      "pos": [
        43370,
        43462
      ]
    },
    {
      "content": "Log in using the FTP credentials that you created earlier (including the web app name prefix for the user name).",
      "pos": [
        43467,
        43579
      ]
    },
    {
      "content": "The browser shows the root folder of the web app.",
      "pos": [
        43585,
        43634
      ]
    },
    {
      "pos": [
        43639,
        43666
      ],
      "content": "Open the <bpt id=\"p1\">*</bpt>LogFiles<ept id=\"p1\">*</ept> folder."
    },
    {
      "content": "Open LogFiles folder",
      "pos": [
        43674,
        43694
      ]
    },
    {
      "content": "Open the folder that is named W3SVC plus a numeric value.",
      "pos": [
        43776,
        43833
      ]
    },
    {
      "content": "Open W3SVC folder",
      "pos": [
        43841,
        43858
      ]
    },
    {
      "content": "The folder contains XML files for any errors that have been logged after you enabled failed request tracing, and an XSL file that a browser can use to format the XML.",
      "pos": [
        43938,
        44104
      ]
    },
    {
      "content": "W3SVC folder",
      "pos": [
        44112,
        44124
      ]
    },
    {
      "content": "Click the XML file for the failed request that you want to see tracing information for.",
      "pos": [
        44211,
        44298
      ]
    },
    {
      "content": "The following illustration shows part of the tracing information for a sample error.",
      "pos": [
        44304,
        44388
      ]
    },
    {
      "content": "Failed request tracing in browser",
      "pos": [
        44396,
        44429
      ]
    },
    {
      "pos": [
        44520,
        44554
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Next Steps"
    },
    {
      "content": "You've seen how Visual Studio makes it easy to view logs created by an Azure web app.",
      "pos": [
        44556,
        44641
      ]
    },
    {
      "content": "The following sections provide links to more resources on related topics:",
      "pos": [
        44642,
        44715
      ]
    },
    {
      "content": "Azure web app troubleshooting",
      "pos": [
        44719,
        44748
      ]
    },
    {
      "content": "Debugging in Visual Studio",
      "pos": [
        44751,
        44777
      ]
    },
    {
      "content": "Remote debugging in Azure",
      "pos": [
        44781,
        44806
      ]
    },
    {
      "content": "Tracing in ASP.NET applications",
      "pos": [
        44809,
        44840
      ]
    },
    {
      "content": "Analyzing web server logs",
      "pos": [
        44843,
        44868
      ]
    },
    {
      "content": "Analyzing failed request tracing logs",
      "pos": [
        44871,
        44908
      ]
    },
    {
      "content": "Debugging Cloud Services",
      "pos": [
        44911,
        44935
      ]
    },
    {
      "content": "Azure web app troubleshooting",
      "pos": [
        44941,
        44970
      ]
    },
    {
      "content": "For more information about troubleshooting web apps in Azure App Service, see the following resources:",
      "pos": [
        44972,
        45074
      ]
    },
    {
      "content": "How to monitor web apps",
      "pos": [
        45079,
        45102
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Investigating Memory Leaks in Azure Web Apps with Visual Studio 2013<ept id=\"p1\">](http://blogs.msdn.com/b/visualstudioalm/archive/2013/12/20/investigating-memory-leaks-in-azure-web-sites-with-visual-studio-2013.aspx)</ept>.",
      "pos": [
        45159,
        45365
      ]
    },
    {
      "content": "Microsoft ALM blog post about Visual Studio features for analyzing managed memory issues.",
      "pos": [
        45366,
        45455
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Azure web apps online tools you should know about<ept id=\"p1\">](/blog/2014/03/28/windows-azure-websites-online-tools-you-should-know-about-2/)</ept>.",
      "pos": [
        45458,
        45589
      ]
    },
    {
      "content": "Blog post by Amit Apple.",
      "pos": [
        45590,
        45614
      ]
    },
    {
      "content": "For help with a specific troubleshooting question, start a thread in one of the following forums:",
      "pos": [
        45616,
        45713
      ]
    },
    {
      "pos": [
        45717,
        45808
      ],
      "content": "<bpt id=\"p1\">[</bpt>The Azure forum on the ASP.NET site<ept id=\"p1\">](http://forums.asp.net/1247.aspx/1?Azure+and+ASP+NET)</ept>."
    },
    {
      "pos": [
        45811,
        45892
      ],
      "content": "<bpt id=\"p1\">[</bpt>The Azure forum on MSDN<ept id=\"p1\">](http://social.msdn.microsoft.com/Forums/windowsazure/)</ept>."
    },
    {
      "pos": [
        45895,
        45945
      ],
      "content": "<bpt id=\"p1\">[</bpt>StackOverflow.com<ept id=\"p1\">](http://www.stackoverflow.com)</ept>."
    },
    {
      "content": "Debugging in Visual Studio",
      "pos": [
        45951,
        45977
      ]
    },
    {
      "pos": [
        45980,
        46292
      ],
      "content": "For more information about how to use debug mode in Visual Studio, see the <bpt id=\"p1\">[</bpt>Debugging in Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/library/vstudio/sc65sadd.aspx)</ept> MSDN topic and <bpt id=\"p2\">[</bpt>Debugging Tips with Visual Studio 2010<ept id=\"p2\">](http://weblogs.asp.net/scottgu/archive/2010/08/18/debugging-tips-with-visual-studio-2010.aspx)</ept>."
    },
    {
      "content": "Remote debugging in Azure",
      "pos": [
        46298,
        46323
      ]
    },
    {
      "content": "For more information about remote debugging for Azure web apps and WebJobs, see the following resources:",
      "pos": [
        46325,
        46429
      ]
    },
    {
      "pos": [
        46433,
        46566
      ],
      "content": "<bpt id=\"p1\">[</bpt>Introduction to Remote Debugging Azure App Service Web Apps<ept id=\"p1\">](/blog/2014/05/06/introduction-to-remote-debugging-on-azure-web-sites/)</ept>."
    },
    {
      "content": "Introduction to Remote Debugging Azure App Service Web Apps part 2 - Inside Remote debugging",
      "pos": [
        46570,
        46662
      ]
    },
    {
      "content": "Introduction to Remote Debugging on Azure App Service Web Apps part 3 - Multi-Instance environment and GIT",
      "pos": [
        46766,
        46872
      ]
    },
    {
      "content": "WebJobs Debugging (video)",
      "pos": [
        46990,
        47015
      ]
    },
    {
      "pos": [
        47101,
        47341
      ],
      "content": "If your web app uses an Azure Web API or Mobile Services back-end and you need to debug that, see <bpt id=\"p1\">[</bpt>Debugging .NET Backend in Visual Studio<ept id=\"p1\">](http://blogs.msdn.com/b/azuremobile/archive/2014/03/14/debugging-net-backend-in-visual-studio.aspx)</ept>."
    },
    {
      "content": "Tracing in ASP.NET applications",
      "pos": [
        47347,
        47378
      ]
    },
    {
      "content": "There are no thorough and up-to-date introductions to ASP.NET tracing available on the Internet.",
      "pos": [
        47380,
        47476
      ]
    },
    {
      "content": "The best you can do is get started with old introductory materials written for Web Forms because MVC didn't exist yet, and supplement that with newer blog posts that focus on specific issues.",
      "pos": [
        47477,
        47668
      ]
    },
    {
      "content": "Some good places to start are the following resources:",
      "pos": [
        47669,
        47723
      ]
    },
    {
      "pos": [
        47727,
        48028
      ],
      "content": "[Monitoring and Telemetry (Building Real-World Cloud Apps with Azure)](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry).<br> \nE-book chapter with recommendations for tracing in Azure cloud applications.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Monitoring and Telemetry (Building Real-World Cloud Apps with Azure)<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry)</ept>.",
          "pos": [
            0,
            217
          ]
        },
        {
          "content": "E-book chapter with recommendations for tracing in Azure cloud applications.",
          "pos": [
            223,
            299
          ]
        }
      ]
    },
    {
      "pos": [
        48031,
        48175
      ],
      "content": "[ASP.NET Tracing](http://msdn.microsoft.com/library/ms972204.aspx)<br/>\nOld but still a good resource for a basic introduction to the subject.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>ASP.NET Tracing<ept id=\"p1\">](http://msdn.microsoft.com/library/ms972204.aspx)</ept>",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "Old but still a good resource for a basic introduction to the subject.",
          "pos": [
            72,
            142
          ]
        }
      ]
    },
    {
      "pos": [
        48178,
        48405
      ],
      "content": "[Trace Listeners](http://msdn.microsoft.com/library/4y5y10s7.aspx)<br/>\nInformation about trace listeners but doesn't mention the [WebPageTraceListener](http://msdn.microsoft.com/library/system.web.webpagetracelistener.aspx).",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Trace Listeners<ept id=\"p1\">](http://msdn.microsoft.com/library/4y5y10s7.aspx)</ept>",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "Information about trace listeners but doesn't mention the <bpt id=\"p1\">[</bpt>WebPageTraceListener<ept id=\"p1\">](http://msdn.microsoft.com/library/system.web.webpagetracelistener.aspx)</ept>.",
          "pos": [
            72,
            225
          ]
        }
      ]
    },
    {
      "pos": [
        48408,
        48641
      ],
      "content": "[Walkthrough: Integrating ASP.NET Tracing with System.Diagnostics Tracing](http://msdn.microsoft.com/library/b0ectfxd.aspx)<br/>\nThis too is old, but includes some additional information that the introductory article doesn't cover.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Walkthrough: Integrating ASP.NET Tracing with System.Diagnostics Tracing<ept id=\"p1\">](http://msdn.microsoft.com/library/b0ectfxd.aspx)</ept>",
          "pos": [
            0,
            123
          ]
        },
        {
          "content": "This too is old, but includes some additional information that the introductory article doesn't cover.",
          "pos": [
            129,
            231
          ]
        }
      ]
    },
    {
      "pos": [
        48644,
        49322
      ],
      "content": "[Tracing in ASP.NET MVC Razor Views](http://blogs.msdn.com/b/webdev/archive/2013/07/16/tracing-in-asp-net-mvc-razor-views.aspx)<br/>\nBesides tracing in Razor views, the post also explains how to create an error filter in order to log all unhandled exceptions in an MVC application. For information about how to log all unhandled exceptions in a Web Forms application, see the Global.asax example in [Complete Example for Error Handlers](http://msdn.microsoft.com/library/bb397417.aspx) on MSDN. In either MVC or Web Forms, if you want to log certain exceptions but let the default framework handling take effect for them, you can catch and rethrow as in the following example:",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Tracing in ASP.NET MVC Razor Views<ept id=\"p1\">](http://blogs.msdn.com/b/webdev/archive/2013/07/16/tracing-in-asp-net-mvc-razor-views.aspx)</ept>",
          "pos": [
            0,
            127
          ]
        },
        {
          "content": "Besides tracing in Razor views, the post also explains how to create an error filter in order to log all unhandled exceptions in an MVC application. For information about how to log all unhandled exceptions in a Web Forms application, see the Global.asax example in [Complete Example for Error Handlers](http://msdn.microsoft.com/library/bb397417.aspx) on MSDN. In either MVC or Web Forms, if you want to log certain exceptions but let the default framework handling take effect for them, you can catch and rethrow as in the following example:",
          "pos": [
            133,
            676
          ],
          "nodes": [
            {
              "content": "Besides tracing in Razor views, the post also explains how to create an error filter in order to log all unhandled exceptions in an MVC application.",
              "pos": [
                0,
                148
              ]
            },
            {
              "content": "For information about how to log all unhandled exceptions in a Web Forms application, see the Global.asax example in <bpt id=\"p1\">[</bpt>Complete Example for Error Handlers<ept id=\"p1\">](http://msdn.microsoft.com/library/bb397417.aspx)</ept> on MSDN.",
              "pos": [
                149,
                361
              ]
            },
            {
              "content": "In either MVC or Web Forms, if you want to log certain exceptions but let the default framework handling take effect for them, you can catch and rethrow as in the following example:",
              "pos": [
                362,
                543
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        49557,
        49999
      ],
      "content": "[Streaming Diagnostics Trace Logging from the Azure Command Line (plus Glimpse!)](http://www.hanselman.com/blog/StreamingDiagnosticsTraceLoggingFromTheAzureCommandLinePlusGlimpse.aspx)<br/>\nHow to use the command line to do what this tutorial shows how to do in Visual Studio. [Glimpse](http://www.hanselman.com/blog/IfYoureNotUsingGlimpseWithASPNETForDebuggingAndProfilingYoureMissingOut.aspx) is a tool for debugging ASP.NET applications.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Streaming Diagnostics Trace Logging from the Azure Command Line (plus Glimpse!)<ept id=\"p1\">](http://www.hanselman.com/blog/StreamingDiagnosticsTraceLoggingFromTheAzureCommandLinePlusGlimpse.aspx)</ept>",
          "pos": [
            0,
            184
          ]
        },
        {
          "content": "How to use the command line to do what this tutorial shows how to do in Visual Studio. [Glimpse](http://www.hanselman.com/blog/IfYoureNotUsingGlimpseWithASPNETForDebuggingAndProfilingYoureMissingOut.aspx) is a tool for debugging ASP.NET applications.",
          "pos": [
            190,
            440
          ],
          "nodes": [
            {
              "content": "How to use the command line to do what this tutorial shows how to do in Visual Studio.",
              "pos": [
                0,
                86
              ]
            },
            {
              "content": "<bpt id=\"p1\">[</bpt>Glimpse<ept id=\"p1\">](http://www.hanselman.com/blog/IfYoureNotUsingGlimpseWithASPNETForDebuggingAndProfilingYoureMissingOut.aspx)</ept> is a tool for debugging ASP.NET applications.",
              "pos": [
                87,
                250
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        50003,
        50284
      ],
      "content": "[Using Web Apps Logging and Diagnostics - with David Ebbo](/documentation/videos/azure-web-site-logging-and-diagnostics/) and [Streaming Logs from Web Apps - with David Ebbo](/documentation/videos/log-streaming-with-azure-web-sites/)<br>\nVideos by Scott Hanselman and David Ebbo.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Using Web Apps Logging and Diagnostics - with David Ebbo<ept id=\"p1\">](/documentation/videos/azure-web-site-logging-and-diagnostics/)</ept> and <bpt id=\"p2\">[</bpt>Streaming Logs from Web Apps - with David Ebbo<ept id=\"p2\">](/documentation/videos/log-streaming-with-azure-web-sites/)</ept>",
          "pos": [
            0,
            233
          ]
        },
        {
          "content": "Videos by Scott Hanselman and David Ebbo.",
          "pos": [
            238,
            279
          ]
        }
      ]
    },
    {
      "content": "For error logging, an alternative to writing your own tracing code is to use an open-source logging framework such as <bpt id=\"p1\">[</bpt>ELMAH<ept id=\"p1\">](http://nuget.org/packages/elmah/)</ept>.",
      "pos": [
        50286,
        50446
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Scott Hanselman's blog posts about ELMAH<ept id=\"p1\">](http://www.hanselman.com/blog/NuGetPackageOfTheWeek7ELMAHErrorLoggingModulesAndHandlersWithSQLServerCompact.aspx)</ept>.",
      "pos": [
        50447,
        50630
      ]
    },
    {
      "content": "Also, note that you don't have to use ASP.NET or System.Diagnostics tracing if you want to get streaming logs from Azure.",
      "pos": [
        50632,
        50753
      ]
    },
    {
      "content": "The Azure web app streaming log service will stream any <bpt id=\"p1\">*</bpt>.txt<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>.html<ept id=\"p2\">*</ept>, or <bpt id=\"p3\">*</bpt>.log<ept id=\"p3\">*</ept> file that it finds in the <bpt id=\"p4\">*</bpt>LogFiles<ept id=\"p4\">*</ept> folder.",
      "pos": [
        50754,
        50881
      ]
    },
    {
      "content": "Therefore, you could create your own logging system that writes to the file system of the web app, and your file will be automatically streamed and downloaded.",
      "pos": [
        50882,
        51041
      ]
    },
    {
      "content": "All you have to do is write application code that creates files in the <bpt id=\"p1\">*</bpt>d:\\home\\logfiles<ept id=\"p1\">*</ept> folder.",
      "pos": [
        51042,
        51139
      ]
    },
    {
      "content": "Analyzing web server logs",
      "pos": [
        51146,
        51171
      ]
    },
    {
      "content": "For more information about analyzing web server logs, see the following resources:",
      "pos": [
        51173,
        51255
      ]
    },
    {
      "pos": [
        51259,
        51393
      ],
      "content": "[LogParser](http://www.microsoft.com/download/details.aspx?id=24659)<br/>\nA tool for viewing data in web server logs (*.log* files).",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>LogParser<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=24659)</ept>",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "A tool for viewing data in web server logs (<bpt id=\"p1\">*</bpt>.log<ept id=\"p1\">*</ept> files).",
          "pos": [
            74,
            132
          ]
        }
      ]
    },
    {
      "pos": [
        51396,
        51701
      ],
      "content": "[Troubleshooting IIS Performance Issues or Application Errors using LogParser ](http://www.iis.net/learn/troubleshoot/performance-issues/troubleshooting-iis-performance-issues-or-application-errors-using-logparser)<br/>\nAn introduction to the Log Parser tool that you can use to analyze web server logs.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">[</bpt>Troubleshooting IIS Performance Issues or Application Errors using LogParser <ept id=\"p1\">](http://www.iis.net/learn/troubleshoot/performance-issues/troubleshooting-iis-performance-issues-or-application-errors-using-logparser)</ept>",
          "pos": [
            0,
            214
          ]
        },
        {
          "content": "An introduction to the Log Parser tool that you can use to analyze web server logs.",
          "pos": [
            220,
            303
          ]
        }
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Blog posts by Robert McMurray on using LogParser<ept id=\"p1\">](http://blogs.msdn.com/b/robert_mcmurray/archive/tags/logparser/)</ept>",
      "pos": [
        51704,
        51819
      ]
    },
    {
      "content": "The HTTP status code in IIS 7.0, IIS 7.5, and IIS 8.0",
      "pos": [
        51828,
        51881
      ]
    },
    {
      "content": "Analyzing failed request tracing logs",
      "pos": [
        51928,
        51965
      ]
    },
    {
      "content": "The Microsoft TechNet website includes a <bpt id=\"p1\">[</bpt>Using Failed Request Tracing<ept id=\"p1\">](http://www.iis.net/learn/troubleshoot/using-failed-request-tracing)</ept> section which may be helpful for understanding how to use these logs.",
      "pos": [
        51967,
        52176
      ]
    },
    {
      "content": "However, this documentation focuses mainly on configuring failed request tracing in IIS, which you can't do in Azure Web Apps.",
      "pos": [
        52177,
        52303
      ]
    },
    {
      "content": "Debugging Cloud Services",
      "pos": [
        52309,
        52333
      ]
    },
    {
      "pos": [
        52335,
        52501
      ],
      "content": "If you want to debug an Azure Cloud Service rather than a web app, see <bpt id=\"p1\">[</bpt>Debugging Cloud Services<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windowsazure/ee405479.aspx)</ept>."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you want to get started with Azure App Service before signing up for an Azure account, go to <bpt id=\"p1\">[</bpt>Try App Service<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=523751)</ept>, where you can immediately create a short-lived starter web app in App Service.",
      "pos": [
        52504,
        52757
      ]
    },
    {
      "content": "No credit cards required; no commitments.",
      "pos": [
        52758,
        52799
      ]
    },
    {
      "content": "What's changed",
      "pos": [
        52804,
        52818
      ]
    },
    {
      "pos": [
        52821,
        52989
      ],
      "content": "For a guide to the change from Websites to App Service see: <bpt id=\"p1\">[</bpt>Azure App Service and Its Impact on Existing Azure Services<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529714)</ept>"
    },
    {
      "pos": [
        52992,
        53151
      ],
      "content": "For a guide to the change of the old portal to the new portal see: <bpt id=\"p1\">[</bpt>Reference for navigating the preview portal<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529715)</ept>"
    },
    {
      "content": "test",
      "pos": [
        53248,
        53252
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Troubleshoot a web app in Azure App Service using Visual Studio\" \n    description=\"Learn how to troubleshoot an Azure web app by using remote debugging, tracing, and logging tools that are built in to Visual Studio 2013.\" \n    services=\"app-service\\web\" \n    documentationCenter=\".net\" \n    authors=\"tdykstra\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"app-service-web\" \n    ms.workload=\"web\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"dotnet\" \n    ms.topic=\"article\" \n    ms.date=\"06/08/2015\" \n    ms.author=\"tdykstra\"/>\n\n# Troubleshoot a web app in Azure App Service using Visual Studio\n\n## Overview\n\nThis tutorial shows how to use Visual Studio tools that help debug a web app while it runs in [App Service](http://go.microsoft.com/fwlink/?LinkId=529714), by running in [debug mode](http://www.visualstudio.com/en-us/get-started/debug-your-app-vs.aspx) remotely or by viewing application logs and web server logs.\n\nYou'll learn:\n\n* Which Azure web app management functions are available in Visual Studio.\n* How to use Visual Studio remote view to make quick changes in a remote web app.\n* How to run debug mode remotely while a project is running in Azure, both for a web app and for a WebJob.\n* How to create application trace logs and view them while the application is creating them.\n* How to view web server logs, including detailed error messages and failed request tracing.\n* How to send diagnostic logs to an Azure Storage account and view them there.\n\nIf you have Visual Studio Ultimate, you can also use [IntelliTrace](http://msdn.microsoft.com/library/vstudio/dd264915.aspx) for debugging. IntelliTrace is not covered in this tutorial.\n\n## <a name=\"prerequisites\"></a>Prerequisites\n\nThis tutorial works with the development environment, web project, and Azure web app that you set up in [Get started with Azure and ASP.NET][GetStarted]. For the WebJobs sections, you'll need the application that you create in [Get Started with the Azure WebJobs SDK][GetStartedWJ].\n\nThe code samples shown in this tutorial are for a C# MVC web application, but the troubleshooting procedures are the same for Visual Basic and Web Forms applications.\n\nRemote debugging requires Visual Studio 2013 or Visual Studio 2012 with Update 4. The remote debugging and **Server Explorer** features for WebJobs require [Visual Studio 2013 Update 4](http://go.microsoft.com/fwlink/?LinkID=510314) or later. The other features shown in the tutorial also work in Visual Studio 2013 Express for Web, and Visual Studio 2012 Express for Web. \n\nThe streaming logs feature only works for applications that target .NET Framework 4 or later.\n\n## <a name=\"sitemanagement\"></a>Web app configuration and management\n\nVisual Studio provides access to a subset of the web app management functions and configuration settings available in the [Azure Portal](http://go.microsoft.com/fwlink/?LinkId=529715). In this section you'll see what's available.\n\n1. If you aren't already signed in to Azure in Visual Studio, click the **Connect to Azure** button in **Server Explorer**.\n\n    An alternative is to install a management certificate that enables access to your account. If you choose to install a certificate, right-click the **Azure** node in **Server Explorer**, and then click **Manage Subscriptions** in the context menu. In the **Manage Azure Subscriptions** dialog box, click the **Certificates** tab, and then click **Import**. Follow the directions to download and then import a subscription file (also called a *.publishsettings* file) for your Azure account.\n\n    > [AZURE.NOTE]\n    > If you download a subscription file, save it to a folder outside your source code directories (for example, in the Downloads folder), and then delete it once the import has completed. A malicious user who gains access to the subscription file can edit, create, and delete your Azure services.\n\n    For more information about connecting to Azure resources from Visual Studio, see [Manage Accounts, Subscriptions, and Administrative Roles](http://go.microsoft.com/fwlink/?LinkId=324796#BKMK_AccountVCert).\n\n2. In **Server Explorer**, expand **Azure**, and then expand **Web Apps**.\n\n3. Right-click the node for the web app that you created in [Getting started with Azure and ASP.NET][GetStarted], and then click **View Settings**.\n\n    ![View Settings in Server Explorer](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-viewsettings.png)\n\n    The **Azure Web App** tab appears, and you can see there the web app management and configuration tasks that are available in Visual Studio.\n\n    ![Azure Web App window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-configtab.png)\n\n    In this tutorial you'll be using the logging and tracing drop-downs. You'll also use remote debugging but you'll use a different method to enable it.\n   \n    For information about the App Settings and Connection Strings boxes in this window, see [Azure Web Apps: How Application Strings and Connection Strings Work](http://blogs.msdn.com/b/windowsazure/archive/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work.aspx).\n\n    If you want to perform a web app management task that can't be done in this window, you can click **Full Web App Settings** to open a browser window to the management portal. For more information, see [How to Configure Web Apps](/en-us/manage/services/web-sites/how-to-configure-websites/#howtochangeconfig).\n\n## <a name=\"remoteview\"></a>Access web app files in Server Explorer\n\nYou typically deploy a web project with the `customErrors` flag in the Web.config file set to `On` or `RemoteOnly`, which means you don't get a helpful error message when something goes wrong. For many errors all you get is a page like one of the following ones.\n\n**Server Error in '/' Application:**\n\n![Unhelpful error page](./media/web-sites-dotnet-troubleshoot-visual-studio/genericerror.png)\n\n**An error occurred:**\n\n![Unhelpful error page](./media/web-sites-dotnet-troubleshoot-visual-studio/genericerror1.png)\n\n**The website cannot display the page**\n\n![Unhelpful error page](./media/web-sites-dotnet-troubleshoot-visual-studio/genericerror2.png)\n\nFrequently the easiest way to find the cause of the error is to enable detailed error messages, which the first of the preceding screenshots explains how to do. That requires a change in the deployed Web.config file. You could edit the *Web.config* file in the project and redeploy the project, or create a [Web.config transform](http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/web-config-transformations) and deploy a debug build, but there's a quicker way: in **Solution Explorer** you can directly view and edit files in the remote web app by using the *remote view* feature.\n\n1. In **Server Explorer**, expand **Azure**, expand **App Service**, expand the resource group that your web app is located in, and then expand the node for your web app.\n\n    You see nodes that give you access to the web app's content files and log files.\n\n2. Expand the **Files** node, and double-click the *Web.config* file.\n\n    ![Open Web.config](./media/web-sites-dotnet-troubleshoot-visual-studio/webconfig.png)\n\n    Visual Studio opens the Web.config file from the remote web app and shows [Remote] next to the file name in the title bar.\n\n3. Add the following line to the `system.web` element:\n\n    `<customErrors mode=\"off\"></customErrors>`\n\n    ![Edit Web.config](./media/web-sites-dotnet-troubleshoot-visual-studio/webconfigedit.png)\n\n4. Refresh the browser that is showing the unhelpful error message, and now you get a detailed error message, such as the following example:\n\n    ![Detailed error message](./media/web-sites-dotnet-troubleshoot-visual-studio/detailederror.png)\n\n    (The error shown was created by adding the line shown in red to *Views\\Home\\Index.cshtml*.)\n\nEditing the Web.config file is only one example of scenarios in which the ability to read and edit files on your Azure web app make troubleshooting easier.\n\n## <a name=\"remotedebug\"></a>Remote debugging web apps\n\nIf the detailed error message doesn't provide enough information, and you can't re-create the error locally, another way to troubleshoot is to run in debug mode remotely. You can set breakpoints, manipulate memory directly, step through code, and even change the code path. \n\nRemote debugging does not work in Express editions of Visual Studio.\n\nThis section shows how to debug remotely using the project you create in [Getting started with Azure and ASP.NET][GetStarted].\n\n1. Open the web project that you created in [Getting started with Azure and ASP.NET][GetStarted].\n\n1. Open *Controllers\\HomeController.cs*.\n\n2. Delete the `About()` method and insert the following code in its place.\n\n        public ActionResult About()\n        {\n            string currentTime = DateTime.Now.ToLongTimeString();\n            ViewBag.Message = \"The current time is \" + currentTime;\n            return View();\n        }\n\n2. [Set a breakpoint](http://www.visualstudio.com/get-started/debug-your-app-vs.aspx) on the `ViewBag.Message` line.\n\n1. In **Solution Explorer**, right-click the project, and click **Publish**.\n\n2. In the **Profile** drop-down list, select the same profile that you used in [Getting started with Azure and ASP.NET][GetStarted].\n\n3. Click the **Settings** tab, and change **Configuration** to **Debug**, and then click **Publish**.\n\n    ![Publish in debug mode](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-publishdebug.png)\n\n4. After deployment finishes and your browser opens to the Azure URL of your web app, close the browser.\n\n5. For Visual Studio 2013: In **Server Explorer** expand **Azure**, expand **Web Apps**, right-click your web app, and click **Attach Debugger**. \n\n    ![Attach debugger](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-attachdebugger.png)\n\n    The browser automatically opens to your home page running in Azure. You might have to wait 20 seconds or so while Azure sets up the server for debugging. This delay only happens the first time you run in debug mode on a web app. Subsequent times within the next 48 hours when you start debugging again there won't be a delay.\n\n6. For Visual Studio 2012 with Update 4:<a id=\"vs2012\"></a>\n\n    * In the Azure Management Portal, go to **Settings > Application settings** for your web app, and then scroll down to the **Debugging** section.\n\n    * Set **Remote Debugging** to **On**, and set **Remote Visual Studio Version** to **2012**.\n\n    * In the Visual Studio **Debug** menu, click **Attach to Process**.\n\n    * In the **Qualifier** box, enter the URL for your web app, without the `http://` prefix. \n\n    * Select **Show processes from all users**.\n\n    * When you're prompted for credentials, enter the user name and password that has permissions to deploy content to the web app. To get these credentials, go to the Dashboard tab for your web app in the management portal and click **Download the publish profile**. Open the file in a text editor, and you'll find the user name and password after the first occurrences of **userName=** and **userPWD=**. \n\n    * When the processes appear in the **Available Processes** table, select **w3wp.exe**, and then click **Attach**.\n\n    * Open a browser to the URL of your web app.\n\n    You might have to wait 20 seconds or so while Azure sets up the server for debugging. This delay only happens the first time you run in debug mode on a web app. Subsequent times within the next 48 hours when you start debugging again there won't be a delay.\n\n6. Click **About** in the menu.\n\n    Visual Studio stops on the breakpoint, and the code is running in Azure, not on your local computer.\n\n7. Hover over the `currentTime` variable to see the time value.\n\n    ![View variable in debug mode running in Azure](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-debugviewinwa.png)\n\n    The time you see is the Azure server time, which may be in a different time zone than your local computer.\n\n8. Enter a new value for the `currentTime` variable, such as \"Now running in Azure\".\n\n5. Press F5 to continue running.\n\n    The About page running in Azure displays the new value that you entered into the currentTime variable.\n\n    ![About page with new value](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-debugchangeinwa.png)\n\n## <a name=\"remotedebugwj\"></a> Remote debugging WebJobs\n\nThis section shows how to debug remotely using the project and web app you create in [Get Started with the Azure WebJobs SDK](websites-dotnet-webjobs-sdk.md). The features shown on in this section are available only in Visual Studio 2013 with Update 4. Remote debugging only works with continuous WebJobs. Scheduled and on-demand WebJobs don't support debugging.\n\n1. Open the web project that you created in [Get Started with the Azure WebJobs SDK][GetStartedWJ].\n\n1. In the ContosoAdsWebJob project, open *Functions.cs*.\n\n2. [Set a breakpoint](http://www.visualstudio.com/get-started/debug-your-app-vs.aspx) on the first statement in the `GnerateThumbnail` method.\n\n    ![Set breakpoint](./media/web-sites-dotnet-troubleshoot-visual-studio/wjbreakpoint.png)\n\n1. In **Solution Explorer**, right-click the web project (not the WebJob project), and click **Publish**.\n\n2. In the **Profile** drop-down list, select the same profile that you used in [Get Started with the Azure WebJobs SDK](websites-dotnet-webjobs-sdk.md).\n\n3. Click the **Settings** tab, and change **Configuration** to **Debug**, and then click **Publish**.\n\n    Visual Studio deploys the web and WebJob projects, and your browser opens to the Azure URL of your web app.\n\n5. In **Server Explorer** expand **Azure** > **Web Apps** > your web app > **WebJobs** > **Continuous**, and then right-click **ContosoAdsWebJob**.\n\n7. Click **Attach Debugger**. \n\n    ![Attach debugger](./media/web-sites-dotnet-troubleshoot-visual-studio/wjattach.png)\n\n    The browser automatically opens to your home page running in Azure. You might have to wait 20 seconds or so while Azure sets up the server for debugging. This delay only happens the first time you run in debug mode on a web app. The next time you attach the debugger there won't be a delay, if you do it within 48 hours.\n\n6. In the web browser that is opened to the Contoso Ads home page, create a new ad. \n\n    Creating an ad causes a queue message to be created, which will be picked up by the WebJob and processed. When the WebJobs SDK calls the function to process the queue message, the code will hit your breakpoint.\n\n7. When the debugger breaks at your breakpoint, you can examine and change variable values while the program is running the cloud. In the following illustration the debugger shows the contents of the blobInfo object that was passed to the GenerateThumbnail method.\n\n    ![blobInfo object in debugger](./media/web-sites-dotnet-troubleshoot-visual-studio/blobinfo.png)\n \n5. Press F5 to continue running.\n\n    The GenerateThumbnail method finishes creating the thumbnail.\n\n6. In the browser, refresh the Index page and you see the thumbnail.\n\n6. In Visual Studio, press SHIFT+F5 to stop debugging.\n\n7. In **Server Explorer**, right-click the ContosoAdsWebJob node and click **View Dashboard**.\n\n8. Sign in with your Azure credentials, and then click the WebJob name to go to the page for your WebJob. \n\n    ![Click ContosoAdsWebJob](./media/web-sites-dotnet-troubleshoot-visual-studio/clickcaw.png)\n\n    The Dashboard shows that the GenerateThumbnail function executed recently.\n\n    (The next time you click **View Dashboard**, you don't have to sign in, and the browser goes directly to the page for your WebJob.)\n\n9. Click the function name to see details about the function execution.\n\n    ![Function details](./media/web-sites-dotnet-troubleshoot-visual-studio/funcdetails.png)\n\nIf your function [wrote logs](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#logs), you could click **ToggleOutput** to see them.\n\n## Notes about remote debugging\n\n* Running in debug mode in production is not recommended. If your production web app is not scaled out to multiple server instances, debugging will prevent the web server from responding to other requests. If you do have multiple web server instances, when you attach to the debugger you'll get a random instance, and you have no way to ensure that subsequent browser requests will go to that instance. Also, you typically don't deploy a debug build to production, and compiler optimizations for release builds might make it impossible to show what is happening line by line in your source code. For troubleshooting production problems, your best resource is application tracing and web server logs.\n\n* Avoid long stops at breakpoints when remote debugging. Azure treats a process that is stopped for longer than a few minutes as an unresponsive process, and shuts it down.\n\n* While you're debugging, the server is sending data to Visual Studio, which could affect bandwidth charges. For information about bandwidth rates, see [Azure Pricing](/pricing/calculator/).\n\n* Make sure that the `debug` attribute of the `compilation` element in the *Web.config* file is set to true. It is set to true by default when you publish a debug build configuration.\n\n        <system.web>\n          <compilation debug=\"true\" targetFramework=\"4.5\" />\n          <httpRuntime targetFramework=\"4.5\" />\n        </system.web>\n\n* If you find that the debugger won't step into code that you want to debug, you might have to change the Just My Code setting.  For more information, see [Restrict stepping to Just My Code](http://msdn.microsoft.com/library/vstudio/y740d9d3.aspx#BKMK_Restrict_stepping_to_Just_My_Code).\n\n* A timer starts on the server when you enable the remote debugging feature, and after 48 hours the feature is automatically turned off. This 48 hour limit is done for security and performance reasons. You can easily turn the feature back on as many times as you like. We recommend leaving it disabled when you are not actively debugging.\n\n* You can manually attach the debugger to any process, not only the web app process (w3wp.exe). For more information about how to use debug mode in Visual Studio, see [Debugging in Visual Studio](http://msdn.microsoft.com/en-us/library/vstudio/sc65sadd.aspx).\n\n## <a name=\"logsoverview\"></a>Diagnostic logs overview\n\nAn ASP.NET application that runs in an Azure web app can create the following kinds of logs:\n\n* **Application tracing logs**<br/>\n  The application creates these logs by calling methods of the [System.Diagnostics.Trace](http://msdn.microsoft.com/library/system.diagnostics.trace.aspx) class.\n* **Web server logs**<br/>\n  The web server creates a log entry for every HTTP request to the web app.\n* **Detailed error message logs**<br/>\n  The web server creates an HTML page with some additional information for failed HTTP requests (those that result in status code 400 or greater). \n* **Failed request tracing logs**<br/>\n  The web server creates an XML file with detailed tracing information for failed HTTP requests. The web server also provides an XSL file to format the XML in a browser.\n  \nLogging affects web app performance, so Azure gives you the ability to enable or disable each type of log as needed. For application logs, you can specify that only logs above a certain severity level should be written. When you create a new web app, by default all logging is disabled.\n\nLogs are written to files in a *LogFiles* folder in the file system of your web app and are accessible via FTP. Web server logs and application logs can also be written to an Azure Storage account. You can retain a greater volume of logs in a storage account than is possible in the file system. You're limited to a maximum of 100 megabytes of logs when you use the file system. (File system logs are only for short-term retention. Azure deletes old log files to make room for new ones after the limit is reached.)  \n\n## <a name=\"apptracelogs\"></a>Create and view application trace logs\n\nIn this section you'll do the following tasks:\n\n* Add tracing statements to the web project that you created in [Get started with Azure and ASP.NET][GetStarted].\n* View the logs when you run the project locally.\n* View the logs as they are generated by the application running in Azure. \n\nFor information about how to create application logs in WebJobs, see [How to work with Azure queue storage using the WebJobs SDK - How to write logs](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#logs). The following instructions for viewing logs and controlling how they're stored in Azure apply also to application logs created by WebJobs. \n\n### Add tracing statements to the application\n\n1. Open *Controllers\\HomeController.cs*, and replace the file contents with the following code in order to add `Trace` statements and a `using` statement for `System.Diagnostics`:\n\n        using System;\n        using System.Collections.Generic;\n        using System.Configuration;\n        using System.Diagnostics;\n        using System.Linq;\n        using System.Web;\n        using System.Web.Configuration;\n        using System.Web.Mvc;\n        namespace MyExample.Controllers\n        {\n            public class HomeController : Controller\n            {\n                public ActionResult Index()\n                {\n                    Trace.WriteLine(\"Entering Index method\");\n                    ViewBag.Message = \"Modify this template to jump-start your ASP.NET MVC application.\";\n                    Trace.TraceInformation(\"Displaying the Index page at \" + DateTime.Now.ToLongTimeString());\n                    Trace.WriteLine(\"Leaving Index method\");\n                    return View();\n                }\n        \n                public ActionResult About()\n                {\n                    Trace.WriteLine(\"Entering About method\");\n                    ViewBag.Message = \"Your app description page.\";\n                    Trace.TraceWarning(\"Transient error on the About page at \" + DateTime.Now.ToShortTimeString());\n                    Trace.WriteLine(\"Leaving About method\");\n                    return View();\n                }\n        \n                public ActionResult Contact()\n                {\n                    Trace.WriteLine(\"Entering Contact method\");\n                    ViewBag.Message = \"Your contact page.\";\n                    Trace.TraceError(\"Fatal error on the Contact page at \" + DateTime.Now.ToLongTimeString());\n                    Trace.WriteLine(\"Leaving Contact method\");\n                    return View();\n                }\n            }\n        }\n        \n                \n### View the tracing output locally\n\n3. Press F5 to run the application in debug mode.\n\n    The default trace listener writes all trace output to the **Output** window, along with other Debug output. The following illustration shows the output from the trace statements that you added to the `Index` method.\n\n    ![Tracing in Debug window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-debugtracing.png)\n\n    The following steps show how to view trace output in a web page, without compiling in debug mode.\n\n2. Open the application Web.config file (the one located in the project folder) and add a `<system.diagnostics>` element at the end of the file just before the closing `</configuration>` element:\n\n        <system.diagnostics>\n            <trace>\n              <listeners>\n                <add name=\"WebPageTraceListener\"\n                    type=\"System.Web.WebPageTraceListener, \n                    System.Web, \n                    Version=4.0.0.0, \n                    Culture=neutral,\n                    PublicKeyToken=b03f5f7f11d50a3a\" />\n              </listeners>\n            </trace>\n          </system.diagnostics>\n\n    The `WebPageTraceListener` lets you view trace output by browsing to `/trace.axd`.\n\n3. Add a <a href=\"http://msdn.microsoft.com/library/vstudio/6915t83k(v=vs.100).aspx\">trace element</a> under `<system.web>` in the Web.config file, such as the following example:\n\n        <trace enabled=\"true\" writeToDiagnosticsTrace=\"true\" mostRecent=\"true\" pageOutput=\"false\" />\n\n3. Press CTRL+F5 to run the application.\n\n4. In the address bar of the browser window, add *trace.axd* to the URL, and then press Enter (the URL will be similar to http://localhost:53370/trace.axd).\n\n5. On the **Application Trace** page, click **View Details** on the first line (not the BrowserLink line).\n\n    ![trace.axd](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-traceaxd1.png)\n\n    The **Request Details** page appears, and in the **Trace Information** section you see the output from the trace statements that you added to the `Index` method.\n\n    ![trace.axd](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-traceaxd2.png)\n\n    By default, `trace.axd` is only available locally. If you wanted to make it available from a remote web app, you could add `localOnly=\"false\"` to the `trace` element in the *Web.config* file, as shown in the following example:\n\n        <trace enabled=\"true\" writeToDiagnosticsTrace=\"true\" localOnly=\"false\" mostRecent=\"true\" pageOutput=\"false\" />\n\n    However, enabling `trace.axd` in a production web app is generally not recommended for security reasons, and in the following sections you'll see an easier way to read tracing logs in an Azure web app.\n\n### View the tracing output in Azure\n\n1. In **Solution Explorer**, right-click the web project and click **Publish**.\n\n2. In the **Publish Web** dialog box, click **Publish**.\n\n    After Visual Studio publishes your update, it opens a browser window to your home page (assuming you didn't clear **Destination URL** on the **Connection** tab).\n\n3. In **Server Explorer**, right-click your web app and select **View Streaming Logs**. \n\n    ![View Streaming Logs in context menu](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-viewlogsmenu.png)\n\n    The **Output** window shows that you are connected to the log-streaming service, and adds a notification line each minute that goes by without a log to display.\n\n    ![View Streaming Logs in context menu](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-nologsyet.png)\n\n4. In the browser window that shows your application home page, click **Contact**.\n\n    Within a few seconds the output from the error-level trace you added to the `Contact` method appears in the **Output** window.\n\n    ![Error trace in Output window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-errortrace.png)\n\n    Visual Studio is only showing error-level traces because that is the default setting when you enable the log monitoring service. When you create a new Azure web app, all logging is disabled by default, as you saw when you opened the settings page earlier:\n\n    ![Application Logging off](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-apploggingoff.png)\n\n\n    However, when you selected **View Streaming Logs**, Visual Studio automatically changed **Application Logging(File System)** to **Error**, which means error-level logs get reported. In order to see all of your tracing logs, you can change this setting to **Verbose**. When you select a severity level lower than error, all logs for higher severity levels are also reported. So when you select verbose, you also see information, warning, and error logs.  \n\n4. In **Server Explorer**, right-click the web app, and then click **View Settings** as you did earlier.\n\n5. Change **Application Logging (File System)** to **Verbose**, and then click **Save**.\n \n    ![Setting trace level to Verbose](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-applogverbose.png)\n\n6. In the browser window that is now showing your **Contact** page, click **Home**, then click **About**, and then click **Contact**.\n\n    Within a few seconds, the **Output** window shows all of your tracing output.\n\n    ![Verbose trace output](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-verbosetraces.png)\n\n    In this section you enabled and disabled logging by using Azure web app settings. You can also enable and disable trace listeners by modifying the Web.config file. However, modifying the Web.config file causes the app domain to recycle, while enabling logging via the web app configuration doesn't do that. If the problem takes a long time to reproduce, or is intermittent, recycling the app domain might \"fix\" it and force you to wait until it happens again. Enabling diagnostics in Azure doesn't do this, so you can start capturing error information immediately.\n\n### Output window features\n\nThe **Azure Logs** tab of the **Output** Window has several buttons and a text box:\n\n![Logs tab buttons](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-icons.png)\n\nThese perform the following functions:\n\n* Clear the **Output** window.\n* Enable or disable word wrap.\n* Start or stop monitoring logs.\n* Specify which logs to monitor.\n* Download logs.\n* Filter logs based on a search string or a regular expression.\n* Close the **Output** window.\n\nIf you enter a search string or regular expression, Visual Studio filters logging information at the client. That means you can enter the criteria after the logs are displayed in the **Output** window and you can change filtering criteria without having to regenerate the logs.\n\n## <a name=\"webserverlogs\"></a>View web server logs\n\nWeb server logs record all HTTP activity for the web app. In order to see them in the **Output** window you have to enable them for the web app and tell Visual Studio that you want to monitor them. \n\n1. In the **Azure Web App Configuration** tab that you opened from **Server Explorer**, change Web Server Logging to **On**, and then click **Save**.\n\n    ![Enable web server logging](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-webserverloggingon.png)\n\n2. In the **Output** Window, click the **Specify which Azure logs to monitor** button.\n    \n    ![Specify which Azure logs to monitor](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-specifylogs.png)\n\n3. In the **Azure Logging Options** dialog box, select **Web server logs**, and then click **OK**.\n\n    ![Monitor web server logs](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-monitorwslogson.png)\n\n4. In the browser window that shows the web app, click **Home**, then click **About**, and then click **Contact**.\n\n    The application logs generally appear first, followed by the web server logs. You might have to wait a while for the logs to appear. \n\n    ![Web server logs in Output window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-wslogs.png)\n\n\nBy default, when you first enable web server logs by using Visual Studio, Azure writes the logs to the file system. As an alternative, you can use the management portal to specify that web server logs should be written to a blob container in a storage account. For more information, see the **site diagnostics** section in [How to Configure Web Sites](/manage/services/web-sites/how-to-configure-websites/#howtochangeconfig). \n\nIf you use the management portal to enable web server logging to an Azure storage account, and then disable logging in Visual Studio, when you re-enable logging in Visual Studio your storage account settings are restored. \n\n## <a name=\"detailederrorlogs\"></a>View detailed error message logs\n\nDetailed error logs provide some additional information about HTTP requests that result in error response codes (400 or above). In order to see them in the **Output** window, you have to enable them for the web app and tell Visual Studio that you want to monitor them.\n\n1. In the **Azure Web App Configuration** tab that you opened from **Server Explorer**, change **Detailed Error Messages** to **On**, and then click **Save**.\n\n    ![Enable detailed error messages](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-detailedlogson.png)\n\n2. In the **Output** Window, click the **Specify which Azure logs to monitor** button.\n\n3. In the **Azure Logging Options** dialog box, click **All logs**, and then click **OK**.\n\n    ![Monitor all logs](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-monitorall.png)\n\n4. In the address bar of the browser window, add an extra character to the URL to cause a 404 error (for example, `http://localhost:53370/Home/Contactx`), and press Enter.\n\n    After several seconds the detailed error log appears in the Visual Studio **Output** window.\n\n    ![Detailed error log in Output window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-detailederrorlog.png)\n\n    Control+click the link to see the log output formatted in a browser:\n\n    ![Detailed error log in browser window](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-detailederrorloginbrowser.png)\n\n## <a name=\"downloadlogs\"></a>Download file system logs\n\nAny logs that you can monitor in the **Output** window can also be downloaded as a *.zip* file. \n\n1. In the **Output** window, click **Download Streaming Logs**.\n\n    ![Logs tab buttons](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-downloadicon.png)\n\n    File Explorer opens to your *Downloads* folder with the downloaded file selected.\n\n    ![Downloaded file](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-downloadedfile.png)\n\n2. Extract the *.zip* file, and you see the following folder structure:\n\n    ![Downloaded file](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-logfilefolders.png)\n\n    * Application tracing logs are in *.txt* files in the *LogFiles\\Application* folder.\n    * Web server logs are in *.log* files in the *LogFiles\\http\\RawLogs* folder. You can use a tool such as [Log Parser](http://www.microsoft.com/download/details.aspx?displaylang=en&id=24659) to view and manipulate these files.\n    * Detailed error message logs are in *.html* files in the *LogFiles\\DetailedErrors* folder.\n\n    (The *deployments* folder is for files created by source control publishing; it doesn't have anything related to Visual Studio publishing. The *Git* folder is for traces related to source control publishing and the log file streaming service.)  \n\n## <a name=\"storagelogs\"></a>View storage logs\n\nApplication tracing logs can also be sent to an Azure storage account, and you can view them in Visual Studio. To do that you'll create a storage account, enable storage logs in the management portal, and view them in the **Logs** tab of the **Azure Web App** window.\n\nYou can send logs to any or all of three destinations:\n\n* The file system.\n* Storage account tables.\n* Storage account blobs.\n\nYou can specify a different severity level for each destination. \n\nTables make it easy to view details of logs online, and they support streaming; you can query logs in tables and see new logs as they are being created. Blobs make it easy to download logs in files and to analyze them using HDInsight, because HDInsight knows how to work with blob storage. For more information, see **Hadoop and MapReduce** in [Data Storage Options (Building Real-World Cloud Apps with Azure)](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/data-storage-options).\n\nYou currently have file system logs set to verbose level; the following steps walk you through setting up information level logs to go to storage account tables. Information level means all logs created by calling `Trace.TraceInformation`, `Trace.TraceWarning`, and `Trace.TraceError` will be displayed, but not logs created by calling `Trace.WriteLine`.\n\nStorage accounts offer more storage and longer-lasting retention for logs compared to the file system. Another advantage of sending application tracing logs to storage is that you get some additional information with each log that you don't get from file system logs.\n\n5. Right-click **Storage** under the Azure node, and then click **Create Storage Account**.\n\n![Create Storage Account](./media/web-sites-dotnet-troubleshoot-visual-studio/createstor.png)\n\n3. In the **Create Storage Account** dialog, enter a name for the storage account. \n\n    The name must be must be unique (no other Azure storage account can have the same name). If the name you enter is already in use you'll get a chance to change it.\n\n    The URL to access your storage account will be *{name}*.core.windows.net. \n\n5. Set the **Region or Affinity Group** drop-down list to the region closest to you.\n\n    This setting specifies which Azure datacenter will host your storage account. For this tutorial your choice won't make a noticeable difference, but for a production web app you want your web server and your storage account to be in the same region to minimize latency and data egress charges. The web app (which you'll create later) should run in a region as close as possible to the browsers accessing your web app in order to minimize latency.\n\n6. Set the **Replication** drop-down list to **Locally redundant**. \n\n    When geo-replication is enabled for a storage account, the stored content is replicated to a secondary datacenter to enable failover to that location in case of a major disaster in the primary location. Geo-replication can incur additional costs. For test and development accounts, you generally don't want to pay for geo-replication. For more information, see [Create, manage, or delete a storage account](../storage-create-storage-account/#replication-options).\n\n5. Click **Create**. \n\n    ![New storage account](./media/web-sites-dotnet-troubleshoot-visual-studio/newstorage.png)  \n\n1. In the Visual Studio **Azure Web App** window, click the **Logs** tab, and then click **Configure Logging in Management Portal**.\n\n    <!-- todo:screenshot of new portal if the VS page link goes to new portal -->\n    ![Configure logging](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-configlogging.png)\n\n    This opens the **Configure** tab in the management portal for your web app. Another way to get here is to click the **Web Apps** tab, click your web app, and then click the **Configure** tab.\n\n2. In the management portal **Configure** tab, scroll down to the application diagnostics section, and then change **Application Logging (Table Storage)** to **On**.\n\n3. Change **Logging Level** to **Information**.\n\n4. Click **Manage Table Storage**.\n\n    ![Click Manage TableStorage](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-stgsettingsmgmtportal.png)\n\n    In the **Manage table storage for application diagnostics** box, you can choose your storage account if you have more than one. You can create a new table or use an existing one.\n\n    ![Manage table storage](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-choosestorageacct.png)\n\n6. In the **Manage table storage for application diagnostics** box click the check mark to close the box.\n\n6. In the management portal **Configure** tab, click **Save**.\n\n7. In the browser window that displays the application web app, click **Home**, then click **About**, and then click **Contact**.\n\n    The logging information produced by browsing these web pages will be written to the storage account.\n\n8. In the **Logs** tab of the **Azure Web App** window in Visual Studio, click **Refresh** under **Diagnostic Summary**.\n\n    ![Click Refresh](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-refreshstorage.png)\n\n    The **Diagnostic Summary** section shows logs for the last 15 minutes by default. You can change the period to see more logs. \n\n    (If you get a \"table not found\" error, verify that you browsed to the pages that do the tracing after you enabled **Application Logging (Storage)** and after you clicked **Save**.)\n\n    ![Storage logs](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-storagelogs.png)\n\n    Notice that in this view you see **Process ID** and **Thread ID** for each log, which you don't get in the file system logs. You can see additional fields by viewing the Azure storage table directly.\n\n8. Click **View all application logs**.\n\n    The trace log table appears in the Azure storage table viewer.\n   \n    (If you get a \"sequence contains no elements\" error, open **Server Explorer**, expand the node for your storage account under the **Azure** node, and then right-click **Tables** and click **Refresh**.)\n\n    ![Storage logs in table view](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-tracelogtableview.png)\n\n    This view shows additional fields you don't see in any other views. This view also enables you to filter logs by using special Query Builder UI for constructing a query. For more information, see Working with Table Resources - Filtering Entities in [Browsing Storage Resources with Server Explorer](http://msdn.microsoft.com/library/ff683677.aspx).\n\n7. To look at the details for a single row, double-click one of the rows.\n\n    ![Trace table in Server Explorer](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-tracetablerow.png)\n\n## <a name=\"failedrequestlogs\"></a>View failed request tracing logs\n\nFailed request tracing logs are useful when you need to understand the details of how IIS is handling an HTTP request, in scenarios such as URL rewriting or authentication problems. \n\nAzure web apps use the same failed request tracing functionality that has been available with IIS 7.0 and later. You don't have access to the IIS settings that configure which errors get logged, however. When you enable failed request tracing, all errors are captured. \n\nYou can enable failed request tracing by using Visual Studio, but you can't view them in Visual Studio. These logs are XML files. The streaming log service only monitors files that are deemed readable in plain text mode:  *.txt*, *.html*, and *.log* files.\n\nYou can view failed request tracing logs in a browser directly via FTP or locally after using an FTP tool to download them to your local computer. In this section you'll view them in a browser directly.\n\n1. In the **Configuration** tab of the **Azure Web App** window that you opened from **Server Explorer**, change **Failed Request Tracing** to **On**, and then click **Save**.\n\n    ![Enable failed request tracing](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-failedrequeston.png)\n\n4. In the address bar of the browser window that shows the web app, add an extra character to the URL and click Enter to cause a 404 error.\n\n    This causes a failed request tracing log to be created, and the following steps show how to view or download the log.\n\n2. In Visual Studio, in the **Configuration** tab of the **Azure Web App** window, click **Open in Management Portal**.\n\n3. In the management portal blade for your web app, click **All settings > Deployment credentials**, and then click **Reset your deployment credentials**.\n\n4. Enter a new user name and password.\n\n    ![New FTP user name and password](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-enterftpcredentials.png)\n\n5. In the management portal **Dashboard** tab press F5 to refresh the page, and then scroll down to where you see **Deployment / FTP User**. Notice that the user name has the web app name prefixed to it. **When you log in, you have to use this full user name with the web app name prefixed to it as shown here.**\n\n5. In a new browser window, go to the URL that is shown under **FTP Host Name** in the **Dashboard** tab of the management portal page for your web app. **FTP Host Name** is located near **Deployment / FTP User** in the **Quick Glance** section.\n\n6. Log in using the FTP credentials that you created earlier (including the web app name prefix for the user name).\n\n    The browser shows the root folder of the web app.\n\n6. Open the *LogFiles* folder.\n\n    ![Open LogFiles folder](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-logfilesfolder.png)\n\n7. Open the folder that is named W3SVC plus a numeric value.\n\n    ![Open W3SVC folder](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-w3svcfolder.png)\n\n    The folder contains XML files for any errors that have been logged after you enabled failed request tracing, and an XSL file that a browser can use to format the XML.\n\n    ![W3SVC folder](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-w3svcfoldercontents.png)\n\n8. Click the XML file for the failed request that you want to see tracing information for.\n\n    The following illustration shows part of the tracing information for a sample error.\n\n    ![Failed request tracing in browser](./media/web-sites-dotnet-troubleshoot-visual-studio/tws-failedrequestinbrowser.png)\n\n\n## <a name=\"nextsteps\"></a>Next Steps\n\nYou've seen how Visual Studio makes it easy to view logs created by an Azure web app. The following sections provide links to more resources on related topics:\n\n* Azure web app troubleshooting\n* Debugging in Visual Studio \n* Remote debugging in Azure\n* Tracing in ASP.NET applications\n* Analyzing web server logs\n* Analyzing failed request tracing logs\n* Debugging Cloud Services\n\n### Azure web app troubleshooting\n\nFor more information about troubleshooting web apps in Azure App Service, see the following resources:\n\n* [How to monitor web apps](/manage/services/web-sites/how-to-monitor-websites/)\n* [Investigating Memory Leaks in Azure Web Apps with Visual Studio 2013](http://blogs.msdn.com/b/visualstudioalm/archive/2013/12/20/investigating-memory-leaks-in-azure-web-sites-with-visual-studio-2013.aspx). Microsoft ALM blog post about Visual Studio features for analyzing managed memory issues.\n* [Azure web apps online tools you should know about](/blog/2014/03/28/windows-azure-websites-online-tools-you-should-know-about-2/). Blog post by Amit Apple.\n\nFor help with a specific troubleshooting question, start a thread in one of the following forums:\n\n* [The Azure forum on the ASP.NET site](http://forums.asp.net/1247.aspx/1?Azure+and+ASP+NET).\n* [The Azure forum on MSDN](http://social.msdn.microsoft.com/Forums/windowsazure/).\n* [StackOverflow.com](http://www.stackoverflow.com).\n\n### Debugging in Visual Studio \n\nFor more information about how to use debug mode in Visual Studio, see the [Debugging in Visual Studio](http://msdn.microsoft.com/library/vstudio/sc65sadd.aspx) MSDN topic and [Debugging Tips with Visual Studio 2010](http://weblogs.asp.net/scottgu/archive/2010/08/18/debugging-tips-with-visual-studio-2010.aspx).\n\n### Remote debugging in Azure\n\nFor more information about remote debugging for Azure web apps and WebJobs, see the following resources:\n\n* [Introduction to Remote Debugging Azure App Service Web Apps](/blog/2014/05/06/introduction-to-remote-debugging-on-azure-web-sites/).\n* [Introduction to Remote Debugging Azure App Service Web Apps part 2 - Inside Remote debugging](/blog/2014/05/07/introduction-to-remote-debugging-azure-web-sites-part-2-inside-remote-debugging/)\n* [Introduction to Remote Debugging on Azure App Service Web Apps part 3 - Multi-Instance environment and GIT](/blog/2014/05/08/introduction-to-remote-debugging-on-azure-web-sites-part-3-multi-instance-environment-and-git/)\n* [WebJobs Debugging (video)](https://www.youtube.com/watch?v=ncQm9q5ZFZs&list=UU_SjTh-ZltPmTYzAybypB-g&index=1)\n\nIf your web app uses an Azure Web API or Mobile Services back-end and you need to debug that, see [Debugging .NET Backend in Visual Studio](http://blogs.msdn.com/b/azuremobile/archive/2014/03/14/debugging-net-backend-in-visual-studio.aspx).\n\n### Tracing in ASP.NET applications\n\nThere are no thorough and up-to-date introductions to ASP.NET tracing available on the Internet. The best you can do is get started with old introductory materials written for Web Forms because MVC didn't exist yet, and supplement that with newer blog posts that focus on specific issues. Some good places to start are the following resources:\n\n* [Monitoring and Telemetry (Building Real-World Cloud Apps with Azure)](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry).<br> \n  E-book chapter with recommendations for tracing in Azure cloud applications.\n* [ASP.NET Tracing](http://msdn.microsoft.com/library/ms972204.aspx)<br/>\n  Old but still a good resource for a basic introduction to the subject.\n* [Trace Listeners](http://msdn.microsoft.com/library/4y5y10s7.aspx)<br/>\n  Information about trace listeners but doesn't mention the [WebPageTraceListener](http://msdn.microsoft.com/library/system.web.webpagetracelistener.aspx).\n* [Walkthrough: Integrating ASP.NET Tracing with System.Diagnostics Tracing](http://msdn.microsoft.com/library/b0ectfxd.aspx)<br/>\n  This too is old, but includes some additional information that the introductory article doesn't cover.\n* [Tracing in ASP.NET MVC Razor Views](http://blogs.msdn.com/b/webdev/archive/2013/07/16/tracing-in-asp-net-mvc-razor-views.aspx)<br/>\n  Besides tracing in Razor views, the post also explains how to create an error filter in order to log all unhandled exceptions in an MVC application. For information about how to log all unhandled exceptions in a Web Forms application, see the Global.asax example in [Complete Example for Error Handlers](http://msdn.microsoft.com/library/bb397417.aspx) on MSDN. In either MVC or Web Forms, if you want to log certain exceptions but let the default framework handling take effect for them, you can catch and rethrow as in the following example:\n\n        try\n        {\n           // Your code that might cause an exception to be thrown.\n        }\n        catch (Exception ex)\n        {\n            Trace.TraceError(\"Exception: \" + ex.ToString());\n            throw;\n        } \n\n* [Streaming Diagnostics Trace Logging from the Azure Command Line (plus Glimpse!)](http://www.hanselman.com/blog/StreamingDiagnosticsTraceLoggingFromTheAzureCommandLinePlusGlimpse.aspx)<br/>\n  How to use the command line to do what this tutorial shows how to do in Visual Studio. [Glimpse](http://www.hanselman.com/blog/IfYoureNotUsingGlimpseWithASPNETForDebuggingAndProfilingYoureMissingOut.aspx) is a tool for debugging ASP.NET applications. \n* [Using Web Apps Logging and Diagnostics - with David Ebbo](/documentation/videos/azure-web-site-logging-and-diagnostics/) and [Streaming Logs from Web Apps - with David Ebbo](/documentation/videos/log-streaming-with-azure-web-sites/)<br>\n  Videos by Scott Hanselman and David Ebbo.\n\nFor error logging, an alternative to writing your own tracing code is to use an open-source logging framework such as [ELMAH](http://nuget.org/packages/elmah/). For more information, see [Scott Hanselman's blog posts about ELMAH](http://www.hanselman.com/blog/NuGetPackageOfTheWeek7ELMAHErrorLoggingModulesAndHandlersWithSQLServerCompact.aspx).\n\nAlso, note that you don't have to use ASP.NET or System.Diagnostics tracing if you want to get streaming logs from Azure. The Azure web app streaming log service will stream any *.txt*, *.html*, or *.log* file that it finds in the *LogFiles* folder. Therefore, you could create your own logging system that writes to the file system of the web app, and your file will be automatically streamed and downloaded. All you have to do is write application code that creates files in the *d:\\home\\logfiles* folder. \n\n### Analyzing web server logs\n\nFor more information about analyzing web server logs, see the following resources:\n\n* [LogParser](http://www.microsoft.com/download/details.aspx?id=24659)<br/>\n  A tool for viewing data in web server logs (*.log* files).\n* [Troubleshooting IIS Performance Issues or Application Errors using LogParser ](http://www.iis.net/learn/troubleshoot/performance-issues/troubleshooting-iis-performance-issues-or-application-errors-using-logparser)<br/>\n  An introduction to the Log Parser tool that you can use to analyze web server logs.\n* [Blog posts by Robert McMurray on using LogParser](http://blogs.msdn.com/b/robert_mcmurray/archive/tags/logparser/)<br/>\n* [The HTTP status code in IIS 7.0, IIS 7.5, and IIS 8.0](http://support.microsoft.com/kb/943891)\n\n### Analyzing failed request tracing logs\n\nThe Microsoft TechNet website includes a [Using Failed Request Tracing](http://www.iis.net/learn/troubleshoot/using-failed-request-tracing) section which may be helpful for understanding how to use these logs. However, this documentation focuses mainly on configuring failed request tracing in IIS, which you can't do in Azure Web Apps.\n\n### Debugging Cloud Services\n\nIf you want to debug an Azure Cloud Service rather than a web app, see [Debugging Cloud Services](http://msdn.microsoft.com/en-us/library/windowsazure/ee405479.aspx).\n\n>[AZURE.NOTE] If you want to get started with Azure App Service before signing up for an Azure account, go to [Try App Service](http://go.microsoft.com/fwlink/?LinkId=523751), where you can immediately create a short-lived starter web app in App Service. No credit cards required; no commitments.\n\n## What's changed\n* For a guide to the change from Websites to App Service see: [Azure App Service and Its Impact on Existing Azure Services](http://go.microsoft.com/fwlink/?LinkId=529714)\n* For a guide to the change of the old portal to the new portal see: [Reference for navigating the preview portal](http://go.microsoft.com/fwlink/?LinkId=529715)\n\n[GetStarted]: web-sites-dotnet-get-started.md\n[GetStartedWJ]: websites-dotnet-webjobs-sdk.md\n \ntest\n"
}