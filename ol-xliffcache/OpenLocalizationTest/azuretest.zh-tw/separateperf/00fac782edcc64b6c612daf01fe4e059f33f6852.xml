{
  "nodes": [
    {
      "content": "Service Communication Model Overview",
      "pos": [
        26,
        62
      ]
    },
    {
      "content": "This article describes the basics of Communication model supported by the Reliable Service's api.",
      "pos": [
        80,
        177
      ]
    },
    {
      "content": "Service Communication Model",
      "pos": [
        500,
        527
      ]
    },
    {
      "content": "The Reliable Services programming model allows service authors to specify the communication mechanism they want to use to expose their service endpoints and also provides abstractions which clients can use to discover and communicate with the service endpoint.",
      "pos": [
        529,
        789
      ]
    },
    {
      "content": "Setting up the Service communication stack",
      "pos": [
        794,
        836
      ]
    },
    {
      "content": "Reliable Services API allows service authors to plugin the communication stack of their choice in the service by implementing the following method in their service,",
      "pos": [
        838,
        1002
      ]
    },
    {
      "pos": [
        1105,
        1235
      ],
      "content": "The <ph id=\"ph1\">`ICommunicationListener`</ph> interface defines the interface that must be implemented by the communication listener for a service."
    },
    {
      "pos": [
        1527,
        1681
      ],
      "content": "The endpoints that are required for the service are described via the <bpt id=\"p1\">[</bpt>Service manifest<ept id=\"p1\">](service-fabric-application-model.md)</ept> under the Endpoints section."
    },
    {
      "pos": [
        1825,
        2035
      ],
      "content": "The communication listener can access the endpoint resources allocated to it from the <ph id=\"ph1\">`CodePackageActivationContext`</ph> in the <ph id=\"ph2\">`ServiceInitializationParameters`</ph>, and start listening for requests when it is opened."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The Endpoints resources are common to the entire service package and are allocated by Service Fabric when the service package is activated.",
      "pos": [
        2235,
        2387
      ]
    },
    {
      "content": "So all the replicas hosted in the same ServiceHost share the same port.",
      "pos": [
        2388,
        2459
      ]
    },
    {
      "content": "This means that the communication listener should support port sharing.",
      "pos": [
        2460,
        2531
      ]
    },
    {
      "content": "The recommended way of doing this, is for the communication listener to use the partition Id and replica/instance Id when generating the listen address.",
      "pos": [
        2532,
        2684
      ]
    },
    {
      "content": "Client to Service Communication",
      "pos": [
        3400,
        3431
      ]
    },
    {
      "content": "Reliable Services API provides the following abstractions which make writing clients for communicating with Services easy.",
      "pos": [
        3432,
        3554
      ]
    },
    {
      "content": "ServicePartitionResolver",
      "pos": [
        3559,
        3583
      ]
    },
    {
      "content": "ServicePartitionResolver class helps the client to determine the endpoint of a Service Fabric service at runtime.",
      "pos": [
        3584,
        3697
      ]
    },
    {
      "pos": [
        3701,
        3842
      ],
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The process of determining the endpoint of a service is referred to as Service Endpoint Resolution in Service Fabric terminology."
    },
    {
      "pos": [
        4292,
        4454
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> FabricClient is the object that is used to communicate to the Service Fabric cluster for various management operations on the Service Fabric cluster."
    },
    {
      "content": "Typically client code need not work with <ph id=\"ph1\">`ServicePartitionResolver`</ph> directly.",
      "pos": [
        4456,
        4533
      ]
    },
    {
      "content": "It is created and passed on to other helper classes in the Reliable Service's API, which internally use the resolver and help the client communicate with the service.",
      "pos": [
        4534,
        4700
      ]
    },
    {
      "content": "CommunicationClientFactory",
      "pos": [
        4705,
        4731
      ]
    },
    {
      "content": "<ph id=\"ph1\">`ICommunicationClientFactory`</ph> defines the base interface implemented by a communication client factory that produces clients that can talk to a ServiceFabric service.",
      "pos": [
        4732,
        4898
      ]
    },
    {
      "content": "The implementation of the CommunicationClientFactory will depend on the communication stack used by the Service Fabric service to which the client wants to communicate to.",
      "pos": [
        4899,
        5070
      ]
    },
    {
      "content": "Reliable Service's API provides a CommunicationClientFactoryBase",
      "pos": [
        5071,
        5135
      ]
    },
    {
      "content": "which provides a base implementation of this <ph id=\"ph1\">`ICommunicationClientFactory`</ph> interface and performs tasks which are common for all the communication stacks.(like using a <ph id=\"ph2\">`ServicePartitionResolver`</ph> to determine the service endpoint).",
      "pos": [
        5158,
        5388
      ]
    },
    {
      "content": "Clients usually implement the abstract CommunicationClientFactoryBase class to handle communication stack specific logic.",
      "pos": [
        5389,
        5510
      ]
    },
    {
      "content": "ServicePartitionClient",
      "pos": [
        6835,
        6857
      ]
    },
    {
      "pos": [
        6858,
        7093
      ],
      "content": "<ph id=\"ph1\">`ServicePartitionClient`</ph> uses the CommunicationClientFactory(and internally the ServicePartitionResolver) and helps in communicating with the service by handling retries for common communication and Service Fabric Transient exceptions."
    },
    {
      "content": "A typical usage pattern would look like this,",
      "pos": [
        7447,
        7492
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        8114,
        8124
      ]
    },
    {
      "content": "Default communication stack provided by the Reliable Services Framework",
      "pos": [
        8128,
        8199
      ]
    },
    {
      "content": "WCF based communication stack provided by the Reliable Services Framework",
      "pos": [
        8264,
        8337
      ]
    },
    {
      "content": "Writing a Service using Reliable Services API that uses WebAPI communication stack",
      "pos": [
        8398,
        8480
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Service Communication Model Overview\"\n   description=\"This article describes the basics of Communication model supported by the Reliable Service's api.\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"BharatNarasimman\"\n   manager=\"vipulm\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"required\"\n   ms.date=\"08/27/2015\"\n   ms.author=\"bharatn@microsoft.com\"/>\n\n# Service Communication Model\n\nThe Reliable Services programming model allows service authors to specify the communication mechanism they want to use to expose their service endpoints and also provides abstractions which clients can use to discover and communicate with the service endpoint.\n\n## Setting up the Service communication stack\n\nReliable Services API allows service authors to plugin the communication stack of their choice in the service by implementing the following method in their service,\n\n```csharp\n\nprotected override ICommunicationListener CreateCommunicationListener()\n{\n    ...\n}\n\n```\n\nThe `ICommunicationListener` interface defines the interface that must be implemented by the communication listener for a service.\n\n```csharp\n\npublic interface ICommunicationListener\n{\n    void Initialize(ServiceInitializationParameters serviceInitializationParameters);\n\n    Task<string> OpenAsync(CancellationToken cancellationToken);\n\n    Task CloseAsync(CancellationToken cancellationToken);\n\n    void Abort();\n}\n\n```\nThe endpoints that are required for the service are described via the [Service manifest](service-fabric-application-model.md) under the Endpoints section.\n\n```xml\n\n<Resources>\n    <Endpoints>\n      <Endpoint Name=\"ServiceEndpoint\" Protocol=\"http\" Type=\"Input\" />\n    <Endpoints>\n</Resources>\n\n```\n\nThe communication listener can access the endpoint resources allocated to it from the `CodePackageActivationContext` in the `ServiceInitializationParameters`, and start listening for requests when it is opened.\n\n```csharp\n\nvar codePackageActivationContext = this.serviceInitializationParameters.CodePackageActivationContext;\nvar port = codePackageActivationContext.GetEndpoint(\"ServiceEndpoint\").Port;\n\n```\n\n> [AZURE.NOTE] The Endpoints resources are common to the entire service package and are allocated by Service Fabric when the service package is activated. So all the replicas hosted in the same ServiceHost share the same port. This means that the communication listener should support port sharing. The recommended way of doing this, is for the communication listener to use the partition Id and replica/instance Id when generating the listen address.\n\n```csharp\n\nvar replicaOrInstanceId = 0;\nvar parameters = this.serviceInitializationParameters as StatelessServiceInitializationParameters;\nif (parameters != null)\n{\n  replicaOrInstanceId = parameters.InstanceId;\n}\nelse\n{\n  replicaOrInstanceId = ((StatefulServiceInitializationParameters) this.serviceInitializationParameters).ReplicaId;\n}\n\nvar nodeContext = FabricRuntime.GetNodeContext();\n\nvar listenAddress = new Uri(\n    string.Format(\n        CultureInfo.InvariantCulture,\n        \"{0}://{1}:{2}/{5}/{3}-{4}\",\n        scheme,\n        nodeContext.IPAddressOrFQDN,\n        port,\n        this.serviceInitializationParameters.PartitionId,\n        replicaOrInstanceId,\n        Guid.NewGuid().ToString()));\n\n```\n\n## Client to Service Communication\nReliable Services API provides the following abstractions which make writing clients for communicating with Services easy.\n\n## ServicePartitionResolver\nServicePartitionResolver class helps the client to determine the endpoint of a Service Fabric service at runtime.\n\n> [AZURE.TIP] The process of determining the endpoint of a service is referred to as Service Endpoint Resolution in Service Fabric terminology.\n\n```csharp\n\npublic delegate FabricClient CreateFabricClientDelegate();\n\n// ServicePartitionResolver methods\n\npublic ServicePartitionResolver(CreateFabricClientDelegate createFabricClient);\n\nTask<ResolvedServicePartition> ResolveAsync(Uri serviceName,\n    long partitionKey,\n    CancellationToken cancellationToken);\n\nTask<ResolvedServicePartition> ResolveAsync(ResolvedServicePartition previousRsp,\n    CancellationToken cancellationToken);\n\n\n```\n> [AZURE.NOTE] FabricClient is the object that is used to communicate to the Service Fabric cluster for various management operations on the Service Fabric cluster.\n\nTypically client code need not work with `ServicePartitionResolver` directly. It is created and passed on to other helper classes in the Reliable Service's API, which internally use the resolver and help the client communicate with the service.\n\n## CommunicationClientFactory\n`ICommunicationClientFactory` defines the base interface implemented by a communication client factory that produces clients that can talk to a ServiceFabric service. The implementation of the CommunicationClientFactory will depend on the communication stack used by the Service Fabric service to which the client wants to communicate to. Reliable Service's API provides a CommunicationClientFactoryBase<TCommunicationClient> which provides a base implementation of this `ICommunicationClientFactory` interface and performs tasks which are common for all the communication stacks.(like using a `ServicePartitionResolver` to determine the service endpoint). Clients usually implement the abstract CommunicationClientFactoryBase class to handle communication stack specific logic.\n\n```csharp\n\nprotected CommunicationClientFactoryBase(\n    ServicePartitionResolver servicePartitionResolver = null,\n    IEnumerable<IExceptionHandler> exceptionHandlers = null,\n    IEnumerable<Type> doNotRetryExceptionTypes = null);\n\n\npublic class MyCommunicationClient : ICommunicationClient\n{\n    public MyCommunicationClient(MyCommunicationChannel communicationChannel)\n    {\n      this.CommunicationChannel = communicationChannel;\n    }\n    public MyCommunicationChannel CommunicationChannel { get; private set; }\n    public ResolvedServicePartition ResolvedServicePartition;\n\n}\n\npublic class MyCommunicationClientFactory : CommunicationClientFactoryBase<MyCommunicationClient>\n{\n    protected override void AbortClient(MyCommunicationClient1 client)\n    {\n        throw new NotImplementedException();\n    }\n\n    protected override Task<MyCommunicationClient> CreateClientAsync(ResolvedServiceEndpoint endpoint, CancellationToken cancellationToken)\n    {\n        throw new NotImplementedException();\n    }\n\n    protected override bool ValidateClient(MyCommunicationClient clientChannel)\n    {\n        throw new NotImplementedException();\n    }\n\n    protected override bool ValidateClient(ResolvedServiceEndpoint endpoint, MyCommunicationClient client)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n```\n\n## ServicePartitionClient\n`ServicePartitionClient` uses the CommunicationClientFactory(and internally the ServicePartitionResolver) and helps in communicating with the service by handling retries for common communication and Service Fabric Transient exceptions.\n\n```csharp\n\npublic ServicePartitionClient(\n    ICommunicationClientFactory<TCommunicationClient> factory,\n    Uri serviceName,\n    long partitionKey);\n\npublic async Task<TResult> InvokeWithRetryAsync<TResult>(\n    Func<TCommunicationClient, Task<TResult>> func,\n    CancellationToken cancellationToken,\n    params Type[] doNotRetryExceptionTypes)\n\n```\n\nA typical usage pattern would look like this,\n\n```csharp\n\npublic MyCommunicationClientFactory myCommunicationClientFactory;\npublic Uri myServiceUri;\n\n... other client code ..\n\n// Call the service corresponding to the partitionKey myKey.\n\nvar myServicePartitionClient = new ServicePartitionClient<MyCommunicationClient>(\n    this.myCommunicationClientFactory,\n    this.myServiceUri,\n    myKey);\n\n  var result = await myServicePartitionClient.InvokeWithRetryAsync(\n      client =>\n      {\n        // Communicate with the service using the client.\n        throw new NotImplementedException();\n      },\n      CancellationToken.None);\n\n\n... other client code ...\n\n```\n\n## Next Steps\n* [Default communication stack provided by the Reliable Services Framework](service-fabric-reliable-services-communication-default.md)\n\n* [WCF based communication stack provided by the Reliable Services Framework](service-fabric-reliable-services-communication-wcf.md)\n\n* [Writing a Service using Reliable Services API that uses WebAPI communication stack](service-fabric-reliable-services-communication-webapi.md)\n \n"
}