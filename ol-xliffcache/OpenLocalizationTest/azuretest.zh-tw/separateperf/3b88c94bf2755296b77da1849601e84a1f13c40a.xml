{
  "nodes": [
    {
      "content": "User-defined schemas in SQL Data Warehouse | Microsoft Azure",
      "pos": [
        26,
        86
      ]
    },
    {
      "content": "Tips for using Transact-SQL schemas in Azure SQL Data Warehouse for developing solutions.",
      "pos": [
        104,
        193
      ]
    },
    {
      "content": "User-defined schemas in SQL Data Warehouse",
      "pos": [
        531,
        573
      ]
    },
    {
      "content": "Traditional data warehouses often use separate databases to create application boundaries based on either workload, domain or security.",
      "pos": [
        575,
        710
      ]
    },
    {
      "content": "For example, a traditional SQL Server data warehouse might include a staging database, a data warehouse database, and some data mart databases.",
      "pos": [
        711,
        854
      ]
    },
    {
      "content": "In this topology each database operates as a workload and security boundary in the architecture.",
      "pos": [
        855,
        951
      ]
    },
    {
      "content": "By contrast, SQL Data Warehouse runs the entire data warehouse workload within one database.",
      "pos": [
        953,
        1045
      ]
    },
    {
      "content": "Cross database joins are not permitted.",
      "pos": [
        1046,
        1085
      ]
    },
    {
      "content": "Therefore SQL Data Warehouse expects all tables used by the warehouse to be stored within the one database.",
      "pos": [
        1086,
        1193
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> SQL Data Warehouse does not support cross database queries of any kind.",
      "pos": [
        1197,
        1281
      ]
    },
    {
      "content": "Consequently, data warehouse implementations that leverage this pattern will need to be revised.",
      "pos": [
        1282,
        1378
      ]
    },
    {
      "content": "Recommendations",
      "pos": [
        1383,
        1398
      ]
    },
    {
      "content": "These are recommendations for consolidating workloads, security, domain and functional boundaries by using user defined schemas",
      "pos": [
        1401,
        1528
      ]
    },
    {
      "content": "Use one SQL Data Warehouse database to run your entire data warehouse workload",
      "pos": [
        1533,
        1611
      ]
    },
    {
      "content": "Consolidate your existing data warehouse environment to use one SQL Data Warehouse database",
      "pos": [
        1615,
        1706
      ]
    },
    {
      "pos": [
        1710,
        1807
      ],
      "content": "Leverage <bpt id=\"p1\">**</bpt>user-defined schemas<ept id=\"p1\">**</ept> to provide the boundary previously implemented using databases."
    },
    {
      "content": "If user-defined schemas have not been used previously then you have a clean slate.",
      "pos": [
        1809,
        1891
      ]
    },
    {
      "content": "Simply use the old database name as the basis for your user-defined schemas in the SQL Data Warehouse database.",
      "pos": [
        1892,
        2003
      ]
    },
    {
      "content": "If schemas have already been used then you have a few options:",
      "pos": [
        2005,
        2067
      ]
    },
    {
      "content": "Remove the legacy schema names and start fresh",
      "pos": [
        2072,
        2118
      ]
    },
    {
      "content": "Retain the legacy schema names by pre-pending the legacy schema name to the table name",
      "pos": [
        2122,
        2208
      ]
    },
    {
      "content": "Retain the legacy schema names by implementing views over the table in an extra schema to re-create the old schema structure.",
      "pos": [
        2212,
        2337
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> On first inspection option 3 may seem like the most appealing option.",
      "pos": [
        2341,
        2423
      ]
    },
    {
      "content": "However, the devil is in the detail.",
      "pos": [
        2424,
        2460
      ]
    },
    {
      "content": "Views are read only in SQL Data Warehouse.",
      "pos": [
        2461,
        2503
      ]
    },
    {
      "content": "Any data or table modification would need to be performed against the base table.",
      "pos": [
        2504,
        2585
      ]
    },
    {
      "content": "Option 3 also introduces a layer of views into your system.",
      "pos": [
        2586,
        2645
      ]
    },
    {
      "content": "You might want to give this some additional thought if you are using views in your architecture already.",
      "pos": [
        2646,
        2750
      ]
    },
    {
      "content": "Examples:",
      "pos": [
        2757,
        2766
      ]
    },
    {
      "content": "Implement user-defined schemas based on database names",
      "pos": [
        2771,
        2825
      ]
    },
    {
      "content": "Retain legacy schema names by pre-pending them to the table name.",
      "pos": [
        3245,
        3310
      ]
    },
    {
      "content": "Use schemas for the workload boundary.",
      "pos": [
        3311,
        3349
      ]
    },
    {
      "content": "Retain legacy schema names using views",
      "pos": [
        3820,
        3858
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Any change in schema strategy needs a review of the security model for the database.",
      "pos": [
        4537,
        4634
      ]
    },
    {
      "content": "In many cases you might be able to simplify the security model by assigning permissions at the schema level.",
      "pos": [
        4635,
        4743
      ]
    },
    {
      "content": "If more granular permissions are required then you can use database roles.",
      "pos": [
        4744,
        4818
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        4823,
        4833
      ]
    },
    {
      "pos": [
        4834,
        4890
      ],
      "content": "For more development tips, see <bpt id=\"p1\">[</bpt>development overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"User-defined schemas in SQL Data Warehouse | Microsoft Azure\"\n   description=\"Tips for using Transact-SQL schemas in Azure SQL Data Warehouse for developing solutions.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"06/22/2015\"\n   ms.author=\"JRJ@BigBangData.co.uk;barbkess\"/>\n\n# User-defined schemas in SQL Data Warehouse\n\nTraditional data warehouses often use separate databases to create application boundaries based on either workload, domain or security. For example, a traditional SQL Server data warehouse might include a staging database, a data warehouse database, and some data mart databases. In this topology each database operates as a workload and security boundary in the architecture.\n\nBy contrast, SQL Data Warehouse runs the entire data warehouse workload within one database. Cross database joins are not permitted. Therefore SQL Data Warehouse expects all tables used by the warehouse to be stored within the one database.\n\n> [AZURE.NOTE] SQL Data Warehouse does not support cross database queries of any kind. Consequently, data warehouse implementations that leverage this pattern will need to be revised.\n\n## Recommendations \n\nThese are recommendations for consolidating workloads, security, domain and functional boundaries by using user defined schemas\n\n1. Use one SQL Data Warehouse database to run your entire data warehouse workload\n2. Consolidate your existing data warehouse environment to use one SQL Data Warehouse database\n3. Leverage **user-defined schemas** to provide the boundary previously implemented using databases.\n\nIf user-defined schemas have not been used previously then you have a clean slate. Simply use the old database name as the basis for your user-defined schemas in the SQL Data Warehouse database.\n\nIf schemas have already been used then you have a few options:\n\n1. Remove the legacy schema names and start fresh\n2. Retain the legacy schema names by pre-pending the legacy schema name to the table name\n3. Retain the legacy schema names by implementing views over the table in an extra schema to re-create the old schema structure.\n\n> [AZURE.NOTE] On first inspection option 3 may seem like the most appealing option. However, the devil is in the detail. Views are read only in SQL Data Warehouse. Any data or table modification would need to be performed against the base table. Option 3 also introduces a layer of views into your system. You might want to give this some additional thought if you are using views in your architecture already.\n\n\n### Examples:\n\n1. Implement user-defined schemas based on database names\n\n```\nCREATE SCHEMA [stg]; -- stg previously database name for staging database\nGO\nCREATE SCHEMA [edw]; -- edw previously database name for the data warehouse\nGO\nCREATE TABLE [stg].[customer] -- create staging tables in the stg schema\n(       CustKey BIGINT NOT NULL\n,       ...\n);\nGO\nCREATE TABLE [edw].[customer] -- create data warehouse tables in the edw schema\n(       CustKey BIGINT NOT NULL\n,       ...\n);\n```\n\n2. Retain legacy schema names by pre-pending them to the table name. Use schemas for the workload boundary.\n\n```\nCREATE SCHEMA [stg]; -- stg defines the staging boundary\nGO\nCREATE SCHEMA [edw]; -- edw defines the data warehouse boundary\nGO\nCREATE TABLE [stg].[dim_customer] --pre-pend the old schema name to the table and create in the staging boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n);\nGO\nCREATE TABLE [edw].[dim_customer] --pre-pend the old schema name to the table and create in the data warehouse boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n);\n```\n\n3. Retain legacy schema names using views\n\n```\nCREATE SCHEMA [stg]; -- stg defines the staging boundary\nGO\nCREATE SCHEMA [edw]; -- stg defines the data warehouse boundary\nGO\nCREATE SCHEMA [dim]; -- edw defines the legacy schema name boundary\nGO\nCREATE TABLE [stg].[customer] -- create the base staging tables in the staging boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n)\nGO\nCREATE TABLE [edw].[customer] -- create the base data warehouse tables in the data warehouse boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n)\nGO\nCREATE VIEW [dim].[customer] -- create a view in the legacy schema name boundary for presentation consistency purposes only\nAS\nSELECT  CustKey\n,       ...\nFROM    [edw].customer\n;\n```\n\n> [AZURE.NOTE] Any change in schema strategy needs a review of the security model for the database. In many cases you might be able to simplify the security model by assigning permissions at the schema level. If more granular permissions are required then you can use database roles.\n\n## Next steps\nFor more development tips, see [development overview][].\n\n<!--Image references-->\n\n<!--Article references-->\n[development overview]: sql-data-warehouse-overview-develop.md\n\n<!--MSDN references-->\n\n<!--Other Web references-->"
}