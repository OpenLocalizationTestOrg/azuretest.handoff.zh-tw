{
  "nodes": [
    {
      "content": "Create a table",
      "pos": [
        5,
        19
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> object lets you get reference objects for tables and entities.",
      "pos": [
        20,
        105
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> object and uses it to create a new table.",
      "pos": [
        106,
        197
      ]
    },
    {
      "content": "The code tries to reference a table named “people.”",
      "pos": [
        198,
        249
      ]
    },
    {
      "content": "If it can’t find a table with that name, it creates one.",
      "pos": [
        250,
        306
      ]
    },
    {
      "pos": [
        308,
        509
      ],
      "content": "<bpt id=\"p1\">**</bpt>NOTE:<ept id=\"p1\">**</ept> All code in this guide assumes that the application being built is an Azure Cloud Service project and uses a storage connection string stored in the Azure application's service configuration."
    },
    {
      "content": "Add an entity to a table",
      "pos": [
        770,
        794
      ]
    },
    {
      "content": "To add an entity to a table you create a class that defines the properties of your entity.",
      "pos": [
        795,
        885
      ]
    },
    {
      "content": "The following code defines an entity class called <bpt id=\"p1\">**</bpt>CustomerEntity<ept id=\"p1\">**</ept> that uses the customer's first name as the row key and last name as the partition key.",
      "pos": [
        886,
        1041
      ]
    },
    {
      "content": "Table operations involving entities are done using the <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> object you created earlier in \"Create a Table.\"",
      "pos": [
        1407,
        1524
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> object represents the operation to be done.",
      "pos": [
        1525,
        1591
      ]
    },
    {
      "content": "The following code example shows how to create a <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> object and a <bpt id=\"p2\">**</bpt>CustomerEntity<ept id=\"p2\">**</ept> object.",
      "pos": [
        1592,
        1695
      ]
    },
    {
      "content": "To prepare the operation, a <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> is created to insert the customer entity into the table.",
      "pos": [
        1696,
        1799
      ]
    },
    {
      "content": "Finally, the operation is executed by calling CloudTable.Execute.",
      "pos": [
        1800,
        1865
      ]
    },
    {
      "content": "Insert a batch of entities",
      "pos": [
        2429,
        2455
      ]
    },
    {
      "content": "You can insert multiple entities into a table in a single write operation.",
      "pos": [
        2456,
        2530
      ]
    },
    {
      "content": "The following code example creates two entity objects (\"Jeff Smith\" and \"Ben Smith\"), adds them to a <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> object using the Insert method, and then starts the operation by calling CloudTable.Execute.",
      "pos": [
        2531,
        2748
      ]
    },
    {
      "content": "Get all of the entities in a partition",
      "pos": [
        3663,
        3701
      ]
    },
    {
      "content": "To query a table for all of the entities in a partition, use a <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> object.",
      "pos": [
        3702,
        3787
      ]
    },
    {
      "content": "The following code example specifies a filter for entities where 'Smith' is the partition key.",
      "pos": [
        3788,
        3882
      ]
    },
    {
      "content": "This example prints the fields of each entity in the query results to the console.",
      "pos": [
        3883,
        3965
      ]
    },
    {
      "content": "Get a single entity",
      "pos": [
        4625,
        4644
      ]
    },
    {
      "content": "You can write a query to get a single, specific entity.",
      "pos": [
        4645,
        4700
      ]
    },
    {
      "content": "The following code uses a <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> object to specify a customer named 'Ben Smith'.",
      "pos": [
        4701,
        4793
      ]
    },
    {
      "content": "This method returns just one entity, rather than a collection, and the returned value in TableResult.Result is a <bpt id=\"p1\">**</bpt>CustomerEntity<ept id=\"p1\">**</ept> object.",
      "pos": [
        4794,
        4933
      ]
    },
    {
      "content": "Specifying both partition and row keys in a query is the fastest way to retrieve a single entity from the <bpt id=\"p1\">**</bpt>Table<ept id=\"p1\">**</ept> service.",
      "pos": [
        4934,
        5058
      ]
    },
    {
      "content": "Delete an entity",
      "pos": [
        5729,
        5745
      ]
    },
    {
      "content": "You can delete an entity after you find it.",
      "pos": [
        5746,
        5789
      ]
    },
    {
      "content": "The following code looks for a customer entity named \"Ben Smith\" and if it finds it, it deletes it.",
      "pos": [
        5790,
        5889
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Learn more about Azure Storage<ept id=\"p1\">](http://azure.microsoft.com/documentation/services/storage/)</ept>",
      "pos": [
        6807,
        6899
      ]
    },
    {
      "content": "See also <bpt id=\"p1\">[</bpt>Browsing Storage Resources in Server Explorer<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/ff683677.aspx)</ept>.",
      "pos": [
        6900,
        7012
      ]
    }
  ],
  "content": "#####Create a table\nA **CloudTableClient** object lets you get reference objects for tables and entities. The following code creates a **CloudTableClient** object and uses it to create a new table. The code tries to reference a table named “people.” If it can’t find a table with that name, it creates one.\n\n**NOTE:** All code in this guide assumes that the application being built is an Azure Cloud Service project and uses a storage connection string stored in the Azure application's service configuration.\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n    \n    // Create the table if it doesn't exist.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    table.CreateIfNotExists();\n\n#####Add an entity to a table\nTo add an entity to a table you create a class that defines the properties of your entity. The following code defines an entity class called **CustomerEntity** that uses the customer's first name as the row key and last name as the partition key.\n\n    public class CustomerEntity : TableEntity\n    {\n        public CustomerEntity(string lastName, string firstName)\n        {\n            this.PartitionKey = lastName;\n            this.RowKey = firstName;\n        }\n    \n        public CustomerEntity() { }\n    \n        public string Email { get; set; }\n    \n        public string PhoneNumber { get; set; }\n    }\n\nTable operations involving entities are done using the **CloudTable** object you created earlier in \"Create a Table.\" The **TableOperation** object represents the operation to be done. The following code example shows how to create a **CloudTable** object and a **CustomerEntity** object. To prepare the operation, a **TableOperation** is created to insert the customer entity into the table. Finally, the operation is executed by calling CloudTable.Execute.\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n    \n    // Create the TableOperation that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n    \n    // Execute the insert operation.\n    table.Execute(insertOperation);\n\n#####Insert a batch of entities\nYou can insert multiple entities into a table in a single write operation. The following code example creates two entity objects (\"Jeff Smith\" and \"Ben Smith\"), adds them to a **TableBatchOperation** object using the Insert method, and then starts the operation by calling CloudTable.Execute.\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n    \n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n    \n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n    \n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n    \n    // Execute the batch operation.\n    table.ExecuteBatch(batchOperation);\n\n#####Get all of the entities in a partition\nTo query a table for all of the entities in a partition, use a **TableQuery** object. The following code example specifies a filter for entities where 'Smith' is the partition key. This example prints the fields of each entity in the query results to the console.\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n    \n    // Print the fields for each customer.\n    foreach (CustomerEntity entity in table.ExecuteQuery(query))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n#####Get a single entity\nYou can write a query to get a single, specific entity. The following code uses a **TableOperation** object to specify a customer named 'Ben Smith'. This method returns just one entity, rather than a collection, and the returned value in TableResult.Result is a **CustomerEntity** object. Specifying both partition and row keys in a query is the fastest way to retrieve a single entity from the **Table** service.\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n    \n    // Execute the retrieve operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n    \n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n#####Delete an entity\nYou can delete an entity after you find it. The following code looks for a customer entity named \"Ben Smith\" and if it finds it, it deletes it.\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n    \n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n    \n    // Assign the result to a CustomerEntity object.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n    \n    // Create the Delete TableOperation and then execute it.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n    \n       // Execute the operation.\n       table.Execute(deleteOperation);\n    \n       Console.WriteLine(\"Entity deleted.\");\n    }\n    \n    else\n       Console.WriteLine(\"Couldn't delete the entity.\");\n\n[Learn more about Azure Storage](http://azure.microsoft.com/documentation/services/storage/)\nSee also [Browsing Storage Resources in Server Explorer](http://msdn.microsoft.com/library/azure/ff683677.aspx)."
}