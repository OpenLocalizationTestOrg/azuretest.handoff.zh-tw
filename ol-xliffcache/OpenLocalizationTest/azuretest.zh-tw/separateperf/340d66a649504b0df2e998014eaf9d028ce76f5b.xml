{
  "nodes": [
    {
      "content": "Azure Search Service REST API Version 2015-02-28-Preview | Microsoft Azure",
      "pos": [
        26,
        100
      ]
    },
    {
      "content": "Azure Search Service REST API Version 2015-02-28-Preview includes experimental features such as Natural Language Analyzers and moreLikeThis searches.",
      "pos": [
        118,
        267
      ]
    },
    {
      "content": "Azure Search Service REST API: Version 2015-02-28-Preview",
      "pos": [
        553,
        610
      ]
    },
    {
      "content": "This article is the reference documentation for <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        612,
        693
      ]
    },
    {
      "content": "This preview extends the current generally available version, <bpt id=\"p1\">[</bpt>api-version=2015-02-28<ept id=\"p1\">](https://msdn.microsoft.com/library/dn798935.aspx)</ept>, by providing the following experimental features:",
      "pos": [
        694,
        881
      ]
    },
    {
      "pos": [
        885,
        1050
      ],
      "content": "<bpt id=\"p1\">[</bpt>Natural language processors<ept id=\"p1\">](#LanguageSupport)</ept> from Microsoft (the same ones used by Office and Bing) offer greater precision over query results and more languages."
    },
    {
      "pos": [
        1053,
        1206
      ],
      "content": "<ph id=\"ph1\">`moreLikeThis`</ph> is a a query parameter used in <bpt id=\"p1\">[</bpt>Search operations<ept id=\"p1\">](#SearchDocs)</ept> that finds other documents that are relevant to another specific document."
    },
    {
      "pos": [
        1209,
        1380
      ],
      "content": "A POST alternative to the GET syntax for both the <bpt id=\"p1\">[</bpt>Search<ept id=\"p1\">](#SearchDocs)</ept> and <bpt id=\"p2\">[</bpt>Suggestions<ept id=\"p2\">](#Suggestions)</ept> API, useful when the overall URL length would otherwise exceed 8KB."
    },
    {
      "content": "A few additional features in <ph id=\"ph1\">`2015-02-28-Preview`</ph> are documented separately.",
      "pos": [
        1382,
        1458
      ]
    },
    {
      "content": "These include:",
      "pos": [
        1459,
        1473
      ]
    },
    {
      "content": "Scoring Profiles",
      "pos": [
        1478,
        1494
      ]
    },
    {
      "content": "Indexers",
      "pos": [
        1550,
        1558
      ]
    },
    {
      "content": "Azure Search service is available in multiple versions.",
      "pos": [
        1604,
        1659
      ]
    },
    {
      "content": "Please refer to <bpt id=\"p1\">[</bpt>Search Service Versioning<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details.",
      "pos": [
        1660,
        1771
      ]
    },
    {
      "content": "APIs in this document",
      "pos": [
        1775,
        1796
      ]
    },
    {
      "content": "The Azure Search Service API supports two syntaxes for entity lookup: <bpt id=\"p1\">[</bpt>simple<ept id=\"p1\">](https://msdn.microsoft.com/library/dn798920.aspx)</ept> and alternate OData syntax (see <bpt id=\"p2\">[</bpt>Support for OData (Azure Search API)<ept id=\"p2\">](http://msdn.microsoft.com/library/azure/dn798932.aspx)</ept> for details).",
      "pos": [
        1798,
        2066
      ]
    },
    {
      "content": "The following list shows the simple syntax.",
      "pos": [
        2067,
        2110
      ]
    },
    {
      "content": "Create Index",
      "pos": [
        2113,
        2125
      ]
    },
    {
      "content": "Update Index",
      "pos": [
        2193,
        2205
      ]
    },
    {
      "content": "Get Index",
      "pos": [
        2285,
        2294
      ]
    },
    {
      "content": "Listing Indexes",
      "pos": [
        2371,
        2386
      ]
    },
    {
      "content": "Get Index Statistics",
      "pos": [
        2453,
        2473
      ]
    },
    {
      "content": "Delete an Index",
      "pos": [
        2561,
        2576
      ]
    },
    {
      "content": "Add, Delete, and Update Data within an Index",
      "pos": [
        2659,
        2703
      ]
    },
    {
      "content": "Search Documents",
      "pos": [
        2804,
        2820
      ]
    },
    {
      "content": "Lookup Document",
      "pos": [
        2966,
        2981
      ]
    },
    {
      "content": "Count Documents",
      "pos": [
        3059,
        3074
      ]
    },
    {
      "content": "Suggestions",
      "pos": [
        3164,
        3175
      ]
    },
    {
      "content": "Index Operations",
      "pos": [
        3398,
        3414
      ]
    },
    {
      "content": "You can create and manage indexes in Azure Search service via simple HTTP requests (POST, GET, PUT, DELETE) against a given index resource.",
      "pos": [
        3416,
        3555
      ]
    },
    {
      "content": "To create an index, you first POST a JSON document that describes the index schema.",
      "pos": [
        3556,
        3639
      ]
    },
    {
      "content": "The schema defines the fields of the index, their data types, and how they can be used (for example, in full-text searches, filters, sorting, or faceting).",
      "pos": [
        3640,
        3795
      ]
    },
    {
      "content": "It also defines scoring profiles, suggesters and other attributes to configure the behavior of the index.",
      "pos": [
        3796,
        3901
      ]
    },
    {
      "content": "The following example provides an illustration of a schema used for searching on hotel information with the Description field defined in two languages.",
      "pos": [
        3903,
        4054
      ]
    },
    {
      "content": "Notice how attributes control how the field is used.",
      "pos": [
        4055,
        4107
      ]
    },
    {
      "content": "For example the <ph id=\"ph1\">`hotelId`</ph> is used as the document key (<ph id=\"ph2\">`\"key\": true`</ph>) and is excluded from full-text searches (<ph id=\"ph3\">`\"searchable\": false`</ph>).",
      "pos": [
        4108,
        4242
      ]
    },
    {
      "content": "After the index is created, you'll upload documents that populate the index.",
      "pos": [
        5287,
        5363
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Add or Update Documents<ept id=\"p1\">](#AddOrUpdateDocuments)</ept> for this next step.",
      "pos": [
        5364,
        5436
      ]
    },
    {
      "pos": [
        5438,
        5597
      ],
      "content": "For a video introduction to indexing in Azure Search, see the <bpt id=\"p1\">[</bpt>Channel 9 Cloud Cover episode on Azure Search<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=511509)</ept>."
    },
    {
      "content": "Create Index",
      "pos": [
        5630,
        5642
      ]
    },
    {
      "content": "An index is the primary means of organizing and searching documents in Azure Search, similar to how a table organizes records in a database.",
      "pos": [
        5644,
        5784
      ]
    },
    {
      "content": "Each index has a collection of documents that all conform to the index schema (field names, data types, and properties), but indexes also specify additional constructs (suggesters, scoring profiles, and CORS options) that define other search behaviors.",
      "pos": [
        5785,
        6037
      ]
    },
    {
      "content": "You can create a new index within an Azure Search service using an HTTP POST or PUT request.",
      "pos": [
        6039,
        6131
      ]
    },
    {
      "content": "The body of the request is a JSON schema that specifies the index and configuration information.",
      "pos": [
        6132,
        6228
      ]
    },
    {
      "content": "Alternatively, you can use PUT and specify the index name on the URI.",
      "pos": [
        6376,
        6445
      ]
    },
    {
      "content": "If the index does not exist, it will be created.",
      "pos": [
        6446,
        6494
      ]
    },
    {
      "content": "Creating an index determines the structure of the documents stored and used in search operations.",
      "pos": [
        6581,
        6678
      ]
    },
    {
      "content": "Populating the index is a separate operation.",
      "pos": [
        6679,
        6724
      ]
    },
    {
      "content": "For this step, you can use an <bpt id=\"p1\">[</bpt>indexer<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/mt183328.aspx)</ept> (available for supported data sources) or an <bpt id=\"p2\">[</bpt>Add, Update, or Delete Documents<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/dn798930.aspx)</ept> operation.",
      "pos": [
        6725,
        6967
      ]
    },
    {
      "content": "The inverted index is generated when the documents are posted.",
      "pos": [
        6968,
        7030
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: The maximum number of indexes allowed varies by pricing tier.",
      "pos": [
        7032,
        7103
      ]
    },
    {
      "content": "The free service allows up to 3 indexes.",
      "pos": [
        7104,
        7144
      ]
    },
    {
      "content": "Standard service allows 50 indexes per Search service.",
      "pos": [
        7145,
        7199
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Limits and constraints<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn798934.aspx)</ept> for details.",
      "pos": [
        7200,
        7296
      ]
    },
    {
      "content": "Request",
      "pos": [
        7300,
        7307
      ]
    },
    {
      "content": "HTTPS is required for all service requests.",
      "pos": [
        7311,
        7354
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Create Index<ept id=\"p1\">**</ept> request can be constructed using either a POST or PUT method.",
      "pos": [
        7355,
        7437
      ]
    },
    {
      "content": "When using POST, you must provide an index name in the request body along with the index schema definition.",
      "pos": [
        7438,
        7545
      ]
    },
    {
      "content": "With PUT, the index name is part of the URL.",
      "pos": [
        7546,
        7590
      ]
    },
    {
      "content": "If the index doesn't exist, it is created.",
      "pos": [
        7591,
        7633
      ]
    },
    {
      "content": "If it already exists, it is updated to the new definition.",
      "pos": [
        7634,
        7692
      ]
    },
    {
      "content": "The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.",
      "pos": [
        7694,
        7817
      ]
    },
    {
      "content": "After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.",
      "pos": [
        7818,
        7979
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-version`</ph> is required.",
      "pos": [
        7981,
        8011
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Search Service Versioning<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for a list of available versions.",
      "pos": [
        8012,
        8132
      ]
    },
    {
      "content": "Request Headers",
      "pos": [
        8136,
        8151
      ]
    },
    {
      "content": "The following list describes the required and optional request headers.",
      "pos": [
        8155,
        8226
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Content-Type`</ph>: Required.",
      "pos": [
        8230,
        8255
      ]
    },
    {
      "content": "Set this to <ph id=\"ph1\">`application/json`</ph>",
      "pos": [
        8256,
        8286
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-key`</ph>: Required.",
      "pos": [
        8289,
        8309
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-key`</ph> is used to",
      "pos": [
        8310,
        8334
      ]
    },
    {
      "content": "authenticate the request to your Search service.",
      "pos": [
        8337,
        8385
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        8386,
        8431
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Create Index<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> header set to your admin key (as opposed to a query key).",
      "pos": [
        8432,
        8544
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        8546,
        8611
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        8612,
        8703
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Create an Azure Search service in the portal<ept id=\"p1\">](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        8704,
        8813
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body Syntax<ept id=\"p1\">**</ept>",
      "pos": [
        8842,
        8865
      ]
    },
    {
      "content": "The body of the request contains a schema definition, which includes the list of data fields within documents that will be fed into this index, data types, attributes, as well as an optional list of scoring profiles that are used to score matching documents at query time.",
      "pos": [
        8867,
        9139
      ]
    },
    {
      "content": "Note that for a POST request, you must specify the index name in the request body.",
      "pos": [
        9141,
        9223
      ]
    },
    {
      "content": "There can only be one key field in the index.",
      "pos": [
        9225,
        9270
      ]
    },
    {
      "content": "It has to be a string field.",
      "pos": [
        9271,
        9299
      ]
    },
    {
      "content": "This field represents the unique identifier for each document stored within the index.",
      "pos": [
        9300,
        9386
      ]
    },
    {
      "content": "The main parts of an index include the following:",
      "pos": [
        9388,
        9437
      ]
    },
    {
      "pos": [
        9450,
        9579
      ],
      "content": "<ph id=\"ph1\">`fields`</ph> that will be fed into this index, including name, data type, and properties that define allowable actions on that field."
    },
    {
      "pos": [
        9582,
        9640
      ],
      "content": "<ph id=\"ph1\">`suggesters`</ph> used for auto-complete or type-ahead queries."
    },
    {
      "content": "<ph id=\"ph1\">`scoringProfiles`</ph> used for custom search score ranking.",
      "pos": [
        9643,
        9698
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Add scoring profiles<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for details.",
      "pos": [
        9699,
        9794
      ]
    },
    {
      "pos": [
        9797,
        9869
      ],
      "content": "<ph id=\"ph1\">`defaultScoringProfile`</ph> used to overwrite the default scoring behaviors."
    },
    {
      "pos": [
        9872,
        9935
      ],
      "content": "<ph id=\"ph1\">`corsOptions`</ph> to allow cross-origin queries against your index."
    },
    {
      "content": "The syntax for structuring the request payload is as follows.",
      "pos": [
        9937,
        9998
      ]
    },
    {
      "content": "A sample request is provided further on in this topic.",
      "pos": [
        9999,
        10053
      ]
    },
    {
      "content": "Index Attributes",
      "pos": [
        13137,
        13153
      ]
    },
    {
      "content": "The following attributes can be set when creating an index.",
      "pos": [
        13157,
        13216
      ]
    },
    {
      "content": "For details about scoring and scoring profiles, see <bpt id=\"p1\">[</bpt>Add scoring Profiles<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept>.",
      "pos": [
        13217,
        13348
      ]
    },
    {
      "pos": [
        13350,
        13386
      ],
      "content": "<ph id=\"ph1\">`name`</ph> - Sets the name of the field."
    },
    {
      "content": "<ph id=\"ph1\">`type`</ph> - Sets the data type for the field.",
      "pos": [
        13388,
        13430
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Supported Data Types<ept id=\"p1\">](#DataTypes)</ept> for a list of supported types.",
      "pos": [
        13431,
        13500
      ]
    },
    {
      "content": "<ph id=\"ph1\">`searchable`</ph> - Marks the field as full-text search-able.",
      "pos": [
        13502,
        13558
      ]
    },
    {
      "content": "This means it will undergo analysis such as word-breaking during indexing.",
      "pos": [
        13559,
        13633
      ]
    },
    {
      "content": "If you set a <ph id=\"ph1\">`searchable`</ph> field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\".",
      "pos": [
        13634,
        13768
      ]
    },
    {
      "content": "This enables full-text searches for these terms.",
      "pos": [
        13769,
        13817
      ]
    },
    {
      "content": "Fields of type <ph id=\"ph1\">`Edm.String`</ph> or <ph id=\"ph2\">`Collection(Edm.String)`</ph> are <ph id=\"ph3\">`searchable`</ph> by default.",
      "pos": [
        13818,
        13902
      ]
    },
    {
      "content": "Fields of other types cannot be <ph id=\"ph1\">`searchable`</ph>.",
      "pos": [
        13903,
        13948
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: <ph id=\"ph1\">`searchable`</ph> fields consume extra space in your index since Azure Search will store an additional tokenized version of the field value for full-text searches.",
      "pos": [
        13954,
        14122
      ]
    },
    {
      "content": "If you want to save space in your index and you don't need a field to be included in searches, set <ph id=\"ph1\">`searchable`</ph> to <ph id=\"ph2\">`false`</ph>.",
      "pos": [
        14123,
        14246
      ]
    },
    {
      "content": "<ph id=\"ph1\">`filterable`</ph> - Allows the field to be referenced in <ph id=\"ph2\">`$filter`</ph> queries.",
      "pos": [
        14248,
        14318
      ]
    },
    {
      "content": "<ph id=\"ph1\">`filterable`</ph> differs from <ph id=\"ph2\">`searchable`</ph> in how strings are handled.",
      "pos": [
        14319,
        14385
      ]
    },
    {
      "content": "Fields of type <ph id=\"ph1\">`Edm.String`</ph> or <ph id=\"ph2\">`Collection(Edm.String)`</ph> that are <ph id=\"ph3\">`filterable`</ph> do not undergo word-breaking, so comparisons are for exact matches only.",
      "pos": [
        14386,
        14536
      ]
    },
    {
      "content": "For example, if you set such a field <ph id=\"ph1\">`f`</ph> to \"sunny day\", <ph id=\"ph2\">`$filter=f eq 'sunny'`</ph> will find no matches, but <ph id=\"ph3\">`$filter=f eq 'sunny day'`</ph> will.",
      "pos": [
        14537,
        14675
      ]
    },
    {
      "content": "All fields are <ph id=\"ph1\">`filterable`</ph> by default.",
      "pos": [
        14676,
        14715
      ]
    },
    {
      "content": "<ph id=\"ph1\">`sortable`</ph> - By default the system sorts results by score, but in many experiences users will want to sort by fields in the documents.",
      "pos": [
        14717,
        14851
      ]
    },
    {
      "content": "Fields of type <ph id=\"ph1\">`Collection(Edm.String)`</ph> cannot be <ph id=\"ph2\">`sortable`</ph>.",
      "pos": [
        14852,
        14913
      ]
    },
    {
      "content": "All other fields are <ph id=\"ph1\">`sortable`</ph> by default.",
      "pos": [
        14914,
        14957
      ]
    },
    {
      "content": "<ph id=\"ph1\">`facetable`</ph>- Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, etc.).",
      "pos": [
        14959,
        15154
      ]
    },
    {
      "content": "This option cannot be used with fields of type <ph id=\"ph1\">`Edm.GeographyPoint`</ph>.",
      "pos": [
        15155,
        15223
      ]
    },
    {
      "content": "All other fields are <ph id=\"ph1\">`facetable`</ph> by default.",
      "pos": [
        15224,
        15268
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: Fields of type <ph id=\"ph1\">`Edm.String`</ph> that are <ph id=\"ph2\">`filterable`</ph>, <ph id=\"ph3\">`sortable`</ph>, or <ph id=\"ph4\">`facetable`</ph> can be at most 32KB in length.",
      "pos": [
        15274,
        15392
      ]
    },
    {
      "content": "This is because such fields are treated as a single search term, and the maximum length of a term in Azure Search is 32KB.",
      "pos": [
        15393,
        15515
      ]
    },
    {
      "content": "If you need to store more text than this in a single string field, you will need to explicitly set <ph id=\"ph1\">`filterable`</ph>, <ph id=\"ph2\">`sortable`</ph>, and <ph id=\"ph3\">`facetable`</ph> to <ph id=\"ph4\">`false`</ph> in your index definition.",
      "pos": [
        15516,
        15693
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: If a field has none of the above attributes set to <ph id=\"ph1\">`true`</ph> (<ph id=\"ph2\">`searchable`</ph>, <ph id=\"ph3\">`filterable`</ph>, <ph id=\"ph4\">`sortable`</ph>,  or<ph id=\"ph5\">`facetable`</ph>) the field is effectively excluded from the inverted index.",
      "pos": [
        15699,
        15882
      ]
    },
    {
      "content": "This option is useful for fields that are not used in queries, but are needed in search results.",
      "pos": [
        15883,
        15979
      ]
    },
    {
      "content": "Excluding such fields from the index improves performance.",
      "pos": [
        15980,
        16038
      ]
    },
    {
      "content": "<ph id=\"ph1\">`suggestions`</ph> - Previous versions of the API included a <ph id=\"ph2\">`suggestions`</ph> property.",
      "pos": [
        16040,
        16119
      ]
    },
    {
      "content": "This boolean property is now deprecated and no longer available in either <ph id=\"ph1\">`2015-02-28`</ph> or <ph id=\"ph2\">`2015-02-28-Preview`</ph>.",
      "pos": [
        16120,
        16231
      ]
    },
    {
      "content": "Please use the <bpt id=\"p1\">[</bpt>Suggesters API<ept id=\"p1\">](#Suggesters)</ept> instead.",
      "pos": [
        16232,
        16285
      ]
    },
    {
      "content": "In the <ph id=\"ph1\">`2014-07-31`</ph> version, the <ph id=\"ph2\">`suggestions`</ph> property was used to specify whether the field could be used for auto-complete for type ahead, for fields of type <ph id=\"ph3\">`Edm.String`</ph> or <ph id=\"ph4\">`Collection(Edm.String)`</ph>.",
      "pos": [
        16286,
        16488
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`suggestions`</ph> was <ph id=\"ph2\">`false`</ph> by default because it required extra space in your index, but if you enabled it, see <bpt id=\"p1\">[</bpt>Transition from Preview to General Release in Azure Search<ept id=\"p1\">](search-transition-from-preview.md)</ept> for instructions on how to transition to the new API.",
      "pos": [
        16489,
        16753
      ]
    },
    {
      "content": "<ph id=\"ph1\">`key`</ph> - Marks the field as containing unique identifiers for documents within the index.",
      "pos": [
        16755,
        16843
      ]
    },
    {
      "content": "Exactly one field must be chosen as the <ph id=\"ph1\">`key`</ph> field and it must be of type <ph id=\"ph2\">`Edm.String`</ph>.",
      "pos": [
        16844,
        16932
      ]
    },
    {
      "content": "Key fields can be used to look up documents directly via the <bpt id=\"p1\">[</bpt>Lookup API<ept id=\"p1\">](#LookupAPI)</ept>.",
      "pos": [
        16933,
        17019
      ]
    },
    {
      "content": "<ph id=\"ph1\">`retrievable`</ph> - Sets whether the field can be returned in a search result.",
      "pos": [
        17021,
        17095
      ]
    },
    {
      "content": "This is useful when you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user.",
      "pos": [
        17097,
        17262
      ]
    },
    {
      "content": "This attribute must be <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`key`</ph> fields.",
      "pos": [
        17263,
        17310
      ]
    },
    {
      "content": "<ph id=\"ph1\">`analyzer`</ph> - Sets the name of the text analyzer to use for the field.",
      "pos": [
        17312,
        17381
      ]
    },
    {
      "content": "For the allowed set of values see <bpt id=\"p1\">[</bpt>Language Support<ept id=\"p1\">](#LanguageSupport)</ept>.",
      "pos": [
        17382,
        17453
      ]
    },
    {
      "content": "This option can be used only with <ph id=\"ph1\">`searchable`</ph> fields.",
      "pos": [
        17454,
        17508
      ]
    },
    {
      "content": "Once the analyzer is chosen, it cannot be changed for the field.",
      "pos": [
        17509,
        17573
      ]
    },
    {
      "content": "<ph id=\"ph1\">`suggesters`</ph> - Sets the search mode and fields that are the source of the content for suggestions.",
      "pos": [
        17575,
        17673
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Suggesters<ept id=\"p1\">](#Suggesters)</ept> for details.",
      "pos": [
        17674,
        17716
      ]
    },
    {
      "content": "<ph id=\"ph1\">`scoringProfiles`</ph> - Defines custom scoring behaviors that let you influence which items appear higher in search results.",
      "pos": [
        17718,
        17838
      ]
    },
    {
      "content": "Scoring profiles are made up of field weights and functions.",
      "pos": [
        17839,
        17899
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Add scoring Profiles<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information about the attributes used in a scoring profile.",
      "pos": [
        17900,
        18051
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n&lt;a name=\"LanguageSupport\"&gt;&lt;/a&gt;</ph><bpt id=\"p1\">\n**</bpt>Language support<ept id=\"p1\">**</ept>\n\nSearchable fields undergo analysis that most frequently involves word-breaking, text normalization, and filtering out terms.",
      "pos": [
        18096,
        18274
      ]
    },
    {
      "content": "By default, searchable fields in Azure Search are analyzed with the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Apache Lucene Standard analyzer](http://lucene.apache.org/core/4_9_0/analyzers-common/index.html)</ept> which breaks text into elements following the<bpt id=\"p2\">[</bpt><ept id=\"p2\">\"Unicode Text Segmentation\"](http://unicode.org/reports/tr29/)</ept> rules.",
      "pos": [
        18275,
        18557
      ]
    },
    {
      "content": "Additionally, the standard analyzer converts all characters to their lower case form.",
      "pos": [
        18558,
        18643
      ]
    },
    {
      "content": "Both indexed documents and search terms go through the analysis during indexing and query processing.",
      "pos": [
        18644,
        18745
      ]
    },
    {
      "content": "Azure Search supports a variety of languages.",
      "pos": [
        18747,
        18792
      ]
    },
    {
      "content": "Each language requires a non-standard text analyzer which accounts for characteristics of a given language.",
      "pos": [
        18793,
        18900
      ]
    },
    {
      "content": "Azure Search offers two types of analyzers:\n\n- 35 analyzers backed by Lucene.",
      "pos": [
        18901,
        18978
      ]
    },
    {
      "content": "- 50 analyzers backed by proprietary Microsoft natural language processing technology used in Office and Bing.",
      "pos": [
        18979,
        19089
      ]
    },
    {
      "content": "Some developers might prefer the more familiar, simple, open-source solution of Lucene.",
      "pos": [
        19091,
        19178
      ]
    },
    {
      "content": "Lucene analyzers are faster, but the Microsoft analyzers have advanced capabilities, such as lemmatization, word decompounding (in languages like German, Danish, Dutch, Swedish, Norwegian, Estonian, Finish, Hungarian, Slovak) and entity recognition (URLs, emails, dates, numbers).",
      "pos": [
        19179,
        19459
      ]
    },
    {
      "content": "If possible, you should run comparisons of both the Microsoft and Lucene analyzers to decide which one is a better fit.",
      "pos": [
        19460,
        19579
      ]
    },
    {
      "content": "<bpt id=\"p1\">***</bpt>How they compare<ept id=\"p1\">***</ept>\n\nThe Lucene analyzer for English extends the standard analyzer.",
      "pos": [
        19581,
        19667
      ]
    },
    {
      "content": "It removes possessives (trailing 's) from words, applies stemming as per <bpt id=\"p1\">[</bpt><ept id=\"p1\">Porter Stemming algorithm](http://tartarus.org/~martin/PorterStemmer/)</ept>, and removes English <bpt id=\"p2\">[</bpt><ept id=\"p2\">stop words](http://en.wikipedia.org/wiki/Stop_words)</ept>.",
      "pos": [
        19668,
        19888
      ]
    },
    {
      "content": "In comparison, the Microsoft analyzer performs lemmatization instead of stemming.",
      "pos": [
        19890,
        19971
      ]
    },
    {
      "content": "It means it can handle inflected and irregular word forms much better what results in more relevant search results (watch module 7 of <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Search MVA presentation](http://www.microsoftvirtualacademy.com/training-courses/adding-microsoft-azure-search-to-your-websites-and-apps)</ept> for more details).",
      "pos": [
        19972,
        20269
      ]
    },
    {
      "content": "Indexing with Microsoft analyzers is on average two to three times slower than their Lucene equivalents, depending on the language.",
      "pos": [
        20271,
        20402
      ]
    },
    {
      "content": "Search performance should not be significantly affected for average size queries.",
      "pos": [
        20403,
        20484
      ]
    },
    {
      "content": "<bpt id=\"p1\">***</bpt>Configuration<ept id=\"p1\">***</ept>\n\nFor each field in the index definition, you can set the <ph id=\"ph1\">`analyzer`</ph> property to an analyzer name that specifies which language and vendor.",
      "pos": [
        20486,
        20644
      ]
    },
    {
      "content": "The same analyzer will be applied when indexing and searching for that field.",
      "pos": [
        20645,
        20722
      ]
    },
    {
      "content": "For example, you can have separate fields for English, French, and Spanish hotel descriptions that exist side-by-side in the same index.",
      "pos": [
        20723,
        20859
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">'searchFields' query parameter](#SearchQueryParameters)</ept> to specify which language-specific field to search against in your queries.",
      "pos": [
        20860,
        21000
      ]
    },
    {
      "content": "You can review query examples that include the <ph id=\"ph1\">`analyzer`</ph> property in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Documents](#SearchDocs)</ept>.",
      "pos": [
        21001,
        21103
      ]
    },
    {
      "content": "<bpt id=\"p1\">***</bpt>Analyzer list<ept id=\"p1\">***</ept>\n\nBelow is the list of supported languages together with Lucene and Microsoft analyzer names.",
      "pos": [
        21106,
        21218
      ]
    },
    {
      "content": "Language",
      "pos": [
        21270,
        21278
      ]
    },
    {
      "content": "Microsoft analyzer name",
      "pos": [
        21296,
        21319
      ]
    },
    {
      "content": "Lucene analyzer name",
      "pos": [
        21337,
        21357
      ]
    },
    {
      "content": "Arabic",
      "pos": [
        21394,
        21400
      ]
    },
    {
      "content": "ar.microsoft",
      "pos": [
        21418,
        21430
      ]
    },
    {
      "content": "ar.lucene",
      "pos": [
        21448,
        21457
      ]
    },
    {
      "content": "Armenian",
      "pos": [
        21500,
        21508
      ]
    },
    {
      "content": "hy.lucene",
      "pos": [
        21544,
        21553
      ]
    },
    {
      "content": "Bangla",
      "pos": [
        21590,
        21596
      ]
    },
    {
      "content": "bn.microsoft",
      "pos": [
        21614,
        21626
      ]
    },
    {
      "content": "Basque",
      "pos": [
        21681,
        21687
      ]
    },
    {
      "content": "eu.lucene",
      "pos": [
        21723,
        21732
      ]
    },
    {
      "content": "Bulgarian",
      "pos": [
        21769,
        21778
      ]
    },
    {
      "content": "bg.microsoft",
      "pos": [
        21796,
        21808
      ]
    },
    {
      "content": "bg.lucene",
      "pos": [
        21826,
        21835
      ]
    },
    {
      "content": "Catalan",
      "pos": [
        21872,
        21879
      ]
    },
    {
      "content": "ca.microsoft",
      "pos": [
        21897,
        21909
      ]
    },
    {
      "content": "ca.lucene",
      "pos": [
        21927,
        21936
      ]
    },
    {
      "content": "Chinese Simplified",
      "pos": [
        21983,
        22001
      ]
    },
    {
      "content": "zh-Hans.microsoft",
      "pos": [
        22019,
        22036
      ]
    },
    {
      "content": "zh-Hans.lucene",
      "pos": [
        22054,
        22068
      ]
    },
    {
      "content": "Chinese Traditional",
      "pos": [
        22110,
        22129
      ]
    },
    {
      "content": "zh-Hant.microsoft",
      "pos": [
        22147,
        22164
      ]
    },
    {
      "content": "zh-Hant.lucene",
      "pos": [
        22182,
        22196
      ]
    },
    {
      "content": "Croatian",
      "pos": [
        22237,
        22245
      ]
    },
    {
      "content": "hr.microsoft",
      "pos": [
        22263,
        22275
      ]
    },
    {
      "content": "Czech",
      "pos": [
        22331,
        22336
      ]
    },
    {
      "content": "cs.microsoft",
      "pos": [
        22354,
        22366
      ]
    },
    {
      "content": "cs.lucene",
      "pos": [
        22384,
        22393
      ]
    },
    {
      "content": "Danish",
      "pos": [
        22440,
        22446
      ]
    },
    {
      "content": "da.microsoft",
      "pos": [
        22464,
        22476
      ]
    },
    {
      "content": "da.lucene",
      "pos": [
        22494,
        22503
      ]
    },
    {
      "content": "Dutch",
      "pos": [
        22550,
        22555
      ]
    },
    {
      "content": "nl.microsoft",
      "pos": [
        22573,
        22585
      ]
    },
    {
      "content": "nl.lucene",
      "pos": [
        22603,
        22612
      ]
    },
    {
      "content": "English",
      "pos": [
        22655,
        22662
      ]
    },
    {
      "content": "en.microsoft",
      "pos": [
        22688,
        22700
      ]
    },
    {
      "content": "en.lucene",
      "pos": [
        22718,
        22727
      ]
    },
    {
      "content": "Estonian",
      "pos": [
        22770,
        22778
      ]
    },
    {
      "content": "et.microsoft",
      "pos": [
        22796,
        22808
      ]
    },
    {
      "content": "Finnish",
      "pos": [
        22863,
        22870
      ]
    },
    {
      "content": "fi.microsoft",
      "pos": [
        22888,
        22900
      ]
    },
    {
      "content": "fi.lucene",
      "pos": [
        22918,
        22927
      ]
    },
    {
      "content": "French",
      "pos": [
        22974,
        22980
      ]
    },
    {
      "content": "fr.microsoft",
      "pos": [
        22998,
        23010
      ]
    },
    {
      "content": "fr.lucene",
      "pos": [
        23028,
        23037
      ]
    },
    {
      "content": "Galician",
      "pos": [
        23080,
        23088
      ]
    },
    {
      "content": "gl.lucene",
      "pos": [
        23124,
        23133
      ]
    },
    {
      "content": "German",
      "pos": [
        23176,
        23182
      ]
    },
    {
      "content": "de.microsoft",
      "pos": [
        23200,
        23212
      ]
    },
    {
      "content": "de.lucene",
      "pos": [
        23230,
        23239
      ]
    },
    {
      "content": "Greek",
      "pos": [
        23282,
        23287
      ]
    },
    {
      "content": "el.microsoft",
      "pos": [
        23305,
        23317
      ]
    },
    {
      "content": "el.lucene",
      "pos": [
        23335,
        23344
      ]
    },
    {
      "content": "Gujarati",
      "pos": [
        23387,
        23395
      ]
    },
    {
      "content": "gu.microsoft",
      "pos": [
        23413,
        23425
      ]
    },
    {
      "content": "Hebrew",
      "pos": [
        23480,
        23486
      ]
    },
    {
      "content": "he.microsoft",
      "pos": [
        23504,
        23516
      ]
    },
    {
      "content": "Hindi",
      "pos": [
        23571,
        23576
      ]
    },
    {
      "content": "hi.microsoft",
      "pos": [
        23594,
        23606
      ]
    },
    {
      "content": "hi.lucene",
      "pos": [
        23624,
        23633
      ]
    },
    {
      "content": "Hungarian",
      "pos": [
        23676,
        23685
      ]
    },
    {
      "content": "hu.microsoft",
      "pos": [
        23709,
        23721
      ]
    },
    {
      "content": "hu.lucene",
      "pos": [
        23739,
        23748
      ]
    },
    {
      "content": "Icelandic",
      "pos": [
        23785,
        23794
      ]
    },
    {
      "content": "is.microsoft",
      "pos": [
        23812,
        23824
      ]
    },
    {
      "content": "Indonesian (Bahasa)",
      "pos": [
        23879,
        23898
      ]
    },
    {
      "content": "id.microsoft",
      "pos": [
        23916,
        23928
      ]
    },
    {
      "content": "id.lucene",
      "pos": [
        23946,
        23955
      ]
    },
    {
      "content": "Irish",
      "pos": [
        23998,
        24003
      ]
    },
    {
      "content": "ga.lucene",
      "pos": [
        24039,
        24048
      ]
    },
    {
      "content": "Italian",
      "pos": [
        24085,
        24092
      ]
    },
    {
      "content": "it.microsoft",
      "pos": [
        24110,
        24122
      ]
    },
    {
      "content": "it.lucene",
      "pos": [
        24140,
        24149
      ]
    },
    {
      "content": "Japanese",
      "pos": [
        24192,
        24200
      ]
    },
    {
      "content": "ja.microsoft",
      "pos": [
        24218,
        24230
      ]
    },
    {
      "content": "ja.lucene",
      "pos": [
        24248,
        24257
      ]
    },
    {
      "content": "Kannada",
      "pos": [
        24303,
        24310
      ]
    },
    {
      "content": "ka.microsoft",
      "pos": [
        24328,
        24340
      ]
    },
    {
      "content": "Korean",
      "pos": [
        24395,
        24401
      ]
    },
    {
      "content": "ko.lucene",
      "pos": [
        24437,
        24446
      ]
    },
    {
      "content": "Latvian",
      "pos": [
        24483,
        24490
      ]
    },
    {
      "content": "lv.microsoft",
      "pos": [
        24516,
        24528
      ]
    },
    {
      "content": "lv.lucene",
      "pos": [
        24546,
        24555
      ]
    },
    {
      "content": "Lithuanian",
      "pos": [
        24594,
        24604
      ]
    },
    {
      "content": "lt.microsoft",
      "pos": [
        24622,
        24634
      ]
    },
    {
      "content": "Malayalam",
      "pos": [
        24689,
        24698
      ]
    },
    {
      "content": "ml.microsoft",
      "pos": [
        24716,
        24728
      ]
    },
    {
      "content": "Malay (Latin)",
      "pos": [
        24783,
        24796
      ]
    },
    {
      "content": "ms.microsoft",
      "pos": [
        24814,
        24826
      ]
    },
    {
      "content": "Marathi",
      "pos": [
        24881,
        24888
      ]
    },
    {
      "content": "mr.microsoft",
      "pos": [
        24906,
        24918
      ]
    },
    {
      "content": "Norwegian",
      "pos": [
        24973,
        24982
      ]
    },
    {
      "content": "nb.microsoft",
      "pos": [
        25000,
        25012
      ]
    },
    {
      "content": "no.lucene",
      "pos": [
        25030,
        25039
      ]
    },
    {
      "content": "Persian",
      "pos": [
        25082,
        25089
      ]
    },
    {
      "content": "fa.lucene",
      "pos": [
        25125,
        25134
      ]
    },
    {
      "content": "Polish",
      "pos": [
        25177,
        25183
      ]
    },
    {
      "content": "pl.microsoft",
      "pos": [
        25201,
        25213
      ]
    },
    {
      "content": "pl.lucene",
      "pos": [
        25231,
        25240
      ]
    },
    {
      "content": "Portuguese (Brazil)",
      "pos": [
        25283,
        25302
      ]
    },
    {
      "content": "pt-Br.microsoft",
      "pos": [
        25320,
        25335
      ]
    },
    {
      "content": "pt-Br.lucene",
      "pos": [
        25353,
        25365
      ]
    },
    {
      "content": "Portuguese (Portugal)",
      "pos": [
        25409,
        25430
      ]
    },
    {
      "content": "pt-Pt.microsoft",
      "pos": [
        25448,
        25463
      ]
    },
    {
      "content": "pt-Pt.lucene",
      "pos": [
        25489,
        25501
      ]
    },
    {
      "content": "Punjabi",
      "pos": [
        25538,
        25545
      ]
    },
    {
      "content": "pa.microsoft",
      "pos": [
        25563,
        25575
      ]
    },
    {
      "content": "Romanian",
      "pos": [
        25630,
        25638
      ]
    },
    {
      "content": "ro.microsoft",
      "pos": [
        25656,
        25668
      ]
    },
    {
      "content": "ro.lucene",
      "pos": [
        25686,
        25695
      ]
    },
    {
      "content": "Russian",
      "pos": [
        25732,
        25739
      ]
    },
    {
      "content": "ru.microsoft",
      "pos": [
        25757,
        25769
      ]
    },
    {
      "content": "ru.lucene",
      "pos": [
        25787,
        25796
      ]
    },
    {
      "content": "Serbian (Cyrillic)",
      "pos": [
        25835,
        25853
      ]
    },
    {
      "content": "sr-cyrillic.microsoft",
      "pos": [
        25871,
        25892
      ]
    },
    {
      "content": "Serbian (Latin)",
      "pos": [
        25947,
        25962
      ]
    },
    {
      "content": "sr-latin.microsoft",
      "pos": [
        25980,
        25998
      ]
    },
    {
      "content": "Slovak",
      "pos": [
        26053,
        26059
      ]
    },
    {
      "content": "sk.microsoft",
      "pos": [
        26077,
        26089
      ]
    },
    {
      "content": "Slovenian",
      "pos": [
        26144,
        26153
      ]
    },
    {
      "content": "sl.microsoft",
      "pos": [
        26171,
        26183
      ]
    },
    {
      "content": "Spanish",
      "pos": [
        26238,
        26245
      ]
    },
    {
      "content": "es.microsoft",
      "pos": [
        26263,
        26275
      ]
    },
    {
      "content": "es.lucene",
      "pos": [
        26293,
        26302
      ]
    },
    {
      "content": "Swedish",
      "pos": [
        26339,
        26346
      ]
    },
    {
      "content": "sv.microsoft",
      "pos": [
        26364,
        26376
      ]
    },
    {
      "content": "sv.lucene",
      "pos": [
        26394,
        26403
      ]
    },
    {
      "content": "Tamil",
      "pos": [
        26441,
        26446
      ]
    },
    {
      "content": "ta.microsoft",
      "pos": [
        26464,
        26476
      ]
    },
    {
      "content": "Telugu",
      "pos": [
        26531,
        26537
      ]
    },
    {
      "content": "te.microsoft",
      "pos": [
        26555,
        26567
      ]
    },
    {
      "content": "Thai",
      "pos": [
        26622,
        26626
      ]
    },
    {
      "content": "th.microsoft",
      "pos": [
        26644,
        26656
      ]
    },
    {
      "content": "th.lucene",
      "pos": [
        26674,
        26683
      ]
    },
    {
      "content": "Turkish",
      "pos": [
        26720,
        26727
      ]
    },
    {
      "content": "tr.microsoft",
      "pos": [
        26745,
        26757
      ]
    },
    {
      "content": "tr.lucene",
      "pos": [
        26775,
        26784
      ]
    },
    {
      "content": "Ukrainian",
      "pos": [
        26827,
        26836
      ]
    },
    {
      "content": "uk.microsoft",
      "pos": [
        26854,
        26866
      ]
    },
    {
      "content": "Urdu",
      "pos": [
        26921,
        26925
      ]
    },
    {
      "content": "ur.microsoft",
      "pos": [
        26943,
        26955
      ]
    },
    {
      "content": "Vietnamese",
      "pos": [
        27010,
        27020
      ]
    },
    {
      "content": "vi.microsoft",
      "pos": [
        27038,
        27050
      ]
    },
    {
      "content": "Additionally Azure Search provides language-agnostic analyzer configurations",
      "pos": [
        27104,
        27180
      ]
    },
    {
      "content": "Standard ASCII Folding",
      "pos": [
        27207,
        27229
      ]
    },
    {
      "content": "standardasciifolding.lucene",
      "pos": [
        27247,
        27274
      ]
    },
    {
      "content": "Unicode text segmentation (Standard Tokenizer)",
      "pos": [
        27322,
        27368
      ]
    },
    {
      "content": "ASCII folding filter - converts Unicode characters that don't belong to the set of first 127 ASCII characters into their ASCII equivalents.",
      "pos": [
        27390,
        27529
      ]
    },
    {
      "content": "This is useful for removing diacritics.",
      "pos": [
        27530,
        27569
      ]
    },
    {
      "content": "All analyzers with names annotated with <ph id=\"ph1\">&lt;i&gt;</ph>lucene<ph id=\"ph2\">&lt;/i&gt;</ph> are powered by <bpt id=\"p1\">[</bpt><ept id=\"p1\">Apache Lucene's language analyzers](http://lucene.apache.org/core/4_9_0/analyzers-common/overview-summary.html)</ept>.",
      "pos": [
        27623,
        27805
      ]
    },
    {
      "content": "More information about the ASCII folding filter can be found <bpt id=\"p1\">[</bpt><ept id=\"p1\">here](http://lucene.apache.org/core/4_9_0/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html)</ept>.",
      "pos": [
        27806,
        27993
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Suggesters<ept id=\"p1\">**</ept>\n\nA <ph id=\"ph1\">`suggester`</ph> defines which fields in an index are used to support auto-complete in searches.",
      "pos": [
        27995,
        28104
      ]
    },
    {
      "content": "Typically partial search strings are sent to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Suggestions API](#Suggestions)</ept> while the user is typing a search query, and the API returns a set of suggested phrases.",
      "pos": [
        28105,
        28274
      ]
    },
    {
      "content": "A suggester that you define in the index determines which fields are used to build the type-ahead search terms.",
      "pos": [
        28275,
        28386
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Suggesters](#Suggesters)</ept> for configuration details.",
      "pos": [
        28387,
        28443
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Scoring profiles<ept id=\"p1\">**</ept>\n\nA <ph id=\"ph1\">`scoringProfile`</ph> defines custom scoring behaviors that let you influence which items appear higher in the search results.",
      "pos": [
        28445,
        28590
      ]
    },
    {
      "content": "Scoring profiles are made up of field weights and functions.",
      "pos": [
        28591,
        28651
      ]
    },
    {
      "content": "To use them, you specify a profile by name on the query string.",
      "pos": [
        28652,
        28715
      ]
    },
    {
      "content": "A default scoring profile operates behind the scenes to compute a search score for every item in a result set.",
      "pos": [
        28717,
        28827
      ]
    },
    {
      "content": "You can use the internal, unnamed scoring profile.",
      "pos": [
        28828,
        28878
      ]
    },
    {
      "content": "Alternatively, set <ph id=\"ph1\">`defaultScoringProfile`</ph> to use a custom profile as the default, invoked whenever a custom profile is not specified on the query string.",
      "pos": [
        28879,
        29033
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Add scoring profiles to a search index (Azure Search Service REST API)](search-api-scoring-profiles-2015-02-28.md)</ept> for details.",
      "pos": [
        29035,
        29167
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>CORS Options<ept id=\"p1\">**</ept>\n\nClient-side Javascript cannot call any APIs by default since the browser will prevent all cross-origin requests.",
      "pos": [
        29169,
        29299
      ]
    },
    {
      "content": "Enable CORS (Cross-Origin Resource Sharing) by setting the <ph id=\"ph1\">`corsOptions`</ph> attribute to allow cross-origin queries to your index.",
      "pos": [
        29300,
        29427
      ]
    },
    {
      "content": "Note that only query APIs support CORS for security reasons.",
      "pos": [
        29428,
        29488
      ]
    },
    {
      "content": "The following options can be set for CORS:\n\n<ph id=\"ph1\">- `allowedOrigins`</ph> (required): This is a list of origins that will be granted access to your index.",
      "pos": [
        29489,
        29632
      ]
    },
    {
      "content": "This means that any Javascript code served from those origins will be allowed to query your index (assuming it provides the correct API key).",
      "pos": [
        29633,
        29774
      ]
    },
    {
      "content": "Each origin is typically of the form <ph id=\"ph1\">`protocol://fully-qualified-domain-name:port`</ph> although the port is often omitted.",
      "pos": [
        29775,
        29893
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">this article](http://go.microsoft.com/fwlink/?LinkId=330822)</ept> for more details.",
      "pos": [
        29894,
        29977
      ]
    },
    {
      "content": "- If you want to allow access to all origins, include <ph id=\"ph1\">`*`</ph> as a single item in the <ph id=\"ph2\">`allowedOrigins`</ph> array.",
      "pos": [
        29979,
        30084
      ]
    },
    {
      "content": "Note that <bpt id=\"p1\">**</bpt>this is not recommended practice for production search services.<ept id=\"p1\">**</ept> However, it may be useful for development or debugging purposes.",
      "pos": [
        30085,
        30228
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `maxAgeInSeconds`</ph> (optional): Browsers use this value to determine the duration (in seconds) to cache CORS preflight responses.",
      "pos": [
        30229,
        30358
      ]
    },
    {
      "content": "This must be a non-negative integer.",
      "pos": [
        30359,
        30395
      ]
    },
    {
      "content": "The larger this value is, the better performance will be, but the longer it will take for CORS policy changes to take effect.",
      "pos": [
        30396,
        30521
      ]
    },
    {
      "content": "If it is not set, a default duration of 5 minutes will be used.",
      "pos": [
        30522,
        30585
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"CreateUpdateIndexExample\"&gt;&lt;/a&gt;</ph><bpt id=\"p1\">\n**</bpt>Request Body Example<ept id=\"p1\">**</ept><bpt id=\"p2\">\n\n    {\n      \"name\": \"hotels\",  \n      \"fields\": [\n        {\"name\": \"hotelId\", \"type\": \"Edm.String\", \"key\": true, \"searchable\": false},\n        {\"name\": \"baseRate\", \"type\": \"Edm.Double\"},\n        {\"name\": \"description\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false},\n        {\"name\": \"description_fr\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false, \"analyzer\"=\"fr.lucene\"},\n        {\"name\": \"hotelName\", \"type\": \"Edm.String\"},\n        {\"name\": \"category\", \"type\": \"Edm.String\"},\n        {\"name\": \"tags\", \"type\": \"Collection(Edm.String)\"},\n        {\"name\": \"parkingIncluded\", \"type\": \"Edm.Boolean\"},\n        {\"name\": \"smokingAllowed\", \"type\": \"Edm.Boolean\"},\n        {\"name\": \"lastRenovationDate\", \"type\": \"Edm.DateTimeOffset\"},\n        {\"name\": \"rating\", \"type\": \"Edm.Int32\"},\n        {\"name\": \"location\", \"type\": \"Edm.GeographyPoint\"}\n      ],\n      \"suggesters\": [\n        {\n          \"name\": \"sg\",\n          \"searchMode\": \"analyzingInfixMatching\",\n          \"sourceFields\": [\"hotelName\"]\n        }\n      ]\n    }\n\n**</bpt>Response<ept id=\"p2\">**</ept>\n\nFor a successful request: \"201 Created\".",
      "pos": [
        30587,
        31793
      ]
    },
    {
      "content": "By default the response body will contain the JSON for the index definition that was created.",
      "pos": [
        31795,
        31888
      ]
    },
    {
      "content": "If the <ph id=\"ph1\">`Prefer`</ph> request header is set to <ph id=\"ph2\">`return=minimal`</ph>, the response body will be empty and the success status code will be \"204 No Content\" instead of \"201 Created\".",
      "pos": [
        31889,
        32058
      ]
    },
    {
      "content": "This is true regardless of whether PUT or POST was used to create the index.",
      "pos": [
        32059,
        32135
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept>\n\nCurrently, there is limited support for index schema updates.",
      "pos": [
        32137,
        32211
      ]
    },
    {
      "content": "Any schema updates that would require re-indexing such as changing field types are not currently supported.",
      "pos": [
        32212,
        32319
      ]
    },
    {
      "content": "Although existing fields cannot be changed or deleted, new fields can be added to an existing index at any time.",
      "pos": [
        32320,
        32432
      ]
    },
    {
      "content": "When a new field is added, all existing documents in the index will automatically have a null value for that field.",
      "pos": [
        32433,
        32548
      ]
    },
    {
      "content": "No additional storage space will be consumed until new documents are added to the index.",
      "pos": [
        32549,
        32637
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"Suggesters\"&gt;&lt;/a&gt;</ph>\n##Suggesters\n\nThe suggestions feature in Azure Search is a type-ahead or auto-complete query capability, providing a list of potential search terms in response to partial string inputs entered into a search box.",
      "pos": [
        32639,
        32876
      ]
    },
    {
      "content": "You've probably noticed query suggestions when using commercial web search engines: typing \".NET\" in Bing produces a list of terms for \".NET 4.5\", \".NET Framework 3.5\", and so forth.",
      "pos": [
        32877,
        33059
      ]
    },
    {
      "content": "When using the Search service REST API, implementing suggestions in a custom Azure Search application requires the following:\n\n- Enable suggestions by adding a <bpt id=\"p1\">**</bpt>suggester<ept id=\"p1\">**</ept> construction in your index, giving the name, search mode, and a list of fields for which type-ahead is invoked.",
      "pos": [
        33060,
        33345
      ]
    },
    {
      "content": "For example, if you specify \"cityName\" as a source field, typing a partial search string of \"Sea\" will result in \"Seattle\", \"Seaside\", and \"Seatac\" (all three are actual city names) offered up as query suggestions to the user.",
      "pos": [
        33346,
        33572
      ]
    },
    {
      "content": "- Invoke suggestions by calling the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Suggestions API](#Suggestions)</ept> in your application code.",
      "pos": [
        33574,
        33667
      ]
    },
    {
      "content": "Typically partial search strings are sent to the service while the user is typing a search query, and this API returns a set of suggested phrases.",
      "pos": [
        33668,
        33814
      ]
    },
    {
      "content": "This article explains how to configure a <bpt id=\"p1\">**</bpt>suggester<ept id=\"p1\">**</ept>.",
      "pos": [
        33816,
        33871
      ]
    },
    {
      "content": "You should also review the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Suggestions API](#Suggestions)</ept> for details on how a suggester is used.",
      "pos": [
        33872,
        33970
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Usage<ept id=\"p1\">**</ept><ph id=\"ph1\">\n\n`Suggesters`</ph> are created in the index and work best when used to suggest specific documents rather than loose terms or phrases.",
      "pos": [
        33972,
        34110
      ]
    },
    {
      "content": "The best candidate fields are titles, names, and other relatively short phrases that can identify an item.",
      "pos": [
        34111,
        34217
      ]
    },
    {
      "content": "Less effective are repetitive fields, such as categories and tags, or very long fields such as descriptions or comments fields.",
      "pos": [
        34218,
        34345
      ]
    },
    {
      "content": "As part of the index definition, you can add a single suggester to the <ph id=\"ph1\">`suggesters`</ph> collection.",
      "pos": [
        34347,
        34442
      ]
    },
    {
      "content": "Properties that define a suggester include the following:\n\n<ph id=\"ph1\">- `name`</ph>: The name of the suggester.",
      "pos": [
        34443,
        34538
      ]
    },
    {
      "content": "You use the name of the suggester when calling the <ph id=\"ph1\">`suggest`</ph> API.",
      "pos": [
        34539,
        34604
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `searchMode`</ph>: The strategy used to search for candidate phrases.",
      "pos": [
        34605,
        34671
      ]
    },
    {
      "content": "The only mode currently supported is <ph id=\"ph1\">`analyzingInfixMatching`</ph>, which performs flexible matching of phrases at the beginning or in the middle of sentences.",
      "pos": [
        34672,
        34826
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `sourceFields`</ph>: A list of one or more fields that are the source of the content for suggestions.",
      "pos": [
        34827,
        34925
      ]
    },
    {
      "content": "Only fields of type <ph id=\"ph1\">`Edm.String`</ph> and <ph id=\"ph2\">`Collection(Edm.String)`</ph> may be sources for suggestions.",
      "pos": [
        34926,
        35019
      ]
    },
    {
      "content": "Only fields that don't have a custom language analyzer set can be used.",
      "pos": [
        35020,
        35091
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Suggester Example<ept id=\"p1\">**</ept>\n\nA suggester is part of the index.",
      "pos": [
        35093,
        35149
      ]
    },
    {
      "content": "Only one suggester can exist in the <ph id=\"ph1\">`suggesters`</ph> collection in the current version, alongside the fields collection and <ph id=\"ph2\">`scoringProfiles`</ph>.",
      "pos": [
        35150,
        35288
      ]
    },
    {
      "content": "<ph id=\"ph1\">{\n          \"name\": \"hotels\",\n          \"fields\": [\n             . . .\n           ],\n          \"suggesters\": [\n            {\n            \"name\": \"sg\",\n            \"searchMode\": \"analyzingInfixMatching\",\n            \"sourceFields: [\"hotelName\", \"category\"]\n            }\n          ],\n          \"scoringProfiles\": [\n             . . .\n          ]\n        }\n\n&gt; [AZURE.NOTE]</ph>  If you used the public preview version of Azure Search, <ph id=\"ph2\">`suggesters`</ph> replaces an older boolean property (<ph id=\"ph3\">`\"suggestions\": false`</ph>) that only supported prefix suggestions for short strings (3-25 characters).",
      "pos": [
        35298,
        35874
      ]
    },
    {
      "content": "Its replacement, <ph id=\"ph1\">`suggesters`</ph>, supports infix matching that finds matching terms at the beginning or in the middle of field content, with better tolerance for mistakes in search strings.",
      "pos": [
        35875,
        36061
      ]
    },
    {
      "content": "Starting with the generally available release, this is now the only implementation of the suggestions API.",
      "pos": [
        36062,
        36168
      ]
    },
    {
      "content": "The older <ph id=\"ph1\">`suggestions`</ph> property that was introduced in <ph id=\"ph2\">`api-version=2014-07-31-Preview`</ph> continues to work in that version, but is not operational in the <ph id=\"ph3\">`2015-02-28`</ph> or later versions of Azure Search.",
      "pos": [
        36169,
        36370
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"UpdateIndex\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Update Index\n\nYou can update an existing index within Azure Search using an HTTP PUT request.",
      "pos": [
        36372,
        36495
      ]
    },
    {
      "content": "Updates can include adding new fields to the existing schema, modifying CORS options, and modifying scoring profiles.",
      "pos": [
        36496,
        36613
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx)</ept> for more information.",
      "pos": [
        36614,
        36718
      ]
    },
    {
      "content": "You specify the name of the index to update on the request URI:\n\n    <bpt id=\"p1\">PUT https://[search service url]/indexes/[index name]?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin key]\n\n**</bpt>Important:<ept id=\"p1\">**</ept> Support for index schema updates is limited to operations that don't require rebuilding the search index.",
      "pos": [
        36719,
        37049
      ]
    },
    {
      "content": "Any schema updates that would require re-indexing, such as changing field types, are not currently supported.",
      "pos": [
        37050,
        37159
      ]
    },
    {
      "content": "New fields can be added at any time, although existing fields cannot be changed or deleted.",
      "pos": [
        37160,
        37251
      ]
    },
    {
      "content": "The same applies to <ph id=\"ph1\">`suggesters`</ph>.",
      "pos": [
        37252,
        37285
      ]
    },
    {
      "content": "New fields may be added to a suggester at the time the fields are added, but fields cannot be removed from <ph id=\"ph1\">`suggesters`</ph> and existing fields cannot be added to <ph id=\"ph2\">`suggesters`</ph>.",
      "pos": [
        37286,
        37458
      ]
    },
    {
      "content": "When adding a new field to an index, all existing documents in the index will automatically have a null value for that field.",
      "pos": [
        37460,
        37585
      ]
    },
    {
      "content": "No additional storage space will be consumed until new documents are added to the index.",
      "pos": [
        37586,
        37674
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for all service requests.",
      "pos": [
        37676,
        37732
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Update Index<ept id=\"p1\">**</ept> request is constructed using HTTP PUT.",
      "pos": [
        37733,
        37792
      ]
    },
    {
      "content": "With PUT, the index name is part of the URL.",
      "pos": [
        37793,
        37837
      ]
    },
    {
      "content": "If the index doesn't exist, it is created.",
      "pos": [
        37838,
        37880
      ]
    },
    {
      "content": "If the index already exists, it is updated to the new definition.",
      "pos": [
        37881,
        37946
      ]
    },
    {
      "content": "The index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters.",
      "pos": [
        37948,
        38071
      ]
    },
    {
      "content": "After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.",
      "pos": [
        38072,
        38233
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        38235,
        38269
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        38270,
        38326
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        38327,
        38451
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        38453,
        38545
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `Content-Type`</ph>: Required.",
      "pos": [
        38547,
        38574
      ]
    },
    {
      "content": "Set this to <ph id=\"ph1\">`application/json`</ph><ph id=\"ph2\">\n- `api-key`</ph>: Required.",
      "pos": [
        38575,
        38628
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        38629,
        38702
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        38703,
        38748
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Update Index<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> header set to your admin key (as opposed to a query key).",
      "pos": [
        38749,
        38861
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        38863,
        38928
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        38929,
        39020
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        39021,
        39130
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body Syntax<ept id=\"p1\">**</ept>\n\nWhen updating an existing index, the body must include the original schema definition, plus the new fields you are adding, as well as the modified scoring profiles, suggesters and CORS options, if any.",
      "pos": [
        39132,
        39358
      ]
    },
    {
      "content": "If you are not modifying the scoring profiles and CORS options, you must include the originals from when the index was created.",
      "pos": [
        39359,
        39486
      ]
    },
    {
      "content": "In general the best pattern to use for updates is to retrieve the index definition with a GET, modify it, then update it with PUT.",
      "pos": [
        39487,
        39617
      ]
    },
    {
      "content": "The schema syntax used to create an index is reproduced here for convenience.",
      "pos": [
        39619,
        39696
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create Index](#CreateIndex)</ept> for more details.",
      "pos": [
        39697,
        39747
      ]
    },
    {
      "content": "<bpt id=\"p1\">{\n      \"name\": (optional) \"name_of_index\",\n      \"fields\": [\n        {\n          \"name\": \"name_of_field\",\n          \"type\": \"Edm.String | Collection(Edm.String) | Edm.Int32 | Edm.Int64 | Edm.Double | Edm.Boolean | Edm.DateTimeOffset | Edm.GeographyPoint\",\n          \"searchable\": true (default where applicable) | false (only Edm.String and Collection(Edm.String) fields can be searchable),\n          \"filterable\": true (default) | false,\n          \"sortable\": true (default where applicable) | false (Collection(Edm.String) fields cannot be sortable),\n          \"facetable\": true (default where applicable) | false (Edm.GeographyPoint fields cannot be facetable),\n          \"key\": true | false (default, only Edm.String fields can be keys),\n          \"retrievable\": true (default) | false,\n          \"analyzer\": \"name of text analyzer\"\n        }\n      ],\n      \"suggesters\": [\n        {\n          \"name\": \"name of suggester\",\n          \"searchMode\": \"analyzingInfixMatching\" (other modes may be added in the future),\n          \"sourceFields\": [\"field1\", \"field2\", ...]\n        }\n      ],\n      \"scoringProfiles\": [\n        {\n          \"name\": \"name of scoring profile\",\n          \"text\": (optional, only applies to searchable fields) {\n            \"weights\": {\n              \"searchable_field_name\": relative_weight_value (positive numbers),\n              ...\n            }\n          },\n          \"functions\": (optional) [\n            {\n              \"type\": \"magnitude | freshness | distance | tag\",\n              \"boost\": # (positive number used as multiplier for raw score != 1),\n              \"fieldName\": \"...\",\n              \"interpolation\": \"constant | linear (default) | quadratic | logarithmic\",\n              \"magnitude\": {\n                \"boostingRangeStart\": #,\n                \"boostingRangeEnd\": #,\n                \"constantBoostBeyondRange\": true | false (default)\n              },\n              \"freshness\": {\n                \"boostingDuration\": \"...\" (value representing timespan leading to now over which boosting occurs)\n              },\n              \"distance\": {\n                \"referencePointParameter\": \"...\", (parameter to be passed in queries to use as reference location, see \"scoringParameter\" for syntax details)\n                \"boostingDistance\": # (the distance in kilometers from the reference location where the boosting range ends)\n              },\n              \"tag\": {\n                \"tagsParameter\": \"...\" (parameter to be passed in queries to specify list of tags to compare against target field, see \"scoringParameter\" for syntax details)\n              }\n            }\n          ],\n          \"functionAggregation\": (optional, applies only when functions are specified)\n            \"sum (default) | average | minimum | maximum | firstMatching\"\n        }\n      ],\n      \"defaultScoringProfile\": (optional) \"...\",\n      \"corsOptions\": (optional) {\n        \"allowedOrigins\": [\"*\"] | [\"origin_1\", \"origin_2\", ...],\n        \"maxAgeInSeconds\": (optional) max_age_in_seconds (non-negative integer)\n      }\n    }\n\n\n**</bpt>Response<ept id=\"p1\">**</ept>\n\nFor a successful request: \"204 No Content\".",
      "pos": [
        39753,
        42862
      ]
    },
    {
      "content": "By default the response body will be empty.",
      "pos": [
        42864,
        42907
      ]
    },
    {
      "content": "However, if the <ph id=\"ph1\">`Prefer`</ph> request header is set to <ph id=\"ph2\">`return=representation`</ph>, the response body will contain the JSON for the index definition that was updated.",
      "pos": [
        42908,
        43065
      ]
    },
    {
      "content": "In this case, the success status code will be \"200 OK\".",
      "pos": [
        43066,
        43121
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"ListIndexes\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> List Indexes\n\nThe <bpt id=\"p1\">**</bpt>List Indexes<ept id=\"p1\">**</ept> operation returns a list of the indexes currently in your Azure Search service.",
      "pos": [
        43123,
        43267
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes?api-version=[api-version]\n    api-key: [admin key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for all service requests.",
      "pos": [
        43273,
        43435
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>List Indexes<ept id=\"p1\">**</ept> request can be constructed using the GET method.",
      "pos": [
        43436,
        43505
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        43507,
        43541
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        43542,
        43598
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        43599,
        43723
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        43725,
        43817
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: Required.",
      "pos": [
        43819,
        43841
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        43842,
        43915
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        43916,
        43961
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>List Indexes<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> set to an admin key (as opposed to a query key).",
      "pos": [
        43962,
        44065
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        44067,
        44132
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        44133,
        44224
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        44225,
        44334
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        44336,
        44359
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        44361,
        44433
      ]
    },
    {
      "content": "Here is an example response body:\n\n    {\n      \"value\": [\n        {\n          \"name\": \"Books\",\n          \"fields\": [\n            {\"name\": \"ISBN\", ...},\n            ...\n          ]\n        },\n        {\n          \"name\": \"Games\",\n          ...\n        },\n        ...\n      ]\n    }\n\nNote that you can filter the response down to just the properties you're interested in.",
      "pos": [
        44435,
        44802
      ]
    },
    {
      "content": "For example, if you want only a list of index names, use the OData <ph id=\"ph1\">`$select`</ph> query option:\n\n    GET /indexes?api-version=2015-02-28-Preview&amp;$select=name\n\nIn this case, the response from the above example would appear as follows:\n\n    {\n      \"value\": [\n        {\"name\": \"Books\"},\n        {\"name\": \"Games\"},\n        ...\n      ]\n    }\n\nThis is a useful technique to save bandwidth if you have a lot of indexes in your Search service.",
      "pos": [
        44803,
        45234
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"GetIndex\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Get Index\n\nThe <bpt id=\"p1\">**</bpt>Get Index<ept id=\"p1\">**</ept> operation gets the index definition from Azure Search.",
      "pos": [
        45236,
        45346
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]\n    api-key: [admin key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        45352,
        45523
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get Index<ept id=\"p1\">**</ept> request can be constructed using the GET method.",
      "pos": [
        45524,
        45590
      ]
    },
    {
      "content": "The [index name] in the request URI specifies which index to return from the indexes collection.",
      "pos": [
        45592,
        45688
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        45690,
        45724
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        45725,
        45781
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        45782,
        45906
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        45908,
        46000
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        46002,
        46088
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        46089,
        46134
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get Index<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> set to an admin key (as opposed to a query key).",
      "pos": [
        46135,
        46235
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        46237,
        46302
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        46303,
        46394
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        46395,
        46504
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        46506,
        46529
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        46531,
        46603
      ]
    },
    {
      "content": "See the example JSON in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Creating and Updating an Index](#CreateUpdateIndexExample)</ept> for an example of the response payload.",
      "pos": [
        46605,
        46728
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"DeleteIndex\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Delete Index\n\nThe <bpt id=\"p1\">**</bpt>Delete Index<ept id=\"p1\">**</ept> operation removes an index and associated documents from your Azure Search service.",
      "pos": [
        46730,
        46878
      ]
    },
    {
      "content": "You can get the index name from the service dashboard in the Azure portal, or from the API.",
      "pos": [
        46879,
        46970
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">List Indexes](#ListIndexes)</ept> for details.",
      "pos": [
        46971,
        47016
      ]
    },
    {
      "content": "<bpt id=\"p1\">DELETE https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]\n    api-key: [admin key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        47022,
        47196
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Delete Index<ept id=\"p1\">**</ept> request can be constructed using the DELETE method.",
      "pos": [
        47197,
        47269
      ]
    },
    {
      "content": "The [index name] in the request URI specifies which index to delete from the indexes collection.",
      "pos": [
        47271,
        47367
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        47369,
        47403
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        47404,
        47460
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        47461,
        47585
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        47587,
        47679
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: Required.",
      "pos": [
        47681,
        47703
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        47704,
        47777
      ]
    },
    {
      "content": "It is a string value, unique to your service URL.",
      "pos": [
        47778,
        47827
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Delete Index<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> header set to your admin key (as opposed to a query key).",
      "pos": [
        47828,
        47940
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        47942,
        48007
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        48008,
        48099
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        48100,
        48209
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        48211,
        48234
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 204 No Content is returned for a successful response.",
      "pos": [
        48236,
        48316
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"GetIndexStats\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Get Index Statistics\n\nThe <bpt id=\"p1\">**</bpt>Get Index Statistics<ept id=\"p1\">**</ept> operation returns from Azure Search a document count for the current index, plus storage usage.",
      "pos": [
        48318,
        48496
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]/stats?api-version=[api-version]\n    api-key: [admin key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for all services requests.",
      "pos": [
        48502,
        48684
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get Index Statistics<ept id=\"p1\">**</ept> request can be constructed using the GET method.",
      "pos": [
        48685,
        48762
      ]
    },
    {
      "content": "The [index name] in the request URI tells the service to return index statistics for the specified index.",
      "pos": [
        48764,
        48869
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        48871,
        48905
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        48906,
        48962
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        48963,
        49087
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        49090,
        49182
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        49184,
        49270
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        49271,
        49316
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get Index Statistics<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> set to an admin key (as opposed to a query key).",
      "pos": [
        49317,
        49428
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        49430,
        49495
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        49496,
        49587
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        49588,
        49697
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        49699,
        49722
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        49724,
        49796
      ]
    },
    {
      "content": "The response body is in the following format:\n\n    <ph id=\"ph1\">{\n      \"documentCount\": number,\n      \"storageSize\": number (size of the index in bytes)\n    }\n\n________________________________________\n&lt;a name=\"DocOps\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Document Operations\n\nIn Azure Search, an index is stored in the cloud and populated using JSON documents that you upload to the service.",
      "pos": [
        49798,
        50148
      ]
    },
    {
      "content": "All the documents that you upload comprise the corpus of your search data.",
      "pos": [
        50149,
        50223
      ]
    },
    {
      "content": "Documents contain fields, some of which are tokenized into search terms as they are uploaded.",
      "pos": [
        50224,
        50317
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`/docs`</ph> URL segment in the Azure Search API represents the collection of documents in an index.",
      "pos": [
        50318,
        50417
      ]
    },
    {
      "content": "All operations performed on the collection such as uploading, merging, deleting, or querying documents take place in the context of a single index, so the URLs for these operations will always start with <ph id=\"ph1\">`/indexes/[index name]/docs`</ph> for a given index name.",
      "pos": [
        50418,
        50674
      ]
    },
    {
      "content": "Your application code must either generate JSON documents to upload to Azure Search or you can use an <bpt id=\"p1\">[</bpt><ept id=\"p1\">indexer](https://msdn.microsoft.com/library/dn946891.aspx)</ept> to load documents if the data source is either Azure SQL Database or DocumentDB.",
      "pos": [
        50676,
        50918
      ]
    },
    {
      "content": "Typically, indexes are populated from a single dataset that you provide.",
      "pos": [
        50919,
        50991
      ]
    },
    {
      "content": "You should plan on having one document for each item that you want to search.",
      "pos": [
        50993,
        51070
      ]
    },
    {
      "content": "A movie rental application might have one document per movie, a storefront application might have one document per SKU, an online courseware application might have one document per course, a research firm might have one document for each academic paper in their repository, and so on.",
      "pos": [
        51071,
        51355
      ]
    },
    {
      "content": "Documents consist of one or more fields.",
      "pos": [
        51357,
        51397
      ]
    },
    {
      "content": "Fields can contain text that is tokenized by Azure Search into search terms, as well as non-tokenized or non-text values that can be used in filters or scoring profiles.",
      "pos": [
        51398,
        51567
      ]
    },
    {
      "content": "The names, data types, and search features supported for each field are determined by the index schema.",
      "pos": [
        51568,
        51671
      ]
    },
    {
      "content": "One of the fields in each index schema must be designated as an ID, and each document must have a value for the ID field that uniquely identifies that document in the index.",
      "pos": [
        51672,
        51845
      ]
    },
    {
      "content": "All other document fields are optional and will default to a null value if left unspecified.",
      "pos": [
        51846,
        51938
      ]
    },
    {
      "content": "Note that null values do not take up space in the search index.",
      "pos": [
        51939,
        52002
      ]
    },
    {
      "content": "Before you can upload documents, you must have already created the index on the service.",
      "pos": [
        52004,
        52092
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create Index](#CreateIndex)</ept> for details about this first step.",
      "pos": [
        52093,
        52160
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"AddOrUpdateDocuments\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Add, Update, or Delete Documents\n\nYou can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.",
      "pos": [
        52162,
        52333
      ]
    },
    {
      "content": "For large numbers of updates, batching of documents (up to 1000 documents per batch or about 16 MB per batch) is recommended.",
      "pos": [
        52334,
        52459
      ]
    },
    {
      "content": "<bpt id=\"p1\">POST https://[service name].search.windows.net/indexes/[index name]/docs/index?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for all service requests.",
      "pos": [
        52465,
        52687
      ]
    },
    {
      "content": "You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.",
      "pos": [
        52688,
        52786
      ]
    },
    {
      "content": "The request URI includes [index name], specifying which index to post documents.",
      "pos": [
        52788,
        52868
      ]
    },
    {
      "content": "You can only post documents to one index at a time.",
      "pos": [
        52869,
        52920
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        52922,
        52956
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        52957,
        53013
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        53014,
        53138
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        53140,
        53232
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `Content-Type`</ph>: Required.",
      "pos": [
        53234,
        53261
      ]
    },
    {
      "content": "Set this to <ph id=\"ph1\">`application/json`</ph><ph id=\"ph2\">\n- `api-key`</ph>: Required.",
      "pos": [
        53262,
        53315
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        53316,
        53389
      ]
    },
    {
      "content": "It is a string value, unique to your service.",
      "pos": [
        53390,
        53435
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Add Documents<ept id=\"p1\">**</ept> request must include an <ph id=\"ph1\">`api-key`</ph> header set to your admin key (as opposed to a query key).",
      "pos": [
        53436,
        53549
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        53551,
        53616
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        53617,
        53708
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](.search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        53709,
        53819
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nThe body of the request contains one or more documents to be indexed.",
      "pos": [
        53821,
        53908
      ]
    },
    {
      "content": "Documents are identified by a unique key.",
      "pos": [
        53909,
        53950
      ]
    },
    {
      "content": "Each document is associated with an action: upload, merge, mergeOrUpload or delete.",
      "pos": [
        53951,
        54034
      ]
    },
    {
      "content": "Upload requests must include the document data as a set of key/value pairs.",
      "pos": [
        54035,
        54110
      ]
    },
    {
      "content": "<bpt id=\"p1\">{\n      \"value\": [\n        {\n          \"@search.action\": \"upload (default) | merge | mergeOrUpload | delete\",\n          \"key_field_name\": \"unique_key_of_document\", (key/value pair for key field from index schema)\n          \"field_name\": field_value (key/value pairs matching index schema)\n            ...\n        },\n        ...\n      ]\n    }\n\n**</bpt>Document Actions<ept id=\"p1\">**</ept><ph id=\"ph1\">\n\n- `upload`</ph>: An upload action is similar to an \"upsert\" where the document will be inserted if it is new and updated/replaced if it exists.",
      "pos": [
        54116,
        54619
      ]
    },
    {
      "content": "Note that all fields are replaced in the update case.",
      "pos": [
        54620,
        54673
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `merge`</ph>: Merge updates an existing document with the specified fields.",
      "pos": [
        54674,
        54746
      ]
    },
    {
      "content": "If the document doesn't exist, the merge will fail.",
      "pos": [
        54747,
        54798
      ]
    },
    {
      "content": "Any field you specify in a merge will replace the existing field in the document.",
      "pos": [
        54799,
        54880
      ]
    },
    {
      "content": "This includes fields of type <ph id=\"ph1\">`Collection(Edm.String)`</ph>.",
      "pos": [
        54881,
        54935
      ]
    },
    {
      "content": "For example, if the document contains a field \"tags\" with value <ph id=\"ph1\">`[\"budget\"]`</ph> and you execute a merge with value <ph id=\"ph2\">`[\"economy\", \"pool\"]`</ph> for \"tags\", the final value of the \"tags\" field will be <ph id=\"ph3\">`[\"economy\", \"pool\"]`</ph>.",
      "pos": [
        54936,
        55148
      ]
    },
    {
      "content": "It will <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> be <ph id=\"ph1\">`[\"budget\", \"economy\", \"pool\"]`</ph>.",
      "pos": [
        55149,
        55200
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `mergeOrUpload`</ph>: behaves like <ph id=\"ph2\">`merge`</ph> if a document with the given key already exists in the index.",
      "pos": [
        55201,
        55302
      ]
    },
    {
      "content": "If the document does not exist it behaves like <ph id=\"ph1\">`upload`</ph> with a new document.",
      "pos": [
        55303,
        55379
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `delete`</ph>: Delete removes the specified document from the index.",
      "pos": [
        55380,
        55445
      ]
    },
    {
      "content": "Note that you can specify only the key field value in a <ph id=\"ph1\">`delete`</ph> operation.",
      "pos": [
        55446,
        55521
      ]
    },
    {
      "content": "Attempting to specify other fields will result in an HTTP 400 error.",
      "pos": [
        55522,
        55590
      ]
    },
    {
      "content": "If you want to remove an individual field from a document, use <ph id=\"ph1\">`merge`</ph> instead and simply set the field explicitly to <ph id=\"ph2\">`null`</ph>.",
      "pos": [
        55591,
        55716
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus code: 200 OK is returned for a successful response, meaning that all items have been successfully indexed (as indicated by the 'status' field set to true for all items):\n\n    {\n      \"value\": [\n        {\n          \"key\": \"unique_key_of_document\",\n          \"status\": true,\n          \"errorMessage\": null\n        }\n      ]\n    }  \n\nStatus code: 207 is returned when at least one item was not successfully indexed (as indicated by the 'status' field set to false for items that have not been indexed):\n\n    {\n      \"value\": [\n        {\n          \"key\": \"unique_key_of_document\",\n          \"status\": false,\n          \"errorMessage\": \"The search service is too busy to process this document.",
      "pos": [
        55718,
        56426
      ]
    },
    {
      "content": "Please try again later.\"",
      "pos": [
        56427,
        56451
      ]
    },
    {
      "content": "}\n      ]\n    }  \n\nThe <ph id=\"ph1\">`errorMessage`</ph> property will indicate the reason for the indexing error if possible.",
      "pos": [
        56460,
        56567
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: If your client code frequently encounters a 207 response, one possible reason is that the system is under load.",
      "pos": [
        56569,
        56690
      ]
    },
    {
      "content": "You can confirm this by checking the <ph id=\"ph1\">`errorMessage`</ph> property.",
      "pos": [
        56691,
        56752
      ]
    },
    {
      "content": "If this is the case, we recommend <bpt id=\"p1\">***</bpt>throttling indexing requests<ept id=\"p1\">***</ept>.",
      "pos": [
        56753,
        56822
      ]
    },
    {
      "content": "Otherwise, if indexing traffic doesn't subside, the system could start rejecting all requests with 503 errors.",
      "pos": [
        56823,
        56933
      ]
    },
    {
      "content": "Status code: 429 indicates that you have exceeded your quota on the number of documents per index.",
      "pos": [
        56935,
        57033
      ]
    },
    {
      "content": "You must either create a new index or upgrade for higher capacity limits.",
      "pos": [
        57034,
        57107
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept><ph id=\"ph1\">\n\n    {\n      \"value\": [\n        {\n          \"@search.action\": \"upload\",\n          \"hotelId\": \"1\",\n          \"baseRate\": 199.0,\n          \"description\": \"Best hotel in town\",\n          \"description_fr\": \"Meilleur hôtel en ville\",\n          \"hotelName\": \"Fancy Stay\",\n          \"category\": \"Luxury\",\n          \"tags\": [\"pool\", \"view\", \"wifi\", \"concierge\"],\n          \"parkingIncluded\": false,\n          \"smokingAllowed\": false,\n          \"lastRenovationDate\": \"2010-06-27T00:00:00Z\",\n          \"rating\": 5,\n          \"location\": { \"type\": \"Point\", \"coordinates\": [-122.131577, 47.678581] }\n        },\n        {\n          \"@search.action\": \"upload\",\n          \"hotelId\": \"2\",\n          \"baseRate\": 79.99,\n          \"description\": \"Cheapest hotel in town\",\n          \"description_fr\": \"Hôtel le moins cher en ville\",\n          \"hotelName\": \"Roach Motel\",\n          \"category\": \"Budget\",\n          \"tags\": [\"motel\", \"budget\"],\n          \"parkingIncluded\": true,\n          \"smokingAllowed\": true,\n          \"lastRenovationDate\": \"1982-04-28T00:00:00Z\",\n          \"rating\": 1,\n          \"location\": { \"type\": \"Point\", \"coordinates\": [-122.131577, 49.678581] }\n        },\n        {\n          \"@search.action\": \"merge\",\n          \"hotelId\": \"3\",\n          \"baseRate\": 279.99,\n          \"description\": \"Surprisingly expensive\",\n          \"lastRenovationDate\": null\n        },\n        {\n          \"@search.action\": \"delete\",\n          \"hotelId\": \"4\"\n        }\n      ]\n    }\n________________________________________\n&lt;a name=\"SearchDocs\"&gt;&lt;/a&gt;</ph><ph id=\"ph2\">\n##</ph> Search Documents\n\nA <bpt id=\"p2\">**</bpt>Search<ept id=\"p2\">**</ept> operation is issued as a GET or POST request and specifies parameters that give the criteria for selecting matching documents.",
      "pos": [
        57109,
        58812
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]/docs?[query parameters]\n    api-key: [admin or query key]\n\n    POST https://[service name].search.windows.net/indexes/[index name]/docs/search?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin or query key]\n\n**</bpt>When to use POST instead of GET<ept id=\"p1\">**</ept>\n\nWhen you use HTTP GET to call the <bpt id=\"p2\">**</bpt>Search<ept id=\"p2\">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.",
      "pos": [
        58818,
        59286
      ]
    },
    {
      "content": "This is usually enough for most applications.",
      "pos": [
        59287,
        59332
      ]
    },
    {
      "content": "However, some applications produce very large queries, specifically OData filter expressions.",
      "pos": [
        59333,
        59426
      ]
    },
    {
      "content": "For these applications, using HTTP POST is a better choice.",
      "pos": [
        59427,
        59486
      ]
    },
    {
      "content": "The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.",
      "pos": [
        59487,
        59596
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        59598,
        59650
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> request can be constructed using the GET or POST methods.",
      "pos": [
        59651,
        59723
      ]
    },
    {
      "content": "The request URI specifies which index to query, for all documents that match the parameters.",
      "pos": [
        59725,
        59817
      ]
    },
    {
      "content": "Parameters are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.",
      "pos": [
        59818,
        59945
      ]
    },
    {
      "content": "As a best practice when creating GET requests, remember to <bpt id=\"p1\">[</bpt><ept id=\"p1\">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.",
      "pos": [
        59947,
        60149
      ]
    },
    {
      "content": "For <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> operations, this includes:\n\n<ph id=\"ph1\">- `$filter`</ph><ph id=\"ph2\">\n- `facet`</ph><ph id=\"ph3\">\n- `highlightPreTag`</ph><ph id=\"ph4\">\n- `highlightPostTag`</ph><ph id=\"ph5\">\n- `search`</ph><ph id=\"ph6\">\n- `moreLikeThis`</ph>\n\nURL encoding is only recommended on the above query parameters.",
      "pos": [
        60150,
        60348
      ]
    },
    {
      "content": "If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.",
      "pos": [
        60349,
        60451
      ]
    },
    {
      "content": "Also, URL encoding is only necessary when calling the REST API directly using GET.",
      "pos": [
        60453,
        60535
      ]
    },
    {
      "content": "No URL encoding is necessary when calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, or when using the <bpt id=\"p2\">[</bpt><ept id=\"p2\">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.",
      "pos": [
        60536,
        60727
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"SearchQueryParameters\"&gt;&lt;/a&gt;</ph><bpt id=\"p1\">\n**</bpt>Query Parameters<ept id=\"p1\">**</ept><bpt id=\"p2\">\n\n**</bpt>Search<ept id=\"p2\">**</ept> accepts several parameters that provide query criteria and also specify search behavior.",
      "pos": [
        60729,
        60887
      ]
    },
    {
      "content": "You provide these parameters in the URL query string when calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> via GET, and as JSON properties in the request body when calling <bpt id=\"p2\">**</bpt>Search<ept id=\"p2\">**</ept> via POST.",
      "pos": [
        60888,
        61050
      ]
    },
    {
      "content": "The syntax for some parameters is slightly different between GET and POST.",
      "pos": [
        61051,
        61125
      ]
    },
    {
      "content": "These differences are noted as applicable below:\n\n<ph id=\"ph1\">`search=[string]`</ph> (optional) - The text to search for.",
      "pos": [
        61126,
        61230
      ]
    },
    {
      "content": "All <ph id=\"ph1\">`searchable`</ph> fields are searched by default unless <ph id=\"ph2\">`searchFields`</ph> is specified.",
      "pos": [
        61231,
        61314
      ]
    },
    {
      "content": "When searching <ph id=\"ph1\">`searchable`</ph> fields, the search text itself is tokenized, so multiple terms can be separated by white space (for example: <ph id=\"ph2\">`search=hello world`</ph>).",
      "pos": [
        61315,
        61474
      ]
    },
    {
      "content": "To match any term, use <ph id=\"ph1\">`*`</ph> (this can be useful for boolean filter queries).",
      "pos": [
        61475,
        61550
      ]
    },
    {
      "content": "Omitting this parameter has the same effect as setting it to <ph id=\"ph1\">`*`</ph>.",
      "pos": [
        61551,
        61616
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Simple Query Syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept> for specifics on the search syntax.",
      "pos": [
        61617,
        61728
      ]
    },
    {
      "content": "<bpt id=\"p1\">- **</bpt>Note<ept id=\"p1\">**</ept>: The results can sometimes be surprising when querying over <ph id=\"ph1\">`searchable`</ph> fields.",
      "pos": [
        61732,
        61823
      ]
    },
    {
      "content": "The tokenizer includes logic to handle cases common to English text like apostrophes, commas in numbers, etc. For example, <ph id=\"ph1\">`search=123,456`</ph> will match a single term 123,456 rather than the individual terms 123 and 456, since commas are used as thousand-separators for large numbers in English.",
      "pos": [
        61824,
        62117
      ]
    },
    {
      "content": "For this reason, we recommend using white space rather than punctuation to separate terms in the <ph id=\"ph1\">`search`</ph> parameter.",
      "pos": [
        62118,
        62234
      ]
    },
    {
      "content": "<ph id=\"ph1\">`searchMode=any|all`</ph> (optional, defaults to <ph id=\"ph2\">`any`</ph>) - whether any or all of the search terms must be matched in order to count the document as a match.",
      "pos": [
        62236,
        62386
      ]
    },
    {
      "content": "<ph id=\"ph1\">`searchFields=[string]`</ph> (optional) - The list of comma-separated field names to search for the specified text.",
      "pos": [
        62388,
        62498
      ]
    },
    {
      "content": "Target fields must be marked as <ph id=\"ph1\">`searchable`</ph>.",
      "pos": [
        62499,
        62544
      ]
    },
    {
      "content": "<ph id=\"ph1\">`moreLikeThis=[key]`</ph> (optional) <bpt id=\"p1\">**</bpt>Important:<ept id=\"p1\">**</ept> This feature is only available in <ph id=\"ph2\">`2015-02-28-Preview`</ph>.",
      "pos": [
        62546,
        62648
      ]
    },
    {
      "content": "This option cannot be used in a query that contains the text search parameter, <ph id=\"ph1\">`search=[string]`</ph>.",
      "pos": [
        62649,
        62746
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`moreLikeThis`</ph> parameter finds documents that are similar to the document specified by the document key.",
      "pos": [
        62747,
        62855
      ]
    },
    {
      "content": "When a search request is made with <ph id=\"ph1\">`moreLikeThis`</ph>, a list of search terms is generated based on the frequency and rarity of terms in the source document.",
      "pos": [
        62856,
        63009
      ]
    },
    {
      "content": "Those terms are then used to make the request.",
      "pos": [
        63010,
        63056
      ]
    },
    {
      "content": "By default, the contents of all <ph id=\"ph1\">`searchable`</ph> fields are considered unless <ph id=\"ph2\">`searchFields`</ph> is used to restrict which fields are searched.",
      "pos": [
        63057,
        63192
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$skip=#`</ph> (optional) - the number of search results to skip; Cannot be greater than 100,000.",
      "pos": [
        63196,
        63288
      ]
    },
    {
      "content": "If you need to scan documents in sequence but cannot use <ph id=\"ph1\">`$skip`</ph> due to this limitation, consider using <ph id=\"ph2\">`$orderby`</ph> on a totally-ordered key and <ph id=\"ph3\">`$filter`</ph> with a range query instead.",
      "pos": [
        63289,
        63470
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`skip`</ph> instead of <ph id=\"ph3\">`$skip`</ph>.",
      "pos": [
        63472,
        63573
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$top=#`</ph> (optional) - the number of search results to retrieve.",
      "pos": [
        63575,
        63638
      ]
    },
    {
      "content": "This can be used in conjunction with <ph id=\"ph1\">`$skip`</ph> to implement client-side paging of search results.",
      "pos": [
        63639,
        63734
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> Azure Search uses <bpt id=\"p1\">***</bpt>server-side paging<ept id=\"p1\">***</ept> to prevent queries from retrieving too many documents at once.",
      "pos": [
        63736,
        63856
      ]
    },
    {
      "content": "The default page size is 50, while the maximum page size is 1000.",
      "pos": [
        63857,
        63922
      ]
    },
    {
      "content": "This means that by default <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> returns at most 50 results if you don't specify <ph id=\"ph1\">`$top`</ph>.",
      "pos": [
        63923,
        64016
      ]
    },
    {
      "content": "If there are more than 50 results, the response includes information to retrieve the next page of at most 50 results (see <ph id=\"ph1\">`@odata.nextLink`</ph> and <ph id=\"ph2\">`@search.nextPageParameters`</ph> in <bpt id=\"p1\">[</bpt><ept id=\"p1\">the example below](#SearchResponse)</ept>).",
      "pos": [
        64017,
        64231
      ]
    },
    {
      "content": "Similarly, if you specify a value greater than 1000 for <ph id=\"ph1\">`$top`</ph> and there are more than 1000 results, only the first 1000 results are returned, along with information to retrieve the next page of at most 1000 results.",
      "pos": [
        64232,
        64448
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`top`</ph> instead of <ph id=\"ph3\">`$top`</ph>.",
      "pos": [
        64452,
        64551
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$count=true|false`</ph> (optional, defaults to <ph id=\"ph2\">`false`</ph>) - Specifies whether to fetch the total count of results.",
      "pos": [
        64553,
        64661
      ]
    },
    {
      "content": "Setting this value to <ph id=\"ph1\">`true`</ph> may have a performance impact.",
      "pos": [
        64662,
        64721
      ]
    },
    {
      "content": "Note that the count returned is an approximation.",
      "pos": [
        64722,
        64771
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`count`</ph> instead of <ph id=\"ph3\">`$count`</ph>.",
      "pos": [
        64773,
        64876
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$orderby=[string]`</ph> (optional) - A list of comma-separated expressions to sort the results by.",
      "pos": [
        64878,
        64972
      ]
    },
    {
      "content": "Each expression can be either a field name or a call to the <ph id=\"ph1\">`geo.distance()`</ph> function.",
      "pos": [
        64973,
        65059
      ]
    },
    {
      "content": "Each expression can be followed by <ph id=\"ph1\">`asc`</ph> to indicated ascending, and <ph id=\"ph2\">`desc`</ph> to indicate descending.",
      "pos": [
        65060,
        65159
      ]
    },
    {
      "content": "The default is ascending order.",
      "pos": [
        65160,
        65191
      ]
    },
    {
      "content": "Ties will be broken by the match scores of documents.",
      "pos": [
        65192,
        65245
      ]
    },
    {
      "content": "If no <ph id=\"ph1\">`$orderby`</ph> is specified, the default sort order is descending by document match score.",
      "pos": [
        65246,
        65338
      ]
    },
    {
      "content": "There is a limit of 32 clauses for <ph id=\"ph1\">`$orderby`</ph>.",
      "pos": [
        65339,
        65385
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`orderby`</ph> instead of <ph id=\"ph3\">`$orderby`</ph>.",
      "pos": [
        65387,
        65494
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$select=[string]`</ph> (optional) - A list of comma-separated fields to retrieve.",
      "pos": [
        65496,
        65573
      ]
    },
    {
      "content": "If unspecified, all fields marked as retrievable in the schema are included.",
      "pos": [
        65574,
        65650
      ]
    },
    {
      "content": "You can also explicitly request all fields by setting this parameter to <ph id=\"ph1\">`*`</ph>.",
      "pos": [
        65651,
        65727
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`select`</ph> instead of <ph id=\"ph3\">`$select`</ph>.",
      "pos": [
        65729,
        65834
      ]
    },
    {
      "content": "<ph id=\"ph1\">`facet=[string]`</ph> (zero or more) - A field to facet by.",
      "pos": [
        65836,
        65890
      ]
    },
    {
      "content": "Optionally the string may contain parameters to customize the faceting expressed as comma-separated <ph id=\"ph1\">`name:value`</ph> pairs.",
      "pos": [
        65891,
        66010
      ]
    },
    {
      "content": "Valid parameters are:\n\n<ph id=\"ph1\">- `count`</ph> (max number of facet terms; default is 10).",
      "pos": [
        66011,
        66087
      ]
    },
    {
      "content": "There is no maximum, but higher values incur a corresponding performance penalty, especially if the faceted field contains a large number of unique terms.",
      "pos": [
        66088,
        66242
      ]
    },
    {
      "content": "- For example: <ph id=\"ph1\">`facet=category,count:5`</ph> gets the top five categories in facet results.",
      "pos": [
        66245,
        66331
      ]
    },
    {
      "content": "<bpt id=\"p1\">- **</bpt>Note<ept id=\"p1\">**</ept>: If the <ph id=\"ph1\">`count`</ph> parameter is less than the number of unique terms, the results may not be accurate.",
      "pos": [
        66336,
        66446
      ]
    },
    {
      "content": "This is due to the way faceting queries are distributed across shards.",
      "pos": [
        66447,
        66517
      ]
    },
    {
      "content": "Increasing <ph id=\"ph1\">`count`</ph> generally increases the accuracy of the term counts, but at a performance cost.",
      "pos": [
        66518,
        66616
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `sort`</ph> (one of <ph id=\"ph2\">`count`</ph> to sort <bpt id=\"p1\">*</bpt>descending<ept id=\"p1\">*</ept> by count, <ph id=\"ph3\">`-count`</ph> to sort <bpt id=\"p2\">*</bpt>ascending<ept id=\"p2\">*</ept> by count, <ph id=\"ph4\">`value`</ph> to sort <bpt id=\"p3\">*</bpt>ascending<ept id=\"p3\">*</ept> by value, or <ph id=\"ph5\">`-value`</ph> to sort <bpt id=\"p4\">*</bpt>descending<ept id=\"p4\">*</ept> by value)\n  - For example: <ph id=\"ph6\">`facet=category,count:3,sort:count`</ph> gets the top three categories in facet results in descending order by the number of documents with each city name.",
      "pos": [
        66617,
        66960
      ]
    },
    {
      "content": "For example, if the top three categories are Budget, Motel, and Luxury, and Budget has 5 hits, Motel has 6, and Luxury has 4, then the buckets will be in the order Motel, Budget, Luxury.",
      "pos": [
        66961,
        67147
      ]
    },
    {
      "content": "- For example: <ph id=\"ph1\">`facet=rating,sort:-value`</ph> produces buckets for all possible ratings, in descending order by value.",
      "pos": [
        67150,
        67264
      ]
    },
    {
      "content": "For example, if the ratings are from 1 to 5, the buckets will be ordered 5, 4, 3, 2, 1, irrespective of how many documents match each rating.",
      "pos": [
        67265,
        67406
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `values`</ph> (pipe-delimited numeric or <ph id=\"ph2\">`Edm.DateTimeOffset`</ph> values specifying a dynamic set of facet entry values)\n  - For example: <ph id=\"ph3\">`facet=baseRate,values:10|20`</ph> produces three buckets: One for base rate 0 up to but not including 10, one for 10 up to but not including 20, and one for 20 or higher.",
      "pos": [
        67407,
        67704
      ]
    },
    {
      "content": "- For example: <ph id=\"ph1\">`facet=lastRenovationDate,values:2010-02-01T00:00:00Z`</ph> produces two buckets: One for hotels renovated before February 2010, and one for hotels renovated February 1st, 2010 or later.",
      "pos": [
        67707,
        67903
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `interval`</ph> (integer interval greater than 0 for numbers, or <ph id=\"ph2\">`minute`</ph>, <ph id=\"ph3\">`hour`</ph>, <ph id=\"ph4\">`day`</ph>, <ph id=\"ph5\">`week`</ph>, <ph id=\"ph6\">`month`</ph>, <ph id=\"ph7\">`quarter`</ph>, <ph id=\"ph8\">`year`</ph> for date time values)\n  - For example: <ph id=\"ph9\">`facet=baseRate,interval:100`</ph> produces buckets based on base rate ranges of size 100.",
      "pos": [
        67904,
        68150
      ]
    },
    {
      "content": "For example, if base rates are all between $60 and $600, there will be buckets for 0-100, 100-200, 200-300, 300-400, 400-500, and 500-600.",
      "pos": [
        68151,
        68289
      ]
    },
    {
      "content": "- For example: <ph id=\"ph1\">`facet=lastRenovationDate,interval:year`</ph> produces one bucket for each year when hotels were renovated.",
      "pos": [
        68292,
        68409
      ]
    },
    {
      "content": "<bpt id=\"p1\">- **</bpt>Note<ept id=\"p1\">**</ept>: <ph id=\"ph1\">`count`</ph> and <ph id=\"ph2\">`sort`</ph> can be combined in the same facet specification, but they cannot be combined with <ph id=\"ph3\">`interval`</ph> or <ph id=\"ph4\">`values`</ph>, and <ph id=\"ph5\">`interval`</ph> and <ph id=\"ph6\">`values`</ph> cannot be combined together.",
      "pos": [
        68410,
        68603
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`facets`</ph> instead of <ph id=\"ph3\">`facet`</ph>.",
      "pos": [
        68605,
        68708
      ]
    },
    {
      "content": "Also, you specify it as a JSON array of strings where each string is a separate facet expression.",
      "pos": [
        68709,
        68806
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$filter=[string]`</ph> (optional) - A structured search expression in standard OData syntax.",
      "pos": [
        68808,
        68896
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">OData Expression Syntax](#ODataExpressionSyntax)</ept> for details on the subset of the OData expression grammar that Azure Search supports.",
      "pos": [
        68897,
        69036
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`filter`</ph> instead of <ph id=\"ph3\">`$filter`</ph>.",
      "pos": [
        69038,
        69143
      ]
    },
    {
      "content": "<ph id=\"ph1\">`highlight=[string]`</ph> (optional) - A set of comma-separated field names used for hit highlights.",
      "pos": [
        69145,
        69240
      ]
    },
    {
      "content": "Only <ph id=\"ph1\">`searchable`</ph> fields can be used for hit highlighting.",
      "pos": [
        69241,
        69299
      ]
    },
    {
      "content": "<ph id=\"ph1\">`highlightPreTag=[string]`</ph> (optional, defaults to `<ph id=\"ph2\">&lt;em&gt;</ph><ph id=\"ph3\">`) - A string tag that prepends to hit highlights. Must be set with `</ph>highlightPostTag`.",
      "pos": [
        69301,
        69443
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).",
      "pos": [
        69445,
        69582
      ]
    },
    {
      "content": "<ph id=\"ph1\">`highlightPostTag=[string]`</ph> (optional, defaults to `<ph id=\"ph2\">&lt;/em&gt;</ph><ph id=\"ph3\">`) - a string tag that appends to hit highlights. Must be set with `</ph>highlightPreTag`.",
      "pos": [
        69584,
        69726
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).",
      "pos": [
        69728,
        69865
      ]
    },
    {
      "content": "<ph id=\"ph1\">`scoringProfile=[string]`</ph> (optional) - The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.",
      "pos": [
        69867,
        70013
      ]
    },
    {
      "content": "<ph id=\"ph1\">`scoringParameter=[string]`</ph> (zero or more) - Indicates the value for each parameter defined in a scoring function (for example, <ph id=\"ph2\">`referencePointParameter`</ph>) using the format name:value.",
      "pos": [
        70015,
        70198
      ]
    },
    {
      "content": "For example, if the scoring profile defines a function with a parameter called \"mylocation\" the query string option would be &amp;scoringParameter=mylocation:-122.2,44.8\n\n<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`scoringParameters`</ph> instead of <ph id=\"ph3\">`scoringParameter`</ph>.",
      "pos": [
        70199,
        70491
      ]
    },
    {
      "content": "Also, you specify it as a JSON array of strings where each string is a separate name:value pair.",
      "pos": [
        70492,
        70588
      ]
    },
    {
      "content": "<ph id=\"ph1\">`minimumCoverage`</ph> (optional, defaults to 100) - a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success.",
      "pos": [
        70590,
        70794
      ]
    },
    {
      "content": "By default, the entire index must be available or <ph id=\"ph1\">`Search`</ph> will return HTTP status code 503.",
      "pos": [
        70795,
        70887
      ]
    },
    {
      "content": "If you set <ph id=\"ph1\">`minimumCoverage`</ph> and <ph id=\"ph2\">`Search`</ph> succeeds, it will return HTTP 200 and include a <ph id=\"ph3\">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.",
      "pos": [
        70888,
        71089
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.",
      "pos": [
        71091,
        71242
      ]
    },
    {
      "content": "However, not all matching documents are guaranteed to be present in the search results.",
      "pos": [
        71243,
        71330
      ]
    },
    {
      "content": "If search recall is more important to your application than availability, then it's best to leave <ph id=\"ph1\">`minimumCoverage`</ph> at its default value of 100.",
      "pos": [
        71331,
        71475
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        71477,
        71511
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        71512,
        71568
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        71569,
        71693
      ]
    },
    {
      "content": "Note: For this operation, the <ph id=\"ph1\">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> with GET or POST.",
      "pos": [
        71695,
        71843
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        71845,
        71937
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        71939,
        72025
      ]
    },
    {
      "content": "It is a string value, unique to your service URL.",
      "pos": [
        72026,
        72075
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> request can specify either an admin key or query key for <ph id=\"ph1\">`api-key`</ph>.",
      "pos": [
        72076,
        72158
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        72160,
        72225
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        72226,
        72317
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        72318,
        72427
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nFor GET: None.",
      "pos": [
        72429,
        72461
      ]
    },
    {
      "content": "For POST:\n\n    <ph id=\"ph1\">{\n      \"count\": true | false (default),\n      \"facets\": [ \"facet_expression_1\", \"facet_expression_2\", ... ],\n      \"filter\": \"odata_filter_expression\",\n      \"highlight\": \"highlight_field_1, highlight_field_2, ...\",\n      \"highlightPreTag\": \"pre_tag\",\n      \"highlightPostTag\": \"post_tag\",\n      \"minimumCoverage\": # (% of index that must be covered to declare query successful; default 100),\n      \"moreLikeThis\": \"document_key\" (mutually exclusive with \"search\" parameter),\n      \"orderby\": \"orderby_expression\",\n      \"scoringParameters\": [ \"scoring_parameter_1\", \"scoring_parameter_2\", ... ],\n      \"scoringProfile\": \"scoring_profile_name\",\n      \"search\": \"simple_query_expression\",\n      \"searchFields\": \"field_name_1, field_name_2, ...\",\n      \"searchMode\": \"any\" (default) | \"all\",\n      \"select\": \"field_name_1, field_name_2, ...\",\n      \"skip\": # (default 0),\n      \"top\": #\n    }\n\n&lt;a name=\"SearchResponse\"&gt;&lt;/a&gt;</ph><bpt id=\"p1\">\n**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        72463,
        73473
      ]
    },
    {
      "content": "<bpt id=\"p1\">{\n      \"@odata.count\": # (if $count=true was provided in the query),\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"@search.facets\": { (if faceting was specified in the query)\n        \"facet_field\": [\n          {\n            \"value\": facet_entry_value (for non-range facets),\n            \"from\": facet_entry_value (for range facets),\n            \"to\": facet_entry_value (for range facets),\n            \"count\": number_of_documents\n          }\n        ],\n        ...\n      },\n      \"@search.nextPageParameters\": { (request body to fetch the next page of results if result count exceeds page size and Search was called with POST)\n        \"count\": ... (value from request body if present),\n        \"facets\": ... (value from request body if present),\n        \"filter\": ... (value from request body if present),\n        \"highlight\": ... (value from request body if present),\n        \"highlightPreTag\": ... (value from request body if present),\n        \"highlightPostTag\": ... (value from request body if present),\n        \"minimumCoverage\": ... (value from request body if present),\n        \"moreLikeThis\": ... (value from request body if present),\n        \"orderby\": ... (value from request body if present),\n        \"scoringParameters\": ... (value from request body if present),\n        \"scoringProfile\": ... (value from request body if present),\n        \"search\": ... (value from request body if present),\n        \"searchFields\": ... (value from request body if present),\n        \"searchMode\": ... (value from request body if present),\n        \"select\": ... (value from request body if present),\n        \"skip\": ... (page size plus value from request body if present),\n        \"top\": ... (value from request body if present minus page size),\n      },\n      \"value\": [\n        {\n          \"@search.score\": document_score (if a text query was provided),\n          \"@search.highlights\": {\n            field_name: [ subset of text, ... ],\n            ...\n          },\n          key_field_name: document_key,\n          field_name: field_value (retrievable fields or specified projection),\n          ...\n        },\n        ...\n      ],\n      \"@odata.nextLink\": (URL to fetch the next page of results if result count exceeds page size; Applies to both GET and POST)\n    }\n\n**</bpt>Examples:<ept id=\"p1\">**</ept>\n\nYou can find additional examples on the <bpt id=\"p2\">[</bpt><ept id=\"p2\">OData Expression Syntax for Azure Search](https://msdn.microsoft.com/library/azure/dn798921.aspx)</ept> page.",
      "pos": [
        73479,
        75939
      ]
    },
    {
      "content": "1)  Search the Index sorted descending by date.",
      "pos": [
        75941,
        75988
      ]
    },
    {
      "content": "GET /indexes/hotels/docs?search=*&amp;$orderby=lastRenovationDate desc&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        75994,
        76160
      ]
    },
    {
      "content": "{\n      \"searc",
      "pos": [
        76165,
        76179
      ]
    },
    {
      "content": "<ph id=\"ph1\">\":</ph> \"*\",\n      \"orderby\": [ \"lastRenovation",
      "pos": [
        76180,
        76222
      ]
    },
    {
      "content": "ate desc\" ]\n    }\n\n2)  In a faceted search, search the index and retrieve facets for categories, rating, tags, as well as items with baseRate in specific ranges:\n\n    GET /indexes/hotels/docs?search=test&amp;facet=category&amp;facet=rating&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        76223,
        76598
      ]
    },
    {
      "content": "{\n      \"search\":",
      "pos": [
        76603,
        76620
      ]
    },
    {
      "content": "<ph id=\"ph1\">\"t</ph>est\",\n      \"facets\": [ \"category\", \"rating\", \"tags\", \"baseRate,values:8",
      "pos": [
        76621,
        76695
      ]
    },
    {
      "content": "|150|220\" ]\n    }\n\n3)  Using a filter, narrow down the previous faceted query results after the user clicks on rating 3 and category \"Motel\":\n\n    GET /indexes/hotels/docs?search=test&amp;facet=tags&amp;facet=baseRate,values:80|150|220&amp;$filter=rating eq 3 and category eq 'Motel'&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        76696,
        77067
      ]
    },
    {
      "content": "{\n      \"search\":",
      "pos": [
        77072,
        77089
      ]
    },
    {
      "content": "<ph id=\"ph1\">\"t</ph>est\",\n      \"facets\": [ \"tags\", \"baseRate,values:80",
      "pos": [
        77090,
        77143
      ]
    },
    {
      "content": "<ph id=\"ph1\">15</ph>0|220\" ],\n      \"filter\": \"rating eq 3 and cate",
      "pos": [
        77144,
        77193
      ]
    },
    {
      "content": "ory eq 'Motel'\"\n    }\n\n4) In a faceted search, set an upper limit on unique terms returned in a query.",
      "pos": [
        77194,
        77296
      ]
    },
    {
      "content": "The default is 10, but you can increase or decrease this value using the <ph id=\"ph1\">`count`</ph> parameter on the <ph id=\"ph2\">`facet`</ph> attribute:\n\n    GET /indexes/hotels/docs?search=test&amp;facet=city,count:5&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        77297,
        77574
      ]
    },
    {
      "content": "<ph id=\"ph1\"> {</ph>\n      \"search\": \"",
      "pos": [
        77578,
        77598
      ]
    },
    {
      "content": "<ph id=\"ph1\">est</ph>\",\n      \"facets\": [ \"city,c",
      "pos": [
        77599,
        77630
      ]
    },
    {
      "content": "<ph id=\"ph1\">u</ph>nt:5\" ]\n    }\n\n5)  Search the Index within specific fields; For example, a language-specific field:\n\n    GET /indexes/hotels/docs?search=hôtel&amp;searchFields=description_fr&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        77631,
        77902
      ]
    },
    {
      "content": "{\n      \"search\":",
      "pos": [
        77907,
        77924
      ]
    },
    {
      "content": "<ph id=\"ph1\">hô</ph>tel\",\n      \"searchFields\": [ \"descr",
      "pos": [
        77926,
        77964
      ]
    },
    {
      "content": "ption_fr\" ]\n    }\n\n6) Search the Index across multiple fields.",
      "pos": [
        77965,
        78027
      ]
    },
    {
      "content": "For example, you can store and query searchable fields in multiple languages, all within the same index.",
      "pos": [
        78028,
        78132
      ]
    },
    {
      "content": "If English and French descriptions co-exist in the same document, you can return any or all in the query results:\n\n    GET /indexes/hotels/docs?search=hotel&amp;searchFields=description,description_fr&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        78134,
        78430
      ]
    },
    {
      "content": "<ph id=\"ph1\"> {</ph>\n      \"search\": \"h",
      "pos": [
        78434,
        78455
      ]
    },
    {
      "content": "<ph id=\"ph1\">tel</ph>\",\n      \"searchFields\": [ \"description\", \"descript",
      "pos": [
        78456,
        78510
      ]
    },
    {
      "content": "<ph id=\"ph1\">o</ph>n_fr\" ]\n    }\n\nNote that you can only query one index at a time.",
      "pos": [
        78511,
        78576
      ]
    },
    {
      "content": "Do not create multiple indexes for each language unless you plan to query one at a time.",
      "pos": [
        78577,
        78665
      ]
    },
    {
      "content": "7)  Paging - Get the 1st page of items (page size is 10):\n\n    GET /indexes/hotels/docs?search=*&amp;$skip=0&amp;$top=10&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        78667,
        78879
      ]
    },
    {
      "content": "{\n      \"searc",
      "pos": [
        78884,
        78898
      ]
    },
    {
      "content": "<ph id=\"ph1\">\":</ph> \"*\",",
      "pos": [
        78899,
        78906
      ]
    },
    {
      "content": "<ph id=\"ph1\"> \"</ph>skip\": 0,",
      "pos": [
        78912,
        78923
      ]
    },
    {
      "content": "\"top\": 10\n    }\n\n8)  Paging - Get the 2nd page of items (page size is 10):\n\n    GET /indexes/hotels/docs?search=*&amp;$skip=10&amp;$top=10&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        78930,
        79160
      ]
    },
    {
      "content": "{\n      \"searc",
      "pos": [
        79165,
        79179
      ]
    },
    {
      "content": "<ph id=\"ph1\">\":</ph> \"*\",",
      "pos": [
        79180,
        79187
      ]
    },
    {
      "content": "<ph id=\"ph1\">\"s</ph>kip\": 10,",
      "pos": [
        79194,
        79205
      ]
    },
    {
      "content": "\"top\": 10\n    }\n\n9)  Retrieve a specific set of fields:\n\n    GET /indexes/hotels/docs?search=*&amp;$select=hotelName,description&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        79212,
        79436
      ]
    },
    {
      "content": "{\n      \"searc",
      "pos": [
        79441,
        79455
      ]
    },
    {
      "content": "<ph id=\"ph1\">\":</ph> \"*\",\n      \"select\": [ \"hotelName\", \"de",
      "pos": [
        79456,
        79498
      ]
    },
    {
      "content": "cription\" ]\n    }\n\n10)  Retrieve documents matching a specific filter expression\n\n    GET /indexes/hotels/docs?$filter=(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"filter\": \"(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'\"\n    }\n\n11) Search the index and return fragments with hit highlights\n\n    GET /indexes/hotels/docs?search=something&amp;highlight=description&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        79499,
        80111
      ]
    },
    {
      "content": "{\n      \"search\": \"som",
      "pos": [
        80116,
        80138
      ]
    },
    {
      "content": "<ph id=\"ph1\">th</ph>ing\",\n      \"highlight\": \"",
      "pos": [
        80139,
        80167
      ]
    },
    {
      "content": "escription\"\n    }\n\n12) Search the index and return documents sorted from closer to farther away from a reference location\n\n    GET /indexes/hotels/docs?search=something&amp;$orderby=geo.distance(location, geography'POINT(-122.12315 47.88121)')&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        80168,
        80507
      ]
    },
    {
      "content": "{\n      \"search\": \"som",
      "pos": [
        80512,
        80534
      ]
    },
    {
      "content": "<ph id=\"ph1\">th</ph>ing\",\n      \"orderby\": [ \"geo.distance(location, geography'POINT(-122.12315 47",
      "pos": [
        80535,
        80615
      ]
    },
    {
      "content": "88121)')\" ]\n    }\n\n13) Search the index assuming there's a scoring profile called \"geo\" with two distance scoring functions, one defining a parameter called \"currentLocation\" and one defining a parameter called \"lastLocation\"\n\n    GET /indexes/hotels/docs?search=something&amp;scoringProfile=geo&amp;scoringParameter=currentLocation:-122.123,44.77233&amp;scoringParameter=lastLocation:-121.499,44.2113&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        80616,
        81105
      ]
    },
    {
      "content": "{\n      \"search\": \"som",
      "pos": [
        81110,
        81132
      ]
    },
    {
      "content": "<ph id=\"ph1\">th</ph>ing\",\n      \"scoringProf",
      "pos": [
        81133,
        81159
      ]
    },
    {
      "content": "<ph id=\"ph1\">le</ph>\": \"geo\",\n      \"scoringParameters\": [ \"currentLocation:-122.123,44.77233\", \"lastLocation:-12",
      "pos": [
        81160,
        81255
      ]
    },
    {
      "content": ".499,44.2113\" ]\n    }\n\n14) Find documents in the index using <bpt id=\"p1\">[</bpt><ept id=\"p1\">simple query syntax](https://msdn.microsoft.com/library/dn798920.aspx)</ept>.",
      "pos": [
        81256,
        81389
      ]
    },
    {
      "content": "This query returns hotels where searchable fields contain the terms \"comfort\" and \"location\" but not \"motel\":\n\n    GET /indexes/hotels/docs?search=comfort +location -motel&amp;searchMode=all&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview",
      "pos": [
        81390,
        81676
      ]
    },
    {
      "content": "{\n      \"search\": \"comfort +location",
      "pos": [
        81681,
        81717
      ]
    },
    {
      "content": "<ph id=\"ph1\">mo</ph>tel\",\n      \"search",
      "pos": [
        81719,
        81740
      ]
    },
    {
      "content": "ode\": \"all\"\n    }\n\nNote the use of <ph id=\"ph1\">`searchMode=all`</ph> above.",
      "pos": [
        81741,
        81799
      ]
    },
    {
      "content": "Including this parameter overrides the default of <ph id=\"ph1\">`searchMode=any`</ph>, ensuring that <ph id=\"ph2\">`-motel`</ph> means \"AND NOT\" instead of \"OR NOT\".",
      "pos": [
        81800,
        81927
      ]
    },
    {
      "content": "Without <ph id=\"ph1\">`searchMode=all`</ph>, you get \"OR NOT\" which expands rather than restricts search results, and this can be counter-intuitive to some users.",
      "pos": [
        81928,
        82071
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"LookupAPI\"&gt;&lt;/a&gt;</ph>\n##Lookup Document\n\nThe <bpt id=\"p1\">**</bpt>Lookup Document<ept id=\"p1\">**</ept> operation retrieves a document from Azure Search.",
      "pos": [
        82074,
        82191
      ]
    },
    {
      "content": "This is useful when a user clicks on a specific search result, and you want to look up specific details about that document.",
      "pos": [
        82192,
        82316
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]/docs/[key]?[query parameters]\n    api-key: [admin or query key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        82322,
        82506
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Lookup Document<ept id=\"p1\">**</ept> request can be constructed as follows.",
      "pos": [
        82507,
        82569
      ]
    },
    {
      "content": "GET /indexes/[index name]/docs/key?[query parameters]\n\nAlternatively, you can use the traditional OData syntax for key lookup:\n\n    GET /indexes('[index name]')/docs('[key]')?[query parameters]\n\nThe request URI includes an [index name] and [key], specifying which document to retrieve from which index.",
      "pos": [
        82575,
        82877
      ]
    },
    {
      "content": "You can only get one document at a time.",
      "pos": [
        82878,
        82918
      ]
    },
    {
      "content": "Use <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept> to get multiple documents in a single request.",
      "pos": [
        82919,
        82980
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Query Parameters<ept id=\"p1\">**</ept><ph id=\"ph1\">\n\n`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.",
      "pos": [
        82982,
        83081
      ]
    },
    {
      "content": "If unspecified or set to <ph id=\"ph1\">`*`</ph>, all fields marked as retrievable in the schema are included in the projection.",
      "pos": [
        83082,
        83190
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        83192,
        83226
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        83227,
        83283
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        83284,
        83408
      ]
    },
    {
      "content": "Note: For this operation, the <ph id=\"ph1\">`api-version`</ph> is specified as a query parameter.",
      "pos": [
        83410,
        83488
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        83490,
        83582
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        83584,
        83670
      ]
    },
    {
      "content": "It is a string value, unique to your service URL.",
      "pos": [
        83671,
        83720
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Lookup Document<ept id=\"p1\">**</ept> request can specify either an admin key or query key for <ph id=\"ph1\">`api-key`</ph>.",
      "pos": [
        83721,
        83812
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        83814,
        83879
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        83880,
        83971
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        83972,
        84081
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        84083,
        84106
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        84108,
        84180
      ]
    },
    {
      "content": "<bpt id=\"p1\">{\n      field_name: field_value (fields matching the default or specified projection)\n    }\n\n**</bpt>Example<ept id=\"p1\">**</ept>\n\nLookup the document that has key '2'\n\n    GET /indexes/hotels/docs/2?api-version=2015-02-28-Preview\n\nLookup the document that has key '3' using OData syntax:\n\n    <ph id=\"ph1\">GET /indexes('hotels')/docs('3')?api-version=2015-02-28-Preview\n\n&lt;a name=\"CountDocs\"&gt;&lt;/a&gt;</ph>\n##Count Documents\n\nThe <bpt id=\"p2\">**</bpt>Count Documents<ept id=\"p2\">**</ept> operation retrieves a count of the number of documents in a search index.",
      "pos": [
        84186,
        84661
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`$count`</ph> syntax is part of the OData protocol.",
      "pos": [
        84662,
        84712
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]/docs/$count?api-version=[api-version]\n    Accept: text/plain\n    api-key: [admin or query key]\n\n**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        84718,
        84933
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Count Documents<ept id=\"p1\">**</ept> request can be constructed using the GET method.",
      "pos": [
        84934,
        85006
      ]
    },
    {
      "content": "The [index name] in the request URI tells the service to return a count of all items in the docs collection of the specified index.",
      "pos": [
        85008,
        85139
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        85141,
        85175
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        85176,
        85232
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        85233,
        85357
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers.",
      "pos": [
        85359,
        85451
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `Accept`</ph>: This value must be set to <ph id=\"ph2\">`text/plain`</ph>.",
      "pos": [
        85453,
        85504
      ]
    },
    {
      "content": "<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        85505,
        85591
      ]
    },
    {
      "content": "It is a string value, unique to your service URL.",
      "pos": [
        85592,
        85641
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Count Documents<ept id=\"p1\">**</ept> request can specify either an admin key or query key for <ph id=\"ph1\">`api-key`</ph>.",
      "pos": [
        85642,
        85733
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        85735,
        85800
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        85801,
        85892
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        85893,
        86002
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nNone.",
      "pos": [
        86004,
        86027
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        86029,
        86101
      ]
    },
    {
      "content": "The response body contains the count value as an integer formatted in plain text.",
      "pos": [
        86103,
        86184
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"Suggestions\"&gt;&lt;/a&gt;</ph>\n##Suggestions\n\nThe <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> operation retrieves suggestions based on partial search input.",
      "pos": [
        86186,
        86310
      ]
    },
    {
      "content": "It's typically used in search boxes to provide type-ahead suggestions as users are entering search terms.",
      "pos": [
        86311,
        86416
      ]
    },
    {
      "content": "Suggestion requests aim at suggesting target documents, so the suggested text may be repeated if multiple candidate documents match the same search input.",
      "pos": [
        86418,
        86572
      ]
    },
    {
      "content": "You can use <ph id=\"ph1\">`$select`</ph> to retrieve other document fields (including the document key) so that you can tell which document is the source for each suggestion.",
      "pos": [
        86573,
        86728
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> operation is issued as a GET or POST request.",
      "pos": [
        86730,
        86793
      ]
    },
    {
      "content": "<bpt id=\"p1\">GET https://[service name].search.windows.net/indexes/[index name]/docs/suggest?[query parameters]\n    api-key: [admin or query key]\n\n    POST https://[service name].search.windows.net/indexes/[index name]/docs/suggest?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin or query key]\n\n**</bpt>When to use POST instead of GET<ept id=\"p1\">**</ept>\n\nWhen you use HTTP GET to call the <bpt id=\"p2\">**</bpt>Suggestions<ept id=\"p2\">**</ept> API, you need to be aware that the length of the request URL cannot exceed 8 KB.",
      "pos": [
        86799,
        87281
      ]
    },
    {
      "content": "This is usually enough for most applications.",
      "pos": [
        87282,
        87327
      ]
    },
    {
      "content": "However, some applications produce very large queries, specifically OData filter expressions.",
      "pos": [
        87328,
        87421
      ]
    },
    {
      "content": "For these applications, using HTTP POST is a better choice.",
      "pos": [
        87422,
        87481
      ]
    },
    {
      "content": "The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.",
      "pos": [
        87482,
        87591
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request<ept id=\"p1\">**</ept>\n\nHTTPS is required for service requests.",
      "pos": [
        87593,
        87645
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> request can be constructed using the GET or POST methods.",
      "pos": [
        87646,
        87723
      ]
    },
    {
      "content": "The request URI specifies the name of the index to query.",
      "pos": [
        87725,
        87782
      ]
    },
    {
      "content": "Parameters, such as the partially input search term, are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.",
      "pos": [
        87783,
        87952
      ]
    },
    {
      "content": "As a best practice when creating GET requests, remember to <bpt id=\"p1\">[</bpt><ept id=\"p1\">URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx)</ept> specific query parameters when calling the REST API directly.",
      "pos": [
        87954,
        88156
      ]
    },
    {
      "content": "For <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> operations, this includes:\n\n<ph id=\"ph1\">- `$filter`</ph><ph id=\"ph2\">\n- `highlightPreTag`</ph><ph id=\"ph3\">\n- `highlightPostTag`</ph><ph id=\"ph4\">\n- `search`</ph>\n\nURL encoding is only recommended on the above query parameters.",
      "pos": [
        88157,
        88333
      ]
    },
    {
      "content": "If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.",
      "pos": [
        88334,
        88436
      ]
    },
    {
      "content": "Also, URL encoding is only necessary when calling the REST API directly using GET.",
      "pos": [
        88438,
        88520
      ]
    },
    {
      "content": "No URL encoding is necessary when calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using POST, or when using the <bpt id=\"p2\">[</bpt><ept id=\"p2\">.NET client library](https://msdn.microsoft.com/library/dn951165.aspx)</ept>, which handles URL encoding for you.",
      "pos": [
        88521,
        88717
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Query Parameters<ept id=\"p1\">**</ept><bpt id=\"p2\">\n\n**</bpt>Suggestions<ept id=\"p2\">**</ept> accepts several parameters that provide query criteria and also specify search behavior.",
      "pos": [
        88719,
        88845
      ]
    },
    {
      "content": "You provide these parameters in the URL query string when calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> via GET, and as JSON properties in the request body when calling <bpt id=\"p2\">**</bpt>Suggestions<ept id=\"p2\">**</ept> via POST.",
      "pos": [
        88846,
        89018
      ]
    },
    {
      "content": "The syntax for some parameters is slightly different between GET and POST.",
      "pos": [
        89019,
        89093
      ]
    },
    {
      "content": "These differences are noted as applicable below:\n\n<ph id=\"ph1\">`search=[string]`</ph> - the search text to use to suggest queries.",
      "pos": [
        89094,
        89206
      ]
    },
    {
      "content": "Must be at least 1 character, and no more than 100 characters.",
      "pos": [
        89207,
        89269
      ]
    },
    {
      "content": "<ph id=\"ph1\">`highlightPreTag=[string]`</ph> (optional) - a string tag that prepends to search hits.",
      "pos": [
        89271,
        89353
      ]
    },
    {
      "content": "Must be set with <ph id=\"ph1\">`highlightPostTag`</ph>.",
      "pos": [
        89354,
        89390
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).",
      "pos": [
        89392,
        89534
      ]
    },
    {
      "content": "<ph id=\"ph1\">`highlightPostTag=[string]`</ph> (optional) - a string tag that appends to search hits.",
      "pos": [
        89536,
        89618
      ]
    },
    {
      "content": "Must be set with <ph id=\"ph1\">`highlightPreTag`</ph>.",
      "pos": [
        89619,
        89654
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).",
      "pos": [
        89656,
        89798
      ]
    },
    {
      "content": "<ph id=\"ph1\">`suggesterName=[string]`</ph> - the name of the suggester as specified in the <ph id=\"ph2\">`suggesters`</ph> collection that's part of the index definition.",
      "pos": [
        89800,
        89933
      ]
    },
    {
      "content": "A <ph id=\"ph1\">`suggester`</ph> determines which fields are scanned for suggested query terms.",
      "pos": [
        89934,
        90010
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Suggesters](#Suggesters)</ept> for details.",
      "pos": [
        90011,
        90053
      ]
    },
    {
      "content": "<ph id=\"ph1\">`fuzzy=[boolean]`</ph> (optional, default = false) - when set to true this API will find suggestions even if there's a substituted or missing character in the search text.",
      "pos": [
        90055,
        90221
      ]
    },
    {
      "content": "While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.",
      "pos": [
        90222,
        90378
      ]
    },
    {
      "content": "<ph id=\"ph1\">`searchFields=[string]`</ph> (optional) - the list of comma-separated field names to search for the specified search text.",
      "pos": [
        90380,
        90497
      ]
    },
    {
      "content": "Target fields must be enabled for suggestions.",
      "pos": [
        90498,
        90544
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$top=#`</ph> (optional, default = 5) - the number of suggestions to retrieve.",
      "pos": [
        90546,
        90619
      ]
    },
    {
      "content": "Must be a number between 1 and 100.",
      "pos": [
        90620,
        90655
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`top`</ph> instead of <ph id=\"ph3\">`$top`</ph>.",
      "pos": [
        90657,
        90761
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$filter=[string]`</ph> (optional) - an expression that filters the documents considered for suggestions.",
      "pos": [
        90763,
        90863
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`filter`</ph> instead of <ph id=\"ph3\">`$filter`</ph>.",
      "pos": [
        90865,
        90975
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$orderby=[string]`</ph> (optional) - a list of comma-separated expressions to sort the results by.",
      "pos": [
        90977,
        91071
      ]
    },
    {
      "content": "Each expression can be either a field name or a call to the <ph id=\"ph1\">`geo.distance()`</ph> function.",
      "pos": [
        91072,
        91158
      ]
    },
    {
      "content": "Each expression can be followed by <ph id=\"ph1\">`asc`</ph> to indicated ascending, and <ph id=\"ph2\">`desc`</ph> to indicate descending.",
      "pos": [
        91159,
        91258
      ]
    },
    {
      "content": "The default is ascending order.",
      "pos": [
        91259,
        91290
      ]
    },
    {
      "content": "There is a limit of 32 clauses for <ph id=\"ph1\">`$orderby`</ph>.",
      "pos": [
        91291,
        91337
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`orderby`</ph> instead of <ph id=\"ph3\">`$orderby`</ph>.",
      "pos": [
        91339,
        91451
      ]
    },
    {
      "content": "<ph id=\"ph1\">`$select=[string]`</ph> (optional) - a list of comma-separated fields to retrieve.",
      "pos": [
        91453,
        91530
      ]
    },
    {
      "content": "If unspecified, only the document key and suggestion text is returned.",
      "pos": [
        91531,
        91601
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> When calling <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> using POST, this parameter is named <ph id=\"ph2\">`select`</ph> instead of <ph id=\"ph3\">`$select`</ph>.",
      "pos": [
        91603,
        91713
      ]
    },
    {
      "content": "<ph id=\"ph1\">`minimumCoverage`</ph> (optional, defaults to 80) - a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success.",
      "pos": [
        91715,
        91923
      ]
    },
    {
      "content": "By default, at least 80% of the index must be available or <ph id=\"ph1\">`Suggest`</ph> will return HTTP status code 503.",
      "pos": [
        91924,
        92026
      ]
    },
    {
      "content": "If you set <ph id=\"ph1\">`minimumCoverage`</ph> and <ph id=\"ph2\">`Suggest`</ph> succeeds, it will return HTTP 200 and include a <ph id=\"ph3\">`@search.coverage`</ph> value in the response indicating the percentage of the index that was included in the query.",
      "pos": [
        92027,
        92229
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica.",
      "pos": [
        92231,
        92382
      ]
    },
    {
      "content": "However, not all matching suggestions are guaranteed to be present in the results.",
      "pos": [
        92383,
        92465
      ]
    },
    {
      "content": "If recall is more important to your application than availability, then it's best not to lower <ph id=\"ph1\">`minimumCoverage`</ph> below its default value of 80.",
      "pos": [
        92466,
        92609
      ]
    },
    {
      "content": "<ph id=\"ph1\">`api-version=[string]`</ph> (required).",
      "pos": [
        92611,
        92645
      ]
    },
    {
      "content": "The preview version is <ph id=\"ph1\">`api-version=2015-02-28-Preview`</ph>.",
      "pos": [
        92646,
        92702
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx)</ept> for details and alternative versions.",
      "pos": [
        92703,
        92827
      ]
    },
    {
      "content": "Note: For this operation, the <ph id=\"ph1\">`api-version`</ph> is specified as a query parameter in the URL regardless of whether you call <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> with GET or POST.",
      "pos": [
        92829,
        92982
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Headers<ept id=\"p1\">**</ept>\n\nThe following list describes the required and optional request headers\n\n<ph id=\"ph1\">- `api-key`</ph>: The <ph id=\"ph2\">`api-key`</ph> is used to authenticate the request to your Search service.",
      "pos": [
        92984,
        93163
      ]
    },
    {
      "content": "It is a string value, unique to your service URL.",
      "pos": [
        93164,
        93213
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Suggestions<ept id=\"p1\">**</ept> request can specify either an admin key or query key as the <ph id=\"ph1\">`api-key`</ph>.",
      "pos": [
        93214,
        93304
      ]
    },
    {
      "content": "You will also need the service name to construct the request URL.",
      "pos": [
        93306,
        93371
      ]
    },
    {
      "content": "You can get the service name and <ph id=\"ph1\">`api-key`</ph> from your service dashboard in the Azure Portal.",
      "pos": [
        93372,
        93463
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create an Azure Search service in the portal](search-create-service-portal.md)</ept> for page navigation help.",
      "pos": [
        93464,
        93573
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Request Body<ept id=\"p1\">**</ept>\n\nFor GET: None.",
      "pos": [
        93575,
        93607
      ]
    },
    {
      "content": "For POST:\n\n    <bpt id=\"p1\">{\n      \"filter\": \"odata_filter_expression\",\n      \"fuzzy\": true | false (default),\n      \"highlightPreTag\": \"pre_tag\",\n      \"highlightPostTag\": \"post_tag\",\n      \"minimumCoverage\": # (% of index that must be covered to declare query successful; default 80),\n      \"orderby\": \"orderby_expression\",\n      \"search\": \"partial_search_input\",\n      \"searchFields\": \"field_name_1, field_name_2, ...\",\n      \"select\": \"field_name_1, field_name_2, ...\",\n      \"suggesterName\": \"suggester_name\",\n      \"top\": # (default 5)\n    }\n\n**</bpt>Response<ept id=\"p1\">**</ept>\n\nStatus Code: 200 OK is returned for a successful response.",
      "pos": [
        93609,
        94218
      ]
    },
    {
      "content": "<ph id=\"ph1\">{\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"value\": [\n        {\n          \"@search.text\": \"...\",\n          \"</ph>",
      "pos": [
        94224,
        94373
      ]
    },
    {
      "content": "\": \"...\"",
      "pos": [
        94384,
        94392
      ]
    },
    {
      "content": "},",
      "pos": [
        94401,
        94403
      ]
    },
    {
      "content": "...",
      "pos": [
        94412,
        94415
      ]
    },
    {
      "content": "]",
      "pos": [
        94422,
        94423
      ]
    },
    {
      "content": "}\n\nIf the projection option is used to retrieve fields they are included in each element of the array:\n\n    <ph id=\"ph1\">{\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"value\": [\n        {\n          \"@search.text\": \"...\",\n          \"</ph>",
      "pos": [
        94428,
        94685
      ]
    },
    {
      "content": "\": \"...\"",
      "pos": [
        94696,
        94704
      ]
    },
    {
      "content": "<bpt id=\"p1\">\n        },\n        ...\n      ]\n    }\n\n**</bpt>Example<ept id=\"p1\">**</ept>\n\nRetrieve 5 suggestions where the partial search input is 'lux'\n\n    <ph id=\"ph1\">GET /indexes/hotels/docs/suggest?search=lux&amp;$top=5&amp;suggesterName=sg&amp;api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/suggest?api-version=2015-02-28-Preview\n    {\n      \"search\": \"lux\",\n      \"top\": 5,\n      \"suggesterName\": \"sg\"\n    }</ph>",
      "pos": [
        94744,
        95111
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Azure Search Service REST API Version 2015-02-28-Preview | Microsoft Azure\"\n   description=\"Azure Search Service REST API Version 2015-02-28-Preview includes experimental features such as Natural Language Analyzers and moreLikeThis searches.\"\n   services=\"search\"\n   documentationCenter=\"na\"\n   authors=\"HeidiSteen\"\n   manager=\"mblythe\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"search\"\n   ms.devlang=\"rest-api\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"search\"\n   ms.date=\"08/25/2015\"\n   ms.author=\"heidist\"/>\n\n# Azure Search Service REST API: Version 2015-02-28-Preview\n\nThis article is the reference documentation for `api-version=2015-02-28-Preview`. This preview extends the current generally available version, [api-version=2015-02-28](https://msdn.microsoft.com/library/dn798935.aspx), by providing the following experimental features:\n\n- [Natural language processors](#LanguageSupport) from Microsoft (the same ones used by Office and Bing) offer greater precision over query results and more languages.\n- `moreLikeThis` is a a query parameter used in [Search operations](#SearchDocs) that finds other documents that are relevant to another specific document.\n- A POST alternative to the GET syntax for both the [Search](#SearchDocs) and [Suggestions](#Suggestions) API, useful when the overall URL length would otherwise exceed 8KB.\n\nA few additional features in `2015-02-28-Preview` are documented separately. These include:\n\n- [Scoring Profiles](search-api-scoring-profiles-2015-02-28-preview.md)\n- [Indexers](search-api-indexers-2015-02-28-preview.md)\n\nAzure Search service is available in multiple versions. Please refer to [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details.\n\n##APIs in this document\n\nThe Azure Search Service API supports two syntaxes for entity lookup: [simple](https://msdn.microsoft.com/library/dn798920.aspx) and alternate OData syntax (see [Support for OData (Azure Search API)](http://msdn.microsoft.com/library/azure/dn798932.aspx) for details). The following list shows the simple syntax.\n\n[Create Index](#CreateIndex)\n\n    POST /indexes?api-version=2015-02-28-Preview\n\n[Update Index](#UpdateIndex)\n\n    PUT /indexes/[index name]?api-version=2015-02-28-Preview\n\n[Get Index](#GetIndex)\n\n    GET /indexes/[index name]?api-version=2015-02-28-Preview\n\n[Listing Indexes](#ListIndexes)\n\n    GET /indexes?api-version=2015-02-28-Preview\n\n[Get Index Statistics](#GetIndexStats)\n\n    GET /indexes/[index name]/stats?api-version=2015-02-28-Preview\n\n[Delete an Index](#DeleteIndex)\n\n    DELETE /indexes/[index name]?api-version=2015-02-28-Preview\n\n[Add, Delete, and Update Data within an Index](#AddOrUpdateDocuments)\n\n    POST /indexes/[index name]/docs/index?api-version=2015-02-28-Preview\n\n[Search Documents](#SearchDocs)\n\n    GET /indexes/[index name]/docs?[query parameters]\n    POST /indexes/[index name]/docs/search?api-version=2015-02-28-Preview\n\n[Lookup Document](#LookupAPI)\n\n     GET /indexes/[index name]/docs/[key]?[query parameters]\n\n[Count Documents](#CountDocs)\n\n    GET /indexes/[index name]/docs/$count?api-version=2015-02-28-Preview\n\n[Suggestions](#Suggestions)\n\n    GET /indexes/[index name]/docs/suggest?[query parameters]\n    POST /indexes/[index name]/docs/suggest?api-version=2015-02-28-Preview\n\n________________________________________\n<a name=\"IndexOps\"></a>\n## Index Operations\n\nYou can create and manage indexes in Azure Search service via simple HTTP requests (POST, GET, PUT, DELETE) against a given index resource. To create an index, you first POST a JSON document that describes the index schema. The schema defines the fields of the index, their data types, and how they can be used (for example, in full-text searches, filters, sorting, or faceting). It also defines scoring profiles, suggesters and other attributes to configure the behavior of the index.\n\nThe following example provides an illustration of a schema used for searching on hotel information with the Description field defined in two languages. Notice how attributes control how the field is used. For example the `hotelId` is used as the document key (`\"key\": true`) and is excluded from full-text searches (`\"searchable\": false`).\n\n    {\n    \"name\": \"hotels\",  \n    \"fields\": [\n      {\"name\": \"hotelId\", \"type\": \"Edm.String\", \"key\": true, \"searchable\": false},\n      {\"name\": \"baseRate\", \"type\": \"Edm.Double\"},\n      {\"name\": \"description\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false},\n      {\"name\": \"description_fr\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false, \"analyzer\": \"fr.lucene\"},\n      {\"name\": \"hotelName\", \"type\": \"Edm.String\"},\n      {\"name\": \"category\", \"type\": \"Edm.String\"},\n      {\"name\": \"tags\", \"type\": \"Collection(Edm.String)\"},\n      {\"name\": \"parkingIncluded\", \"type\": \"Edm.Boolean\"},\n      {\"name\": \"smokingAllowed\", \"type\": \"Edm.Boolean\"},\n      {\"name\": \"lastRenovationDate\", \"type\": \"Edm.DateTimeOffset\"},\n      {\"name\": \"rating\", \"type\": \"Edm.Int32\"},\n      {\"name\": \"location\", \"type\": \"Edm.GeographyPoint\"}\n     ],\n     \"suggesters\": [\n      {\n       \"name\": \"sg\",\n       \"searchMode\": \"analyzingInfixMatching\",\n       \"sourceFields\": [\"hotelName\"]\n      }\n     ]\n    }\n\nAfter the index is created, you'll upload documents that populate the index. See [Add or Update Documents](#AddOrUpdateDocuments) for this next step.\n\nFor a video introduction to indexing in Azure Search, see the [Channel 9 Cloud Cover episode on Azure Search](http://go.microsoft.com/fwlink/p/?LinkId=511509).\n\n\n<a name=\"CreateIndex\"></a>\n## Create Index\n\nAn index is the primary means of organizing and searching documents in Azure Search, similar to how a table organizes records in a database. Each index has a collection of documents that all conform to the index schema (field names, data types, and properties), but indexes also specify additional constructs (suggesters, scoring profiles, and CORS options) that define other search behaviors.\n\nYou can create a new index within an Azure Search service using an HTTP POST or PUT request. The body of the request is a JSON schema that specifies the index and configuration information.\n\n    POST https://[service name].search.windows.net/indexes?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin key]\n\nAlternatively, you can use PUT and specify the index name on the URI. If the index does not exist, it will be created.\n\n    PUT https://[search service url]/indexes/[index name]?api-version=[api-version]\n\nCreating an index determines the structure of the documents stored and used in search operations. Populating the index is a separate operation. For this step, you can use an [indexer](https://msdn.microsoft.com/library/azure/mt183328.aspx) (available for supported data sources) or an [Add, Update, or Delete Documents](https://msdn.microsoft.com/library/azure/dn798930.aspx) operation. The inverted index is generated when the documents are posted.\n\n**Note**: The maximum number of indexes allowed varies by pricing tier. The free service allows up to 3 indexes. Standard service allows 50 indexes per Search service. See [Limits and constraints](http://msdn.microsoft.com/library/azure/dn798934.aspx) for details.\n\n**Request**\n\nHTTPS is required for all service requests. The **Create Index** request can be constructed using either a POST or PUT method. When using POST, you must provide an index name in the request body along with the index schema definition. With PUT, the index name is part of the URL. If the index doesn't exist, it is created. If it already exists, it is updated to the new definition.\n\nThe index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters. After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.\n\nThe `api-version` is required. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for a list of available versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `Content-Type`: Required. Set this to `application/json`\n- `api-key`: Required. The `api-key` is used to\n- authenticate the request to your Search service. It is a string value, unique to your service. The **Create Index** request must include an `api-key` header set to your admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n<a name=\"RequestData\"></a>\n**Request Body Syntax**\n\nThe body of the request contains a schema definition, which includes the list of data fields within documents that will be fed into this index, data types, attributes, as well as an optional list of scoring profiles that are used to score matching documents at query time.\n\nNote that for a POST request, you must specify the index name in the request body.\n\nThere can only be one key field in the index. It has to be a string field. This field represents the unique identifier for each document stored within the index.\n\nThe main parts of an index include the following:\n\n- `name`\n- `fields` that will be fed into this index, including name, data type, and properties that define allowable actions on that field.\n- `suggesters` used for auto-complete or type-ahead queries.\n- `scoringProfiles` used for custom search score ranking. See [Add scoring profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx) for details.\n- `defaultScoringProfile` used to overwrite the default scoring behaviors.\n- `corsOptions` to allow cross-origin queries against your index.\n\nThe syntax for structuring the request payload is as follows. A sample request is provided further on in this topic.\n\n    {\n      \"name\": (optional on PUT; required on POST) \"name_of_index\",\n      \"fields\": [\n        {\n          \"name\": \"name_of_field\",\n          \"type\": \"Edm.String | Collection(Edm.String) | Edm.Int32 | Edm.Int64 | Edm.Double | Edm.Boolean | Edm.DateTimeOffset | Edm.GeographyPoint\",\n          \"searchable\": true (default where applicable) | false (only Edm.String and Collection(Edm.String) fields can be searchable),\n          \"filterable\": true (default) | false,\n          \"sortable\": true (default where applicable) | false (Collection(Edm.String) fields cannot be sortable),\n          \"facetable\": true (default where applicable) | false (Edm.GeographyPoint fields cannot be facetable),\n          \"key\": true | false (default, only Edm.String fields can be keys),\n          \"retrievable\": true (default) | false,\n          \"analyzer\": \"name of text analyzer\"\n        }\n      ],\n      \"suggesters\": [\n        {\n          \"name\": \"name of suggester\",\n          \"searchMode\": \"analyzingInfixMatching\" (other modes may be added in the future),\n          \"sourceFields\": [\"field1\", \"field2\", ...]\n        }\n      ],\n      \"scoringProfiles\": [\n        {\n          \"name\": \"name of scoring profile\",\n          \"text\": (optional, only applies to searchable fields) {\n            \"weights\": {\n              \"searchable_field_name\": relative_weight_value (positive numbers),\n              ...\n            }\n          },\n          \"functions\": (optional) [\n            {\n              \"type\": \"magnitude | freshness | distance | tag\",\n              \"boost\": # (positive number used as multiplier for raw score != 1),\n              \"fieldName\": \"...\",\n              \"interpolation\": \"constant | linear (default) | quadratic | logarithmic\",\n              \"magnitude\": {\n                \"boostingRangeStart\": #,\n                \"boostingRangeEnd\": #,\n                \"constantBoostBeyondRange\": true | false (default)\n              },\n              \"freshness\": {\n                \"boostingDuration\": \"...\" (value representing timespan leading to now over which boosting occurs)\n              },\n              \"distance\": {\n                \"referencePointParameter\": \"...\", (parameter to be passed in queries to use as reference location, see \"scoringParameter\" for syntax details)\n                \"boostingDistance\": # (the distance in kilometers from the reference location where the boosting range ends)\n              },\n              \"tag\": {\n                \"tagsParameter\": \"...\" (parameter to be passed in queries to specify list of tags to compare against target field, see \"scoringParameter\" for syntax details)\n              }\n            }\n          ],\n          \"functionAggregation\": (optional, applies only when functions are specified)\n            \"sum (default) | average | minimum | maximum | firstMatching\"\n        }\n      ],\n      \"defaultScoringProfile\": (optional) \"...\",\n      \"corsOptions\": (optional) {\n        \"allowedOrigins\": [\"*\"] | [\"origin_1\", \"origin_2\", ...],\n        \"maxAgeInSeconds\": (optional) max_age_in_seconds (non-negative integer)\n      }\n    }\n\n**Index Attributes**\n\nThe following attributes can be set when creating an index. For details about scoring and scoring profiles, see [Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx).\n\n`name` - Sets the name of the field.\n\n`type` - Sets the data type for the field. See [Supported Data Types](#DataTypes) for a list of supported types.\n\n`searchable` - Marks the field as full-text search-able. This means it will undergo analysis such as word-breaking during indexing. If you set a `searchable` field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type `Edm.String` or `Collection(Edm.String)` are `searchable` by default. Fields of other types cannot be `searchable`.\n\n  - **Note**: `searchable` fields consume extra space in your index since Azure Search will store an additional tokenized version of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set `searchable` to `false`.\n\n`filterable` - Allows the field to be referenced in `$filter` queries. `filterable` differs from `searchable` in how strings are handled. Fields of type `Edm.String` or `Collection(Edm.String)` that are `filterable` do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field `f` to \"sunny day\", `$filter=f eq 'sunny'` will find no matches, but `$filter=f eq 'sunny day'` will. All fields are `filterable` by default.\n\n`sortable` - By default the system sorts results by score, but in many experiences users will want to sort by fields in the documents. Fields of type `Collection(Edm.String)` cannot be `sortable`. All other fields are `sortable` by default.\n\n`facetable`- Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, etc.). This option cannot be used with fields of type `Edm.GeographyPoint`. All other fields are `facetable` by default.\n\n  - **Note**: Fields of type `Edm.String` that are `filterable`, `sortable`, or `facetable` can be at most 32KB in length. This is because such fields are treated as a single search term, and the maximum length of a term in Azure Search is 32KB. If you need to store more text than this in a single string field, you will need to explicitly set `filterable`, `sortable`, and `facetable` to `false` in your index definition.\n\n  - **Note**: If a field has none of the above attributes set to `true` (`searchable`, `filterable`, `sortable`,  or`facetable`) the field is effectively excluded from the inverted index. This option is useful for fields that are not used in queries, but are needed in search results. Excluding such fields from the index improves performance.\n\n`suggestions` - Previous versions of the API included a `suggestions` property. This boolean property is now deprecated and no longer available in either `2015-02-28` or `2015-02-28-Preview`. Please use the [Suggesters API](#Suggesters) instead. In the `2014-07-31` version, the `suggestions` property was used to specify whether the field could be used for auto-complete for type ahead, for fields of type `Edm.String` or `Collection(Edm.String)`. The `suggestions` was `false` by default because it required extra space in your index, but if you enabled it, see [Transition from Preview to General Release in Azure Search](search-transition-from-preview.md) for instructions on how to transition to the new API.\n\n`key` - Marks the field as containing unique identifiers for documents within the index. Exactly one field must be chosen as the `key` field and it must be of type `Edm.String`. Key fields can be used to look up documents directly via the [Lookup API](#LookupAPI).\n\n`retrievable` - Sets whether the field can be returned in a search result.  This is useful when you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user. This attribute must be `true` for `key` fields.\n\n`analyzer` - Sets the name of the text analyzer to use for the field. For the allowed set of values see [Language Support](#LanguageSupport). This option can be used only with `searchable` fields. Once the analyzer is chosen, it cannot be changed for the field.\n\n`suggesters` - Sets the search mode and fields that are the source of the content for suggestions. See [Suggesters](#Suggesters) for details.\n\n`scoringProfiles` - Defines custom scoring behaviors that let you influence which items appear higher in search results. Scoring profiles are made up of field weights and functions. See [Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx) for more information about the attributes used in a scoring profile.\n\n<!-- This is a standalone topic in MSDN -->\n<a name=\"LanguageSupport\"></a>\n**Language support**\n\nSearchable fields undergo analysis that most frequently involves word-breaking, text normalization, and filtering out terms. By default, searchable fields in Azure Search are analyzed with the [Apache Lucene Standard analyzer](http://lucene.apache.org/core/4_9_0/analyzers-common/index.html) which breaks text into elements following the[\"Unicode Text Segmentation\"](http://unicode.org/reports/tr29/) rules. Additionally, the standard analyzer converts all characters to their lower case form. Both indexed documents and search terms go through the analysis during indexing and query processing.\n\nAzure Search supports a variety of languages. Each language requires a non-standard text analyzer which accounts for characteristics of a given language. Azure Search offers two types of analyzers:\n\n- 35 analyzers backed by Lucene.\n- 50 analyzers backed by proprietary Microsoft natural language processing technology used in Office and Bing.\n\nSome developers might prefer the more familiar, simple, open-source solution of Lucene. Lucene analyzers are faster, but the Microsoft analyzers have advanced capabilities, such as lemmatization, word decompounding (in languages like German, Danish, Dutch, Swedish, Norwegian, Estonian, Finish, Hungarian, Slovak) and entity recognition (URLs, emails, dates, numbers). If possible, you should run comparisons of both the Microsoft and Lucene analyzers to decide which one is a better fit.\n\n***How they compare***\n\nThe Lucene analyzer for English extends the standard analyzer. It removes possessives (trailing 's) from words, applies stemming as per [Porter Stemming algorithm](http://tartarus.org/~martin/PorterStemmer/), and removes English [stop words](http://en.wikipedia.org/wiki/Stop_words).\n\nIn comparison, the Microsoft analyzer performs lemmatization instead of stemming. It means it can handle inflected and irregular word forms much better what results in more relevant search results (watch module 7 of [Azure Search MVA presentation](http://www.microsoftvirtualacademy.com/training-courses/adding-microsoft-azure-search-to-your-websites-and-apps) for more details).\n\nIndexing with Microsoft analyzers is on average two to three times slower than their Lucene equivalents, depending on the language. Search performance should not be significantly affected for average size queries.\n\n***Configuration***\n\nFor each field in the index definition, you can set the `analyzer` property to an analyzer name that specifies which language and vendor. The same analyzer will be applied when indexing and searching for that field.\nFor example, you can have separate fields for English, French, and Spanish hotel descriptions that exist side-by-side in the same index. Use the ['searchFields' query parameter](#SearchQueryParameters) to specify which language-specific field to search against in your queries. You can review query examples that include the `analyzer` property in [Search Documents](#SearchDocs). \n\n***Analyzer list***\n\nBelow is the list of supported languages together with Lucene and Microsoft analyzer names.\n\n<table style=\"font-size:12\">\n    <tr>\n        <th>Language</th>\n        <th>Microsoft analyzer name</th>\n        <th>Lucene analyzer name</th>\n    </tr>\n    <tr>\n        <td>Arabic</td>\n        <td>ar.microsoft</td>\n        <td>ar.lucene</td>      \n    </tr>\n    <tr>\n        <td>Armenian</td>\n        <td></td>\n        <td>hy.lucene</td>\n    </tr>\n    <tr>\n        <td>Bangla</td>\n        <td>bn.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Basque</td>\n        <td></td>\n        <td>eu.lucene</td>\n    </tr>\n    <tr>\n        <td>Bulgarian</td>\n        <td>bg.microsoft</td>\n        <td>bg.lucene</td>\n    </tr>\n    <tr>\n        <td>Catalan</td>\n        <td>ca.microsoft</td>\n        <td>ca.lucene</td>          \n    </tr>\n    <tr>\n        <td>Chinese Simplified</td>\n        <td>zh-Hans.microsoft</td>\n        <td>zh-Hans.lucene</td>     \n    </tr>\n    <tr>\n        <td>Chinese Traditional</td>\n        <td>zh-Hant.microsoft</td>\n        <td>zh-Hant.lucene</td>     \n    <tr>\n    <tr>\n        <td>Croatian</td>\n        <td>hr.microsoft</td>\n        <td/></td>\n    </tr>\n    <tr>\n        <td>Czech</td>\n        <td>cs.microsoft</td>\n        <td>cs.lucene</td>      \n    </tr>    \n    <tr>\n        <td>Danish</td>\n        <td>da.microsoft</td>\n        <td>da.lucene</td>      \n    </tr>    \n    <tr>\n        <td>Dutch</td>\n        <td>nl.microsoft</td>\n        <td>nl.lucene</td>  \n    </tr>    \n    <tr>\n        <td>English</td>        \n        <td>en.microsoft</td>\n        <td>en.lucene</td>      \n    </tr>\n    <tr>\n        <td>Estonian</td>\n        <td>et.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Finnish</td>\n        <td>fi.microsoft</td>\n        <td>fi.lucene</td>      \n    </tr>    \n    <tr>\n        <td>French</td>\n        <td>fr.microsoft</td>\n        <td>fr.lucene</td>      \n    </tr>\n    <tr>\n        <td>Galician</td>\n        <td></td>\n        <td>gl.lucene</td>      \n    </tr>\n    <tr>\n        <td>German</td>\n        <td>de.microsoft</td>\n        <td>de.lucene</td>      \n    </tr>\n    <tr>\n        <td>Greek</td>\n        <td>el.microsoft</td>\n        <td>el.lucene</td>      \n    </tr>\n    <tr>\n        <td>Gujarati</td>\n        <td>gu.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Hebrew</td>\n        <td>he.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Hindi</td>\n        <td>hi.microsoft</td>\n        <td>hi.lucene</td>      \n    </tr>\n    <tr>\n        <td>Hungarian</td>      \n        <td>hu.microsoft</td>\n        <td>hu.lucene</td>\n    </tr>\n    <tr>\n        <td>Icelandic</td>\n        <td>is.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Indonesian (Bahasa)</td>\n        <td>id.microsoft</td>\n        <td>id.lucene</td>      \n    </tr>\n    <tr>\n        <td>Irish</td>\n        <td></td>\n        <td>ga.lucene</td>\n    </tr>\n    <tr>\n        <td>Italian</td>\n        <td>it.microsoft</td>\n        <td>it.lucene</td>      \n    </tr>\n    <tr>\n        <td>Japanese</td>\n        <td>ja.microsoft</td>\n        <td>ja.lucene</td>\n        \n    </tr>\n    <tr>\n        <td>Kannada</td>\n        <td>ka.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Korean</td>\n        <td></td>\n        <td>ko.lucene</td>\n    </tr>\n    <tr>\n        <td>Latvian</td>        \n        <td>lv.microsoft</td>\n        <td>lv.lucene</td>  \n    </tr>\n    <tr>\n        <td>Lithuanian</td>\n        <td>lt.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Malayalam</td>\n        <td>ml.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Malay (Latin)</td>\n        <td>ms.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Marathi</td>\n        <td>mr.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Norwegian</td>\n        <td>nb.microsoft</td>\n        <td>no.lucene</td>      \n    </tr>\n    <tr>\n        <td>Persian</td>\n        <td></td>\n        <td>fa.lucene</td>      \n    </tr>\n    <tr>\n        <td>Polish</td>\n        <td>pl.microsoft</td>\n        <td>pl.lucene</td>      \n    </tr>\n    <tr>\n        <td>Portuguese (Brazil)</td>\n        <td>pt-Br.microsoft</td>\n        <td>pt-Br.lucene</td>       \n    </tr>\n    <tr>\n        <td>Portuguese (Portugal)</td>\n        <td>pt-Pt.microsoft</td>        \n        <td>pt-Pt.lucene</td>\n    </tr>\n    <tr>\n        <td>Punjabi</td>\n        <td>pa.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Romanian</td>\n        <td>ro.microsoft</td>\n        <td>ro.lucene</td>\n    </tr>\n    <tr>\n        <td>Russian</td>\n        <td>ru.microsoft</td>\n        <td>ru.lucene</td>  \n    </tr>\n    <tr>\n        <td>Serbian (Cyrillic)</td>\n        <td>sr-cyrillic.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Serbian (Latin)</td>\n        <td>sr-latin.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Slovak</td>\n        <td>sk.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Slovenian</td>\n        <td>sl.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Spanish</td>\n        <td>es.microsoft</td>\n        <td>es.lucene</td>\n    </tr>\n    <tr>\n        <td>Swedish</td>\n        <td>sv.microsoft</td>\n        <td>sv.lucene</td>\n    </tr>\n\n    <tr>\n        <td>Tamil</td>\n        <td>ta.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Telugu</td>\n        <td>te.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Thai</td>\n        <td>th.microsoft</td>\n        <td>th.lucene</td>\n    </tr>\n    <tr>\n        <td>Turkish</td>\n        <td>tr.microsoft</td>\n        <td>tr.lucene</td>      \n    </tr>\n    <tr>\n        <td>Ukrainian</td>\n        <td>uk.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Urdu</td>\n        <td>ur.microsoft</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>Vietnamese</td>\n        <td>vi.microsoft</td>\n        <td></td>\n    </tr>\n    <td colspan=\"3\">Additionally Azure Search provides language-agnostic analyzer configurations</td>\n    <tr>\n        <td>Standard ASCII Folding</td>\n        <td>standardasciifolding.lucene</td>\n        <td>\n        <ul>\n            <li>Unicode text segmentation (Standard Tokenizer)</li>\n            <li>ASCII folding filter - converts Unicode characters that don't belong to the set of first 127 ASCII characters into their ASCII equivalents. This is useful for removing diacritics.</li>\n        </ul>\n        </td>\n    </tr>\n</table>\n\nAll analyzers with names annotated with <i>lucene</i> are powered by [Apache Lucene's language analyzers](http://lucene.apache.org/core/4_9_0/analyzers-common/overview-summary.html). More information about the ASCII folding filter can be found [here](http://lucene.apache.org/core/4_9_0/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html).\n\n**Suggesters**\n\nA `suggester` defines which fields in an index are used to support auto-complete in searches. Typically partial search strings are sent to the [Suggestions API](#Suggestions) while the user is typing a search query, and the API returns a set of suggested phrases. A suggester that you define in the index determines which fields are used to build the type-ahead search terms. See [Suggesters](#Suggesters) for configuration details.\n\n**Scoring profiles**\n\nA `scoringProfile` defines custom scoring behaviors that let you influence which items appear higher in the search results. Scoring profiles are made up of field weights and functions. To use them, you specify a profile by name on the query string.\n\nA default scoring profile operates behind the scenes to compute a search score for every item in a result set. You can use the internal, unnamed scoring profile. Alternatively, set `defaultScoringProfile` to use a custom profile as the default, invoked whenever a custom profile is not specified on the query string.\n\nSee [Add scoring profiles to a search index (Azure Search Service REST API)](search-api-scoring-profiles-2015-02-28.md) for details.\n\n**CORS Options**\n\nClient-side Javascript cannot call any APIs by default since the browser will prevent all cross-origin requests. Enable CORS (Cross-Origin Resource Sharing) by setting the `corsOptions` attribute to allow cross-origin queries to your index. Note that only query APIs support CORS for security reasons. The following options can be set for CORS:\n\n- `allowedOrigins` (required): This is a list of origins that will be granted access to your index. This means that any Javascript code served from those origins will be allowed to query your index (assuming it provides the correct API key). Each origin is typically of the form `protocol://fully-qualified-domain-name:port` although the port is often omitted. See [this article](http://go.microsoft.com/fwlink/?LinkId=330822) for more details.\n - If you want to allow access to all origins, include `*` as a single item in the `allowedOrigins` array. Note that **this is not recommended practice for production search services.** However, it may be useful for development or debugging purposes.\n- `maxAgeInSeconds` (optional): Browsers use this value to determine the duration (in seconds) to cache CORS preflight responses. This must be a non-negative integer. The larger this value is, the better performance will be, but the longer it will take for CORS policy changes to take effect. If it is not set, a default duration of 5 minutes will be used.\n\n<a name=\"CreateUpdateIndexExample\"></a>\n**Request Body Example**\n\n    {\n      \"name\": \"hotels\",  \n      \"fields\": [\n        {\"name\": \"hotelId\", \"type\": \"Edm.String\", \"key\": true, \"searchable\": false},\n        {\"name\": \"baseRate\", \"type\": \"Edm.Double\"},\n        {\"name\": \"description\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false},\n        {\"name\": \"description_fr\", \"type\": \"Edm.String\", \"filterable\": false, \"sortable\": false, \"facetable\": false, \"analyzer\"=\"fr.lucene\"},\n        {\"name\": \"hotelName\", \"type\": \"Edm.String\"},\n        {\"name\": \"category\", \"type\": \"Edm.String\"},\n        {\"name\": \"tags\", \"type\": \"Collection(Edm.String)\"},\n        {\"name\": \"parkingIncluded\", \"type\": \"Edm.Boolean\"},\n        {\"name\": \"smokingAllowed\", \"type\": \"Edm.Boolean\"},\n        {\"name\": \"lastRenovationDate\", \"type\": \"Edm.DateTimeOffset\"},\n        {\"name\": \"rating\", \"type\": \"Edm.Int32\"},\n        {\"name\": \"location\", \"type\": \"Edm.GeographyPoint\"}\n      ],\n      \"suggesters\": [\n        {\n          \"name\": \"sg\",\n          \"searchMode\": \"analyzingInfixMatching\",\n          \"sourceFields\": [\"hotelName\"]\n        }\n      ]\n    }\n\n**Response**\n\nFor a successful request: \"201 Created\".\n\nBy default the response body will contain the JSON for the index definition that was created. If the `Prefer` request header is set to `return=minimal`, the response body will be empty and the success status code will be \"204 No Content\" instead of \"201 Created\". This is true regardless of whether PUT or POST was used to create the index.\n\n**Remarks**\n\nCurrently, there is limited support for index schema updates. Any schema updates that would require re-indexing such as changing field types are not currently supported. Although existing fields cannot be changed or deleted, new fields can be added to an existing index at any time. When a new field is added, all existing documents in the index will automatically have a null value for that field. No additional storage space will be consumed until new documents are added to the index.\n\n<a name=\"Suggesters\"></a>\n##Suggesters\n\nThe suggestions feature in Azure Search is a type-ahead or auto-complete query capability, providing a list of potential search terms in response to partial string inputs entered into a search box. You've probably noticed query suggestions when using commercial web search engines: typing \".NET\" in Bing produces a list of terms for \".NET 4.5\", \".NET Framework 3.5\", and so forth. When using the Search service REST API, implementing suggestions in a custom Azure Search application requires the following:\n\n- Enable suggestions by adding a **suggester** construction in your index, giving the name, search mode, and a list of fields for which type-ahead is invoked. For example, if you specify \"cityName\" as a source field, typing a partial search string of \"Sea\" will result in \"Seattle\", \"Seaside\", and \"Seatac\" (all three are actual city names) offered up as query suggestions to the user.\n\n- Invoke suggestions by calling the [Suggestions API](#Suggestions) in your application code. Typically partial search strings are sent to the service while the user is typing a search query, and this API returns a set of suggested phrases.\n\nThis article explains how to configure a **suggester**. You should also review the [Suggestions API](#Suggestions) for details on how a suggester is used.\n\n**Usage**\n\n`Suggesters` are created in the index and work best when used to suggest specific documents rather than loose terms or phrases. The best candidate fields are titles, names, and other relatively short phrases that can identify an item. Less effective are repetitive fields, such as categories and tags, or very long fields such as descriptions or comments fields.\n\nAs part of the index definition, you can add a single suggester to the `suggesters` collection. Properties that define a suggester include the following:\n\n- `name`: The name of the suggester. You use the name of the suggester when calling the `suggest` API.\n- `searchMode`: The strategy used to search for candidate phrases. The only mode currently supported is `analyzingInfixMatching`, which performs flexible matching of phrases at the beginning or in the middle of sentences.\n- `sourceFields`: A list of one or more fields that are the source of the content for suggestions. Only fields of type `Edm.String` and `Collection(Edm.String)` may be sources for suggestions. Only fields that don't have a custom language analyzer set can be used.\n\n**Suggester Example**\n\nA suggester is part of the index. Only one suggester can exist in the `suggesters` collection in the current version, alongside the fields collection and `scoringProfiles`.\n\n        {\n          \"name\": \"hotels\",\n          \"fields\": [\n             . . .\n           ],\n          \"suggesters\": [\n            {\n            \"name\": \"sg\",\n            \"searchMode\": \"analyzingInfixMatching\",\n            \"sourceFields: [\"hotelName\", \"category\"]\n            }\n          ],\n          \"scoringProfiles\": [\n             . . .\n          ]\n        }\n\n> [AZURE.NOTE]  If you used the public preview version of Azure Search, `suggesters` replaces an older boolean property (`\"suggestions\": false`) that only supported prefix suggestions for short strings (3-25 characters). Its replacement, `suggesters`, supports infix matching that finds matching terms at the beginning or in the middle of field content, with better tolerance for mistakes in search strings. Starting with the generally available release, this is now the only implementation of the suggestions API. The older `suggestions` property that was introduced in `api-version=2014-07-31-Preview` continues to work in that version, but is not operational in the `2015-02-28` or later versions of Azure Search.\n\n<a name=\"UpdateIndex\"></a>\n## Update Index\n\nYou can update an existing index within Azure Search using an HTTP PUT request. Updates can include adding new fields to the existing schema, modifying CORS options, and modifying scoring profiles. See [Add scoring Profiles](https://msdn.microsoft.com/library/azure/dn798928.aspx) for more information. You specify the name of the index to update on the request URI:\n\n    PUT https://[search service url]/indexes/[index name]?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin key]\n\n**Important:** Support for index schema updates is limited to operations that don't require rebuilding the search index. Any schema updates that would require re-indexing, such as changing field types, are not currently supported. New fields can be added at any time, although existing fields cannot be changed or deleted. The same applies to `suggesters`. New fields may be added to a suggester at the time the fields are added, but fields cannot be removed from `suggesters` and existing fields cannot be added to `suggesters`.\n\nWhen adding a new field to an index, all existing documents in the index will automatically have a null value for that field. No additional storage space will be consumed until new documents are added to the index.\n\n**Request**\n\nHTTPS is required for all service requests. The **Update Index** request is constructed using HTTP PUT. With PUT, the index name is part of the URL. If the index doesn't exist, it is created. If the index already exists, it is updated to the new definition.\n\nThe index name must be lower case, start with a letter or number, have no slashes or dots, and be less than 128 characters. After starting the index name with a letter or number, the rest of the name can include any letter, number and dashes, as long as the dashes are not consecutive.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `Content-Type`: Required. Set this to `application/json`\n- `api-key`: Required. The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service. The **Update Index** request must include an `api-key` header set to your admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body Syntax**\n\nWhen updating an existing index, the body must include the original schema definition, plus the new fields you are adding, as well as the modified scoring profiles, suggesters and CORS options, if any. If you are not modifying the scoring profiles and CORS options, you must include the originals from when the index was created. In general the best pattern to use for updates is to retrieve the index definition with a GET, modify it, then update it with PUT.\n\nThe schema syntax used to create an index is reproduced here for convenience. See [Create Index](#CreateIndex) for more details.\n\n    {\n      \"name\": (optional) \"name_of_index\",\n      \"fields\": [\n        {\n          \"name\": \"name_of_field\",\n          \"type\": \"Edm.String | Collection(Edm.String) | Edm.Int32 | Edm.Int64 | Edm.Double | Edm.Boolean | Edm.DateTimeOffset | Edm.GeographyPoint\",\n          \"searchable\": true (default where applicable) | false (only Edm.String and Collection(Edm.String) fields can be searchable),\n          \"filterable\": true (default) | false,\n          \"sortable\": true (default where applicable) | false (Collection(Edm.String) fields cannot be sortable),\n          \"facetable\": true (default where applicable) | false (Edm.GeographyPoint fields cannot be facetable),\n          \"key\": true | false (default, only Edm.String fields can be keys),\n          \"retrievable\": true (default) | false,\n          \"analyzer\": \"name of text analyzer\"\n        }\n      ],\n      \"suggesters\": [\n        {\n          \"name\": \"name of suggester\",\n          \"searchMode\": \"analyzingInfixMatching\" (other modes may be added in the future),\n          \"sourceFields\": [\"field1\", \"field2\", ...]\n        }\n      ],\n      \"scoringProfiles\": [\n        {\n          \"name\": \"name of scoring profile\",\n          \"text\": (optional, only applies to searchable fields) {\n            \"weights\": {\n              \"searchable_field_name\": relative_weight_value (positive numbers),\n              ...\n            }\n          },\n          \"functions\": (optional) [\n            {\n              \"type\": \"magnitude | freshness | distance | tag\",\n              \"boost\": # (positive number used as multiplier for raw score != 1),\n              \"fieldName\": \"...\",\n              \"interpolation\": \"constant | linear (default) | quadratic | logarithmic\",\n              \"magnitude\": {\n                \"boostingRangeStart\": #,\n                \"boostingRangeEnd\": #,\n                \"constantBoostBeyondRange\": true | false (default)\n              },\n              \"freshness\": {\n                \"boostingDuration\": \"...\" (value representing timespan leading to now over which boosting occurs)\n              },\n              \"distance\": {\n                \"referencePointParameter\": \"...\", (parameter to be passed in queries to use as reference location, see \"scoringParameter\" for syntax details)\n                \"boostingDistance\": # (the distance in kilometers from the reference location where the boosting range ends)\n              },\n              \"tag\": {\n                \"tagsParameter\": \"...\" (parameter to be passed in queries to specify list of tags to compare against target field, see \"scoringParameter\" for syntax details)\n              }\n            }\n          ],\n          \"functionAggregation\": (optional, applies only when functions are specified)\n            \"sum (default) | average | minimum | maximum | firstMatching\"\n        }\n      ],\n      \"defaultScoringProfile\": (optional) \"...\",\n      \"corsOptions\": (optional) {\n        \"allowedOrigins\": [\"*\"] | [\"origin_1\", \"origin_2\", ...],\n        \"maxAgeInSeconds\": (optional) max_age_in_seconds (non-negative integer)\n      }\n    }\n\n\n**Response**\n\nFor a successful request: \"204 No Content\".\n\nBy default the response body will be empty. However, if the `Prefer` request header is set to `return=representation`, the response body will contain the JSON for the index definition that was updated. In this case, the success status code will be \"200 OK\".\n\n<a name=\"ListIndexes\"></a>\n## List Indexes\n\nThe **List Indexes** operation returns a list of the indexes currently in your Azure Search service.\n\n    GET https://[service name].search.windows.net/indexes?api-version=[api-version]\n    api-key: [admin key]\n\n**Request**\n\nHTTPS is required for all service requests. The **List Indexes** request can be constructed using the GET method.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: Required. The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service. The **List Indexes** request must include an `api-key` set to an admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\nHere is an example response body:\n\n    {\n      \"value\": [\n        {\n          \"name\": \"Books\",\n          \"fields\": [\n            {\"name\": \"ISBN\", ...},\n            ...\n          ]\n        },\n        {\n          \"name\": \"Games\",\n          ...\n        },\n        ...\n      ]\n    }\n\nNote that you can filter the response down to just the properties you're interested in. For example, if you want only a list of index names, use the OData `$select` query option:\n\n    GET /indexes?api-version=2015-02-28-Preview&$select=name\n\nIn this case, the response from the above example would appear as follows:\n\n    {\n      \"value\": [\n        {\"name\": \"Books\"},\n        {\"name\": \"Games\"},\n        ...\n      ]\n    }\n\nThis is a useful technique to save bandwidth if you have a lot of indexes in your Search service.\n\n<a name=\"GetIndex\"></a>\n## Get Index\n\nThe **Get Index** operation gets the index definition from Azure Search.\n\n    GET https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]\n    api-key: [admin key]\n\n**Request**\n\nHTTPS is required for service requests. The **Get Index** request can be constructed using the GET method.\n\nThe [index name] in the request URI specifies which index to return from the indexes collection.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service. The **Get Index** request must include an `api-key` set to an admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\nSee the example JSON in [Creating and Updating an Index](#CreateUpdateIndexExample) for an example of the response payload.\n\n<a name=\"DeleteIndex\"></a>\n## Delete Index\n\nThe **Delete Index** operation removes an index and associated documents from your Azure Search service. You can get the index name from the service dashboard in the Azure portal, or from the API. See [List Indexes](#ListIndexes) for details.\n\n    DELETE https://[service name].search.windows.net/indexes/[index name]?api-version=[api-version]\n    api-key: [admin key]\n\n**Request**\n\nHTTPS is required for service requests. The **Delete Index** request can be constructed using the DELETE method.\n\nThe [index name] in the request URI specifies which index to delete from the indexes collection.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: Required. The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service URL. The **Delete Index** request must include an `api-key` header set to your admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 204 No Content is returned for a successful response.\n\n<a name=\"GetIndexStats\"></a>\n## Get Index Statistics\n\nThe **Get Index Statistics** operation returns from Azure Search a document count for the current index, plus storage usage.\n\n    GET https://[service name].search.windows.net/indexes/[index name]/stats?api-version=[api-version]\n    api-key: [admin key]\n\n**Request**\n\nHTTPS is required for all services requests. The **Get Index Statistics** request can be constructed using the GET method.\n\nThe [index name] in the request URI tells the service to return index statistics for the specified index.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service. The **Get Index Statistics** request must include an `api-key` set to an admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\nThe response body is in the following format:\n\n    {\n      \"documentCount\": number,\n      \"storageSize\": number (size of the index in bytes)\n    }\n\n________________________________________\n<a name=\"DocOps\"></a>\n## Document Operations\n\nIn Azure Search, an index is stored in the cloud and populated using JSON documents that you upload to the service. All the documents that you upload comprise the corpus of your search data. Documents contain fields, some of which are tokenized into search terms as they are uploaded. The `/docs` URL segment in the Azure Search API represents the collection of documents in an index. All operations performed on the collection such as uploading, merging, deleting, or querying documents take place in the context of a single index, so the URLs for these operations will always start with `/indexes/[index name]/docs` for a given index name.\n\nYour application code must either generate JSON documents to upload to Azure Search or you can use an [indexer](https://msdn.microsoft.com/library/dn946891.aspx) to load documents if the data source is either Azure SQL Database or DocumentDB. Typically, indexes are populated from a single dataset that you provide.\n\nYou should plan on having one document for each item that you want to search. A movie rental application might have one document per movie, a storefront application might have one document per SKU, an online courseware application might have one document per course, a research firm might have one document for each academic paper in their repository, and so on.\n\nDocuments consist of one or more fields. Fields can contain text that is tokenized by Azure Search into search terms, as well as non-tokenized or non-text values that can be used in filters or scoring profiles. The names, data types, and search features supported for each field are determined by the index schema. One of the fields in each index schema must be designated as an ID, and each document must have a value for the ID field that uniquely identifies that document in the index. All other document fields are optional and will default to a null value if left unspecified. Note that null values do not take up space in the search index.\n\nBefore you can upload documents, you must have already created the index on the service. See [Create Index](#CreateIndex) for details about this first step.\n\n<a name=\"AddOrUpdateDocuments\"></a>\n## Add, Update, or Delete Documents\n\nYou can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST. For large numbers of updates, batching of documents (up to 1000 documents per batch or about 16 MB per batch) is recommended.\n\n    POST https://[service name].search.windows.net/indexes/[index name]/docs/index?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin key]\n\n**Request**\n\nHTTPS is required for all service requests. You can upload, merge, merge-or-upload or delete documents from a specified index using HTTP POST.\n\nThe request URI includes [index name], specifying which index to post documents. You can only post documents to one index at a time.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `Content-Type`: Required. Set this to `application/json`\n- `api-key`: Required. The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service. The **Add Documents** request must include an `api-key` header set to your admin key (as opposed to a query key).\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](.search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nThe body of the request contains one or more documents to be indexed. Documents are identified by a unique key. Each document is associated with an action: upload, merge, mergeOrUpload or delete. Upload requests must include the document data as a set of key/value pairs.\n\n    {\n      \"value\": [\n        {\n          \"@search.action\": \"upload (default) | merge | mergeOrUpload | delete\",\n          \"key_field_name\": \"unique_key_of_document\", (key/value pair for key field from index schema)\n          \"field_name\": field_value (key/value pairs matching index schema)\n            ...\n        },\n        ...\n      ]\n    }\n\n**Document Actions**\n\n- `upload`: An upload action is similar to an \"upsert\" where the document will be inserted if it is new and updated/replaced if it exists. Note that all fields are replaced in the update case.\n- `merge`: Merge updates an existing document with the specified fields. If the document doesn't exist, the merge will fail. Any field you specify in a merge will replace the existing field in the document. This includes fields of type `Collection(Edm.String)`. For example, if the document contains a field \"tags\" with value `[\"budget\"]` and you execute a merge with value `[\"economy\", \"pool\"]` for \"tags\", the final value of the \"tags\" field will be `[\"economy\", \"pool\"]`. It will **not** be `[\"budget\", \"economy\", \"pool\"]`.\n- `mergeOrUpload`: behaves like `merge` if a document with the given key already exists in the index. If the document does not exist it behaves like `upload` with a new document.\n- `delete`: Delete removes the specified document from the index. Note that you can specify only the key field value in a `delete` operation. Attempting to specify other fields will result in an HTTP 400 error. If you want to remove an individual field from a document, use `merge` instead and simply set the field explicitly to `null`.\n\n**Response**\n\nStatus code: 200 OK is returned for a successful response, meaning that all items have been successfully indexed (as indicated by the 'status' field set to true for all items):\n\n    {\n      \"value\": [\n        {\n          \"key\": \"unique_key_of_document\",\n          \"status\": true,\n          \"errorMessage\": null\n        }\n      ]\n    }  \n\nStatus code: 207 is returned when at least one item was not successfully indexed (as indicated by the 'status' field set to false for items that have not been indexed):\n\n    {\n      \"value\": [\n        {\n          \"key\": \"unique_key_of_document\",\n          \"status\": false,\n          \"errorMessage\": \"The search service is too busy to process this document. Please try again later.\"\n        }\n      ]\n    }  \n\nThe `errorMessage` property will indicate the reason for the indexing error if possible.\n\n**Note**: If your client code frequently encounters a 207 response, one possible reason is that the system is under load. You can confirm this by checking the `errorMessage` property. If this is the case, we recommend ***throttling indexing requests***. Otherwise, if indexing traffic doesn't subside, the system could start rejecting all requests with 503 errors.\n\nStatus code: 429 indicates that you have exceeded your quota on the number of documents per index. You must either create a new index or upgrade for higher capacity limits.\n\n**Example:**\n\n    {\n      \"value\": [\n        {\n          \"@search.action\": \"upload\",\n          \"hotelId\": \"1\",\n          \"baseRate\": 199.0,\n          \"description\": \"Best hotel in town\",\n          \"description_fr\": \"Meilleur hôtel en ville\",\n          \"hotelName\": \"Fancy Stay\",\n          \"category\": \"Luxury\",\n          \"tags\": [\"pool\", \"view\", \"wifi\", \"concierge\"],\n          \"parkingIncluded\": false,\n          \"smokingAllowed\": false,\n          \"lastRenovationDate\": \"2010-06-27T00:00:00Z\",\n          \"rating\": 5,\n          \"location\": { \"type\": \"Point\", \"coordinates\": [-122.131577, 47.678581] }\n        },\n        {\n          \"@search.action\": \"upload\",\n          \"hotelId\": \"2\",\n          \"baseRate\": 79.99,\n          \"description\": \"Cheapest hotel in town\",\n          \"description_fr\": \"Hôtel le moins cher en ville\",\n          \"hotelName\": \"Roach Motel\",\n          \"category\": \"Budget\",\n          \"tags\": [\"motel\", \"budget\"],\n          \"parkingIncluded\": true,\n          \"smokingAllowed\": true,\n          \"lastRenovationDate\": \"1982-04-28T00:00:00Z\",\n          \"rating\": 1,\n          \"location\": { \"type\": \"Point\", \"coordinates\": [-122.131577, 49.678581] }\n        },\n        {\n          \"@search.action\": \"merge\",\n          \"hotelId\": \"3\",\n          \"baseRate\": 279.99,\n          \"description\": \"Surprisingly expensive\",\n          \"lastRenovationDate\": null\n        },\n        {\n          \"@search.action\": \"delete\",\n          \"hotelId\": \"4\"\n        }\n      ]\n    }\n________________________________________\n<a name=\"SearchDocs\"></a>\n## Search Documents\n\nA **Search** operation is issued as a GET or POST request and specifies parameters that give the criteria for selecting matching documents.\n\n    GET https://[service name].search.windows.net/indexes/[index name]/docs?[query parameters]\n    api-key: [admin or query key]\n\n    POST https://[service name].search.windows.net/indexes/[index name]/docs/search?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin or query key]\n\n**When to use POST instead of GET**\n\nWhen you use HTTP GET to call the **Search** API, you need to be aware that the length of the request URL cannot exceed 8 KB. This is usually enough for most applications. However, some applications produce very large queries, specifically OData filter expressions. For these applications, using HTTP POST is a better choice. The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.\n\n**Request**\n\nHTTPS is required for service requests. The **Search** request can be constructed using the GET or POST methods.\n\nThe request URI specifies which index to query, for all documents that match the parameters. Parameters are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.\n\nAs a best practice when creating GET requests, remember to [URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx) specific query parameters when calling the REST API directly. For **Search** operations, this includes:\n\n- `$filter`\n- `facet`\n- `highlightPreTag`\n- `highlightPostTag`\n- `search`\n- `moreLikeThis`\n\nURL encoding is only recommended on the above query parameters. If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.\n\nAlso, URL encoding is only necessary when calling the REST API directly using GET. No URL encoding is necessary when calling **Search** using POST, or when using the [.NET client library](https://msdn.microsoft.com/library/dn951165.aspx), which handles URL encoding for you.\n\n<a name=\"SearchQueryParameters\"></a>\n**Query Parameters**\n\n**Search** accepts several parameters that provide query criteria and also specify search behavior. You provide these parameters in the URL query string when calling **Search** via GET, and as JSON properties in the request body when calling **Search** via POST. The syntax for some parameters is slightly different between GET and POST. These differences are noted as applicable below:\n\n`search=[string]` (optional) - The text to search for. All `searchable` fields are searched by default unless `searchFields` is specified. When searching `searchable` fields, the search text itself is tokenized, so multiple terms can be separated by white space (for example: `search=hello world`). To match any term, use `*` (this can be useful for boolean filter queries). Omitting this parameter has the same effect as setting it to `*`. See [Simple Query Syntax](https://msdn.microsoft.com/library/dn798920.aspx) for specifics on the search syntax.\n\n  - **Note**: The results can sometimes be surprising when querying over `searchable` fields. The tokenizer includes logic to handle cases common to English text like apostrophes, commas in numbers, etc. For example, `search=123,456` will match a single term 123,456 rather than the individual terms 123 and 456, since commas are used as thousand-separators for large numbers in English. For this reason, we recommend using white space rather than punctuation to separate terms in the `search` parameter.\n\n`searchMode=any|all` (optional, defaults to `any`) - whether any or all of the search terms must be matched in order to count the document as a match.\n\n`searchFields=[string]` (optional) - The list of comma-separated field names to search for the specified text. Target fields must be marked as `searchable`.\n\n`moreLikeThis=[key]` (optional) **Important:** This feature is only available in `2015-02-28-Preview`. This option cannot be used in a query that contains the text search parameter, `search=[string]`. The `moreLikeThis` parameter finds documents that are similar to the document specified by the document key. When a search request is made with `moreLikeThis`, a list of search terms is generated based on the frequency and rarity of terms in the source document. Those terms are then used to make the request. By default, the contents of all `searchable` fields are considered unless `searchFields` is used to restrict which fields are searched.  \n\n`$skip=#` (optional) - the number of search results to skip; Cannot be greater than 100,000. If you need to scan documents in sequence but cannot use `$skip` due to this limitation, consider using `$orderby` on a totally-ordered key and `$filter` with a range query instead.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `skip` instead of `$skip`.\n\n`$top=#` (optional) - the number of search results to retrieve. This can be used in conjunction with `$skip` to implement client-side paging of search results.\n\n> [AZURE.NOTE] Azure Search uses ***server-side paging*** to prevent queries from retrieving too many documents at once. The default page size is 50, while the maximum page size is 1000. This means that by default **Search** returns at most 50 results if you don't specify `$top`. If there are more than 50 results, the response includes information to retrieve the next page of at most 50 results (see `@odata.nextLink` and `@search.nextPageParameters` in [the example below](#SearchResponse)). Similarly, if you specify a value greater than 1000 for `$top` and there are more than 1000 results, only the first 1000 results are returned, along with information to retrieve the next page of at most 1000 results.  \n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `top` instead of `$top`.\n\n`$count=true|false` (optional, defaults to `false`) - Specifies whether to fetch the total count of results. Setting this value to `true` may have a performance impact. Note that the count returned is an approximation.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `count` instead of `$count`.\n\n`$orderby=[string]` (optional) - A list of comma-separated expressions to sort the results by. Each expression can be either a field name or a call to the `geo.distance()` function. Each expression can be followed by `asc` to indicated ascending, and `desc` to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no `$orderby` is specified, the default sort order is descending by document match score. There is a limit of 32 clauses for `$orderby`.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `orderby` instead of `$orderby`.\n\n`$select=[string]` (optional) - A list of comma-separated fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. You can also explicitly request all fields by setting this parameter to `*`.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `select` instead of `$select`.\n\n`facet=[string]` (zero or more) - A field to facet by. Optionally the string may contain parameters to customize the faceting expressed as comma-separated `name:value` pairs. Valid parameters are:\n\n- `count` (max number of facet terms; default is 10). There is no maximum, but higher values incur a corresponding performance penalty, especially if the faceted field contains a large number of unique terms.\n  - For example: `facet=category,count:5` gets the top five categories in facet results.  \n  - **Note**: If the `count` parameter is less than the number of unique terms, the results may not be accurate. This is due to the way faceting queries are distributed across shards. Increasing `count` generally increases the accuracy of the term counts, but at a performance cost.\n- `sort` (one of `count` to sort *descending* by count, `-count` to sort *ascending* by count, `value` to sort *ascending* by value, or `-value` to sort *descending* by value)\n  - For example: `facet=category,count:3,sort:count` gets the top three categories in facet results in descending order by the number of documents with each city name. For example, if the top three categories are Budget, Motel, and Luxury, and Budget has 5 hits, Motel has 6, and Luxury has 4, then the buckets will be in the order Motel, Budget, Luxury.\n  - For example: `facet=rating,sort:-value` produces buckets for all possible ratings, in descending order by value. For example, if the ratings are from 1 to 5, the buckets will be ordered 5, 4, 3, 2, 1, irrespective of how many documents match each rating.\n- `values` (pipe-delimited numeric or `Edm.DateTimeOffset` values specifying a dynamic set of facet entry values)\n  - For example: `facet=baseRate,values:10|20` produces three buckets: One for base rate 0 up to but not including 10, one for 10 up to but not including 20, and one for 20 or higher.\n  - For example: `facet=lastRenovationDate,values:2010-02-01T00:00:00Z` produces two buckets: One for hotels renovated before February 2010, and one for hotels renovated February 1st, 2010 or later.\n- `interval` (integer interval greater than 0 for numbers, or `minute`, `hour`, `day`, `week`, `month`, `quarter`, `year` for date time values)\n  - For example: `facet=baseRate,interval:100` produces buckets based on base rate ranges of size 100. For example, if base rates are all between $60 and $600, there will be buckets for 0-100, 100-200, 200-300, 300-400, 400-500, and 500-600.\n  - For example: `facet=lastRenovationDate,interval:year` produces one bucket for each year when hotels were renovated.\n- **Note**: `count` and `sort` can be combined in the same facet specification, but they cannot be combined with `interval` or `values`, and `interval` and `values` cannot be combined together.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `facets` instead of `facet`. Also, you specify it as a JSON array of strings where each string is a separate facet expression.\n\n`$filter=[string]` (optional) - A structured search expression in standard OData syntax. See [OData Expression Syntax](#ODataExpressionSyntax) for details on the subset of the OData expression grammar that Azure Search supports.\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `filter` instead of `$filter`.\n\n`highlight=[string]` (optional) - A set of comma-separated field names used for hit highlights. Only `searchable` fields can be used for hit highlighting.\n\n`highlightPreTag=[string]` (optional, defaults to `<em>`) - A string tag that prepends to hit highlights. Must be set with `highlightPostTag`.\n\n> [AZURE.NOTE] When calling **Search** using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).\n\n`highlightPostTag=[string]` (optional, defaults to `</em>`) - a string tag that appends to hit highlights. Must be set with `highlightPreTag`.\n\n> [AZURE.NOTE] When calling **Search** using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).\n\n`scoringProfile=[string]` (optional) - The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.\n\n`scoringParameter=[string]` (zero or more) - Indicates the value for each parameter defined in a scoring function (for example, `referencePointParameter`) using the format name:value. For example, if the scoring profile defines a function with a parameter called \"mylocation\" the query string option would be &scoringParameter=mylocation:-122.2,44.8\n\n> [AZURE.NOTE] When calling **Search** using POST, this parameter is named `scoringParameters` instead of `scoringParameter`. Also, you specify it as a JSON array of strings where each string is a separate name:value pair.\n\n`minimumCoverage` (optional, defaults to 100) - a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. By default, the entire index must be available or `Search` will return HTTP status code 503. If you set `minimumCoverage` and `Search` succeeds, it will return HTTP 200 and include a `@search.coverage` value in the response indicating the percentage of the index that was included in the query.\n\n> [AZURE.NOTE] Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica. However, not all matching documents are guaranteed to be present in the search results. If search recall is more important to your application than availability, then it's best to leave `minimumCoverage` at its default value of 100.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\nNote: For this operation, the `api-version` is specified as a query parameter in the URL regardless of whether you call **Search** with GET or POST.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service URL. The **Search** request can specify either an admin key or query key for `api-key`.\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nFor GET: None.\n\nFor POST:\n\n    {\n      \"count\": true | false (default),\n      \"facets\": [ \"facet_expression_1\", \"facet_expression_2\", ... ],\n      \"filter\": \"odata_filter_expression\",\n      \"highlight\": \"highlight_field_1, highlight_field_2, ...\",\n      \"highlightPreTag\": \"pre_tag\",\n      \"highlightPostTag\": \"post_tag\",\n      \"minimumCoverage\": # (% of index that must be covered to declare query successful; default 100),\n      \"moreLikeThis\": \"document_key\" (mutually exclusive with \"search\" parameter),\n      \"orderby\": \"orderby_expression\",\n      \"scoringParameters\": [ \"scoring_parameter_1\", \"scoring_parameter_2\", ... ],\n      \"scoringProfile\": \"scoring_profile_name\",\n      \"search\": \"simple_query_expression\",\n      \"searchFields\": \"field_name_1, field_name_2, ...\",\n      \"searchMode\": \"any\" (default) | \"all\",\n      \"select\": \"field_name_1, field_name_2, ...\",\n      \"skip\": # (default 0),\n      \"top\": #\n    }\n\n<a name=\"SearchResponse\"></a>\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\n    {\n      \"@odata.count\": # (if $count=true was provided in the query),\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"@search.facets\": { (if faceting was specified in the query)\n        \"facet_field\": [\n          {\n            \"value\": facet_entry_value (for non-range facets),\n            \"from\": facet_entry_value (for range facets),\n            \"to\": facet_entry_value (for range facets),\n            \"count\": number_of_documents\n          }\n        ],\n        ...\n      },\n      \"@search.nextPageParameters\": { (request body to fetch the next page of results if result count exceeds page size and Search was called with POST)\n        \"count\": ... (value from request body if present),\n        \"facets\": ... (value from request body if present),\n        \"filter\": ... (value from request body if present),\n        \"highlight\": ... (value from request body if present),\n        \"highlightPreTag\": ... (value from request body if present),\n        \"highlightPostTag\": ... (value from request body if present),\n        \"minimumCoverage\": ... (value from request body if present),\n        \"moreLikeThis\": ... (value from request body if present),\n        \"orderby\": ... (value from request body if present),\n        \"scoringParameters\": ... (value from request body if present),\n        \"scoringProfile\": ... (value from request body if present),\n        \"search\": ... (value from request body if present),\n        \"searchFields\": ... (value from request body if present),\n        \"searchMode\": ... (value from request body if present),\n        \"select\": ... (value from request body if present),\n        \"skip\": ... (page size plus value from request body if present),\n        \"top\": ... (value from request body if present minus page size),\n      },\n      \"value\": [\n        {\n          \"@search.score\": document_score (if a text query was provided),\n          \"@search.highlights\": {\n            field_name: [ subset of text, ... ],\n            ...\n          },\n          key_field_name: document_key,\n          field_name: field_value (retrievable fields or specified projection),\n          ...\n        },\n        ...\n      ],\n      \"@odata.nextLink\": (URL to fetch the next page of results if result count exceeds page size; Applies to both GET and POST)\n    }\n\n**Examples:**\n\nYou can find additional examples on the [OData Expression Syntax for Azure Search](https://msdn.microsoft.com/library/azure/dn798921.aspx) page.\n\n1)  Search the Index sorted descending by date.\n\n    GET /indexes/hotels/docs?search=*&$orderby=lastRenovationDate desc&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"*\",\n      \"orderby\": [ \"lastRenovationDate desc\" ]\n    }\n\n2)  In a faceted search, search the index and retrieve facets for categories, rating, tags, as well as items with baseRate in specific ranges:\n\n    GET /indexes/hotels/docs?search=test&facet=category&facet=rating&facet=tags&facet=baseRate,values:80|150|220&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"test\",\n      \"facets\": [ \"category\", \"rating\", \"tags\", \"baseRate,values:80|150|220\" ]\n    }\n\n3)  Using a filter, narrow down the previous faceted query results after the user clicks on rating 3 and category \"Motel\":\n\n    GET /indexes/hotels/docs?search=test&facet=tags&facet=baseRate,values:80|150|220&$filter=rating eq 3 and category eq 'Motel'&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"test\",\n      \"facets\": [ \"tags\", \"baseRate,values:80|150|220\" ],\n      \"filter\": \"rating eq 3 and category eq 'Motel'\"\n    }\n\n4) In a faceted search, set an upper limit on unique terms returned in a query. The default is 10, but you can increase or decrease this value using the `count` parameter on the `facet` attribute:\n\n    GET /indexes/hotels/docs?search=test&facet=city,count:5&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"test\",\n      \"facets\": [ \"city,count:5\" ]\n    }\n\n5)  Search the Index within specific fields; For example, a language-specific field:\n\n    GET /indexes/hotels/docs?search=hôtel&searchFields=description_fr&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"hôtel\",\n      \"searchFields\": [ \"description_fr\" ]\n    }\n\n6) Search the Index across multiple fields. For example, you can store and query searchable fields in multiple languages, all within the same index.  If English and French descriptions co-exist in the same document, you can return any or all in the query results:\n\n    GET /indexes/hotels/docs?search=hotel&searchFields=description,description_fr&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"hotel\",\n      \"searchFields\": [ \"description\", \"description_fr\" ]\n    }\n\nNote that you can only query one index at a time. Do not create multiple indexes for each language unless you plan to query one at a time.\n\n7)  Paging - Get the 1st page of items (page size is 10):\n\n    GET /indexes/hotels/docs?search=*&$skip=0&$top=10&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"*\",\n      \"skip\": 0,\n      \"top\": 10\n    }\n\n8)  Paging - Get the 2nd page of items (page size is 10):\n\n    GET /indexes/hotels/docs?search=*&$skip=10&$top=10&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"*\",\n      \"skip\": 10,\n      \"top\": 10\n    }\n\n9)  Retrieve a specific set of fields:\n\n    GET /indexes/hotels/docs?search=*&$select=hotelName,description&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"*\",\n      \"select\": [ \"hotelName\", \"description\" ]\n    }\n\n10)  Retrieve documents matching a specific filter expression\n\n    GET /indexes/hotels/docs?$filter=(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"filter\": \"(baseRate ge 60 and baseRate lt 300) or hotelName eq 'Fancy Stay'\"\n    }\n\n11) Search the index and return fragments with hit highlights\n\n    GET /indexes/hotels/docs?search=something&highlight=description&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"something\",\n      \"highlight\": \"description\"\n    }\n\n12) Search the index and return documents sorted from closer to farther away from a reference location\n\n    GET /indexes/hotels/docs?search=something&$orderby=geo.distance(location, geography'POINT(-122.12315 47.88121)')&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"something\",\n      \"orderby\": [ \"geo.distance(location, geography'POINT(-122.12315 47.88121)')\" ]\n    }\n\n13) Search the index assuming there's a scoring profile called \"geo\" with two distance scoring functions, one defining a parameter called \"currentLocation\" and one defining a parameter called \"lastLocation\"\n\n    GET /indexes/hotels/docs?search=something&scoringProfile=geo&scoringParameter=currentLocation:-122.123,44.77233&scoringParameter=lastLocation:-121.499,44.2113&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"something\",\n      \"scoringProfile\": \"geo\",\n      \"scoringParameters\": [ \"currentLocation:-122.123,44.77233\", \"lastLocation:-121.499,44.2113\" ]\n    }\n\n14) Find documents in the index using [simple query syntax](https://msdn.microsoft.com/library/dn798920.aspx). This query returns hotels where searchable fields contain the terms \"comfort\" and \"location\" but not \"motel\":\n\n    GET /indexes/hotels/docs?search=comfort +location -motel&searchMode=all&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/search?api-version=2015-02-28-Preview\n    {\n      \"search\": \"comfort +location -motel\",\n      \"searchMode\": \"all\"\n    }\n\nNote the use of `searchMode=all` above. Including this parameter overrides the default of `searchMode=any`, ensuring that `-motel` means \"AND NOT\" instead of \"OR NOT\". Without `searchMode=all`, you get \"OR NOT\" which expands rather than restricts search results, and this can be counter-intuitive to some users.\n\n\n<a name=\"LookupAPI\"></a>\n##Lookup Document\n\nThe **Lookup Document** operation retrieves a document from Azure Search. This is useful when a user clicks on a specific search result, and you want to look up specific details about that document.\n\n    GET https://[service name].search.windows.net/indexes/[index name]/docs/[key]?[query parameters]\n    api-key: [admin or query key]\n\n**Request**\n\nHTTPS is required for service requests. The **Lookup Document** request can be constructed as follows.\n\n    GET /indexes/[index name]/docs/key?[query parameters]\n\nAlternatively, you can use the traditional OData syntax for key lookup:\n\n    GET /indexes('[index name]')/docs('[key]')?[query parameters]\n\nThe request URI includes an [index name] and [key], specifying which document to retrieve from which index. You can only get one document at a time. Use **Search** to get multiple documents in a single request.\n\n**Query Parameters**\n\n`$select=[string]` (optional) - a list of comma-separated fields to retrieve. If unspecified or set to `*`, all fields marked as retrievable in the schema are included in the projection.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\nNote: For this operation, the `api-version` is specified as a query parameter.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service URL. The **Lookup Document** request can specify either an admin key or query key for `api-key`.\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\n    {\n      field_name: field_value (fields matching the default or specified projection)\n    }\n\n**Example**\n\nLookup the document that has key '2'\n\n    GET /indexes/hotels/docs/2?api-version=2015-02-28-Preview\n\nLookup the document that has key '3' using OData syntax:\n\n    GET /indexes('hotels')/docs('3')?api-version=2015-02-28-Preview\n\n<a name=\"CountDocs\"></a>\n##Count Documents\n\nThe **Count Documents** operation retrieves a count of the number of documents in a search index. The `$count` syntax is part of the OData protocol.\n\n    GET https://[service name].search.windows.net/indexes/[index name]/docs/$count?api-version=[api-version]\n    Accept: text/plain\n    api-key: [admin or query key]\n\n**Request**\n\nHTTPS is required for service requests. The **Count Documents** request can be constructed using the GET method.\n\nThe [index name] in the request URI tells the service to return a count of all items in the docs collection of the specified index.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers.\n\n- `Accept`: This value must be set to `text/plain`.\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service URL. The **Count Documents** request can specify either an admin key or query key for `api-key`.\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nNone.\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\nThe response body contains the count value as an integer formatted in plain text.\n\n<a name=\"Suggestions\"></a>\n##Suggestions\n\nThe **Suggestions** operation retrieves suggestions based on partial search input. It's typically used in search boxes to provide type-ahead suggestions as users are entering search terms.\n\nSuggestion requests aim at suggesting target documents, so the suggested text may be repeated if multiple candidate documents match the same search input. You can use `$select` to retrieve other document fields (including the document key) so that you can tell which document is the source for each suggestion.\n\nA **Suggestions** operation is issued as a GET or POST request.\n\n    GET https://[service name].search.windows.net/indexes/[index name]/docs/suggest?[query parameters]\n    api-key: [admin or query key]\n\n    POST https://[service name].search.windows.net/indexes/[index name]/docs/suggest?api-version=[api-version]\n    Content-Type: application/json\n    api-key: [admin or query key]\n\n**When to use POST instead of GET**\n\nWhen you use HTTP GET to call the **Suggestions** API, you need to be aware that the length of the request URL cannot exceed 8 KB. This is usually enough for most applications. However, some applications produce very large queries, specifically OData filter expressions. For these applications, using HTTP POST is a better choice. The request size limit for POST is close to 17 MB, which is plenty of room for even the most complex queries.\n\n**Request**\n\nHTTPS is required for service requests. The **Suggestions** request can be constructed using the GET or POST methods.\n\nThe request URI specifies the name of the index to query. Parameters, such as the partially input search term, are specified on the query string in the case of GET requests, and in the request body in the case of POST requests.\n\nAs a best practice when creating GET requests, remember to [URL-encode](https://msdn.microsoft.com/library/system.uri.escapedatastring.aspx) specific query parameters when calling the REST API directly. For **Suggestions** operations, this includes:\n\n- `$filter`\n- `highlightPreTag`\n- `highlightPostTag`\n- `search`\n\nURL encoding is only recommended on the above query parameters. If you inadvertently URL-encode the entire query string (everything after the ?), requests will break.\n\nAlso, URL encoding is only necessary when calling the REST API directly using GET. No URL encoding is necessary when calling **Suggestions** using POST, or when using the [.NET client library](https://msdn.microsoft.com/library/dn951165.aspx), which handles URL encoding for you.\n\n**Query Parameters**\n\n**Suggestions** accepts several parameters that provide query criteria and also specify search behavior. You provide these parameters in the URL query string when calling **Suggestions** via GET, and as JSON properties in the request body when calling **Suggestions** via POST. The syntax for some parameters is slightly different between GET and POST. These differences are noted as applicable below:\n\n`search=[string]` - the search text to use to suggest queries. Must be at least 1 character, and no more than 100 characters.\n\n`highlightPreTag=[string]` (optional) - a string tag that prepends to search hits. Must be set with `highlightPostTag`.\n\n> [AZURE.NOTE] When calling **Suggestions** using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).\n\n`highlightPostTag=[string]` (optional) - a string tag that appends to search hits. Must be set with `highlightPreTag`.\n\n> [AZURE.NOTE] When calling **Suggestions** using GET, reserved characters in the URL must be percent-encoded (for example, %23 instead of #).\n\n`suggesterName=[string]` - the name of the suggester as specified in the `suggesters` collection that's part of the index definition. A `suggester` determines which fields are scanned for suggested query terms. See [Suggesters](#Suggesters) for details.\n\n`fuzzy=[boolean]` (optional, default = false) - when set to true this API will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.\n\n`searchFields=[string]` (optional) - the list of comma-separated field names to search for the specified search text. Target fields must be enabled for suggestions.\n\n`$top=#` (optional, default = 5) - the number of suggestions to retrieve. Must be a number between 1 and 100.\n\n> [AZURE.NOTE] When calling **Suggestions** using POST, this parameter is named `top` instead of `$top`.\n\n`$filter=[string]` (optional) - an expression that filters the documents considered for suggestions.\n\n> [AZURE.NOTE] When calling **Suggestions** using POST, this parameter is named `filter` instead of `$filter`.\n\n`$orderby=[string]` (optional) - a list of comma-separated expressions to sort the results by. Each expression can be either a field name or a call to the `geo.distance()` function. Each expression can be followed by `asc` to indicated ascending, and `desc` to indicate descending. The default is ascending order. There is a limit of 32 clauses for `$orderby`.\n\n> [AZURE.NOTE] When calling **Suggestions** using POST, this parameter is named `orderby` instead of `$orderby`.\n\n`$select=[string]` (optional) - a list of comma-separated fields to retrieve. If unspecified, only the document key and suggestion text is returned.\n\n> [AZURE.NOTE] When calling **Suggestions** using POST, this parameter is named `select` instead of `$select`.\n\n`minimumCoverage` (optional, defaults to 80) - a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. By default, at least 80% of the index must be available or `Suggest` will return HTTP status code 503. If you set `minimumCoverage` and `Suggest` succeeds, it will return HTTP 200 and include a `@search.coverage` value in the response indicating the percentage of the index that was included in the query.\n\n> [AZURE.NOTE] Setting this parameter to a value lower than 100 can be useful for ensuring search availability even for services with only one replica. However, not all matching suggestions are guaranteed to be present in the results. If recall is more important to your application than availability, then it's best not to lower `minimumCoverage` below its default value of 80.\n\n`api-version=[string]` (required). The preview version is `api-version=2015-02-28-Preview`. See [Search Service Versioning](http://msdn.microsoft.com/library/azure/dn864560.aspx) for details and alternative versions.\n\nNote: For this operation, the `api-version` is specified as a query parameter in the URL regardless of whether you call **Suggestions** with GET or POST.\n\n**Request Headers**\n\nThe following list describes the required and optional request headers\n\n- `api-key`: The `api-key` is used to authenticate the request to your Search service. It is a string value, unique to your service URL. The **Suggestions** request can specify either an admin key or query key as the `api-key`.\n\nYou will also need the service name to construct the request URL. You can get the service name and `api-key` from your service dashboard in the Azure Portal. See [Create an Azure Search service in the portal](search-create-service-portal.md) for page navigation help.\n\n**Request Body**\n\nFor GET: None.\n\nFor POST:\n\n    {\n      \"filter\": \"odata_filter_expression\",\n      \"fuzzy\": true | false (default),\n      \"highlightPreTag\": \"pre_tag\",\n      \"highlightPostTag\": \"post_tag\",\n      \"minimumCoverage\": # (% of index that must be covered to declare query successful; default 80),\n      \"orderby\": \"orderby_expression\",\n      \"search\": \"partial_search_input\",\n      \"searchFields\": \"field_name_1, field_name_2, ...\",\n      \"select\": \"field_name_1, field_name_2, ...\",\n      \"suggesterName\": \"suggester_name\",\n      \"top\": # (default 5)\n    }\n\n**Response**\n\nStatus Code: 200 OK is returned for a successful response.\n\n    {\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"value\": [\n        {\n          \"@search.text\": \"...\",\n          \"<key field>\": \"...\"\n        },\n        ...\n      ]\n    }\n\nIf the projection option is used to retrieve fields they are included in each element of the array:\n\n    {\n      \"@search.coverage\": # (if minimumCoverage was provided in the query),\n      \"value\": [\n        {\n          \"@search.text\": \"...\",\n          \"<key field>\": \"...\"\n          <other projected data fields>\n        },\n        ...\n      ]\n    }\n\n**Example**\n\nRetrieve 5 suggestions where the partial search input is 'lux'\n\n    GET /indexes/hotels/docs/suggest?search=lux&$top=5&suggesterName=sg&api-version=2015-02-28-Preview\n\n    POST /indexes/hotels/docs/suggest?api-version=2015-02-28-Preview\n    {\n      \"search\": \"lux\",\n      \"top\": 5,\n      \"suggesterName\": \"sg\"\n    }\n"
}