{
  "nodes": [
    {
      "content": "Process events from Event Hubs with Storm on HDInsight | Microsoft Azure",
      "pos": [
        26,
        98
      ]
    },
    {
      "content": "Learn how to process Event Hubs data with a C# Storm topology created in Visual Studio using the HDInsight Tools for Visual Studio.",
      "pos": [
        116,
        247
      ]
    },
    {
      "content": "Process events from Azure Event Hubs with Storm on HDInsight (C#)",
      "pos": [
        563,
        628
      ]
    },
    {
      "content": "Azure Event Hubs allows you to process massive amounts of data from websites, apps, and devices.",
      "pos": [
        630,
        726
      ]
    },
    {
      "content": "The Event Hubs spout makes it easy to use Apache Storm on HDInsight to analyze this data in real time.",
      "pos": [
        727,
        829
      ]
    },
    {
      "content": "You can also write data to Event Hubs from Storm by using the Event Hubs bolt.",
      "pos": [
        830,
        908
      ]
    },
    {
      "content": "In this tutorial, you will learn how to use the HDInsight Tools for Visual Studio and the Event Hubs spout and bolt to create two hybrid C#/Java topologies:",
      "pos": [
        910,
        1066
      ]
    },
    {
      "pos": [
        1070,
        1141
      ],
      "content": "<bpt id=\"p1\">**</bpt>EventHubWriter<ept id=\"p1\">**</ept>: Randomly generates data and writes it to Event Hubs"
    },
    {
      "pos": [
        1145,
        1228
      ],
      "content": "<bpt id=\"p1\">**</bpt>EventHubReader<ept id=\"p1\">**</ept>: Reads data from Event Hubs and stores it in Azure Table storage"
    },
    {
      "content": "Prerequisites",
      "pos": [
        1233,
        1246
      ]
    },
    {
      "pos": [
        1250,
        1352
      ],
      "content": "An <ph id=\"ph1\">&lt;a href=\"../hdinsight-storm-getting-started/\" target=\"_blank\"&gt;</ph>Apache Storm on HDInsight cluster<ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1356,
        1455
      ],
      "content": "An <ph id=\"ph1\">&lt;a href=\"../service-bus-event-hubs-csharp-ephcs-getstarted/\" target=\"_blank\"&gt;</ph>Azure Event Hub<ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1459,
        1545
      ],
      "content": "The <ph id=\"ph1\">&lt;a href=\"http://azure.microsoft.com/downloads/\" target=\"_blank\"&gt;</ph>Azure .NET SDK<ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "pos": [
        1549,
        1702
      ],
      "content": "The <ph id=\"ph1\">&lt;a href=\"../hdinsight-hadoop-visual-studio-tools-get-started/\" target=\"_blank\"&gt;</ph>HDInsight Tools for Visual Studio<ph id=\"ph2\">&lt;/a&gt;</ph> (the 2/17/2015 version or later)"
    },
    {
      "content": "Completed project",
      "pos": [
        1707,
        1724
      ]
    },
    {
      "content": "You can download a complete version of the project created in this tutorial from GitHub: <bpt id=\"p1\">[</bpt>eventhub-storm-hybrid<ept id=\"p1\">](https://github.com/Blackmist/eventhub-storm-hybrid)</ept>.",
      "pos": [
        1726,
        1891
      ]
    },
    {
      "content": "However, you still need to provide configuration settings by following the steps in this tutorial.",
      "pos": [
        1892,
        1990
      ]
    },
    {
      "pos": [
        1994,
        2145
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When you use the completed project, you must use the <bpt id=\"p1\">**</bpt>NuGet Package Manager<ept id=\"p1\">**</ept> to restore the packages that are required by this solution."
    },
    {
      "content": "Event Hubs spout and bolt",
      "pos": [
        2150,
        2175
      ]
    },
    {
      "content": "The Event Hubs spout and bolt are Java components that allow you to easily work with Event Hubs from Apache Storm.",
      "pos": [
        2177,
        2291
      ]
    },
    {
      "content": "Although these components are written in Java, the HDInsight Tools for Visual Studio allow you to create hybrid topologies that mix C# and Java components.",
      "pos": [
        2292,
        2447
      ]
    },
    {
      "pos": [
        2449,
        2583
      ],
      "content": "The spout and bolt are distributed as a single Java archive (.jar) file named <bpt id=\"p1\">**</bpt>eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Download the .jar file",
      "pos": [
        2589,
        2611
      ]
    },
    {
      "content": "The most recent version of the <bpt id=\"p1\">**</bpt>eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p1\">**</ept> file is included in the <ph id=\"ph1\">&lt;a href=\"https://github.com/hdinsight/hdinsight-storm-examples\" target=\"_blank\"&gt;</ph>HDInsight Storm examples<ph id=\"ph2\">&lt;/a&gt;</ph> project under the <bpt id=\"p2\">**</bpt>lib<ept id=\"p2\">**</ept> folder.",
      "pos": [
        2613,
        2866
      ]
    },
    {
      "content": "To download the file, use one of the following methods.",
      "pos": [
        2867,
        2922
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The spout and bolt have been submitted for inclusion in the Apache Storm project.",
      "pos": [
        2926,
        3020
      ]
    },
    {
      "content": "For more information, see <ph id=\"ph1\">&lt;a href=\"https://github.com/apache/storm/pull/336/files\"&gt;</ph>STORM-583: Initial check-in for storm-event hubs<ph id=\"ph2\">&lt;/a&gt;</ph> in GitHub.",
      "pos": [
        3021,
        3167
      ]
    },
    {
      "pos": [
        3171,
        3412
      ],
      "content": "<bpt id=\"p1\">**</bpt>Download a ZIP file<ept id=\"p1\">**</ept>: From the <ph id=\"ph1\">&lt;a href=\"https://github.com/hdinsight/hdinsight-storm-examples\" target=\"_blank\"&gt;</ph>HDInsight Storm examples<ph id=\"ph2\">&lt;/a&gt;</ph> site, select <bpt id=\"p2\">**</bpt>Download ZIP<ept id=\"p2\">**</ept> in the right pane to download a .zip file that contains the project."
    },
    {
      "content": "download zip button",
      "pos": [
        3420,
        3439
      ]
    },
    {
      "pos": [
        3518,
        3623
      ],
      "content": "After the file is downloaded, you can extract the archive, and the file will be in the <bpt id=\"p1\">**</bpt>lib<ept id=\"p1\">**</ept> directory."
    },
    {
      "pos": [
        3627,
        3830
      ],
      "content": "<bpt id=\"p1\">**</bpt>Clone the project<ept id=\"p1\">**</ept>: If you have <ph id=\"ph1\">&lt;a href=\"http://git-scm.com/\" target=\"_blank\"&gt;</ph>Git<ph id=\"ph2\">&lt;/a&gt;</ph> installed, use the following command to clone the repository locally, then find the file in the <bpt id=\"p2\">**</bpt>lib<ept id=\"p2\">**</ept> directory."
    },
    {
      "content": "Configure Event Hub",
      "pos": [
        3908,
        3927
      ]
    },
    {
      "content": "Event Hubs is the data source for this example.",
      "pos": [
        3929,
        3976
      ]
    },
    {
      "content": "Use the following steps to create a new Event Hub.",
      "pos": [
        3977,
        4027
      ]
    },
    {
      "pos": [
        4032,
        4159
      ],
      "content": "From the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>, select <bpt id=\"p2\">**</bpt>NEW<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Service Bus<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Event Hub<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>Custom Create<ept id=\"p5\">**</ept>."
    },
    {
      "content": "On the <bpt id=\"p1\">**</bpt>Add a new Event Hub<ept id=\"p1\">**</ept> screen, enter an <bpt id=\"p2\">**</bpt>Event Hub Name<ept id=\"p2\">**</ept>, select the <bpt id=\"p3\">**</bpt>Region<ept id=\"p3\">**</ept> to create the hub in, and create a new namespace or select an existing one.",
      "pos": [
        4164,
        4329
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Arrow<ept id=\"p1\">**</ept> to continue.",
      "pos": [
        4330,
        4362
      ]
    },
    {
      "content": "wizard page 1",
      "pos": [
        4370,
        4383
      ]
    },
    {
      "pos": [
        4460,
        4575
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You should select the same <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> as your Storm on HDInsight server to reduce latency and costs."
    },
    {
      "content": "On the <bpt id=\"p1\">**</bpt>Configure Event Hub<ept id=\"p1\">**</ept> screen, enter the <bpt id=\"p2\">**</bpt>Partition count<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Message Retention<ept id=\"p3\">**</ept> values.",
      "pos": [
        4580,
        4682
      ]
    },
    {
      "content": "For this example, use a partition count of 10 and a message retention of 1.",
      "pos": [
        4683,
        4758
      ]
    },
    {
      "content": "Note the partition count because you will need this value later.",
      "pos": [
        4759,
        4823
      ]
    },
    {
      "content": "wizard page 2",
      "pos": [
        4831,
        4844
      ]
    },
    {
      "pos": [
        4918,
        5056
      ],
      "content": "After the event hub has been created, select the namespace, select <bpt id=\"p1\">**</bpt>Event Hubs<ept id=\"p1\">**</ept>, and then select the event hub that you created earlier."
    },
    {
      "pos": [
        5061,
        5154
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept>, then create two new access policies by using the following information."
    },
    {
      "pos": [
        5160,
        5313
      ],
      "content": "<table>\n <tr><th>Name</th><th>Permissions</th></tr>\n <tr><td>Writer</td><td>Send</td></tr>\n <tr><td>Reader</td><td>Listen</td></tr>\n </table>",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "Name",
          "pos": [
            17,
            21
          ]
        },
        {
          "content": "Permissions",
          "pos": [
            30,
            41
          ]
        },
        {
          "content": "Writer",
          "pos": [
            61,
            67
          ]
        },
        {
          "content": "Send",
          "pos": [
            76,
            80
          ]
        },
        {
          "content": "Reader",
          "pos": [
            100,
            106
          ]
        },
        {
          "content": "Listen",
          "pos": [
            115,
            121
          ]
        }
      ]
    },
    {
      "content": "After You create the permissions, select the <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> icon at the bottom of the page.",
      "pos": [
        5319,
        5404
      ]
    },
    {
      "content": "This creates the shared access policies that will be used to send (writer) and listen (reader) to this Event Hub.",
      "pos": [
        5405,
        5518
      ]
    },
    {
      "content": "policies",
      "pos": [
        5526,
        5534
      ]
    },
    {
      "content": "After you save the policies, use the <bpt id=\"p1\">**</bpt>Shared access key generator<ept id=\"p1\">**</ept> at the bottom of the page to retrieve the key for the <bpt id=\"p2\">**</bpt>writer<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>reader<ept id=\"p3\">**</ept> policies.",
      "pos": [
        5610,
        5768
      ]
    },
    {
      "content": "Save these because they will be used later.",
      "pos": [
        5769,
        5812
      ]
    },
    {
      "content": "Configure Table storage",
      "pos": [
        5817,
        5840
      ]
    },
    {
      "content": "Table storage will be used to hold the values that are read from Event Hubs because you can easily view Table storage from inside Visual Studio through <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>.",
      "pos": [
        5842,
        6014
      ]
    },
    {
      "content": "Use the following steps to create new Table storage:",
      "pos": [
        6015,
        6067
      ]
    },
    {
      "pos": [
        6072,
        6198
      ],
      "content": "From the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>, select <bpt id=\"p2\">**</bpt>NEW<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Data Services<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Storage<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>Quick Create<ept id=\"p5\">**</ept>."
    },
    {
      "content": "quick create storage",
      "pos": [
        6206,
        6226
      ]
    },
    {
      "pos": [
        6309,
        6438
      ],
      "content": "Enter a <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> for the storage account, select a <bpt id=\"p2\">**</bpt>Location<ept id=\"p2\">**</ept>, and then click the <bpt id=\"p3\">**</bpt>check mark<ept id=\"p3\">**</ept> to create the storage account."
    },
    {
      "pos": [
        6446,
        6576
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You should select the same <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> as your Event Hubs and Storm on HDInsight server to reduce latency and costs."
    },
    {
      "content": "When the new storage account is provisioned, select the account and then use the <bpt id=\"p1\">**</bpt>Manage Access Keys<ept id=\"p1\">**</ept> link at the bottom of the page to retrieve the <bpt id=\"p2\">**</bpt>Storage Account Name<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Primary Access Key<ept id=\"p3\">**</ept>.",
      "pos": [
        6581,
        6784
      ]
    },
    {
      "content": "Save this information because it will be used later.",
      "pos": [
        6785,
        6837
      ]
    },
    {
      "content": "access keys",
      "pos": [
        6845,
        6856
      ]
    },
    {
      "content": "Create EventHubWriter",
      "pos": [
        6936,
        6957
      ]
    },
    {
      "content": "In this section, you will create a topology that writes data to Event Hubs by using the Event Hubs bolt.",
      "pos": [
        6959,
        7063
      ]
    },
    {
      "pos": [
        7068,
        7302
      ],
      "content": "If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see <ph id=\"ph1\">&lt;a href=\"../hdinsight-hadoop-visual-studio-tools-get-started/\" target=\"_blank\"&gt;</ph>Get started using HDInsight Tools for Visual Studio<ph id=\"ph2\">&lt;/a&gt;</ph>."
    },
    {
      "pos": [
        7307,
        7374
      ],
      "content": "Open Visual Studio, select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> and then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>."
    },
    {
      "content": "From the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> screen, expand <bpt id=\"p2\">**</bpt>Installed<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Templates<ept id=\"p3\">**</ept>, and select <bpt id=\"p4\">**</bpt>HDInsight<ept id=\"p4\">**</ept>.",
      "pos": [
        7379,
        7475
      ]
    },
    {
      "content": "From the list of templates, select <bpt id=\"p1\">**</bpt>Storm Application<ept id=\"p1\">**</ept>.",
      "pos": [
        7476,
        7533
      ]
    },
    {
      "content": "At the bottom of the screen, enter <bpt id=\"p1\">**</bpt>EventHubWriter<ept id=\"p1\">**</ept> as the name of the application.",
      "pos": [
        7534,
        7619
      ]
    },
    {
      "content": "image",
      "pos": [
        7627,
        7632
      ]
    },
    {
      "content": "After the project is created, you should have the following files:",
      "pos": [
        7712,
        7778
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>: This defines the topology for your project.",
      "pos": [
        7786,
        7845
      ]
    },
    {
      "content": "Note that a default topology that consists of one spout and one bolt is created by default.",
      "pos": [
        7846,
        7937
      ]
    },
    {
      "pos": [
        7945,
        7976
      ],
      "content": "<bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept>: An example spout."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Bolt.cs<ept id=\"p1\">**</ept>: An example bolt.",
      "pos": [
        7984,
        8013
      ]
    },
    {
      "content": "This will be deleted because you will use the Event Hubs bolt to write to Event Hub.",
      "pos": [
        8014,
        8098
      ]
    },
    {
      "content": "Configuration",
      "pos": [
        8104,
        8117
      ]
    },
    {
      "pos": [
        8122,
        8211
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>EventHubWriter<ept id=\"p2\">**</ept>, and then select <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        8216,
        8364
      ],
      "content": "In the project properties, select <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept>, and then select <bpt id=\"p2\">**</bpt>This project does not contain a default settings file. Click here to create one.<ept id=\"p2\">**</ept>"
    },
    {
      "content": "Enter the following settings.",
      "pos": [
        8369,
        8398
      ]
    },
    {
      "content": "Use the information for the Event Hub you created earlier in the <bpt id=\"p1\">**</bpt>Value<ept id=\"p1\">**</ept> column.",
      "pos": [
        8399,
        8481
      ]
    },
    {
      "pos": [
        8487,
        9366
      ],
      "content": "<table>\n <tr><th style=\"text-align:left\">Name</th><th style=\"text-align:left\">Type</th><th style=\"text-align:left\">Scope</th></tr>\n <tr><td style=\"text-align:left\">EventHubPolicyName</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n <tr><td style=\"text-align:left\">EventHubPolicyKey</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n <tr><td style=\"text-align:left\">EventHubNamespace</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n <tr><td style=\"text-align:left\">EventHubName</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n <tr><td style=\"text-align:left\">EventHubPartitionCount</td><td style=\"text-align:left\">int</td><td style=\"text-align:left\">Application</td></tr>\n </table>",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "Name",
          "pos": [
            41,
            45
          ]
        },
        {
          "content": "Type",
          "pos": [
            78,
            82
          ]
        },
        {
          "content": "Scope",
          "pos": [
            115,
            120
          ]
        },
        {
          "content": "EventHubPolicyName",
          "pos": [
            164,
            182
          ]
        },
        {
          "content": "string",
          "pos": [
            215,
            221
          ]
        },
        {
          "content": "Application",
          "pos": [
            254,
            265
          ]
        },
        {
          "content": "EventHubPolicyKey",
          "pos": [
            309,
            326
          ]
        },
        {
          "content": "string",
          "pos": [
            359,
            365
          ]
        },
        {
          "content": "Application",
          "pos": [
            398,
            409
          ]
        },
        {
          "content": "EventHubNamespace",
          "pos": [
            453,
            470
          ]
        },
        {
          "content": "string",
          "pos": [
            503,
            509
          ]
        },
        {
          "content": "Application",
          "pos": [
            542,
            553
          ]
        },
        {
          "content": "EventHubName",
          "pos": [
            597,
            609
          ]
        },
        {
          "content": "string",
          "pos": [
            642,
            648
          ]
        },
        {
          "content": "Application",
          "pos": [
            681,
            692
          ]
        },
        {
          "content": "EventHubPartitionCount",
          "pos": [
            736,
            758
          ]
        },
        {
          "content": "int",
          "pos": [
            791,
            794
          ]
        },
        {
          "content": "Application",
          "pos": [
            827,
            838
          ]
        }
      ]
    },
    {
      "pos": [
        9371,
        9410
      ],
      "content": "Save and close the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> page."
    },
    {
      "content": "Define the topology",
      "pos": [
        9416,
        9435
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>Bolt.cs<ept id=\"p2\">**</ept>, and select <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept>.",
      "pos": [
        9440,
        9513
      ]
    },
    {
      "content": "You are using the Java Event Hubs bolt, so you do not need this file.",
      "pos": [
        9514,
        9583
      ]
    },
    {
      "pos": [
        9588,
        9746
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> file and add the following code immediately after the <ph id=\"ph1\">`TopologyBuilder topologyBuilder = new TopologyBuilder(\"EventHubWriter\");`</ph> line."
    },
    {
      "content": "The first line reads the partition count from the properties defined earlier.",
      "pos": [
        10000,
        10077
      ]
    },
    {
      "content": "The second line defines a deserializer that is used to deseralize JSON data produced by the spout, into a <ph id=\"ph1\">`java.lang.String`</ph> so that Java components can consume the data.",
      "pos": [
        10078,
        10248
      ]
    },
    {
      "content": "Find the following code:",
      "pos": [
        10253,
        10277
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        10533,
        10563
      ]
    },
    {
      "content": "This creates a spout and uses the Event Hubs partition count as the parallelism hint for this component.",
      "pos": [
        10901,
        11005
      ]
    },
    {
      "content": "This should create an instance of the spout for each partition.",
      "pos": [
        11006,
        11069
      ]
    },
    {
      "content": "This also associates the deserializer created previously with the output stream from this component.",
      "pos": [
        11075,
        11175
      ]
    },
    {
      "content": "This allows the downstream EventHubSpout component to consume the data produced from the C# spout.",
      "pos": [
        11176,
        11274
      ]
    },
    {
      "content": "Immediately after the previous code, add the following:",
      "pos": [
        11279,
        11334
      ]
    },
    {
      "content": "This creates a new constructor for the Java bolt, which is used at run time to configure a new instance of the bolt.",
      "pos": [
        11957,
        12073
      ]
    },
    {
      "content": "In this case, you are using the <ph id=\"ph1\">&lt;a href=\"http://storm.apache.org/documentation/Clojure-DSL.html\" target=\"_blank\"&gt;</ph>Apache Storm Clojure DSL<ph id=\"ph2\">&lt;/a&gt;</ph> to configure the spout with the Event Hubs configuration information you added previously.",
      "pos": [
        12074,
        12306
      ]
    },
    {
      "content": "More specifically, this code is used by HDInsight at run time to do the following:",
      "pos": [
        12307,
        12389
      ]
    },
    {
      "pos": [
        12397,
        12519
      ],
      "content": "Create a new instance of <bpt id=\"p1\">**</bpt>com.microsoft.eventhubs.bolt.EventHubBoltConfig<ept id=\"p1\">**</ept> using the Event Hubs information you provide."
    },
    {
      "pos": [
        12526,
        12645
      ],
      "content": "Create a new instance of <bpt id=\"p1\">**</bpt>com.microsoft.eventhubs.bolt.EventHubBolt<ept id=\"p1\">**</ept>, passing in the <bpt id=\"p2\">**</bpt>EventHubBoltConfig<ept id=\"p2\">**</ept> instance."
    },
    {
      "content": "Find the following code:",
      "pos": [
        12650,
        12674
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        12849,
        12879
      ]
    },
    {
      "content": "This instructs the topology to use the <bpt id=\"p1\">**</bpt>JavaComponentConstructor<ept id=\"p1\">**</ept> from the previous step as the bolt.",
      "pos": [
        13043,
        13146
      ]
    },
    {
      "content": "The component can be referred to in this topology by the friendly name of \"EventHubBolt.\"",
      "pos": [
        13147,
        13236
      ]
    },
    {
      "content": "The parallelism hint is set to the number of partitions for the Event Hub, and it subscribes to data produced by the spout (\"Spout\").",
      "pos": [
        13237,
        13370
      ]
    },
    {
      "content": "At this point, you are done with the <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>.",
      "pos": [
        13372,
        13424
      ]
    },
    {
      "content": "The topology has been defined, but now you must modify <bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept> so that it produces data in a format that the Event Hubs bolt can use.",
      "pos": [
        13425,
        13563
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This topology will default to creating one worker process, which is sufficient for example purposes.",
      "pos": [
        13567,
        13680
      ]
    },
    {
      "content": "If you are adapting this for a production cluster, you should can add the following to change the number of workers:",
      "pos": [
        13681,
        13797
      ]
    },
    {
      "content": "Modify the spout",
      "pos": [
        13925,
        13941
      ]
    },
    {
      "content": "The Event Hubs bolt expects a single string value, which it will route to Event Hub.",
      "pos": [
        13943,
        14027
      ]
    },
    {
      "content": "In the following example, you will modify the default <bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept> file to produce a JSON string.",
      "pos": [
        14028,
        14125
      ]
    },
    {
      "pos": [
        14130,
        14219
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open <bpt id=\"p2\">**</bpt>Spout.cs<ept id=\"p2\">**</ept> and add the following at the top of the file:"
    },
    {
      "content": "This allows you to more easily work with JSON data.",
      "pos": [
        14293,
        14344
      ]
    },
    {
      "pos": [
        14356,
        14491
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The JSON.NET package should already be installed, as it is required by the SCP.NET framework used for C# Storm topologies."
    },
    {
      "content": "Find the following code:",
      "pos": [
        14496,
        14520
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        14778,
        14808
      ]
    },
    {
      "pos": [
        15154,
        15332
      ],
      "content": "This changes the definition of the data created by the spout to use <bpt id=\"p1\">**</bpt>string<ept id=\"p1\">**</ept> data, and the <bpt id=\"p2\">**</bpt>CustomizedInteropJSONSerializer<ept id=\"p2\">**</ept> declared eariler in the topology (in program.cs)."
    },
    {
      "pos": [
        15337,
        15389
      ],
      "content": "Replace the <bpt id=\"p1\">**</bpt>NextTuple<ept id=\"p1\">**</ept> method with the following:"
    },
    {
      "content": "This randomly generates a device ID, a value, and then uses Json.NET to emit a JSON object using these values.",
      "pos": [
        15701,
        15811
      ]
    },
    {
      "pos": [
        15816,
        15843
      ],
      "content": "Save the <bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "At this point, you have a basic topology that will generate random data and store it in Event Hubs by using the Event Hubs bolt.",
      "pos": [
        15845,
        15973
      ]
    },
    {
      "content": "Next, you will create the reader.",
      "pos": [
        15974,
        16007
      ]
    },
    {
      "content": "Create EventHubReader",
      "pos": [
        16012,
        16033
      ]
    },
    {
      "content": "In this section, you will create a topology that reads data from Event Hubs by using the Event Hubs spout.",
      "pos": [
        16035,
        16141
      ]
    },
    {
      "pos": [
        16146,
        16206
      ],
      "content": "Open Visual Studio, select <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>."
    },
    {
      "content": "From the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> screen, expand <bpt id=\"p2\">**</bpt>Installed<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Templates<ept id=\"p3\">**</ept>, and select <bpt id=\"p4\">**</bpt>HDInsight<ept id=\"p4\">**</ept>.",
      "pos": [
        16211,
        16307
      ]
    },
    {
      "content": "From the list of templates, select <bpt id=\"p1\">**</bpt>Storm Application<ept id=\"p1\">**</ept>.",
      "pos": [
        16308,
        16365
      ]
    },
    {
      "content": "At the bottom of the screen, enter <bpt id=\"p1\">**</bpt>EventHubReader<ept id=\"p1\">**</ept> as the name of the application.",
      "pos": [
        16366,
        16451
      ]
    },
    {
      "content": "Configuration",
      "pos": [
        16457,
        16470
      ]
    },
    {
      "pos": [
        16475,
        16563
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>EventHubReader<ept id=\"p2\">**</ept> and then select <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        16568,
        16716
      ],
      "content": "In the project properties, select <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept>, and then select <bpt id=\"p2\">**</bpt>This project does not contain a default settings file. Click here to create one.<ept id=\"p2\">**</ept>"
    },
    {
      "content": "Enter the following settings.",
      "pos": [
        16721,
        16750
      ]
    },
    {
      "content": "Use the information for the Event Hub and storage account you created earlier in the <bpt id=\"p1\">**</bpt>Value<ept id=\"p1\">**</ept> column.",
      "pos": [
        16751,
        16853
      ]
    },
    {
      "pos": [
        16859,
        18037
      ],
      "content": "<table>\n <tr><th style=\"text-align:left\">Name</th><th style=\"text-align:left\">Type</th><th style=\"text-align:left\">Scope</th></tr>\n <tr><th style=\"text-align:left\">EventHubPolicyName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">EventHubPolicyKey</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">EventHubNamespace</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">EventHubName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">EventHubPartitionCount</th><th style=\"text-align:left\">int</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">StorageConnection</th><th style=\"text-align:left\">(Connection String)</th><th style=\"text-align:left\">Application</th></tr>\n <tr><th style=\"text-align:left\">TableName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n </table>",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "Name",
          "pos": [
            41,
            45
          ]
        },
        {
          "content": "Type",
          "pos": [
            78,
            82
          ]
        },
        {
          "content": "Scope",
          "pos": [
            115,
            120
          ]
        },
        {
          "content": "EventHubPolicyName",
          "pos": [
            164,
            182
          ]
        },
        {
          "content": "string",
          "pos": [
            215,
            221
          ]
        },
        {
          "content": "Application",
          "pos": [
            254,
            265
          ]
        },
        {
          "content": "EventHubPolicyKey",
          "pos": [
            309,
            326
          ]
        },
        {
          "content": "string",
          "pos": [
            359,
            365
          ]
        },
        {
          "content": "Application",
          "pos": [
            398,
            409
          ]
        },
        {
          "content": "EventHubNamespace",
          "pos": [
            453,
            470
          ]
        },
        {
          "content": "string",
          "pos": [
            503,
            509
          ]
        },
        {
          "content": "Application",
          "pos": [
            542,
            553
          ]
        },
        {
          "content": "EventHubName",
          "pos": [
            597,
            609
          ]
        },
        {
          "content": "string",
          "pos": [
            642,
            648
          ]
        },
        {
          "content": "Application",
          "pos": [
            681,
            692
          ]
        },
        {
          "content": "EventHubPartitionCount",
          "pos": [
            736,
            758
          ]
        },
        {
          "content": "int",
          "pos": [
            791,
            794
          ]
        },
        {
          "content": "Application",
          "pos": [
            827,
            838
          ]
        },
        {
          "content": "StorageConnection",
          "pos": [
            882,
            899
          ]
        },
        {
          "content": "(Connection String)",
          "pos": [
            932,
            951
          ]
        },
        {
          "content": "Application",
          "pos": [
            984,
            995
          ]
        },
        {
          "content": "TableName",
          "pos": [
            1039,
            1048
          ]
        },
        {
          "content": "string",
          "pos": [
            1081,
            1087
          ]
        },
        {
          "content": "Application",
          "pos": [
            1120,
            1131
          ]
        }
      ]
    },
    {
      "pos": [
        18043,
        18127
      ],
      "content": "For <bpt id=\"p1\">**</bpt>TableName<ept id=\"p1\">**</ept>, enter the name of the table that you want events to be stored in."
    },
    {
      "content": "For <bpt id=\"p1\">**</bpt>StorageConnection<ept id=\"p1\">**</ept>, enter a value of <ph id=\"ph1\">`DefaultEndpointsProtocol=https;AccountName=myAccount;AccountKey=myKey;`</ph>.",
      "pos": [
        18133,
        18250
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>myAccount<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>myKey<ept id=\"p2\">**</ept> with the storage account name and key obtained earlier.",
      "pos": [
        18251,
        18342
      ]
    },
    {
      "content": "These values will be used by the topology to communicate with Event Hubs and Table Storage.",
      "pos": [
        18348,
        18439
      ]
    },
    {
      "pos": [
        18444,
        18483
      ],
      "content": "Save and close the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> page."
    },
    {
      "content": "Define the topology",
      "pos": [
        18489,
        18508
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>Spout.cs<ept id=\"p2\">**</ept> and select <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept>.",
      "pos": [
        18513,
        18586
      ]
    },
    {
      "content": "You are using the Java Event Hubs spout, so you do not need this file.",
      "pos": [
        18587,
        18657
      ]
    },
    {
      "pos": [
        18662,
        18820
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> file and add the following code immediately after the <ph id=\"ph1\">`TopologyBuilder topologyBuilder = new TopologyBuilder(\"EventHubReader\");`</ph> line:"
    },
    {
      "content": "The partition count is read and assigned to a local variable.",
      "pos": [
        19253,
        19314
      ]
    },
    {
      "content": "It will be used multiple times.",
      "pos": [
        19315,
        19346
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`EventHubSpoutConfig`</ph> defines the configuration for the Event Hub spout.",
      "pos": [
        19352,
        19428
      ]
    },
    {
      "content": "In this case, the Event Hubs configuration information you added previously.",
      "pos": [
        19429,
        19505
      ]
    },
    {
      "content": "Behind the scenes this uses the Java Event Hub spout, and will create a new instance of <bpt id=\"p1\">**</bpt>com.microsoft.eventhubs.spout.EventHubSpoutConfig<ept id=\"p1\">**</ept> using the Event Hubs information.",
      "pos": [
        19506,
        19681
      ]
    },
    {
      "content": "Find the following code:",
      "pos": [
        19686,
        19710
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        19966,
        19996
      ]
    },
    {
      "content": "This instructs the topology to create a new Event Hub spout and use the <ph id=\"ph1\">`EventHubSpoutConfig`</ph> from the previous step as the configuration.",
      "pos": [
        20128,
        20266
      ]
    },
    {
      "content": "\"EventHubSpout\" sets the friendly name of the spout, and <ph id=\"ph1\">`partitionCount`</ph> is used to set the parallelism hint.",
      "pos": [
        20267,
        20377
      ]
    },
    {
      "content": "Behind the scenes this creates a new instance of <bpt id=\"p1\">**</bpt>com.microsoft.eventhubs.spout.EventHubSpout<ept id=\"p1\">**</ept> Java component using the provided configuration information.",
      "pos": [
        20378,
        20535
      ]
    },
    {
      "content": "Add the following immediately after the previous code:",
      "pos": [
        20540,
        20594
      ]
    },
    {
      "content": "This creates a custom serializer, which will be used to serialize information produced by the Java components (such as the EventHubSpout) into a JSON format that downstream C# components can use.",
      "pos": [
        20732,
        20927
      ]
    },
    {
      "content": "Find the following code:",
      "pos": [
        20932,
        20956
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        21131,
        21161
      ]
    },
    {
      "content": "This code instructs the topology to use a bolt (defined in Bolt.cs).",
      "pos": [
        21453,
        21521
      ]
    },
    {
      "content": "The custom serializer defined earlier is used here so that this bolt can consume data produced by upstream Java components.",
      "pos": [
        21522,
        21645
      ]
    },
    {
      "content": "In this case, the EventHubSpout.",
      "pos": [
        21646,
        21678
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> The last parameter for SetBolt, (with a value of <ph id=\"ph2\">`true`</ph>,) enables ACK functionality for this bolt.",
      "pos": [
        21686,
        21802
      ]
    },
    {
      "content": "This is required, as the EventHubSpout component expects an ACK for data that it emits.",
      "pos": [
        21803,
        21890
      ]
    },
    {
      "content": "If ACKs are not returned by downstream components, the spout will stop receiving after processing around 1000 messages.",
      "pos": [
        21891,
        22010
      ]
    },
    {
      "content": "At this point, you are done with <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>.",
      "pos": [
        22012,
        22060
      ]
    },
    {
      "content": "The topology has been defined, but now you must create a helper class to write data to Table storage, then you must modify <bpt id=\"p1\">**</bpt>Bolt.cs<ept id=\"p1\">**</ept> so that it can understand the data produced by the spout.",
      "pos": [
        22061,
        22253
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This topology will default to creating one worker process, which is sufficient for example purposes.",
      "pos": [
        22257,
        22370
      ]
    },
    {
      "content": "If you are adapting this for a production cluster, you should can add the following to change the number of workers:",
      "pos": [
        22371,
        22487
      ]
    },
    {
      "content": "Create a helper class",
      "pos": [
        22615,
        22636
      ]
    },
    {
      "content": "When writing data to Table storage, you must create a class that describes the data that will be written.",
      "pos": [
        22638,
        22743
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>EventHubReader<ept id=\"p2\">**</ept> project, and select <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>, then <bpt id=\"p4\">**</bpt>New Class<ept id=\"p4\">**</ept>.",
      "pos": [
        22748,
        22857
      ]
    },
    {
      "content": "Name the new class <bpt id=\"p1\">**</bpt>Devices.cs<ept id=\"p1\">**</ept>.",
      "pos": [
        22858,
        22892
      ]
    },
    {
      "pos": [
        22897,
        22965
      ],
      "content": "Open <bpt id=\"p1\">**</bpt>Devices.cs<ept id=\"p1\">**</ept> and replace the default code with the following:"
    },
    {
      "content": "This creates entities in Table storage that consist of a partition key (which will be set to the device ID read from Event Hub,) a unique row key, and a value that is read from Event Hub.",
      "pos": [
        23582,
        23769
      ]
    },
    {
      "content": "Each entity will also have a timestamp, which will be created automatically when the entity is inserted in the table.",
      "pos": [
        23770,
        23887
      ]
    },
    {
      "content": "Modify the bolt",
      "pos": [
        23893,
        23908
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, expand the <bpt id=\"p2\">**</bpt>EventHubReader<ept id=\"p2\">**</ept> project and open the <bpt id=\"p3\">**</bpt>Bolt.cs<ept id=\"p3\">**</ept> file.",
      "pos": [
        23913,
        24007
      ]
    },
    {
      "content": "Add the following at the top of the file:",
      "pos": [
        24008,
        24049
      ]
    },
    {
      "content": "This allows you to more easily work with JSON data from the bolt and write data to Table storage.",
      "pos": [
        24190,
        24287
      ]
    },
    {
      "pos": [
        24292,
        24366
      ],
      "content": "Find the <ph id=\"ph1\">`private int count;`</ph> statement and replace it with the following:"
    },
    {
      "content": "This will be used when connecting to the table.",
      "pos": [
        24407,
        24454
      ]
    },
    {
      "content": "Find the following code:",
      "pos": [
        24459,
        24483
      ]
    },
    {
      "content": "Replace it with the following:",
      "pos": [
        24738,
        24768
      ]
    },
    {
      "pos": [
        25115,
        25362
      ],
      "content": "This instructs the bolt that it will be receiving a <bpt id=\"p1\">**</bpt>string<ept id=\"p1\">**</ept> value instead of an <bpt id=\"p2\">**</bpt>int<ept id=\"p2\">**</ept>, and that the data should be deserialized using the <bpt id=\"p3\">**</bpt>CustomizedInteropJSONDeserialzer<ept id=\"p3\">**</ept> that was declared in the topology earlier (in the program.cs file)."
    },
    {
      "content": "Immediately after the previous code, add the following:",
      "pos": [
        25367,
        25422
      ]
    },
    {
      "content": "This connects to the <bpt id=\"p1\">**</bpt>events<ept id=\"p1\">**</ept> table by using the connection string configured previously.",
      "pos": [
        25749,
        25840
      ]
    },
    {
      "content": "If it does not exist, it will be created.",
      "pos": [
        25841,
        25882
      ]
    },
    {
      "pos": [
        25887,
        25949
      ],
      "content": "Find the <bpt id=\"p1\">**</bpt>Execute<ept id=\"p1\">**</ept> method and replace it with the following:"
    },
    {
      "content": "This uses Json.NET to parse the JSON data from the spout, and then picks out the <bpt id=\"p1\">**</bpt>deviceId<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>deviceValue<ept id=\"p2\">**</ept> fields.",
      "pos": [
        26562,
        26683
      ]
    },
    {
      "content": "A new <bpt id=\"p1\">**</bpt>Device<ept id=\"p1\">**</ept> object is then created by using the <bpt id=\"p2\">**</bpt>deviceId<ept id=\"p2\">**</ept> during initialization to set the partition key for the table.",
      "pos": [
        26684,
        26811
      ]
    },
    {
      "content": "The value is then set to the <bpt id=\"p1\">**</bpt>deviceValue<ept id=\"p1\">**</ept>, and finally the entity is inserted into the table.",
      "pos": [
        26812,
        26908
      ]
    },
    {
      "pos": [
        26914,
        27057
      ],
      "content": "After the entity is inserted into the table, <ph id=\"ph1\">`Ack()`</ph> is called for the tuple, to inform the spout that we have successfully processed the data."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> The EventHubSpout component expects an ACK for each tuple from downstream components such as this bolt.",
      "pos": [
        27065,
        27186
      ]
    },
    {
      "content": "If ACKS are not received, the EventHubSpout will assume processing for the tuple has failed.",
      "pos": [
        27187,
        27279
      ]
    },
    {
      "pos": [
        27281,
        27419
      ],
      "content": "At this point, you have a complete topology that will read data from Event Hub, and store it in Table Storage in a table named <bpt id=\"p1\">**</bpt>events<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Deploy the topologies",
      "pos": [
        27424,
        27445
      ]
    },
    {
      "pos": [
        27450,
        27565
      ],
      "content": "From <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>EventHubReader<ept id=\"p2\">**</ept> project and select <bpt id=\"p3\">**</bpt>Submit to Storm on HDInsight<ept id=\"p3\">**</ept>."
    },
    {
      "content": "submit to storm",
      "pos": [
        27573,
        27588
      ]
    },
    {
      "content": "On the <bpt id=\"p1\">**</bpt>Submit Topology<ept id=\"p1\">**</ept> screen, select your <bpt id=\"p2\">**</bpt>Storm Cluster<ept id=\"p2\">**</ept>.",
      "pos": [
        27671,
        27736
      ]
    },
    {
      "content": "Expand <bpt id=\"p1\">**</bpt>Additional Configurations<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Java File Paths<ept id=\"p2\">**</ept>, select <bpt id=\"p3\">**</bpt>...<ept id=\"p3\">**</ept> and select the directory that contains the <bpt id=\"p4\">**</bpt>eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p4\">**</ept> file that you downloaded earlier.",
      "pos": [
        27737,
        27950
      ]
    },
    {
      "content": "Finally, click <bpt id=\"p1\">**</bpt>Submit<ept id=\"p1\">**</ept>.",
      "pos": [
        27951,
        27977
      ]
    },
    {
      "content": "Image of submission dialog",
      "pos": [
        27985,
        28011
      ]
    },
    {
      "content": "When the topology has been submitted, the <bpt id=\"p1\">**</bpt>Storm Topologies Viewer<ept id=\"p1\">**</ept> will appear.",
      "pos": [
        28087,
        28169
      ]
    },
    {
      "content": "Select the <bpt id=\"p1\">**</bpt>EventHubReader<ept id=\"p1\">**</ept> topology in the left pane to view statistics for the topology.",
      "pos": [
        28170,
        28262
      ]
    },
    {
      "content": "Currently, nothing should be happening because no events have been written to Event Hubs yet.",
      "pos": [
        28263,
        28356
      ]
    },
    {
      "content": "example storage view",
      "pos": [
        28364,
        28384
      ]
    },
    {
      "pos": [
        28468,
        28583
      ],
      "content": "From <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>EventHubWriter<ept id=\"p2\">**</ept> project and select <bpt id=\"p3\">**</bpt>Submit to Storm on HDInsight<ept id=\"p3\">**</ept>."
    },
    {
      "content": "On the <bpt id=\"p1\">**</bpt>Submit Topology<ept id=\"p1\">**</ept> screen, select your <bpt id=\"p2\">**</bpt>Storm Cluster<ept id=\"p2\">**</ept>.",
      "pos": [
        28588,
        28653
      ]
    },
    {
      "content": "Expand <bpt id=\"p1\">**</bpt>Additional Configurations<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Java File Paths<ept id=\"p2\">**</ept>, select <bpt id=\"p3\">**</bpt>...<ept id=\"p3\">**</ept> and select the directory that contains the <bpt id=\"p4\">**</bpt>eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p4\">**</ept> file you downloaded earlier.",
      "pos": [
        28654,
        28862
      ]
    },
    {
      "content": "Finally, click <bpt id=\"p1\">**</bpt>Submit<ept id=\"p1\">**</ept>.",
      "pos": [
        28863,
        28889
      ]
    },
    {
      "pos": [
        28894,
        29051
      ],
      "content": "When the topology has been submitted, refresh the topology list in the <bpt id=\"p1\">**</bpt>Storm Topologies Viewer<ept id=\"p1\">**</ept> to verify that both topologies are running on the cluster."
    },
    {
      "content": "When both topologies are running, select <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, then expand <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Storage<ept id=\"p3\">**</ept>, and select the Storage Account you created earlier.",
      "pos": [
        29056,
        29206
      ]
    },
    {
      "content": "Under the Storage Account, expand <bpt id=\"p1\">**</bpt>Tables<ept id=\"p1\">**</ept>.",
      "pos": [
        29207,
        29252
      ]
    },
    {
      "content": "Finally, double-click the <bpt id=\"p1\">**</bpt>events<ept id=\"p1\">**</ept> table to open the table.",
      "pos": [
        29253,
        29314
      ]
    },
    {
      "content": "You should see data that has been stored in the table from the <bpt id=\"p1\">**</bpt>EventHubReader<ept id=\"p1\">**</ept> topology.",
      "pos": [
        29315,
        29406
      ]
    },
    {
      "pos": [
        29414,
        29512
      ],
      "content": "The events are being generated by the <bpt id=\"p1\">**</bpt>EventHubWriter<ept id=\"p1\">**</ept> topology, which writes them to Event Hub."
    },
    {
      "pos": [
        29520,
        29638
      ],
      "content": "The <bpt id=\"p1\">**</bpt>EventHubReader<ept id=\"p1\">**</ept> then reads the events from Event Hubs and stores them in Table storage in the <bpt id=\"p2\">**</bpt>events<ept id=\"p2\">**</ept> table."
    },
    {
      "content": "Stop the topologies",
      "pos": [
        29643,
        29662
      ]
    },
    {
      "pos": [
        29664,
        29763
      ],
      "content": "To stop the topologies, select each topology in the <bpt id=\"p1\">**</bpt>Storm Topology Viewer<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Kill<ept id=\"p2\">**</ept>."
    },
    {
      "content": "image of killing a topology",
      "pos": [
        29767,
        29794
      ]
    },
    {
      "content": "Notes",
      "pos": [
        29876,
        29881
      ]
    },
    {
      "content": "Checkpointing",
      "pos": [
        29887,
        29900
      ]
    },
    {
      "content": "The EventHubSpout periodically checkpoints its state to the Zookeeper node, which saves the current offset for messages read from the queue.",
      "pos": [
        29902,
        30042
      ]
    },
    {
      "content": "This allows the component to start receiving messages at the saved offset in the following scenarios:",
      "pos": [
        30043,
        30144
      ]
    },
    {
      "content": "The component instance fails and is restarted.",
      "pos": [
        30148,
        30194
      ]
    },
    {
      "content": "You grow or shrink the cluster by adding or removing nodes.",
      "pos": [
        30198,
        30257
      ]
    },
    {
      "pos": [
        30261,
        30321
      ],
      "content": "The topology is killed and restarted <bpt id=\"p1\">**</bpt>with the same name<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        30323,
        30574
      ],
      "content": "You can also export and import the persisted checkpoints to WASB (the Azure Storage used by your HDInsight cluster.) The scripts to do this are located on the Storm on HDInsight cluster, at <bpt id=\"p1\">**</bpt>c:\\apps\\dist\\storm-0.9.3.2.2.1.0-2340\\zkdatatool-1.0\\bin<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        30577,
        30713
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The version number in the path may be different, as the version of Storm installed on the cluster may change in the future."
    },
    {
      "content": "The scripts in this directory are:",
      "pos": [
        30715,
        30749
      ]
    },
    {
      "pos": [
        30753,
        30863
      ],
      "content": "<bpt id=\"p1\">**</bpt>stormmeta_import.cmd<ept id=\"p1\">**</ept>: Import all Storm metadata from the cluster default storage container into Zookeeper."
    },
    {
      "pos": [
        30867,
        30975
      ],
      "content": "<bpt id=\"p1\">**</bpt>stormmeta_export.cmd<ept id=\"p1\">**</ept>: Export all Storm metadata from Zookeeper to the cluster default storage container."
    },
    {
      "pos": [
        30979,
        31046
      ],
      "content": "<bpt id=\"p1\">**</bpt>stormmeta_delete.cmd<ept id=\"p1\">**</ept>: Delete all Storm metadata from Zookeeper."
    },
    {
      "content": "Export an import allows you to persist checkpoint data when you need to delete the cluster, but want to resume processing from the current offset in the hub when you bring a new cluster back online.",
      "pos": [
        31048,
        31246
      ]
    },
    {
      "pos": [
        31250,
        31417
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Since the data is persisted to the default storage container, the new cluster <bpt id=\"p1\">**</bpt>must<ept id=\"p1\">**</ept> use the same storage account and container as the previous cluster."
    },
    {
      "content": "Summary",
      "pos": [
        31422,
        31429
      ]
    },
    {
      "content": "In this document, you have learned how to use the Java Event Hubs Spout and Bolt from a C# topology to work with data in Azure Event Hub.",
      "pos": [
        31431,
        31568
      ]
    },
    {
      "content": "To learn more about creating C# topologies, see the following.",
      "pos": [
        31569,
        31631
      ]
    },
    {
      "content": "Develop C# topologies for Apache Storm on HDInsight using Visual Studio",
      "pos": [
        31636,
        31707
      ]
    },
    {
      "content": "Example topologies for Storm on HDInsight",
      "pos": [
        31771,
        31812
      ]
    },
    {
      "content": "test",
      "pos": [
        31854,
        31858
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Process events from Event Hubs with Storm on HDInsight | Microsoft Azure\"\n   description=\"Learn how to process Event Hubs data with a C# Storm topology created in Visual Studio using the HDInsight Tools for Visual Studio.\"\n   services=\"hdinsight,notification hubs\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"/>\n\n<tags\n   ms.service=\"hdinsight\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"big-data\"\n   ms.date=\"09/02/2015\"\n   ms.author=\"larryfr\"/>\n\n# Process events from Azure Event Hubs with Storm on HDInsight (C#)\n\nAzure Event Hubs allows you to process massive amounts of data from websites, apps, and devices. The Event Hubs spout makes it easy to use Apache Storm on HDInsight to analyze this data in real time. You can also write data to Event Hubs from Storm by using the Event Hubs bolt.\n\nIn this tutorial, you will learn how to use the HDInsight Tools for Visual Studio and the Event Hubs spout and bolt to create two hybrid C#/Java topologies:\n\n* **EventHubWriter**: Randomly generates data and writes it to Event Hubs\n\n* **EventHubReader**: Reads data from Event Hubs and stores it in Azure Table storage\n\n## Prerequisites\n\n* An <a href=\"../hdinsight-storm-getting-started/\" target=\"_blank\">Apache Storm on HDInsight cluster</a>\n\n* An <a href=\"../service-bus-event-hubs-csharp-ephcs-getstarted/\" target=\"_blank\">Azure Event Hub</a>\n\n* The <a href=\"http://azure.microsoft.com/downloads/\" target=\"_blank\">Azure .NET SDK</a>\n\n* The <a href=\"../hdinsight-hadoop-visual-studio-tools-get-started/\" target=\"_blank\">HDInsight Tools for Visual Studio</a> (the 2/17/2015 version or later)\n\n## Completed project\n\nYou can download a complete version of the project created in this tutorial from GitHub: [eventhub-storm-hybrid](https://github.com/Blackmist/eventhub-storm-hybrid). However, you still need to provide configuration settings by following the steps in this tutorial.\n\n> [AZURE.NOTE] When you use the completed project, you must use the **NuGet Package Manager** to restore the packages that are required by this solution.\n\n## Event Hubs spout and bolt\n\nThe Event Hubs spout and bolt are Java components that allow you to easily work with Event Hubs from Apache Storm. Although these components are written in Java, the HDInsight Tools for Visual Studio allow you to create hybrid topologies that mix C# and Java components.\n\nThe spout and bolt are distributed as a single Java archive (.jar) file named **eventhubs-storm-spout-0.9-jar-with-dependencies.jar**.\n\n### Download the .jar file\n\nThe most recent version of the **eventhubs-storm-spout-0.9-jar-with-dependencies.jar** file is included in the <a href=\"https://github.com/hdinsight/hdinsight-storm-examples\" target=\"_blank\">HDInsight Storm examples</a> project under the **lib** folder. To download the file, use one of the following methods.\n\n> [AZURE.NOTE] The spout and bolt have been submitted for inclusion in the Apache Storm project. For more information, see <a href=\"https://github.com/apache/storm/pull/336/files\">STORM-583: Initial check-in for storm-event hubs</a> in GitHub.\n\n* **Download a ZIP file**: From the <a href=\"https://github.com/hdinsight/hdinsight-storm-examples\" target=\"_blank\">HDInsight Storm examples</a> site, select **Download ZIP** in the right pane to download a .zip file that contains the project.\n\n    ![download zip button](./media/hdinsight-storm-develop-csharp-event-hub-topology/download.png)\n\n    After the file is downloaded, you can extract the archive, and the file will be in the **lib** directory.\n\n* **Clone the project**: If you have <a href=\"http://git-scm.com/\" target=\"_blank\">Git</a> installed, use the following command to clone the repository locally, then find the file in the **lib** directory.\n\n        git clone https://github.com/hdinsight/hdinsight-storm-examples\n\n## Configure Event Hub\n\nEvent Hubs is the data source for this example. Use the following steps to create a new Event Hub.\n\n1. From the [Azure portal](https://manage.windowsazure.com), select **NEW** > **Service Bus** > **Event Hub** > **Custom Create**.\n\n2. On the **Add a new Event Hub** screen, enter an **Event Hub Name**, select the **Region** to create the hub in, and create a new namespace or select an existing one. Click the **Arrow** to continue.\n\n    ![wizard page 1](./media/hdinsight-storm-develop-csharp-event-hub-topology/wiz1.png)\n\n    > [AZURE.NOTE] You should select the same **Location** as your Storm on HDInsight server to reduce latency and costs.\n\n2. On the **Configure Event Hub** screen, enter the **Partition count** and **Message Retention** values. For this example, use a partition count of 10 and a message retention of 1. Note the partition count because you will need this value later.\n\n    ![wizard page 2](./media/hdinsight-storm-develop-csharp-event-hub-topology/wiz2.png)\n\n3. After the event hub has been created, select the namespace, select **Event Hubs**, and then select the event hub that you created earlier.\n\n4. Select **Configure**, then create two new access policies by using the following information.\n\n    <table>\n    <tr><th>Name</th><th>Permissions</th></tr>\n    <tr><td>Writer</td><td>Send</td></tr>\n    <tr><td>Reader</td><td>Listen</td></tr>\n    </table>\n\n    After You create the permissions, select the **Save** icon at the bottom of the page. This creates the shared access policies that will be used to send (writer) and listen (reader) to this Event Hub.\n\n    ![policies](./media/hdinsight-storm-develop-csharp-event-hub-topology/policy.png)\n\n5. After you save the policies, use the **Shared access key generator** at the bottom of the page to retrieve the key for the **writer** and **reader** policies. Save these because they will be used later.\n\n## Configure Table storage\n\nTable storage will be used to hold the values that are read from Event Hubs because you can easily view Table storage from inside Visual Studio through **Server Explorer**. Use the following steps to create new Table storage:\n\n1. From the [Azure portal](https://manage.windowsazure.com), select **NEW** > **Data Services** > **Storage** > **Quick Create**.\n\n    ![quick create storage](./media/hdinsight-storm-develop-csharp-event-hub-topology/storagecreate.png)\n\n2. Enter a **Name** for the storage account, select a **Location**, and then click the **check mark** to create the storage account.\n\n    > [AZURE.NOTE] You should select the same **Location** as your Event Hubs and Storm on HDInsight server to reduce latency and costs.\n\n3. When the new storage account is provisioned, select the account and then use the **Manage Access Keys** link at the bottom of the page to retrieve the **Storage Account Name** and **Primary Access Key**. Save this information because it will be used later.\n\n    ![access keys](./media/hdinsight-storm-develop-csharp-event-hub-topology/managekeys.png)\n\n## Create EventHubWriter\n\nIn this section, you will create a topology that writes data to Event Hubs by using the Event Hubs bolt.\n\n1. If you have not already installed the latest version of the HDInsight Tools for Visual Studio, see <a href=\"../hdinsight-hadoop-visual-studio-tools-get-started/\" target=\"_blank\">Get started using HDInsight Tools for Visual Studio</a>.\n\n2. Open Visual Studio, select **File** > **New** and then **Project**.\n\n3. From the **New Project** screen, expand **Installed** > **Templates**, and select **HDInsight**. From the list of templates, select **Storm Application**. At the bottom of the screen, enter **EventHubWriter** as the name of the application.\n\n    ![image](./media/hdinsight-storm-develop-csharp-event-hub-topology/newproject.png)\n\n4. After the project is created, you should have the following files:\n\n    * **Program.cs**: This defines the topology for your project. Note that a default topology that consists of one spout and one bolt is created by default.\n\n    * **Spout.cs**: An example spout.\n\n    * **Bolt.cs**: An example bolt. This will be deleted because you will use the Event Hubs bolt to write to Event Hub.\n\n### Configuration\n\n1. In **Solution Explorer**, right-click **EventHubWriter**, and then select **Properties**.\n\n2. In the project properties, select **Settings**, and then select **This project does not contain a default settings file. Click here to create one.**\n\n3. Enter the following settings. Use the information for the Event Hub you created earlier in the **Value** column.\n\n    <table>\n    <tr><th style=\"text-align:left\">Name</th><th style=\"text-align:left\">Type</th><th style=\"text-align:left\">Scope</th></tr>\n    <tr><td style=\"text-align:left\">EventHubPolicyName</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n    <tr><td style=\"text-align:left\">EventHubPolicyKey</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n    <tr><td style=\"text-align:left\">EventHubNamespace</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n    <tr><td style=\"text-align:left\">EventHubName</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">Application</td></tr>\n    <tr><td style=\"text-align:left\">EventHubPartitionCount</td><td style=\"text-align:left\">int</td><td style=\"text-align:left\">Application</td></tr>\n    </table>\n\n4. Save and close the **Properties** page.\n\n### Define the topology\n\n1. In **Solution Explorer**, right-click **Bolt.cs**, and select **Delete**. You are using the Java Event Hubs bolt, so you do not need this file.\n\n2. Open the **Program.cs** file and add the following code immediately after the `TopologyBuilder topologyBuilder = new TopologyBuilder(\"EventHubWriter\");` line.\n\n        int partitionCount = Properties.Settings.Default.EventHubPartitionCount;\n        List<string> javaDeserializerInfo =\n            new List<string>() { \"microsoft.scp.storm.multilang.CustomizedInteropJSONDeserializer\", \"java.lang.String\" };\n\n    The first line reads the partition count from the properties defined earlier. The second line defines a deserializer that is used to deseralize JSON data produced by the spout, into a `java.lang.String` so that Java components can consume the data.\n\n4. Find the following code:\n\n        topologyBuilder.SetSpout(\n            \"Spout\",\n            Spout.Get,\n            new Dictionary<string, List<string>>()\n            {\n                {Constants.DEFAULT_STREAM_ID, new List<string>(){\"count\"}}\n            },\n            1);\n\n    Replace it with the following:\n\n        topologyBuilder.SetSpout(\n            \"Spout\",\n            Spout.Get,\n            new Dictionary<string, List<string>>()\n            {\n                {Constants.DEFAULT_STREAM_ID, new List<string>(){\"Event\"}}\n            },\n            partitionCount).\n            DeclareCustomizedJavaDeserializer(javaDeserializerInfo);\n\n    This creates a spout and uses the Event Hubs partition count as the parallelism hint for this component. This should create an instance of the spout for each partition.\n\n    This also associates the deserializer created previously with the output stream from this component. This allows the downstream EventHubSpout component to consume the data produced from the C# spout.\n\n5. Immediately after the previous code, add the following:\n\n        JavaComponentConstructor constructor =\n            JavaComponentConstructor.CreateFromClojureExpr(\n            String.Format(@\"(com.microsoft.eventhubs.bolt.EventHubBolt. (com.microsoft.eventhubs.bolt.EventHubBoltConfig. \" +\n            @\"\"\"{0}\"\" \"\"{1}\"\" \"\"{2}\"\" \"\"{3}\"\" \"\"{4}\"\" {5}))\",\n            Properties.Settings.Default.EventHubPolicyName,\n            Properties.Settings.Default.EventHubPolicyKey,\n            Properties.Settings.Default.EventHubNamespace,\n            \"servicebus.windows.net\", //suffix for servicebus fqdn\n            Properties.Settings.Default.EventHubName,\n            \"true\"));\n\n    This creates a new constructor for the Java bolt, which is used at run time to configure a new instance of the bolt. In this case, you are using the <a href=\"http://storm.apache.org/documentation/Clojure-DSL.html\" target=\"_blank\">Apache Storm Clojure DSL</a> to configure the spout with the Event Hubs configuration information you added previously. More specifically, this code is used by HDInsight at run time to do the following:\n\n    * Create a new instance of **com.microsoft.eventhubs.bolt.EventHubBoltConfig** using the Event Hubs information you provide.\n    * Create a new instance of **com.microsoft.eventhubs.bolt.EventHubBolt**, passing in the **EventHubBoltConfig** instance.\n\n6. Find the following code:\n\n        topologyBuilder.SetBolt(\n            \"Bolt\",\n            Bolt.Get,\n            new Dictionary<string, List<string>>(),\n            1).shuffleGrouping(\"Spout\");\n\n    Replace it with the following:\n\n        topologyBuilder.SetJavaBolt(\n            \"EventHubBolt\",\n            constructor,\n            partitionCount).\n            shuffleGrouping(\"Spout\");\n\n    This instructs the topology to use the **JavaComponentConstructor** from the previous step as the bolt. The component can be referred to in this topology by the friendly name of \"EventHubBolt.\" The parallelism hint is set to the number of partitions for the Event Hub, and it subscribes to data produced by the spout (\"Spout\").\n\nAt this point, you are done with the **Program.cs**. The topology has been defined, but now you must modify **Spout.cs** so that it produces data in a format that the Event Hubs bolt can use.\n\n> [AZURE.NOTE] This topology will default to creating one worker process, which is sufficient for example purposes. If you are adapting this for a production cluster, you should can add the following to change the number of workers:\n\n    StormConfig config = new StormConfig();\n    config.setNumWorkers(1);\n    topologyBuilder.SetTopologyConfig(config);\n\n\n### Modify the spout\n\nThe Event Hubs bolt expects a single string value, which it will route to Event Hub. In the following example, you will modify the default **Spout.cs** file to produce a JSON string.\n\n1. In **Solution Explorer**, open **Spout.cs** and add the following at the top of the file:\n\n        using Newtonsoft.Json;\n        using Newtonsoft.Json.Linq;\n\n    This allows you to more easily work with JSON data.\n    \n    > [AZURE.NOTE] The JSON.NET package should already be installed, as it is required by the SCP.NET framework used for C# Storm topologies.\n\n3. Find the following code:\n\n        Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n        outputSchema.Add(\"default\", new List<Type>() { typeof(int) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(null, outputSchema));\n\n    Replace it with the following:\n\n        Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n        outputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(null, outputSchema));\n        this.ctx.DeclareCustomizedSerializer(new CustomizedInteropJSONSerializer());\n\n    This changes the definition of the data created by the spout to use **string** data, and the **CustomizedInteropJSONSerializer** declared eariler in the topology (in program.cs).\n\n2. Replace the **NextTuple** method with the following:\n\n        public void NextTuple(Dictionary<string, Object> parms)\n        {\n            JObject eventData = new JObject();\n            eventData.Add(\"deviceId\", r.Next(10));\n            eventData.Add(\"deviceValue\", r.Next());\n            ctx.Emit(new Values(eventData.ToString(Formatting.None)));\n        }\n\n    This randomly generates a device ID, a value, and then uses Json.NET to emit a JSON object using these values.\n\n3. Save the **Spout.cs** file.\n\nAt this point, you have a basic topology that will generate random data and store it in Event Hubs by using the Event Hubs bolt. Next, you will create the reader.\n\n## Create EventHubReader\n\nIn this section, you will create a topology that reads data from Event Hubs by using the Event Hubs spout.\n\n2. Open Visual Studio, select **File** > **New** > **Project**.\n\n3. From the **New Project** screen, expand **Installed** > **Templates**, and select **HDInsight**. From the list of templates, select **Storm Application**. At the bottom of the screen, enter **EventHubReader** as the name of the application.\n\n### Configuration\n\n1. In **Solution Explorer**, right-click **EventHubReader** and then select **Properties**.\n\n2. In the project properties, select **Settings**, and then select **This project does not contain a default settings file. Click here to create one.**\n\n3. Enter the following settings. Use the information for the Event Hub and storage account you created earlier in the **Value** column.\n\n    <table>\n    <tr><th style=\"text-align:left\">Name</th><th style=\"text-align:left\">Type</th><th style=\"text-align:left\">Scope</th></tr>\n    <tr><th style=\"text-align:left\">EventHubPolicyName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">EventHubPolicyKey</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">EventHubNamespace</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">EventHubName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">EventHubPartitionCount</th><th style=\"text-align:left\">int</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">StorageConnection</th><th style=\"text-align:left\">(Connection String)</th><th style=\"text-align:left\">Application</th></tr>\n    <tr><th style=\"text-align:left\">TableName</th><th style=\"text-align:left\">string</th><th style=\"text-align:left\">Application</th></tr>\n    </table>\n\n    For **TableName**, enter the name of the table that you want events to be stored in.\n\n    For **StorageConnection**, enter a value of `DefaultEndpointsProtocol=https;AccountName=myAccount;AccountKey=myKey;`. Replace **myAccount** and **myKey** with the storage account name and key obtained earlier.\n\n    These values will be used by the topology to communicate with Event Hubs and Table Storage.\n\n4. Save and close the **Properties** page.\n\n### Define the topology\n\n1. In **Solution Explorer**, right-click **Spout.cs** and select **Delete**. You are using the Java Event Hubs spout, so you do not need this file.\n\n2. Open the **Program.cs** file and add the following code immediately after the `TopologyBuilder topologyBuilder = new TopologyBuilder(\"EventHubReader\");` line:\n\n        int partitionCount = Properties.Settings.Default.EventHubPartitionCount;\n        EventHubSpoutConfig ehConfig = new EventHubSpoutConfig(\n                Properties.Settings.Default.EventHubPolicyName,\n                Properties.Settings.Default.EventHubPolicyKey,\n                Properties.Settings.Default.EventHubNamespace,\n                Properties.Settings.Default.EventHubName,\n                partitionCount);\n\n    The partition count is read and assigned to a local variable. It will be used multiple times.\n\n    The `EventHubSpoutConfig` defines the configuration for the Event Hub spout. In this case, the Event Hubs configuration information you added previously. Behind the scenes this uses the Java Event Hub spout, and will create a new instance of **com.microsoft.eventhubs.spout.EventHubSpoutConfig** using the Event Hubs information.\n\n5. Find the following code:\n\n        topologyBuilder.SetSpout(\n            \"Spout\",\n            Spout.Get,\n            new Dictionary<string, List<string>>()\n            {\n                {Constants.DEFAULT_STREAM_ID, new List<string>(){\"count\"}}\n            },\n            1);\n\n    Replace it with the following:\n\n        topologyBuilder.SetEventHubSpout(\n            \"EventHubSpout\", \n            ehConfig, \n            partitionCount); \n\n    This instructs the topology to create a new Event Hub spout and use the `EventHubSpoutConfig` from the previous step as the configuration. \"EventHubSpout\" sets the friendly name of the spout, and `partitionCount` is used to set the parallelism hint. Behind the scenes this creates a new instance of **com.microsoft.eventhubs.spout.EventHubSpout** Java component using the provided configuration information.\n\n2. Add the following immediately after the previous code:\n\n         List<string> javaSerializerInfo = new List<string>() { \"microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer\" };\n\n    This creates a custom serializer, which will be used to serialize information produced by the Java components (such as the EventHubSpout) into a JSON format that downstream C# components can use.\n\n3. Find the following code:\n\n        topologyBuilder.SetBolt(\n            \"Bolt\",\n            Bolt.Get,\n            new Dictionary<string, List<string>>(),\n            1).shuffleGrouping(\"Spout\");\n\n    Replace it with the following:\n\n        topologyBuilder.SetBolt(\n            \"Bolt\",\n            Bolt.Get,\n            new Dictionary<string, List<string>>(),\n            partitionCount,\n            true).\n            DeclareCustomizedJavaSerializer(javaSerializerInfo).\n            shuffleGrouping(\"EventHubSpout\");\n\n    This code instructs the topology to use a bolt (defined in Bolt.cs). The custom serializer defined earlier is used here so that this bolt can consume data produced by upstream Java components. In this case, the EventHubSpout.\n\n    > [AZURE.IMPORTANT] The last parameter for SetBolt, (with a value of `true`,) enables ACK functionality for this bolt. This is required, as the EventHubSpout component expects an ACK for data that it emits. If ACKs are not returned by downstream components, the spout will stop receiving after processing around 1000 messages.\n\nAt this point, you are done with **Program.cs**. The topology has been defined, but now you must create a helper class to write data to Table storage, then you must modify **Bolt.cs** so that it can understand the data produced by the spout.\n\n> [AZURE.NOTE] This topology will default to creating one worker process, which is sufficient for example purposes. If you are adapting this for a production cluster, you should can add the following to change the number of workers:\n\n    StormConfig config = new StormConfig();\n    config.setNumWorkers(1);\n    topologyBuilder.SetTopologyConfig(config);\n\n\n### Create a helper class\n\nWhen writing data to Table storage, you must create a class that describes the data that will be written.\n\n1. In **Solution Explorer**, right-click the **EventHubReader** project, and select **Add**, then **New Class**. Name the new class **Devices.cs**.\n\n2. Open **Devices.cs** and replace the default code with the following:\n\n        using System;\n        using System.Collections.Generic;\n        using System.Linq;\n        using System.Text;\n        using System.Threading.Tasks;\n        using Microsoft.WindowsAzure.Storage.Table;\n\n        namespace EventHubReader\n        {\n            class Device : TableEntity\n            {\n                public int value { get; set; }\n\n                public Device() { }\n                public Device(int id)\n                {\n                    this.PartitionKey = id.ToString();\n                    this.RowKey = System.Guid.NewGuid().ToString();\n                }\n            }\n        }\n\n    This creates entities in Table storage that consist of a partition key (which will be set to the device ID read from Event Hub,) a unique row key, and a value that is read from Event Hub. Each entity will also have a timestamp, which will be created automatically when the entity is inserted in the table.\n\n### Modify the bolt\n\n1. In **Solution Explorer**, expand the **EventHubReader** project and open the **Bolt.cs** file. Add the following at the top of the file:\n\n        using Newtonsoft.Json.Linq;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Table;\n\n    This allows you to more easily work with JSON data from the bolt and write data to Table storage.\n\n2. Find the `private int count;` statement and replace it with the following:\n\n        private CloudTable table;\n\n    This will be used when connecting to the table.\n\n4. Find the following code:\n\n        Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n        inputSchema.Add(\"default\", new List<Type>() { typeof(int) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, null));\n\n    Replace it with the following:\n\n        Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n        inputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n        this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, null));\n        this.ctx.DeclareCustomizedDeserializer(new CustomizedInteropJSONDeserializer());\n\n    This instructs the bolt that it will be receiving a **string** value instead of an **int**, and that the data should be deserialized using the **CustomizedInteropJSONDeserialzer** that was declared in the topology earlier (in the program.cs file).\n\n3. Immediately after the previous code, add the following:\n\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(Properties.Settings.Default.StorageConnection);\n        CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n        table = tableClient.GetTableReference(Properties.Settings.Default.TableName);\n        table.CreateIfNotExists();\n\n    This connects to the **events** table by using the connection string configured previously. If it does not exist, it will be created.\n\n2. Find the **Execute** method and replace it with the following:\n\n        public void Execute(SCPTuple tuple)\n        {\n            Context.Logger.Info(\"Processing events\");\n            string eventValue = (string)tuple.GetValue(0);\n            if (eventValue != null)\n            {\n                JObject eventData = JObject.Parse(eventValue);\n\n                Device device = new Device((int)eventData[\"deviceId\"]);\n                device.value = (int)eventData[\"deviceValue\"];\n\n                TableOperation insertOperation = TableOperation.Insert(device);\n\n                table.Execute(insertOperation);\n                this.ctx.Ack(tuple);\n            }\n        }\n\n    This uses Json.NET to parse the JSON data from the spout, and then picks out the **deviceId** and **deviceValue** fields. A new **Device** object is then created by using the **deviceId** during initialization to set the partition key for the table. The value is then set to the **deviceValue**, and finally the entity is inserted into the table.\n\n    After the entity is inserted into the table, `Ack()` is called for the tuple, to inform the spout that we have successfully processed the data.\n\n    > [AZURE.IMPORTANT] The EventHubSpout component expects an ACK for each tuple from downstream components such as this bolt. If ACKS are not received, the EventHubSpout will assume processing for the tuple has failed.\n\nAt this point, you have a complete topology that will read data from Event Hub, and store it in Table Storage in a table named **events**.\n\n## Deploy the topologies\n\n1. From **Solution Explorer**, right-click the **EventHubReader** project and select **Submit to Storm on HDInsight**.\n\n    ![submit to storm](./media/hdinsight-storm-develop-csharp-event-hub-topology/submittostorm.png)\n\n2. On the **Submit Topology** screen, select your **Storm Cluster**. Expand **Additional Configurations**, select **Java File Paths**, select **...** and select the directory that contains the **eventhubs-storm-spout-0.9-jar-with-dependencies.jar** file that you downloaded earlier. Finally, click **Submit**.\n\n    ![Image of submission dialog](./media/hdinsight-storm-develop-csharp-event-hub-topology/submit.png)\n\n3. When the topology has been submitted, the **Storm Topologies Viewer** will appear. Select the **EventHubReader** topology in the left pane to view statistics for the topology. Currently, nothing should be happening because no events have been written to Event Hubs yet.\n\n    ![example storage view](./media/hdinsight-storm-develop-csharp-event-hub-topology/topologyviewer.png)\n\n4. From **Solution Explorer**, right-click the **EventHubWriter** project and select **Submit to Storm on HDInsight**.\n\n2. On the **Submit Topology** screen, select your **Storm Cluster**. Expand **Additional Configurations**, select **Java File Paths**, select **...** and select the directory that contains the **eventhubs-storm-spout-0.9-jar-with-dependencies.jar** file you downloaded earlier. Finally, click **Submit**.\n\n5. When the topology has been submitted, refresh the topology list in the **Storm Topologies Viewer** to verify that both topologies are running on the cluster.\n\n6. When both topologies are running, select **Server Explorer**, then expand **Azure** > **Storage**, and select the Storage Account you created earlier. Under the Storage Account, expand **Tables**. Finally, double-click the **events** table to open the table. You should see data that has been stored in the table from the **EventHubReader** topology.\n\n    * The events are being generated by the **EventHubWriter** topology, which writes them to Event Hub.\n\n    * The **EventHubReader** then reads the events from Event Hubs and stores them in Table storage in the **events** table.\n\n## Stop the topologies\n\nTo stop the topologies, select each topology in the **Storm Topology Viewer**, then click **Kill**.\n\n![image of killing a topology](./media/hdinsight-storm-develop-csharp-event-hub-topology/killtopology.png)\n\n## Notes\n\n### Checkpointing\n\nThe EventHubSpout periodically checkpoints its state to the Zookeeper node, which saves the current offset for messages read from the queue. This allows the component to start receiving messages at the saved offset in the following scenarios:\n\n* The component instance fails and is restarted.\n\n* You grow or shrink the cluster by adding or removing nodes.\n\n* The topology is killed and restarted **with the same name**.\n\nYou can also export and import the persisted checkpoints to WASB (the Azure Storage used by your HDInsight cluster.) The scripts to do this are located on the Storm on HDInsight cluster, at **c:\\apps\\dist\\storm-0.9.3.2.2.1.0-2340\\zkdatatool-1.0\\bin**.\n\n>[AZURE.NOTE] The version number in the path may be different, as the version of Storm installed on the cluster may change in the future.\n\nThe scripts in this directory are:\n\n* **stormmeta_import.cmd**: Import all Storm metadata from the cluster default storage container into Zookeeper.\n\n* **stormmeta_export.cmd**: Export all Storm metadata from Zookeeper to the cluster default storage container.\n\n* **stormmeta_delete.cmd**: Delete all Storm metadata from Zookeeper.\n\nExport an import allows you to persist checkpoint data when you need to delete the cluster, but want to resume processing from the current offset in the hub when you bring a new cluster back online.\n\n> [AZURE.NOTE] Since the data is persisted to the default storage container, the new cluster **must** use the same storage account and container as the previous cluster.\n\n## Summary\n\nIn this document, you have learned how to use the Java Event Hubs Spout and Bolt from a C# topology to work with data in Azure Event Hub. To learn more about creating C# topologies, see the following.\n\n* [Develop C# topologies for Apache Storm on HDInsight using Visual Studio](hdinsight-storm-develop-csharp-visual-studio-topology.md)\n\n* [Example topologies for Storm on HDInsight](hdinsight-storm-example-topology.md)\n \n\ntest\n"
}