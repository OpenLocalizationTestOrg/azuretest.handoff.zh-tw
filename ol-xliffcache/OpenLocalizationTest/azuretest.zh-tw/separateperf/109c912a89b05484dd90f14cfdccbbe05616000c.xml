{
  "nodes": [
    {
      "content": "How to use Service Bus queues (Python) | Microsoft Azure",
      "pos": [
        28,
        84
      ]
    },
    {
      "content": "Learn how to use Azure Service Bus queues from Python.",
      "pos": [
        104,
        158
      ]
    },
    {
      "content": "How to use Service Bus queues",
      "pos": [
        472,
        501
      ]
    },
    {
      "content": "This guide describes how to use Service Bus queues.",
      "pos": [
        503,
        554
      ]
    },
    {
      "content": "The samples are written in Python and use the <bpt id=\"p1\">[</bpt>Python Azure package<ept id=\"p1\">][]</ept>.",
      "pos": [
        555,
        626
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating queues, sending and receiving messages<ept id=\"p1\">**</ept>, and <bpt id=\"p2\">**</bpt>deleting queues<ept id=\"p2\">**</ept>.",
      "pos": [
        627,
        734
      ]
    },
    {
      "pos": [
        824,
        950
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> To install Python or the <bpt id=\"p2\">[</bpt>Python Azure package<ept id=\"p2\">][]</ept>, see the <bpt id=\"p3\">[</bpt>Python Installation Guide<ept id=\"p3\">](../python-how-to-install.md)</ept>."
    },
    {
      "content": "How to create a queue",
      "pos": [
        955,
        976
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object enables you to work with queues.",
      "pos": [
        978,
        1043
      ]
    },
    {
      "content": "Add the following code near the top of any Python file in which you wish to programmatically access Azure Service Bus:",
      "pos": [
        1044,
        1162
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        1232,
        1290
      ]
    },
    {
      "content": "Replace 'mynamespace', 'sharedaccesskeyname' and 'sharedaccesskey' with your namespace, shared access signature (SAS) key name, and value.",
      "pos": [
        1291,
        1429
      ]
    },
    {
      "pos": [
        1615,
        1855
      ],
      "content": "The values for the SAS key name and value can be found in the Azure portal connection information, or in the Visual Studio <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section)."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>create_queue<ept id=\"p1\">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.",
      "pos": [
        1900,
        2054
      ]
    },
    {
      "content": "The following example sets the maximum queue size to 5GB, and the time to live value of 1 minute:",
      "pos": [
        2055,
        2152
      ]
    },
    {
      "content": "How to send messages to a queue",
      "pos": [
        2349,
        2380
      ]
    },
    {
      "pos": [
        2382,
        2519
      ],
      "content": "To send a message to a Service Bus queue, your application calls the <bpt id=\"p1\">**</bpt>send\\_queue\\_message<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object."
    },
    {
      "pos": [
        2521,
        2645
      ],
      "content": "The following example demonstrates how to send a test message to the queue named <bpt id=\"p1\">*</bpt>taskqueue using<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>send\\_queue\\_message<ept id=\"p2\">**</ept>:"
    },
    {
      "content": "Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        2736,
        2906
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        2907,
        3036
      ]
    },
    {
      "content": "This queue size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        3037,
        3110
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        3115,
        3151
      ]
    },
    {
      "pos": [
        3153,
        3269
      ],
      "content": "Messages are received from a queue using the <bpt id=\"p1\">**</bpt>receive\\_queue\\_message<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object:"
    },
    {
      "content": "Messages are deleted from the queue as they are read when the parameter <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept>.",
      "pos": [
        3366,
        3473
      ]
    },
    {
      "content": "You can read (peek) and lock the message without deleting it from the queue by setting the parameter <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>True<ept id=\"p2\">**</ept>.",
      "pos": [
        3474,
        3602
      ]
    },
    {
      "content": "The behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        3604,
        3826
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        3827,
        3954
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        3955,
        4164
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> parameter is set to <bpt id=\"p2\">**</bpt>True<ept id=\"p2\">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        4166,
        4347
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        4348,
        4516
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Message<ept id=\"p2\">**</ept> object.",
      "pos": [
        4517,
        4730
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method will mark the message as being consumed and remove it from the queue.",
      "pos": [
        4731,
        4822
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        4939,
        4996
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        4998,
        5133
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlock<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Message<ept id=\"p2\">**</ept> object.",
      "pos": [
        5134,
        5275
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        5276,
        5464
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.",
      "pos": [
        5466,
        5759
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method is called, then the message will be redelivered to the application when it restarts.",
      "pos": [
        5761,
        5949
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        5950,
        6117
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        6118,
        6286
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>MessageId<ept id=\"p1\">**</ept> property of the message, which will remain constant across delivery attempts.",
      "pos": [
        6287,
        6411
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        6416,
        6426
      ]
    },
    {
      "content": "Now that you have learned the basics of Service Bus queues, follow these links to learn more.",
      "pos": [
        6428,
        6521
      ]
    },
    {
      "pos": [
        6527,
        6589
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus queues (Python) | Microsoft Azure\" \n    description=\"Learn how to use Azure Service Bus queues from Python.\" \n    services=\"service-bus\" \n    documentationCenter=\"python\" \n    authors=\"huguesv\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"python\" \n    ms.topic=\"article\" \n    ms.date=\"07/06/2015\" \n    ms.author=\"huvalo\"/>\n\n\n# How to use Service Bus queues\n\nThis guide describes how to use Service Bus queues. The samples are written in Python and use the [Python Azure package][]. The scenarios covered include **creating queues, sending and receiving messages**, and **deleting queues**.\n\n[AZURE.INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\n\n**Note:** To install Python or the [Python Azure package][], see the [Python Installation Guide](../python-how-to-install.md).\n\n## How to create a queue\n\nThe **ServiceBusService** object enables you to work with queues. Add the following code near the top of any Python file in which you wish to programmatically access Azure Service Bus:\n\n    from azure.servicebus import ServiceBusService, Message, Queue\n\nThe following code creates a **ServiceBusService** object. Replace 'mynamespace', 'sharedaccesskeyname' and 'sharedaccesskey' with your namespace, shared access signature (SAS) key name, and value.\n\n    bus_service = ServiceBusService(\n        service_namespace='mynamespace',\n        shared_access_key_name='sharedaccesskeyname',\n        shared_access_key_value='sharedaccesskey')\n\nThe values for the SAS key name and value can be found in the Azure portal connection information, or in the Visual Studio **Properties** window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section).\n\n    bus_service.create_queue('taskqueue')\n\n**create_queue** also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size. The following example sets the maximum queue size to 5GB, and the time to live value of 1 minute:\n\n    queue_options = Queue()\n    queue_options.max_size_in_megabytes = '5120'\n    queue_options.default_message_time_to_live = 'PT1M'\n\n    bus_service.create_queue('taskqueue', queue_options)\n\n## How to send messages to a queue\n\nTo send a message to a Service Bus queue, your application calls the **send\\_queue\\_message** method on the **ServiceBusService** object.\n\nThe following example demonstrates how to send a test message to the queue named *taskqueue using* **send\\_queue\\_message**:\n\n    msg = Message(b'Test Message')\n    bus_service.send_queue_message('taskqueue', msg)\n\nService Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This queue size is defined at creation time, with an upper limit of 5 GB.\n\n## How to receive messages from a queue\n\nMessages are received from a queue using the **receive\\_queue\\_message** method on the **ServiceBusService** object:\n\n    msg = bus_service.receive_queue_message('taskqueue', peek_lock=False)\n    print(msg.body)\n\nMessages are deleted from the queue as they are read when the parameter **peek\\_lock** is set to **False**. You can read (peek) and lock the message without deleting it from the queue by setting the parameter **peek\\_lock** to **True**.\n\nThe behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIf the **peek\\_lock** parameter is set to **True**, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling the **delete** method on the **Message** object. The **delete** method will mark the message as being consumed and remove it from the queue.\n\n    msg = bus_service.receive_queue_message('taskqueue', peek_lock=True)\n    print(msg.body)\n\n    msg.delete()\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlock** method on the **Message** object. This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **delete** method is called, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**, that is, each message will be processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the **MessageId** property of the message, which will remain constant across delivery attempts.\n\n## Next steps\n\nNow that you have learned the basics of Service Bus queues, follow these links to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions][].\n\n[Azure Management Portal]: http://manage.windowsazure.com\n[Python Azure package]: https://pypi.python.org/pypi/azure  \n[Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n \n"
}