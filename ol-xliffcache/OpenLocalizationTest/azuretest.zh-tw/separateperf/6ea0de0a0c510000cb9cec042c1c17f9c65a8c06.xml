{
  "nodes": [
    {
      "content": "How to use Service Bus relay (.NET) | Microsoft Azure",
      "pos": [
        27,
        80
      ]
    },
    {
      "content": "Learn how to use the Azure Service Bus relay service to connect two applications hosted in different locations.",
      "pos": [
        99,
        210
      ]
    },
    {
      "content": "How to use the Azure Service Bus relay service",
      "pos": [
        525,
        571
      ]
    },
    {
      "content": "This article describes how to use the Service Bus relay service.",
      "pos": [
        573,
        637
      ]
    },
    {
      "content": "The samples are written in C# and use the Windows Communication Foundation (WCF) API with extensions contained in the Service Bus assembly that is part of the Microsoft Azure .NET SDK.",
      "pos": [
        638,
        822
      ]
    },
    {
      "content": "For more information about the Service Bus relay, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#Next-steps)</ept> section.",
      "pos": [
        823,
        915
      ]
    },
    {
      "content": "What is the Service Bus relay?",
      "pos": [
        998,
        1028
      ]
    },
    {
      "content": "The Service Bus <bpt id=\"p1\">*</bpt>relay<ept id=\"p1\">*</ept> service enables you to build hybrid applications that run in both an Azure datacenter and your own on-premises enterprise environment.",
      "pos": [
        1030,
        1188
      ]
    },
    {
      "content": "The Service Bus relay facilitates this by enabling you to securely expose Windows Communication Foundation (WCF) services that reside within a corporate enterprise network to the public cloud, without having to open a firewall connection, or require intrusive changes to a corporate",
      "pos": [
        1189,
        1471
      ]
    },
    {
      "content": "network infrastructure.",
      "pos": [
        1472,
        1495
      ]
    },
    {
      "content": "Relay Concepts",
      "pos": [
        1499,
        1513
      ]
    },
    {
      "content": "The Service Bus relay allows you to host WCF services within your existing enterprise environment.",
      "pos": [
        1577,
        1675
      ]
    },
    {
      "content": "You can then delegate listening for incoming sessions and requests to these WCF services to the Service Bus",
      "pos": [
        1676,
        1783
      ]
    },
    {
      "content": "service running within Azure.",
      "pos": [
        1784,
        1813
      ]
    },
    {
      "content": "This enables you to expose these services to application code running in Azure, or to mobile workers or extranet partner environments.",
      "pos": [
        1814,
        1948
      ]
    },
    {
      "content": "Service Bus allows you to securely control who can",
      "pos": [
        1949,
        1999
      ]
    },
    {
      "content": "access these services at a fine-grained level.",
      "pos": [
        2000,
        2046
      ]
    },
    {
      "content": "It provides a powerful and secure way to expose application functionality and data from your existing enterprise solutions and take advantage of it from the cloud.",
      "pos": [
        2047,
        2210
      ]
    },
    {
      "content": "This how-to article demonstrates how to use the Service Bus relay to create a WCF web service, exposed using a TCP channel binding, that implements a secure conversation between two parties.",
      "pos": [
        2212,
        2402
      ]
    },
    {
      "content": "Create a service namespace",
      "pos": [
        2407,
        2433
      ]
    },
    {
      "content": "To begin using the Service Bus relay in Azure, you must first",
      "pos": [
        2435,
        2496
      ]
    },
    {
      "content": "create a service namespace.",
      "pos": [
        2497,
        2524
      ]
    },
    {
      "content": "A namespace provides a scoping",
      "pos": [
        2525,
        2555
      ]
    },
    {
      "content": "container for addressing Service Bus resources within your application.",
      "pos": [
        2556,
        2627
      ]
    },
    {
      "content": "To create a service namespace:",
      "pos": [
        2629,
        2659
      ]
    },
    {
      "pos": [
        2665,
        2696
      ],
      "content": "Log on to the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        2702,
        2777
      ],
      "content": "In the left navigation pane of the Azure portal, click\n**Service Bus**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In the left navigation pane of the Azure portal, click",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept>.",
          "pos": [
            55,
            71
          ]
        }
      ]
    },
    {
      "pos": [
        2783,
        2839
      ],
      "content": "In the lower pane of the Azure portal, click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2916,
        3049
      ],
      "content": "In the **Add a new namespace** dialog box, enter a namespace name.\nThe system immediately checks to see if the name is available.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In the <bpt id=\"p1\">**</bpt>Add a new namespace<ept id=\"p1\">**</ept> dialog box, enter a namespace name.",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "The system immediately checks to see if the name is available.",
          "pos": [
            67,
            129
          ]
        }
      ]
    },
    {
      "pos": [
        3126,
        3353
      ],
      "content": "After making sure the namespace name is available, choose the\ncountry or region in which your namespace should be hosted (make\nsure you use the same country/region in which you are deploying your\ncompute resources).",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "After making sure the namespace name is available, choose the",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "country or region in which your namespace should be hosted (make",
          "pos": [
            62,
            126
          ]
        },
        {
          "content": "sure you use the same country/region in which you are deploying your",
          "pos": [
            127,
            195
          ]
        },
        {
          "content": "compute resources).",
          "pos": [
            196,
            215
          ]
        }
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> Pick the <bpt id=\"p1\">*</bpt>same region<ept id=\"p1\">*</ept> that you intend to choose for deploying your application.",
      "pos": [
        3361,
        3459
      ]
    },
    {
      "content": "This will give you the best performance.",
      "pos": [
        3460,
        3500
      ]
    },
    {
      "content": "Leave the other fields in the dialog box with their default values (<bpt id=\"p1\">**</bpt>Messaging<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Standard<ept id=\"p2\">**</ept> tier), then click the check mark.",
      "pos": [
        3506,
        3638
      ]
    },
    {
      "content": "The system now creates your namespace and enables it.",
      "pos": [
        3639,
        3692
      ]
    },
    {
      "content": "You might have to wait several minutes as the system provisions resources for your account.",
      "pos": [
        3693,
        3784
      ]
    },
    {
      "content": "The namespace you created then appears in the Azure portal and takes a moment to activate.",
      "pos": [
        3878,
        3968
      ]
    },
    {
      "content": "Wait until the status is <bpt id=\"p1\">**</bpt>Active<ept id=\"p1\">**</ept> before continuing.",
      "pos": [
        3969,
        4023
      ]
    },
    {
      "content": "Obtain the default management credentials for the namespace",
      "pos": [
        4028,
        4087
      ]
    },
    {
      "content": "In order to perform management operations, such as creating a relay connection, on the new namespace, you must configure the Shared Access Signature (SAS) authorization rule for the namespace.",
      "pos": [
        4089,
        4281
      ]
    },
    {
      "content": "For more information about SAS, see <bpt id=\"p1\">[</bpt>Shared Access Signature Authentication with Service Bus<ept id=\"p1\">][]</ept>.",
      "pos": [
        4282,
        4378
      ]
    },
    {
      "pos": [
        4384,
        4563
      ],
      "content": "In the left navigation pane, click the **Service Bus** node, to\ndisplay the list of available namespaces.\n![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-13.png)",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In the left navigation pane, click the <bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept> node, to",
          "pos": [
            0,
            63
          ]
        },
        {
          "content": "display the list of available namespaces.",
          "pos": [
            64,
            105
          ]
        }
      ]
    },
    {
      "pos": [
        4569,
        4715
      ],
      "content": "Double click the name of the namespace you just created from the list shown.\n![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-09.png)",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Double click the name of the namespace you just created from the list shown.",
          "pos": [
            0,
            76
          ]
        }
      ]
    },
    {
      "pos": [
        4721,
        4772
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab at the top of the page."
    },
    {
      "content": "When a Service Bus namespace is provisioned, a <bpt id=\"p1\">**</bpt>SharedAccessAuthorizationRule<ept id=\"p1\">**</ept>, with <bpt id=\"p2\">**</bpt>KeyName<ept id=\"p2\">**</ept> set to <bpt id=\"p3\">**</bpt>RootManageSharedAccessKey<ept id=\"p3\">**</ept>, is created by default.",
      "pos": [
        4778,
        4937
      ]
    },
    {
      "content": "This page displays that key, as well as the primary and secondary keys for the default rule.",
      "pos": [
        4938,
        5030
      ]
    },
    {
      "content": "Get the Service Bus NuGet package",
      "pos": [
        5035,
        5068
      ]
    },
    {
      "content": "The Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        5070,
        5221
      ]
    },
    {
      "content": "The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express.",
      "pos": [
        5222,
        5355
      ]
    },
    {
      "content": "The Service Bus NuGet package is the easiest way",
      "pos": [
        5356,
        5404
      ]
    },
    {
      "content": "to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        5405,
        5507
      ]
    },
    {
      "content": "To install the NuGet package in your application, do the following:",
      "pos": [
        5509,
        5576
      ]
    },
    {
      "pos": [
        5582,
        5669
      ],
      "content": "In Solution Explorer, right-click <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Manage NuGet Packages<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        5674,
        5840
      ],
      "content": "Search for \"Service Bus\" and select the **Microsoft Azure\nService Bus** item. Click **Install** to complete the installation, then close the following dialog box.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Search for \"Service Bus\" and select the <bpt id=\"p1\">**</bpt>Microsoft Azure\nService Bus<ept id=\"p1\">**</ept> item.",
          "pos": [
            0,
            77
          ]
        },
        {
          "content": "Click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept> to complete the installation, then close the following dialog box.",
          "pos": [
            78,
            162
          ]
        }
      ]
    },
    {
      "content": "How to use Service Bus to expose and consume a SOAP web service with TCP",
      "pos": [
        5934,
        6006
      ]
    },
    {
      "content": "To expose an existing WCF SOAP web service for external consumption, you must make changes to the service bindings and addresses.",
      "pos": [
        6008,
        6137
      ]
    },
    {
      "content": "This may require changes to your configuration file or it could require code changes, depending on how you have set up and configured your WCF services.",
      "pos": [
        6138,
        6290
      ]
    },
    {
      "content": "Note that WCF allows you to have multiple network endpoints over the same service, so you can retain the existing internal endpoints while adding Service Bus endpoints for external access at the same time.",
      "pos": [
        6291,
        6496
      ]
    },
    {
      "content": "In this task, you will build a simple WCF service and add a Service Bus listener to it.",
      "pos": [
        6498,
        6585
      ]
    },
    {
      "content": "This exercise assumes some familiarity with Visual Studio, and therefore does not walk through all the details of creating a project.",
      "pos": [
        6586,
        6719
      ]
    },
    {
      "content": "Instead, it focuses on the code.",
      "pos": [
        6720,
        6752
      ]
    },
    {
      "content": "Before starting the steps below, complete the following procedure to set up your environment:",
      "pos": [
        6754,
        6847
      ]
    },
    {
      "content": "Within Visual Studio, create a console application that contains two projects, \"Client\" and \"Service\", within the solution.",
      "pos": [
        6853,
        6976
      ]
    },
    {
      "content": "Add the Microsoft Azure Service Bus NuGet package to both projects.",
      "pos": [
        6981,
        7048
      ]
    },
    {
      "content": "This adds all of the necessary assembly references to your projects.",
      "pos": [
        7049,
        7117
      ]
    },
    {
      "content": "How to create the service",
      "pos": [
        7123,
        7148
      ]
    },
    {
      "content": "First, create the service itself.",
      "pos": [
        7150,
        7183
      ]
    },
    {
      "content": "Any WCF service consists of at least three distinct parts:",
      "pos": [
        7184,
        7242
      ]
    },
    {
      "content": "Definition of a contract that describes what messages are exchanged and what operations are to be invoked.",
      "pos": [
        7248,
        7354
      ]
    },
    {
      "content": "Implementation of said contract.",
      "pos": [
        7359,
        7391
      ]
    },
    {
      "content": "Host that hosts the WCF service and exposes a number of endpoints.",
      "pos": [
        7396,
        7462
      ]
    },
    {
      "content": "The code examples in this section address each of these components.",
      "pos": [
        7464,
        7531
      ]
    },
    {
      "content": "The contract defines a single operation, <ph id=\"ph1\">`AddNumbers`</ph>, that adds two numbers and returns the result.",
      "pos": [
        7533,
        7633
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`IProblemSolverChannel`</ph> interface enables the client to more easily manage the proxy lifetime.",
      "pos": [
        7634,
        7732
      ]
    },
    {
      "content": "Creating such an interface is considered a best practice.",
      "pos": [
        7733,
        7790
      ]
    },
    {
      "content": "It's a good idea to put this contract definition into a separate file so that you can reference that file from both your \"Client\" and \"Service\" projects, but you can also copy the code into both projects.",
      "pos": [
        7791,
        7995
      ]
    },
    {
      "content": "With the contract in place, the implementation is trivial.",
      "pos": [
        8286,
        8344
      ]
    },
    {
      "content": "How to configure a service host programmatically",
      "pos": [
        8522,
        8570
      ]
    },
    {
      "content": "With the contract and implementation in place, you can now host the service.",
      "pos": [
        8572,
        8648
      ]
    },
    {
      "content": "Hosting occurs inside a",
      "pos": [
        8649,
        8672
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>System.ServiceModel.ServiceHost<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/system.servicemodel.servicehost.aspx)</ept> object, which takes care of managing instances of the service and hosts the endpoints that listen for messages.",
      "pos": [
        8673,
        8897
      ]
    },
    {
      "content": "The following code configures the service with both a regular local endpoint and a Service Bus endpoint to illustrate the appearance, side-by-side, of internal and external endpoints.",
      "pos": [
        8898,
        9081
      ]
    },
    {
      "content": "Replace the string <bpt id=\"p1\">*</bpt>namespace<ept id=\"p1\">*</ept> with your namespace name and <bpt id=\"p2\">*</bpt>yourKey<ept id=\"p2\">*</ept> with the SAS key that you obtained in the previous setup step.",
      "pos": [
        9082,
        9214
      ]
    },
    {
      "content": "In the example, you create two endpoints that are on the same contract implementation.",
      "pos": [
        9857,
        9943
      ]
    },
    {
      "content": "One is local and one is projected through Service Bus.",
      "pos": [
        9944,
        9998
      ]
    },
    {
      "content": "The key differences between them are the bindings; <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`NetTcpBinding`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/system.servicemodel.nettcpbinding.aspx)</ept> for the local one and <bpt id=\"p2\">[</bpt>NetTcpRelayBinding<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.nettcprelaybinding.aspx)</ept> for the Service Bus endpoint and the addresses.",
      "pos": [
        9999,
        10326
      ]
    },
    {
      "content": "The local endpoint has a local network address with a distinct port.",
      "pos": [
        10327,
        10395
      ]
    },
    {
      "content": "The Service Bus endpoint has an endpoint address composed of the string \"sb\", your namespace name, and the path \"solver\".",
      "pos": [
        10396,
        10517
      ]
    },
    {
      "content": "This results in the URI \"sb://[serviceNamespace].servicebus.windows.net/solver\", identifying the service endpoint as a Service Bus TCP endpoint with a fully qualified external DNS name.",
      "pos": [
        10518,
        10703
      ]
    },
    {
      "content": "If you place the code replacing the placeholders as explained above into the <ph id=\"ph1\">`Main`</ph> function of the \"Service\" application, you will have a functional service.",
      "pos": [
        10704,
        10862
      ]
    },
    {
      "content": "If you want your service to listen exclusively on Service Bus, remove the local endpoint declaration.",
      "pos": [
        10863,
        10964
      ]
    },
    {
      "content": "How to configure a service host in the App.config file",
      "pos": [
        10970,
        11024
      ]
    },
    {
      "content": "You can also configure the host using the App.config file.",
      "pos": [
        11026,
        11084
      ]
    },
    {
      "content": "The service hosting code in this case appears in the next example.",
      "pos": [
        11085,
        11151
      ]
    },
    {
      "content": "The endpoint definitions move into the App.config file.",
      "pos": [
        11317,
        11372
      ]
    },
    {
      "content": "Note that the NuGet package has already added a range of definitions to the App.config file, which are the required configuration extensions for Service Bus.",
      "pos": [
        11373,
        11530
      ]
    },
    {
      "content": "The following code example, which is the exact equivalent of the previous code example, should appear directly beneath the <bpt id=\"p1\">**</bpt>system.serviceModel<ept id=\"p1\">**</ept> element.",
      "pos": [
        11531,
        11686
      ]
    },
    {
      "content": "This code example assumes that your project C\\# namespace is named \"Service\".",
      "pos": [
        11687,
        11764
      ]
    },
    {
      "content": "Replace the placeholders with your Service Bus service namespace and SAS key.",
      "pos": [
        11765,
        11842
      ]
    },
    {
      "content": "After you make these changes, the service starts as it did before, but with two live endpoints: one local and one listening in the cloud.",
      "pos": [
        12792,
        12929
      ]
    },
    {
      "content": "How to create the client",
      "pos": [
        12935,
        12959
      ]
    },
    {
      "content": "How to configure a client programmatically",
      "pos": [
        12966,
        13008
      ]
    },
    {
      "content": "To consume the service, you can construct a WCF client using a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ChannelFactory`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.channelfactory.aspx)</ept> object.",
      "pos": [
        13010,
        13175
      ]
    },
    {
      "content": "Service Bus uses a token-based security",
      "pos": [
        13176,
        13215
      ]
    },
    {
      "content": "model implemented using SAS.",
      "pos": [
        13216,
        13244
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TokenProvider<ept id=\"p1\">**</ept> class represents a security token provider with built-in factory methods that return some well-known token providers.",
      "pos": [
        13245,
        13384
      ]
    },
    {
      "content": "The example below uses the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`CreateSharedAccessSignatureTokenProvider`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.tokenprovider.createsharedaccesssignaturetokenprovider.aspx)</ept> method to handle the acquisition of the appropriate SAS token.",
      "pos": [
        13385,
        13642
      ]
    },
    {
      "content": "The name and key are those obtained from the portal as described in the previous section.",
      "pos": [
        13643,
        13732
      ]
    },
    {
      "pos": [
        13734,
        13836
      ],
      "content": "First, reference or copy the <ph id=\"ph1\">`IProblemSolver`</ph> contract code from the service into your client project."
    },
    {
      "pos": [
        13838,
        13978
      ],
      "content": "Then, replace the code in the <ph id=\"ph1\">`Main`</ph> method of the client, again replacing the placeholder text with your Service Bus namespace and SAS key."
    },
    {
      "content": "You can now build the client and the service, run them (run the service first), and the client will call the service and print \"<bpt id=\"p1\">**</bpt>9<ept id=\"p1\">**</ept>.\"",
      "pos": [
        14470,
        14605
      ]
    },
    {
      "content": "You can run the client and server on different machines, even across networks, and the communication will still work.",
      "pos": [
        14606,
        14723
      ]
    },
    {
      "content": "The client code can also run in the cloud or locally.",
      "pos": [
        14724,
        14777
      ]
    },
    {
      "content": "How to configure a client in the App.config file",
      "pos": [
        14784,
        14832
      ]
    },
    {
      "content": "The following code shows how to configure the client using the App.config file.",
      "pos": [
        14834,
        14913
      ]
    },
    {
      "content": "The endpoint definitions move into the App.config file.",
      "pos": [
        15082,
        15137
      ]
    },
    {
      "content": "The following code example, which is the same as the code listed previously, should appear directly beneath the <bpt id=\"p1\">**</bpt>system.serviceModel<ept id=\"p1\">**</ept> element.",
      "pos": [
        15138,
        15282
      ]
    },
    {
      "content": "Here, as before,",
      "pos": [
        15283,
        15299
      ]
    },
    {
      "content": "you must replace the placeholders with your Service Bus namespace and SAS key.",
      "pos": [
        15300,
        15378
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        16091,
        16101
      ]
    },
    {
      "pos": [
        16103,
        16207
      ],
      "content": "Now that you've learned the basics of the Service Bus <bpt id=\"p1\">*</bpt>relay<ept id=\"p1\">*</ept> service, follow these links to learn more."
    },
    {
      "pos": [
        16213,
        16272
      ],
      "content": "Building a service: <bpt id=\"p1\">[</bpt>Building a Service for Service Bus<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        16277,
        16344
      ],
      "content": "Building the client: <bpt id=\"p1\">[</bpt>Building a Service Bus Client Application<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        16349,
        16434
      ],
      "content": "Service Bus samples: Download from <bpt id=\"p1\">[</bpt>Azure Samples<ept id=\"p1\">][]</ept> or see the overview on <bpt id=\"p2\">[</bpt>MSDN<ept id=\"p2\">][]</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus relay (.NET) | Microsoft Azure\"\n    description=\"Learn how to use the Azure Service Bus relay service to connect two applications hosted in different locations.\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"get-started-article\"\n    ms.date=\"07/02/2015\"\n    ms.author=\"sethm\"/>\n\n\n# How to use the Azure Service Bus relay service\n\nThis article describes how to use the Service Bus relay service. The samples are written in C# and use the Windows Communication Foundation (WCF) API with extensions contained in the Service Bus assembly that is part of the Microsoft Azure .NET SDK. For more information about the Service Bus relay, see the [Next steps](#Next-steps) section.\n\n[AZURE.INCLUDE [create-account-note](../../includes/create-account-note.md)]\n\n## What is the Service Bus relay?\n\nThe Service Bus *relay* service enables you to build hybrid applications that run in both an Azure datacenter and your own on-premises enterprise environment. The Service Bus relay facilitates this by enabling you to securely expose Windows Communication Foundation (WCF) services that reside within a corporate enterprise network to the public cloud, without having to open a firewall connection, or require intrusive changes to a corporate\nnetwork infrastructure.\n\n![Relay Concepts](./media/service-bus-dotnet-how-to-use-relay/sb-relay-01.png)\n\nThe Service Bus relay allows you to host WCF services within your existing enterprise environment. You can then delegate listening for incoming sessions and requests to these WCF services to the Service Bus\nservice running within Azure. This enables you to expose these services to application code running in Azure, or to mobile workers or extranet partner environments. Service Bus allows you to securely control who can\naccess these services at a fine-grained level. It provides a powerful and secure way to expose application functionality and data from your existing enterprise solutions and take advantage of it from the cloud.\n\nThis how-to article demonstrates how to use the Service Bus relay to create a WCF web service, exposed using a TCP channel binding, that implements a secure conversation between two parties.\n\n## Create a service namespace\n\nTo begin using the Service Bus relay in Azure, you must first\ncreate a service namespace. A namespace provides a scoping\ncontainer for addressing Service Bus resources within your application.\n\nTo create a service namespace:\n\n1.  Log on to the [Azure portal][].\n\n2.  In the left navigation pane of the Azure portal, click\n    **Service Bus**.\n\n3.  In the lower pane of the Azure portal, click **Create**.\n\n    ![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-13.png)\n\n4.  In the **Add a new namespace** dialog box, enter a namespace name.\n    The system immediately checks to see if the name is available.\n\n    ![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-04.png)\n\n5.  After making sure the namespace name is available, choose the\n    country or region in which your namespace should be hosted (make\n    sure you use the same country/region in which you are deploying your\n    compute resources).\n\n    > [AZURE.IMPORTANT] Pick the *same region* that you intend to choose for deploying your application. This will give you the best performance.\n\n6.  Leave the other fields in the dialog box with their default values (**Messaging** and **Standard** tier), then click the check mark. The system now creates your namespace and enables it. You might have to wait several minutes as the system provisions resources for your account.\n\n    ![](./media/service-bus-dotnet-how-to-use-relay/getting-started-multi-tier-27.png)\n\n    The namespace you created then appears in the Azure portal and takes a moment to activate. Wait until the status is **Active** before continuing.\n\n## Obtain the default management credentials for the namespace\n\nIn order to perform management operations, such as creating a relay connection, on the new namespace, you must configure the Shared Access Signature (SAS) authorization rule for the namespace. For more information about SAS, see [Shared Access Signature Authentication with Service Bus][].\n\n1.  In the left navigation pane, click the **Service Bus** node, to\n    display the list of available namespaces.\n    ![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-13.png)\n\n2.  Double click the name of the namespace you just created from the list shown.\n    ![](./media/service-bus-dotnet-how-to-use-relay/sb-queues-09.png)\n\n3.  Click the **Configure** tab at the top of the page.\n\n4.  When a Service Bus namespace is provisioned, a **SharedAccessAuthorizationRule**, with **KeyName** set to **RootManageSharedAccessKey**, is created by default. This page displays that key, as well as the primary and secondary keys for the default rule.\n\n## Get the Service Bus NuGet package\n\nThe Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies. The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express. The Service Bus NuGet package is the easiest way\nto get the Service Bus API and to configure your application with all of the Service Bus dependencies.\n\nTo install the NuGet package in your application, do the following:\n\n1.  In Solution Explorer, right-click **References**, then click **Manage NuGet Packages**.\n2.  Search for \"Service Bus\" and select the **Microsoft Azure\n    Service Bus** item. Click **Install** to complete the installation, then close the following dialog box.\n\n    ![](./media/service-bus-dotnet-how-to-use-relay/getting-started-multi-tier-13.png)\n\n\n## How to use Service Bus to expose and consume a SOAP web service with TCP\n\nTo expose an existing WCF SOAP web service for external consumption, you must make changes to the service bindings and addresses. This may require changes to your configuration file or it could require code changes, depending on how you have set up and configured your WCF services. Note that WCF allows you to have multiple network endpoints over the same service, so you can retain the existing internal endpoints while adding Service Bus endpoints for external access at the same time.\n\nIn this task, you will build a simple WCF service and add a Service Bus listener to it. This exercise assumes some familiarity with Visual Studio, and therefore does not walk through all the details of creating a project. Instead, it focuses on the code.\n\nBefore starting the steps below, complete the following procedure to set up your environment:\n\n1.  Within Visual Studio, create a console application that contains two projects, \"Client\" and \"Service\", within the solution.\n2.  Add the Microsoft Azure Service Bus NuGet package to both projects. This adds all of the necessary assembly references to your projects.\n\n### How to create the service\n\nFirst, create the service itself. Any WCF service consists of at least three distinct parts:\n\n-   Definition of a contract that describes what messages are exchanged and what operations are to be invoked.\n-   Implementation of said contract.\n-   Host that hosts the WCF service and exposes a number of endpoints.\n\nThe code examples in this section address each of these components.\n\nThe contract defines a single operation, `AddNumbers`, that adds two numbers and returns the result. The `IProblemSolverChannel` interface enables the client to more easily manage the proxy lifetime. Creating such an interface is considered a best practice. It's a good idea to put this contract definition into a separate file so that you can reference that file from both your \"Client\" and \"Service\" projects, but you can also copy the code into both projects.\n\n        using System.ServiceModel;\n\n        [ServiceContract(Namespace = \"urn:ps\")]\n        interface IProblemSolver\n        {\n            [OperationContract]\n            int AddNumbers(int a, int b);\n        }\n\n        interface IProblemSolverChannel : IProblemSolver, IClientChannel {}\n\nWith the contract in place, the implementation is trivial.\n\n        class ProblemSolver : IProblemSolver\n        {\n            public int AddNumbers(int a, int b)\n            {\n                return a + b;\n            }\n        }\n\n### How to configure a service host programmatically\n\nWith the contract and implementation in place, you can now host the service. Hosting occurs inside a\n[System.ServiceModel.ServiceHost](https://msdn.microsoft.com/library/azure/system.servicemodel.servicehost.aspx) object, which takes care of managing instances of the service and hosts the endpoints that listen for messages. The following code configures the service with both a regular local endpoint and a Service Bus endpoint to illustrate the appearance, side-by-side, of internal and external endpoints. Replace the string *namespace* with your namespace name and *yourKey* with the SAS key that you obtained in the previous setup step.\n\n    ServiceHost sh = new ServiceHost(typeof(ProblemSolver));\n\n    sh.AddServiceEndpoint(\n       typeof (IProblemSolver), new NetTcpBinding(),\n       \"net.tcp://localhost:9358/solver\");\n\n    sh.AddServiceEndpoint(\n       typeof(IProblemSolver), new NetTcpRelayBinding(),\n       ServiceBusEnvironment.CreateServiceUri(\"sb\", \"namespace\", \"solver\"))\n        .Behaviors.Add(new TransportClientEndpointBehavior {\n              TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", \"yourKey\")});\n\n    sh.Open();\n\n    Console.WriteLine(\"Press ENTER to close\");\n    Console.ReadLine();\n\n    sh.Close();\n\nIn the example, you create two endpoints that are on the same contract implementation. One is local and one is projected through Service Bus. The key differences between them are the bindings; [`NetTcpBinding`](https://msdn.microsoft.com/library/azure/system.servicemodel.nettcpbinding.aspx) for the local one and [NetTcpRelayBinding](https://msdn.microsoft.com/library/azure/microsoft.servicebus.nettcprelaybinding.aspx) for the Service Bus endpoint and the addresses. The local endpoint has a local network address with a distinct port. The Service Bus endpoint has an endpoint address composed of the string \"sb\", your namespace name, and the path \"solver\". This results in the URI \"sb://[serviceNamespace].servicebus.windows.net/solver\", identifying the service endpoint as a Service Bus TCP endpoint with a fully qualified external DNS name. If you place the code replacing the placeholders as explained above into the `Main` function of the \"Service\" application, you will have a functional service. If you want your service to listen exclusively on Service Bus, remove the local endpoint declaration.\n\n### How to configure a service host in the App.config file\n\nYou can also configure the host using the App.config file. The service hosting code in this case appears in the next example.\n\n    ServiceHost sh = new ServiceHost(typeof(ProblemSolver));\n    sh.Open();\n    Console.WriteLine(\"Press ENTER to close\");\n    Console.ReadLine();\n    sh.Close();\n\nThe endpoint definitions move into the App.config file. Note that the NuGet package has already added a range of definitions to the App.config file, which are the required configuration extensions for Service Bus. The following code example, which is the exact equivalent of the previous code example, should appear directly beneath the **system.serviceModel** element. This code example assumes that your project C\\# namespace is named \"Service\".\nReplace the placeholders with your Service Bus service namespace and SAS key.\n\n    <services>\n        <service name=\"Service.ProblemSolver\">\n            <endpoint contract=\"Service.IProblemSolver\"\n                      binding=\"netTcpBinding\"\n                      address=\"net.tcp://localhost:9358/solver\"/>\n            <endpoint contract=\"Service.IProblemSolver\"\n                      binding=\"netTcpRelayBinding\"\n                      address=\"sb://namespace.servicebus.windows.net/solver\"\n                      behaviorConfiguration=\"sbTokenProvider\"/>\n        </service>\n    </services>\n    <behaviors>\n        <endpointBehaviors>\n            <behavior name=\"sbTokenProvider\">\n                <transportClientEndpointBehavior>\n                    <tokenProvider>\n                        <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"yourKey\" />\n                    </tokenProvider>\n                </transportClientEndpointBehavior>\n            </behavior>\n        </endpointBehaviors>\n    </behaviors>\n\nAfter you make these changes, the service starts as it did before, but with two live endpoints: one local and one listening in the cloud.\n\n### How to create the client\n\n#### How to configure a client programmatically\n\nTo consume the service, you can construct a WCF client using a [`ChannelFactory`](https://msdn.microsoft.com/library/system.servicemodel.channelfactory.aspx) object. Service Bus uses a token-based security\nmodel implemented using SAS. The **TokenProvider** class represents a security token provider with built-in factory methods that return some well-known token providers. The example below uses the [`CreateSharedAccessSignatureTokenProvider`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.tokenprovider.createsharedaccesssignaturetokenprovider.aspx) method to handle the acquisition of the appropriate SAS token. The name and key are those obtained from the portal as described in the previous section.\n\nFirst, reference or copy the `IProblemSolver` contract code from the service into your client project.\n\nThen, replace the code in the `Main` method of the client, again replacing the placeholder text with your Service Bus namespace and SAS key.\n\n    var cf = new ChannelFactory<IProblemSolverChannel>(\n        new NetTcpRelayBinding(),\n        new EndpointAddress(ServiceBusEnvironment.CreateServiceUri(\"sb\", \"namespace\", \"solver\")));\n\n    cf.Endpoint.Behaviors.Add(new TransportClientEndpointBehavior\n                { TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\",\"yourKey\") });\n\n    using (var ch = cf.CreateChannel())\n    {\n        Console.WriteLine(ch.AddNumbers(4, 5));\n    }\n\nYou can now build the client and the service, run them (run the service first), and the client will call the service and print \"**9**.\" You can run the client and server on different machines, even across networks, and the communication will still work. The client code can also run in the cloud or locally.\n\n#### How to configure a client in the App.config file\n\nThe following code shows how to configure the client using the App.config file.\n\n    var cf = new ChannelFactory<IProblemSolverChannel>(\"solver\");\n    using (var ch = cf.CreateChannel())\n    {\n        Console.WriteLine(ch.AddNumbers(4, 5));\n    }\n\nThe endpoint definitions move into the App.config file. The following code example, which is the same as the code listed previously, should appear directly beneath the **system.serviceModel** element. Here, as before,\nyou must replace the placeholders with your Service Bus namespace and SAS key.\n\n    <client>\n        <endpoint name=\"solver\" contract=\"Service.IProblemSolver\"\n                  binding=\"netTcpRelayBinding\"\n                  address=\"sb://namespace.servicebus.windows.net/solver\"\n                  behaviorConfiguration=\"sbTokenProvider\"/>\n    </client>\n    <behaviors>\n        <endpointBehaviors>\n            <behavior name=\"sbTokenProvider\">\n                <transportClientEndpointBehavior>\n                    <tokenProvider>\n                        <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"yourKey\" />\n                    </tokenProvider>\n                </transportClientEndpointBehavior>\n            </behavior>\n        </endpointBehaviors>\n    </behaviors>\n\n## Next steps\n\nNow that you've learned the basics of the Service Bus *relay* service, follow these links to learn more.\n\n-   Building a service: [Building a Service for Service Bus][].\n-   Building the client: [Building a Service Bus Client Application][].\n-   Service Bus samples: Download from [Azure Samples][] or see the overview on [MSDN][].\n\n  [Create a Service Namespace]: #create_namespace\n  [Obtain the Default Management Credentials for the Namespace]: #obtain_credentials\n  [Get the Service Bus NuGet Package]: #get_nuget_package\n  [How to: Use Service Bus to Expose and Consume a SOAP Web Service  with TCP]: #how_soap\n  [Azure portal]: http://manage.windowsazure.com\n  [Shared Access Signature Authentication with Service Bus]: http://msdn.microsoft.com/library/azure/dn170477.aspx\n  [Building a Service for Service Bus]: http://msdn.microsoft.com/library/azure/ee173564.aspx\n  [Building a Service Bus Client Application]: http://msdn.microsoft.com/library/azure/ee173543.aspx\n  [Azure Samples]: https://code.msdn.microsoft.com/windowsazure/site/search?query=service%20bus&f%5B0%5D.Value=service%20bus&f%5B0%5D.Type=SearchText&ac=2\n  [MSDN]: https://msdn.microsoft.com/en-us/library/azure/dn194201.aspx\n"
}