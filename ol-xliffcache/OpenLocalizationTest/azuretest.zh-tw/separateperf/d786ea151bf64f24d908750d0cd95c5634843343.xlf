<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with Azure table storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure table storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to get started using Azure table storage in a cloud service project in Visual Studio.</source>
          <target state="new">How to get started using Azure table storage in a cloud service project in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting started with Azure table storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure table storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new">Getting started</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What happened</source>
          <target state="new">What happened</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blobs</source>
          <target state="new">Blobs</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="new">Tables</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes how to get started using Azure table storage in Visual Studio after you have created or referenced an Azure storage account in a cloud services project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog.</source>
          <target state="new">This article describes how to get started using Azure table storage in Visual Studio after you have created or referenced an Azure storage account in a cloud services project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files.</source>
          <target state="new">The <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Azure Table storage service enables you to store large amounts of structured data.</source>
          <target state="new">The Azure Table storage service enables you to store large amounts of structured data.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The service is a NoSQL datastore that accepts authenticated calls from inside and outside the Azure cloud.</source>
          <target state="new">The service is a NoSQL datastore that accepts authenticated calls from inside and outside the Azure cloud.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure tables are ideal for storing structured, non-relational data.</source>
          <target state="new">Azure tables are ideal for storing structured, non-relational data.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To get started, you first need to create a table in your storage account.</source>
          <target state="new">To get started, you first need to create a table in your storage account.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>We'll show you how to create an Azure table in code, and also how to perform basic table and entity operations, such as adding, modifying, reading and reading table entities.</source>
          <target state="new">We'll show you how to create an Azure table in code, and also how to perform basic table and entity operations, such as adding, modifying, reading and reading table entities.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The samples are written in C\# code and use the <bpt id="p1">[</bpt>Azure Storage client library for .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/dn261237.aspx)</ept>.</source>
          <target state="new">The samples are written in C\# code and use the <bpt id="p1">[</bpt>Azure Storage client library for .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/dn261237.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Some of the APIs that perform calls out to Azure storage are asynchronous.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Some of the APIs that perform calls out to Azure storage are asynchronous.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code below assumes async programming methods are being used.</source>
          <target state="new">The code below assumes async programming methods are being used.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use Table storage from .NET<ept id="p1">](storage-dotnet-how-to-use-tables.md)</ept> for more information on programmatically manipulating tables.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use Table storage from .NET<ept id="p1">](storage-dotnet-how-to-use-tables.md)</ept> for more information on programmatically manipulating tables.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Storage documentation<ept id="p1">](https://azure.microsoft.com/documentation/services/storage/)</ept> for general information about Azure Storage.</source>
          <target state="new">See <bpt id="p1">[</bpt>Storage documentation<ept id="p1">](https://azure.microsoft.com/documentation/services/storage/)</ept> for general information about Azure Storage.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Cloud Services documentation<ept id="p1">](http://azure.microsoft.com/documentation/services/cloud-services/)</ept> for general information about Azure cloud services.</source>
          <target state="new">See <bpt id="p1">[</bpt>Cloud Services documentation<ept id="p1">](http://azure.microsoft.com/documentation/services/cloud-services/)</ept> for general information about Azure cloud services.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept> for more information about programming ASP.NET applications.</source>
          <target state="new">See <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept> for more information about programming ASP.NET applications.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Access tables in code</source>
          <target state="new">Access tables in code</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To access tables in cloud service projects, you need to include the following items to any C# source files that access Azure table storage.</source>
          <target state="new">To access tables in cloud service projects, you need to include the following items to any C# source files that access Azure table storage.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Make sure the namespace declarations at the top of the C# file include these <ph id="ph1">`using`</ph> statements.</source>
          <target state="new">Make sure the namespace declarations at the top of the C# file include these <ph id="ph1">`using`</ph> statements.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Get a <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> object that represents your storage account information.</source>
          <target state="new">Get a <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> object that represents your storage account information.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the following code to get the storage connection string and storage account information from the Azure service configuration.</source>
          <target state="new">Use the following code to get the storage connection string and storage account information from the Azure service configuration.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>  Use all of the above code in front of the code in the following samples.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>  Use all of the above code in front of the code in the following samples.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Get a <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object to reference the table objects in your storage account.</source>
          <target state="new">Get a <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object to reference the table objects in your storage account.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get a <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> reference object to reference a specific table and entities.</source>
          <target state="new">Get a <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> reference object to reference a specific table and entities.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create a table in code</source>
          <target state="new">Create a table in code</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create the Azure table, just add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph> to the after you get a <ph id="ph2">`CloudTable`</ph> object as described in the "Access tables in code" section.</source>
          <target state="new">To create the Azure table, just add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph> to the after you get a <ph id="ph2">`CloudTable`</ph> object as described in the "Access tables in code" section.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add an entity to a table</source>
          <target state="new">Add an entity to a table</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To add an entity to a table, create a class that defines the properties of your entity.</source>
          <target state="new">To add an entity to a table, create a class that defines the properties of your entity.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code defines an entity class called <bpt id="p1">**</bpt>CustomerEntity<ept id="p1">**</ept> that uses the customer's first name as the row key and the last name as the partition key.</source>
          <target state="new">The following code defines an entity class called <bpt id="p1">**</bpt>CustomerEntity<ept id="p1">**</ept> that uses the customer's first name as the row key and the last name as the partition key.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Table operations involving entities are done using the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object that you created earlier in "Access tables in code."</source>
          <target state="new">Table operations involving entities are done using the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object that you created earlier in "Access tables in code."</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object represents the operation to be done.</source>
          <target state="new">The <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object represents the operation to be done.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create a <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object and a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</source>
          <target state="new">The following code example shows how to create a <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object and a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To prepare the operation, a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> is created to insert the customer entity into the table.</source>
          <target state="new">To prepare the operation, a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> is created to insert the customer entity into the table.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Finally, the operation is executed by calling <bpt id="p1">**</bpt>CloudTable.ExecuteAsync<ept id="p1">**</ept>.</source>
          <target state="new">Finally, the operation is executed by calling <bpt id="p1">**</bpt>CloudTable.ExecuteAsync<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Insert a batch of entities</source>
          <target state="new">Insert a batch of entities</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can insert multiple entities into a table in a single write operation.</source>
          <target state="new">You can insert multiple entities into a table in a single write operation.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code example creates two entity objects ("Jeff Smith" and "Ben Smith"), adds them to a <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> object using the Insert method, and then starts the operation by calling <bpt id="p2">**</bpt>CloudTable.ExecuteBatchAsync<ept id="p2">**</ept>.</source>
          <target state="new">The following code example creates two entity objects ("Jeff Smith" and "Ben Smith"), adds them to a <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> object using the Insert method, and then starts the operation by calling <bpt id="p2">**</bpt>CloudTable.ExecuteBatchAsync<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add an entity to a table</source>
          <target state="new">Add an entity to a table</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To add an entity to a table you create a class that defines the properties of your entity.</source>
          <target state="new">To add an entity to a table you create a class that defines the properties of your entity.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following code defines an entity class called <ph id="ph1">`CustomerEntity`</ph> that uses the customer's first name as the row key and last name as the partition key.</source>
          <target state="new">The following code defines an entity class called <ph id="ph1">`CustomerEntity`</ph> that uses the customer's first name as the row key and last name as the partition key.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Table operations involving entities are done using the <ph id="ph1">`CloudTable`</ph> object you created earlier in "Access tables in code."</source>
          <target state="new">Table operations involving entities are done using the <ph id="ph1">`CloudTable`</ph> object you created earlier in "Access tables in code."</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TableOperation`</ph> object represents the operation to be done.</source>
          <target state="new">The <ph id="ph1">`TableOperation`</ph> object represents the operation to be done.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create a <ph id="ph1">`CloudTable`</ph> object and a <ph id="ph2">`CustomerEntity`</ph> object.</source>
          <target state="new">The following code example shows how to create a <ph id="ph1">`CloudTable`</ph> object and a <ph id="ph2">`CustomerEntity`</ph> object.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To prepare the operation, a <ph id="ph1">`TableOperation`</ph> is created to insert the customer entity into the table.</source>
          <target state="new">To prepare the operation, a <ph id="ph1">`TableOperation`</ph> is created to insert the customer entity into the table.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Finally, the operation is executed by calling CloudTable.ExecuteAsync.</source>
          <target state="new">Finally, the operation is executed by calling CloudTable.ExecuteAsync.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Insert a batch of entities</source>
          <target state="new">Insert a batch of entities</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can insert multiple entities into a table in a single write operation.</source>
          <target state="new">You can insert multiple entities into a table in a single write operation.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code example creates two entity objects ("Jeff Smith" and "Ben Smith"), adds them to a <ph id="ph1">`TableBatchOperation`</ph> object using the Insert method, and then starts the operation by calling <ph id="ph2">`CloudTable.ExecuteBatchAsync`</ph>.</source>
          <target state="new">The following code example creates two entity objects ("Jeff Smith" and "Ben Smith"), adds them to a <ph id="ph1">`TableBatchOperation`</ph> object using the Insert method, and then starts the operation by calling <ph id="ph2">`CloudTable.ExecuteBatchAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Get all of the entities in a partition</source>
          <target state="new">Get all of the entities in a partition</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To query a table for all of the entities in a partition, use a <ph id="ph1">`TableQuery`</ph> object.</source>
          <target state="new">To query a table for all of the entities in a partition, use a <ph id="ph1">`TableQuery`</ph> object.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following code example specifies a filter for entities where 'Smith' is the partition key.</source>
          <target state="new">The following code example specifies a filter for entities where 'Smith' is the partition key.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This example prints the fields of each entity in the query results to the console.</source>
          <target state="new">This example prints the fields of each entity in the query results to the console.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Get a single entity</source>
          <target state="new">Get a single entity</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can write a query to get a single, specific entity.</source>
          <target state="new">You can write a query to get a single, specific entity.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following code uses a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object to specify a customer named 'Ben Smith'.</source>
          <target state="new">The following code uses a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object to specify a customer named 'Ben Smith'.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This method returns just one entity, rather than a collection, and the returned value in <bpt id="p1">**</bpt>TableResult.Result<ept id="p1">**</ept> is a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</source>
          <target state="new">This method returns just one entity, rather than a collection, and the returned value in <bpt id="p1">**</bpt>TableResult.Result<ept id="p1">**</ept> is a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifying both partition and row keys in a query is the fastest way to retrieve a single entity from the <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> service.</source>
          <target state="new">Specifying both partition and row keys in a query is the fastest way to retrieve a single entity from the <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> service.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Delete an entity</source>
          <target state="new">Delete an entity</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can delete an entity after you find it.</source>
          <target state="new">You can delete an entity after you find it.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following code looks for a customer entity named "Ben Smith", and if it finds it, it deletes it.</source>
          <target state="new">The following code looks for a customer entity named "Ben Smith", and if it finds it, it deletes it.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d786ea151bf64f24d908750d0cd95c5634843343</xliffext:olfilehash>
  </header>
</xliff>