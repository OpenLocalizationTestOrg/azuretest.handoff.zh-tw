{
  "nodes": [
    {
      "content": "Manage statistics in SQL Data Warehouse | Microsoft Azure",
      "pos": [
        26,
        83
      ]
    },
    {
      "content": "Tips for managing statistics in Azure SQL Data Warehouse for developing solutions.",
      "pos": [
        101,
        183
      ]
    },
    {
      "content": "Manage statistics in SQL Data Warehouse",
      "pos": [
        521,
        560
      ]
    },
    {
      "content": "SQL Data Warehouse uses statistics to assess the cost of different ways to perform a distributed query.",
      "pos": [
        562,
        665
      ]
    },
    {
      "content": "When statistics are accurate, the query optimizer can generate high quality query plans that improve query performance.",
      "pos": [
        666,
        785
      ]
    },
    {
      "content": "Creating and updating statistics is important in order to achieve the query performance that SQL Data Warehouse is designed to provide.",
      "pos": [
        787,
        922
      ]
    },
    {
      "content": "This guide gives an overview of statistics, and then shows how to:",
      "pos": [
        923,
        989
      ]
    },
    {
      "content": "Create statistics as part of database design",
      "pos": [
        993,
        1037
      ]
    },
    {
      "content": "Update statistics as part of database maintenance",
      "pos": [
        1040,
        1089
      ]
    },
    {
      "content": "View statistics with system views and functions",
      "pos": [
        1092,
        1139
      ]
    },
    {
      "content": "Introducing statistics",
      "pos": [
        1144,
        1166
      ]
    },
    {
      "content": "Single-column statistics are objects that contain information about the range and frequency of values in a single column.",
      "pos": [
        1168,
        1289
      ]
    },
    {
      "content": "The query optimizer uses this histogram to estimate the number of rows in the query result.",
      "pos": [
        1290,
        1381
      ]
    },
    {
      "content": "This directly impacts decisions about how to optimize the query.",
      "pos": [
        1382,
        1446
      ]
    },
    {
      "content": "Multi-column statistics are statistics created on a list of columns.",
      "pos": [
        1448,
        1516
      ]
    },
    {
      "content": "They include single column statistics on the first column in the list, plus some cross-column correlation information called densities.",
      "pos": [
        1517,
        1652
      ]
    },
    {
      "content": "Multi-column statistics can improve query performance for some operations such as composite joins and group by's.",
      "pos": [
        1653,
        1766
      ]
    },
    {
      "content": "For more details, see [DBCC SHOW_STATISTICS][] on MSDN.",
      "pos": [
        1768,
        1823
      ]
    },
    {
      "content": "Why are statistics necessary?",
      "pos": [
        1828,
        1857
      ]
    },
    {
      "content": "Without proper statistics, you will not get the performance that SQL Data Warehouse is designed to provide.",
      "pos": [
        1858,
        1965
      ]
    },
    {
      "content": "Tables and columns and columns do not have statistics automatically generated by SQL Data Warehouse and so you need to create them yourself.",
      "pos": [
        1966,
        2106
      ]
    },
    {
      "content": "It's a good idea to create them when you create the table and then update them once you have populated them.",
      "pos": [
        2107,
        2215
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you use SQL Server, you might depend on SQL Server to create and update single-column statistics for you as needed.",
      "pos": [
        2219,
        2350
      ]
    },
    {
      "content": "SQL Data Warehouse is different in this aspect.",
      "pos": [
        2351,
        2398
      ]
    },
    {
      "content": "Since the data is distributed, SQL Data Warehouse doesn't automatically aggregate statistics across all the distributed data.",
      "pos": [
        2399,
        2524
      ]
    },
    {
      "content": "It will only generate the aggregated statistics when you create and update statistics.",
      "pos": [
        2525,
        2611
      ]
    },
    {
      "content": "When to create statistics",
      "pos": [
        2616,
        2641
      ]
    },
    {
      "content": "A coherent set of up-to-date statistics is an important part of SQL Data Warehouse.",
      "pos": [
        2642,
        2725
      ]
    },
    {
      "content": "It is therefore important to create statistics as part of designing your tables.",
      "pos": [
        2726,
        2806
      ]
    },
    {
      "content": "Creating single-column statistics on every column is an easy way to get started with statistics.",
      "pos": [
        2808,
        2904
      ]
    },
    {
      "content": "However, there are always trade-offs between performance and the cost to create and update statistics.",
      "pos": [
        2905,
        3007
      ]
    },
    {
      "content": "If you create single-column statistics on all columns and later find it is taking too long to update all statistics, you can always drop some of the statistics, or update some of them more often than others.",
      "pos": [
        3009,
        3216
      ]
    },
    {
      "content": "Multi-column statistics are only used by the query optimizer when the columns are in composite joins or group by clauses.",
      "pos": [
        3218,
        3339
      ]
    },
    {
      "content": "Composite filters do not currently benefit from multi-column statistics.",
      "pos": [
        3340,
        3412
      ]
    },
    {
      "content": "When starting your SQL Data Warehouse development therefore it is a good idea to implement the following pattern:",
      "pos": [
        3414,
        3527
      ]
    },
    {
      "content": "Create single-column statistics on every column on every table",
      "pos": [
        3530,
        3592
      ]
    },
    {
      "content": "Create multi-column statistics on the columns used by queries in joins and group by clauses.",
      "pos": [
        3595,
        3687
      ]
    },
    {
      "content": "As you understand how you want to query your data you might want to refine this model - especially when the tables are wide.",
      "pos": [
        3689,
        3813
      ]
    },
    {
      "content": "Please refer to the [Implementing statistics management](## Implementing statistics management) section for a more advanced method approach.",
      "pos": [
        3814,
        3954
      ]
    },
    {
      "content": "When to update statistics",
      "pos": [
        3959,
        3984
      ]
    },
    {
      "content": "It is important to include updating statistics in your database management routine.",
      "pos": [
        3985,
        4068
      ]
    },
    {
      "content": "When the distribution of data in the database changes, statistics need to be updated.",
      "pos": [
        4069,
        4154
      ]
    },
    {
      "content": "Otherwise, you can see sub-optimal query performance, and efforts to further troubleshoot the query might not be worthwhile.",
      "pos": [
        4155,
        4279
      ]
    },
    {
      "content": "Therefore one of the first questions to ask when troubleshooting a query is, \"Are the statistics up-to-date?\"",
      "pos": [
        4281,
        4390
      ]
    },
    {
      "content": "This question is not one that can be answered by age.",
      "pos": [
        4393,
        4446
      ]
    },
    {
      "content": "An up to date statistics object could be very old.",
      "pos": [
        4447,
        4497
      ]
    },
    {
      "content": "When the number of rows or there is a material change in the distribution of values for a given column <bpt id=\"p1\">*</bpt>then<ept id=\"p1\">*</ept> you need to update statistics.",
      "pos": [
        4498,
        4638
      ]
    },
    {
      "content": "For example, date columns in a data warehouse usually needs frequent statistics updates.",
      "pos": [
        4640,
        4728
      ]
    },
    {
      "content": "Each time new rows are loaded into the data warehouse, new load dates or transaction dates are added.",
      "pos": [
        4729,
        4830
      ]
    },
    {
      "content": "These change the data distribution and make the statistics out-of-date.",
      "pos": [
        4831,
        4902
      ]
    },
    {
      "content": "Conversely, statistics on a gender column on a customer table might never need to be updated.",
      "pos": [
        4904,
        4997
      ]
    },
    {
      "content": "Assuming the distribution is constant between customers, adding new rows to the table variation isn't going to change the data distribution.",
      "pos": [
        4998,
        5138
      ]
    },
    {
      "content": "However, if your data warehouse only contains one gender and a new requirement results in multiple genders then you definitely need to update statistics on the gender column.",
      "pos": [
        5139,
        5313
      ]
    },
    {
      "content": "For further explanation, see [Statistics][] on MSDN.",
      "pos": [
        5315,
        5367
      ]
    },
    {
      "content": "Implementing statistics management",
      "pos": [
        5372,
        5406
      ]
    },
    {
      "content": "It is often a good idea to extend your data loading process to ensure that statistics are updated at the end of the load.",
      "pos": [
        5408,
        5529
      ]
    },
    {
      "content": "The data load is when tables most frequently change their size and/or their distribution of values.",
      "pos": [
        5530,
        5629
      ]
    },
    {
      "content": "Therefore this is a logical place to implement some management processes.",
      "pos": [
        5630,
        5703
      ]
    },
    {
      "content": "Some guiding principles are provided below for updating your statistics during the load process:",
      "pos": [
        5706,
        5802
      ]
    },
    {
      "content": "Ensure that each loaded table has at least one statistics object updated.",
      "pos": [
        5806,
        5879
      ]
    },
    {
      "content": "This updates the tables size (row count and page count) information as part of the stats update.",
      "pos": [
        5880,
        5976
      ]
    },
    {
      "content": "Focus on columns participating in JOIN, GROUP BY, ORDER BY and DISTINCT clauses",
      "pos": [
        5979,
        6058
      ]
    },
    {
      "content": "Consider updating \"ascending key\" columns such as transaction dates more frequently as these values will not be included in the statistics histogram.",
      "pos": [
        6061,
        6210
      ]
    },
    {
      "content": "Consider updating static distribution columns less frequently.",
      "pos": [
        6213,
        6275
      ]
    },
    {
      "content": "Remember each statistic object is updated in series.",
      "pos": [
        6278,
        6330
      ]
    },
    {
      "content": "Simply implementing <ph id=\"ph1\">`UPDATE STATISTICS &lt;TABLE_NAME&gt;`</ph> may not be ideal - especially for wide tables with lots of statistics objects.",
      "pos": [
        6331,
        6462
      ]
    },
    {
      "pos": [
        6466,
        6591
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> For more details on [ascending key] please refer to the SQL Server 2014 cardinality estimation model whitepaper."
    },
    {
      "content": "For further explanation, see  [Cardinality Estimation][] on MSDN.",
      "pos": [
        6593,
        6658
      ]
    },
    {
      "content": "Examples: Create statistics",
      "pos": [
        6663,
        6690
      ]
    },
    {
      "content": "These examples show how to use various options for creating statistics.",
      "pos": [
        6692,
        6763
      ]
    },
    {
      "content": "The options that you use for each column depend on the characteristics of your data and how the column will be used in queries.",
      "pos": [
        6764,
        6891
      ]
    },
    {
      "content": "A.",
      "pos": [
        6897,
        6899
      ]
    },
    {
      "content": "Create single-column statistics with default options",
      "pos": [
        6900,
        6952
      ]
    },
    {
      "content": "To create statistics on a column, simply provide a name for the statistics object and the name of the column.",
      "pos": [
        6954,
        7063
      ]
    },
    {
      "content": "This syntax uses all of the default options.",
      "pos": [
        7065,
        7109
      ]
    },
    {
      "content": "By default, SQL Data Warehouse samples 20 percent of the table when it creates statistics.",
      "pos": [
        7110,
        7200
      ]
    },
    {
      "content": "For example:",
      "pos": [
        7293,
        7305
      ]
    },
    {
      "content": "B.",
      "pos": [
        7371,
        7373
      ]
    },
    {
      "content": "Create single-column statistics by examining every row",
      "pos": [
        7374,
        7428
      ]
    },
    {
      "content": "The default sampling rate of 20 percent is sufficient for most situations.",
      "pos": [
        7430,
        7504
      ]
    },
    {
      "content": "However, you can adjust the sampling rate.",
      "pos": [
        7505,
        7547
      ]
    },
    {
      "content": "To sample the full table, use this syntax:",
      "pos": [
        7549,
        7591
      ]
    },
    {
      "content": "For example:",
      "pos": [
        7698,
        7710
      ]
    },
    {
      "content": "C.",
      "pos": [
        7790,
        7792
      ]
    },
    {
      "content": "Create single-column statistics by specifying the sample size",
      "pos": [
        7793,
        7854
      ]
    },
    {
      "content": "Alternatively you can specify the sample size as a percent:",
      "pos": [
        7856,
        7915
      ]
    },
    {
      "content": "D.",
      "pos": [
        8006,
        8008
      ]
    },
    {
      "content": "Create single-column statistics on only some of the rows",
      "pos": [
        8009,
        8065
      ]
    },
    {
      "content": "Another option, you can create statistics on a portion of the rows in your table.",
      "pos": [
        8067,
        8148
      ]
    },
    {
      "content": "This is called a filtered statistic.",
      "pos": [
        8149,
        8185
      ]
    },
    {
      "content": "For example, you could use filtered statistics when you plan to query a specific partition of a large partitioned table.",
      "pos": [
        8187,
        8307
      ]
    },
    {
      "content": "By creating statistics on only the partition values, the accuracy of the statistics will improve, and therefore improve query performance.",
      "pos": [
        8308,
        8446
      ]
    },
    {
      "content": "This example creates statistics on a range of values.",
      "pos": [
        8448,
        8501
      ]
    },
    {
      "content": "The values could easily be defined to match the range of values in a partition.",
      "pos": [
        8502,
        8581
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> For the query optimizer to consider using filtered statistics when it chooses the distributed query plan, the query must fit inside the definition of the statistics object.",
      "pos": [
        8685,
        8870
      ]
    },
    {
      "content": "Using the previous example, the query's where clause needs to specify col1 values between 2000101 and 20001231.",
      "pos": [
        8871,
        8982
      ]
    },
    {
      "content": "E.",
      "pos": [
        8988,
        8990
      ]
    },
    {
      "content": "Create single-column statistics with all the options",
      "pos": [
        8991,
        9043
      ]
    },
    {
      "content": "You can, of course, combine the options together.",
      "pos": [
        9045,
        9094
      ]
    },
    {
      "content": "The example below creates a filtered statistics object with a custom sample size:",
      "pos": [
        9095,
        9176
      ]
    },
    {
      "content": "For the full reference, see [CREATE STATISTICS][] on MSDN.",
      "pos": [
        9304,
        9362
      ]
    },
    {
      "content": "F.",
      "pos": [
        9368,
        9370
      ]
    },
    {
      "content": "Create multi-column statistics",
      "pos": [
        9371,
        9401
      ]
    },
    {
      "content": "To create a multi-column statistics, simply use the previous examples, but specify more columns.",
      "pos": [
        9403,
        9499
      ]
    },
    {
      "pos": [
        9503,
        9675
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The histogram, which is used to estimate number of rows in the query result, is only available for the first column listed in the statistics object definition."
    },
    {
      "content": "In this example, the histogram is on <bpt id=\"p1\">*</bpt>product\\_category<ept id=\"p1\">*</ept>.",
      "pos": [
        9677,
        9734
      ]
    },
    {
      "content": "Cross-column statistics are calculated on <bpt id=\"p1\">*</bpt>product\\_category<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>product\\_sub_c\\ategory<ept id=\"p2\">*</ept>:",
      "pos": [
        9735,
        9826
      ]
    },
    {
      "pos": [
        10013,
        10181
      ],
      "content": "Since there is a correlation between <bpt id=\"p1\">*</bpt>product\\_category<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>product\\_sub\\_category<ept id=\"p2\">*</ept>, a multi-column stat can be useful if these columns are accessed at the same time."
    },
    {
      "content": "G.",
      "pos": [
        10187,
        10189
      ]
    },
    {
      "content": "Create statistics on all the columns in a table",
      "pos": [
        10190,
        10237
      ]
    },
    {
      "content": "One way to create statistics is to issues CREATE STATISTICS commands after creating the table.",
      "pos": [
        10239,
        10333
      ]
    },
    {
      "content": "H.",
      "pos": [
        10614,
        10616
      ]
    },
    {
      "content": "Use a stored procedure to create statistics on all columns in a database",
      "pos": [
        10617,
        10689
      ]
    },
    {
      "content": "SQL Data Warehouse does not have a system stored procedure equivalent to [sp_create_stats][] in SQL Server.",
      "pos": [
        10691,
        10798
      ]
    },
    {
      "content": "This stored procedure creates a single column statistics object on every column of the database that doesn't already have statistics.",
      "pos": [
        10799,
        10932
      ]
    },
    {
      "content": "This will help you get started with your database design.",
      "pos": [
        10934,
        10991
      ]
    },
    {
      "content": "Feel free to adapt it to your needs.",
      "pos": [
        10992,
        11028
      ]
    },
    {
      "content": "To create statistics on all columns in the table with this procedure, simply call the procedure.",
      "pos": [
        13570,
        13666
      ]
    },
    {
      "content": "Examples: update statistics",
      "pos": [
        13704,
        13731
      ]
    },
    {
      "content": "To update statistics, you can:",
      "pos": [
        13733,
        13763
      ]
    },
    {
      "content": "Update one statistics object.",
      "pos": [
        13768,
        13797
      ]
    },
    {
      "content": "Specify the name of the statistics object you wish to update.",
      "pos": [
        13798,
        13859
      ]
    },
    {
      "content": "Update all statistics objects on a table.",
      "pos": [
        13863,
        13904
      ]
    },
    {
      "content": "Specify the name of the table instead of one specific statistics object.",
      "pos": [
        13905,
        13977
      ]
    },
    {
      "content": "A.",
      "pos": [
        13984,
        13986
      ]
    },
    {
      "content": "Update one specific statistics object",
      "pos": [
        13987,
        14024
      ]
    },
    {
      "content": "Use the following syntax to update a specific statistics object:",
      "pos": [
        14029,
        14093
      ]
    },
    {
      "content": "For example:",
      "pos": [
        14163,
        14175
      ]
    },
    {
      "content": "By updating specific statistics objects, you can minimize the time and resources required to manage statistics.",
      "pos": [
        14235,
        14346
      ]
    },
    {
      "content": "This requires some thought, though, to choose the best statistics objects to update.",
      "pos": [
        14347,
        14431
      ]
    },
    {
      "content": "B.",
      "pos": [
        14438,
        14440
      ]
    },
    {
      "content": "Update all statistics on a table",
      "pos": [
        14441,
        14473
      ]
    },
    {
      "content": "This shows a simple method for updating all the statistics objects on a table.",
      "pos": [
        14478,
        14556
      ]
    },
    {
      "content": "For example:",
      "pos": [
        14613,
        14625
      ]
    },
    {
      "content": "This statement is easy to use.",
      "pos": [
        14666,
        14696
      ]
    },
    {
      "content": "Just remember this updates all statistics on the table, and therefore might perform more work than is necessary.",
      "pos": [
        14697,
        14809
      ]
    },
    {
      "content": "If the performance is not an issue, this is definitely the easiest and most complete way to guarantee statistics are up-to-date.",
      "pos": [
        14810,
        14938
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When updating all statistics on a table, SQL Data Warehouse does a scan to sample the table for each statistics.",
      "pos": [
        14942,
        15067
      ]
    },
    {
      "content": "If the table is large, has many columns, and many statistics, it might be more efficient to udpate individual statistics based on need.",
      "pos": [
        15068,
        15203
      ]
    },
    {
      "content": "For an implementation of an <ph id=\"ph1\">`UPDATE STATISTICS`</ph> procedure please see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">temporary tables]</ept> article.",
      "pos": [
        15205,
        15305
      ]
    },
    {
      "content": "The implementation method is slightly different to the <ph id=\"ph1\">`CREATE STATISTICS`</ph> procedure above but the end result is the same.",
      "pos": [
        15306,
        15428
      ]
    },
    {
      "content": "For the full syntax, see [Update Statistics][] on MSDN.",
      "pos": [
        15430,
        15485
      ]
    },
    {
      "content": "Statistics metadata",
      "pos": [
        15490,
        15509
      ]
    },
    {
      "content": "There are several system view and functions that you can use to find information about statistics.",
      "pos": [
        15510,
        15608
      ]
    },
    {
      "content": "For example, you can see if a statistics object might be out-of-date by using the stats-date function to see when statistics were last created or updated.",
      "pos": [
        15609,
        15763
      ]
    },
    {
      "content": "Catalog views for statistics",
      "pos": [
        15769,
        15797
      ]
    },
    {
      "content": "These system views provide information about statistics:",
      "pos": [
        15798,
        15854
      ]
    },
    {
      "content": "Catalog View",
      "pos": [
        15858,
        15870
      ]
    },
    {
      "content": "Description",
      "pos": [
        15873,
        15884
      ]
    },
    {
      "content": "[sys.columns][]",
      "pos": [
        15920,
        15935
      ]
    },
    {
      "content": "One row for each column.",
      "pos": [
        15939,
        15963
      ]
    },
    {
      "content": "[sys.objects][]",
      "pos": [
        15968,
        15983
      ]
    },
    {
      "content": "One row for each object in the database.",
      "pos": [
        15987,
        16027
      ]
    },
    {
      "content": "[sys.schemas][]",
      "pos": [
        16035,
        16050
      ]
    },
    {
      "content": "One row for each schema in the database.",
      "pos": [
        16054,
        16094
      ]
    },
    {
      "content": "[sys.stats][]",
      "pos": [
        16102,
        16115
      ]
    },
    {
      "content": "One row for each statistics object.",
      "pos": [
        16118,
        16153
      ]
    },
    {
      "content": "[sys.stats_columns][]",
      "pos": [
        16158,
        16179
      ]
    },
    {
      "content": "One row for each column in the statistics object.",
      "pos": [
        16182,
        16231
      ]
    },
    {
      "content": "Links back to sys.columns.",
      "pos": [
        16232,
        16258
      ]
    },
    {
      "content": "[sys.tables][]",
      "pos": [
        16263,
        16277
      ]
    },
    {
      "content": "One row for each table (includes external tables).",
      "pos": [
        16280,
        16330
      ]
    },
    {
      "content": "[sys.table_types][]",
      "pos": [
        16335,
        16354
      ]
    },
    {
      "content": "One row for each data type.",
      "pos": [
        16357,
        16384
      ]
    },
    {
      "content": "System functions for statistics",
      "pos": [
        16393,
        16424
      ]
    },
    {
      "content": "These system functions are useful for working with statistics:",
      "pos": [
        16425,
        16487
      ]
    },
    {
      "content": "System Function",
      "pos": [
        16491,
        16506
      ]
    },
    {
      "content": "Description",
      "pos": [
        16509,
        16520
      ]
    },
    {
      "content": "[STATS_DATE][]",
      "pos": [
        16559,
        16573
      ]
    },
    {
      "content": "Date the statistics object was last updated.",
      "pos": [
        16579,
        16623
      ]
    },
    {
      "content": "[DBCC SHOW_STATISTICS][]",
      "pos": [
        16628,
        16652
      ]
    },
    {
      "content": "Provides summary level and detailed information about the distribution of values as understood by the statistics object.",
      "pos": [
        16655,
        16775
      ]
    },
    {
      "content": "Combine statistics columns and functions into one view",
      "pos": [
        16783,
        16837
      ]
    },
    {
      "content": "This view brings columns that relate to statistics, and results from the [STATS_DATE()][]function together.",
      "pos": [
        16839,
        16946
      ]
    },
    {
      "content": "DBCC SHOW_STATISTICS() examples",
      "pos": [
        18878,
        18909
      ]
    },
    {
      "content": "DBCC SHOW_STATISTICS() shows the data held within a statistics object.",
      "pos": [
        18911,
        18981
      ]
    },
    {
      "content": "This data comes in three parts.",
      "pos": [
        18982,
        19013
      ]
    },
    {
      "content": "Header",
      "pos": [
        19018,
        19024
      ]
    },
    {
      "content": "Density Vector",
      "pos": [
        19028,
        19042
      ]
    },
    {
      "content": "Histogram",
      "pos": [
        19046,
        19055
      ]
    },
    {
      "content": "The header metadata about the statistics.",
      "pos": [
        19057,
        19098
      ]
    },
    {
      "content": "The histogram displays the distribution of values in the first key column of the statistics object.",
      "pos": [
        19099,
        19198
      ]
    },
    {
      "content": "The density vector measures cross-column correlation.",
      "pos": [
        19199,
        19252
      ]
    },
    {
      "content": "SQLDW computes cardinality estimates with any of the data in the statistics object.",
      "pos": [
        19253,
        19336
      ]
    },
    {
      "content": "Show header, density, and histogram",
      "pos": [
        19342,
        19377
      ]
    },
    {
      "content": "This simple example shows all three parts of a statistics object.",
      "pos": [
        19379,
        19444
      ]
    },
    {
      "content": "For example:",
      "pos": [
        19519,
        19531
      ]
    },
    {
      "content": "Show one or more parts of DBCC SHOW_STATISTICS();",
      "pos": [
        19593,
        19642
      ]
    },
    {
      "pos": [
        19644,
        19760
      ],
      "content": "If you are only interested in viewing specific parts, use the <ph id=\"ph1\">`WITH`</ph> clause and specify which parts you want to see:"
    },
    {
      "content": "For example:",
      "pos": [
        19879,
        19891
      ]
    },
    {
      "content": "DBCC SHOW_STATISTICS() differences",
      "pos": [
        19982,
        20016
      ]
    },
    {
      "content": "DBCC SHOW_STATISTICS() is more strictly implemented in SQL Data Warehouse compared to SQL Server.",
      "pos": [
        20017,
        20114
      ]
    },
    {
      "content": "Undocumented features are not supported",
      "pos": [
        20119,
        20158
      ]
    },
    {
      "content": "Cannot use Stats_stream",
      "pos": [
        20161,
        20184
      ]
    },
    {
      "content": "Cannot join results for specific subsets of statistics data e.g. (STAT_HEADER JOIN DENSITY_VECTOR)",
      "pos": [
        20187,
        20285
      ]
    },
    {
      "content": "NO_INFOMSGS cannot be set for message suppression",
      "pos": [
        20289,
        20338
      ]
    },
    {
      "content": "Square brackets around statistics names cannot be used",
      "pos": [
        20342,
        20396
      ]
    },
    {
      "content": "Cannot use column names to identify statistics objects",
      "pos": [
        20400,
        20454
      ]
    },
    {
      "content": "Custom error 2767 is not supported",
      "pos": [
        20458,
        20492
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        20498,
        20508
      ]
    },
    {
      "pos": [
        20509,
        20584
      ],
      "content": "For more development tips, see <bpt id=\"p1\">[</bpt>SQL Data Warehouse development overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Manage statistics in SQL Data Warehouse | Microsoft Azure\"\n   description=\"Tips for managing statistics in Azure SQL Data Warehouse for developing solutions.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"06/22/2015\"\n   ms.author=\"JRJ@BigBangData.co.uk;barbkess\"/>\n\n# Manage statistics in SQL Data Warehouse\n SQL Data Warehouse uses statistics to assess the cost of different ways to perform a distributed query. When statistics are accurate, the query optimizer can generate high quality query plans that improve query performance.\n\nCreating and updating statistics is important in order to achieve the query performance that SQL Data Warehouse is designed to provide. This guide gives an overview of statistics, and then shows how to:\n\n- Create statistics as part of database design\n- Update statistics as part of database maintenance\n- View statistics with system views and functions\n\n## Introducing statistics\n\nSingle-column statistics are objects that contain information about the range and frequency of values in a single column. The query optimizer uses this histogram to estimate the number of rows in the query result. This directly impacts decisions about how to optimize the query.\n\nMulti-column statistics are statistics created on a list of columns. They include single column statistics on the first column in the list, plus some cross-column correlation information called densities. Multi-column statistics can improve query performance for some operations such as composite joins and group by's.\n\nFor more details, see [DBCC SHOW_STATISTICS][] on MSDN.\n\n## Why are statistics necessary?\nWithout proper statistics, you will not get the performance that SQL Data Warehouse is designed to provide. Tables and columns and columns do not have statistics automatically generated by SQL Data Warehouse and so you need to create them yourself. It's a good idea to create them when you create the table and then update them once you have populated them.\n\n> [AZURE.NOTE] If you use SQL Server, you might depend on SQL Server to create and update single-column statistics for you as needed. SQL Data Warehouse is different in this aspect. Since the data is distributed, SQL Data Warehouse doesn't automatically aggregate statistics across all the distributed data. It will only generate the aggregated statistics when you create and update statistics.\n\n## When to create statistics\nA coherent set of up-to-date statistics is an important part of SQL Data Warehouse. It is therefore important to create statistics as part of designing your tables.\n\nCreating single-column statistics on every column is an easy way to get started with statistics. However, there are always trade-offs between performance and the cost to create and update statistics.  If you create single-column statistics on all columns and later find it is taking too long to update all statistics, you can always drop some of the statistics, or update some of them more often than others.\n\nMulti-column statistics are only used by the query optimizer when the columns are in composite joins or group by clauses. Composite filters do not currently benefit from multi-column statistics.\n\nWhen starting your SQL Data Warehouse development therefore it is a good idea to implement the following pattern:\n- Create single-column statistics on every column on every table\n- Create multi-column statistics on the columns used by queries in joins and group by clauses.\n\nAs you understand how you want to query your data you might want to refine this model - especially when the tables are wide. Please refer to the [Implementing statistics management](## Implementing statistics management) section for a more advanced method approach.\n\n## When to update statistics\nIt is important to include updating statistics in your database management routine. When the distribution of data in the database changes, statistics need to be updated. Otherwise, you can see sub-optimal query performance, and efforts to further troubleshoot the query might not be worthwhile.\n\nTherefore one of the first questions to ask when troubleshooting a query is, \"Are the statistics up-to-date?\" \n\nThis question is not one that can be answered by age. An up to date statistics object could be very old. When the number of rows or there is a material change in the distribution of values for a given column *then* you need to update statistics.\n\nFor example, date columns in a data warehouse usually needs frequent statistics updates. Each time new rows are loaded into the data warehouse, new load dates or transaction dates are added. These change the data distribution and make the statistics out-of-date.\n\nConversely, statistics on a gender column on a customer table might never need to be updated. Assuming the distribution is constant between customers, adding new rows to the table variation isn't going to change the data distribution. However, if your data warehouse only contains one gender and a new requirement results in multiple genders then you definitely need to update statistics on the gender column.\n\nFor further explanation, see [Statistics][] on MSDN.\n\n## Implementing statistics management\n\nIt is often a good idea to extend your data loading process to ensure that statistics are updated at the end of the load. The data load is when tables most frequently change their size and/or their distribution of values. Therefore this is a logical place to implement some management processes. \n\nSome guiding principles are provided below for updating your statistics during the load process:\n\n- Ensure that each loaded table has at least one statistics object updated. This updates the tables size (row count and page count) information as part of the stats update.\n- Focus on columns participating in JOIN, GROUP BY, ORDER BY and DISTINCT clauses\n- Consider updating \"ascending key\" columns such as transaction dates more frequently as these values will not be included in the statistics histogram.\n- Consider updating static distribution columns less frequently.\n- Remember each statistic object is updated in series. Simply implementing `UPDATE STATISTICS <TABLE_NAME>` may not be ideal - especially for wide tables with lots of statistics objects.\n\n> [AZURE.NOTE] For more details on [ascending key] please refer to the SQL Server 2014 cardinality estimation model whitepaper.\n\nFor further explanation, see  [Cardinality Estimation][] on MSDN.\n\n## Examples: Create statistics\n\nThese examples show how to use various options for creating statistics. The options that you use for each column depend on the characteristics of your data and how the column will be used in queries.\n\n### A. Create single-column statistics with default options\n\nTo create statistics on a column, simply provide a name for the statistics object and the name of the column.\n\nThis syntax uses all of the default options. By default, SQL Data Warehouse samples 20 percent of the table when it creates statistics.\n\n```\nCREATE STATISTICS [statistics_name] ON [schema_name].[table_name]([column_name]);\n```\n\nFor example:\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1);\n```\n\n### B. Create single-column statistics by examining every row\n\nThe default sampling rate of 20 percent is sufficient for most situations. However, you can adjust the sampling rate.\n\nTo sample the full table, use this syntax:\n\n```\nCREATE STATISTICS [statistics_name] ON [schema_name].[table_name]([column_name]) WITH FULLSCAN;\n```\n\nFor example:\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1) WITH FULLSCAN;\n```\n\n### C. Create single-column statistics by specifying the sample size\n\nAlternatively you can specify the sample size as a percent:\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1) WITH SAMPLE = 50 PERCENT;\n```\n\n### D. Create single-column statistics on only some of the rows\n\nAnother option, you can create statistics on a portion of the rows in your table. This is called a filtered statistic.\n\nFor example, you could use filtered statistics when you plan to query a specific partition of a large partitioned table. By creating statistics on only the partition values, the accuracy of the statistics will improve, and therefore improve query performance.\n\nThis example creates statistics on a range of values. The values could easily be defined to match the range of values in a partition.\n\n```\nCREATE STATISTICS stats_col1 ON table1(col1) WHERE col1 > '2000101' AND col1 < '20001231';\n```\n\n> [AZURE.NOTE] For the query optimizer to consider using filtered statistics when it chooses the distributed query plan, the query must fit inside the definition of the statistics object. Using the previous example, the query's where clause needs to specify col1 values between 2000101 and 20001231.\n\n### E. Create single-column statistics with all the options\n\nYou can, of course, combine the options together. The example below creates a filtered statistics object with a custom sample size:\n\n```\nCREATE STATISTICS stats_col1 ON table1 (col1) WHERE col1 > '2000101' AND col1 < '20001231' WITH SAMPLE = 50 PERCENT;\n```\n\nFor the full reference, see [CREATE STATISTICS][] on MSDN.\n\n### F. Create multi-column statistics\n\nTo create a multi-column statistics, simply use the previous examples, but specify more columns.\n\n> [AZURE.NOTE] The histogram, which is used to estimate number of rows in the query result, is only available for the first column listed in the statistics object definition.\n\nIn this example, the histogram is on *product\\_category*. Cross-column statistics are calculated on *product\\_category* and *product\\_sub_c\\ategory*:\n\n```\nCREATE STATISTICS stats_2cols ON table1 (product_category, product_sub_category) WHERE product_category > '2000101' AND product_category < '20001231' WITH SAMPLE = 50 PERCENT;\n```\n\nSince there is a correlation between *product\\_category* and *product\\_sub\\_category*, a multi-column stat can be useful if these columns are accessed at the same time.\n\n### G. Create statistics on all the columns in a table\n\nOne way to create statistics is to issues CREATE STATISTICS commands after creating the table.\n\n```\nCREATE TABLE dbo.table1 \n(\n   col1 int\n,  col2 int\n,  col3 int\n)\nWITH\n  (\n    CLUSTERED COLUMNSTORE INDEX\n  )\n;\n\nCREATE STATISTICS stats_col1 on dbo.table1 (col1);\nCREATE STATISTICS stats_col2 on dbo.table2 (col2);\nCREATE STATISTICS stats_col3 on dbo.table3 (col3);\n```\n\n### H. Use a stored procedure to create statistics on all columns in a database\n\nSQL Data Warehouse does not have a system stored procedure equivalent to [sp_create_stats][] in SQL Server. This stored procedure creates a single column statistics object on every column of the database that doesn't already have statistics.\n\nThis will help you get started with your database design. Feel free to adapt it to your needs.\n\n```\nCREATE PROCEDURE    [dbo].[prc_sqldw_create_stats]\n(   @create_type    tinyint -- 1 default 2 Fullscan 3 Sample\n,   @sample_pct     tinyint\n)\nAS\n\nIF @create_type NOT IN (1,2,3)\nBEGIN\n    THROW 151000,'Invalid value for @stats_type parameter. Valid range 1 (default), 2 (fullscan) or 3 (sample).',1;\nEND;\n\nIF @sample_pct IS NULL\nBEGIN;\n    SET @sample_pct = 20;\nEND;\n\nCREATE TABLE #stats_ddl\nWITH    (   DISTRIBUTION    = HASH([seq_nmbr])\n        ,   LOCATION        = USER_DB\n        )\nAS\nWITH T\nAS\n(\nSELECT      t.[name]                        AS [table_name]\n,           s.[name]                        AS [table_schema_name]\n,           c.[name]                        AS [column_name]\n,           c.[column_id]                   AS [column_id]\n,           t.[object_id]                   AS [object_id]\n,           ROW_NUMBER()\n            OVER(ORDER BY (SELECT NULL))    AS [seq_nmbr]\nFROM        sys.[tables] t\nJOIN        sys.[schemas] s         ON  t.[schema_id]       = s.[schema_id]\nJOIN        sys.[columns] c         ON  t.[object_id]       = c.[object_id]\nLEFT JOIN   sys.[stats_columns] l   ON  l.[object_id]       = c.[object_id]\n                                    AND l.[column_id]       = c.[column_id]\n                                    AND l.[stats_column_id] = 1\nWHERE       l.[object_id] IS NULL\n)\nSELECT  [table_schema_name]\n,       [table_name]\n,       [column_name]\n,       [column_id]\n,       [object_id]\n,       [seq_nmbr]\n,       CASE @create_type\n        WHEN 1\n        THEN    'CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+')'\n        WHEN 2\n        THEN    'CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+') WITH FULLSCAN'\n        WHEN 3\n        THEN    'CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+') WITH SAMPLE '+@sample_pct+'PERCENT'\n        END AS create_stat_ddl\nFROM T\n;\n\nDECLARE @i INT              = 1\n,       @t INT              = (SELECT COUNT(*) FROM #stats_ddl)\n,       @s NVARCHAR(4000)   = N''\n;\n\nWHILE @i <= @t\nBEGIN\n    SET @s=(SELECT create_stat_ddl FROM #stats_ddl WHERE seq_nmbr = @i);\n\n    PRINT @s\n    EXEC sp_executesql @s\n    SET @i+=1;\nEND\n\nDROP TABLE #stats_ddl;\n```\n\nTo create statistics on all columns in the table with this procedure, simply call the procedure.\n\n```\nprc_sqldw_create_stats;\n```\n\n## Examples: update statistics\n\nTo update statistics, you can:\n\n1. Update one statistics object. Specify the name of the statistics object you wish to update.\n2. Update all statistics objects on a table. Specify the name of the table instead of one specific statistics object.\n\n\n### A. Update one specific statistics object ###\nUse the following syntax to update a specific statistics object:\n\n```\nUPDATE STATISTICS [schema_name].[table_name]([stat_name]);\n```\n\nFor example:\n\n```\nUPDATE STATISTICS [dbo].[table1] ([stats_col1]);\n```\n\nBy updating specific statistics objects, you can minimize the time and resources required to manage statistics. This requires some thought, though, to choose the best statistics objects to update.\n\n\n### B. Update all statistics on a table ###\nThis shows a simple method for updating all the statistics objects on a table.\n\n```\nUPDATE STATISTICS [schema_name].[table_name];\n```\n\nFor example:\n\n```\nUPDATE STATISTICS dbo.table1;\n```\n\nThis statement is easy to use. Just remember this updates all statistics on the table, and therefore might perform more work than is necessary. If the performance is not an issue, this is definitely the easiest and most complete way to guarantee statistics are up-to-date.\n\n> [AZURE.NOTE] When updating all statistics on a table, SQL Data Warehouse does a scan to sample the table for each statistics. If the table is large, has many columns, and many statistics, it might be more efficient to udpate individual statistics based on need.\n\nFor an implementation of an `UPDATE STATISTICS` procedure please see the [temporary tables] article. The implementation method is slightly different to the `CREATE STATISTICS` procedure above but the end result is the same.\n\nFor the full syntax, see [Update Statistics][] on MSDN.\n\n## Statistics metadata\nThere are several system view and functions that you can use to find information about statistics. For example, you can see if a statistics object might be out-of-date by using the stats-date function to see when statistics were last created or updated.\n\n### Catalog views for statistics\nThese system views provide information about statistics:\n\n| Catalog View | Description |\n| :----------- | :---------- |\n| [sys.columns][]  | One row for each column. |\n| [sys.objects][]  | One row for each object in the database. |  |\n| [sys.schemas][]  | One row for each schema in the database. |  |\n| [sys.stats][] | One row for each statistics object. |\n| [sys.stats_columns][] | One row for each column in the statistics object. Links back to sys.columns. |\n| [sys.tables][] | One row for each table (includes external tables). |\n| [sys.table_types][] | One row for each data type. |\n\n\n### System functions for statistics\nThese system functions are useful for working with statistics:\n\n| System Function | Description |\n| :-------------- | :---------- |\n| [STATS_DATE][]    | Date the statistics object was last updated. |\n| [DBCC SHOW_STATISTICS][] | Provides summary level and detailed information about the distribution of values as understood by the statistics object. |\n\n### Combine statistics columns and functions into one view\n\nThis view brings columns that relate to statistics, and results from the [STATS_DATE()][]function together.\n\n```\nCREATE VIEW dbo.vstats_columns\nAS\nSELECT\n        sm.[name]                           AS [schema_name]\n,       tb.[name]                           AS [table_name]\n,       st.[name]                           AS [stats_name]\n,       st.[filter_definition]              AS [stats_filter_defiinition]\n,       st.[has_filter]                     AS [stats_is_filtered]\n,       STATS_DATE(st.[object_id],st.[stats_id])\n                                            AS [stats_last_updated_date]\n,       co.[name]                           AS [stats_column_name]\n,       ty.[name]                           AS [column_type]\n,       co.[max_length]                     AS [column_max_length]\n,       co.[precision]                      AS [column_precision]\n,       co.[scale]                          AS [column_scale]\n,       co.[is_nullable]                    AS [column_is_nullable]\n,       co.[collation_name]                 AS [column_collation_name]\n,       QUOTENAME(sm.[name])+'.'+QUOTENAME(tb.[name])\n                                            AS two_part_name\n,       QUOTENAME(DB_NAME())+'.'+QUOTENAME(sm.[name])+'.'+QUOTENAME(tb.[name])\n                                            AS three_part_name\nFROM    sys.objects                         AS ob\nJOIN    sys.stats           AS st ON    ob.[object_id]      = st.[object_id]\nJOIN    sys.stats_columns   AS sc ON    st.[stats_id]       = sc.[stats_id]\n                            AND         st.[object_id]      = sc.[object_id]\nJOIN    sys.columns         AS co ON    sc.[column_id]      = co.[column_id]\n                            AND         sc.[object_id]      = co.[object_id]\nJOIN    sys.types           AS ty ON    co.[user_type_id]   = ty.[user_type_id]\nJOIN    sys.tables          AS tb ON  co.[object_id]        = tb.[object_id]\nJOIN    sys.schemas         AS sm ON  tb.[schema_id]        = sm.[schema_id]\nWHERE   1=1 \nAND     sts.[user_created] = 1\n;\n```\n\n## DBCC SHOW_STATISTICS() examples\n\nDBCC SHOW_STATISTICS() shows the data held within a statistics object. This data comes in three parts.\n\n1. Header\n2. Density Vector\n3. Histogram\n\nThe header metadata about the statistics. The histogram displays the distribution of values in the first key column of the statistics object. The density vector measures cross-column correlation. SQLDW computes cardinality estimates with any of the data in the statistics object.\n\n### Show header, density, and histogram\n\nThis simple example shows all three parts of a statistics object.\n\n```\nDBCC SHOW_STATISTICS([<schema_name>.<table_name>],<stats_name>)\n```\n\nFor example:\n\n```\nDBCC SHOW_STATISTICS (dbo.table1, stats_col1);\n```\n\n### Show one or more parts of DBCC SHOW_STATISTICS();\n\nIf you are only interested in viewing specific parts, use the `WITH` clause and specify which parts you want to see:\n\n```\nDBCC SHOW_STATISTICS([<schema_name>.<table_name>],<stats_name>) WITH stat_header, histogram, density_vector\n```\n\nFor example:\n\n```\nDBCC SHOW_STATISTICS (dbo.table1, stats_col1) WITH histogram, density_vector\n```\n\n## DBCC SHOW_STATISTICS() differences\nDBCC SHOW_STATISTICS() is more strictly implemented in SQL Data Warehouse compared to SQL Server.\n\n1. Undocumented features are not supported\n- Cannot use Stats_stream\n- Cannot join results for specific subsets of statistics data e.g. (STAT_HEADER JOIN DENSITY_VECTOR)\n2. NO_INFOMSGS cannot be set for message suppression\n3. Square brackets around statistics names cannot be used\n4. Cannot use column names to identify statistics objects\n5. Custom error 2767 is not supported\n\n\n## Next steps\nFor more development tips, see [SQL Data Warehouse development overview][].\n\n<!--Image references-->\n\n<!--Link references--In actual articles, you only need a single period before the slash.-->\n[SQL Data Warehouse development overview]:  ./sql-data-warehouse-overview-develop/\n[temporary tables]:     ./sql-data-warehouse-develop-temporary-tables/\n\n<!-- External Links -->\n[Cardinality Estimation]:https://msdn.microsoft.com/library/dn600374.aspx\n[CREATE STATISTICS]:https://msdn.microsoft.com/library/ms188038.aspx\n[DBCC SHOW_STATISTICS]:https://msdn.microsoft.com/library/ms174384.aspx\n[Statistics]:https://msdn.microsoft.com/library/ms190397.aspx\n[STATS_DATE]:https://msdn.microsoft.com/library/ms190330.aspx\n[sys.columns]:https://msdn.microsoft.com/library/ms176106.aspx\n[sys.objects]:https://msdn.microsoft.com/library/ms190324.aspx\n[sys.schemas]:https://msdn.microsoft.com/library/ms190324.aspx\n[sys.stats]:https://msdn.microsoft.com/library/ms177623.aspx\n[sys.stats_columns]:https://msdn.microsoft.com/library/ms187340.aspx\n[sys.tables]:https://msdn.microsoft.com/library/ms187406.aspx\n[sys.table_types]:https://msdn.microsoft.com/library/bb510623.aspx\n[UPDATE STATISTICS]:https://msdn.microsoft.com/library/ms187348.aspx\n"
}