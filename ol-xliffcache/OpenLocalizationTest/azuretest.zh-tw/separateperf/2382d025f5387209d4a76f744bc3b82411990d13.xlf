<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Variable assets in Azure Automation | Microsoft Azure</source>
          <target state="new">Variable assets in Azure Automation | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Variable assets are values that are available to all runbooks in Azure Automation.</source>
          <target state="new">Variable assets are values that are available to all runbooks in Azure Automation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains the details of variables and how to work with them in both textual and graphical authoring.</source>
          <target state="new">This article explains the details of variables and how to work with them in both textual and graphical authoring.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Variable assets in Azure Automation</source>
          <target state="new">Variable assets in Azure Automation</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Variable assets are values that are available to all runbooks in your automation account.</source>
          <target state="new">Variable assets are values that are available to all runbooks in your automation account.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>They can be created, modified, and retrieved from the Azure portal, Windows PowerShell, and from within a runbook.</source>
          <target state="new">They can be created, modified, and retrieved from the Azure portal, Windows PowerShell, and from within a runbook.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Automation variables are useful for the following scenarios:</source>
          <target state="new">Automation variables are useful for the following scenarios:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Share a value between multiple runbooks.</source>
          <target state="new">Share a value between multiple runbooks.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Share a value between multiple jobs from the same runbook.</source>
          <target state="new">Share a value between multiple jobs from the same runbook.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Manage a value from the portal or from the Windows PowerShell command line that is used by runbooks.</source>
          <target state="new">Manage a value from the portal or from the Windows PowerShell command line that is used by runbooks.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Automation variables are persisted so that they continue to be available even if the runbook fails.</source>
          <target state="new">Automation variables are persisted so that they continue to be available even if the runbook fails.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This also allows a value to be set by one runbook that is then used by another, or is used by the same runbook the next time that it is run.</source>
          <target state="new">This also allows a value to be set by one runbook that is then used by another, or is used by the same runbook the next time that it is run.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When a variable is created, you can specify that it be stored encrypted.</source>
          <target state="new">When a variable is created, you can specify that it be stored encrypted.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When a variable is encrypted, it is stored securely in Azure Automation, and its value cannot be retrieved from the <bpt id="p1">[</bpt>Get-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913772.aspx)</ept> cmdlet that ships as part of the Azure PowerShell module.</source>
          <target state="new">When a variable is encrypted, it is stored securely in Azure Automation, and its value cannot be retrieved from the <bpt id="p1">[</bpt>Get-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913772.aspx)</ept> cmdlet that ships as part of the Azure PowerShell module.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The only way that an encrypted value can be retrieved is from the <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept> activity in a runbook.</source>
          <target state="new">The only way that an encrypted value can be retrieved is from the <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept> activity in a runbook.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Secure assets in Azure Automation include credentials, certificates, connections, and encrypted variables.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Secure assets in Azure Automation include credentials, certificates, connections, and encrypted variables.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These assets are encrypted and stored in the Azure Automation using a unique key that is generated for each automation account.</source>
          <target state="new">These assets are encrypted and stored in the Azure Automation using a unique key that is generated for each automation account.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This key is encrypted by a master certificate and stored in Azure Automation.</source>
          <target state="new">This key is encrypted by a master certificate and stored in Azure Automation.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Before storing a secure asset, the key for the automation account is decrypted using the master certificate and then used to encrypt the asset.</source>
          <target state="new">Before storing a secure asset, the key for the automation account is decrypted using the master certificate and then used to encrypt the asset.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Variable types</source>
          <target state="new">Variable types</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you create a variable with the Azure portal, you must specify a data type from the dropdown list so the portal can display the appropriate control for entering the variable value.</source>
          <target state="new">When you create a variable with the Azure portal, you must specify a data type from the dropdown list so the portal can display the appropriate control for entering the variable value.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The variable is not restricted to this data type, but you must set the variable using Windows PowerShell if you want to specify a value of a different type.</source>
          <target state="new">The variable is not restricted to this data type, but you must set the variable using Windows PowerShell if you want to specify a value of a different type.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you specify <bpt id="p1">**</bpt>Not defined<ept id="p1">**</ept>, then the value of the variable will be set to <bpt id="p2">**</bpt>$null<ept id="p2">**</ept>, and you must set the value with the <bpt id="p3">[</bpt>Set-AzureAutomationVariable<ept id="p3">](http://msdn.microsoft.com/library/dn913767.aspx)</ept> cmdlet or <bpt id="p4">**</bpt>Set-AutomationVariable<ept id="p4">**</ept> activity.</source>
          <target state="new">If you specify <bpt id="p1">**</bpt>Not defined<ept id="p1">**</ept>, then the value of the variable will be set to <bpt id="p2">**</bpt>$null<ept id="p2">**</ept>, and you must set the value with the <bpt id="p3">[</bpt>Set-AzureAutomationVariable<ept id="p3">](http://msdn.microsoft.com/library/dn913767.aspx)</ept> cmdlet or <bpt id="p4">**</bpt>Set-AutomationVariable<ept id="p4">**</ept> activity.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You cannot create or change the value for a complex variable type in the portal, but you can provide a value of any type using Windows PowerShell.</source>
          <target state="new">You cannot create or change the value for a complex variable type in the portal, but you can provide a value of any type using Windows PowerShell.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Complex types will be returned as a <bpt id="p1">[</bpt>PSCustomObject<ept id="p1">](http://msdn.microsoft.com/library/system.management.automation.pscustomobject.aspx)</ept>.</source>
          <target state="new">Complex types will be returned as a <bpt id="p1">[</bpt>PSCustomObject<ept id="p1">](http://msdn.microsoft.com/library/system.management.automation.pscustomobject.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can store multiple values to a single variable by creating an array or hashtable and saving it to the variable.</source>
          <target state="new">You can store multiple values to a single variable by creating an array or hashtable and saving it to the variable.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Cmdlets and workflow activities</source>
          <target state="new">Cmdlets and workflow activities</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The cmdlets in the following table are used to create and manage Automation variables with Windows PowerShell.</source>
          <target state="new">The cmdlets in the following table are used to create and manage Automation variables with Windows PowerShell.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>They ship as part of the <bpt id="p1">[</bpt>Azure PowerShell module<ept id="p1">](../powershell-install-configure.md)</ept> which is available for use in Automation runbooks.</source>
          <target state="new">They ship as part of the <bpt id="p1">[</bpt>Azure PowerShell module<ept id="p1">](../powershell-install-configure.md)</ept> which is available for use in Automation runbooks.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Cmdlets</source>
          <target state="new">Cmdlets</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Get-AzureAutomationVariable</source>
          <target state="new">Get-AzureAutomationVariable</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieves the value of an existing variable.</source>
          <target state="new">Retrieves the value of an existing variable.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>New-AzureAutomationVariable</source>
          <target state="new">New-AzureAutomationVariable</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a new variable and sets its value.</source>
          <target state="new">Creates a new variable and sets its value.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remove-AzureAutomationVariable</source>
          <target state="new">Remove-AzureAutomationVariable</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removes an existing variable.</source>
          <target state="new">Removes an existing variable.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Set-AzureAutomationVariable</source>
          <target state="new">Set-AzureAutomationVariable</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Sets the value for an existing variable.</source>
          <target state="new">Sets the value for an existing variable.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The workflow activities in the following table are used to access Automation variables in a runbook.</source>
          <target state="new">The workflow activities in the following table are used to access Automation variables in a runbook.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>They are only available for use in a runbook and do not ship as part of the Azure PowerShell module.</source>
          <target state="new">They are only available for use in a runbook and do not ship as part of the Azure PowerShell module.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Workflow Activities</source>
          <target state="new">Workflow Activities</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Get-AutomationVariable</source>
          <target state="new">Get-AutomationVariable</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the value of an existing variable.</source>
          <target state="new">Retrieves the value of an existing variable.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Set-AutomationVariable</source>
          <target state="new">Set-AutomationVariable</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Sets the value for an existing variable.</source>
          <target state="new">Sets the value for an existing variable.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You should avoid using variables in the –Name parameter of <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept>  in a runbook since this can complicate discovering dependencies between runbooks and Automation variables at design time.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You should avoid using variables in the –Name parameter of <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept>  in a runbook since this can complicate discovering dependencies between runbooks and Automation variables at design time.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Creating a new Automation variable</source>
          <target state="new">Creating a new Automation variable</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To create a new variable with the Azure portal</source>
          <target state="new">To create a new variable with the Azure portal</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>From your automation account, click <bpt id="p1">**</bpt>Assets<ept id="p1">**</ept> at the top of the window.</source>
          <target state="new">From your automation account, click <bpt id="p1">**</bpt>Assets<ept id="p1">**</ept> at the top of the window.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>At the bottom of the window, click <bpt id="p1">**</bpt>Add Setting<ept id="p1">**</ept>.</source>
          <target state="new">At the bottom of the window, click <bpt id="p1">**</bpt>Add Setting<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add Variable<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Add Variable<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Complete the wizard and click the checkbox to save the new variable.</source>
          <target state="new">Complete the wizard and click the checkbox to save the new variable.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To create a new variable with the Azure preview portal</source>
          <target state="new">To create a new variable with the Azure preview portal</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>From your automation account, click the <bpt id="p1">**</bpt>Assets<ept id="p1">**</ept> part to open the <bpt id="p2">**</bpt>Assets<ept id="p2">**</ept> blade.</source>
          <target state="new">From your automation account, click the <bpt id="p1">**</bpt>Assets<ept id="p1">**</ept> part to open the <bpt id="p2">**</bpt>Assets<ept id="p2">**</ept> blade.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> part to open the <bpt id="p2">**</bpt>Variables<ept id="p2">**</ept> blade.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> part to open the <bpt id="p2">**</bpt>Variables<ept id="p2">**</ept> blade.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add a variable<ept id="p1">**</ept> at the top of the blade.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Add a variable<ept id="p1">**</ept> at the top of the blade.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Complete the form and click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to save the new variable.</source>
          <target state="new">Complete the form and click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to save the new variable.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To create a new variable with Windows PowerShell</source>
          <target state="new">To create a new variable with Windows PowerShell</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>New-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913771.aspx)</ept> cmdlet creates a new variable and sets its initial value.</source>
          <target state="new">The <bpt id="p1">[</bpt>New-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913771.aspx)</ept> cmdlet creates a new variable and sets its initial value.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can retrieve the value using <bpt id="p1">[</bpt>Get-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913772.aspx)</ept>.</source>
          <target state="new">You can retrieve the value using <bpt id="p1">[</bpt>Get-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913772.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the value is a simple type, then that same type is returned.</source>
          <target state="new">If the value is a simple type, then that same type is returned.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If it’s a complex type, then a <bpt id="p1">**</bpt>PSCustomObject<ept id="p1">**</ept> is returned.</source>
          <target state="new">If it’s a complex type, then a <bpt id="p1">**</bpt>PSCustomObject<ept id="p1">**</ept> is returned.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following sample commands show how to create a variable of type string and then return its value.</source>
          <target state="new">The following sample commands show how to create a variable of type string and then return its value.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following sample commands show how to create a variable with a complex type and then return its properties.</source>
          <target state="new">The following sample commands show how to create a variable with a complex type and then return its properties.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this case, a virtual machine object from <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> is used.</source>
          <target state="new">In this case, a virtual machine object from <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> is used.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Using a variable in a runbook</source>
          <target state="new">Using a variable in a runbook</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Set-AutomationVariable<ept id="p1">**</ept> activity to set the value of an Automation variable in a runbook and the <bpt id="p2">**</bpt>Get-AutomationVariable<ept id="p2">**</ept> to retrieve it.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>Set-AutomationVariable<ept id="p1">**</ept> activity to set the value of an Automation variable in a runbook and the <bpt id="p2">**</bpt>Get-AutomationVariable<ept id="p2">**</ept> to retrieve it.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You shouldn't use the <bpt id="p1">**</bpt>Set-AzureAutomationVariable<ept id="p1">**</ept> or  <bpt id="p2">**</bpt>Get-AzureAutomationVariable<ept id="p2">**</ept> cmdlets in a runbook since they are less efficient than the workflow activities.</source>
          <target state="new">You shouldn't use the <bpt id="p1">**</bpt>Set-AzureAutomationVariable<ept id="p1">**</ept> or  <bpt id="p2">**</bpt>Get-AzureAutomationVariable<ept id="p2">**</ept> cmdlets in a runbook since they are less efficient than the workflow activities.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You also cannot retrieve the value of secure variables with <bpt id="p1">**</bpt>Get-AzureAutomationVariable<ept id="p1">**</ept>.</source>
          <target state="new">You also cannot retrieve the value of secure variables with <bpt id="p1">**</bpt>Get-AzureAutomationVariable<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The only way to create a new variable from within a runbook is to use the <bpt id="p1">[</bpt>New-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913771.aspx)</ept>  cmdlet.</source>
          <target state="new">The only way to create a new variable from within a runbook is to use the <bpt id="p1">[</bpt>New-AzureAutomationVariable<ept id="p1">](http://msdn.microsoft.com/library/dn913771.aspx)</ept>  cmdlet.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Textual runbook samples</source>
          <target state="new">Textual runbook samples</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Setting and retrieving a simple value from a variable</source>
          <target state="new">Setting and retrieving a simple value from a variable</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following sample commands show how to set and retrieve a variable in a textual runbook.</source>
          <target state="new">The following sample commands show how to set and retrieve a variable in a textual runbook.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this sample, it is assumed that variables of type integer named <bpt id="p1">*</bpt>NumberOfIterations<ept id="p1">*</ept> and <bpt id="p2">*</bpt>NumberOfRunnings<ept id="p2">*</ept> and a variable of type string named <bpt id="p3">*</bpt>SampleMessage<ept id="p3">*</ept> have already been created.</source>
          <target state="new">In this sample, it is assumed that variables of type integer named <bpt id="p1">*</bpt>NumberOfIterations<ept id="p1">*</ept> and <bpt id="p2">*</bpt>NumberOfRunnings<ept id="p2">*</ept> and a variable of type string named <bpt id="p3">*</bpt>SampleMessage<ept id="p3">*</ept> have already been created.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Setting and retrieving a complex object in a variable</source>
          <target state="new">Setting and retrieving a complex object in a variable</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following sample code shows how to update a variable with a complex value in a textual runbook.</source>
          <target state="new">The following sample code shows how to update a variable with a complex value in a textual runbook.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this sample, an Azure virtual machine is retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and saved to an existing Automation variable.</source>
          <target state="new">In this sample, an Azure virtual machine is retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and saved to an existing Automation variable.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a PSCustomObject.</source>
          <target state="new">As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a PSCustomObject.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the following code, the value is retrieved from the variable and used to start the virtual machine.</source>
          <target state="new">In the following code, the value is retrieved from the variable and used to start the virtual machine.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Setting and retrieving a collection in a variable</source>
          <target state="new">Setting and retrieving a collection in a variable</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following sample code shows how to use a variable with a collection of complex values in a textual runbook.</source>
          <target state="new">The following sample code shows how to use a variable with a collection of complex values in a textual runbook.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this sample, multiple Azure virtual machines are retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and saved to an existing Automation variable.</source>
          <target state="new">In this sample, multiple Azure virtual machines are retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and saved to an existing Automation variable.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a collection of PSCustomObjects.</source>
          <target state="new">As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a collection of PSCustomObjects.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In the following code, the collection is retrieved from the variable and used to start each virtual machine.</source>
          <target state="new">In the following code, the collection is retrieved from the variable and used to start each virtual machine.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Graphical runbook samples</source>
          <target state="new">Graphical runbook samples</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In a graphical runbook, you add the <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> by right-clicking on the variable in the Library pane of the graphical editor and selecting the activity you want.</source>
          <target state="new">In a graphical runbook, you add the <bpt id="p1">**</bpt>Get-AutomationVariable<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> by right-clicking on the variable in the Library pane of the graphical editor and selecting the activity you want.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Add variable to canvas</source>
          <target state="new">Add variable to canvas</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Setting values in a variable</source>
          <target state="new">Setting values in a variable</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following image shows sample activities to update a variable with a simple value in a graphical runbook.</source>
          <target state="new">The following image shows sample activities to update a variable with a simple value in a graphical runbook.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In this sample, a single Azure virtual machine is retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and the computer name is saved to an existing Automation variable with a type of String.</source>
          <target state="new">In this sample, a single Azure virtual machine is retrieved with <bpt id="p1">**</bpt>Get-AzureVM<ept id="p1">**</ept> and the computer name is saved to an existing Automation variable with a type of String.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It doesn't matter whether the <bpt id="p1">[</bpt>link is a pipeline or sequence<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> since we only expect a single object in the output.</source>
          <target state="new">It doesn't matter whether the <bpt id="p1">[</bpt>link is a pipeline or sequence<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> since we only expect a single object in the output.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Set simple variable</source>
          <target state="new">Set simple variable</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following image shows the activities used to update a variable with a complex value in a graphical runbook.</source>
          <target state="new">The following image shows the activities used to update a variable with a complex value in a graphical runbook.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The only change from the previous example is not specifying a <bpt id="p1">**</bpt>Field path<ept id="p1">**</ept> for the <bpt id="p2">**</bpt>Activity output<ept id="p2">**</ept> on the <bpt id="p3">**</bpt>Set-AutomationVariable<ept id="p3">**</ept> activity so that the object is stored instead of just a property of the object.</source>
          <target state="new">The only change from the previous example is not specifying a <bpt id="p1">**</bpt>Field path<ept id="p1">**</ept> for the <bpt id="p2">**</bpt>Activity output<ept id="p2">**</ept> on the <bpt id="p3">**</bpt>Set-AutomationVariable<ept id="p3">**</ept> activity so that the object is stored instead of just a property of the object.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a PSCustomObject.</source>
          <target state="new">As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a PSCustomObject.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Set complex variable</source>
          <target state="new">Set complex variable</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following image shows similar functionality as the previous example, with multiple virtual machines saved to the variable.</source>
          <target state="new">The following image shows similar functionality as the previous example, with multiple virtual machines saved to the variable.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>sequence link<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> must be used here so that the <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> activity receives the entire set of virtual machines as one collection.</source>
          <target state="new">A <bpt id="p1">[</bpt>sequence link<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> must be used here so that the <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> activity receives the entire set of virtual machines as one collection.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt>pipeline link<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> was used, then the <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> activity would run separately for each object with the result being that only the last virtual machine in the collection would be saved.</source>
          <target state="new">If a <bpt id="p1">[</bpt>pipeline link<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> was used, then the <bpt id="p2">**</bpt>Set-AutomationVariable<ept id="p2">**</ept> activity would run separately for each object with the result being that only the last virtual machine in the collection would be saved.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a collection of PSCustomObjects.</source>
          <target state="new">As explained in <bpt id="p1">[</bpt>Variable types<ept id="p1">](#variable-types)</ept>, this is stored as a collection of PSCustomObjects.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Set complex collection variable</source>
          <target state="new">Set complex collection variable</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Retrieving values from a variable</source>
          <target state="new">Retrieving values from a variable</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The following image shows sample activities that retrieve and use a variable in a graphical runbook.</source>
          <target state="new">The following image shows sample activities that retrieve and use a variable in a graphical runbook.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The first activity retrieves the virtual machines that were saved to the variable in the previous example.</source>
          <target state="new">The first activity retrieves the virtual machines that were saved to the variable in the previous example.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The link needs to be a <bpt id="p1">[</bpt>pipeline<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> so that the <bpt id="p2">**</bpt>Start-AzureVM<ept id="p2">**</ept> activity runs once for each object sent from the <bpt id="p3">**</bpt>Get-AutomationVariable<ept id="p3">**</ept> activity.</source>
          <target state="new">The link needs to be a <bpt id="p1">[</bpt>pipeline<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> so that the <bpt id="p2">**</bpt>Start-AzureVM<ept id="p2">**</ept> activity runs once for each object sent from the <bpt id="p3">**</bpt>Get-AutomationVariable<ept id="p3">**</ept> activity.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This will work the same whether a a single object or multiple objects are stored in the variable.</source>
          <target state="new">This will work the same whether a a single object or multiple objects are stored in the variable.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Start-AzureVM<ept id="p1">**</ept> activity uses properties of the PSCustomObject that represents each virtual machine.</source>
          <target state="new">The <bpt id="p1">**</bpt>Start-AzureVM<ept id="p1">**</ept> activity uses properties of the PSCustomObject that represents each virtual machine.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Get complex variable</source>
          <target state="new">Get complex variable</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following image shows how to filter the objects that are stored to a variable in a graphical runbook.</source>
          <target state="new">The following image shows how to filter the objects that are stored to a variable in a graphical runbook.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>condition<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> is added to the link in the previous example to filter only those virtual machines that were stopped when the variable was set.</source>
          <target state="new">A <bpt id="p1">[</bpt>condition<ept id="p1">](automation-graphical-authoring-intro.md#links-and-workflow)</ept> is added to the link in the previous example to filter only those virtual machines that were stopped when the variable was set.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Get complex variable filtered</source>
          <target state="new">Get complex variable filtered</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Related articles</source>
          <target state="new">Related articles</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Links in graphical authoring</source>
          <target state="new">Links in graphical authoring</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2382d025f5387209d4a76f744bc3b82411990d13</xliffext:olfilehash>
  </header>
</xliff>