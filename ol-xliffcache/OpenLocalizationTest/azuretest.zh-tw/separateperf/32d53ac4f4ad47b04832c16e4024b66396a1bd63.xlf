<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Enable offline sync for your Azure Mobile App (Windows 8.1) | Microsoft Azure</source>
          <target state="new">Enable offline sync for your Azure Mobile App (Windows 8.1) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use an Azure Mobile App to cache and sync offline data in your Windows Store application</source>
          <target state="new">Learn how to use an Azure Mobile App to cache and sync offline data in your Windows Store application</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enable offline sync for your Windows app</source>
          <target state="new">Enable offline sync for your Windows app</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to add offline support to a Windows 8.1 Store or Phone app using an Azure Mobile App backend.</source>
          <target state="new">This tutorial shows you how to add offline support to a Windows 8.1 Store or Phone app using an Azure Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Offline sync allows end-users to interact with a mobile app--viewing, adding, or modifying data--even when there is no network connection.</source>
          <target state="new">Offline sync allows end-users to interact with a mobile app--viewing, adding, or modifying data--even when there is no network connection.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Changes are stored in a local database; once the device is back online, these changes are synced with the remote backend.</source>
          <target state="new">Changes are stored in a local database; once the device is back online, these changes are synced with the remote backend.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this tutorial, you will update the Windows 8.1 app project from the tutorial [Create a Windows app] to support the offline features of Azure Mobile Apps.</source>
          <target state="new">In this tutorial, you will update the Windows 8.1 app project from the tutorial [Create a Windows app] to support the offline features of Azure Mobile Apps.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you do not use the downloaded quick start server project, you must add the data access extension packages to your project.</source>
          <target state="new">If you do not use the downloaded quick start server project, you must add the data access extension packages to your project.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about server extension packages, see <bpt id="p1">[</bpt>Work with the .NET backend server SDK for Azure Mobile Apps<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept>.</source>
          <target state="new">For more information about server extension packages, see <bpt id="p1">[</bpt>Work with the .NET backend server SDK for Azure Mobile Apps<ept id="p1">](app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To learn more about the offline sync feature, see the topic [Offline Data Sync in Azure Mobile Apps].</source>
          <target state="new">To learn more about the offline sync feature, see the topic [Offline Data Sync in Azure Mobile Apps].</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="new">Requirements</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This tutorial requires the following:</source>
          <target state="new">This tutorial requires the following:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Visual Studio 2013 running on Windows 8.1.</source>
          <target state="new">Visual Studio 2013 running on Windows 8.1.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Completion of [Create a Windows app][create a windows app].</source>
          <target state="new">Completion of [Create a Windows app][create a windows app].</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[Azure Mobile Services SQLite Store version 2.0.0-beta][sqlite store nuget]</source>
          <target state="new">[Azure Mobile Services SQLite Store version 2.0.0-beta][sqlite store nuget]</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SQLite for Windows 8.1</source>
          <target state="new">SQLite for Windows 8.1</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Update the client app to support offline features</source>
          <target state="new">Update the client app to support offline features</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Azure Mobile App offline features allow you to interact with a local database when you are in an offline scenario.</source>
          <target state="new">Azure Mobile App offline features allow you to interact with a local database when you are in an offline scenario.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To use these features in your app, you initialize a <ph id="ph1">`MobileServiceClient.SyncContext`</ph> to a local store.</source>
          <target state="new">To use these features in your app, you initialize a <ph id="ph1">`MobileServiceClient.SyncContext`</ph> to a local store.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Then reference your table through the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface.</source>
          <target state="new">Then reference your table through the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this tutorial we use SQLite for the local store.</source>
          <target state="new">In this tutorial we use SQLite for the local store.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Install the SQLite runtime for Windows 8.1 and Windows Phone 8.1.</source>
          <target state="new">Install the SQLite runtime for Windows 8.1 and Windows Phone 8.1.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 8.1 Runtime:<ept id="p1">**</ept> Install [SQLite for Windows 8.1].</source>
          <target state="new"><bpt id="p1">**</bpt>Windows 8.1 Runtime:<ept id="p1">**</ept> Install [SQLite for Windows 8.1].</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Phone 8.1:<ept id="p1">**</ept> Install [SQLite for Windows Phone 8.1].</source>
          <target state="new"><bpt id="p1">**</bpt>Windows Phone 8.1:<ept id="p1">**</ept> Install [SQLite for Windows Phone 8.1].</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If you are using Internet Explorer, clicking the link to install SQLite may prompt you to download the .vsix as a .zip file.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If you are using Internet Explorer, clicking the link to install SQLite may prompt you to download the .vsix as a .zip file.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Save the file to a location on your hard drive with the .vsix extension instead of .zip.</source>
          <target state="new">Save the file to a location on your hard drive with the .vsix extension instead of .zip.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The double click the .vsix file in Windows Explorer to run the installation.</source>
          <target state="new">The double click the .vsix file in Windows Explorer to run the installation.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In Visual Studio open the project that you completed in the [Create a Windows app] tutorial.</source>
          <target state="new">In Visual Studio open the project that you completed in the [Create a Windows app] tutorial.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Install the <bpt id="p1">**</bpt>WindowsAzure.MobileServices.SQLiteStore<ept id="p1">**</ept> NuGet package for the Windows 8.1 runtime and Windows Phone 8.1 projects.</source>
          <target state="new">Install the <bpt id="p1">**</bpt>WindowsAzure.MobileServices.SQLiteStore<ept id="p1">**</ept> NuGet package for the Windows 8.1 runtime and Windows Phone 8.1 projects.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click the solution and click <bpt id="p1">**</bpt>Manage Nuget Packages for Solution<ept id="p1">**</ept> to run NuGet Package Manager.</source>
          <target state="new">In Solution Explorer, right click the solution and click <bpt id="p1">**</bpt>Manage Nuget Packages for Solution<ept id="p1">**</ept> to run NuGet Package Manager.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the "Online" tab, select the option "Include Prerelease" in the dropdown at the top.</source>
          <target state="new">In the "Online" tab, select the option "Include Prerelease" in the dropdown at the top.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Search for <bpt id="p1">**</bpt>SQLiteStore<ept id="p1">**</ept> to install the 2.0.0-beta of <ph id="ph1">`WindowsAzure.MobileServices.SQLiteStore`</ph>.</source>
          <target state="new">Search for <bpt id="p1">**</bpt>SQLiteStore<ept id="p1">**</ept> to install the 2.0.0-beta of <ph id="ph1">`WindowsAzure.MobileServices.SQLiteStore`</ph>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Then, add the NuGet reference to both the Windows Store 8.1 and Windows Phone 8.1 projects.</source>
          <target state="new">Then, add the NuGet reference to both the Windows Store 8.1 and Windows Phone 8.1 projects.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If the installation creates an additional reference to a different version of SQLite than you have installed, you will get a compilation error.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If the installation creates an additional reference to a different version of SQLite than you have installed, you will get a compilation error.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should resolve this error by removing the duplicate in the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node in your projects.</source>
          <target state="new">You should resolve this error by removing the duplicate in the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> node in your projects.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right click <bpt id="p1">**</bpt>References<ept id="p1">**</ept> for the Windows 8.1 Runtime and Windows Phone 8.1 platform projects and ensure there is a reference to SQLite, which is located in the <bpt id="p2">**</bpt>Extensions<ept id="p2">**</ept> section.</source>
          <target state="new">In Solution Explorer, right click <bpt id="p1">**</bpt>References<ept id="p1">**</ept> for the Windows 8.1 Runtime and Windows Phone 8.1 platform projects and ensure there is a reference to SQLite, which is located in the <bpt id="p2">**</bpt>Extensions<ept id="p2">**</ept> section.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows 8.1 Runtime</source>
          <target state="new">Windows 8.1 Runtime</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows Phone 8.1</source>
          <target state="new">Windows Phone 8.1</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>SQLite is a native library and requires that you choose a platform-specific architecture such as <bpt id="p1">**</bpt>x86<ept id="p1">**</ept>, <bpt id="p2">**</bpt>x64<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>ARM<ept id="p3">**</ept>.</source>
          <target state="new">SQLite is a native library and requires that you choose a platform-specific architecture such as <bpt id="p1">**</bpt>x86<ept id="p1">**</ept>, <bpt id="p2">**</bpt>x64<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>ARM<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Any CPU<ept id="p1">**</ept> is not supported.</source>
          <target state="new"><bpt id="p1">**</bpt>Any CPU<ept id="p1">**</ept> is not supported.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, click the Solution at the top, then change the processor architecture drop down box to one of the supported settings that you want to test.</source>
          <target state="new">In Solution Explorer, click the Solution at the top, then change the processor architecture drop down box to one of the supported settings that you want to test.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, in the shared project, open the MainPage.cs file.</source>
          <target state="new">In Solution Explorer, in the shared project, open the MainPage.cs file.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Uncomment the following using statements at the top of the file:</source>
          <target state="new">Uncomment the following using statements at the top of the file:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In MainPage.cs, comment the line of code that initializes <ph id="ph1">`todoTable`</ph> as an <ph id="ph2">`IMobileServiceTable`</ph>.</source>
          <target state="new">In MainPage.cs, comment the line of code that initializes <ph id="ph1">`todoTable`</ph> as an <ph id="ph2">`IMobileServiceTable`</ph>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Uncomment the line of code that initializes <ph id="ph1">`todoTable`</ph> as an <ph id="ph2">`IMobileServiceSyncTable`</ph>:</source>
          <target state="new">Uncomment the line of code that initializes <ph id="ph1">`todoTable`</ph> as an <ph id="ph2">`IMobileServiceSyncTable`</ph>:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In MainPage.cs, in the region marked <ph id="ph1">`Offline sync`</ph>, uncomment the methods <ph id="ph2">`InitLocalStoreAsync`</ph> and <ph id="ph3">`SyncAsync`</ph>.</source>
          <target state="new">In MainPage.cs, in the region marked <ph id="ph1">`Offline sync`</ph>, uncomment the methods <ph id="ph2">`InitLocalStoreAsync`</ph> and <ph id="ph3">`SyncAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph1">`InitLocalStoreAsync`</ph> initializes the client sync context with a SQLite store.</source>
          <target state="new">The method <ph id="ph1">`InitLocalStoreAsync`</ph> initializes the client sync context with a SQLite store.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In Visual Studio, you can select all commented lines and use the <bpt id="p1">**</bpt>Ctrl<ept id="p1">**</ept>+<bpt id="p2">**</bpt>K<ept id="p2">**</ept>+<bpt id="p3">**</bpt>U<ept id="p3">**</ept> keyboard shortcut to uncomment.</source>
          <target state="new">In Visual Studio, you can select all commented lines and use the <bpt id="p1">**</bpt>Ctrl<ept id="p1">**</ept>+<bpt id="p2">**</bpt>K<ept id="p2">**</ept>+<bpt id="p3">**</bpt>U<ept id="p3">**</ept> keyboard shortcut to uncomment.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Notice in <ph id="ph1">`SyncAsync`</ph> a push operation is executed off the <ph id="ph2">`MobileServiceClient.SyncContext`</ph> instead of the <ph id="ph3">`IMobileServicesSyncTable`</ph>.</source>
          <target state="new">Notice in <ph id="ph1">`SyncAsync`</ph> a push operation is executed off the <ph id="ph2">`MobileServiceClient.SyncContext`</ph> instead of the <ph id="ph3">`IMobileServicesSyncTable`</ph>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is because the context tracks changes made by the client for all tables.</source>
          <target state="new">This is because the context tracks changes made by the client for all tables.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is to cover scenarios where there are relationships between tables.</source>
          <target state="new">This is to cover scenarios where there are relationships between tables.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information on this behavior, see [Offline Data Sync in Azure Mobile Apps].</source>
          <target state="new">For more information on this behavior, see [Offline Data Sync in Azure Mobile Apps].</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`OnNavigatedTo`</ph> event handler, uncomment the call to <ph id="ph2">`InitLocalStoreAsync`</ph>:</source>
          <target state="new">In the <ph id="ph1">`OnNavigatedTo`</ph> event handler, uncomment the call to <ph id="ph2">`InitLocalStoreAsync`</ph>:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Uncommment the 3 calls to <ph id="ph1">`SyncAsync`</ph> in the methods <ph id="ph2">`InsertTodoItem`</ph>, <ph id="ph3">`UpdateCheckedTodoItem`</ph>, and <ph id="ph4">`ButtonRefresh_Click`</ph>:</source>
          <target state="new">Uncommment the 3 calls to <ph id="ph1">`SyncAsync`</ph> in the methods <ph id="ph2">`InsertTodoItem`</ph>, <ph id="ph3">`UpdateCheckedTodoItem`</ph>, and <ph id="ph4">`ButtonRefresh_Click`</ph>:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add exception handlers in the <ph id="ph1">`SyncAsync`</ph> method.</source>
          <target state="new">Add exception handlers in the <ph id="ph1">`SyncAsync`</ph> method.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In an offline situation a <ph id="ph1">`MobileServicePushFailedException`</ph> will be thrown with <ph id="ph2">`PushResult.Status == CancelledByNetworkError`</ph>.</source>
          <target state="new">In an offline situation a <ph id="ph1">`MobileServicePushFailedException`</ph> will be thrown with <ph id="ph2">`PushResult.Status == CancelledByNetworkError`</ph>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this <ph id="ph1">`PullAsync`</ph> example, we retrieve all records in the remote <ph id="ph2">`todoTable`</ph>, but it is also possible to filter records by passing a query.</source>
          <target state="new">In this <ph id="ph1">`PullAsync`</ph> example, we retrieve all records in the remote <ph id="ph2">`todoTable`</ph>, but it is also possible to filter records by passing a query.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The first parameter to <ph id="ph1">`PullAsync`</ph> is a query ID that is used for incremental sync, which uses the <ph id="ph2">`UpdatedAt`</ph> timestamp to get only records modified since the last sync.</source>
          <target state="new">The first parameter to <ph id="ph1">`PullAsync`</ph> is a query ID that is used for incremental sync, which uses the <ph id="ph2">`UpdatedAt`</ph> timestamp to get only records modified since the last sync.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The query ID should be a descriptive string that is unique for each logical query in your client application.</source>
          <target state="new">The query ID should be a descriptive string that is unique for each logical query in your client application.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To opt-out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</source>
          <target state="new">To opt-out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This will retrieve all records on each pull operation, which is potentially inefficient.</source>
          <target state="new">This will retrieve all records on each pull operation, which is potentially inefficient.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`MobileServicePushFailedException`</ph> can occur for both a push and a pull operation.</source>
          <target state="new">Note that the <ph id="ph1">`MobileServicePushFailedException`</ph> can occur for both a push and a pull operation.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It can occur for a pull because the pull operation internally executes a push to make sure all tables along with any relationships are consistent.</source>
          <target state="new">It can occur for a pull because the pull operation internally executes a push to make sure all tables along with any relationships are consistent.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In Visual Studio, press the <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> key to rebuild and run the client app.</source>
          <target state="new">In Visual Studio, press the <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> key to rebuild and run the client app.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The app will behave the same as it did before the offline sync changes, because it does a sync operation on the insert, update, and refresh operations.</source>
          <target state="new">The app will behave the same as it did before the offline sync changes, because it does a sync operation on the insert, update, and refresh operations.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, it will populate a local database which can be used in an offline scenario.</source>
          <target state="new">However, it will populate a local database which can be used in an offline scenario.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>We will cause and offline scenario in the next section now that the local database is populated.</source>
          <target state="new">We will cause and offline scenario in the next section now that the local database is populated.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the sync behavior of the client app</source>
          <target state="new"><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the sync behavior of the client app</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In this section, you will modify the client app to simulate an offline scenario by breaking your connection to the Azure Mobile App backend.</source>
          <target state="new">In this section, you will modify the client app to simulate an offline scenario by breaking your connection to the Azure Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you add data items, your exception handler will inform you that the app is operating in offline mode with <ph id="ph1">`PushResult.Status == CancelledByNetworkError`</ph>.</source>
          <target state="new">When you add data items, your exception handler will inform you that the app is operating in offline mode with <ph id="ph1">`PushResult.Status == CancelledByNetworkError`</ph>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Items added will be held in the local store, but not synced to the mobile app backend until you are online again and execute a successful push to the Azure Mobile App backend.</source>
          <target state="new">Items added will be held in the local store, but not synced to the mobile app backend until you are online again and execute a successful push to the Azure Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Edit App.xaml.cs in the shared project.</source>
          <target state="new">Edit App.xaml.cs in the shared project.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Comment out the initialization of the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> and add the following lines, which use an invalid mobile app URL:</source>
          <target state="new">Comment out the initialization of the <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> and add the following lines, which use an invalid mobile app URL:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> to build and run the app.</source>
          <target state="new">Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> to build and run the app.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Notice your sync failed on refresh when the app launched.</source>
          <target state="new">Notice your sync failed on refresh when the app launched.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Enter some new todo items and click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> for each one.</source>
          <target state="new">Enter some new todo items and click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> for each one.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Push fails for each one with a <ph id="ph1">`PushResult.Status=CancelledByNetworkError`</ph>.</source>
          <target state="new">Push fails for each one with a <ph id="ph1">`PushResult.Status=CancelledByNetworkError`</ph>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The new todo items exist only in the local store until they can be pushed to the mobile app backend.</source>
          <target state="new">The new todo items exist only in the local store until they can be pushed to the mobile app backend.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You could suppress the exception dialog for <ph id="ph1">`PushResult.Status=CancelledByNetworkError`</ph>, then client app would behave as if its connected to the mobile app backend supporting all create, read, update, delete (CRUD) operations seamlessly.</source>
          <target state="new">You could suppress the exception dialog for <ph id="ph1">`PushResult.Status=CancelledByNetworkError`</ph>, then client app would behave as if its connected to the mobile app backend supporting all create, read, update, delete (CRUD) operations seamlessly.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Close the app and restart it to verify that the new items you created are persisted to the local store.</source>
          <target state="new">Close the app and restart it to verify that the new items you created are persisted to the local store.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>(Optional) Use Visual Studio to view your Azure SQL Database table to see that the data in the backend database has not changed.</source>
          <target state="new">(Optional) Use Visual Studio to view your Azure SQL Database table to see that the data in the backend database has not changed.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In Visual Studio, open <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>.</source>
          <target state="new">In Visual Studio, open <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Navigate to your database in <bpt id="p1">**</bpt>Azure<ept id="p1">**</ept>-&gt;<bpt id="p2">**</bpt>SQL Databases<ept id="p2">**</ept>.</source>
          <target state="new">Navigate to your database in <bpt id="p1">**</bpt>Azure<ept id="p1">**</ept>-&gt;<bpt id="p2">**</bpt>SQL Databases<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Right-click your database and select <bpt id="p1">**</bpt>Open in SQL Server Object Explorer<ept id="p1">**</ept>.</source>
          <target state="new">Right-click your database and select <bpt id="p1">**</bpt>Open in SQL Server Object Explorer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Now you can browse to your SQL database table and its contents.</source>
          <target state="new">Now you can browse to your SQL database table and its contents.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>(Optional) Use a REST tool such as Fiddler or Postman to query your mobile backend, using a GET query in the form <ph id="ph1">`https://your-mobile-app-backend-name.azurewebsites.net/tables/TodoItem`</ph>.</source>
          <target state="new">(Optional) Use a REST tool such as Fiddler or Postman to query your mobile backend, using a GET query in the form <ph id="ph1">`https://your-mobile-app-backend-name.azurewebsites.net/tables/TodoItem`</ph>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to reconnect your Mobile App backend</source>
          <target state="new"><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to reconnect your Mobile App backend</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In this section you reconnect the app to the mobile app backend.</source>
          <target state="new">In this section you reconnect the app to the mobile app backend.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This simulates the app moving from an offline state to an online state with the mobile app backend.</source>
          <target state="new">This simulates the app moving from an offline state to an online state with the mobile app backend.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When you first run the application, the <ph id="ph1">`OnNavigatedTo`</ph> event handler will call <ph id="ph2">`InitLocalStoreAsync`</ph>.</source>
          <target state="new">When you first run the application, the <ph id="ph1">`OnNavigatedTo`</ph> event handler will call <ph id="ph2">`InitLocalStoreAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This will in turn call <ph id="ph1">`SyncAsync`</ph> to sync your local store with the backend database.</source>
          <target state="new">This will in turn call <ph id="ph1">`SyncAsync`</ph> to sync your local store with the backend database.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>So the app will attempt to sync on start up.</source>
          <target state="new">So the app will attempt to sync on start up.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Open App.xaml.cs in the shared project.</source>
          <target state="new">Open App.xaml.cs in the shared project.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Uncomment your previous initialization of <ph id="ph1">`MobileServiceClient`</ph> to use the correct Mobile App URL and gateway URL.</source>
          <target state="new">Uncomment your previous initialization of <ph id="ph1">`MobileServiceClient`</ph> to use the correct Mobile App URL and gateway URL.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Press the <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> key to rebuild and run the app.</source>
          <target state="new">Press the <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> key to rebuild and run the app.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The app syncs your local changes with the Azure Mobile App backend using push and pull operations as soon as the <ph id="ph1">`OnNavigatedTo`</ph> event handler executes.</source>
          <target state="new">The app syncs your local changes with the Azure Mobile App backend using push and pull operations as soon as the <ph id="ph1">`OnNavigatedTo`</ph> event handler executes.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(Optional) View the updated data using either SQL Server Object Explorer or a REST tool like Fiddler.</source>
          <target state="new">(Optional) View the updated data using either SQL Server Object Explorer or a REST tool like Fiddler.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Notice the data has been synchronized between the Azure Mobile App backend database and the local store.</source>
          <target state="new">Notice the data has been synchronized between the Azure Mobile App backend database and the local store.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the app, click the check box beside a few items to complete them in the local store.</source>
          <target state="new">In the app, click the check box beside a few items to complete them in the local store.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UpdateCheckedTodoItem`</ph> calls <ph id="ph2">`SyncAsync`</ph> to sync the complete each item with the Mobile App backend.</source>
          <target state="new"><ph id="ph1">`UpdateCheckedTodoItem`</ph> calls <ph id="ph2">`SyncAsync`</ph> to sync the complete each item with the Mobile App backend.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyncAsync`</ph> calls both push and pull.</source>
          <target state="new"><ph id="ph1">`SyncAsync`</ph> calls both push and pull.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>However, you should note that <bpt id="p1">**</bpt>whenever you execute a pull against a table that the client has made changes to, a push on the client sync context will always be executed first automatically<ept id="p1">**</ept>.</source>
          <target state="new">However, you should note that <bpt id="p1">**</bpt>whenever you execute a pull against a table that the client has made changes to, a push on the client sync context will always be executed first automatically<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is to ensure all tables in the local store, along with relationships remain consistent.</source>
          <target state="new">This is to ensure all tables in the local store, along with relationships remain consistent.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>So in this case we could have removed the call to <ph id="ph1">`PushAsync`</ph> because it is executed automatically when executing a pull.</source>
          <target state="new">So in this case we could have removed the call to <ph id="ph1">`PushAsync`</ph> because it is executed automatically when executing a pull.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This behavior may result in an unexpected push if you are not aware of it.</source>
          <target state="new">This behavior may result in an unexpected push if you are not aware of it.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more information on this behavior, see [Offline Data Sync in Azure Mobile Apps].</source>
          <target state="new">For more information on this behavior, see [Offline Data Sync in Azure Mobile Apps].</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In order to support the offline features of mobile services, we used the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface and initialized <ph id="ph2">`MobileServiceClient.SyncContext`</ph> with a local store.</source>
          <target state="new">In order to support the offline features of mobile services, we used the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface and initialized <ph id="ph2">`MobileServiceClient.SyncContext`</ph> with a local store.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In this case the local store was a SQLite database.</source>
          <target state="new">In this case the local store was a SQLite database.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</source>
          <target state="new">The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When we want to synchronize the local store with the server, we used the <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph> and <ph id="ph2">`MobileServiceClient.SyncContext.PushAsync`</ph> methods.</source>
          <target state="new">When we want to synchronize the local store with the server, we used the <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph> and <ph id="ph2">`MobileServiceClient.SyncContext.PushAsync`</ph> methods.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To push changes to the server, we called <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</source>
          <target state="new">To push changes to the server, we called <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</source>
          <target state="new">This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</source>
          <target state="new">Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To pull data from a table on the server to the app, we called <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph>.</source>
          <target state="new">To pull data from a table on the server to the app, we called <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A pull always issues a sync context push first if the client sync context has tracked changes on that table.</source>
          <target state="new">A pull always issues a sync context push first if the client sync context has tracked changes on that table.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is to ensure all tables in the local store along with relationships remain consistent.</source>
          <target state="new">This is to ensure all tables in the local store along with relationships remain consistent.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>There are also overloads of <ph id="ph1">`PullAsync()`</ph> that allow a query to be specified in order to filter the data that is stored on the client.</source>
          <target state="new">There are also overloads of <ph id="ph1">`PullAsync()`</ph> that allow a query to be specified in order to filter the data that is stored on the client.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If a query is not passed, <ph id="ph1">`PullAsync()`</ph> will pull all rows in the corresponding table (or query).</source>
          <target state="new">If a query is not passed, <ph id="ph1">`PullAsync()`</ph> will pull all rows in the corresponding table (or query).</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can pass the query to filter only the changes your app needs to sync with.</source>
          <target state="new">You can pass the query to filter only the changes your app needs to sync with.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>To enable incremental sync, pass a query ID to <ph id="ph1">`PullAsync()`</ph>.</source>
          <target state="new">To enable incremental sync, pass a query ID to <ph id="ph1">`PullAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The query ID is used to store the last updated timestamp from the results of the last pull operation.</source>
          <target state="new">The query ID is used to store the last updated timestamp from the results of the last pull operation.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The query ID should be a descriptive string that is unique for each logical query in your app.</source>
          <target state="new">The query ID should be a descriptive string that is unique for each logical query in your app.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If the query has a parameter, then the same parameter value could be part of the query ID.</source>
          <target state="new">If the query has a parameter, then the same parameter value could be part of the query ID.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For instance, if you are filtering on userid, your unique query ID could be:</source>
          <target state="new">For instance, if you are filtering on userid, your unique query ID could be:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If you want to opt out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</source>
          <target state="new">If you want to opt out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In this case, all records will be retrieved on every call to <ph id="ph1">`PullAsync`</ph>, which is potentially inefficient.</source>
          <target state="new">In this case, all records will be retrieved on every call to <ph id="ph1">`PullAsync`</ph>, which is potentially inefficient.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</source>
          <target state="new">Your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Additional Resources</source>
          <target state="new">Additional Resources</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>[Offline Data Sync in Azure Mobile Apps]</source>
          <target state="new">[Offline Data Sync in Azure Mobile Apps]</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>[Cloud Cover: Offline Sync in Azure Mobile Services] \(note: the video is on Mobile Services, but offline sync works in a similar way in Azure Mobile Apps\)</source>
          <target state="new">[Cloud Cover: Offline Sync in Azure Mobile Services] \(note: the video is on Mobile Services, but offline sync works in a similar way in Azure Mobile Apps\)</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>[Azure Friday: Offline-enabled apps in Azure Mobile Services]</source>
          <target state="new">[Azure Friday: Offline-enabled apps in Azure Mobile Services]</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32d53ac4f4ad47b04832c16e4024b66396a1bd63</xliffext:olfilehash>
  </header>
</xliff>