<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Build a Service Using a Non-Relational Data Store | Microsoft Azure</source>
          <target state="new">Build a Service Using a Non-Relational Data Store | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use a non-relational data store such as MongoDB or Azure Table Storage with your .NET based mobile service</source>
          <target state="new">Learn how to use a non-relational data store such as MongoDB or Azure Table Storage with your .NET based mobile service</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build a .NET backend Mobile Service that uses MongoDB instead of a SQL Database for storage</source>
          <target state="new">Build a .NET backend Mobile Service that uses MongoDB instead of a SQL Database for storage</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows you how to use a non-relational data store for your .NET backend mobile service.</source>
          <target state="new">This topic shows you how to use a non-relational data store for your .NET backend mobile service.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of the default Azure SQL Database data store.</source>
          <target state="new">In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of the default Azure SQL Database data store.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</source>
          <target state="new">The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You will also need to add the MongoLab service to your subscription.</source>
          <target state="new">You will also need to add the MongoLab service to your subscription.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-store"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create the MongoLab non-relational store</source>
          <target state="new"><ph id="ph1">&lt;a name="create-store"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create the MongoLab non-relational store</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the [Azure Management Portal], click <bpt id="p1">**</bpt>New<ept id="p1">**</ept> and click <bpt id="p2">**</bpt>Marketplace<ept id="p2">**</ept>.</source>
          <target state="new">In the [Azure Management Portal], click <bpt id="p1">**</bpt>New<ept id="p1">**</ept> and click <bpt id="p2">**</bpt>Marketplace<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>MongoLab<ept id="p1">**</ept> add-on, and complete the wizard to sign up for a MongoLab account.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>MongoLab<ept id="p1">**</ept> add-on, and complete the wizard to sign up for a MongoLab account.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about MongoLab, see the [MongoLab Add-on Page].</source>
          <target state="new">For more information about MongoLab, see the [MongoLab Add-on Page].</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Once the account is set up, click <bpt id="p1">**</bpt>Connection Info<ept id="p1">**</ept> and copy the connection string.</source>
          <target state="new">Once the account is set up, click <bpt id="p1">**</bpt>Connection Info<ept id="p1">**</ept> and copy the connection string.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In your mobile service, click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab, scroll down to <bpt id="p2">**</bpt>Connection strings<ept id="p2">**</ept> and enter a new connection string with a <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> of <ph id="ph1">`MongoConnectionString`</ph> and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> that is your MongoDB connection, then click <bpt id="p5">**</bpt>Save<ept id="p5">**</ept>.</source>
          <target state="new">In your mobile service, click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab, scroll down to <bpt id="p2">**</bpt>Connection strings<ept id="p2">**</ept> and enter a new connection string with a <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> of <ph id="ph1">`MongoConnectionString`</ph> and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> that is your MongoDB connection, then click <bpt id="p5">**</bpt>Save<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the MongoDB connection string</source>
          <target state="new">Add the MongoDB connection string</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The storage account connection string is stored encrypted in app settings.</source>
          <target state="new">The storage account connection string is stored encrypted in app settings.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can access this string in any table controller at runtime.</source>
          <target state="new">You can access this string in any table controller at runtime.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</source>
          <target state="new">In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`&lt;MONGODB_CONNECTION_STRING&gt;`</ph> placeholder with the MongoDB connection string.</source>
          <target state="new">Replace the <ph id="ph1">`&lt;MONGODB_CONNECTION_STRING&gt;`</ph> placeholder with the MongoDB connection string.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</source>
          <target state="new">The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</source>
          <target state="new">When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Modify data types and table controllers</source>
          <target state="new"><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Modify data types and table controllers</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Install the <bpt id="p1">**</bpt>WindowsAzure.MobileServices.Backend.Mongo<ept id="p1">**</ept> NuGet package.</source>
          <target state="new">Install the <bpt id="p1">**</bpt>WindowsAzure.MobileServices.Backend.Mongo<ept id="p1">**</ept> NuGet package.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Modify <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> to derive from <bpt id="p2">**</bpt>DocumentData<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>.</source>
          <target state="new">Modify <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> to derive from <bpt id="p2">**</bpt>DocumentData<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept>, replace the <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> method with the following:</source>
          <target state="new">In <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept>, replace the <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> method with the following:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the code for the <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method above, replace <ph id="ph1">`&lt;YOUR-DATABASE-NAME&gt;`</ph> with the name you chose when you provisioned the MongoLab add-on.</source>
          <target state="new">In the code for the <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method above, replace <ph id="ph1">`&lt;YOUR-DATABASE-NAME&gt;`</ph> with the name you chose when you provisioned the MongoLab add-on.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You are now ready to test the app.</source>
          <target state="new">You are now ready to test the app.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Test the application</source>
          <target state="new"><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Test the application</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>(Optional) Republish your mobile service .NET backend project.</source>
          <target state="new">(Optional) Republish your mobile service .NET backend project.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also test your mobile service locally before you publish the .NET backend project to Azure.</source>
          <target state="new">You can also test your mobile service locally before you publish the .NET backend project to Azure.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Whether you test locally or in Azure, the mobile service will be using your MongoDB for storage.</source>
          <target state="new">Whether you test locally or in Azure, the mobile service will be using your MongoDB for storage.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using either the <bpt id="p1">**</bpt>Try it now<ept id="p1">**</ept> button on the start page as before or using a client app connected to your Mobile App, query items in the database.</source>
          <target state="new">Using either the <bpt id="p1">**</bpt>Try it now<ept id="p1">**</ept> button on the start page as before or using a client app connected to your Mobile App, query items in the database.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that you will not see any items which were previously stored in the SQL database from the quickstart tutorial.</source>
          <target state="new">Note that you will not see any items which were previously stored in the SQL database from the quickstart tutorial.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>When you use the <bpt id="p1">**</bpt>Try it now<ept id="p1">**</ept> button to launch the Help API pages, remember to supply your application key as the password (with a blank username).</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>When you use the <bpt id="p1">**</bpt>Try it now<ept id="p1">**</ept> button to launch the Help API pages, remember to supply your application key as the password (with a blank username).</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create a new item.</source>
          <target state="new">Create a new item.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</source>
          <target state="new">The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</source>
          <target state="new">Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database<ept id="p1">](mobile-services-dotnet-backend-store-data-table-storage.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database<ept id="p1">](mobile-services-dotnet-backend-store-data-table-storage.md)</ept></target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service.</source>
          <target state="new">Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this tutorial, you will modify the Mobile Services quickstart project to use Azure Storage instead of a SQL Database as the data store.</source>
          <target state="new">In this tutorial, you will modify the Mobile Services quickstart project to use Azure Storage instead of a SQL Database as the data store.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="p1">](mobile-services-dotnet-backend-hybrid-connections-get-started.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="p1">](mobile-services-dotnet-backend-hybrid-connections-get-started.md)</ept></target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Hybrid Connections lets your mobile service securely connect to your on-premises assets.</source>
          <target state="new">Hybrid Connections lets your mobile service securely connect to your on-premises assets.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this way, you can make your on-premises data accessible to your mobile clients by using Azure.</source>
          <target state="new">In this way, you can make your on-premises data accessible to your mobile clients by using Azure.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</source>
          <target state="new">Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Upload images to Azure Storage using Mobile Services<ept id="p1">](mobile-services-dotnet-backend-windows-store-dotnet-upload-data-blob-storage.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Upload images to Azure Storage using Mobile Services<ept id="p1">](mobile-services-dotnet-backend-windows-store-dotnet-upload-data-blob-storage.md)</ept></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</source>
          <target state="new">Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47d3e6a3c7776d1358afe05654416a5e3eed39ee</xliffext:olfilehash>
  </header>
</xliff>