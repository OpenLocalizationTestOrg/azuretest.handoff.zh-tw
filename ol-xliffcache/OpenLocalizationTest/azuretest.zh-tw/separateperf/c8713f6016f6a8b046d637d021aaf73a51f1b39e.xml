{
  "nodes": [
    {
      "content": ".NET multi-tier application | Microsoft Azure",
      "pos": [
        27,
        72
      ]
    },
    {
      "content": "A tutorial that helps you develop a multi-tier app in Azure that uses Service Bus queues to communicate between tiers.",
      "pos": [
        91,
        209
      ]
    },
    {
      "content": "Samples in .NET.",
      "pos": [
        210,
        226
      ]
    },
    {
      "content": ".NET multi-tier application using Azure Service Bus queues",
      "pos": [
        533,
        591
      ]
    },
    {
      "content": "Introduction",
      "pos": [
        596,
        608
      ]
    },
    {
      "content": "Developing for Microsoft Azure is easy using Visual Studio 2013 and the free Azure SDK for .NET.",
      "pos": [
        610,
        706
      ]
    },
    {
      "content": "If you do not already have Visual Studio 2013, the SDK will automatically install Visual Studio Express, so you can start developing for Azure entirely for",
      "pos": [
        707,
        862
      ]
    },
    {
      "content": "free.",
      "pos": [
        863,
        868
      ]
    },
    {
      "content": "This article assumes you have no prior experience using Azure.",
      "pos": [
        869,
        931
      ]
    },
    {
      "content": "After completing this tutorial, you will have an application that uses",
      "pos": [
        932,
        1002
      ]
    },
    {
      "content": "multiple Azure resources running in your local environment and",
      "pos": [
        1003,
        1065
      ]
    },
    {
      "content": "that demonstrates how a multi-tier application works.",
      "pos": [
        1066,
        1119
      ]
    },
    {
      "content": "You will learn:",
      "pos": [
        1121,
        1136
      ]
    },
    {
      "pos": [
        1142,
        1231
      ],
      "content": "How to enable your computer for Azure development with a\nsingle download and install.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "How to enable your computer for Azure development with a",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "single download and install.",
          "pos": [
            57,
            85
          ]
        }
      ]
    },
    {
      "content": "How to use Visual Studio to develop for Azure.",
      "pos": [
        1236,
        1282
      ]
    },
    {
      "pos": [
        1287,
        1366
      ],
      "content": "How to create a multi-tier application in Azure using web\nand worker roles.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "How to create a multi-tier application in Azure using web",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "and worker roles.",
          "pos": [
            58,
            75
          ]
        }
      ]
    },
    {
      "content": "How to communicate between tiers using Service Bus queues.",
      "pos": [
        1371,
        1429
      ]
    },
    {
      "content": "In this tutorial you'll build and run the multi-tier application in an Azure cloud service.",
      "pos": [
        1509,
        1600
      ]
    },
    {
      "content": "The front end will be an ASP.NET MVC web role and the back end will be a worker-role.",
      "pos": [
        1601,
        1686
      ]
    },
    {
      "content": "You can create the same multi-tier application with the front end as a web project that is deployed to an Azure website instead of a cloud service.",
      "pos": [
        1687,
        1834
      ]
    },
    {
      "content": "For instructions about what to do differently on an Azure website front end, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#nextsteps)</ept> section.",
      "pos": [
        1835,
        1953
      ]
    },
    {
      "content": "The following screen shot shows the completed application.",
      "pos": [
        1955,
        2013
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Azure also provides storage queue functionality.",
      "pos": [
        2025,
        2086
      ]
    },
    {
      "content": "For more information about Azure storage queues and Service Bus queues, see <bpt id=\"p1\">[</bpt>Azure Queues and Azure Service Bus Queues - Compared and Contrasted<ept id=\"p1\">][sbqueuecomparison]</ept>.",
      "pos": [
        2087,
        2252
      ]
    },
    {
      "content": "Scenario overview: Inter-role communication",
      "pos": [
        2259,
        2302
      ]
    },
    {
      "content": "To submit an order for processing, the front end UI component, running",
      "pos": [
        2304,
        2374
      ]
    },
    {
      "content": "in the web role, needs to interact with the middle tier logic running in",
      "pos": [
        2375,
        2447
      ]
    },
    {
      "content": "the worker role.",
      "pos": [
        2448,
        2464
      ]
    },
    {
      "content": "This example uses Service Bus brokered messaging for",
      "pos": [
        2465,
        2517
      ]
    },
    {
      "content": "the communication between the tiers.",
      "pos": [
        2518,
        2554
      ]
    },
    {
      "content": "Using brokered messaging between the web and middle tiers decouples the",
      "pos": [
        2556,
        2627
      ]
    },
    {
      "content": "two components.",
      "pos": [
        2628,
        2643
      ]
    },
    {
      "content": "In contrast to direct messaging (that is, TCP or HTTP),",
      "pos": [
        2644,
        2699
      ]
    },
    {
      "content": "the web tier does not connect to the middle tier directly; instead it",
      "pos": [
        2700,
        2769
      ]
    },
    {
      "content": "pushes units of work, as messages, into the Service Bus, which reliably",
      "pos": [
        2770,
        2841
      ]
    },
    {
      "content": "retains them until the middle tier is ready to consume and process them.",
      "pos": [
        2842,
        2914
      ]
    },
    {
      "content": "Service Bus provides two entities to support brokered messaging:",
      "pos": [
        2916,
        2980
      ]
    },
    {
      "content": "queues and topics.",
      "pos": [
        2981,
        2999
      ]
    },
    {
      "content": "With queues, each message sent to the queue is",
      "pos": [
        3000,
        3046
      ]
    },
    {
      "content": "consumed by a single receiver.",
      "pos": [
        3047,
        3077
      ]
    },
    {
      "content": "Topics support the publish/subscribe",
      "pos": [
        3078,
        3114
      ]
    },
    {
      "content": "pattern in which each published message is made available to a subscription registered with the topic.",
      "pos": [
        3115,
        3217
      ]
    },
    {
      "content": "Each subscription logically",
      "pos": [
        3218,
        3245
      ]
    },
    {
      "content": "maintains its own queue of messages.",
      "pos": [
        3246,
        3282
      ]
    },
    {
      "content": "Subscriptions can also be",
      "pos": [
        3283,
        3308
      ]
    },
    {
      "content": "configured with filter rules that restrict the set of messages passed to",
      "pos": [
        3309,
        3381
      ]
    },
    {
      "content": "the subscription queue to those that match the filter.",
      "pos": [
        3382,
        3436
      ]
    },
    {
      "content": "The following example uses",
      "pos": [
        3437,
        3463
      ]
    },
    {
      "content": "Service Bus queues.",
      "pos": [
        3464,
        3483
      ]
    },
    {
      "content": "This communication mechanism has several advantages over direct",
      "pos": [
        3493,
        3556
      ]
    },
    {
      "content": "messaging:",
      "pos": [
        3557,
        3567
      ]
    },
    {
      "pos": [
        3573,
        4115
      ],
      "content": "**Temporal decoupling.** With the asynchronous messaging pattern,\nproducers and consumers need not be online at the same time. Service\nBus reliably stores messages until the consuming party is ready to\nreceive them. This allows the components of the distributed\napplication to be disconnected, either voluntarily, for example, for\nmaintenance, or due to a component crash, without impacting the\nsystem as a whole. Furthermore, the consuming application may only\nneed to come online during certain times of the day.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "**Temporal decoupling.** With the asynchronous messaging pattern,",
          "pos": [
            0,
            65
          ],
          "nodes": [
            {
              "content": "Temporal decoupling.",
              "pos": [
                2,
                22
              ]
            },
            {
              "content": "With the asynchronous messaging pattern,",
              "pos": [
                25,
                65
              ]
            }
          ]
        },
        {
          "content": "producers and consumers need not be online at the same time. Service",
          "pos": [
            66,
            134
          ],
          "nodes": [
            {
              "content": "producers and consumers need not be online at the same time.",
              "pos": [
                0,
                60
              ]
            },
            {
              "content": "Service",
              "pos": [
                61,
                68
              ]
            }
          ]
        },
        {
          "content": "Bus reliably stores messages until the consuming party is ready to",
          "pos": [
            135,
            201
          ]
        },
        {
          "content": "receive them. This allows the components of the distributed",
          "pos": [
            202,
            261
          ],
          "nodes": [
            {
              "content": "receive them.",
              "pos": [
                0,
                13
              ]
            },
            {
              "content": "This allows the components of the distributed",
              "pos": [
                14,
                59
              ]
            }
          ]
        },
        {
          "content": "application to be disconnected, either voluntarily, for example, for",
          "pos": [
            262,
            330
          ]
        },
        {
          "content": "maintenance, or due to a component crash, without impacting the",
          "pos": [
            331,
            394
          ]
        },
        {
          "content": "system as a whole. Furthermore, the consuming application may only",
          "pos": [
            395,
            461
          ],
          "nodes": [
            {
              "content": "system as a whole.",
              "pos": [
                0,
                18
              ]
            },
            {
              "content": "Furthermore, the consuming application may only",
              "pos": [
                19,
                66
              ]
            }
          ]
        },
        {
          "content": "need to come online during certain times of the day.",
          "pos": [
            462,
            514
          ]
        }
      ]
    },
    {
      "pos": [
        4121,
        4669
      ],
      "content": "**Load leveling.** In many applications, system load varies over\ntime, while the processing time required for each unit of work is\ntypically constant. Intermediating message producers and consumers\nwith a queue means that the consuming application (the worker) only needs to be provisioned to accommodate average load rather than peak\nload. The depth of the queue will grow and contract as the incoming\nload varies. This directly saves money in terms of the amount of\ninfrastructure required to service the application load.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "**Load leveling.** In many applications, system load varies over",
          "pos": [
            0,
            64
          ],
          "nodes": [
            {
              "content": "Load leveling.",
              "pos": [
                2,
                16
              ]
            },
            {
              "content": "In many applications, system load varies over",
              "pos": [
                19,
                64
              ]
            }
          ]
        },
        {
          "content": "time, while the processing time required for each unit of work is",
          "pos": [
            65,
            130
          ]
        },
        {
          "content": "typically constant. Intermediating message producers and consumers",
          "pos": [
            131,
            197
          ],
          "nodes": [
            {
              "content": "typically constant.",
              "pos": [
                0,
                19
              ]
            },
            {
              "content": "Intermediating message producers and consumers",
              "pos": [
                20,
                66
              ]
            }
          ]
        },
        {
          "content": "with a queue means that the consuming application (the worker) only needs to be provisioned to accommodate average load rather than peak",
          "pos": [
            198,
            334
          ]
        },
        {
          "content": "load. The depth of the queue will grow and contract as the incoming",
          "pos": [
            335,
            402
          ],
          "nodes": [
            {
              "content": "load.",
              "pos": [
                0,
                5
              ]
            },
            {
              "content": "The depth of the queue will grow and contract as the incoming",
              "pos": [
                6,
                67
              ]
            }
          ]
        },
        {
          "content": "load varies. This directly saves money in terms of the amount of",
          "pos": [
            403,
            467
          ],
          "nodes": [
            {
              "content": "load varies.",
              "pos": [
                0,
                12
              ]
            },
            {
              "content": "This directly saves money in terms of the amount of",
              "pos": [
                13,
                64
              ]
            }
          ]
        },
        {
          "content": "infrastructure required to service the application load.",
          "pos": [
            468,
            524
          ]
        }
      ]
    },
    {
      "pos": [
        4675,
        5136
      ],
      "content": "**Load balancing.** As load increases, more worker processes can be\nadded to read from the queue. Each message is processed by only one\nof the worker processes. Furthermore, this pull-based load balancing\nallows for optimum utilization of the worker machines even if the\nworker machines differ in terms of processing power as they will\npull messages at their own maximum rate. This pattern is often\ntermed the competing consumer pattern.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "**Load balancing.** As load increases, more worker processes can be",
          "pos": [
            0,
            67
          ],
          "nodes": [
            {
              "content": "Load balancing.",
              "pos": [
                2,
                17
              ]
            },
            {
              "content": "As load increases, more worker processes can be",
              "pos": [
                20,
                67
              ]
            }
          ]
        },
        {
          "content": "added to read from the queue. Each message is processed by only one",
          "pos": [
            68,
            135
          ],
          "nodes": [
            {
              "content": "added to read from the queue.",
              "pos": [
                0,
                29
              ]
            },
            {
              "content": "Each message is processed by only one",
              "pos": [
                30,
                67
              ]
            }
          ]
        },
        {
          "content": "of the worker processes. Furthermore, this pull-based load balancing",
          "pos": [
            136,
            204
          ],
          "nodes": [
            {
              "content": "of the worker processes.",
              "pos": [
                0,
                24
              ]
            },
            {
              "content": "Furthermore, this pull-based load balancing",
              "pos": [
                25,
                68
              ]
            }
          ]
        },
        {
          "content": "allows for optimum utilization of the worker machines even if the",
          "pos": [
            205,
            270
          ]
        },
        {
          "content": "worker machines differ in terms of processing power as they will",
          "pos": [
            271,
            335
          ]
        },
        {
          "content": "pull messages at their own maximum rate. This pattern is often",
          "pos": [
            336,
            398
          ],
          "nodes": [
            {
              "content": "pull messages at their own maximum rate.",
              "pos": [
                0,
                40
              ]
            },
            {
              "content": "This pattern is often",
              "pos": [
                41,
                62
              ]
            }
          ]
        },
        {
          "content": "termed the competing consumer pattern.",
          "pos": [
            399,
            437
          ]
        }
      ]
    },
    {
      "content": "The following sections discuss the code that implements this architecture.",
      "pos": [
        5150,
        5224
      ]
    },
    {
      "content": "Set up the development environment",
      "pos": [
        5229,
        5263
      ]
    },
    {
      "content": "Before you can begin developing your Azure application, download the tools and set up your development environment:",
      "pos": [
        5265,
        5380
      ]
    },
    {
      "content": "To install the Azure SDK for .NET, click the following link.",
      "pos": [
        5386,
        5446
      ]
    },
    {
      "content": "Get Tools and SDK",
      "pos": [
        5453,
        5470
      ]
    },
    {
      "content": "Click the link for the version of Visual Studio you are using.",
      "pos": [
        5479,
        5541
      ]
    },
    {
      "content": "The steps in this tutorial use Visual Studio 2013.",
      "pos": [
        5542,
        5592
      ]
    },
    {
      "pos": [
        5611,
        5681
      ],
      "content": "When prompted to run or save the installation file, click\n**Run**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "When prompted to run or save the installation file, click",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept>.",
          "pos": [
            58,
            66
          ]
        }
      ]
    },
    {
      "pos": [
        5699,
        5782
      ],
      "content": "In the Web Platform Installer, click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept> and proceed with the installation."
    },
    {
      "pos": [
        5801,
        6098
      ],
      "content": "Once the installation is complete, you have everything\nnecessary to start developing the app. The SDK includes tools that enable you\nto develop Azure applications in Visual Studio. If you\ndo not have Visual Studio installed, it also installs the free\nVisual Studio Express for Web.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Once the installation is complete, you have everything",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "necessary to start developing the app. The SDK includes tools that enable you",
          "pos": [
            55,
            132
          ],
          "nodes": [
            {
              "content": "necessary to start developing the app.",
              "pos": [
                0,
                38
              ]
            },
            {
              "content": "The SDK includes tools that enable you",
              "pos": [
                39,
                77
              ]
            }
          ]
        },
        {
          "content": "to develop Azure applications in Visual Studio. If you",
          "pos": [
            133,
            187
          ],
          "nodes": [
            {
              "content": "to develop Azure applications in Visual Studio.",
              "pos": [
                0,
                47
              ]
            },
            {
              "content": "If you",
              "pos": [
                48,
                54
              ]
            }
          ]
        },
        {
          "content": "do not have Visual Studio installed, it also installs the free",
          "pos": [
            188,
            250
          ]
        },
        {
          "content": "Visual Studio Express for Web.",
          "pos": [
            251,
            281
          ]
        }
      ]
    },
    {
      "content": "Set up the Service Bus namespace",
      "pos": [
        6103,
        6135
      ]
    },
    {
      "content": "The next step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key.",
      "pos": [
        6137,
        6235
      ]
    },
    {
      "content": "A service namespace provides an application boundary for",
      "pos": [
        6236,
        6292
      ]
    },
    {
      "content": "each application exposed through Service Bus.",
      "pos": [
        6293,
        6338
      ]
    },
    {
      "content": "A SAS key is",
      "pos": [
        6339,
        6351
      ]
    },
    {
      "content": "generated by the system when a service namespace is",
      "pos": [
        6352,
        6403
      ]
    },
    {
      "content": "created.",
      "pos": [
        6404,
        6412
      ]
    },
    {
      "content": "The combination of service namespace and SAS key",
      "pos": [
        6413,
        6461
      ]
    },
    {
      "content": "provides the credentials for Service Bus to authenticate access to an",
      "pos": [
        6462,
        6531
      ]
    },
    {
      "content": "application.",
      "pos": [
        6532,
        6544
      ]
    },
    {
      "pos": [
        6548,
        6736
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You can also manage namespaces and Service Bus messaging entities using the Visual Studio Server Explorer, but you can only create new namespaces from within the Azure portal."
    },
    {
      "content": "Set up the namespace using the Azure portal",
      "pos": [
        6742,
        6785
      ]
    },
    {
      "pos": [
        6791,
        6821
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        6827,
        6902
      ],
      "content": "In the left navigation pane of the Azure portal, click\n**Service Bus**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In the left navigation pane of the Azure portal, click",
          "pos": [
            0,
            54
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept>.",
          "pos": [
            55,
            71
          ]
        }
      ]
    },
    {
      "pos": [
        6908,
        6964
      ],
      "content": "In the lower pane of the Azure portal, click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Add a new namespace<ept id=\"p1\">**</ept> page, enter a namespace name.",
      "pos": [
        6982,
        7042
      ]
    },
    {
      "content": "The system immediately checks to see if the name is available.",
      "pos": [
        7043,
        7105
      ]
    },
    {
      "pos": [
        7123,
        7479
      ],
      "content": "After making sure the namespace name is available, choose the\ncountry or region in which your namespace should be hosted (make\nsure you use the same country/region in which you are deploying your\ncompute resources). Also, make sure that you select **Messaging** in the namespace **Type** field, and **Standard** in the **Messaging Tier** field.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "After making sure the namespace name is available, choose the",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "country or region in which your namespace should be hosted (make",
          "pos": [
            62,
            126
          ]
        },
        {
          "content": "sure you use the same country/region in which you are deploying your",
          "pos": [
            127,
            195
          ]
        },
        {
          "content": "compute resources). Also, make sure that you select **Messaging** in the namespace **Type** field, and **Standard** in the **Messaging Tier** field.",
          "pos": [
            196,
            344
          ],
          "nodes": [
            {
              "content": "compute resources).",
              "pos": [
                0,
                19
              ]
            },
            {
              "content": "Also, make sure that you select <bpt id=\"p1\">**</bpt>Messaging<ept id=\"p1\">**</ept> in the namespace <bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept> field, and <bpt id=\"p3\">**</bpt>Standard<ept id=\"p3\">**</ept> in the <bpt id=\"p4\">**</bpt>Messaging Tier<ept id=\"p4\">**</ept> field.",
              "pos": [
                20,
                148
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> Pick the <bpt id=\"p1\">**</bpt>same region<ept id=\"p1\">**</ept> that you intend to choose to",
      "pos": [
        7487,
        7558
      ]
    },
    {
      "content": "deploy your application.",
      "pos": [
        7563,
        7587
      ]
    },
    {
      "content": "This will give you the best performance.",
      "pos": [
        7588,
        7628
      ]
    },
    {
      "pos": [
        7634,
        7817
      ],
      "content": "Click the check mark. The system now creates your service\nnamespace and enables it. You might have to wait several minutes as\nthe system provisions resources for your account.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Click the check mark. The system now creates your service",
          "pos": [
            0,
            57
          ],
          "nodes": [
            {
              "content": "Click the check mark.",
              "pos": [
                0,
                21
              ]
            },
            {
              "content": "The system now creates your service",
              "pos": [
                22,
                57
              ]
            }
          ]
        },
        {
          "content": "namespace and enables it. You might have to wait several minutes as",
          "pos": [
            58,
            125
          ],
          "nodes": [
            {
              "content": "namespace and enables it.",
              "pos": [
                0,
                25
              ]
            },
            {
              "content": "You might have to wait several minutes as",
              "pos": [
                26,
                67
              ]
            }
          ]
        },
        {
          "content": "the system provisions resources for your account.",
          "pos": [
            126,
            175
          ]
        }
      ]
    },
    {
      "content": "In the main window, click the name of your service namespace.",
      "pos": [
        7836,
        7897
      ]
    },
    {
      "pos": [
        7915,
        7948
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Connection Information<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        7967,
        8080
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Access connection information<ept id=\"p1\">**</ept> pane, find the connection string that contains the SAS key and key name."
    },
    {
      "content": "Make a note of these credentials, or copy them to the clipboard.",
      "pos": [
        8100,
        8164
      ]
    },
    {
      "content": "Create a web role",
      "pos": [
        8169,
        8186
      ]
    },
    {
      "content": "In this section, you will build the front end of your application.",
      "pos": [
        8188,
        8254
      ]
    },
    {
      "content": "You",
      "pos": [
        8255,
        8258
      ]
    },
    {
      "content": "will first create the various pages that your application displays.",
      "pos": [
        8259,
        8326
      ]
    },
    {
      "content": "After that, you will add the code for submitting items to a Service Bus",
      "pos": [
        8327,
        8398
      ]
    },
    {
      "content": "queue and displaying status information about the queue.",
      "pos": [
        8399,
        8455
      ]
    },
    {
      "content": "Create the project",
      "pos": [
        8461,
        8479
      ]
    },
    {
      "pos": [
        8485,
        8926
      ],
      "content": "Using administrator privileges, start either Microsoft Visual Studio\n2013 or Microsoft Visual Studio Express. To start Visual\nStudio with administrator privileges, right-click **Microsoft Visual\nStudio 2013 (or Microsoft Visual Studio Express)** and\nthen click **Run as administrator**. The Azure compute emulator,\ndiscussed later in this article, requires that Visual Studio be\nstarted with administrator privileges.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Using administrator privileges, start either Microsoft Visual Studio",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "2013 or Microsoft Visual Studio Express. To start Visual",
          "pos": [
            69,
            125
          ],
          "nodes": [
            {
              "content": "2013 or Microsoft Visual Studio Express.",
              "pos": [
                0,
                40
              ]
            },
            {
              "content": "To start Visual",
              "pos": [
                41,
                56
              ]
            }
          ]
        },
        {
          "content": "Studio with administrator privileges, right-click <bpt id=\"p1\">**</bpt>Microsoft Visual\nStudio 2013 (or Microsoft Visual Studio Express)<ept id=\"p1\">**</ept> and",
          "pos": [
            126,
            249
          ]
        },
        {
          "content": "then click **Run as administrator**. The Azure compute emulator,",
          "pos": [
            250,
            314
          ],
          "nodes": [
            {
              "content": "then click <bpt id=\"p1\">**</bpt>Run as administrator<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                36
              ]
            },
            {
              "content": "The Azure compute emulator,",
              "pos": [
                37,
                64
              ]
            }
          ]
        },
        {
          "content": "discussed later in this article, requires that Visual Studio be",
          "pos": [
            315,
            378
          ]
        },
        {
          "content": "started with administrator privileges.",
          "pos": [
            379,
            417
          ]
        }
      ]
    },
    {
      "pos": [
        8932,
        9018
      ],
      "content": "In Visual Studio, on the **File** menu, click **New**, and then\nclick **Project**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In Visual Studio, on the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then",
          "pos": [
            0,
            63
          ]
        },
        {
          "content": "click <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept>.",
          "pos": [
            64,
            82
          ]
        }
      ]
    },
    {
      "pos": [
        9036,
        9204
      ],
      "content": "From **Installed Templates**, under **Visual C#**, click **Cloud** and\nthen click **Azure Cloud Service**. Name the project\n**MultiTierApp**. Then click **OK**.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "From <bpt id=\"p1\">**</bpt>Installed Templates<ept id=\"p1\">**</ept>, under <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Cloud<ept id=\"p3\">**</ept> and",
          "pos": [
            0,
            70
          ]
        },
        {
          "content": "then click **Azure Cloud Service**. Name the project",
          "pos": [
            71,
            123
          ],
          "nodes": [
            {
              "content": "then click <bpt id=\"p1\">**</bpt>Azure Cloud Service<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                35
              ]
            },
            {
              "content": "Name the project",
              "pos": [
                36,
                52
              ]
            }
          ]
        },
        {
          "content": "**MultiTierApp**. Then click **OK**.",
          "pos": [
            124,
            160
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>MultiTierApp<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                17
              ]
            },
            {
              "content": "Then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
              "pos": [
                18,
                36
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        9222,
        9295
      ],
      "content": "From <bpt id=\"p1\">**</bpt>.NET Framework 4.5<ept id=\"p1\">**</ept> roles, double-click <bpt id=\"p2\">**</bpt>ASP.NET Web\nRole<ept id=\"p2\">**</ept>.",
      "leadings": [
        "",
        "    "
      ]
    },
    {
      "pos": [
        9314,
        9543
      ],
      "content": "Hover over **WebRole1** under **Azure Cloud Service solution**, click\nthe pencil icon, and rename the web role to **FrontendWebRole**. Then click **OK**. (Make sure you enter \"Frontend\" with a lower-case 'e,' not \"FrontEnd\".)",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Hover over <bpt id=\"p1\">**</bpt>WebRole1<ept id=\"p1\">**</ept> under <bpt id=\"p2\">**</bpt>Azure Cloud Service solution<ept id=\"p2\">**</ept>, click",
          "pos": [
            0,
            69
          ]
        },
        {
          "content": "the pencil icon, and rename the web role to **FrontendWebRole**. Then click **OK**. (Make sure you enter \"Frontend\" with a lower-case 'e,' not \"FrontEnd\".)",
          "pos": [
            70,
            225
          ],
          "nodes": [
            {
              "content": "the pencil icon, and rename the web role to <bpt id=\"p1\">**</bpt>FrontendWebRole<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                64
              ]
            },
            {
              "content": "Then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
              "pos": [
                65,
                83
              ]
            },
            {
              "content": "(Make sure you enter \"Frontend\" with a lower-case 'e,' not \"FrontEnd\".)",
              "pos": [
                84,
                155
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        9562,
        9679
      ],
      "content": "From the **New ASP.NET Project** dialog box, in the **Select a template** list, click **MVC**,\nthen click **OK**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "From the <bpt id=\"p1\">**</bpt>New ASP.NET Project<ept id=\"p1\">**</ept> dialog box, in the <bpt id=\"p2\">**</bpt>Select a template<ept id=\"p2\">**</ept> list, click <bpt id=\"p3\">**</bpt>MVC<ept id=\"p3\">**</ept>,",
          "pos": [
            0,
            94
          ]
        },
        {
          "content": "then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
          "pos": [
            95,
            113
          ]
        }
      ]
    },
    {
      "pos": [
        9698,
        9830
      ],
      "content": "In **Solution Explorer**, right-click **References**, then click\n**Manage NuGet Packages** or **Add Library Package Reference**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept>, then click",
          "pos": [
            0,
            64
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Add Library Package Reference<ept id=\"p2\">**</ept>.",
          "pos": [
            65,
            128
          ]
        }
      ]
    },
    {
      "pos": [
        9836,
        10037
      ],
      "content": "Select **Online** on the left side of the dialog box. Search for\n\"**Service Bus**\" and select the **Microsoft Azure Service\nBus** item. Then complete the installation and close this dialog box.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Select **Online** on the left side of the dialog box. Search for",
          "pos": [
            0,
            64
          ],
          "nodes": [
            {
              "content": "Select <bpt id=\"p1\">**</bpt>Online<ept id=\"p1\">**</ept> on the left side of the dialog box.",
              "pos": [
                0,
                53
              ]
            },
            {
              "content": "Search for",
              "pos": [
                54,
                64
              ]
            }
          ]
        },
        {
          "content": "\"**Service Bus**\" and select the **Microsoft Azure Service\nBus** item. Then complete the installation and close this dialog box.",
          "pos": [
            65,
            193
          ],
          "nodes": [
            {
              "content": "\"<bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept>\" and select the <bpt id=\"p2\">**</bpt>Microsoft Azure Service\nBus<ept id=\"p2\">**</ept> item.",
              "pos": [
                0,
                70
              ]
            },
            {
              "content": "Then complete the installation and close this dialog box.",
              "pos": [
                71,
                128
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        10056,
        10160
      ],
      "content": "Note that the required client assemblies are now referenced and some\nnew code files have been added.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Note that the required client assemblies are now referenced and some",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "new code files have been added.",
          "pos": [
            69,
            100
          ]
        }
      ]
    },
    {
      "pos": [
        10166,
        10338
      ],
      "content": "In **Solution Explorer**, right-click **Models** and click **Add**,\nthen click **Class**. In the **Name** box, type the name\n**OnlineOrder.cs**. Then click **Add**.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>Models<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>,",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "then click **Class**. In the **Name** box, type the name",
          "pos": [
            68,
            124
          ],
          "nodes": [
            {
              "content": "then click <bpt id=\"p1\">**</bpt>Class<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                21
              ]
            },
            {
              "content": "In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, type the name",
              "pos": [
                22,
                56
              ]
            }
          ]
        },
        {
          "content": "**OnlineOrder.cs**. Then click **Add**.",
          "pos": [
            125,
            164
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>OnlineOrder.cs<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                19
              ]
            },
            {
              "content": "Then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.",
              "pos": [
                20,
                39
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "Write the code for your web role",
      "pos": [
        10344,
        10376
      ]
    },
    {
      "content": "In this section, you will create the various pages that your application",
      "pos": [
        10378,
        10450
      ]
    },
    {
      "content": "displays.",
      "pos": [
        10451,
        10460
      ]
    },
    {
      "pos": [
        10466,
        10581
      ],
      "content": "In the OnlineOrder.cs file in Visual Studio, replace the\nexisting namespace definition with the following code:",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In the OnlineOrder.cs file in Visual Studio, replace the",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "existing namespace definition with the following code:",
          "pos": [
            57,
            111
          ]
        }
      ]
    },
    {
      "pos": [
        10819,
        11048
      ],
      "content": "In **Solution Explorer**, double-click\n**Controllers\\HomeController.cs**. Add the following **using**\nstatements at the top of the file to include the namespaces for the\nmodel you just created, as well as Service Bus.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click",
          "pos": [
            0,
            38
          ]
        },
        {
          "content": "**Controllers\\HomeController.cs**. Add the following **using**",
          "pos": [
            39,
            101
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>Controllers\\HomeController.cs<ept id=\"p1\">**</ept>.",
              "pos": [
                0,
                34
              ]
            },
            {
              "content": "Add the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept>",
              "pos": [
                35,
                62
              ]
            }
          ]
        },
        {
          "content": "statements at the top of the file to include the namespaces for the",
          "pos": [
            102,
            169
          ]
        },
        {
          "content": "model you just created, as well as Service Bus.",
          "pos": [
            170,
            217
          ]
        }
      ]
    },
    {
      "pos": [
        11175,
        11380
      ],
      "content": "Also in the HomeController.cs file in Visual Studio, replace the\nexisting namespace definition with the following code. This code\ncontains methods for handling the submission of items to the queue.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Also in the HomeController.cs file in Visual Studio, replace the",
          "pos": [
            0,
            64
          ]
        },
        {
          "content": "existing namespace definition with the following code. This code",
          "pos": [
            65,
            129
          ],
          "nodes": [
            {
              "content": "existing namespace definition with the following code.",
              "pos": [
                0,
                54
              ]
            },
            {
              "content": "This code",
              "pos": [
                55,
                64
              ]
            }
          ]
        },
        {
          "content": "contains methods for handling the submission of items to the queue.",
          "pos": [
            130,
            197
          ]
        }
      ]
    },
    {
      "pos": [
        13037,
        13126
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept> to test the accuracy of your work so far."
    },
    {
      "pos": [
        13132,
        13292
      ],
      "content": "Now, you will create the view for the **Submit()** method you\ncreated earlier. Right-click within the **Submit()** method, and then choose\n**Add View**.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Now, you will create the view for the <bpt id=\"p1\">**</bpt>Submit()<ept id=\"p1\">**</ept> method you",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "created earlier. Right-click within the **Submit()** method, and then choose",
          "pos": [
            62,
            138
          ],
          "nodes": [
            {
              "content": "created earlier.",
              "pos": [
                0,
                16
              ]
            },
            {
              "content": "Right-click within the <bpt id=\"p1\">**</bpt>Submit()<ept id=\"p1\">**</ept> method, and then choose",
              "pos": [
                17,
                76
              ]
            }
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Add View<ept id=\"p1\">**</ept>.",
          "pos": [
            139,
            152
          ]
        }
      ]
    },
    {
      "content": "A dialog box appears for creating the view.",
      "pos": [
        13311,
        13354
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Template<ept id=\"p1\">**</ept> list, choose <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept>.",
      "pos": [
        13355,
        13399
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Model class<ept id=\"p1\">**</ept> list, click the <bpt id=\"p2\">**</bpt>OnlineOrder<ept id=\"p2\">**</ept> class.",
      "pos": [
        13400,
        13461
      ]
    },
    {
      "pos": [
        13480,
        13494
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        13500,
        13680
      ],
      "content": "Now, change the displayed name of your application. In **Solution Explorer**, double-click the\n**Views\\Shared\\\\_Layout.cshtml** file to open it in the Visual\nStudio editor.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Now, change the displayed name of your application. In **Solution Explorer**, double-click the",
          "pos": [
            0,
            94
          ],
          "nodes": [
            {
              "content": "Now, change the displayed name of your application.",
              "pos": [
                0,
                51
              ]
            },
            {
              "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click the",
              "pos": [
                52,
                94
              ]
            }
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Views\\Shared\\\\_Layout.cshtml<ept id=\"p1\">**</ept> file to open it in the Visual",
          "pos": [
            95,
            157
          ]
        },
        {
          "content": "Studio editor.",
          "pos": [
            158,
            172
          ]
        }
      ]
    },
    {
      "pos": [
        13686,
        13772
      ],
      "content": "Replace all occurrences of **My ASP.NET Application** with\n**LITWARE'S Products**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Replace all occurrences of <bpt id=\"p1\">**</bpt>My ASP.NET Application<ept id=\"p1\">**</ept> with",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>LITWARE'S Products<ept id=\"p1\">**</ept>.",
          "pos": [
            59,
            82
          ]
        }
      ]
    },
    {
      "content": "Remove the <bpt id=\"p1\">**</bpt>Home<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>About<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Contact<ept id=\"p3\">**</ept> links.",
      "pos": [
        13778,
        13832
      ]
    },
    {
      "content": "Delete the highlighted code:",
      "pos": [
        13833,
        13861
      ]
    },
    {
      "pos": [
        13880,
        14225
      ],
      "content": "Finally, modify the submission page to include some information about\nthe queue. In **Solution Explorer**, double-click the\n**Views\\Home\\Submit.cshtml** file to open it in the Visual Studio\neditor. Add the following line after **&lt;h2>Submit&lt;/h2>**. For now,\nthe **ViewBag.MessageCount** is empty. You will populate it later.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Finally, modify the submission page to include some information about",
          "pos": [
            0,
            69
          ]
        },
        {
          "content": "the queue. In **Solution Explorer**, double-click the",
          "pos": [
            70,
            123
          ],
          "nodes": [
            {
              "content": "the queue.",
              "pos": [
                0,
                10
              ]
            },
            {
              "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click the",
              "pos": [
                11,
                53
              ]
            }
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Views\\Home\\Submit.cshtml<ept id=\"p1\">**</ept> file to open it in the Visual Studio",
          "pos": [
            124,
            189
          ]
        },
        {
          "content": "editor. Add the following line after **&lt;h2>Submit&lt;/h2>**. For now,",
          "pos": [
            190,
            262
          ],
          "nodes": [
            {
              "content": "editor.",
              "pos": [
                0,
                7
              ]
            },
            {
              "content": "Add the following line after <bpt id=\"p1\">**</bpt>&amp;lt;h2&gt;Submit&amp;lt;/h2&gt;<ept id=\"p1\">**</ept>.",
              "pos": [
                8,
                63
              ]
            },
            {
              "content": "For now,",
              "pos": [
                64,
                72
              ]
            }
          ]
        },
        {
          "content": "the **ViewBag.MessageCount** is empty. You will populate it later.",
          "pos": [
            263,
            329
          ],
          "nodes": [
            {
              "content": "the <bpt id=\"p1\">**</bpt>ViewBag.MessageCount<ept id=\"p1\">**</ept> is empty.",
              "pos": [
                0,
                38
              ]
            },
            {
              "content": "You will populate it later.",
              "pos": [
                39,
                66
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        14328,
        14449
      ],
      "content": "You now have implemented your UI. You can press **F5** to run your\napplication and confirm that it looks as expected.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "You now have implemented your UI. You can press **F5** to run your",
          "pos": [
            0,
            66
          ],
          "nodes": [
            {
              "content": "You now have implemented your UI.",
              "pos": [
                0,
                33
              ]
            },
            {
              "content": "You can press <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> to run your",
              "pos": [
                34,
                66
              ]
            }
          ]
        },
        {
          "content": "application and confirm that it looks as expected.",
          "pos": [
            67,
            117
          ]
        }
      ]
    },
    {
      "content": "Write the code for submitting items to a Service Bus queue",
      "pos": [
        14468,
        14526
      ]
    },
    {
      "content": "Now, you will add code for submitting items to a queue.",
      "pos": [
        14528,
        14583
      ]
    },
    {
      "content": "You will first",
      "pos": [
        14584,
        14598
      ]
    },
    {
      "content": "create a class that contains your Service Bus queue connection",
      "pos": [
        14599,
        14661
      ]
    },
    {
      "content": "information.",
      "pos": [
        14662,
        14674
      ]
    },
    {
      "content": "Then, you will initialize your connection from",
      "pos": [
        14675,
        14721
      ]
    },
    {
      "content": "Global.aspx.cs.",
      "pos": [
        14722,
        14737
      ]
    },
    {
      "content": "Finally, you will update the submission code you",
      "pos": [
        14738,
        14786
      ]
    },
    {
      "content": "created earlier in HomeController.cs to actually submit items to a",
      "pos": [
        14787,
        14853
      ]
    },
    {
      "content": "Service Bus queue.",
      "pos": [
        14854,
        14872
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>FrontendWebRole<ept id=\"p2\">**</ept> (right-click the project, not the role).",
      "pos": [
        14878,
        14976
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Class<ept id=\"p2\">**</ept>.",
      "pos": [
        14977,
        15017
      ]
    },
    {
      "content": "Name the class QueueConnector.cs.",
      "pos": [
        15023,
        15056
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> to create the class.",
      "pos": [
        15057,
        15091
      ]
    },
    {
      "content": "You will now add code that encapsulates the connection information and initializes the connection to a Service Bus queue.",
      "pos": [
        15097,
        15218
      ]
    },
    {
      "content": "In QueueConnector.cs, add the following code, and enter values for <bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> (your service namespace) and <bpt id=\"p2\">**</bpt>yourKey<ept id=\"p2\">**</ept>, which is the SAS key you obtained from the <bpt id=\"p3\">[</bpt>Azure portal<ept id=\"p3\">][Azure portal]</ept> earlier.",
      "pos": [
        15219,
        15422
      ]
    },
    {
      "pos": [
        17821,
        17960
      ],
      "content": "Note that later in this tutorial you will learn how to store the name of your <bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept> and your SAS key value in a configuration file."
    },
    {
      "content": "Now, ensure that your <bpt id=\"p1\">**</bpt>Initialize<ept id=\"p1\">**</ept> method gets called.",
      "pos": [
        17966,
        18022
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click <bpt id=\"p2\">**</bpt>Global.asax\\Global.asax.cs<ept id=\"p2\">**</ept>.",
      "pos": [
        18023,
        18093
      ]
    },
    {
      "pos": [
        18099,
        18176
      ],
      "content": "Add the following line to the bottom of the **Application_Start**\nmethod.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Add the following line to the bottom of the <bpt id=\"p1\">**</bpt>Application_Start<ept id=\"p1\">**</ept>",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "method.",
          "pos": [
            66,
            73
          ]
        }
      ]
    },
    {
      "pos": [
        18236,
        18397
      ],
      "content": "Finally, update the web code you created earlier, to\nsubmit items to the queue. In **Solution Explorer**,\ndouble-click **Controllers\\HomeController.cs**.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Finally, update the web code you created earlier, to",
          "pos": [
            0,
            52
          ]
        },
        {
          "content": "submit items to the queue. In **Solution Explorer**,",
          "pos": [
            53,
            105
          ],
          "nodes": [
            {
              "content": "submit items to the queue.",
              "pos": [
                0,
                26
              ]
            },
            {
              "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>,",
              "pos": [
                27,
                52
              ]
            }
          ]
        },
        {
          "content": "double-click <bpt id=\"p1\">**</bpt>Controllers\\HomeController.cs<ept id=\"p1\">**</ept>.",
          "pos": [
            106,
            153
          ]
        }
      ]
    },
    {
      "pos": [
        18403,
        18488
      ],
      "content": "Update the **Submit()** method as follows to get the message count\nfor the queue.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Update the <bpt id=\"p1\">**</bpt>Submit()<ept id=\"p1\">**</ept> method as follows to get the message count",
          "pos": [
            0,
            66
          ]
        },
        {
          "content": "for the queue.",
          "pos": [
            67,
            81
          ]
        }
      ]
    },
    {
      "pos": [
        18995,
        19099
      ],
      "content": "Update the **Submit(OnlineOrder order)** method as follows to submit\norder information to the queue.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Update the <bpt id=\"p1\">**</bpt>Submit(OnlineOrder order)<ept id=\"p1\">**</ept> method as follows to submit",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "order information to the queue.",
          "pos": [
            69,
            100
          ]
        }
      ]
    },
    {
      "pos": [
        19588,
        19690
      ],
      "content": "You can now run the application again. Each time you submit an\norder, the message count increases.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "You can now run the application again. Each time you submit an",
          "pos": [
            0,
            62
          ],
          "nodes": [
            {
              "content": "You can now run the application again.",
              "pos": [
                0,
                38
              ]
            },
            {
              "content": "Each time you submit an",
              "pos": [
                39,
                62
              ]
            }
          ]
        },
        {
          "content": "order, the message count increases.",
          "pos": [
            63,
            98
          ]
        }
      ]
    },
    {
      "content": "Cloud configuration manager",
      "pos": [
        19708,
        19735
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>GetSettings<ept id=\"p1\">**</ept> method in the",
      "pos": [
        19737,
        19770
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Microsoft.WindowsAzure.Configuration.CloudConfigurationManager<ept id=\"p1\">**</ept> class",
      "pos": [
        19771,
        19843
      ]
    },
    {
      "content": "enables you to read configuration settings from the configuration store for your",
      "pos": [
        19844,
        19924
      ]
    },
    {
      "content": "platform.",
      "pos": [
        19925,
        19934
      ]
    },
    {
      "content": "For example, if your code is running",
      "pos": [
        19935,
        19971
      ]
    },
    {
      "content": "in a web or worker role the <bpt id=\"p1\">**</bpt>GetSettings<ept id=\"p1\">**</ept> method reads the",
      "pos": [
        19972,
        20032
      ]
    },
    {
      "content": "ServiceConfiguration.cscfg file, and if your code is running in a standard",
      "pos": [
        20033,
        20107
      ]
    },
    {
      "content": "console app the <bpt id=\"p1\">**</bpt>GetSettings<ept id=\"p1\">**</ept> method reads the app.config file.",
      "pos": [
        20108,
        20173
      ]
    },
    {
      "content": "If you store a connection string for your Service Bus namespace in a",
      "pos": [
        20175,
        20243
      ]
    },
    {
      "content": "configuration file, you can use the <bpt id=\"p1\">**</bpt>GetSettings<ept id=\"p1\">**</ept> method to read a connection",
      "pos": [
        20244,
        20323
      ]
    },
    {
      "content": "string that you can use to instantiate a <bpt id=\"p1\">**</bpt>NamespaceMananger<ept id=\"p1\">**</ept> object.",
      "pos": [
        20324,
        20394
      ]
    },
    {
      "content": "You can",
      "pos": [
        20395,
        20402
      ]
    },
    {
      "content": "use a <bpt id=\"p1\">**</bpt>NamespaceMananger<ept id=\"p1\">**</ept> instance to configure your Service Bus namespace",
      "pos": [
        20403,
        20479
      ]
    },
    {
      "content": "programmatically.",
      "pos": [
        20480,
        20497
      ]
    },
    {
      "content": "You can use the same connection string to instantiate a client",
      "pos": [
        20498,
        20560
      ]
    },
    {
      "content": "objects (such as <bpt id=\"p1\">**</bpt>QueueClient<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>TopicClient<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>EventHubClient<ept id=\"p3\">**</ept>",
      "pos": [
        20561,
        20634
      ]
    },
    {
      "content": "object) that you can use to perform runtime operations such as sending and",
      "pos": [
        20635,
        20709
      ]
    },
    {
      "content": "receiving messages.",
      "pos": [
        20710,
        20729
      ]
    },
    {
      "content": "Connection string",
      "pos": [
        20735,
        20752
      ]
    },
    {
      "content": "To instantiate a client (for example, a Service Bus <bpt id=\"p1\">**</bpt>QueueClient<ept id=\"p1\">**</ept>), you can represent the configuration information as a connection string.",
      "pos": [
        20754,
        20895
      ]
    },
    {
      "content": "On the client side, there is a <ph id=\"ph1\">`CreateFromConnectionString()`</ph> method that instantiates that client type by using that connection string.",
      "pos": [
        20896,
        21032
      ]
    },
    {
      "content": "For example, given the following configuration section",
      "pos": [
        21033,
        21087
      ]
    },
    {
      "content": "The following code retrieves the connection string, creates a queue, and initializes the connection to the queue.",
      "pos": [
        21362,
        21475
      ]
    },
    {
      "pos": [
        21963,
        22042
      ],
      "content": "The code in the following section uses the <bpt id=\"p1\">**</bpt>CloudConfigurationManager<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "Create the worker role",
      "pos": [
        22047,
        22069
      ]
    },
    {
      "content": "You will now create the worker role that processes the order",
      "pos": [
        22071,
        22131
      ]
    },
    {
      "content": "submissions.",
      "pos": [
        22132,
        22144
      ]
    },
    {
      "content": "This example uses the <bpt id=\"p1\">**</bpt>Worker Role with Service Bus Queue<ept id=\"p1\">**</ept> Visual Studio project template.",
      "pos": [
        22145,
        22237
      ]
    },
    {
      "content": "First, use Server Explorer in Visual Studio to obtain the required credentials.",
      "pos": [
        22238,
        22317
      ]
    },
    {
      "content": "Make sure you have connected Visual Studio to your Azure account.",
      "pos": [
        22322,
        22387
      ]
    },
    {
      "pos": [
        22393,
        22508
      ],
      "content": "In Visual Studio, in **Solution Explorer** right-click the\n**Roles** folder under the **MultiTierApp** project.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In Visual Studio, in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> right-click the",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Roles<ept id=\"p1\">**</ept> folder under the <bpt id=\"p2\">**</bpt>MultiTierApp<ept id=\"p2\">**</ept> project.",
          "pos": [
            59,
            111
          ]
        }
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>New Worker Role Project<ept id=\"p2\">**</ept>.",
      "pos": [
        22514,
        22572
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Add New Role Project<ept id=\"p1\">**</ept> dialog box appears.",
      "pos": [
        22573,
        22621
      ]
    },
    {
      "pos": [
        22640,
        22729
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Add New Role Project<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>Worker Role with Service Bus Queue<ept id=\"p2\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, name the project <bpt id=\"p2\">**</bpt>OrderProcessingRole<ept id=\"p2\">**</ept>.",
      "pos": [
        22748,
        22810
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.",
      "pos": [
        22811,
        22830
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept>, right-click the name of your service namespace, then click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.",
      "pos": [
        22836,
        22934
      ]
    },
    {
      "content": "In the Visual Studio <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> pane, the first entry contains a connection string that is populated with the namespace endpoint containing the required authorization credentials.",
      "pos": [
        22935,
        23118
      ]
    },
    {
      "content": "For example, see the following screen shot.",
      "pos": [
        23119,
        23162
      ]
    },
    {
      "content": "Double-click <bpt id=\"p1\">**</bpt>ConnectionString<ept id=\"p1\">**</ept>, and then press <bpt id=\"p2\">**</bpt>Ctrl+C<ept id=\"p2\">**</ept> to copy this string to the clipboard.",
      "pos": [
        23163,
        23261
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>OrderProcessingRole<ept id=\"p2\">**</ept> you created in step 5 (make sure that you right-click <bpt id=\"p3\">**</bpt>OrderProcessingRole<ept id=\"p3\">**</ept> under <bpt id=\"p4\">**</bpt>Roles<ept id=\"p4\">**</ept>, and not the class).",
      "pos": [
        23280,
        23460
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.",
      "pos": [
        23461,
        23487
      ]
    },
    {
      "pos": [
        23493,
        23684
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> dialog box, click inside the <bpt id=\"p3\">**</bpt>Value<ept id=\"p3\">**</ept> box for <bpt id=\"p4\">**</bpt>Microsoft.ServiceBus.ConnectionString<ept id=\"p4\">**</ept>, and then paste the endpoint value you copied in step 6."
    },
    {
      "content": "Create an <bpt id=\"p1\">**</bpt>OnlineOrder<ept id=\"p1\">**</ept> class to represent the orders as you process them from the queue.",
      "pos": [
        23703,
        23794
      ]
    },
    {
      "content": "You can reuse a class you have already created.",
      "pos": [
        23795,
        23842
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>OrderProcessingRole<ept id=\"p2\">**</ept> project (right-click the project, not the role).",
      "pos": [
        23843,
        23957
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Existing Item<ept id=\"p2\">**</ept>.",
      "pos": [
        23958,
        24002
      ]
    },
    {
      "pos": [
        24008,
        24131
      ],
      "content": "Browse to the subfolder for <bpt id=\"p1\">**</bpt>FrontendWebRole\\Models<ept id=\"p1\">**</ept>, and then double-click <bpt id=\"p2\">**</bpt>OnlineOrder.cs<ept id=\"p2\">**</ept> to add it to this project."
    },
    {
      "pos": [
        24137,
        24299
      ],
      "content": "In WorkerRole.cs, replace the value of the <bpt id=\"p1\">**</bpt>QueueName<ept id=\"p1\">**</ept> variable in <bpt id=\"p2\">**</bpt>WorkerRole.cs<ept id=\"p2\">**</ept> from <ph id=\"ph1\">`\"ProcessingQueue\"`</ph> to <ph id=\"ph2\">`\"OrdersQueue\"`</ph> as shown in the following code."
    },
    {
      "content": "Add the following using statement at the top of the WorkerRole.cs file.",
      "pos": [
        24389,
        24460
      ]
    },
    {
      "pos": [
        24505,
        24606
      ],
      "content": "In the <ph id=\"ph1\">`Run()`</ph> function, inside the <ph id=\"ph2\">`OnMessage`</ph> call, add the following code inside the <ph id=\"ph3\">`try`</ph> clause."
    },
    {
      "pos": [
        24931,
        25512
      ],
      "content": "You have completed the application. You can test the full\napplication by right-clicking the MultiTierApp project in Solution Explorer,\nselecting **Set as Startup Project**, and then pressing F5. Note that the\nmessage count does not increment, because the worker role processes items\nfrom the queue and marks them as complete. You can see the trace output of\nyour worker role by viewing the Azure Compute Emulator UI. You\ncan do this by right-clicking the emulator icon in the notification\narea of your taskbar and selecting **Show Compute Emulator UI**.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "You have completed the application. You can test the full",
          "pos": [
            0,
            57
          ],
          "nodes": [
            {
              "content": "You have completed the application.",
              "pos": [
                0,
                35
              ]
            },
            {
              "content": "You can test the full",
              "pos": [
                36,
                57
              ]
            }
          ]
        },
        {
          "content": "application by right-clicking the MultiTierApp project in Solution Explorer,",
          "pos": [
            58,
            134
          ]
        },
        {
          "content": "selecting **Set as Startup Project**, and then pressing F5. Note that the",
          "pos": [
            135,
            208
          ],
          "nodes": [
            {
              "content": "selecting <bpt id=\"p1\">**</bpt>Set as Startup Project<ept id=\"p1\">**</ept>, and then pressing F5.",
              "pos": [
                0,
                59
              ]
            },
            {
              "content": "Note that the",
              "pos": [
                60,
                73
              ]
            }
          ]
        },
        {
          "content": "message count does not increment, because the worker role processes items",
          "pos": [
            209,
            282
          ]
        },
        {
          "content": "from the queue and marks them as complete. You can see the trace output of",
          "pos": [
            283,
            357
          ],
          "nodes": [
            {
              "content": "from the queue and marks them as complete.",
              "pos": [
                0,
                42
              ]
            },
            {
              "content": "You can see the trace output of",
              "pos": [
                43,
                74
              ]
            }
          ]
        },
        {
          "content": "your worker role by viewing the Azure Compute Emulator UI. You",
          "pos": [
            358,
            420
          ],
          "nodes": [
            {
              "content": "your worker role by viewing the Azure Compute Emulator UI.",
              "pos": [
                0,
                58
              ]
            },
            {
              "content": "You",
              "pos": [
                59,
                62
              ]
            }
          ]
        },
        {
          "content": "can do this by right-clicking the emulator icon in the notification",
          "pos": [
            421,
            488
          ]
        },
        {
          "content": "area of your taskbar and selecting <bpt id=\"p1\">**</bpt>Show Compute Emulator UI<ept id=\"p1\">**</ept>.",
          "pos": [
            489,
            553
          ]
        }
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        25543,
        25553
      ]
    },
    {
      "content": "To learn more about Service Bus, see the following resources:",
      "pos": [
        25557,
        25618
      ]
    },
    {
      "content": "Azure Service Bus",
      "pos": [
        25625,
        25642
      ]
    },
    {
      "content": "Service Bus service page",
      "pos": [
        25657,
        25681
      ]
    },
    {
      "content": "How to Use Service Bus Queues",
      "pos": [
        25697,
        25726
      ]
    },
    {
      "content": "To learn more about multi-tier scenarios, or to learn how to deploy an application to a cloud service, see:",
      "pos": [
        25746,
        25853
      ]
    },
    {
      "content": ".NET Multi-Tier Application Using Storage Tables, Queues, and Blobs",
      "pos": [
        25860,
        25927
      ]
    },
    {
      "content": "You might want to implement the front-end of a multi-tier application in an Azure website instead of an Azure cloud service.",
      "pos": [
        25949,
        26073
      ]
    },
    {
      "content": "To learn more about the difference between websites and cloud services, see <bpt id=\"p1\">[</bpt>Azure Execution Models<ept id=\"p1\">][executionmodels]</ept>.",
      "pos": [
        26074,
        26192
      ]
    },
    {
      "content": "To implement the application you create in this tutorial as a standard web project instead of as a cloud service web role, follow the steps in this tutorial with the following differences:",
      "pos": [
        26194,
        26382
      ]
    },
    {
      "content": "When you create the project, choose the <bpt id=\"p1\">**</bpt>ASP.NET MVC Web Application<ept id=\"p1\">**</ept> project template in the <bpt id=\"p2\">**</bpt>Web<ept id=\"p2\">**</ept> category instead of the <bpt id=\"p3\">**</bpt>Cloud Service<ept id=\"p3\">**</ept> template in the <bpt id=\"p4\">**</bpt>Cloud<ept id=\"p4\">**</ept> category.",
      "pos": [
        26387,
        26568
      ]
    },
    {
      "content": "Then follow the same directions for creating the MVC application, until you get to the <bpt id=\"p1\">**</bpt>Cloud configuration manager<ept id=\"p1\">**</ept> section.",
      "pos": [
        26569,
        26696
      ]
    },
    {
      "content": "When you create the worker role, create it in a new, separate solution, similar to the original instructions for the web role.",
      "pos": [
        26701,
        26827
      ]
    },
    {
      "content": "Now however, you're creating just the worker role in the cloud service project.",
      "pos": [
        26828,
        26907
      ]
    },
    {
      "content": "Then follow the same directions for creating the worker role.",
      "pos": [
        26908,
        26969
      ]
    },
    {
      "content": "You can test the front-end and back-end separately, or you can run both simultaneously in separate Visual Studio instances.",
      "pos": [
        26974,
        27097
      ]
    },
    {
      "content": "To learn how to deploy the front end to an Azure website, see <bpt id=\"p1\">[</bpt>Deploying an ASP.NET Web Application to an Azure Website<ept id=\"p1\">](http://azure.microsoft.com/develop/net/tutorials/get-started/)</ept>.",
      "pos": [
        27099,
        27283
      ]
    },
    {
      "content": "To learn how to deploy the back end to an Azure cloud service, see <bpt id=\"p1\">[</bpt>.NET Multi-Tier Application Using Storage Tables, Queues, and Blobs<ept id=\"p1\">][mutitierstorage]</ept>.",
      "pos": [
        27284,
        27438
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\".NET multi-tier application | Microsoft Azure\"\n    description=\"A tutorial that helps you develop a multi-tier app in Azure that uses Service Bus queues to communicate between tiers. Samples in .NET.\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\"\n    ms.date=\"07/02/2015\"\n    ms.author=\"sethm\"/>\n\n# .NET multi-tier application using Azure Service Bus queues\n\n## Introduction\n\nDeveloping for Microsoft Azure is easy using Visual Studio 2013 and the free Azure SDK for .NET. If you do not already have Visual Studio 2013, the SDK will automatically install Visual Studio Express, so you can start developing for Azure entirely for\nfree. This article assumes you have no prior experience using Azure. After completing this tutorial, you will have an application that uses\nmultiple Azure resources running in your local environment and\nthat demonstrates how a multi-tier application works.\n\nYou will learn:\n\n-   How to enable your computer for Azure development with a\n    single download and install.\n-   How to use Visual Studio to develop for Azure.\n-   How to create a multi-tier application in Azure using web\n    and worker roles.\n-   How to communicate between tiers using Service Bus queues.\n\n[AZURE.INCLUDE [create-account-note](../../includes/create-account-note.md)]\n\nIn this tutorial you'll build and run the multi-tier application in an Azure cloud service. The front end will be an ASP.NET MVC web role and the back end will be a worker-role. You can create the same multi-tier application with the front end as a web project that is deployed to an Azure website instead of a cloud service. For instructions about what to do differently on an Azure website front end, see the [Next steps](#nextsteps) section.\n\nThe following screen shot shows the completed application.\n\n![][0]\n\n> [AZURE.NOTE] Azure also provides storage queue functionality. For more information about Azure storage queues and Service Bus queues, see [Azure Queues and Azure Service Bus Queues - Compared and Contrasted][sbqueuecomparison].  \n\n## Scenario overview: Inter-role communication\n\nTo submit an order for processing, the front end UI component, running\nin the web role, needs to interact with the middle tier logic running in\nthe worker role. This example uses Service Bus brokered messaging for\nthe communication between the tiers.\n\nUsing brokered messaging between the web and middle tiers decouples the\ntwo components. In contrast to direct messaging (that is, TCP or HTTP),\nthe web tier does not connect to the middle tier directly; instead it\npushes units of work, as messages, into the Service Bus, which reliably\nretains them until the middle tier is ready to consume and process them.\n\nService Bus provides two entities to support brokered messaging:\nqueues and topics. With queues, each message sent to the queue is\nconsumed by a single receiver. Topics support the publish/subscribe\npattern in which each published message is made available to a subscription registered with the topic. Each subscription logically\nmaintains its own queue of messages. Subscriptions can also be\nconfigured with filter rules that restrict the set of messages passed to\nthe subscription queue to those that match the filter. The following example uses\nService Bus queues.\n\n![][1]\n\nThis communication mechanism has several advantages over direct\nmessaging:\n\n-   **Temporal decoupling.** With the asynchronous messaging pattern,\n    producers and consumers need not be online at the same time. Service\n    Bus reliably stores messages until the consuming party is ready to\n    receive them. This allows the components of the distributed\n    application to be disconnected, either voluntarily, for example, for\n    maintenance, or due to a component crash, without impacting the\n    system as a whole. Furthermore, the consuming application may only\n    need to come online during certain times of the day.\n\n-   **Load leveling.** In many applications, system load varies over\n    time, while the processing time required for each unit of work is\n    typically constant. Intermediating message producers and consumers\n    with a queue means that the consuming application (the worker) only needs to be provisioned to accommodate average load rather than peak\n    load. The depth of the queue will grow and contract as the incoming\n    load varies. This directly saves money in terms of the amount of\n    infrastructure required to service the application load.\n\n-   **Load balancing.** As load increases, more worker processes can be\n    added to read from the queue. Each message is processed by only one\n    of the worker processes. Furthermore, this pull-based load balancing\n    allows for optimum utilization of the worker machines even if the\n    worker machines differ in terms of processing power as they will\n    pull messages at their own maximum rate. This pattern is often\n    termed the competing consumer pattern.\n\n    ![][2]\n\nThe following sections discuss the code that implements this architecture.\n\n## Set up the development environment\n\nBefore you can begin developing your Azure application, download the tools and set up your development environment:\n\n1.  To install the Azure SDK for .NET, click the following link.\n\n    [Get Tools and SDK][]\n\n2.  Click the link for the version of Visual Studio you are using. The steps in this tutorial use Visual Studio 2013.\n\n    ![][32]\n\n4.  When prompted to run or save the installation file, click\n    **Run**.\n\n    ![][3]\n\n5.  In the Web Platform Installer, click **Install** and proceed with the installation.\n\n    ![][33]\n\n6.  Once the installation is complete, you have everything\n    necessary to start developing the app. The SDK includes tools that enable you\n    to develop Azure applications in Visual Studio. If you\n    do not have Visual Studio installed, it also installs the free\n    Visual Studio Express for Web.\n\n## Set up the Service Bus namespace\n\nThe next step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key. A service namespace provides an application boundary for\neach application exposed through Service Bus. A SAS key is\ngenerated by the system when a service namespace is\ncreated. The combination of service namespace and SAS key\nprovides the credentials for Service Bus to authenticate access to an\napplication.\n\n> [AZURE.NOTE] You can also manage namespaces and Service Bus messaging entities using the Visual Studio Server Explorer, but you can only create new namespaces from within the Azure portal.\n\n### Set up the namespace using the Azure portal\n\n1.  Log into the [Azure portal][].\n\n2.  In the left navigation pane of the Azure portal, click\n    **Service Bus**.\n\n3.  In the lower pane of the Azure portal, click **Create**.\n\n    ![][6]\n\n4.  In the **Add a new namespace** page, enter a namespace name. The system immediately checks to see if the name is available.\n\n    ![][7]\n\n5.  After making sure the namespace name is available, choose the\n    country or region in which your namespace should be hosted (make\n    sure you use the same country/region in which you are deploying your\n    compute resources). Also, make sure that you select **Messaging** in the namespace **Type** field, and **Standard** in the **Messaging Tier** field.\n\n    > [AZURE.IMPORTANT] Pick the **same region** that you intend to choose to\n    deploy your application. This will give you the best performance.\n\n6.  Click the check mark. The system now creates your service\n    namespace and enables it. You might have to wait several minutes as\n    the system provisions resources for your account.\n\n    ![][27]\n\n7.  In the main window, click the name of your service namespace.\n\n    ![][30]\n\n8. Click **Connection Information**.\n\n    ![][31]\n\n9.  In the **Access connection information** pane, find the connection string that contains the SAS key and key name.\n\n    ![][35]\n\n10.  Make a note of these credentials, or copy them to the clipboard.\n\n## Create a web role\n\nIn this section, you will build the front end of your application. You\nwill first create the various pages that your application displays.\nAfter that, you will add the code for submitting items to a Service Bus\nqueue and displaying status information about the queue.\n\n### Create the project\n\n1.  Using administrator privileges, start either Microsoft Visual Studio\n    2013 or Microsoft Visual Studio Express. To start Visual\n    Studio with administrator privileges, right-click **Microsoft Visual\n    Studio 2013 (or Microsoft Visual Studio Express)** and\n    then click **Run as administrator**. The Azure compute emulator,\n    discussed later in this article, requires that Visual Studio be\n    started with administrator privileges.\n\n    In Visual Studio, on the **File** menu, click **New**, and then\n    click **Project**.\n\n    ![][8]\n\n2.  From **Installed Templates**, under **Visual C#**, click **Cloud** and\n    then click **Azure Cloud Service**. Name the project\n    **MultiTierApp**. Then click **OK**.\n\n    ![][9]\n\n3.  From **.NET Framework 4.5** roles, double-click **ASP.NET Web\n    Role**.\n\n    ![][10]\n\n4.  Hover over **WebRole1** under **Azure Cloud Service solution**, click\n    the pencil icon, and rename the web role to **FrontendWebRole**. Then click **OK**. (Make sure you enter \"Frontend\" with a lower-case 'e,' not \"FrontEnd\".)\n\n    ![][11]\n\n5.  From the **New ASP.NET Project** dialog box, in the **Select a template** list, click **MVC**,\n    then click **OK**.\n\n    ![][12]\n\n6.  In **Solution Explorer**, right-click **References**, then click\n    **Manage NuGet Packages** or **Add Library Package Reference**.\n\n7.  Select **Online** on the left side of the dialog box. Search for\n    \"**Service Bus**\" and select the **Microsoft Azure Service\n    Bus** item. Then complete the installation and close this dialog box.\n\n    ![][13]\n\n8.  Note that the required client assemblies are now referenced and some\n    new code files have been added.\n\n9.  In **Solution Explorer**, right-click **Models** and click **Add**,\n    then click **Class**. In the **Name** box, type the name\n    **OnlineOrder.cs**. Then click **Add**.\n\n### Write the code for your web role\n\nIn this section, you will create the various pages that your application\ndisplays.\n\n1.  In the OnlineOrder.cs file in Visual Studio, replace the\n    existing namespace definition with the following code:\n\n        namespace FrontendWebRole.Models\n        {\n            public class OnlineOrder\n            {\n                public string Customer { get; set; }\n                public string Product { get; set; }\n            }\n        }\n\n2.  In **Solution Explorer**, double-click\n    **Controllers\\HomeController.cs**. Add the following **using**\n    statements at the top of the file to include the namespaces for the\n    model you just created, as well as Service Bus.\n\n        using FrontendWebRole.Models;\n        using Microsoft.ServiceBus.Messaging;\n        using Microsoft.ServiceBus;\n\n3.  Also in the HomeController.cs file in Visual Studio, replace the\n    existing namespace definition with the following code. This code\n    contains methods for handling the submission of items to the queue.\n\n        namespace FrontendWebRole.Controllers\n        {\n            public class HomeController : Controller\n            {\n                public ActionResult Index()\n                {\n                    // Simply redirect to Submit, since Submit will serve as the\n                    // front page of this application.\n                    return RedirectToAction(\"Submit\");\n                }\n\n                public ActionResult About()\n                {\n                    return View();\n                }\n\n                // GET: /Home/Submit.\n                // Controller method for a view you will create for the submission\n                // form.\n                public ActionResult Submit()\n                {\n                    // Will put code for displaying queue message count here.\n\n                    return View();\n                }\n\n                // POST: /Home/Submit.\n                // Controller method for handling submissions from the submission\n                // form.\n                [HttpPost]\n                // Attribute to help prevent cross-site scripting attacks and\n                // cross-site request forgery.  \n                [ValidateAntiForgeryToken]\n                public ActionResult Submit(OnlineOrder order)\n                {\n                    if (ModelState.IsValid)\n                    {\n                        // Will put code for submitting to queue here.\n\n                        return RedirectToAction(\"Submit\");\n                    }\n                    else\n                    {\n                        return View(order);\n                    }\n                }\n            }\n        }\n\n4.  On the **Build** menu, click **Build Solution** to test the accuracy of your work so far.\n\n5.  Now, you will create the view for the **Submit()** method you\n    created earlier. Right-click within the **Submit()** method, and then choose\n    **Add View**.\n\n    ![][14]\n\n6.  A dialog box appears for creating the view. In the **Template** list, choose **Create**. In the **Model class** list, click the **OnlineOrder** class.\n\n    ![][15]\n\n7.  Click **Add**.\n\n8.  Now, change the displayed name of your application. In **Solution Explorer**, double-click the\n    **Views\\Shared\\\\_Layout.cshtml** file to open it in the Visual\n    Studio editor.\n\n9.  Replace all occurrences of **My ASP.NET Application** with\n    **LITWARE'S Products**.\n\n10. Remove the **Home**, **About**, and **Contact** links. Delete the highlighted code:\n\n    ![][28]\n\n11. Finally, modify the submission page to include some information about\n    the queue. In **Solution Explorer**, double-click the\n    **Views\\Home\\Submit.cshtml** file to open it in the Visual Studio\n    editor. Add the following line after **&lt;h2>Submit&lt;/h2>**. For now,\n    the **ViewBag.MessageCount** is empty. You will populate it later.\n\n        <p>Current number of orders in queue waiting to be processed: @ViewBag.MessageCount</p>\n\n12. You now have implemented your UI. You can press **F5** to run your\n    application and confirm that it looks as expected.\n\n    ![][17]\n\n### Write the code for submitting items to a Service Bus queue\n\nNow, you will add code for submitting items to a queue. You will first\ncreate a class that contains your Service Bus queue connection\ninformation. Then, you will initialize your connection from\nGlobal.aspx.cs. Finally, you will update the submission code you\ncreated earlier in HomeController.cs to actually submit items to a\nService Bus queue.\n\n1.  In **Solution Explorer**, right-click **FrontendWebRole** (right-click the project, not the role). Click **Add**, and then click **Class**.\n\n2.  Name the class QueueConnector.cs. Click **Add** to create the class.\n\n3.  You will now add code that encapsulates the connection information and initializes the connection to a Service Bus queue. In QueueConnector.cs, add the following code, and enter values for **Namespace** (your service namespace) and **yourKey**, which is the SAS key you obtained from the [Azure portal][Azure portal] earlier.\n\n        using System;\n        using System.Collections.Generic;\n        using System.Linq;\n        using System.Web;\n        using Microsoft.ServiceBus.Messaging;\n        using Microsoft.ServiceBus;\n\n        namespace FrontendWebRole\n        {\n            public static class QueueConnector\n            {\n                // Thread-safe. Recommended that you cache rather than recreating it\n                // on every request.\n                public static QueueClient OrdersQueueClient;\n\n                // Obtain these values from the Azure portal.\n                public const string Namespace = \"your service bus namespace\";\n\n                // The name of your queue.\n                public const string QueueName = \"OrdersQueue\";\n\n                public static NamespaceManager CreateNamespaceManager()\n                {\n                    // Create the namespace manager which gives you access to\n                    // management operations.\n                    var uri = ServiceBusEnvironment.CreateServiceUri(\n                        \"sb\", Namespace, String.Empty);\n                    var tP = TokenProvider.CreateSharedAccessSignatureTokenProvider(\n                        \"RootManageSharedAccessKey\", \"yourKey\");\n                    return new NamespaceManager(uri, tP);\n                }\n\n                public static void Initialize()\n                {\n                    // Using Http to be friendly with outbound firewalls.\n                    ServiceBusEnvironment.SystemConnectivity.Mode =\n                        ConnectivityMode.Http;\n\n                    // Create the namespace manager which gives you access to\n                    // management operations.\n                    var namespaceManager = CreateNamespaceManager();\n\n                    // Create the queue if it does not exist already.\n                    if (!namespaceManager.QueueExists(QueueName))\n                    {\n                        namespaceManager.CreateQueue(QueueName);\n                    }\n\n                    // Get a client to the queue.\n                    var messagingFactory = MessagingFactory.Create(\n                        namespaceManager.Address,\n                        namespaceManager.Settings.TokenProvider);\n                    OrdersQueueClient = messagingFactory.CreateQueueClient(\n                        \"OrdersQueue\");\n                }\n            }\n        }\n\n    Note that later in this tutorial you will learn how to store the name of your **Namespace** and your SAS key value in a configuration file.\n\n4.  Now, ensure that your **Initialize** method gets called. In **Solution Explorer**, double-click **Global.asax\\Global.asax.cs**.\n\n5.  Add the following line to the bottom of the **Application_Start**\n    method.\n\n        FrontendWebRole.QueueConnector.Initialize();\n\n6.  Finally, update the web code you created earlier, to\n    submit items to the queue. In **Solution Explorer**,\n    double-click **Controllers\\HomeController.cs**.\n\n7.  Update the **Submit()** method as follows to get the message count\n    for the queue.\n\n        public ActionResult Submit()\n        {\n            // Get a NamespaceManager which allows you to perform management and\n            // diagnostic operations on your Service Bus queues.\n            var namespaceManager = QueueConnector.CreateNamespaceManager();\n\n            // Get the queue, and obtain the message count.\n            var queue = namespaceManager.GetQueue(QueueConnector.QueueName);\n            ViewBag.MessageCount = queue.MessageCount;\n\n            return View();\n        }\n\n8.  Update the **Submit(OnlineOrder order)** method as follows to submit\n    order information to the queue.\n\n        public ActionResult Submit(OnlineOrder order)\n        {\n            if (ModelState.IsValid)\n            {\n                // Create a message from the order.\n                var message = new BrokeredMessage(order);\n\n                // Submit the order.\n                QueueConnector.OrdersQueueClient.Send(message);\n                return RedirectToAction(\"Submit\");\n            }\n            else\n            {\n                return View(order);\n            }\n        }\n\n9.  You can now run the application again. Each time you submit an\n    order, the message count increases.\n\n    ![][18]\n\n## Cloud configuration manager\n\nThe **GetSettings** method in the\n**Microsoft.WindowsAzure.Configuration.CloudConfigurationManager** class\nenables you to read configuration settings from the configuration store for your\nplatform. For example, if your code is running\nin a web or worker role the **GetSettings** method reads the\nServiceConfiguration.cscfg file, and if your code is running in a standard\nconsole app the **GetSettings** method reads the app.config file.\n\nIf you store a connection string for your Service Bus namespace in a\nconfiguration file, you can use the **GetSettings** method to read a connection\nstring that you can use to instantiate a **NamespaceMananger** object. You can\nuse a **NamespaceMananger** instance to configure your Service Bus namespace\nprogrammatically. You can use the same connection string to instantiate a client\nobjects (such as **QueueClient**, **TopicClient**, and **EventHubClient**\nobject) that you can use to perform runtime operations such as sending and\nreceiving messages.\n\n### Connection string\n\nTo instantiate a client (for example, a Service Bus **QueueClient**), you can represent the configuration information as a connection string. On the client side, there is a `CreateFromConnectionString()` method that instantiates that client type by using that connection string. For example, given the following configuration section\n\n    <ConfigurationSettings>\n    ...\n        <Setting name=\"Microsoft.ServiceBus.ConnectionString\" value=\"Endpoint=sb://[yourServiceNamespace].servicebus.windows.net/;SharedSecretIssuer=RootManageSharedAccessKey;SharedSecretValue=[yourKey]\" />\n    </ConfigurationSettings>\n\nThe following code retrieves the connection string, creates a queue, and initializes the connection to the queue.\n\n    QueueClient Client;\n\n    string connectionString =\n     CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n     NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.QueueExists(QueueName))\n    {\n        namespaceManager.CreateQueue(QueueName);\n    }\n\n    // Initialize the connection to Service Bus queue.\n    Client = QueueClient.CreateFromConnectionString(connectionString, QueueName);\n\nThe code in the following section uses the **CloudConfigurationManager** class.\n\n## Create the worker role\n\nYou will now create the worker role that processes the order\nsubmissions. This example uses the **Worker Role with Service Bus Queue** Visual Studio project template. First, use Server Explorer in Visual Studio to obtain the required credentials.\n\n1. Make sure you have connected Visual Studio to your Azure account.\n\n2.  In Visual Studio, in **Solution Explorer** right-click the\n    **Roles** folder under the **MultiTierApp** project.\n\n3.  Click **Add**, and then click **New Worker Role Project**. The **Add New Role Project** dialog box appears.\n\n    ![][26]\n\n4.  In the **Add New Role Project** dialog box, click **Worker Role with Service Bus Queue**.\n\n    ![][23]\n\n5.  In the **Name** box, name the project **OrderProcessingRole**. Then click **Add**.\n\n6.  In **Server Explorer**, right-click the name of your service namespace, then click **Properties**. In the Visual Studio **Properties** pane, the first entry contains a connection string that is populated with the namespace endpoint containing the required authorization credentials. For example, see the following screen shot. Double-click **ConnectionString**, and then press **Ctrl+C** to copy this string to the clipboard.\n\n    ![][24]\n\n7.  In **Solution Explorer**, right-click the **OrderProcessingRole** you created in step 5 (make sure that you right-click **OrderProcessingRole** under **Roles**, and not the class). Then click **Properties**.\n\n8.  On the **Settings** tab of the **Properties** dialog box, click inside the **Value** box for **Microsoft.ServiceBus.ConnectionString**, and then paste the endpoint value you copied in step 6.\n\n    ![][25]\n\n9.  Create an **OnlineOrder** class to represent the orders as you process them from the queue. You can reuse a class you have already created. In **Solution Explorer**, right-click the **OrderProcessingRole** project (right-click the project, not the role). Click **Add**, then click **Existing Item**.\n\n10. Browse to the subfolder for **FrontendWebRole\\Models**, and then double-click **OnlineOrder.cs** to add it to this project.\n\n11. In WorkerRole.cs, replace the value of the **QueueName** variable in **WorkerRole.cs** from `\"ProcessingQueue\"` to `\"OrdersQueue\"` as shown in the following code.\n\n        // The name of your queue.\n        const string QueueName = \"OrdersQueue\";\n\n12. Add the following using statement at the top of the WorkerRole.cs file.\n\n        using FrontendWebRole.Models;\n\n13. In the `Run()` function, inside the `OnMessage` call, add the following code inside the `try` clause.\n\n        Trace.WriteLine(\"Processing\", receivedMessage.SequenceNumber.ToString());\n        // View the message as an OnlineOrder.\n        OnlineOrder order = receivedMessage.GetBody<OnlineOrder>();\n        Trace.WriteLine(order.Customer + \": \" + order.Product, \"ProcessingMessage\");\n        receivedMessage.Complete();\n\n14. You have completed the application. You can test the full\n    application by right-clicking the MultiTierApp project in Solution Explorer,\n    selecting **Set as Startup Project**, and then pressing F5. Note that the\n    message count does not increment, because the worker role processes items\n    from the queue and marks them as complete. You can see the trace output of\n    your worker role by viewing the Azure Compute Emulator UI. You\n    can do this by right-clicking the emulator icon in the notification\n    area of your taskbar and selecting **Show Compute Emulator UI**.\n\n    ![][19]\n\n    ![][20]\n\n## Next steps  \n\nTo learn more about Service Bus, see the following resources:  \n\n* [Azure Service Bus][sbmsdn]  \n* [Service Bus service page][sbwacom]  \n* [How to Use Service Bus Queues][sbwacomqhowto]  \n\nTo learn more about multi-tier scenarios, or to learn how to deploy an application to a cloud service, see:  \n\n* [.NET Multi-Tier Application Using Storage Tables, Queues, and Blobs][mutitierstorage]  \n\nYou might want to implement the front-end of a multi-tier application in an Azure website instead of an Azure cloud service. To learn more about the difference between websites and cloud services, see [Azure Execution Models][executionmodels].\n\nTo implement the application you create in this tutorial as a standard web project instead of as a cloud service web role, follow the steps in this tutorial with the following differences:\n\n1. When you create the project, choose the **ASP.NET MVC Web Application** project template in the **Web** category instead of the **Cloud Service** template in the **Cloud** category. Then follow the same directions for creating the MVC application, until you get to the **Cloud configuration manager** section.\n\n2. When you create the worker role, create it in a new, separate solution, similar to the original instructions for the web role. Now however, you're creating just the worker role in the cloud service project. Then follow the same directions for creating the worker role.\n\n3. You can test the front-end and back-end separately, or you can run both simultaneously in separate Visual Studio instances.\n\nTo learn how to deploy the front end to an Azure website, see [Deploying an ASP.NET Web Application to an Azure Website](http://azure.microsoft.com/develop/net/tutorials/get-started/). To learn how to deploy the back end to an Azure cloud service, see [.NET Multi-Tier Application Using Storage Tables, Queues, and Blobs][mutitierstorage].\n\n\n  [0]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-01.png\n  [1]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-100.png\n  [sbqueuecomparison]: service-bus-azure-and-service-bus-queues-compared-contrasted.md\n  [2]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-101.png\n  [Get Tools and SDK]: http://go.microsoft.com/fwlink/?LinkId=271920\n  [3]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-3.png\n\n\n\n  [Azure portal]: http://manage.windowsazure.com\n  [6]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-03.png\n  [7]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-04.png\n  [8]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-09.png\n  [9]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-10.png\n  [10]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-11.png\n  [11]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-02.png\n  [12]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-12.png\n  [13]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-13.png\n  [14]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-33.png\n  [15]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-34.png\n  [16]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-35.png\n  [17]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-36.png\n  [18]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-37.png\n\n  [19]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-38.png\n  [20]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-39.png\n  [23]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBWorkerRole1.png\n  [24]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBExplorerProperties.png\n  [25]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBWorkerRoleProperties.png\n  [26]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBNewWorkerRole.png\n  [27]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-27.png\n  [28]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-40.png\n  [30]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-09.png\n  [31]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-06.png\n  [32]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-41.png\n  [33]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-4-2-WebPI.png\n  [35]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/multi-web-45.png\n  [sbmsdn]: http://msdn.microsoft.com/library/azure/ee732537.aspx  \n  [sbwacom]: /documentation/services/service-bus/  \n  [sbwacomqhowto]: service-bus-dotnet-how-to-use-queues.md  \n  [mutitierstorage]: https://code.msdn.microsoft.com/Windows-Azure-Multi-Tier-eadceb36\n  [executionmodels]: ../cloud-services/fundamentals-application-models.md\n"
}