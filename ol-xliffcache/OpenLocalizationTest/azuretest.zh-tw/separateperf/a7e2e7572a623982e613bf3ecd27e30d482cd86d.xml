{
  "nodes": [
    {
      "content": "How to use Service Bus queues (Ruby) | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus queues in Azure.",
      "pos": [
        100,
        145
      ]
    },
    {
      "content": "Code samples written in Ruby.",
      "pos": [
        146,
        175
      ]
    },
    {
      "content": "How to Use Service Bus Queues",
      "pos": [
        480,
        509
      ]
    },
    {
      "content": "This guide will show you how to use Service Bus queues.",
      "pos": [
        511,
        566
      ]
    },
    {
      "content": "The samples are",
      "pos": [
        567,
        582
      ]
    },
    {
      "content": "written in Ruby and use the Azure gem.",
      "pos": [
        583,
        621
      ]
    },
    {
      "content": "The scenarios",
      "pos": [
        622,
        635
      ]
    },
    {
      "content": "covered include <bpt id=\"p1\">**</bpt>creating queues, sending and receiving messages<ept id=\"p1\">**</ept>, and",
      "pos": [
        636,
        708
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>deleting queues<ept id=\"p1\">**</ept>.",
      "pos": [
        709,
        729
      ]
    },
    {
      "content": "For more information on queues, see the <bpt id=\"p1\">[</bpt>Next Steps<ept id=\"p1\">](#next-steps)</ept> section.",
      "pos": [
        730,
        804
      ]
    },
    {
      "content": "What are Service Bus queues?",
      "pos": [
        809,
        837
      ]
    },
    {
      "content": "Service Bus Queues support a <bpt id=\"p1\">**</bpt>brokered messaging communication<ept id=\"p1\">**</ept>",
      "pos": [
        839,
        904
      ]
    },
    {
      "content": "model.",
      "pos": [
        905,
        911
      ]
    },
    {
      "content": "When using queues, components of a distributed application do not",
      "pos": [
        912,
        977
      ]
    },
    {
      "content": "communicate directly with each other, they instead exchange messages via",
      "pos": [
        978,
        1050
      ]
    },
    {
      "content": "a queue, which acts as an intermediary.",
      "pos": [
        1051,
        1090
      ]
    },
    {
      "content": "A message producer (sender)",
      "pos": [
        1091,
        1118
      ]
    },
    {
      "content": "hands off a message to the queue and then continues its processing.",
      "pos": [
        1119,
        1186
      ]
    },
    {
      "content": "Asynchronously, a message consumer (receiver) pulls the message from the",
      "pos": [
        1187,
        1259
      ]
    },
    {
      "content": "queue and processes it.",
      "pos": [
        1260,
        1283
      ]
    },
    {
      "content": "The producer does not have to wait for a reply",
      "pos": [
        1284,
        1330
      ]
    },
    {
      "content": "from the consumer in order to continue to process and send further",
      "pos": [
        1331,
        1397
      ]
    },
    {
      "content": "messages.",
      "pos": [
        1398,
        1407
      ]
    },
    {
      "content": "Queues offer <bpt id=\"p1\">**</bpt>First In, First Out (FIFO)<ept id=\"p1\">**</ept> message delivery",
      "pos": [
        1408,
        1468
      ]
    },
    {
      "content": "to one or more competing consumers.",
      "pos": [
        1469,
        1504
      ]
    },
    {
      "content": "That is, messages are typically",
      "pos": [
        1505,
        1536
      ]
    },
    {
      "content": "received and processed by the receivers in the order in which they were",
      "pos": [
        1537,
        1608
      ]
    },
    {
      "content": "added to the queue, and each message is received and processed by only",
      "pos": [
        1609,
        1679
      ]
    },
    {
      "content": "one message consumer.",
      "pos": [
        1680,
        1701
      ]
    },
    {
      "content": "QueueConcepts",
      "pos": [
        1705,
        1718
      ]
    },
    {
      "content": "Service Bus queues are a general-purpose technology that can be used for",
      "pos": [
        1782,
        1854
      ]
    },
    {
      "content": "a wide variety of scenarios:",
      "pos": [
        1855,
        1883
      ]
    },
    {
      "pos": [
        1889,
        1969
      ],
      "content": "Communication between web and worker roles in a multi-tier\nAzure application",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Communication between web and worker roles in a multi-tier",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "Azure application",
          "pos": [
            59,
            76
          ]
        }
      ]
    },
    {
      "pos": [
        1974,
        2059
      ],
      "content": "Communication between on-premises apps and Azure hosted apps\nin a hybrid solution",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Communication between on-premises apps and Azure hosted apps",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "in a hybrid solution",
          "pos": [
            61,
            81
          ]
        }
      ]
    },
    {
      "pos": [
        2064,
        2214
      ],
      "content": "Communication between components of a distributed application\nrunning on-premises in different organizations or departments of an\norganization",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Communication between components of a distributed application",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "running on-premises in different organizations or departments of an",
          "pos": [
            62,
            129
          ]
        },
        {
          "content": "organization",
          "pos": [
            130,
            142
          ]
        }
      ]
    },
    {
      "content": "Using queues can enable you to scale out your applications better, and",
      "pos": [
        2216,
        2286
      ]
    },
    {
      "content": "enable more resiliency to your architecture.",
      "pos": [
        2287,
        2331
      ]
    },
    {
      "content": "Create a service namespace",
      "pos": [
        2336,
        2362
      ]
    },
    {
      "content": "To begin using Service Bus queues in Azure, you must first create a service namespace.",
      "pos": [
        2363,
        2449
      ]
    },
    {
      "content": "A service namespace provides a scoping container for addressing Service Bus resources within your application.",
      "pos": [
        2450,
        2560
      ]
    },
    {
      "content": "You must create the",
      "pos": [
        2561,
        2580
      ]
    },
    {
      "content": "namespace through the command-line interface because the Portal does not create the service bus with an ACS connection.",
      "pos": [
        2581,
        2700
      ]
    },
    {
      "content": "To create a service namespace:",
      "pos": [
        2702,
        2732
      ]
    },
    {
      "content": "Open an Azure Powershell console.",
      "pos": [
        2737,
        2770
      ]
    },
    {
      "content": "Type the command to create an Azure service bus namespace as shown below.",
      "pos": [
        2775,
        2848
      ]
    },
    {
      "content": "Provide your own namespace value and specify the same region as your application.",
      "pos": [
        2849,
        2930
      ]
    },
    {
      "content": "New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true",
      "pos": [
        2936,
        3058
      ]
    },
    {
      "content": "Create Namespace",
      "pos": [
        3066,
        3082
      ]
    },
    {
      "content": "Obtain management credentials for the namespace",
      "pos": [
        3150,
        3197
      ]
    },
    {
      "content": "In order to perform management operations, such as creating a queue on the new",
      "pos": [
        3198,
        3276
      ]
    },
    {
      "content": "namespace, you must obtain the management credentials for the namespace.",
      "pos": [
        3277,
        3349
      ]
    },
    {
      "content": "The PowerShell cmdlet you ran to create the Azure service bus namespace displays",
      "pos": [
        3351,
        3431
      ]
    },
    {
      "content": "the key you can use to manage the namespace.",
      "pos": [
        3432,
        3476
      ]
    },
    {
      "content": "Copy the <bpt id=\"p1\">**</bpt>DefaultKey<ept id=\"p1\">**</ept> value.",
      "pos": [
        3477,
        3507
      ]
    },
    {
      "content": "You",
      "pos": [
        3508,
        3511
      ]
    },
    {
      "content": "will use this value in your code later in this tutorial.",
      "pos": [
        3512,
        3568
      ]
    },
    {
      "content": "Copy key",
      "pos": [
        3572,
        3580
      ]
    },
    {
      "pos": [
        3644,
        3833
      ],
      "content": "[AZURE.NOTE]\nYou can also find this key if you log on to the\n[Azure Portal](http://manage.windowsazure.com/) and navigate to the\nconnection information for your service bus namespace.",
      "leadings": [
        "",
        "> ",
        "> ",
        "> "
      ],
      "nodes": [
        {
          "content": "You can also find this key if you log on to the",
          "pos": [
            13,
            60
          ]
        },
        {
          "content": "<bpt id=\"p1\">[</bpt>Azure Portal<ept id=\"p1\">](http://manage.windowsazure.com/)</ept> and navigate to the",
          "pos": [
            61,
            128
          ]
        },
        {
          "content": "connection information for your service bus namespace.",
          "pos": [
            129,
            183
          ]
        }
      ]
    },
    {
      "content": "Create a Ruby application",
      "pos": [
        3838,
        3863
      ]
    },
    {
      "content": "Create a Ruby application.",
      "pos": [
        3865,
        3891
      ]
    },
    {
      "content": "For instructions, see <bpt id=\"p1\">[</bpt>Create a Ruby Application on Azure<ept id=\"p1\">](/develop/ruby/tutorials/web-app-with-linux-vm/)</ept>.",
      "pos": [
        3892,
        3999
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        4004,
        4049
      ]
    },
    {
      "content": "To use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.",
      "pos": [
        4051,
        4224
      ]
    },
    {
      "content": "Use RubyGems to obtain the package",
      "pos": [
        4230,
        4264
      ]
    },
    {
      "pos": [
        4269,
        4371
      ],
      "content": "Use a command-line interface such as <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows), <bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac), or <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix)."
    },
    {
      "content": "Type \"gem install azure\" in the command window to install the gem and dependencies.",
      "pos": [
        4376,
        4459
      ]
    },
    {
      "content": "Import the package",
      "pos": [
        4465,
        4483
      ]
    },
    {
      "content": "Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:",
      "pos": [
        4485,
        4594
      ]
    },
    {
      "content": "Set up an Azure Service Bus connection",
      "pos": [
        4620,
        4658
      ]
    },
    {
      "content": "The azure module will read the environment variables <bpt id=\"p1\">**</bpt>AZURE\\_SERVICEBUS\\_NAMESPACE<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>AZURE\\_SERVICEBUS\\_ACCESS_KEY<ept id=\"p2\">**</ept>",
      "pos": [
        4660,
        4783
      ]
    },
    {
      "content": "for information required to connect to your Azure service bus namespace.",
      "pos": [
        4784,
        4856
      ]
    },
    {
      "content": "If these environment variables are not set, you must specify the namespace information before using <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> with the following code:",
      "pos": [
        4857,
        5010
      ]
    },
    {
      "content": "Set the service bus namespace value to the value you created rather than the entire URL.",
      "pos": [
        5153,
        5241
      ]
    },
    {
      "content": "For example, use <bpt id=\"p1\">**</bpt>\"yourexamplenamespace\"<ept id=\"p1\">**</ept>, not \"yourexamplenamespace.servicebus.windows.net\".",
      "pos": [
        5242,
        5337
      ]
    },
    {
      "content": "How to create a queue",
      "pos": [
        5342,
        5363
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> object lets you work with queues.",
      "pos": [
        5365,
        5431
      ]
    },
    {
      "content": "To create a queue, use the <bpt id=\"p1\">**</bpt>create_queue()<ept id=\"p1\">**</ept> method.",
      "pos": [
        5432,
        5485
      ]
    },
    {
      "content": "The following example creates a queue or print out the error if there is any.",
      "pos": [
        5486,
        5563
      ]
    },
    {
      "content": "You can also pass in a <bpt id=\"p1\">**</bpt>Azure::ServiceBus::Queue<ept id=\"p1\">**</ept> object with additional options, which allows you to override default queue settings such as message time to live or maximum queue size.",
      "pos": [
        5737,
        5924
      ]
    },
    {
      "content": "The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:",
      "pos": [
        5925,
        6020
      ]
    },
    {
      "content": "How to send messages to a queue",
      "pos": [
        6227,
        6258
      ]
    },
    {
      "content": "To send a message to a Service Bus queue, you application will call the <bpt id=\"p1\">**</bpt>send\\_queue\\_message()<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Azure::ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        6260,
        6409
      ]
    },
    {
      "content": "Messages sent to (and received from) service bus queues are <bpt id=\"p1\">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id=\"p1\">**</ept> objects, and have a set of standard properties (such as <bpt id=\"p2\">**</bpt>label<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>time\\_to\\_live<ept id=\"p3\">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.",
      "pos": [
        6410,
        6715
      ]
    },
    {
      "content": "An application can set the body of the message by passing a string value as the message and any required standard properties will be populated with default values.",
      "pos": [
        6716,
        6879
      ]
    },
    {
      "pos": [
        6881,
        7008
      ],
      "content": "The following example demonstrates how to send a test message to the queue named \"test-queue\" using <bpt id=\"p1\">**</bpt>send\\_queue\\_message()<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Service bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        7209,
        7379
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        7380,
        7509
      ]
    },
    {
      "content": "This queue size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        7510,
        7583
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        7588,
        7624
      ]
    },
    {
      "content": "Messages are received from a queue using the <bpt id=\"p1\">**</bpt>receive\\_queue\\_message()<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Azure::ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        7626,
        7751
      ]
    },
    {
      "content": "By default, messages are read and locked without being deleted from the queue.",
      "pos": [
        7752,
        7830
      ]
    },
    {
      "content": "However, you can delete messages from the queue as they are read by setting the <bpt id=\"p1\">**</bpt>:peek_lock<ept id=\"p1\">**</ept> option to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.",
      "pos": [
        7831,
        7946
      ]
    },
    {
      "content": "The default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        7948,
        8114
      ]
    },
    {
      "content": "When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        8115,
        8283
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id=\"p1\">**</bpt>delete\\_queue\\_message()<ept id=\"p1\">**</ept> method and providing the message to be deleted as a parameter.",
      "pos": [
        8284,
        8540
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>delete\\_queue\\_message()<ept id=\"p1\">**</ept> method will mark the message as being consumed and remove it from the queue.",
      "pos": [
        8541,
        8650
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>:peek\\_lock<ept id=\"p1\">**</ept> parameter is set to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        8652,
        8884
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        8885,
        9012
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        9013,
        9222
      ]
    },
    {
      "content": "The example below demonstrates how messages can be received and processed using <bpt id=\"p1\">**</bpt>receive\\_queue\\_message()<ept id=\"p1\">**</ept>.",
      "pos": [
        9224,
        9334
      ]
    },
    {
      "content": "The example first receives and deletes a message by using <bpt id=\"p1\">**</bpt>:peek\\_lock<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, then it receives another message and then deletes the message using <bpt id=\"p3\">**</bpt>delete\\_queue\\_message()<ept id=\"p3\">**</ept>:",
      "pos": [
        9335,
        9524
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        9773,
        9830
      ]
    },
    {
      "content": "Service bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        9832,
        9967
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlock\\_queue\\_message()<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Azure::ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        9968,
        10144
      ]
    },
    {
      "content": "This will cause service bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        10145,
        10333
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.",
      "pos": [
        10335,
        10628
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>delete\\_queue\\_message()<ept id=\"p1\">**</ept> method is called, then the message will be redelivered to the application when it restarts.",
      "pos": [
        10630,
        10836
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        10837,
        11004
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        11005,
        11173
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>message\\_id<ept id=\"p1\">**</ept> property of the message, which will remain constant across delivery attempts.",
      "pos": [
        11174,
        11300
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        11305,
        11315
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus queues, follow these links to learn more.",
      "pos": [
        11317,
        11408
      ]
    },
    {
      "pos": [
        11414,
        11535
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">](http://msdn.microsoft.com/library/windowsazure/hh367516.aspx)</ept>"
    },
    {
      "pos": [
        11540,
        11643
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure SDK for Ruby<ept id=\"p1\">](https://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> repository on GitHub"
    },
    {
      "pos": [
        11645,
        11985
      ],
      "content": "For a comparision between the Azure Service Bus Queues discussed in this article and Azure Queues discussed in the <bpt id=\"p1\">[</bpt>How to use the Azure Queue Service<ept id=\"p1\">](/develop/ruby/how-to-guides/queue-service/)</ept> article, see <bpt id=\"p2\">[</bpt>Azure Queues and Azure Service Bus Queues - Compared and Contrasted<ept id=\"p2\">](http://msdn.microsoft.com/library/windowsazure/hh767287.aspx)</ept>"
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus queues (Ruby) | Microsoft Azure\"\n    description=\"Learn how to use Service Bus queues in Azure. Code samples written in Ruby.\"\n    services=\"service-bus\"\n    documentationCenter=\"ruby\"\n    authors=\"tfitzmac\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"ruby\"\n    ms.topic=\"article\"\n    ms.date=\"08/31/2015\"\n    ms.author=\"tomfitz\"/>\n\n\n\n\n# How to Use Service Bus Queues\n\nThis guide will show you how to use Service Bus queues. The samples are\nwritten in Ruby and use the Azure gem. The scenarios\ncovered include **creating queues, sending and receiving messages**, and\n**deleting queues**. For more information on queues, see the [Next Steps](#next-steps) section.\n\n## What are Service Bus queues?\n\nService Bus Queues support a **brokered messaging communication**\nmodel. When using queues, components of a distributed application do not\ncommunicate directly with each other, they instead exchange messages via\na queue, which acts as an intermediary. A message producer (sender)\nhands off a message to the queue and then continues its processing.\nAsynchronously, a message consumer (receiver) pulls the message from the\nqueue and processes it. The producer does not have to wait for a reply\nfrom the consumer in order to continue to process and send further\nmessages. Queues offer **First In, First Out (FIFO)** message delivery\nto one or more competing consumers. That is, messages are typically\nreceived and processed by the receivers in the order in which they were\nadded to the queue, and each message is received and processed by only\none message consumer.\n\n![QueueConcepts](./media/service-bus-ruby-how-to-use-queues/sb-queues-08.png)\n\nService Bus queues are a general-purpose technology that can be used for\na wide variety of scenarios:\n\n-   Communication between web and worker roles in a multi-tier\n    Azure application\n-   Communication between on-premises apps and Azure hosted apps\n    in a hybrid solution\n-   Communication between components of a distributed application\n    running on-premises in different organizations or departments of an\n    organization\n\nUsing queues can enable you to scale out your applications better, and\nenable more resiliency to your architecture.\n\n## Create a service namespace\nTo begin using Service Bus queues in Azure, you must first create a service namespace. A service namespace provides a scoping container for addressing Service Bus resources within your application. You must create the\nnamespace through the command-line interface because the Portal does not create the service bus with an ACS connection.\n\nTo create a service namespace:\n\n1. Open an Azure Powershell console.\n\n2. Type the command to create an Azure service bus namespace as shown below. Provide your own namespace value and specify the same region as your application.\n\n    New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true\n\n    ![Create Namespace](./media/service-bus-ruby-how-to-use-queues/showcmdcreate.png)\n\n## Obtain management credentials for the namespace\nIn order to perform management operations, such as creating a queue on the new\nnamespace, you must obtain the management credentials for the namespace.\n\nThe PowerShell cmdlet you ran to create the Azure service bus namespace displays\nthe key you can use to manage the namespace. Copy the **DefaultKey** value. You\nwill use this value in your code later in this tutorial.\n\n![Copy key](./media/service-bus-ruby-how-to-use-queues/defaultkey.png)\n\n> [AZURE.NOTE]\n> You can also find this key if you log on to the\n> [Azure Portal](http://manage.windowsazure.com/) and navigate to the\n> connection information for your service bus namespace.\n\n## Create a Ruby application\n\nCreate a Ruby application. For instructions, see [Create a Ruby Application on Azure](/develop/ruby/tutorials/web-app-with-linux-vm/).\n\n## Configure your application to use Service Bus\n\nTo use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.\n\n### Use RubyGems to obtain the package\n\n1. Use a command-line interface such as **PowerShell** (Windows), **Terminal** (Mac), or **Bash** (Unix).\n\n2. Type \"gem install azure\" in the command window to install the gem and dependencies.\n\n### Import the package\n\nUse your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:\n\n    require \"azure\"\n\n## Set up an Azure Service Bus connection\n\nThe azure module will read the environment variables **AZURE\\_SERVICEBUS\\_NAMESPACE** and **AZURE\\_SERVICEBUS\\_ACCESS_KEY**\nfor information required to connect to your Azure service bus namespace. If these environment variables are not set, you must specify the namespace information before using **Azure::ServiceBusService** with the following code:\n\n    Azure.config.sb_namespace = \"<your azure service bus namespace>\"\n    Azure.config.sb_access_key = \"<your azure service bus access key>\"\n\nSet the service bus namespace value to the value you created rather than the entire URL. For example, use **\"yourexamplenamespace\"**, not \"yourexamplenamespace.servicebus.windows.net\".\n\n## How to create a queue\n\nThe **Azure::ServiceBusService** object lets you work with queues. To create a queue, use the **create_queue()** method. The following example creates a queue or print out the error if there is any.\n\n    azure_service_bus_service = Azure::ServiceBusService.new\n    begin\n      queue = azure_service_bus_service.create_queue(\"test-queue\")\n    rescue\n      puts $!\n    end\n\nYou can also pass in a **Azure::ServiceBus::Queue** object with additional options, which allows you to override default queue settings such as message time to live or maximum queue size. The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:\n\n    queue = Azure::ServiceBus::Queue.new(\"test-queue\")\n    queue.max_size_in_megabytes = 5120\n    queue.default_message_time_to_live = \"PT1M\"\n\n    queue = azure_service_bus_service.create_queue(queue)\n\n## How to send messages to a queue\n\nTo send a message to a Service Bus queue, you application will call the **send\\_queue\\_message()** method on the **Azure::ServiceBusService** object. Messages sent to (and received from) service bus queues are **Azure::ServiceBus::BrokeredMessage** objects, and have a set of standard properties (such as **label** and **time\\_to\\_live**), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data. An application can set the body of the message by passing a string value as the message and any required standard properties will be populated with default values.\n\nThe following example demonstrates how to send a test message to the queue named \"test-queue\" using **send\\_queue\\_message()**:\n\n    message = Azure::ServiceBus::BrokeredMessage.new(\"test queue message\")\n    message.correlation_id = \"test-correlation-id\"\n    azure_service_bus_service.send_queue_message(\"test-queue\", message)\n\nService bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This queue size is defined at creation time, with an upper limit of 5 GB.\n\n## How to receive messages from a queue\n\nMessages are received from a queue using the **receive\\_queue\\_message()** method on the **Azure::ServiceBusService** object. By default, messages are read and locked without being deleted from the queue. However, you can delete messages from the queue as they are read by setting the **:peek_lock** option to **false**.\n\nThe default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling **delete\\_queue\\_message()** method and providing the message to be deleted as a parameter. The **delete\\_queue\\_message()** method will mark the message as being consumed and remove it from the queue.\n\nIf the **:peek\\_lock** parameter is set to **false**, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nThe example below demonstrates how messages can be received and processed using **receive\\_queue\\_message()**. The example first receives and deletes a message by using **:peek\\_lock** set to **false**, then it receives another message and then deletes the message using **delete\\_queue\\_message()**:\n\n    message = azure_service_bus_service.receive_queue_message(\"test-queue\",\n      { :peek_lock => false })\n    message = azure_service_bus_service.receive_queue_message(\"test-queue\")\n    azure_service_bus_service.delete_queue_message(message)\n\n## How to handle application crashes and unreadable messages\n\nService bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlock\\_queue\\_message()** method on the **Azure::ServiceBusService** object. This will cause service bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **delete\\_queue\\_message()** method is called, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**, that is, each message will be processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the **message\\_id** property of the message, which will remain constant across delivery attempts.\n\n## Next Steps\n\nNow that you've learned the basics of Service Bus queues, follow these links to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions](http://msdn.microsoft.com/library/windowsazure/hh367516.aspx)\n-   Visit the [Azure SDK for Ruby](https://github.com/WindowsAzure/azure-sdk-for-ruby) repository on GitHub\n\nFor a comparision between the Azure Service Bus Queues discussed in this article and Azure Queues discussed in the [How to use the Azure Queue Service](/develop/ruby/how-to-guides/queue-service/) article, see [Azure Queues and Azure Service Bus Queues - Compared and Contrasted](http://msdn.microsoft.com/library/windowsazure/hh767287.aspx)\n \n"
}