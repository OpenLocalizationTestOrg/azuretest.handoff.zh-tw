<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using castLabs to deliver DRM licenses to Azure Media Services</source>
          <target state="new">Using castLabs to deliver DRM licenses to Azure Media Services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes how you can use Azure Media Services (AMS) to deliver a stream that is dynamically encrypted by AMS with both PlayReady and Widevine DRMs.</source>
          <target state="new">This article describes how you can use Azure Media Services (AMS) to deliver a stream that is dynamically encrypted by AMS with both PlayReady and Widevine DRMs.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The PlayReady license comes from Media Services PlayReady license server and Widevine license is delivered by castLabs license server.</source>
          <target state="new">The PlayReady license comes from Media Services PlayReady license server and Widevine license is delivered by castLabs license server.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using castLabs to deliver DRM licenses to Azure Media Services</source>
          <target state="new">Using castLabs to deliver DRM licenses to Azure Media Services</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article describes how you can use Azure Media Services (AMS) to deliver a stream that is dynamically encrypted by AMS with both PlayReady and Widevine DRMs.</source>
          <target state="new">This article describes how you can use Azure Media Services (AMS) to deliver a stream that is dynamically encrypted by AMS with both PlayReady and Widevine DRMs.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The PlayReady license comes from Media Services PlayReady license server and Widevine license is delivered by <bpt id="p1">**</bpt>castLabs<ept id="p1">**</ept> license server.</source>
          <target state="new">The PlayReady license comes from Media Services PlayReady license server and Widevine license is delivered by <bpt id="p1">**</bpt>castLabs<ept id="p1">**</ept> license server.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following diagram demonstrates a high-level Azure Media Services and castLabs integration architecture.</source>
          <target state="new">The following diagram demonstrates a high-level Azure Media Services and castLabs integration architecture.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>integration</source>
          <target state="new">integration</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Typical system set up</source>
          <target state="new">Typical system set up</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Media content is stored in AMS.</source>
          <target state="new">Media content is stored in AMS.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Key IDs of content keys are stored in both castLabs and AMS.</source>
          <target state="new">Key IDs of content keys are stored in both castLabs and AMS.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>castLabs and AMS both have token authentication built in.</source>
          <target state="new">castLabs and AMS both have token authentication built in.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following sections discuss authentication tokens.</source>
          <target state="new">The following sections discuss authentication tokens.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a client requests to stream the video, the content is dynamically encrypted with <bpt id="p1">**</bpt>Common Encryption<ept id="p1">**</ept> (CENC) and dynamically packaged by AMS to Smooth Streaming and DASH.</source>
          <target state="new">When a client requests to stream the video, the content is dynamically encrypted with <bpt id="p1">**</bpt>Common Encryption<ept id="p1">**</ept> (CENC) and dynamically packaged by AMS to Smooth Streaming and DASH.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>We also deliver PlayReady M2TS elementary stream encryption for HLS streaming protocol.</source>
          <target state="new">We also deliver PlayReady M2TS elementary stream encryption for HLS streaming protocol.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>PlayReady license is retrieved from AMS license server and Widevine license is retrieved from castLabs license server.</source>
          <target state="new">PlayReady license is retrieved from AMS license server and Widevine license is retrieved from castLabs license server.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Media Player automatically decides which license to fetch based on the client platform capability.</source>
          <target state="new">Media Player automatically decides which license to fetch based on the client platform capability.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Authentication token generation for getting a license</source>
          <target state="new">Authentication token generation for getting a license</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Both castLabs and AMS support JWT (JSON Web Token) token format used to authorize a license.</source>
          <target state="new">Both castLabs and AMS support JWT (JSON Web Token) token format used to authorize a license.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>JWT token in AMS</source>
          <target state="new">JWT token in AMS</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table describes JWT token in AMS.</source>
          <target state="new">The following table describes JWT token in AMS.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Issuer</source>
          <target state="new">Issuer</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Issuer string from the chosen Secure Token Service (STS)</source>
          <target state="new">Issuer string from the chosen Secure Token Service (STS)</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Audience</source>
          <target state="new">Audience</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Audience string from the used STS</source>
          <target state="new">Audience string from the used STS</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Claims</source>
          <target state="new">Claims</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A set of claims</source>
          <target state="new">A set of claims</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NotBefore</source>
          <target state="new">NotBefore</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Start validity of the token</source>
          <target state="new">Start validity of the token</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Expires</source>
          <target state="new">Expires</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>End validity of the token</source>
          <target state="new">End validity of the token</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>SigningCredentials</source>
          <target state="new">SigningCredentials</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The key that is shared among PlayReady License Server, castLabs License Server and STS, it could be either symmetric or asymmetric key.</source>
          <target state="new">The key that is shared among PlayReady License Server, castLabs License Server and STS, it could be either symmetric or asymmetric key.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>JWT token in castLabs</source>
          <target state="new">JWT token in castLabs</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following table describes JWT token in castLabs.</source>
          <target state="new">The following table describes JWT token in castLabs.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>optData</source>
          <target state="new">optData</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A JSON string containing information about you.</source>
          <target state="new">A JSON string containing information about you.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>crt</source>
          <target state="new">crt</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A JSON string containing information about the asset, its license info and playback rights.</source>
          <target state="new">A JSON string containing information about the asset, its license info and playback rights.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>iat</source>
          <target state="new">iat</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The current datetime in epoch.</source>
          <target state="new">The current datetime in epoch.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>jti</source>
          <target state="new">jti</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A unique identifier about this token (every token can only be used once in the castLabs system).</source>
          <target state="new">A unique identifier about this token (every token can only be used once in the castLabs system).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Sample solution set up</source>
          <target state="new">Sample solution set up</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>sample solution<ept id="p1">](https://github.com/AzureMediaServicesSamples/CastlabsIntegration)</ept> consists of two projects:</source>
          <target state="new">The <bpt id="p1">[</bpt>sample solution<ept id="p1">](https://github.com/AzureMediaServicesSamples/CastlabsIntegration)</ept> consists of two projects:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A console app that can be used to set DRM restrictions on an already ingested asset, for both PlayReady and Widevine.</source>
          <target state="new">A console app that can be used to set DRM restrictions on an already ingested asset, for both PlayReady and Widevine.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A Web Application that hands out tokens, which could be seen as a VERY SIMPLIFIED version of an STS.</source>
          <target state="new">A Web Application that hands out tokens, which could be seen as a VERY SIMPLIFIED version of an STS.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To use the console application:</source>
          <target state="new">To use the console application:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change the app.config to setup AMS credentials, castLabs credentials, STS configuration and shared key.</source>
          <target state="new">Change the app.config to setup AMS credentials, castLabs credentials, STS configuration and shared key.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Upload an Asset into AMS.</source>
          <target state="new">Upload an Asset into AMS.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Get the UUID from the uploaded Asset, and change Line 32 in the Program.cs file:</source>
          <target state="new">Get the UUID from the uploaded Asset, and change Line 32 in the Program.cs file:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use an AssetId for naming the asset in the castLabs system (Line 44 in the Program.cs file).</source>
          <target state="new">Use an AssetId for naming the asset in the castLabs system (Line 44 in the Program.cs file).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You must set AssetId for <bpt id="p1">**</bpt>castLabs<ept id="p1">**</ept>; it needs to be a unique alphanumeric string.</source>
          <target state="new">You must set AssetId for <bpt id="p1">**</bpt>castLabs<ept id="p1">**</ept>; it needs to be a unique alphanumeric string.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Run the program.</source>
          <target state="new">Run the program.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To use the Web Application (STS):</source>
          <target state="new">To use the Web Application (STS):</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Change the web.config to setup castlabs merchant ID, the STS configuration and the shared key.</source>
          <target state="new">Change the web.config to setup castlabs merchant ID, the STS configuration and the shared key.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Deploy to Azure Websites.</source>
          <target state="new">Deploy to Azure Websites.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Navigate to the website.</source>
          <target state="new">Navigate to the website.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Playing back a video</source>
          <target state="new">Playing back a video</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To playback a video encrypted with common encryption (PlayReady), you can use the <bpt id="p1">[</bpt>Azure Media Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</source>
          <target state="new">To playback a video encrypted with common encryption (PlayReady), you can use the <bpt id="p1">[</bpt>Azure Media Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When running the console app, the Content Key ID and the Manifest URL are echoed.</source>
          <target state="new">When running the console app, the Content Key ID and the Manifest URL are echoed.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Open a new tab and launch your STS: http://[yourStsName].azurewebsites.net/api/token/assetid/[yourCastLabsAssetId]/contentkeyid/[thecontentkeyid].</source>
          <target state="new">Open a new tab and launch your STS: http://[yourStsName].azurewebsites.net/api/token/assetid/[yourCastLabsAssetId]/contentkeyid/[thecontentkeyid].</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Go to <bpt id="p1">[</bpt>Azure Media Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</source>
          <target state="new">Go to <bpt id="p1">[</bpt>Azure Media Player<ept id="p1">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Paste in the streaming URL.</source>
          <target state="new">Paste in the streaming URL.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Advanced Options<ept id="p1">**</ept> checkbox.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Advanced Options<ept id="p1">**</ept> checkbox.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Select PlayReady in the <bpt id="p1">**</bpt>Protection<ept id="p1">**</ept> dropdown.</source>
          <target state="new">Select PlayReady in the <bpt id="p1">**</bpt>Protection<ept id="p1">**</ept> dropdown.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Paste the token that you got from your STS in the Token textbox.</source>
          <target state="new">Paste the token that you got from your STS in the Token textbox.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Update the player.</source>
          <target state="new">Update the player.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The video should be playing.</source>
          <target state="new">The video should be playing.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For playing back the protected video in HTML5 with Chrome with the castLabs player, please contact yanmf@microsoft.com to get access to the player.</source>
          <target state="new">For playing back the protected video in HTML5 with Chrome with the castLabs player, please contact yanmf@microsoft.com to get access to the player.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you have access, there are 2 things to be aware of:</source>
          <target state="new">When you have access, there are 2 things to be aware of:</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The castLabs player needs access to the MPEG-DASH manifest file, so append (format=mpd-time-csf) to your manifest file to get the MPEG-DASH manifest file, instead of the default Smooth Streaming one.</source>
          <target state="new">The castLabs player needs access to the MPEG-DASH manifest file, so append (format=mpd-time-csf) to your manifest file to get the MPEG-DASH manifest file, instead of the default Smooth Streaming one.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The castLab license server does not need the “Bearer=” prefix in front of the token.</source>
          <target state="new">The castLab license server does not need the “Bearer=” prefix in front of the token.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>So please remove that before submitting the token.</source>
          <target state="new">So please remove that before submitting the token.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbd809e4fc397472a87f840b8729f5cd34e75440</xliffext:olfilehash>
  </header>
</xliff>