{
  "nodes": [
    {
      "content": "Connect to SQL Database by using Ruby with TinyTDS on Ubuntu",
      "pos": [
        28,
        88
      ]
    },
    {
      "content": "Give a Ruby code sample you can run as a client on Ubuntu Linux to connect to Azure SQL Database.",
      "pos": [
        108,
        205
      ]
    },
    {
      "content": "Connect to SQL Database by using Ruby on Ubuntu Linux",
      "pos": [
        524,
        577
      ]
    },
    {
      "content": "This topic presents a Ruby code sample that runs on an Ubuntu Linux client computer to connect to an Azure SQL Database database.",
      "pos": [
        743,
        872
      ]
    },
    {
      "content": "Install the required modules",
      "pos": [
        877,
        905
      ]
    },
    {
      "content": "Open your terminal and install FreeTDS if you do not have it on your machine.",
      "pos": [
        907,
        984
      ]
    },
    {
      "content": "After your machine is configured with FreeTDS, install Ruby if you do not already have it on your machine.",
      "pos": [
        1091,
        1197
      ]
    },
    {
      "content": "If you have any issues with signatures, run the following command.",
      "pos": [
        1340,
        1406
      ]
    },
    {
      "content": "If there are no issues with signatures, run the following commands.",
      "pos": [
        1475,
        1542
      ]
    },
    {
      "content": "Ensure that you are running version 2.1.2 or the Ruby VM.",
      "pos": [
        1643,
        1700
      ]
    },
    {
      "content": "Next, install TinyTDS.",
      "pos": [
        1702,
        1724
      ]
    },
    {
      "content": "Create a database, retrieve your connection string",
      "pos": [
        1755,
        1805
      ]
    },
    {
      "content": "The Ruby sample relies on the AdventureWorks sample database.",
      "pos": [
        1807,
        1868
      ]
    },
    {
      "content": "If you do not already have AdventureWorks, you can see how to create it at the following topic: <bpt id=\"p1\">[</bpt>Create your first Azure SQL Database<ept id=\"p1\">](sql-database-get-started.md)</ept>",
      "pos": [
        1869,
        2032
      ]
    },
    {
      "content": "The topic also explains how to retrieve the database connection string.",
      "pos": [
        2034,
        2105
      ]
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        2110,
        2138
      ]
    },
    {
      "pos": [
        2140,
        2251
      ],
      "content": "The <bpt id=\"p1\">[</bpt>TinyTDS::Client<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> function is used to connect to SQL Database."
    },
    {
      "content": "Execute a SELECT statement and retrieve the result set",
      "pos": [
        2480,
        2534
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>TinyTds::Result<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> function is used to retrieve a result set from a query against SQL Database.",
      "pos": [
        2536,
        2679
      ]
    },
    {
      "content": "This function accepts a query and returns a result set.",
      "pos": [
        2680,
        2735
      ]
    },
    {
      "content": "The results set is iterated over by using <bpt id=\"p1\">[</bpt>result.each do |row|<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept>.",
      "pos": [
        2736,
        2846
      ]
    },
    {
      "content": "Inserting a row, passing parameters, and retrieving the generated primary key value",
      "pos": [
        3211,
        3294
      ]
    },
    {
      "content": "The code sample:",
      "pos": [
        3296,
        3312
      ]
    },
    {
      "content": "Passes parameters for values to be inserted in a row.",
      "pos": [
        3316,
        3369
      ]
    },
    {
      "content": "Inserts the row.",
      "pos": [
        3372,
        3388
      ]
    },
    {
      "content": "Retrieves the value that was generated for the primary key.",
      "pos": [
        3391,
        3450
      ]
    },
    {
      "pos": [
        3452,
        3716
      ],
      "content": "In SQL Database, the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](http://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENCE<ept id=\"p2\">](http://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key values<ept id=\"p3\">](http://msdn.microsoft.com/library/ms179610.aspx)</ept>."
    },
    {
      "content": "To use TinyTDS with Azure, it is recommended that you execute several <ph id=\"ph1\">`SET`</ph> statements to change how the current session handles specific information.",
      "pos": [
        3719,
        3869
      ]
    },
    {
      "content": "Recommended <ph id=\"ph1\">`SET`</ph> statements are provided in the code sample.",
      "pos": [
        3870,
        3931
      ]
    },
    {
      "content": "For example, <ph id=\"ph1\">`SET ANSI_NULL_DFLT_ON`</ph> will allow new columns created to allow null values even if the nullability status of the column is not explicitly stated.",
      "pos": [
        3932,
        4091
      ]
    },
    {
      "pos": [
        4093,
        4333
      ],
      "content": "To align with the Microsoft SQL Server <bpt id=\"p1\">[</bpt>datetime<ept id=\"p1\">](http://msdn.microsoft.com/library/ms187819.aspx)</ept> format, use the <bpt id=\"p2\">[</bpt>strftime<ept id=\"p2\">](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime)</ept> function to cast to the corresponding datetime format."
    }
  ],
  "content": "<properties \n    pageTitle=\"Connect to SQL Database by using Ruby with TinyTDS on Ubuntu\" \n    description=\"Give a Ruby code sample you can run as a client on Ubuntu Linux to connect to Azure SQL Database.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"ajlam\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"sql-database\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"ruby\" \n    ms.topic=\"article\" \n    ms.date=\"07/20/2015\" \n    ms.author=\"andrela\"/>\n\n\n# Connect to SQL Database by using Ruby on Ubuntu Linux\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\nThis topic presents a Ruby code sample that runs on an Ubuntu Linux client computer to connect to an Azure SQL Database database.\n\n## Install the required modules\n\nOpen your terminal and install FreeTDS if you do not have it on your machine.\n    \n    sudo apt-get --assume-yes update \n    sudo apt-get --assume-yes install freetds-dev freetds-bin\n\nAfter your machine is configured with FreeTDS, install Ruby if you do not already have it on your machine.\n    \n    sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev \n    curl -L https://get.rvm.io | bash -s stable\n\nIf you have any issues with signatures, run the following command.\n\n    command curl -sSL https://rvm.io/mpapis.asc | gph --import - \n\nIf there are no issues with signatures, run the following commands.  \n\n    source ~/.rvm/scripts/rvm \n    rvm install 2.1.2 \n    rvm use 2.1.2 --default \n    ruby -v \n\nEnsure that you are running version 2.1.2 or the Ruby VM.\n\nNext, install TinyTDS.\n\n    gem install tiny_tds\n\n## Create a database, retrieve your connection string\n\nThe Ruby sample relies on the AdventureWorks sample database. If you do not already have AdventureWorks, you can see how to create it at the following topic: [Create your first Azure SQL Database](sql-database-get-started.md)\n\nThe topic also explains how to retrieve the database connection string.\n\n## Connect to your SQL Database\n\nThe [TinyTDS::Client](https://github.com/rails-sqlserver/tiny_tds) function is used to connect to SQL Database.\n\n    require 'tiny_tds' \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n\n## Execute a SELECT statement and retrieve the result set\n\nThe [TinyTds::Result](https://github.com/rails-sqlserver/tiny_tds) function is used to retrieve a result set from a query against SQL Database. This function accepts a query and returns a result set. The results set is iterated over by using [result.each do |row|](https://github.com/rails-sqlserver/tiny_tds).\n\n    require 'tiny_tds'  \n    print 'test'     \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n    results = client.execute(\"select * from SalesLT.Product\") \n    results.each do |row| \n    puts row \n    end \n\n## Inserting a row, passing parameters, and retrieving the generated primary key value\n\nThe code sample:\n\n- Passes parameters for values to be inserted in a row.\n- Inserts the row.\n- Retrieves the value that was generated for the primary key.\n\nIn SQL Database, the [IDENTITY](http://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENCE](http://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key values](http://msdn.microsoft.com/library/ms179610.aspx). \n\nTo use TinyTDS with Azure, it is recommended that you execute several `SET` statements to change how the current session handles specific information. Recommended `SET` statements are provided in the code sample. For example, `SET ANSI_NULL_DFLT_ON` will allow new columns created to allow null values even if the nullability status of the column is not explicitly stated.\n\nTo align with the Microsoft SQL Server [datetime](http://msdn.microsoft.com/library/ms187819.aspx) format, use the [strftime](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime) function to cast to the corresponding datetime format. \n\n    require 'tiny_tds' \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n    results = client.execute(\"SET ANSI_NULLS ON\")\n    results = client.execute(\"SET CURSOR_CLOSE_ON_COMMIT OFF\")\n    results = client.execute(\"SET ANSI_NULL_DFLT_ON ON\")\n    results = client.execute(\"SET IMPLICIT_TRANSACTIONS OFF\")\n    results = client.execute(\"SET ANSI_PADDING ON\")\n    results = client.execute(\"SET QUOTED_IDENTIFIER ON\")\n    results = client.execute(\"SET ANSI_WARNINGS ON\")\n    results = client.execute(\"SET CONCAT_NULL_YIELDS_NULL ON\")\n    require 'date'\n    t = Time.now\n    curr_date = t.strftime(\"%Y-%m-%d %H:%M:%S.%L\") \n    results = client.execute(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) \n    OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New', 'SQLEXPRESS New', 0, 0, '#{curr_date}' )\")\n    results.each do |row| \n    puts row\n    end \n\n"
}