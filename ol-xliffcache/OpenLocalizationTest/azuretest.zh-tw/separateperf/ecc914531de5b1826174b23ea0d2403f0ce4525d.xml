{
  "nodes": [
    {
      "content": "Create EAI Logic App using VETR | Microsoft Azure",
      "pos": [
        26,
        75
      ]
    },
    {
      "content": "This topic covers the Validate, Encode and Transform features of BizTalk XML services.",
      "pos": [
        93,
        179
      ]
    },
    {
      "content": "Create EAI Logic App Using VETR",
      "pos": [
        525,
        556
      ]
    },
    {
      "content": "Most Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination.",
      "pos": [
        558,
        662
      ]
    },
    {
      "content": "Such scenarios often have a common set of requirements:",
      "pos": [
        663,
        718
      ]
    },
    {
      "content": "Ensure that data from different systems are correctly formatted",
      "pos": [
        722,
        785
      ]
    },
    {
      "content": "Perform “look-up” on incoming data to make decisions",
      "pos": [
        788,
        840
      ]
    },
    {
      "content": "Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)",
      "pos": [
        843,
        960
      ]
    },
    {
      "content": "Route data to desired application or system",
      "pos": [
        963,
        1006
      ]
    },
    {
      "content": "This article shows you a common integration pattern: \"one-way message mediation\" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity.",
      "pos": [
        1008,
        1214
      ]
    },
    {
      "content": "Usually the source and destination are data sources.",
      "pos": [
        1215,
        1267
      ]
    },
    {
      "content": "Consider a website that accepts orders.",
      "pos": [
        1269,
        1308
      ]
    },
    {
      "content": "Users post orders to the system using HTTP.",
      "pos": [
        1309,
        1352
      ]
    },
    {
      "content": "Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing.",
      "pos": [
        1353,
        1505
      ]
    },
    {
      "content": "The system takes orders off the queue, expecting it in a particular format.",
      "pos": [
        1506,
        1581
      ]
    },
    {
      "content": "Thus, the end-to-end flow is:",
      "pos": [
        1582,
        1611
      ]
    },
    {
      "pos": [
        1613,
        1670
      ],
      "content": "<bpt id=\"p1\">**</bpt>HTTP<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Validate<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Transform<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Service Bus<ept id=\"p4\">**</ept>"
    },
    {
      "content": "![Basic VETR Flow][1]",
      "pos": [
        1672,
        1693
      ]
    },
    {
      "content": "The following BizTalk API Apps help build this pattern:",
      "pos": [
        1695,
        1750
      ]
    },
    {
      "pos": [
        1754,
        1804
      ],
      "content": "<bpt id=\"p1\">**</bpt>HTTP Trigger<ept id=\"p1\">**</ept> - Source to trigger message event"
    },
    {
      "pos": [
        1807,
        1860
      ],
      "content": "<bpt id=\"p1\">**</bpt>Validate<ept id=\"p1\">**</ept> - Validates correctness of incoming data"
    },
    {
      "pos": [
        1863,
        1955
      ],
      "content": "<bpt id=\"p1\">**</bpt>Transform<ept id=\"p1\">**</ept> - Transforms data from incoming format to format required by downstream system"
    },
    {
      "pos": [
        1958,
        2023
      ],
      "content": "<bpt id=\"p1\">**</bpt>Service Bus Connector<ept id=\"p1\">**</ept> - Destination entity where data is sent"
    },
    {
      "content": "Constructing basic VETR pattern",
      "pos": [
        2029,
        2060
      ]
    },
    {
      "content": "The basics",
      "pos": [
        2065,
        2075
      ]
    },
    {
      "content": "In the Azure Management Portal, click the <bpt id=\"p1\">**</bpt>+New<ept id=\"p1\">**</ept> button at the bottom-left of the screen and click <bpt id=\"p2\">**</bpt>Logic App<ept id=\"p2\">**</ept>.",
      "pos": [
        2077,
        2192
      ]
    },
    {
      "content": "Choose a name, location, subscription, resource group, and location that works.",
      "pos": [
        2193,
        2272
      ]
    },
    {
      "content": "Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.",
      "pos": [
        2273,
        2389
      ]
    },
    {
      "content": "Next, let's add triggers and actions.",
      "pos": [
        2391,
        2428
      ]
    },
    {
      "content": "Add HTTP Trigger",
      "pos": [
        2434,
        2450
      ]
    },
    {
      "content": "Select <bpt id=\"p1\">**</bpt>HTTP Listener<ept id=\"p1\">**</ept> from the gallery to create a new listener.",
      "pos": [
        2455,
        2522
      ]
    },
    {
      "content": "Call it <bpt id=\"p1\">**</bpt>HTTP1<ept id=\"p1\">**</ept>.",
      "pos": [
        2523,
        2541
      ]
    },
    {
      "content": "Leave <bpt id=\"p1\">**</bpt>Send response automatically?<ept id=\"p1\">**</ept> setting as false.",
      "pos": [
        2545,
        2601
      ]
    },
    {
      "content": "Configure the trigger action by setting <bpt id=\"p1\">_</bpt>HTTP Method<ept id=\"p1\">_</ept> to <bpt id=\"p2\">_</bpt>POST<ept id=\"p2\">_</ept> and setting <bpt id=\"p3\">_</bpt>Relative URL<ept id=\"p3\">_</ept> to <bpt id=\"p4\">_</bpt>/OneWayPipeline<ept id=\"p4\">_</ept>.",
      "pos": [
        2602,
        2714
      ]
    },
    {
      "content": "![HTTP Trigger][2]",
      "pos": [
        2716,
        2734
      ]
    },
    {
      "content": "Add Validate Action",
      "pos": [
        2740,
        2759
      ]
    },
    {
      "content": "Now, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.",
      "pos": [
        2761,
        2881
      ]
    },
    {
      "pos": [
        2886,
        2981
      ],
      "content": "Add <bpt id=\"p1\">**</bpt>BizTalk XML Validator<ept id=\"p1\">**</ept> from the gallery and name it <bpt id=\"p2\">_</bpt>(Validate1)<ept id=\"p2\">_</ept> to create an instance."
    },
    {
      "content": "Configure an XSD schema to validate the incoming XML messages.",
      "pos": [
        2985,
        3047
      ]
    },
    {
      "content": "Select the <bpt id=\"p1\">_</bpt>Validate<ept id=\"p1\">_</ept> action and select <bpt id=\"p2\">_</bpt>triggers(‘httplistener’).outputs.Content<ept id=\"p2\">_</ept> as the value for the <bpt id=\"p3\">_</bpt>inputXml<ept id=\"p3\">_</ept> parameter.",
      "pos": [
        3048,
        3173
      ]
    },
    {
      "content": "Now, the validate action is the first action after the HTTP listener.",
      "pos": [
        3175,
        3244
      ]
    },
    {
      "content": "Similarly, let's add the rest of the actions.",
      "pos": [
        3245,
        3290
      ]
    },
    {
      "content": "![BizTalk XML Validator][3]",
      "pos": [
        3292,
        3319
      ]
    },
    {
      "content": "Add Transform action",
      "pos": [
        3325,
        3345
      ]
    },
    {
      "content": "Let's configure transforms to normalize the incoming data.",
      "pos": [
        3346,
        3404
      ]
    },
    {
      "pos": [
        3409,
        3444
      ],
      "content": "Add <bpt id=\"p1\">**</bpt>Transform<ept id=\"p1\">**</ept> from the gallery."
    },
    {
      "content": "To configure a transform to transform the incoming XML messages, select the <bpt id=\"p1\">**</bpt>Transform<ept id=\"p1\">**</ept> action as the action to carry out when this API is called and select <ph id=\"ph1\">```triggers(‘httplistener’).outputs.Content```</ph> as the value for <bpt id=\"p2\">_</bpt>inputXml<ept id=\"p2\">_</ept>.",
      "pos": [
        3448,
        3682
      ]
    },
    {
      "content": "Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.",
      "pos": [
        3683,
        3828
      ]
    },
    {
      "content": "Lastly, the Transform runs only if Validate succeeds.",
      "pos": [
        3832,
        3885
      ]
    },
    {
      "content": "To configure this condition, click the gear icon on the top right and select <bpt id=\"p1\">_</bpt>Add a condition to be met<ept id=\"p1\">_</ept>.",
      "pos": [
        3886,
        3991
      ]
    },
    {
      "content": "Set the condition to <ph id=\"ph1\">```equals(actions('xmlvalidator').status,'Succeeded')```</ph>",
      "pos": [
        3992,
        4069
      ]
    },
    {
      "content": "![BizTalk Transforms][4]",
      "pos": [
        4072,
        4096
      ]
    },
    {
      "content": "Add Service Bus Connector",
      "pos": [
        4102,
        4127
      ]
    },
    {
      "content": "Next, let's add the destination--a Service Bus Queu--to write data to.",
      "pos": [
        4128,
        4198
      ]
    },
    {
      "content": "Add a <bpt id=\"p1\">**</bpt>Service Bus Connector<ept id=\"p1\">**</ept> from the gallery.",
      "pos": [
        4203,
        4252
      ]
    },
    {
      "content": "Set the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> to <bpt id=\"p2\">_</bpt>Servicebus1<ept id=\"p2\">_</ept>, set *<bpt id=\"p3\">*</bpt>Connection String<ept id=\"p3\">*</ept> to the connection string to your service bus instance, set <bpt id=\"p4\">**</bpt>Entity Name<ept id=\"p4\">**</ept> to <bpt id=\"p5\">_</bpt>Queue<ept id=\"p5\">_</ept>, and skip <bpt id=\"p6\">**</bpt>Subscription name<ept id=\"p6\">**</ept>.",
      "pos": [
        4253,
        4431
      ]
    },
    {
      "pos": [
        4435,
        4565
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Send Message<ept id=\"p1\">**</ept> action and set the <bpt id=\"p2\">**</bpt>Message<ept id=\"p2\">**</ept> field for the action to <bpt id=\"p3\">_</bpt>actions('transformservice').outputs.OutputXml<ept id=\"p3\">_</ept>"
    },
    {
      "content": "![Service Bus][5]",
      "pos": [
        4567,
        4584
      ]
    },
    {
      "content": "Send HTTP Response",
      "pos": [
        4590,
        4608
      ]
    },
    {
      "content": "Once pipeline processing is done, send back an HTTP response for both success and failure with the following steps:",
      "pos": [
        4609,
        4724
      ]
    },
    {
      "pos": [
        4729,
        4816
      ],
      "content": "Add an <bpt id=\"p1\">**</bpt>HTTP Listener<ept id=\"p1\">**</ept> from the gallery and select the <bpt id=\"p2\">**</bpt>Send HTTP Response<ept id=\"p2\">**</ept> action."
    },
    {
      "pos": [
        4820,
        5040
      ],
      "content": "Set <bpt id=\"p1\">**</bpt>Response Content<ept id=\"p1\">**</ept> to <bpt id=\"p2\">*</bpt>Pipeline processing completed<ept id=\"p2\">*</ept>, <bpt id=\"p3\">**</bpt>Response Status Code<ept id=\"p3\">**</ept> to <bpt id=\"p4\">*</bpt>200<ept id=\"p4\">*</ept> to indicate HTTP 200 OK, and <bpt id=\"p5\">**</bpt>Condition<ept id=\"p5\">**</ept> to the expression <ph id=\"ph1\">```@equals(actions('servicebusconnector').status,'Succeeded')```</ph>"
    },
    {
      "content": "Repeat the above steps to send an HTTP response on failure as well.",
      "pos": [
        5042,
        5109
      ]
    },
    {
      "content": "Change <bpt id=\"p1\">**</bpt>Condition<ept id=\"p1\">**</ept> to <ph id=\"ph1\">```@not(equals(actions('servicebusconnector').status,'Succeeded')).```</ph>",
      "pos": [
        5110,
        5204
      ]
    },
    {
      "content": "Completion",
      "pos": [
        5210,
        5220
      ]
    },
    {
      "content": "Every time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created.",
      "pos": [
        5221,
        5340
      ]
    },
    {
      "content": "To manage any such logic apps you create, click <bpt id=\"p1\">**</bpt>Browse<ept id=\"p1\">**</ept> in the Azure Management Portal and click <bpt id=\"p2\">**</bpt>Logic Apps<ept id=\"p2\">**</ept>.",
      "pos": [
        5341,
        5456
      ]
    },
    {
      "content": "Click on your app to see more information.",
      "pos": [
        5457,
        5499
      ]
    },
    {
      "content": "test",
      "pos": [
        5940,
        5944
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Create EAI Logic App using VETR | Microsoft Azure\"\n   description=\"This topic covers the Validate, Encode and Transform features of BizTalk XML services.\"\n   services=\"app-service\\logic\"\n   documentationCenter=\".net,nodejs,java\"\n   authors=\"rajeshramabathiran\"\n   manager=\"dwrede\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"app-service-logic\"\n   ms.devlang=\"multiple\"\n   ms.topic=\"get-started-article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"integration\"\n   ms.date=\"06/24/2015\"\n   ms.author=\"rajram\"/>\n\n\n# Create EAI Logic App Using VETR\n\nMost Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination. Such scenarios often have a common set of requirements:\n\n- Ensure that data from different systems are correctly formatted\n- Perform “look-up” on incoming data to make decisions\n- Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)\n- Route data to desired application or system\n\nThis article shows you a common integration pattern: \"one-way message mediation\" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity. Usually the source and destination are data sources.\n\nConsider a website that accepts orders. Users post orders to the system using HTTP. Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing. The system takes orders off the queue, expecting it in a particular format. Thus, the end-to-end flow is:\n\n**HTTP** > **Validate** > **Transform** > **Service Bus**\n\n![Basic VETR Flow][1]\n\nThe following BizTalk API Apps help build this pattern:\n\n* **HTTP Trigger** - Source to trigger message event\n* **Validate** - Validates correctness of incoming data\n* **Transform** - Transforms data from incoming format to format required by downstream system\n* **Service Bus Connector** - Destination entity where data is sent\n\n\n## Constructing basic VETR pattern\n### The basics\n\nIn the Azure Management Portal, click the **+New** button at the bottom-left of the screen and click **Logic App**. Choose a name, location, subscription, resource group, and location that works. Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.\n\nNext, let's add triggers and actions.\n\n\n## Add HTTP Trigger\n\n1. Select **HTTP Listener** from the gallery to create a new listener. Call it **HTTP1**.\n2. Leave **Send response automatically?** setting as false. Configure the trigger action by setting _HTTP Method_ to _POST_ and setting _Relative URL_ to _/OneWayPipeline_.\n\n![HTTP Trigger][2]\n\n\n## Add Validate Action\n\nNow, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.\n\n1. Add **BizTalk XML Validator** from the gallery and name it _(Validate1)_ to create an instance.\n2. Configure an XSD schema to validate the incoming XML messages. Select the _Validate_ action and select _triggers(‘httplistener’).outputs.Content_ as the value for the _inputXml_ parameter.\n\nNow, the validate action is the first action after the HTTP listener. Similarly, let's add the rest of the actions.\n\n![BizTalk XML Validator][3]\n\n\n## Add Transform action\nLet's configure transforms to normalize the incoming data.\n\n1. Add **Transform** from the gallery.\n2. To configure a transform to transform the incoming XML messages, select the **Transform** action as the action to carry out when this API is called and select ```triggers(‘httplistener’).outputs.Content``` as the value for _inputXml_. Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.\n3. Lastly, the Transform runs only if Validate succeeds. To configure this condition, click the gear icon on the top right and select _Add a condition to be met_. Set the condition to ```equals(actions('xmlvalidator').status,'Succeeded')```\n\n\n![BizTalk Transforms][4]\n\n\n## Add Service Bus Connector\nNext, let's add the destination--a Service Bus Queu--to write data to.\n\n1. Add a **Service Bus Connector** from the gallery. Set the **Name** to _Servicebus1_, set **Connection String* to the connection string to your service bus instance, set **Entity Name** to _Queue_, and skip **Subscription name**.\n2. Select the **Send Message** action and set the **Message** field for the action to _actions('transformservice').outputs.OutputXml_\n\n![Service Bus][5]\n\n\n## Send HTTP Response\nOnce pipeline processing is done, send back an HTTP response for both success and failure with the following steps:\n\n1. Add an **HTTP Listener** from the gallery and select the **Send HTTP Response** action.\n2. Set **Response Content** to *Pipeline processing completed*, **Response Status Code** to *200* to indicate HTTP 200 OK, and **Condition** to the expression ```@equals(actions('servicebusconnector').status,'Succeeded')```\n\nRepeat the above steps to send an HTTP response on failure as well. Change **Condition** to ```@not(equals(actions('servicebusconnector').status,'Succeeded')).```\n\n\n## Completion\nEvery time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created. To manage any such logic apps you create, click **Browse** in the Azure Management Portal and click **Logic Apps**. Click on your app to see more information.\n\n\n<!--image references -->\n[1]: ./media/app-service-logic-create-EAI-logic-app-using-VETR/BasicVETR.PNG\n[2]: ./media/app-service-logic-create-EAI-logic-app-using-VETR/HTTPListener.PNG\n[3]: ./media/app-service-logic-create-EAI-logic-app-using-VETR/BizTalkXMLValidator.PNG\n[4]: ./media/app-service-logic-create-EAI-logic-app-using-VETR/BizTalkTransforms.PNG\n[5]: ./media/app-service-logic-create-EAI-logic-app-using-VETR/AzureServiceBus.PNG\n\ntest\n"
}