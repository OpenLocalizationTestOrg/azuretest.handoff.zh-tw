{
  "nodes": [
    {
      "content": "PHP on Windows to SQL DB | Microsoft Azure",
      "pos": [
        27,
        69
      ]
    },
    {
      "content": "Presents a sample PHP program that connects to Azure SQL Database from a Windows client with transient fault handling, and provides links to the necessary software components needed by the client.",
      "pos": [
        88,
        284
      ]
    },
    {
      "content": "Connect to SQL Database by using PHP on Windows with Transient Fault Handling",
      "pos": [
        599,
        676
      ]
    },
    {
      "content": "This topic illustrates how you can connect to Azure SQL Database from a client application written in PHP that runs on Windows.",
      "pos": [
        844,
        971
      ]
    },
    {
      "content": "Create a database and retrieve your connection string",
      "pos": [
        1128,
        1181
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>Getting Started Topic<ept id=\"p1\">](sql-database-get-started.md)</ept> to learn how to create a sample database and retrieve your connection string.",
      "pos": [
        1184,
        1322
      ]
    },
    {
      "content": "It is important you follow the guide to create an <bpt id=\"p1\">**</bpt>AdventureWorks database template<ept id=\"p1\">**</ept>.",
      "pos": [
        1323,
        1410
      ]
    },
    {
      "content": "The samples shown below only work with the <bpt id=\"p1\">**</bpt>AdventureWorks schema<ept id=\"p1\">**</ept>.",
      "pos": [
        1411,
        1480
      ]
    },
    {
      "content": "Connect and query your database",
      "pos": [
        1487,
        1518
      ]
    },
    {
      "content": "The demo program is designed so that a transient error during an attempt to connect leads to a retry.",
      "pos": [
        1521,
        1622
      ]
    },
    {
      "content": "But a transient error during query command causes the program to discard the connection and create a new connection, before retrying the query command.",
      "pos": [
        1623,
        1774
      ]
    },
    {
      "content": "We neither recommend nor disrecommend this design choice.",
      "pos": [
        1775,
        1832
      ]
    },
    {
      "content": "The demo program illustrates some of the design flexibility that is available to you.",
      "pos": [
        1833,
        1918
      ]
    },
    {
      "content": "The length of this code sample is due mostly to the catch exception logic.",
      "pos": [
        1924,
        1998
      ]
    },
    {
      "content": "A shorter version of this Program.cs file is available this <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](sql-database-develop-php-simple-windows.md)</ept>.",
      "pos": [
        1999,
        2110
      ]
    },
    {
      "content": "The Main method is in Program.cs.",
      "pos": [
        2115,
        2148
      ]
    },
    {
      "content": "The callstack runs as follows:",
      "pos": [
        2149,
        2179
      ]
    },
    {
      "content": "Main calls ConnectAndQuery.",
      "pos": [
        2182,
        2209
      ]
    },
    {
      "content": "ConnectAndQuery calls EstablishConnection.",
      "pos": [
        2212,
        2254
      ]
    },
    {
      "content": "EstablishConnection calls IssueQueryCommand.",
      "pos": [
        2257,
        2301
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>sqlsrv_query()<ept id=\"p1\">](http://php.net/manual/en/function.sqlsrv-query.php)</ept> function can be used to retrieve a result set from a query against SQL Database.",
      "pos": [
        2303,
        2456
      ]
    },
    {
      "content": "This function essentially accepts any query and the connection object and returns a result set which can be iterated over with the use of <bpt id=\"p1\">[</bpt>sqlsrv_fetch_array()<ept id=\"p1\">](http://php.net/manual/en/function.sqlsrv-fetch-array.php)</ept>.",
      "pos": [
        2457,
        2676
      ]
    },
    {
      "content": "Further reading",
      "pos": [
        6905,
        6920
      ]
    },
    {
      "pos": [
        6923,
        7080
      ],
      "content": "For more information regarding PHP installation and usage, see <bpt id=\"p1\">[</bpt>Accessing SQL Server Databases with PHP<ept id=\"p1\">](http://technet.microsoft.com/library/cc793139.aspx)</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"PHP on Windows to SQL DB | Microsoft Azure\"\n    description=\"Presents a sample PHP program that connects to Azure SQL Database from a Windows client with transient fault handling, and provides links to the necessary software components needed by the client.\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"meet-bhagdev\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.workload=\"data-management\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"php\"\n    ms.topic=\"article\"\n    ms.date=\"07/21/2015\"\n    ms.author=\"mebha\"/>\n\n\n# Connect to SQL Database by using PHP on Windows with Transient Fault Handling\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\nThis topic illustrates how you can connect to Azure SQL Database from a client application written in PHP that runs on Windows.\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-prerequisites-php-windows](../../includes/sql-database-develop-includes-prerequisites-php-windows.md)]\n\n\n## Create a database and retrieve your connection string\n\n\nSee the [Getting Started Topic](sql-database-get-started.md) to learn how to create a sample database and retrieve your connection string. It is important you follow the guide to create an **AdventureWorks database template**. The samples shown below only work with the **AdventureWorks schema**. \n\n\n## Connect and query your database \n\nThe demo program is designed so that a transient error during an attempt to connect leads to a retry. But a transient error during query command causes the program to discard the connection and create a new connection, before retrying the query command. We neither recommend nor disrecommend this design choice. The demo program illustrates some of the design flexibility that is available to you.\n\n<br>The length of this code sample is due mostly to the catch exception logic. A shorter version of this Program.cs file is available this [here](sql-database-develop-php-simple-windows.md).\n<br>The Main method is in Program.cs. The callstack runs as follows:\n* Main calls ConnectAndQuery.\n* ConnectAndQuery calls EstablishConnection.\n* EstablishConnection calls IssueQueryCommand.\n\nThe [sqlsrv_query()](http://php.net/manual/en/function.sqlsrv-query.php) function can be used to retrieve a result set from a query against SQL Database. This function essentially accepts any query and the connection object and returns a result set which can be iterated over with the use of [sqlsrv_fetch_array()](http://php.net/manual/en/function.sqlsrv-fetch-array.php).\n\n    <?php\n        // Variables to tune the retry logic.  \n        $connectionTimeoutSeconds = 30;  // Default of 15 seconds is too short over the Internet, sometimes.\n        $maxCountTriesConnectAndQuery = 3;  // You can adjust the various retry count values.\n        $secondsBetweenRetries = 4;  // Simple retry strategy.\n        $errNo = 0;\n        $serverName = \"tcp:yourdatabase.database.windows.net,1433\";\n        $connectionOptions = array(\"Database\"=>\"AdventureWorks\",\n           \"Uid\"=>\"yourusername\", \"PWD\"=>\"yourpassword\", \"LoginTimeout\" => $connectionTimeoutSeconds);\n        $conn;\n        $errorArr = array();\n        for ($cc = 1; $cc <= $maxCountTriesConnectAndQuery; $cc++)\n        {\n            $errorArr = array();\n            $ctr = 0;\n            // [A.2] Connect, which proceeds to issue a query command. \n            $conn = sqlsrv_connect($serverName, $connectionOptions);  \n            if( $conn == true)\n            {\n                echo \"Connection was established\"; \n                echo \"<br>\";\n         \n                $tsql = \"SELECT [CompanyName] FROM SalesLT.Customer\";\n                $getProducts = sqlsrv_query($conn, $tsql);\n                if ($getProducts == FALSE)\n                    die(FormatErrors(sqlsrv_errors()));\n                $productCount = 0;\n                $ctr = 0;\n                while($row = sqlsrv_fetch_array($getProducts, SQLSRV_FETCH_ASSOC))\n                {   \n                    $ctr++;\n                    echo($row['CompanyName']);\n                    echo(\"<br/>\");\n                    $productCount++;\n                    if($ctr>10)\n                        break;\n                }\n                sqlsrv_free_stmt($getProducts);\n                break;\n            }\n            // Adds any the error codes from the SQL Exception to an array.\n            else {  \n                if( ($errors = sqlsrv_errors() ) != null) {\n                    foreach( $errors as $error ) {\n                        $errorArr[$ctr] = $error['code'];\n                        $ctr = $ctr + 1;\n                    }\n                }\n                $isTransientError = TRUE;\n                // [A.4] Check whether sqlExc.Number is on the whitelist of transients.\n                $isTransientError = IsTransientStatic($errorArr);\n                if ($isTransientError == TRUE)  // Is a static persistent error...\n                { \n                    echo(\"Persistent error suffered, SqlException.Number==\". $errorArr[0].\". Program Will terminate.\"); \n                    echo \"<br>\";\n                    // [A.5] Either the connection attempt or the query command attempt suffered a persistent SqlException.\n                    // Break the loop, let the hopeless program end.\n                    exit(0);\n                }\n                // [A.6] The SqlException identified a transient error from an attempt to issue a query command.\n                // So let this method reloop and try again. However, we recommend that the new query\n                // attempt should start at the beginning and establish a new connection.\n                if ($cc >= $maxCountTriesConnectAndQuery)\n                {\n                    echo \"Transient errors suffered in too many retries - \" . $cc .\" Program will terminate.\";\n                    echo \"<br>\";\n                    exit(0);\n                }\n                echo(\"Transient error encountered.  SqlException.Number==\". $errorArr[0]. \" . Program might retry by itself.\");  \n                echo \"<br>\";\n                echo $cc . \" Attempts so far. Might retry.\";\n                echo \"<br>\";\n                // A very simple retry strategy, a brief pause before looping. This could be changed to exponential if you want.\n                sleep(1*$secondsBetweenRetries);\n            }\n            // [A.3] All has gone well, so let the program end.\n        }\n        function IsTransientStatic($errorArr) {\n            $arrayOfTransientErrorNumbers = array(4060, 10928, 10929, 40197, 40501, 40613);\n            $result = array_intersect($arrayOfTransientErrorNumber, $errorArr);\n            $count = count($result);\n            if($count >= 0) //change to > 0 later.\n                return TRUE;\n        }\n    ?>\n    \n## Further reading\n\n\nFor more information regarding PHP installation and usage, see [Accessing SQL Server Databases with PHP](http://technet.microsoft.com/library/cc793139.aspx).\n\n \n"
}