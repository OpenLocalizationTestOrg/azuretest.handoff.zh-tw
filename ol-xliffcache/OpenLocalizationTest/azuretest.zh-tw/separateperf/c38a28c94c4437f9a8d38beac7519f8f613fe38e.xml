{
  "nodes": [
    {
      "content": "How to Use the Engagement API on Windows Phone Silverlight",
      "pos": [
        28,
        86
      ]
    },
    {
      "content": "How to Use the Engagement API on Windows Phone Silverlight",
      "pos": [
        106,
        164
      ]
    },
    {
      "content": "How to Use the Engagement API on Windows Phone Silverlight",
      "pos": [
        514,
        572
      ]
    },
    {
      "content": "This document is an add-on to the document <bpt id=\"p1\">[</bpt>How to integrate Mobile Engagement in your Windows Phone Silverlight app<ept id=\"p1\">](../mobile-engagement-windows-phone-integrate-engagement/)</ept>.",
      "pos": [
        574,
        750
      ]
    },
    {
      "content": "It provides in depth details about how to use the Engagement API to report your application statistics.",
      "pos": [
        751,
        854
      ]
    },
    {
      "pos": [
        856,
        1087
      ],
      "content": "If you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your <ph id=\"ph1\">`PhoneApplicationPage`</ph> sub-classes inherit from the <ph id=\"ph2\">`EngagementPage`</ph> class."
    },
    {
      "pos": [
        1089,
        1365
      ],
      "content": "If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <ph id=\"ph1\">`EngagementPage`</ph> classes, then you need to use the Engagement API."
    },
    {
      "content": "The Engagement API is provided by the <ph id=\"ph1\">`EngagementAgent`</ph> class.",
      "pos": [
        1367,
        1429
      ]
    },
    {
      "content": "You can access to those methods through <ph id=\"ph1\">`EngagementAgent.Instance`</ph>.",
      "pos": [
        1430,
        1497
      ]
    },
    {
      "content": "Even if the agent module has not been initialized, each call to the API is deferred, and will be executed again when the agent is available.",
      "pos": [
        1499,
        1639
      ]
    },
    {
      "content": "Engagement concepts",
      "pos": [
        1643,
        1662
      ]
    },
    {
      "content": "The following parts refine the Mobile Engagement Concepts for the Windows Phone platform.",
      "pos": [
        1664,
        1753
      ]
    },
    {
      "pos": [
        1759,
        1783
      ],
      "content": "<ph id=\"ph1\">`Session`</ph> and <ph id=\"ph2\">`Activity`</ph>"
    },
    {
      "pos": [
        1785,
        2045
      ],
      "content": "An <bpt id=\"p1\">*</bpt>activity<ept id=\"p1\">*</ept> is usually associated with one page of the application, that is to say the <bpt id=\"p2\">*</bpt>activity<ept id=\"p2\">*</ept> starts when the page is displayed and stops when the page is closed: this is the case when the Engagement SDK is integrated by using the <ph id=\"ph1\">`EngagementPage`</ph> class."
    },
    {
      "content": "But <bpt id=\"p1\">*</bpt>activities<ept id=\"p1\">*</ept> can also be controlled manually by using the Engagement API.",
      "pos": [
        2047,
        2124
      ]
    },
    {
      "content": "This allows to split a given page in several sub parts to get more details about the usage of this page (for example to known how often and how long dialogs are used inside this page).",
      "pos": [
        2125,
        2309
      ]
    },
    {
      "content": "Reporting Activities",
      "pos": [
        2313,
        2333
      ]
    },
    {
      "content": "User starts a new Activity",
      "pos": [
        2339,
        2365
      ]
    },
    {
      "content": "Reference",
      "pos": [
        2372,
        2381
      ]
    },
    {
      "content": "You need to call <ph id=\"ph1\">`StartActivity()`</ph> each time the user activity changes.",
      "pos": [
        2470,
        2541
      ]
    },
    {
      "content": "The first call to this function starts a new user session.",
      "pos": [
        2542,
        2600
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> The SDK automatically call the EndActivity method when the application is closed.",
      "pos": [
        2604,
        2703
      ]
    },
    {
      "content": "Thus, it is HIGHLY recommended to call the StartActivity method whenever the activity of the user change, and to NEVER call the EndActivity method, since calling this method forces the current session to be ended.",
      "pos": [
        2704,
        2917
      ]
    },
    {
      "content": "Example",
      "pos": [
        2924,
        2931
      ]
    },
    {
      "content": "User ends his current Activity",
      "pos": [
        3054,
        3084
      ]
    },
    {
      "content": "Reference",
      "pos": [
        3091,
        3100
      ]
    },
    {
      "content": "You need to call <ph id=\"ph1\">`EndActivity()`</ph> at least once when the user finishes his last activity.",
      "pos": [
        3134,
        3222
      ]
    },
    {
      "content": "This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call <ph id=\"ph1\">`StartActivity()`</ph> before the session timeout expires, the session is simply continued).",
      "pos": [
        3223,
        3469
      ]
    },
    {
      "content": "Example",
      "pos": [
        3476,
        3483
      ]
    },
    {
      "content": "Reporting Jobs",
      "pos": [
        3540,
        3554
      ]
    },
    {
      "content": "Start a job",
      "pos": [
        3560,
        3571
      ]
    },
    {
      "content": "Reference",
      "pos": [
        3578,
        3587
      ]
    },
    {
      "content": "You can use the job to track certains tasks over a period of time.",
      "pos": [
        3671,
        3737
      ]
    },
    {
      "content": "Example",
      "pos": [
        3744,
        3751
      ]
    },
    {
      "content": "End a job",
      "pos": [
        4061,
        4070
      ]
    },
    {
      "content": "Reference",
      "pos": [
        4077,
        4086
      ]
    },
    {
      "content": "As soon as a task tracked by a job has been terminated, you should call the EndJob method for this job, by supplying the job name.",
      "pos": [
        4126,
        4256
      ]
    },
    {
      "content": "Example",
      "pos": [
        4263,
        4270
      ]
    },
    {
      "content": "Reporting Events",
      "pos": [
        4465,
        4481
      ]
    },
    {
      "content": "There is three types of events :",
      "pos": [
        4483,
        4515
      ]
    },
    {
      "content": "Standalone events",
      "pos": [
        4521,
        4538
      ]
    },
    {
      "content": "Session events",
      "pos": [
        4543,
        4557
      ]
    },
    {
      "content": "Job events",
      "pos": [
        4562,
        4572
      ]
    },
    {
      "content": "Standalone Events",
      "pos": [
        4578,
        4595
      ]
    },
    {
      "content": "Reference",
      "pos": [
        4602,
        4611
      ]
    },
    {
      "content": "Standalone events can occur outside of the context of a session.",
      "pos": [
        4696,
        4760
      ]
    },
    {
      "content": "Example",
      "pos": [
        4767,
        4774
      ]
    },
    {
      "content": "Session events",
      "pos": [
        4845,
        4859
      ]
    },
    {
      "content": "Reference",
      "pos": [
        4866,
        4875
      ]
    },
    {
      "content": "Session events are usually used to report the actions performed by a user during his session.",
      "pos": [
        4967,
        5060
      ]
    },
    {
      "content": "Example",
      "pos": [
        5067,
        5074
      ]
    },
    {
      "content": "Without data :",
      "pos": [
        5078,
        5092
      ]
    },
    {
      "content": "With data :",
      "pos": [
        5291,
        5302
      ]
    },
    {
      "content": "Job Events",
      "pos": [
        5511,
        5521
      ]
    },
    {
      "content": "Reference",
      "pos": [
        5528,
        5537
      ]
    },
    {
      "content": "Job events are usually used to report the actions performed by a user during a Job.",
      "pos": [
        5646,
        5729
      ]
    },
    {
      "content": "Example",
      "pos": [
        5736,
        5743
      ]
    },
    {
      "content": "Reporting Errors",
      "pos": [
        5831,
        5847
      ]
    },
    {
      "content": "There is three types of errors :",
      "pos": [
        5849,
        5881
      ]
    },
    {
      "content": "Standalone errors",
      "pos": [
        5887,
        5904
      ]
    },
    {
      "content": "Session errors",
      "pos": [
        5909,
        5923
      ]
    },
    {
      "content": "Job errors",
      "pos": [
        5928,
        5938
      ]
    },
    {
      "content": "Standalone errors",
      "pos": [
        5944,
        5961
      ]
    },
    {
      "content": "Reference",
      "pos": [
        5968,
        5977
      ]
    },
    {
      "content": "Contrary to session errors, standalone errors can occur outside of the context of a session.",
      "pos": [
        6062,
        6154
      ]
    },
    {
      "content": "Example",
      "pos": [
        6161,
        6168
      ]
    },
    {
      "content": "Session errors",
      "pos": [
        6244,
        6258
      ]
    },
    {
      "content": "Reference",
      "pos": [
        6265,
        6274
      ]
    },
    {
      "content": "Session errors are usually used to report the errors impacting the user during his session.",
      "pos": [
        6366,
        6457
      ]
    },
    {
      "content": "Example",
      "pos": [
        6464,
        6471
      ]
    },
    {
      "content": "Job Errors",
      "pos": [
        6553,
        6563
      ]
    },
    {
      "content": "Reference",
      "pos": [
        6570,
        6579
      ]
    },
    {
      "content": "Errors can be related to a running job instead of being related to the current user session.",
      "pos": [
        6688,
        6780
      ]
    },
    {
      "content": "Example",
      "pos": [
        6787,
        6794
      ]
    },
    {
      "content": "Reporting Crashes",
      "pos": [
        6881,
        6898
      ]
    },
    {
      "content": "The agent provides two methods to deal with crashes.",
      "pos": [
        6900,
        6952
      ]
    },
    {
      "content": "Send an exception",
      "pos": [
        6958,
        6975
      ]
    },
    {
      "content": "Reference",
      "pos": [
        6982,
        6991
      ]
    },
    {
      "content": "Example",
      "pos": [
        7070,
        7077
      ]
    },
    {
      "content": "You can send an exception at any time by calling :",
      "pos": [
        7079,
        7129
      ]
    },
    {
      "content": "You can also use an optional parameter to terminate the engagement session at the same time than sending the crash.",
      "pos": [
        7199,
        7314
      ]
    },
    {
      "content": "To do so, call :",
      "pos": [
        7315,
        7331
      ]
    },
    {
      "content": "If you do that, the session and jobs will be closed just after sending the crash.",
      "pos": [
        7432,
        7513
      ]
    },
    {
      "content": "Send an unhandled exception",
      "pos": [
        7519,
        7546
      ]
    },
    {
      "content": "Reference",
      "pos": [
        7553,
        7562
      ]
    },
    {
      "content": "Engagement also provides a method to send unhandled exceptions.",
      "pos": [
        7634,
        7697
      ]
    },
    {
      "content": "This is especially useful when used inside the silverlight UnhandledException event handler.",
      "pos": [
        7698,
        7790
      ]
    },
    {
      "pos": [
        7792,
        7881
      ],
      "content": "This method will <bpt id=\"p1\">**</bpt>ALWAYS<ept id=\"p1\">**</ept> terminate the engagement session and jobs after being called."
    },
    {
      "content": "Example",
      "pos": [
        7888,
        7895
      ]
    },
    {
      "content": "You can use it to implement your own UnhandledException handler (especially if you have disabled the automatic crash reporting feature of Engagement).",
      "pos": [
        7897,
        8047
      ]
    },
    {
      "content": "For example, in the <ph id=\"ph1\">`Application_UnhandledException`</ph> method of the <ph id=\"ph2\">`App.xaml.cs`</ph> file :",
      "pos": [
        8048,
        8135
      ]
    },
    {
      "content": "OnActivated",
      "pos": [
        8486,
        8497
      ]
    },
    {
      "content": "Reference",
      "pos": [
        8503,
        8512
      ]
    },
    {
      "content": "When the user navigates forward, away from an application, after the Deactivated event is raised, the operating system will attempt to put the application into a dormant state.",
      "pos": [
        8566,
        8742
      ]
    },
    {
      "content": "Then, the application is Tombstoning.",
      "pos": [
        8743,
        8780
      ]
    },
    {
      "content": "In this process an application is terminated but some data about the state of the application and the individual pages within the application is preserved.",
      "pos": [
        8781,
        8936
      ]
    },
    {
      "pos": [
        8938,
        9134
      ],
      "content": "You have to insert <ph id=\"ph1\">`EngagementAgent.Instance.OnActivated(e)`</ph> in the <ph id=\"ph2\">`Application_Activated`</ph> method from the App.xaml.cs file to reset the Engagement Agent when the application has been Tombstoned."
    },
    {
      "content": "Example",
      "pos": [
        9140,
        9147
      ]
    },
    {
      "content": "Device Id",
      "pos": [
        9546,
        9555
      ]
    },
    {
      "content": "You can get the engagement device id by calling this method.",
      "pos": [
        9591,
        9651
      ]
    },
    {
      "content": "Extras parameters",
      "pos": [
        9655,
        9672
      ]
    },
    {
      "content": "Arbitrary data can be attached to an event, an error, an activity or a job.",
      "pos": [
        9674,
        9749
      ]
    },
    {
      "content": "These data can be structured using a dictionary.",
      "pos": [
        9750,
        9798
      ]
    },
    {
      "content": "Keys and values can be of any type.",
      "pos": [
        9799,
        9834
      ]
    },
    {
      "content": "Extras data are serialized so if you want to insert your own type in extras you have to add a data contract for this type.",
      "pos": [
        9836,
        9958
      ]
    },
    {
      "content": "Example",
      "pos": [
        9964,
        9971
      ]
    },
    {
      "content": "We create a new class \"Person\".",
      "pos": [
        9973,
        10004
      ]
    },
    {
      "pos": [
        10736,
        10786
      ],
      "content": "Then, we will add a <ph id=\"ph1\">`Person`</ph> instance to an extra."
    },
    {
      "pos": [
        11036,
        11170
      ],
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph> If you put other types of objects, make sure their ToString() method is implemented to return a human readable string."
    },
    {
      "content": "Limits",
      "pos": [
        11176,
        11182
      ]
    },
    {
      "content": "Keys",
      "pos": [
        11189,
        11193
      ]
    },
    {
      "content": "Each key in the object must match the following regular expression:",
      "pos": [
        11195,
        11262
      ]
    },
    {
      "content": "It means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).",
      "pos": [
        11291,
        11395
      ]
    },
    {
      "content": "Size",
      "pos": [
        11402,
        11406
      ]
    },
    {
      "pos": [
        11408,
        11459
      ],
      "content": "Extras are limited to <bpt id=\"p1\">**</bpt>1024<ept id=\"p1\">**</ept> characters per call."
    },
    {
      "content": "Reporting Application Information",
      "pos": [
        11463,
        11496
      ]
    },
    {
      "content": "Reference",
      "pos": [
        11502,
        11511
      ]
    },
    {
      "content": "You can manually report tracking information (or any other application specific information) using the SendAppInfo() function.",
      "pos": [
        11580,
        11706
      ]
    },
    {
      "content": "Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device.",
      "pos": [
        11708,
        11833
      ]
    },
    {
      "content": "Like event extras, use a Dictionary\\&lt;object, object\\&gt; to attach informations.",
      "pos": [
        11834,
        11911
      ]
    },
    {
      "content": "Example",
      "pos": [
        11917,
        11924
      ]
    },
    {
      "content": "Limits",
      "pos": [
        12196,
        12202
      ]
    },
    {
      "content": "Keys",
      "pos": [
        12209,
        12213
      ]
    },
    {
      "content": "Each key in the object must match the following regular expression:",
      "pos": [
        12215,
        12282
      ]
    },
    {
      "content": "It means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).",
      "pos": [
        12311,
        12415
      ]
    },
    {
      "content": "Size",
      "pos": [
        12422,
        12426
      ]
    },
    {
      "pos": [
        12428,
        12496
      ],
      "content": "Application information are limited to <bpt id=\"p1\">**</bpt>1024<ept id=\"p1\">**</ept> characters per call."
    },
    {
      "content": "In the previous example, the JSON sent to the server is 44 characters long:",
      "pos": [
        12498,
        12573
      ]
    },
    {
      "content": "test",
      "pos": [
        12637,
        12641
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to Use the Engagement API on Windows Phone Silverlight\" \n    description=\"How to Use the Engagement API on Windows Phone Silverlight\"    \n    services=\"mobile-engagement\" \n    documentationCenter=\"mobile\" \n    authors=\"piyushjo\" \n    manager=\"dwrede\"\n    editor=\"\" /> \n\n<tags \n    ms.service=\"mobile-engagement\" \n    ms.workload=\"mobile\" \n    ms.tgt_pltfrm=\"mobile-windows-phone\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"07/07/2015\" \n    ms.author=\"piyushjo\" />\n\n#How to Use the Engagement API on Windows Phone Silverlight\n\nThis document is an add-on to the document [How to integrate Mobile Engagement in your Windows Phone Silverlight app](../mobile-engagement-windows-phone-integrate-engagement/). It provides in depth details about how to use the Engagement API to report your application statistics.\n\nIf you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your `PhoneApplicationPage` sub-classes inherit from the `EngagementPage` class.\n\nIf you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the `EngagementPage` classes, then you need to use the Engagement API.\n\nThe Engagement API is provided by the `EngagementAgent` class. You can access to those methods through `EngagementAgent.Instance`.\n\nEven if the agent module has not been initialized, each call to the API is deferred, and will be executed again when the agent is available.\n\n##Engagement concepts\n\nThe following parts refine the Mobile Engagement Concepts for the Windows Phone platform.\n\n### `Session` and `Activity`\n\nAn *activity* is usually associated with one page of the application, that is to say the *activity* starts when the page is displayed and stops when the page is closed: this is the case when the Engagement SDK is integrated by using the `EngagementPage` class.\n\nBut *activities* can also be controlled manually by using the Engagement API. This allows to split a given page in several sub parts to get more details about the usage of this page (for example to known how often and how long dialogs are used inside this page).\n\n##Reporting Activities\n\n### User starts a new Activity\n\n#### Reference\n\n            void StartActivity(string name, Dictionary<object, object> extras = null)\n\nYou need to call `StartActivity()` each time the user activity changes. The first call to this function starts a new user session.\n\n> [AZURE.IMPORTANT] The SDK automatically call the EndActivity method when the application is closed. Thus, it is HIGHLY recommended to call the StartActivity method whenever the activity of the user change, and to NEVER call the EndActivity method, since calling this method forces the current session to be ended.\n\n#### Example\n\n            EngagementAgent.Instance.StartActivity(\"main\", new Dictionary<object, object>() {{\"example\", \"data\"}});\n\n### User ends his current Activity\n\n#### Reference\n\n            void EndActivity()\n\nYou need to call `EndActivity()` at least once when the user finishes his last activity. This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call `StartActivity()` before the session timeout expires, the session is simply continued).\n\n#### Example\n\n            EngagementAgent.Instance.EndActivity();\n\n##Reporting Jobs\n\n### Start a job\n\n#### Reference\n\n            void StartJob(string name, Dictionary<object, object> extras = null)\n\nYou can use the job to track certains tasks over a period of time.\n\n#### Example\n\n            // An upload begins...\n            \n            // Set the extras\n            var extras = new Dictionary<object, object>();\n            extras.Add(\"title\", \"avatar\");\n            extras.Add(\"type\", \"image\");\n            \n            EngagementAgent.Instance.StartJob(\"uploadData\", extras);\n\n### End a job\n\n#### Reference\n\n            void EndJob(string name)\n\nAs soon as a task tracked by a job has been terminated, you should call the EndJob method for this job, by supplying the job name.\n\n#### Example\n\n            // In the previous section, we started an upload tracking with a job\n            // Then, the upload ends\n            \n            EngagementAgent.Instance.EndJob(\"uploadData\");\n\n##Reporting Events\n\nThere is three types of events :\n\n-   Standalone events\n-   Session events\n-   Job events\n\n### Standalone Events\n\n#### Reference\n\n            void SendEvent(string name, Dictionary<object, object> extras = null)\n\nStandalone events can occur outside of the context of a session.\n\n#### Example\n\n            EngagementAgent.Instance.SendEvent(\"event\", extra);\n\n### Session events\n\n#### Reference\n\n            void SendSessionEvent(string name, Dictionary<object, object> extras = null)\n\nSession events are usually used to report the actions performed by a user during his session.\n\n#### Example\n\n**Without data :**\n\n            EngagementAgent.Instance.SendSessionEvent(\"sessionEvent\");\n            \n            // or\n            \n            EngagementAgent.Instance.SendSessionEvent(\"sessionEvent\", null);\n\n**With data :**\n\n            Dictionary<object, object> extras = new Dictionary<object,object>();\n            extras.Add(\"name\", \"data\");\n            EngagementAgent.Instance.SendSessionEvent(\"sessionEvent\", extras);\n\n### Job Events\n\n#### Reference\n\n            void SendJobEvent(string eventName, string jobName, Dictionary<object, object> extras = null)\n\nJob events are usually used to report the actions performed by a user during a Job.\n\n#### Example\n\n            EngagementAgent.Instance.SendJobEvent(\"eventName\", \"jobName\", extras);\n\n##Reporting Errors\n\nThere is three types of errors :\n\n-   Standalone errors\n-   Session errors\n-   Job errors\n\n### Standalone errors\n\n#### Reference\n\n            void SendError(string name, Dictionary<object, object> extras = null)\n\nContrary to session errors, standalone errors can occur outside of the context of a session.\n\n#### Example\n\n            EngagementAgent.Instance.SendError(\"errorName\", extras);\n\n### Session errors\n\n#### Reference\n\n            void SendSessionError(string name, Dictionary<object, object> extras = null)\n\nSession errors are usually used to report the errors impacting the user during his session.\n\n#### Example\n\n            EngagementAgent.Instance.SendSessionError(\"errorName\", extra);\n\n### Job Errors\n\n#### Reference\n\n            void SendJobError(string errorName, string jobName, Dictionary<object, object> extras = null)\n\nErrors can be related to a running job instead of being related to the current user session.\n\n#### Example\n\n            EngagementAgent.Instance.SendJobError(\"errorName\", \"jobname\", extra);\n\n##Reporting Crashes\n\nThe agent provides two methods to deal with crashes.\n\n### Send an exception\n\n#### Reference\n\n            void SendCrash(Exception e, bool terminateSession = false)\n\n#### Example\n\nYou can send an exception at any time by calling :\n\n            EngagementAgent.Instance.SendCrash(aCatchedException);\n\nYou can also use an optional parameter to terminate the engagement session at the same time than sending the crash. To do so, call :\n\n            EngagementAgent.Instance.SendCrash(new Exception(\"example\"), terminateSession: true);\n\nIf you do that, the session and jobs will be closed just after sending the crash.\n\n### Send an unhandled exception\n\n#### Reference\n\n            void SendCrash(ApplicationUnhandledExceptionEventArgs e)\n\nEngagement also provides a method to send unhandled exceptions. This is especially useful when used inside the silverlight UnhandledException event handler.\n\nThis method will **ALWAYS** terminate the engagement session and jobs after being called.\n\n#### Example\n\nYou can use it to implement your own UnhandledException handler (especially if you have disabled the automatic crash reporting feature of Engagement). For example, in the `Application_UnhandledException` method of the `App.xaml.cs` file :\n\n            // In your App.xaml.cs file\n            \n            // Code to execute on Unhandled Exceptions\n            private void Application_UnhandledException(object sender, ApplicationUnhandledExceptionEventArgs e)\n            {\n              // your own code\n            \n              EngagementAgent.Instance.SendCrash(e);\n            }\n\n##OnActivated\n\n### Reference\n\n            void OnActivated(ActivatedEventArgs e)\n\nWhen the user navigates forward, away from an application, after the Deactivated event is raised, the operating system will attempt to put the application into a dormant state. Then, the application is Tombstoning. In this process an application is terminated but some data about the state of the application and the individual pages within the application is preserved.\n\nYou have to insert `EngagementAgent.Instance.OnActivated(e)` in the `Application_Activated` method from the App.xaml.cs file to reset the Engagement Agent when the application has been Tombstoned.\n\n### Example\n\n            // Inside your App.xaml.cs file\n            \n            // Code to execute when the application is activated (brought to foreground)\n            // This code will not execute when the application is first launched\n            private void Application_Activated(object sender, ActivatedEventArgs e)\n            {\n              EngagementAgent.Instance.OnActivated(e);\n            }\n\n##Device Id\n\n            String GetDeviceId()\n\nYou can get the engagement device id by calling this method.\n\n##Extras parameters\n\nArbitrary data can be attached to an event, an error, an activity or a job. These data can be structured using a dictionary. Keys and values can be of any type.\n\nExtras data are serialized so if you want to insert your own type in extras you have to add a data contract for this type.\n\n### Example\n\nWe create a new class \"Person\".\n\n            using System.Runtime.Serialization;\n            \n            namespace Engagement.Agent\n            {\n              [DataContract]\n              public class Person\n              {\n                public Person(string name, int age)\n                {\n                  Age = age;\n                  Name = name;\n                }\n            \n                // Properties\n            \n                [DataMember]\n                public int Age\n                {\n                  get;\n                  set;\n                }\n            \n                [DataMember]\n                public string Name\n                {\n                  get;\n                  set; \n                }\n              }\n            }\n\nThen, we will add a `Person` instance to an extra.\n\n            Person person = new Person(\"Engagement Haddock\", 51);\n            var extras = new Dictionary<object, object>();\n            extras.Add(\"people\", person);\n            \n            EngagementAgent.Instance.SendEvent(\"Event\", extras);\n\n> [AZURE.WARNING] If you put other types of objects, make sure their ToString() method is implemented to return a human readable string.\n\n### Limits\n\n#### Keys\n\nEach key in the object must match the following regular expression:\n\n`^[a-zA-Z][a-zA-Z_0-9]*$`\n\nIt means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).\n\n#### Size\n\nExtras are limited to **1024** characters per call.\n\n##Reporting Application Information\n\n### Reference\n\n            void SendAppInfo(Dictionary<object, object> appInfos)\n\nYou can manually report tracking information (or any other application specific information) using the SendAppInfo() function.\n\nNote that these information can be sent incrementally: only the latest value for a given key will be kept for a given device. Like event extras, use a Dictionary\\<object, object\\> to attach informations.\n\n### Example\n\n            Dictionary<object, object> appInfo = new Dictionary<object, object>()\n            {\n               {\"subscription\", \"2013-12-07\"},\n               {\"premium\", \"true\"}\n            };\n            \n            EngagementAgent.Instance.SendAppInfo(appInfo);\n\n### Limits\n\n#### Keys\n\nEach key in the object must match the following regular expression:\n\n`^[a-zA-Z][a-zA-Z_0-9]*$`\n\nIt means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).\n\n#### Size\n\nApplication information are limited to **1024** characters per call.\n\nIn the previous example, the JSON sent to the server is 44 characters long:\n\n            {\"subscription\":\"2013-12-07\",\"premium\":\"true\"}\n \n\ntest\n"
}