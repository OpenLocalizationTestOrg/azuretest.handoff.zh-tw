{
  "nodes": [
    {
      "content": "Provision and deploy microservices predictably in Azure",
      "pos": [
        27,
        82
      ]
    },
    {
      "content": "Learn how to deploy an application composed of microservices in Azure App Service as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.",
      "pos": [
        101,
        289
      ]
    },
    {
      "content": "Provision and deploy microservices predictably in Azure",
      "pos": [
        595,
        650
      ]
    },
    {
      "pos": [
        654,
        943
      ],
      "content": "This tutorial shows how to provision and deploy an application composed of <bpt id=\"p1\">[</bpt>microservices<ept id=\"p1\">](https://en.wikipedia.org/wiki/Microservices)</ept> in <bpt id=\"p2\">[</bpt>Azure App Service<ept id=\"p2\">](/services/app-service/)</ept> as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting."
    },
    {
      "content": "When provisioning and deploying high-scale applications that are composed of highly decoupled microservices, repeatability and predictability are crucial to success.",
      "pos": [
        946,
        1111
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Azure App Service<ept id=\"p1\">](/services/app-service/)</ept> enables you to create microservices that include web apps, mobile apps, API apps, and logic apps.",
      "pos": [
        1112,
        1253
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Azure Resource Manager<ept id=\"p1\">](../resource-group-overview.md)</ept> enables you to manage all the microservices as a unit, together with resource dependencies such as database and source control settings.",
      "pos": [
        1254,
        1446
      ]
    },
    {
      "content": "Now, you can also deploy such an application using JSON templates and simple PowerShell scripting.",
      "pos": [
        1447,
        1545
      ]
    },
    {
      "content": "What you will do",
      "pos": [
        1551,
        1567
      ]
    },
    {
      "content": "In the tutorial, you will deploy an application that includes:",
      "pos": [
        1572,
        1634
      ]
    },
    {
      "content": "Two web apps (i.e. two microservices)",
      "pos": [
        1640,
        1677
      ]
    },
    {
      "content": "A backend SQL Database",
      "pos": [
        1682,
        1704
      ]
    },
    {
      "content": "App settings, connection strings, and source control",
      "pos": [
        1709,
        1761
      ]
    },
    {
      "content": "Application insights, alerts, autoscaling settings",
      "pos": [
        1766,
        1816
      ]
    },
    {
      "content": "Tools you will use",
      "pos": [
        1821,
        1839
      ]
    },
    {
      "content": "In this tutorial, you will use the following tools.",
      "pos": [
        1844,
        1895
      ]
    },
    {
      "content": "Since it’s not comprehensive discussion on tools, I’m going to stick to the end-to-end scenario and just give you a brief intro to each, and where you can find more information on it.",
      "pos": [
        1896,
        2079
      ]
    },
    {
      "content": "Azure Resource Manager templates (JSON)",
      "pos": [
        2086,
        2125
      ]
    },
    {
      "content": "Every time you create a web app in Azure App Service, for example, Azure Resource Manager uses a JSON template to create the entire resource group with the component resources.",
      "pos": [
        2132,
        2308
      ]
    },
    {
      "content": "A complex template from the <bpt id=\"p1\">[</bpt>Azure Marketplace<ept id=\"p1\">](/marketplace)</ept> like the <bpt id=\"p2\">[</bpt>Scalable WordPress<ept id=\"p2\">](/marketplace/partners/wordpress/scalablewordpress/)</ept> app can include the MySQL database, storage accounts, the App Service plan, the web app itself, alert rules, app settings, autoscale settings, and more, and all these templates are available to you through PowerShell.",
      "pos": [
        2309,
        2670
      ]
    },
    {
      "content": "For information on how to download and use these templates, see <bpt id=\"p1\">[</bpt>Using Azure PowerShell with Azure Resource Manager<ept id=\"p1\">](../powershell-azure-resource-manager.md)</ept>.",
      "pos": [
        2671,
        2829
      ]
    },
    {
      "pos": [
        2831,
        2983
      ],
      "content": "For more information on the Azure Resource Manager templates, see <bpt id=\"p1\">[</bpt>Authoring Azure Resource Manager Templates<ept id=\"p1\">](../resource-group-authoring-templates.md)</ept>"
    },
    {
      "content": "Azure SDK 2.6 for Visual Studio",
      "pos": [
        2989,
        3020
      ]
    },
    {
      "content": "The newest SDK contains improvements to the Resource Manager template support in the JSON editor.",
      "pos": [
        3026,
        3123
      ]
    },
    {
      "content": "You can use this to quickly create a resource group template from scratch or open an existing JSON template (such as a downloaded gallery template) for modification, populate the parameters file, and even deploy the resource group directly from an Azure Resource Group solution.",
      "pos": [
        3124,
        3402
      ]
    },
    {
      "pos": [
        3404,
        3520
      ],
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Azure SDK 2.6 for Visual Studio<ept id=\"p1\">](/blog/2015/04/29/announcing-the-azure-sdk-2-6-for-net/)</ept>."
    },
    {
      "content": "Azure PowerShell 0.8.0 or later",
      "pos": [
        3526,
        3557
      ]
    },
    {
      "content": "Beginning in version 0.8.0, the Azure PowerShell installation includes the Azure Resource Manager module in addition to the Azure module.",
      "pos": [
        3563,
        3700
      ]
    },
    {
      "content": "This new module enables you to script the deployment of resource groups.",
      "pos": [
        3701,
        3773
      ]
    },
    {
      "pos": [
        3775,
        3894
      ],
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Using Azure PowerShell with Azure Resource Manager<ept id=\"p1\">](../powershell-azure-resource-manager.md)</ept>"
    },
    {
      "content": "Azure Resource Explorer",
      "pos": [
        3900,
        3923
      ]
    },
    {
      "content": "This <bpt id=\"p1\">[</bpt>preview tool<ept id=\"p1\">](https://resources.azure.com)</ept> enables you to explore the JSON definitions of all the resource groups in your subscription and the individual resources.",
      "pos": [
        3929,
        4099
      ]
    },
    {
      "content": "In the tool, you can edit the JSON definitions of a resource, delete an entire hierarchy of resources, and create new resources.",
      "pos": [
        4100,
        4228
      ]
    },
    {
      "content": "The information readily available in this tool is very helpful for template authoring because it shows you what properties you need to set for a particular type of resource, the correct values, etc. You can even create your resource group in the <bpt id=\"p1\">[</bpt>Azure preview portal<ept id=\"p1\">](https://portal.azure.com)</ept>, then inspect its JSON definitions in the explorer tool to help you templatize the resource group.",
      "pos": [
        4230,
        4623
      ]
    },
    {
      "content": "Deploy to Azure button",
      "pos": [
        4629,
        4651
      ]
    },
    {
      "content": "If you use GitHub for source control, you can put a <bpt id=\"p1\">[</bpt>Deploy to Azure button<ept id=\"p1\">](/blog/2014/11/13/deploy-to-azure-button-for-azure-websites-2/)</ept> into your README.MD, which enables a turn-key deployment UI to Azure.",
      "pos": [
        4657,
        4866
      ]
    },
    {
      "content": "While you can do this for any simple web app, you can extend this to enable deploying an entire resource group by putting an azuredeploy.json file in the repository root.",
      "pos": [
        4867,
        5037
      ]
    },
    {
      "content": "This JSON file, which contains the resource group template, will be used by the Deploy to Azure button to create the resource group.",
      "pos": [
        5038,
        5170
      ]
    },
    {
      "content": "For an example, see the <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> sample, which you will use in this tutorial.",
      "pos": [
        5171,
        5302
      ]
    },
    {
      "content": "Get the sample resource group template",
      "pos": [
        5307,
        5345
      ]
    },
    {
      "content": "So now let’s get right to it.",
      "pos": [
        5350,
        5379
      ]
    },
    {
      "pos": [
        5385,
        5483
      ],
      "content": "Navigate to the <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> App Service sample."
    },
    {
      "pos": [
        5490,
        5530
      ],
      "content": "In readme.md, click <bpt id=\"p1\">**</bpt>Deploy to Azure<ept id=\"p1\">**</ept>."
    },
    {
      "content": "You’re taken to the <bpt id=\"p1\">[</bpt>deploy-to-azure<ept id=\"p1\">](https://deploy.azure.com)</ept> site and asked to input deployment parameters.",
      "pos": [
        5537,
        5647
      ]
    },
    {
      "content": "Notice that most of the fields are populated with the repository name and some random strings for you.",
      "pos": [
        5648,
        5750
      ]
    },
    {
      "content": "You can change all the fields if you want, but the only things you have to enter are the SQL Server administrative login and the password, then click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>.",
      "pos": [
        5751,
        5910
      ]
    },
    {
      "content": "Next, click <bpt id=\"p1\">**</bpt>Deploy<ept id=\"p1\">**</ept> to start the deployment process.",
      "pos": [
        6019,
        6074
      ]
    },
    {
      "content": "Once the process runs to completion, click the http://todoapp<bpt id=\"p1\">*</bpt>XXXX<ept id=\"p1\">*</ept>.azure.websites.net link to browse the deployed application.",
      "pos": [
        6075,
        6202
      ]
    },
    {
      "content": "The UI would be a little slow when you first browse to it because the apps are just starting up, but convince yourself that it’s a fully-functional application.",
      "pos": [
        6311,
        6471
      ]
    },
    {
      "pos": [
        6477,
        6583
      ],
      "content": "Back in the Deploy page, click the <bpt id=\"p1\">**</bpt>Manage<ept id=\"p1\">**</ept> link to see the new application in the Azure preview portal."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Essentials<ept id=\"p1\">**</ept> dropdown, click the resource group link.",
      "pos": [
        6589,
        6651
      ]
    },
    {
      "content": "Note also that the web app is already connected to the GitHub repository under <bpt id=\"p1\">**</bpt>External Project<ept id=\"p1\">**</ept>.",
      "pos": [
        6652,
        6752
      ]
    },
    {
      "content": "In the resource group blade, note that there are already two web apps and one SQL Database in the resource group.",
      "pos": [
        6867,
        6980
      ]
    },
    {
      "content": "Everything that you just saw in a few short minutes is a fully deployed two-microservice application, with all the components, dependencies, settings, database, and continuous publishing, set up by an automated orchestration in Azure Resource Manager.",
      "pos": [
        7097,
        7348
      ]
    },
    {
      "content": "All this was done by two things:",
      "pos": [
        7349,
        7381
      ]
    },
    {
      "content": "The Deploy to Azure button",
      "pos": [
        7387,
        7413
      ]
    },
    {
      "content": "azuredeploy.json in the repo root",
      "pos": [
        7418,
        7451
      ]
    },
    {
      "content": "You can deploy this same application tens, hundreds, or thousands of times and have the exact same configuration every time.",
      "pos": [
        7453,
        7577
      ]
    },
    {
      "content": "The repeatability and the predictability of this approach enables you to deploy high-scale applications with ease and confidence.",
      "pos": [
        7578,
        7707
      ]
    },
    {
      "content": "Examine (or edit) AZUREDEPLOY.JSON",
      "pos": [
        7712,
        7746
      ]
    },
    {
      "content": "Now let’s look at how the GitHub repository was set up.",
      "pos": [
        7751,
        7806
      ]
    },
    {
      "content": "You will be using the JSON editor in the Azure .NET SDK, so if you haven’t already installed <bpt id=\"p1\">[</bpt>Azure .NET SDK 2.6<ept id=\"p1\">](/downloads/)</ept>, do it now.",
      "pos": [
        7807,
        7945
      ]
    },
    {
      "content": "Clone the <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> repository using your favorite git tool.",
      "pos": [
        7951,
        8064
      ]
    },
    {
      "content": "In the screenshot below, I’m doing this in the Team Explorer in Visual Studio 2013.",
      "pos": [
        8065,
        8148
      ]
    },
    {
      "content": "From the repository root, open azuredeploy.json in Visual Studio.",
      "pos": [
        8249,
        8314
      ]
    },
    {
      "content": "If you don’t see the JSON Outline pane, you need to install Azure .NET SDK.",
      "pos": [
        8315,
        8390
      ]
    },
    {
      "content": "I’m not going to describe every detail of the JSON format, but the <bpt id=\"p1\">[</bpt>More Resources<ept id=\"p1\">](#resources)</ept> section has links for learning the resource group template language.",
      "pos": [
        8492,
        8656
      ]
    },
    {
      "content": "Here, I’m just going to show you the interesting features that can help you get started in making your own custom template for app deployment.",
      "pos": [
        8657,
        8799
      ]
    },
    {
      "content": "Parameters",
      "pos": [
        8805,
        8815
      ]
    },
    {
      "content": "Take a look at the parameters section to see that most of these parameters are what the <bpt id=\"p1\">**</bpt>Deploy to Azure<ept id=\"p1\">**</ept> button prompts you to input.",
      "pos": [
        8821,
        8957
      ]
    },
    {
      "content": "The site behind the <bpt id=\"p1\">**</bpt>Deploy to Azure<ept id=\"p1\">**</ept> button populates the input UI using the parameters defined in azuredeploy.json.",
      "pos": [
        8958,
        9077
      ]
    },
    {
      "content": "These parameters are used throughout the resource definitions, such as resource names, property values, etc.",
      "pos": [
        9078,
        9186
      ]
    },
    {
      "content": "Resources",
      "pos": [
        9192,
        9201
      ]
    },
    {
      "content": "In the resources node, you can see that 4 top-level resources are defined, including a SQL Server instance, an App Service plan, and two web apps.",
      "pos": [
        9207,
        9353
      ]
    },
    {
      "content": "App Service plan",
      "pos": [
        9361,
        9377
      ]
    },
    {
      "content": "Let’s start with a simple root-level resource in the JSON.",
      "pos": [
        9384,
        9442
      ]
    },
    {
      "content": "In the JSON Outline, click the App Service plan named <bpt id=\"p1\">**</bpt>[hostingPlanName]<ept id=\"p1\">**</ept> to highlight the corresponding JSON code.",
      "pos": [
        9443,
        9560
      ]
    },
    {
      "pos": [
        9661,
        9935
      ],
      "content": "Note that the <ph id=\"ph1\">`type`</ph> element specifies the string for an App Service plan (it was called a server farm a long, long time ago), and other elements and properties are filled in using the parameters defined in the JSON file, and this resource doesn’t have any nested resources."
    },
    {
      "pos": [
        9938,
        10147
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Note also that the value of <ph id=\"ph2\">`apiVersion`</ph> tells Azure which version of the REST API to use the JSON resource definition with, and it can affect how the resource should be formatted inside the <ph id=\"ph3\">`{}`</ph>."
    },
    {
      "content": "SQL Server",
      "pos": [
        10155,
        10165
      ]
    },
    {
      "pos": [
        10172,
        10251
      ],
      "content": "Next, click on the SQL Server resource named <bpt id=\"p1\">**</bpt>SQLServer<ept id=\"p1\">**</ept> in the JSON Outline."
    },
    {
      "content": "Note the following about the highlighted JSON code:",
      "pos": [
        10347,
        10398
      ]
    },
    {
      "content": "The use of parameters ensures that the created resources are named and configured in a way that makes them consistent with one another.",
      "pos": [
        10404,
        10539
      ]
    },
    {
      "pos": [
        10544,
        10631
      ],
      "content": "The SQLServer resource has two nested resources, each has a different value for <ph id=\"ph1\">`type`</ph>."
    },
    {
      "content": "The nested resources inside <ph id=\"ph1\">`“resources”: […]`</ph>, where the database and the firewall rules are defined, have a <ph id=\"ph2\">`dependsOn`</ph> element that specifies the resource ID of the root-level SQLServer resource.",
      "pos": [
        10636,
        10834
      ]
    },
    {
      "content": "This tells Azure Resource Manager, “before you create this resource, that other resource must already exist; and if that other resource is defined in the template, then create that one first”.",
      "pos": [
        10835,
        11027
      ]
    },
    {
      "pos": [
        11034,
        11204
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> For detailed information on how to use the <ph id=\"ph2\">`resourceId()`</ph> function, see <bpt id=\"p1\">[</bpt>Azure Resource Manager Template Functions<ept id=\"p1\">](../resource-group-template-functions.md)</ept>."
    },
    {
      "pos": [
        11210,
        11380
      ],
      "content": "The effect of the <ph id=\"ph1\">`dependsOn`</ph> element is that Azure Resource Manager can know which resources can be created in parallel and which resources must be created sequentially."
    },
    {
      "content": "Web app",
      "pos": [
        11388,
        11395
      ]
    },
    {
      "content": "Now, let’s move on to the actual web apps themselves, which are more complicated.",
      "pos": [
        11402,
        11483
      ]
    },
    {
      "content": "Click the [variables(‘apiSiteName’)] web app in the JSON Outline to highlight its JSON code.",
      "pos": [
        11484,
        11576
      ]
    },
    {
      "content": "You’ll notice that things are getting much more interesting.",
      "pos": [
        11577,
        11637
      ]
    },
    {
      "content": "For this purpose, I’ll talk about the features one by one:",
      "pos": [
        11638,
        11696
      ]
    },
    {
      "content": "Root resource",
      "pos": [
        11704,
        11717
      ]
    },
    {
      "content": "The web app depends on two different resources.",
      "pos": [
        11725,
        11772
      ]
    },
    {
      "content": "This means that Azure Resource Manager will create the web app only after both the App Service plan and the SQL Server instance are created.",
      "pos": [
        11773,
        11913
      ]
    },
    {
      "content": "App settings",
      "pos": [
        12015,
        12027
      ]
    },
    {
      "content": "The app settings are also defined as a nested resource.",
      "pos": [
        12035,
        12090
      ]
    },
    {
      "pos": [
        12190,
        12307
      ],
      "content": "In the <ph id=\"ph1\">`properties`</ph> element for <ph id=\"ph2\">`config/appsettings`</ph>, you have two app settings in the format <ph id=\"ph3\">`“&lt;name&gt;” : “&lt;value&gt;”`</ph>."
    },
    {
      "content": "<ph id=\"ph1\">`PROJECT`</ph> is a <bpt id=\"p1\">[</bpt>KUDU setting<ept id=\"p1\">](https://github.com/projectkudu/kudu/wiki/Customizing-deployments)</ept> that tells Azure deployment which project to use in a multi-project Visual Studio solution.",
      "pos": [
        12313,
        12500
      ]
    },
    {
      "content": "I will show you later how source control is configured, but since the ToDoApp code is in a multi-project Visual Studio solution, we need this setting.",
      "pos": [
        12501,
        12651
      ]
    },
    {
      "pos": [
        12656,
        12724
      ],
      "content": "<ph id=\"ph1\">`clientUrl`</ph> is simply an app setting that the application code uses."
    },
    {
      "content": "Connection strings",
      "pos": [
        12732,
        12750
      ]
    },
    {
      "content": "The connection strings are also defined as a nested resource.",
      "pos": [
        12758,
        12819
      ]
    },
    {
      "content": "In the <ph id=\"ph1\">`properties`</ph> element for <ph id=\"ph2\">`config/connectionstrings`</ph>, each connection string is also defined as a name:value pair, with the specific format of <ph id=\"ph3\">`“&lt;name&gt;” : {“value”: “…”, “type”: “…”}`</ph>.",
      "pos": [
        12918,
        13108
      ]
    },
    {
      "content": "For the <ph id=\"ph1\">`type`</ph> element, possible values are <ph id=\"ph2\">`MySql`</ph>, <ph id=\"ph3\">`SQLServer`</ph>, <ph id=\"ph4\">`SQLAzure`</ph>, and <ph id=\"ph5\">`Custom`</ph>.",
      "pos": [
        13109,
        13200
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> For a definitive list of the connection string types, run the following command in Azure PowerShell:",
      "pos": [
        13203,
        13315
      ]
    },
    {
      "content": "\\[Enum]::GetNames(\"Microsoft.WindowsAzure.Commands.Utilities.Websites.Services.WebEntities.DatabaseType\")",
      "pos": [
        13320,
        13425
      ]
    },
    {
      "content": "Source control",
      "pos": [
        13437,
        13451
      ]
    },
    {
      "content": "The source control settings are also defined as a nested resource.",
      "pos": [
        13459,
        13525
      ]
    },
    {
      "content": "Azure Resource Manager uses this resource to configure continuous publishing (see caveat on <ph id=\"ph1\">`IsManualIntegration`</ph> later) and also to kick off the deployment of application code automatically during the processing of the JSON file.",
      "pos": [
        13526,
        13756
      ]
    },
    {
      "content": "<ph id=\"ph1\">`RepoUrl`</ph> and <ph id=\"ph2\">`branch`</ph> should be pretty intuitive and should point to the Git repository and the name of the branch to publish from.",
      "pos": [
        13861,
        13993
      ]
    },
    {
      "content": "Again, these are defined by input parameters.",
      "pos": [
        13994,
        14039
      ]
    },
    {
      "content": "Note in the <ph id=\"ph1\">`dependsOn`</ph> element that, in addition to the web app resource itself, <ph id=\"ph2\">`sourcecontrols/web`</ph> also depends on <ph id=\"ph3\">`config/appsettings`</ph> and <ph id=\"ph4\">`config/connectionstrings`</ph>.",
      "pos": [
        14042,
        14213
      ]
    },
    {
      "content": "This is because once <ph id=\"ph1\">`sourcecontrols/web`</ph> is configured, the Azure deployment process will automatically attempt to deploy, build, and start the application code.",
      "pos": [
        14214,
        14376
      ]
    },
    {
      "content": "Therefore, inserting this dependency helps you make sure that the application has access to the required app settings and connection strings before the application code is run.",
      "pos": [
        14377,
        14553
      ]
    },
    {
      "content": "[TODO: need to verify if this is true.]",
      "pos": [
        14554,
        14593
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Note also that <ph id=\"ph2\">`IsManualIntegration`</ph> is set to <ph id=\"ph3\">`true`</ph>.",
      "pos": [
        14596,
        14663
      ]
    },
    {
      "content": "This property is necessary in this tutorial because you do not actually own the GitHub repository, and thus cannot actually grant permission to Azure to configure continuous publishing from <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> (i.e.",
      "pos": [
        14664,
        14922
      ]
    },
    {
      "content": "push automatic repository updates to Azure).",
      "pos": [
        14923,
        14967
      ]
    },
    {
      "content": "You can use the default value <ph id=\"ph1\">`false`</ph> for the specified repository only if you have configured the owner’s GitHub credentials in the <bpt id=\"p1\">[</bpt>Azure preview portal<ept id=\"p1\">](https://portal.azure.com)</ept> before.",
      "pos": [
        14968,
        15157
      ]
    },
    {
      "content": "In other words, if you have set up source control to GitHub or BitBucket for any app in the <bpt id=\"p1\">[</bpt>Azure preview portal<ept id=\"p1\">](https://portal.azure.com)</ept> previously, using your user credentials, then Azure will remember the credentials and use them whenever you deploy any app from GitHub or BitBucket in the future.",
      "pos": [
        15158,
        15461
      ]
    },
    {
      "content": "However, if you haven’t done this already, deployment of the JSON template will fail when Azure Resource Manager tries to configure the web app’s source control settings because it cannot log into GitHub or BitBucket with the repository owner’s credentials.",
      "pos": [
        15462,
        15719
      ]
    },
    {
      "content": "Compare the JSON template with deployed resource group",
      "pos": [
        15724,
        15778
      ]
    },
    {
      "content": "Here, you can go through all the web app’s blades in the <bpt id=\"p1\">[</bpt>preview portal<ept id=\"p1\">](https://portal.azure.com)</ept>, but there’s another tool that’s just as useful, if not more.",
      "pos": [
        15783,
        15944
      ]
    },
    {
      "content": "Go to the <bpt id=\"p1\">[</bpt>Azure Resource Explorer<ept id=\"p1\">](https://resources.azure.com)</ept> preview tool, which gives you a JSON representation of all the resource groups in your subscriptions, as they actually exist in the Azure backend.",
      "pos": [
        15945,
        16156
      ]
    },
    {
      "content": "You can also see how the resource group’s JSON hierarchy in Azure corresponds with the hierarchy in the template file that’s used to create it.",
      "pos": [
        16157,
        16300
      ]
    },
    {
      "pos": [
        16302,
        16545
      ],
      "content": "For example, when I go to the <bpt id=\"p1\">[</bpt>Azure Resource Explorer<ept id=\"p1\">](https://resources.azure.com)</ept> tool and expand the nodes in the explorer, I can see the resource group and the root-level resources that are collected under their respective resource types."
    },
    {
      "content": "If you drill down to a web app, you should be able to see web app configuration details similar to the below screenshot:",
      "pos": [
        16631,
        16751
      ]
    },
    {
      "content": "Again, the nested resources should have a hierarchy very similar to those in your JSON template file, and you should see the app settings, connection strings, etc., properly reflected in the JSON pane.",
      "pos": [
        16837,
        17038
      ]
    },
    {
      "content": "The absence of settings here may indicate an issue with your JSON file and can help you troubleshoot your JSON template file.",
      "pos": [
        17039,
        17164
      ]
    },
    {
      "content": "Deploy the resource group template yourself",
      "pos": [
        17169,
        17212
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Deploy to Azure<ept id=\"p1\">**</ept> button is great, but it allows you to deploy the resource group template in azuredeploy.json only if you have already pushed azuredeploy.json to GitHub.",
      "pos": [
        17217,
        17393
      ]
    },
    {
      "content": "The Azure .NET SDK also provides the tools for you to deploy any JSON template file directly from your local machine.",
      "pos": [
        17394,
        17511
      ]
    },
    {
      "content": "To do this, follow the steps below:",
      "pos": [
        17512,
        17547
      ]
    },
    {
      "pos": [
        17553,
        17610
      ],
      "content": "In Visual Studio, click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        17616,
        17694
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Visual C#<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Cloud<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Azure Resource Group<ept id=\"p3\">**</ept>, then click <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        17792,
        17865
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Select Azure Template<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Blank Template<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        17871,
        17942
      ],
      "content": "Drag azuredeploy.json into the <bpt id=\"p1\">**</bpt>Template<ept id=\"p1\">**</ept> folder of your new project."
    },
    {
      "content": "From Solution Explorer, open the copied azuredeploy.json.",
      "pos": [
        18039,
        18096
      ]
    },
    {
      "content": "Just for the sake of the demonstration, let’s add some standard Application Insight resources to our JSON file, by clicking <bpt id=\"p1\">**</bpt>Add Resource<ept id=\"p1\">**</ept>.",
      "pos": [
        18102,
        18243
      ]
    },
    {
      "content": "If you’re just interested in deploying the JSON file, skip to the deploy steps.",
      "pos": [
        18244,
        18323
      ]
    },
    {
      "pos": [
        18423,
        18561
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Application Insights for Web Apps<ept id=\"p1\">**</ept>, then make sure an existing App Service plan and web app is selected, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>."
    },
    {
      "content": "You’ll now be able to see several new resources that, depending on the resource and what it does, have dependencies on either the App Service plan or the web app.",
      "pos": [
        18663,
        18825
      ]
    },
    {
      "content": "These resources are not enabled by their existing definition and you’re going to change that.",
      "pos": [
        18826,
        18919
      ]
    },
    {
      "content": "In the JSON Outline, click <bpt id=\"p1\">**</bpt>appInsights AutoScale<ept id=\"p1\">**</ept> to highlight its JSON code.",
      "pos": [
        19028,
        19108
      ]
    },
    {
      "content": "This is the scaling setting for your App Service plan.",
      "pos": [
        19109,
        19163
      ]
    },
    {
      "pos": [
        19169,
        19274
      ],
      "content": "In the highlighted JSON code, locate the <ph id=\"ph1\">`location`</ph> and <ph id=\"ph2\">`enabled`</ph> properties and set them as shown below."
    },
    {
      "content": "In the JSON Outline, click <bpt id=\"p1\">**</bpt>CPUHigh appInsights<ept id=\"p1\">**</ept> to highlight its JSON code.",
      "pos": [
        19380,
        19458
      ]
    },
    {
      "content": "This is an alert.",
      "pos": [
        19459,
        19476
      ]
    },
    {
      "content": "Locate the <ph id=\"ph1\">`location`</ph> and <ph id=\"ph2\">`isEnabled`</ph> properties and set them as shown below.",
      "pos": [
        19482,
        19559
      ]
    },
    {
      "content": "Do the same for the other three alerts (purple bulbs).",
      "pos": [
        19560,
        19614
      ]
    },
    {
      "content": "You’re now ready to deploy.",
      "pos": [
        19709,
        19736
      ]
    },
    {
      "content": "Right-click the project and select <bpt id=\"p1\">**</bpt>Deploy<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>New Deployment<ept id=\"p2\">**</ept>.",
      "pos": [
        19737,
        19804
      ]
    },
    {
      "content": "Log into your Azure account if you haven’t already done so.",
      "pos": [
        19906,
        19965
      ]
    },
    {
      "pos": [
        19971,
        20111
      ],
      "content": "Select an existing resource group in your subscription or create a new one, select <bpt id=\"p1\">**</bpt>azuredeploy.json<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Edit Parameters<ept id=\"p2\">**</ept>."
    },
    {
      "content": "You’ll now be able to edit all the parameters defined in the template file in a nice table.",
      "pos": [
        20212,
        20303
      ]
    },
    {
      "content": "Parameters that define defaults will already have their default values, and parameters that define a list of allowed values will be shown as dropdowns.",
      "pos": [
        20304,
        20455
      ]
    },
    {
      "content": "Fill in all the empty parameters, and use the <bpt id=\"p1\">[</bpt>GitHub repo address for ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp.git)</ept> in <bpt id=\"p2\">**</bpt>repoUrl<ept id=\"p2\">**</ept>.",
      "pos": [
        20560,
        20712
      ]
    },
    {
      "content": "Then, click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>.",
      "pos": [
        20713,
        20734
      ]
    },
    {
      "pos": [
        20847,
        21130
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Autoscaling is a feature offered in <bpt id=\"p1\">**</bpt>Standard<ept id=\"p1\">**</ept> tier or higher, and plan-level alerts are features offered in <bpt id=\"p2\">**</bpt>Basic<ept id=\"p2\">**</ept> tier or higher, you’ll need to set the <bpt id=\"p3\">**</bpt>sku<ept id=\"p3\">**</ept> parameter to <bpt id=\"p4\">**</bpt>Standard<ept id=\"p4\">**</ept> or <bpt id=\"p5\">**</bpt>Premium<ept id=\"p5\">**</ept> in order to see all your new App Insights resources light up."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Deploy<ept id=\"p1\">**</ept>.",
      "pos": [
        21140,
        21157
      ]
    },
    {
      "content": "If you selected <bpt id=\"p1\">**</bpt>Save passwords<ept id=\"p1\">**</ept>, the password will be saved in the parameter file <bpt id=\"p2\">**</bpt>in plain text<ept id=\"p2\">**</ept>.",
      "pos": [
        21158,
        21261
      ]
    },
    {
      "content": "Otherwise, you’ll be asked to input the database password during the deployment process.",
      "pos": [
        21262,
        21350
      ]
    },
    {
      "content": "That’s it!",
      "pos": [
        21352,
        21362
      ]
    },
    {
      "content": "Now you just need to go to the <bpt id=\"p1\">[</bpt>preview portal<ept id=\"p1\">](https://portal.azure.com)</ept> and the <bpt id=\"p2\">[</bpt>Azure Resource Explorer<ept id=\"p2\">](https://resources.azure.com)</ept> tool to see the new alerts and autoscale settings added to your JSON deployed application.",
      "pos": [
        21363,
        21590
      ]
    },
    {
      "content": "Your steps in this section mainly accomplished the following:",
      "pos": [
        21592,
        21653
      ]
    },
    {
      "content": "Prepared the template file",
      "pos": [
        21659,
        21685
      ]
    },
    {
      "content": "Created a parameter file to go with the template file",
      "pos": [
        21690,
        21743
      ]
    },
    {
      "content": "Deployed the template file with the parameter file",
      "pos": [
        21748,
        21798
      ]
    },
    {
      "content": "The last step is easily done by a PowerShell cmdlet.",
      "pos": [
        21800,
        21852
      ]
    },
    {
      "content": "To see what Visual Studio did when it deployed your application, open Scripts\\Deploy-AzureResourceGroup.ps1.",
      "pos": [
        21853,
        21961
      ]
    },
    {
      "content": "There’s a lot of code there, but I’m just going to highlight all the pertinent code you need to deploy the template file with the parameter file.",
      "pos": [
        21962,
        22107
      ]
    },
    {
      "content": "The last cmdlet, <ph id=\"ph1\">`New-AzureResourceGroup`</ph>, is the one that actually performs the action.",
      "pos": [
        22206,
        22294
      ]
    },
    {
      "content": "All this should demonstrate to you that, with the help of tooling, it is relatively straightforward to deploy your cloud application predictably.",
      "pos": [
        22295,
        22440
      ]
    },
    {
      "content": "Every time you run the cmdlet on the same template with the same parameter file, you’re going to get the same result.",
      "pos": [
        22441,
        22558
      ]
    },
    {
      "content": "Summary",
      "pos": [
        22563,
        22570
      ]
    },
    {
      "content": "In DevOps, repeatability and predictability are keys to any successful deployment of a high-scale application composed of microservices.",
      "pos": [
        22575,
        22711
      ]
    },
    {
      "content": "In this tutorial, you have deployed a two-microservice application to Azure as a single resource group using the Azure Resource Manager template.",
      "pos": [
        22712,
        22857
      ]
    },
    {
      "content": "Hopefully, it has given you the knowledge you need in order to start converting your application in Azure into a template and can provision and deploy it predictably.",
      "pos": [
        22858,
        23024
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        23030,
        23040
      ]
    },
    {
      "pos": [
        23045,
        23198
      ],
      "content": "Find out how to <bpt id=\"p1\">[</bpt>apply agile methodologies and continuously publish your microservices application with ease<ept id=\"p1\">](app-service-agile-software-development.md)</ept>."
    },
    {
      "content": "More resources",
      "pos": [
        23228,
        23242
      ]
    },
    {
      "content": "Azure Resource Manager Template Language",
      "pos": [
        23252,
        23292
      ]
    },
    {
      "content": "Authoring Azure Resource Manager Templates",
      "pos": [
        23341,
        23383
      ]
    },
    {
      "content": "Azure Resource Manager Template Functions",
      "pos": [
        23432,
        23473
      ]
    },
    {
      "content": "Deploy an application with Azure Resource Manager template",
      "pos": [
        23521,
        23579
      ]
    },
    {
      "content": "Using Azure PowerShell with Azure Resource Manager",
      "pos": [
        23624,
        23674
      ]
    },
    {
      "content": "Troubleshooting Resource Group Deployments in Azure",
      "pos": [
        23722,
        23773
      ]
    },
    {
      "content": "test",
      "pos": [
        23817,
        23821
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Provision and deploy microservices predictably in Azure\"\n    description=\"Learn how to deploy an application composed of microservices in Azure App Service as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.\"\n    services=\"app-service\\web\"\n    documentationCenter=\"\"\n    authors=\"cephalin\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-web\"\n    ms.workload=\"web\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"07/08/2015\"\n    ms.author=\"cephalin\"/>\n\n\n# Provision and deploy microservices predictably in Azure #\n\nThis tutorial shows how to provision and deploy an application composed of [microservices](https://en.wikipedia.org/wiki/Microservices) in [Azure App Service](/services/app-service/) as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting. \n\nWhen provisioning and deploying high-scale applications that are composed of highly decoupled microservices, repeatability and predictability are crucial to success. [Azure App Service](/services/app-service/) enables you to create microservices that include web apps, mobile apps, API apps, and logic apps. [Azure Resource Manager](../resource-group-overview.md) enables you to manage all the microservices as a unit, together with resource dependencies such as database and source control settings. Now, you can also deploy such an application using JSON templates and simple PowerShell scripting. \n\n## What you will do ##\n\nIn the tutorial, you will deploy an application that includes:\n\n-   Two web apps (i.e. two microservices)\n-   A backend SQL Database\n-   App settings, connection strings, and source control\n-   Application insights, alerts, autoscaling settings\n\n## Tools you will use ##\n\nIn this tutorial, you will use the following tools. Since it’s not comprehensive discussion on tools, I’m going to stick to the end-to-end scenario and just give you a brief intro to each, and where you can find more information on it. \n\n### Azure Resource Manager templates (JSON) ###\n \nEvery time you create a web app in Azure App Service, for example, Azure Resource Manager uses a JSON template to create the entire resource group with the component resources. A complex template from the [Azure Marketplace](/marketplace) like the [Scalable WordPress](/marketplace/partners/wordpress/scalablewordpress/) app can include the MySQL database, storage accounts, the App Service plan, the web app itself, alert rules, app settings, autoscale settings, and more, and all these templates are available to you through PowerShell. For information on how to download and use these templates, see [Using Azure PowerShell with Azure Resource Manager](../powershell-azure-resource-manager.md).\n\nFor more information on the Azure Resource Manager templates, see [Authoring Azure Resource Manager Templates](../resource-group-authoring-templates.md)\n\n### Azure SDK 2.6 for Visual Studio ###\n\nThe newest SDK contains improvements to the Resource Manager template support in the JSON editor. You can use this to quickly create a resource group template from scratch or open an existing JSON template (such as a downloaded gallery template) for modification, populate the parameters file, and even deploy the resource group directly from an Azure Resource Group solution.\n\nFor more information, see [Azure SDK 2.6 for Visual Studio](/blog/2015/04/29/announcing-the-azure-sdk-2-6-for-net/).\n\n### Azure PowerShell 0.8.0 or later ###\n\nBeginning in version 0.8.0, the Azure PowerShell installation includes the Azure Resource Manager module in addition to the Azure module. This new module enables you to script the deployment of resource groups.\n\nFor more information, see [Using Azure PowerShell with Azure Resource Manager](../powershell-azure-resource-manager.md)\n\n### Azure Resource Explorer ###\n\nThis [preview tool](https://resources.azure.com) enables you to explore the JSON definitions of all the resource groups in your subscription and the individual resources. In the tool, you can edit the JSON definitions of a resource, delete an entire hierarchy of resources, and create new resources.  The information readily available in this tool is very helpful for template authoring because it shows you what properties you need to set for a particular type of resource, the correct values, etc. You can even create your resource group in the [Azure preview portal](https://portal.azure.com), then inspect its JSON definitions in the explorer tool to help you templatize the resource group.\n\n### Deploy to Azure button ###\n\nIf you use GitHub for source control, you can put a [Deploy to Azure button](/blog/2014/11/13/deploy-to-azure-button-for-azure-websites-2/) into your README.MD, which enables a turn-key deployment UI to Azure. While you can do this for any simple web app, you can extend this to enable deploying an entire resource group by putting an azuredeploy.json file in the repository root. This JSON file, which contains the resource group template, will be used by the Deploy to Azure button to create the resource group. For an example, see the [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) sample, which you will use in this tutorial.\n\n## Get the sample resource group template ##\n\nSo now let’s get right to it.\n\n1.  Navigate to the [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) App Service sample.\n\n2.   In readme.md, click **Deploy to Azure**.\n \n3.  You’re taken to the [deploy-to-azure](https://deploy.azure.com) site and asked to input deployment parameters. Notice that most of the fields are populated with the repository name and some random strings for you. You can change all the fields if you want, but the only things you have to enter are the SQL Server administrative login and the password, then click **Next**.\n \n    ![](./media/app-service-deploy-complex-application-predictably/gettemplate-1-deploybuttonui.png)\n\n4.  Next, click **Deploy** to start the deployment process. Once the process runs to completion, click the http://todoapp*XXXX*.azure.websites.net link to browse the deployed application. \n\n    ![](./media/app-service-deploy-complex-application-predictably/gettemplate-2-deployprogress.png)\n\n    The UI would be a little slow when you first browse to it because the apps are just starting up, but convince yourself that it’s a fully-functional application.\n\n5.  Back in the Deploy page, click the **Manage** link to see the new application in the Azure preview portal.\n\n6.  In the **Essentials** dropdown, click the resource group link. Note also that the web app is already connected to the GitHub repository under **External Project**. \n\n    ![](./media/app-service-deploy-complex-application-predictably/gettemplate-3-portalresourcegroup.png)\n \n7.  In the resource group blade, note that there are already two web apps and one SQL Database in the resource group.\n\n    ![](./media/app-service-deploy-complex-application-predictably/gettemplate-4-portalresourcegroupclicked.png)\n \nEverything that you just saw in a few short minutes is a fully deployed two-microservice application, with all the components, dependencies, settings, database, and continuous publishing, set up by an automated orchestration in Azure Resource Manager. All this was done by two things:\n\n-   The Deploy to Azure button\n-   azuredeploy.json in the repo root\n\nYou can deploy this same application tens, hundreds, or thousands of times and have the exact same configuration every time. The repeatability and the predictability of this approach enables you to deploy high-scale applications with ease and confidence.\n\n## Examine (or edit) AZUREDEPLOY.JSON ##\n\nNow let’s look at how the GitHub repository was set up. You will be using the JSON editor in the Azure .NET SDK, so if you haven’t already installed [Azure .NET SDK 2.6](/downloads/), do it now.\n\n1.  Clone the [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) repository using your favorite git tool. In the screenshot below, I’m doing this in the Team Explorer in Visual Studio 2013.\n\n    ![](./media/app-service-deploy-complex-application-predictably/examinejson-1-vsclone.png)\n\n2.  From the repository root, open azuredeploy.json in Visual Studio. If you don’t see the JSON Outline pane, you need to install Azure .NET SDK.\n\n    ![](./media/app-service-deploy-complex-application-predictably/examinejson-2-vsjsoneditor.png)\n\nI’m not going to describe every detail of the JSON format, but the [More Resources](#resources) section has links for learning the resource group template language. Here, I’m just going to show you the interesting features that can help you get started in making your own custom template for app deployment.\n\n### Parameters ###\n\nTake a look at the parameters section to see that most of these parameters are what the **Deploy to Azure** button prompts you to input. The site behind the **Deploy to Azure** button populates the input UI using the parameters defined in azuredeploy.json. These parameters are used throughout the resource definitions, such as resource names, property values, etc.\n\n### Resources ###\n\nIn the resources node, you can see that 4 top-level resources are defined, including a SQL Server instance, an App Service plan, and two web apps. \n\n#### App Service plan ####\n\nLet’s start with a simple root-level resource in the JSON. In the JSON Outline, click the App Service plan named **[hostingPlanName]** to highlight the corresponding JSON code. \n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-3-appserviceplan.png)\n\nNote that the `type` element specifies the string for an App Service plan (it was called a server farm a long, long time ago), and other elements and properties are filled in using the parameters defined in the JSON file, and this resource doesn’t have any nested resources.\n\n>[AZURE.NOTE] Note also that the value of `apiVersion` tells Azure which version of the REST API to use the JSON resource definition with, and it can affect how the resource should be formatted inside the `{}`. \n\n#### SQL Server ####\n\nNext, click on the SQL Server resource named **SQLServer** in the JSON Outline.\n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-4-sqlserver.png)\n \nNote the following about the highlighted JSON code:\n\n-   The use of parameters ensures that the created resources are named and configured in a way that makes them consistent with one another.\n-   The SQLServer resource has two nested resources, each has a different value for `type`.\n-   The nested resources inside `“resources”: […]`, where the database and the firewall rules are defined, have a `dependsOn` element that specifies the resource ID of the root-level SQLServer resource. This tells Azure Resource Manager, “before you create this resource, that other resource must already exist; and if that other resource is defined in the template, then create that one first”.\n\n    >[AZURE.NOTE] For detailed information on how to use the `resourceId()` function, see [Azure Resource Manager Template Functions](../resource-group-template-functions.md).\n\n-   The effect of the `dependsOn` element is that Azure Resource Manager can know which resources can be created in parallel and which resources must be created sequentially. \n\n#### Web app ####\n\nNow, let’s move on to the actual web apps themselves, which are more complicated. Click the [variables(‘apiSiteName’)] web app in the JSON Outline to highlight its JSON code. You’ll notice that things are getting much more interesting. For this purpose, I’ll talk about the features one by one:\n\n##### Root resource #####\n\nThe web app depends on two different resources. This means that Azure Resource Manager will create the web app only after both the App Service plan and the SQL Server instance are created.\n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-5-webapproot.png)\n\n##### App settings #####\n\nThe app settings are also defined as a nested resource.\n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-6-webappsettings.png)\n\nIn the `properties` element for `config/appsettings`, you have two app settings in the format `“<name>” : “<value>”`.\n\n-   `PROJECT` is a [KUDU setting](https://github.com/projectkudu/kudu/wiki/Customizing-deployments) that tells Azure deployment which project to use in a multi-project Visual Studio solution. I will show you later how source control is configured, but since the ToDoApp code is in a multi-project Visual Studio solution, we need this setting.\n-   `clientUrl` is simply an app setting that the application code uses.\n\n##### Connection strings #####\n\nThe connection strings are also defined as a nested resource.\n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-7-webappconnstr.png)\n\nIn the `properties` element for `config/connectionstrings`, each connection string is also defined as a name:value pair, with the specific format of `“<name>” : {“value”: “…”, “type”: “…”}`. For the `type` element, possible values are `MySql`, `SQLServer`, `SQLAzure`, and `Custom`.\n\n>[AZURE.TIP] For a definitive list of the connection string types, run the following command in Azure PowerShell:\n    \\[Enum]::GetNames(\"Microsoft.WindowsAzure.Commands.Utilities.Websites.Services.WebEntities.DatabaseType\")\n    \n##### Source control #####\n\nThe source control settings are also defined as a nested resource. Azure Resource Manager uses this resource to configure continuous publishing (see caveat on `IsManualIntegration` later) and also to kick off the deployment of application code automatically during the processing of the JSON file.\n\n![](./media/app-service-deploy-complex-application-predictably/examinejson-8-webappsourcecontrol.png)\n\n`RepoUrl` and `branch` should be pretty intuitive and should point to the Git repository and the name of the branch to publish from. Again, these are defined by input parameters. \n\nNote in the `dependsOn` element that, in addition to the web app resource itself, `sourcecontrols/web` also depends on `config/appsettings` and `config/connectionstrings`. This is because once `sourcecontrols/web` is configured, the Azure deployment process will automatically attempt to deploy, build, and start the application code. Therefore, inserting this dependency helps you make sure that the application has access to the required app settings and connection strings before the application code is run. [TODO: need to verify if this is true.]\n\n>[AZURE.NOTE] Note also that `IsManualIntegration` is set to `true`. This property is necessary in this tutorial because you do not actually own the GitHub repository, and thus cannot actually grant permission to Azure to configure continuous publishing from [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) (i.e. push automatic repository updates to Azure). You can use the default value `false` for the specified repository only if you have configured the owner’s GitHub credentials in the [Azure preview portal](https://portal.azure.com) before. In other words, if you have set up source control to GitHub or BitBucket for any app in the [Azure preview portal](https://portal.azure.com) previously, using your user credentials, then Azure will remember the credentials and use them whenever you deploy any app from GitHub or BitBucket in the future. However, if you haven’t done this already, deployment of the JSON template will fail when Azure Resource Manager tries to configure the web app’s source control settings because it cannot log into GitHub or BitBucket with the repository owner’s credentials.\n\n## Compare the JSON template with deployed resource group ##\n\nHere, you can go through all the web app’s blades in the [preview portal](https://portal.azure.com), but there’s another tool that’s just as useful, if not more. Go to the [Azure Resource Explorer](https://resources.azure.com) preview tool, which gives you a JSON representation of all the resource groups in your subscriptions, as they actually exist in the Azure backend. You can also see how the resource group’s JSON hierarchy in Azure corresponds with the hierarchy in the template file that’s used to create it.\n\nFor example, when I go to the [Azure Resource Explorer](https://resources.azure.com) tool and expand the nodes in the explorer, I can see the resource group and the root-level resources that are collected under their respective resource types.\n\n![](./media/app-service-deploy-complex-application-predictably/ARM-1-treeview.png)\n\nIf you drill down to a web app, you should be able to see web app configuration details similar to the below screenshot:\n\n![](./media/app-service-deploy-complex-application-predictably/ARM-2-jsonview.png)\n\nAgain, the nested resources should have a hierarchy very similar to those in your JSON template file, and you should see the app settings, connection strings, etc., properly reflected in the JSON pane. The absence of settings here may indicate an issue with your JSON file and can help you troubleshoot your JSON template file.\n\n## Deploy the resource group template yourself ##\n\nThe **Deploy to Azure** button is great, but it allows you to deploy the resource group template in azuredeploy.json only if you have already pushed azuredeploy.json to GitHub. The Azure .NET SDK also provides the tools for you to deploy any JSON template file directly from your local machine. To do this, follow the steps below:\n\n1.  In Visual Studio, click **File** > **New** > **Project**.\n\n2.  Click **Visual C#** > **Cloud** > **Azure Resource Group**, then click **OK**.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-1-vsproject.png)\n\n3.  In **Select Azure Template**, select **Blank Template** and click **OK**.\n\n4.  Drag azuredeploy.json into the **Template** folder of your new project.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-2-copyjson.png)\n\n5.  From Solution Explorer, open the copied azuredeploy.json.\n\n6.  Just for the sake of the demonstration, let’s add some standard Application Insight resources to our JSON file, by clicking **Add Resource**. If you’re just interested in deploying the JSON file, skip to the deploy steps.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-3-newresource.png)\n\n7.  Select **Application Insights for Web Apps**, then make sure an existing App Service plan and web app is selected, and then click **Add**.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-4-newappinsight.png)\n\n    You’ll now be able to see several new resources that, depending on the resource and what it does, have dependencies on either the App Service plan or the web app. These resources are not enabled by their existing definition and you’re going to change that.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-5-appinsightresources.png)\n \n8.  In the JSON Outline, click **appInsights AutoScale** to highlight its JSON code. This is the scaling setting for your App Service plan.\n\n9.  In the highlighted JSON code, locate the `location` and `enabled` properties and set them as shown below.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-6-autoscalesettings.png)\n\n10. In the JSON Outline, click **CPUHigh appInsights** to highlight its JSON code. This is an alert.\n\n11. Locate the `location` and `isEnabled` properties and set them as shown below. Do the same for the other three alerts (purple bulbs).\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-7-alerts.png)\n\n12. You’re now ready to deploy. Right-click the project and select **Deploy** > **New Deployment**.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-8-newdeployment.png)\n\n13. Log into your Azure account if you haven’t already done so.\n\n14. Select an existing resource group in your subscription or create a new one, select **azuredeploy.json**, and then click **Edit Parameters**.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-9-deployconfig.png)\n\n    You’ll now be able to edit all the parameters defined in the template file in a nice table. Parameters that define defaults will already have their default values, and parameters that define a list of allowed values will be shown as dropdowns.\n\n    ![](./media/app-service-deploy-complex-application-predictably/deploy-10-parametereditor.png)\n\n15. Fill in all the empty parameters, and use the [GitHub repo address for ToDoApp](https://github.com/azure-appservice-samples/ToDoApp.git) in **repoUrl**. Then, click **Save**.\n \n    ![](./media/app-service-deploy-complex-application-predictably/deploy-11-parametereditorfilled.png)\n\n    >[AZURE.NOTE] Autoscaling is a feature offered in **Standard** tier or higher, and plan-level alerts are features offered in **Basic** tier or higher, you’ll need to set the **sku** parameter to **Standard** or **Premium** in order to see all your new App Insights resources light up.\n    \n16. Click **Deploy**. If you selected **Save passwords**, the password will be saved in the parameter file **in plain text**. Otherwise, you’ll be asked to input the database password during the deployment process.\n\nThat’s it! Now you just need to go to the [preview portal](https://portal.azure.com) and the [Azure Resource Explorer](https://resources.azure.com) tool to see the new alerts and autoscale settings added to your JSON deployed application.\n\nYour steps in this section mainly accomplished the following:\n\n1.  Prepared the template file\n2.  Created a parameter file to go with the template file\n3.  Deployed the template file with the parameter file\n\nThe last step is easily done by a PowerShell cmdlet. To see what Visual Studio did when it deployed your application, open Scripts\\Deploy-AzureResourceGroup.ps1. There’s a lot of code there, but I’m just going to highlight all the pertinent code you need to deploy the template file with the parameter file.\n\n![](./media/app-service-deploy-complex-application-predictably/deploy-12-powershellsnippet.png)\n\nThe last cmdlet, `New-AzureResourceGroup`, is the one that actually performs the action. All this should demonstrate to you that, with the help of tooling, it is relatively straightforward to deploy your cloud application predictably. Every time you run the cmdlet on the same template with the same parameter file, you’re going to get the same result.\n\n## Summary ##\n\nIn DevOps, repeatability and predictability are keys to any successful deployment of a high-scale application composed of microservices. In this tutorial, you have deployed a two-microservice application to Azure as a single resource group using the Azure Resource Manager template. Hopefully, it has given you the knowledge you need in order to start converting your application in Azure into a template and can provision and deploy it predictably. \n\n## Next Steps ##\n\nFind out how to [apply agile methodologies and continuously publish your microservices application with ease](app-service-agile-software-development.md).\n\n<a name=\"resources\"></a>\n## More resources ##\n\n-   [Azure Resource Manager Template Language](../resource-group-authoring-templates.md)\n-   [Authoring Azure Resource Manager Templates](../resource-group-authoring-templates.md)\n-   [Azure Resource Manager Template Functions](../resource-group-template-functions.md)\n-   [Deploy an application with Azure Resource Manager template](../resource-group-template-deploy.md)\n-   [Using Azure PowerShell with Azure Resource Manager](../powershell-azure-resource-manager.md)\n-   [Troubleshooting Resource Group Deployments in Azure](../resource-group-deploy-debug.md)\n\n\n\n\n \n\ntest\n"
}