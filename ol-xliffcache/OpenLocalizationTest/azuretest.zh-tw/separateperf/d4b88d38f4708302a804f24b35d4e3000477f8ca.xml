{
  "nodes": [
    {
      "content": "SQL Database Security Overview",
      "pos": [
        27,
        57
      ]
    },
    {
      "content": "Learn about Azure SQL Database and SQL Server security, including the differences between the cloud and SQL Server on-premises when it comes to authentication, authorization, connection security, encryption, and compliance.",
      "pos": [
        76,
        299
      ]
    },
    {
      "content": "Securing your SQL Database",
      "pos": [
        610,
        636
      ]
    },
    {
      "content": "Overview",
      "pos": [
        641,
        649
      ]
    },
    {
      "content": "This article walks through the basics of securing the data tier of an application using Azure SQL Database.",
      "pos": [
        651,
        758
      ]
    },
    {
      "content": "In particular, this articles will get you started with resources for limiting access, protecting data, and monitoring activities on a database created in the <bpt id=\"p1\">[</bpt>Get started with SQL Database tutorial<ept id=\"p1\">](sql-database-get-started.md)</ept>.",
      "pos": [
        759,
        987
      ]
    },
    {
      "content": "For a complete overview of security features available on all flavors of SQL, see the <bpt id=\"p1\">[</bpt>Security Center for SQL Server Database Engine and Azure SQL Database<ept id=\"p1\">](https://msdn.microsoft.com/library/bb510589)</ept>.",
      "pos": [
        988,
        1191
      ]
    },
    {
      "content": "Connection Security",
      "pos": [
        1196,
        1215
      ]
    },
    {
      "content": "Connection Security refers to how you restrict and secure connections to your database using firewall rules and connection encryption.",
      "pos": [
        1217,
        1351
      ]
    },
    {
      "content": "Firewall rules are used by both the server and the database to reject connection attempts from IP addresses that have not been explicitly whitelisted.",
      "pos": [
        1353,
        1503
      ]
    },
    {
      "content": "To allow your application or client machine's public IP address to attempt connecting to a new database, you must first create a server-level firewall rule using the Azure Management Portal, REST API, or PowerShell.",
      "pos": [
        1504,
        1719
      ]
    },
    {
      "content": "As a best practice, you should restrict the IP address ranges allowed through your server firewall as much as possible.",
      "pos": [
        1720,
        1839
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Azure SQL Database Firewall<ept id=\"p1\">](https://msdn.microsoft.com/library/ee621782)</ept>.",
      "pos": [
        1840,
        1941
      ]
    },
    {
      "content": "All connections to Azure SQL Database require encryption (SSL/TLS) at all times while data is \"in transit\" to and from the database.",
      "pos": [
        1943,
        2075
      ]
    },
    {
      "content": "In your application's connection string, you must specify parameters to encrypt the connection and <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> to trust the server certificate (this is done for you if you copy your connection string out of the Azure Management Portal), otherwise the connection will not verify the identity of the server and will be susceptible to \"man-in-the-middle\" attacks.",
      "pos": [
        2076,
        2430
      ]
    },
    {
      "content": "For the ADO.NET driver, for instance, these connection string parameters are <bpt id=\"p1\">**</bpt>Encrypt=True<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TrustServerCertificate=False<ept id=\"p2\">**</ept>.",
      "pos": [
        2431,
        2562
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Azure SQL Database Connection Encryption and Certificate Validation<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ff394108#encryption)</ept>.",
      "pos": [
        2563,
        2721
      ]
    },
    {
      "content": "Authentication",
      "pos": [
        2727,
        2741
      ]
    },
    {
      "content": "Authentication refers to how you prove your identity when connecting to the database.",
      "pos": [
        2743,
        2828
      ]
    },
    {
      "content": "SQL Database currently supports SQL Authentication with a username and password.",
      "pos": [
        2829,
        2909
      ]
    },
    {
      "content": "When you created the logical server for your database, you specified a \"server admin\" login with a username and password.",
      "pos": [
        2911,
        3032
      ]
    },
    {
      "content": "Using these credentials, you can authenticate to any database on that server as the database owner, or \"dbo.\"",
      "pos": [
        3033,
        3142
      ]
    },
    {
      "content": "However, as a best practice your application should use a different account to authenticate -- this way you can limit the permissions granted to the application and reduce the risks of malicious activity in case your application code is vulnerable to a SQL injection attack.",
      "pos": [
        3144,
        3418
      ]
    },
    {
      "content": "The recommended approach is to create a <bpt id=\"p1\">[</bpt>contained database user<ept id=\"p1\">](https://msdn.microsoft.com/library/ff929188)</ept>, which allows your app to authenticate directly to a single database with a username and password.",
      "pos": [
        3419,
        3628
      ]
    },
    {
      "content": "You can create a contained database user by executing the following T-SQL while connected to your user database with your server admin login:",
      "pos": [
        3629,
        3770
      ]
    },
    {
      "content": "Your application's connection string should specify this username and password, rather than the server admin login, to connect to the database.",
      "pos": [
        3844,
        3987
      ]
    },
    {
      "pos": [
        3989,
        4150
      ],
      "content": "For more information on authenticating to a SQL Database, see <bpt id=\"p1\">[</bpt>Managing Databases and Logins in Azure SQL Database<ept id=\"p1\">](https://msdn.microsoft.com/library/ee336235)</ept>."
    },
    {
      "content": "Authorization",
      "pos": [
        4156,
        4169
      ]
    },
    {
      "content": "Authorization refers to what you can do within an Azure SQL Database, and this is controlled by your user account's role memberships and permissions.",
      "pos": [
        4170,
        4319
      ]
    },
    {
      "content": "As a best practice, you should grant users the least privileges necessary.",
      "pos": [
        4320,
        4394
      ]
    },
    {
      "content": "Azure SQL Database makes this easy to manage with roles in T-SQL:",
      "pos": [
        4395,
        4460
      ]
    },
    {
      "content": "The server admin account you are connecting with is a member of db_owner, which has authority to do anything within the database.",
      "pos": [
        4656,
        4785
      ]
    },
    {
      "content": "Save this account for deploying schema upgrades and other management operations.",
      "pos": [
        4786,
        4866
      ]
    },
    {
      "content": "Use the \"ApplicationUser\" account with more limited permissions to connect from your application to the database with the least privileges needed by your application.",
      "pos": [
        4867,
        5033
      ]
    },
    {
      "content": "There are ways to further limit what a user can do with Azure SQL Database:",
      "pos": [
        5035,
        5110
      ]
    },
    {
      "pos": [
        5114,
        5318
      ],
      "content": "<bpt id=\"p1\">[</bpt>Database Roles<ept id=\"p1\">](https://msdn.microsoft.com/library/ms189121)</ept> other than db_datareader and db_datawriter can be used to create more powerful application user accounts or less powerful management accounts."
    },
    {
      "pos": [
        5321,
        5517
      ],
      "content": "Granular <bpt id=\"p1\">[</bpt>Permissions<ept id=\"p1\">](https://msdn.microsoft.com/library/ms191291)</ept> let you control which operations you can do on individual columns, tables, views, procedures, and other objects in the database."
    },
    {
      "pos": [
        5520,
        5711
      ],
      "content": "<bpt id=\"p1\">[</bpt>Impersonation<ept id=\"p1\">](https://msdn.microsoft.com/library/vstudio/bb669087)</ept> and <bpt id=\"p2\">[</bpt>module-signing<ept id=\"p2\">](https://msdn.microsoft.com/library/bb669102)</ept> can be used to securely elevate permissions temporarily."
    },
    {
      "pos": [
        5714,
        5822
      ],
      "content": "<bpt id=\"p1\">[</bpt>Row-Level Security<ept id=\"p1\">](https://msdn.microsoft.com/library/dn765131)</ept> lets you filter which rows a user can see."
    },
    {
      "pos": [
        5825,
        5938
      ],
      "content": "<bpt id=\"p1\">[</bpt>Data Masking<ept id=\"p1\">](sql-database-dynamic-data-masking-get-started.md)</ept> can be used to limit exposure of sensitive data."
    },
    {
      "pos": [
        5941,
        6073
      ],
      "content": "<bpt id=\"p1\">[</bpt>Stored procedures<ept id=\"p1\">](https://msdn.microsoft.com/library/ms190782)</ept> can be used to limit the actions that can be taken on the database."
    },
    {
      "content": "Managing databases and logical servers from the Azure Management Portal or using the Azure Resource Manager API is controlled by your portal user account's role assignments.",
      "pos": [
        6075,
        6248
      ]
    },
    {
      "content": "For more information on this topic, see <bpt id=\"p1\">[</bpt>Role-based access control in Azure Preview portal<ept id=\"p1\">](../role-based-access-control-configure.md)</ept>.",
      "pos": [
        6249,
        6384
      ]
    },
    {
      "content": "Encryption",
      "pos": [
        6390,
        6400
      ]
    },
    {
      "content": "Azure SQL Database can help protect your data by encrypting your data when it is \"at rest,\" or stored in database files and backups, using <bpt id=\"p1\">[</bpt>Transparent Data Encryption<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=526242)</ept>.",
      "pos": [
        6402,
        6618
      ]
    },
    {
      "content": "To encrypt your database, connect as a database owner and execute:",
      "pos": [
        6619,
        6685
      ]
    },
    {
      "content": "For other ways to encrypt your data secrets, consider:",
      "pos": [
        6871,
        6925
      ]
    },
    {
      "pos": [
        6929,
        7084
      ],
      "content": "<bpt id=\"p1\">[</bpt>Cell-level encryption<ept id=\"p1\">](https://msdn.microsoft.com/library/ms179331.aspx)</ept> to encrypt specific columns or even cells of data with different encryption keys."
    },
    {
      "pos": [
        7087,
        7347
      ],
      "content": "If you need a Hardware Security Module or central management of your encryption key hierarchy, consider using <bpt id=\"p1\">[</bpt>Azure Key Vault with SQL Server in an Azure VM<ept id=\"p1\">](http://blogs.technet.com/b/kv/archive/2015/01/12/using-the-key-vault-for-sql-server-encryption.aspx)</ept>."
    },
    {
      "content": "Auditing",
      "pos": [
        7353,
        7361
      ]
    },
    {
      "content": "Auditing and tracking database events can help you maintain regulatory compliance and identify suspicious activity.",
      "pos": [
        7363,
        7478
      ]
    },
    {
      "content": "SQL Database Auditing allows you to record events in your database to an audit log in your Azure Storage account.",
      "pos": [
        7479,
        7592
      ]
    },
    {
      "content": "SQL Database Auditing also integrates with Microsoft Power BI to facilitate drill-down reports and analyses.",
      "pos": [
        7593,
        7701
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Get started with SQL Database Auditing<ept id=\"p1\">](sql-database-auditing-get-started.md)</ept>.",
      "pos": [
        7702,
        7807
      ]
    },
    {
      "content": "Compliance",
      "pos": [
        7812,
        7822
      ]
    },
    {
      "content": "In addition to the above features and functionality that can help your application meet various security compliance requirements, Azure SQL Database also participates in regular audits and has been certified against a number of compliance standards.",
      "pos": [
        7824,
        8073
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt>Microsoft Azure Trust Center<ept id=\"p1\">](http://azure.microsoft.com/support/trust-center/)</ept>, where you can find the most current list of <bpt id=\"p2\">[</bpt>SQL Database compliance certifications<ept id=\"p2\">](http://azure.microsoft.com/support/trust-center/services/)</ept>.",
      "pos": [
        8074,
        8330
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"SQL Database Security Overview\" \n   description=\"Learn about Azure SQL Database and SQL Server security, including the differences between the cloud and SQL Server on-premises when it comes to authentication, authorization, connection security, encryption, and compliance.\" \n   services=\"sql-database\" \n   documentationCenter=\"\" \n   authors=\"tmullaney\" \n   manager=\"jeffreyg\" \n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-database\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\" \n   ms.date=\"07/14/2015\"\n   ms.author=\"thmullan;jackr\"/>\n\n\n# Securing your SQL Database\n\n## Overview\n\nThis article walks through the basics of securing the data tier of an application using Azure SQL Database. In particular, this articles will get you started with resources for limiting access, protecting data, and monitoring activities on a database created in the [Get started with SQL Database tutorial](sql-database-get-started.md). For a complete overview of security features available on all flavors of SQL, see the [Security Center for SQL Server Database Engine and Azure SQL Database](https://msdn.microsoft.com/library/bb510589).\n\n## Connection Security\n\nConnection Security refers to how you restrict and secure connections to your database using firewall rules and connection encryption.\n\nFirewall rules are used by both the server and the database to reject connection attempts from IP addresses that have not been explicitly whitelisted. To allow your application or client machine's public IP address to attempt connecting to a new database, you must first create a server-level firewall rule using the Azure Management Portal, REST API, or PowerShell. As a best practice, you should restrict the IP address ranges allowed through your server firewall as much as possible. For more information, see [Azure SQL Database Firewall](https://msdn.microsoft.com/library/ee621782).\n\nAll connections to Azure SQL Database require encryption (SSL/TLS) at all times while data is \"in transit\" to and from the database. In your application's connection string, you must specify parameters to encrypt the connection and *not* to trust the server certificate (this is done for you if you copy your connection string out of the Azure Management Portal), otherwise the connection will not verify the identity of the server and will be susceptible to \"man-in-the-middle\" attacks. For the ADO.NET driver, for instance, these connection string parameters are **Encrypt=True** and **TrustServerCertificate=False**. For more information, see [Azure SQL Database Connection Encryption and Certificate Validation](https://msdn.microsoft.com/library/azure/ff394108#encryption).\n\n\n## Authentication\n\nAuthentication refers to how you prove your identity when connecting to the database. SQL Database currently supports SQL Authentication with a username and password.\n\nWhen you created the logical server for your database, you specified a \"server admin\" login with a username and password. Using these credentials, you can authenticate to any database on that server as the database owner, or \"dbo.\"\n\nHowever, as a best practice your application should use a different account to authenticate -- this way you can limit the permissions granted to the application and reduce the risks of malicious activity in case your application code is vulnerable to a SQL injection attack. The recommended approach is to create a [contained database user](https://msdn.microsoft.com/library/ff929188), which allows your app to authenticate directly to a single database with a username and password. You can create a contained database user by executing the following T-SQL while connected to your user database with your server admin login:\n\n```\nCREATE USER ApplicationUser WITH PASSWORD = 'strong_password';\n```\n\nYour application's connection string should specify this username and password, rather than the server admin login, to connect to the database.\n\nFor more information on authenticating to a SQL Database, see [Managing Databases and Logins in Azure SQL Database](https://msdn.microsoft.com/library/ee336235).\n\n\n## Authorization\nAuthorization refers to what you can do within an Azure SQL Database, and this is controlled by your user account's role memberships and permissions. As a best practice, you should grant users the least privileges necessary. Azure SQL Database makes this easy to manage with roles in T-SQL:\n\n```\nALTER ROLE db_datareader ADD MEMBER ApplicationUser; -- allows ApplicationUser to read data\nALTER ROLE db_datawriter ADD MEMBER ApplicationUser; -- allows ApplicationUser to write data\n```\n\nThe server admin account you are connecting with is a member of db_owner, which has authority to do anything within the database. Save this account for deploying schema upgrades and other management operations. Use the \"ApplicationUser\" account with more limited permissions to connect from your application to the database with the least privileges needed by your application.\n\nThere are ways to further limit what a user can do with Azure SQL Database:\n\n* [Database Roles](https://msdn.microsoft.com/library/ms189121) other than db_datareader and db_datawriter can be used to create more powerful application user accounts or less powerful management accounts.\n* Granular [Permissions](https://msdn.microsoft.com/library/ms191291) let you control which operations you can do on individual columns, tables, views, procedures, and other objects in the database.\n* [Impersonation](https://msdn.microsoft.com/library/vstudio/bb669087) and [module-signing](https://msdn.microsoft.com/library/bb669102) can be used to securely elevate permissions temporarily.\n* [Row-Level Security](https://msdn.microsoft.com/library/dn765131) lets you filter which rows a user can see.\n* [Data Masking](sql-database-dynamic-data-masking-get-started.md) can be used to limit exposure of sensitive data.\n* [Stored procedures](https://msdn.microsoft.com/library/ms190782) can be used to limit the actions that can be taken on the database.\n\nManaging databases and logical servers from the Azure Management Portal or using the Azure Resource Manager API is controlled by your portal user account's role assignments. For more information on this topic, see [Role-based access control in Azure Preview portal](../role-based-access-control-configure.md).\n\n\n## Encryption\n\nAzure SQL Database can help protect your data by encrypting your data when it is \"at rest,\" or stored in database files and backups, using [Transparent Data Encryption](http://go.microsoft.com/fwlink/?LinkId=526242). To encrypt your database, connect as a database owner and execute:\n\n```\nCREATE DATABASE ENCRYPTION KEY \n   WITH ALGORITHM = AES_256 \n   ENCRYPTION BY SERVER CERTIFICATE ##MS_TdeCertificate##;\n   \nALTER DATABASE [AdventureWorks] SET ENCRYPTION ON;\n```\n\nFor other ways to encrypt your data secrets, consider:\n\n* [Cell-level encryption](https://msdn.microsoft.com/library/ms179331.aspx) to encrypt specific columns or even cells of data with different encryption keys.\n* If you need a Hardware Security Module or central management of your encryption key hierarchy, consider using [Azure Key Vault with SQL Server in an Azure VM](http://blogs.technet.com/b/kv/archive/2015/01/12/using-the-key-vault-for-sql-server-encryption.aspx).\n\n\n## Auditing\n\nAuditing and tracking database events can help you maintain regulatory compliance and identify suspicious activity. SQL Database Auditing allows you to record events in your database to an audit log in your Azure Storage account. SQL Database Auditing also integrates with Microsoft Power BI to facilitate drill-down reports and analyses. For more information, see [Get started with SQL Database Auditing](sql-database-auditing-get-started.md).\n\n## Compliance\n\nIn addition to the above features and functionality that can help your application meet various security compliance requirements, Azure SQL Database also participates in regular audits and has been certified against a number of compliance standards. For more information, see the [Microsoft Azure Trust Center](http://azure.microsoft.com/support/trust-center/), where you can find the most current list of [SQL Database compliance certifications](http://azure.microsoft.com/support/trust-center/services/).\n \n"
}