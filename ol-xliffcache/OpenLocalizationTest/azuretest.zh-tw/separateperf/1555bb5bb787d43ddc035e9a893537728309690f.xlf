<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Build a Service that uses Table storage instead of a SQL Database | Microsoft Azure</source>
          <target state="new">Build a Service that uses Table storage instead of a SQL Database | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure Table storage with your .NET backend mobile service.</source>
          <target state="new">Learn how to use Azure Table storage with your .NET backend mobile service.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database</source>
          <target state="new">Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows you how to use a non-relational data store for your .NET backend mobile service.</source>
          <target state="new">This topic shows you how to use a non-relational data store for your .NET backend mobile service.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this tutorial, you will modify the Azure Mobile Services quickstart project to use Azure Table storage instead of the default Azure SQL Database data store.</source>
          <target state="new">In this tutorial, you will modify the Azure Mobile Services quickstart project to use Azure Table storage instead of the default Azure SQL Database data store.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</source>
          <target state="new">The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You will also need an Azure storage account.</source>
          <target state="new">You will also need an Azure storage account.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Configure Azure Table storage in your .NET backend mobile service</source>
          <target state="new">Configure Azure Table storage in your .NET backend mobile service</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>First, you need to configure your mobile service and .NET backend code project to connect to Azure storage.</source>
          <target state="new">First, you need to configure your mobile service and .NET backend code project to connect to Azure storage.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> in Visual Studio, right-click the .NET backend project, and then select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> in Visual Studio, right-click the .NET backend project, and then select <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the left pane, select the <bpt id="p1">**</bpt>Online<ept id="p1">**</ept> category, select <bpt id="p2">**</bpt>Stabile Only<ept id="p2">**</ept>, search for <bpt id="p3">**</bpt>MobileServices<ept id="p3">**</ept>, click <bpt id="p4">**</bpt>Install<ept id="p4">**</ept> on the <bpt id="p5">**</bpt>Microsoft Azure Mobile Services .NET Backend Azure Storage Extension<ept id="p5">**</ept> package, then accept the license agreements.</source>
          <target state="new">In the left pane, select the <bpt id="p1">**</bpt>Online<ept id="p1">**</ept> category, select <bpt id="p2">**</bpt>Stabile Only<ept id="p2">**</ept>, search for <bpt id="p3">**</bpt>MobileServices<ept id="p3">**</ept>, click <bpt id="p4">**</bpt>Install<ept id="p4">**</ept> on the <bpt id="p5">**</bpt>Microsoft Azure Mobile Services .NET Backend Azure Storage Extension<ept id="p5">**</ept> package, then accept the license agreements.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This adds support for Azure storage services to the .NET backend mobile service project.</source>
          <target state="new">This adds support for Azure storage services to the .NET backend mobile service project.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you haven't yet created your storage account, see <bpt id="p1">[</bpt>How To Create a Storage Account<ept id="p1">](../storage-create-storage-account.md)</ept>.</source>
          <target state="new">If you haven't yet created your storage account, see <bpt id="p1">[</bpt>How To Create a Storage Account<ept id="p1">](../storage-create-storage-account.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the Management Portal, click <bpt id="p1">**</bpt>Storage<ept id="p1">**</ept>, click the storage account, then click <bpt id="p2">**</bpt>Manage Keys<ept id="p2">**</ept>.</source>
          <target state="new">In the Management Portal, click <bpt id="p1">**</bpt>Storage<ept id="p1">**</ept>, click the storage account, then click <bpt id="p2">**</bpt>Manage Keys<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make a note of the <bpt id="p1">**</bpt>Storage Account Name<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Access Key<ept id="p2">**</ept>.</source>
          <target state="new">Make a note of the <bpt id="p1">**</bpt>Storage Account Name<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Access Key<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In your mobile service, click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab, scroll down to <bpt id="p2">**</bpt>Connection strings<ept id="p2">**</ept> and enter a new connection string with a <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> of <ph id="ph1">`StorageConnectionString`</ph> and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> that is your storage account connection string in the following format.</source>
          <target state="new">In your mobile service, click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab, scroll down to <bpt id="p2">**</bpt>Connection strings<ept id="p2">**</ept> and enter a new connection string with a <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> of <ph id="ph1">`StorageConnectionString`</ph> and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> that is your storage account connection string in the following format.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the above string, replace the values of <ph id="ph1">`&lt;ACCOUNT_NAME&gt;`</ph> and <ph id="ph2">`&lt;ACCESS_KEY&gt;`</ph> with the values from the portal, then click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">In the above string, replace the values of <ph id="ph1">`&lt;ACCOUNT_NAME&gt;`</ph> and <ph id="ph2">`&lt;ACCESS_KEY&gt;`</ph> with the values from the portal, then click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The storage account connection string is stored encrypted in app settings.</source>
          <target state="new">The storage account connection string is stored encrypted in app settings.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can access this string in any table controller at runtime.</source>
          <target state="new">You can access this string in any table controller at runtime.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</source>
          <target state="new">In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`&lt;STORAGE_CONNECTION_STRING&gt;`</ph> placeholder with the connection string from step 6.</source>
          <target state="new">Replace the <ph id="ph1">`&lt;STORAGE_CONNECTION_STRING&gt;`</ph> placeholder with the connection string from step 6.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</source>
          <target state="new">The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</source>
          <target state="new">When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Modify data types and table controllers</source>
          <target state="new"><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Modify data types and table controllers</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because the TodoList quickstart project is designed to work with a SQL Database using Entity Framework, you need to make some updates in the project to work with Table storage.</source>
          <target state="new">Because the TodoList quickstart project is designed to work with a SQL Database using Entity Framework, you need to make some updates in the project to work with Table storage.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> data type to derive from <bpt id="p2">**</bpt>StorageData<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>, as follows.</source>
          <target state="new">Modify the <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> data type to derive from <bpt id="p2">**</bpt>StorageData<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>, as follows.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>The <bpt id="p1">**</bpt>StorageData<ept id="p1">**</ept> type has an Id property that requires a compound key that is a string in the format <bpt id="p2">*</bpt>partitionId<ept id="p2">*</ept>,<bpt id="p3">*</bpt>rowValue<ept id="p3">*</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>The <bpt id="p1">**</bpt>StorageData<ept id="p1">**</ept> type has an Id property that requires a compound key that is a string in the format <bpt id="p2">*</bpt>partitionId<ept id="p2">*</ept>,<bpt id="p3">*</bpt>rowValue<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept>, add the following using statement.</source>
          <target state="new">In <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept>, add the following using statement.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Replace the <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>TodoItemController<ept id="p2">**</ept> with the following.</source>
          <target state="new">Replace the <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>TodoItemController<ept id="p2">**</ept> with the following.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This create a new storage domain manager for the requested controller using the storage account connection string.</source>
          <target state="new">This create a new storage domain manager for the requested controller using the storage account connection string.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Replace the existing <bpt id="p1">**</bpt>GetAllTodoItems<ept id="p1">**</ept> method with the following code.</source>
          <target state="new">Replace the existing <bpt id="p1">**</bpt>GetAllTodoItems<ept id="p1">**</ept> method with the following code.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Unlike a SQL Database, this version doesn't return IQueryable</source>
          <target state="new">Unlike a SQL Database, this version doesn't return IQueryable</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>, so the result can be bound to but not futher composed in a query.</source>
          <target state="new">, so the result can be bound to but not futher composed in a query.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Update the client app</source>
          <target state="new">Update the client app</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You need to make one change on the client side to make the quickstart app work with the .NET backend using Table storage.</source>
          <target state="new">You need to make one change on the client side to make the quickstart app work with the .NET backend using Table storage.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is due to the compound key expected by the table storage provider.</source>
          <target state="new">This is due to the compound key expected by the table storage provider.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open the client code file that contains the data access code and find the method where the insert operation performed.</source>
          <target state="new">Open the client code file that contains the data access code and find the method where the insert operation performed.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Update the TodoItem instance being added to explicitly set the Id field in the string format <ph id="ph1">`&lt;partitionID&gt;,&lt;rowValue&gt;`</ph>.</source>
          <target state="new">Update the TodoItem instance being added to explicitly set the Id field in the string format <ph id="ph1">`&lt;partitionID&gt;,&lt;rowValue&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is an example of how this ID might be set in a C# app, where the partition part is fixed and the row part is GUID-based.</source>
          <target state="new">This is an example of how this ID might be set in a C# app, where the partition part is fixed and the row part is GUID-based.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You are now ready to test the app.</source>
          <target state="new">You are now ready to test the app.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Test the application</source>
          <target state="new"><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Test the application</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Optional) Republish your mobile service .NET backend project.</source>
          <target state="new">(Optional) Republish your mobile service .NET backend project.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also test your mobile service locally before you publish the .NET backend project to Azure.</source>
          <target state="new">You can also test your mobile service locally before you publish the .NET backend project to Azure.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Whether you test locally or in Azure, the mobile service will be using the Azure Table storage.</source>
          <target state="new">Whether you test locally or in Azure, the mobile service will be using the Azure Table storage.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Run the quickstart client app connected to your mobile service.</source>
          <target state="new">Run the quickstart client app connected to your mobile service.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that you do not see items that you previously added using the quickstart tutorial.</source>
          <target state="new">Note that you do not see items that you previously added using the quickstart tutorial.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This is because the Table store is currently empty.</source>
          <target state="new">This is because the Table store is currently empty.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add new items to generate database changes.</source>
          <target state="new">Add new items to generate database changes.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</source>
          <target state="new">The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</source>
          <target state="new">Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use MongoDB as a data store with your Mobile Services.NET backend<ept id="p1">](mobile-services-dotnet-backend-use-non-relational-data-store.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Use MongoDB as a data store with your Mobile Services.NET backend<ept id="p1">](mobile-services-dotnet-backend-use-non-relational-data-store.md)</ept></target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service.</source>
          <target state="new">Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of SQL Database as the data store.</source>
          <target state="new">In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of SQL Database as the data store.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="p1">](mobile-services-dotnet-backend-hybrid-connections-get-started.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="p1">](mobile-services-dotnet-backend-hybrid-connections-get-started.md)</ept></target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Hybrid Connections lets your mobile service securely connect to your on-premises assets.</source>
          <target state="new">Hybrid Connections lets your mobile service securely connect to your on-premises assets.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this way, you can make your on-premises data accessible to your mobile clients by using Azure.</source>
          <target state="new">In this way, you can make your on-premises data accessible to your mobile clients by using Azure.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</source>
          <target state="new">Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Upload images to Azure Storage using Mobile Services<ept id="p1">](mobile-services-dotnet-backend-windows-store-dotnet-upload-data-blob-storage.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Upload images to Azure Storage using Mobile Services<ept id="p1">](mobile-services-dotnet-backend-windows-store-dotnet-upload-data-blob-storage.md)</ept></target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</source>
          <target state="new">Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1555bb5bb787d43ddc035e9a893537728309690f</xliffext:olfilehash>
  </header>
</xliff>