<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Some Azure Service Fabric Actors anti-patterns</source>
          <target state="new">Some Azure Service Fabric Actors anti-patterns</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Some potential pitfalls for customers who are learning Azure Service Fabric Actors</source>
          <target state="new">Some potential pitfalls for customers who are learning Azure Service Fabric Actors</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reliable Actors design pattern: Some anti-patterns</source>
          <target state="new">Reliable Actors design pattern: Some anti-patterns</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We identified the following potential pitfalls for customers who are learning Service Fabric Reliable Actors:</source>
          <target state="new">We identified the following potential pitfalls for customers who are learning Service Fabric Reliable Actors:</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Treat Reliable Actors as a transactional system.</source>
          <target state="new">Treat Reliable Actors as a transactional system.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service Fabric Reliable Actors is not a two phase commit-based system offering ACID.</source>
          <target state="new">Service Fabric Reliable Actors is not a two phase commit-based system offering ACID.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If we do not implement the optional persistence, and the machine the actor is running on dies, its current state will go with it.</source>
          <target state="new">If we do not implement the optional persistence, and the machine the actor is running on dies, its current state will go with it.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The actor will be coming up on another node very fast, but unless we have implemented the backing persistence, the state will be gone.</source>
          <target state="new">The actor will be coming up on another node very fast, but unless we have implemented the backing persistence, the state will be gone.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, between leveraging retries, duplicate filtering, and/or idempotent design, you can achieve a high level of reliability and consistency.</source>
          <target state="new">However, between leveraging retries, duplicate filtering, and/or idempotent design, you can achieve a high level of reliability and consistency.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Block.</source>
          <target state="new">Block.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Everything we do in Reliable Actors should be asynchronous.</source>
          <target state="new">Everything we do in Reliable Actors should be asynchronous.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is usually easy because async APIs are prolific now in the Microsoft platform.</source>
          <target state="new">This is usually easy because async APIs are prolific now in the Microsoft platform.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>But if, for some reason, we must interact with a system that only provides a blocking API, we are going to need to put that in a wrapper that explicitly uses the .NET Thread Pool.</source>
          <target state="new">But if, for some reason, we must interact with a system that only provides a blocking API, we are going to need to put that in a wrapper that explicitly uses the .NET Thread Pool.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Over architect.</source>
          <target state="new">Over architect.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let the environment work.</source>
          <target state="new">Let the environment work.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It can be hard for developers who are accustomed to worrying about concurrent collections and locks, or using tools to compile objects from XML, to simply just code a class that does simple things like assign a value to a variable or schedule work.</source>
          <target state="new">It can be hard for developers who are accustomed to worrying about concurrent collections and locks, or using tools to compile objects from XML, to simply just code a class that does simple things like assign a value to a variable or schedule work.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Scheduled tasks are built in.</source>
          <target state="new">Scheduled tasks are built in.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Locks are not needed.</source>
          <target state="new">Locks are not needed.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>State is not a mortal enemy.</source>
          <target state="new">State is not a mortal enemy.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This takes some getting used to for many folks who’ve done a lot of server side work in large scale environments.</source>
          <target state="new">This takes some getting used to for many folks who’ve done a lot of server side work in large scale environments.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Make a single actor the bottleneck.</source>
          <target state="new">Make a single actor the bottleneck.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is often too easy to be trapped with this one, having millions of actors funnelling into a single instance of another actor.</source>
          <target state="new">It is often too easy to be trapped with this one, having millions of actors funnelling into a single instance of another actor.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the aggregation approach that we demonstrated in the <bpt id="p1">[</bpt>distributed computation design pattern<ept id="p1">](service-fabric-reliable-actors-pattern-distributed-computation.md)</ept>.</source>
          <target state="new">Use the aggregation approach that we demonstrated in the <bpt id="p1">[</bpt>distributed computation design pattern<ept id="p1">](service-fabric-reliable-actors-pattern-distributed-computation.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Map entity models blindly.</source>
          <target state="new">Map entity models blindly.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This is for developers who are coming from a relational universe where problems are modelled using entities and their relationships.</source>
          <target state="new">This is for developers who are coming from a relational universe where problems are modelled using entities and their relationships.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>While this approach is still useful for understanding the subject domain, it should be coupled with service-oriented thinking and blended with the behavior.</source>
          <target state="new">While this approach is still useful for understanding the subject domain, it should be coupled with service-oriented thinking and blended with the behavior.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef990288a38d4e51e0ab1045f7e19652bf38c55c</xliffext:olfilehash>
  </header>
</xliff>