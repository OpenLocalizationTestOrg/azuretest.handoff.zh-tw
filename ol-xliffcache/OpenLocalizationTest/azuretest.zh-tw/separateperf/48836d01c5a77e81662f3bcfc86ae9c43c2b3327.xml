{
  "nodes": [
    {
      "content": "How to use SQL Database (.NET) | Microsoft Azure",
      "pos": [
        28,
        76
      ]
    },
    {
      "content": "Get started with SQL Database.",
      "pos": [
        96,
        126
      ]
    },
    {
      "content": "Learn how to create a SQL Database instance and connect to it using ADO.NET, ODBC, and EntityClient Provider.",
      "pos": [
        127,
        236
      ]
    },
    {
      "content": "How to use Azure SQL Database in .NET applications",
      "pos": [
        564,
        614
      ]
    },
    {
      "content": "This guide shows you how to create a logical server and database instance on Azure SQL Database and connect to",
      "pos": [
        616,
        726
      ]
    },
    {
      "content": "the database using the following .NET Framework data provider technologies:",
      "pos": [
        727,
        802
      ]
    },
    {
      "content": "ADO.NET, ODBC, and EntityClient Provider.",
      "pos": [
        803,
        844
      ]
    },
    {
      "content": "What is SQL Database",
      "pos": [
        850,
        870
      ]
    },
    {
      "content": "SQL Database provides a relational database management system for Azure and is based on SQL Server technology.",
      "pos": [
        872,
        982
      ]
    },
    {
      "content": "With a SQL Database instance, you can easily provision and deploy relational database solutions to the cloud, and take advantage of a distributed data center that provides enterprise-class availability, scalability, and security with the benefits of built-in data protection and self-healing.",
      "pos": [
        983,
        1275
      ]
    },
    {
      "content": "Sign in to Azure",
      "pos": [
        1282,
        1298
      ]
    },
    {
      "content": "SQL Database provides relational data storage, access, and management services on Azure.",
      "pos": [
        1300,
        1388
      ]
    },
    {
      "content": "To use it, you'll need an Azure subscription.",
      "pos": [
        1389,
        1434
      ]
    },
    {
      "content": "Open a web browser, and browse to <bpt id=\"p1\">[</bpt>http://azure.microsoft.com/<ept id=\"p1\">](http://azure.microsoft.com)</ept>.",
      "pos": [
        1439,
        1531
      ]
    },
    {
      "content": "To get started with a free account, click free trial in the upper right corner and follow the steps.",
      "pos": [
        1532,
        1632
      ]
    },
    {
      "content": "Your account is now created.",
      "pos": [
        1637,
        1665
      ]
    },
    {
      "content": "You are ready to get started.",
      "pos": [
        1666,
        1695
      ]
    },
    {
      "content": "Create and configure SQL Database",
      "pos": [
        1701,
        1734
      ]
    },
    {
      "content": "Next, create and configure a database and server.",
      "pos": [
        1736,
        1785
      ]
    },
    {
      "content": "In the Azure Management Portal, revised workflows let you create the database first, and follow up with server provisioning.",
      "pos": [
        1786,
        1910
      ]
    },
    {
      "content": "Create a database instance and logical server:",
      "pos": [
        1915,
        1961
      ]
    },
    {
      "pos": [
        1968,
        2041
      ],
      "content": "Sign in to the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](http://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        2046,
        2086
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>NEW<ept id=\"p1\">**</ept> at the bottom of the page."
    },
    {
      "pos": [
        2091,
        2115
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Data Services<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2120,
        2143
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>SQL Database<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2148,
        2172
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Custom Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "In Name, enter a database name.",
      "pos": [
        2178,
        2209
      ]
    },
    {
      "content": "Choose an edition, maximum size, and collation.",
      "pos": [
        2214,
        2261
      ]
    },
    {
      "content": "For the purposes of this guide, you can use the default values.",
      "pos": [
        2262,
        2325
      ]
    },
    {
      "content": "SQL Database provides three database editions, Basic, Standard and Premium.",
      "pos": [
        2332,
        2407
      ]
    },
    {
      "content": "The MAXSIZE is specified when the database is first created and can",
      "pos": [
        2413,
        2480
      ]
    },
    {
      "content": "later be changed using ALTER DATABASE.",
      "pos": [
        2481,
        2519
      ]
    },
    {
      "content": "MAXSIZE provides the ability to",
      "pos": [
        2520,
        2551
      ]
    },
    {
      "content": "limit the size of the database.",
      "pos": [
        2552,
        2583
      ]
    },
    {
      "content": "For each SQL database created on Azure, there are actually three",
      "pos": [
        2589,
        2653
      ]
    },
    {
      "content": "replicas of that database.",
      "pos": [
        2654,
        2680
      ]
    },
    {
      "content": "This is done to ensure high availability.",
      "pos": [
        2681,
        2722
      ]
    },
    {
      "content": "Failover is transparent and part of the service.",
      "pos": [
        2723,
        2771
      ]
    },
    {
      "pos": [
        2776,
        2822
      ],
      "content": "In Server, select <bpt id=\"p1\">**</bpt>New SQL Database Server<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click the arrow to go on to the next page.",
      "pos": [
        2828,
        2870
      ]
    },
    {
      "content": "In Server Settings, enter a SQL Server authentication login name.",
      "pos": [
        2876,
        2941
      ]
    },
    {
      "content": "SQL Database uses SQL Authentication over an encrypted connection.",
      "pos": [
        2947,
        3013
      ]
    },
    {
      "content": "A new SQL Server authentication login assigned to the sysadmin fixed server role will be created using the name you provide.",
      "pos": [
        3014,
        3138
      ]
    },
    {
      "content": "The login cannot be an email address, Windows user account, or a Windows Live ID.",
      "pos": [
        3145,
        3226
      ]
    },
    {
      "content": "Neither Claims nor Windows authentication is supported on SQL Database.",
      "pos": [
        3227,
        3298
      ]
    },
    {
      "content": "Provide a strong password that is over eight characters, using a combination of upper and lower case values, and a number or symbol.",
      "pos": [
        3304,
        3436
      ]
    },
    {
      "content": "Choose a region.",
      "pos": [
        3442,
        3458
      ]
    },
    {
      "content": "Region determines the geographical location of the server.",
      "pos": [
        3459,
        3517
      ]
    },
    {
      "content": "Regions cannot be easily switched, so choose one that makes sense for this server.",
      "pos": [
        3518,
        3600
      ]
    },
    {
      "content": "Choose a location that is closest to you.",
      "pos": [
        3601,
        3642
      ]
    },
    {
      "content": "Keeping your Azure application and database in the same region saves you on egress bandwidth cost and data latency.",
      "pos": [
        3643,
        3758
      ]
    },
    {
      "pos": [
        3764,
        3979
      ],
      "content": "Be sure to keep the <bpt id=\"p1\">**</bpt>Allow Azure Services to access the server<ept id=\"p1\">**</ept> option selected so that you can connect to this database using the Management Portal for SQL Database, storage services, and other services on Azure."
    },
    {
      "content": "Click the checkmark at the bottom of the page when you are finished.",
      "pos": [
        3986,
        4054
      ]
    },
    {
      "content": "Notice that you did not specify a server name.",
      "pos": [
        4056,
        4102
      ]
    },
    {
      "content": "SQL Database auto-generates the server name to ensure there are no duplicate DNS entries.",
      "pos": [
        4103,
        4192
      ]
    },
    {
      "content": "The server name is a ten-character alphanumeric string.",
      "pos": [
        4193,
        4248
      ]
    },
    {
      "content": "You cannot change the name of your SQL Database server.",
      "pos": [
        4249,
        4304
      ]
    },
    {
      "content": "After the database is created, click on it to open its dashboard.",
      "pos": [
        4306,
        4371
      ]
    },
    {
      "content": "The dashboard provides connection strings that you can copy and use in application code.",
      "pos": [
        4372,
        4460
      ]
    },
    {
      "content": "It also shows the management URL that you'll need to specify if you are connecting to the database from Management Studio or other administrative tool.",
      "pos": [
        4461,
        4612
      ]
    },
    {
      "content": "The SQL Database dashboard",
      "pos": [
        4617,
        4643
      ]
    },
    {
      "content": "In the next step, you will configure the firewall so that connections from applications running on your network are allowed access.",
      "pos": [
        4706,
        4837
      ]
    },
    {
      "content": "Configure the firewall for the logical server",
      "pos": [
        4841,
        4886
      ]
    },
    {
      "pos": [
        4893,
        5006
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>SQL Databases<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Servers<ept id=\"p2\">**</ept> at the top of the page, and then click on the server you just created."
    },
    {
      "content": "Setting up a firewall",
      "pos": [
        5014,
        5035
      ]
    },
    {
      "pos": [
        5099,
        5119
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Copy the current client IP address.",
      "pos": [
        5125,
        5160
      ]
    },
    {
      "content": "If you are connecting from a network, this is the IP address that your  router or proxy server is listening on.",
      "pos": [
        5161,
        5272
      ]
    },
    {
      "content": "SQL Database detects the IP address used by the current connection so that you can create a firewall rule to accept connection requests from this device.",
      "pos": [
        5273,
        5426
      ]
    },
    {
      "content": "Paste the IP address into both the START IP ADDRESS and END IP ADDRESS to establish the range addresses that are allowed to access the server.",
      "pos": [
        5432,
        5574
      ]
    },
    {
      "content": "Later, if you encounter connection errors indicating that the range is too narrow, you can edit this rule to widen the range.",
      "pos": [
        5575,
        5700
      ]
    },
    {
      "content": "If client computers use dynamically assigned IP addresses, you must specify a range that is broad enough to include IP addresses assigned to computers in your network.",
      "pos": [
        5706,
        5873
      ]
    },
    {
      "content": "Start with a narrow range, and then expand it only if you need to.",
      "pos": [
        5874,
        5940
      ]
    },
    {
      "content": "Enter a name for the firewall rule, such as the name of your computer or company.",
      "pos": [
        5945,
        6026
      ]
    },
    {
      "content": "Click the checkmark next to the rule to save it.",
      "pos": [
        6031,
        6079
      ]
    },
    {
      "content": "IP range for firewall settings",
      "pos": [
        6087,
        6117
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> at the bottom of the page to complete the step.",
      "pos": [
        6180,
        6242
      ]
    },
    {
      "content": "If you do not see <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>, refresh the browser page.",
      "pos": [
        6243,
        6296
      ]
    },
    {
      "content": "You now have a database instance, logical server, a firewall rule that allows inbound connections from your IP address, and an administrator login.",
      "pos": [
        6298,
        6445
      ]
    },
    {
      "content": "You are now ready to connect to the database programmatically.",
      "pos": [
        6446,
        6508
      ]
    },
    {
      "content": "Connect to SQL Database",
      "pos": [
        6514,
        6537
      ]
    },
    {
      "content": "This section shows how to connect to SQL Database instance using different",
      "pos": [
        6539,
        6613
      ]
    },
    {
      "content": ".NET Framework data providers.",
      "pos": [
        6614,
        6644
      ]
    },
    {
      "content": "For central recommendations about connecting to an SQL Database server and database, see:",
      "pos": [
        6645,
        6734
      ]
    },
    {
      "pos": [
        6739,
        6846
      ],
      "content": "<bpt id=\"p1\">[</bpt>Connections to SQL Database: Central recommendations<ept id=\"p1\">](../sql-database-connect-central-recommendations.md)</ept>."
    },
    {
      "content": "If you choose to use Visual Studio and your configuration doesn't",
      "pos": [
        6849,
        6914
      ]
    },
    {
      "content": "include an Azure web application as a front-end, there are no",
      "pos": [
        6915,
        6976
      ]
    },
    {
      "content": "additional tools or SDKs needed to be installed on the development",
      "pos": [
        6977,
        7043
      ]
    },
    {
      "content": "computer.",
      "pos": [
        7044,
        7053
      ]
    },
    {
      "content": "You can just start developing your application.",
      "pos": [
        7054,
        7101
      ]
    },
    {
      "content": "You can use all of the same designer tools in Visual Studio to work with",
      "pos": [
        7103,
        7175
      ]
    },
    {
      "content": "SQL Database as you can to work with SQL Server.",
      "pos": [
        7176,
        7224
      ]
    },
    {
      "content": "The Server Explorer allows",
      "pos": [
        7225,
        7251
      ]
    },
    {
      "content": "you to view (but not edit) database objects.",
      "pos": [
        7252,
        7296
      ]
    },
    {
      "content": "The Visual Studio Entity",
      "pos": [
        7297,
        7321
      ]
    },
    {
      "content": "Data Model Designer is fully functional and you can use it to create",
      "pos": [
        7322,
        7390
      ]
    },
    {
      "content": "models against SQL Database for working with Entity Framework.",
      "pos": [
        7391,
        7453
      ]
    },
    {
      "content": "Using .NET Framework Data Provider for SQL Server",
      "pos": [
        7458,
        7507
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>System.Data.SqlClient<ept id=\"p1\">**</ept> namespace is the.NET Framework Data",
      "pos": [
        7509,
        7574
      ]
    },
    {
      "content": "Provider for SQL Server.",
      "pos": [
        7575,
        7599
      ]
    },
    {
      "content": "The standard connection string looks like this:",
      "pos": [
        7601,
        7648
      ]
    },
    {
      "content": "You can use the <bpt id=\"p1\">**</bpt>SQLConnectionStringBuilder<ept id=\"p1\">**</ept> class to build a",
      "pos": [
        7782,
        7845
      ]
    },
    {
      "content": "connection string as shown in the following code sample:",
      "pos": [
        7846,
        7902
      ]
    },
    {
      "content": "If the elements of a connection string are known ahead of time, they can",
      "pos": [
        8241,
        8313
      ]
    },
    {
      "content": "be stored in a configuration file and retrieved at run time to construct",
      "pos": [
        8314,
        8386
      ]
    },
    {
      "content": "a connection string.",
      "pos": [
        8387,
        8407
      ]
    },
    {
      "content": "Here is a sample connection string in configuration",
      "pos": [
        8408,
        8459
      ]
    },
    {
      "content": "file:",
      "pos": [
        8460,
        8465
      ]
    },
    {
      "content": "To retrieve the connection string in a configuration file, you use the",
      "pos": [
        8732,
        8802
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ConfigurationManager<ept id=\"p1\">**</ept> class:",
      "pos": [
        8803,
        8834
      ]
    },
    {
      "content": "Using .NET Framework Data Provider for ODBC",
      "pos": [
        9211,
        9254
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>System.Data.Odbc<ept id=\"p1\">**</ept> namespace is the.NET Framework Data Provider",
      "pos": [
        9256,
        9325
      ]
    },
    {
      "content": "for ODBC.",
      "pos": [
        9326,
        9335
      ]
    },
    {
      "content": "The following is a sample ODBC connection string:",
      "pos": [
        9336,
        9385
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>OdbcConnection<ept id=\"p1\">**</ept> class represents an open connection to a data",
      "pos": [
        9523,
        9591
      ]
    },
    {
      "content": "source.",
      "pos": [
        9592,
        9599
      ]
    },
    {
      "content": "Here is a code sample on how to open a connection:",
      "pos": [
        9600,
        9650
      ]
    },
    {
      "content": "If you want to build the connection string on the runtime, you can use",
      "pos": [
        9992,
        10062
      ]
    },
    {
      "content": "the <bpt id=\"p1\">**</bpt>OdbcConnectionStringBuilder<ept id=\"p1\">**</ept> class.",
      "pos": [
        10063,
        10105
      ]
    },
    {
      "content": "Using EntityClient Provider",
      "pos": [
        10110,
        10137
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>System.Data.EntityClient<ept id=\"p1\">**</ept> namespace is the .NET Framework Data",
      "pos": [
        10139,
        10208
      ]
    },
    {
      "content": "Provider for the Entity Framework.",
      "pos": [
        10209,
        10243
      ]
    },
    {
      "content": "The Entity Framework enables developers to create data access",
      "pos": [
        10245,
        10306
      ]
    },
    {
      "content": "applications by programming against a conceptual application model",
      "pos": [
        10307,
        10373
      ]
    },
    {
      "content": "instead of programming directly against a relational storage schema.",
      "pos": [
        10374,
        10442
      ]
    },
    {
      "content": "The",
      "pos": [
        10443,
        10446
      ]
    },
    {
      "content": "Entity Framework builds on top of storage-specific ADO.NET data",
      "pos": [
        10447,
        10510
      ]
    },
    {
      "content": "providers by providing an <bpt id=\"p1\">**</bpt>EntityConnection<ept id=\"p1\">**</ept> to an underlying data",
      "pos": [
        10511,
        10579
      ]
    },
    {
      "content": "provider and relational database.",
      "pos": [
        10580,
        10613
      ]
    },
    {
      "content": "To construct an <bpt id=\"p1\">**</bpt>EntityConnection<ept id=\"p1\">**</ept> object, you have to reference a set",
      "pos": [
        10615,
        10687
      ]
    },
    {
      "content": "of metadata that contains the necessary models and mapping, and also a",
      "pos": [
        10688,
        10758
      ]
    },
    {
      "content": "storage-specific data provider name and connection string.",
      "pos": [
        10759,
        10817
      ]
    },
    {
      "content": "After the",
      "pos": [
        10818,
        10827
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>EntityConnection<ept id=\"p1\">**</ept> is in place, entities can be accessed through the",
      "pos": [
        10828,
        10898
      ]
    },
    {
      "content": "classes generated from the conceptual model.",
      "pos": [
        10899,
        10943
      ]
    },
    {
      "content": "Here is a connection string sample:",
      "pos": [
        10945,
        10980
      ]
    },
    {
      "pos": [
        11261,
        11385
      ],
      "content": "For more information, see <bpt id=\"p1\">[</bpt>EntityClient Provider for the Entity Framework<ept id=\"p1\">](http://msdn.microsoft.com/library/bb738561.aspx)</ept>."
    },
    {
      "content": "Next Steps",
      "pos": [
        11390,
        11400
      ]
    },
    {
      "pos": [
        11402,
        11579
      ],
      "content": "Now that you have learned the basics of connecting to SQL Database, see <bpt id=\"p1\">[</bpt>Development: How-to Topics (SQL Database)<ept id=\"p1\">](http://msdn.microsoft.com/library/windowsazure/ee621787.aspx)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use SQL Database (.NET) | Microsoft Azure\" \n    description=\"Get started with SQL Database. Learn how to create a SQL Database instance and connect to it using ADO.NET, ODBC, and EntityClient Provider.\" \n    services=\"sql-database\" \n    documentationCenter=\".net\" \n    authors=\"jeffgoll\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"data-management\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"07/07/2015\" \n    ms.author=\"jeffreyg\"/>\n\n\n# How to use Azure SQL Database in .NET applications\n\nThis guide shows you how to create a logical server and database instance on Azure SQL Database and connect to\nthe database using the following .NET Framework data provider technologies:\nADO.NET, ODBC, and EntityClient Provider.\n\n\n## What is SQL Database\n\nSQL Database provides a relational database management system for Azure and is based on SQL Server technology. With a SQL Database instance, you can easily provision and deploy relational database solutions to the cloud, and take advantage of a distributed data center that provides enterprise-class availability, scalability, and security with the benefits of built-in data protection and self-healing.\n\n\n\n## Sign in to Azure\n\nSQL Database provides relational data storage, access, and management services on Azure. To use it, you'll need an Azure subscription.\n\n1. Open a web browser, and browse to [http://azure.microsoft.com/](http://azure.microsoft.com). To get started with a free account, click free trial in the upper right corner and follow the steps.\n\n2. Your account is now created. You are ready to get started.\n\n\n## Create and configure SQL Database\n\nNext, create and configure a database and server. In the Azure Management Portal, revised workflows let you create the database first, and follow up with server provisioning. \n\n**Create a database instance and logical server:**\n\n1. Sign in to the [Azure Management Portal](http://manage.windowsazure.com).\n\n2. Click **NEW** at the bottom of the page.\n\n3. Click **Data Services**.\n\n4. Click **SQL Database**.\n\n5. Click **Custom Create**. \n\n6. In Name, enter a database name.\n\n7. Choose an edition, maximum size, and collation. For the purposes of this guide, you can use the default values. \n\n    SQL Database provides three database editions, Basic, Standard and Premium.\n\n    The MAXSIZE is specified when the database is first created and can\nlater be changed using ALTER DATABASE. MAXSIZE provides the ability to\nlimit the size of the database.\n\n    For each SQL database created on Azure, there are actually three\nreplicas of that database. This is done to ensure high availability.\nFailover is transparent and part of the service.\n\n8. In Server, select **New SQL Database Server**. \n\n9. Click the arrow to go on to the next page.\n\n10. In Server Settings, enter a SQL Server authentication login name.\n\n    SQL Database uses SQL Authentication over an encrypted connection. A new SQL Server authentication login assigned to the sysadmin fixed server role will be created using the name you provide. \n\n    The login cannot be an email address, Windows user account, or a Windows Live ID. Neither Claims nor Windows authentication is supported on SQL Database.\n\n11. Provide a strong password that is over eight characters, using a combination of upper and lower case values, and a number or symbol.\n\n12. Choose a region. Region determines the geographical location of the server. Regions cannot be easily switched, so choose one that makes sense for this server. Choose a location that is closest to you. Keeping your Azure application and database in the same region saves you on egress bandwidth cost and data latency.\n\n13. Be sure to keep the **Allow Azure Services to access the server** option selected so that you can connect to this database using the Management Portal for SQL Database, storage services, and other services on Azure. \n\n14. Click the checkmark at the bottom of the page when you are finished.\n\nNotice that you did not specify a server name. SQL Database auto-generates the server name to ensure there are no duplicate DNS entries. The server name is a ten-character alphanumeric string. You cannot change the name of your SQL Database server.\n\nAfter the database is created, click on it to open its dashboard. The dashboard provides connection strings that you can copy and use in application code. It also shows the management URL that you'll need to specify if you are connecting to the database from Management Studio or other administrative tool.\n\n\n![The SQL Database dashboard](./media/sql-database-dotnet-how-to-use/SQLDbDashboard.PNG)\n\n\nIn the next step, you will configure the firewall so that connections from applications running on your network are allowed access.\n\n**Configure the firewall for the logical server**\n\n1. Click **SQL Databases**, click **Servers** at the top of the page, and then click on the server you just created.\n\n    ![Setting up a firewall](./media/sql-database-dotnet-how-to-use/SQLDBFirewall.PNG)\n\n2. Click **Configure**. \n\n3. Copy the current client IP address. If you are connecting from a network, this is the IP address that your  router or proxy server is listening on. SQL Database detects the IP address used by the current connection so that you can create a firewall rule to accept connection requests from this device. \n\n4. Paste the IP address into both the START IP ADDRESS and END IP ADDRESS to establish the range addresses that are allowed to access the server. Later, if you encounter connection errors indicating that the range is too narrow, you can edit this rule to widen the range.\n\n    If client computers use dynamically assigned IP addresses, you must specify a range that is broad enough to include IP addresses assigned to computers in your network. Start with a narrow range, and then expand it only if you need to.\n\n5. Enter a name for the firewall rule, such as the name of your computer or company.\n\n6. Click the checkmark next to the rule to save it.\n\n    ![IP range for firewall settings](./media/sql-database-dotnet-how-to-use/SQLDBIPRange.PNG)\n\n7. Click **Save** at the bottom of the page to complete the step. If you do not see **Save**, refresh the browser page.\n\nYou now have a database instance, logical server, a firewall rule that allows inbound connections from your IP address, and an administrator login. You are now ready to connect to the database programmatically.\n\n\n## Connect to SQL Database\n\nThis section shows how to connect to SQL Database instance using different\n.NET Framework data providers. For central recommendations about connecting to an SQL Database server and database, see:\n\n\n- [Connections to SQL Database: Central recommendations](../sql-database-connect-central-recommendations.md).\n\n\nIf you choose to use Visual Studio and your configuration doesn't\ninclude an Azure web application as a front-end, there are no\nadditional tools or SDKs needed to be installed on the development\ncomputer. You can just start developing your application.\n\nYou can use all of the same designer tools in Visual Studio to work with\nSQL Database as you can to work with SQL Server. The Server Explorer allows\nyou to view (but not edit) database objects. The Visual Studio Entity\nData Model Designer is fully functional and you can use it to create\nmodels against SQL Database for working with Entity Framework.\n\n## Using .NET Framework Data Provider for SQL Server\n\nThe **System.Data.SqlClient** namespace is the.NET Framework Data\nProvider for SQL Server.\n\nThe standard connection string looks like this:\n\n    Server=tcp:.database.windows.net;\n    Database=;\n    User ID=@;\n    Password=;\n    Trusted_Connection=False;\n    Encrypt=True;\n\nYou can use the **SQLConnectionStringBuilder** class to build a\nconnection string as shown in the following code sample:\n\n    SqlConnectionStringBuilder csBuilder;\n    csBuilder = new SqlConnectionStringBuilder();\n    csBuilder.DataSource = xxxxxxxxxx.database.windows.net;\n    csBuilder.InitialCatalog = testDB;\n    csBuilder.Encrypt = true;\n    csBuilder.TrustServerCertificate = false;\n    csBuilder.UserID = MyAdmin;\n    csBuilder.Password = pass@word1;\n\nIf the elements of a connection string are known ahead of time, they can\nbe stored in a configuration file and retrieved at run time to construct\na connection string. Here is a sample connection string in configuration\nfile:\n\n    <connectionStrings>\n      <add name=\"ConnectionString\" \n           connectionString =\"Server=tcp:xxxxxxxxxx.database.windows.net;Database=testDB;User ID=MyAdmin@xxxxxxxxxx;Password=pass@word1;Trusted_Connection=False;Encrypt=True;\" />\n    </connectionStrings>\n\nTo retrieve the connection string in a configuration file, you use the\n**ConfigurationManager** class:\n\n    SqlConnectionStringBuilder csBuilder;\n    csBuilder = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings[\"ConnectionString\"].ConnectionString);\n    After you have built your connection string, you can use the SQLConnection class to connect the SQL Database server:\n    SqlConnection conn = new SqlConnection(csBuilder.ToString());\n    conn.Open();\n\n## Using .NET Framework Data Provider for ODBC\n\nThe **System.Data.Odbc** namespace is the.NET Framework Data Provider\nfor ODBC. The following is a sample ODBC connection string:\n\n    Driver={SQL Server Native Client 10.0};\n    Server=tcp:.database.windows.net;\n    Database=;\n    Uid=@;\n    Pwd=;\n    Encrypt=yes;\n\nThe **OdbcConnection** class represents an open connection to a data\nsource. Here is a code sample on how to open a connection:\n\n    string cs = \"Driver={SQL Server Native Client 10.0};\" +\n                \"Server=tcp:xxxxxxxxxx.database.windows.net;\" +\n                \"Database=testDB;\"+\n                \"Uid=MyAdmin@xxxxxxxxxx;\" +\n                \"Pwd=pass@word1;\"+\n                \"Encrypt=yes;\";\n\n    OdbcConnection conn = new OdbcConnection(cs);\n    conn.Open();\n\nIf you want to build the connection string on the runtime, you can use\nthe **OdbcConnectionStringBuilder** class.\n\n## Using EntityClient Provider\n\nThe **System.Data.EntityClient** namespace is the .NET Framework Data\nProvider for the Entity Framework.\n\nThe Entity Framework enables developers to create data access\napplications by programming against a conceptual application model\ninstead of programming directly against a relational storage schema. The\nEntity Framework builds on top of storage-specific ADO.NET data\nproviders by providing an **EntityConnection** to an underlying data\nprovider and relational database.\n\nTo construct an **EntityConnection** object, you have to reference a set\nof metadata that contains the necessary models and mapping, and also a\nstorage-specific data provider name and connection string. After the\n**EntityConnection** is in place, entities can be accessed through the\nclasses generated from the conceptual model.\n\nHere is a connection string sample:\n\n    metadata=res://*/SchoolModel.csdl|res://*/SchoolModel.ssdl|res://*/SchoolModel.msl;provider=System.Data.SqlClient;provider connection string=\"Data Source=xxxxxxxxxx.database.windows.net;Initial Catalog=School;Persist Security Info=True;User ID=MyAdmin;Password=***********\"\n\nFor more information, see [EntityClient Provider for the Entity Framework](http://msdn.microsoft.com/library/bb738561.aspx).\n\n## Next Steps\n\nNow that you have learned the basics of connecting to SQL Database, see [Development: How-to Topics (SQL Database)](http://msdn.microsoft.com/library/windowsazure/ee621787.aspx)\n \n"
}