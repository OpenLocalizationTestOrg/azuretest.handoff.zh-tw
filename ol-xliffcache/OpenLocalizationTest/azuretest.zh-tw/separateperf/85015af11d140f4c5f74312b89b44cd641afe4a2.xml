{
  "nodes": [
    {
      "content": "Troubleshooting Docker Client Errors on Windows Using Visual Studio | Microsoft Azure",
      "pos": [
        26,
        111
      ]
    },
    {
      "content": "Troubleshoot problems you encounter when using Visual Studio to create and deploy web apps to Docker on Windows by using Visual Studio.",
      "pos": [
        129,
        264
      ]
    },
    {
      "content": "Troubleshooting Docker Errors",
      "pos": [
        563,
        592
      ]
    },
    {
      "content": "After you configure all of the settings for your app's Docker container, you should make sure the settings and paths are correct.",
      "pos": [
        594,
        723
      ]
    },
    {
      "content": "Visual Studio provides a Validate button in the Publish dialog to help you do this.",
      "pos": [
        724,
        807
      ]
    },
    {
      "content": "This topic helps you diagnose and either fix or work around the most common problems you'll encounter when hosting a Visual Studio app in Docker.",
      "pos": [
        809,
        954
      ]
    },
    {
      "content": "More issues will be added to this topic as they're encountered.",
      "pos": [
        955,
        1018
      ]
    },
    {
      "content": "You get a failed message when you attempt to validate the connection to your Docker host in the Publish Web dialog box",
      "pos": [
        1023,
        1141
      ]
    },
    {
      "content": "Here are some possible solutions to this issue.",
      "pos": [
        1143,
        1190
      ]
    },
    {
      "pos": [
        1194,
        1399
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept> dialog, make sure the <bpt id=\"p3\">**</bpt>Server Url<ept id=\"p3\">**</ept> is correct and that the trailing <ph id=\"ph1\">`:&lt;port_number&gt;`</ph> on the <bpt id=\"p4\">**</bpt>Server URL<ept id=\"p4\">**</ept> is the port that the Docker daemon is listening to."
    },
    {
      "pos": [
        1403,
        1568
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept> dialog, expand the <bpt id=\"p3\">**</bpt>Docker Advanced Options<ept id=\"p3\">**</ept> section and ensure that the correct <bpt id=\"p4\">**</bpt>Auth<ept id=\"p4\">**</ept> Options are being specified."
    },
    {
      "content": "If the Docker daemon on the server is configured to use TLS security then the Windows Docker command line interface (docker.exe) will look for the client key (key.pem) and certificate (cert.pem) by default under the <ph id=\"ph1\">`&lt;%userprofile%&gt;\\.docker`</ph> folder.",
      "pos": [
        1573,
        1822
      ]
    },
    {
      "content": "If these items aren't present they will need to be generated by using OpenSSL.",
      "pos": [
        1823,
        1901
      ]
    },
    {
      "content": "For more information on configuring Docker for TLS, see <bpt id=\"p1\">[</bpt>Protecting the Docker daemon Socket with HTTPS<ept id=\"p1\">](https://docs.docker.com/articles/https/)</ept>.",
      "pos": [
        1902,
        2048
      ]
    },
    {
      "pos": [
        2054,
        2287
      ],
      "content": "One way to ensure that Docker is properly authenticating from the Windows client to the Linux server is by copying the contents of the Preview text box into a new command window and changing <ph id=\"ph1\">`&lt;command&gt;`</ph> to \"info\" as in the following:"
    },
    {
      "pos": [
        2494,
        2647
      ],
      "content": "As an alternative to copying the client cert and key files to the .docker folder, you can change the <bpt id=\"p1\">**</bpt>Auth<ept id=\"p1\">**</ept> Options by adding the following parameters:"
    },
    {
      "content": "Ensure the Docker daemon on the Docker host machine is version 1.6 or later.",
      "pos": [
        2733,
        2809
      ]
    },
    {
      "content": "Timeout error when using your own certificates without client certificate in the Docker folder",
      "pos": [
        2814,
        2908
      ]
    },
    {
      "content": "If you choose to use your own certificates when creating the Docker host in Visual Studio (that is, you clear the <bpt id=\"p1\">**</bpt>Auto-generate Docker certificates<ept id=\"p1\">**</ept> check box in the <bpt id=\"p2\">**</bpt>Create virtual machine on Microsoft Azure<ept id=\"p2\">**</ept> dialog box), you'll need to copy the client certificate and key files (cert.pem and key.pem) to the Docker folder (<ph id=\"ph1\">`&lt;%userprofile%&gt;\\.docker`</ph>).",
      "pos": [
        2910,
        3267
      ]
    },
    {
      "content": "Otherwise, when you publish your project, you'll get a timeout error in one hour and the publish operation will fail.",
      "pos": [
        3268,
        3385
      ]
    },
    {
      "content": "PowerShell 3.0 required to publish to Docker containers",
      "pos": [
        3390,
        3445
      ]
    },
    {
      "content": "If your operating system is Windows 7 or Windows Server 2008, you'll need to install PowerShell 3.0 before you can publish to Docker containers.",
      "pos": [
        3447,
        3591
      ]
    },
    {
      "content": "PowerShell 3.0 is included in <bpt id=\"p1\">[</bpt>Windows Management Framework 3.0<ept id=\"p1\">](https://www.microsoft.com/en-us/download/details.aspx?id=34595)</ept>.",
      "pos": [
        3592,
        3721
      ]
    },
    {
      "content": "You'll need to reboot your system after installing it.",
      "pos": [
        3722,
        3776
      ]
    },
    {
      "content": "As an alternative workaround, you can upgrade to Windows 8.1 or Windows 10, which already has PowerShell 3.0.",
      "pos": [
        3778,
        3887
      ]
    },
    {
      "content": "PowerShell window does not automatically close",
      "pos": [
        3892,
        3938
      ]
    },
    {
      "content": "After creating a VM, sometimes the PowerShell window does not close automatically.",
      "pos": [
        3940,
        4022
      ]
    },
    {
      "content": "Closing this window also closes Visual Studio.",
      "pos": [
        4023,
        4069
      ]
    },
    {
      "content": "Because the window does not affect any Visual Studio or Docker tools features, please leave it open until you finish your work.",
      "pos": [
        4070,
        4197
      ]
    },
    {
      "content": "FAQ",
      "pos": [
        4202,
        4205
      ]
    },
    {
      "content": "Q: How do I create a new Docker-enabled Linux machine in Azure using the Visual Studio tools?",
      "pos": [
        4207,
        4300
      ]
    },
    {
      "pos": [
        4302,
        4425
      ],
      "content": "A: See <bpt id=\"p1\">[</bpt>Hosting Web Apps in Docker<ept id=\"p1\">](vs-azure-tools-docker-hosting-web-apps-in-docker.md)</ept> for information on how to do this."
    },
    {
      "content": "Q:  What Visual Studio project templates are supported for publishing to a Linux Docker container?",
      "pos": [
        4427,
        4525
      ]
    },
    {
      "content": "A:  Visual Studio currently supports the C# Console Application (Package) and C# ASP.NET 5 Preview web templates, including:",
      "pos": [
        4527,
        4651
      ]
    },
    {
      "content": "Empty",
      "pos": [
        4655,
        4660
      ]
    },
    {
      "content": "Web API",
      "pos": [
        4664,
        4671
      ]
    },
    {
      "content": "Web Application",
      "pos": [
        4675,
        4690
      ]
    },
    {
      "content": "Q:  How do I publish my ASP.NET 5 web or console project to Docker using MSBUILD from the command line?",
      "pos": [
        4692,
        4795
      ]
    },
    {
      "content": "A:  Use the following MSBuild command:",
      "pos": [
        4797,
        4835
      ]
    },
    {
      "content": "Q:  How do I publish my ASP.NET 5 web or console project to Docker using PowerShell from the command line?",
      "pos": [
        4923,
        5029
      ]
    },
    {
      "content": "A:  Use the following PowerShell command:",
      "pos": [
        5031,
        5072
      ]
    },
    {
      "pos": [
        5208,
        5314
      ],
      "content": "Q:  I have my own Linux server with Docker installed, how do I specify this in the <bpt id=\"p1\">**</bpt>Web Publish<ept id=\"p1\">**</ept> dialog?"
    },
    {
      "pos": [
        5316,
        5465
      ],
      "content": "A:  See the section <bpt id=\"p1\">**</bpt>Provide a Custom Docker Host<ept id=\"p1\">**</ept> in the topic, <bpt id=\"p2\">[</bpt>Hosting Web Apps in Docker<ept id=\"p2\">](vs-azure-tools-docker-hosting-web-apps-in-docker.md)</ept>."
    },
    {
      "content": "Q:  I'm using my own Linux server with Docker installed.",
      "pos": [
        5467,
        5523
      ]
    },
    {
      "content": "How do I generate keys and certificates in order to configure authentication using TLS?",
      "pos": [
        5524,
        5611
      ]
    },
    {
      "content": "A:  One way is to use OpenSSL on the server to generate the required certificates and keys for the CA, server, and client.",
      "pos": [
        5613,
        5735
      ]
    },
    {
      "content": "You can then use third party software to establish an SSH/SFTP connection, and then copy the certificates to the local Windows development machine.",
      "pos": [
        5736,
        5883
      ]
    },
    {
      "content": "By default, the Docker (CLI) will attempt to use certificates located in the <ph id=\"ph1\">`&lt;userprofile&gt;\\.docker`</ph> folder.",
      "pos": [
        5884,
        5992
      ]
    },
    {
      "content": "Another option is to download OpenSSL for Windows and generate the required certificates and keys, and then upload the CA, server certificates, and keys to the Linux machine.",
      "pos": [
        5994,
        6168
      ]
    },
    {
      "content": "For more information on establishing a secure connection to Docker, see <bpt id=\"p1\">[</bpt>Protecting the Docker daemon Socket with HTTPS<ept id=\"p1\">](https://docs.docker.com/articles/https/)</ept>.",
      "pos": [
        6169,
        6331
      ]
    },
    {
      "content": "test",
      "pos": [
        6333,
        6337
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Troubleshooting Docker Client Errors on Windows Using Visual Studio | Microsoft Azure\"\n   description=\"Troubleshoot problems you encounter when using Visual Studio to create and deploy web apps to Docker on Windows by using Visual Studio.\"\n   services=\"visual-studio-online\"\n   documentationCenter=\"na\"\n   authors=\"kempb\"\n   manager=\"douge\"\n   editor=\"tglee\" />\n<tags\n   ms.service=\"multiple\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"multiple\"\n   ms.date=\"08/20/2015\"\n   ms.author=\"kempb\" />\n\n# Troubleshooting Docker Errors\n\nAfter you configure all of the settings for your app's Docker container, you should make sure the settings and paths are correct. Visual Studio provides a Validate button in the Publish dialog to help you do this.\n\nThis topic helps you diagnose and either fix or work around the most common problems you'll encounter when hosting a Visual Studio app in Docker. More issues will be added to this topic as they're encountered.\n\n## You get a failed message when you attempt to validate the connection to your Docker host in the Publish Web dialog box\n\nHere are some possible solutions to this issue.\n\n- In the **Connection** tab of the **Publish** dialog, make sure the **Server Url** is correct and that the trailing `:<port_number>` on the **Server URL** is the port that the Docker daemon is listening to.\n\n- In the **Connection** tab of the **Publish** dialog, expand the **Docker Advanced Options** section and ensure that the correct **Auth** Options are being specified.\n  - If the Docker daemon on the server is configured to use TLS security then the Windows Docker command line interface (docker.exe) will look for the client key (key.pem) and certificate (cert.pem) by default under the `<%userprofile%>\\.docker` folder. If these items aren't present they will need to be generated by using OpenSSL. For more information on configuring Docker for TLS, see [Protecting the Docker daemon Socket with HTTPS](https://docs.docker.com/articles/https/).\n\n    One way to ensure that Docker is properly authenticating from the Windows client to the Linux server is by copying the contents of the Preview text box into a new command window and changing `<command>` to \"info\" as in the following:\n\n    ```\n    // This example assumes the Docker daemon is configured to use the default port\n    // of 2376 to listen for connections.docker.\n\n    --tls -H tcp://contoso.cloudapp.net:2376 info\n    ```\n\n    As an alternative to copying the client cert and key files to the .docker folder, you can change the **Auth** Options by adding the following parameters:\n\n    ```\n    --tls --tlscert=C:\\mycert\\cert.pem --tlskey=C:\\mycert\\key.pem\n    ```\n- Ensure the Docker daemon on the Docker host machine is version 1.6 or later.\n\n## Timeout error when using your own certificates without client certificate in the Docker folder\n\nIf you choose to use your own certificates when creating the Docker host in Visual Studio (that is, you clear the **Auto-generate Docker certificates** check box in the **Create virtual machine on Microsoft Azure** dialog box), you'll need to copy the client certificate and key files (cert.pem and key.pem) to the Docker folder (`<%userprofile%>\\.docker`). Otherwise, when you publish your project, you'll get a timeout error in one hour and the publish operation will fail.\n\n## PowerShell 3.0 required to publish to Docker containers\n\nIf your operating system is Windows 7 or Windows Server 2008, you'll need to install PowerShell 3.0 before you can publish to Docker containers. PowerShell 3.0 is included in [Windows Management Framework 3.0](https://www.microsoft.com/en-us/download/details.aspx?id=34595). You'll need to reboot your system after installing it.\n\nAs an alternative workaround, you can upgrade to Windows 8.1 or Windows 10, which already has PowerShell 3.0.\n\n## PowerShell window does not automatically close\n\nAfter creating a VM, sometimes the PowerShell window does not close automatically. Closing this window also closes Visual Studio. Because the window does not affect any Visual Studio or Docker tools features, please leave it open until you finish your work.\n\n## FAQ\n\nQ: How do I create a new Docker-enabled Linux machine in Azure using the Visual Studio tools?\n\nA: See [Hosting Web Apps in Docker](vs-azure-tools-docker-hosting-web-apps-in-docker.md) for information on how to do this.\n\nQ:  What Visual Studio project templates are supported for publishing to a Linux Docker container?\n\nA:  Visual Studio currently supports the C# Console Application (Package) and C# ASP.NET 5 Preview web templates, including:\n\n- Empty\n\n- Web API\n\n- Web Application\n\nQ:  How do I publish my ASP.NET 5 web or console project to Docker using MSBUILD from the command line?\n\nA:  Use the following MSBuild command:\n\n    `msbuild <projectname.xproj> /p:deployOnBuild=true;publishProfile=<profilename>`\n\nQ:  How do I publish my ASP.NET 5 web or console project to Docker using PowerShell from the command line?\n\nA:  Use the following PowerShell command:\n\n```\n.\\contoso-Docker-publish.ps1 -packOutput $env:USERPROFILE\\AppData\\Local\\Temp\\PublishTemp -pubxmlFile .\\contoso-Docker.pubxml\n```\n\nQ:  I have my own Linux server with Docker installed, how do I specify this in the **Web Publish** dialog?\n\nA:  See the section **Provide a Custom Docker Host** in the topic, [Hosting Web Apps in Docker](vs-azure-tools-docker-hosting-web-apps-in-docker.md).\n\nQ:  I'm using my own Linux server with Docker installed. How do I generate keys and certificates in order to configure authentication using TLS?\n\nA:  One way is to use OpenSSL on the server to generate the required certificates and keys for the CA, server, and client. You can then use third party software to establish an SSH/SFTP connection, and then copy the certificates to the local Windows development machine. By default, the Docker (CLI) will attempt to use certificates located in the `<userprofile>\\.docker` folder.\n\nAnother option is to download OpenSSL for Windows and generate the required certificates and keys, and then upload the CA, server certificates, and keys to the Linux machine. For more information on establishing a secure connection to Docker, see [Protecting the Docker daemon Socket with HTTPS](https://docs.docker.com/articles/https/).\n\ntest\n"
}