<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Child runbooks in Azure Automation | Microsoft Azure</source>
          <target state="new">Child runbooks in Azure Automation | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes the different methods for starting a runbook in Azure Automation from another runbook and sharing information between them.</source>
          <target state="new">Describes the different methods for starting a runbook in Azure Automation from another runbook and sharing information between them.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Child runbooks in Azure Automation</source>
          <target state="new">Child runbooks in Azure Automation</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is a best practice in Azure Automation to write reusable, modular runbooks with a discrete function that can be used by other runbooks.</source>
          <target state="new">It is a best practice in Azure Automation to write reusable, modular runbooks with a discrete function that can be used by other runbooks.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A parent runbook will often call one or more child runbooks to perform required functionality.</source>
          <target state="new">A parent runbook will often call one or more child runbooks to perform required functionality.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are two ways to call a child runbook, and each has distinct differences that you should understand so that you can determine which will be best for your different scenarios.</source>
          <target state="new">There are two ways to call a child runbook, and each has distinct differences that you should understand so that you can determine which will be best for your different scenarios.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Invoking a child runbook using inline execution</source>
          <target state="new">Invoking a child runbook using inline execution</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To invoke a runbook inline from another runbook, you use the name of the runbook and provide values for its parameters exactly like you would use an activity or cmdlet.</source>
          <target state="new">To invoke a runbook inline from another runbook, you use the name of the runbook and provide values for its parameters exactly like you would use an activity or cmdlet.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All runbooks in the same Automation account are available to all others to be used in this manner.</source>
          <target state="new">All runbooks in the same Automation account are available to all others to be used in this manner.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The parent runbook will wait for the child runbook to complete before moving to the next line, and any output is returned directly to the parent.</source>
          <target state="new">The parent runbook will wait for the child runbook to complete before moving to the next line, and any output is returned directly to the parent.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you invoke a runbook inline, it runs in the same job as the parent runbook.</source>
          <target state="new">When you invoke a runbook inline, it runs in the same job as the parent runbook.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There will be no indication in the job history of the child runbook that it ran.</source>
          <target state="new">There will be no indication in the job history of the child runbook that it ran.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any exceptions and any stream output from the child runbook will be associated with the parent.</source>
          <target state="new">Any exceptions and any stream output from the child runbook will be associated with the parent.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This results in fewer jobs and makes them easier to track and to troubleshoot since any exceptions thrown by the child runbook and any of its stream output are associated with the parent job.</source>
          <target state="new">This results in fewer jobs and makes them easier to track and to troubleshoot since any exceptions thrown by the child runbook and any of its stream output are associated with the parent job.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a runbook is published, any child runbooks that it calls must already be published.</source>
          <target state="new">When a runbook is published, any child runbooks that it calls must already be published.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is because Azure Automation builds an association with any child runbooks when a runbook is compiled.</source>
          <target state="new">This is because Azure Automation builds an association with any child runbooks when a runbook is compiled.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If they aren’t, the parent runbook will appear to publish properly, it but will generate an exception when it’s started.</source>
          <target state="new">If they aren’t, the parent runbook will appear to publish properly, it but will generate an exception when it’s started.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If this happens, you can republish the parent runbook in order to properly reference the child runbooks.</source>
          <target state="new">If this happens, you can republish the parent runbook in order to properly reference the child runbooks.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You do not need to republish the parent runbook if any of the child runbooks are changed because the association will have already been created.</source>
          <target state="new">You do not need to republish the parent runbook if any of the child runbooks are changed because the association will have already been created.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The parameters of a child runbook called inline can be any data type including complex objects, and there is no <bpt id="p1">[</bpt>JSON serialization<ept id="p1">](automation-starting-a-runbook.md#runbook-parameters)</ept> as there is when you start the runbook using the Azure Management Portal or with the Start-AzureAutomationRunbook cmdlet.</source>
          <target state="new">The parameters of a child runbook called inline can be any data type including complex objects, and there is no <bpt id="p1">[</bpt>JSON serialization<ept id="p1">](automation-starting-a-runbook.md#runbook-parameters)</ept> as there is when you start the runbook using the Azure Management Portal or with the Start-AzureAutomationRunbook cmdlet.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example invokes a test child runbook that accepts three parameters, a complex object, an integer, and a boolean.</source>
          <target state="new">The following example invokes a test child runbook that accepts three parameters, a complex object, an integer, and a boolean.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The output of the child runbook is assigned to a variable.</source>
          <target state="new">The output of the child runbook is assigned to a variable.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Starting a child runbook using cmdlet</source>
          <target state="new">Starting a child runbook using cmdlet</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>Start-AzureAutomationRunbook<ept id="p1">](http://msdn.microsoft.com/library/dn690259.aspx)</ept> cmdlet to start a runbook as described in <bpt id="p2">[</bpt>To start a runbook with Windows PowerShell<ept id="p2">](../automation-starting-a-runbook.md#starting-a-runbook-with-windows-powershell)</ept>.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt>Start-AzureAutomationRunbook<ept id="p1">](http://msdn.microsoft.com/library/dn690259.aspx)</ept> cmdlet to start a runbook as described in <bpt id="p2">[</bpt>To start a runbook with Windows PowerShell<ept id="p2">](../automation-starting-a-runbook.md#starting-a-runbook-with-windows-powershell)</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you start a child runbook from a cmdlet, the parent runbook will move to the next line as soon as the job is created for the child runbook.</source>
          <target state="new">When you start a child runbook from a cmdlet, the parent runbook will move to the next line as soon as the job is created for the child runbook.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you need to retrieve any output from the runbook, then you need to access the job using <bpt id="p1">[</bpt>Get-AzureAutomationJobOutput<ept id="p1">](http://msdn.microsoft.com/library/dn690268.aspx)</ept>.</source>
          <target state="new">If you need to retrieve any output from the runbook, then you need to access the job using <bpt id="p1">[</bpt>Get-AzureAutomationJobOutput<ept id="p1">](http://msdn.microsoft.com/library/dn690268.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The job from a child runbook started with a cmdlet will run in a separate job from the parent runbook.</source>
          <target state="new">The job from a child runbook started with a cmdlet will run in a separate job from the parent runbook.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This results in more jobs than invoking the script inline and makes them more difficult to track.</source>
          <target state="new">This results in more jobs than invoking the script inline and makes them more difficult to track.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The parent can start multiple child runbooks though without waiting for each to complete.</source>
          <target state="new">The parent can start multiple child runbooks though without waiting for each to complete.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For that same kind of parallel execution calling the child runbooks inline, the parent runbook would need to use the <bpt id="p1">[</bpt>parallel keyword<ept id="p1">](automation-powershell-workflow.md#parallel-processing)</ept>.</source>
          <target state="new">For that same kind of parallel execution calling the child runbooks inline, the parent runbook would need to use the <bpt id="p1">[</bpt>parallel keyword<ept id="p1">](automation-powershell-workflow.md#parallel-processing)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Parameters for a child runbook started with a cmdlet are provided as a hashtable as described in <bpt id="p1">[</bpt>Runbook Parameters<ept id="p1">](automation-starting-a-runbook.md#runbook-parameters)</ept>.</source>
          <target state="new">Parameters for a child runbook started with a cmdlet are provided as a hashtable as described in <bpt id="p1">[</bpt>Runbook Parameters<ept id="p1">](automation-starting-a-runbook.md#runbook-parameters)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Only simple data types can be used.</source>
          <target state="new">Only simple data types can be used.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the runbook has a parameter with a complex data type, then it must be called inline.</source>
          <target state="new">If the runbook has a parameter with a complex data type, then it must be called inline.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example starts a child runbook with parameters and then waits for it to complete.</source>
          <target state="new">The following example starts a child runbook with parameters and then waits for it to complete.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Once completed, its output is collected from the job by the parent runbook.</source>
          <target state="new">Once completed, its output is collected from the job by the parent runbook.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Start-ChildRunbook<ept id="p1">](http://gallery.technet.microsoft.com/scriptcenter/Start-Azure-Automation-1ac858a9)</ept> is a helper runbook available in the TechNet Gallery to start a runbook from a cmdlet.</source>
          <target state="new"><bpt id="p1">[</bpt>Start-ChildRunbook<ept id="p1">](http://gallery.technet.microsoft.com/scriptcenter/Start-Azure-Automation-1ac858a9)</ept> is a helper runbook available in the TechNet Gallery to start a runbook from a cmdlet.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This provides the option of waiting until the child runbook has completed and retrieving its output.</source>
          <target state="new">This provides the option of waiting until the child runbook has completed and retrieving its output.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In addition to using this runbook in your own Azure Automation environment, this runbook can be used as a reference for working with runbooks and jobs using cmdlets.</source>
          <target state="new">In addition to using this runbook in your own Azure Automation environment, this runbook can be used as a reference for working with runbooks and jobs using cmdlets.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The helper runbook itself must be called inline because it requires a hashtable parameter to accept the parameter values for the child runbook.</source>
          <target state="new">The helper runbook itself must be called inline because it requires a hashtable parameter to accept the parameter values for the child runbook.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Comparison of methods for calling a child runbook</source>
          <target state="new">Comparison of methods for calling a child runbook</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following table summarizes the differences between the two methods for calling a runbook from another runbook.</source>
          <target state="new">The following table summarizes the differences between the two methods for calling a runbook from another runbook.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="new">Inline</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Cmdlet</source>
          <target state="new">Cmdlet</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Job</source>
          <target state="new">Job</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Child runbooks run in the same job as the parent.</source>
          <target state="new">Child runbooks run in the same job as the parent.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A separate job is created for the child runbook.</source>
          <target state="new">A separate job is created for the child runbook.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Execution</source>
          <target state="new">Execution</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parent runbook waits for the child runbook to complete before continuing.</source>
          <target state="new">Parent runbook waits for the child runbook to complete before continuing.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parent runbook continues immediately after child runbook is started.</source>
          <target state="new">Parent runbook continues immediately after child runbook is started.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="new">Output</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parent runbook can directly get output from child runbook.</source>
          <target state="new">Parent runbook can directly get output from child runbook.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parent runbook must retrieve output from child runbook job.</source>
          <target state="new">Parent runbook must retrieve output from child runbook job.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Values for the child runbook parameters are specified separately and can use any data type.</source>
          <target state="new">Values for the child runbook parameters are specified separately and can use any data type.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Values for the child runbook parameters must be combined into a single hashtable and can only include simple, array, and object data types that leverage JSON serialization.</source>
          <target state="new">Values for the child runbook parameters must be combined into a single hashtable and can only include simple, array, and object data types that leverage JSON serialization.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Automation Account</source>
          <target state="new">Automation Account</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Parent runbook can only use child runbook in the same automation account.</source>
          <target state="new">Parent runbook can only use child runbook in the same automation account.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parent runbook can use child runbook from any automation account from the same Azure subscription and even a different subscription if you have a connection to it.</source>
          <target state="new">Parent runbook can use child runbook from any automation account from the same Azure subscription and even a different subscription if you have a connection to it.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Publishing</source>
          <target state="new">Publishing</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Child runbook must be published before parent runbook is published.</source>
          <target state="new">Child runbook must be published before parent runbook is published.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Child runbook must be published any time before parent runbook is started.</source>
          <target state="new">Child runbook must be published any time before parent runbook is started.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Related articles</source>
          <target state="new">Related articles</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Starting a runbook in Azure Automation</source>
          <target state="new">Starting a runbook in Azure Automation</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runbook output and messages in Azure Automation<ept id="p1">](automation-runbook-output-and-messages.md)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Runbook output and messages in Azure Automation<ept id="p1">](automation-runbook-output-and-messages.md)</ept></target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d2447b82546cc05a877190c6a6873ded27c6896</xliffext:olfilehash>
  </header>
</xliff>