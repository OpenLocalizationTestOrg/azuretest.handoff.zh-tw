{
  "nodes": [
    {
      "content": "Creating Filters with Media Services .NET SDK",
      "pos": [
        28,
        73
      ]
    },
    {
      "content": "This topic describes how to create filters so your client can use them to stream specific sections of a stream.",
      "pos": [
        93,
        204
      ]
    },
    {
      "content": "Media Services creates dynamic manifests to achieve this selective streaming.",
      "pos": [
        205,
        282
      ]
    },
    {
      "content": "Creating Filters with Media Services .NET SDK",
      "pos": [
        595,
        640
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        644,
        660
      ]
    },
    {
      "content": ".NET",
      "pos": [
        664,
        668
      ]
    },
    {
      "content": "REST",
      "pos": [
        716,
        720
      ]
    },
    {
      "content": "Starting with 2.11 release, Media Services enables you to define filters for your assets.",
      "pos": [
        764,
        853
      ]
    },
    {
      "content": "These filters are server side rules that will allow your customers to choose to do things like: playback only a section of a video (instead of playing the whole video), or specify only a subset of audio and video renditions that your customer's device can handle (instead of all the renditions that are associated with the asset).",
      "pos": [
        854,
        1184
      ]
    },
    {
      "content": "This filtering of your assets is achieved through <bpt id=\"p1\">**</bpt>Dynamic Manifest<ept id=\"p1\">**</ept>s that are created upon your customer's request to stream a video based on specified filter(s).",
      "pos": [
        1185,
        1350
      ]
    },
    {
      "pos": [
        1352,
        1501
      ],
      "content": "For more detailed information related to filters and Dynamic Manifest, see <bpt id=\"p1\">[</bpt>Dynamic manifests overview<ept id=\"p1\">](media-services-dynamic-manifest-overview.md)</ept>."
    },
    {
      "content": "This topic shows how to use Media Services .NET SDK to create, update, and delete filters.",
      "pos": [
        1503,
        1593
      ]
    },
    {
      "content": "Note if you update a filter, it can take up to 2 minutes for streaming endpoint to refresh the rules.",
      "pos": [
        1597,
        1698
      ]
    },
    {
      "content": "If the content was served using this filter (and cached in proxies and CDN caches), updating this filter can result in player failures.",
      "pos": [
        1699,
        1834
      ]
    },
    {
      "content": "It is recommend to clear the cache after updating the filter.",
      "pos": [
        1835,
        1896
      ]
    },
    {
      "content": "If this option is not possible, consider using a different filter.",
      "pos": [
        1897,
        1963
      ]
    },
    {
      "content": "Types used to create filters",
      "pos": [
        1968,
        1996
      ]
    },
    {
      "content": "The following types are used when creating filters:",
      "pos": [
        1998,
        2049
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>IStreamingFilter<ept id=\"p1\">**</ept>.",
      "pos": [
        2054,
        2075
      ]
    },
    {
      "content": "This type is based on the following REST API <bpt id=\"p1\">[</bpt>Filter<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/mt149056.aspx)</ept>",
      "pos": [
        2077,
        2185
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>IStreamingAssetFilter<ept id=\"p1\">**</ept>.",
      "pos": [
        2188,
        2214
      ]
    },
    {
      "content": "This type is based on the following REST API <bpt id=\"p1\">[</bpt>AssetFilter<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/mt149053.aspx)</ept>",
      "pos": [
        2215,
        2328
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>PresentationTimeRange<ept id=\"p1\">**</ept>.",
      "pos": [
        2331,
        2357
      ]
    },
    {
      "content": "This type is based on the following REST API <bpt id=\"p1\">[</bpt>PresentationTimeRange<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/mt149052.aspx)</ept>",
      "pos": [
        2358,
        2481
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FilterTrackSelectStatement<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IFilterTrackPropertyCondition<ept id=\"p2\">**</ept>.",
      "pos": [
        2484,
        2553
      ]
    },
    {
      "content": "These types are based on the following REST APIs <bpt id=\"p1\">[</bpt>FilterTrackSelect and FilterTrackPropertyCondition<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/mt149055.aspx)</ept>",
      "pos": [
        2554,
        2710
      ]
    },
    {
      "content": "Create/Update/Read/Delete global filters",
      "pos": [
        2715,
        2755
      ]
    },
    {
      "content": "The following code shows how to use .NET to create, update,read, and delete asset filters.",
      "pos": [
        2757,
        2847
      ]
    },
    {
      "content": "Create/Update/Read/Delete asset filters",
      "pos": [
        4172,
        4211
      ]
    },
    {
      "content": "The following code shows how to use .NET to create, update,read, and delete asset filters.",
      "pos": [
        4213,
        4303
      ]
    },
    {
      "content": "Build streaming URLs that use filters",
      "pos": [
        5190,
        5227
      ]
    },
    {
      "pos": [
        5229,
        5379
      ],
      "content": "For information on how to publish and deliver your assets, see <bpt id=\"p1\">[</bpt>Delivering Content to Customers Overview<ept id=\"p1\">](media-services-deliver-content-overview.md)</ept>."
    },
    {
      "content": "The following examples show how to add filters to your streaming URLs.",
      "pos": [
        5382,
        5452
      ]
    },
    {
      "content": "MPEG DASH",
      "pos": [
        5456,
        5465
      ]
    },
    {
      "content": "Apple HTTP Live Streaming (HLS) V4",
      "pos": [
        5646,
        5680
      ]
    },
    {
      "content": "Apple HTTP Live Streaming (HLS) V3",
      "pos": [
        5857,
        5891
      ]
    },
    {
      "content": "Smooth Streaming",
      "pos": [
        6071,
        6087
      ]
    },
    {
      "content": "HDS",
      "pos": [
        6247,
        6250
      ]
    },
    {
      "content": "See Also",
      "pos": [
        6427,
        6435
      ]
    },
    {
      "content": "Dynamic manifests overview",
      "pos": [
        6439,
        6465
      ]
    },
    {
      "content": "test",
      "pos": [
        6516,
        6520
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Creating Filters with Media Services .NET SDK\" \n    description=\"This topic describes how to create filters so your client can use them to stream specific sections of a stream. Media Services creates dynamic manifests to achieve this selective streaming.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"ne\" \n    ms.topic=\"article\" \n    ms.date=\"08/14/2015\" \n    ms.author=\"juliako\"/>\n\n\n#Creating Filters with Media Services .NET SDK\n\n> [AZURE.SELECTOR]\n- [.NET](media-services-dotnet-dynamic-manifest.md)\n- [REST](media-services-rest-dynamic-manifest.md)\n\nStarting with 2.11 release, Media Services enables you to define filters for your assets. These filters are server side rules that will allow your customers to choose to do things like: playback only a section of a video (instead of playing the whole video), or specify only a subset of audio and video renditions that your customer's device can handle (instead of all the renditions that are associated with the asset). This filtering of your assets is achieved through **Dynamic Manifest**s that are created upon your customer's request to stream a video based on specified filter(s).\n\nFor more detailed information related to filters and Dynamic Manifest, see [Dynamic manifests overview](media-services-dynamic-manifest-overview.md).\n\nThis topic shows how to use Media Services .NET SDK to create, update, and delete filters. \n\n\nNote if you update a filter, it can take up to 2 minutes for streaming endpoint to refresh the rules. If the content was served using this filter (and cached in proxies and CDN caches), updating this filter can result in player failures. It is recommend to clear the cache after updating the filter. If this option is not possible, consider using a different filter. \n\n##Types used to create filters\n\nThe following types are used when creating filters: \n\n- **IStreamingFilter**.  This type is based on the following REST API [Filter](http://msdn.microsoft.com/library/azure/mt149056.aspx)\n- **IStreamingAssetFilter**. This type is based on the following REST API [AssetFilter](http://msdn.microsoft.com/library/azure/mt149053.aspx)\n- **PresentationTimeRange**. This type is based on the following REST API [PresentationTimeRange](http://msdn.microsoft.com/library/azure/mt149052.aspx)\n- **FilterTrackSelectStatement** and **IFilterTrackPropertyCondition**. These types are based on the following REST APIs [FilterTrackSelect and FilterTrackPropertyCondition](http://msdn.microsoft.com/library/azure/mt149055.aspx)\n\n\n##Create/Update/Read/Delete global filters\n\nThe following code shows how to use .NET to create, update,read, and delete asset filters.\n    \n    string filterName = \"GlobalFilter_\" + Guid.NewGuid().ToString();\n                \n    List<FilterTrackSelectStatement> filterTrackSelectStatements = new List<FilterTrackSelectStatement>();\n    \n    FilterTrackSelectStatement filterTrackSelectStatement = new FilterTrackSelectStatement();\n    filterTrackSelectStatement.PropertyConditions = new List<IFilterTrackPropertyCondition>();\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackNameCondition(\"Track Name\", FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackBitrateRangeCondition(new FilterTrackBitrateRange(0, 1), FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackTypeCondition(FilterTrackType.Audio, FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatements.Add(filterTrackSelectStatement);\n    \n    // Create\n    IStreamingFilter filter = _context.Filters.Create(filterName, new PresentationTimeRange(), filterTrackSelectStatements);\n    \n    // Update\n    filter.PresentationTimeRange = new PresentationTimeRange(timescale: 500);\n    filter.Update();\n    \n    // Read\n    var filterUpdated = _context.Filters.FirstOrDefault();\n    Console.WriteLine(filterUpdated.Name);\n\n    // Delete\n    filter.Delete();\n\n\n##Create/Update/Read/Delete asset filters\n\nThe following code shows how to use .NET to create, update,read, and delete asset filters.\n\n    \n    string assetName = \"AssetFilter_\" + Guid.NewGuid().ToString();\n    var asset = _context.Assets.Create(assetName, AssetCreationOptions.None);\n    \n    string filterName = \"AssetFilter_\" + Guid.NewGuid().ToString();\n    \n        \n    // Create\n    IStreamingAssetFilter filter = asset.AssetFilters.Create(filterName,\n                                        new PresentationTimeRange(), \n                                        new List<FilterTrackSelectStatement>());\n    \n    // Update\n    filter.PresentationTimeRange = \n            new PresentationTimeRange(start: 6000000000, end: 72000000000);\n    \n    filter.Update();\n    \n    // Read\n    asset = _context.Assets.Where(c => c.Id == asset.Id).FirstOrDefault();\n    var filterUpdated = asset.AssetFilters.FirstOrDefault();\n    Console.WriteLine(filterUpdated.Name);\n    \n    // Delete\n    filterUpdated.Delete();\n    \n\n\n\n##Build streaming URLs that use filters\n\nFor information on how to publish and deliver your assets, see [Delivering Content to Customers Overview](media-services-deliver-content-overview.md).\n\n\nThe following examples show how to add filters to your streaming URLs.\n\n**MPEG DASH** \n\n    http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=mpd-time-csf, filter=MyFilter)\n\n**Apple HTTP Live Streaming (HLS) V4**\n\n    http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl, filter=MyFilter)\n\n**Apple HTTP Live Streaming (HLS) V3**\n\n    http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl-v3, filter=MyFilter)\n\n**Smooth Streaming**\n\n    http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(filter=MyFilter)\n\n\n**HDS**\n\n    http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=f4m-f4f, filter=MyFilter)\n\n\n\n##See Also \n\n[Dynamic manifests overview](media-services-dynamic-manifest-overview.md)\n \n\n\ntest\n"
}