{
  "nodes": [
    {
      "content": "Migrate your schema to SQL Data Warehouse | Microsoft Azure",
      "pos": [
        26,
        85
      ]
    },
    {
      "content": "Tips for migrating your schema to Azure SQL Data Warehouse for developing solutions.",
      "pos": [
        103,
        187
      ]
    },
    {
      "content": "Migrate your schema to SQL Data Warehouse",
      "pos": [
        525,
        566
      ]
    },
    {
      "content": "The following summaries will help you understand the differences between SQL Server and SQL Data Warehouse to help you migrate your database.",
      "pos": [
        569,
        710
      ]
    },
    {
      "content": "Table features",
      "pos": [
        716,
        730
      ]
    },
    {
      "content": "SQL Data Warehouse does not use or support these features:",
      "pos": [
        731,
        789
      ]
    },
    {
      "content": "Primary keys",
      "pos": [
        793,
        805
      ]
    },
    {
      "content": "Foreign keys",
      "pos": [
        808,
        820
      ]
    },
    {
      "content": "Check constraints",
      "pos": [
        823,
        840
      ]
    },
    {
      "content": "Unique constraints",
      "pos": [
        843,
        861
      ]
    },
    {
      "content": "Unique indexes",
      "pos": [
        864,
        878
      ]
    },
    {
      "content": "Computed columns",
      "pos": [
        881,
        897
      ]
    },
    {
      "content": "Sparse columns",
      "pos": [
        900,
        914
      ]
    },
    {
      "content": "User defined types",
      "pos": [
        917,
        935
      ]
    },
    {
      "content": "Indexed views",
      "pos": [
        938,
        951
      ]
    },
    {
      "content": "Identities",
      "pos": [
        954,
        964
      ]
    },
    {
      "content": "Sequences",
      "pos": [
        967,
        976
      ]
    },
    {
      "content": "Triggers",
      "pos": [
        979,
        987
      ]
    },
    {
      "content": "Synonyms",
      "pos": [
        990,
        998
      ]
    },
    {
      "content": "Data type differences",
      "pos": [
        1004,
        1025
      ]
    },
    {
      "content": "SQL Data Warehouse supports the common business data types:",
      "pos": [
        1026,
        1085
      ]
    },
    {
      "content": "bigint",
      "pos": [
        1089,
        1095
      ]
    },
    {
      "content": "binary",
      "pos": [
        1098,
        1104
      ]
    },
    {
      "content": "bit",
      "pos": [
        1107,
        1110
      ]
    },
    {
      "content": "char",
      "pos": [
        1113,
        1117
      ]
    },
    {
      "content": "date",
      "pos": [
        1120,
        1124
      ]
    },
    {
      "content": "datetime",
      "pos": [
        1127,
        1135
      ]
    },
    {
      "content": "datetime2",
      "pos": [
        1138,
        1147
      ]
    },
    {
      "content": "datetimeoffset",
      "pos": [
        1150,
        1164
      ]
    },
    {
      "content": "decimal",
      "pos": [
        1167,
        1174
      ]
    },
    {
      "content": "float",
      "pos": [
        1177,
        1182
      ]
    },
    {
      "content": "int",
      "pos": [
        1185,
        1188
      ]
    },
    {
      "content": "money",
      "pos": [
        1191,
        1196
      ]
    },
    {
      "content": "nchar",
      "pos": [
        1199,
        1204
      ]
    },
    {
      "content": "nvarchar",
      "pos": [
        1207,
        1215
      ]
    },
    {
      "content": "real",
      "pos": [
        1218,
        1222
      ]
    },
    {
      "content": "smalldatetime",
      "pos": [
        1225,
        1238
      ]
    },
    {
      "content": "smallint",
      "pos": [
        1241,
        1249
      ]
    },
    {
      "content": "smallmoney",
      "pos": [
        1252,
        1262
      ]
    },
    {
      "content": "time",
      "pos": [
        1265,
        1269
      ]
    },
    {
      "content": "tinyint",
      "pos": [
        1272,
        1279
      ]
    },
    {
      "content": "varbinary",
      "pos": [
        1282,
        1291
      ]
    },
    {
      "content": "varchar",
      "pos": [
        1294,
        1301
      ]
    },
    {
      "content": "You can use this query to identify columns in your data warehouse that contain incompatible types:",
      "pos": [
        1303,
        1401
      ]
    },
    {
      "content": "The query includes any user defined data types which are also not supported.",
      "pos": [
        2205,
        2281
      ]
    },
    {
      "content": "If you have unsupported types in your database do not worry.",
      "pos": [
        2283,
        2343
      ]
    },
    {
      "content": "Some alternatives you can use instead are proposed below.",
      "pos": [
        2344,
        2401
      ]
    },
    {
      "content": "Instead of:",
      "pos": [
        2403,
        2414
      ]
    },
    {
      "pos": [
        2418,
        2452
      ],
      "content": "<bpt id=\"p1\">**</bpt>geometry<ept id=\"p1\">**</ept>, use a varbinary type"
    },
    {
      "pos": [
        2455,
        2490
      ],
      "content": "<bpt id=\"p1\">**</bpt>geography<ept id=\"p1\">**</ept>, use a varbinary type"
    },
    {
      "pos": [
        2493,
        2540
      ],
      "content": "<bpt id=\"p1\">**</bpt>hierarchyid<ept id=\"p1\">**</ept>, this CLR type is not supported"
    },
    {
      "pos": [
        2543,
        2616
      ],
      "content": "<bpt id=\"p1\">**</bpt>image<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>text<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>ntext<ept id=\"p3\">**</ept>, use varchar/nvarchar (smaller the better)"
    },
    {
      "pos": [
        2619,
        2689
      ],
      "content": "<bpt id=\"p1\">**</bpt>nvarchar(max)<ept id=\"p1\">**</ept>, use varchar(4000) or smaller for better performance"
    },
    {
      "pos": [
        2692,
        2716
      ],
      "content": "<bpt id=\"p1\">**</bpt>numeric<ept id=\"p1\">**</ept>, use decimal"
    },
    {
      "pos": [
        2719,
        2784
      ],
      "content": "<bpt id=\"p1\">**</bpt>sql_variant<ept id=\"p1\">**</ept>, split column into several strongly typed columns"
    },
    {
      "pos": [
        2787,
        2817
      ],
      "content": "<bpt id=\"p1\">**</bpt>sysname<ept id=\"p1\">**</ept>, use nvarchar(128)"
    },
    {
      "pos": [
        2820,
        2858
      ],
      "content": "<bpt id=\"p1\">**</bpt>table<ept id=\"p1\">**</ept>, convert to temporary tables"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>timestamp<ept id=\"p1\">**</ept>, re-work code to use datetime2 and <ph id=\"ph1\">`CURRENT_TIMESTAMP`</ph> function.",
      "pos": [
        2861,
        2939
      ]
    },
    {
      "content": "Note you cannot have current_timestamp as a default constraint and the value will not automatically update.",
      "pos": [
        2940,
        3047
      ]
    },
    {
      "content": "If you need to migrate rowversion values from a timestamp typed column then use binary(8) or varbinary(8) for NOT NULL or NULL row version values.",
      "pos": [
        3048,
        3194
      ]
    },
    {
      "pos": [
        3197,
        3266
      ],
      "content": "<bpt id=\"p1\">**</bpt>varchar(max)<ept id=\"p1\">**</ept>, use varchar(8000) or smaller for better performance"
    },
    {
      "pos": [
        3269,
        3307
      ],
      "content": "<bpt id=\"p1\">**</bpt>uniqueidentifier<ept id=\"p1\">**</ept>, use varbinary(8)"
    },
    {
      "pos": [
        3310,
        3383
      ],
      "content": "<bpt id=\"p1\">**</bpt>user defined types<ept id=\"p1\">**</ept>, convert back to their native types where possible"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>xml<ept id=\"p1\">**</ept>, use a varchar(8000) or smaller for better performance.",
      "pos": [
        3386,
        3449
      ]
    },
    {
      "content": "Split across columns if needed",
      "pos": [
        3450,
        3480
      ]
    },
    {
      "content": "Partial support:",
      "pos": [
        3482,
        3498
      ]
    },
    {
      "content": "Default constraints support literals and constants only.",
      "pos": [
        3502,
        3558
      ]
    },
    {
      "content": "Non-deterministic expressions or functions, such as <ph id=\"ph1\">`GETDATE()`</ph> or <ph id=\"ph2\">`CURRENT_TIMESTAMP`</ph>, are not supported.",
      "pos": [
        3559,
        3665
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Define your tables so that the maximum possible row size, including the full length of variable length columns, does not exceed 32,767 bytes.",
      "pos": [
        3669,
        3823
      ]
    },
    {
      "content": "While you can define a row with variable length data that can exceed this figure, you will not be be able to insert data into the table.",
      "pos": [
        3824,
        3960
      ]
    },
    {
      "content": "Also, try to limit the size of your variable length columns for even better throughput for running queries.",
      "pos": [
        3961,
        4068
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        4073,
        4083
      ]
    },
    {
      "content": "Once you have successfully migrated your database schema to SQLDW you can proceed to one of the following articles:",
      "pos": [
        4084,
        4199
      ]
    },
    {
      "content": "Migrate your data",
      "pos": [
        4204,
        4221
      ]
    },
    {
      "content": "Migrate your code",
      "pos": [
        4228,
        4245
      ]
    },
    {
      "pos": [
        4250,
        4310
      ],
      "content": "For more development tips, see the <bpt id=\"p1\">[</bpt>development overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Migrate your schema to SQL Data Warehouse | Microsoft Azure\"\n   description=\"Tips for migrating your schema to Azure SQL Data Warehouse for developing solutions.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"06/25/2015\"\n   ms.author=\"JRJ@BigBangData.co.uk;barbkess\"/>\n\n# Migrate your schema to SQL Data Warehouse#\n\nThe following summaries will help you understand the differences between SQL Server and SQL Data Warehouse to help you migrate your database.\n\n### Table features\nSQL Data Warehouse does not use or support these features:\n\n- Primary keys\n- Foreign keys\n- Check constraints\n- Unique constraints\n- Unique indexes\n- Computed columns\n- Sparse columns\n- User defined types\n- Indexed views\n- Identities\n- Sequences\n- Triggers\n- Synonyms\n\n### Data type differences\nSQL Data Warehouse supports the common business data types:\n\n- bigint\n- binary\n- bit\n- char\n- date\n- datetime\n- datetime2\n- datetimeoffset\n- decimal\n- float\n- int\n- money\n- nchar\n- nvarchar\n- real\n- smalldatetime\n- smallint\n- smallmoney\n- time\n- tinyint\n- varbinary\n- varchar\n\nYou can use this query to identify columns in your data warehouse that contain incompatible types:\n\n```\nSELECT  t.[name]\n,       c.[name]\n,       c.[system_type_id]\n,       c.[user_type_id]\n,       y.[is_user_defined]\n,       y.[name]\nFROM sys.tables  t\nJOIN sys.columns c on t.[object_id]    = c.[object_id]\nJOIN sys.types   y on c.[user_type_id] = y.[user_type_id]\nWHERE y.[name] IN\n                (   'geography'\n                ,   'geometry'\n                ,   'hierarchyid'\n                ,   'image'\n                ,   'ntext'\n                ,   'numeric'\n                ,   'sql_variant'\n                ,   'sysname'\n                ,   'text'\n                ,   'timestamp'\n                ,   'uniqueidentifier'\n                ,   'xml'\n                )\n\nOR  (   y.[name] IN (  'nvarchar','varchar','varbinary')\n    AND c.[max_length] = -1\n    )\nOR  y.[is_user_defined] = 1\n;\n\n```\n\nThe query includes any user defined data types which are also not supported.\n\nIf you have unsupported types in your database do not worry. Some alternatives you can use instead are proposed below.\n\nInstead of:\n\n- **geometry**, use a varbinary type\n- **geography**, use a varbinary type\n- **hierarchyid**, this CLR type is not supported\n- **image**, **text**, **ntext**, use varchar/nvarchar (smaller the better)\n- **nvarchar(max)**, use varchar(4000) or smaller for better performance\n- **numeric**, use decimal\n- **sql_variant**, split column into several strongly typed columns\n- **sysname**, use nvarchar(128)\n- **table**, convert to temporary tables\n- **timestamp**, re-work code to use datetime2 and `CURRENT_TIMESTAMP` function. Note you cannot have current_timestamp as a default constraint and the value will not automatically update. If you need to migrate rowversion values from a timestamp typed column then use binary(8) or varbinary(8) for NOT NULL or NULL row version values.\n- **varchar(max)**, use varchar(8000) or smaller for better performance\n- **uniqueidentifier**, use varbinary(8)\n- **user defined types**, convert back to their native types where possible\n- **xml**, use a varchar(8000) or smaller for better performance. Split across columns if needed\n\nPartial support:\n\n- Default constraints support literals and constants only. Non-deterministic expressions or functions, such as `GETDATE()` or `CURRENT_TIMESTAMP`, are not supported.\n\n> [AZURE.NOTE] Define your tables so that the maximum possible row size, including the full length of variable length columns, does not exceed 32,767 bytes. While you can define a row with variable length data that can exceed this figure, you will not be be able to insert data into the table. Also, try to limit the size of your variable length columns for even better throughput for running queries.\n\n## Next steps\nOnce you have successfully migrated your database schema to SQLDW you can proceed to one of the following articles:\n\n- [Migrate your data][]\n- [Migrate your code][]\n\nFor more development tips, see the [development overview][].\n\n<!--Image references-->\n\n<!--Article references-->\n[Migrate your code]: sql-data-warehouse-migrate-code.md\n[Migrate your data]: sql-data-warehouse-migrate-data.md\n[development overview]: sql-data-warehouse-overview-develop.md\n\n<!--MSDN references-->\n\n\n<!--Other Web references-->\n"
}