<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure</source>
          <target state="new">Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags.</source>
          <target state="new">Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determine Twitter trending topics with Apache Storm on HDInsight</source>
          <target state="new">Determine Twitter trending topics with Apache Storm on HDInsight</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Learn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter.</source>
          <target state="new">Learn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters.</source>
          <target state="new">Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Additionally, Trident adds primitives for doing stateful, incremental processing.</source>
          <target state="new">Additionally, Trident adds primitives for doing stateful, incremental processing.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.</source>
          <target state="new">This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This example is heavily based on the <bpt id="p1">[</bpt>Trident Storm<ept id="p1">](https://github.com/jalonsoramos/trident-storm)</ept> example by Juan Alonso.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This example is heavily based on the <bpt id="p1">[</bpt>Trident Storm<ept id="p1">](https://github.com/jalonsoramos/trident-storm)</ept> example by Juan Alonso.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="new">Requirements</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank"&gt;</ph>Java and the JDK 1.7<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank"&gt;</ph>Java and the JDK 1.7<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://maven.apache.org/what-is-maven.html" target="_blank"&gt;</ph>Maven<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="http://maven.apache.org/what-is-maven.html" target="_blank"&gt;</ph>Maven<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://git-scm.com/" target="_blank"&gt;</ph>Git<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="http://git-scm.com/" target="_blank"&gt;</ph>Git<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A Twitter developer account</source>
          <target state="new">A Twitter developer account</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Download the project</source>
          <target state="new">Download the project</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use the following code to clone the project locally.</source>
          <target state="new">Use the following code to clone the project locally.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Topology</source>
          <target state="new">Topology</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The topology for this example is as follows:</source>
          <target state="new">The topology for this example is as follows:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>topology</source>
          <target state="new">topology</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This is a simplified view of the topology.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This is a simplified view of the topology.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Multiple instances of the components will be distributed across the nodes in the cluster.</source>
          <target state="new">Multiple instances of the components will be distributed across the nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Trident code that implements the topology is as follows:</source>
          <target state="new">The Trident code that implements the topology is as follows:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This code does the following:</source>
          <target state="new">This code does the following:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates a new stream from the spout.</source>
          <target state="new">Creates a new stream from the spout.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).</source>
          <target state="new">The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>HashtagExtractor, a custom function, is used to extract hash tags from each tweet.</source>
          <target state="new">HashtagExtractor, a custom function, is used to extract hash tags from each tweet.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These are emitted to the stream.</source>
          <target state="new">These are emitted to the stream.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The stream is grouped by hash tag, and passed to an aggregator.</source>
          <target state="new">The stream is grouped by hash tag, and passed to an aggregator.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This aggregator creates a count of how many times each hash tag has occurred.</source>
          <target state="new">This aggregator creates a count of how many times each hash tag has occurred.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This data is persisted in memory.</source>
          <target state="new">This data is persisted in memory.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Finally, a new stream is emitted that contains the hash tag and the count.</source>
          <target state="new">Finally, a new stream is emitted that contains the hash tag and the count.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because we are only interested in the most popular hash tags for a given batch of tweets, the <bpt id="p1">**</bpt>FirstN<ept id="p1">**</ept> assembly is applied to return only the top 10 values, based on the count field.</source>
          <target state="new">Because we are only interested in the most popular hash tags for a given batch of tweets, the <bpt id="p1">**</bpt>FirstN<ept id="p1">**</ept> assembly is applied to return only the top 10 values, based on the count field.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Other than the spout and HashtagExtractor, we are using built-in Trident functionality.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Other than the spout and HashtagExtractor, we are using built-in Trident functionality.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For information about built-in operations, see <ph id="ph1">&lt;a href="https://storm.apache.org/apidocs/storm/trident/operation/builtin/package-summary.html" target="_blank"&gt;</ph>Package storm.trident.operation.builtin<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">For information about built-in operations, see <ph id="ph1">&lt;a href="https://storm.apache.org/apidocs/storm/trident/operation/builtin/package-summary.html" target="_blank"&gt;</ph>Package storm.trident.operation.builtin<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For Trident-state implementations other than MemoryMapState, see the following:</source>
          <target state="new">For Trident-state implementations other than MemoryMapState, see the following:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="https://github.com/fhussonnois/storm-trident-elasticsearch" target="_blank"&gt;</ph>Storm Trident elastic search<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="https://github.com/fhussonnois/storm-trident-elasticsearch" target="_blank"&gt;</ph>Storm Trident elastic search<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="https://github.com/kstyrc/trident-redis" target="_blank"&gt;</ph>trident-redis<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="https://github.com/kstyrc/trident-redis" target="_blank"&gt;</ph>trident-redis<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The spout</source>
          <target state="new">The spout</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The spout, <bpt id="p1">**</bpt>TwitterSpout<ept id="p1">**</ept>, uses <ph id="ph1">&lt;a href="http://twitter4j.org/en/" target="_blank"&gt;</ph>Twitter4j<ph id="ph2">&lt;/a&gt;</ph> to retrieve tweets from Twitter.</source>
          <target state="new">The spout, <bpt id="p1">**</bpt>TwitterSpout<ept id="p1">**</ept>, uses <ph id="ph1">&lt;a href="http://twitter4j.org/en/" target="_blank"&gt;</ph>Twitter4j<ph id="ph2">&lt;/a&gt;</ph> to retrieve tweets from Twitter.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue.</source>
          <target state="new">A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(For more information, see <ph id="ph1">&lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html" target="_blank"&gt;</ph>Class LinkedBlockingQueue<ph id="ph2">&lt;/a&gt;</ph>.) Finally, items are pulled off the queue and emitted to the topology.</source>
          <target state="new">(For more information, see <ph id="ph1">&lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingQueue.html" target="_blank"&gt;</ph>Class LinkedBlockingQueue<ph id="ph2">&lt;/a&gt;</ph>.) Finally, items are pulled off the queue and emitted to the topology.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The HashtagExtractor</source>
          <target state="new">The HashtagExtractor</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To extract hash tags, <ph id="ph1">&lt;a href="http://twitter4j.org/javadoc/twitter4j/EntitySupport.html#getHashtagEntities--" target="_blank"&gt;</ph>getHashtagEntities<ph id="ph2">&lt;/a&gt;</ph> is used to retrieve all hash tags that are contained in the tweet.</source>
          <target state="new">To extract hash tags, <ph id="ph1">&lt;a href="http://twitter4j.org/javadoc/twitter4j/EntitySupport.html#getHashtagEntities--" target="_blank"&gt;</ph>getHashtagEntities<ph id="ph2">&lt;/a&gt;</ph> is used to retrieve all hash tags that are contained in the tweet.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These are then emitted to the stream.</source>
          <target state="new">These are then emitted to the stream.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Enable Twitter</source>
          <target state="new">Enable Twitter</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:</source>
          <target state="new">Use the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Go to <ph id="ph1">&lt;a href="https://apps.twitter.com" target="_blank"&gt;</ph>Twitter Apps<ph id="ph2">&lt;/a&gt;</ph> and click the <bpt id="p1">**</bpt>Create new app<ept id="p1">**</ept> button.</source>
          <target state="new">Go to <ph id="ph1">&lt;a href="https://apps.twitter.com" target="_blank"&gt;</ph>Twitter Apps<ph id="ph2">&lt;/a&gt;</ph> and click the <bpt id="p1">**</bpt>Create new app<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When filling in the form, leave the <bpt id="p1">**</bpt>Callback URL<ept id="p1">**</ept> field empty.</source>
          <target state="new">When filling in the form, leave the <bpt id="p1">**</bpt>Callback URL<ept id="p1">**</ept> field empty.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the app is created, click the <bpt id="p1">**</bpt>Keys and Access Tokens<ept id="p1">**</ept> tab.</source>
          <target state="new">When the app is created, click the <bpt id="p1">**</bpt>Keys and Access Tokens<ept id="p1">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>Consumer Key<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Consumer Secret<ept id="p2">**</ept> information.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>Consumer Key<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Consumer Secret<ept id="p2">**</ept> information.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>At the bottom of the page, select <bpt id="p1">**</bpt>Create my access token<ept id="p1">**</ept> if no tokens exist.</source>
          <target state="new">At the bottom of the page, select <bpt id="p1">**</bpt>Create my access token<ept id="p1">**</ept> if no tokens exist.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When the tokens have been created, copy the <bpt id="p1">**</bpt>Access Token<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Access Token Secret<ept id="p2">**</ept> information.</source>
          <target state="new">When the tokens have been created, copy the <bpt id="p1">**</bpt>Access Token<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Access Token Secret<ept id="p2">**</ept> information.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TwitterSpoutTopology<ept id="p1">**</ept> project you previously cloned, open the <bpt id="p2">**</bpt>resources/twitter4j.properties<ept id="p2">**</ept> file, add the information you gathered in the previous steps, and then save the file.</source>
          <target state="new">In the <bpt id="p1">**</bpt>TwitterSpoutTopology<ept id="p1">**</ept> project you previously cloned, open the <bpt id="p2">**</bpt>resources/twitter4j.properties<ept id="p2">**</ept> file, add the information you gathered in the previous steps, and then save the file.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Build the topology</source>
          <target state="new">Build the topology</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use the following code to build the project:</source>
          <target state="new">Use the following code to build the project:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Test the topology</source>
          <target state="new">Test the topology</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use the following command to test the topology locally:</source>
          <target state="new">Use the following command to test the topology locally:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology.</source>
          <target state="new">After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The output should appear similar to the following:</source>
          <target state="new">The output should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now that you have tested the topology locally, discover how to deploy the topology: <bpt id="p1">[</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id="p1">](hdinsight-storm-deploy-monitor-topology.md)</ept>.</source>
          <target state="new">Now that you have tested the topology locally, discover how to deploy the topology: <bpt id="p1">[</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id="p1">](hdinsight-storm-deploy-monitor-topology.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You may also be interested in the following Storm topics:</source>
          <target state="new">You may also be interested in the following Storm topics:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Develop Java topologies for Storm on HDInsight using Maven</source>
          <target state="new">Develop Java topologies for Storm on HDInsight using Maven</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Develop C# topologies for Storm on HDInsight using Visual Studio</source>
          <target state="new">Develop C# topologies for Storm on HDInsight using Visual Studio</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more Storm examples for HDinsight:</source>
          <target state="new">For more Storm examples for HDinsight:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Example topologies for Storm on HDInsight</source>
          <target state="new">Example topologies for Storm on HDInsight</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a454a9f559910444581fda60b0b1f836163a47d</xliffext:olfilehash>
  </header>
</xliff>