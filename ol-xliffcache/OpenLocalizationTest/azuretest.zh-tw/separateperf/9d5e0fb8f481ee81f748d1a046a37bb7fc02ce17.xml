{
  "nodes": [
    {
      "content": "Web app with table storage (Node.js) | Microsoft Azure",
      "pos": [
        28,
        82
      ]
    },
    {
      "content": "A tutorial that builds on the Web App with Express tutorial by adding Azure Storage services and the Azure module.",
      "pos": [
        102,
        216
      ]
    },
    {
      "content": "Node.js Web Application using Storage",
      "pos": [
        552,
        589
      ]
    },
    {
      "content": "Overview",
      "pos": [
        594,
        602
      ]
    },
    {
      "content": "In this tutorial, you will extend the application created in the",
      "pos": [
        604,
        668
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Web Application using Express]</ept> tutorial by using the Microsoft",
      "pos": [
        669,
        740
      ]
    },
    {
      "content": "Azure Client Libraries for Node.js to work with data management services.",
      "pos": [
        741,
        814
      ]
    },
    {
      "content": "You",
      "pos": [
        815,
        818
      ]
    },
    {
      "content": "will extend your application to create a web-based task-list application",
      "pos": [
        819,
        891
      ]
    },
    {
      "content": "that you can deploy to Azure.",
      "pos": [
        892,
        921
      ]
    },
    {
      "content": "The task list allows a user to",
      "pos": [
        922,
        952
      ]
    },
    {
      "content": "retrieve tasks, add new tasks, and mark tasks as completed.",
      "pos": [
        953,
        1012
      ]
    },
    {
      "content": "The task items are stored in Azure Storage.",
      "pos": [
        1014,
        1057
      ]
    },
    {
      "content": "Azure",
      "pos": [
        1058,
        1063
      ]
    },
    {
      "content": "Storage provides unstructured data storage that is fault-tolerant and",
      "pos": [
        1064,
        1133
      ]
    },
    {
      "content": "highly available.",
      "pos": [
        1134,
        1151
      ]
    },
    {
      "content": "Azure Storage includes several data structures",
      "pos": [
        1152,
        1198
      ]
    },
    {
      "content": "where you can store and access data, and you can leverage the storage",
      "pos": [
        1199,
        1268
      ]
    },
    {
      "content": "services from the APIs included in the Azure SDK for Node.js or",
      "pos": [
        1269,
        1332
      ]
    },
    {
      "content": "via REST APIs.",
      "pos": [
        1333,
        1347
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Storing and Accessing Data in Azure]</ept>.",
      "pos": [
        1348,
        1412
      ]
    },
    {
      "pos": [
        1414,
        1566
      ],
      "content": "This tutorial assumes that you have completed the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">Node.js Web</ph>\nApplication<ept id=\"p1\">]</ept> and <bpt id=\"p2\">[</bpt>Node.js with Express<ept id=\"p2\">][Node.js Web Application using Express]</ept> tutorials."
    },
    {
      "content": "You will learn:",
      "pos": [
        1568,
        1583
      ]
    },
    {
      "content": "How to work with the Jade template engine",
      "pos": [
        1589,
        1630
      ]
    },
    {
      "content": "How to work with Azure Data Management services",
      "pos": [
        1635,
        1682
      ]
    },
    {
      "content": "A screenshot of the completed application is below:",
      "pos": [
        1684,
        1735
      ]
    },
    {
      "content": "The completed web page in internet explorer",
      "pos": [
        1739,
        1782
      ]
    },
    {
      "content": "Setting Storage Credentials in Web.Config",
      "pos": [
        1870,
        1911
      ]
    },
    {
      "content": "To access Azure Storage, you need to pass in storage",
      "pos": [
        1913,
        1965
      ]
    },
    {
      "content": "credentials.",
      "pos": [
        1966,
        1978
      ]
    },
    {
      "content": "To do this, you utilize web.config application settings.",
      "pos": [
        1979,
        2035
      ]
    },
    {
      "content": "Those settings will be passed as environment variables to Node, which",
      "pos": [
        2036,
        2105
      ]
    },
    {
      "content": "are then read by the Azure SDK.",
      "pos": [
        2106,
        2137
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Storage credentials are only used when the application is",
      "pos": [
        2141,
        2211
      ]
    },
    {
      "content": "deployed to Azure.",
      "pos": [
        2212,
        2230
      ]
    },
    {
      "content": "When running in the emulator, the application",
      "pos": [
        2231,
        2276
      ]
    },
    {
      "content": "will use the storage emulator.",
      "pos": [
        2277,
        2307
      ]
    },
    {
      "content": "Perform the following steps to retrieve the storage account credentials",
      "pos": [
        2309,
        2380
      ]
    },
    {
      "content": "and add them to the web.config settings:",
      "pos": [
        2381,
        2421
      ]
    },
    {
      "pos": [
        2427,
        2618
      ],
      "content": "If it is not already open, start the Azure PowerShell from the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> menu by expanding <bpt id=\"p2\">**</bpt>All Programs, Azure<ept id=\"p2\">**</ept>, right-click <bpt id=\"p3\">**</bpt>Azure PowerShell<ept id=\"p3\">**</ept>, and then select <bpt id=\"p4\">**</bpt>Run As Administrator<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Change directories to the folder containing your application.",
      "pos": [
        2624,
        2685
      ]
    },
    {
      "content": "For example, C:\\\\node\\\\tasklist\\\\WebRole1.",
      "pos": [
        2686,
        2728
      ]
    },
    {
      "content": "From the Azure Powershell window enter the following cmdlet to retrieve the storage account information:",
      "pos": [
        2734,
        2838
      ]
    },
    {
      "content": "This retrieves the list of storage accounts and account keys associated with your hosted service.",
      "pos": [
        2908,
        3005
      ]
    },
    {
      "pos": [
        3013,
        3193
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Since the Azure SDK creates a storage account when you deploy a service, a storage account should already exist from deploying your application in the previous guides."
    },
    {
      "pos": [
        3199,
        3333
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>ServiceDefinition.csdef<ept id=\"p1\">**</ept> file containing the environment settings that are used when the application is deployed to Azure:"
    },
    {
      "pos": [
        3401,
        3612
      ],
      "content": "Insert the following block under <bpt id=\"p1\">**</bpt>Environment<ept id=\"p1\">**</ept> element, substituting {STORAGE ACCOUNT} and {STORAGE ACCESS KEY} with the account name and the primary key for the storage account you want to use for deployment:"
    },
    {
      "content": "The web.cloud.config file contents",
      "pos": [
        3779,
        3813
      ]
    },
    {
      "content": "Save the file and close notepad.",
      "pos": [
        3891,
        3923
      ]
    },
    {
      "content": "Install additional modules",
      "pos": [
        3929,
        3955
      ]
    },
    {
      "pos": [
        3960,
        4125
      ],
      "content": "Use the following command to install the [azure], [node-uuid], [nconf] and [async] modules locally as well as to save an entry for them to the <bpt id=\"p1\">**</bpt>package.json<ept id=\"p1\">**</ept> file:"
    },
    {
      "content": "The output of this command should appear similar to the following:",
      "pos": [
        4225,
        4291
      ]
    },
    {
      "content": "Using the Table service in a node application",
      "pos": [
        4955,
        5000
      ]
    },
    {
      "content": "In this section you will extend the basic application created by the <bpt id=\"p1\">**</bpt>express<ept id=\"p1\">**</ept> command by adding a <bpt id=\"p2\">**</bpt>task.js<ept id=\"p2\">**</ept> file which contains the model for your tasks.",
      "pos": [
        5002,
        5160
      ]
    },
    {
      "content": "You will also modify the existing <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> and create a new <bpt id=\"p2\">**</bpt>tasklist.js<ept id=\"p2\">**</ept> file that uses the model.",
      "pos": [
        5161,
        5264
      ]
    },
    {
      "content": "Create the model",
      "pos": [
        5270,
        5286
      ]
    },
    {
      "pos": [
        5291,
        5362
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>WebRole1<ept id=\"p1\">**</ept> directory, create a new directory named <bpt id=\"p2\">**</bpt>models<ept id=\"p2\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>models<ept id=\"p1\">**</ept> directory, create a new file named <bpt id=\"p2\">**</bpt>task.js<ept id=\"p2\">**</ept>.",
      "pos": [
        5367,
        5432
      ]
    },
    {
      "content": "This file will contain the model for the tasks created by your application.",
      "pos": [
        5433,
        5508
      ]
    },
    {
      "pos": [
        5513,
        5610
      ],
      "content": "At the beginning of the <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> file, add the following code to reference required libraries:"
    },
    {
      "content": "Next, you will add code to define and export the Task object.",
      "pos": [
        5765,
        5826
      ]
    },
    {
      "content": "This object is responsible for connecting to the table.",
      "pos": [
        5827,
        5882
      ]
    },
    {
      "content": "Next, add the following code to define additional methods on the Task object, which allow interactions with data stored in the table:",
      "pos": [
        6296,
        6429
      ]
    },
    {
      "pos": [
        8187,
        8223
      ],
      "content": "Save and close the <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Create the controller",
      "pos": [
        8229,
        8250
      ]
    },
    {
      "pos": [
        8255,
        8362
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>WebRole1/routes<ept id=\"p1\">**</ept> directory, create a new file named <bpt id=\"p2\">**</bpt>tasklist.js<ept id=\"p2\">**</ept> and open it in a text editor."
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept>.",
      "pos": [
        8367,
        8409
      ]
    },
    {
      "content": "This loads the azure and async modules, which are used by <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept>.",
      "pos": [
        8410,
        8484
      ]
    },
    {
      "content": "This also defines the <bpt id=\"p1\">**</bpt>TaskList<ept id=\"p1\">**</ept> function, which is passed an instance of the <bpt id=\"p2\">**</bpt>Task<ept id=\"p2\">**</ept> object we defined earlier:",
      "pos": [
        8485,
        8600
      ]
    },
    {
      "pos": [
        8799,
        8923
      ],
      "content": "Continue adding to the <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept> file by adding the methods used to <bpt id=\"p2\">**</bpt>showTasks<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>addTask<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>completeTasks<ept id=\"p4\">**</ept>:"
    },
    {
      "pos": [
        10263,
        10293
      ],
      "content": "Save the <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Modify app.js",
      "pos": [
        10299,
        10312
      ]
    },
    {
      "pos": [
        10317,
        10390
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>WebRole1<ept id=\"p1\">**</ept> directory, open the <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept> file in a text editor."
    },
    {
      "content": "At the beginning of the file, add the following to load the azure module and set the table name and partition key:",
      "pos": [
        10396,
        10510
      ]
    },
    {
      "content": "In the app.js file, scroll down to where you see the following line:",
      "pos": [
        10635,
        10703
      ]
    },
    {
      "content": "Replace the above lines with the code shown below.",
      "pos": [
        10774,
        10824
      ]
    },
    {
      "content": "This will initialize an instance of <ph id=\"ph1\">&lt;strong&gt;</ph>Task<ph id=\"ph2\">&lt;/strong&gt;</ph> with a connection to your storage account.",
      "pos": [
        10825,
        10925
      ]
    },
    {
      "content": "This is passed to the <ph id=\"ph1\">&lt;strong&gt;</ph>TaskList<ph id=\"ph2\">&lt;/strong&gt;</ph>, which will use it to communicate with the Table service:",
      "pos": [
        10926,
        11031
      ]
    },
    {
      "pos": [
        11458,
        11483
      ],
      "content": "Save the <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Modify the index view",
      "pos": [
        11489,
        11510
      ]
    },
    {
      "pos": [
        11515,
        11611
      ],
      "content": "Change directories to the <bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> directory and open the <bpt id=\"p2\">**</bpt>index.jade<ept id=\"p2\">**</ept> file in a text editor."
    },
    {
      "content": "Replace the contents of the <bpt id=\"p1\">**</bpt>index.jade<ept id=\"p1\">**</ept> file with the code below.",
      "pos": [
        11616,
        11684
      ]
    },
    {
      "content": "This defines the view for displaying existing tasks, as well as a form for adding new tasks and marking existing ones as completed.",
      "pos": [
        11685,
        11816
      ]
    },
    {
      "pos": [
        13118,
        13153
      ],
      "content": "Save and close <bpt id=\"p1\">**</bpt>index.jade<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Modify the global layout",
      "pos": [
        13159,
        13183
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>layout.jade<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">**</bpt>views<ept id=\"p2\">**</ept> directory is used as a global template for other <bpt id=\"p3\">**</bpt>.jade<ept id=\"p3\">**</ept> files.",
      "pos": [
        13185,
        13292
      ]
    },
    {
      "content": "In this step you will modify it to use <bpt id=\"p1\">[</bpt>Twitter Bootstrap<ept id=\"p1\">](https://github.com/twbs/bootstrap)</ept>, which is a toolkit that makes it easy to design a nice looking website.",
      "pos": [
        13293,
        13459
      ]
    },
    {
      "content": "Download and extract the files for <bpt id=\"p1\">[</bpt>Twitter Bootstrap<ept id=\"p1\">](http://getbootstrap.com/)</ept>.",
      "pos": [
        13464,
        13545
      ]
    },
    {
      "content": "Copy the <bpt id=\"p1\">**</bpt>bootstrap.min.css<ept id=\"p1\">**</ept> file from the <bpt id=\"p2\">**</bpt>bootstrap\\\\dist\\\\css<ept id=\"p2\">**</ept> folder to the <bpt id=\"p3\">**</bpt>public\\\\stylesheets<ept id=\"p3\">**</ept> directory of your tasklist application.",
      "pos": [
        13546,
        13693
      ]
    },
    {
      "pos": [
        13698,
        13814
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> folder, open the <bpt id=\"p2\">**</bpt>layout.jade<ept id=\"p2\">**</ept> in your text editor and replace the contents with the following:"
    },
    {
      "pos": [
        14199,
        14229
      ],
      "content": "Save the <bpt id=\"p1\">**</bpt>layout.jade<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Running the Application in the Emulator",
      "pos": [
        14235,
        14274
      ]
    },
    {
      "content": "Use the following command to start the application in the emulator.",
      "pos": [
        14276,
        14343
      ]
    },
    {
      "content": "The browser will open and displays the following page:",
      "pos": [
        14408,
        14462
      ]
    },
    {
      "content": "A web paged titled My Task List with a table containing tasks and fields to add a new task.",
      "pos": [
        14466,
        14557
      ]
    },
    {
      "content": "Use the form to add items, or remove existing items by marking them as completed.",
      "pos": [
        14631,
        14712
      ]
    },
    {
      "content": "Publishing the Application to Azure",
      "pos": [
        14717,
        14752
      ]
    },
    {
      "content": "In the Windows PowerShell window, call the following cmdlet to redeploy your hosted service to Azure.",
      "pos": [
        14755,
        14856
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>myuniquename<ept id=\"p1\">**</ept> with a unique name for this application.",
      "pos": [
        14973,
        15038
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>datacentername<ept id=\"p1\">**</ept> with the name of an Azure data center, such as <bpt id=\"p2\">**</bpt>West US<ept id=\"p2\">**</ept>.",
      "pos": [
        15039,
        15125
      ]
    },
    {
      "content": "After the deployment is complete, you should see a response similar to the following:",
      "pos": [
        15127,
        15212
      ]
    },
    {
      "pos": [
        16097,
        16248
      ],
      "content": "As before, because you specified the <bpt id=\"p1\">**</bpt>-launch<ept id=\"p1\">**</ept> option, the browser opens and displays your application running in Azure when publishing is completed."
    },
    {
      "content": "A browser window displaying the My Task List page.",
      "pos": [
        16252,
        16302
      ]
    },
    {
      "content": "The URL indicates the page is now being hosted on Azure.",
      "pos": [
        16303,
        16359
      ]
    },
    {
      "content": "Stopping and Deleting Your Application",
      "pos": [
        16447,
        16485
      ]
    },
    {
      "content": "After deploying your application, you may want to disable it so you can",
      "pos": [
        16487,
        16558
      ]
    },
    {
      "content": "avoid costs or build and deploy other applications within the free trial",
      "pos": [
        16559,
        16631
      ]
    },
    {
      "content": "time period.",
      "pos": [
        16632,
        16644
      ]
    },
    {
      "content": "Azure bills web role instances per hour of server time consumed.",
      "pos": [
        16646,
        16710
      ]
    },
    {
      "content": "Server time is consumed once your application is deployed, even if the",
      "pos": [
        16711,
        16781
      ]
    },
    {
      "content": "instances are not running and are in the stopped state.",
      "pos": [
        16782,
        16837
      ]
    },
    {
      "content": "The following steps show you how to stop and delete your application.",
      "pos": [
        16839,
        16908
      ]
    },
    {
      "pos": [
        16914,
        17038
      ],
      "content": "In the Windows PowerShell window, stop the service deployment\ncreated in the previous section with the following cmdlet:",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In the Windows PowerShell window, stop the service deployment",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "created in the previous section with the following cmdlet:",
          "pos": [
            62,
            120
          ]
        }
      ]
    },
    {
      "content": "Stopping the service may take several minutes.",
      "pos": [
        17101,
        17147
      ]
    },
    {
      "content": "When the service is stopped, you receive a message indicating that it has stopped.",
      "pos": [
        17148,
        17230
      ]
    },
    {
      "content": "To delete the service, call the following cmdlet:",
      "pos": [
        17236,
        17285
      ]
    },
    {
      "pos": [
        17366,
        17415
      ],
      "content": "When prompted, enter <bpt id=\"p1\">**</bpt>Y<ept id=\"p1\">**</ept> to delete the service."
    },
    {
      "content": "Deleting the service may take several minutes.",
      "pos": [
        17421,
        17467
      ]
    },
    {
      "content": "After the service has been deleted you receive a message indicating that the service was deleted.",
      "pos": [
        17468,
        17565
      ]
    },
    {
      "content": "test",
      "pos": [
        17882,
        17886
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Web app with table storage (Node.js) | Microsoft Azure\" \n    description=\"A tutorial that builds on the Web App with Express tutorial by adding Azure Storage services and the Azure module.\" \n    services=\"cloud-services, storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"TomArcher\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"storage\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"09/01/2015\" \n    ms.author=\"tarcher\"/>\n\n\n\n\n\n\n# Node.js Web Application using Storage\n\n## Overview\n\nIn this tutorial, you will extend the application created in the\n[Node.js Web Application using Express] tutorial by using the Microsoft\nAzure Client Libraries for Node.js to work with data management services. You\nwill extend your application to create a web-based task-list application\nthat you can deploy to Azure. The task list allows a user to\nretrieve tasks, add new tasks, and mark tasks as completed.\n\nThe task items are stored in Azure Storage. Azure\nStorage provides unstructured data storage that is fault-tolerant and\nhighly available. Azure Storage includes several data structures\nwhere you can store and access data, and you can leverage the storage\nservices from the APIs included in the Azure SDK for Node.js or\nvia REST APIs. For more information, see [Storing and Accessing Data in Azure].\n\nThis tutorial assumes that you have completed the [Node.js Web\nApplication] and [Node.js with Express][Node.js Web Application using Express] tutorials.\n\nYou will learn:\n\n-   How to work with the Jade template engine\n-   How to work with Azure Data Management services\n\nA screenshot of the completed application is below:\n\n![The completed web page in internet explorer](./media/storage-nodejs-use-table-storage-cloud-service-app/getting-started-1.png)\n\n## Setting Storage Credentials in Web.Config\n\nTo access Azure Storage, you need to pass in storage\ncredentials. To do this, you utilize web.config application settings.\nThose settings will be passed as environment variables to Node, which\nare then read by the Azure SDK.\n\n> [AZURE.NOTE] Storage credentials are only used when the application is\ndeployed to Azure. When running in the emulator, the application\nwill use the storage emulator.\n\nPerform the following steps to retrieve the storage account credentials\nand add them to the web.config settings:\n\n1.  If it is not already open, start the Azure PowerShell from the **Start** menu by expanding **All Programs, Azure**, right-click **Azure PowerShell**, and then select **Run As Administrator**.\n\n2.  Change directories to the folder containing your application. For example, C:\\\\node\\\\tasklist\\\\WebRole1.\n\n3.  From the Azure Powershell window enter the following cmdlet to retrieve the storage account information:\n\n        PS C:\\node\\tasklist\\WebRole1> Get-AzureStorageAccounts\n\n    This retrieves the list of storage accounts and account keys associated with your hosted service.\n\n    > [AZURE.NOTE] Since the Azure SDK creates a storage account when you deploy a service, a storage account should already exist from deploying your application in the previous guides.\n\n4.  Open the **ServiceDefinition.csdef** file containing the environment settings that are used when the application is deployed to Azure:\n\n        PS C:\\node\\tasklist> notepad ServiceDefinition.csdef\n\n5.  Insert the following block under **Environment** element, substituting {STORAGE ACCOUNT} and {STORAGE ACCESS KEY} with the account name and the primary key for the storage account you want to use for deployment:\n\n        <Variable name=\"AZURE_STORAGE_ACCOUNT\" value=\"{STORAGE ACCOUNT}\" />\n        <Variable name=\"AZURE_STORAGE_ACCESS_KEY\" value=\"{STORAGE ACCESS KEY}\" />\n\n    ![The web.cloud.config file contents](./media/storage-nodejs-use-table-storage-cloud-service-app/node37.png)\n\n6.  Save the file and close notepad.\n\n### Install additional modules\n\n2. Use the following command to install the [azure], [node-uuid], [nconf] and [async] modules locally as well as to save an entry for them to the **package.json** file:\n\n        PS C:\\node\\tasklist\\WebRole1> npm install azure-storage node-uuid async nconf --save\n\n    The output of this command should appear similar to the following:\n\n        node-uuid@1.4.1 node_modules\\node-uuid\n\n        nconf@0.6.9 node_modules\\nconf\n        ├── ini@1.1.0\n        ├── async@0.2.9\n        └── optimist@0.6.0 (wordwrap@0.0.2, minimist@0.0.8)\n\n        azure-storage@0.1.0 node_modules\\azure-storage\n        ├── extend@1.2.1\n        ├── xmlbuilder@0.4.3\n        ├── mime@1.2.11\n        ├── underscore@1.4.4\n        ├── validator@3.1.0\n        ├── node-uuid@1.4.1\n        ├── xml2js@0.2.7 (sax@0.5.2)\n        └── request@2.27.0 (json-stringify-safe@5.0.0, tunnel-agent@0.3.0, aws-sign@0.3.0, forever-agent@0.5.2, qs@0.6.6, oauth-sign@0.3.0, cookie-jar@0.3.0, hawk@1.0.0, form-data@0.1.3, http-signature@0.10.0)\n\n##Using the Table service in a node application\n\nIn this section you will extend the basic application created by the **express** command by adding a **task.js** file which contains the model for your tasks. You will also modify the existing **app.js** and create a new **tasklist.js** file that uses the model.\n\n### Create the model\n\n1. In the **WebRole1** directory, create a new directory named **models**.\n\n2. In the **models** directory, create a new file named **task.js**. This file will contain the model for the tasks created by your application.\n\n3. At the beginning of the **task.js** file, add the following code to reference required libraries:\n\n        var azure = require('azure-storage');\n        var uuid = require('node-uuid');\n        var entityGen = azure.TableUtilities.entityGenerator;\n\n4. Next, you will add code to define and export the Task object. This object is responsible for connecting to the table.\n\n        module.exports = Task;\n\n        function Task(storageClient, tableName, partitionKey) {\n          this.storageClient = storageClient;\n          this.tableName = tableName;\n          this.partitionKey = partitionKey;\n          this.storageClient.createTableIfNotExists(tableName, function tableCreated(error) {\n            if(error) {\n              throw error;\n            }\n          });\n        };\n\n5. Next, add the following code to define additional methods on the Task object, which allow interactions with data stored in the table:\n\n        Task.prototype = {\n          find: function(query, callback) {\n            self = this;\n            self.storageClient.queryEntities(query, function entitiesQueried(error, result) {\n              if(error) {\n                callback(error);\n              } else {\n                callback(null, result.entries);\n              }\n            });\n          },\n\n          addItem: function(item, callback) {\n            self = this;\n            // use entityGenerator to set types\n            // NOTE: RowKey must be a string type, even though\n            // it contains a GUID in this example.\n            var itemDescriptor = {\n              PartitionKey: entityGen.String(self.partitionKey),\n              RowKey: entityGen.String(uuid()),\n              name: entityGen.String(item.name),\n              category: entityGen.String(item.category),\n              completed: entityGen.Boolean(false)\n            };\n\n            self.storageClient.insertEntity(self.tableName, itemDescriptor, function entityInserted(error) {\n              if(error){  \n                callback(error);\n              }\n              callback(null);\n            });\n          },\n\n          updateItem: function(rKey, callback) {\n            self = this;\n            self.storageClient.retrieveEntity(self.tableName, self.partitionKey, rKey, function entityQueried(error, entity) {\n              if(error) {\n                callback(error);\n              }\n              entity.completed._ = true;\n              self.storageClient.updateEntity(self.tableName, entity, function entityUpdated(error) {\n                if(error) {\n                  callback(error);\n                }\n                callback(null);\n              });\n            });\n          }\n        }\n\n6. Save and close the **task.js** file.\n\n### Create the controller\n\n1. In the **WebRole1/routes** directory, create a new file named **tasklist.js** and open it in a text editor.\n\n2. Add the following code to **tasklist.js**. This loads the azure and async modules, which are used by **tasklist.js**. This also defines the **TaskList** function, which is passed an instance of the **Task** object we defined earlier:\n\n        var azure = require('azure-storage');\n        var async = require('async');\n\n        module.exports = TaskList;\n\n        function TaskList(task) {\n          this.task = task;\n        }\n\n2. Continue adding to the **tasklist.js** file by adding the methods used to **showTasks**, **addTask**, and **completeTasks**:\n\n        TaskList.prototype = {\n          showTasks: function(req, res) {\n            self = this;\n            var query = azure.TableQuery()\n              .where('completed eq ?', false);\n            self.task.find(query, function itemsFound(error, items) {\n              res.render('index',{title: 'My ToDo List ', tasks: items});\n            });\n          },\n\n          addTask: function(req,res) {\n            var self = this      \n            var item = req.body.item;\n            self.task.addItem(item, function itemAdded(error) {\n              if(error) {\n                throw error;\n              }\n              res.redirect('/');\n            });\n          },\n\n          completeTask: function(req,res) {\n            var self = this;\n            var completedTasks = Object.keys(req.body);\n            async.forEach(completedTasks, function taskIterator(completedTask, callback) {\n              self.task.updateItem(completedTask, function itemsUpdated(error) {\n                if(error){\n                  callback(error);\n                } else {\n                  callback(null);\n                }\n              });\n            }, function goHome(error){\n              if(error) {\n                throw error;\n              } else {\n               res.redirect('/');\n              }\n            });\n          }\n        }\n\n3. Save the **tasklist.js** file.\n\n### Modify app.js\n\n1. In the **WebRole1** directory, open the **app.js** file in a text editor. \n\n2. At the beginning of the file, add the following to load the azure module and set the table name and partition key:\n\n        var azure = require('azure-storage');\n        var tableName = 'tasks';\n        var partitionKey = 'hometasks';\n\n3. In the app.js file, scroll down to where you see the following line:\n\n        app.use('/', routes);\n        app.use('/users', users);\n\n    Replace the above lines with the code shown below. This will initialize an instance of <strong>Task</strong> with a connection to your storage account. This is passed to the <strong>TaskList</strong>, which will use it to communicate with the Table service:\n\n        var TaskList = require('./routes/tasklist');\n        var Task = require('./models/task');\n        var task = new Task(azure.createTableService(), tableName, partitionKey);\n        var taskList = new TaskList(task);\n\n        app.get('/', taskList.showTasks.bind(taskList));\n        app.post('/addtask', taskList.addTask.bind(taskList));\n        app.post('/completetask', taskList.completeTask.bind(taskList));\n    \n4. Save the **app.js** file.\n\n### Modify the index view\n\n1. Change directories to the **views** directory and open the **index.jade** file in a text editor.\n\n2. Replace the contents of the **index.jade** file with the code below. This defines the view for displaying existing tasks, as well as a form for adding new tasks and marking existing ones as completed.\n\n        extends layout\n\n        block content\n          h1= title\n          br\n        \n          form(action=\"/completetask\", method=\"post\")\n            table.table.table-striped.table-bordered\n              tr\n                td Name\n                td Category\n                td Date\n                td Complete\n              if tasks != []\n                tr\n                  td \n              else\n                each task in tasks\n                  tr\n                    td #{task.name._}\n                    td #{task.category._}\n                    - var day   = task.Timestamp._.getDate();\n                    - var month = task.Timestamp._.getMonth() + 1;\n                    - var year  = task.Timestamp._.getFullYear();\n                    td #{month + \"/\" + day + \"/\" + year}\n                    td\n                      input(type=\"checkbox\", name=\"#{task.RowKey._}\", value=\"#{!task.completed._}\", checked=task.completed._)\n            button.btn(type=\"submit\") Update tasks\n          hr\n          form.well(action=\"/addtask\", method=\"post\")\n            label Item Name: \n            input(name=\"item[name]\", type=\"textbox\")\n            label Item Category: \n            input(name=\"item[category]\", type=\"textbox\")\n            br\n            button.btn(type=\"submit\") Add item\n\n3. Save and close **index.jade** file.\n\n### Modify the global layout\n\nThe **layout.jade** file in the **views** directory is used as a global template for other **.jade** files. In this step you will modify it to use [Twitter Bootstrap](https://github.com/twbs/bootstrap), which is a toolkit that makes it easy to design a nice looking website.\n\n1. Download and extract the files for [Twitter Bootstrap](http://getbootstrap.com/). Copy the **bootstrap.min.css** file from the **bootstrap\\\\dist\\\\css** folder to the **public\\\\stylesheets** directory of your tasklist application.\n\n2. From the **views** folder, open the **layout.jade** in your text editor and replace the contents with the following:\n\n        doctype html\n        html\n          head\n            title= title\n            link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')\n            link(rel='stylesheet', href='/stylesheets/style.css')\n          body.app\n            nav.navbar.navbar-default\n              div.navbar-header\n                a.navbar-brand(href='/') My Tasks\n            block content\n\n3. Save the **layout.jade** file.\n\n### Running the Application in the Emulator\n\nUse the following command to start the application in the emulator.\n\n    PS C:\\node\\tasklist\\WebRole1> start-azureemulator -launch\n\nThe browser will open and displays the following page:\n\n![A web paged titled My Task List with a table containing tasks and fields to add a new task.](./media/storage-nodejs-use-table-storage-cloud-service-app/node44.png)\n\nUse the form to add items, or remove existing items by marking them as completed.\n\n## Publishing the Application to Azure\n\n\nIn the Windows PowerShell window, call the following cmdlet to redeploy your hosted service to Azure.\n\n    PS C:\\node\\tasklist\\WebRole1> Publish-AzureServiceProject -name myuniquename -location datacentername -launch\n\nReplace **myuniquename** with a unique name for this application. Replace **datacentername** with the name of an Azure data center, such as **West US**.\n\nAfter the deployment is complete, you should see a response similar to the following:\n\n    PS C:\\node\\tasklist> publish-azureserviceproject -servicename tasklist -location \"West US\"\n    WARNING: Publishing tasklist to Microsoft Azure. This may take several minutes...\n    WARNING: 2:18:42 PM - Preparing runtime deployment for service 'tasklist'\n    WARNING: 2:18:42 PM - Verifying storage account 'tasklist'...\n    WARNING: 2:18:43 PM - Preparing deployment for tasklist with Subscription ID: 65a1016d-0f67-45d2-b838-b8f373d6d52e...\n    WARNING: 2:19:01 PM - Connecting...\n    WARNING: 2:19:02 PM - Uploading Package to storage service larrystore...\n    WARNING: 2:19:40 PM - Upgrading...\n    WARNING: 2:22:48 PM - Created Deployment ID: b7134ab29b1249ff84ada2bd157f296a.\n    WARNING: 2:22:48 PM - Initializing...\n    WARNING: 2:22:49 PM - Instance WebRole1_IN_0 of role WebRole1 is ready.\n    WARNING: 2:22:50 PM - Created Website URL: http://tasklist.cloudapp.net/.\n\nAs before, because you specified the **-launch** option, the browser opens and displays your application running in Azure when publishing is completed.\n\n![A browser window displaying the My Task List page. The URL indicates the page is now being hosted on Azure.](./media/storage-nodejs-use-table-storage-cloud-service-app/getting-started-1.png)\n\n## Stopping and Deleting Your Application\n\nAfter deploying your application, you may want to disable it so you can\navoid costs or build and deploy other applications within the free trial\ntime period.\n\nAzure bills web role instances per hour of server time consumed.\nServer time is consumed once your application is deployed, even if the\ninstances are not running and are in the stopped state.\n\nThe following steps show you how to stop and delete your application.\n\n1.  In the Windows PowerShell window, stop the service deployment\n    created in the previous section with the following cmdlet:\n\n        PS C:\\node\\tasklist\\WebRole1> Stop-AzureService\n\n    Stopping the service may take several minutes. When the service is stopped, you receive a message indicating that it has stopped.\n\n3.  To delete the service, call the following cmdlet:\n\n        PS C:\\node\\tasklist\\WebRole1> Remove-AzureService contosotasklist\n\n    When prompted, enter **Y** to delete the service.\n\n    Deleting the service may take several minutes. After the service has been deleted you receive a message indicating that the service was deleted.\n\n  [Node.js Web Application using Express]: http://azure.microsoft.com/develop/nodejs/tutorials/web-app-with-express/\n  [Storing and Accessing Data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Node.js Web Application]: http://azure.microsoft.com/develop/nodejs/tutorials/getting-started/\n \n \n\ntest\n"
}