<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using offline data in Mobile Services (Xamarin Android) | Microsoft Azure</source>
          <target state="new">Using offline data in Mobile Services (Xamarin Android) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Azure Mobile Services to cache and sync offline data in your Xamarin Android application</source>
          <target state="new">Learn how to use Azure Mobile Services to cache and sync offline data in your Xamarin Android application</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using offline data sync in Mobile Services</source>
          <target state="new">Using offline data sync in Mobile Services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic walks through the offline sync capabilities of Azure Mobile Services in the todo list quickstart app.</source>
          <target state="new">This topic walks through the offline sync capabilities of Azure Mobile Services in the todo list quickstart app.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Offline sync allows you to easily create apps that are usable even when the end user has no network access.</source>
          <target state="new">Offline sync allows you to easily create apps that are usable even when the end user has no network access.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Offline sync has several potential uses:</source>
          <target state="new">Offline sync has several potential uses:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Improve app responsiveness by caching server data locally on the device</source>
          <target state="new">Improve app responsiveness by caching server data locally on the device</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Make apps resilient against intermittent network connectivity</source>
          <target state="new">Make apps resilient against intermittent network connectivity</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity</source>
          <target state="new">Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Sync data across multiple devices and detect conflicts when the same record is modified by two devices</source>
          <target state="new">Sync data across multiple devices and detect conflicts when the same record is modified by two devices</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To complete this tutorial, you need a Azure account.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To complete this tutorial, you need a Azure account.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you don't have an account, you can sign up for an Azure trial and get up to 10 free mobile services that you can keep using even after your trial ends.</source>
          <target state="new">If you don't have an account, you can sign up for an Azure trial and get up to 10 free mobile services that you can keep using even after your trial ends.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For details, see <ph id="ph1">&lt;a href="http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=AE564AB28" target="_blank"&gt;</ph>Azure Free Trial<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">For details, see <ph id="ph1">&lt;a href="http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=AE564AB28" target="_blank"&gt;</ph>Azure Free Trial<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If this is your first experience with Mobile Services, you should first complete [Get started with Mobile Services].</source>
          <target state="new">If this is your first experience with Mobile Services, you should first complete [Get started with Mobile Services].</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This tutorial walks you through these basic steps:</source>
          <target state="new">This tutorial walks you through these basic steps:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>[Review the Mobile Services sync code]</source>
          <target state="new">[Review the Mobile Services sync code]</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[Update the sync behavior of the app]</source>
          <target state="new">[Update the sync behavior of the app]</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>[Update the app to reconnect your mobile service]</source>
          <target state="new">[Update the app to reconnect your mobile service]</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This tutorial requires the following:</source>
          <target state="new">This tutorial requires the following:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual Studio with the [Xamarin extension] <bpt id="p1">**</bpt>or<ept id="p1">**</ept> [Xamarin Studio]</source>
          <target state="new">Visual Studio with the [Xamarin extension] <bpt id="p1">**</bpt>or<ept id="p1">**</ept> [Xamarin Studio]</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Completion of the [Get started with Mobile Services] tutorial</source>
          <target state="new">Completion of the [Get started with Mobile Services] tutorial</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="review-offline"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Review the Mobile Services sync code</source>
          <target state="new"><ph id="ph1">&lt;a name="review-offline"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Review the Mobile Services sync code</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Azure Mobile Services offline sync allows end users to interact with a local database when the network is not accessible.</source>
          <target state="new">Azure Mobile Services offline sync allows end users to interact with a local database when the network is not accessible.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To use these features in your app, you initialize <ph id="ph1">`MobileServiceClient.SyncContext`</ph> to a local store.</source>
          <target state="new">To use these features in your app, you initialize <ph id="ph1">`MobileServiceClient.SyncContext`</ph> to a local store.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then reference your table through the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface.</source>
          <target state="new">Then reference your table through the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section walks through the offline sync related code in <ph id="ph1">`ToDoActivity.cs`</ph>.</source>
          <target state="new">This section walks through the offline sync related code in <ph id="ph1">`ToDoActivity.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In Visual Studio or Xamarin Studio, open the project that you completed in the [Get started with Mobile Services] tutorial.</source>
          <target state="new">In Visual Studio or Xamarin Studio, open the project that you completed in the [Get started with Mobile Services] tutorial.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Open the file <ph id="ph1">`ToDoActivity.cs`</ph>.</source>
          <target state="new">Open the file <ph id="ph1">`ToDoActivity.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Notice the type of the member <ph id="ph1">`toDoTable`</ph> is <ph id="ph2">`IMobileServiceSyncTable`</ph>.</source>
          <target state="new">Notice the type of the member <ph id="ph1">`toDoTable`</ph> is <ph id="ph2">`IMobileServiceSyncTable`</ph>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Offline sync uses this sync table interface instead of <ph id="ph1">`IMobileServiceTable`</ph>.</source>
          <target state="new">Offline sync uses this sync table interface instead of <ph id="ph1">`IMobileServiceTable`</ph>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a sync table is used, all operations go to the local store and are only synchronized with the remote service with explicit push and pull operations.</source>
          <target state="new">When a sync table is used, all operations go to the local store and are only synchronized with the remote service with explicit push and pull operations.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To get a reference to a sync table, the method <ph id="ph1">`GetSyncTable()`</ph> is used.</source>
          <target state="new">To get a reference to a sync table, the method <ph id="ph1">`GetSyncTable()`</ph> is used.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To remove the offline sync functionality, you would instead use <ph id="ph1">`GetTable()`</ph>.</source>
          <target state="new">To remove the offline sync functionality, you would instead use <ph id="ph1">`GetTable()`</ph>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Before any table operations can be performed, the local store must be initialized.</source>
          <target state="new">Before any table operations can be performed, the local store must be initialized.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is done in the <ph id="ph1">`InitLocalStoreAsync`</ph> method:</source>
          <target state="new">This is done in the <ph id="ph1">`InitLocalStoreAsync`</ph> method:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This creates a local store using the class <ph id="ph1">`MobileServiceSQLiteStore`</ph>, which is provided in the Mobile Services SDK.</source>
          <target state="new">This creates a local store using the class <ph id="ph1">`MobileServiceSQLiteStore`</ph>, which is provided in the Mobile Services SDK.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also a provide a different local store implementation by implementing <ph id="ph1">`IMobileServiceLocalStore`</ph>.</source>
          <target state="new">You can also a provide a different local store implementation by implementing <ph id="ph1">`IMobileServiceLocalStore`</ph>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineTable`</ph> method creates a table in the local store that matches the fields in the provided type, <ph id="ph2">`ToDoItem`</ph> in this case.</source>
          <target state="new">The <ph id="ph1">`DefineTable`</ph> method creates a table in the local store that matches the fields in the provided type, <ph id="ph2">`ToDoItem`</ph> in this case.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The type doesn't have to include all of the columns that are in the remote database--it is possible to store just a subset of columns.</source>
          <target state="new">The type doesn't have to include all of the columns that are in the remote database--it is possible to store just a subset of columns.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This overload of <ph id="ph1">`InitializeAsync`</ph> uses the default conflict handler, which fails whenever there is a conflict.</source>
          <target state="new">This overload of <ph id="ph1">`InitializeAsync`</ph> uses the default conflict handler, which fails whenever there is a conflict.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To provide a custom conflict handler, see the tutorial [Handling conflicts with offline support for Mobile Services].</source>
          <target state="new">To provide a custom conflict handler, see the tutorial [Handling conflicts with offline support for Mobile Services].</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph1">`SyncAsync`</ph> triggers the actual sync operation:</source>
          <target state="new">The method <ph id="ph1">`SyncAsync`</ph> triggers the actual sync operation:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>First, there is a call to <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</source>
          <target state="new">First, there is a call to <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</source>
          <target state="new">This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</source>
          <target state="new">Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, the method calls <ph id="ph1">`IMobileServiceSyncTable.PullAsync()`</ph> to pull data from a table on the server to the app.</source>
          <target state="new">Next, the method calls <ph id="ph1">`IMobileServiceSyncTable.PullAsync()`</ph> to pull data from a table on the server to the app.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that if there are any changes pending in the sync context, a pull always issues a push first.</source>
          <target state="new">Note that if there are any changes pending in the sync context, a pull always issues a push first.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is to ensure all tables in the local store along with relationships are consistent.</source>
          <target state="new">This is to ensure all tables in the local store along with relationships are consistent.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this case, we have called push explicitly.</source>
          <target state="new">In this case, we have called push explicitly.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this example, we retrieve all records in the remote <ph id="ph1">`TodoItem`</ph> table, but it is also possible to filter records by passing a query.</source>
          <target state="new">In this example, we retrieve all records in the remote <ph id="ph1">`TodoItem`</ph> table, but it is also possible to filter records by passing a query.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The first parameter to <ph id="ph1">`PullAsync()`</ph> is a query ID that is used for incremental sync, which uses the <ph id="ph2">`UpdatedAt`</ph> timestamp to get only those records modified since the last sync.</source>
          <target state="new">The first parameter to <ph id="ph1">`PullAsync()`</ph> is a query ID that is used for incremental sync, which uses the <ph id="ph2">`UpdatedAt`</ph> timestamp to get only those records modified since the last sync.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The query ID should be a descriptive string that is unique for each logical query in your app.</source>
          <target state="new">The query ID should be a descriptive string that is unique for each logical query in your app.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To opt-out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</source>
          <target state="new">To opt-out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This will retrieve all records on each pull operation, which is potentially inefficient.</source>
          <target state="new">This will retrieve all records on each pull operation, which is potentially inefficient.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Otherwise, your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</source>
          <target state="new">Otherwise, your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`MobileServicePushFailedException`</ph> can occur for both a push and a pull operation.</source>
          <target state="new">Note that the <ph id="ph1">`MobileServicePushFailedException`</ph> can occur for both a push and a pull operation.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The next tutorial, [Handling conflicts with offline support for Mobile Services], shows how to handle these sync related exceptions.</source>
          <target state="new">The next tutorial, [Handling conflicts with offline support for Mobile Services], shows how to handle these sync related exceptions.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the class <ph id="ph1">`ToDoActivity`</ph>, the method <ph id="ph2">`SyncAsync()`</ph> is called after the operations that modify data, <ph id="ph3">`AddItem()`</ph> and <ph id="ph4">`CheckItem()`</ph>.</source>
          <target state="new">In the class <ph id="ph1">`ToDoActivity`</ph>, the method <ph id="ph2">`SyncAsync()`</ph> is called after the operations that modify data, <ph id="ph3">`AddItem()`</ph> and <ph id="ph4">`CheckItem()`</ph>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is also called from <ph id="ph1">`OnRefreshItemsSelected()`</ph>, so that users get the latest data whenever they push the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button.</source>
          <target state="new">It is also called from <ph id="ph1">`OnRefreshItemsSelected()`</ph>, so that users get the latest data whenever they push the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The app also performs a sync on launch, since <ph id="ph1">`ToDoActivity.OnCreate()`</ph> calls <ph id="ph2">`OnRefreshItemsSelected()`</ph>.</source>
          <target state="new">The app also performs a sync on launch, since <ph id="ph1">`ToDoActivity.OnCreate()`</ph> calls <ph id="ph2">`OnRefreshItemsSelected()`</ph>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`SyncAsync()`</ph> is called whenever data is modified, this app assumes that the user is online whenever they are editing data.</source>
          <target state="new">Because <ph id="ph1">`SyncAsync()`</ph> is called whenever data is modified, this app assumes that the user is online whenever they are editing data.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the next section, we will update the app so that users can edit even when they are offline.</source>
          <target state="new">In the next section, we will update the app so that users can edit even when they are offline.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the sync behavior of the app</source>
          <target state="new"><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the sync behavior of the app</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In this section, you will modify the app so that it does not sync on app launch or on the insert and update operations, but only when the refresh button is pushed.</source>
          <target state="new">In this section, you will modify the app so that it does not sync on app launch or on the insert and update operations, but only when the refresh button is pushed.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Then, you will break the app connection with the mobile service to simulate an offline scenario.</source>
          <target state="new">Then, you will break the app connection with the mobile service to simulate an offline scenario.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When you add data items, they will be held in the local store, but not immediately synced to the mobile service.</source>
          <target state="new">When you add data items, they will be held in the local store, but not immediately synced to the mobile service.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the class <ph id="ph1">`ToDoActivity`</ph>, edit the methods <ph id="ph2">`AddItem()`</ph> and <ph id="ph3">`CheckItem()`</ph> to comment out the calls to <ph id="ph4">`SyncAsync()`</ph>.</source>
          <target state="new">In the class <ph id="ph1">`ToDoActivity`</ph>, edit the methods <ph id="ph2">`AddItem()`</ph> and <ph id="ph3">`CheckItem()`</ph> to comment out the calls to <ph id="ph4">`SyncAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`ToDoActivity`</ph>, comment out the definitions of the members <ph id="ph2">`applicationURL`</ph> and <ph id="ph3">`applicationKey`</ph>.</source>
          <target state="new">In <ph id="ph1">`ToDoActivity`</ph>, comment out the definitions of the members <ph id="ph2">`applicationURL`</ph> and <ph id="ph3">`applicationKey`</ph>.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Add the following lines, which reference an invalid mobile service URL:</source>
          <target state="new">Add the following lines, which reference an invalid mobile service URL:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`ToDoActivity.OnCreate()`</ph>, remove the call to <ph id="ph2">`OnRefreshItemsSelected()`</ph> and replace with:</source>
          <target state="new">In <ph id="ph1">`ToDoActivity.OnCreate()`</ph>, remove the call to <ph id="ph2">`OnRefreshItemsSelected()`</ph> and replace with:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Build and run the app.</source>
          <target state="new">Build and run the app.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Add some new todo items.</source>
          <target state="new">Add some new todo items.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These new items exist only in the local store until they can be pushed to the mobile service.</source>
          <target state="new">These new items exist only in the local store until they can be pushed to the mobile service.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The client app behaves as if is connected to the mobile service supporting all create, read, update, delete (CRUD) operations.</source>
          <target state="new">The client app behaves as if is connected to the mobile service supporting all create, read, update, delete (CRUD) operations.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Close the app and restart it to verify that the new items you created are persisted to the local store.</source>
          <target state="new">Close the app and restart it to verify that the new items you created are persisted to the local store.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to reconnect your mobile service</source>
          <target state="new"><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Update the app to reconnect your mobile service</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this section you will reconnect the app to the mobile service.</source>
          <target state="new">In this section you will reconnect the app to the mobile service.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This simulates the app moving from an offline state to an online state with the mobile service.</source>
          <target state="new">This simulates the app moving from an offline state to an online state with the mobile service.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When you push the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button, data will be synced to your mobile service.</source>
          <target state="new">When you push the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button, data will be synced to your mobile service.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`ToDoActivity.cs`</ph>.</source>
          <target state="new">Open <ph id="ph1">`ToDoActivity.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remove the invalid mobile service URL and add back the correct URL and app key.</source>
          <target state="new">Remove the invalid mobile service URL and add back the correct URL and app key.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Rebuild and run the app.</source>
          <target state="new">Rebuild and run the app.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Notice that the data looks the same as the offline scenario even though the app is now connected to the mobile service.</source>
          <target state="new">Notice that the data looks the same as the offline scenario even though the app is now connected to the mobile service.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This is because this app always uses the <ph id="ph1">`IMobileServiceSyncTable`</ph> that is pointed to the local store.</source>
          <target state="new">This is because this app always uses the <ph id="ph1">`IMobileServiceSyncTable`</ph> that is pointed to the local store.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Log into the Microsoft Azure Management portal and look at the database for your mobile service.</source>
          <target state="new">Log into the Microsoft Azure Management portal and look at the database for your mobile service.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If your service uses the JavaScript backend, you can browse the data from the <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> tab of the mobile service.</source>
          <target state="new">If your service uses the JavaScript backend, you can browse the data from the <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> tab of the mobile service.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you are using the .NET backend for your mobile service, in Visual Studio go to <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept> -&gt; <bpt id="p2">**</bpt>Azure<ept id="p2">**</ept> -&gt; <bpt id="p3">**</bpt>SQL Databases<ept id="p3">**</ept>.</source>
          <target state="new">If you are using the .NET backend for your mobile service, in Visual Studio go to <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept> -&gt; <bpt id="p2">**</bpt>Azure<ept id="p2">**</ept> -&gt; <bpt id="p3">**</bpt>SQL Databases<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Right click your database and select <bpt id="p1">**</bpt>Open in SQL Server Object Explorer<ept id="p1">**</ept>.</source>
          <target state="new">Right click your database and select <bpt id="p1">**</bpt>Open in SQL Server Object Explorer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Notice the data has <bpt id="p1">*</bpt>not<ept id="p1">*</ept> been synchronized between the database and the local store.</source>
          <target state="new">Notice the data has <bpt id="p1">*</bpt>not<ept id="p1">*</ept> been synchronized between the database and the local store.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the app, push the refresh button.</source>
          <target state="new">In the app, push the refresh button.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This calls <ph id="ph1">`OnRefreshItemsSelected()`</ph>, which in turn calls <ph id="ph2">`SyncAsync()`</ph>.</source>
          <target state="new">This calls <ph id="ph1">`OnRefreshItemsSelected()`</ph>, which in turn calls <ph id="ph2">`SyncAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This will perform the push and pull operations, first sending the local store items to the mobile service, then retrieving new data from the service.</source>
          <target state="new">This will perform the push and pull operations, first sending the local store items to the mobile service, then retrieving new data from the service.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Check the database for your mobile service to confirm that changes have been synchronized.</source>
          <target state="new">Check the database for your mobile service to confirm that changes have been synchronized.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[Handling conflicts with offline support for Mobile Services]</source>
          <target state="new">[Handling conflicts with offline support for Mobile Services]</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[How to use the Xamarin Component client for Azure Mobile Services]</source>
          <target state="new">[How to use the Xamarin Component client for Azure Mobile Services]</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdfa421e67695fae1236942f51d7aeb3ad5b4444</xliffext:olfilehash>
  </header>
</xliff>