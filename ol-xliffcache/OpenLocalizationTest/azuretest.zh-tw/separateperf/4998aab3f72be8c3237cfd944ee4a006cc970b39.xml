{
  "nodes": [
    {
      "content": "Code sample: export to SQL from Application Insights using a worker role",
      "pos": [
        28,
        100
      ]
    },
    {
      "content": "Code your own analysis of telemetry in Application Insights by using the continuous export feature.",
      "pos": [
        120,
        219
      ]
    },
    {
      "content": "Code sample: export to SQL from Application Insights using a worker role",
      "pos": [
        536,
        608
      ]
    },
    {
      "content": "This article shows how to move your telemetry data from [Visual Studio Application Insights][start] into an Azure SQL database by using [Continuous Export][export] and a small amount of code.",
      "pos": [
        610,
        801
      ]
    },
    {
      "content": "Continuous export moves your telemetry into Azure Storage in JSON format, so we'll write some code to parse the JSON objects and create rows in a database table.",
      "pos": [
        804,
        965
      ]
    },
    {
      "content": "(More generally, Continuous Export is the way to do your own analysis of the telemetry your apps send to Application Insights.",
      "pos": [
        967,
        1093
      ]
    },
    {
      "content": "You could adapt this code sample to do other things with the exported telemetry.)",
      "pos": [
        1094,
        1175
      ]
    },
    {
      "content": "We'll start with the assumption that you already have the app you want to monitor.",
      "pos": [
        1177,
        1259
      ]
    },
    {
      "content": "Add Application Insights SDK",
      "pos": [
        1264,
        1292
      ]
    },
    {
      "content": "To monitor your application, you [add an Application Insights SDK][start] to your application.",
      "pos": [
        1294,
        1388
      ]
    },
    {
      "content": "There are different SDKs and helper tools for different platforms, IDEs and languages.",
      "pos": [
        1389,
        1475
      ]
    },
    {
      "content": "You can monitor web pages, Java or ASP.NET web servers, and mobile devices of several kinds.",
      "pos": [
        1476,
        1568
      ]
    },
    {
      "content": "All the SDKs send telemetry to the [Application Insights portal][portal], where you can use our powerful analysis and diagnostic tools, and export the data to storage.",
      "pos": [
        1569,
        1736
      ]
    },
    {
      "content": "To get started:",
      "pos": [
        1738,
        1753
      ]
    },
    {
      "pos": [
        1758,
        1831
      ],
      "content": "Get an <bpt id=\"p1\">[</bpt>account in Microsoft Azure<ept id=\"p1\">](http://azure.microsoft.com/pricing/)</ept>."
    },
    {
      "content": "In the [Azure portal][portal], add a new Application Insights resource for your app:",
      "pos": [
        1835,
        1919
      ]
    },
    {
      "content": "Choose New, Developer Services, Application Insights, and choose the type of application",
      "pos": [
        1927,
        2015
      ]
    },
    {
      "content": "Open Quick Start to find how to set up the SDK for your app type.",
      "pos": [
        2159,
        2224
      ]
    },
    {
      "content": "Choose Quick Start and follow instructions",
      "pos": [
        2232,
        2274
      ]
    },
    {
      "content": "If your app type isn't listed, take a look at the [Getting Started][start] page.",
      "pos": [
        2359,
        2439
      ]
    },
    {
      "content": "In this example, we're monitoring a web app, so we can use the Azure tools in Visual Studio to install the SDK.",
      "pos": [
        2444,
        2555
      ]
    },
    {
      "content": "We tell it the name of our Application Insights resource:",
      "pos": [
        2556,
        2613
      ]
    },
    {
      "content": "In Visual Studio, in the New Project dialog, check Add Application Insights, and under Send telemetry to, choose to create a new app, or use an existing one.",
      "pos": [
        2621,
        2778
      ]
    },
    {
      "content": "Create storage in Azure",
      "pos": [
        2869,
        2892
      ]
    },
    {
      "content": "Create a storage account in your subscription in the [Azure portal][portal].",
      "pos": [
        2897,
        2973
      ]
    },
    {
      "content": "In Azure portal, choose New, Data, Storage",
      "pos": [
        2981,
        3023
      ]
    },
    {
      "content": "Create a container",
      "pos": [
        3107,
        3125
      ]
    },
    {
      "content": "In the new storage, select Containers and then Add",
      "pos": [
        3133,
        3183
      ]
    },
    {
      "content": "Start continuous export to Azure storage",
      "pos": [
        3272,
        3312
      ]
    },
    {
      "content": "In the Azure portal, browse to the Application Insights resource you created for your application.",
      "pos": [
        3317,
        3415
      ]
    },
    {
      "content": "Choose Browse, Application Insights, your application",
      "pos": [
        3423,
        3476
      ]
    },
    {
      "content": "Create a continuous export.",
      "pos": [
        3561,
        3588
      ]
    },
    {
      "content": "Choose Settings, Continuous Export, Add",
      "pos": [
        3596,
        3635
      ]
    },
    {
      "content": "Let some data accumulate.",
      "pos": [
        4036,
        4061
      ]
    },
    {
      "content": "Sit back and let people use your application for a while.",
      "pos": [
        4062,
        4119
      ]
    },
    {
      "content": "Telemetry will come in and you'll see statistical charts in <bpt id=\"p1\">[</bpt>metric explorer<ept id=\"p1\">](app-insights-metrics-explorer.md)</ept> and individual events in <bpt id=\"p2\">[</bpt>diagnostic search<ept id=\"p2\">](app-insights-diagnostic-search.md)</ept>.",
      "pos": [
        4120,
        4312
      ]
    },
    {
      "content": "And also, the data will export to your storage.",
      "pos": [
        4319,
        4366
      ]
    },
    {
      "content": "Inspect the exported data.",
      "pos": [
        4372,
        4398
      ]
    },
    {
      "content": "In Visual Studio, choose <bpt id=\"p1\">**</bpt>View / Cloud Explorer<ept id=\"p1\">**</ept>, and open Azure / Storage.",
      "pos": [
        4399,
        4476
      ]
    },
    {
      "content": "(If you don't have this menu option, you need to install the Azure SDK: Open the New Project dialog and open Visual C# / Cloud / Get Microsoft Azure SDK for .NET.)",
      "pos": [
        4477,
        4640
      ]
    },
    {
      "content": "In Visual Studio, open Server Browser, Azure, Storage",
      "pos": [
        4648,
        4701
      ]
    },
    {
      "content": "Make a note of the common part of the path name, which is derived from the application name and instrumentation key.",
      "pos": [
        4789,
        4905
      ]
    },
    {
      "content": "The events are written to blob files in JSON format.",
      "pos": [
        4908,
        4960
      ]
    },
    {
      "content": "Each file may contain one or more events.",
      "pos": [
        4961,
        5002
      ]
    },
    {
      "content": "So we'd like to read the event data and filter out the fields we want.",
      "pos": [
        5003,
        5073
      ]
    },
    {
      "content": "There are all kinds of things we could do with the data, but our plan today is to write some code to move the data to a SQL database.",
      "pos": [
        5074,
        5207
      ]
    },
    {
      "content": "That will make it easy to run lots of interesting queries.",
      "pos": [
        5208,
        5266
      ]
    },
    {
      "content": "Create an Azure SQL Database",
      "pos": [
        5271,
        5299
      ]
    },
    {
      "content": "Once again starting from your subscription in [Azure portal][portal], create the database (and a new server, unless you've already got one) to which you'll write the data.",
      "pos": [
        5301,
        5472
      ]
    },
    {
      "content": "New, Data, SQL",
      "pos": [
        5476,
        5490
      ]
    },
    {
      "content": "Make sure that the database server allows access to Azure services:",
      "pos": [
        5570,
        5637
      ]
    },
    {
      "content": "Browse, Servers, your server, Settings, Firewall, Allow Access to Azure",
      "pos": [
        5642,
        5713
      ]
    },
    {
      "content": "Create a worker role",
      "pos": [
        5802,
        5822
      ]
    },
    {
      "content": "Now we can write <bpt id=\"p1\">[</bpt>some code<ept id=\"p1\">](https://sesitai.codeplex.com/)</ept> to parse the JSON in the exported blobs, and create records in the database.",
      "pos": [
        5825,
        5961
      ]
    },
    {
      "content": "Since the export store and the database are both in Azure, we'll run the code in an Azure worker role.",
      "pos": [
        5962,
        6064
      ]
    },
    {
      "content": "This code automatically extracts whatever properties are present in the JSON.",
      "pos": [
        6066,
        6143
      ]
    },
    {
      "content": "For descriptions of the properties, see <bpt id=\"p1\">[</bpt>Export data model<ept id=\"p1\">](app-insights-export-data-model.md)</ept>.",
      "pos": [
        6144,
        6239
      ]
    },
    {
      "content": "Create worker role project",
      "pos": [
        6247,
        6273
      ]
    },
    {
      "content": "In Visual Studio, create a new project for the worker role:",
      "pos": [
        6275,
        6334
      ]
    },
    {
      "content": "New Project, Visual C#, Cloud, Azure Cloud Service",
      "pos": [
        6338,
        6388
      ]
    },
    {
      "content": "In new cloud service dialog, choose Visual C#, Worker Role",
      "pos": [
        6471,
        6529
      ]
    },
    {
      "content": "Connect to the storage account",
      "pos": [
        6617,
        6647
      ]
    },
    {
      "content": "In Azure, get the connection string from your Storage account:",
      "pos": [
        6649,
        6711
      ]
    },
    {
      "content": "In the Storage Account, select Keys, and copy Primary Connection String",
      "pos": [
        6715,
        6786
      ]
    },
    {
      "content": "In Visual Studio, configure the worker role settings with the Storage account connection string:",
      "pos": [
        6876,
        6972
      ]
    },
    {
      "content": "In Solution Explorer, under the Cloud Service project, expand Roles, and open your worker role.",
      "pos": [
        6977,
        7072
      ]
    },
    {
      "content": "Open the settings tab, choose Add Setting, and set name=StorageConnectionString, type=connection string, click to set the value.",
      "pos": [
        7073,
        7201
      ]
    },
    {
      "content": "Set it manually and paste the connection string.",
      "pos": [
        7202,
        7250
      ]
    },
    {
      "content": "Packages",
      "pos": [
        7349,
        7357
      ]
    },
    {
      "content": "In Solution Explorer, right-click your Worker Role project and choose Manage NuGet Packages.",
      "pos": [
        7359,
        7451
      ]
    },
    {
      "content": "Search for and install these packages:",
      "pos": [
        7452,
        7490
      ]
    },
    {
      "content": "EntityFramework 6.1.2 or later - We'll use this to generate the DB table schema on the fly, based on the content of the JSON in the blob.",
      "pos": [
        7496,
        7633
      ]
    },
    {
      "content": "JsonFx - We'll use this for flattening the JSON to C# class properties.",
      "pos": [
        7637,
        7708
      ]
    },
    {
      "content": "Use this tool to generate C# Class out of our single JSON document.",
      "pos": [
        7710,
        7777
      ]
    },
    {
      "content": "It requires some minor changes like flattening JSON arrays into single C# property in turn single column in DB table (ex.",
      "pos": [
        7778,
        7899
      ]
    },
    {
      "content": "urlData_port)",
      "pos": [
        7900,
        7913
      ]
    },
    {
      "content": "JSON C# class generator",
      "pos": [
        7920,
        7943
      ]
    },
    {
      "content": "Code",
      "pos": [
        7990,
        7994
      ]
    },
    {
      "pos": [
        7997,
        8038
      ],
      "content": "You can put this code in <ph id=\"ph1\">`WorkerRole.cs`</ph>."
    },
    {
      "content": "Imports",
      "pos": [
        8045,
        8052
      ]
    },
    {
      "content": "Retrieve the storage connection string",
      "pos": [
        8150,
        8188
      ]
    },
    {
      "content": "Run the worker at regular intervals",
      "pos": [
        8357,
        8392
      ]
    },
    {
      "content": "Replace the existing run method, and choose the interval you prefer.",
      "pos": [
        8394,
        8462
      ]
    },
    {
      "content": "It should be at least one hour, because the export feature completes one JSON object in an hour.",
      "pos": [
        8463,
        8559
      ]
    },
    {
      "content": "Insert each JSON object as a table row",
      "pos": [
        8917,
        8955
      ]
    },
    {
      "content": "Parse each blob",
      "pos": [
        10156,
        10171
      ]
    },
    {
      "content": "Prepare a dictionary for each JSON document",
      "pos": [
        12414,
        12457
      ]
    },
    {
      "content": "Cast the JSON document into C# class telemetry object properties",
      "pos": [
        13346,
        13410
      ]
    },
    {
      "content": "PageViewPerformance class file generated out of JSON document",
      "pos": [
        14385,
        14446
      ]
    },
    {
      "content": "DBcontext for SQL interaction by Entity Framework",
      "pos": [
        16840,
        16889
      ]
    },
    {
      "pos": [
        17131,
        17206
      ],
      "content": "Add your DB connection string with name <ph id=\"ph1\">`TelemetryContext`</ph> in <ph id=\"ph2\">`app.config`</ph>."
    },
    {
      "content": "Schema (information only)",
      "pos": [
        17211,
        17236
      ]
    },
    {
      "content": "This is the schema for the table that will be generated for PageView.",
      "pos": [
        17238,
        17307
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You don't have to run this script.",
      "pos": [
        17311,
        17358
      ]
    },
    {
      "content": "The attributes in the JSON determine the columns in the table.",
      "pos": [
        17359,
        17421
      ]
    },
    {
      "pos": [
        19764,
        19934
      ],
      "content": "To see this example in action, <bpt id=\"p1\">[</bpt>download<ept id=\"p1\">](https://sesitai.codeplex.com/)</ept> the complete working code, change the <ph id=\"ph1\">`app.config`</ph> settings and publish the worker role to Azure."
    },
    {
      "content": "Related articles",
      "pos": [
        19940,
        19956
      ]
    },
    {
      "content": "Export to SQL using a worker role",
      "pos": [
        19961,
        19994
      ]
    },
    {
      "content": "Continuous Export in Application Insights",
      "pos": [
        20058,
        20099
      ]
    },
    {
      "content": "Application Insights",
      "pos": [
        20138,
        20158
      ]
    },
    {
      "content": "Export data model",
      "pos": [
        20223,
        20240
      ]
    },
    {
      "content": "More samples and walkthroughs",
      "pos": [
        20280,
        20309
      ]
    },
    {
      "content": "test",
      "pos": [
        20577,
        20581
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Code sample: export to SQL from Application Insights using a worker role\" \n    description=\"Code your own analysis of telemetry in Application Insights by using the continuous export feature.\" \n    services=\"application-insights\" \n    documentationCenter=\"\"\n    authors=\"mazharmicrosoft\" \n    manager=\"douge\"/>\n\n<tags \n    ms.service=\"application-insights\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"ibiza\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/04/2015\" \n    ms.author=\"awills\"/>\n \n# Code sample: export to SQL from Application Insights using a worker role\n\nThis article shows how to move your telemetry data from [Visual Studio Application Insights][start] into an Azure SQL database by using [Continuous Export][export] and a small amount of code. \n\nContinuous export moves your telemetry into Azure Storage in JSON format, so we'll write some code to parse the JSON objects and create rows in a database table.\n\n(More generally, Continuous Export is the way to do your own analysis of the telemetry your apps send to Application Insights. You could adapt this code sample to do other things with the exported telemetry.)\n\nWe'll start with the assumption that you already have the app you want to monitor.\n\n## Add Application Insights SDK\n\nTo monitor your application, you [add an Application Insights SDK][start] to your application. There are different SDKs and helper tools for different platforms, IDEs and languages. You can monitor web pages, Java or ASP.NET web servers, and mobile devices of several kinds. All the SDKs send telemetry to the [Application Insights portal][portal], where you can use our powerful analysis and diagnostic tools, and export the data to storage.\n\nTo get started:\n\n1. Get an [account in Microsoft Azure](http://azure.microsoft.com/pricing/).\n2. In the [Azure portal][portal], add a new Application Insights resource for your app:\n\n    ![Choose New, Developer Services, Application Insights, and choose the type of application](./media/app-insights-code-sample-export-telemetry-sql-database/010-new-asp.png)\n\n\n    (Your app type and subscription might be different.)\n3. Open Quick Start to find how to set up the SDK for your app type.\n\n    ![Choose Quick Start and follow instructions](./media/app-insights-code-sample-export-telemetry-sql-database/020-quick.png)\n\n    If your app type isn't listed, take a look at the [Getting Started][start] page.\n\n4. In this example, we're monitoring a web app, so we can use the Azure tools in Visual Studio to install the SDK. We tell it the name of our Application Insights resource:\n\n    ![In Visual Studio, in the New Project dialog, check Add Application Insights, and under Send telemetry to, choose to create a new app, or use an existing one.](./media/app-insights-code-sample-export-telemetry-sql-database/030-new-project.png)\n\n\n## Create storage in Azure\n\n1. Create a storage account in your subscription in the [Azure portal][portal].\n\n    ![In Azure portal, choose New, Data, Storage](./media/app-insights-code-sample-export-telemetry-sql-database/040-store.png)\n\n2. Create a container\n\n    ![In the new storage, select Containers and then Add](./media/app-insights-code-sample-export-telemetry-sql-database/050-container.png)\n\n\n## Start continuous export to Azure storage\n\n1. In the Azure portal, browse to the Application Insights resource you created for your application.\n\n    ![Choose Browse, Application Insights, your application](./media/app-insights-code-sample-export-telemetry-sql-database/060-browse.png)\n\n2. Create a continuous export.\n\n    ![Choose Settings, Continuous Export, Add](./media/app-insights-code-sample-export-telemetry-sql-database/070-export.png)\n\n\n    Select the storage account you created earlier:\n\n    ![Set the export destination](./media/app-insights-code-sample-export-telemetry-sql-database/080-add.png)\n    \n    Set the event types you want to see:\n\n    ![Choose event types](./media/app-insights-code-sample-export-telemetry-sql-database/085-types.png)\n\n3. Let some data accumulate. Sit back and let people use your application for a while. Telemetry will come in and you'll see statistical charts in [metric explorer](app-insights-metrics-explorer.md) and individual events in [diagnostic search](app-insights-diagnostic-search.md). \n\n    And also, the data will export to your storage. \n\n4. Inspect the exported data. In Visual Studio, choose **View / Cloud Explorer**, and open Azure / Storage. (If you don't have this menu option, you need to install the Azure SDK: Open the New Project dialog and open Visual C# / Cloud / Get Microsoft Azure SDK for .NET.)\n\n    ![In Visual Studio, open Server Browser, Azure, Storage](./media/app-insights-code-sample-export-telemetry-sql-database/087-explorer.png)\n\n    Make a note of the common part of the path name, which is derived from the application name and instrumentation key. \n\nThe events are written to blob files in JSON format. Each file may contain one or more events. So we'd like to read the event data and filter out the fields we want. There are all kinds of things we could do with the data, but our plan today is to write some code to move the data to a SQL database. That will make it easy to run lots of interesting queries.\n\n## Create an Azure SQL Database\n\nOnce again starting from your subscription in [Azure portal][portal], create the database (and a new server, unless you've already got one) to which you'll write the data.\n\n![New, Data, SQL](./media/app-insights-code-sample-export-telemetry-sql-database/090-sql.png)\n\n\nMake sure that the database server allows access to Azure services:\n\n\n![Browse, Servers, your server, Settings, Firewall, Allow Access to Azure](./media/app-insights-code-sample-export-telemetry-sql-database/100-sqlaccess.png)\n\n\n## Create a worker role \n\nNow we can write [some code](https://sesitai.codeplex.com/) to parse the JSON in the exported blobs, and create records in the database. Since the export store and the database are both in Azure, we'll run the code in an Azure worker role.\n\nThis code automatically extracts whatever properties are present in the JSON. For descriptions of the properties, see [Export data model](app-insights-export-data-model.md).\n\n\n#### Create worker role project\n\nIn Visual Studio, create a new project for the worker role:\n\n![New Project, Visual C#, Cloud, Azure Cloud Service](./media/app-insights-code-sample-export-telemetry-sql-database/110-cloud.png)\n\n![In new cloud service dialog, choose Visual C#, Worker Role](./media/app-insights-code-sample-export-telemetry-sql-database/120-worker.png)\n\n\n#### Connect to the storage account\n\nIn Azure, get the connection string from your Storage account:\n\n![In the Storage Account, select Keys, and copy Primary Connection String](./media/app-insights-code-sample-export-telemetry-sql-database/055-get-connection.png)\n\nIn Visual Studio, configure the worker role settings with the Storage account connection string:\n\n\n![In Solution Explorer, under the Cloud Service project, expand Roles, and open your worker role. Open the settings tab, choose Add Setting, and set name=StorageConnectionString, type=connection string, click to set the value. Set it manually and paste the connection string.](./media/app-insights-code-sample-export-telemetry-sql-database/130-connection-string.png)\n\n\n#### Packages\n\nIn Solution Explorer, right-click your Worker Role project and choose Manage NuGet Packages.\nSearch for and install these packages: \n\n * EntityFramework 6.1.2 or later - We'll use this to generate the DB table schema on the fly, based on the content of the JSON in the blob.\n * JsonFx - We'll use this for flattening the JSON to C# class properties.\n\nUse this tool to generate C# Class out of our single JSON document. It requires some minor changes like flattening JSON arrays into single C# property in turn single column in DB table (ex. urlData_port) \n\n * [JSON C# class generator](http://jsonclassgenerator.codeplex.com/)\n\n## Code \n\nYou can put this code in `WorkerRole.cs`.\n\n#### Imports\n\n    using Microsoft.WindowsAzure.Storage;\n\n    using Microsoft.WindowsAzure.Storage.Blob;\n\n#### Retrieve the storage connection string\n\n    private static string GetConnectionString()\n    {\n      return Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\");\n    }\n\n#### Run the worker at regular intervals\n\nReplace the existing run method, and choose the interval you prefer. It should be at least one hour, because the export feature completes one JSON object in an hour.\n\n    public override void Run()\n    {\n      Trace.TraceInformation(\"WorkerRole1 is running\");\n\n      while (true)\n      {\n        Trace.WriteLine(\"Sleeping\", \"Information\");\n\n        Thread.Sleep(86400000); //86400000=24 hours //1 hour=3600000\n                \n        Trace.WriteLine(\"Awake\", \"Information\");\n\n        ImportBlobtoDB();\n      }\n    }\n\n#### Insert each JSON object as a table row\n\n\n    public void ImportBlobtoDB()\n    {\n      try\n      {\n        CloudStorageAccount account = CloudStorageAccount.Parse(GetConnectionString());\n\n        var blobClient = account.CreateCloudBlobClient();\n        var container = blobClient.GetContainerReference(FilterContainer);\n\n        foreach (CloudBlobDirectory directory in container.ListBlobs())//Parent directory\n        {\n          foreach (CloudBlobDirectory subDirectory in directory.ListBlobs())//PageViewPerformance\n          {\n            foreach (CloudBlobDirectory dir in subDirectory.ListBlobs())//2015-01-31\n            {\n              foreach (CloudBlobDirectory subdir in dir.ListBlobs())//22\n              {\n                foreach (IListBlobItem item in subdir.ListBlobs())//3IAwm6u3-0.blob\n                {\n                  itemname = item.Uri.ToString();\n                  ParseEachBlob(container, item);\n                  AuditBlob(container, directory, subDirectory, dir, subdir, item);\n                } //item loop\n              } //subdir loop\n            } //dir loop\n          } //subDirectory loop\n        } //directory loop\n      }\n      catch (Exception ex)\n      {\n        //handle exception\n      }\n    }\n\n#### Parse each blob\n\n    private void ParseEachBlob(CloudBlobContainer container, IListBlobItem item)\n    {\n      try\n      {\n        var blob = container.GetBlockBlobReference(item.Parent.Prefix + item.Uri.Segments.Last());\n    \n        string json;\n    \n        using (var memoryStream = new MemoryStream())\n        {\n          blob.DownloadToStream(memoryStream);\n          json = System.Text.Encoding.UTF8.GetString(memoryStream.ToArray());\n    \n          IEnumerable<string> entities = json.Split('\\n').Where(s => !string.IsNullOrWhiteSpace(s));\n    \n          recCount = entities.Count();\n          failureCount = 0; //resetting failure count\n    \n          foreach (var entity in entities)\n          {\n            var reader = new JsonFx.Json.JsonReader();\n            dynamic output = reader.Read(entity);\n    \n            Dictionary<string, object> dict = new Dictionary<string, object>();\n    \n            GenerateDictionary((System.Dynamic.ExpandoObject)output, dict, \"\");\n    \n            switch (FilterType)\n            {\n              case \"PageViewPerformance\":\n    \n              if (dict.ContainsKey(\"clientPerformance\"))\n                {\n                  GenerateDictionary(((System.Dynamic.ExpandoObject[])dict[\"clientPerformance\"])[0], dict, \"\");\n                }\n    \n              if (dict.ContainsKey(\"context_custom_dimensions\"))\n              {\n                if (dict[\"context_custom_dimensions\"].GetType() == typeof(System.Dynamic.ExpandoObject[]))\n                {\n                  GenerateDictionary(((System.Dynamic.ExpandoObject[])dict[\"context_custom_dimensions\"])[0], dict, \"\");\n                }\n              }\n    \n            PageViewPerformance objPageViewPerformance = (PageViewPerformance)GetObject(dict);\n    \n            try\n            {\n              using (var db = new TelemetryContext())\n              {\n                db.PageViewPerformanceContext.Add(objPageViewPerformance);\n                db.SaveChanges();\n              }\n            }\n            catch (Exception ex)\n            {\n              failureCount++;\n            }\n            break;\n    \n            default:\n            break;\n          }\n        }\n      }\n    }\n    catch (Exception ex)\n    {\n      //handle exception \n    }\n    }\n\n#### Prepare a dictionary for each JSON document\n\n\n    private void GenerateDictionary(System.Dynamic.ExpandoObject output, Dictionary<string, object> dict, string parent)\n        {\n            try\n            {\n                foreach (var v in output)\n                {\n                    string key = parent + v.Key;\n                    object o = v.Value;\n\n                    if (o.GetType() == typeof(System.Dynamic.ExpandoObject))\n                    {\n                        GenerateDictionary((System.Dynamic.ExpandoObject)o, dict, key + \"_\");\n                    }\n                    else\n                    {\n                        if (!dict.ContainsKey(key))\n                        {\n                            dict.Add(key, o);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n            //handle exception \n            }\n        }\n\n#### Cast the JSON document into C# class telemetry object properties\n\n     public object GetObject(IDictionary<string, object> d)\n        {\n            PropertyInfo[] props = null;\n            object res = null;\n\n            try\n            {\n                switch (FilterType)\n                {\n                    case \"PageViewPerformance\":\n\n                        props = typeof(PageViewPerformance).GetProperties();\n                        res = Activator.CreateInstance<PageViewPerformance>();\n                        break;\n\n                    default:\n                        break;\n                }\n\n                for (int i = 0; i < props.Length; i++)\n                {\n                    if (props[i].CanWrite && d.ContainsKey(props[i].Name))\n                    {\n                        props[i].SetValue(res, d[props[i].Name], null);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n            //handle exception \n            }\n\n            return res;\n        }\n\n#### PageViewPerformance class file generated out of JSON document\n\n\n\n    public class PageViewPerformance\n    {\n        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\n        public Guid Id { get; set; }\n\n        public string url { get; set; }\n\n        public int urlData_port { get; set; }\n\n        public string urlData_protocol { get; set; }\n\n        public string urlData_host { get; set; }\n\n        public string urlData_base { get; set; }\n\n        public string urlData_hashTag { get; set; }\n\n        public double total_value { get; set; }\n\n        public double networkConnection_value { get; set; }\n\n        public double sendRequest_value { get; set; }\n\n        public double receiveRequest_value { get; set; }\n\n        public double clientProcess_value { get; set; }\n\n        public string name { get; set; }\n\n        public string internal_data_id { get; set; }\n\n        public string internal_data_documentVersion { get; set; }\n\n        public DateTime? context_data_eventTime { get; set; }\n\n        public string context_device_id { get; set; }\n\n        public string context_device_type { get; set; }\n\n        public string context_device_os { get; set; }\n\n        public string context_device_osVersion { get; set; }\n\n        public string context_device_locale { get; set; }\n\n        public string context_device_userAgent { get; set; }\n\n        public string context_device_browser { get; set; }\n\n        public string context_device_browserVersion { get; set; }\n\n        public string context_device_screenResolution_value { get; set; }\n\n        public string context_user_anonId { get; set; }\n\n        public string context_user_anonAcquisitionDate { get; set; }\n\n        public string context_user_authAcquisitionDate { get; set; }\n\n        public string context_user_accountAcquisitionDate { get; set; }\n\n        public string context_session_id { get; set; }\n\n        public bool context_session_isFirst { get; set; }\n\n        public string context_operation_id { get; set; }\n\n        public double context_location_point_lat { get; set; }\n\n        public double context_location_point_lon { get; set; }\n\n        public string context_location_clientip { get; set; }\n\n        public string context_location_continent { get; set; }\n\n        public string context_location_country { get; set; }\n\n        public string context_location_province { get; set; }\n\n        public string context_location_city { get; set; }\n    }\n\n\n#### DBcontext for SQL interaction by Entity Framework\n\n    public class TelemetryContext : DbContext\n    {\n        public DbSet<PageViewPerformance> PageViewPerformanceContext { get; set; }\n        public TelemetryContext()\n            : base(\"name=TelemetryContext\")\n        {\n        }\n    }\n\nAdd your DB connection string with name `TelemetryContext` in `app.config`.\n\n## Schema (information only)\n\nThis is the schema for the table that will be generated for PageView.\n\n> [AZURE.NOTE] You don't have to run this script. The attributes in the JSON determine the columns in the table.\n\n    CREATE TABLE [dbo].[PageViewPerformances](\n    [Id] [uniqueidentifier] NOT NULL,\n    [url] [nvarchar](max) NULL,\n    [urlData_port] [int] NOT NULL,\n    [urlData_protocol] [nvarchar](max) NULL,\n    [urlData_host] [nvarchar](max) NULL,\n    [urlData_base] [nvarchar](max) NULL,\n    [urlData_hashTag] [nvarchar](max) NULL,\n    [total_value] [float] NOT NULL,\n    [networkConnection_value] [float] NOT NULL,\n    [sendRequest_value] [float] NOT NULL,\n    [receiveRequest_value] [float] NOT NULL,\n    [clientProcess_value] [float] NOT NULL,\n    [name] [nvarchar](max) NULL,\n    [User] [nvarchar](max) NULL,\n    [internal_data_id] [nvarchar](max) NULL,\n    [internal_data_documentVersion] [nvarchar](max) NULL,\n    [context_data_eventTime] [datetime] NULL,\n    [context_device_id] [nvarchar](max) NULL,\n    [context_device_type] [nvarchar](max) NULL,\n    [context_device_os] [nvarchar](max) NULL,\n    [context_device_osVersion] [nvarchar](max) NULL,\n    [context_device_locale] [nvarchar](max) NULL,\n    [context_device_userAgent] [nvarchar](max) NULL,\n    [context_device_browser] [nvarchar](max) NULL,\n    [context_device_browserVersion] [nvarchar](max) NULL,\n    [context_device_screenResolution_value] [nvarchar](max) NULL,\n    [context_user_anonId] [nvarchar](max) NULL,\n    [context_user_anonAcquisitionDate] [nvarchar](max) NULL,\n    [context_user_authAcquisitionDate] [nvarchar](max) NULL,\n    [context_user_accountAcquisitionDate] [nvarchar](max) NULL,\n    [context_session_id] [nvarchar](max) NULL,\n    [context_session_isFirst] [bit] NOT NULL,\n    [context_operation_id] [nvarchar](max) NULL,\n    [context_location_point_lat] [float] NOT NULL,\n    [context_location_point_lon] [float] NOT NULL,\n    [context_location_clientip] [nvarchar](max) NULL,\n    [context_location_continent] [nvarchar](max) NULL,\n    [context_location_country] [nvarchar](max) NULL,\n    [context_location_province] [nvarchar](max) NULL,\n    [context_location_city] [nvarchar](max) NULL,\n    CONSTRAINT [PK_dbo.PageViewPerformances] PRIMARY KEY CLUSTERED \n    (\n     [Id] ASC\n    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n\n    GO\n\n    ALTER TABLE [dbo].[PageViewPerformances] ADD  DEFAULT (newsequentialid()) FOR [Id]\n    GO\n\n\nTo see this example in action, [download](https://sesitai.codeplex.com/) the complete working code, change the `app.config` settings and publish the worker role to Azure.\n\n\n## Related articles\n\n* [Export to SQL using a worker role](app-insights-code-sample-export-telemetry-sql-database.md)\n* [Continuous Export in Application Insights](app-insights-export-telemetry.md)\n* [Application Insights](https://azure.microsoft.com/services/application-insights/)\n* [Export data model](app-insights-export-data-model.md)\n* [More samples and walkthroughs](app-insights-code-samples.md)\n\n<!--Link references-->\n\n[diagnostic]: app-insights-diagnostic-search.md\n[export]: app-insights-export-telemetry.md\n[metrics]: app-insights-metrics-explorer.md\n[portal]: http://portal.azure.com/\n[start]: app-insights-get-started.md\n\n \n\ntest\n"
}