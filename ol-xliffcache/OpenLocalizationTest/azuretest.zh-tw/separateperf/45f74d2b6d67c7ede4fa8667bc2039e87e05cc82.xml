{
  "nodes": [
    {
      "content": "Configure Asset Delivery Policies using REST",
      "pos": [
        28,
        72
      ]
    },
    {
      "content": "This topic shows how to configure different asset delivery policies.",
      "pos": [
        92,
        160
      ]
    },
    {
      "content": "How to: Configure Asset Delivery Policies",
      "pos": [
        471,
        512
      ]
    },
    {
      "content": "If you plan to deliver dynamically encrypted assets, one of the steps in the Media Services content delivery workflow is configuring delivery policies for assets.",
      "pos": [
        644,
        806
      ]
    },
    {
      "content": "The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption).",
      "pos": [
        807,
        1126
      ]
    },
    {
      "content": "This topic discusses why and how to create and configure asset delivery policies.",
      "pos": [
        1129,
        1210
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one scale unit (also known as streaming unit).",
      "pos": [
        1214,
        1368
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>How to Scale a Media Service<ept id=\"p1\">](media-services-manage-origins.md#scale_streaming_endpoints)</ept>.",
      "pos": [
        1369,
        1486
      ]
    },
    {
      "content": "Also, your asset must contain a set of adaptive bitrate MP4s or adaptive bitrate Smooth Streaming files.",
      "pos": [
        1491,
        1595
      ]
    },
    {
      "content": "You could apply different policies to the same asset.",
      "pos": [
        1599,
        1652
      ]
    },
    {
      "content": "For example, you could apply PlayReady encryption to Smooth Streaming and AES Envelope encryption to MPEG DASH and HLS.",
      "pos": [
        1653,
        1772
      ]
    },
    {
      "content": "Any protocols that are not defined in a delivery policy (for example, you add a single policy that only specifies HLS as the protocol) will be blocked from streaming.",
      "pos": [
        1773,
        1939
      ]
    },
    {
      "content": "The exception to this is if you have no asset delivery policy defined at all.",
      "pos": [
        1940,
        2017
      ]
    },
    {
      "content": "Then, all protocols will be allowed in the clear.",
      "pos": [
        2018,
        2067
      ]
    },
    {
      "content": "Note that if your want to delivery a storage encrypted asset, you must configure the assetâ€™s delivery policy.",
      "pos": [
        2069,
        2178
      ]
    },
    {
      "content": "Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy.",
      "pos": [
        2179,
        2327
      ]
    },
    {
      "content": "For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) envelope encryption key, set the policy type to <bpt id=\"p1\">**</bpt>DynamicEnvelopeEncryption<ept id=\"p1\">**</ept>.",
      "pos": [
        2328,
        2491
      ]
    },
    {
      "content": "To remove storage encryption and stream the asset in the clear, set the policy type to <bpt id=\"p1\">**</bpt>NoDynamicEncryption<ept id=\"p1\">**</ept>.",
      "pos": [
        2492,
        2603
      ]
    },
    {
      "content": "Examples that show how to configure these policy types follow.",
      "pos": [
        2604,
        2666
      ]
    },
    {
      "content": "Depending on how you configure the asset delivery policy you would be able to dynamically package, dynamically encrypt, and stream the following streaming protocols: Smooth Streaming, HLS, MPEG DASH, and HDS streams.",
      "pos": [
        2669,
        2885
      ]
    },
    {
      "content": "The following list shows the formats that you use to stream Smooth, HLS, DASH and HDS.",
      "pos": [
        2889,
        2975
      ]
    },
    {
      "content": "Smooth Streaming:",
      "pos": [
        2979,
        2996
      ]
    },
    {
      "content": "HLS:",
      "pos": [
        3130,
        3134
      ]
    },
    {
      "content": "MPEG DASH",
      "pos": [
        3286,
        3295
      ]
    },
    {
      "content": "HDS",
      "pos": [
        3451,
        3454
      ]
    },
    {
      "pos": [
        3604,
        3748
      ],
      "content": "For instructions on how to publish an asset and build a streaming URL, see <bpt id=\"p1\">[</bpt>Build a streaming URL<ept id=\"p1\">](media-services-deliver-streaming-content.md)</ept>."
    },
    {
      "pos": [
        3751,
        3846
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:"
    },
    {
      "content": "When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.",
      "pos": [
        3850,
        3962
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Setup for Media Services REST API Development<ept id=\"p1\">](media-services-rest-how-to-use.md)</ept>.",
      "pos": [
        3963,
        4072
      ]
    },
    {
      "content": "After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.",
      "pos": [
        4075,
        4205
      ]
    },
    {
      "content": "You must make subsequent calls to the new URI as described in <bpt id=\"p1\">[</bpt>Connecting to Media Services using REST API<ept id=\"p1\">](media-services-rest-connect_programmatically.md)</ept>.",
      "pos": [
        4206,
        4363
      ]
    },
    {
      "content": "Clear asset delivery policy",
      "pos": [
        4369,
        4396
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"create_asset_delivery_policy\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create asset delivery policy",
      "pos": [
        4402,
        4471
      ]
    },
    {
      "content": "The following HTTP request creates an asset delivery policy that specifies to not apply dynamic encryption and to deliver the stream in any of the following protocols:  MPEG DASH, HLS, and Smooth Streaming protocols.",
      "pos": [
        4472,
        4688
      ]
    },
    {
      "pos": [
        4691,
        4847
      ],
      "content": "For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id=\"p1\">[</bpt>Types used when defining AssetDeliveryPolicy<ept id=\"p1\">](#types)</ept> section."
    },
    {
      "content": "Request:",
      "pos": [
        4853,
        4861
      ]
    },
    {
      "content": "Response:",
      "pos": [
        5889,
        5898
      ]
    },
    {
      "pos": [
        6996,
        7083
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"link_asset_with_asset_delivery_policy\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Link asset with asset delivery policy"
    },
    {
      "content": "The following HTTP request links the specified asset to the asset delivery policy to.",
      "pos": [
        7085,
        7170
      ]
    },
    {
      "content": "Request:",
      "pos": [
        7172,
        7180
      ]
    },
    {
      "content": "Response:",
      "pos": [
        8264,
        8273
      ]
    },
    {
      "content": "DynamicEnvelopeEncryption asset delivery policy",
      "pos": [
        8307,
        8354
      ]
    },
    {
      "content": "Create content key of the EnvelopeEncryption type and link it to the asset",
      "pos": [
        8360,
        8434
      ]
    },
    {
      "content": "When specifying DynamicEnvelopeEncryption delivery policy, you need to make sure to link your asset to a content key of the EnvelopeEncryption type.",
      "pos": [
        8436,
        8584
      ]
    },
    {
      "content": "For more information, see: <bpt id=\"p1\">[</bpt>Creating a content key<ept id=\"p1\">](media-services-rest-create-contentkey.md)</ept>).",
      "pos": [
        8585,
        8680
      ]
    },
    {
      "pos": [
        8686,
        8731
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"get_delivery_url\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Get delivery URL"
    },
    {
      "content": "Get the delivery URL for the specified delivery method of the content key created in the previous step.",
      "pos": [
        8733,
        8836
      ]
    },
    {
      "content": "A client uses the returned URL to request an AES key or a PlayReady license in order to playback the protected content.",
      "pos": [
        8837,
        8956
      ]
    },
    {
      "content": "Specify the type of the URL to get in the body of the HTTP request.",
      "pos": [
        8958,
        9025
      ]
    },
    {
      "content": "If you are protecting your content with PlayReady, request a Media Services PlayReady license acquisition URL, using 1 for the keyDeliveryType: {\"keyDeliveryType\":1}.",
      "pos": [
        9026,
        9192
      ]
    },
    {
      "content": "If you are protecting your content with the envelope encryption, request a key acquisition URL by specifying 2 for keyDeliveryType: {\"keyDeliveryType\":2}.",
      "pos": [
        9193,
        9347
      ]
    },
    {
      "content": "Request:",
      "pos": [
        9349,
        9357
      ]
    },
    {
      "content": "Response:",
      "pos": [
        10327,
        10336
      ]
    },
    {
      "content": "Create asset delivery policy",
      "pos": [
        11066,
        11094
      ]
    },
    {
      "pos": [
        11096,
        11337
      ],
      "content": "The following HTTP request creates the <bpt id=\"p1\">**</bpt>AssetDeliveryPolicy<ept id=\"p1\">**</ept> that is configured to apply dynamic envelope encryption (<bpt id=\"p2\">**</bpt>DynamicEnvelopeEncryption<ept id=\"p2\">**</ept>) to the <bpt id=\"p3\">**</bpt>HLS<ept id=\"p3\">**</ept> protocol (in this example, other protocols will be blocked from streaming)."
    },
    {
      "pos": [
        11341,
        11497
      ],
      "content": "For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id=\"p1\">[</bpt>Types used when defining AssetDeliveryPolicy<ept id=\"p1\">](#types)</ept> section."
    },
    {
      "content": "Request:",
      "pos": [
        11502,
        11510
      ]
    },
    {
      "content": "Response:",
      "pos": [
        12667,
        12676
      ]
    },
    {
      "content": "Link asset with asset delivery policy",
      "pos": [
        13791,
        13828
      ]
    },
    {
      "pos": [
        13830,
        13913
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Link asset with asset delivery policy<ept id=\"p1\">](#link_asset_with_asset_delivery_policy)</ept>"
    },
    {
      "content": "DynamicCommonEncryption asset delivery policy",
      "pos": [
        13917,
        13962
      ]
    },
    {
      "content": "Create content key of the CommonEncryption type and link it to the asset",
      "pos": [
        13968,
        14040
      ]
    },
    {
      "content": "When specifying DynamicCommonEncryption delivery policy, you need to make sure to link your asset to a content key of the CommonEncryption type.",
      "pos": [
        14042,
        14186
      ]
    },
    {
      "content": "For more information, see: <bpt id=\"p1\">[</bpt>Creating a content key<ept id=\"p1\">](media-services-rest-create-contentkey.md)</ept>).",
      "pos": [
        14187,
        14282
      ]
    },
    {
      "content": "Get Delivery URL",
      "pos": [
        14288,
        14304
      ]
    },
    {
      "content": "Get the delivery URL for the PlayReady delivery method of the content key created in the previous step.",
      "pos": [
        14306,
        14409
      ]
    },
    {
      "content": "A client uses the returned URL to request a PlayReady license in order to playback the protected content.",
      "pos": [
        14410,
        14515
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Get Delivery URL<ept id=\"p1\">](#get_delivery_url)</ept>.",
      "pos": [
        14516,
        14580
      ]
    },
    {
      "content": "Create asset delivery policy",
      "pos": [
        14585,
        14613
      ]
    },
    {
      "pos": [
        14615,
        14865
      ],
      "content": "The following HTTP request creates the <bpt id=\"p1\">**</bpt>AssetDeliveryPolicy<ept id=\"p1\">**</ept> that is configured to apply dynamic common encryption (<bpt id=\"p2\">**</bpt>DynamicCommonEncryption<ept id=\"p2\">**</ept>) to the <bpt id=\"p3\">**</bpt>Smooth Streaming<ept id=\"p3\">**</ept> protocol (in this example, other protocols will be blocked from streaming)."
    },
    {
      "pos": [
        14868,
        15024
      ],
      "content": "For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id=\"p1\">[</bpt>Types used when defining AssetDeliveryPolicy<ept id=\"p1\">](#types)</ept> section."
    },
    {
      "content": "Request:",
      "pos": [
        15030,
        15038
      ]
    },
    {
      "content": "Link asset with asset delivery policy",
      "pos": [
        16203,
        16240
      ]
    },
    {
      "pos": [
        16242,
        16325
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Link asset with asset delivery policy<ept id=\"p1\">](#link_asset_with_asset_delivery_policy)</ept>"
    },
    {
      "pos": [
        16330,
        16392
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Types used when defining AssetDeliveryPolicy"
    },
    {
      "content": "AssetDeliveryProtocol",
      "pos": [
        16397,
        16418
      ]
    },
    {
      "content": "AssetDeliveryPolicyType",
      "pos": [
        17241,
        17264
      ]
    },
    {
      "content": "ContentKeyDeliveryType",
      "pos": [
        18075,
        18097
      ]
    },
    {
      "content": "AssetDeliveryPolicyConfigurationKey",
      "pos": [
        18568,
        18603
      ]
    },
    {
      "content": "test",
      "pos": [
        19801,
        19805
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Configure Asset Delivery Policies using REST\" \n    description=\"This topic shows how to configure different asset delivery policies.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\"\n    ms.author=\"juliako\"/>\n\n#How to: Configure Asset Delivery Policies\n\n[AZURE.INCLUDE [media-services-selector-asset-delivery-policy](../../includes/media-services-selector-asset-delivery-policy.md)]\n\nIf you plan to deliver dynamically encrypted assets, one of the steps in the Media Services content delivery workflow is configuring delivery policies for assets. The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption). \n\nThis topic discusses why and how to create and configure asset delivery policies. \n\n>[AZURE.NOTE]To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one scale unit (also known as streaming unit). For more information, see [How to Scale a Media Service](media-services-manage-origins.md#scale_streaming_endpoints). \n>\n>Also, your asset must contain a set of adaptive bitrate MP4s or adaptive bitrate Smooth Streaming files.  \n\nYou could apply different policies to the same asset. For example, you could apply PlayReady encryption to Smooth Streaming and AES Envelope encryption to MPEG DASH and HLS. Any protocols that are not defined in a delivery policy (for example, you add a single policy that only specifies HLS as the protocol) will be blocked from streaming. The exception to this is if you have no asset delivery policy defined at all. Then, all protocols will be allowed in the clear.\n\nNote that if your want to delivery a storage encrypted asset, you must configure the assetâ€™s delivery policy. Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy. For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) envelope encryption key, set the policy type to **DynamicEnvelopeEncryption**. To remove storage encryption and stream the asset in the clear, set the policy type to **NoDynamicEncryption**. Examples that show how to configure these policy types follow. \n\nDepending on how you configure the asset delivery policy you would be able to dynamically package, dynamically encrypt, and stream the following streaming protocols: Smooth Streaming, HLS, MPEG DASH, and HDS streams.  \n\nThe following list shows the formats that you use to stream Smooth, HLS, DASH and HDS.  \n\nSmooth Streaming:\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest\n\nHLS:\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl)\n\nMPEG DASH\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=mpd-time-csf) \n\nHDS\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=f4m-f4f)\n\nFor instructions on how to publish an asset and build a streaming URL, see [Build a streaming URL](media-services-deliver-streaming-content.md).\n\n>[AZURE.NOTE] When working with the Media Services REST API, the following considerations apply:\n>\n>When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests. For more information, see [Setup for Media Services REST API Development](media-services-rest-how-to-use.md).\n\n>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI. You must make subsequent calls to the new URI as described in [Connecting to Media Services using REST API](media-services-rest-connect_programmatically.md). \n\n\n##Clear asset delivery policy \n\n###<a id=\"create_asset_delivery_policy\"></a>Create asset delivery policy\nThe following HTTP request creates an asset delivery policy that specifies to not apply dynamic encryption and to deliver the stream in any of the following protocols:  MPEG DASH, HLS, and Smooth Streaming protocols. \n\nFor information on what values you can specify when creating an AssetDeliveryPolicy, see the [Types used when defining AssetDeliveryPolicy](#types) section.   \n\n\nRequest:\n      \n    POST https://media.windows.net/api/AssetDeliveryPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amsaccount1&urn%3aSubscriptionId=zbbef702-e769-2233-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423397827&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=Szo6lbJAvL3dyecAeVmyAnzv3mGzfUNClR5shk9Ivbk%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 4651882c-d7ad-4d5e-86ab-f07f47dcb41e\n    Host: media.windows.net\n    \n    {\"Name\":\"Clear Policy\",\n    \"AssetDeliveryProtocol\":7,\n    \"AssetDeliveryPolicyType\":2,\n    \"AssetDeliveryConfiguration\":null}\n\nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 363\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://media.windows.net/api/AssetDeliveryPolicies('nb%3Aadpid%3AUUID%3A92b0f6ba-3c9f-49b6-a5fa-2a8703b04ecd')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: 4651882c-d7ad-4d5e-86ab-f07f47dcb41e\n    request-id: 6aedbf93-4bc2-4586-8845-fd45590136af\n    x-ms-request-id: 6aedbf93-4bc2-4586-8845-fd45590136af\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Sun, 08 Feb 2015 06:21:27 GMT\n    \n    {\"odata.metadata\":\"https://media.windows.net/api/$metadata#AssetDeliveryPolicies/@Element\",\n    \"Id\":\"nb:adpid:UUID:92b0f6ba-3c9f-49b6-a5fa-2a8703b04ecd\",\n    \"Name\":\"Clear Policy\",\n    \"AssetDeliveryProtocol\":7,\n    \"AssetDeliveryPolicyType\":2,\n    \"AssetDeliveryConfiguration\":null,\n    \"Created\":\"2015-02-08T06:21:27.6908329Z\",\n    \"LastModified\":\"2015-02-08T06:21:27.6908329Z\"}\n    \n###<a id=\"link_asset_with_asset_delivery_policy\"></a>Link asset with asset delivery policy\n\nThe following HTTP request links the specified asset to the asset delivery policy to.\n\nRequest:\n\n    POST https://media.windows.net/api/Assets('nb%3Acid%3AUUID%3A86933344-9539-4d0c-be7d-f842458693e0')/$links/DeliveryPolicies HTTP/1.1\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Content-Type: application/json\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amsaccount1&urn%3aSubscriptionId=zbbef702-e769-3344-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423397827&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=Szo6lbJAvL3dyecAeVmyAnzv3mGzfUNClR5shk9Ivbk%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 56d2763f-6e72-419d-ba3c-685f6db97e81\n    Host: media.windows.net\n    \n    {\"uri\":\"https://media.windows.net/api/AssetDeliveryPolicies('nb%3Aadpid%3AUUID%3A92b0f6ba-3c9f-49b6-a5fa-2a8703b04ecd')\"}\n\nResponse:\n\n    HTTP/1.1 204 No Content\n\n\n##DynamicEnvelopeEncryption asset delivery policy \n\n###Create content key of the EnvelopeEncryption type and link it to the asset\n\nWhen specifying DynamicEnvelopeEncryption delivery policy, you need to make sure to link your asset to a content key of the EnvelopeEncryption type. For more information, see: [Creating a content key](media-services-rest-create-contentkey.md)).\n\n\n###<a id=\"get_delivery_url\"></a>Get delivery URL\n\nGet the delivery URL for the specified delivery method of the content key created in the previous step. A client uses the returned URL to request an AES key or a PlayReady license in order to playback the protected content.\n\nSpecify the type of the URL to get in the body of the HTTP request. If you are protecting your content with PlayReady, request a Media Services PlayReady license acquisition URL, using 1 for the keyDeliveryType: {\"keyDeliveryType\":1}. If you are protecting your content with the envelope encryption, request a key acquisition URL by specifying 2 for keyDeliveryType: {\"keyDeliveryType\":2}.\n\nRequest:\n    \n    POST https://media.windows.net/api/ContentKeys('nb:kid:UUID:dc88f996-2859-4cf7-a279-c52a9d6b2f04')/GetKeyDeliveryUrl HTTP/1.1\n    Content-Type: application/json\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amsaccount1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423452029&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=IEXV06e3drSIN5naFRBdhJZCbfEqQbFZsGSIGmawhEo%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 569d4b7c-a446-4edc-b77c-9fb686083dd8\n    Host: media.windows.net\n    Content-Length: 21\n    \n    {\"keyDeliveryType\":2}\n\nResponse:\n    \n    HTTP/1.1 200 OK\n    Cache-Control: no-cache\n    Content-Length: 198\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: 569d4b7c-a446-4edc-b77c-9fb686083dd8\n    request-id: d26f65d2-fe65-4136-8fcf-31545be68377\n    x-ms-request-id: d26f65d2-fe65-4136-8fcf-31545be68377\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Sun, 08 Feb 2015 21:42:30 GMT\n    \n    {\"odata.metadata\":\"media.windows.net/api/$metadata#Edm.String\",\"value\":\"https://amsaccount1.keydelivery.mediaservices.windows.net/?KID=dc88f996-2859-4cf7-a279-c52a9d6b2f04\"}\n\n\n###Create asset delivery policy\n\nThe following HTTP request creates the **AssetDeliveryPolicy** that is configured to apply dynamic envelope encryption (**DynamicEnvelopeEncryption**) to the **HLS** protocol (in this example, other protocols will be blocked from streaming). \n\n\nFor information on what values you can specify when creating an AssetDeliveryPolicy, see the [Types used when defining AssetDeliveryPolicy](#types) section.   \n\nRequest:\n\n    POST https://media.windows.net/api/AssetDeliveryPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    User-Agent: Microsoft ADO.NET Data Services\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amsaccount1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423480651&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=T2FG3tIV0e2ETzxQ6RDWxWAsAzuy3ez2ruXPhrBe62Y%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: fff319f6-71dd-4f6c-af27-b675c0066fa7\n    Host: media.windows.net\n    \n    {\"Name\":\"AssetDeliveryPolicy\",\"AssetDeliveryProtocol\":4,\"AssetDeliveryPolicyType\":3,\"AssetDeliveryConfiguration\":\"[{\\\"Key\\\":2,\\\"Value\\\":\\\"https:\\\\/\\\\/amsaccount1.keydelivery.mediaservices.windows.net\\\\/\\\"}]\"}\n\n    \nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 460\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: media.windows.net/api/AssetDeliveryPolicies('nb%3Aadpid%3AUUID%3Aec9b994e-672c-4a5b-8490-a464eeb7964b')\n    Server: Microsoft-IIS/8.5\n    x-ms-client-request-id: fff319f6-71dd-4f6c-af27-b675c0066fa7\n    request-id: c2a1ac0e-9644-474f-b38f-b9541c3a7c5f\n    x-ms-request-id: c2a1ac0e-9644-474f-b38f-b9541c3a7c5f\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Mon, 09 Feb 2015 05:24:38 GMT\n    \n    {\"odata.metadata\":\"media.windows.net/api/$metadata#AssetDeliveryPolicies/@Element\",\"Id\":\"nb:adpid:UUID:ec9b994e-672c-4a5b-8490-a464eeb7964b\",\"Name\":\"AssetDeliveryPolicy\",\"AssetDeliveryProtocol\":4,\"AssetDeliveryPolicyType\":3,\"AssetDeliveryConfiguration\":\"[{\\\"Key\\\":2,\\\"Value\\\":\\\"https:\\\\/\\\\/amsaccount1.keydelivery.mediaservices.windows.net\\\\/\\\"}]\",\"Created\":\"2015-02-09T05:24:38.9167436Z\",\"LastModified\":\"2015-02-09T05:24:38.9167436Z\"}\n\n\n###Link asset with asset delivery policy\n\nSee [Link asset with asset delivery policy](#link_asset_with_asset_delivery_policy)\n\n##DynamicCommonEncryption asset delivery policy \n\n###Create content key of the CommonEncryption type and link it to the asset\n\nWhen specifying DynamicCommonEncryption delivery policy, you need to make sure to link your asset to a content key of the CommonEncryption type. For more information, see: [Creating a content key](media-services-rest-create-contentkey.md)).\n\n\n###Get Delivery URL\n\nGet the delivery URL for the PlayReady delivery method of the content key created in the previous step. A client uses the returned URL to request a PlayReady license in order to playback the protected content. For more information, see [Get Delivery URL](#get_delivery_url).\n\n###Create asset delivery policy\n\nThe following HTTP request creates the **AssetDeliveryPolicy** that is configured to apply dynamic common encryption (**DynamicCommonEncryption**) to the **Smooth Streaming** protocol (in this example, other protocols will be blocked from streaming). \n\nFor information on what values you can specify when creating an AssetDeliveryPolicy, see the [Types used when defining AssetDeliveryPolicy](#types) section.   \n\n\nRequest:\n\n    POST https://media.windows.net/api/AssetDeliveryPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    User-Agent: Microsoft ADO.NET Data Services\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amsaccount1&urn%3aSubscriptionId=zbbef702-2233-477b-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1423480651&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=T2FG3tIV0e2ETzxQ6RDWxWAsAzuy3ez2ruXPhrBe62Y%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: fff319f6-71dd-4f6c-af27-b675c0066fa7\n    Host: media.windows.net\n    \n    {\"Name\":\"AssetDeliveryPolicy\",\"AssetDeliveryProtocol\":1,\"AssetDeliveryPolicyType\":4,\"AssetDeliveryConfiguration\":\"[{\\\"Key\\\":2,\\\"Value\\\":\\\"https:\\\\/\\\\/amsaccount1.keydelivery.mediaservices.windows.net\\/PlayReady\\/\"}]\"}\n\n\n###Link asset with asset delivery policy\n\nSee [Link asset with asset delivery policy](#link_asset_with_asset_delivery_policy)\n\n\n##<a id=\"types\"></a>Types used when defining AssetDeliveryPolicy\n\n###AssetDeliveryProtocol \n\n    /// <summary>\n    /// Delivery protocol for an asset delivery policy.\n    /// </summary>\n    [Flags]\n    public enum AssetDeliveryProtocol\n    {\n        /// <summary>\n        /// No protocols.\n        /// </summary>\n        None = 0x0,\n\n        /// <summary>\n        /// Smooth streaming protocol.\n        /// </summary>\n        SmoothStreaming = 0x1,\n\n        /// <summary>\n        /// MPEG Dynamic Adaptive Streaming over HTTP (DASH)\n        /// </summary>\n        Dash = 0x2,\n\n        /// <summary>\n        /// Apple HTTP Live Streaming protocol.\n        /// </summary>\n        HLS = 0x4,\n\n        /// <summary>\n        /// Adobe HTTP Dynamic Streaming (HDS)\n        /// </summary>\n        Hds = 0x8,\n\n        /// <summary>\n        /// Include all protocols.\n        /// </summary>\n        All = 0xFFFF\n    }\n\n###AssetDeliveryPolicyType\n\n    /// <summary>\n    /// Policy type for dynamic encryption of assets.\n    /// </summary>\n    public enum AssetDeliveryPolicyType\n    {\n        /// <summary>\n        /// Delivery Policy Type not set.  An invalid value.\n        /// </summary>\n        None,\n\n        /// <summary>\n        /// The Asset should not be delivered via this AssetDeliveryProtocol. \n        /// </summary>\n        Blocked, \n\n        /// <summary>\n        /// Do not apply dynamic encryption to the asset.\n        /// </summary>\n        /// \n        NoDynamicEncryption,  \n\n        /// <summary>\n        /// Apply Dynamic Envelope encryption.\n        /// </summary>\n        DynamicEnvelopeEncryption,\n\n        /// <summary>\n        /// Apply Dynamic Common encryption.\n        /// </summary>\n        DynamicCommonEncryption\n    }\n\n###ContentKeyDeliveryType\n\n    /// <summary>\n    /// Delivery method of the content key to the client.\n    /// </summary>\n    public enum ContentKeyDeliveryType\n    {\n        /// <summary>\n        /// None.\n        /// </summary>\n        None,\n\n        /// <summary>\n        /// Use PlayReady License acquistion protocol\n        /// </summary>\n        PlayReadyLicense,\n\n        /// <summary>\n        /// Use MPEG Baseline HTTP key protocol.\n        /// </summary>\n        BaselineHttp\n    }\n\n###AssetDeliveryPolicyConfigurationKey\n\n    /// <summary>\n    /// Keys used to get specific configuration for an asset delivery policy.\n    /// </summary>\n    public enum AssetDeliveryPolicyConfigurationKey\n    {\n        /// <summary>\n        /// No policies.\n        /// </summary>\n        None,\n\n        /// <summary>\n        /// Exact Envelope key URL.\n        /// </summary>\n        EnvelopeKeyAcquisitionUrl,\n\n        /// <summary>\n        /// Base key url that will have KID=<Guid> appended for Envelope.\n        /// </summary>\n        EnvelopeBaseKeyAcquisitionUrl,\n        \n        /// <summary>\n        /// The initialization vector to use for envelope encryption in Base64 format.\n        /// </summary>\n        EnvelopeEncryptionIVAsBase64,\n\n        /// <summary>\n        /// The PlayReady License Acquisition Url to use for common encryption.\n        /// </summary>\n        PlayReadyLicenseAcquisitionUrl,\n\n        /// <summary>\n        /// The PlayReady Custom Attributes to add to the PlayReady Content Header\n        /// </summary>\n        PlayReadyCustomAttributes,\n\n        /// <summary>\n        /// The initialization vector to use for envelope encryption.\n        /// </summary>\n        EnvelopeEncryptionIV,\n    }\n \ntest\n"
}