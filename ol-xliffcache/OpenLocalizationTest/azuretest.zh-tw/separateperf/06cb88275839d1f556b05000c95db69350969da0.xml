{
  "nodes": [
    {
      "content": "Manipulate encoding tasks by customizing task presets",
      "pos": [
        28,
        81
      ]
    },
    {
      "content": "The Azure Media Services Encoder allows you to pass custom preset files to Azure Media Encoder.",
      "pos": [
        101,
        196
      ]
    },
    {
      "content": "This topic shows how to customize preset files in order to achieve the following tasks: overlay an image onto an existing video, control the output file names that the encoder produces, stitch videos.",
      "pos": [
        197,
        397
      ]
    },
    {
      "content": "Manipulate encoding tasks by customizing task presets",
      "pos": [
        709,
        762
      ]
    },
    {
      "content": "The Azure Media Services Encoder allows you to pass custom preset files to Azure Media Encoder.",
      "pos": [
        765,
        860
      ]
    },
    {
      "content": "This topic shows how to customize preset files in order to achieve the following tasks:",
      "pos": [
        861,
        948
      ]
    },
    {
      "content": "overlay an image onto an existing video,",
      "pos": [
        953,
        993
      ]
    },
    {
      "content": "control the output file names that the encoder produces,",
      "pos": [
        997,
        1053
      ]
    },
    {
      "content": "stitch videos,",
      "pos": [
        1057,
        1071
      ]
    },
    {
      "content": "encode presentations with mostly speech.",
      "pos": [
        1074,
        1114
      ]
    },
    {
      "content": "Controlling Azure Media Encoder Output File Names",
      "pos": [
        1118,
        1167
      ]
    },
    {
      "content": "By default, the Azure Media Encoder creates output filenames by combining various attributes of the input asset and the encoding process.",
      "pos": [
        1170,
        1307
      ]
    },
    {
      "content": "Each attribute is identified using a macro as discussed below.",
      "pos": [
        1308,
        1370
      ]
    },
    {
      "content": "The following is a complete list of the macros available for output file naming:",
      "pos": [
        1372,
        1452
      ]
    },
    {
      "content": "Audio Bitrate - the bitrate used when encoding the audio, specified in kbps",
      "pos": [
        1453,
        1528
      ]
    },
    {
      "content": "Audio Codec the codec used for encoding audio, valid values are: AAC, WMA, and DDP",
      "pos": [
        1532,
        1614
      ]
    },
    {
      "content": "Channel Count the number of audio channels encoded, valid values are: 1, 2, or 6",
      "pos": [
        1617,
        1697
      ]
    },
    {
      "content": "Default extension – the default file extension",
      "pos": [
        1700,
        1746
      ]
    },
    {
      "content": "Language the BCP-47 language code representing the language used in the audio.",
      "pos": [
        1750,
        1828
      ]
    },
    {
      "content": "This currently defaults to “und”.",
      "pos": [
        1829,
        1862
      ]
    },
    {
      "content": "Original File Name the name of the file uploaded into Azure Storage",
      "pos": [
        1866,
        1933
      ]
    },
    {
      "content": "StreamId – the stream ID as defined by the streamID attribute of the",
      "pos": [
        1936,
        2004
      ]
    },
    {
      "content": "element in the preset file",
      "pos": [
        2018,
        2044
      ]
    },
    {
      "content": "Video Codec the codec used for encoding, valid values are: H264 and VC1",
      "pos": [
        2048,
        2119
      ]
    },
    {
      "content": "Video Bitrate the bitrate used when encoding the video, specified in kbps",
      "pos": [
        2122,
        2195
      ]
    },
    {
      "content": "These macros can be combine in any permutation to control the name of the files generated by the Media Services Encoder.",
      "pos": [
        2197,
        2317
      ]
    },
    {
      "content": "For example, the default naming convention is:",
      "pos": [
        2318,
        2364
      ]
    },
    {
      "content": "The file naming convention is specified using the DefaultMediaOutputFileName attribute of the <bpt id=\"p1\">[</bpt>Preset<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn554334.aspx)</ept> element.",
      "pos": [
        2494,
        2661
      ]
    },
    {
      "content": "For example:",
      "pos": [
        2662,
        2674
      ]
    },
    {
      "content": "The encoder will insert underscores between each macro, for example, configuration above would result in a file name like: MyVideo_H264_4500kpbs_AAC_und_ch2_128kbps.mp4.",
      "pos": [
        3743,
        3912
      ]
    },
    {
      "content": "Creating Overlays",
      "pos": [
        3917,
        3934
      ]
    },
    {
      "content": "The Azure Media Services Encoder allows you to overlay an image (jpg, bmp, gif, tif), a video, or an audio track (*.wma, *.mp3, *.wav) onto an existing video.",
      "pos": [
        3936,
        4094
      ]
    },
    {
      "content": "This functionality is similar to that of Expression Encoder 4 (Service Pack 2).",
      "pos": [
        4095,
        4174
      ]
    },
    {
      "content": "Overlays with the Media Services Encoder",
      "pos": [
        4179,
        4219
      ]
    },
    {
      "content": "You can specify when the overlay will be presented, the duration the overlay will presented, and for image/video overlays where on the screen the overlay will appear.",
      "pos": [
        4221,
        4387
      ]
    },
    {
      "content": "You can also have the overlays fade in and/or fade out.",
      "pos": [
        4388,
        4443
      ]
    },
    {
      "content": "The audio/video files to overlay can be contained in multiple assets or a single asset.",
      "pos": [
        4444,
        4531
      ]
    },
    {
      "content": "Overlays are controlled by the preset XML that is passed to the encoder.",
      "pos": [
        4532,
        4604
      ]
    },
    {
      "content": "For a complete description of the preset schema, see Azure Media Encoder Schemas.",
      "pos": [
        4605,
        4686
      ]
    },
    {
      "content": "Overlays are specified in the",
      "pos": [
        4687,
        4716
      ]
    },
    {
      "content": "element as shown in the following preset snippet:",
      "pos": [
        4729,
        4778
      ]
    },
    {
      "content": "Presets for Video or Image Overlays",
      "pos": [
        5427,
        5462
      ]
    },
    {
      "content": "Overlays can be from a single or multiple assets.",
      "pos": [
        5464,
        5513
      ]
    },
    {
      "content": "When creating video overlays using multiple assets, the overlay filename is specified in the OverlayFileName attribute using %n% syntax where n is the zero-based index of the input assets for the encoding task.",
      "pos": [
        5514,
        5724
      ]
    },
    {
      "content": "When creating video overlays with a single asset, the overlay file name is specified directly into the OverlayFileName attribute, as shown in the following preset snippets:",
      "pos": [
        5725,
        5897
      ]
    },
    {
      "content": "Example 1:",
      "pos": [
        5899,
        5909
      ]
    },
    {
      "content": "Example 2:",
      "pos": [
        6265,
        6275
      ]
    },
    {
      "content": "The location and size of the video overlay is controlled by the OverlayRect attribute.",
      "pos": [
        6641,
        6727
      ]
    },
    {
      "content": "The content that is to be overlaid will be re-sized to fit this rectangle.",
      "pos": [
        6728,
        6802
      ]
    },
    {
      "content": "Opacity is controlled by the OverlayOpacity attribute.",
      "pos": [
        6803,
        6857
      ]
    },
    {
      "content": "Valid values are 0.0 – 1.0, where 1.0 is 100% opaque.",
      "pos": [
        6858,
        6911
      ]
    },
    {
      "content": "The overlay will be displayed at the time specified by the OverlayStartTime attribute and will end at the time specified by the OverlayEndTime attribute.",
      "pos": [
        6912,
        7065
      ]
    },
    {
      "content": "Both OverlayStartTime and OverlayEndTime should fall within the timeline of the source video.",
      "pos": [
        7066,
        7159
      ]
    },
    {
      "content": "For more information about each overlay-specific attribute, please see Azure Media Encoder Schemas.",
      "pos": [
        7160,
        7259
      ]
    },
    {
      "content": "Presets for Audio Overlays",
      "pos": [
        7264,
        7290
      ]
    },
    {
      "content": "Audio overlays can be any supported audio file format, for example.",
      "pos": [
        7292,
        7359
      ]
    },
    {
      "content": "For a complete list of supported audio file formats, see Formats Supported by the Media Services Encoder.",
      "pos": [
        7360,
        7465
      ]
    },
    {
      "content": "Audio overlays are also specified in the",
      "pos": [
        7466,
        7506
      ]
    },
    {
      "content": "element as shown in the following preset snippet:",
      "pos": [
        7519,
        7568
      ]
    },
    {
      "content": "For audio overlays stored in multiple assets, the audio overlay filename is specified in the AudioOverlayFileName attribute using %n% syntax, where n is the zero-based index of the collection of input assets to the encoding Task.",
      "pos": [
        8042,
        8271
      ]
    },
    {
      "content": "For audio overlays stored in a single asset the overlay filename is specified directly in the AudioOverlayFileName attribute.",
      "pos": [
        8272,
        8397
      ]
    },
    {
      "content": "The AudioOverlayLayoutMode determines when the audio overlay will be presented.",
      "pos": [
        8398,
        8477
      ]
    },
    {
      "content": "When set to “WholeSequence” the audio track will be presented during the entire duration of the video.",
      "pos": [
        8478,
        8580
      ]
    },
    {
      "content": "When set to “Custom” the AudioOverlayStartTime and AudioOverlayEndTime attributes determine when the audio overlay begins and ends.",
      "pos": [
        8581,
        8712
      ]
    },
    {
      "content": "Both OverlayStartTime and OverlayEndTime should fall within the timeline of the source video.",
      "pos": [
        8713,
        8806
      ]
    },
    {
      "content": "For more information on all of the audio overlay attributes, see the Azure Media Encoder Schemas.",
      "pos": [
        8807,
        8904
      ]
    },
    {
      "content": "Audio overlays can be combined with video overlays as shown in the following preset snippet:",
      "pos": [
        8905,
        8997
      ]
    },
    {
      "content": "Submitting Tasks with Overlays",
      "pos": [
        9813,
        9843
      ]
    },
    {
      "content": "Once you have created a preset file you must do the following:",
      "pos": [
        9845,
        9907
      ]
    },
    {
      "content": "Upload your asset(s)",
      "pos": [
        9911,
        9931
      ]
    },
    {
      "content": "Load the preset configuration (Note: the code below assumes the Preset above.",
      "pos": [
        9934,
        10011
      ]
    },
    {
      "content": "Create a job",
      "pos": [
        10014,
        10026
      ]
    },
    {
      "content": "Get a reference to the Media Services Encoder",
      "pos": [
        10029,
        10074
      ]
    },
    {
      "content": "Create a task specifying the collection of input assets, the preset configuration, the media encoder, and the output asset",
      "pos": [
        10077,
        10199
      ]
    },
    {
      "content": "Submit the job",
      "pos": [
        10202,
        10216
      ]
    },
    {
      "content": "The following code snippet shows how to do these steps:",
      "pos": [
        10218,
        10273
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>This snippet loads each asset sequentially for simplicity.",
      "pos": [
        12173,
        12243
      ]
    },
    {
      "content": "In production environments assets would be loaded in bulk.",
      "pos": [
        12244,
        12302
      ]
    },
    {
      "content": "For more information on uploading multiple assets in bulk see <bpt id=\"p1\">[</bpt>Ingesting Assets in Bulk with the Media Services SDK for .NET<ept id=\"p1\">](media-services-dotnet-upload-files.md#ingest_in_bulk)</ept>.",
      "pos": [
        12303,
        12483
      ]
    },
    {
      "pos": [
        12485,
        12629
      ],
      "content": "For complete sample code see <bpt id=\"p1\">[</bpt>Creating Overlays with Media Services Encoder<ept id=\"p1\">](https://code.msdn.microsoft.com/Creating-Audio-and-Video-c2942c47)</ept>."
    },
    {
      "content": "Error Conditions",
      "pos": [
        12636,
        12652
      ]
    },
    {
      "content": "When editing the Preset string, you must ensure the following:",
      "pos": [
        12654,
        12716
      ]
    },
    {
      "content": "For video/image overlays, the overlay rectangle must fit entirely within the dimensions of the source video",
      "pos": [
        12720,
        12827
      ]
    },
    {
      "content": "The start and end time of the overlays should be within the timeline of the source video",
      "pos": [
        12830,
        12918
      ]
    },
    {
      "content": "If the preset XML contains a reference to ?OverlayFileName=”%n%”, then the InputAssets collection for the Tasks should contain at least n+1 Assets",
      "pos": [
        12921,
        13067
      ]
    },
    {
      "content": "Stitching Video Segments",
      "pos": [
        13073,
        13097
      ]
    },
    {
      "content": "The media services encoder provides support for stitching together a set of videos.",
      "pos": [
        13099,
        13182
      ]
    },
    {
      "content": "Videos can be stitched together end-to-end or you can specify portions of one or both videos to be stitched together.",
      "pos": [
        13183,
        13300
      ]
    },
    {
      "content": "The result of the stitching is a single output asset that contains the specified video from the input assets.",
      "pos": [
        13301,
        13410
      ]
    },
    {
      "content": "The videos to be stitched can be contained in multiple assets or a single asset.",
      "pos": [
        13411,
        13491
      ]
    },
    {
      "content": "Stitching is controlled by the preset XML passed to the encoder.",
      "pos": [
        13492,
        13556
      ]
    },
    {
      "content": "For a complete description of the preset schema, see <bpt id=\"p1\">[</bpt>Azure Media Encoder Schema<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn584702.aspx)</ept>.",
      "pos": [
        13557,
        13695
      ]
    },
    {
      "content": "Stitching with Media Services Encoder",
      "pos": [
        13701,
        13738
      ]
    },
    {
      "content": "Stitching is controlled within the",
      "pos": [
        13740,
        13774
      ]
    },
    {
      "content": "element as shown in the following preset:",
      "pos": [
        13787,
        13828
      ]
    },
    {
      "content": "For each video to be stitched, a",
      "pos": [
        14851,
        14883
      ]
    },
    {
      "content": "element is added to the",
      "pos": [
        14893,
        14916
      ]
    },
    {
      "content": "element.",
      "pos": [
        14927,
        14935
      ]
    },
    {
      "content": "Each",
      "pos": [
        14936,
        14940
      ]
    },
    {
      "content": "element contains a",
      "pos": [
        14950,
        14968
      ]
    },
    {
      "content": "element.",
      "pos": [
        14977,
        14985
      ]
    },
    {
      "content": "Each",
      "pos": [
        14986,
        14990
      ]
    },
    {
      "content": "element contains one or more",
      "pos": [
        14999,
        15027
      ]
    },
    {
      "content": "element that specifies how much of the video will be stitched into the output asset, by specifying a start and end time.",
      "pos": [
        15035,
        15155
      ]
    },
    {
      "content": "The",
      "pos": [
        15156,
        15159
      ]
    },
    {
      "content": "element references the asset on which it acts.",
      "pos": [
        15169,
        15215
      ]
    },
    {
      "content": "The format of the reference depends on whether the videos to be stitched are in separate assets or in a single asset.",
      "pos": [
        15216,
        15333
      ]
    },
    {
      "content": "If you want to stitch an entire video, simply omit the",
      "pos": [
        15334,
        15388
      ]
    },
    {
      "content": "element.",
      "pos": [
        15397,
        15405
      ]
    },
    {
      "content": "Stitching Videos from Multiple Assets",
      "pos": [
        15411,
        15448
      ]
    },
    {
      "content": "When stitching videos from multiple assets, a zero-based index is used for the MediaFile attribute of the",
      "pos": [
        15450,
        15555
      ]
    },
    {
      "content": "element to identify which asset the",
      "pos": [
        15565,
        15600
      ]
    },
    {
      "content": "element corresponds to.",
      "pos": [
        15610,
        15633
      ]
    },
    {
      "content": "The zero index is not specified, the",
      "pos": [
        15634,
        15670
      ]
    },
    {
      "content": "element that does not specify a MediaFile attribute references the first input asset.",
      "pos": [
        15680,
        15765
      ]
    },
    {
      "content": "All other",
      "pos": [
        15766,
        15775
      ]
    },
    {
      "content": "elements must specify the zero-based index of the input asset to which it refers by using %n% syntax where n is the zero-based index of the input asset.",
      "pos": [
        15785,
        15937
      ]
    },
    {
      "content": "In the preceding example the first",
      "pos": [
        15938,
        15972
      ]
    },
    {
      "content": "element specifies the first input asset, the second",
      "pos": [
        15982,
        16033
      ]
    },
    {
      "content": "element specifies the second input asset, and so on.",
      "pos": [
        16043,
        16095
      ]
    },
    {
      "content": "There is no requirement that the input assets be referenced in order, for example:",
      "pos": [
        16096,
        16178
      ]
    },
    {
      "content": "This example stitches together portions of the second, the first, and the third input assets.",
      "pos": [
        17087,
        17180
      ]
    },
    {
      "content": "Note that since each video is referenced by a zero-based index it is possible to stitch two videos together that have the same name.",
      "pos": [
        17181,
        17313
      ]
    },
    {
      "content": "Once you have created a preset file you must do the following:",
      "pos": [
        17314,
        17376
      ]
    },
    {
      "content": "Upload your assets",
      "pos": [
        17381,
        17399
      ]
    },
    {
      "content": "Load the preset configuration",
      "pos": [
        17402,
        17431
      ]
    },
    {
      "content": "Create a job",
      "pos": [
        17434,
        17446
      ]
    },
    {
      "content": "Get a reference to the Media Services Encoder",
      "pos": [
        17449,
        17494
      ]
    },
    {
      "content": "Create a task specifying the input assets, the preset configuration, the media encoder, and the output asset",
      "pos": [
        17497,
        17605
      ]
    },
    {
      "content": "Submit the job",
      "pos": [
        17608,
        17622
      ]
    },
    {
      "content": "The following code snippet shows how to do these steps:",
      "pos": [
        17624,
        17679
      ]
    },
    {
      "content": "This snippet loads each asset sequentially for simplicity.",
      "pos": [
        19508,
        19566
      ]
    },
    {
      "content": "In production environments assets would be loaded in bulk.",
      "pos": [
        19567,
        19625
      ]
    },
    {
      "content": "For more information on uploading multiple assets in bulk see <bpt id=\"p1\">[</bpt>Ingesting Assets in Bulk with the Media Services SDK for .NET<ept id=\"p1\">](media-services-dotnet-upload-files.md#ingest_in_bulk)</ept>.",
      "pos": [
        19626,
        19806
      ]
    },
    {
      "content": "For complete sample code see <bpt id=\"p1\">[</bpt>Stitching with Media Services Encoder<ept id=\"p1\">](https://code.msdn.microsoft.com/Stitching-with-Media-8fd5f203)</ept>.",
      "pos": [
        19807,
        19939
      ]
    },
    {
      "content": "Stitching Videos from a Single Asset",
      "pos": [
        19944,
        19980
      ]
    },
    {
      "content": "When stitching videos within a single asset, each video must have a unique name.",
      "pos": [
        19982,
        20062
      ]
    },
    {
      "content": "The videos are specified using the MediaFile attribute using the filename as the attribute’s value.",
      "pos": [
        20063,
        20162
      ]
    },
    {
      "content": "For example:",
      "pos": [
        20163,
        20175
      ]
    },
    {
      "content": "This preset stitches parts of video1.mp4, video2.wmv, and video3.wmv into the output asset.",
      "pos": [
        21123,
        21214
      ]
    },
    {
      "content": "The creation of the job and tasks is the same as stitching videos from multiple assets, you only need to upload a single asset as shown in the following code:",
      "pos": [
        21215,
        21373
      ]
    },
    {
      "content": "Encoding Presentations or Audio Streams With Mostly Speech",
      "pos": [
        22597,
        22655
      ]
    },
    {
      "content": "When encoding video whose audio track contains mostly speech, the default encoder presets may cause background noise to be amplified in the encoded asset.",
      "pos": [
        22658,
        22812
      ]
    },
    {
      "content": "This behavior is caused by the NormalizeAudio attribute being set to true.",
      "pos": [
        22813,
        22887
      ]
    },
    {
      "content": "Encoding Presentations with Mostly Speech",
      "pos": [
        22892,
        22933
      ]
    },
    {
      "content": "To prevent the amplification of background noise, do the following:",
      "pos": [
        22935,
        23002
      ]
    },
    {
      "content": "Copy the contents of the encoder preset you are using into an XML file.",
      "pos": [
        23007,
        23078
      ]
    },
    {
      "content": "The encoder presets can be found at: Azure Media Encoder Schemas",
      "pos": [
        23079,
        23143
      ]
    },
    {
      "content": "Delete the NormalizeAudio attribute, it can be found near the top of the preset file under the",
      "pos": [
        23147,
        23241
      ]
    },
    {
      "content": "element:",
      "pos": [
        23254,
        23262
      ]
    },
    {
      "content": "Save the modified preset file to your local hard drive, and use code such as the following to encode with the custom preset:",
      "pos": [
        23458,
        23582
      ]
    },
    {
      "content": "See Also",
      "pos": [
        25260,
        25268
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Azure Media Encoder XML Schema<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn584702.aspx)</ept>",
      "pos": [
        25270,
        25358
      ]
    },
    {
      "content": "test",
      "pos": [
        25359,
        25363
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Manipulate encoding tasks by customizing task presets\" \n    description=\"The Azure Media Services Encoder allows you to pass custom preset files to Azure Media Encoder. This topic shows how to customize preset files in order to achieve the following tasks: overlay an image onto an existing video, control the output file names that the encoder produces, stitch videos. \" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\"\n    ms.author=\"juliako\"/>\n\n#Manipulate encoding tasks by customizing task presets \n\nThe Azure Media Services Encoder allows you to pass custom preset files to Azure Media Encoder. This topic shows how to customize preset files in order to achieve the following tasks: \n\n- overlay an image onto an existing video, \n- control the output file names that the encoder produces, \n- stitch videos,\n- encode presentations with mostly speech.\n\n##Controlling Azure Media Encoder Output File Names \n\nBy default, the Azure Media Encoder creates output filenames by combining various attributes of the input asset and the encoding process. Each attribute is identified using a macro as discussed below.\n\nThe following is a complete list of the macros available for output file naming:\nAudio Bitrate - the bitrate used when encoding the audio, specified in kbps\n\n- Audio Codec the codec used for encoding audio, valid values are: AAC, WMA, and DDP\n- Channel Count the number of audio channels encoded, valid values are: 1, 2, or 6\n- Default extension – the default file extension \n- Language the BCP-47 language code representing the language used in the audio. This currently defaults to “und”. \n- Original File Name the name of the file uploaded into Azure Storage\n- StreamId – the stream ID as defined by the streamID attribute of the <StreamInfo> element in the preset file \n- Video Codec the codec used for encoding, valid values are: H264 and VC1\n- Video Bitrate the bitrate used when encoding the video, specified in kbps\n\nThese macros can be combine in any permutation to control the name of the files generated by the Media Services Encoder. For example, the default naming convention is:\n\n    {Original File Name}_{Video Codec}{Video Bitrate}{Audio Codec}{Language}{Channel Count}{Audio Bitrate}.{Default Extension}\n\nThe file naming convention is specified using the DefaultMediaOutputFileName attribute of the [Preset](https://msdn.microsoft.com/library/azure/dn554334.aspx) element. For example:\n\n    <Preset DefaultMediaOutputFileName=\"{Original file name}{StreamId}_LongOutputFileName{Bit Rate}{Video Codec}{Video Bitrate}{Audio Codec}{Audio Bitrate}{Language}{Channel Count}.{Default extension}\"\n      Version=\"5.0\">\n    <MediaFile …>\n       <OutputFormat>\n          <MP4OutputFormat StreamCompatibility=\"Standard\">\n             <VideoProfile>\n                <MainH264VideoProfile … >\n                   <Streams  AutoSize=\"False\"\n                             FreezeSort=\"False\">\n                      <StreamInfo StreamId=\"1\"\n                                  Size=\"1280, 720\">\n                         <Bitrate>\n                           <ConstantBitrate Bitrate=\"3400\"\n                                            IsTwoPass=\"False\"\n                                            BufferWindow=\"00:00:05\" />\n                         </Bitrate>\n                       </StreamInfo>\n                      </Streams>\n                   </MainH264VideoProfile>\n                </VideoProfile>\n             </MP4OutputFormat>\n       </OutputFormat>\n    </MediaFile>\n\nThe encoder will insert underscores between each macro, for example, configuration above would result in a file name like: MyVideo_H264_4500kpbs_AAC_und_ch2_128kbps.mp4.\n\n\n##Creating Overlays\n\nThe Azure Media Services Encoder allows you to overlay an image (jpg, bmp, gif, tif), a video, or an audio track (*.wma, *.mp3, *.wav) onto an existing video. This functionality is similar to that of Expression Encoder 4 (Service Pack 2).\n\n###Overlays with the Media Services Encoder\n\nYou can specify when the overlay will be presented, the duration the overlay will presented, and for image/video overlays where on the screen the overlay will appear. You can also have the overlays fade in and/or fade out. The audio/video files to overlay can be contained in multiple assets or a single asset. Overlays are controlled by the preset XML that is passed to the encoder. For a complete description of the preset schema, see Azure Media Encoder Schemas. Overlays are specified in the <MediaFile> element as shown in the following preset snippet:\n\n    <MediaFile\n        ...\n        OverlayFileName=\"%1%\"\n        OverlayRect=\"257, 144, 255, 144\"\n        OverlayOpacity=\"0.9\"\n        OverlayFadeInDuration=\"00:00:02\"\n        OverlayFadeOutDuration=\"00:00:02\"\n        OverlayLayoutMode=\"Custom\"\n        OverlayStartTime=\"00:00:05\"\n        OverlayEndTime=\"00:00:10.2120000\"\n    \n        AudioOverlayFileName=\"%2%\"\n        AudioOverlayLoop=\"True\"\n        AudioOverlayLoopingGap=\"00:00:00\"\n        AudioOverlayLayoutMode=\"WholeSequence\"\n        AudioOverlayGainLevel=\"2.2\"\n        AudioOverlayFadeInDuration=\"00:00:00\"\n        AudioOverlayFadeOutDuration=\"00:00:00\">\n        ...\n    </MediaFile>\n\n###Presets for Video or Image Overlays\n\nOverlays can be from a single or multiple assets. When creating video overlays using multiple assets, the overlay filename is specified in the OverlayFileName attribute using %n% syntax where n is the zero-based index of the input assets for the encoding task. When creating video overlays with a single asset, the overlay file name is specified directly into the OverlayFileName attribute, as shown in the following preset snippets:\n\nExample 1:\n\n    <!-- Multiple Assets -->\n    <MediaFile\n        ...\n        OverlayFileName=\"%1%\"\n        OverlayRect=\"257, 144, 255, 144\"\n        OverlayOpacity=\"0.9\"\n        OverlayFadeInDuration=\"00:00:02\"\n        OverlayFadeOutDuration=\"00:00:02\"\n        OverlayLayoutMode=\"Custom\"\n        OverlayStartTime=\"00:00:05\"\n        OverlayEndTime=\"00:00:10.2120000\">\n\nExample 2:\n\n    <!-- Single Asset -->\n    <MediaFile\n        ...\n        OverlayFileName=\"videoOverlay.mp4\"\n        OverlayRect=\"257, 144, 255, 144\"\n        OverlayOpacity=\"0.9\"\n        OverlayFadeInDuration=\"00:00:02\"\n        OverlayFadeOutDuration=\"00:00:02\"\n        OverlayLayoutMode=\"Custom\"\n        OverlayStartTime=\"00:00:05\"\n        OverlayEndTime=\"00:00:10.2120000\">\n\nThe location and size of the video overlay is controlled by the OverlayRect attribute. The content that is to be overlaid will be re-sized to fit this rectangle. Opacity is controlled by the OverlayOpacity attribute. Valid values are 0.0 – 1.0, where 1.0 is 100% opaque. The overlay will be displayed at the time specified by the OverlayStartTime attribute and will end at the time specified by the OverlayEndTime attribute. Both OverlayStartTime and OverlayEndTime should fall within the timeline of the source video. For more information about each overlay-specific attribute, please see Azure Media Encoder Schemas.\n\n###Presets for Audio Overlays\n\nAudio overlays can be any supported audio file format, for example. For a complete list of supported audio file formats, see Formats Supported by the Media Services Encoder. Audio overlays are also specified in the <MediaFile> element as shown in the following preset snippet:\n\n    <MediaFile\n        ...\n        AudioOverlayFileName=\"%1%\" <!-- or AudioOverlayFileName=”audioOverlay.mp3” for overlays from a single asset -->\n        AudioOverlayLoop=\"True\"\n        AudioOverlayLoopingGap=\"00:00:00\"\n        AudioOverlayLayoutMode=\"Custom\"\n        AudioOverlayStartTime=\"00:05:00\"\n        AudioOverlayEndTime=\"00:10:00\"\n        AudioOverlayGainLevel=\"2.2\"\n        AudioOverlayFadeInDuration=\"00:00:00\"\n        AudioOverlayFadeOutDuration=\"00:00:00\">\n\nFor audio overlays stored in multiple assets, the audio overlay filename is specified in the AudioOverlayFileName attribute using %n% syntax, where n is the zero-based index of the collection of input assets to the encoding Task. For audio overlays stored in a single asset the overlay filename is specified directly in the AudioOverlayFileName attribute. The AudioOverlayLayoutMode determines when the audio overlay will be presented. When set to “WholeSequence” the audio track will be presented during the entire duration of the video. When set to “Custom” the AudioOverlayStartTime and AudioOverlayEndTime attributes determine when the audio overlay begins and ends. Both OverlayStartTime and OverlayEndTime should fall within the timeline of the source video. For more information on all of the audio overlay attributes, see the Azure Media Encoder Schemas. Audio overlays can be combined with video overlays as shown in the following preset snippet:\n    \n    <MediaFile\n        DeinterlaceMode=\"AutoPixelAdaptive\"\n        ResizeQuality=\"Super\"\n        AudioGainLevel=\"1\"\n        VideoResizeMode=\"Stretch\"\n        OverlayFileName=\"%1%\"\n        OverlayRect=\"257, 144, 255, 144\"\n        OverlayOpacity=\"0.9\"\n        OverlayFadeInDuration=\"00:00:02\"\n        OverlayFadeOutDuration=\"00:00:02\"\n        OverlayLayoutMode=\"Custom\"\n        OverlayStartTime=\"00:00:05\"\n        OverlayEndTime=\"00:00:10.2120000\"\n        AudioOverlayFileName=\"%2%\"\n        AudioOverlayLoop=\"True\"\n        AudioOverlayLoopingGap=\"00:00:00\"\n        AudioOverlayLayoutMode=\"Custom\"\n        AudioOverlayStartTime=\"00:05:00\"\n        AudioOverlayEndTime=\"00:10:00\"\n        AudioOverlayGainLevel=\"2.2\"\n        AudioOverlayFadeInDuration=\"00:00:00\"\n        AudioOverlayFadeOutDuration=\"00:00:00\">\n\n\n###Submitting Tasks with Overlays\n\nOnce you have created a preset file you must do the following:\n\n- Upload your asset(s)\n- Load the preset configuration (Note: the code below assumes the Preset above.\n- Create a job\n- Get a reference to the Media Services Encoder\n- Create a task specifying the collection of input assets, the preset configuration, the media encoder, and the output asset\n- Submit the job\n\nThe following code snippet shows how to do these steps:\n\n    static public void CreateOverlayJob()\n    {\n        // Create and cache the Media Services credentials in a static class variable.\n        _cachedCredentials = new MediaServicesCredentials(\n                        MediaServicesAccountName,\n                        MediaServicesAccountKey);\n        // Used the cached credentials to create CloudMediaContext.\n        _context = new CloudMediaContext(_cachedCredentials);\n\n\n        // Upload assets to overlay\n        IAsset inputAsset1 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video1.mp4); // this is the input mezzanine\n        IAsset inputAsset2 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video2.wmv);// this will be used as a video overlay\n        IAsset inputAsset3 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video3.wmv); // this will be used as an audio overlay\n        \n        // Load the preset configuration\n        string presetFileName = \"OverlayPreset.xml\";\n        string configuration = File.ReadAllText(presetFileName);\n        \n        // Create a job\n        IJob job = _context.Jobs.Create(\"A AME overlay job, using \" + presetFileName);\n                 \n        // Get a reference to the media services encoder   \n        IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n            \n        // Create a task    \n        ITask task = job.Tasks.AddNew(\"Encode Task for overlay, using \" + presetFileName, processor, configuration, TaskOptions.None);\n        \n        // Add the input assets\n        task.InputAssets.Add(inputAsset1);\n        task.InputAssets.Add(inputAsset2);\n        task.InputAssets.Add(inputAsset3);\n        \n        // Add the output asset\n        task.OutputAssets.AddNew(\"Result of an overlay job, using \" + presetFileName, AssetCreationOptions.None);\n        \n        // Submit the job\n        job.Submit();\n    }\n\n\n\n>[AZURE.NOTE]This snippet loads each asset sequentially for simplicity. In production environments assets would be loaded in bulk. For more information on uploading multiple assets in bulk see [Ingesting Assets in Bulk with the Media Services SDK for .NET](media-services-dotnet-upload-files.md#ingest_in_bulk).\n\nFor complete sample code see [Creating Overlays with Media Services Encoder](https://code.msdn.microsoft.com/Creating-Audio-and-Video-c2942c47).  \n\n###Error Conditions\n\nWhen editing the Preset string, you must ensure the following:\n\n- For video/image overlays, the overlay rectangle must fit entirely within the dimensions of the source video\n- The start and end time of the overlays should be within the timeline of the source video\n- If the preset XML contains a reference to ?OverlayFileName=”%n%”, then the InputAssets collection for the Tasks should contain at least n+1 Assets\n\n\n\n##Stitching Video Segments\n\nThe media services encoder provides support for stitching together a set of videos. Videos can be stitched together end-to-end or you can specify portions of one or both videos to be stitched together. The result of the stitching is a single output asset that contains the specified video from the input assets. The videos to be stitched can be contained in multiple assets or a single asset. Stitching is controlled by the preset XML passed to the encoder. For a complete description of the preset schema, see [Azure Media Encoder Schema](https://msdn.microsoft.com/library/azure/dn584702.aspx). \n\n###Stitching with Media Services Encoder\n\nStitching is controlled within the <MediaFile> element as shown in the following preset:\n    \n    <MediaFile\n        DeinterlaceMode=\"AutoPixelAdaptive\"\n        ResizeQuality=\"Super\"\n        AudioGainLevel=\"1\"\n        VideoResizeMode=\"Stretch\">\n        <Sources>\n          <Source\n            AudioStreamIndex=\"0\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n          <Source\n            ResizeMode=\"Letterbox\"\n            ApplyCrop=\"False\"\n            AudioStreamIndex=\"0\"\n            MediaFile=\"%1%\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n          <Source\n            ResizeMode=\"Letterbox\"\n            ApplyCrop=\"False\"\n            AudioStreamIndex=\"0\"\n            MediaFile=\"%2%\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n         </Sources>\n    </MediaFile>\n\nFor each video to be stitched, a <Source> element is added to the <Sources> element. Each <Source> element contains a <Clips> element. Each <Clips> element contains one or more <Clip> element that specifies how much of the video will be stitched into the output asset, by specifying a start and end time. The <Source> element references the asset on which it acts. The format of the reference depends on whether the videos to be stitched are in separate assets or in a single asset. If you want to stitch an entire video, simply omit the <Clips> element. \n\n###Stitching Videos from Multiple Assets\n\nWhen stitching videos from multiple assets, a zero-based index is used for the MediaFile attribute of the <Source> element to identify which asset the <Source> element corresponds to. The zero index is not specified, the <Source> element that does not specify a MediaFile attribute references the first input asset. All other <Source> elements must specify the zero-based index of the input asset to which it refers by using %n% syntax where n is the zero-based index of the input asset. In the preceding example the first <Source> element specifies the first input asset, the second <Source> element specifies the second input asset, and so on. There is no requirement that the input assets be referenced in order, for example:\n    \n    <MediaFile\n        DeinterlaceMode=\"AutoPixelAdaptive\"\n        ResizeQuality=\"Super\"\n        AudioGainLevel=\"1\"\n        VideoResizeMode=\"Stretch\">\n        <Sources>\n          <Source\n            AudioStreamIndex=\"0\"\n            MediaFile=\"%1%\">\n            <Clips>\n              <Clip EndTime=\"00:00:05\" \n                    StartTime=\"00:00:00\" />\n            </Clips>\n                      \n            </Source>\n          <Source\n           AudioStreamIndex=\"0\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n          <Source\n              AudioStreamIndex=\"0\"\n             MediaFile=\"%2%\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n         </Sources>\n    </MediaFile>\n\nThis example stitches together portions of the second, the first, and the third input assets. Note that since each video is referenced by a zero-based index it is possible to stitch two videos together that have the same name. Once you have created a preset file you must do the following:\n \n- Upload your assets\n- Load the preset configuration\n- Create a job\n- Get a reference to the Media Services Encoder\n- Create a task specifying the input assets, the preset configuration, the media encoder, and the output asset\n- Submit the job\n\nThe following code snippet shows how to do these steps:\n    \n    static public void StitchWithMultipleAssets()\n    {\n        // Create and cache the Media Services credentials in a static class variable.\n        _cachedCredentials = new MediaServicesCredentials(\n                        MediaServicesAccountName,\n                        MediaServicesAccountKey);\n        // Used the cached credentials to create CloudMediaContext.\n        _context = new CloudMediaContext(_cachedCredentials);\n        \n        // Upload assets to stitch\n        IAsset inputAsset1 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video1.mp4);\n        IAsset inputAsset2 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video2.wmv);\n        IAsset inputAsset3 = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, video3.wmv);\n        \n        // Load the preset configuration\n        string presetFileName = \"StitchingWithMultipleAssets.xml\";\n        string configuration = File.ReadAllText(presetFileName);\n        \n        // Create a job\n        IJob job = _context.Jobs.Create(\"A AME stitching job, using \" + presetFileName);\n                 \n        // Get a reference to the media services encoder   \n        IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n            \n        // Create a task    \n        ITask task = job.Tasks.AddNew(\"Encode Task for stitching, using \" + presetFileName, processor, configuration, TaskOptions.None);\n        \n        // Add the input assets\n        task.InputAssets.Add(inputAsset1);\n        task.InputAssets.Add(inputAsset2);\n        task.InputAssets.Add(inputAsset3);\n        \n        // Add the output asset\n        task.OutputAssets.AddNew(\"Result of a stitching job, using \" + presetFileName, AssetCreationOptions.None);\n        \n        // Submit the job\n        job.Submit();\n        } \n\n\nThis snippet loads each asset sequentially for simplicity. In production environments assets would be loaded in bulk. For more information on uploading multiple assets in bulk see [Ingesting Assets in Bulk with the Media Services SDK for .NET](media-services-dotnet-upload-files.md#ingest_in_bulk). For complete sample code see [Stitching with Media Services Encoder](https://code.msdn.microsoft.com/Stitching-with-Media-8fd5f203).\n\n###Stitching Videos from a Single Asset\n\nWhen stitching videos within a single asset, each video must have a unique name. The videos are specified using the MediaFile attribute using the filename as the attribute’s value. For example:\n    \n    <MediaFile\n        DeinterlaceMode=\"AutoPixelAdaptive\"\n        ResizeQuality=\"Super\"\n        AudioGainLevel=\"1\"\n        VideoResizeMode=\"Stretch\">\n        <Sources>\n          <Source\n            AudioStreamIndex=\"0\"\n            MediaFile=\"video1.mp4\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n          <Source\n           AudioStreamIndex=\"0\"\n           MediaFile=\"video2.wmv\">\n    \n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n          <Source\n              AudioStreamIndex=\"0\"\n             MediaFile=\"video3.wmv\">\n            <Clips>\n              <Clip\n                StartTime=\"00:00:00\"\n                EndTime=\"00:00:05\" />\n            </Clips>\n          </Source>\n         </Sources>\n    </MediaFile>\n\nThis preset stitches parts of video1.mp4, video2.wmv, and video3.wmv into the output asset.\nThe creation of the job and tasks is the same as stitching videos from multiple assets, you only need to upload a single asset as shown in the following code:\n\n    // Creates a stitching job that uses a single asset \n    static public void StitchWithASingleAsset()\n    {\n        string presetFileName = \"StitchingWithASingleAsset.xml\";\n        string configuration = File.ReadAllText(presetFileName);\n\n        // Create and cache the Media Services credentials in a static class variable.\n        _cachedCredentials = new MediaServicesCredentials(\n                        MediaServicesAccountName,\n                        MediaServicesAccountKey);\n        // Used the cached credentials to create CloudMediaContext.\n        _context = new CloudMediaContext(_cachedCredentials);\n\n        IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n        IJob job = _context.Jobs.Create(\"A AME stitching job, using \" + presetFileName);\n        IAsset asset = CreateAssetAndUploadMultipleFiles(AssetCreationOptions.None, _stitchingFiles);\n\n        ITask task = job.Tasks.AddNew(\"Encode Task for stitching, using \" + presetFileName, processor, configuration, TaskOptions.None);\n        task.InputAssets.Add(asset);\n        task.OutputAssets.AddNew(\"Result of a stitching job, using \" + presetFileName, AssetCreationOptions.None);\n\n        job.Submit();\n    }\n\n##Encoding Presentations or Audio Streams With Mostly Speech\n \nWhen encoding video whose audio track contains mostly speech, the default encoder presets may cause background noise to be amplified in the encoded asset. This behavior is caused by the NormalizeAudio attribute being set to true.\n\n###Encoding Presentations with Mostly Speech\n\nTo prevent the amplification of background noise, do the following:\n\n1. Copy the contents of the encoder preset you are using into an XML file. The encoder presets can be found at: Azure Media Encoder Schemas\n1. Delete the NormalizeAudio attribute, it can be found near the top of the preset file under the <MediaFile> element:\n    \n    <MediaFile\n         DeinterlaceMode=\"AutoPixelAdaptive\"\n         ResizeQuality=\"Super\"\n         NormalizeAudio=\"True\"\n         AudioGainLevel=\"1\"\n         VideoResizeMode=\"Stretch\">\n\n1. Save the modified preset file to your local hard drive, and use code such as the following to encode with the custom preset:\n        \n        // Upload file and create asset\n        IAsset asset = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, @\"C:\\TEMP\\Original.mp4\");\n         \n        string inputPresetFile = @\"C:\\TEMP\\H264 Broadband 720p NoAudioNorm.xml\";\n        string presetName = Path.GetFileNameWithoutExtension(inputPresetFile);\n         \n        IJob job = _context.Jobs.Create(\"Encode Job for \" + asset.Name + \", encoded using \" +  presetName);\n        \n        Console.WriteLine(\"Encode Job for \" + asset.Name + \", encoded using \" + presetName);\n        \n        // Get a media processor reference, and pass to it the name of the processor to use for the specific task.\n        IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n        Console.WriteLine(\"Got MP \" + processor.Name + \", ID : \" + processor.Id + \", version: \" + processor.Version);\n         \n        // Read the configuration data into a string. \n        string configuration = File.ReadAllText(inputPresetFile);\n         \n        // Create a task with the encoding details, using a string preset.\n        ITask task = job.Tasks.AddNew(\"Encode Task for \" + asset.Name + \", encoded using \" + presetName, processor, configuration,\n                        Microsoft.WindowsAzure.MediaServices.Client.TaskOptions.None);\n         \n        // Specify the input asset to be encoded.\n        task.InputAssets.Add(asset);\n         \n        // Add an output asset to contain the results of the job.\n        task.OutputAssets.AddNew(\"Output asset for \" + asset.Name + \", encoded using \" + presetName, AssetCreationOptions.None);\n         \n        // Launch the job. \n        job.Submit();\n\n##See Also\n\n[Azure Media Encoder XML Schema](https://msdn.microsoft.com/library/azure/dn584702.aspx)\ntest\n"
}