{
  "nodes": [
    {
      "content": "How Reliable Actors use the Service Fabric platform",
      "pos": [
        26,
        77
      ]
    },
    {
      "content": "This articles describes how Reliable Actors use the features of the Service Fabric platform.",
      "pos": [
        95,
        187
      ]
    },
    {
      "content": "It covers Service Fabric platform concepts from the point of view of actor developers.",
      "pos": [
        188,
        274
      ]
    },
    {
      "content": "How Reliable Actors use the Service Fabric platform",
      "pos": [
        572,
        623
      ]
    },
    {
      "content": "Service Fabric application model concepts for actors",
      "pos": [
        628,
        680
      ]
    },
    {
      "content": "Actors use the Service Fabric application model to manage the application lifecycle.",
      "pos": [
        681,
        765
      ]
    },
    {
      "content": "Every Actor type is mapped to a Service Fabric <bpt id=\"p1\">[</bpt>Service type<ept id=\"p1\">](service-fabric-application-model.md#describe-a-service)</ept>.",
      "pos": [
        766,
        884
      ]
    },
    {
      "content": "The actor code is <bpt id=\"p1\">[</bpt>packaged<ept id=\"p1\">](service-fabric-application-model.md#package-an-application)</ept> as a Service Fabric application and <bpt id=\"p2\">[</bpt>deployed<ept id=\"p2\">](service-fabric-deploy-remove-applications.md#deploy-an-application)</ept> to the cluster.",
      "pos": [
        885,
        1104
      ]
    },
    {
      "pos": [
        1106,
        1268
      ],
      "content": "Let's take the example of an actor project <bpt id=\"p1\">[</bpt>created using Visual Studio<ept id=\"p1\">](service-fabric-reliable-actors-get-started.md)</ept>, to illustrate some of the above concepts."
    },
    {
      "content": "The application manifest, service manifest and Settings.xml configuration file are included in the project for the actor service when the solution is created in Visual Studio.",
      "pos": [
        1270,
        1445
      ]
    },
    {
      "content": "This is shown in the screenshot below.",
      "pos": [
        1446,
        1484
      ]
    },
    {
      "content": "![][1]",
      "pos": [
        1486,
        1492
      ]
    },
    {
      "content": "The application type and version of the application that the actor is packaged into can be found by looking at the application manifest that is included in the project for the actor service.",
      "pos": [
        1494,
        1684
      ]
    },
    {
      "content": "The following snippet from an application manifest is an example of this.",
      "pos": [
        1685,
        1758
      ]
    },
    {
      "content": "The service type that the actor type maps to can be found by looking at the service manifest that is included in the project for the actor service.",
      "pos": [
        2105,
        2252
      ]
    },
    {
      "content": "The following snippet from a service manifest is an example of this.",
      "pos": [
        2253,
        2321
      ]
    },
    {
      "content": "When the application package is created using Visual Studio, the logs in the Build Output window indicate the location of the application package.",
      "pos": [
        2426,
        2572
      ]
    },
    {
      "content": "For example:",
      "pos": [
        2573,
        2585
      ]
    },
    {
      "content": "The following is a partial listing of the above location (full listing omitted for brevity):",
      "pos": [
        2795,
        2887
      ]
    },
    {
      "content": "The listing above shows the assemblies that implement the VoicemailBox actor getting included in the code package within the service package within the application package.",
      "pos": [
        4354,
        4526
      ]
    },
    {
      "content": "The Visual Studio solution includes the PowerShell scripts that are used to deploy the application to and remove the application from the cluster.",
      "pos": [
        4530,
        4676
      ]
    },
    {
      "content": "The scripts are circled in the screenshot below.",
      "pos": [
        4677,
        4725
      ]
    },
    {
      "content": "![][2]",
      "pos": [
        4727,
        4733
      ]
    },
    {
      "content": "Subsequent management (i.e.",
      "pos": [
        4735,
        4762
      ]
    },
    {
      "content": "upgrades and eventual deletion) of the application is also performed using Service Fabric application management mechanisms.",
      "pos": [
        4763,
        4887
      ]
    },
    {
      "content": "For more information, please see the topics on the <bpt id=\"p1\">[</bpt>application model<ept id=\"p1\">](service-fabric-application-model.md)</ept>, <bpt id=\"p2\">[</bpt>application deployment and removal<ept id=\"p2\">](service-fabric-deploy-remove-applications.md)</ept>, and <bpt id=\"p3\">[</bpt>application upgrade<ept id=\"p3\">](service-fabric-application-upgrade.md)</ept>.",
      "pos": [
        4888,
        5146
      ]
    },
    {
      "content": "Scalability for actor services",
      "pos": [
        5151,
        5181
      ]
    },
    {
      "content": "Cluster administrators can create one or more actor services of each service type in the cluster.",
      "pos": [
        5182,
        5279
      ]
    },
    {
      "content": "Each of those actor services can have one or more partitions (similar to any other Service Fabric service).",
      "pos": [
        5280,
        5387
      ]
    },
    {
      "content": "The ability to create multiple services of a service type (which maps to an actor type) and the ability to create multiple partitions for a service allow the actor application to scale.",
      "pos": [
        5388,
        5573
      ]
    },
    {
      "content": "Please see the article on <bpt id=\"p1\">[</bpt>scalability<ept id=\"p1\">](service-fabric-concepts-scalability.md)</ept> for more information.",
      "pos": [
        5574,
        5675
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Stateless actor services are required to have an <bpt id=\"p1\">[</bpt>instance<ept id=\"p1\">](service-fabric-availability-services.md#availability-of-service-fabric-stateless-services)</ept> count of 1.",
      "pos": [
        5679,
        5854
      ]
    },
    {
      "content": "Having more than one instance of a stateless actor service in a partition is not supported.",
      "pos": [
        5855,
        5946
      ]
    },
    {
      "content": "Therefore, stateless actor services do not have the option of increasing instance count to achieve scalability.",
      "pos": [
        5947,
        6058
      ]
    },
    {
      "content": "They must use the scalability options that are described in the <bpt id=\"p1\">[</bpt>scalability article<ept id=\"p1\">](service-fabric-concepts-scalability.md)</ept>.",
      "pos": [
        6059,
        6185
      ]
    },
    {
      "content": "Service Fabric partition concepts for actors",
      "pos": [
        6190,
        6234
      ]
    },
    {
      "content": "The actor ID of an actor is mapped to a partition of an actor service.",
      "pos": [
        6235,
        6305
      ]
    },
    {
      "content": "The actor is created within the partition that its actor ID maps to.",
      "pos": [
        6306,
        6374
      ]
    },
    {
      "content": "When an actor is created, the Actors runtime writes an <bpt id=\"p1\">[</bpt>EventSource event<ept id=\"p1\">](service-fabric-reliable-actors-diagnostics.md#eventsource-events)</ept> that indicates which partition the actor is created in.",
      "pos": [
        6375,
        6571
      ]
    },
    {
      "content": "Below is an example of this event that indicates that an actor with ID <ph id=\"ph1\">`-5349766044453424161`</ph> was created within partition <ph id=\"ph2\">`0583c745-1bed-43b2-9545-29d7e3448156`</ph> of service <ph id=\"ph3\">`fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService`</ph>, application <ph id=\"ph4\">`fabric:/VoicemailBoxAdvancedApplication`</ph>.",
      "pos": [
        6572,
        6867
      ]
    },
    {
      "pos": [
        7783,
        7961
      ],
      "content": "Another actor with ID <ph id=\"ph1\">`-4952641569324299627`</ph> was created within a different partition <ph id=\"ph2\">`c146fe53-16d7-4d96-bac6-ef54613808ff`</ph> of the same service, as indicated by the event below."
    },
    {
      "pos": [
        8875,
        8939
      ],
      "content": "<bpt id=\"p1\">*</bpt>Note:<ept id=\"p1\">*</ept> some fields of the above events are omitted for brevity."
    },
    {
      "content": "The partition ID can be used to get other information about the partition.",
      "pos": [
        8941,
        9015
      ]
    },
    {
      "content": "For example, the <bpt id=\"p1\">[</bpt>Service Fabric Explorer<ept id=\"p1\">](service-fabric-visualizing-your-cluster.md)</ept> tool can be used to view information about the partition and the service and application to which it belongs.",
      "pos": [
        9016,
        9212
      ]
    },
    {
      "content": "The screenshot below shows information about partition <ph id=\"ph1\">`c146fe53-16d7-4d96-bac6-ef54613808ff`</ph>, which contained the actor with ID <ph id=\"ph2\">`-4952641569324299627`</ph> in the above example.",
      "pos": [
        9213,
        9386
      ]
    },
    {
      "content": "![][3]",
      "pos": [
        9390,
        9396
      ]
    },
    {
      "content": "Actors can programmatically obtain the partition ID, service name, application name and other Service Fabric platform-specific information via the <ph id=\"ph1\">`Host.ActivationContext`</ph> and the <ph id=\"ph2\">`Host.StatelessServiceInitialization`</ph> or <ph id=\"ph3\">`Host.StatefulServiceInitializationParameters`</ph> members of the base class that the actor type derives from.",
      "pos": [
        9398,
        9725
      ]
    },
    {
      "content": "The following code snippet shows an example:",
      "pos": [
        9726,
        9770
      ]
    },
    {
      "content": "Service Fabric partition concepts for stateless actors",
      "pos": [
        10516,
        10570
      ]
    },
    {
      "content": "Stateless actors are created within a partition of a Service Fabric stateless service.",
      "pos": [
        10571,
        10657
      ]
    },
    {
      "content": "The actor ID determines which partition the actor is created under.",
      "pos": [
        10658,
        10725
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>instance<ept id=\"p1\">](service-fabric-availability-services.md#availability-of-service-fabric-stateless-services)</ept> count for a stateless actor service must be 1.",
      "pos": [
        10726,
        10878
      ]
    },
    {
      "content": "Changing the instance count to any other value is not supported.",
      "pos": [
        10879,
        10943
      ]
    },
    {
      "content": "Thus, the actor is created inside the single service instance within the partition.",
      "pos": [
        10944,
        11027
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The Fabric Actors runtime emits some <bpt id=\"p1\">[</bpt>events related to stateless actor instances<ept id=\"p1\">](service-fabric-reliable-actors-diagnostics.md#events-related-to-stateless-actor-instances)</ept>.",
      "pos": [
        11031,
        11217
      ]
    },
    {
      "content": "They are useful in diagnostics and performance monitoring.",
      "pos": [
        11218,
        11276
      ]
    },
    {
      "content": "When a stateless actor is created, the Actors runtime writes an <bpt id=\"p1\">[</bpt>EventSource event<ept id=\"p1\">](service-fabric-reliable-actors-diagnostics.md#eventsource-events)</ept> that indicates which partition and instance the actor is created in.",
      "pos": [
        11278,
        11496
      ]
    },
    {
      "content": "Below is an example of this event that indicates that an actor with ID <ph id=\"ph1\">`abc`</ph> was created within instance <ph id=\"ph2\">`130745709600495974`</ph> of partition <ph id=\"ph3\">`8c828833-ccf1-4e21-b99d-03b14d4face3`</ph>, of service <ph id=\"ph4\">`fabric:/HelloWorldApplication/HelloWorldActorService`</ph>, application <ph id=\"ph5\">`fabric:/HelloWorldApplication`</ph>.",
      "pos": [
        11497,
        11787
      ]
    },
    {
      "pos": [
        12553,
        12616
      ],
      "content": "<bpt id=\"p1\">*</bpt>Note:<ept id=\"p1\">*</ept> some fields of the above event are omitted for brevity."
    },
    {
      "content": "Service Fabric partition concepts for stateful actors",
      "pos": [
        12622,
        12675
      ]
    },
    {
      "content": "Stateful actors are created within a partition of the Service Fabric stateful service.",
      "pos": [
        12676,
        12762
      ]
    },
    {
      "content": "The actor ID determines which partition the actor is created under.",
      "pos": [
        12763,
        12830
      ]
    },
    {
      "content": "Each partition of the service can have one or more <bpt id=\"p1\">[</bpt>replicas<ept id=\"p1\">](service-fabric-availability-services.md#availability-of-service-fabric-stateful-services)</ept> that are placed on different nodes in the cluster.",
      "pos": [
        12831,
        13033
      ]
    },
    {
      "content": "Having multiple replicas provides reliability for the actor state.",
      "pos": [
        13034,
        13100
      ]
    },
    {
      "content": "The resource manager optimizes the placement based on the available fault and upgrade domains in the cluster.",
      "pos": [
        13101,
        13210
      ]
    },
    {
      "content": "Two replicas of the same partition are never placed on the same node.",
      "pos": [
        13211,
        13280
      ]
    },
    {
      "content": "The actors are always created in the primary replica of the partition to which their actor ID maps to.",
      "pos": [
        13281,
        13383
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The Fabric Actors runtime emits some <bpt id=\"p1\">[</bpt>events related to stateful actor replicas<ept id=\"p1\">](service-fabric-reliable-actors-diagnostics.md#events-related-to-stateful-actor-replicas)</ept>.",
      "pos": [
        13387,
        13569
      ]
    },
    {
      "content": "They are useful in diagnostics and performance monitoring.",
      "pos": [
        13570,
        13628
      ]
    },
    {
      "content": "Recall that in the <bpt id=\"p1\">[</bpt>VoiceMailBoxActor example presented earlier<ept id=\"p1\">](#service-fabric-partition-concepts-for-actors)</ept>, the actor with ID <ph id=\"ph1\">`-4952641569324299627`</ph> was created within partition <ph id=\"ph2\">`c146fe53-16d7-4d96-bac6-ef54613808ff`</ph>.",
      "pos": [
        13630,
        13852
      ]
    },
    {
      "content": "The EventSource event from that example also indicated that the actor was created in replica <ph id=\"ph1\">`130745418574851853`</ph> of that partition.",
      "pos": [
        13853,
        13985
      ]
    },
    {
      "content": "This was the primary replica of that partition at the time the actor was created.",
      "pos": [
        13986,
        14067
      ]
    },
    {
      "content": "The Service Fabric Explorer screenshot below confirms this.",
      "pos": [
        14068,
        14127
      ]
    },
    {
      "content": "![][4]",
      "pos": [
        14129,
        14135
      ]
    },
    {
      "content": "Actor state provider choices",
      "pos": [
        14140,
        14168
      ]
    },
    {
      "content": "There are some default actor state providers that are included in the Actors runtime.",
      "pos": [
        14169,
        14254
      ]
    },
    {
      "content": "In order to choose an appropriate state provider for an actor service, it is necessary to understand how the state providers use the underlying Service Fabric platform features to make the actor state highly available.",
      "pos": [
        14255,
        14473
      ]
    },
    {
      "content": "By default a stateful actor uses key value store actor state provider.",
      "pos": [
        14475,
        14545
      ]
    },
    {
      "content": "This state provider is built on the distributed Key-Value store provided by Service Fabric platform.",
      "pos": [
        14546,
        14646
      ]
    },
    {
      "content": "The state is durably saved on the local disk of the node hosting the primary <bpt id=\"p1\">[</bpt>replica<ept id=\"p1\">](service-fabric-availability-services.md#availability-of-service-fabric-stateful-services)</ept>, as well as replicated and durably saved on the local disks of nodes hosting the secondary replicas.",
      "pos": [
        14647,
        14924
      ]
    },
    {
      "content": "The state save is complete only when a quorum of replicas has committed the state to their local disks.",
      "pos": [
        14925,
        15028
      ]
    },
    {
      "content": "The Key-Value store has advanced capabilities to detect inconsistencies such as false progress and correct them automatically.",
      "pos": [
        15029,
        15155
      ]
    },
    {
      "content": "The Actors runtime also includes a <ph id=\"ph1\">`VolatileActorStateProvider`</ph>.",
      "pos": [
        15157,
        15221
      ]
    },
    {
      "content": "This state provider replicates the state to replicas but the state remains in-memory on the replica.",
      "pos": [
        15222,
        15322
      ]
    },
    {
      "content": "If one replica goes down and comes back up, its state is rebuilt from the other replica.",
      "pos": [
        15323,
        15411
      ]
    },
    {
      "content": "However if all of the replicas (copies of the state) go down simultaneously the state data will be lost.",
      "pos": [
        15412,
        15516
      ]
    },
    {
      "content": "Therefore, this state provider is suitable for applications where the data can survive failures of few replicas and can survive the planned failovers such as upgrades.",
      "pos": [
        15517,
        15684
      ]
    },
    {
      "content": "If all replicas (copies) are lost, then the data needs to be recreated using mechanisms external to Service Fabric.",
      "pos": [
        15685,
        15800
      ]
    },
    {
      "content": "You can configure your stateful actor to use volatile actor state provider by adding the <ph id=\"ph1\">`VolatileActorStateProvider`</ph> attribute to the actor class or an assembly level attribute.",
      "pos": [
        15801,
        15979
      ]
    },
    {
      "pos": [
        15981,
        16148
      ],
      "content": "The following code snippet shows how to changes all actors in the assembly that does not have an explicit state provider attribute to use <ph id=\"ph1\">`VolatileActorStateProvider`</ph>."
    },
    {
      "pos": [
        16234,
        16393
      ],
      "content": "The following code snippet shows how to change the state provider for a particular actor type, <ph id=\"ph1\">`VoicemailBox`</ph> in this case, to be <ph id=\"ph2\">`VolatileActorStateProvider`</ph>."
    },
    {
      "content": "Please note that changing the state provider requires the actor service to be recreated.",
      "pos": [
        16639,
        16727
      ]
    },
    {
      "content": "State providers cannot be changed as part of the application upgrade.",
      "pos": [
        16728,
        16797
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"How Reliable Actors use the Service Fabric platform\"\n   description=\"This articles describes how Reliable Actors use the features of the Service Fabric platform. It covers Service Fabric platform concepts from the point of view of actor developers.\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"jessebenson\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"NA\"\n   ms.date=\"08/05/2015\"\n   ms.author=\"abhisram\"/>\n\n# How Reliable Actors use the Service Fabric platform\n\n## Service Fabric application model concepts for actors\nActors use the Service Fabric application model to manage the application lifecycle. Every Actor type is mapped to a Service Fabric [Service type](service-fabric-application-model.md#describe-a-service). The actor code is [packaged](service-fabric-application-model.md#package-an-application) as a Service Fabric application and [deployed](service-fabric-deploy-remove-applications.md#deploy-an-application) to the cluster.\n\nLet's take the example of an actor project [created using Visual Studio](service-fabric-reliable-actors-get-started.md), to illustrate some of the above concepts.\n\nThe application manifest, service manifest and Settings.xml configuration file are included in the project for the actor service when the solution is created in Visual Studio. This is shown in the screenshot below.\n\n![][1]\n\nThe application type and version of the application that the actor is packaged into can be found by looking at the application manifest that is included in the project for the actor service. The following snippet from an application manifest is an example of this.\n\n~~~\n<ApplicationManifest xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                     ApplicationTypeName=\"VoiceMailBoxApplication\"\n                     ApplicationTypeVersion=\"1.0.0.0\"\n                     xmlns=\"http://schemas.microsoft.com/2011/01/fabric\">\n~~~\n\nThe service type that the actor type maps to can be found by looking at the service manifest that is included in the project for the actor service. The following snippet from a service manifest is an example of this.\n\n~~~\n<StatefulServiceType ServiceTypeName=\"VoiceMailBoxActorServiceType\" HasPersistedState=\"true\">\n~~~\n\nWhen the application package is created using Visual Studio, the logs in the Build Output window indicate the location of the application package. For example:\n\n    -------- Package started: Project: VoiceMailBoxApplication, Configuration: Debug x64 ------\n    VoiceMailBoxApplication -> C:\\samples\\Samples\\Actors\\VS2015\\VoiceMailBox\\VoiceMailBoxApplication\\pkg\\Debug\n\nThe following is a partial listing of the above location (full listing omitted for brevity):\n\n    C:\\samples\\Samples\\Actors\\VS2015\\VoiceMailBox\\VoiceMailBoxApplication\\pkg\\Debug>tree /f\n    Folder PATH listing\n    Volume serial number is 303F-6F91\n    C:.\n    │   ApplicationManifest.xml\n    │\n    ├───VoiceMailBoxActorServicePkg\n    │   │   ServiceManifest.xml\n    │   │\n    │   ├───Code\n    │   │   │   Microsoft.ServiceFabric.Actors.dll\n    │   │   │       :\n    │   │   │   Microsoft.ServiceFabric.Services.dll\n    │   │   │   ServiceFabricServiceModel.dll\n    │   │   │   System.Fabric.Common.Internal.dll\n    │   │   │   System.Fabric.Common.Internal.Strings.dll\n    │   │   │   VoiceMailBox.exe\n    │   │   │   VoiceMailBox.exe.config\n    │   │   │   VoiceMailBox.Interfaces.dll\n    │   │   │\n    │   │   └───en-us\n    │   │           System.Fabric.Common.Internal.Strings.resources.dll\n    │   │\n    │   └───Config\n    │           Settings.xml\n    │\n    └───VoicemailBoxWebServicePkg\n        │   ServiceManifest.xml\n        │\n        └───Code\n            │   Microsoft.Owin.dll\n            │       :\n            │   Microsoft.ServiceFabric.Services.dll\n            │       :\n            │   System.Fabric.Common.Internal.dll\n            │   System.Fabric.Common.Internal.Strings.dll\n            │       :\n            │   VoiceMailBox.Interfaces.dll\n            │   VoicemailBoxWebService.exe\n            │   VoicemailBoxWebService.exe.config\n            │\n            └───en-us\n                    System.Fabric.Common.Internal.Strings.resources.dll\n\nThe listing above shows the assemblies that implement the VoicemailBox actor getting included in the code package within the service package within the application package.  \n\nThe Visual Studio solution includes the PowerShell scripts that are used to deploy the application to and remove the application from the cluster. The scripts are circled in the screenshot below.\n\n![][2]\n\nSubsequent management (i.e. upgrades and eventual deletion) of the application is also performed using Service Fabric application management mechanisms. For more information, please see the topics on the [application model](service-fabric-application-model.md), [application deployment and removal](service-fabric-deploy-remove-applications.md), and [application upgrade](service-fabric-application-upgrade.md).\n\n## Scalability for actor services\nCluster administrators can create one or more actor services of each service type in the cluster. Each of those actor services can have one or more partitions (similar to any other Service Fabric service). The ability to create multiple services of a service type (which maps to an actor type) and the ability to create multiple partitions for a service allow the actor application to scale. Please see the article on [scalability](service-fabric-concepts-scalability.md) for more information.\n\n> [AZURE.NOTE] Stateless actor services are required to have an [instance](service-fabric-availability-services.md#availability-of-service-fabric-stateless-services) count of 1. Having more than one instance of a stateless actor service in a partition is not supported. Therefore, stateless actor services do not have the option of increasing instance count to achieve scalability. They must use the scalability options that are described in the [scalability article](service-fabric-concepts-scalability.md).\n\n## Service Fabric partition concepts for actors\nThe actor ID of an actor is mapped to a partition of an actor service. The actor is created within the partition that its actor ID maps to. When an actor is created, the Actors runtime writes an [EventSource event](service-fabric-reliable-actors-diagnostics.md#eventsource-events) that indicates which partition the actor is created in. Below is an example of this event that indicates that an actor with ID `-5349766044453424161` was created within partition `0583c745-1bed-43b2-9545-29d7e3448156` of service `fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService`, application `fabric:/VoicemailBoxAdvancedApplication`.\n\n    {\n      \"Timestamp\": \"2015-04-26T10:12:20.2485941-07:00\",\n      \"ProviderName\": \"Microsoft-ServiceFabric-Actors\",\n      \"Id\": 5,\n      \"Message\": \"Actor activated. Actor type: Microsoft.Azure.Service.Fabric.Samples.VoicemailBox.VoiceMailBoxActor, actor ID: -5349766044453424161, stateful: True, replica/instance ID: 130,745,418,574,851,853, partition ID: 0583c745-1bed-43b2-9545-29d7e3448156.\",\n      \"EventName\": \"ActorActivated\",\n      \"Payload\": {\n        \"actorType\": \"Microsoft.Azure.Service.Fabric.Samples.VoicemailBox.VoiceMailBoxActor\",\n        \"actorId\": \"-5349766044453424161\",\n        \"isStateful\": \"True\",\n        \"replicaOrInstanceId\": \"130745418574851853\",\n        \"partitionId\": \"0583c745-1bed-43b2-9545-29d7e3448156\",\n        \"serviceName\": \"fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService\",\n        \"applicationName\": \"fabric:/VoicemailBoxAdvancedApplication\",\n      }\n    }\n\nAnother actor with ID `-4952641569324299627` was created within a different partition `c146fe53-16d7-4d96-bac6-ef54613808ff` of the same service, as indicated by the event below.\n\n    {\n      \"Timestamp\": \"2015-04-26T15:06:56.93882-07:00\",\n      \"ProviderName\": \"Microsoft-ServiceFabric-Actors\",\n      \"Id\": 5,\n      \"Message\": \"Actor activated. Actor type: Microsoft.Azure.Service.Fabric.Samples.VoicemailBox.VoiceMailBoxActor, actor ID: -4952641569324299627, stateful: True, replica/instance ID: 130,745,418,574,851,853, partition ID: c146fe53-16d7-4d96-bac6-ef54613808ff.\",\n      \"EventName\": \"ActorActivated\",\n      \"Payload\": {\n        \"actorType\": \"Microsoft.Azure.Service.Fabric.Samples.VoicemailBox.VoiceMailBoxActor\",\n        \"actorId\": \"-4952641569324299627\",\n        \"isStateful\": \"True\",\n        \"replicaOrInstanceId\": \"130745418574851853\",\n        \"partitionId\": \"c146fe53-16d7-4d96-bac6-ef54613808ff\",\n        \"serviceName\": \"fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService\",\n        \"applicationName\": \"fabric:/VoicemailBoxAdvancedApplication\",\n      }\n    }\n\n*Note:* some fields of the above events are omitted for brevity.\n\nThe partition ID can be used to get other information about the partition. For example, the [Service Fabric Explorer](service-fabric-visualizing-your-cluster.md) tool can be used to view information about the partition and the service and application to which it belongs. The screenshot below shows information about partition `c146fe53-16d7-4d96-bac6-ef54613808ff`, which contained the actor with ID `-4952641569324299627` in the above example.  \n\n![][3]\n\nActors can programmatically obtain the partition ID, service name, application name and other Service Fabric platform-specific information via the `Host.ActivationContext` and the `Host.StatelessServiceInitialization` or `Host.StatefulServiceInitializationParameters` members of the base class that the actor type derives from. The following code snippet shows an example:\n\n```csharp\npublic void ActorMessage<TState>(Actor<TState> actor, string message, params object[] args)\n{\n    string finalMessage = string.Format(message, args);\n    this.ActorMessage(\n        actor.GetType().ToString(),\n        actor.Id.ToString(),\n        actor.Host.ActivationContext.ApplicationTypeName,\n        actor.Host.ActivationContext.ApplicationName,\n        actor.Host.StatefulServiceInitializationParameters.ServiceTypeName,\n        actor.Host.StatefulServiceInitializationParameters.ServiceName.ToString(),\n        actor.Host.StatefulServiceInitializationParameters.PartitionId,\n        actor.Host.StatefulServiceInitializationParameters.ReplicaId,\n        FabricRuntime.GetNodeContext().NodeName,\n        finalMessage);\n}\n```\n\n### Service Fabric partition concepts for stateless actors\nStateless actors are created within a partition of a Service Fabric stateless service. The actor ID determines which partition the actor is created under.\nThe [instance](service-fabric-availability-services.md#availability-of-service-fabric-stateless-services) count for a stateless actor service must be 1. Changing the instance count to any other value is not supported. Thus, the actor is created inside the single service instance within the partition.\n\n> [AZURE.TIP] The Fabric Actors runtime emits some [events related to stateless actor instances](service-fabric-reliable-actors-diagnostics.md#events-related-to-stateless-actor-instances). They are useful in diagnostics and performance monitoring.\n\nWhen a stateless actor is created, the Actors runtime writes an [EventSource event](service-fabric-reliable-actors-diagnostics.md#eventsource-events) that indicates which partition and instance the actor is created in. Below is an example of this event that indicates that an actor with ID `abc` was created within instance `130745709600495974` of partition `8c828833-ccf1-4e21-b99d-03b14d4face3`, of service `fabric:/HelloWorldApplication/HelloWorldActorService`, application `fabric:/HelloWorldApplication`.\n\n    {\n      \"Timestamp\": \"2015-04-26T18:17:46.1453113-07:00\",\n      \"ProviderName\": \"Microsoft-ServiceFabric-Actors\",\n      \"Id\": 5,\n      \"Message\": \"Actor activated. Actor type: HelloWorld.HelloWorld, actor ID: abc, stateful: False, replica/instance ID: 130,745,709,600,495,974, partition ID: 8c828833-ccf1-4e21-b99d-03b14d4face3.\",\n      \"EventName\": \"ActorActivated\",\n      \"Payload\": {\n        \"actorType\": \"HelloWorld.HelloWorld\",\n        \"actorId\": \"abc\",\n        \"isStateful\": \"False\",\n        \"replicaOrInstanceId\": \"130745709600495974\",\n        \"partitionId\": \"8c828833-ccf1-4e21-b99d-03b14d4face3\",\n        \"serviceName\": \"fabric:/HelloWorldApplication/HelloWorldActorService\",\n        \"applicationName\": \"fabric:/HelloWorldApplication\",\n      }\n    }\n\n*Note:* some fields of the above event are omitted for brevity.\n\n### Service Fabric partition concepts for stateful actors\nStateful actors are created within a partition of the Service Fabric stateful service. The actor ID determines which partition the actor is created under. Each partition of the service can have one or more [replicas](service-fabric-availability-services.md#availability-of-service-fabric-stateful-services) that are placed on different nodes in the cluster. Having multiple replicas provides reliability for the actor state. The resource manager optimizes the placement based on the available fault and upgrade domains in the cluster. Two replicas of the same partition are never placed on the same node. The actors are always created in the primary replica of the partition to which their actor ID maps to.\n\n> [AZURE.TIP] The Fabric Actors runtime emits some [events related to stateful actor replicas](service-fabric-reliable-actors-diagnostics.md#events-related-to-stateful-actor-replicas). They are useful in diagnostics and performance monitoring.\n\nRecall that in the [VoiceMailBoxActor example presented earlier](#service-fabric-partition-concepts-for-actors), the actor with ID `-4952641569324299627` was created within partition `c146fe53-16d7-4d96-bac6-ef54613808ff`. The EventSource event from that example also indicated that the actor was created in replica `130745418574851853` of that partition. This was the primary replica of that partition at the time the actor was created. The Service Fabric Explorer screenshot below confirms this.\n\n![][4]\n\n## Actor state provider choices\nThere are some default actor state providers that are included in the Actors runtime. In order to choose an appropriate state provider for an actor service, it is necessary to understand how the state providers use the underlying Service Fabric platform features to make the actor state highly available.\n\nBy default a stateful actor uses key value store actor state provider. This state provider is built on the distributed Key-Value store provided by Service Fabric platform. The state is durably saved on the local disk of the node hosting the primary [replica](service-fabric-availability-services.md#availability-of-service-fabric-stateful-services), as well as replicated and durably saved on the local disks of nodes hosting the secondary replicas. The state save is complete only when a quorum of replicas has committed the state to their local disks. The Key-Value store has advanced capabilities to detect inconsistencies such as false progress and correct them automatically.\n\nThe Actors runtime also includes a `VolatileActorStateProvider`. This state provider replicates the state to replicas but the state remains in-memory on the replica. If one replica goes down and comes back up, its state is rebuilt from the other replica. However if all of the replicas (copies of the state) go down simultaneously the state data will be lost. Therefore, this state provider is suitable for applications where the data can survive failures of few replicas and can survive the planned failovers such as upgrades. If all replicas (copies) are lost, then the data needs to be recreated using mechanisms external to Service Fabric. You can configure your stateful actor to use volatile actor state provider by adding the `VolatileActorStateProvider` attribute to the actor class or an assembly level attribute.\n\nThe following code snippet shows how to changes all actors in the assembly that does not have an explicit state provider attribute to use `VolatileActorStateProvider`.\n\n```csharp\n[assembly:Microsoft.ServiceFabric.Actors.VolatileActorStateProvider]\n```\n\nThe following code snippet shows how to change the state provider for a particular actor type, `VoicemailBox` in this case, to be `VolatileActorStateProvider`.\n\n```csharp\n[VolatileActorStateProvider]\npublic class VoicemailBoxActor : Actor<VoicemailBox>, IVoicemailBoxActor\n{\n    public Task<List<Voicemail>> GetMessagesAsync()\n    {\n        return Task.FromResult(State.MessageList);\n    }\n    ...\n}\n```\n\nPlease note that changing the state provider requires the actor service to be recreated. State providers cannot be changed as part of the application upgrade.\n\n<!--Image references-->\n[1]: ./media/service-fabric-reliable-actors-platform/manifests-in-vs-solution.png\n[2]: ./media/service-fabric-reliable-actors-platform/app-deployment-scripts.png\n[3]: ./media/service-fabric-reliable-actors-platform/actor-partition-info.png\n[4]: ./media/service-fabric-reliable-actors-platform/actor-replica-role.png\n"
}