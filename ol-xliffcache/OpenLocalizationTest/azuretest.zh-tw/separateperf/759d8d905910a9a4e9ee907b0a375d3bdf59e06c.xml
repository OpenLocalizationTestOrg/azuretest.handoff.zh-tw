{
  "nodes": [
    {
      "content": "How to perform live encoding with on-premises encoders",
      "pos": [
        28,
        82
      ]
    },
    {
      "content": "This topic shows how to use .NET to perform live encoding with on-premises encoders.",
      "pos": [
        102,
        186
      ]
    },
    {
      "content": "How to perform live encoding with on-premises encoders",
      "pos": [
        499,
        553
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        557,
        570
      ]
    },
    {
      "content": "The following are required to complete the tutorial:",
      "pos": [
        572,
        624
      ]
    },
    {
      "content": "An Azure account.",
      "pos": [
        628,
        645
      ]
    },
    {
      "content": "A Media Services account.",
      "pos": [
        648,
        673
      ]
    },
    {
      "content": "To create a Media Services account, see <bpt id=\"p1\">[</bpt>How to Create a Media Services Account<ept id=\"p1\">](media-services-create-account.md)</ept>.",
      "pos": [
        674,
        789
      ]
    },
    {
      "content": "Set up your dev environment.",
      "pos": [
        792,
        820
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Set up your environment<ept id=\"p1\">](media-services-set-up-computer.md)</ept>.",
      "pos": [
        821,
        908
      ]
    },
    {
      "content": "A webcam.",
      "pos": [
        911,
        920
      ]
    },
    {
      "content": "For example, <bpt id=\"p1\">[</bpt>Telestream Wirecast encoder<ept id=\"p1\">](http://www.telestream.net/wirecast/overview.htm)</ept>.",
      "pos": [
        921,
        1013
      ]
    },
    {
      "content": "Recommended to review the following articles:",
      "pos": [
        1016,
        1061
      ]
    },
    {
      "content": "Azure Media Services RTMP Support and Live Encoders",
      "pos": [
        1067,
        1118
      ]
    },
    {
      "content": "Working with Channels that Receive Multi-bitrate Live Stream from On-premises Encoders",
      "pos": [
        1220,
        1306
      ]
    },
    {
      "content": "Example",
      "pos": [
        1357,
        1364
      ]
    },
    {
      "content": "The following code example demonstrates how to achieve the following tasks:",
      "pos": [
        1370,
        1445
      ]
    },
    {
      "content": "Connect to Media Services",
      "pos": [
        1449,
        1474
      ]
    },
    {
      "content": "Create a channel",
      "pos": [
        1477,
        1493
      ]
    },
    {
      "content": "Update the channel",
      "pos": [
        1496,
        1514
      ]
    },
    {
      "content": "Retrieve the channel’s input endpoint.",
      "pos": [
        1517,
        1555
      ]
    },
    {
      "content": "The input endpoint should be provided to the on-premises live encoder.",
      "pos": [
        1556,
        1626
      ]
    },
    {
      "content": "The live encoder converts signals from the camera to streams that are sent to the channel’s input (ingest) endpoint.",
      "pos": [
        1627,
        1743
      ]
    },
    {
      "content": "Retrieve the channel’s preview endpoint",
      "pos": [
        1746,
        1785
      ]
    },
    {
      "content": "Create and start a program",
      "pos": [
        1788,
        1814
      ]
    },
    {
      "content": "Create a locator needed to access the program",
      "pos": [
        1817,
        1862
      ]
    },
    {
      "content": "Create and start a StreamingEndpoint",
      "pos": [
        1865,
        1901
      ]
    },
    {
      "content": "Update the streaming endpoint",
      "pos": [
        1904,
        1933
      ]
    },
    {
      "content": "Get locators for all your streaming endpoints",
      "pos": [
        1936,
        1981
      ]
    },
    {
      "content": "Shut down resources",
      "pos": [
        1984,
        2003
      ]
    },
    {
      "pos": [
        2009,
        2216
      ],
      "content": "For information on how to configure a live encoder, see <bpt id=\"p1\">[</bpt>Azure Media Services RTMP Support and Live Encoders<ept id=\"p1\">](http://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/)</ept>."
    },
    {
      "content": "test",
      "pos": [
        16871,
        16875
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to perform live encoding with on-premises encoders\" \n    description=\"This topic shows how to use .NET to perform live encoding with on-premises encoders.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/24/2015\"  \n    ms.author=\"juliako\"/>\n\n#How to perform live encoding with on-premises encoders\n\n##Prerequisites\n\nThe following are required to complete the tutorial:\n\n- An Azure account.\n- A Media Services account. To create a Media Services account, see [How to Create a Media Services Account](media-services-create-account.md).\n- Set up your dev environment. For more information, see [Set up your environment](media-services-set-up-computer.md).\n- A webcam. For example, [Telestream Wirecast encoder](http://www.telestream.net/wirecast/overview.htm). \n\nRecommended to review the following articles: \n\n- [Azure Media Services RTMP Support and Live Encoders](http://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/)\n- [Working with Channels that Receive Multi-bitrate Live Stream from On-premises Encoders](media-services-manage-channels-overview.md)\n \n\n##Example\n    \nThe following code example demonstrates how to achieve the following tasks:\n\n- Connect to Media Services\n- Create a channel\n- Update the channel\n- Retrieve the channel’s input endpoint. The input endpoint should be provided to the on-premises live encoder. The live encoder converts signals from the camera to streams that are sent to the channel’s input (ingest) endpoint.\n- Retrieve the channel’s preview endpoint\n- Create and start a program\n- Create a locator needed to access the program\n- Create and start a StreamingEndpoint\n- Update the streaming endpoint\n- Get locators for all your streaming endpoints\n- Shut down resources\n    \nFor information on how to configure a live encoder, see [Azure Media Services RTMP Support and Live Encoders](http://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/).\n    \n        using System;\n        using System.Collections.Generic;\n        using System.Configuration;\n        using System.IO;\n        using System.Linq;\n        using System.Net;\n        using System.Security.Cryptography;\n        using System.Text;\n        using System.Threading.Tasks;\n        using Microsoft.WindowsAzure.MediaServices.Client;\n        using Newtonsoft.Json.Linq;\n        \n        namespace AMSLiveTest\n        {\n            class Program\n            {\n                private const string StreamingEndpointName = \"streamingendpoint001\";\n                private const string ChannelName = \"channel001\";\n                private const string AssetlName = \"asset001\";\n                private const string ProgramlName = \"program001\";\n        \n                // Read values from the App.config file.\n                private static readonly string _mediaServicesAccountName =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n                private static readonly string _mediaServicesAccountKey =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n        \n                // Field for service context.\n                private static CloudMediaContext _context = null;\n                private static MediaServicesCredentials _cachedCredentials = null;\n        \n                static void Main(string[] args)\n                {\n                    // Create and cache the Media Services credentials in a static class variable.\n                    _cachedCredentials = new MediaServicesCredentials(\n                                    _mediaServicesAccountName,\n                                    _mediaServicesAccountKey);\n                    // Used the cached credentials to create CloudMediaContext.\n                    _context = new CloudMediaContext(_cachedCredentials);\n        \n                    IChannel channel = CreateAndStartChannel();\n        \n                    // Set the Live Encoder to point to the channel's input endpoint:\n                    string ingestUrl = channel.Input.Endpoints.FirstOrDefault().Url.ToString();\n        \n                    // Use the previewEndpoint to preview and verify \n                    // that the input from the encoder is actually reaching the Channel. \n                    string previewEndpoint = channel.Preview.Endpoints.FirstOrDefault().Url.ToString();\n        \n                    IProgram program = CreateAndStartProgram(channel);\n                    ILocator locator = CreateLocatorForAsset(program.Asset, program.ArchiveWindowLength);\n                    IStreamingEndpoint streamingEndpoint = CreateAndStartStreamingEndpoint();\n                    GetLocatorsInAllStreamingEndpoints(program.Asset);\n        \n                    // Once you are done streaming, clean up your resources.\n                    Cleanup(streamingEndpoint, channel);\n                }\n        \n                public static IChannel CreateAndStartChannel()\n                {\n                    //If you want to change the Smooth fragments to HLS segment ratio, you would set the ChannelCreationOptions’s Output property.\n    \n                    IChannel channel = _context.Channels.Create(\n                        new ChannelCreationOptions\n                        {\n                            Name = ChannelName,\n                            Input = CreateChannelInput(),\n                            Preview = CreateChannelPreview()\n                        });\n        \n                    //Starting and stopping Channels can take some time to execute. To determine the state of operations after calling Start or Stop, query the IChannel.State .\n    \n                    channel.Start();\n        \n                    return channel;\n                }\n        \n                private static ChannelInput CreateChannelInput()\n                {\n                    return new ChannelInput\n                    {\n                        StreamingProtocol = StreamingProtocol.RTMP,\n                        AccessControl = new ChannelAccessControl\n                        {\n                            IPAllowList = new List<IPRange>\n                            {\n                                new IPRange\n                                {\n                                    Name = \"TestChannelInput001\",\n                                    // Setting 0.0.0.0 for Address and 0 for SubnetPrefixLength\n                                    // will allow access to IP addresses.\n                                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                                    SubnetPrefixLength = 0\n                                }\n                            }\n                        }\n                    };\n                }\n        \n                private static ChannelPreview CreateChannelPreview()\n                {\n                    return new ChannelPreview\n                    {\n                        AccessControl = new ChannelAccessControl\n                        {\n                            IPAllowList = new List<IPRange>\n                            {\n                                new IPRange\n                                {\n                                    Name = \"TestChannelPreview001\",\n                                    // Setting 0.0.0.0 for Address and 0 for SubnetPrefixLength\n                                    // will allow access to IP addresses.\n                                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                                    SubnetPrefixLength = 0\n                                }\n                            }\n                        }\n                    };\n                }\n        \n                public static void UpdateCrossSiteAccessPoliciesForChannel(IChannel channel)\n                {\n                    var clientPolicy =\n                        @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n                    <access-policy>\n                        <cross-domain-access>\n                            <policy>\n                                <allow-from http-request-headers=\"\"*\"\" http-methods=\"\"*\"\">\n                                    <domain uri=\"\"*\"\"/>\n                                </allow-from>\n                                <grant-to>\n                                   <resource path=\"\"/\"\" include-subpaths=\"\"true\"\"/>\n                                </grant-to>\n                            </policy>\n                        </cross-domain-access>\n                    </access-policy>\";\n        \n                    var xdomainPolicy =\n                        @\"<?xml version=\"\"1.0\"\" ?>\n                    <cross-domain-policy>\n                        <allow-access-from domain=\"\"*\"\" />\n                    </cross-domain-policy>\";\n        \n                    channel.CrossSiteAccessPolicies.ClientAccessPolicy = clientPolicy;\n                    channel.CrossSiteAccessPolicies.CrossDomainPolicy = xdomainPolicy;\n        \n                    channel.Update();\n                }\n        \n                public static IProgram CreateAndStartProgram(IChannel channel)\n                {\n                    IAsset asset = _context.Assets.Create(AssetlName, AssetCreationOptions.None);\n        \n                    // Create a Program on the Channel. You can have multiple Programs that overlap or are sequential;\n                    // however each Program must have a unique name within your Media Services account.\n                    IProgram program = channel.Programs.Create(ProgramlName, TimeSpan.FromHours(3), asset.Id);\n                    program.Start();\n        \n                    return program;\n                }\n        \n                public static ILocator CreateLocatorForAsset(IAsset asset, TimeSpan ArchiveWindowLength)\n                {\n                    var locator = _context.Locators.CreateLocator\n                        (\n                            LocatorType.OnDemandOrigin,\n                            asset,\n                            _context.AccessPolicies.Create\n                            (\n                                \"Live Stream Policy\",\n                                ArchiveWindowLength,\n                                AccessPermissions.Read\n                            )\n                        );\n        \n                    return locator;\n                }\n        \n                public static IStreamingEndpoint CreateAndStartStreamingEndpoint()\n                {\n                    var options = new StreamingEndpointCreationOptions\n                    {\n                        Name = StreamingEndpointName,\n                        ScaleUnits = 1,\n                        AccessControl = GetAccessControl(),\n                        CacheControl = GetCacheControl()\n                    };\n        \n                    IStreamingEndpoint streamingEndpoint = _context.StreamingEndpoints.Create(options);\n                    streamingEndpoint.Start();\n        \n                    return streamingEndpoint;\n                }\n        \n                private static StreamingEndpointAccessControl GetAccessControl()\n                {\n                    return new StreamingEndpointAccessControl\n                    {\n                        IPAllowList = new List<IPRange>\n                        {\n                            new IPRange\n                            {\n                                Name = \"Allow all\",\n                                Address = IPAddress.Parse(\"0.0.0.0\"),\n                                SubnetPrefixLength = 0\n                            }\n                        },\n        \n                        AkamaiSignatureHeaderAuthenticationKeyList = new List<AkamaiSignatureHeaderAuthenticationKey>\n                        {\n                            new AkamaiSignatureHeaderAuthenticationKey\n                            {\n                                Identifier = \"My key\",\n                                Expiration = DateTime.UtcNow + TimeSpan.FromDays(365),\n                                Base64Key = Convert.ToBase64String(GenerateRandomBytes(16))\n                            }\n                        }\n                    };\n                }\n        \n                private static byte[] GenerateRandomBytes(int length)\n                {\n                    var bytes = new byte[length];\n                    using (var rng = new RNGCryptoServiceProvider())\n                    {\n                        rng.GetBytes(bytes);\n                    }\n        \n                    return bytes;\n                }\n        \n                private static StreamingEndpointCacheControl GetCacheControl()\n                {\n                    return new StreamingEndpointCacheControl\n                    {\n                        MaxAge = TimeSpan.FromSeconds(1000)\n                    };\n                }\n        \n                public static void UpdateCrossSiteAccessPoliciesForStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\n                {\n                    var clientPolicy =\n                        @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n                    <access-policy>\n                        <cross-domain-access>\n                            <policy>\n                                <allow-from http-request-headers=\"\"*\"\" http-methods=\"\"*\"\">\n                                    <domain uri=\"\"*\"\"/>\n                                </allow-from>\n                                <grant-to>\n                                   <resource path=\"\"/\"\" include-subpaths=\"\"true\"\"/>\n                                </grant-to>\n                            </policy>\n                        </cross-domain-access>\n                    </access-policy>\";\n        \n                    var xdomainPolicy =\n                        @\"<?xml version=\"\"1.0\"\" ?>\n                    <cross-domain-policy>\n                        <allow-access-from domain=\"\"*\"\" />\n                    </cross-domain-policy>\";\n        \n                    streamingEndpoint.CrossSiteAccessPolicies.ClientAccessPolicy = clientPolicy;\n                    streamingEndpoint.CrossSiteAccessPolicies.CrossDomainPolicy = xdomainPolicy;\n        \n                    streamingEndpoint.Update();\n                }\n        \n                public static void GetLocatorsInAllStreamingEndpoints(IAsset asset)\n                {\n                    var locators = asset.Locators.Where(l => l.Type == LocatorType.OnDemandOrigin);\n                    var ismFile = asset.AssetFiles.AsEnumerable().FirstOrDefault(a => a.Name.EndsWith(\".ism\"));\n                    var template = new UriTemplate(\"{contentAccessComponent}/{ismFileName}/manifest\");\n                    var urls = locators.SelectMany(l =>\n                                _context\n                                    .StreamingEndpoints\n                                    .AsEnumerable()\n                                    .Where(se => se.State == StreamingEndpointState.Running)\n                                    .Select(\n                                        se =>\n                                            template.BindByPosition(new Uri(\"http://\" + se.HostName),\n                                            l.ContentAccessComponent,\n                                                ismFile.Name)))\n                                .ToArray();\n        \n                }\n        \n                public static void Cleanup(IStreamingEndpoint streamingEndpoint,\n                                            IChannel channel)\n                {\n                    if (streamingEndpoint != null)\n                    {\n                        streamingEndpoint.Stop();\n                        streamingEndpoint.Delete();\n                    }\n        \n                    IAsset asset;\n                    if (channel != null)\n                    {\n        \n                        foreach (var program in channel.Programs)\n                        {\n                            asset = _context.Assets.Where(se => se.Id == program.AssetId)\n                                                    .FirstOrDefault();\n        \n                            program.Stop();\n                            program.Delete();\n        \n                            if (asset != null)\n                            {\n                                foreach (var l in asset.Locators)\n                                    l.Delete();\n        \n                                asset.Delete();\n                            }\n                        }\n        \n                        channel.Stop();\n                        channel.Delete();\n                    }\n                }\n            }\n        }\ntest\n"
}