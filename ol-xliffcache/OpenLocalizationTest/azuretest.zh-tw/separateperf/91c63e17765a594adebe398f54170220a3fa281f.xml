{
  "nodes": [
    {
      "content": "How to use File storage from Java | Microsoft Azure",
      "pos": [
        28,
        79
      ]
    },
    {
      "content": "Learn how to use the Azure file service to upload, download, list, and delete files.",
      "pos": [
        99,
        183
      ]
    },
    {
      "content": "Samples written in Java.",
      "pos": [
        184,
        208
      ]
    },
    {
      "content": "How to use File Storage from Java",
      "pos": [
        526,
        559
      ]
    },
    {
      "content": "Overview",
      "pos": [
        662,
        670
      ]
    },
    {
      "content": "In this guide you'll learn how to perform basic operations on the  Microsoft Azure File storage service.",
      "pos": [
        672,
        776
      ]
    },
    {
      "content": "Through samples written in Java you'll learn how to  create shares and directories, upload, list, and delete files.",
      "pos": [
        777,
        892
      ]
    },
    {
      "content": "If you are new to Microsoft Azure's File Storage service, going through the concepts in the sections that follow will be very helpful in understanding the samples.",
      "pos": [
        893,
        1056
      ]
    },
    {
      "content": "Create a Java application",
      "pos": [
        1259,
        1284
      ]
    },
    {
      "content": "To build the samples, you will need the Java Development Kit (JDK) and the <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept>.",
      "pos": [
        1286,
        1392
      ]
    },
    {
      "content": "You should also have created an Azure storage account.",
      "pos": [
        1393,
        1447
      ]
    },
    {
      "content": "Setup your application to use File storage",
      "pos": [
        1452,
        1494
      ]
    },
    {
      "content": "To use the Azure storage APIs, add the following statement to the top of the Java file where you intend to access the storage service from.",
      "pos": [
        1496,
        1635
      ]
    },
    {
      "content": "Setup an Azure storage connection string",
      "pos": [
        1785,
        1825
      ]
    },
    {
      "content": "To use File storage, you need to connect to your Azure storage account.",
      "pos": [
        1827,
        1898
      ]
    },
    {
      "content": "The first step would be to configure a connection string which we'll use to connect to your storage account.",
      "pos": [
        1899,
        2007
      ]
    },
    {
      "content": "Let's define a static variable to do that.",
      "pos": [
        2008,
        2050
      ]
    },
    {
      "pos": [
        2312,
        2436
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Replace your_storage_account_name and your_storage_account_key with the actual values for your storage account."
    },
    {
      "content": "Connecting to an Azure storage account",
      "pos": [
        2441,
        2479
      ]
    },
    {
      "pos": [
        2481,
        2621
      ],
      "content": "To connect to your storage account, you need to use the <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> object, passing a connection string to its <bpt id=\"p2\">**</bpt>parse<ept id=\"p2\">**</ept> method."
    },
    {
      "pos": [
        2893,
        3003
      ],
      "content": "<bpt id=\"p1\">**</bpt>CloudStorageAccount.parse<ept id=\"p1\">**</ept> throws an InvalidKeyException so you'll need to put it inside a try/catch block."
    },
    {
      "content": "How to: Create a Share",
      "pos": [
        3008,
        3030
      ]
    },
    {
      "content": "All files and directories in File storage reside in a container called a <bpt id=\"p1\">**</bpt>Share<ept id=\"p1\">**</ept>.",
      "pos": [
        3032,
        3115
      ]
    },
    {
      "content": "Your storage account can have as much shares as your account capacity allows.",
      "pos": [
        3116,
        3193
      ]
    },
    {
      "content": "To obtain access to a share and its contents, you need to use a File storage client.",
      "pos": [
        3194,
        3278
      ]
    },
    {
      "content": "Using the File storage client, you can then obtain a reference to a share.",
      "pos": [
        3393,
        3467
      ]
    },
    {
      "pos": [
        3584,
        3680
      ],
      "content": "To actually create the share, use the <bpt id=\"p1\">**</bpt>createIfNotExists<ept id=\"p1\">**</ept> method of the CloudFileShare object."
    },
    {
      "pos": [
        3775,
        3851
      ],
      "content": "At this point, <bpt id=\"p1\">**</bpt>share<ept id=\"p1\">**</ept> holds a reference to a share named <bpt id=\"p2\">**</bpt>sampleshare<ept id=\"p2\">**</ept>."
    },
    {
      "content": "How to: Upload a file",
      "pos": [
        3857,
        3878
      ]
    },
    {
      "content": "An Azure File Storage Share contains at the very least, a root directory where files can reside.",
      "pos": [
        3880,
        3976
      ]
    },
    {
      "content": "In this section, you'll learn how to upload a file from local storage onto the root directory of a share.",
      "pos": [
        3977,
        4082
      ]
    },
    {
      "content": "The first step in uploading a file is to obtain a reference to the directory where it should reside.",
      "pos": [
        4084,
        4184
      ]
    },
    {
      "content": "You do this by calling the <bpt id=\"p1\">**</bpt>getRootDirectoryReference<ept id=\"p1\">**</ept> method of the share object.",
      "pos": [
        4185,
        4269
      ]
    },
    {
      "content": "Now that you have a reference to the root directory of the share, you can upload a file onto it using the following code.",
      "pos": [
        4399,
        4520
      ]
    },
    {
      "content": "How to: Create a Directory",
      "pos": [
        4725,
        4751
      ]
    },
    {
      "content": "You can also organize storage by putting files inside sub-directories instead of having all of them in the root directory.",
      "pos": [
        4753,
        4875
      ]
    },
    {
      "content": "The Azure file storage service allows you to create as much directories as your account will allow.",
      "pos": [
        4876,
        4975
      ]
    },
    {
      "content": "The code below will create a sub-directory named <bpt id=\"p1\">**</bpt>sampledir<ept id=\"p1\">**</ept> under the root directory.",
      "pos": [
        4976,
        5064
      ]
    },
    {
      "content": "How to: List files and directories in a share",
      "pos": [
        5509,
        5554
      ]
    },
    {
      "content": "Obtaining a list of files and directories within a share is easily done by calling <bpt id=\"p1\">**</bpt>listFilesAndDirectories<ept id=\"p1\">**</ept> on a CloudFileDirectory reference.",
      "pos": [
        5556,
        5701
      ]
    },
    {
      "content": "The method returns a list of ListFileItem objects which you can iterate on.",
      "pos": [
        5702,
        5777
      ]
    },
    {
      "content": "As an example, the following code will list files and directories inside the root directory.",
      "pos": [
        5778,
        5870
      ]
    },
    {
      "content": "How to: Download a file",
      "pos": [
        6141,
        6164
      ]
    },
    {
      "content": "One of the more frequent operations you will perform against file storage is to download files.",
      "pos": [
        6166,
        6261
      ]
    },
    {
      "content": "In the following example, the code downloads SampleFile.txt and displays its contents.",
      "pos": [
        6262,
        6348
      ]
    },
    {
      "content": "How to: Delete a file",
      "pos": [
        6865,
        6886
      ]
    },
    {
      "content": "Another common file storage operation is file deletion.",
      "pos": [
        6888,
        6943
      ]
    },
    {
      "content": "The following code deletes a file named SampleFile.txt stored inside a directory named <bpt id=\"p1\">**</bpt>sampledir<ept id=\"p1\">**</ept>.",
      "pos": [
        6944,
        7045
      ]
    },
    {
      "content": "How to: Delete a directory",
      "pos": [
        7551,
        7577
      ]
    },
    {
      "content": "Deleting a directory is a fairly simple task, although it should be noted that you cannot delete a directory that still contains files or other directories.",
      "pos": [
        7579,
        7735
      ]
    },
    {
      "content": "How to: Delete a Share",
      "pos": [
        8142,
        8164
      ]
    },
    {
      "content": "Deleting a share is done by calling the <bpt id=\"p1\">**</bpt>deleteIfExists<ept id=\"p1\">**</ept> method on a CloudFileShare object.",
      "pos": [
        8166,
        8259
      ]
    },
    {
      "content": "Here's sample code that does that.",
      "pos": [
        8260,
        8294
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        8876,
        8886
      ]
    },
    {
      "content": "If you would like to learn more about other Azure storage APIs, follow these links.",
      "pos": [
        8888,
        8971
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        8976,
        9002
      ]
    },
    {
      "content": "Azure Storage Client SDK Reference",
      "pos": [
        9007,
        9041
      ]
    },
    {
      "content": "Azure Storage REST API",
      "pos": [
        9046,
        9068
      ]
    },
    {
      "content": "Azure Storage Team Blog",
      "pos": [
        9073,
        9096
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use File storage from Java | Microsoft Azure\" \n    description=\"Learn how to use the Azure file service to upload, download, list, and delete files. Samples written in Java.\" \n    services=\"storage\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\" />\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"storage\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"Java\" \n    ms.topic=\"article\" \n    ms.date=\"09/01/2015\" \n    ms.author=\"v-dedomi\"/>\n\n# How to use File Storage from Java\n\n[AZURE.INCLUDE [storage-selector-file-include](../../includes/storage-selector-file-include.md)]\n\n## Overview\n\nIn this guide you'll learn how to perform basic operations on the  Microsoft Azure File storage service. Through samples written in Java you'll learn how to  create shares and directories, upload, list, and delete files. If you are new to Microsoft Azure's File Storage service, going through the concepts in the sections that follow will be very helpful in understanding the samples.\n\n[AZURE.INCLUDE [storage-file-concepts-include](../../includes/storage-file-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a Java application\n\nTo build the samples, you will need the Java Development Kit (JDK) and the [Azure Storage SDK for Java][]. You should also have created an Azure storage account.\n\n## Setup your application to use File storage\n\nTo use the Azure storage APIs, add the following statement to the top of the Java file where you intend to access the storage service from.\n\n    // Include the following imports to use blob APIs.\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.file.*;\n\n## Setup an Azure storage connection string\n\nTo use File storage, you need to connect to your Azure storage account. The first step would be to configure a connection string which we'll use to connect to your storage account. Let's define a static variable to do that.\n\n    // Configure the connection-string with your values\n    public static final String storageConnectionString = \n        \"DefaultEndpointsProtocol=http;\" + \n        \"AccountName=your_storage_account_name;\" + \n        \"AccountKey=your_storage_account_key\";\n\n> [AZURE.NOTE] Replace your_storage_account_name and your_storage_account_key with the actual values for your storage account.\n\n## Connecting to an Azure storage account\n\nTo connect to your storage account, you need to use the **CloudStorageAccount** object, passing a connection string to its **parse** method.\n\n    // Use the CloudStorageAccount object to connect to your storage account\n    try {\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n    } catch (InvalidKeyException invalidKey) {\n        // Handle the exception\n    }\n\n**CloudStorageAccount.parse** throws an InvalidKeyException so you'll need to put it inside a try/catch block.\n\n## How to: Create a Share\n\nAll files and directories in File storage reside in a container called a **Share**. Your storage account can have as much shares as your account capacity allows. To obtain access to a share and its contents, you need to use a File storage client.\n\n    // Create the file storage client.\n    CloudFileClient fileClient = storageAccount.createCloudFileClient();\n\nUsing the File storage client, you can then obtain a reference to a share.\n\n    // Get a reference to the file share\n    CloudFileShare share = fileClient.getShareReference(\"sampleshare\"); \n\nTo actually create the share, use the **createIfNotExists** method of the CloudFileShare object.\n\n    if (share.createIfNotExists()) {\n        System.out.println(\"New share created\");\n    }\n\nAt this point, **share** holds a reference to a share named **sampleshare**. \n\n## How to: Upload a file\n\nAn Azure File Storage Share contains at the very least, a root directory where files can reside. In this section, you'll learn how to upload a file from local storage onto the root directory of a share.\n\nThe first step in uploading a file is to obtain a reference to the directory where it should reside. You do this by calling the **getRootDirectoryReference** method of the share object.\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\nNow that you have a reference to the root directory of the share, you can upload a file onto it using the following code.\n\n    // Define the path to a local file.\n    final String filePath = \"C:\\\\temp\\\\Readme.txt\";\n\n    CloudFile cloudFile = rootDir.getFileReference(\"Readme.txt\");\n    cloudFile.uploadFromFile(filePath);\n\n## How to: Create a Directory\n\nYou can also organize storage by putting files inside sub-directories instead of having all of them in the root directory. The Azure file storage service allows you to create as much directories as your account will allow. The code below will create a sub-directory named **sampledir** under the root directory.\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    //Get a reference to the sampledir directory \n    CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\n                \n    if (sampleDir.createIfNotExists()) {\n        System.out.println(\"sampledir created\");\n    } else {\n        System.out.println(\"sampledir already exists\");\n    }\n\n## How to: List files and directories in a share\n\nObtaining a list of files and directories within a share is easily done by calling **listFilesAndDirectories** on a CloudFileDirectory reference. The method returns a list of ListFileItem objects which you can iterate on. As an example, the following code will list files and directories inside the root directory.\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n           \n    for ( ListFileItem fileItem : rootDir.listFilesAndDirectories() ) {\n        System.out.println(fileItem.getUri());\n    }\n\n\n## How to: Download a file\n\nOne of the more frequent operations you will perform against file storage is to download files. In the following example, the code downloads SampleFile.txt and displays its contents.\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n    \n    //Get a reference to the directory that contains the file\n    CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\n                \n    //Get a reference to the file you want to download\n    CloudFile file = sampleDir.getFileReference(\"SampleFile.txt\");\n\n    //Write the contents of the file to the console.\n    System.out.println(file.downloadText());\n\n## How to: Delete a file\n\nAnother common file storage operation is file deletion. The following code deletes a file named SampleFile.txt stored inside a directory named **sampledir**.\n\n\n    // Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    // Get a reference to the directory where the file to be deleted is in\n    CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");\n    \n    String filename = \"SampleFile.txt\"\n    CloudFile file;\n\n    file = containerDir.getFileReference(filename)\n    if ( file.deleteIfExists() ) {\n        System.out.println(filename + \" was deleted\");\n    }\n\n\n## How to: Delete a directory\n\nDeleting a directory is a fairly simple task, although it should be noted that you cannot delete a directory that still contains files or other directories.\n\n    // Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    // Get a reference to the directory you want to delete\n    CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");   \n\n    // Delete the directory\n    if ( containerDir.deleteIfExists() ) {\n        System.out.println(\"Directory deleted\");\n    }\n\n\n## How to: Delete a Share\n\nDeleting a share is done by calling the **deleteIfExists** method on a CloudFileShare object. Here's sample code that does that. \n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the file client.\n       CloudFileClient fileClient = storageAccount.createCloudFileClient();\n\n       // Get a reference to the file share\n       CloudFileShare share = fileClient.getShareReference(\"sampleshare\");\n       \n       if (share.deleteIfExists()) {\n           System.out.println(\"sampleshare deleted\");\n       } \n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n## Next steps\n\nIf you would like to learn more about other Azure storage APIs, follow these links.\n\n- [Azure Storage SDK for Java]\n- [Azure Storage Client SDK Reference]\n- [Azure Storage REST API]\n- [Azure Storage Team Blog]\n\n[Azure SDK for Java]: http://azure.microsoft.com/develop/java/\n[Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n[Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\n[Azure Storage Client SDK Reference]: http://dl.windowsazure.com/storage/javadoc/\n[Azure Storage REST API]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n[Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n "
}