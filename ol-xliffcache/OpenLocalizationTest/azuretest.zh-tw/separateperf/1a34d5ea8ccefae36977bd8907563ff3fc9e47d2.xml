{
  "nodes": [
    {
      "content": "How to Use iOS Client Library for Azure Mobile Services",
      "pos": [
        27,
        82
      ]
    },
    {
      "content": "How to Use iOS Client Library for Mobile Services",
      "pos": [
        101,
        150
      ]
    },
    {
      "content": "How to Use iOS Client Library for Azure Mobile Services",
      "pos": [
        476,
        531
      ]
    },
    {
      "content": "This guide teaches you to perform common scenarios using the Azure Mobile Services [iOS SDK].",
      "pos": [
        651,
        744
      ]
    },
    {
      "content": "If you are new to Mobile Services, first complete [Mobile Services Quick Start] or [Add Mobile Services to Existing App] to configure your account, create a table, and create a mobile service.",
      "pos": [
        745,
        937
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This guide uses the latest <bpt id=\"p1\">[</bpt>iOS Mobile Services SDK<ept id=\"p1\">](https://go.microsoft.com/fwLink/?LinkID=266533&amp;clcid=0x409)</ept>.",
      "pos": [
        941,
        1067
      ]
    },
    {
      "content": "If your project uses an older version of the SDK, first upgrade the framework in Xcode.",
      "pos": [
        1068,
        1155
      ]
    },
    {
      "pos": [
        1247,
        1290
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Setup and Prerequisites"
    },
    {
      "content": "This guide assumes that you have created a mobile service with a table.",
      "pos": [
        1292,
        1363
      ]
    },
    {
      "content": "For more information see [Create a table], or reuse the <ph id=\"ph1\">`TodoItem`</ph> table created in [Mobile Services Quick Start] or [Add Mobile Services to Existing App].",
      "pos": [
        1364,
        1519
      ]
    },
    {
      "content": "This guide assumes that the table has the same schema as the tables in those tutorials.",
      "pos": [
        1520,
        1607
      ]
    },
    {
      "content": "This guide also assumes that your Xcode references <ph id=\"ph1\">`WindowsAzureMobileServices.framework`</ph> and imports <ph id=\"ph2\">`WindowsAzureMobileServices/WindowsAzureMobileServices.h`</ph>.",
      "pos": [
        1608,
        1768
      ]
    },
    {
      "pos": [
        1772,
        1837
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create Mobile Services Client"
    },
    {
      "content": "To access an Azure mobile service in your project, create an <ph id=\"ph1\">`MSClient`</ph> client object.",
      "pos": [
        1839,
        1925
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`AppUrl`</ph> and <ph id=\"ph2\">`AppKey`</ph> with the mobile service URL and the application key Dashboard values, respectively.",
      "pos": [
        1926,
        2039
      ]
    },
    {
      "pos": [
        2149,
        2209
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Create Table Reference"
    },
    {
      "content": "To access or update data for your Azure mobile service, create a reference to the table.",
      "pos": [
        2211,
        2299
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`TodoItem`</ph> with the name of your table.",
      "pos": [
        2300,
        2347
      ]
    },
    {
      "pos": [
        2417,
        2458
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Query Data"
    },
    {
      "content": "To create a database query, query the <ph id=\"ph1\">`MSTable`</ph> object.",
      "pos": [
        2460,
        2515
      ]
    },
    {
      "content": "The following query gets all the items in <ph id=\"ph1\">`TodoItem`</ph> and logs the text of each item.",
      "pos": [
        2516,
        2600
      ]
    },
    {
      "pos": [
        3014,
        3066
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Filter Returned Data"
    },
    {
      "content": "To filter results, there are many available options.",
      "pos": [
        3068,
        3120
      ]
    },
    {
      "content": "To filter using a predicate, use an <ph id=\"ph1\">`NSPredicate`</ph> and <ph id=\"ph2\">`readWithPredicate`</ph>.",
      "pos": [
        3122,
        3196
      ]
    },
    {
      "content": "The following filters returned data to find only incomplete Todo items.",
      "pos": [
        3197,
        3268
      ]
    },
    {
      "pos": [
        3852,
        3898
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"query-object\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Use MSQuery"
    },
    {
      "pos": [
        3900,
        4020
      ],
      "content": "To perform a complex query (including sorting and paging), create an <ph id=\"ph1\">`MSQuery`</ph> object, directly or by using a predicate:"
    },
    {
      "content": "<ph id=\"ph1\">`MSQuery`</ph> lets you control several query behaviors, including the following.",
      "pos": [
        4169,
        4245
      ]
    },
    {
      "content": "Execute an <ph id=\"ph1\">`MSQuery`</ph> query by calling <ph id=\"ph2\">`readWithCompletion`</ph> on it, as shown in the next example.",
      "pos": [
        4246,
        4341
      ]
    },
    {
      "content": "Specify order of results",
      "pos": [
        4344,
        4368
      ]
    },
    {
      "content": "Limit which fields to return",
      "pos": [
        4371,
        4399
      ]
    },
    {
      "content": "Limit how many records to return",
      "pos": [
        4402,
        4434
      ]
    },
    {
      "content": "Specify total count in response",
      "pos": [
        4437,
        4468
      ]
    },
    {
      "content": "Specify custom query string parameters in request",
      "pos": [
        4471,
        4520
      ]
    },
    {
      "content": "Apply additional functions",
      "pos": [
        4523,
        4549
      ]
    },
    {
      "pos": [
        4555,
        4607
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Sort Data with MSQuery"
    },
    {
      "content": "To sort results, let's look at an example.",
      "pos": [
        4609,
        4651
      ]
    },
    {
      "content": "To first ascendingly by field <ph id=\"ph1\">`text`</ph> and then descendingly by field <ph id=\"ph2\">`completion`</ph>, invoke <ph id=\"ph3\">`MSQuery`</ph> like so:",
      "pos": [
        4652,
        4759
      ]
    },
    {
      "pos": [
        5163,
        5225
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Return Data in Pages with MSQuery"
    },
    {
      "content": "Mobile Services limits the amount of records that are returned in a single response.",
      "pos": [
        5227,
        5311
      ]
    },
    {
      "content": "To control the number of records displayed to your users you must implement a paging system.",
      "pos": [
        5312,
        5404
      ]
    },
    {
      "content": "Paging is performed by using the following three properties of the <bpt id=\"p1\">**</bpt>MSQuery<ept id=\"p1\">**</ept> object:",
      "pos": [
        5406,
        5492
      ]
    },
    {
      "content": "In the following example, a simple function requests 5 records from the server and then appends them to the local collection of previously loaded records:",
      "pos": [
        5587,
        5741
      ]
    },
    {
      "pos": [
        6539,
        6656
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph><ph id=\"ph3\">&lt;a name=\"parameters\"&gt;</ph><ph id=\"ph4\">&lt;/a&gt;</ph>How to: Limit Fields and Expand Query String Parameters with MSQuery"
    },
    {
      "content": "To limit fields to be returned in a query, specify the names of the fields in the <bpt id=\"p1\">**</bpt>selectFields<ept id=\"p1\">**</ept> property.",
      "pos": [
        6658,
        6766
      ]
    },
    {
      "content": "This returns only the text and completed fields:",
      "pos": [
        6767,
        6815
      ]
    },
    {
      "pos": [
        6877,
        7043
      ],
      "content": "To include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate <ph id=\"ph1\">`query.parameters`</ph> like so:"
    },
    {
      "pos": [
        7151,
        7194
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Insert Data"
    },
    {
      "content": "To insert a new table row, create a new <ph id=\"ph1\">`NSDictionary`</ph> and invoke <ph id=\"ph2\">`table insert`</ph>.",
      "pos": [
        7196,
        7277
      ]
    },
    {
      "content": "Mobile Services automatically generates new columns based on the <ph id=\"ph1\">`NSDictionary`</ph> if [Dynamic Schema] is not disabled.",
      "pos": [
        7278,
        7394
      ]
    },
    {
      "content": "If <ph id=\"ph1\">`id`</ph> is not provided, the backend automatically generates a new unique ID.",
      "pos": [
        7396,
        7473
      ]
    },
    {
      "content": "Provide your own <ph id=\"ph1\">`id`</ph> to use email addresses, usernames, or your own custom values as ID.",
      "pos": [
        7474,
        7563
      ]
    },
    {
      "content": "Providing your own ID may ease joins and business-oriented database logic.",
      "pos": [
        7564,
        7638
      ]
    },
    {
      "pos": [
        8210,
        8253
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modifying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Modify Data"
    },
    {
      "pos": [
        8255,
        8315
      ],
      "content": "To update an existing row, modify an item and call <ph id=\"ph1\">`update`</ph>:"
    },
    {
      "content": "Alternatively, supply the row ID and the updated field:",
      "pos": [
        8618,
        8673
      ]
    },
    {
      "pos": [
        8895,
        8958
      ],
      "content": "At minimum, the <ph id=\"ph1\">`id`</ph> attribute must be set when making updates."
    },
    {
      "pos": [
        8962,
        9004
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Delete Data"
    },
    {
      "pos": [
        9006,
        9055
      ],
      "content": "To delete an item, invoke <ph id=\"ph1\">`delete`</ph> with the item:"
    },
    {
      "content": "Alternatively, delete by providing a row ID:",
      "pos": [
        9206,
        9250
      ]
    },
    {
      "pos": [
        9442,
        9505
      ],
      "content": "At minimum, the <ph id=\"ph1\">`id`</ph> attribute must be set when making deletes."
    },
    {
      "pos": [
        9510,
        9565
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Authenticate Users"
    },
    {
      "content": "Azure Mobile Services supports various identity providers.",
      "pos": [
        9567,
        9625
      ]
    },
    {
      "content": "For a basic tutorial, see [Authentication].",
      "pos": [
        9626,
        9669
      ]
    },
    {
      "content": "Azure Mobile Services supports two authentication workflows:",
      "pos": [
        9671,
        9731
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Server-managed Login<ept id=\"p1\">**</ept>: Azure Mobile Services manages the login process on behalf of your app.",
      "pos": [
        9735,
        9831
      ]
    },
    {
      "content": "It displays a provider-specific login page and authenticates with the chosen provider.",
      "pos": [
        9832,
        9918
      ]
    },
    {
      "pos": [
        9922,
        10070
      ],
      "content": "<bpt id=\"p1\">**</bpt>Client-managed Login<ept id=\"p1\">**</ept>: The <bpt id=\"p2\">_</bpt>app<ept id=\"p2\">_</ept> requests a token from the identity provider and presents this token to Azure Mobile Services for authentication."
    },
    {
      "content": "When authentication succeeds, you get back a user object with a user ID value and the auth token.",
      "pos": [
        10072,
        10169
      ]
    },
    {
      "content": "To use this user ID to authorize users, see [Service-side Authorization].",
      "pos": [
        10170,
        10243
      ]
    },
    {
      "content": "To restrict table access to only authenticated users, see [Permissions].",
      "pos": [
        10244,
        10316
      ]
    },
    {
      "content": "Server-managed Login",
      "pos": [
        10322,
        10342
      ]
    },
    {
      "content": "Here is how you can add server-managed login to the [Mobile Services Quick Start] project; you may use similar code for your other projects.",
      "pos": [
        10344,
        10484
      ]
    },
    {
      "content": "For more information and to see an end-to-end example in action, see [Authentication].",
      "pos": [
        10485,
        10571
      ]
    },
    {
      "content": "Client-managed Login (Single Sign-on)",
      "pos": [
        10689,
        10726
      ]
    },
    {
      "content": "You may do the login process outside the Mobile Services client, either to enable single sign-on or if your app contacts the identity provider directly.",
      "pos": [
        10728,
        10880
      ]
    },
    {
      "content": "In such cases, you can log in to Mobile Services by providing a token obtained independently from a supported identity provider.",
      "pos": [
        10881,
        11009
      ]
    },
    {
      "content": "The following example uses the [Live Connect SDK] to enable single sign-on for iOS apps.",
      "pos": [
        11011,
        11099
      ]
    },
    {
      "content": "It assumes that you have a <bpt id=\"p1\">**</bpt>LiveConnectClient<ept id=\"p1\">**</ept> instance named <ph id=\"ph1\">`liveClient`</ph> in the controller and the user is logged in.",
      "pos": [
        11100,
        11221
      ]
    },
    {
      "pos": [
        11476,
        11540
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching-tokens\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Cache Authentication Tokens"
    },
    {
      "content": "Let's see how you may cache tokens in the [Mobile Services Quick Start] project; you may apply similar steps to any project.",
      "pos": [
        11542,
        11666
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../../includes/mobile-services-ios-authenticate-app-with-token.md)]</ph>",
      "pos": [
        11667,
        11799
      ]
    },
    {
      "pos": [
        11803,
        11845
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"errors\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to: Handle Errors"
    },
    {
      "content": "When you call a mobile service, the completion block contains an <ph id=\"ph1\">`NSError *error`</ph> parameter.",
      "pos": [
        11847,
        11939
      ]
    },
    {
      "content": "When an error occurs, this parameter is non-nil.",
      "pos": [
        11940,
        11988
      ]
    },
    {
      "content": "In your code, you should check this parameter and handle the error as needed.",
      "pos": [
        11989,
        12066
      ]
    },
    {
      "content": "The file <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&lt;WindowsAzureMobileServices/MSError.h&gt;`</ph><ept id=\"p1\">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h)</ept> defines the constants <ph id=\"ph2\">`MSErrorResponseKey`</ph>, <ph id=\"ph3\">`MSErrorRequestKey`</ph>, and <ph id=\"ph4\">`MSErrorServerItemKey`</ph> to get more data related to the error.",
      "pos": [
        12068,
        12332
      ]
    },
    {
      "content": "In addition, the file defines constants for each error code.",
      "pos": [
        12333,
        12393
      ]
    },
    {
      "content": "For an example on how to use these constants, see [Conflict-Handler] for its usage of <ph id=\"ph1\">`MSErrorServerItemKey`</ph> and <ph id=\"ph2\">`MSErrorPreconditionFailed`</ph>.",
      "pos": [
        12394,
        12535
      ]
    },
    {
      "content": "test",
      "pos": [
        15149,
        15153
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to Use iOS Client Library for Azure Mobile Services\"\n    description=\"How to Use iOS Client Library for Mobile Services\"\n    services=\"mobile-services\"\n    documentationCenter=\"ios\"\n    authors=\"krisragh\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"07/01/2015\"\n    ms.author=\"krisragh\"/>\n\n# How to Use iOS Client Library for Azure Mobile Services\n\n[AZURE.INCLUDE [mobile-services-selector-client-library](../../includes/mobile-services-selector-client-library.md)]\n\nThis guide teaches you to perform common scenarios using the Azure Mobile Services [iOS SDK]. If you are new to Mobile Services, first complete [Mobile Services Quick Start] or [Add Mobile Services to Existing App] to configure your account, create a table, and create a mobile service.\n\n> [AZURE.NOTE] This guide uses the latest [iOS Mobile Services SDK](https://go.microsoft.com/fwLink/?LinkID=266533&clcid=0x409). If your project uses an older version of the SDK, first upgrade the framework in Xcode.\n\n[AZURE.INCLUDE [mobile-services-concepts](../../includes/mobile-services-concepts.md)]\n\n##<a name=\"Setup\"></a>Setup and Prerequisites\n\nThis guide assumes that you have created a mobile service with a table. For more information see [Create a table], or reuse the `TodoItem` table created in [Mobile Services Quick Start] or [Add Mobile Services to Existing App]. This guide assumes that the table has the same schema as the tables in those tutorials. This guide also assumes that your Xcode references `WindowsAzureMobileServices.framework` and imports `WindowsAzureMobileServices/WindowsAzureMobileServices.h`.\n\n##<a name=\"create-client\"></a>How to: Create Mobile Services Client\n\nTo access an Azure mobile service in your project, create an `MSClient` client object. Replace `AppUrl` and `AppKey` with the mobile service URL and the application key Dashboard values, respectively.\n\n```\nMSClient *client = [MSClient clientWithApplicationURLString:@\"AppUrl\" applicationKey:@\"AppKey\"];\n```\n\n##<a name=\"table-reference\"></a>How to: Create Table Reference\n\nTo access or update data for your Azure mobile service, create a reference to the table. Replace `TodoItem` with the name of your table.\n\n```\n    MSTable *table = [client tableWithName:@\"TodoItem\"];\n```\n\n##<a name=\"querying\"></a>How to: Query Data\n\nTo create a database query, query the `MSTable` object. The following query gets all the items in `TodoItem` and logs the text of each item.\n\n```\n[table readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) { // error is nil if no error occured\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) { // items is NSArray of records that match query\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n##<a name=\"filtering\"></a>How to: Filter Returned Data\n\nTo filter results, there are many available options.\n\nTo filter using a predicate, use an `NSPredicate` and `readWithPredicate`. The following filters returned data to find only incomplete Todo items.\n\n```\n// Create a predicate that finds items where complete is false\nNSPredicate * predicate = [NSPredicate predicateWithFormat:@\"complete == NO\"];\n// Query the TodoItem table and update the items property with the results from the service\n[table readWithPredicate:predicate completion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n##<a name=\"query-object\"></a>How to: Use MSQuery\n\nTo perform a complex query (including sorting and paging), create an `MSQuery` object, directly or by using a predicate:\n\n```\n    MSQuery *query = [table query];\n    MSQuery *query = [table queryWithPredicate: [NSPredicate predicateWithFormat:@\"complete == NO\"]];\n```\n\n`MSQuery` lets you control several query behaviors, including the following. Execute an `MSQuery` query by calling `readWithCompletion` on it, as shown in the next example.\n* Specify order of results\n* Limit which fields to return\n* Limit how many records to return\n* Specify total count in response\n* Specify custom query string parameters in request\n* Apply additional functions\n\n\n## <a name=\"sorting\"></a>How to: Sort Data with MSQuery\n\nTo sort results, let's look at an example. To first ascendingly by field `text` and then descendingly by field `completion`, invoke `MSQuery` like so:\n\n```\n[query orderByAscending:@\"text\"];\n[query orderByDescending:@\"complete\"];\n[query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n}];\n```\n\n## <a name=\"paging\"></a>How to: Return Data in Pages with MSQuery\n\nMobile Services limits the amount of records that are returned in a single response. To control the number of records displayed to your users you must implement a paging system.  Paging is performed by using the following three properties of the **MSQuery** object:\n\n```\n+   `BOOL includeTotalCount`\n+   `NSInteger fetchLimit`\n+   `NSInteger fetchOffset`\n```\n\nIn the following example, a simple function requests 5 records from the server and then appends them to the local collection of previously loaded records:\n\n```\n// Create and initialize these properties\n@property (nonatomic, strong)   NSMutableArray *loadedItems; // Init via [[NSMutableArray alloc] init]\n@property (nonatomic)                   BOOL moreResults;\n```\n\n```\n-(void)loadResults\n{\n    MSQuery *query = [self.table query];\n\n    query.includeTotalCount = YES;\n    query.fetchLimit = 5;\n    query.fetchOffset = self.loadedItems.count;\n\n\n    [query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(!error) {\n            // Add the items to our local copy\n            [self.loadedItems addObjectsFromArray:result.items];\n\n            // Set a flag to keep track if there are any additional records we need to load\n            self.moreResults = (self.loadedItems.count <= result.totalCount);\n        }\n    }];\n}\n\n```\n\n## <a name=\"selecting\"></a><a name=\"parameters\"></a>How to: Limit Fields and Expand Query String Parameters with MSQuery\n\nTo limit fields to be returned in a query, specify the names of the fields in the **selectFields** property. This returns only the text and completed fields:\n\n```\n    query.selectFields = @[@\"text\", @\"completed\"];\n```\n\nTo include additional query string parameters in the server request (for example, because a custom server-side script uses them), populate `query.parameters` like so:\n\n```\n    query.parameters = @{\n        @\"myKey1\" : @\"value1\",\n        @\"myKey2\" : @\"value2\",\n    };\n```\n\n##<a name=\"inserting\"></a>How to: Insert Data\n\nTo insert a new table row, create a new `NSDictionary` and invoke `table insert`. Mobile Services automatically generates new columns based on the `NSDictionary` if [Dynamic Schema] is not disabled.\n\nIf `id` is not provided, the backend automatically generates a new unique ID. Provide your own `id` to use email addresses, usernames, or your own custom values as ID. Providing your own ID may ease joins and business-oriented database logic.\n\n```\n    NSDictionary *newItem = @{@\"id\": @\"custom-id\", @\"text\": @\"my new item\", @\"complete\" : @NO};\n    [self.table insert:newItem completion:^(NSDictionary *result, NSError *error) {\n        // The result contains the new item that was inserted,\n        // depending on your server scripts it may have additional or modified\n        // data compared to what was passed to the server.\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n        }\n    }];\n```\n\n##<a name=\"modifying\"></a>How to: Modify Data\n\nTo update an existing row, modify an item and call `update`:\n\n```\n    NSMutableDictionary *newItem = [oldItem mutableCopy]; // oldItem is NSDictionary\n    [newItem setValue:@\"Updated text\" forKey:@\"text\"];\n    [self.table update:newItem completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAlternatively, supply the row ID and the updated field:\n\n```\n    [self.table update:@{@\"id\":@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\", @\"Complete\":@YES} completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAt minimum, the `id` attribute must be set when making updates.\n\n##<a name=\"deleting\"></a>How to: Delete Data\n\nTo delete an item, invoke `delete` with the item:\n\n```\n    [self.table delete:item completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAlternatively, delete by providing a row ID:\n\n```\n    [self.table deleteWithId:@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\" completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\nAt minimum, the `id` attribute must be set when making deletes.\n\n\n##<a name=\"authentication\"></a>How to: Authenticate Users\n\nAzure Mobile Services supports various identity providers. For a basic tutorial, see [Authentication].\n\nAzure Mobile Services supports two authentication workflows:\n\n- **Server-managed Login**: Azure Mobile Services manages the login process on behalf of your app. It displays a provider-specific login page and authenticates with the chosen provider.\n\n- **Client-managed Login**: The _app_ requests a token from the identity provider and presents this token to Azure Mobile Services for authentication.\n\nWhen authentication succeeds, you get back a user object with a user ID value and the auth token. To use this user ID to authorize users, see [Service-side Authorization]. To restrict table access to only authenticated users, see [Permissions].\n\n### Server-managed Login\n\nHere is how you can add server-managed login to the [Mobile Services Quick Start] project; you may use similar code for your other projects. For more information and to see an end-to-end example in action, see [Authentication].\n\n[AZURE.INCLUDE [mobile-services-ios-authenticate-app](../../includes/mobile-services-ios-authenticate-app.md)]\n\n### Client-managed Login (Single Sign-on)\n\nYou may do the login process outside the Mobile Services client, either to enable single sign-on or if your app contacts the identity provider directly. In such cases, you can log in to Mobile Services by providing a token obtained independently from a supported identity provider.\n\nThe following example uses the [Live Connect SDK] to enable single sign-on for iOS apps. It assumes that you have a **LiveConnectClient** instance named `liveClient` in the controller and the user is logged in.\n\n```\n    [client loginWithProvider:@\"microsoftaccount\"\n        token:@{@\"authenticationToken\" : self.liveClient.session.authenticationToken}\n        completion:^(MSUser *user, NSError *error) {\n                // Handle success and errors\n    }];\n```\n\n##<a name=\"caching-tokens\"></a>How to: Cache Authentication Tokens\n\nLet's see how you may cache tokens in the [Mobile Services Quick Start] project; you may apply similar steps to any project. [AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../../includes/mobile-services-ios-authenticate-app-with-token.md)]\n\n##<a name=\"errors\"></a>How to: Handle Errors\n\nWhen you call a mobile service, the completion block contains an `NSError *error` parameter. When an error occurs, this parameter is non-nil. In your code, you should check this parameter and handle the error as needed.\n\nThe file [`<WindowsAzureMobileServices/MSError.h>`](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h) defines the constants `MSErrorResponseKey`, `MSErrorRequestKey`, and `MSErrorServerItemKey` to get more data related to the error. In addition, the file defines constants for each error code. For an example on how to use these constants, see [Conflict-Handler] for its usage of `MSErrorServerItemKey` and `MSErrorPreconditionFailed`.\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[Setup and Prerequisites]: #Setup\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #table-reference\n[How to: Query data from a mobile service]: #querying\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Bind data to the user interface]: #binding\n[How to: Insert data into a mobile service]: #inserting\n[How to: Modify data in a mobile service]: #modifying\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching-tokens\n[How to: Upload images and large files]: #blobs\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #unit-testing\n[How to: Customize the client]: #customizing\n[Customize request headers]: #custom-headers\n[Customize data type serialization]: #custom-serialization\n[Next Steps]: #next-steps\n[How to: Use MSQuery]: #query-object\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Add Mobile Services to Existing App]: /develop/mobile/tutorials/get-started-data\n[Mobile Services Quick Start]: /develop/mobile/tutorials/get-started-ios\n[Get started with Mobile Services]: /develop/mobile/tutorials/get-started-ios\n[Validate and modify data in Mobile Services by using server scripts]: /develop/mobile/tutorials/validate-modify-and-augment-data-ios\n[Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[Authentication]: /develop/mobile/tutorials/get-started-with-users-ios\n[iOS SDK]: https://developer.apple.com/xcode\n\n[Handling Expired Tokens]: http://go.microsoft.com/fwlink/p/?LinkId=301955\n[Live Connect SDK]: http://go.microsoft.com/fwlink/p/?LinkId=301960\n[Permissions]: http://msdn.microsoft.com/library/windowsazure/jj193161.aspx\n[Service-side Authorization]:\nmobile-services-javascript-backend-service-side-authorization.md\n[Use scripts to authorize users]: /develop/mobile/tutorials/authorize-users-in-scripts-ios\n[Dynamic Schema]: http://go.microsoft.com/fwlink/p/?LinkId=296271\n[How to: access custom parameters]: /develop/mobile/how-to-guides/work-with-server-scripts#access-headers\n[Create a table]: http://msdn.microsoft.com/library/windowsazure/jj193162.aspx\n[NSDictionary object]: http://go.microsoft.com/fwlink/p/?LinkId=301965\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n[CLI to manage Mobile Services tables]: ../virtual-machines-command-line-tools.md#Mobile_Tables\n[Conflict-Handler]: mobile-services-ios-handling-conflicts-offline-data.md#add-conflict-handling\n\ntest\n"
}