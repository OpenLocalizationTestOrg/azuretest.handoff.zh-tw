<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting started with Azure queue storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure queue storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to get started using Azure queue storage in an ASP.NET 5 project in Visual Studio</source>
          <target state="new">How to get started using Azure queue storage in an ASP.NET 5 project in Visual Studio</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting started with Azure queue storage and Visual Studio connected services</source>
          <target state="new">Getting started with Azure queue storage and Visual Studio connected services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new">Getting started</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What happened</source>
          <target state="new">What happened</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Blobs</source>
          <target state="new">Blobs</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="new">Queues</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tables</source>
          <target state="new">Tables</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes how to get started using Azure table storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog.</source>
          <target state="new">This article describes how to get started using Azure table storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> dialog.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files.</source>
          <target state="new">The <bpt id="p1">**</bpt>Add Connected Services<ept id="p1">**</ept> operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Azure queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.</source>
          <target state="new">Azure queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A single queue message can be up to 64 kilobytes (KB) in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.</source>
          <target state="new">A single queue message can be up to 64 kilobytes (KB) in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To get started, you first need to create an Azure queue in your storage account.</source>
          <target state="new">To get started, you first need to create an Azure queue in your storage account.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>We'll show you how to create a queue in code.</source>
          <target state="new">We'll show you how to create a queue in code.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>We'll also show you how to perform basic queue operations, such as adding, modifying, reading, and removing queue messages.</source>
          <target state="new">We'll also show you how to perform basic queue operations, such as adding, modifying, reading, and removing queue messages.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The samples are written in C\# code and use the Azure Storage Client Library for .NET.</source>
          <target state="new">The samples are written in C\# code and use the Azure Storage Client Library for .NET.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about ASP.NET, see <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept>.</source>
          <target state="new">For more information about ASP.NET, see <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Some of the APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Some of the APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Asynchronous programming with Async and Await<ept id="p1">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The code below assumes async programming methods are being used.</source>
          <target state="new">The code below assumes async programming methods are being used.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to use queue storage from .NET<ept id="p1">](storage-dotnet-how-to-use-queues.md)</ept> for more information on programmatically manipulating queues.</source>
          <target state="new">See <bpt id="p1">[</bpt>How to use queue storage from .NET<ept id="p1">](storage-dotnet-how-to-use-queues.md)</ept> for more information on programmatically manipulating queues.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Storage documentation<ept id="p1">](https://azure.microsoft.com/documentation/services/storage/)</ept> for general information about Azure Storage.</source>
          <target state="new">See <bpt id="p1">[</bpt>Storage documentation<ept id="p1">](https://azure.microsoft.com/documentation/services/storage/)</ept> for general information about Azure Storage.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Cloud Services documentation<ept id="p1">](http://azure.microsoft.com/documentation/services/cloud-services/)</ept> for general information about Azure cloud services.</source>
          <target state="new">See <bpt id="p1">[</bpt>Cloud Services documentation<ept id="p1">](http://azure.microsoft.com/documentation/services/cloud-services/)</ept> for general information about Azure cloud services.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept> for more information about programming ASP.NET applications.</source>
          <target state="new">See <bpt id="p1">[</bpt>ASP.NET<ept id="p1">](http://www.asp.net)</ept> for more information about programming ASP.NET applications.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Access queues in code</source>
          <target state="new">Access queues in code</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To access queues in ASP.NET 5 projects, you need to include the following items to any C# source file that accesses Azure queue storage.</source>
          <target state="new">To access queues in ASP.NET 5 projects, you need to include the following items to any C# source file that accesses Azure queue storage.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make sure the namespace declarations at the top of the C# file include these <ph id="ph1">`using`</ph> statements.</source>
          <target state="new">Make sure the namespace declarations at the top of the C# file include these <ph id="ph1">`using`</ph> statements.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">`CloudStorageAccount`</ph> object that represents your storage account information.</source>
          <target state="new">Get a <ph id="ph1">`CloudStorageAccount`</ph> object that represents your storage account information.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</source>
          <target state="new">Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">`CloudQueueClient`</ph> object to reference the queue objects in your storage account.</source>
          <target state="new">Get a <ph id="ph1">`CloudQueueClient`</ph> object to reference the queue objects in your storage account.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get a <ph id="ph1">`CloudQueue`</ph> object to reference a specific queue.</source>
          <target state="new">Get a <ph id="ph1">`CloudQueue`</ph> object to reference a specific queue.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Use all of the above code in front of the code in the following samples.</source>
          <target state="new"><bpt id="p1">**</bpt>NOTE:<ept id="p1">**</ept> Use all of the above code in front of the code in the following samples.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create a queue in code</source>
          <target state="new">Create a queue in code</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To create the Azure queue in code, just add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph>.</source>
          <target state="new">To create the Azure queue in code, just add a call to <ph id="ph1">`CreateIfNotExistsAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add a message to a queue</source>
          <target state="new">Add a message to a queue</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To insert a message into an existing queue, create a new <ph id="ph1">`CloudQueueMessage`</ph> object, then call the <ph id="ph2">`AddMessageAsync`</ph> method.</source>
          <target state="new">To insert a message into an existing queue, create a new <ph id="ph1">`CloudQueueMessage`</ph> object, then call the <ph id="ph2">`AddMessageAsync`</ph> method.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CloudQueueMessage`</ph> object can be created from either a string (in UTF-8 format) or a byte array.</source>
          <target state="new">A <ph id="ph1">`CloudQueueMessage`</ph> object can be created from either a string (in UTF-8 format) or a byte array.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Here is an example which inserts the message 'Hello, World'.</source>
          <target state="new">Here is an example which inserts the message 'Hello, World'.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Read a message in a queue</source>
          <target state="new">Read a message in a queue</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can peek at the message in the front of a queue without removing it from the queue by calling the <ph id="ph1">`PeekMessageAsync`</ph> method.</source>
          <target state="new">You can peek at the message in the front of a queue without removing it from the queue by calling the <ph id="ph1">`PeekMessageAsync`</ph> method.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Read and remove a message in a queue</source>
          <target state="new">Read and remove a message in a queue</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Your code can remove (dequeue) a message from a queue in two steps.</source>
          <target state="new">Your code can remove (dequeue) a message from a queue in two steps.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetMessageAsync`</ph> to get the next message in a queue.</source>
          <target state="new">Call <ph id="ph1">`GetMessageAsync`</ph> to get the next message in a queue.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A message returned from <ph id="ph1">`GetMessageAsync`</ph> becomes invisible to any other code reading messages from this queue.</source>
          <target state="new">A message returned from <ph id="ph1">`GetMessageAsync`</ph> becomes invisible to any other code reading messages from this queue.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>By default, this message stays invisible for 30 seconds.</source>
          <target state="new">By default, this message stays invisible for 30 seconds.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To finish removing the message from the queue, call <ph id="ph1">`DeleteMessageAsync`</ph>.</source>
          <target state="new">To finish removing the message from the queue, call <ph id="ph1">`DeleteMessageAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.</source>
          <target state="new">This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code calls <ph id="ph1">`DeleteMessageAsync`</ph> right after the message has been processed.</source>
          <target state="new">The following code calls <ph id="ph1">`DeleteMessageAsync`</ph> right after the message has been processed.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Leverage additional options for dequeuing messages</source>
          <target state="new">Leverage additional options for dequeuing messages</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are two ways you can customize message retrieval from a queue.</source>
          <target state="new">There are two ways you can customize message retrieval from a queue.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>First, you can get a batch of messages (up to 32).</source>
          <target state="new">First, you can get a batch of messages (up to 32).</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Second, you can set a</source>
          <target state="new">Second, you can set a</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>longer or shorter invisibility timeout, allowing your code more or less</source>
          <target state="new">longer or shorter invisibility timeout, allowing your code more or less</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>time to fully process each message.</source>
          <target state="new">time to fully process each message.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code example uses the</source>
          <target state="new">The following code example uses the</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetMessages`</ph> method to get 20 messages in one call.</source>
          <target state="new"><ph id="ph1">`GetMessages`</ph> method to get 20 messages in one call.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Then it processes</source>
          <target state="new">Then it processes</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>each message using a <ph id="ph1">`foreach`</ph> loop.</source>
          <target state="new">each message using a <ph id="ph1">`foreach`</ph> loop.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It also sets the invisibility</source>
          <target state="new">It also sets the invisibility</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>timeout to 5 minutes for each message.</source>
          <target state="new">timeout to 5 minutes for each message.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note that the 5 minutes start</source>
          <target state="new">Note that the 5 minutes start</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>for all messages at the same time, so after 5 minutes have passed after</source>
          <target state="new">for all messages at the same time, so after 5 minutes have passed after</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>the call to <ph id="ph1">`GetMessages`</ph>, any messages which have not been deleted</source>
          <target state="new">the call to <ph id="ph1">`GetMessages`</ph>, any messages which have not been deleted</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>become visible again.</source>
          <target state="new">become visible again.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Get the queue length</source>
          <target state="new">Get the queue length</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can get an estimate of the number of messages in a queue.</source>
          <target state="new">You can get an estimate of the number of messages in a queue.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FetchAttributes`</ph> method asks the queue service to</source>
          <target state="new"><ph id="ph1">`FetchAttributes`</ph> method asks the queue service to</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>retrieve the queue attributes, including the message count.</source>
          <target state="new">retrieve the queue attributes, including the message count.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ApproximateMethodCount`</ph></source>
          <target state="new">The <ph id="ph1">`ApproximateMethodCount`</ph></target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>property returns the last value retrieved by the</source>
          <target state="new">property returns the last value retrieved by the</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FetchAttributes`</ph> method, without calling the queue service.</source>
          <target state="new"><ph id="ph1">`FetchAttributes`</ph> method, without calling the queue service.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use the Async-Await pattern with common queue APIs</source>
          <target state="new">Use the Async-Await pattern with common queue APIs</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This example shows how to use the Async-Await pattern with common queue APIs.</source>
          <target state="new">This example shows how to use the Async-Await pattern with common queue APIs.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The sample calls the async version of each of the given methods.</source>
          <target state="new">The sample calls the async version of each of the given methods.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This can be seen by the Async post-fix of each method.</source>
          <target state="new">This can be seen by the Async post-fix of each method.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When an async method is used, the Async-Await pattern suspends local execution until the call is completed.</source>
          <target state="new">When an async method is used, the Async-Await pattern suspends local execution until the call is completed.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application.</source>
          <target state="new">This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more details on using the Async-Await pattern in .NET, see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)</source>
          <target state="new">For more details on using the Async-Await pattern in .NET, see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Delete a queue</source>
          <target state="new">Delete a queue</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To delete a queue and all the messages contained in it, call the</source>
          <target state="new">To delete a queue and all the messages contained in it, call the</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Delete`</ph> method on the queue object.</source>
          <target state="new"><ph id="ph1">`Delete`</ph> method on the queue object.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae715d0c7c4cc2d114107d6fbbdc7d12e4f51337</xliffext:olfilehash>
  </header>
</xliff>