{
  "nodes": [
    {
      "content": "Service Bus REST tutorial | Microsoft Azure",
      "pos": [
        26,
        69
      ]
    },
    {
      "content": "Build a simple Service Bus host application that exposes a REST-based interface.",
      "pos": [
        87,
        167
      ]
    },
    {
      "content": "Service Bus REST tutorial",
      "pos": [
        464,
        489
      ]
    },
    {
      "content": "This tutorial describes how to build a simple Service Bus host application that exposes a REST-based interface.",
      "pos": [
        491,
        602
      ]
    },
    {
      "content": "REST enables a web client, such as a web browser, to access the Service Bus API through HTTP requests.",
      "pos": [
        603,
        705
      ]
    },
    {
      "content": "This tutorial uses the Windows Communication Foundation (WCF) REST programming model to construct a REST service on Service Bus.",
      "pos": [
        707,
        835
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>WCF REST Programming Model<ept id=\"p1\">](https://msdn.microsoft.com/library/bb412169.aspx)</ept> and <bpt id=\"p2\">[</bpt>Designing and Implementing Services<ept id=\"p2\">](https://msdn.microsoft.com/library/ms729746.aspx)</ept> in the WCF documentation.",
      "pos": [
        836,
        1058
      ]
    },
    {
      "content": "Step 1: Sign up for an Azure account",
      "pos": [
        1063,
        1099
      ]
    },
    {
      "content": "The first step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key.",
      "pos": [
        1101,
        1200
      ]
    },
    {
      "content": "A service namespace provides an application boundary for each application exposed through Service Bus.",
      "pos": [
        1201,
        1303
      ]
    },
    {
      "content": "A SAS key is automatically generated by the system when a service namespace is created.",
      "pos": [
        1304,
        1391
      ]
    },
    {
      "content": "The combination of service namespace and SAS key provides the credentials for Service Bus to authenticate access to an application.",
      "pos": [
        1392,
        1523
      ]
    },
    {
      "content": "To create a service namespace and obtain a SAS key",
      "pos": [
        1529,
        1579
      ]
    },
    {
      "pos": [
        1584,
        1756
      ],
      "content": "To create a namespace in the Azure portal, follow the steps in <bpt id=\"p1\">[</bpt>How To: Create or Modify a Service Bus Service Namespace<ept id=\"p1\">](https://msdn.microsoft.com/library/hh690931.aspx)</ept>."
    },
    {
      "content": "In the main window of the Azure portal, click the name of the service namespace you created in the previous step.",
      "pos": [
        1761,
        1874
      ]
    },
    {
      "pos": [
        1879,
        1952
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> to view the shared access policies for the namespace."
    },
    {
      "content": "Make a note of the primary key for the <bpt id=\"p1\">**</bpt>RootManageSharedAccessKey<ept id=\"p1\">**</ept> policy, or copy it to the clipboard.",
      "pos": [
        1957,
        2062
      ]
    },
    {
      "content": "You will use this value later in the tutorial.",
      "pos": [
        2063,
        2109
      ]
    },
    {
      "content": "Step 2: Define a REST-based WCF service contract to use with Service Bus",
      "pos": [
        2114,
        2186
      ]
    },
    {
      "content": "As with other Service Bus services, when you create a REST-style service, you must define the contract.",
      "pos": [
        2188,
        2291
      ]
    },
    {
      "content": "The contract specifies what operations the host supports.",
      "pos": [
        2292,
        2349
      ]
    },
    {
      "content": "A service operation can be thought of as a web service method.",
      "pos": [
        2350,
        2412
      ]
    },
    {
      "content": "Contracts are created by defining a C++, C#, or Visual Basic interface.",
      "pos": [
        2413,
        2484
      ]
    },
    {
      "content": "Each method in the interface corresponds to a specific service operation.",
      "pos": [
        2485,
        2558
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>ServiceContractAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx)</ept> attribute must be applied to each interface, and the <bpt id=\"p2\">[</bpt>OperationContractAttribute<ept id=\"p2\">](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx)</ept> attribute must be applied to each operation.",
      "pos": [
        2559,
        2890
      ]
    },
    {
      "content": "If a method in an interface that has the <bpt id=\"p1\">[</bpt>ServiceContractAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx)</ept> does not have the <bpt id=\"p2\">[</bpt>OperationContractAttribute<ept id=\"p2\">](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx)</ept>, that method is not exposed.",
      "pos": [
        2891,
        3208
      ]
    },
    {
      "content": "The code used for these tasks is shown in the example following the procedure.",
      "pos": [
        3209,
        3287
      ]
    },
    {
      "content": "The primary difference between a basic Service Bus contract and a REST-style contract is the addition of a property to the <bpt id=\"p1\">[</bpt>OperationContractAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx)</ept>: <bpt id=\"p2\">[</bpt>WebGetAttribute<ept id=\"p2\">](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx)</ept>.",
      "pos": [
        3289,
        3629
      ]
    },
    {
      "content": "This property enables you to map a method in your interface to a method on the other side of the interface.",
      "pos": [
        3630,
        3737
      ]
    },
    {
      "content": "In this case, we will use <bpt id=\"p1\">[</bpt>WebGetAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx)</ept> to link a method to HTTP GET.",
      "pos": [
        3738,
        3892
      ]
    },
    {
      "content": "This allows Service Bus to accurately retrieve and interpret commands sent to the interface.",
      "pos": [
        3893,
        3985
      ]
    },
    {
      "content": "To create a Service Bus contract with an interface",
      "pos": [
        3991,
        4041
      ]
    },
    {
      "pos": [
        4046,
        4173
      ],
      "content": "Open Visual Studio as an administrator: right-click the program in the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> menu, and then click <bpt id=\"p2\">**</bpt>Run as administrator<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Create a new console application project.",
      "pos": [
        4178,
        4219
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu and select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, then select <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.",
      "pos": [
        4220,
        4288
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box, click <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> (if <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept> does not appear, look under <bpt id=\"p4\">**</bpt>Other Languages<ept id=\"p4\">**</ept>), select the <bpt id=\"p5\">**</bpt>Console Application<ept id=\"p5\">**</ept> template, and name it <bpt id=\"p6\">**</bpt>ImageListener<ept id=\"p6\">**</ept>.",
      "pos": [
        4289,
        4487
      ]
    },
    {
      "content": "Use the default <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept>.",
      "pos": [
        4488,
        4517
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to create the project.",
      "pos": [
        4518,
        4553
      ]
    },
    {
      "content": "For a C# project, Visual Studio creates a <ph id=\"ph1\">`Program.cs`</ph> file.",
      "pos": [
        4558,
        4618
      ]
    },
    {
      "content": "This class contains an empty <ph id=\"ph1\">`Main()`</ph> method, required for a console application project to build correctly.",
      "pos": [
        4619,
        4727
      ]
    },
    {
      "pos": [
        4732,
        4794
      ],
      "content": "Add a reference to <bpt id=\"p1\">**</bpt>System.ServiceModel.dll<ept id=\"p1\">**</ept> to the project:"
    },
    {
      "content": "a.",
      "pos": [
        4800,
        4802
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> folder under the project folder and then click <bpt id=\"p3\">**</bpt>Add Reference<ept id=\"p3\">**</ept>.",
      "pos": [
        4803,
        4925
      ]
    },
    {
      "content": "b.",
      "pos": [
        4931,
        4933
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>.NET<ept id=\"p1\">**</ept> tab in the <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept> dialog box and scroll down until you see <bpt id=\"p3\">**</bpt>System.ServiceModel<ept id=\"p3\">**</ept>.",
      "pos": [
        4934,
        5047
      ]
    },
    {
      "content": "Select it, then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        5048,
        5077
      ]
    },
    {
      "pos": [
        5082,
        5174
      ],
      "content": "Repeat the previous step to add a reference to the <bpt id=\"p1\">**</bpt>System.ServiceModel.Web.dll<ept id=\"p1\">**</ept> assembly."
    },
    {
      "pos": [
        5179,
        5327
      ],
      "content": "Add <ph id=\"ph1\">`using`</ph> statements for the <bpt id=\"p1\">**</bpt>System.ServiceModel<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>System.ServiceModel.Channels<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>System.ServiceModel.Web<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>System.IO<ept id=\"p4\">**</ept> namespaces."
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>System.ServiceModel<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.aspx)</ept> is the namespace that enables programmatic access to basic features of WCF.",
      "pos": [
        5478,
        5636
      ]
    },
    {
      "content": "Service Bus uses many of the objects and attributes of WCF to define service contracts.",
      "pos": [
        5637,
        5724
      ]
    },
    {
      "content": "You will use this namespace in most of your Service Bus relay applications.",
      "pos": [
        5725,
        5800
      ]
    },
    {
      "content": "Similarly, <bpt id=\"p1\">[</bpt>System.ServiceModel.Channels<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.servicemodel.channels.aspx)</ept> helps define the channel, which is the object through which you communicate with Service Bus and the client web browser.",
      "pos": [
        5801,
        6039
      ]
    },
    {
      "content": "Finally, <bpt id=\"p1\">[</bpt>System.ServiceModel.Web<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.web.aspx)</ept> contains the types that enable you to create web-based applications.",
      "pos": [
        6040,
        6208
      ]
    },
    {
      "pos": [
        6213,
        6317
      ],
      "content": "Rename the namespace for the program from the Visual Studio default to <bpt id=\"p1\">**</bpt>Microsoft.ServiceBus.Samples<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Directly after the namespace declaration, define a new interface named <bpt id=\"p1\">**</bpt>IImageContract<ept id=\"p1\">**</ept> and apply the <bpt id=\"p2\">**</bpt>ServiceContractAttribute<ept id=\"p2\">**</ept> attribute to the interface with a value of <ph id=\"ph1\">`http://samples.microsoft.com/ServiceModel/Relay/`</ph>.",
      "pos": [
        6401,
        6628
      ]
    },
    {
      "content": "The namespace value differs from the namespace that you use throughout the scope of your code.",
      "pos": [
        6629,
        6723
      ]
    },
    {
      "content": "The namespace value is used as a unique identifier for this contract, and should have version information.",
      "pos": [
        6724,
        6830
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Service Versioning<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=180498)</ept>.",
      "pos": [
        6831,
        6925
      ]
    },
    {
      "content": "Specifying the namespace explicitly prevents the default namespace value from being added to the contract name.",
      "pos": [
        6926,
        7037
      ]
    },
    {
      "pos": [
        7231,
        7501
      ],
      "content": "Within the <ph id=\"ph1\">`IImageContract`</ph> interface, declare a method for the single operation the <ph id=\"ph2\">`IImageContract`</ph> contract exposes in the interface and apply the <ph id=\"ph3\">`OperationContractAttribute`</ph> attribute to the method that you want to expose as part of the public Service Bus contract."
    },
    {
      "pos": [
        7628,
        7704
      ],
      "content": "Next to the <bpt id=\"p1\">**</bpt>OperationContract<ept id=\"p1\">**</ept> attribute, apply the <bpt id=\"p2\">**</bpt>WebGet<ept id=\"p2\">**</ept> attribute."
    },
    {
      "content": "Doing so enables Service Bus to route HTTP GET requests to <bpt id=\"p1\">**</bpt>GetImage<ept id=\"p1\">**</ept>, and to translate the return values of <bpt id=\"p2\">**</bpt>GetImage<ept id=\"p2\">**</ept> into an HTTP GETRESPONSE reply.",
      "pos": [
        7839,
        7994
      ]
    },
    {
      "content": "Later in the tutorial, you will use a web browser to access this method, and to display the image in the browser.",
      "pos": [
        7995,
        8108
      ]
    },
    {
      "pos": [
        8114,
        8257
      ],
      "content": "Directly after the <ph id=\"ph1\">`IImageContract`</ph> definition, declare a channel that inherits from both the <ph id=\"ph2\">`IImageContract`</ph> and <ph id=\"ph3\">`IClientChannel`</ph> interfaces."
    },
    {
      "content": "A channel is the WCF object through which the service and client pass information to each other.",
      "pos": [
        8576,
        8672
      ]
    },
    {
      "content": "Later, you will create the channel in your host application.",
      "pos": [
        8673,
        8733
      ]
    },
    {
      "content": "Service Bus then uses this channel to pass the HTTP GET requests from the browser to your <bpt id=\"p1\">**</bpt>GetImage<ept id=\"p1\">**</ept> implementation.",
      "pos": [
        8734,
        8852
      ]
    },
    {
      "content": "Service Bus also uses the channel to take the <bpt id=\"p1\">**</bpt>GetImage<ept id=\"p1\">**</ept> return value and translate it into an HTTP GETRESPONSE for the client browser.",
      "pos": [
        8853,
        8990
      ]
    },
    {
      "pos": [
        8996,
        9090
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept> to confirm the accuracy of your work so far."
    },
    {
      "content": "Example",
      "pos": [
        9096,
        9103
      ]
    },
    {
      "content": "The following code example shows a basic interface that defines a Service Bus contract.",
      "pos": [
        9105,
        9192
      ]
    },
    {
      "content": "Step 3: Implement a REST-based WCF service contract to use Service Bus",
      "pos": [
        9835,
        9905
      ]
    },
    {
      "content": "Creating a REST-style Service Bus service requires that you first create the contract, which is defined by using an interface.",
      "pos": [
        9907,
        10033
      ]
    },
    {
      "content": "The next step is to implement the interface.",
      "pos": [
        10034,
        10078
      ]
    },
    {
      "content": "This involves creating a class named <bpt id=\"p1\">**</bpt>ImageService<ept id=\"p1\">**</ept> that implements the user-defined <bpt id=\"p2\">**</bpt>IImageContract<ept id=\"p2\">**</ept> interface.",
      "pos": [
        10079,
        10195
      ]
    },
    {
      "content": "After you implement the contract, you then configure the interface using an App.config file.",
      "pos": [
        10196,
        10288
      ]
    },
    {
      "content": "The configuration file contains necessary information for the application, such as the name of the service, the name of the contract, and the type of protocol that is used to communicate with Service Bus.",
      "pos": [
        10289,
        10493
      ]
    },
    {
      "content": "The code used for these tasks is provided in the example following the procedure.",
      "pos": [
        10494,
        10575
      ]
    },
    {
      "content": "As with the previous steps, there is very little difference between implementing a REST-style contract and a basic Service Bus contract.",
      "pos": [
        10577,
        10713
      ]
    },
    {
      "content": "To implement a REST-style Service Bus contract",
      "pos": [
        10719,
        10765
      ]
    },
    {
      "content": "Create a new class named <bpt id=\"p1\">**</bpt>ImageService<ept id=\"p1\">**</ept> directly after the definition of the <bpt id=\"p2\">**</bpt>IImageContract<ept id=\"p2\">**</ept> interface.",
      "pos": [
        10770,
        10878
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ImageService<ept id=\"p1\">**</ept> class implements the <bpt id=\"p2\">**</bpt>IImageContract<ept id=\"p2\">**</ept> interface.",
      "pos": [
        10879,
        10950
      ]
    },
    {
      "content": "Similar to other interface implementations, you can implement the definition in a different file.",
      "pos": [
        11025,
        11122
      ]
    },
    {
      "content": "However, for this tutorial, the implementation appears in the same file as the interface definition and <ph id=\"ph1\">`Main()`</ph> method.",
      "pos": [
        11123,
        11243
      ]
    },
    {
      "pos": [
        11248,
        11478
      ],
      "content": "Apply the <bpt id=\"p1\">[</bpt>ServiceBehaviorAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/system.servicemodel.servicebehaviorattribute.aspx)</ept> attribute to the <bpt id=\"p2\">**</bpt>IImageService<ept id=\"p2\">**</ept> class to indicate that the class is an implementation of a WCF contract."
    },
    {
      "content": "As mentioned previously, this namespace is not a traditional namespace.",
      "pos": [
        11663,
        11734
      ]
    },
    {
      "content": "Instead, it is part of the WCF architecture that identifies the contract.",
      "pos": [
        11735,
        11808
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt>Data Contract Names<ept id=\"p1\">](https://msdn.microsoft.com/library/ms731045.aspx)</ept> topic in the WCF documentation.",
      "pos": [
        11809,
        11942
      ]
    },
    {
      "content": "Add a .jpg image to your project.",
      "pos": [
        11947,
        11980
      ]
    },
    {
      "content": "This is a picture that the service displays in the receiving browser.",
      "pos": [
        11988,
        12057
      ]
    },
    {
      "content": "Right-click your project, then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>.",
      "pos": [
        12058,
        12103
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Existing Item<ept id=\"p1\">**</ept>.",
      "pos": [
        12104,
        12133
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>Add Existing Item<ept id=\"p1\">**</ept> dialog box to browse to an appropriate .jpg, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.",
      "pos": [
        12134,
        12232
      ]
    },
    {
      "content": "When adding the file, make sure that <bpt id=\"p1\">**</bpt>All Files<ept id=\"p1\">**</ept> is selected in the drop-down list next to the <bpt id=\"p2\">**</bpt>File name:<ept id=\"p2\">**</ept> field.",
      "pos": [
        12238,
        12356
      ]
    },
    {
      "content": "The rest of this tutorial assumes that the name of the image is \"image.jpg\".",
      "pos": [
        12357,
        12433
      ]
    },
    {
      "content": "If you have a different file, you will have to rename the image, or change your code to compensate.",
      "pos": [
        12434,
        12533
      ]
    },
    {
      "content": "To make sure that the running service can find the image file, in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> right-click the image file.",
      "pos": [
        12538,
        12653
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> pane, set <bpt id=\"p2\">**</bpt>Copy to Output Directory<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Copy if newer<ept id=\"p3\">**</ept>.",
      "pos": [
        12654,
        12736
      ]
    },
    {
      "pos": [
        12741,
        12942
      ],
      "content": "Add references to the <bpt id=\"p1\">**</bpt>System.Drawing.dll<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>System.Runtime.Serialization.dll<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Microsoft.ServiceBus.dll<ept id=\"p3\">**</ept> assemblies to the project, and also add the following associated <ph id=\"ph1\">`using`</ph> statements."
    },
    {
      "pos": [
        13095,
        13224
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>ImageService<ept id=\"p1\">**</ept> class, add the following constructor that loads the bitmap and prepares to send it to the client browser."
    },
    {
      "pos": [
        13480,
        13632
      ],
      "content": "Directly after the previous code, add the following <bpt id=\"p1\">**</bpt>GetImage<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>ImageService<ept id=\"p2\">**</ept> class to return an HTTP message that contains the image."
    },
    {
      "content": "This implementation uses <bpt id=\"p1\">**</bpt>MemoryStream<ept id=\"p1\">**</ept> to retrieve the image and prepare it for streaming to the browser.",
      "pos": [
        13934,
        14042
      ]
    },
    {
      "content": "It starts the stream position at zero, declares the stream content as a jpeg, and streams the information.",
      "pos": [
        14043,
        14149
      ]
    },
    {
      "pos": [
        14154,
        14204
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>."
    },
    {
      "content": "To define the configuration for running the web service on Service Bus",
      "pos": [
        14210,
        14280
      ]
    },
    {
      "content": "Right-click the <bpt id=\"p1\">**</bpt>ImageListener<ept id=\"p1\">**</ept> project.",
      "pos": [
        14285,
        14327
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, then <bpt id=\"p2\">**</bpt>New Item<ept id=\"p2\">**</ept>.",
      "pos": [
        14328,
        14366
      ]
    },
    {
      "pos": [
        14371,
        14478
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, double-click <bpt id=\"p2\">**</bpt>App.config<ept id=\"p2\">**</ept>, which currently contains the following XML elements."
    },
    {
      "content": "The configuration file resembles a WCF configuration file, and includes the service name, endpoint (that is, the location Service Bus exposes for clients and hosts to communicate with each other), and binding (the type of protocol that is used to communicate).",
      "pos": [
        14589,
        14849
      ]
    },
    {
      "content": "The main difference here is that the configured service endpoint refers to a <bpt id=\"p1\">[</bpt>WebHttpRelayBinding<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.webhttprelaybinding.aspx)</ept> binding, which is not part of the .NET Framework.",
      "pos": [
        14850,
        15080
      ]
    },
    {
      "content": "For more information about how to configure a Service Bus application, see <bpt id=\"p1\">[</bpt>Configuring a WCF Service to Register with Service Bus<ept id=\"p1\">](https://msdn.microsoft.com/library/ee173579.aspx)</ept>.",
      "pos": [
        15081,
        15263
      ]
    },
    {
      "content": "Add a <ph id=\"ph1\">`&lt;system.serviceModel&gt;`</ph> XML element to the App.config file.",
      "pos": [
        15269,
        15334
      ]
    },
    {
      "content": "This is a WCF element that defines one or more services.",
      "pos": [
        15335,
        15391
      ]
    },
    {
      "content": "Here, it is used to define the service name and endpoint.",
      "pos": [
        15392,
        15449
      ]
    },
    {
      "content": "Within the <ph id=\"ph1\">`system.serviceModel`</ph> element, add a <ph id=\"ph2\">`&lt;bindings&gt;`</ph> element that has the following content.",
      "pos": [
        15622,
        15722
      ]
    },
    {
      "content": "This defines the bindings used in the application.",
      "pos": [
        15723,
        15773
      ]
    },
    {
      "content": "You can define multiple bindings, but for this tutorial you are defining only one.",
      "pos": [
        15774,
        15856
      ]
    },
    {
      "content": "This step defines a Service Bus <bpt id=\"p1\">[</bpt>WebHttpRelayBinding<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.webhttprelaybinding.aspx)</ept> binding with <bpt id=\"p2\">**</bpt>relayClientAuthenticationType<ept id=\"p2\">**</ept> set to <bpt id=\"p3\">**</bpt>None<ept id=\"p3\">**</ept>.",
      "pos": [
        16137,
        16336
      ]
    },
    {
      "content": "This setting indicates that an endpoint using this binding does not require a client credential.",
      "pos": [
        16337,
        16433
      ]
    },
    {
      "content": "After the <ph id=\"ph1\">`&lt;bindings&gt;`</ph> element, add a <ph id=\"ph2\">`&lt;services&gt;`</ph> element.",
      "pos": [
        16438,
        16497
      ]
    },
    {
      "content": "Similar to the bindings, you can define multiple services in a single configuration file.",
      "pos": [
        16498,
        16587
      ]
    },
    {
      "content": "However, for this tutorial, you define only one.",
      "pos": [
        16588,
        16636
      ]
    },
    {
      "content": "This step configures a service that uses the previously defined default <bpt id=\"p1\">**</bpt>webHttpRelayBinding<ept id=\"p1\">**</ept>.",
      "pos": [
        17174,
        17270
      ]
    },
    {
      "content": "It also uses the default <bpt id=\"p1\">**</bpt>sbTokenProvider<ept id=\"p1\">**</ept>, which is defined in the next step.",
      "pos": [
        17271,
        17351
      ]
    },
    {
      "pos": [
        17356,
        17557
      ],
      "content": "After the <ph id=\"ph1\">`&lt;services&gt;`</ph> element, create a <ph id=\"ph2\">`&lt;behaviors&gt;`</ph> element with the following content, replacing \"SAS_KEY\" with the <bpt id=\"p1\">*</bpt>Shared Access Signature<ept id=\"p1\">*</ept> (SAS) key you obtained from the Azure portal in Step 1."
    },
    {
      "pos": [
        18247,
        18326
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept> to build the entire solution."
    },
    {
      "content": "Example",
      "pos": [
        18332,
        18339
      ]
    },
    {
      "pos": [
        18341,
        18505
      ],
      "content": "The following code shows the contract and service implementation for a REST-based service that is running on  Service Bus using the <bpt id=\"p1\">**</bpt>WebHttpRelayBinding<ept id=\"p1\">**</ept> binding."
    },
    {
      "content": "The following example shows the App.config file associated with the service.",
      "pos": [
        19911,
        19987
      ]
    },
    {
      "content": "Step 4: Host the REST-based WCF service to use Service Bus",
      "pos": [
        21558,
        21616
      ]
    },
    {
      "content": "This step describes how to run a web service using a console application on Service Bus.",
      "pos": [
        21618,
        21706
      ]
    },
    {
      "content": "A complete listing of the code written in this step is provided in the example following the procedure.",
      "pos": [
        21707,
        21810
      ]
    },
    {
      "content": "To create a base address for the service",
      "pos": [
        21816,
        21856
      ]
    },
    {
      "pos": [
        21861,
        21968
      ],
      "content": "In the <ph id=\"ph1\">`Main()`</ph> function declaration, create a variable to store the namespace of your Service Bus project."
    },
    {
      "content": "Service Bus uses the name of your namespace to create a unique URI.",
      "pos": [
        22051,
        22118
      ]
    },
    {
      "pos": [
        22123,
        22214
      ],
      "content": "Create a <ph id=\"ph1\">`Uri`</ph> instance for the base address of the service that is based on the namespace."
    },
    {
      "content": "To create and configure the web service host",
      "pos": [
        22332,
        22376
      ]
    },
    {
      "content": "Create the web service host, using the URI address created earlier in this section.",
      "pos": [
        22380,
        22463
      ]
    },
    {
      "content": "The service host is the WCF object that instantiates the host application.",
      "pos": [
        22563,
        22637
      ]
    },
    {
      "content": "This example passes it the type of host you want to create (an <bpt id=\"p1\">**</bpt>ImageService<ept id=\"p1\">**</ept>), and also the address at which you want to expose the host application.",
      "pos": [
        22638,
        22790
      ]
    },
    {
      "content": "To run the web service host",
      "pos": [
        22796,
        22823
      ]
    },
    {
      "content": "Open the service.",
      "pos": [
        22828,
        22845
      ]
    },
    {
      "content": "The service is now running.",
      "pos": [
        22885,
        22912
      ]
    },
    {
      "content": "Display a message indicating that the service is running, and how to stop the service.",
      "pos": [
        22917,
        23003
      ]
    },
    {
      "content": "When finished, close the service host.",
      "pos": [
        23255,
        23293
      ]
    },
    {
      "content": "Example",
      "pos": [
        23334,
        23341
      ]
    },
    {
      "content": "The following example includes the service contract and implementation from previous steps in the tutorial and hosts the service in a console application.",
      "pos": [
        23343,
        23497
      ]
    },
    {
      "content": "Compile the following code into an executable named ImageListener.exe.",
      "pos": [
        23498,
        23568
      ]
    },
    {
      "content": "Compiling the code",
      "pos": [
        25555,
        25573
      ]
    },
    {
      "content": "After building the solution, do the following to run the application:",
      "pos": [
        25575,
        25644
      ]
    },
    {
      "content": "From a command prompt, run the service (ImageListener\\bin\\Debug\\ImageListener.exe).",
      "pos": [
        25649,
        25732
      ]
    },
    {
      "content": "Copy and paste the address from the command prompt into a browser to see the image.",
      "pos": [
        25737,
        25820
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        25825,
        25835
      ]
    },
    {
      "content": "Now that you've built an application that uses the Service Bus relay service, see the following articles to learn more about relayed messaging:",
      "pos": [
        25837,
        25980
      ]
    },
    {
      "content": "Azure Service Bus architectural overview",
      "pos": [
        25985,
        26025
      ]
    },
    {
      "content": "How to Use the Service Bus Relay Service",
      "pos": [
        26084,
        26124
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Service Bus REST tutorial | Microsoft Azure\"\n   description=\"Build a simple Service Bus host application that exposes a REST-based interface.\"\n   services=\"service-bus\"\n   documentationCenter=\"na\"\n   authors=\"sethmanheim\"\n   manager=\"timlt\"\n   editor=\"\" />\n<tags\n   ms.service=\"service-bus\"\n   ms.devlang=\"na\"\n   ms.topic=\"get-started-article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"tbd\"\n   ms.date=\"07/07/2015\"\n   ms.author=\"sethm\" />\n\n# Service Bus REST tutorial\n\nThis tutorial describes how to build a simple Service Bus host application that exposes a REST-based interface. REST enables a web client, such as a web browser, to access the Service Bus API through HTTP requests.\n\nThis tutorial uses the Windows Communication Foundation (WCF) REST programming model to construct a REST service on Service Bus. For more information, see [WCF REST Programming Model](https://msdn.microsoft.com/library/bb412169.aspx) and [Designing and Implementing Services](https://msdn.microsoft.com/library/ms729746.aspx) in the WCF documentation.\n\n## Step 1: Sign up for an Azure account\n\nThe first step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key. A service namespace provides an application boundary for each application exposed through Service Bus. A SAS key is automatically generated by the system when a service namespace is created. The combination of service namespace and SAS key provides the credentials for Service Bus to authenticate access to an application.\n\n### To create a service namespace and obtain a SAS key\n\n1. To create a namespace in the Azure portal, follow the steps in [How To: Create or Modify a Service Bus Service Namespace](https://msdn.microsoft.com/library/hh690931.aspx).\n\n2. In the main window of the Azure portal, click the name of the service namespace you created in the previous step.\n\n3. Click **Configure** to view the shared access policies for the namespace.\n\n4. Make a note of the primary key for the **RootManageSharedAccessKey** policy, or copy it to the clipboard. You will use this value later in the tutorial.\n\n## Step 2: Define a REST-based WCF service contract to use with Service Bus\n\nAs with other Service Bus services, when you create a REST-style service, you must define the contract. The contract specifies what operations the host supports. A service operation can be thought of as a web service method. Contracts are created by defining a C++, C#, or Visual Basic interface. Each method in the interface corresponds to a specific service operation. The [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) attribute must be applied to each interface, and the [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx) attribute must be applied to each operation. If a method in an interface that has the [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) does not have the [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx), that method is not exposed. The code used for these tasks is shown in the example following the procedure.\n\nThe primary difference between a basic Service Bus contract and a REST-style contract is the addition of a property to the [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx): [WebGetAttribute](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx). This property enables you to map a method in your interface to a method on the other side of the interface. In this case, we will use [WebGetAttribute](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx) to link a method to HTTP GET. This allows Service Bus to accurately retrieve and interpret commands sent to the interface.\n\n### To create a Service Bus contract with an interface\n\n1. Open Visual Studio as an administrator: right-click the program in the **Start** menu, and then click **Run as administrator**.\n\n2. Create a new console application project. Click the **File** menu and select **New**, then select **Project**. In the **New Project** dialog box, click **Visual C#** (if **Visual C#** does not appear, look under **Other Languages**), select the **Console Application** template, and name it **ImageListener**. Use the default **Location**. Click **OK** to create the project.\n\n3. For a C# project, Visual Studio creates a `Program.cs` file. This class contains an empty `Main()` method, required for a console application project to build correctly.\n\n4. Add a reference to **System.ServiceModel.dll** to the project:\n\n    a. In **Solution Explorer**, right-click the **References** folder under the project folder and then click **Add Reference**.\n\n    b. Click the **.NET** tab in the **Add Reference** dialog box and scroll down until you see **System.ServiceModel**. Select it, then click **OK**.\n\n5. Repeat the previous step to add a reference to the **System.ServiceModel.Web.dll** assembly.\n\n6. Add `using` statements for the **System.ServiceModel**, **System.ServiceModel.Channels**, **System.ServiceModel.Web**, and **System.IO** namespaces.\n\n    ```c\n    using System.ServiceModel;\n    using System.ServiceModel.Channels;\n    using System.ServiceModel.Web;\n    using System.IO;\n    ```\n\n    [System.ServiceModel](https://msdn.microsoft.com/library/system.servicemodel.aspx) is the namespace that enables programmatic access to basic features of WCF. Service Bus uses many of the objects and attributes of WCF to define service contracts. You will use this namespace in most of your Service Bus relay applications. Similarly, [System.ServiceModel.Channels](https://msdn.microsoft.com/en-us/library/system.servicemodel.channels.aspx) helps define the channel, which is the object through which you communicate with Service Bus and the client web browser. Finally, [System.ServiceModel.Web](https://msdn.microsoft.com/library/system.servicemodel.web.aspx) contains the types that enable you to create web-based applications.\n\n7. Rename the namespace for the program from the Visual Studio default to **Microsoft.ServiceBus.Samples**.\n\n    ```c\n    namespace Microsoft.ServiceBus.Samples\n    {\n        ...\n    ```\n\n8. Directly after the namespace declaration, define a new interface named **IImageContract** and apply the **ServiceContractAttribute** attribute to the interface with a value of `http://samples.microsoft.com/ServiceModel/Relay/`. The namespace value differs from the namespace that you use throughout the scope of your code. The namespace value is used as a unique identifier for this contract, and should have version information. For more information, see [Service Versioning](http://go.microsoft.com/fwlink/?LinkID=180498). Specifying the namespace explicitly prevents the default namespace value from being added to the contract name.\n\n    ```c\n    [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/RESTTutorial1\")]\n    public interface IImageContract\n    {\n    }\n    ```\n\n9. Within the `IImageContract` interface, declare a method for the single operation the `IImageContract` contract exposes in the interface and apply the `OperationContractAttribute` attribute to the method that you want to expose as part of the public Service Bus contract.\n\n    ```c\n    public interface IImageContract\n    {\n        [OperationContract]\n        Stream GetImage();\n    }\n    ```\n\n10. Next to the **OperationContract** attribute, apply the **WebGet** attribute.\n\n    ```c\n    public interface IImageContract\n    {\n        [OperationContract, WebGet]\n        Stream GetImage();\n    }\n    ```\n\n    Doing so enables Service Bus to route HTTP GET requests to **GetImage**, and to translate the return values of **GetImage** into an HTTP GETRESPONSE reply. Later in the tutorial, you will use a web browser to access this method, and to display the image in the browser.\n\n11. Directly after the `IImageContract` definition, declare a channel that inherits from both the `IImageContract` and `IClientChannel` interfaces.\n\n    ```c\n    [ServiceContract(Name = \"IImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IImageContract\n    {\n        [OperationContract, WebGet]\n        Stream GetImage();\n    }\n\n    public interface IImageChannel : IImageContract, IClientChannel { }\n    ```\n\n    A channel is the WCF object through which the service and client pass information to each other. Later, you will create the channel in your host application. Service Bus then uses this channel to pass the HTTP GET requests from the browser to your **GetImage** implementation. Service Bus also uses the channel to take the **GetImage** return value and translate it into an HTTP GETRESPONSE for the client browser.\n\n12. From the **Build** menu, click **Build Solution** to confirm the accuracy of your work so far.\n\n### Example\n\nThe following code example shows a basic interface that defines a Service Bus contract.\n\n```c\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Web;\nusing System.IO;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n\n    [ServiceContract(Name = \"IImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IImageContract\n    {\n        [OperationContract, WebGet]\n        Stream GetImage();\n    }\n\n    public interface IImageChannel : IImageContract, IClientChannel { }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        }\n    }\n}\n```\n\n## Step 3: Implement a REST-based WCF service contract to use Service Bus\n\nCreating a REST-style Service Bus service requires that you first create the contract, which is defined by using an interface. The next step is to implement the interface. This involves creating a class named **ImageService** that implements the user-defined **IImageContract** interface. After you implement the contract, you then configure the interface using an App.config file. The configuration file contains necessary information for the application, such as the name of the service, the name of the contract, and the type of protocol that is used to communicate with Service Bus. The code used for these tasks is provided in the example following the procedure.\n\nAs with the previous steps, there is very little difference between implementing a REST-style contract and a basic Service Bus contract.\n\n### To implement a REST-style Service Bus contract\n\n1. Create a new class named **ImageService** directly after the definition of the **IImageContract** interface. The **ImageService** class implements the **IImageContract** interface.\n\n    ```c\n    class ImageService : IImageContract\n    {\n    }\n    ```\n    Similar to other interface implementations, you can implement the definition in a different file. However, for this tutorial, the implementation appears in the same file as the interface definition and `Main()` method.\n\n2. Apply the [ServiceBehaviorAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicebehaviorattribute.aspx) attribute to the **IImageService** class to indicate that the class is an implementation of a WCF contract.\n\n    ```c\n    [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    class ImageService : IImageContract\n    {\n    }\n    ```\n\n    As mentioned previously, this namespace is not a traditional namespace. Instead, it is part of the WCF architecture that identifies the contract. For more information, see the [Data Contract Names](https://msdn.microsoft.com/library/ms731045.aspx) topic in the WCF documentation.\n\n3. Add a .jpg image to your project.  \n\n    This is a picture that the service displays in the receiving browser. Right-click your project, then click **Add**. Then click **Existing Item**. Use the **Add Existing Item** dialog box to browse to an appropriate .jpg, and then click **Add**.\n\n    When adding the file, make sure that **All Files** is selected in the drop-down list next to the **File name:** field. The rest of this tutorial assumes that the name of the image is \"image.jpg\". If you have a different file, you will have to rename the image, or change your code to compensate.\n\n4. To make sure that the running service can find the image file, in **Solution Explorer** right-click the image file. In the **Properties** pane, set **Copy to Output Directory** to **Copy if newer**.\n\n5. Add references to the **System.Drawing.dll**, **System.Runtime.Serialization.dll**, and **Microsoft.ServiceBus.dll** assemblies to the project, and also add the following associated `using` statements.  \n\n    ```c\n    using System.Drawing;\n    using System.Drawing.Imaging;\n    using Microsoft.ServiceBus;\n    using Microsoft.ServiceBus.Web;\n    ```\n\n6. In the **ImageService** class, add the following constructor that loads the bitmap and prepares to send it to the client browser.\n\n    ```c\n    class ImageService : IImageContract\n    {\n        const string imageFileName = \"image.jpg\";\n\n        Image bitmap;\n\n        public ImageService()\n        {\n            this.bitmap = Image.FromFile(imageFileName);\n        }\n    }\n    ```\n\n7. Directly after the previous code, add the following **GetImage** method in the **ImageService** class to return an HTTP message that contains the image.\n\n    ```c\n    public Stream GetImage()\n    {\n        MemoryStream stream = new MemoryStream();\n        this.bitmap.Save(stream, ImageFormat.Jpeg);\n\n        stream.Position = 0;\n        WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\n\n        return stream;\n    }\n    ```\n\n    This implementation uses **MemoryStream** to retrieve the image and prepare it for streaming to the browser. It starts the stream position at zero, declares the stream content as a jpeg, and streams the information.\n\n8. From the **Build** menu, click **Build Solution**.\n\n### To define the configuration for running the web service on Service Bus\n\n1. Right-click the **ImageListener** project. Then click **Add**, then **New Item**.\n\n2. In **Solution Explorer**, double-click **App.config**, which currently contains the following XML elements.\n\n    ```xml\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n    </configuration>\n    ```\n\n    The configuration file resembles a WCF configuration file, and includes the service name, endpoint (that is, the location Service Bus exposes for clients and hosts to communicate with each other), and binding (the type of protocol that is used to communicate). The main difference here is that the configured service endpoint refers to a [WebHttpRelayBinding](https://msdn.microsoft.com/library/microsoft.servicebus.webhttprelaybinding.aspx) binding, which is not part of the .NET Framework. For more information about how to configure a Service Bus application, see [Configuring a WCF Service to Register with Service Bus](https://msdn.microsoft.com/library/ee173579.aspx).\n\n\n3. Add a `<system.serviceModel>` XML element to the App.config file. This is a WCF element that defines one or more services. Here, it is used to define the service name and endpoint.\n\n    ```xml\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n        <system.serviceModel>\n\n        </system.serviceModel>\n\n    </configuration>\n    ```\n\n4. Within the `system.serviceModel` element, add a `<bindings>` element that has the following content. This defines the bindings used in the application. You can define multiple bindings, but for this tutorial you are defining only one.\n\n    ```xml\n    <bindings>\n        <!-- Application Binding -->\n        <webHttpRelayBinding>\n            <binding name=\"default\">\n                <security relayClientAuthenticationType=\"None\" />\n            </binding>\n        </webHttpRelayBinding>\n    </bindings>\n    ```\n\n    This step defines a Service Bus [WebHttpRelayBinding](https://msdn.microsoft.com/library/microsoft.servicebus.webhttprelaybinding.aspx) binding with **relayClientAuthenticationType** set to **None**. This setting indicates that an endpoint using this binding does not require a client credential.\n\n5. After the `<bindings>` element, add a `<services>` element. Similar to the bindings, you can define multiple services in a single configuration file. However, for this tutorial, you define only one.\n\n    ```xml\n    <services>\n        <!-- Application Service -->\n        <service name=\"Microsoft.ServiceBus.Samples.ImageService\"\n             behaviorConfiguration=\"default\">\n            <endpoint name=\"RelayEndpoint\"\n                    contract=\"Microsoft.ServiceBus.Samples.IImageContract\"\n                    binding=\"webHttpRelayBinding\"\n                    bindingConfiguration=\"default\"\n                    behaviorConfiguration=\"sbTokenProvider\"\n                    address=\"\" />\n        </service>\n    </services>\n    ```\n\n    This step configures a service that uses the previously defined default **webHttpRelayBinding**. It also uses the default **sbTokenProvider**, which is defined in the next step.\n\n6. After the `<services>` element, create a `<behaviors>` element with the following content, replacing \"SAS_KEY\" with the *Shared Access Signature* (SAS) key you obtained from the Azure portal in Step 1.\n\n    ```xml\n    <behaviors>\n        <endpointBehaviors>\n            <behavior name=\"sbTokenProvider\">\n                <transportClientEndpointBehavior>\n                    <tokenProvider>\n                        <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"SAS_KEY\" />\n                    </tokenProvider>\n                </transportClientEndpointBehavior>\n            </behavior>\n            </endpointBehaviors>\n            <serviceBehaviors>\n                <behavior name=\"default\">\n                    <serviceDebug httpHelpPageEnabled=\"false\" httpsHelpPageEnabled=\"false\" />\n                </behavior>\n            </serviceBehaviors>\n    </behaviors>\n    ```\n\n7. From the **Build** menu, click **Build Solution** to build the entire solution.\n\n### Example\n\nThe following code shows the contract and service implementation for a REST-based service that is running on  Service Bus using the **WebHttpRelayBinding** binding.\n\n```c\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Web;\nusing System.IO;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing Microsoft.ServiceBus;\nusing Microsoft.ServiceBus.Web;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n\n\n    [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IImageContract\n    {\n        [OperationContract, WebGet]\n        Stream GetImage();\n    }\n\n    public interface IImageChannel : IImageContract, IClientChannel { }\n\n    [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    class ImageService : IImageContract\n    {\n        const string imageFileName = \"image.jpg\";\n\n        Image bitmap;\n\n        public ImageService()\n        {\n            this.bitmap = Image.FromFile(imageFileName);\n        }\n\n        public Stream GetImage()\n        {\n            MemoryStream stream = new MemoryStream();\n            this.bitmap.Save(stream, ImageFormat.Jpeg);\n\n            stream.Position = 0;\n            WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\n\n            return stream;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        }\n    }\n}\n```\n\nThe following example shows the App.config file associated with the service.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.serviceModel>\n    <bindings>\n      <!-- Application Binding -->\n      <webHttpRelayBinding>\n        <binding name=\"default\">\n          <!-- Turn off client authentication so that client does not need to present credential through browser or fiddler -->\n          <security relayClientAuthenticationType=\"None\" />\n        </binding>\n      </webHttpRelayBinding>\n    </bindings>\n\n    <services>\n      <!-- Application Service -->\n      <service name=\"Microsoft.ServiceBus.Samples.ImageService\"\n               behaviorConfiguration=\"default\">\n        <endpoint name=\"RelayEndpoint\"\n                  contract=\"Microsoft.ServiceBus.Samples.IImageContract\"\n                  binding=\"webHttpRelayBinding\"\n                  bindingConfiguration=\"default\"\n                  behaviorConfiguration=\"sbTokenProvider\"\n                  address=\"\" />\n      </service>\n    </services>\n\n    <behaviors>\n      <endpointBehaviors>\n        <behavior name=\"sbTokenProvider\">\n          <transportClientEndpointBehavior>\n            <tokenProvider>\n              <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"SAS_KEY\" />\n            </tokenProvider>\n          <transportClientEndpointBehavior>\n        </behavior>\n      </endpointBehaviors>\n      <serviceBehaviors>\n        <behavior name=\"default\">\n          <serviceDebug httpHelpPageEnabled=\"false\" httpsHelpPageEnabled=\"false\" />\n        </behavior>\n      </serviceBehaviors>\n    </behaviors>\n\n  </system.serviceModel>\n</configuration>\n```\n\n## Step 4: Host the REST-based WCF service to use Service Bus\n\nThis step describes how to run a web service using a console application on Service Bus. A complete listing of the code written in this step is provided in the example following the procedure.\n\n### To create a base address for the service\n\n1. In the `Main()` function declaration, create a variable to store the namespace of your Service Bus project.\n\n    ```c\n    string serviceNamespace = \"InsertServiceNamespaceHere\";\n    ```\n    Service Bus uses the name of your namespace to create a unique URI.\n\n2. Create a `Uri` instance for the base address of the service that is based on the namespace.\n\n    ```c\n    Uri address = ServiceBusEnvironment.CreateServiceUri(\"https\", serviceNamespace, \"Image\");\n    ```\n\n### To create and configure the web service host\n\n- Create the web service host, using the URI address created earlier in this section.\n\n    ```c\n    WebServiceHost host = new WebServiceHost(typeof(ImageService), address);\n    ```\n    The service host is the WCF object that instantiates the host application. This example passes it the type of host you want to create (an **ImageService**), and also the address at which you want to expose the host application.\n\n### To run the web service host\n\n1. Open the service.\n\n    ```c\n    host.Open();\n    ```\n    The service is now running.\n\n2. Display a message indicating that the service is running, and how to stop the service.\n\n    ```c\n    Console.WriteLine(\"Copy the following address into a browser to see the image: \");\n    Console.WriteLine(address + \"GetImage\");\n    Console.WriteLine();\n    Console.WriteLine(\"Press [Enter] to exit\");\n    Console.ReadLine();\n    ```\n\n3. When finished, close the service host.\n\n    ```c\n    host.Close();\n    ```\n\n## Example\n\nThe following example includes the service contract and implementation from previous steps in the tutorial and hosts the service in a console application. Compile the following code into an executable named ImageListener.exe.\n\n```c\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Web;\nusing System.IO;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing Microsoft.ServiceBus;\nusing Microsoft.ServiceBus.Web;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n\n    [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IImageContract\n    {\n        [OperationContract, WebGet]\n        Stream GetImage();\n    }\n\n    public interface IImageChannel : IImageContract, IClientChannel { }\n\n    [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    class ImageService : IImageContract\n    {\n        const string imageFileName = \"image.jpg\";\n\n        Image bitmap;\n\n        public ImageService()\n        {\n            this.bitmap = Image.FromFile(imageFileName);\n        }\n\n        public Stream GetImage()\n        {\n            MemoryStream stream = new MemoryStream();\n            this.bitmap.Save(stream, ImageFormat.Jpeg);\n\n            stream.Position = 0;\n            WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\n\n            return stream;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string serviceNamespace = \"InsertServiceNamespaceHere\";\n            Uri address = ServiceBusEnvironment.CreateServiceUri(\"https\", serviceNamespace, \"Image\");\n\n            WebServiceHost host = new WebServiceHost(typeof(ImageService), address);\n            host.Open();\n\n            Console.WriteLine(\"Copy the following address into a browser to see the image: \");\n            Console.WriteLine(address + \"GetImage\");\n            Console.WriteLine();\n            Console.WriteLine(\"Press [Enter] to exit\");\n            Console.ReadLine();\n\n            host.Close();\n        }\n    }\n}\n```\n\n### Compiling the code\n\nAfter building the solution, do the following to run the application:\n\n1. From a command prompt, run the service (ImageListener\\bin\\Debug\\ImageListener.exe).\n\n2. Copy and paste the address from the command prompt into a browser to see the image.\n\n## Next steps\n\nNow that you've built an application that uses the Service Bus relay service, see the following articles to learn more about relayed messaging:\n\n- [Azure Service Bus architectural overview](fundamentals-service-bus-hybrid-solutions.md#relays)\n\n- [How to Use the Service Bus Relay Service](service-bus-dotnet-how-to-use-relay.md)\n"
}