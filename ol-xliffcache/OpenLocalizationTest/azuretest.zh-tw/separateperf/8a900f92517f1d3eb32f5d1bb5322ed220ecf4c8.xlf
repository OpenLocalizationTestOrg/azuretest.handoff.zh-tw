<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deploy an existing application in Azure Service Fabric</source>
          <target state="new">Deploy an existing application in Azure Service Fabric</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough on how to package an existing application so it can be deployed on an Azure Service Fabric cluster</source>
          <target state="new">Walkthrough on how to package an existing application so it can be deployed on an Azure Service Fabric cluster</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Deploy an existing application in Azure Service Fabric</source>
          <target state="new">Deploy an existing application in Azure Service Fabric</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure Service Fabric can be used to deploy existing applications.</source>
          <target state="new">Azure Service Fabric can be used to deploy existing applications.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Applications that currently runs on, for instance, an Azure Web or Worker role, can be 'packaged' so that they can be deployed on an Service Fabric cluster.</source>
          <target state="new">Applications that currently runs on, for instance, an Azure Web or Worker role, can be 'packaged' so that they can be deployed on an Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Existing applications running on a Service Fabric cluster can benefit from features such as health monitoring and ALM (Application Lifecycle Management) so it is an important scenario that is fully supported.</source>
          <target state="new">Existing applications running on a Service Fabric cluster can benefit from features such as health monitoring and ALM (Application Lifecycle Management) so it is an important scenario that is fully supported.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tutorial explains the process and basic concepts that are involved with taking an existing application and package it.</source>
          <target state="new">This tutorial explains the process and basic concepts that are involved with taking an existing application and package it.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This article that is an overview of the process, we will follow up with specific examples on how to take an existing applications (for instance a node.js or Java) app and package it so it can be hosted on a Service Fabric cluster.</source>
          <target state="new">This article that is an overview of the process, we will follow up with specific examples on how to take an existing applications (for instance a node.js or Java) app and package it so it can be hosted on a Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Quick overview of Application and Service manifest files</source>
          <target state="new">Quick overview of Application and Service manifest files</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Before we can start and learn how to package an existing application, we need to go through an brief introduction of the Service Fabric's deployment model.</source>
          <target state="new">Before we can start and learn how to package an existing application, we need to go through an brief introduction of the Service Fabric's deployment model.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Service Fabric deployment model relies mainly on two files:</source>
          <target state="new">Service Fabric deployment model relies mainly on two files:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Application Manifest.</source>
          <target state="new">Application Manifest.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The application manifest is used to describe the application and lists the services that compose it plus other parameters,  such as the number of instances, that are used to define how the service(s) should be deployed.In the Service Fabric world,  an application is the 'upgradable unit'.</source>
          <target state="new">The application manifest is used to describe the application and lists the services that compose it plus other parameters,  such as the number of instances, that are used to define how the service(s) should be deployed.In the Service Fabric world,  an application is the 'upgradable unit'.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An application can be upgraded as a single unit where potential failures (and potential rollbacks) are managed by the platform to guarantee that the upgrade process either completely success or, if it fails, it does not leave the application is an unknown/unstable state.</source>
          <target state="new">An application can be upgraded as a single unit where potential failures (and potential rollbacks) are managed by the platform to guarantee that the upgrade process either completely success or, if it fails, it does not leave the application is an unknown/unstable state.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is an example of an application manifest:</source>
          <target state="new">This is an example of an application manifest:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Service Manifest.</source>
          <target state="new">Service Manifest.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service Manifest describes the components of a service.</source>
          <target state="new">Service Manifest describes the components of a service.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It includes data such as name and type of the service (information that Service Fabric uses to manage the service), its code, configuration and data components plus some additional parameters that can be used to configure the service once it is deployed.</source>
          <target state="new">It includes data such as name and type of the service (information that Service Fabric uses to manage the service), its code, configuration and data components plus some additional parameters that can be used to configure the service once it is deployed.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We are not going into the details of all the different parameters available in the service manifest, we will go through the subset that is required to make an existing application to run on Service Fabric</source>
          <target state="new">We are not going into the details of all the different parameters available in the service manifest, we will go through the subset that is required to make an existing application to run on Service Fabric</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is an example of a service manifest</source>
          <target state="new">This is an example of a service manifest</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Application Package file structure</source>
          <target state="new">Application Package file structure</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In order to deploy an application using, for instance, the powershell cmdlets, the application needs to follow a predefined directory structure.</source>
          <target state="new">In order to deploy an application using, for instance, the powershell cmdlets, the application needs to follow a predefined directory structure.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\applicationmanifest.xml</source>
          <target state="new">\applicationmanifest.xml</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>\MyServicePkg</source>
          <target state="new">\MyServicePkg</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>\servicemanifest.xml</source>
          <target state="new">\servicemanifest.xml</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\code</source>
          <target state="new">\code</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>\config</source>
          <target state="new">\config</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>\data</source>
          <target state="new">\data</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The root contains the applicationmanifest.xml file that defines the application.</source>
          <target state="new">The root contains the applicationmanifest.xml file that defines the application.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A subdirectory for each service included in the application is used to contain all the artifacts that the service requires: The servicemanifest.xml and, typically 3 directories:</source>
          <target state="new">A subdirectory for each service included in the application is used to contain all the artifacts that the service requires: The servicemanifest.xml and, typically 3 directories:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>code: contains the service code</source>
          <target state="new">code: contains the service code</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>config: contains a settings.xml file (and other files if necessary) that the service can access at runtime to retrieve specific configuration settings.</source>
          <target state="new">config: contains a settings.xml file (and other files if necessary) that the service can access at runtime to retrieve specific configuration settings.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data: an additional directory to store additional local data that service may need.</source>
          <target state="new">Data: an additional directory to store additional local data that service may need.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note: Data should be used to store only ephymeral data, Service Fabric does not copy/replicate changes to the data directory if the service needs to be relocated, for instance, during failover.</source>
          <target state="new">Note: Data should be used to store only ephymeral data, Service Fabric does not copy/replicate changes to the data directory if the service needs to be relocated, for instance, during failover.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note: You can use any arbitrary directory name for Code, Config and Data.</source>
          <target state="new">Note: You can use any arbitrary directory name for Code, Config and Data.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You should need to make sure to use the same value in the ApplicationManifest file.</source>
          <target state="new">You should need to make sure to use the same value in the ApplicationManifest file.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>the process of packaging an existing app</source>
          <target state="new">the process of packaging an existing app</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The process of packaging an existing application is based on the following steps:</source>
          <target state="new">The process of packaging an existing application is based on the following steps:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Create the package directory structure</source>
          <target state="new">Create the package directory structure</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add application's code and configuration files</source>
          <target state="new">Add application's code and configuration files</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>update the service manifest file</source>
          <target state="new">update the service manifest file</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>update the application manifest</source>
          <target state="new">update the application manifest</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Create the package directory structure</source>
          <target state="new">Create the package directory structure</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can start by creating the directory structure as described above.</source>
          <target state="new">You can start by creating the directory structure as described above.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>I created a directory and copied the application and service manifest from an existing project that I previously had created in Visual Studio.</source>
          <target state="new">I created a directory and copied the application and service manifest from an existing project that I previously had created in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>![][1] ![][2]</source>
          <target state="new">![][1] ![][2]</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the application's code and configuration files</source>
          <target state="new">Add the application's code and configuration files</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After you have created the directory structure, you can add the application's code and configuration files under the Code and Config directory.</source>
          <target state="new">After you have created the directory structure, you can add the application's code and configuration files under the Code and Config directory.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also create additional directories or sub directories under the Code or Config directories.</source>
          <target state="new">You can also create additional directories or sub directories under the Code or Config directories.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Service Fabric does an xcopy of the content of the application root directory so there is no predefined structure to use other than creating two top directories Code and Settings (but you can pick different names if you want, more details in the next section).</source>
          <target state="new">Service Fabric does an xcopy of the content of the application root directory so there is no predefined structure to use other than creating two top directories Code and Settings (but you can pick different names if you want, more details in the next section).</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>!Azure Note: Make sure that you include all the files/dependencies that the application needs.</source>
          <target state="new">!Azure Note: Make sure that you include all the files/dependencies that the application needs.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Service Fabric will copy the content of the application package on all nodes in the cluster where the application's services are going to be deployed.</source>
          <target state="new">Service Fabric will copy the content of the application package on all nodes in the cluster where the application's services are going to be deployed.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The package should contain all the code that the application needs in order to run.</source>
          <target state="new">The package should contain all the code that the application needs in order to run.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It is not recommended to assume that the dependencies are already installed.</source>
          <target state="new">It is not recommended to assume that the dependencies are already installed.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Edit the Service Manifest file</source>
          <target state="new">Edit the Service Manifest file</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The next step is to edit the Service Manifest file to include the following information:</source>
          <target state="new">The next step is to edit the Service Manifest file to include the following information:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The name of the service type.</source>
          <target state="new">The name of the service type.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is an 'Id' that Service Fabric uses in order to identify a service</source>
          <target state="new">This is an 'Id' that Service Fabric uses in order to identify a service</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The command to use to launch the application (ExeHost)</source>
          <target state="new">The command to use to launch the application (ExeHost)</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Any script that needs to be run in order to setup/configure the application (SetupEntrypoint</source>
          <target state="new">Any script that needs to be run in order to setup/configure the application (SetupEntrypoint</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is an example of a <ph id="ph1">`servicemanifest.xnml`</ph> file that 'packages' a node.js application:</source>
          <target state="new">This is an example of a <ph id="ph1">`servicemanifest.xnml`</ph> file that 'packages' a node.js application:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Let's go over the different part of the file that you need to update:</source>
          <target state="new">Let's go over the different part of the file that you need to update:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ServiceTypes:</source>
          <target state="new">ServiceTypes:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You can pick any name that you want for <ph id="ph1">`ServiceTypeName`</ph>, the value is used in the <ph id="ph2">`applicationmanifest.xml`</ph> to identify the service.</source>
          <target state="new">You can pick any name that you want for <ph id="ph1">`ServiceTypeName`</ph>, the value is used in the <ph id="ph2">`applicationmanifest.xml`</ph> to identify the service.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You need to specify <ph id="ph1">`UserImplicitHost = "true"`</ph>.</source>
          <target state="new">You need to specify <ph id="ph1">`UserImplicitHost = "true"`</ph>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This attribute tells Service Fabric that the service is based on a self-contained app so that it needs to do is just to launch it as a process and monitor its health.</source>
          <target state="new">This attribute tells Service Fabric that the service is based on a self-contained app so that it needs to do is just to launch it as a process and monitor its health.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CodePackage</source>
          <target state="new">CodePackage</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The CodePackage specifies the location (and version) of the service's code.</source>
          <target state="new">The CodePackage specifies the location (and version) of the service's code.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Name`</ph> element is used to specify the name of the directory in the Application Package that contains the service's code.</source>
          <target state="new">The <ph id="ph1">`Name`</ph> element is used to specify the name of the directory in the Application Package that contains the service's code.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CodePackage`</ph> also has the <ph id="ph2">`version`</ph> attribute that can be used to specify the version of the code and, potentially, be used to upgrade the service's code by leveraging Service Fabric's Application LifeCycle Management infrastructure.</source>
          <target state="new"><ph id="ph1">`CodePackage`</ph> also has the <ph id="ph2">`version`</ph> attribute that can be used to specify the version of the code and, potentially, be used to upgrade the service's code by leveraging Service Fabric's Application LifeCycle Management infrastructure.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Entrypoint</source>
          <target state="new">Entrypoint</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Entrypoint`</ph> element in the service manifest file is used to specify how to launch the service.</source>
          <target state="new">The <ph id="ph1">`Entrypoint`</ph> element in the service manifest file is used to specify how to launch the service.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ExeHost`</ph> element specifies the executable (and arguments) that should be used to launch the service.</source>
          <target state="new">The <ph id="ph1">`ExeHost`</ph> element specifies the executable (and arguments) that should be used to launch the service.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program`</ph>:specifies the name of the executable that should be executed in order to start the service.</source>
          <target state="new"><ph id="ph1">`Program`</ph>:specifies the name of the executable that should be executed in order to start the service.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Arguments`</ph>: it specifies the arguments that should be passed to the executable.</source>
          <target state="new"><ph id="ph1">`Arguments`</ph>: it specifies the arguments that should be passed to the executable.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>it can be a list of parameters with arguments.</source>
          <target state="new">it can be a list of parameters with arguments.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WorkingFolder`</ph>: it specifies the working directory for the process that is going to be started.</source>
          <target state="new"><ph id="ph1">`WorkingFolder`</ph>: it specifies the working directory for the process that is going to be started.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can specify two values:</source>
          <target state="new">You can specify two values:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CodeBase`</ph>: the working directory is going to be set to the Code directory in the application package (<ph id="ph2">`Code`</ph> directory in the structure shown below)</source>
          <target state="new"><ph id="ph1">`CodeBase`</ph>: the working directory is going to be set to the Code directory in the application package (<ph id="ph2">`Code`</ph> directory in the structure shown below)</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CodePackage`</ph>: the working directory will be set to the root of the application package   (<ph id="ph2">`MyServicePkg`</ph>)</source>
          <target state="new"><ph id="ph1">`CodePackage`</ph>: the working directory will be set to the root of the application package   (<ph id="ph2">`MyServicePkg`</ph>)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WorkingDirectory`</ph> element is useful to set the correct working directory so relative paths can be used by either the application or initialization scripts.</source>
          <target state="new"><ph id="ph1">`WorkingDirectory`</ph> element is useful to set the correct working directory so relative paths can be used by either the application or initialization scripts.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>There is also another value that you can specify for the <ph id="ph1">`WorkingFolder`</ph> element (<ph id="ph2">`Work`</ph>) but it is not very useful for the scenario of bringing an existing application.</source>
          <target state="new">There is also another value that you can specify for the <ph id="ph1">`WorkingFolder`</ph> element (<ph id="ph2">`Work`</ph>) but it is not very useful for the scenario of bringing an existing application.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The setup entry point</source>
          <target state="new">The setup entry point</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetupEntrypoint`</ph> is used to specify any executable or batch file that should be executed before the service's code is launched.</source>
          <target state="new">The <ph id="ph1">`SetupEntrypoint`</ph> is used to specify any executable or batch file that should be executed before the service's code is launched.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It is an optional element so it does not need to be included if there is no intialization/setup that is required.</source>
          <target state="new">It is an optional element so it does not need to be included if there is no intialization/setup that is required.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The Entrypoint is executed every time the service is restarted.</source>
          <target state="new">The Entrypoint is executed every time the service is restarted.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>There is only one SetupEntrypoint so setup/config scripts needs to be boundled on a single batch file if the application's setup/config requires multiple scripts.</source>
          <target state="new">There is only one SetupEntrypoint so setup/config scripts needs to be boundled on a single batch file if the application's setup/config requires multiple scripts.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`Entrypoint`</ph> element, <ph id="ph2">`SetupEntrypoint`</ph> can execute any type of file: executable, batch fiules, powershell cmdlet.</source>
          <target state="new">Like the <ph id="ph1">`Entrypoint`</ph> element, <ph id="ph2">`SetupEntrypoint`</ph> can execute any type of file: executable, batch fiules, powershell cmdlet.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In the example above, the <ph id="ph1">`SetupEntrypoint`</ph> is based on a batch file myAppsetup.cmd that is located in the scripts subdirectory of the Code directory (assuming the <ph id="ph2">`WorkingDirectory`</ph> element is set to <ph id="ph3">`Code`</ph>).</source>
          <target state="new">In the example above, the <ph id="ph1">`SetupEntrypoint`</ph> is based on a batch file myAppsetup.cmd that is located in the scripts subdirectory of the Code directory (assuming the <ph id="ph2">`WorkingDirectory`</ph> element is set to <ph id="ph3">`Code`</ph>).</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Application Manifest file</source>
          <target state="new">Application Manifest file</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Once you have configured the <ph id="ph1">`servicemanifest.xml`</ph> file you need to make some changes to the <ph id="ph2">`applicationmanifest.xml`</ph> file to ensure the correct Service type and name are used.</source>
          <target state="new">Once you have configured the <ph id="ph1">`servicemanifest.xml`</ph> file you need to make some changes to the <ph id="ph2">`applicationmanifest.xml`</ph> file to ensure the correct Service type and name are used.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>ServiceManifestImport</source>
          <target state="new">ServiceManifestImport</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ServiceManifestImport`</ph> you can specify one or more services that you want to include in the app.</source>
          <target state="new">In the <ph id="ph1">`ServiceManifestImport`</ph> you can specify one or more services that you want to include in the app.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Services are referenced with <ph id="ph1">`ServiceManifestName`</ph> that specifies the name of the directory where the <ph id="ph2">`servicemanifest.xml`</ph> file is located.</source>
          <target state="new">Services are referenced with <ph id="ph1">`ServiceManifestName`</ph> that specifies the name of the directory where the <ph id="ph2">`servicemanifest.xml`</ph> file is located.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>DefaultServices</source>
          <target state="new">DefaultServices</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefaultServices`</ph> element in the application manifest file is used to define some service properties.</source>
          <target state="new">The <ph id="ph1">`DefaultServices`</ph> element in the application manifest file is used to define some service properties.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ServiceTypeName`</ph> is used as an 'Id' for the service.</source>
          <target state="new"><ph id="ph1">`ServiceTypeName`</ph> is used as an 'Id' for the service.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>in the context of porting an existing application, <ph id="ph1">`ServiceTypeName`</ph> just need to be a unique identifies for your service.</source>
          <target state="new">in the context of porting an existing application, <ph id="ph1">`ServiceTypeName`</ph> just need to be a unique identifies for your service.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`StatelessService`</ph>: Service Fabric supports two types of services: Stateless and Stateful.</source>
          <target state="new"><ph id="ph1">`StatelessService`</ph>: Service Fabric supports two types of services: Stateless and Stateful.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the case of porting an existing application the service is a stateless service so <ph id="ph1">`StatelessService`</ph> should always be used.</source>
          <target state="new">In the case of porting an existing application the service is a stateless service so <ph id="ph1">`StatelessService`</ph> should always be used.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A Service Fabric service can be deployed in various 'configurations', for instance it can be deployed as a single or multiple instances or it can be deployed in such a way that there is one instance of the service on each node of the Service Fabric cluster.</source>
          <target state="new">A Service Fabric service can be deployed in various 'configurations', for instance it can be deployed as a single or multiple instances or it can be deployed in such a way that there is one instance of the service on each node of the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`applicationmanifest.xml`</ph> file you can specify how you want the application to be deployed</source>
          <target state="new">In the <ph id="ph1">`applicationmanifest.xml`</ph> file you can specify how you want the application to be deployed</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InstanceCount`</ph>: is used to specify how many instances of the service should be launched in the Service Fabric cluster.</source>
          <target state="new"><ph id="ph1">`InstanceCount`</ph>: is used to specify how many instances of the service should be launched in the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">`InstanceCount`</ph> value depending on the type of application that you are deploying.</source>
          <target state="new">You can set the <ph id="ph1">`InstanceCount`</ph> value depending on the type of application that you are deploying.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The two most common scenarios are:</source>
          <target state="new">The two most common scenarios are:</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InstanCount = "1"`</ph>: in this case only one instance of the service will be deployed on the cluster.</source>
          <target state="new"><ph id="ph1">`InstanCount = "1"`</ph>: in this case only one instance of the service will be deployed on the cluster.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Service Fabric's scheduler determines on which node the service is going to be deployed.</source>
          <target state="new">Service Fabric's scheduler determines on which node the service is going to be deployed.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A single instance count also makes sense for applications that require a different configuration if they run on multiple instances.</source>
          <target state="new">A single instance count also makes sense for applications that require a different configuration if they run on multiple instances.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In that case it is easier to define multiple services in the same application manifest file and use <ph id="ph1">`InstanceCount = "1"`</ph>.</source>
          <target state="new">In that case it is easier to define multiple services in the same application manifest file and use <ph id="ph1">`InstanceCount = "1"`</ph>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>So the end result will be to have multiple instances of the same service but each with a specific configuration.</source>
          <target state="new">So the end result will be to have multiple instances of the same service but each with a specific configuration.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`InstanceCount`</ph> greater than one makes sense only if the goal is to have multiple instance of the exact same configuration.</source>
          <target state="new">A value of <ph id="ph1">`InstanceCount`</ph> greater than one makes sense only if the goal is to have multiple instance of the exact same configuration.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InstanceCount ="-1"`</ph>: in this case one instance of the service will be deployed on every node in the Service Fabric cluster.</source>
          <target state="new"><ph id="ph1">`InstanceCount ="-1"`</ph>: in this case one instance of the service will be deployed on every node in the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The end result will be having one (and only one) instance of the service for each node in the cluster.</source>
          <target state="new">The end result will be having one (and only one) instance of the service for each node in the cluster.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This is a useful configuration for front-end applications (ex.</source>
          <target state="new">This is a useful configuration for front-end applications (ex.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>a REST endpoint) because client applications just need to 'connect' to any of the node in the cluster in order to use the endpoint.</source>
          <target state="new">a REST endpoint) because client applications just need to 'connect' to any of the node in the cluster in order to use the endpoint.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This configuration can also be used when, for instance, all nodes of the Service Fabric cluster are connected to a load balancer so client traffic can be distributed across the service running on all nodes in the cluster.</source>
          <target state="new">This configuration can also be used when, for instance, all nodes of the Service Fabric cluster are connected to a load balancer so client traffic can be distributed across the service running on all nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="new">Testing</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For existing application is very useful to be able to see console logs to find out if the application and configuration scripts don't show any error.</source>
          <target state="new">For existing application is very useful to be able to see console logs to find out if the application and configuration scripts don't show any error.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Console redirection can be configured in the <ph id="ph1">`servicemanifest.xml`</ph> file using the <ph id="ph2">`ConsoleRedirection`</ph> element</source>
          <target state="new">Console redirection can be configured in the <ph id="ph1">`servicemanifest.xml`</ph> file using the <ph id="ph2">`ConsoleRedirection`</ph> element</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConsoleRedirection`</ph> can be used to redirect console output (both stdout and stderr) to a working directory so they can be used to verify that there are no errors during the setup or execution of the application in the Service Fabric cluster.</source>
          <target state="new"><ph id="ph1">`ConsoleRedirection`</ph> can be used to redirect console output (both stdout and stderr) to a working directory so they can be used to verify that there are no errors during the setup or execution of the application in the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileRetentionCount`</ph> determines how many files are saved in the working directory.</source>
          <target state="new"><ph id="ph1">`FileRetentionCount`</ph> determines how many files are saved in the working directory.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A value of, for instance, 5 means that the log files for the previous 5 executions are stored in the working directory.</source>
          <target state="new">A value of, for instance, 5 means that the log files for the previous 5 executions are stored in the working directory.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileMaxSizeInKb`</ph> specifies the max size of the log files.</source>
          <target state="new"><ph id="ph1">`FileMaxSizeInKb`</ph> specifies the max size of the log files.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Log files are saved on one of the service's working directories, in order to determine where the files are located, you need to use the Service Fabric Explorer to determine in which node the service is running and which is the working directory that is currently used.</source>
          <target state="new">Log files are saved on one of the service's working directories, in order to determine where the files are located, you need to use the Service Fabric Explorer to determine in which node the service is running and which is the working directory that is currently used.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In the Service Fabric explorer, identify the node where the service is running</source>
          <target state="new">In the Service Fabric explorer, identify the node where the service is running</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>![][3]</source>
          <target state="new">![][3]</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>After you know the node where the service is currently running, you can find out which is the working directory used</source>
          <target state="new">After you know the node where the service is currently running, you can find out which is the working directory used</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>![][4]</source>
          <target state="new">![][4]</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When you select the name of the service, on the right panel you can see there the service code and settings are stored</source>
          <target state="new">When you select the name of the service, on the right panel you can see there the service code and settings are stored</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>![][5]</source>
          <target state="new">![][5]</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you click on the link in the 'Disk Location' field you can access the directory where the services is running on.</source>
          <target state="new">If you click on the link in the 'Disk Location' field you can access the directory where the services is running on.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>![][6]</source>
          <target state="new">![][6]</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The log directory contains all log files.</source>
          <target state="new">The log directory contains all log files.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Note: This example shows the case of a single instance of the service running in the cluster.</source>
          <target state="new">Note: This example shows the case of a single instance of the service running in the cluster.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If there are multiple instances you may need to check the log file on all the nodes where the service is running.</source>
          <target state="new">If there are multiple instances you may need to check the log file on all the nodes where the service is running.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>What's next</source>
          <target state="new">What's next</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>We are working on a tools that can be used to package an existing application simply by pointing it at the root of the directory structure of the app.</source>
          <target state="new">We are working on a tools that can be used to package an existing application simply by pointing it at the root of the directory structure of the app.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The tool takes care of generate the manifest files and configure the basic settings that are required to 'transform' the application in a Service Fabric service.</source>
          <target state="new">The tool takes care of generate the manifest files and configure the basic settings that are required to 'transform' the application in a Service Fabric service.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a900f92517f1d3eb32f5d1bb5322ed220ecf4c8</xliffext:olfilehash>
  </header>
</xliff>