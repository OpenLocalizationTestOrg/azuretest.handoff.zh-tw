{
  "nodes": [
    {
      "content": "How to use Azure Service Bus with the WebJobs SDK",
      "pos": [
        28,
        77
      ]
    },
    {
      "content": "Learn how to use Azure Service Bus queues and topics with the WebJobs SDK.",
      "pos": [
        97,
        171
      ]
    },
    {
      "content": "How to use Azure Service Bus with the WebJobs SDK",
      "pos": [
        514,
        563
      ]
    },
    {
      "content": "Overview",
      "pos": [
        568,
        576
      ]
    },
    {
      "content": "This guide provides C# code samples that show how to trigger a process when an Azure blob is created or updated.",
      "pos": [
        578,
        690
      ]
    },
    {
      "content": "The code samples use <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.",
      "pos": [
        691,
        770
      ]
    },
    {
      "pos": [
        772,
        952
      ],
      "content": "The guide assumes you know <bpt id=\"p1\">[</bpt>how to create a WebJob project in Visual Studio with connection strings that point to your storage account<ept id=\"p1\">](websites-dotnet-webjobs-sdk-get-started.md)</ept>."
    },
    {
      "pos": [
        954,
        1059
      ],
      "content": "The code snippets only show functions, not the code that creates the <ph id=\"ph1\">`JobHost`</ph> object as in this example:"
    },
    {
      "pos": [
        1207,
        1247
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"prerequisites\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Prerequisites"
    },
    {
      "pos": [
        1249,
        1463
      ],
      "content": "To work with Service Bus you have to install the <bpt id=\"p1\">[</bpt>Microsoft.Azure.WebJobs.ServiceBus<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.ServiceBus/)</ept> NuGet package in addition to the other WebJobs SDK packages."
    },
    {
      "content": "You also have to set the AzureWebJobsServiceBus connection string in addition to the storage connection strings.",
      "pos": [
        1466,
        1578
      ]
    },
    {
      "content": "You can do this in the <ph id=\"ph1\">`connectionStrings`</ph> section of the App.config file, as shown in the following example:",
      "pos": [
        1580,
        1689
      ]
    },
    {
      "pos": [
        2242,
        2457
      ],
      "content": "For a sample project that includes the Service Bus connection string setting in the App.config file, see <bpt id=\"p1\">[</bpt>Service Bus example<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/ServiceBus)</ept>."
    },
    {
      "pos": [
        2460,
        2787
      ],
      "content": "The connection strings can also be set in the Azure runtime environment, which then overrides the App.config settings when the WebJob runs in Azure; for more information, see <bpt id=\"p1\">[</bpt>Get Started with the WebJobs SDK<ept id=\"p1\">](websites-dotnet-webjobs-sdk-get-started.md#configure-the-web-app-to-use-your-azure-sql-database-and-storage-account)</ept>."
    },
    {
      "pos": [
        2792,
        2883
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"trigger\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> How to trigger a function when a Service Bus queue message is received"
    },
    {
      "content": "To write a function that the WebJobs SDK calls when a queue message is received, use the <ph id=\"ph1\">`ServiceBusTrigger`</ph> attribute.",
      "pos": [
        2885,
        3004
      ]
    },
    {
      "content": "The attribute constructor takes a parameter that specifies the name of the queue to poll.",
      "pos": [
        3005,
        3094
      ]
    },
    {
      "content": "How ServicebusTrigger works",
      "pos": [
        3100,
        3127
      ]
    },
    {
      "content": "The SDK receives a message in <ph id=\"ph1\">`PeekLock`</ph> mode and calls <ph id=\"ph2\">`Complete`</ph> on the message if the function finishes successfully, or calls <ph id=\"ph3\">`Abandon`</ph> if the function fails.",
      "pos": [
        3129,
        3291
      ]
    },
    {
      "content": "If the function runs longer than the <ph id=\"ph1\">`PeekLock`</ph> timeout, the lock is automatically renewed.",
      "pos": [
        3292,
        3383
      ]
    },
    {
      "content": "Serice Bus does its own poison queue handling, so that is neither controlled by, nor configurable in, the WebJobs SDK.",
      "pos": [
        3385,
        3503
      ]
    },
    {
      "content": "String queue message",
      "pos": [
        3510,
        3530
      ]
    },
    {
      "content": "The following code sample reads a queue message that contains a string and writes the string to the WebJobs SDK dashboard.",
      "pos": [
        3532,
        3654
      ]
    },
    {
      "pos": [
        3845,
        4108
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> If you are creating the queue messages in an application that doesn't use the WebJobs SDK, make sure to set <bpt id=\"p2\">[</bpt>BrokeredMessage.ContentType<ept id=\"p2\">](http://msdn.microsoft.com/library/microsoft.servicebus.messaging.brokeredmessage.contenttype.aspx)</ept> to \"text/plain\"."
    },
    {
      "content": "POCO queue message",
      "pos": [
        4114,
        4132
      ]
    },
    {
      "content": "The SDK will automatically deserialize a queue message that contains JSON for a POCO <bpt id=\"p1\">[</bpt>(Plain Old CLR Object<ept id=\"p1\">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>) type.",
      "pos": [
        4134,
        4300
      ]
    },
    {
      "content": "The following code sample reads a queue message that contains a <ph id=\"ph1\">`BlobInformation`</ph> object which has a <ph id=\"ph2\">`BlobName`</ph> property:",
      "pos": [
        4301,
        4422
      ]
    },
    {
      "pos": [
        4660,
        4884
      ],
      "content": "For code samples showing how to use properties of the POCO to work with blobs and tables in the same function, see the <bpt id=\"p1\">[</bpt>storage queues version of this article<ept id=\"p1\">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#pocoblobs)</ept>."
    },
    {
      "content": "If your code that creates the queue message doesn't use the WebJobs SDK, use code similar to the following example:",
      "pos": [
        4886,
        5001
      ]
    },
    {
      "content": "Types ServiceBusTrigger works with",
      "pos": [
        5322,
        5356
      ]
    },
    {
      "pos": [
        5358,
        5486
      ],
      "content": "Besides <ph id=\"ph1\">`string`</ph> and POCO  types, you can use the <ph id=\"ph2\">`ServiceBusTrigger`</ph> attribute with a byte array or a <ph id=\"ph3\">`BrokeredMessage`</ph> object."
    },
    {
      "pos": [
        5491,
        5551
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"create\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> How to create Service Bus queue messages"
    },
    {
      "pos": [
        5553,
        5693
      ],
      "content": "To write a function that creates a new queue message use the <ph id=\"ph1\">`ServiceBus`</ph> attribute and pass in the queue name to the attribute constructor."
    },
    {
      "content": "Create a single queue message in a non-async function",
      "pos": [
        5701,
        5754
      ]
    },
    {
      "content": "The following code sample uses an output parameter to create a new message in the queue named \"outputqueue\" with the same content as the message received in the queue named \"inputqueue\".",
      "pos": [
        5756,
        5942
      ]
    },
    {
      "content": "The output parameter for creating a single queue message can be any of the following types:",
      "pos": [
        6197,
        6288
      ]
    },
    {
      "content": "A serializable POCO type that you define.",
      "pos": [
        6334,
        6375
      ]
    },
    {
      "content": "Automatically serialized as JSON.",
      "pos": [
        6376,
        6409
      ]
    },
    {
      "content": "For POCO type parameters, a queue message is always created when the function ends; if the parameter is null, the SDK creates a queue message that will return null when the message is received and deserialized.",
      "pos": [
        6411,
        6621
      ]
    },
    {
      "content": "For the other types, if the parameter is null no queue message is created.",
      "pos": [
        6622,
        6696
      ]
    },
    {
      "content": "Create multiple queue messages or in async functions",
      "pos": [
        6702,
        6754
      ]
    },
    {
      "pos": [
        6756,
        6901
      ],
      "content": "To create multiple messages, use  the <ph id=\"ph1\">`ServiceBus`</ph> attribute with <ph id=\"ph2\">`ICollector&lt;T&gt;`</ph> or <ph id=\"ph3\">`IAsyncCollector&lt;T&gt;`</ph>, as shown in the following code sample:"
    },
    {
      "pos": [
        7329,
        7403
      ],
      "content": "Each queue message is created immediately when the <ph id=\"ph1\">`Add`</ph> method is called."
    },
    {
      "pos": [
        7408,
        7462
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"topics\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How to work with Service Bus topics"
    },
    {
      "pos": [
        7464,
        7696
      ],
      "content": "To write a function that the SDK calls when a message is received on a Service Bus topic, use the <ph id=\"ph1\">`ServiceBusTrigger`</ph> attribute with the constructor that takes topic name and subscription name, as shown in the following code sample:"
    },
    {
      "pos": [
        7912,
        8035
      ],
      "content": "To create a message on a topic, use the <ph id=\"ph1\">`ServiceBus`</ph> attribute with a topic name the same way you use it with a queue name."
    },
    {
      "pos": [
        8040,
        8118
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"queues\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Related topics covered by the storage queues how-to article"
    },
    {
      "pos": [
        8120,
        8305
      ],
      "content": "For information about WebJobs SDK scenarios not specific to Service Bus, see <bpt id=\"p1\">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id=\"p1\">](websites-dotnet-webjobs-sdk-storage-queues-how-to.md)</ept>."
    },
    {
      "content": "Topics covered in that article include the following:",
      "pos": [
        8308,
        8361
      ]
    },
    {
      "content": "Async functions",
      "pos": [
        8365,
        8380
      ]
    },
    {
      "content": "Multiple instances",
      "pos": [
        8383,
        8401
      ]
    },
    {
      "content": "Graceful shutdown",
      "pos": [
        8404,
        8421
      ]
    },
    {
      "content": "Use WebJobs SDK attributes in the body of a function",
      "pos": [
        8424,
        8476
      ]
    },
    {
      "content": "Set the SDK connection strings in code",
      "pos": [
        8479,
        8517
      ]
    },
    {
      "content": "Set values for WebJobs SDK constructor parameters in code",
      "pos": [
        8520,
        8577
      ]
    },
    {
      "content": "Trigger a function manually",
      "pos": [
        8580,
        8607
      ]
    },
    {
      "content": "Write logs",
      "pos": [
        8610,
        8620
      ]
    },
    {
      "pos": [
        8625,
        8658
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Next steps"
    },
    {
      "content": "This guide has provided code samples that show how to handle common scenarios for working with Azure Service Bus.",
      "pos": [
        8660,
        8773
      ]
    },
    {
      "content": "For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id=\"p1\">[</bpt>Azure WebJobs Recommended Resources<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.",
      "pos": [
        8774,
        8936
      ]
    },
    {
      "content": "test",
      "pos": [
        8940,
        8944
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Azure Service Bus with the WebJobs SDK\" \n    description=\"Learn how to use Azure Service Bus queues and topics with the WebJobs SDK.\" \n    services=\"app-service\\web, service-bus\" \n    documentationCenter=\".net\" \n    authors=\"tdykstra\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags \n    ms.service=\"app-service-web\" \n    ms.workload=\"web\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"dotnet\" \n    ms.topic=\"article\" \n    ms.date=\"08/10/2015\" \n    ms.author=\"tdykstra\"/>\n\n# How to use Azure Service Bus with the WebJobs SDK\n\n## Overview\n\nThis guide provides C# code samples that show how to trigger a process when an Azure blob is created or updated. The code samples use [WebJobs SDK](websites-dotnet-webjobs-sdk.md) version 1.x.\n\nThe guide assumes you know [how to create a WebJob project in Visual Studio with connection strings that point to your storage account](websites-dotnet-webjobs-sdk-get-started.md).\n\nThe code snippets only show functions, not the code that creates the `JobHost` object as in this example:\n\n        static void Main(string[] args)\n        {\n            JobHost host = new JobHost();\n            host.RunAndBlock();\n        }\n        \n## <a id=\"prerequisites\"></a> Prerequisites\n\nTo work with Service Bus you have to install the [Microsoft.Azure.WebJobs.ServiceBus](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.ServiceBus/) NuGet package in addition to the other WebJobs SDK packages. \n\nYou also have to set the AzureWebJobsServiceBus connection string in addition to the storage connection strings.  You can do this in the `connectionStrings` section of the App.config file, as shown in the following example:\n\n        <connectionStrings>\n            <add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=[accountname];AccountKey=[accesskey]\"/>\n            <add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=[accountname];AccountKey=[accesskey]\"/>\n            <add name=\"AzureWebJobsServiceBus\" connectionString=\"Endpoint=sb://[yourServiceNamespace].servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[yourKey]\"/>\n        </connectionStrings>\n\nFor a sample project that includes the Service Bus connection string setting in the App.config file, see [Service Bus example](https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/ServiceBus). \n\nThe connection strings can also be set in the Azure runtime environment, which then overrides the App.config settings when the WebJob runs in Azure; for more information, see [Get Started with the WebJobs SDK](websites-dotnet-webjobs-sdk-get-started.md#configure-the-web-app-to-use-your-azure-sql-database-and-storage-account).\n\n## <a id=\"trigger\"></a> How to trigger a function when a Service Bus queue message is received\n\nTo write a function that the WebJobs SDK calls when a queue message is received, use the `ServiceBusTrigger` attribute. The attribute constructor takes a parameter that specifies the name of the queue to poll.\n\n### How ServicebusTrigger works\n\nThe SDK receives a message in `PeekLock` mode and calls `Complete` on the message if the function finishes successfully, or calls `Abandon` if the function fails. If the function runs longer than the `PeekLock` timeout, the lock is automatically renewed.\n\nSerice Bus does its own poison queue handling, so that is neither controlled by, nor configurable in, the WebJobs SDK. \n\n### String queue message\n\nThe following code sample reads a queue message that contains a string and writes the string to the WebJobs SDK dashboard.\n\n        public static void ProcessQueueMessage([ServiceBusTrigger(\"inputqueue\")] string message, \n            TextWriter logger)\n        {\n            logger.WriteLine(message);\n        }\n\n**Note:** If you are creating the queue messages in an application that doesn't use the WebJobs SDK, make sure to set [BrokeredMessage.ContentType](http://msdn.microsoft.com/library/microsoft.servicebus.messaging.brokeredmessage.contenttype.aspx) to \"text/plain\".\n\n### POCO queue message\n\nThe SDK will automatically deserialize a queue message that contains JSON for a POCO [(Plain Old CLR Object](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)) type. The following code sample reads a queue message that contains a `BlobInformation` object which has a `BlobName` property:\n\n        public static void WriteLogPOCO([ServiceBusTrigger(\"inputqueue\")] BlobInformation blobInfo,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Queue message refers to blob: \" + blobInfo.BlobName);\n        }\n\nFor code samples showing how to use properties of the POCO to work with blobs and tables in the same function, see the [storage queues version of this article](websites-dotnet-webjobs-sdk-storage-queues-how-to.md#pocoblobs).\n\nIf your code that creates the queue message doesn't use the WebJobs SDK, use code similar to the following example:\n\n        var client = QueueClient.CreateFromConnectionString(ConfigurationManager.ConnectionStrings[\"AzureWebJobsServiceBus\"].ConnectionString, \"blobadded\");\n        BlobInformation blobInformation = new BlobInformation () ;\n        var message = new BrokeredMessage(blobInformation);\n        client.Send(message);\n\n### Types ServiceBusTrigger works with\n\nBesides `string` and POCO  types, you can use the `ServiceBusTrigger` attribute with a byte array or a `BrokeredMessage` object.\n\n## <a id=\"create\"></a> How to create Service Bus queue messages\n\nTo write a function that creates a new queue message use the `ServiceBus` attribute and pass in the queue name to the attribute constructor. \n\n\n### Create a single queue message in a non-async function\n\nThe following code sample uses an output parameter to create a new message in the queue named \"outputqueue\" with the same content as the message received in the queue named \"inputqueue\".\n\n        public static void CreateQueueMessage(\n            [ServiceBusTrigger(\"inputqueue\")] string queueMessage,\n            [ServiceBus(\"outputqueue\")] out string outputQueueMessage)\n        {\n            outputQueueMessage = queueMessage;\n        }\n\nThe output parameter for creating a single queue message can be any of the following types:\n\n* `string`\n* `byte[]`\n* `BrokeredMessage`\n* A serializable POCO type that you define. Automatically serialized as JSON.\n\nFor POCO type parameters, a queue message is always created when the function ends; if the parameter is null, the SDK creates a queue message that will return null when the message is received and deserialized. For the other types, if the parameter is null no queue message is created.\n\n### Create multiple queue messages or in async functions\n\nTo create multiple messages, use  the `ServiceBus` attribute with `ICollector<T>` or `IAsyncCollector<T>`, as shown in the following code sample:\n\n        public static void CreateQueueMessages(\n            [ServiceBusTrigger(\"inputqueue\")] string queueMessage,\n            [ServiceBus(\"outputqueue\")] ICollector<string> outputQueueMessage,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Creating 2 messages in outputqueue\");\n            outputQueueMessage.Add(queueMessage + \"1\");\n            outputQueueMessage.Add(queueMessage + \"2\");\n        }\n\nEach queue message is created immediately when the `Add` method is called.\n\n## <a id=\"topics\"></a>How to work with Service Bus topics\n\nTo write a function that the SDK calls when a message is received on a Service Bus topic, use the `ServiceBusTrigger` attribute with the constructor that takes topic name and subscription name, as shown in the following code sample:\n\n        public static void WriteLog([ServiceBusTrigger(\"outputtopic\",\"subscription1\")] string message,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Topic message: \" + message);\n        }\n\nTo create a message on a topic, use the `ServiceBus` attribute with a topic name the same way you use it with a queue name.\n\n## <a id=\"queues\"></a>Related topics covered by the storage queues how-to article\n\nFor information about WebJobs SDK scenarios not specific to Service Bus, see [How to use Azure queue storage with the WebJobs SDK](websites-dotnet-webjobs-sdk-storage-queues-how-to.md). \n\nTopics covered in that article include the following:\n\n* Async functions\n* Multiple instances\n* Graceful shutdown\n* Use WebJobs SDK attributes in the body of a function\n* Set the SDK connection strings in code\n* Set values for WebJobs SDK constructor parameters in code\n* Trigger a function manually\n* Write logs\n\n## <a id=\"nextsteps\"></a> Next steps\n\nThis guide has provided code samples that show how to handle common scenarios for working with Azure Service Bus. For more information about how to use Azure WebJobs and the WebJobs SDK, see [Azure WebJobs Recommended Resources](http://go.microsoft.com/fwlink/?linkid=390226).\n \n\ntest\n"
}