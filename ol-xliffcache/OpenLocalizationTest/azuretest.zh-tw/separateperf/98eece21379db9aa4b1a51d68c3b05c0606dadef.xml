{
  "nodes": [
    {
      "content": "Get started with the DocumentDB .NET SDK | Microsoft Azure",
      "pos": [
        27,
        85
      ]
    },
    {
      "content": "Learn how to create and configure an Azure DocumentDB account, create databases, create collections, and store JSON documents within your NoSQL document database account.",
      "pos": [
        104,
        274
      ]
    },
    {
      "content": "Get started with the DocumentDB .NET SDK",
      "pos": [
        597,
        637
      ]
    },
    {
      "content": "This tutorial shows you how to get started using <bpt id=\"p1\">[</bpt>Microsoft Azure DocumentDB<ept id=\"p1\">](https://azure.microsoft.com/services/documentdb/)</ept> and the <bpt id=\"p2\">[</bpt>DocumentDB .NET SDK<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/)</ept>.",
      "pos": [
        641,
        859
      ]
    },
    {
      "content": "You'll build a console application that creates and queries DocumentDB resources, and writes the output to the console window.",
      "pos": [
        860,
        986
      ]
    },
    {
      "content": "DocumentDB is a NoSQL document database service, which has a <bpt id=\"p1\">[</bpt>number of APIs and SDKs available<ept id=\"p1\">](https://msdn.microsoft.com/library/dn781482.aspx)</ept>.",
      "pos": [
        988,
        1135
      ]
    },
    {
      "content": "The code in this article is written in C# and uses the DocumentDB .NET SDK, which is packaged and distributed as a NuGet package.",
      "pos": [
        1136,
        1265
      ]
    },
    {
      "content": "The following scenarios are covered in this article:",
      "pos": [
        1267,
        1319
      ]
    },
    {
      "content": "Creating and connecting to a DocumentDB account",
      "pos": [
        1323,
        1370
      ]
    },
    {
      "content": "Adding DocumentDB to your Visual Studio solution",
      "pos": [
        1373,
        1421
      ]
    },
    {
      "content": "Creating databases",
      "pos": [
        1424,
        1442
      ]
    },
    {
      "content": "Creating collections",
      "pos": [
        1445,
        1465
      ]
    },
    {
      "content": "Creating JSON documents",
      "pos": [
        1468,
        1491
      ]
    },
    {
      "content": "Querying resources",
      "pos": [
        1494,
        1512
      ]
    },
    {
      "content": "Deleting databases",
      "pos": [
        1515,
        1533
      ]
    },
    {
      "content": "Don't have time to complete the tutorial and just want to get the working solution?",
      "pos": [
        1535,
        1618
      ]
    },
    {
      "content": "No worries.",
      "pos": [
        1619,
        1630
      ]
    },
    {
      "content": "The complete solution is available on <bpt id=\"p1\">[</bpt>GitHub<ept id=\"p1\">](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started)</ept>.",
      "pos": [
        1631,
        1759
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Get the complete solution<ept id=\"p1\">](#GetSolution)</ept> for quick instructions.",
      "pos": [
        1760,
        1829
      ]
    },
    {
      "content": "Once you've completed the tutorial, please using the voting buttons at the beginning or end of the topic to let us know how we did.",
      "pos": [
        1832,
        1963
      ]
    },
    {
      "content": "This topic is actively being updated, so we want your feedback on improving it.",
      "pos": [
        1964,
        2043
      ]
    },
    {
      "content": "If you'd like us to contact you, feel free to include your email address in the comment for follow-up.",
      "pos": [
        2044,
        2146
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        2154,
        2167
      ]
    },
    {
      "content": "Before following the instructions in this article, you should ensure that you have the following:",
      "pos": [
        2169,
        2266
      ]
    },
    {
      "content": "An active Azure account.",
      "pos": [
        2270,
        2294
      ]
    },
    {
      "content": "If you don't have an account, you can create a free trial account in just a couple of minutes.",
      "pos": [
        2295,
        2389
      ]
    },
    {
      "content": "For details, see <bpt id=\"p1\">[</bpt>Azure Free Trial<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/)</ept>.",
      "pos": [
        2390,
        2474
      ]
    },
    {
      "pos": [
        2477,
        2547
      ],
      "content": "<bpt id=\"p1\">[</bpt>Visual Studio 2013<ept id=\"p1\">](http://www.visualstudio.com/)</ept> Update 4 or higher."
    },
    {
      "content": "Step 1: Create a DocumentDB account",
      "pos": [
        2552,
        2587
      ]
    },
    {
      "content": "Lets get started by creating a DocumentDB account.",
      "pos": [
        2589,
        2639
      ]
    },
    {
      "content": "If you already have an account, you can skip to <bpt id=\"p1\">[</bpt>Setup your Visual Studio Solution<ept id=\"p1\">](#SetupVS)</ept>.",
      "pos": [
        2640,
        2734
      ]
    },
    {
      "pos": [
        2832,
        2894
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"SetupVS\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Step 2: Setup your Visual Studio Solution"
    },
    {
      "pos": [
        2899,
        2939
      ],
      "content": "Open <bpt id=\"p1\">**</bpt>Visual Studio<ept id=\"p1\">**</ept> on your computer."
    },
    {
      "pos": [
        2943,
        3005
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu, and choose <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        3009,
        3146
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>New Project Dialog<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Templates<ept id=\"p2\">**</ept> / <bpt id=\"p3\">**</bpt>Visual C#<ept id=\"p3\">**</ept> / <bpt id=\"p4\">**</bpt>Console Application<ept id=\"p4\">**</ept>, name your project, and then click <bpt id=\"p5\">**</bpt>Add<ept id=\"p5\">**</ept>."
    },
    {
      "pos": [
        3150,
        3268
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right click on your new console application, which is under your Visual Studio solution."
    },
    {
      "pos": [
        3272,
        3340
      ],
      "content": "Then without leaving the menu, click on <bpt id=\"p1\">**</bpt>Manage NuGet Packages...<ept id=\"p1\">**</ept>"
    },
    {
      "pos": [
        3344,
        3441
      ],
      "content": "On the left most panel of the <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>Online<ept id=\"p2\">**</ept> / <bpt id=\"p3\">**</bpt>nuget.org<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        3445,
        3522
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Search Online<ept id=\"p1\">**</ept> input box, search for <bpt id=\"p2\">**</bpt>DocumentDB Client Library<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        3526,
        3764
      ],
      "content": "Within the results, find **Microsoft Azure DocumentDB Client Library** and click **Install**.  \nThe package ID for the DocumentDB Client Library is [Microsoft.Azure.DocumentDB](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB)",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Within the results, find <bpt id=\"p1\">**</bpt>Microsoft Azure DocumentDB Client Library<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Install<ept id=\"p2\">**</ept>.",
          "pos": [
            0,
            93
          ]
        },
        {
          "content": "The package ID for the DocumentDB Client Library is <bpt id=\"p1\">[</bpt>Microsoft.Azure.DocumentDB<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB)</ept>",
          "pos": [
            96,
            235
          ]
        }
      ]
    },
    {
      "content": "Great!",
      "pos": [
        3766,
        3772
      ]
    },
    {
      "content": "You are now ready to start working with DocumentDB.",
      "pos": [
        3773,
        3824
      ]
    },
    {
      "pos": [
        3828,
        3888
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Connect\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Step 3: Connect to a DocumentDB account"
    },
    {
      "content": "We'll start by creating a new instance of the <bpt id=\"p1\">[</bpt>DocumentClient<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.aspx)</ept> class in order to establish a connection to our DocumentDB account.",
      "pos": [
        3890,
        4109
      ]
    },
    {
      "content": "We'll need the following references at the beginning of our C# application:",
      "pos": [
        4112,
        4187
      ]
    },
    {
      "content": "Next, a <bpt id=\"p1\">**</bpt>DocumentClient<ept id=\"p1\">**</ept> can be instantiated using the DocumentDB account endpoint and either the primary or secondary access key associated with the account.",
      "pos": [
        4342,
        4502
      ]
    },
    {
      "content": "Add these properties to your class.",
      "pos": [
        4503,
        4538
      ]
    },
    {
      "content": "Let's now create a new asynchronous task called <bpt id=\"p1\">**</bpt>GetStartedDemo<ept id=\"p1\">**</ept> in your class.",
      "pos": [
        4663,
        4744
      ]
    },
    {
      "content": "Within this new task, create and set up your <bpt id=\"p1\">**</bpt>DocumentClient<ept id=\"p1\">**</ept>.",
      "pos": [
        4745,
        4809
      ]
    },
    {
      "content": "Call your asynchronous task from your Main method similar to the code below.",
      "pos": [
        5008,
        5084
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph> Never store credentials in source code.",
      "pos": [
        5414,
        5469
      ]
    },
    {
      "content": "To keep this sample simple, the credentials are shown in the source code.",
      "pos": [
        5470,
        5543
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Azure Web Sites: How Application Strings and Connection Strings Work<ept id=\"p1\">](https://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)</ept> for information on how to store credentials in a production environment.",
      "pos": [
        5544,
        5813
      ]
    },
    {
      "content": "Take a look at our sample application on <bpt id=\"p1\">[</bpt>GitHub<ept id=\"p1\">](https://github.com/Azure/azure-documentdb-net/blob/master/tutorials/get-started/src/Program.cs)</ept> for an example on storing credentials outside of the source code.",
      "pos": [
        5814,
        6025
      ]
    },
    {
      "pos": [
        6027,
        6230
      ],
      "content": "The values for EndpointUrl and AuthorizationKey are the URI and PRIMARY KEY for your DocumentDB account, which can be obtained from the <bpt id=\"p1\">[</bpt>Keys<ept id=\"p1\">](https://portal.azure.com)</ept> blade for your DocumentDB account."
    },
    {
      "content": "Screen shot of the Azure Preview portal, showing a DocumentDB account, with the ACTIVE hub highlighted, the KEYS button highlighted on the DocumentDB account blade, and the URI, PRIMARY KEY and SECONDARY KEY values highlighted on the Keys blade",
      "pos": [
        6234,
        6478
      ]
    },
    {
      "content": "These keys grant administrative access to your DocumentDB account and the resources in it.",
      "pos": [
        6487,
        6577
      ]
    },
    {
      "content": "DocumentDB also supports the use of resource keys that allow clients to read, write, and delete resources in the DocumentDB account according to the permissions you've granted, without the need for an account key.",
      "pos": [
        6578,
        6791
      ]
    },
    {
      "content": "For more information about resource keys, see <bpt id=\"p1\">[</bpt>Permissions<ept id=\"p1\">](documentdb-resources.md#permissions)</ept> and <bpt id=\"p2\">[</bpt>View, copy, and regenerate access keys<ept id=\"p2\">](documentdb-manage-account.md#keys)</ept>.",
      "pos": [
        6792,
        6969
      ]
    },
    {
      "pos": [
        6971,
        7139
      ],
      "content": "Now that you know how to connect to a DocumentDB account and create an instance of the <bpt id=\"p1\">**</bpt>DocumentClient<ept id=\"p1\">**</ept> class, let's take a look at working with DocumentDB resources."
    },
    {
      "content": "Step 4: Create a database",
      "pos": [
        7146,
        7171
      ]
    },
    {
      "content": "A <bpt id=\"p1\">[</bpt>database<ept id=\"p1\">](documentdb-resources.md#databases)</ept> can be created by using the <bpt id=\"p2\">[</bpt>CreateDatabaseAsync<ept id=\"p2\">](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdatabaseasync.aspx)</ept> method of the <bpt id=\"p3\">**</bpt>DocumentClient<ept id=\"p3\">**</ept> class.",
      "pos": [
        7172,
        7418
      ]
    },
    {
      "content": "A database is the logical container of document storage partitioned across collections.",
      "pos": [
        7419,
        7506
      ]
    },
    {
      "content": "Create your new database in your <bpt id=\"p1\">**</bpt>GetStartedDemo<ept id=\"p1\">**</ept> method after your <bpt id=\"p2\">**</bpt>DocumentClient<ept id=\"p2\">**</ept> creation.",
      "pos": [
        7507,
        7605
      ]
    },
    {
      "pos": [
        7783,
        7833
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"CreateColl\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Step 5: Create a collection"
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph> <bpt id=\"p1\">**</bpt>CreateDocumentCollectionAsync<ept id=\"p1\">**</ept> will create a new S1 collection, which has pricing implications.",
      "pos": [
        7839,
        7953
      ]
    },
    {
      "content": "For more details, please visit our <bpt id=\"p1\">[</bpt>pricing page<ept id=\"p1\">](https://azure.microsoft.com/pricing/details/documentdb/)</ept>.",
      "pos": [
        7954,
        8061
      ]
    },
    {
      "content": "A <bpt id=\"p1\">[</bpt>collection<ept id=\"p1\">](documentdb-resources.md#collections)</ept> can be created by using the <bpt id=\"p2\">[</bpt>CreateDocumentCollectionAsync<ept id=\"p2\">](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentcollectionasync.aspx)</ept> method of the <bpt id=\"p3\">**</bpt>DocumentClient<ept id=\"p3\">**</ept> class.",
      "pos": [
        8063,
        8333
      ]
    },
    {
      "content": "A collection is a container of JSON documents and associated JavaScript application logic.",
      "pos": [
        8334,
        8424
      ]
    },
    {
      "content": "The newly created collection will be mapped to a <bpt id=\"p1\">[</bpt>S1 performance level<ept id=\"p1\">](documentdb-performance-levels.md)</ept>.",
      "pos": [
        8425,
        8531
      ]
    },
    {
      "content": "The database created in the previous step has a number of properties, one of which is the <bpt id=\"p1\">[</bpt>CollectionsLink<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.azure.documents.database.collectionslink.aspx)</ept> property.",
      "pos": [
        8532,
        8741
      ]
    },
    {
      "content": "With that information, we can now create a collection after our database creation.",
      "pos": [
        8743,
        8825
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"CreateDoc\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Step 6: Create documents",
      "pos": [
        9081,
        9127
      ]
    },
    {
      "content": "A <bpt id=\"p1\">[</bpt>document<ept id=\"p1\">](documentdb-resources.md#documents)</ept> can be created by using the <bpt id=\"p2\">[</bpt>CreateDocumentAsync<ept id=\"p2\">](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentasync.aspx)</ept> method of the <bpt id=\"p3\">**</bpt>DocumentClient<ept id=\"p3\">**</ept> class.",
      "pos": [
        9128,
        9374
      ]
    },
    {
      "content": "Documents are user defined (arbitrary) JSON content.",
      "pos": [
        9375,
        9427
      ]
    },
    {
      "content": "The collection created in the previous step has a number of properties, one of which is the <bpt id=\"p1\">[</bpt>DocumentsLink<ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.azure.documents.documentcollection.documentslink.aspx)</ept> property.",
      "pos": [
        9428,
        9645
      ]
    },
    {
      "content": "With that information, we can now insert one or more documents.",
      "pos": [
        9647,
        9710
      ]
    },
    {
      "content": "If you already have data you'd like to store in your database, you can use DocumentDB's <bpt id=\"p1\">[</bpt>Data Migration tool<ept id=\"p1\">](documentdb-import-data.md)</ept>.",
      "pos": [
        9711,
        9848
      ]
    },
    {
      "content": "First, we need to create a <bpt id=\"p1\">**</bpt>Parent<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Child<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Pet<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Address<ept id=\"p4\">**</ept> and <bpt id=\"p5\">**</bpt>Family<ept id=\"p5\">**</ept> class.",
      "pos": [
        9850,
        9942
      ]
    },
    {
      "content": "Create these classes by adding the following internal sub-classes.",
      "pos": [
        9943,
        10009
      ]
    },
    {
      "pos": [
        11030,
        11102
      ],
      "content": "Next, create your documents within your <bpt id=\"p1\">**</bpt>GetStartedDemo<ept id=\"p1\">**</ept> async method."
    },
    {
      "content": "You have now created the following database, collection, and documents in your DocumentDB account.",
      "pos": [
        12964,
        13062
      ]
    },
    {
      "content": "Diagram illustrating the hierarchical relationship between the account, the database, the collection, and the documents",
      "pos": [
        13066,
        13185
      ]
    },
    {
      "pos": [
        13243,
        13295
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Query\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Step 7: Query DocumentDB resources"
    },
    {
      "content": "DocumentDB supports rich <bpt id=\"p1\">[</bpt>queries<ept id=\"p1\">](documentdb-sql-query.md)</ept> against JSON documents stored in each collection.",
      "pos": [
        13297,
        13406
      ]
    },
    {
      "content": "The following sample code shows various queries - using both DocumentDB SQL syntax as well as LINQ - that we can run against the documents we inserted in the previous step.",
      "pos": [
        13408,
        13580
      ]
    },
    {
      "content": "Add these queries to your <bpt id=\"p1\">**</bpt>GetStartedDemo<ept id=\"p1\">**</ept> async method.",
      "pos": [
        13581,
        13639
      ]
    },
    {
      "content": "The following diagram illustrates how the DocumentDB SQL query syntax is called against the collection you created, and the same logic applies to the LINQ query as well.",
      "pos": [
        15413,
        15582
      ]
    },
    {
      "content": "Diagram illustrating the scope and meaning of the query",
      "pos": [
        15586,
        15641
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>FROM<ept id=\"p1\">](documentdb-sql-query.md/#from-clause)</ept> keyword is optional in the query because DocumentDB queries are already scoped to a single collection.",
      "pos": [
        15701,
        15852
      ]
    },
    {
      "content": "Therefore, \"FROM Families f\" can be swapped with \"FROM root r\", or any other variable name you choose.",
      "pos": [
        15853,
        15955
      ]
    },
    {
      "content": "DocumentDB will infer that Families, root,or the variable name you chose, reference the current collection by default.",
      "pos": [
        15956,
        16074
      ]
    },
    {
      "pos": [
        16078,
        16132
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"DeleteDatabase\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Step 8: Delete the database"
    },
    {
      "content": "Deleting the created database will remove the database and all children resources (collections, documents, etc.).",
      "pos": [
        16134,
        16247
      ]
    },
    {
      "content": "You can delete the database and the document client by adding the following code snippet to the end of your <bpt id=\"p1\">**</bpt>GetStartedDemo<ept id=\"p1\">**</ept> async method.",
      "pos": [
        16248,
        16388
      ]
    },
    {
      "pos": [
        16508,
        16553
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Run\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Step 9: Run your application!"
    },
    {
      "content": "You are now ready to run your application.",
      "pos": [
        16555,
        16597
      ]
    },
    {
      "content": "At the end of your <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method, add the following line of code, which will let you read the console output before the application finishes running.",
      "pos": [
        16598,
        16749
      ]
    },
    {
      "content": "Now hit F5 in Visual Studio to build the application in debug mode.",
      "pos": [
        16776,
        16843
      ]
    },
    {
      "content": "You should now see the output of your get started app.",
      "pos": [
        16845,
        16899
      ]
    },
    {
      "content": "The output will show the results of the queries we added and should match the example text below.",
      "pos": [
        16900,
        16997
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you run the application multiple times without removing the database, you might run into the issue of creating a new database with an id already in use.",
      "pos": [
        20154,
        20322
      ]
    },
    {
      "content": "To avoid this, you can check to see if a database, collection, or document with the same id already exists.",
      "pos": [
        20323,
        20430
      ]
    },
    {
      "content": "For a reference on how this can be achieved, visit our <bpt id=\"p1\">[</bpt>GitHub page<ept id=\"p1\">](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started)</ept>.",
      "pos": [
        20431,
        20581
      ]
    },
    {
      "content": "Contratulations!",
      "pos": [
        20583,
        20599
      ]
    },
    {
      "content": "You've created your first DocumentDB app!",
      "pos": [
        20600,
        20641
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"GetSolution\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Get the complete solution",
      "pos": [
        20646,
        20696
      ]
    },
    {
      "content": "To build the GetStarted solution that contains all the samples in this article, you will need the following:",
      "pos": [
        20697,
        20805
      ]
    },
    {
      "pos": [
        20811,
        20859
      ],
      "content": "<bpt id=\"p1\">[</bpt>DocumentDB account<ept id=\"p1\">][documentdb-create-account]</ept>."
    },
    {
      "pos": [
        20864,
        20991
      ],
      "content": "The <bpt id=\"p1\">[</bpt>GetStarted<ept id=\"p1\">](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started)</ept> solution available on GitHub."
    },
    {
      "content": "To restore the references to the DocumentDB .NET SDK in Visual Studio 2013, right-click the <bpt id=\"p1\">**</bpt>GetStarted<ept id=\"p1\">**</ept> solution in Solution Explorer, and then click <bpt id=\"p2\">**</bpt>Enable NuGet Package Restore<ept id=\"p2\">**</ept>.",
      "pos": [
        20993,
        21179
      ]
    },
    {
      "content": "Next, in the App.config file, update the EndpointUrl and AuthorizationKey values as described in <bpt id=\"p1\">[</bpt>Connect to a DocumentDB account<ept id=\"p1\">](#Connect)</ept>.",
      "pos": [
        21180,
        21321
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        21326,
        21336
      ]
    },
    {
      "content": "Want a more complex ASP.NET MVC sample?",
      "pos": [
        21342,
        21381
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Build a web application with ASP.NET MVC using DocumentDB<ept id=\"p1\">](documentdb-dotnet-application.md)</ept>.",
      "pos": [
        21382,
        21480
      ]
    },
    {
      "pos": [
        21485,
        21561
      ],
      "content": "Learn how to <bpt id=\"p1\">[</bpt>monitor a DocumentDB account<ept id=\"p1\">](documentdb-monitor-accounts.md)</ept>."
    },
    {
      "pos": [
        21566,
        21668
      ],
      "content": "Run queries against our sample dataset in the <bpt id=\"p1\">[</bpt>Query Playground<ept id=\"p1\">](https://www.documentdb.com/sql/demo)</ept>."
    },
    {
      "pos": [
        21673,
        21806
      ],
      "content": "Learn more about the programming model in the Development section of the <bpt id=\"p1\">[</bpt>DocumentDB documentation page<ept id=\"p1\">](../../services/documentdb/)</ept>."
    },
    {
      "content": "test",
      "pos": [
        22005,
        22009
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with the DocumentDB .NET SDK | Microsoft Azure\"\n    description=\"Learn how to create and configure an Azure DocumentDB account, create databases, create collections, and store JSON documents within your NoSQL document database account.\"\n    services=\"documentdb\"\n    documentationCenter=\".net\"\n    authors=\"AndrewHoh\"\n    manager=\"jhubbard\"\n    editor=\"monicar\"/>\n\n<tags\n    ms.service=\"documentdb\"\n    ms.workload=\"data-services\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\" \n    ms.date=\"09/03/2015\"\n    ms.author=\"anhoh\"/>\n\n#Get started with the DocumentDB .NET SDK  \n\nThis tutorial shows you how to get started using [Microsoft Azure DocumentDB](https://azure.microsoft.com/services/documentdb/) and the [DocumentDB .NET SDK](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/). You'll build a console application that creates and queries DocumentDB resources, and writes the output to the console window.\n\nDocumentDB is a NoSQL document database service, which has a [number of APIs and SDKs available](https://msdn.microsoft.com/library/dn781482.aspx). The code in this article is written in C# and uses the DocumentDB .NET SDK, which is packaged and distributed as a NuGet package.\n\nThe following scenarios are covered in this article:\n\n- Creating and connecting to a DocumentDB account\n- Adding DocumentDB to your Visual Studio solution\n- Creating databases\n- Creating collections\n- Creating JSON documents\n- Querying resources\n- Deleting databases\n\nDon't have time to complete the tutorial and just want to get the working solution? No worries. The complete solution is available on [GitHub](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started). See [Get the complete solution](#GetSolution) for quick instructions. \n\nOnce you've completed the tutorial, please using the voting buttons at the beginning or end of the topic to let us know how we did. This topic is actively being updated, so we want your feedback on improving it. If you'd like us to contact you, feel free to include your email address in the comment for follow-up.   \n\n## Prerequisites\n\nBefore following the instructions in this article, you should ensure that you have the following:\n\n- An active Azure account. If you don't have an account, you can create a free trial account in just a couple of minutes. For details, see [Azure Free Trial](http://azure.microsoft.com/pricing/free-trial/).\n- [Visual Studio 2013](http://www.visualstudio.com/) Update 4 or higher.\n\n## Step 1: Create a DocumentDB account\n\nLets get started by creating a DocumentDB account. If you already have an account, you can skip to [Setup your Visual Studio Solution](#SetupVS).\n\n[AZURE.INCLUDE [documentdb-create-dbaccount](../../includes/documentdb-create-dbaccount.md)]\n\n##<a id=\"SetupVS\"></a> Step 2: Setup your Visual Studio Solution\n\n1. Open **Visual Studio** on your computer.\n2. Select **New** from the **File** menu, and choose **Project**.\n3. In the **New Project Dialog**, select **Templates** / **Visual C#** / **Console Application**, name your project, and then click **Add**.\n4. In the **Solution Explorer**, right click on your new console application, which is under your Visual Studio solution.\n5. Then without leaving the menu, click on **Manage NuGet Packages...**\n6. On the left most panel of the **Manage NuGet Packages** window, click **Online** / **nuget.org**.\n7. In the **Search Online** input box, search for **DocumentDB Client Library**.\n8. Within the results, find **Microsoft Azure DocumentDB Client Library** and click **Install**.  \n   The package ID for the DocumentDB Client Library is [Microsoft.Azure.DocumentDB](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB)\n\nGreat! You are now ready to start working with DocumentDB.\n\n##<a id=\"Connect\"></a> Step 3: Connect to a DocumentDB account\n\nWe'll start by creating a new instance of the [DocumentClient](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.aspx) class in order to establish a connection to our DocumentDB account.   We'll need the following references at the beginning of our C# application:  \n\n    using Microsoft.Azure.Documents;\n    using Microsoft.Azure.Documents.Client;\n    using Microsoft.Azure.Documents.Linq;\n    using Newtonsoft.Json;\n\nNext, a **DocumentClient** can be instantiated using the DocumentDB account endpoint and either the primary or secondary access key associated with the account. Add these properties to your class.\n\n    private static string EndpointUrl = \"<your endpoint URI>\";\n    private static string AuthorizationKey = \"<your key>\";\n\nLet's now create a new asynchronous task called **GetStartedDemo** in your class. Within this new task, create and set up your **DocumentClient**.\n\n    private static async Task GetStartedDemo()\n    {\n        // Create a new instance of the DocumentClient.\n        var client = new DocumentClient(new Uri(EndpointUrl), AuthorizationKey);\n    }\n\nCall your asynchronous task from your Main method similar to the code below.\n\n    public static void Main(string[] args)\n    {\n        try\n        {\n            GetStartedDemo().Wait();\n        }\n        catch (Exception e)\n        {\n            Exception baseException = e.GetBaseException();\n            Console.WriteLine(\"Error: {0}, Message: {1}\", e.Message, baseException.Message);\n        }\n    }\n\n> [AZURE.WARNING] Never store credentials in source code. To keep this sample simple, the credentials are shown in the source code. See [Azure Web Sites: How Application Strings and Connection Strings Work](https://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/) for information on how to store credentials in a production environment. Take a look at our sample application on [GitHub](https://github.com/Azure/azure-documentdb-net/blob/master/tutorials/get-started/src/Program.cs) for an example on storing credentials outside of the source code.\n\nThe values for EndpointUrl and AuthorizationKey are the URI and PRIMARY KEY for your DocumentDB account, which can be obtained from the [Keys](https://portal.azure.com) blade for your DocumentDB account.\n\n![Screen shot of the Azure Preview portal, showing a DocumentDB account, with the ACTIVE hub highlighted, the KEYS button highlighted on the DocumentDB account blade, and the URI, PRIMARY KEY and SECONDARY KEY values highlighted on the Keys blade][keys]\n\nThese keys grant administrative access to your DocumentDB account and the resources in it. DocumentDB also supports the use of resource keys that allow clients to read, write, and delete resources in the DocumentDB account according to the permissions you've granted, without the need for an account key. For more information about resource keys, see [Permissions](documentdb-resources.md#permissions) and [View, copy, and regenerate access keys](documentdb-manage-account.md#keys).\n\nNow that you know how to connect to a DocumentDB account and create an instance of the **DocumentClient** class, let's take a look at working with DocumentDB resources.  \n\n## Step 4: Create a database\nA [database](documentdb-resources.md#databases) can be created by using the [CreateDatabaseAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdatabaseasync.aspx) method of the **DocumentClient** class. A database is the logical container of document storage partitioned across collections. Create your new database in your **GetStartedDemo** method after your **DocumentClient** creation.\n\n    // Create a database.\n    Database database = await client.CreateDatabaseAsync(\n        new Database\n            {\n                Id = \"FamilyRegistry\"\n            });\n\n##<a id=\"CreateColl\"></a>Step 5: Create a collection  \n\n> [AZURE.WARNING] **CreateDocumentCollectionAsync** will create a new S1 collection, which has pricing implications. For more details, please visit our [pricing page](https://azure.microsoft.com/pricing/details/documentdb/).\n\nA [collection](documentdb-resources.md#collections) can be created by using the [CreateDocumentCollectionAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentcollectionasync.aspx) method of the **DocumentClient** class. A collection is a container of JSON documents and associated JavaScript application logic. The newly created collection will be mapped to a [S1 performance level](documentdb-performance-levels.md). The database created in the previous step has a number of properties, one of which is the [CollectionsLink](https://msdn.microsoft.com/library/microsoft.azure.documents.database.collectionslink.aspx) property.  With that information, we can now create a collection after our database creation.\n\n    // Create a document collection.\n    DocumentCollection documentCollection = await client.CreateDocumentCollectionAsync(database.CollectionsLink,\n        new DocumentCollection\n            {\n                Id = \"FamilyCollection\"\n            });\n\n##<a id=\"CreateDoc\"></a>Step 6: Create documents\nA [document](documentdb-resources.md#documents) can be created by using the [CreateDocumentAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentasync.aspx) method of the **DocumentClient** class. Documents are user defined (arbitrary) JSON content. The collection created in the previous step has a number of properties, one of which is the [DocumentsLink](https://msdn.microsoft.com/library/microsoft.azure.documents.documentcollection.documentslink.aspx) property.  With that information, we can now insert one or more documents. If you already have data you'd like to store in your database, you can use DocumentDB's [Data Migration tool](documentdb-import-data.md).\n\nFirst, we need to create a **Parent**, **Child**, **Pet**, **Address** and **Family** class. Create these classes by adding the following internal sub-classes.\n\n    internal sealed class Parent\n    {\n        public string FamilyName { get; set; }\n        public string FirstName { get; set; }\n    }\n\n    internal sealed class Child\n    {\n        public string FamilyName { get; set; }\n        public string FirstName { get; set; }\n        public string Gender { get; set; }\n        public int Grade { get; set; }\n        public Pet[] Pets { get; set; }\n    }\n\n    internal sealed class Pet\n    {\n        public string GivenName { get; set; }\n    }\n\n    internal sealed class Address\n    {\n        public string State { get; set; }\n        public string County { get; set; }\n        public string City { get; set; }\n    }\n\n    internal sealed class Family\n    {\n        [JsonProperty(PropertyName = \"id\")]\n        public string Id { get; set; }\n        public string LastName { get; set; }\n        public Parent[] Parents { get; set; }\n        public Child[] Children { get; set; }\n        public Address Address { get; set; }\n        public bool IsRegistered { get; set; }\n    }\n\nNext, create your documents within your **GetStartedDemo** async method.\n\n    // Create the Andersen family document.\n    Family AndersenFamily = new Family\n    {\n        Id = \"AndersenFamily\",\n        LastName = \"Andersen\",\n        Parents =  new Parent[] {\n            new Parent { FirstName = \"Thomas\" },\n            new Parent { FirstName = \"Mary Kay\"}\n        },\n        Children = new Child[] {\n            new Child {\n                FirstName = \"Henriette Thaulow\",\n                Gender = \"female\",\n                Grade = 5,\n                Pets = new Pet[] {\n                    new Pet { GivenName = \"Fluffy\" }\n                }\n            }\n        },\n        Address = new Address { State = \"WA\", County = \"King\", City = \"Seattle\" },\n        IsRegistered = true\n    };\n\n    await client.CreateDocumentAsync(documentCollection.DocumentsLink, AndersenFamily);\n\n    // Create the WakeField family document.\n    Family WakefieldFamily = new Family\n    {\n        Id = \"WakefieldFamily\",\n        Parents = new Parent[] {\n            new Parent { FamilyName= \"Wakefield\", FirstName= \"Robin\" },\n            new Parent { FamilyName= \"Miller\", FirstName= \"Ben\" }\n        },\n        Children = new Child[] {\n            new Child {\n                FamilyName= \"Merriam\",\n                FirstName= \"Jesse\",\n                Gender= \"female\",\n                Grade= 8,\n                Pets= new Pet[] {\n                    new Pet { GivenName= \"Goofy\" },\n                    new Pet { GivenName= \"Shadow\" }\n                }\n            },\n            new Child {\n                FamilyName= \"Miller\",\n                FirstName= \"Lisa\",\n                Gender= \"female\",\n                Grade= 1\n            }\n        },\n        Address = new Address { State = \"NY\", County = \"Manhattan\", City = \"NY\" },\n        IsRegistered = false\n    };\n\n    await client.CreateDocumentAsync(documentCollection.DocumentsLink, WakefieldFamily);\n\nYou have now created the following database, collection, and documents in your DocumentDB account.\n\n![Diagram illustrating the hierarchical relationship between the account, the database, the collection, and the documents](./media/documentdb-get-started/account-database.png)\n\n##<a id=\"Query\"></a>Step 7: Query DocumentDB resources\n\nDocumentDB supports rich [queries](documentdb-sql-query.md) against JSON documents stored in each collection.  The following sample code shows various queries - using both DocumentDB SQL syntax as well as LINQ - that we can run against the documents we inserted in the previous step. Add these queries to your **GetStartedDemo** async method.\n\n    // Query the documents using DocumentDB SQL for the Andersen family.\n    var families = client.CreateDocumentQuery(documentCollection.DocumentsLink,\n        \"SELECT * \" +\n        \"FROM Families f \" +\n        \"WHERE f.id = \\\"AndersenFamily\\\"\");\n\n    foreach (var family in families)\n    {\n        Console.WriteLine(\"\\tRead {0} from SQL\", family);\n    }\n\n    // Query the documents using LINQ for the Andersen family.\n    families =\n        from f in client.CreateDocumentQuery(documentCollection.DocumentsLink)\n        where f.Id == \"AndersenFamily\"\n        select f;\n\n    foreach (var family in families)\n    {\n        Console.WriteLine(\"\\tRead {0} from LINQ\", family);\n    }\n\n    // Query the documents using LINQ lambdas for the Andersen family.\n    families = client.CreateDocumentQuery(documentCollection.DocumentsLink)\n        .Where(f => f.Id == \"AndersenFamily\")\n        .Select(f => f);\n\n    foreach (var family in families)\n    {\n        Console.WriteLine(\"\\tRead {0} from LINQ query\", family);\n    }\n\n    // Query the documents using DocumentSQL with one join.\n    var items = client.CreateDocumentQuery<dynamic>(documentCollection.DocumentsLink,\n        \"SELECT f.id, c.FirstName AS child \" +\n        \"FROM Families f \" +\n        \"JOIN c IN f.Children\");\n\n    foreach (var item in items.ToList())\n    {\n        Console.WriteLine(item);\n    }\n\n    // Query the documents using LINQ with one join.\n    items = client.CreateDocumentQuery<Family>(documentCollection.DocumentsLink)\n        .SelectMany(family => family.Children\n            .Select(children => new\n            {\n                family = family.Id,\n                child = children.FirstName\n            }));\n\n    foreach (var item in items.ToList())\n    {\n        Console.WriteLine(item);\n    }\n\nThe following diagram illustrates how the DocumentDB SQL query syntax is called against the collection you created, and the same logic applies to the LINQ query as well.\n\n![Diagram illustrating the scope and meaning of the query](./media/documentdb-get-started/collection-documents.png)\n\nThe [FROM](documentdb-sql-query.md/#from-clause) keyword is optional in the query because DocumentDB queries are already scoped to a single collection. Therefore, \"FROM Families f\" can be swapped with \"FROM root r\", or any other variable name you choose. DocumentDB will infer that Families, root,or the variable name you chose, reference the current collection by default.\n\n##<a id=\"DeleteDatabase\"></a>Step 8: Delete the database\n\nDeleting the created database will remove the database and all children resources (collections, documents, etc.). You can delete the database and the document client by adding the following code snippet to the end of your **GetStartedDemo** async method.\n\n    // Clean up/delete the database\n    await client.DeleteDatabaseAsync(database.SelfLink);\n    client.Dispose();\n\n##<a id=\"Run\"></a>Step 9: Run your application!\n\nYou are now ready to run your application. At the end of your **Main** method, add the following line of code, which will let you read the console output before the application finishes running.\n\n    Console.ReadLine();\n\nNow hit F5 in Visual Studio to build the application in debug mode.\n\nYou should now see the output of your get started app. The output will show the results of the queries we added and should match the example text below.\n\n    Read {\n      \"id\": \"AndersenFamily\",\n      \"LastName\": \"Andersen\",\n      \"Parents\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Thomas\"\n        },\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Mary Kay\"\n        }\n      ],\n      \"Children\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Henriette Thaulow\",\n          \"Gender\": \"female\",\n          \"Grade\": 5,\n          \"Pets\": [\n            {\n              \"GivenName\": \"Fluffy\"\n            }\n          ]\n        }\n      ],\n      \"Address\": {\n        \"State\": \"WA\",\n        \"County\": \"King\",\n        \"City\": \"Seattle\"\n      },\n      \"IsRegistered\": true,\n      \"_rid\": \"ybVlALUoqAEBAAAAAAAAAA==\",\n      \"_ts\": 1428372205,\n      \"_self\": \"dbs/ybVlAA==/colls/ybVlALUoqAE=/docs/ybVlALUoqAEBAAAAAAAAAA==/\",\n      \"_etag\": \"\\\"0000400c-0000-0000-0000-55233aed0000\\\"\",\n      \"_attachments\": \"attachments/\"\n    } from SQL\n    Read {\n      \"id\": \"AndersenFamily\",\n      \"LastName\": \"Andersen\",\n      \"Parents\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Thomas\"\n        },\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Mary Kay\"\n        }\n      ],\n      \"Children\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Henriette Thaulow\",\n          \"Gender\": \"female\",\n          \"Grade\": 5,\n          \"Pets\": [\n            {\n              \"GivenName\": \"Fluffy\"\n            }\n          ]\n        }\n      ],\n      \"Address\": {\n        \"State\": \"WA\",\n        \"County\": \"King\",\n        \"City\": \"Seattle\"\n      },\n      \"IsRegistered\": true,\n      \"_rid\": \"ybVlALUoqAEBAAAAAAAAAA==\",\n      \"_ts\": 1428372205,\n      \"_self\": \"dbs/ybVlAA==/colls/ybVlALUoqAE=/docs/ybVlALUoqAEBAAAAAAAAAA==/\",\n      \"_etag\": \"\\\"0000400c-0000-0000-0000-55233aed0000\\\"\",\n      \"_attachments\": \"attachments/\"\n    } from LINQ\n    Read {\n      \"id\": \"AndersenFamily\",\n      \"LastName\": \"Andersen\",\n      \"Parents\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Thomas\"\n        },\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Mary Kay\"\n        }\n      ],\n      \"Children\": [\n        {\n          \"FamilyName\": null,\n          \"FirstName\": \"Henriette Thaulow\",\n          \"Gender\": \"female\",\n          \"Grade\": 5,\n          \"Pets\": [\n            {\n              \"GivenName\": \"Fluffy\"\n            }\n          ]\n        }\n      ],\n      \"Address\": {\n        \"State\": \"WA\",\n        \"County\": \"King\",\n        \"City\": \"Seattle\"\n      },\n      \"IsRegistered\": true,\n      \"_rid\": \"ybVlALUoqAEBAAAAAAAAAA==\",\n      \"_ts\": 1428372205,\n      \"_self\": \"dbs/ybVlAA==/colls/ybVlALUoqAE=/docs/ybVlALUoqAEBAAAAAAAAAA==/\",\n      \"_etag\": \"\\\"0000400c-0000-0000-0000-55233aed0000\\\"\",\n      \"_attachments\": \"attachments/\"\n    } from LINQ query\n    {\n      \"id\": \"AndersenFamily\",\n      \"child\": \"Henriette Thaulow\"\n    }\n    {\n      \"id\": \"WakefieldFamily\",\n      \"child\": \"Jesse\"\n    }\n    {\n      \"id\": \"WakefieldFamily\",\n      \"child\": \"Lisa\"\n    }\n    { family = AndersenFamily, child = Henriette Thaulow }\n    { family = WakefieldFamily, child = Jesse }\n    { family = WakefieldFamily, child = Lisa }\n\n\n> [AZURE.NOTE] If you run the application multiple times without removing the database, you might run into the issue of creating a new database with an id already in use. To avoid this, you can check to see if a database, collection, or document with the same id already exists. For a reference on how this can be achieved, visit our [GitHub page](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started).\n\nContratulations! You've created your first DocumentDB app! \n\n##<a id=\"GetSolution\"></a> Get the complete solution\nTo build the GetStarted solution that contains all the samples in this article, you will need the following:\n\n-   [DocumentDB account][documentdb-create-account].\n-   The [GetStarted](https://github.com/Azure/azure-documentdb-net/tree/master/tutorials/get-started) solution available on GitHub.\n\nTo restore the references to the DocumentDB .NET SDK in Visual Studio 2013, right-click the **GetStarted** solution in Solution Explorer, and then click **Enable NuGet Package Restore**. Next, in the App.config file, update the EndpointUrl and AuthorizationKey values as described in [Connect to a DocumentDB account](#Connect).\n\n## Next steps\n\n-   Want a more complex ASP.NET MVC sample? See [Build a web application with ASP.NET MVC using DocumentDB](documentdb-dotnet-application.md).\n-   Learn how to [monitor a DocumentDB account](documentdb-monitor-accounts.md).\n-   Run queries against our sample dataset in the [Query Playground](https://www.documentdb.com/sql/demo).\n-   Learn more about the programming model in the Development section of the [DocumentDB documentation page](../../services/documentdb/).\n\n[doc-landing-page]: ../../services/documentdb/\n[documentdb-create-account]: documentdb-create-account.md\n[documentdb-manage]: documentdb-manage.md\n\n[keys]: media/documentdb-get-started/keys.png\n \n\ntest\n"
}