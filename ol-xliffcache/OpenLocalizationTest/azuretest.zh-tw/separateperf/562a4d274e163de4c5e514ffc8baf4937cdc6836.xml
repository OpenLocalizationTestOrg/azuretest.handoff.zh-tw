{
  "nodes": [
    {
      "content": "How to use Service Bus topics (PHP) | Microsoft Azure",
      "pos": [
        28,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus topics with PHP in Azure.",
      "pos": [
        101,
        155
      ]
    },
    {
      "content": "How to use Service Bus topics and subscriptions",
      "pos": [
        466,
        513
      ]
    },
    {
      "content": "This guide shows you how to use Service Bus topics and subscriptions.",
      "pos": [
        515,
        584
      ]
    },
    {
      "content": "The samples are written in PHP and use the <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](../php-download-sdk.md)</ept>.",
      "pos": [
        585,
        672
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating topics and subscriptions<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>creating subscription filters<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>sending messages to a topic<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>receiving messages from a subscription<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>deleting topics and subscriptions<ept id=\"p5\">**</ept>.",
      "pos": [
        673,
        896
      ]
    },
    {
      "content": "Create a PHP application",
      "pos": [
        989,
        1013
      ]
    },
    {
      "content": "The only requirement for creating a PHP application that accesses the Azure Blob service is the referencing of classes in the <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](../php-download-sdk.md)</ept> from within your code.",
      "pos": [
        1015,
        1207
      ]
    },
    {
      "content": "You can use any development tools to create your application, or Notepad.",
      "pos": [
        1208,
        1281
      ]
    },
    {
      "pos": [
        1285,
        1405
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Your PHP installation must also have the <bpt id=\"p1\">[</bpt>OpenSSL extension<ept id=\"p1\">](http://php.net/openssl)</ept> installed and enabled."
    },
    {
      "content": "In this guide, you will use service features which can be called within a PHP application locally, or in code running within an Azure web role, worker role, or website.",
      "pos": [
        1407,
        1575
      ]
    },
    {
      "content": "Get the Azure client libraries",
      "pos": [
        1580,
        1610
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        1695,
        1740
      ]
    },
    {
      "content": "To use the Service Bus APIs:",
      "pos": [
        1742,
        1770
      ]
    },
    {
      "pos": [
        1775,
        1854
      ],
      "content": "Reference the autoloader file using the <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require-once]</ept> statement."
    },
    {
      "content": "Reference any classes you might use.",
      "pos": [
        1858,
        1894
      ]
    },
    {
      "pos": [
        1896,
        2005
      ],
      "content": "The following example shows how to include the autoloader file and reference the <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This example (and other examples in this article) assumes you have installed the PHP Client Libraries for Azure via Composer.",
      "pos": [
        2009,
        2147
      ]
    },
    {
      "content": "If you installed the libraries manually or as a PEAR package, you must reference the <bpt id=\"p1\">**</bpt>WindowsAzure.php<ept id=\"p1\">**</ept> autoloader file.",
      "pos": [
        2148,
        2270
      ]
    },
    {
      "pos": [
        2358,
        2505
      ],
      "content": "In the examples below, the <ph id=\"ph1\">`require_once`</ph> statement will always be shown, but only the classes necessary for the example to execute are referenced."
    },
    {
      "content": "Set up a Service Bus connection",
      "pos": [
        2510,
        2541
      ]
    },
    {
      "content": "To instantiate an Azure Service Bus client you must first have a valid connection string in this format:",
      "pos": [
        2543,
        2647
      ]
    },
    {
      "pos": [
        2746,
        2841
      ],
      "content": "Where <bpt id=\"p1\">**</bpt>Endpoint<ept id=\"p1\">**</ept> is typically of the format <ph id=\"ph1\">`https://[yourNamespace].servicebus.windows.net`</ph>."
    },
    {
      "content": "To create any Azure service client you must use the <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> class.",
      "pos": [
        2843,
        2921
      ]
    },
    {
      "content": "You can:",
      "pos": [
        2922,
        2930
      ]
    },
    {
      "content": "Pass the connection string directly to it.",
      "pos": [
        2934,
        2976
      ]
    },
    {
      "pos": [
        2979,
        3084
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> to check multiple external sources for the connection string:"
    },
    {
      "content": "By default it comes with support for one external source - environmental variables.",
      "pos": [
        3091,
        3174
      ]
    },
    {
      "pos": [
        3181,
        3255
      ],
      "content": "You can add new sources by extending the <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "For the examples outlined here, the connection string will be passed directly.",
      "pos": [
        3257,
        3335
      ]
    },
    {
      "content": "How to: create a topic",
      "pos": [
        3655,
        3677
      ]
    },
    {
      "content": "Management operations for Service Bus topics can be performed via the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> class.",
      "pos": [
        3679,
        3779
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> object is constructed via the <bpt id=\"p2\">**</bpt>ServicesBuilder::createServiceBusService<ept id=\"p2\">**</ept> factory method with an appropriate connection string that encapsulates the token permissions to manage it.",
      "pos": [
        3780,
        3987
      ]
    },
    {
      "pos": [
        3989,
        4181
      ],
      "content": "The example below shows how to instantiate a <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> and call <bpt id=\"p2\">**</bpt>ServiceBusRestProxy-&gt;createTopic<ept id=\"p2\">**</ept> to create a topic named <ph id=\"ph1\">`mytopic`</ph> within a <ph id=\"ph2\">`MySBNamespace`</ph> service namespace:"
    },
    {
      "pos": [
        5007,
        5173
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You can use the <ph id=\"ph2\">`listTopics`</ph> method on <ph id=\"ph3\">`ServiceBusRestProxy`</ph> objects to check if a topic with a specified name already exists within a service namespace."
    },
    {
      "content": "How to: create a subscription",
      "pos": [
        5178,
        5207
      ]
    },
    {
      "content": "Topic subscriptions are also created with the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;createSubscription<ept id=\"p1\">**</ept> method.",
      "pos": [
        5209,
        5306
      ]
    },
    {
      "content": "Subscriptions are named and can have an optional filter that restricts the set of messages passed to the subscription's virtual queue.",
      "pos": [
        5307,
        5441
      ]
    },
    {
      "content": "Create a subscription with the default (MatchAll) filter",
      "pos": [
        5447,
        5503
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.",
      "pos": [
        5505,
        5625
      ]
    },
    {
      "content": "When the <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is used, all messages published to the topic are placed in the subscription's virtual queue.",
      "pos": [
        5626,
        5747
      ]
    },
    {
      "content": "The following example creates a subscription named 'mysubscription' and uses the default <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter.",
      "pos": [
        5748,
        5857
      ]
    },
    {
      "content": "Create subscriptions with filters",
      "pos": [
        6734,
        6767
      ]
    },
    {
      "content": "You can also set up filters that enable you to specify which messages sent to a topic should show up within a specific topic subscription.",
      "pos": [
        6769,
        6907
      ]
    },
    {
      "content": "The most flexible type of filter supported by subscriptions is the <bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept>, which implements a subset of SQL92.",
      "pos": [
        6908,
        7025
      ]
    },
    {
      "content": "SQL filters operate on the properties of the messages that are published to the topic.",
      "pos": [
        7026,
        7112
      ]
    },
    {
      "content": "For more information about SqlFilters, see <bpt id=\"p1\">[</bpt>SqlFilter.SqlExpression Property<ept id=\"p1\">][sqlfilter]</ept>.",
      "pos": [
        7113,
        7202
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Each rule on a subscription processes incoming messages independently, adding their result messages to the subscription.",
      "pos": [
        7206,
        7339
      ]
    },
    {
      "content": "In addition, each new subscription has a default <bpt id=\"p1\">**</bpt>Rule<ept id=\"p1\">**</ept> object with a filter that adds all messages from the topic to the subscription.",
      "pos": [
        7340,
        7477
      ]
    },
    {
      "content": "To receive only messages matching your filter, you must remove the default rule.",
      "pos": [
        7478,
        7558
      ]
    },
    {
      "content": "You can remove the default rule by using the <ph id=\"ph1\">`ServiceBusRestProxy-&gt;deleteRule`</ph> method.",
      "pos": [
        7559,
        7645
      ]
    },
    {
      "pos": [
        7647,
        7938
      ],
      "content": "The following example creates a subscription named <bpt id=\"p1\">**</bpt>HighMessages<ept id=\"p1\">**</ept> with a <bpt id=\"p2\">**</bpt>SqlFilter<ept id=\"p2\">**</ept> that only selects messages that have a custom <bpt id=\"p3\">**</bpt>MessageNumber<ept id=\"p3\">**</ept> property greater than 3 (see <bpt id=\"p4\">[</bpt>How to: Send messages to a topic<ept id=\"p4\">](#SendMessage)</ept> for information about adding custom properties to messages):"
    },
    {
      "pos": [
        8349,
        8469
      ],
      "content": "Note that the code above requires the use of an additional namespace: <ph id=\"ph1\">`WindowsAzure\\ServiceBus\\Models\\SubscriptionInfo`</ph>."
    },
    {
      "pos": [
        8471,
        8660
      ],
      "content": "Similarly, the following example creates a subscription named <bpt id=\"p1\">**</bpt>LowMessages<ept id=\"p1\">**</ept> with a <bpt id=\"p2\">**</bpt>SqlFilter<ept id=\"p2\">**</ept> that only selects messages that have a <bpt id=\"p3\">**</bpt>MessageNumber<ept id=\"p3\">**</ept> property less than or equal to 3:"
    },
    {
      "pos": [
        9068,
        9346
      ],
      "content": "Now, when a message is sent to the <ph id=\"ph1\">`mytopic`</ph> topic, it is always delivered to receivers subscribed to the <ph id=\"ph2\">`mysubscription`</ph> subscription, and selectively delivered to receivers subscribed to the <ph id=\"ph3\">`HighMessages`</ph> and <ph id=\"ph4\">`LowMessages`</ph> subscriptions (depending upon the message content)."
    },
    {
      "content": "How to: send messages to a topic",
      "pos": [
        9351,
        9383
      ]
    },
    {
      "content": "To send a message to a Service Bus topic, your application calls the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;sendTopicMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        9385,
        9503
      ]
    },
    {
      "content": "The following code shows how to send a message to the <ph id=\"ph1\">`mytopic`</ph> topic previously created within the",
      "pos": [
        9504,
        9603
      ]
    },
    {
      "content": "<ph id=\"ph1\">`MySBNamespace`</ph> service namespace.",
      "pos": [
        9604,
        9638
      ]
    },
    {
      "content": "Messages sent to Service Bus topics are instances of the <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> class.",
      "pos": [
        10543,
        10626
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set of standard properties and methods (such as <bpt id=\"p2\">**</bpt>getLabel<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>getTimeToLive<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>setLabel<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>setTimeToLive<ept id=\"p5\">**</ept>), as well as properties that can be used to hold custom application-specific properties.",
      "pos": [
        10627,
        10867
      ]
    },
    {
      "content": "The following example shows how to send 5 test messages to the <ph id=\"ph1\">`mytopic`</ph> topic previously created.",
      "pos": [
        10868,
        10966
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>setProperty<ept id=\"p1\">**</ept> method is used to add a custom property (<ph id=\"ph1\">`MessageNumber`</ph>) to each message.",
      "pos": [
        10967,
        11061
      ]
    },
    {
      "content": "Note that the <ph id=\"ph1\">`MessageNumber`</ph> property value varies on each message (you can use this value to determine which subscriptions receive it, as shown in the <bpt id=\"p1\">[</bpt>How to: Create a Subscription<ept id=\"p1\">](#CreateSubscription)</ept> section):",
      "pos": [
        11062,
        11277
      ]
    },
    {
      "content": "Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        11635,
        11805
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        11806,
        11935
      ]
    },
    {
      "content": "This upper limit on queue size is 5 GB.",
      "pos": [
        11936,
        11975
      ]
    },
    {
      "content": "How to: receive messages from a subscription",
      "pos": [
        11980,
        12024
      ]
    },
    {
      "content": "The best way to receive messages from a subscription is to use a <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;receiveSubscriptionMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        12026,
        12150
      ]
    },
    {
      "content": "Received messages can work in two different modes: <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> (the default) and <bpt id=\"p2\">**</bpt>PeekLock<ept id=\"p2\">**</ept>.",
      "pos": [
        12151,
        12254
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application.",
      "pos": [
        12256,
        12491
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode is the simplest model and works best for scenarios in which an",
      "pos": [
        12492,
        12580
      ]
    },
    {
      "content": "application can tolerate not processing a message in the event of a failure.",
      "pos": [
        12581,
        12657
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        12658,
        12785
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        12786,
        12995
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode, receiving a message becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        12997,
        13156
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        13157,
        13325
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by passing the received message to <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;deleteMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        13326,
        13554
      ]
    },
    {
      "content": "When Service Bus sees the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> call, it will mark the message as being consumed and remove it from the queue.",
      "pos": [
        13555,
        13677
      ]
    },
    {
      "pos": [
        13679,
        13798
      ],
      "content": "The following example shows how a message can be received and processed using <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (not the default mode)."
    },
    {
      "content": "How to: handle application crashes and unreadable messages",
      "pos": [
        15335,
        15393
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        15395,
        15530
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the received message (instead of the <bpt id=\"p2\">**</bpt>deleteMessage<ept id=\"p2\">**</ept> method).",
      "pos": [
        15531,
        15719
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        15720,
        15908
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.",
      "pos": [
        15910,
        16210
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> request is issued, then the message will be redelivered to the application when it restarts.",
      "pos": [
        16212,
        16408
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>; that is, each message is processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        16409,
        16571
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to applications to handle duplicate message delivery.",
      "pos": [
        16572,
        16735
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>getMessageId<ept id=\"p1\">**</ept> method of the message, which remains constant across delivery attempts.",
      "pos": [
        16736,
        16857
      ]
    },
    {
      "content": "How to delete topics and subscriptions",
      "pos": [
        16862,
        16900
      ]
    },
    {
      "content": "To delete a topic or a subscription, use the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;deleteTopic<ept id=\"p1\">**</ept> or the <bpt id=\"p2\">**</bpt>ServiceBusRestProxy-&gt;deleteSubscripton<ept id=\"p2\">**</ept> methods, respectively.",
      "pos": [
        16902,
        17056
      ]
    },
    {
      "content": "Note that deleting a topic also deletes any subscriptions that are registered with the topic.",
      "pos": [
        17057,
        17150
      ]
    },
    {
      "pos": [
        17152,
        17247
      ],
      "content": "The following example shows how to delete a topic (<ph id=\"ph1\">`mytopic`</ph>) and its registered subscriptions."
    },
    {
      "pos": [
        18027,
        18115
      ],
      "content": "By using the <bpt id=\"p1\">**</bpt>deleteSubscription<ept id=\"p1\">**</ept> method, you can delete a subscription independently:"
    },
    {
      "content": "Next steps",
      "pos": [
        18196,
        18206
      ]
    },
    {
      "pos": [
        18208,
        18344
      ],
      "content": "Now that you've learned the basics of Service Bus queues, see the MSDN topic <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept> for more information."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus topics (PHP) | Microsoft Azure\" \n    description=\"Learn how to use Service Bus topics with PHP in Azure.\" \n    services=\"service-bus\" \n    documentationCenter=\"php\" \n    authors=\"sethmanheim\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"PHP\" \n    ms.topic=\"article\" \n    ms.date=\"07/06/2015\" \n    ms.author=\"sethm\"/>\n\n\n# How to use Service Bus topics and subscriptions\n\nThis guide shows you how to use Service Bus topics and subscriptions. The samples are written in PHP and use the [Azure SDK for PHP](../php-download-sdk.md). The scenarios covered include **creating topics and subscriptions**, **creating subscription filters**, **sending messages to a topic**, **receiving messages from a subscription**, and **deleting topics and subscriptions**.\n\n[AZURE.INCLUDE [howto-service-bus-topics](../../includes/howto-service-bus-topics.md)]\n\n## Create a PHP application\n\nThe only requirement for creating a PHP application that accesses the Azure Blob service is the referencing of classes in the [Azure SDK for PHP](../php-download-sdk.md) from within your code. You can use any development tools to create your application, or Notepad.\n\n> [AZURE.NOTE] Your PHP installation must also have the [OpenSSL extension](http://php.net/openssl) installed and enabled.\n\nIn this guide, you will use service features which can be called within a PHP application locally, or in code running within an Azure web role, worker role, or website.\n\n## Get the Azure client libraries\n\n[AZURE.INCLUDE [get-client-libraries](../../includes/get-client-libraries.md)]\n\n## Configure your application to use Service Bus\n\nTo use the Service Bus APIs:\n\n1. Reference the autoloader file using the [require_once][require-once] statement.\n2. Reference any classes you might use.\n\nThe following example shows how to include the autoloader file and reference the **ServiceBusService** class.\n\n> [AZURE.NOTE] This example (and other examples in this article) assumes you have installed the PHP Client Libraries for Azure via Composer. If you installed the libraries manually or as a PEAR package, you must reference the **WindowsAzure.php** autoloader file.\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\nIn the examples below, the `require_once` statement will always be shown, but only the classes necessary for the example to execute are referenced.\n\n## Set up a Service Bus connection\n\nTo instantiate an Azure Service Bus client you must first have a valid connection string in this format:\n\n    Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\n\nWhere **Endpoint** is typically of the format `https://[yourNamespace].servicebus.windows.net`.\n\nTo create any Azure service client you must use the **ServicesBuilder** class. You can:\n\n* Pass the connection string directly to it.\n* Use the **CloudConfigurationManager (CCM)** to check multiple external sources for the connection string:\n    * By default it comes with support for one external source - environmental variables.\n    * You can add new sources by extending the **ConnectionStringSource** class.\n\nFor the examples outlined here, the connection string will be passed directly.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    \n    $connectionString = \"Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\";\n\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n\n## How to: create a topic\n\nManagement operations for Service Bus topics can be performed via the **ServiceBusRestProxy** class. A **ServiceBusRestProxy** object is constructed via the **ServicesBuilder::createServiceBusService** factory method with an appropriate connection string that encapsulates the token permissions to manage it.\n\nThe example below shows how to instantiate a **ServiceBusRestProxy** and call **ServiceBusRestProxy->createTopic** to create a topic named `mytopic` within a `MySBNamespace` service namespace:\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\TopicInfo;\n    \n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    \n    try {       \n        // Create topic.\n        $topicInfo = new TopicInfo(\"mytopic\");\n        $serviceBusRestProxy->createTopic($topicInfo);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/dd179357\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n> [AZURE.NOTE] You can use the `listTopics` method on `ServiceBusRestProxy` objects to check if a topic with a specified name already exists within a service namespace.\n\n## How to: create a subscription\n\nTopic subscriptions are also created with the **ServiceBusRestProxy->createSubscription** method. Subscriptions are named and can have an optional filter that restricts the set of messages passed to the subscription's virtual queue.\n\n### Create a subscription with the default (MatchAll) filter\n\nThe **MatchAll** filter is the default filter that is used if no filter is specified when a new subscription is created. When the **MatchAll** filter is used, all messages published to the topic are placed in the subscription's virtual queue. The following example creates a subscription named 'mysubscription' and uses the default **MatchAll** filter.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\SubscriptionInfo;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    \n    try {\n        // Create subscription.\n        $subscriptionInfo = new SubscriptionInfo(\"mysubscription\");\n        $serviceBusRestProxy->createSubscription(\"mytopic\", $subscriptionInfo);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/dd179357\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n### Create subscriptions with filters\n\nYou can also set up filters that enable you to specify which messages sent to a topic should show up within a specific topic subscription. The most flexible type of filter supported by subscriptions is the **SqlFilter**, which implements a subset of SQL92. SQL filters operate on the properties of the messages that are published to the topic. For more information about SqlFilters, see [SqlFilter.SqlExpression Property][sqlfilter].\n\n> [AZURE.NOTE] Each rule on a subscription processes incoming messages independently, adding their result messages to the subscription. In addition, each new subscription has a default **Rule** object with a filter that adds all messages from the topic to the subscription. To receive only messages matching your filter, you must remove the default rule. You can remove the default rule by using the `ServiceBusRestProxy->deleteRule` method.\n\nThe following example creates a subscription named **HighMessages** with a **SqlFilter** that only selects messages that have a custom **MessageNumber** property greater than 3 (see [How to: Send messages to a topic](#SendMessage) for information about adding custom properties to messages):\n\n    $subscriptionInfo = new SubscriptionInfo(\"HighMessages\");\n    $serviceBusRestProxy->createSubscription(\"mytopic\", $subscriptionInfo);\n\n    $serviceBusRestProxy->deleteRule(\"mytopic\", \"HighMessages\", '$Default');\n\n    $ruleInfo = new RuleInfo(\"HighMessagesRule\");\n    $ruleInfo->withSqlFilter(\"MessageNumber > 3\");\n    $ruleResult = $serviceBusRestProxy->createRule(\"mytopic\", \"HighMessages\", $ruleInfo);\n\nNote that the code above requires the use of an additional namespace: `WindowsAzure\\ServiceBus\\Models\\SubscriptionInfo`.\n\nSimilarly, the following example creates a subscription named **LowMessages** with a **SqlFilter** that only selects messages that have a **MessageNumber** property less than or equal to 3:\n\n    $subscriptionInfo = new SubscriptionInfo(\"LowMessages\");\n    $serviceBusRestProxy->createSubscription(\"mytopic\", $subscriptionInfo);\n\n    $serviceBusRestProxy->deleteRule(\"mytopic\", \"LowMessages\", '$Default');\n\n    $ruleInfo = new RuleInfo(\"LowMessagesRule\");\n    $ruleInfo->withSqlFilter(\"MessageNumber <= 3\");\n    $ruleResult = $serviceBusRestProxy->createRule(\"mytopic\", \"LowMessages\", $ruleInfo);\n\nNow, when a message is sent to the `mytopic` topic, it is always delivered to receivers subscribed to the `mysubscription` subscription, and selectively delivered to receivers subscribed to the `HighMessages` and `LowMessages` subscriptions (depending upon the message content).\n\n## How to: send messages to a topic\n\nTo send a message to a Service Bus topic, your application calls the **ServiceBusRestProxy->sendTopicMessage** method. The following code shows how to send a message to the `mytopic` topic previously created within the\n`MySBNamespace` service namespace.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\BrokeredMessage;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Create message.\n        $message = new BrokeredMessage();\n        $message->setBody(\"my message\");\n    \n        // Send message.\n        $serviceBusRestProxy->sendTopicMessage(\"mytopic\", $message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/hh780775\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\nMessages sent to Service Bus topics are instances of the **BrokeredMessage** class. **BrokeredMessage** objects have a set of standard properties and methods (such as **getLabel**, **getTimeToLive**, **setLabel**, and **setTimeToLive**), as well as properties that can be used to hold custom application-specific properties. The following example shows how to send 5 test messages to the `mytopic` topic previously created. The **setProperty** method is used to add a custom property (`MessageNumber`) to each message. Note that the `MessageNumber` property value varies on each message (you can use this value to determine which subscriptions receive it, as shown in the [How to: Create a Subscription](#CreateSubscription) section):\n\n    for($i = 0; $i < 5; $i++){\n        // Create message.\n        $message = new BrokeredMessage();\n        $message->setBody(\"my message \".$i);\n            \n        // Set custom property.\n        $message->setProperty(\"MessageNumber\", $i);\n            \n        // Send message.\n        $serviceBusRestProxy->sendTopicMessage(\"mytopic\", $message);\n    }\n\nService Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This upper limit on queue size is 5 GB.\n\n## How to: receive messages from a subscription\n\nThe best way to receive messages from a subscription is to use a **ServiceBusRestProxy->receiveSubscriptionMessage** method. Received messages can work in two different modes: **ReceiveAndDelete** (the default) and **PeekLock**.\n\nWhen using the **ReceiveAndDelete** mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application. **ReceiveAndDelete** mode is the simplest model and works best for scenarios in which an\napplication can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIn **PeekLock** mode, receiving a message becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by passing the received message to **ServiceBusRestProxy->deleteMessage**. When Service Bus sees the **deleteMessage** call, it will mark the message as being consumed and remove it from the queue.\n\nThe following example shows how a message can be received and processed using **PeekLock** mode (not the default mode). \n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\ReceiveMessageOptions;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Set receive mode to PeekLock (default is ReceiveAndDelete)\n        $options = new ReceiveMessageOptions();\n        $options->setPeekLock();\n    \n        // Get message.\n        $message = $serviceBusRestProxy->receiveSubscriptionMessage(\"mytopic\", \n                                                                    \"mysubscription\", \n                                                                    $options);\n        echo \"Body: \".$message->getBody().\"<br />\";\n        echo \"MessageID: \".$message->getMessageId().\"<br />\";\n        \n        /*---------------------------\n            Process message here.\n        ----------------------------*/\n        \n        // Delete message. Not necessary if peek lock is not set.\n        echo \"Deleting message...<br />\";\n        $serviceBusRestProxy->deleteMessage($message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/windowsazure/hh780735\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## How to: handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlockMessage** method on the received message (instead of the **deleteMessage** method). This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **deleteMessage** request is issued, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**; that is, each message is processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to applications to handle duplicate message delivery. This is often achieved using the **getMessageId** method of the message, which remains constant across delivery attempts.\n\n## How to delete topics and subscriptions\n\nTo delete a topic or a subscription, use the **ServiceBusRestProxy->deleteTopic** or the **ServiceBusRestProxy->deleteSubscripton** methods, respectively. Note that deleting a topic also deletes any subscriptions that are registered with the topic.\n\nThe following example shows how to delete a topic (`mytopic`) and its registered subscriptions.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\ServiceBus\\ServiceBusService;\n    use WindowsAzure\\ServiceBus\\ServiceBusSettings;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    \n    try {       \n        // Delete topic.\n        $serviceBusRestProxy->deleteTopic(\"mytopic\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/dd179357\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\nBy using the **deleteSubscription** method, you can delete a subscription independently:\n\n    $serviceBusRestProxy->deleteSubscription(\"mytopic\", \"mysubscription\");\n\n## Next steps\n\nNow that you've learned the basics of Service Bus queues, see the MSDN topic [Queues, Topics, and Subscriptions][] for more information.\n\n[What are Service Bus Topics and Subscriptions?]: #bkmk_WhatAreSvcBusTopics\n[Create a Service Namespace]: #bkmk_CreateSvcNamespace\n[Obtain the Default Management Credentials for the Namespace]: #bkmk_ObtainDefaultMngmntCredentials\n[Configure Your Application to Use Service Bus]: #bkmk_ConfigYourApp\n[How to: Create a Topic]: #bkmk_HowToCreateTopic\n[How to: Create Subscriptions]: #bkmk_HowToCreateSubscrip\n[How to: Send Messages to a Topic]: #bkmk_HowToSendMsgs\n[How to: Receive Messages from a Subscription]: #bkmk_HowToReceiveMsgs\n[How to: Handle Application Crashes and Unreadable Messages]: #bkmk_HowToHandleAppCrash\n[How to: Delete Topics and Subscriptions]: #bkmk_HowToDeleteTopics\n[Next Steps]: #bkmk_NextSteps\n[Service Bus Topics diagram]: ../../../DevCenter/Java/Media/SvcBusTopics_01_FlowDiagram.jpg\n[Azure Management Portal]: http://manage.windowsazure.com/\n[Service Bus Node screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-03.png\n[Create a New Namespace screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-04.png\n[Namespace List screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-05.png\n[Properties Pane screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-06.png\n[Default Key screenshot]: ../../../DevCenter/dotNet/Media/sb-queues-07.png\n[Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n[Available Namespaces screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_04_SvcBusNode_AvailNamespaces.jpg\n[sqlfilter]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n[require-once]: http://php.net/require_once\n \n"
}