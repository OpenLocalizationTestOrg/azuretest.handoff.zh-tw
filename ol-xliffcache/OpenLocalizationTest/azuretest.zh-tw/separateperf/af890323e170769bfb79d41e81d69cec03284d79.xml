{
  "nodes": [
    {
      "content": "Azure Notification Hubs Notify Users",
      "pos": [
        27,
        63
      ]
    },
    {
      "content": "Learn how to send push notifications to users in Azure.",
      "pos": [
        82,
        137
      ]
    },
    {
      "content": "Code samples written in Objective-C and the .NET API for the backend.",
      "pos": [
        138,
        207
      ]
    },
    {
      "content": "Azure Notification Hubs Notify Users",
      "pos": [
        527,
        563
      ]
    },
    {
      "content": "Overview",
      "pos": [
        715,
        723
      ]
    },
    {
      "content": "Push notification support in Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.",
      "pos": [
        725,
        982
      ]
    },
    {
      "content": "This tutorial shows you how to use Azure Notification Hubs to send push notifications to a specific app user on a specific device.",
      "pos": [
        983,
        1113
      ]
    },
    {
      "content": "An ASP.NET WebAPI backend is used to authenticate clients and to generate notifications, as shown in the guidance topic <bpt id=\"p1\">[</bpt>Registering from your app backend<ept id=\"p1\">](http://msdn.microsoft.com/library/dn743807.aspx)</ept>.",
      "pos": [
        1114,
        1319
      ]
    },
    {
      "pos": [
        1323,
        1834
      ],
      "content": "[AZURE.NOTE] This tutorial assumes that you have created and configured your notification hub as described in [Getting Started with Notification Hubs (iOS)](notification-hubs-ios-get-started.md). This tutorial is also the prerequisite to the [Secure Push (iOS)](notification-hubs-aspnet-backend-ios-secure-push.md) tutorial.\nIf you are using Mobile Services as your backend service, see the [Mobile Services version](../mobile-services-javascript-backend-ios-push-notifications-app-users.md) of this tutorial.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "[AZURE.NOTE] This tutorial assumes that you have created and configured your notification hub as described in [Getting Started with Notification Hubs (iOS)](notification-hubs-ios-get-started.md). This tutorial is also the prerequisite to the [Secure Push (iOS)](notification-hubs-aspnet-backend-ios-secure-push.md) tutorial.",
          "pos": [
            0,
            324
          ],
          "nodes": [
            {
              "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This tutorial assumes that you have created and configured your notification hub as described in <bpt id=\"p1\">[</bpt>Getting Started with Notification Hubs (iOS)<ept id=\"p1\">](notification-hubs-ios-get-started.md)</ept>.",
              "pos": [
                0,
                195
              ]
            },
            {
              "content": "This tutorial is also the prerequisite to the <bpt id=\"p1\">[</bpt>Secure Push (iOS)<ept id=\"p1\">](notification-hubs-aspnet-backend-ios-secure-push.md)</ept> tutorial.",
              "pos": [
                196,
                324
              ]
            }
          ]
        },
        {
          "content": "If you are using Mobile Services as your backend service, see the <bpt id=\"p1\">[</bpt>Mobile Services version<ept id=\"p1\">](../mobile-services-javascript-backend-ios-push-notifications-app-users.md)</ept> of this tutorial.",
          "pos": [
            325,
            509
          ]
        }
      ]
    },
    {
      "content": "Modify your iOS app",
      "pos": [
        1969,
        1988
      ]
    },
    {
      "pos": [
        1993,
        2136
      ],
      "content": "Open the Single Page view app you created in the <bpt id=\"p1\">[</bpt>Getting Started with Notification Hubs (iOS)<ept id=\"p1\">](notification-hubs-ios-get-started.md)</ept> tutorial."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> In this section we assume that your project is configured with an empty organization name.",
      "pos": [
        2144,
        2247
      ]
    },
    {
      "content": "If not, you will need to prepend your organization name to all class names.",
      "pos": [
        2248,
        2323
      ]
    },
    {
      "content": "In your Main.storyboard add the components shown in the screenshot below from the object library.",
      "pos": [
        2328,
        2425
      ]
    },
    {
      "pos": [
        2445,
        2638
      ],
      "content": "<bpt id=\"p1\">**</bpt>Username<ept id=\"p1\">**</ept>: A UITextField with placeholder text, <bpt id=\"p2\">*</bpt>Enter Username<ept id=\"p2\">*</ept>, immediately beneath the send results label and constrained to the left and right margins and beneath the send results label."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Password<ept id=\"p1\">**</ept>: A UITextField with placeholder text, <bpt id=\"p2\">*</bpt>Enter Password<ept id=\"p2\">*</ept>, immediately beneath the username text field and constrained to the left and right margins and beneath the username text field.",
      "pos": [
        2645,
        2840
      ]
    },
    {
      "content": "Check the <bpt id=\"p1\">**</bpt>Secure Text Entry<ept id=\"p1\">**</ept> option in the Attribute Inspector, under <bpt id=\"p2\">*</bpt>Return Key<ept id=\"p2\">*</ept>.",
      "pos": [
        2841,
        2927
      ]
    },
    {
      "pos": [
        2934,
        3096
      ],
      "content": "<bpt id=\"p1\">**</bpt>Log in<ept id=\"p1\">**</ept>: A UIButton labeled immediately beneath the password text field and uncheck the <bpt id=\"p2\">**</bpt>Enabled<ept id=\"p2\">**</ept> option in the Attributes Inspector, under <bpt id=\"p3\">*</bpt>Control-Content<ept id=\"p3\">*</ept>"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>WNS<ept id=\"p1\">**</ept>: Label and switch to enable sending the notification Windows Notification Service if it has been setup on the hub.",
      "pos": [
        3103,
        3225
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>Windows Getting Started<ept id=\"p1\">](notification-hubs-windows-store-dotnet-get-started.md)</ept> tutorial.",
      "pos": [
        3226,
        3324
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GCM<ept id=\"p1\">**</ept>: Label and switch to enable sending the notification to Google Cloud Messaging if it has been setup on the hub.",
      "pos": [
        3331,
        3450
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Android Getting Started<ept id=\"p1\">](notification-hubs-android-get-started.md)</ept> tutorial.",
      "pos": [
        3451,
        3532
      ]
    },
    {
      "pos": [
        3539,
        3644
      ],
      "content": "<bpt id=\"p1\">**</bpt>APNS<ept id=\"p1\">**</ept>: Label and switch to enable sending the notification to the Apple Platform Notification Service."
    },
    {
      "pos": [
        3651,
        3842
      ],
      "content": "<bpt id=\"p1\">**</bpt>Recipent Username<ept id=\"p1\">**</ept>:A UITextField with placeholder text, <bpt id=\"p2\">*</bpt>Recipient username tag<ept id=\"p2\">*</ept>, immediately beneath the GCM label and constrained to the left and right margins and beneath the GCM label."
    },
    {
      "pos": [
        3982,
        4074
      ],
      "content": "<bpt id=\"p1\">**</bpt>Ctrl<ept id=\"p1\">**</ept> drag from the components in the view to ViewController.h and add these new outlets."
    },
    {
      "content": "In ViewController.h, add the following <ph id=\"ph1\">`#define`</ph> just below your import statements.",
      "pos": [
        4884,
        4967
      ]
    },
    {
      "content": "Substitute the <bpt id=\"p1\">*</bpt>&lt;Enter Your Backend Endpoint\\&gt;<ept id=\"p1\">*</ept> placeholder with the Destination URL you used to deploy your app backend in the previous section.",
      "pos": [
        4968,
        5113
      ]
    },
    {
      "content": "For example, <bpt id=\"p1\">*</bpt>http://you_backend.azurewebsites.net<ept id=\"p1\">*</ept>.",
      "pos": [
        5114,
        5166
      ]
    },
    {
      "content": "In your project, create a new <bpt id=\"p1\">**</bpt>Cocoa Touch class<ept id=\"p1\">**</ept> named <bpt id=\"p2\">**</bpt>RegisterClient<ept id=\"p2\">**</ept> to interface with the ASP.NET back-end you created.",
      "pos": [
        5238,
        5366
      ]
    },
    {
      "content": "Create the class inheriting from <ph id=\"ph1\">`NSObject`</ph>.",
      "pos": [
        5367,
        5411
      ]
    },
    {
      "content": "Then add the following code in the RegisterClient.h.",
      "pos": [
        5412,
        5464
      ]
    },
    {
      "pos": [
        5794,
        5850
      ],
      "content": "In the RegisterClient.m update the <ph id=\"ph1\">`@interface`</ph> section:"
    },
    {
      "pos": [
        6553,
        6639
      ],
      "content": "Replace the <ph id=\"ph1\">`@implementation`</ph> section in the RegisterClient.m with the following code."
    },
    {
      "content": "In ViewController.h, add a <ph id=\"ph1\">`#import`</ph> statement for RegisterClient.h.",
      "pos": [
        14484,
        14552
      ]
    },
    {
      "content": "Then add a declaration for the device token and reference to a <ph id=\"ph1\">`RegisterClient`</ph> instance in the <ph id=\"ph2\">`@interface`</ph> section:",
      "pos": [
        14553,
        14670
      ]
    },
    {
      "pos": [
        14841,
        14923
      ],
      "content": "In ViewController.m, add a private method declaration in the <ph id=\"ph1\">`@interface`</ph> section:"
    },
    {
      "pos": [
        15288,
        15629
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The following snippet is not a secure authentication scheme, you should substitute the implementation of the <bpt id=\"p1\">**</bpt>createAndSetAuthenticationHeaderWithUsername:AndPassword:<ept id=\"p1\">**</ept> with your specific authentication mechanism that generates an authentication token to be consumed by the register client class, e.g. OAuth, Active Directory."
    },
    {
      "pos": [
        15634,
        15800
      ],
      "content": "Then in the <ph id=\"ph1\">`@implementation`</ph> section of ViewController.m add the following code which adds the implementation for setting the device token and authentication header."
    },
    {
      "content": "Note how setting the device token enables the log in button.",
      "pos": [
        16724,
        16784
      ]
    },
    {
      "content": "This is becasue as a part of the login action, the view controller registers for push notifications with the app backend.",
      "pos": [
        16785,
        16906
      ]
    },
    {
      "content": "Hence, we do not want Log In action to be accessible till the device token has been properly set up.",
      "pos": [
        16907,
        17007
      ]
    },
    {
      "content": "You can decouple the log in from the push registration as long as the former happens before the latter.",
      "pos": [
        17008,
        17111
      ]
    },
    {
      "pos": [
        17117,
        17295
      ],
      "content": "In ViewController.m, use the following snippets to implement the action method for your <bpt id=\"p1\">**</bpt>Log In<ept id=\"p1\">**</ept> button and a method to send the notification message using the ASP.NET backend."
    },
    {
      "pos": [
        20758,
        20880
      ],
      "content": "Update the action for the <bpt id=\"p1\">**</bpt>Send Notification<ept id=\"p1\">**</ept> button to use the ASP.NET backend and send to any PNS enabled by a switch."
    },
    {
      "pos": [
        21712,
        21844
      ],
      "content": "In function <bpt id=\"p1\">**</bpt>ViewDidLoad<ept id=\"p1\">**</ept>, add the following to instantiate the RegisterClient instance and set the delegate for your text fields."
    },
    {
      "pos": [
        22074,
        22325
      ],
      "content": "Now in <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept>, remove all the content of the method <bpt id=\"p2\">**</bpt>application:didRegisterForPushNotificationWithDeviceToken:<ept id=\"p2\">**</ept> and replace it with the following to make sure that the view controller contains the latest device token retrieved from APNs:"
    },
    {
      "pos": [
        22708,
        22778
      ],
      "content": "Finally in <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept>, make sure you have the following method:"
    },
    {
      "content": "Test the Application",
      "pos": [
        23053,
        23073
      ]
    },
    {
      "content": "In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).",
      "pos": [
        23078,
        23177
      ]
    },
    {
      "content": "In the iOS app UI, enter a username and password.",
      "pos": [
        23182,
        23231
      ]
    },
    {
      "content": "These can be any string, but they must both be the same string value.",
      "pos": [
        23232,
        23301
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Log In<ept id=\"p1\">**</ept>.",
      "pos": [
        23302,
        23324
      ]
    },
    {
      "content": "You should see a pop-up informing you of registration success.",
      "pos": [
        23342,
        23404
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.",
      "pos": [
        23405,
        23418
      ]
    },
    {
      "pos": [
        23435,
        23551
      ],
      "content": "In the *<bpt id=\"p1\">*</bpt>Recipient username tag<ept id=\"p1\">*</ept> text field, enter the user name tag used with the registration from another device."
    },
    {
      "content": "Enter a notification message and click <bpt id=\"p1\">**</bpt>Send Notification<ept id=\"p1\">**</ept>.",
      "pos": [
        23555,
        23616
      ]
    },
    {
      "content": "Only the devices that have a registration with the recipient user name tag receive the notification message.",
      "pos": [
        23618,
        23726
      ]
    },
    {
      "content": "It is only sent to those users.",
      "pos": [
        23728,
        23759
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure Notification Hubs Notify Users\"\n    description=\"Learn how to send push notifications to users in Azure. Code samples written in Objective-C and the .NET API for the backend.\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"\n    services=\"notification-hubs\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"06/16/2015\"\n    ms.author=\"wesmc\"/>\n\n#Azure Notification Hubs Notify Users\n\n[AZURE.INCLUDE [notification-hubs-selector-aspnet-backend-notify-users](../../includes/notification-hubs-selector-aspnet-backend-notify-users.md)]\n\n##Overview\n\nPush notification support in Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms. This tutorial shows you how to use Azure Notification Hubs to send push notifications to a specific app user on a specific device. An ASP.NET WebAPI backend is used to authenticate clients and to generate notifications, as shown in the guidance topic [Registering from your app backend](http://msdn.microsoft.com/library/dn743807.aspx).\n\n> [AZURE.NOTE] This tutorial assumes that you have created and configured your notification hub as described in [Getting Started with Notification Hubs (iOS)](notification-hubs-ios-get-started.md). This tutorial is also the prerequisite to the [Secure Push (iOS)](notification-hubs-aspnet-backend-ios-secure-push.md) tutorial.\n> If you are using Mobile Services as your backend service, see the [Mobile Services version](../mobile-services-javascript-backend-ios-push-notifications-app-users.md) of this tutorial.\n\n\n\n[AZURE.INCLUDE [notification-hubs-aspnet-backend-notifyusers](../../includes/notification-hubs-aspnet-backend-notifyusers.md)]\n\n## Modify your iOS app\n\n1. Open the Single Page view app you created in the [Getting Started with Notification Hubs (iOS)](notification-hubs-ios-get-started.md) tutorial.\n\n    > [AZURE.NOTE] In this section we assume that your project is configured with an empty organization name. If not, you will need to prepend your organization name to all class names.\n\n2. In your Main.storyboard add the components shown in the screenshot below from the object library.\n\n    ![][1]\n\n    + **Username**: A UITextField with placeholder text, *Enter Username*, immediately beneath the send results label and constrained to the left and right margins and beneath the send results label.\n    + **Password**: A UITextField with placeholder text, *Enter Password*, immediately beneath the username text field and constrained to the left and right margins and beneath the username text field. Check the **Secure Text Entry** option in the Attribute Inspector, under *Return Key*.\n    + **Log in**: A UIButton labeled immediately beneath the password text field and uncheck the **Enabled** option in the Attributes Inspector, under *Control-Content*\n    + **WNS**: Label and switch to enable sending the notification Windows Notification Service if it has been setup on the hub. See the [Windows Getting Started](notification-hubs-windows-store-dotnet-get-started.md) tutorial.\n    + **GCM**: Label and switch to enable sending the notification to Google Cloud Messaging if it has been setup on the hub. See [Android Getting Started](notification-hubs-android-get-started.md) tutorial.\n    + **APNS**: Label and switch to enable sending the notification to the Apple Platform Notification Service.\n    + **Recipent Username**:A UITextField with placeholder text, *Recipient username tag*, immediately beneath the GCM label and constrained to the left and right margins and beneath the GCM label.\n\n\n    Some components were added in the [Getting Started with Notification Hubs (iOS)](notification-hubs-ios-get-started.md) tutorial.\n\n3. **Ctrl** drag from the components in the view to ViewController.h and add these new outlets.\n\n        @property (weak, nonatomic) IBOutlet UITextField *UsernameField;\n        @property (weak, nonatomic) IBOutlet UITextField *PasswordField;\n        @property (weak, nonatomic) IBOutlet UITextField *RecipientField;\n        @property (weak, nonatomic) IBOutlet UITextField *NotificationField;\n\n        // Used to enable the buttons on the UI\n        @property (weak, nonatomic) IBOutlet UIButton *LogInButton;\n        @property (weak, nonatomic) IBOutlet UIButton *SendNotificationButton;\n\n        // Used to enabled sending notifications across platforms\n        @property (weak, nonatomic) IBOutlet UISwitch *WNSSwitch;\n        @property (weak, nonatomic) IBOutlet UISwitch *GCMSwitch;\n        @property (weak, nonatomic) IBOutlet UISwitch *APNSSwitch;\n\n        - (IBAction)LogInAction:(id)sender;\n\n4. In ViewController.h, add the following `#define` just below your import statements. Substitute the *<Enter Your Backend Endpoint\\>* placeholder with the Destination URL you used to deploy your app backend in the previous section. For example, *http://you_backend.azurewebsites.net*.\n\n        #define BACKEND_ENDPOINT @\"<Enter Your Backend Endpoint>\"\n\n4. In your project, create a new **Cocoa Touch class** named **RegisterClient** to interface with the ASP.NET back-end you created. Create the class inheriting from `NSObject`. Then add the following code in the RegisterClient.h.\n\n        @interface RegisterClient : NSObject\n\n        @property (strong, nonatomic) NSString* authenticationHeader;\n\n        -(void) registerWithDeviceToken:(NSData*)token tags:(NSSet*)tags\n            andCompletion:(void(^)(NSError*))completion;\n\n        -(instancetype) initWithEndpoint:(NSString*)Endpoint;\n\n        @end\n\n5. In the RegisterClient.m update the `@interface` section:\n\n        @interface RegisterClient ()\n\n        @property (strong, nonatomic) NSURLSession* session;\n        @property (strong, nonatomic) NSURLSession* endpoint;\n\n        -(void) tryToRegisterWithDeviceToken:(NSData*)token tags:(NSSet*)tags retry:(BOOL)retry\n                    andCompletion:(void(^)(NSError*))completion;\n        -(void) retrieveOrRequestRegistrationIdWithDeviceToken:(NSString*)token\n                    completion:(void(^)(NSString*, NSError*))completion;\n        -(void) upsertRegistrationWithRegistrationId:(NSString*)registrationId deviceToken:(NSString*)token\n                    tags:(NSSet*)tags andCompletion:(void(^)(NSURLResponse*, NSError*))completion;\n\n        @end\n\n6. Replace the `@implementation` section in the RegisterClient.m with the following code.\n\n\n        @implementation RegisterClient\n\n        // Globals used by RegisterClient\n        NSString *const RegistrationIdLocalStorageKey = @\"RegistrationId\";\n\n        -(instancetype) initWithEndpoint:(NSString*)Endpoint\n        {\n            self = [super init];\n            if (self) {\n                NSURLSessionConfiguration* config = [NSURLSessionConfiguration defaultSessionConfiguration];\n                _session = [NSURLSession sessionWithConfiguration:config delegate:nil delegateQueue:nil];\n                _endpoint = Endpoint;\n            }\n            return self;\n        }\n\n        -(void) registerWithDeviceToken:(NSData*)token tags:(NSSet*)tags\n                    andCompletion:(void(^)(NSError*))completion\n        {\n            [self tryToRegisterWithDeviceToken:token tags:tags retry:YES andCompletion:completion];\n        }\n\n        -(void) tryToRegisterWithDeviceToken:(NSData*)token tags:(NSSet*)tags retry:(BOOL)retry\n                    andCompletion:(void(^)(NSError*))completion\n        {\n            NSSet* tagsSet = tags?tags:[[NSSet alloc] init];\n\n            NSString *deviceTokenString = [[token description]\n                stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"<>\"]];\n            deviceTokenString = [[deviceTokenString stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"]\n                                    uppercaseString];\n\n            [self retrieveOrRequestRegistrationIdWithDeviceToken: deviceTokenString\n                completion:^(NSString* registrationId, NSError *error) {\n                NSLog(@\"regId: %@\", registrationId);\n                if (error) {\n                    completion(error);\n                    return;\n                }\n\n                [self upsertRegistrationWithRegistrationId:registrationId deviceToken:deviceTokenString\n                    tags:tagsSet andCompletion:^(NSURLResponse * response, NSError *error) {\n                    if (error) {\n                        completion(error);\n                        return;\n                    }\n\n                    NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n                    if (httpResponse.statusCode == 200) {\n                        completion(nil);\n                    } else if (httpResponse.statusCode == 410 && retry) {\n                        [self tryToRegisterWithDeviceToken:token tags:tags retry:NO andCompletion:completion];\n                    } else {\n                        NSLog(@\"Registration error with response status: %ld\", (long)httpResponse.statusCode);\n\n                        completion([NSError errorWithDomain:@\"Registration\" code:httpResponse.statusCode\n                                    userInfo:nil]);\n                    }\n\n                }];\n            }];\n        }\n\n        -(void) upsertRegistrationWithRegistrationId:(NSString*)registrationId deviceToken:(NSData*)token\n                    tags:(NSSet*)tags andCompletion:(void(^)(NSURLResponse*, NSError*))completion\n        {\n            NSDictionary* deviceRegistration = @{@\"Platform\" : @\"apns\", @\"Handle\": token,\n                                                    @\"Tags\": [tags allObjects]};\n            NSData* jsonData = [NSJSONSerialization dataWithJSONObject:deviceRegistration\n                                options:NSJSONWritingPrettyPrinted error:nil];\n\n            NSLog(@\"JSON registration: %@\", [[NSString alloc] initWithData:jsonData\n                                                encoding:NSUTF8StringEncoding]);\n\n            NSString* endpoint = [NSString stringWithFormat:@\"%@/api/register/%@\", _endpoint,\n                                    registrationId];\n            NSURL* requestURL = [NSURL URLWithString:endpoint];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"PUT\"];\n            [request setHTTPBody:jsonData];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\",\n                                                    self.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n            [request setValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];\n\n            NSURLSessionDataTask* dataTask = [self.session dataTaskWithRequest:request\n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n            {\n                if (!error)\n                {\n                    completion(response, error);\n                }\n                else\n                {\n                    NSLog(@\"Error request: %@\", error);\n                    completion(nil, error);\n                }\n            }];\n            [dataTask resume];\n        }\n\n        -(void) retrieveOrRequestRegistrationIdWithDeviceToken:(NSString*)token\n                    completion:(void(^)(NSString*, NSError*))completion\n        {\n            NSString* registrationId = [[NSUserDefaults standardUserDefaults]\n                                        objectForKey:RegistrationIdLocalStorageKey];\n\n            if (registrationId)\n            {\n                completion(registrationId, nil);\n                return;\n            }\n\n            // request new one & save\n            NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/api/register?handle=%@\",\n                                    _endpoint, token]];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"POST\"];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\",\n                                                    self.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            NSURLSessionDataTask* dataTask = [self.session dataTaskWithRequest:request\n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (!error && httpResponse.statusCode == 200)\n                {\n                    NSString* registrationId = [[NSString alloc] initWithData:data\n                        encoding:NSUTF8StringEncoding];\n\n                    // remove quotes\n                    registrationId = [registrationId substringWithRange:NSMakeRange(1,\n                                        [registrationId length]-2)];\n\n                    [[NSUserDefaults standardUserDefaults] setObject:registrationId\n                        forKey:RegistrationIdLocalStorageKey];\n                    [[NSUserDefaults standardUserDefaults] synchronize];\n\n                    completion(registrationId, nil);\n                }\n                else\n                {\n                    NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\n                    if (error)\n                        completion(nil, error);\n                    else {\n                        completion(nil, [NSError errorWithDomain:@\"Registration\" code:httpResponse.statusCode\n                                    userInfo:nil]);\n                    }\n                }\n            }];\n            [dataTask resume];\n        }\n\n        @end\n\n    The code above implements the logic explained in the guidance article [Registering from your app backend](http://msdn.microsoft.com/library/dn743807.aspx) using NSURLSession to perform REST calls to your app backend, and NSUserDefaults to locally store the registrationId returned by the notification hub.\n\n    Note that this class requires its property **authorizationHeader** to be set in order to work properly. This property is set by the **ViewController** class after the log in.\n\n7. In ViewController.h, add a `#import` statement for RegisterClient.h. Then add a declaration for the device token and reference to a `RegisterClient` instance in the `@interface` section:\n\n        #import \"RegisterClient.h\"\n\n        @property (strong, nonatomic) NSData* deviceToken;\n        @property (strong, nonatomic) RegisterClient* registerClient;\n\n8. In ViewController.m, add a private method declaration in the `@interface` section:\n\n        @interface ViewController () <UITextFieldDelegate, NSURLConnectionDataDelegate, NSXMLParserDelegate>\n\n        // create the Authorization header to perform Basic authentication with your app back-end\n        -(void) createAndSetAuthenticationHeaderWithUsername:(NSString*)username\n                        AndPassword:(NSString*)password;\n\n        @end\n\n> [AZURE.NOTE] The following snippet is not a secure authentication scheme, you should substitute the implementation of the **createAndSetAuthenticationHeaderWithUsername:AndPassword:** with your specific authentication mechanism that generates an authentication token to be consumed by the register client class, e.g. OAuth, Active Directory.\n\n9. Then in the `@implementation` section of ViewController.m add the following code which adds the implementation for setting the device token and authentication header.\n\n        -(void) setDeviceToken: (NSData*) deviceToken\n        {\n            _deviceToken = deviceToken;\n            self.LogInButton.enabled = YES;\n        }\n\n        -(void) createAndSetAuthenticationHeaderWithUsername:(NSString*)username\n                        AndPassword:(NSString*)password;\n        {\n            NSString* headerValue = [NSString stringWithFormat:@\"%@:%@\", username, password];\n\n            NSData* encodedData = [[headerValue dataUsingEncoding:NSUTF8StringEncoding] base64EncodedDataWithOptions:NSDataBase64EncodingEndLineWithCarriageReturn];\n\n            self.registerClient.authenticationHeader = [[NSString alloc] initWithData:encodedData\n                                                        encoding:NSUTF8StringEncoding];\n        }\n\n        -(BOOL)textFieldShouldReturn:(UITextField *)textField\n        {\n            [textField resignFirstResponder];\n            return YES;\n        }\n\n    Note how setting the device token enables the log in button. This is becasue as a part of the login action, the view controller registers for push notifications with the app backend. Hence, we do not want Log In action to be accessible till the device token has been properly set up. You can decouple the log in from the push registration as long as the former happens before the latter.\n\n10. In ViewController.m, use the following snippets to implement the action method for your **Log In** button and a method to send the notification message using the ASP.NET backend.\n\n        - (IBAction)LogInAction:(id)sender {\n            // create authentication header and set it in register client\n            NSString* username = self.UsernameField.text;\n            NSString* password = self.PasswordField.text;\n\n            [self createAndSetAuthenticationHeaderWithUsername:username AndPassword:password];\n\n            __weak ViewController* selfie = self;\n            [self.registerClient registerWithDeviceToken:self.deviceToken tags:nil\n                andCompletion:^(NSError* error) {\n                if (!error) {\n                    dispatch_async(dispatch_get_main_queue(),\n                    ^{\n                        selfie.SendNotificationButton.enabled = YES;\n                        [self MessageBox:@\"Success\" message:@\"Registered successfully!\"];\n                    });\n                }\n            }];\n        }\n\n\n        - (void)SendNotificationASPNETBackend:(NSString*)pns UsernameTag:(NSString*)usernameTag\n                    Message:(NSString*)message\n        {\n            NSURLSession* session = [NSURLSession\n                sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:nil\n                delegateQueue:nil];\n\n            // Pass the pns and username tag as parameters with the REST URL to the ASP.NET backend\n            NSURL* requestURL = [NSURL URLWithString:[NSString\n                stringWithFormat:@\"%@/api/notifications?pns=%@&to_tag=%@\", BACKEND_ENDPOINT, pns,\n                usernameTag]];\n\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"POST\"];\n\n            // Get the mock authenticationheader from the register client\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\",\n                self.registerClient.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            //Add the notification message body\n            [request setValue:@\"application/json;charset=utf-8\" forHTTPHeaderField:@\"Content-Type\"];\n            [request setHTTPBody:[message dataUsingEncoding:NSUTF8StringEncoding]];\n\n            // Execute the send notification REST API on the ASP.NET Backend\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request\n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (error || httpResponse.statusCode != 200)\n                {\n                    NSString* status = [NSString stringWithFormat:@\"Error Status for %@: %d\\nError: %@\\n\",\n                                        pns, httpResponse.statusCode, error];\n                    dispatch_async(dispatch_get_main_queue(),\n                    ^{\n                        // Append text because all 3 PNS calls may also have information to view\n                        [self.sendResults setText:[self.sendResults.text stringByAppendingString:status]];\n                    });\n                    NSLog(status);\n                }\n\n                if (data != NULL)\n                {\n                    xmlParser = [[NSXMLParser alloc] initWithData:data];\n                    [xmlParser setDelegate:self];\n                    [xmlParser parse];\n                }\n            }];\n            [dataTask resume];\n        }\n\n\n11. Update the action for the **Send Notification** button to use the ASP.NET backend and send to any PNS enabled by a switch.\n\n\n        - (IBAction)SendNotificationMessage:(id)sender\n        {\n            //[self SendNotificationRESTAPI];\n            [self SendToEnabledPlatforms];\n        }\n\n\n        -(void)SendToEnabledPlatforms\n        {\n            NSString* json = [NSString stringWithFormat:@\"\\\"%@\\\"\",self.notificationMessage.text];\n\n            [self.sendResults setText:@\"\"];\n\n            if ([self.WNSSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"wns\" UsernameTag:self.RecipientField.text Message:json];\n\n            if ([self.GCMSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"gcm\" UsernameTag:self.RecipientField.text Message:json];\n\n            if ([self.APNSSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"apns\" UsernameTag:self.RecipientField.text Message:json];\n        }\n\n\n\n11. In function **ViewDidLoad**, add the following to instantiate the RegisterClient instance and set the delegate for your text fields.\n\n        self.UsernameField.delegate = self;\n        self.PasswordField.delegate = self;\n        self.RecipientField.delegate = self;\n        self.registerClient = [[RegisterClient alloc] initWithEndpoint:BACKEND_ENDPOINT];\n\n12. Now in **AppDelegate.m**, remove all the content of the method **application:didRegisterForPushNotificationWithDeviceToken:** and replace it with the following to make sure that the view controller contains the latest device token retrieved from APNs:\n\n        // Add import to the top of the file\n        #import \"ViewController.h\"\n\n        - (void)application:(UIApplication *)application\n                    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n        {\n            ViewController* rvc = (ViewController*) self.window.rootViewController;\n            rvc.deviceToken = deviceToken;\n        }\n\n13. Finally in **AppDelegate.m**, make sure you have the following method:\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification: (NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            [self MessageBox:@\"Notification\" message:[[userInfo objectForKey:@\"aps\"] valueForKey:@\"alert\"]];\n        }\n\n## Test the Application\n\n1. In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).\n\n2. In the iOS app UI, enter a username and password. These can be any string, but they must both be the same string value. Then click **Log In**.\n\n    ![][2]\n\n\n3. You should see a pop-up informing you of registration success. Click **OK**.\n\n    ![][3]\n\n4. In the **Recipient username tag* text field, enter the user name tag used with the registration from another device.\n5. Enter a notification message and click **Send Notification**.  Only the devices that have a registration with the recipient user name tag receive the notification message.  It is only sent to those users.\n\n    ![][4]\n\n\n[1]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-interface.png\n[2]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-enter-user-pwd.png\n[3]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-registered.png\n[4]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-enter-msg.png\n"
}