<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to View Azure Service Fabric entities aggregated health</source>
          <target state="new">How to View Azure Service Fabric entities aggregated health</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes how to query, view and evaluate the Azure Service Fabric entities aggregated health, through health queries and general queries.</source>
          <target state="new">Describes how to query, view and evaluate the Azure Service Fabric entities aggregated health, through health queries and general queries.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to view Service Fabric health reports</source>
          <target state="new">How to view Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric introduces a <bpt id="p1">[</bpt>Health Model<ept id="p1">](service-fabric-health-introduction.md)</ept> comprised of health entities on which System components and watchdogs can report local conditions they are monitoring.</source>
          <target state="new">Service Fabric introduces a <bpt id="p1">[</bpt>Health Model<ept id="p1">](service-fabric-health-introduction.md)</ept> comprised of health entities on which System components and watchdogs can report local conditions they are monitoring.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#health-store)</ept> aggregates all health data to determine whether entities are healthy.</source>
          <target state="new">The <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#health-store)</ept> aggregates all health data to determine whether entities are healthy.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Out of the box, the cluster is populated with health reports sent by the System components.</source>
          <target state="new">Out of the box, the cluster is populated with health reports sent by the System components.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Read more at <bpt id="p1">[</bpt>Using System health reports for troubleshooting<ept id="p1">](service-fabric-understand-and-troubleshoot-with-system-health-reports.md)</ept>.</source>
          <target state="new">Read more at <bpt id="p1">[</bpt>Using System health reports for troubleshooting<ept id="p1">](service-fabric-understand-and-troubleshoot-with-system-health-reports.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Service Fabric provides multiple ways to get the entities aggregated health:</source>
          <target state="new">Service Fabric provides multiple ways to get the entities aggregated health:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Fabric Explorer<ept id="p1">](service-fabric-visualizing-your-cluster.md)</ept> or other visualization tools</source>
          <target state="new"><bpt id="p1">[</bpt>Service Fabric Explorer<ept id="p1">](service-fabric-visualizing-your-cluster.md)</ept> or other visualization tools</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Health queries (through Powerhsell/API/REST)</source>
          <target state="new">Health queries (through Powerhsell/API/REST)</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>General queries that return a list of entities that have health as one of the properties (through Powershell/API/REST)</source>
          <target state="new">General queries that return a list of entities that have health as one of the properties (through Powershell/API/REST)</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To demonstrate these options, let's use a local cluster with <bpt id="p1">**</bpt>5 nodes<ept id="p1">**</ept>.</source>
          <target state="new">To demonstrate these options, let's use a local cluster with <bpt id="p1">**</bpt>5 nodes<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Next to <bpt id="p1">**</bpt>fabric:/System<ept id="p1">**</ept> application (which exists out of the box), there are some other applications deployed, one of which is <bpt id="p2">**</bpt>fabric:/WordCount<ept id="p2">**</ept>.</source>
          <target state="new">Next to <bpt id="p1">**</bpt>fabric:/System<ept id="p1">**</ept> application (which exists out of the box), there are some other applications deployed, one of which is <bpt id="p2">**</bpt>fabric:/WordCount<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This application contains a stateful service configured with 7 replicas.</source>
          <target state="new">This application contains a stateful service configured with 7 replicas.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Since there are only 5 nodes, system components will flag that the partition is below target count with an Warning.</source>
          <target state="new">Since there are only 5 nodes, system components will flag that the partition is below target count with an Warning.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Health in Service Fabric Explorer</source>
          <target state="new">Health in Service Fabric Explorer</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service Fabric Explorer provides a visual view of the cluster.</source>
          <target state="new">Service Fabric Explorer provides a visual view of the cluster.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the picture below, you can see that:</source>
          <target state="new">In the picture below, you can see that:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Application <bpt id="p1">**</bpt>fabric:/WordCount<ept id="p1">**</ept> is "red" (at Error) because it has an error event reported by MyWatchdog for property Availability.</source>
          <target state="new">Application <bpt id="p1">**</bpt>fabric:/WordCount<ept id="p1">**</ept> is "red" (at Error) because it has an error event reported by MyWatchdog for property Availability.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One of its services, <bpt id="p1">**</bpt>fabric:/WordCount/WordCount.Service<ept id="p1">**</ept> is "yellow" (at Warning).</source>
          <target state="new">One of its services, <bpt id="p1">**</bpt>fabric:/WordCount/WordCount.Service<ept id="p1">**</ept> is "yellow" (at Warning).</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As described above, the service is configured with 7 replicas, which can't all be placed (since we only have 5 nodes).</source>
          <target state="new">As described above, the service is configured with 7 replicas, which can't all be placed (since we only have 5 nodes).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Though not shown here, the service partition is "yellow" because of the System report.</source>
          <target state="new">Though not shown here, the service partition is "yellow" because of the System report.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The "yellow" partition triggers the "yellow" service.</source>
          <target state="new">The "yellow" partition triggers the "yellow" service.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cluster<ept id="p1">**</ept> is "red" because of the "red" application.</source>
          <target state="new">The <bpt id="p1">**</bpt>cluster<ept id="p1">**</ept> is "red" because of the "red" application.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The evaluation uses default policies from cluster manifest and application manifest, which are the strict policies (do not tolerate any failure).</source>
          <target state="new">The evaluation uses default policies from cluster manifest and application manifest, which are the strict policies (do not tolerate any failure).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>View of the cluster with ServiceFabricExplorer.</source>
          <target state="new">View of the cluster with ServiceFabricExplorer.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>View of the cluster with ServiceFabricExplorer.</source>
          <target state="new">View of the cluster with ServiceFabricExplorer.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Read more about <bpt id="p1">[</bpt>Service Fabric Explorer<ept id="p1">](service-fabric-visualizing-your-cluster.md)</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Read more about <bpt id="p1">[</bpt>Service Fabric Explorer<ept id="p1">](service-fabric-visualizing-your-cluster.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Health queries</source>
          <target state="new">Health queries</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Service Fabric exposes health queries for each of the supported <bpt id="p1">[</bpt>entity types<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept>.</source>
          <target state="new">Service Fabric exposes health queries for each of the supported <bpt id="p1">[</bpt>entity types<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They can be accessed trough API (methods on FabricClient.HealthManager), Powershell cmdlets and REST.</source>
          <target state="new">They can be accessed trough API (methods on FabricClient.HealthManager), Powershell cmdlets and REST.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These queries return complete health information about the entity, including aggregated health state, health events reported on the entity, children health states (when applicable) and unhealthy evaluations when the entity is not healthy.</source>
          <target state="new">These queries return complete health information about the entity, including aggregated health state, health events reported on the entity, children health states (when applicable) and unhealthy evaluations when the entity is not healthy.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> A health entity is returned to the user when it is completely populated in the Health Store: the entity has a System report, it's active (not deleted) and parent entities on the hierarchy chain have System reports.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> A health entity is returned to the user when it is completely populated in the Health Store: the entity has a System report, it's active (not deleted) and parent entities on the hierarchy chain have System reports.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If any of these conditions is not satisfied, the health queries return an exception showing why the entity is not returned.</source>
          <target state="new">If any of these conditions is not satisfied, the health queries return an exception showing why the entity is not returned.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The health queries require passing in the entity identifier, which depends on the entity type.</source>
          <target state="new">The health queries require passing in the entity identifier, which depends on the entity type.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>They accept optional health policy parameters.</source>
          <target state="new">They accept optional health policy parameters.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If not specified, the <bpt id="p1">[</bpt>health policies<ept id="p1">](service-fabric-health-introduction.md#health-policies)</ept> from cluster or application manifest are used for evaluation.</source>
          <target state="new">If not specified, the <bpt id="p1">[</bpt>health policies<ept id="p1">](service-fabric-health-introduction.md#health-policies)</ept> from cluster or application manifest are used for evaluation.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>They also accept filters for returning only partial children or events, the ones that respect the specified filters.</source>
          <target state="new">They also accept filters for returning only partial children or events, the ones that respect the specified filters.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The output filters are applied on the server side, so the message reply size is reduced.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The output filters are applied on the server side, so the message reply size is reduced.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is recommended to use the filters to limit the data returned rather than apply filters on the client side.</source>
          <target state="new">It is recommended to use the filters to limit the data returned rather than apply filters on the client side.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An entity health contains the following information:</source>
          <target state="new">An entity health contains the following information:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The aggregated health state of the entity.</source>
          <target state="new">The aggregated health state of the entity.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is computed by the Health Store based on entity health reports, children health states (when applicable) and health policies.</source>
          <target state="new">This is computed by the Health Store based on entity health reports, children health states (when applicable) and health policies.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Read more about <bpt id="p1">[</bpt>Entity health evaluation<ept id="p1">](service-fabric-health-introduction.md#entity-health-evaluation)</ept>.</source>
          <target state="new">Read more about <bpt id="p1">[</bpt>Entity health evaluation<ept id="p1">](service-fabric-health-introduction.md#entity-health-evaluation)</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The health events on the entity.</source>
          <target state="new">The health events on the entity.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For the entities that can have children, collection of health states for all children.</source>
          <target state="new">For the entities that can have children, collection of health states for all children.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The health states contain the entity identifier and the aggregated health state.</source>
          <target state="new">The health states contain the entity identifier and the aggregated health state.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To get complete health for a child, call the query health for the child entity type, passing in the child identifier.</source>
          <target state="new">To get complete health for a child, call the query health for the child entity type, passing in the child identifier.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the entity is not healthy, the unhealthy evaluations which point to the report that triggered the state of the entity.</source>
          <target state="new">If the entity is not healthy, the unhealthy evaluations which point to the report that triggered the state of the entity.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Get cluster health</source>
          <target state="new">Get cluster health</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns the health of the cluster entity.</source>
          <target state="new">Returns the health of the cluster entity.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Contains the health states of applications and nodes (children of the cluster).</source>
          <target state="new">Contains the health states of applications and nodes (children of the cluster).</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy map with health policies used to override the application manifest policies.</source>
          <target state="new">[optional] Application health policy map with health policies used to override the application manifest policies.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events, nodes, applications with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events, nodes, applications with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To get cluster health, create a FabricClient and call GetClusterHealthAsync method on its HealthManager.</source>
          <target state="new">To get cluster health, create a FabricClient and call GetClusterHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following gets cluster health:</source>
          <target state="new">The following gets cluster health:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following gets cluster health using custom cluster health policy and filters for nodes and applications.</source>
          <target state="new">The following gets cluster health using custom cluster health policy and filters for nodes and applications.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Note that it creates System.Fabric.Description.ClusterHealthQueryDescription that contains all the input data.</source>
          <target state="new">Note that it creates System.Fabric.Description.ClusterHealthQueryDescription that contains all the input data.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The cmdlet to get cluster health is Get-ServiceFabricClusterHealth.</source>
          <target state="new">The cmdlet to get cluster health is Get-ServiceFabricClusterHealth.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>State of the cluster: 5 nodes, System application and fabric:/WordCount configured as above.</source>
          <target state="new">State of the cluster: 5 nodes, System application and fabric:/WordCount configured as above.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets cluster health with default health policies.</source>
          <target state="new">The following cmdlet gets cluster health with default health policies.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The aggregated health state is Warning, because the fabric:/WordCount application is in Warning.</source>
          <target state="new">The aggregated health state is Warning, because the fabric:/WordCount application is in Warning.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note how the unhealthy evaluations show with details the condition that triggered the aggregated health.</source>
          <target state="new">Note how the unhealthy evaluations show with details the condition that triggered the aggregated health.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following Powershell cmdlet gets the health of the cluster with custom application policy.</source>
          <target state="new">The following Powershell cmdlet gets the health of the cluster with custom application policy.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It filters results to get only Error or Warning applications and nodes.</source>
          <target state="new">It filters results to get only Error or Warning applications and nodes.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>As a result, no nodes will be returned as they are all healthy.</source>
          <target state="new">As a result, no nodes will be returned as they are all healthy.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Only fabric:/WordCount application respects the applications filter.</source>
          <target state="new">Only fabric:/WordCount application respects the applications filter.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the custom policy specifies to consider warning as error for the fabric:/WordCount application, the application is evaluated at Error, and so is the cluster.</source>
          <target state="new">Because the custom policy specifies to consider warning as error for the fabric:/WordCount application, the application is evaluated at Error, and so is the cluster.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Get node health</source>
          <target state="new">Get node health</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns the health of a node entity.</source>
          <target state="new">Returns the health of a node entity.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Contains the health events reported on the node.</source>
          <target state="new">Contains the health events reported on the node.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[required] The node name which identifies the node.</source>
          <target state="new">[required] The node name which identifies the node.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>[optional] Cluster health policy settings used to evaluate health.</source>
          <target state="new">[optional] Cluster health policy settings used to evaluate health.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To get node health through API, create a FabricClient and call GetNodeHealthAsync method on its HealthManager.</source>
          <target state="new">To get node health through API, create a FabricClient and call GetNodeHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following gets the node health for the specified node name.</source>
          <target state="new">The following gets the node health for the specified node name.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following gets the node health for the specified node name, passing in events filter and custom policy through System.Fabric.Description.NodeHealthQueryDescription.</source>
          <target state="new">The following gets the node health for the specified node name, passing in events filter and custom policy through System.Fabric.Description.NodeHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The cmdlet to get node health is Get-ServiceFabricNodeHealth.</source>
          <target state="new">The cmdlet to get node health is Get-ServiceFabricNodeHealth.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets node health with default health policies.</source>
          <target state="new">The following cmdlet gets node health with default health policies.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the health of all nodes in the cluster.</source>
          <target state="new">The following cmdlet gets the health of all nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Get application health</source>
          <target state="new">Get application health</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns the health of an application entity.</source>
          <target state="new">Returns the health of an application entity.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Contains the health states of deployed application and service children.</source>
          <target state="new">Contains the health states of deployed application and service children.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[required] Application name (Uri) which identifies the application</source>
          <target state="new">[required] Application name (Uri) which identifies the application</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy used to override the application manifest policies.</source>
          <target state="new">[optional] Application health policy used to override the application manifest policies.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events, services, deployed applications with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events, services, deployed applications with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To get application health, create a FabricClient and call GetApplicationHealthAsync method on its HealthManager.</source>
          <target state="new">To get application health, create a FabricClient and call GetApplicationHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following gets the application health for the specified application name Uri.</source>
          <target state="new">The following gets the application health for the specified application name Uri.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following gets the application health for the specified application name Uri, specifying filters and custom policy through System.Fabric.Description.ApplicationHealthQueryDescription.</source>
          <target state="new">The following gets the application health for the specified application name Uri, specifying filters and custom policy through System.Fabric.Description.ApplicationHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The cmdlet to get application health is Get-ServiceFabricApplicationHealth.</source>
          <target state="new">The cmdlet to get application health is Get-ServiceFabricApplicationHealth.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following cmdlet returns the health of the fabric:/WordCount application.</source>
          <target state="new">The following cmdlet returns the health of the fabric:/WordCount application.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following Powershell passes in custom policy and filters children and events.</source>
          <target state="new">The following Powershell passes in custom policy and filters children and events.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Get service health</source>
          <target state="new">Get service health</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns the health of a service entity.</source>
          <target state="new">Returns the health of a service entity.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Contains the partition health states.</source>
          <target state="new">Contains the partition health states.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>[required] Service name (Uri) which identifies the service</source>
          <target state="new">[required] Service name (Uri) which identifies the service</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy used to override the application manifest policy.</source>
          <target state="new">[optional] Application health policy used to override the application manifest policy.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events andpartitions with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events andpartitions with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To get service health through API, create a FabricClient and call GetServiceHealthAsync method on its HealthManager.</source>
          <target state="new">To get service health through API, create a FabricClient and call GetServiceHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example get the health of a service with specified service name (Uri):</source>
          <target state="new">The following example get the health of a service with specified service name (Uri):</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following gets the service health for the specified service name Uri, specifying filters and custom policy through System.Fabric.Description.ServiceHealthQueryDescription.</source>
          <target state="new">The following gets the service health for the specified service name Uri, specifying filters and custom policy through System.Fabric.Description.ServiceHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The cmdlet to get service health is Get-ServiceFabricServiceHealth.</source>
          <target state="new">The cmdlet to get service health is Get-ServiceFabricServiceHealth.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the service health using default health policies.</source>
          <target state="new">The following cmdlet gets the service health using default health policies.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Get partition health</source>
          <target state="new">Get partition health</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns the health of a partition entity.</source>
          <target state="new">Returns the health of a partition entity.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Contains the replica health states.</source>
          <target state="new">Contains the replica health states.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>[required] Partition id (Guid) which identifies the partition</source>
          <target state="new">[required] Partition id (Guid) which identifies the partition</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy used to override the application manifest policy.</source>
          <target state="new">[optional] Application health policy used to override the application manifest policy.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events, replicas with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events, replicas with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To get partition health through API, create a FabricClient and call GetPartitionHealthAsync method on its HealthManager.</source>
          <target state="new">To get partition health through API, create a FabricClient and call GetPartitionHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To specify optional parameters, create System.Fabric.Description.PartitionHealthQueryDescription.</source>
          <target state="new">To specify optional parameters, create System.Fabric.Description.PartitionHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The cmdlet to get partition health is Get-ServiceFabricPartitionHealth.</source>
          <target state="new">The cmdlet to get partition health is Get-ServiceFabricPartitionHealth.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the health for all partitions of the word count service.</source>
          <target state="new">The following cmdlet gets the health for all partitions of the word count service.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Get replica health</source>
          <target state="new">Get replica health</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Returns the health of a replica.Input:</source>
          <target state="new">Returns the health of a replica.Input:</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>[required] Partition id (Guid) and replica id which identify the replica</source>
          <target state="new">[required] Partition id (Guid) and replica id which identify the replica</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy parameters used to override the application manifest policies.</source>
          <target state="new">[optional] Application health policy parameters used to override the application manifest policies.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>To get replica health through API, create a FabricClient and call GetReplicaHealthAsync method on its HealthManager.</source>
          <target state="new">To get replica health through API, create a FabricClient and call GetReplicaHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Specify advanced parameters with System.Fabric.Description.ReplicaHealthQueryDescription.</source>
          <target state="new">Specify advanced parameters with System.Fabric.Description.ReplicaHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The cmdlet to get replica health is Get-ServiceFabricReplicaHealth.</source>
          <target state="new">The cmdlet to get replica health is Get-ServiceFabricReplicaHealth.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the health of the primary replica for all partitions of the service.</source>
          <target state="new">The following cmdlet gets the health of the primary replica for all partitions of the service.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Get deployed application health</source>
          <target state="new">Get deployed application health</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Returns the health of an application deployed on a node entity.</source>
          <target state="new">Returns the health of an application deployed on a node entity.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Contains the deployed service package health states.</source>
          <target state="new">Contains the deployed service package health states.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>[required] Application name (Uri) and node name (string) which identify the deployed application</source>
          <target state="new">[required] Application name (Uri) and node name (string) which identify the deployed application</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy used to override the application manifest policies.</source>
          <target state="new">[optional] Application health policy used to override the application manifest policies.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events, deployed service packages with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events, deployed service packages with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>To get the health on an application deployed on a node through API, create a FabricClient and call GetDeployedApplicationHealthAsync method on its HealthManager.</source>
          <target state="new">To get the health on an application deployed on a node through API, create a FabricClient and call GetDeployedApplicationHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>To specify optional parameters, use System.Fabric.Description.DeployedApplicationHealthQueryDescription.</source>
          <target state="new">To specify optional parameters, use System.Fabric.Description.DeployedApplicationHealthQueryDescription.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The cmdlet to get deployed application health is Get-ServiceFabricDeployedApplicationHealth.</source>
          <target state="new">The cmdlet to get deployed application health is Get-ServiceFabricDeployedApplicationHealth.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To find out where an application is deployed, run Get-ServiceFabricApplicationHealth and look at the deployed application children.</source>
          <target state="new">To find out where an application is deployed, run Get-ServiceFabricApplicationHealth and look at the deployed application children.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The following cmdlter gets the health of the fabric:/WordCount application deployed on node Node.1.</source>
          <target state="new">The following cmdlter gets the health of the fabric:/WordCount application deployed on node Node.1.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Get deployed service package health</source>
          <target state="new">Get deployed service package health</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Returns the health of a deployed service package entity.</source>
          <target state="new">Returns the health of a deployed service package entity.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Input:</source>
          <target state="new">Input:</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>[required] Application name (Uri), node name (string) and service manifest name (string) which identify the deployed service package</source>
          <target state="new">[required] Application name (Uri), node name (string) and service manifest name (string) which identify the deployed service package</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>[optional] Application health policy used to override the application manifest policy.</source>
          <target state="new">[optional] Application health policy used to override the application manifest policy.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>[optional] Filter to return only events with certain health state (eg.</source>
          <target state="new">[optional] Filter to return only events with certain health state (eg.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>return only errors or warning or errors etc).</source>
          <target state="new">return only errors or warning or errors etc).</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>To get the health of a deployed service package through API, create a FabricClient and call GetDeployedServicePackageHealthAsync method on its HealthManager.</source>
          <target state="new">To get the health of a deployed service package through API, create a FabricClient and call GetDeployedServicePackageHealthAsync method on its HealthManager.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The cmdlet to get deployed service package health is Get-ServiceFabricDeployedServicePackageHealth.</source>
          <target state="new">The cmdlet to get deployed service package health is Get-ServiceFabricDeployedServicePackageHealth.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</source>
          <target state="new">First connect to the cluster with Connect-ServiceFabricCluster cmdlet.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To see where an aplication is deployed, run Get-ServiceFabricApplicationHealth, look at deployed applications.</source>
          <target state="new">To see where an aplication is deployed, run Get-ServiceFabricApplicationHealth, look at deployed applications.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To see what service packages are in an application, look at the deployed service package children in Get-ServiceFabricDeployedApplicationHealth output.</source>
          <target state="new">To see what service packages are in an application, look at the deployed service package children in Get-ServiceFabricDeployedApplicationHealth output.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the health of the WordCount.Service service package of the fabric:/WordCount application deployed on node Node.1.</source>
          <target state="new">The following cmdlet gets the health of the WordCount.Service service package of the fabric:/WordCount application deployed on node Node.1.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The entity has System.Hosting reports for successful service package and entry point activation and successful service type registration.</source>
          <target state="new">The entity has System.Hosting reports for successful service package and entry point activation and successful service type registration.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>General Queries</source>
          <target state="new">General Queries</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The general queries return the list of Service Fabric entities of the specified type.</source>
          <target state="new">The general queries return the list of Service Fabric entities of the specified type.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>They are exposed through API (methods on FabricClient.QueryManager), Powershell cmdlets and REST.</source>
          <target state="new">They are exposed through API (methods on FabricClient.QueryManager), Powershell cmdlets and REST.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>These queries aggregate sub-queries from multiple components.</source>
          <target state="new">These queries aggregate sub-queries from multiple components.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>One of them is the <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#health-store)</ept>, which populates the aggregated health state for each query result.</source>
          <target state="new">One of them is the <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#health-store)</ept>, which populates the aggregated health state for each query result.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The general queries return the aggregated health state of the entity and do not contain the rich health data.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The general queries return the aggregated health state of the entity and do not contain the rich health data.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If an entity is not healthy, you can follow up with health queries to get all health information, like events, children health states and unhealthy evaluations.</source>
          <target state="new">If an entity is not healthy, you can follow up with health queries to get all health information, like events, children health states and unhealthy evaluations.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the general queries return Unknown health state for an entity, it's possible that the Health Store doesn't have complete data about the entity or the sub-query to the Health Store wasn't successful (eg.</source>
          <target state="new">If the general queries return Unknown health state for an entity, it's possible that the Health Store doesn't have complete data about the entity or the sub-query to the Health Store wasn't successful (eg.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>communication error, health store was throttled etc).</source>
          <target state="new">communication error, health store was throttled etc).</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Follow up with a health query for the entity.</source>
          <target state="new">Follow up with a health query for the entity.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This may succeed, if the sub-query encountered transient errors (eg.</source>
          <target state="new">This may succeed, if the sub-query encountered transient errors (eg.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>network issues), or will give more details about why the entity is not exposed from Health store.</source>
          <target state="new">network issues), or will give more details about why the entity is not exposed from Health store.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The queries that contains HealthState for entities are:</source>
          <target state="new">The queries that contains HealthState for entities are:</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Node list.</source>
          <target state="new">Node list.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Returns the list nodes in the cluster.</source>
          <target state="new">Returns the list nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetNodeListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetNodeListAsync.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricNode.</source>
          <target state="new">Powershell: Get-ServiceFabricNode.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Application list.</source>
          <target state="new">Application list.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Returns the list of applications in the cluster.</source>
          <target state="new">Returns the list of applications in the cluster.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetApplicationListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetApplicationListAsync.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricApplication.</source>
          <target state="new">Powershell: Get-ServiceFabricApplication.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Service list.</source>
          <target state="new">Service list.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Returns the list of services in an application.</source>
          <target state="new">Returns the list of services in an application.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetServiceListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetServiceListAsync.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricService.</source>
          <target state="new">Powershell: Get-ServiceFabricService.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Partition list.</source>
          <target state="new">Partition list.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Returns the list of partitions in a service.</source>
          <target state="new">Returns the list of partitions in a service.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetPartitionListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetPartitionListAsync.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricPartition.</source>
          <target state="new">Powershell: Get-ServiceFabricPartition.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Replica list.</source>
          <target state="new">Replica list.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Returns the list of replicas in a partition.</source>
          <target state="new">Returns the list of replicas in a partition.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetReplicaListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetReplicaListAsync.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricReplica.</source>
          <target state="new">Powershell: Get-ServiceFabricReplica.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Deployed application list.</source>
          <target state="new">Deployed application list.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Returns the list of deployed applications on a node.</source>
          <target state="new">Returns the list of deployed applications on a node.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetDeployedApplicationListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetDeployedApplicationListAsync.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricDeployedApplication.</source>
          <target state="new">Powershell: Get-ServiceFabricDeployedApplication.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Deployed service package list.</source>
          <target state="new">Deployed service package list.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Returns the list of service packages in a deployed application.</source>
          <target state="new">Returns the list of service packages in a deployed application.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Api: FabricClient.QueryManager.GetDeployedServicePackageListAsync.</source>
          <target state="new">Api: FabricClient.QueryManager.GetDeployedServicePackageListAsync.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Powershell: Get-ServiceFabricDeployedApplication.</source>
          <target state="new">Powershell: Get-ServiceFabricDeployedApplication.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new">Examples</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The following gets the unhealthy applications in the cluster:</source>
          <target state="new">The following gets the unhealthy applications in the cluster:</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets application details for fabric:/WordCount application.</source>
          <target state="new">The following cmdlet gets application details for fabric:/WordCount application.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Notice that health state is Warning.</source>
          <target state="new">Notice that health state is Warning.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following cmdlet gets the services with health state Warning.</source>
          <target state="new">The following cmdlet gets the services with health state Warning.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Cluster and application upgrade</source>
          <target state="new">Cluster and application upgrade</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>During cluster and application monitored upgrade, Service Fabric checks health to ensure everything is and remains healthy.</source>
          <target state="new">During cluster and application monitored upgrade, Service Fabric checks health to ensure everything is and remains healthy.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If something is unhealthy per configured policy, the upgrade is either paused to allow user interaction or automatically rolled back.</source>
          <target state="new">If something is unhealthy per configured policy, the upgrade is either paused to allow user interaction or automatically rolled back.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>During <bpt id="p1">**</bpt>cluster<ept id="p1">**</ept> upgrade, you can get the cluster upgrade status, which will include unhealthy evaluations that point to what is unhealthy in the cluster.</source>
          <target state="new">During <bpt id="p1">**</bpt>cluster<ept id="p1">**</ept> upgrade, you can get the cluster upgrade status, which will include unhealthy evaluations that point to what is unhealthy in the cluster.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>If the upgrade is rolled back due to health issues, the upgrade status will keep the last unhealthy reasons so administrators can investigate what went wrong.</source>
          <target state="new">If the upgrade is rolled back due to health issues, the upgrade status will keep the last unhealthy reasons so administrators can investigate what went wrong.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Similarly, during <bpt id="p1">**</bpt>application<ept id="p1">**</ept> upgrade, the application upgrade status contains the unhealthy evaluations.</source>
          <target state="new">Similarly, during <bpt id="p1">**</bpt>application<ept id="p1">**</ept> upgrade, the application upgrade status contains the unhealthy evaluations.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The following shows the application upgrade status for a modified fabric:/WordCount application.</source>
          <target state="new">The following shows the application upgrade status for a modified fabric:/WordCount application.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A watchdog reported an Error on one of its replica.</source>
          <target state="new">A watchdog reported an Error on one of its replica.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The upgrade is rolling back because the health checks are not respected.</source>
          <target state="new">The upgrade is rolling back because the health checks are not respected.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Read more about <bpt id="p1">[</bpt>Service Fabric Application Upgrade<ept id="p1">](service-fabric-application-upgrade.md)</ept>.</source>
          <target state="new">Read more about <bpt id="p1">[</bpt>Service Fabric Application Upgrade<ept id="p1">](service-fabric-application-upgrade.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Troubleshoot with Health</source>
          <target state="new">Troubleshoot with Health</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Whenever there is an issue in the cluster or an application, look at the cluster or the application health to pinpoint what is wrong.</source>
          <target state="new">Whenever there is an issue in the cluster or an application, look at the cluster or the application health to pinpoint what is wrong.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The unhealthy evaluations will show with details what triggered the current unhealthy state.</source>
          <target state="new">The unhealthy evaluations will show with details what triggered the current unhealthy state.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If needed, drill down into unhealthy children entities to figure out issues.</source>
          <target state="new">If needed, drill down into unhealthy children entities to figure out issues.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Using System health reports for troubleshooting</source>
          <target state="new">Using System health reports for troubleshooting</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Adding custom Service Fabric health reports</source>
          <target state="new">Adding custom Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>How to Monitor and Diagnose Services locally</source>
          <target state="new">How to Monitor and Diagnose Services locally</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade</source>
          <target state="new">Service Fabric Application Upgrade</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a96bb5b15a7b8f21570ed242823317dd459ea2d7</xliffext:olfilehash>
  </header>
</xliff>