{
  "nodes": [
    {
      "content": "How to run a compute-intensive task in .NET on an Azure virtual machine",
      "pos": [
        27,
        98
      ]
    },
    {
      "content": "Learn how to deploy and run a compute-intensive .NET app on an Azure virtual machine and use Azure Service Bus queues to monitor progress remotely.",
      "pos": [
        117,
        264
      ]
    },
    {
      "content": "How to run a compute-intensive task in .NET on an Azure virtual machine",
      "pos": [
        610,
        681
      ]
    },
    {
      "content": "With Azure, you can use a virtual machine to handle compute-intensive tasks.",
      "pos": [
        683,
        759
      ]
    },
    {
      "content": "For example, a virtual machine can handle tasks and deliver results to client machines or mobile applications.",
      "pos": [
        760,
        870
      ]
    },
    {
      "content": "After completing the tutorial, you will understand how to create a virtual machine that runs a compute-intensive .NET application that can be monitored by another .NET application.",
      "pos": [
        871,
        1051
      ]
    },
    {
      "content": "This tutorial assumes you know how to create .NET console applications.",
      "pos": [
        1053,
        1124
      ]
    },
    {
      "content": "No knowledge of Azure is assumed.",
      "pos": [
        1125,
        1158
      ]
    },
    {
      "content": "You will learn:",
      "pos": [
        1160,
        1175
      ]
    },
    {
      "content": "How to create a virtual machine.",
      "pos": [
        1179,
        1211
      ]
    },
    {
      "content": "How to remotely log in to your virtual machine.",
      "pos": [
        1214,
        1261
      ]
    },
    {
      "content": "How to create an Azure Service Bus namespace.",
      "pos": [
        1264,
        1309
      ]
    },
    {
      "content": "How to create a .NET application that performs a compute-intensive task.",
      "pos": [
        1312,
        1384
      ]
    },
    {
      "content": "How to create a .NET application that monitors the progress of the compute-intensive task.",
      "pos": [
        1387,
        1477
      ]
    },
    {
      "content": "How to run the .NET applications.",
      "pos": [
        1480,
        1513
      ]
    },
    {
      "content": "How to stop the .NET applications.",
      "pos": [
        1516,
        1550
      ]
    },
    {
      "content": "This tutorial will use the Traveling Salesman Problem for the compute-intensive task.",
      "pos": [
        1552,
        1637
      ]
    },
    {
      "content": "The following is an example of the .NET application running the compute-intensive task.",
      "pos": [
        1638,
        1725
      ]
    },
    {
      "content": "Traveling Salesman Problem solver",
      "pos": [
        1729,
        1762
      ]
    },
    {
      "content": "The following is an example of the .NET application monitoring the compute-intensive task.",
      "pos": [
        1780,
        1870
      ]
    },
    {
      "content": "Traveling Salesman Problem client",
      "pos": [
        1874,
        1907
      ]
    },
    {
      "content": "To create a virtual machine",
      "pos": [
        2022,
        2049
      ]
    },
    {
      "pos": [
        2054,
        2116
      ],
      "content": "Log in to the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        2120,
        2134
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2138,
        2164
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Virtual machine<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2168,
        2191
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Quick create<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2195,
        2270
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Create a virtual machine<ept id=\"p1\">**</ept> screen, enter a value for <bpt id=\"p2\">**</bpt>DNS name<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        2274,
        2361
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> drop-down list, select an image, such as <bpt id=\"p2\">**</bpt>Windows Server 2012 R2<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Enter a name for the administrator in the <bpt id=\"p1\">**</bpt>User Name<ept id=\"p1\">**</ept> field.",
      "pos": [
        2365,
        2427
      ]
    },
    {
      "content": "Remember this name and the password that you will enter next, you will use them when you remotely log in to the virtual machine.",
      "pos": [
        2428,
        2556
      ]
    },
    {
      "pos": [
        2560,
        2652
      ],
      "content": "Enter a password in the <bpt id=\"p1\">**</bpt>New password<ept id=\"p1\">**</ept> field, and enter it again in the <bpt id=\"p2\">**</bpt>Confirm<ept id=\"p2\">**</ept> field."
    },
    {
      "pos": [
        2656,
        2751
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> drop-down list, select the data center location for your virtual machine."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Create virtual machine<ept id=\"p1\">**</ept>.",
      "pos": [
        2756,
        2789
      ]
    },
    {
      "content": "You can monitor the status in the <bpt id=\"p1\">**</bpt>Virtual machines<ept id=\"p1\">**</ept> section of the Azure portal.",
      "pos": [
        2790,
        2873
      ]
    },
    {
      "content": "When its status is displayed as <bpt id=\"p1\">**</bpt>Active<ept id=\"p1\">**</ept>, you can log in to the virtual machine.",
      "pos": [
        2874,
        2956
      ]
    },
    {
      "content": "To remotely log in to your virtual machine",
      "pos": [
        2961,
        3003
      ]
    },
    {
      "pos": [
        3008,
        3070
      ],
      "content": "Log in to the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        3074,
        3101
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Virtual machines<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click the name of the virtual machine that you want to log in to.",
      "pos": [
        3105,
        3170
      ]
    },
    {
      "pos": [
        3174,
        3192
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Connect<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Respond to the prompts as needed to connect to the virtual machine.",
      "pos": [
        3196,
        3263
      ]
    },
    {
      "content": "When prompted for the administrator name and password, use the values that you provided when you created the virtual machine.",
      "pos": [
        3264,
        3389
      ]
    },
    {
      "content": "How to create a Service Bus namespace",
      "pos": [
        3394,
        3431
      ]
    },
    {
      "content": "To begin using Service Bus queues in Azure, you must first",
      "pos": [
        3433,
        3491
      ]
    },
    {
      "content": "create a service namespace.",
      "pos": [
        3492,
        3519
      ]
    },
    {
      "content": "A service namespace provides a scoping",
      "pos": [
        3520,
        3558
      ]
    },
    {
      "content": "container for addressing Service Bus resources within your application.",
      "pos": [
        3559,
        3630
      ]
    },
    {
      "content": "To create a service namespace:",
      "pos": [
        3632,
        3662
      ]
    },
    {
      "pos": [
        3668,
        3730
      ],
      "content": "Log in to the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        3735,
        3806
      ],
      "content": "In the left navigation pane of the Azure portal, click <bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        3811,
        3868
      ],
      "content": "In the lower pane of the Azure portal, click  <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Create new service bus",
      "pos": [
        3876,
        3898
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Create a namespace<ept id=\"p1\">**</ept> dialog box, enter a namespace name.",
      "pos": [
        3924,
        3989
      ]
    },
    {
      "content": "The system immediately checks to see if the name is available, as it must be a unique name.",
      "pos": [
        3990,
        4081
      ]
    },
    {
      "content": "Create a namespace dialog",
      "pos": [
        4089,
        4114
      ]
    },
    {
      "content": "After ensuring the namespace name is available, choose the region in which your namespace should be hosted (make sure you use the same region in which your virtual machine is hosted).",
      "pos": [
        4145,
        4328
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> Pick the <bpt id=\"p1\">**</bpt>same region<ept id=\"p1\">**</ept> that you use or intend to use for your virtual machine.",
      "pos": [
        4336,
        4434
      ]
    },
    {
      "content": "This will give you the best performance.",
      "pos": [
        4435,
        4475
      ]
    },
    {
      "content": "If you have more than one Azure subscription for the account with which you're logged on, select the subscription to use for the namespace.",
      "pos": [
        4480,
        4619
      ]
    },
    {
      "content": "(If you have only one subscription for the account with which you're logged on, you will not see a drop-down list containing your subscriptions.)",
      "pos": [
        4620,
        4765
      ]
    },
    {
      "content": "Click the check mark.",
      "pos": [
        4769,
        4790
      ]
    },
    {
      "content": "The system now creates your service namespace and enables it.",
      "pos": [
        4791,
        4852
      ]
    },
    {
      "content": "You might have to wait several minutes as the system provisions resources for your account.",
      "pos": [
        4853,
        4944
      ]
    },
    {
      "content": "Click create screenshot",
      "pos": [
        4952,
        4975
      ]
    },
    {
      "content": "The namespace you created will then appear in the Azure portal, and it takes a moment to activate.",
      "pos": [
        4992,
        5090
      ]
    },
    {
      "content": "Wait until the status is <bpt id=\"p1\">**</bpt>Active<ept id=\"p1\">**</ept> before continuing with the next step.",
      "pos": [
        5091,
        5164
      ]
    },
    {
      "content": "Obtain the default management credentials for the namespace",
      "pos": [
        5169,
        5228
      ]
    },
    {
      "content": "In order to perform management operations, such as creating a queue, on",
      "pos": [
        5230,
        5301
      ]
    },
    {
      "content": "the new namespace, you need to obtain the management credentials for the",
      "pos": [
        5302,
        5374
      ]
    },
    {
      "content": "namespace.",
      "pos": [
        5375,
        5385
      ]
    },
    {
      "pos": [
        5391,
        5551
      ],
      "content": "In the left navigation pane, click **Service Bus** to\ndisplay the list of available namespaces.\n![Available namespaces screenshot][available_namespaces]",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In the left navigation pane, click <bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept> to",
          "pos": [
            0,
            53
          ]
        },
        {
          "content": "display the list of available namespaces.",
          "pos": [
            54,
            95
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Available namespaces screenshot<ph id=\"ph2\">][available_namespaces]</ph>",
          "pos": [
            96,
            152
          ]
        }
      ]
    },
    {
      "pos": [
        5556,
        5657
      ],
      "content": "Select the namespace you just created from the list.\n![Namespace list screenshot][namespace_list]",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Select the namespace you just created from the list.",
          "pos": [
            0,
            52
          ]
        },
        {
          "content": "Namespace list screenshot",
          "pos": [
            55,
            80
          ]
        }
      ]
    },
    {
      "pos": [
        5661,
        5738
      ],
      "content": "Click **Connection Information**.\n ![Access key button][access_key_button]",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Click <bpt id=\"p1\">**</bpt>Connection Information<ept id=\"p1\">**</ept>.",
          "pos": [
            0,
            33
          ]
        },
        {
          "content": "<ph id=\"ph1\"> ![</ph>Access key button<ph id=\"ph2\">][access_key_button]</ph>",
          "pos": [
            34,
            74
          ]
        }
      ]
    },
    {
      "content": "In the dialog box, find the <bpt id=\"p1\">**</bpt>Connection String<ept id=\"p1\">**</ept> entry.",
      "pos": [
        5743,
        5799
      ]
    },
    {
      "content": "Make a note of this value, as you will use this information later in the tutorial to perform operations with the namespace.",
      "pos": [
        5800,
        5923
      ]
    },
    {
      "content": "How to create a .NET application that performs a compute-intensive task",
      "pos": [
        5928,
        5999
      ]
    },
    {
      "pos": [
        6004,
        6173
      ],
      "content": "On your development machine (which does not have to be the virtual machine that you created), download the <bpt id=\"p1\">[</bpt>Azure SDK for .NET<ept id=\"p1\">](http://azure.microsoft.com/develop/net/)</ept>."
    },
    {
      "content": "Create a .NET console application with the project named TSPSolver.",
      "pos": [
        6177,
        6244
      ]
    },
    {
      "content": "Ensure the traget framework is set for .<bpt id=\"p1\">**</bpt>NET Framework 4<ept id=\"p1\">**</ept> or later (not <bpt id=\"p2\">**</bpt>.NET Framework 4 Client Profile<ept id=\"p2\">**</ept>).",
      "pos": [
        6245,
        6356
      ]
    },
    {
      "content": "The target framework can be set after you create a project by the following: In Visual Studio's menu, click <bpt id=\"p1\">**</bpt>Projects<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>Application<ept id=\"p3\">**</ept> tab, and then set the value for <bpt id=\"p4\">**</bpt>Target framework<ept id=\"p4\">**</ept>.",
      "pos": [
        6357,
        6580
      ]
    },
    {
      "content": "Add the Microsoft ServiceBus library.",
      "pos": [
        6584,
        6621
      ]
    },
    {
      "content": "In Visual Studio Solution Explorer, right-click <bpt id=\"p1\">**</bpt>TSPSolver<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>Browse<ept id=\"p3\">**</ept> tab, browse to the Azure .NET SDK (for example, C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.5\\ToolsRef) and then select <bpt id=\"p4\">**</bpt>Microsoft.ServiceBus.dll<ept id=\"p4\">**</ept> as a reference.",
      "pos": [
        6622,
        6901
      ]
    },
    {
      "content": "Add the System Runtime Serialization library.",
      "pos": [
        6905,
        6950
      ]
    },
    {
      "content": "In Visual Studio Solution Explorer, right-click <bpt id=\"p1\">**</bpt>TSPSolver<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>.NET<ept id=\"p3\">**</ept> tab, and then select <bpt id=\"p4\">**</bpt>System.Runtime.Serialization<ept id=\"p4\">**</ept> as a reference.",
      "pos": [
        6951,
        7127
      ]
    },
    {
      "content": "Use the example code at the end of this section for the contents of the Program.cs file.",
      "pos": [
        7131,
        7219
      ]
    },
    {
      "pos": [
        7223,
        7321
      ],
      "content": "Modify the <bpt id=\"p1\">**</bpt>your\\_connection\\_string<ept id=\"p1\">**</ept> placeholder to use your Service Bus <bpt id=\"p2\">**</bpt>connection string<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Compile the application.",
      "pos": [
        7325,
        7349
      ]
    },
    {
      "content": "This will create TSPSolver.exe in your project's bin folder (either bin\\release or bin\\debug, depending on whether you're targeting a release or debug build).",
      "pos": [
        7350,
        7508
      ]
    },
    {
      "content": "You'll copy this executable and Microsoft.ServiceBus.dll to your virtual machine later.",
      "pos": [
        7509,
        7596
      ]
    },
    {
      "content": "How to create a .NET application that monitors the progress of the compute-intensive task",
      "pos": [
        16390,
        16479
      ]
    },
    {
      "content": "On your development machine, create a .NET console application using TSPClient as the project name.",
      "pos": [
        16484,
        16583
      ]
    },
    {
      "content": "Ensure the target framework is set for .<bpt id=\"p1\">**</bpt>NET Framework 4<ept id=\"p1\">**</ept> or later (not <bpt id=\"p2\">**</bpt>.NET Framework 4 Client Profile<ept id=\"p2\">**</ept>).",
      "pos": [
        16584,
        16695
      ]
    },
    {
      "content": "The target framework can be set after you create a project with the following: In Visual Studio's menu, click <bpt id=\"p1\">**</bpt>Projects<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>Application<ept id=\"p3\">**</ept> tab, and then set the value for <bpt id=\"p4\">**</bpt>Target framework<ept id=\"p4\">**</ept>.",
      "pos": [
        16696,
        16921
      ]
    },
    {
      "content": "Add in the Microsoft ServiceBus library.",
      "pos": [
        16925,
        16965
      ]
    },
    {
      "content": "In Visual Studio Solution Explorer, right-click <bpt id=\"p1\">**</bpt>TSPClient<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>Browse<ept id=\"p3\">**</ept> tab, browse to the Azure .NET SDK (for example, C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.5\\ToolsRef) and then select <bpt id=\"p4\">**</bpt>Microsoft.ServiceBus.dll<ept id=\"p4\">**</ept> as a reference.",
      "pos": [
        16966,
        17245
      ]
    },
    {
      "content": "Add the System Runtime Serialization library.",
      "pos": [
        17249,
        17294
      ]
    },
    {
      "content": "In Visual Studio Solution Explorer, right-click <bpt id=\"p1\">**</bpt>TSPClient<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Add Reference<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>.NET<ept id=\"p3\">**</ept> tab, and then select <bpt id=\"p4\">**</bpt>System.Runtime.Serialization<ept id=\"p4\">**</ept> as a reference.",
      "pos": [
        17295,
        17471
      ]
    },
    {
      "content": "Use the example code at the end of this section for the contents of the Program.cs file.",
      "pos": [
        17475,
        17563
      ]
    },
    {
      "pos": [
        17567,
        17665
      ],
      "content": "Modify the <bpt id=\"p1\">**</bpt>your\\_connection\\_string<ept id=\"p1\">**</ept> placeholder to use your Service Bus <bpt id=\"p2\">**</bpt>connection string<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Compile the application.",
      "pos": [
        17669,
        17693
      ]
    },
    {
      "content": "This will create TSPClient.exe in your project's bin folder (either bin\\release or bin\\debug, depending on whether you're targeting a release or debug build).",
      "pos": [
        17694,
        17852
      ]
    },
    {
      "content": "You can run this code from your development machine, or copy this executable and Microsoft.ServiceBus.dll to a machine that will run the client application (it does not need to be on your virtual machine).",
      "pos": [
        17853,
        18058
      ]
    },
    {
      "content": "How to run the .NET applications",
      "pos": [
        21806,
        21838
      ]
    },
    {
      "content": "Run the compute-intensive application, first to create the queue, then to solve the Traveling Saleseman Problem, which will add the current best route to the Service Bus queue.",
      "pos": [
        21840,
        22016
      ]
    },
    {
      "content": "While the compute-intensive application is running (or afterwards), run the client to display results from the Service Bus queue.",
      "pos": [
        22017,
        22146
      ]
    },
    {
      "content": "How to run the compute-intensive application",
      "pos": [
        22152,
        22196
      ]
    },
    {
      "content": "Log in to your virtual machine.",
      "pos": [
        22201,
        22232
      ]
    },
    {
      "content": "Create a folder named c:\\TSP.",
      "pos": [
        22236,
        22265
      ]
    },
    {
      "content": "This is where you will run your application.",
      "pos": [
        22266,
        22310
      ]
    },
    {
      "content": "Copy TSPSolver.exe and Microsoft.ServiceBus.dll, both of which are available in your TSPSolver project's bin folder, to c:\\TSP.",
      "pos": [
        22314,
        22441
      ]
    },
    {
      "content": "Create a file named c:\\TSP\\cities.txt with the following contents.",
      "pos": [
        22445,
        22511
      ]
    },
    {
      "content": "At a command prompt, change directories to c:\\TSP.",
      "pos": [
        24175,
        24225
      ]
    },
    {
      "content": "You'll need to create the Service Bus queue before you run the TSP solver permutations.",
      "pos": [
        24229,
        24316
      ]
    },
    {
      "content": "Run the following command to create the Service Bus queue.",
      "pos": [
        24317,
        24375
      ]
    },
    {
      "content": "Now that the queue is created, you can run the TSP solver permutations.",
      "pos": [
        24411,
        24482
      ]
    },
    {
      "content": "For example, run the following command to run the solver for 8 cities.",
      "pos": [
        24483,
        24553
      ]
    },
    {
      "content": "If you don't specify a number, the solver will run for 10 cities.",
      "pos": [
        24577,
        24642
      ]
    },
    {
      "content": "As the solver finds current shortest routes, it will add them to the queue.",
      "pos": [
        24643,
        24718
      ]
    },
    {
      "content": "The solver will run until it finishes examining all routes.",
      "pos": [
        24720,
        24779
      ]
    },
    {
      "pos": [
        24783,
        25211
      ],
      "content": "[AZURE.NOTE]\nThe larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of run time (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "The larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of run time (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
          "pos": [
            13,
            426
          ],
          "nodes": [
            {
              "content": "The larger the number that you specify, the longer the solver will run.",
              "pos": [
                0,
                71
              ]
            },
            {
              "content": "For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours.",
              "pos": [
                72,
                186
              ]
            },
            {
              "content": "Increasing to 16 or more cities could result in days of run time (eventually weeks, months, and years).",
              "pos": [
                187,
                290
              ]
            },
            {
              "content": "This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
              "pos": [
                291,
                413
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "How to run the monitoring client application",
      "pos": [
        25217,
        25261
      ]
    },
    {
      "content": "Log in to your machine where you will run the client application.",
      "pos": [
        25265,
        25330
      ]
    },
    {
      "content": "This does not need to be the same machine running the TSPSolver application, although it can be.",
      "pos": [
        25331,
        25427
      ]
    },
    {
      "content": "Create a folder where you will run your application.",
      "pos": [
        25431,
        25483
      ]
    },
    {
      "content": "For example, c:\\TSP.",
      "pos": [
        25484,
        25504
      ]
    },
    {
      "content": "Copy TSPClient.exe and Microsoft.ServiceBus.dll, both of which are in your TSPClient project's bin folder, to the c:\\TSP folder.",
      "pos": [
        25508,
        25636
      ]
    },
    {
      "content": "At a command prompt, change directories to c:\\TSP.",
      "pos": [
        25640,
        25690
      ]
    },
    {
      "content": "Run the following command.",
      "pos": [
        25694,
        25720
      ]
    },
    {
      "content": "Optionally, specify the number of minutes to sleep in between checking the queue, by passing in a command-line argument.",
      "pos": [
        25745,
        25865
      ]
    },
    {
      "content": "The default sleep period for checking the queue is 3 minutes, which is used if no command-line argument is passed to TSPClient.",
      "pos": [
        25866,
        25993
      ]
    },
    {
      "content": "If you want to use a different value for the sleep interval, for example, one minute, run the following command.",
      "pos": [
        25994,
        26106
      ]
    },
    {
      "content": "The client will run until it sees a queue message of \"Complete\".",
      "pos": [
        26133,
        26197
      ]
    },
    {
      "content": "Note that if you run multiple occurrences of the solver without running the client, you may need to run the client multiple times to completely empty the queue.",
      "pos": [
        26198,
        26358
      ]
    },
    {
      "content": "Alternatively, you can delete the queue and then create it again.",
      "pos": [
        26359,
        26424
      ]
    },
    {
      "content": "To delete the queue, run the following TSPSolver (not TSPClient)  command.",
      "pos": [
        26425,
        26499
      ]
    },
    {
      "content": "How to stop the .NET applications",
      "pos": [
        26535,
        26568
      ]
    },
    {
      "content": "For both the solver and client applications, you can press Ctrl+C to exit if you want to end prior to normal completion.",
      "pos": [
        26570,
        26690
      ]
    },
    {
      "content": "Alternative to creating and deleting the queue with TSPSolver",
      "pos": [
        26695,
        26756
      ]
    },
    {
      "content": "Instead of using TSPSolver to create or delete the queue, you can create or delete the queue using the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>.",
      "pos": [
        26757,
        26908
      ]
    },
    {
      "content": "Visit the Service Bus section of the Azure portal to access the user interfaces for creating or deleting a queue, as well as for retrieving the connection string, issuer, and access key.",
      "pos": [
        26909,
        27095
      ]
    },
    {
      "content": "You can also view a dashboard of your Service Bus queues, allowing you to view metrics for your incoming and outgoing messages.",
      "pos": [
        27096,
        27223
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to run a compute-intensive task in .NET on an Azure virtual machine\"\n    description=\"Learn how to deploy and run a compute-intensive .NET app on an Azure virtual machine and use Azure Service Bus queues to monitor progress remotely.\"\n    services=\"virtual-machines\"\n    documentationCenter=\".net\"\n    authors=\"wadepickett\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.workload=\"infrastructure-services\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"06/25/2015\"\n    ms.author=\"wpickett\"/>\n\n# How to run a compute-intensive task in .NET on an Azure virtual machine\n\nWith Azure, you can use a virtual machine to handle compute-intensive tasks. For example, a virtual machine can handle tasks and deliver results to client machines or mobile applications. After completing the tutorial, you will understand how to create a virtual machine that runs a compute-intensive .NET application that can be monitored by another .NET application.\n\nThis tutorial assumes you know how to create .NET console applications. No knowledge of Azure is assumed.\n\nYou will learn:\n\n* How to create a virtual machine.\n* How to remotely log in to your virtual machine.\n* How to create an Azure Service Bus namespace.\n* How to create a .NET application that performs a compute-intensive task.\n* How to create a .NET application that monitors the progress of the compute-intensive task.\n* How to run the .NET applications.\n* How to stop the .NET applications.\n\nThis tutorial will use the Traveling Salesman Problem for the compute-intensive task. The following is an example of the .NET application running the compute-intensive task.\n\n![Traveling Salesman Problem solver][solver_output]\n\nThe following is an example of the .NET application monitoring the compute-intensive task.\n\n![Traveling Salesman Problem client][client_output]\n\n[AZURE.INCLUDE [create-account-and-vms-note](../../includes/create-account-and-vms-note.md)]\n\n## To create a virtual machine\n\n1. Log in to the [Azure portal](https://manage.windowsazure.com).\n2. Click **New**.\n3. Click **Virtual machine**.\n4. Click **Quick create**.\n5. In the **Create a virtual machine** screen, enter a value for **DNS name**.\n6. From the **Image** drop-down list, select an image, such as **Windows Server 2012 R2**.\n7. Enter a name for the administrator in the **User Name** field. Remember this name and the password that you will enter next, you will use them when you remotely log in to the virtual machine.\n8. Enter a password in the **New password** field, and enter it again in the **Confirm** field.\n9. From the **Location** drop-down list, select the data center location for your virtual machine.\n10. Click **Create virtual machine**. You can monitor the status in the **Virtual machines** section of the Azure portal. When its status is displayed as **Active**, you can log in to the virtual machine.\n\n## To remotely log in to your virtual machine\n\n1. Log in to the [Azure portal](https://manage.windowsazure.com).\n2. Click **Virtual machines**.\n3. Click the name of the virtual machine that you want to log in to.\n4. Click **Connect**.\n5. Respond to the prompts as needed to connect to the virtual machine. When prompted for the administrator name and password, use the values that you provided when you created the virtual machine.\n\n## How to create a Service Bus namespace\n\nTo begin using Service Bus queues in Azure, you must first\ncreate a service namespace. A service namespace provides a scoping\ncontainer for addressing Service Bus resources within your application.\n\nTo create a service namespace:\n\n1.  Log in to the [Azure portal](https://manage.windowsazure.com).\n2.  In the left navigation pane of the Azure portal, click **Service Bus**.\n3.  In the lower pane of the Azure portal, click  **Create**.\n\n    ![Create new service bus][create_service_bus]\n4.  In the **Create a namespace** dialog box, enter a namespace name. The system immediately checks to see if the name is available, as it must be a unique name.\n\n    ![Create a namespace dialog][create_namespace_dialog]\n5.  After ensuring the namespace name is available, choose the region in which your namespace should be hosted (make sure you use the same region in which your virtual machine is hosted).\n\n    > [AZURE.IMPORTANT] Pick the **same region** that you use or intend to use for your virtual machine. This will give you the best performance.\n\n6. If you have more than one Azure subscription for the account with which you're logged on, select the subscription to use for the namespace. (If you have only one subscription for the account with which you're logged on, you will not see a drop-down list containing your subscriptions.)\n7. Click the check mark. The system now creates your service namespace and enables it. You might have to wait several minutes as the system provisions resources for your account.\n\n    ![Click create screenshot][click_create]\n\nThe namespace you created will then appear in the Azure portal, and it takes a moment to activate. Wait until the status is **Active** before continuing with the next step.\n\n## Obtain the default management credentials for the namespace\n\nIn order to perform management operations, such as creating a queue, on\nthe new namespace, you need to obtain the management credentials for the\nnamespace.\n\n1.  In the left navigation pane, click **Service Bus** to\n    display the list of available namespaces.\n    ![Available namespaces screenshot][available_namespaces]\n2.  Select the namespace you just created from the list.\n    ![Namespace list screenshot][namespace_list]\n3. Click **Connection Information**.\n    ![Access key button][access_key_button]\n4.  In the dialog box, find the **Connection String** entry. Make a note of this value, as you will use this information later in the tutorial to perform operations with the namespace.\n\n## How to create a .NET application that performs a compute-intensive task\n\n1. On your development machine (which does not have to be the virtual machine that you created), download the [Azure SDK for .NET](http://azure.microsoft.com/develop/net/).\n2. Create a .NET console application with the project named TSPSolver. Ensure the traget framework is set for .**NET Framework 4** or later (not **.NET Framework 4 Client Profile**). The target framework can be set after you create a project by the following: In Visual Studio's menu, click **Projects**, click **Properties**, click the **Application** tab, and then set the value for **Target framework**.\n3. Add the Microsoft ServiceBus library. In Visual Studio Solution Explorer, right-click **TSPSolver**, click **Add Reference**, click the **Browse** tab, browse to the Azure .NET SDK (for example, C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.5\\ToolsRef) and then select **Microsoft.ServiceBus.dll** as a reference.\n4. Add the System Runtime Serialization library. In Visual Studio Solution Explorer, right-click **TSPSolver**, click **Add Reference**, click the **.NET** tab, and then select **System.Runtime.Serialization** as a reference.\n5. Use the example code at the end of this section for the contents of the Program.cs file.\n6. Modify the **your\\_connection\\_string** placeholder to use your Service Bus **connection string**.\n7. Compile the application. This will create TSPSolver.exe in your project's bin folder (either bin\\release or bin\\debug, depending on whether you're targeting a release or debug build). You'll copy this executable and Microsoft.ServiceBus.dll to your virtual machine later.\n\n<p/>\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.IO;\n\n    using Microsoft.ServiceBus;\n    using Microsoft.ServiceBus.Messaging;\n\n    namespace TSPSolver\n    {\n        class Program\n        {\n            // Value specifying how often to provide an update to the console.\n            private static long loopCheck = 100000000;\n            private static long nTimes = 0, nLoops = 0;\n\n            private static double[,] distances;\n            private static String[] cityNames;\n            private static int[] bestOrder;\n            private static double minDistance;\n\n            private static NamespaceManager namespaceManager;\n            private static QueueClient queueClient;\n            private static String queueName = \"TSPQueue\";\n\n            private static void BuildDistances(String fileLocation, int numCities)\n            {\n\n                try\n                {\n                    StreamReader sr = new StreamReader(fileLocation);\n                    String[] sep1 = { \", \" };\n\n                    double[,] cityLocs = new double[numCities, 2];\n\n                    for (int i = 0; i < numCities; i++)\n                    {\n                        String[] line = sr.ReadLine().Split(sep1, StringSplitOptions.None);\n                        cityNames[i] = line[0];\n                        cityLocs[i, 0] = Convert.ToDouble(line[1]);\n                        cityLocs[i, 1] = Convert.ToDouble(line[2]);\n                    }\n                    sr.Close();\n\n                    for (int i = 0; i < numCities; i++)\n                    {\n                        for (int j = i; j < numCities; j++)\n                        {\n                            distances[i, j] = hypot(Math.Abs(cityLocs[i, 0] - cityLocs[j, 0]), Math.Abs(cityLocs[i, 1] - cityLocs[j, 1]));\n                            distances[j, i] = distances[i, j];\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            private static double hypot(double x, double y)\n            {\n                return Math.Sqrt(x * x + y * y);\n            }\n\n            private static void permutation(List<int> startCities, double distSoFar, List<int> restCities)\n            {\n                try\n                {\n\n                    nTimes++;\n                    if (nTimes == loopCheck)\n                    {\n                        nLoops++;\n                        nTimes = 0;\n                        DateTime dateTime = DateTime.Now;\n                        Console.Write(\"Current time is {0}.\", dateTime);\n                        Console.WriteLine(\" Completed {0} iterations of size of {1}.\", nLoops, loopCheck);\n                    }\n\n                    if ((restCities.Count == 1) && ((minDistance == -1) || (distSoFar + distances[restCities[0], startCities[0]] + distances[restCities[0], startCities[startCities.Count - 1]] < minDistance)))\n                    {\n                        startCities.Add(restCities[0]);\n                        newBestDistance(startCities, distSoFar + distances[restCities[0], startCities[0]] + distances[restCities[0], startCities[startCities.Count - 2]]);\n                        startCities.Remove(startCities[startCities.Count - 1]);\n                    }\n                    else\n                    {\n                        for (int i = 0; i < restCities.Count; i++)\n                        {\n                            startCities.Add(restCities[0]);\n                            restCities.Remove(restCities[0]);\n                            permutation(startCities, distSoFar + distances[startCities[startCities.Count - 1], startCities[startCities.Count - 2]], restCities);\n                            restCities.Add(startCities[startCities.Count - 1]);\n                            startCities.Remove(startCities[startCities.Count - 1]);\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            private static void newBestDistance(List<int> cities, double distance)\n            {\n                try\n                {\n                    minDistance = distance;\n                    String cityList = \"Shortest distance is \" + minDistance + \", with route: \";\n\n                    for (int i = 0; i < bestOrder.Length; i++)\n                    {\n                        bestOrder[i] = cities[i];\n                        cityList += cityNames[bestOrder[i]];\n                        if (i != bestOrder.Length - 1)\n                            cityList += \", \";\n                    }\n                    Console.WriteLine(cityList);\n                    queueClient.Send(new BrokeredMessage(cityList));\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            static void Main(string[] args)\n            {\n                try\n                {\n\n                  String connectionString = @\"your_connection_string\";\n\n                    int numCities = 10; // Use as the default, if no value is specified\n                    // at the command line.\n                    if (args.Count() != 0)\n                    {\n\n                        if (args[0].ToLower().CompareTo(\"createqueue\") == 0)\n                        {\n                            // No processing to occur other than creating the queue.\n                            namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);\n                            namespaceManager.CreateQueue(queueName);\n                            Console.WriteLine(\"Queue named {0} was created.\", queueName);\n                            Environment.Exit(0);\n                        }\n\n                        if (args[0].ToLower().CompareTo(\"deletequeue\") == 0)\n                        {\n                            // No processing to occur other than deleting the queue.\n                            namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);\n                            namespaceManager.DeleteQueue(\"TSPQueue\");\n                            Console.WriteLine(\"Queue named {0} was deleted.\", queueName);\n                            Environment.Exit(0);\n                        }\n\n                        // Neither creating or deleting a queue.\n                        // Assume the value passed in is the number of cities to solve.\n                        numCities = Convert.ToInt32(args[0]);\n                    }\n\n                    Console.WriteLine(\"Running for {0} cities.\", numCities);\n\n                    queueClient = QueueClient.CreateFromConnectionString(connectionString, \"TSPQueue\");\n\n                    List<int> startCities = new List<int>();\n                    List<int> restCities = new List<int>();\n\n                    startCities.Add(0);\n                    for (int i = 1; i < numCities; i++)\n                    {\n                        restCities.Add(i);\n                    }\n                    distances = new double[numCities, numCities];\n                    cityNames = new String[numCities];\n                    BuildDistances(@\"c:\\tsp\\cities.txt\", numCities);\n                    minDistance = -1;\n                    bestOrder = new int[numCities];\n                    permutation(startCities, 0, restCities);\n                    Console.WriteLine(\"Final solution found!\");\n                    queueClient.Send(new BrokeredMessage(\"Complete\"));\n\n                    queueClient.Close();\n                    Environment.Exit(0);\n\n                }\n                catch (ServerBusyException serverBusyException)\n                {\n                    Console.WriteLine(\"ServerBusyException encountered\");\n                    Console.WriteLine(serverBusyException.Message);\n                    Console.WriteLine(serverBusyException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (ServerErrorException serverErrorException)\n                {\n                    Console.WriteLine(\"ServerErrorException encountered\");\n                    Console.WriteLine(serverErrorException.Message);\n                    Console.WriteLine(serverErrorException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (Exception exception)\n                {\n                    Console.WriteLine(\"Exception encountered\");\n                    Console.WriteLine(exception.Message);\n                    Console.WriteLine(exception.StackTrace);\n                    Environment.Exit(-1);\n                }\n            }\n        }\n    }\n\n\n\n## How to create a .NET application that monitors the progress of the compute-intensive task\n\n1. On your development machine, create a .NET console application using TSPClient as the project name. Ensure the target framework is set for .**NET Framework 4** or later (not **.NET Framework 4 Client Profile**). The target framework can be set after you create a project with the following: In Visual Studio's menu, click **Projects**, click **Properties**, click the **Application** tab, and then set the value for **Target framework**.\n2. Add in the Microsoft ServiceBus library. In Visual Studio Solution Explorer, right-click **TSPClient**, click **Add Reference**, click the **Browse** tab, browse to the Azure .NET SDK (for example, C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.5\\ToolsRef) and then select **Microsoft.ServiceBus.dll** as a reference.\n3. Add the System Runtime Serialization library. In Visual Studio Solution Explorer, right-click **TSPClient**, click **Add Reference**, click the **.NET** tab, and then select **System.Runtime.Serialization** as a reference.\n4. Use the example code at the end of this section for the contents of the Program.cs file.\n5. Modify the **your\\_connection\\_string** placeholder to use your Service Bus **connection string**.\n6. Compile the application. This will create TSPClient.exe in your project's bin folder (either bin\\release or bin\\debug, depending on whether you're targeting a release or debug build). You can run this code from your development machine, or copy this executable and Microsoft.ServiceBus.dll to a machine that will run the client application (it does not need to be on your virtual machine).\n\n<p/>\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.IO;\n\n    using Microsoft.ServiceBus;\n    using Microsoft.ServiceBus.Messaging;\n    using System.Threading; // For Thread.Sleep\n\n    namespace TSPClient\n    {\n        class Program\n        {\n\n            static void Main(string[] args)\n            {\n\n                try\n                {\n\n                    Console.WriteLine(\"Starting at {0}\", DateTime.Now);\n\n                                    String connectionString = @\"your_connection_string\";\n\n                    QueueClient queueClient = QueueClient.CreateFromConnectionString(connectionString, \"TSPQueue\");\n\n                    BrokeredMessage message;\n\n                    int waitMinutes = 3;  // Use as the default, if no value\n                    // is specified at command line.\n\n                    if (0 != args.Length)\n                    {\n                        waitMinutes = Convert.ToInt16(args[0]);\n                    }\n\n                    String waitString;\n                    waitString = (waitMinutes == 1) ? \"minute\" : waitMinutes.ToString() + \" minutes\";\n\n                    while (true)\n                    {\n                        message = queueClient.Receive();\n\n                        if (message != null)\n                        {\n                            try\n                            {\n                                string str = message.GetBody<string>();\n                                Console.WriteLine(str);\n\n                                // Remove message from queue.\n                                message.Complete();\n\n                                if (\"Complete\" == str)\n                                {\n                                    Console.WriteLine(\"Finished at {0}.\", DateTime.Now);\n                                    break;\n                                }\n                            }\n                            catch (Exception e)\n                            {\n                                // Indicates a problem. Unlock the message in the queue.\n                                message.Abandon();\n                                throw e;\n                            }\n                        }\n                        else\n                        {\n                            // The queue is empty.\n                            Console.WriteLine(\"Queue is empty. Sleeping for another {0}.\", waitString);\n                            System.Threading.Thread.Sleep(60000 * waitMinutes);\n                        }\n                    }\n                    queueClient.Close();\n                    Environment.Exit(0);\n                }\n                catch (ServerBusyException serverBusyException)\n                {\n                    Console.WriteLine(\"ServerBusyException encountered\");\n                    Console.WriteLine(serverBusyException.Message);\n                    Console.WriteLine(serverBusyException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (ServerErrorException serverErrorException)\n                {\n                    Console.WriteLine(\"ServerErrorException encountered\");\n                    Console.WriteLine(serverErrorException.Message);\n                    Console.WriteLine(serverErrorException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (Exception exception)\n                {\n                    Console.WriteLine(\"Exception encountered\");\n                    Console.WriteLine(exception.Message);\n                    Console.WriteLine(exception.StackTrace);\n                    Environment.Exit(-1);\n                }\n            }\n        }\n    }\n\n## How to run the .NET applications\n\nRun the compute-intensive application, first to create the queue, then to solve the Traveling Saleseman Problem, which will add the current best route to the Service Bus queue. While the compute-intensive application is running (or afterwards), run the client to display results from the Service Bus queue.\n\n### How to run the compute-intensive application\n\n1. Log in to your virtual machine.\n2. Create a folder named c:\\TSP. This is where you will run your application.\n3. Copy TSPSolver.exe and Microsoft.ServiceBus.dll, both of which are available in your TSPSolver project's bin folder, to c:\\TSP.\n4. Create a file named c:\\TSP\\cities.txt with the following contents.\n\n        City_1, 1002.81, -1841.35\n        City_2, -953.55, -229.6\n        City_3, -1363.11, -1027.72\n        City_4, -1884.47, -1616.16\n        City_5, 1603.08, -1030.03\n        City_6, -1555.58, 218.58\n        City_7, 578.8, -12.87\n        City_8, 1350.76, 77.79\n        City_9, 293.36, -1820.01\n        City_10, 1883.14, 1637.28\n        City_11, -1271.41, -1670.5\n        City_12, 1475.99, 225.35\n        City_13, 1250.78, 379.98\n        City_14, 1305.77, 569.75\n        City_15, 230.77, 231.58\n        City_16, -822.63, -544.68\n        City_17, -817.54, -81.92\n        City_18, 303.99, -1823.43\n        City_19, 239.95, 1007.91\n        City_20, -1302.92, 150.39\n        City_21, -116.11, 1933.01\n        City_22, 382.64, 835.09\n        City_23, -580.28, 1040.04\n        City_24, 205.55, -264.23\n        City_25, -238.81, -576.48\n        City_26, -1722.9, -909.65\n        City_27, 445.22, 1427.28\n        City_28, 513.17, 1828.72\n        City_29, 1750.68, -1668.1\n        City_30, 1705.09, -309.35\n        City_31, -167.34, 1003.76\n        City_32, -1162.85, -1674.33\n        City_33, 1490.32, 821.04\n        City_34, 1208.32, 1523.3\n        City_35, 18.04, 1857.11\n        City_36, 1852.46, 1647.75\n        City_37, -167.44, -336.39\n        City_38, 115.4, 0.2\n        City_39, -66.96, 917.73\n        City_40, 915.96, 474.1\n        City_41, 140.03, 725.22\n        City_42, -1582.68, 1608.88\n        City_43, -567.51, 1253.83\n        City_44, 1956.36, 830.92\n        City_45, -233.38, 909.93\n        City_46, -1750.45, 1940.76\n        City_47, 405.81, 421.84\n        City_48, 363.68, 768.21\n        City_49, -120.3, -463.13\n        City_50, 588.51, 679.33\n\n5. At a command prompt, change directories to c:\\TSP.\n6. You'll need to create the Service Bus queue before you run the TSP solver permutations. Run the following command to create the Service Bus queue.\n\n        TSPSolver createqueue\n\n7. Now that the queue is created, you can run the TSP solver permutations. For example, run the following command to run the solver for 8 cities.\n\n        TSPSolver 8\n\n If you don't specify a number, the solver will run for 10 cities. As the solver finds current shortest routes, it will add them to the queue.\n\nThe solver will run until it finishes examining all routes.\n\n> [AZURE.NOTE]\n> The larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of run time (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.\n\n### How to run the monitoring client application\n1. Log in to your machine where you will run the client application. This does not need to be the same machine running the TSPSolver application, although it can be.\n2. Create a folder where you will run your application. For example, c:\\TSP.\n3. Copy TSPClient.exe and Microsoft.ServiceBus.dll, both of which are in your TSPClient project's bin folder, to the c:\\TSP folder.\n4. At a command prompt, change directories to c:\\TSP.\n5. Run the following command.\n\n        TSPClient\n\n    Optionally, specify the number of minutes to sleep in between checking the queue, by passing in a command-line argument. The default sleep period for checking the queue is 3 minutes, which is used if no command-line argument is passed to TSPClient. If you want to use a different value for the sleep interval, for example, one minute, run the following command.\n\n        TSPClient 1\n\n    The client will run until it sees a queue message of \"Complete\". Note that if you run multiple occurrences of the solver without running the client, you may need to run the client multiple times to completely empty the queue. Alternatively, you can delete the queue and then create it again. To delete the queue, run the following TSPSolver (not TSPClient)  command.\n\n        TSPSolver deletequeue\n\n## How to stop the .NET applications\n\nFor both the solver and client applications, you can press Ctrl+C to exit if you want to end prior to normal completion.\n\n## Alternative to creating and deleting the queue with TSPSolver\nInstead of using TSPSolver to create or delete the queue, you can create or delete the queue using the [Azure portal](https://manage.windowsazure.com). Visit the Service Bus section of the Azure portal to access the user interfaces for creating or deleting a queue, as well as for retrieving the connection string, issuer, and access key. You can also view a dashboard of your Service Bus queues, allowing you to view metrics for your incoming and outgoing messages.\n\n[solver_output]: ./media/virtual-machines-dotnet-run-compute-intensive-task/WA_dotNetTSPSolver.png\n[client_output]: ./media/virtual-machines-dotnet-run-compute-intensive-task/WA_dotNetTSPClient.png\n[create_service_bus]: ./media/virtual-machines-dotnet-run-compute-intensive-task/ServiceBusCreateNew.png\n[create_namespace_dialog]: ./media/virtual-machines-dotnet-run-compute-intensive-task/CreateNameSpaceDialog.png\n[available_namespaces]: ./media/virtual-machines-dotnet-run-compute-intensive-task/AvailableNamespaces.png\n[click_create]: ./media/virtual-machines-dotnet-run-compute-intensive-task/ClickCreate.png\n[namespace_list]: ./media/virtual-machines-dotnet-run-compute-intensive-task/NamespaceList.png\n[access_key_button]: ./media/virtual-machines-dotnet-run-compute-intensive-task/AccessKey.png\n"
}