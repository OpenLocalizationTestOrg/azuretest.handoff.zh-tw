<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Get Started with Fleet on CoreOS on Azure</source>
          <target state="new">Get Started with Fleet on CoreOS on Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Provides basic examples of using Fleet and Docker on a CoreOS Linux virtual machine on Azure.</source>
          <target state="new">Provides basic examples of using Fleet and Docker on a CoreOS Linux virtual machine on Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get Started with Fleet on CoreOS on Azure</source>
          <target state="new">Get Started with Fleet on CoreOS on Azure</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article gives you two quick examples of using <bpt id="p1">[</bpt>fleet<ept id="p1">](https://github.com/coreos/fleet)</ept> and <bpt id="p2">[</bpt>Docker<ept id="p2">](https://www.docker.com/)</ept> to run applications on a cluster of [CoreOS] virtual machines.</source>
          <target state="new">This article gives you two quick examples of using <bpt id="p1">[</bpt>fleet<ept id="p1">](https://github.com/coreos/fleet)</ept> and <bpt id="p2">[</bpt>Docker<ept id="p2">](https://www.docker.com/)</ept> to run applications on a cluster of [CoreOS] virtual machines.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To use these examples, first set up a three-node CoreOS cluster as described in [How to Use CoreOS on Azure].</source>
          <target state="new">To use these examples, first set up a three-node CoreOS cluster as described in [How to Use CoreOS on Azure].</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Having done that, you'll understand the very basic elements of CoreOS deployments and have a working cluster and client computer.</source>
          <target state="new">Having done that, you'll understand the very basic elements of CoreOS deployments and have a working cluster and client computer.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We'll use exactly the same cluster name in these examples.</source>
          <target state="new">We'll use exactly the same cluster name in these examples.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Also, these examples assume you're using your local Linux host to run your <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> commands.</source>
          <target state="new">Also, these examples assume you're using your local Linux host to run your <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> commands.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='simple'&gt;</ph>Example 1: Hello World with Docker<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='simple'&gt;</ph>Example 1: Hello World with Docker<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Here is a simple "Hello World" application that runs in a single Docker container.</source>
          <target state="new">Here is a simple "Hello World" application that runs in a single Docker container.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This uses the [busybox Docker Hub image].</source>
          <target state="new">This uses the [busybox Docker Hub image].</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>On your Linux client computer, use your favorite text editor to create the following <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> unit file and name it <ph id="ph1">`helloworld.service`</ph>.</source>
          <target state="new">On your Linux client computer, use your favorite text editor to create the following <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> unit file and name it <ph id="ph1">`helloworld.service`</ph>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(For details about the syntax, see [Unit Files].)</source>
          <target state="new">(For details about the syntax, see [Unit Files].)</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Now connect to the CoreOS cluster and start the unit by running the following <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> command.</source>
          <target state="new">Now connect to the CoreOS cluster and start the unit by running the following <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> command.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The output shows that the unit is started and where it's located.</source>
          <target state="new">The output shows that the unit is started and where it's located.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To run your remote <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> commands without the <bpt id="p2">**</bpt>--tunnel<ept id="p2">**</ept> parameter, optionally set the FLEETCTL_TUNNEL environment variable to tunnel the requests.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To run your remote <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> commands without the <bpt id="p2">**</bpt>--tunnel<ept id="p2">**</ept> parameter, optionally set the FLEETCTL_TUNNEL environment variable to tunnel the requests.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example: <ph id="ph1">`export FLEETCTL_TUNNEL=coreos-cluster.cloudapp.net:22`</ph>.</source>
          <target state="new">For example: <ph id="ph1">`export FLEETCTL_TUNNEL=coreos-cluster.cloudapp.net:22`</ph>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can connect to the container to see the output of the service:</source>
          <target state="new">You can connect to the container to see the output of the service:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To clean up, stop and unload the unit.</source>
          <target state="new">To clean up, stop and unload the unit.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='highavail'&gt;</ph>Example 2: Highly available Apache server<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='highavail'&gt;</ph>Example 2: Highly available Apache server<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One advantage of using CoreOS, Docker, and <bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> is that it's easy to run services in a highly available manner.</source>
          <target state="new">One advantage of using CoreOS, Docker, and <bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> is that it's easy to run services in a highly available manner.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example you'll deploy a service that consists of three identical containers running the Apache web server.</source>
          <target state="new">In this example you'll deploy a service that consists of three identical containers running the Apache web server.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The containers will run on the three VMs in the cluster.</source>
          <target state="new">The containers will run on the three VMs in the cluster.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example is similar to one in [Launching containers with fleet] and uses the [CoreOS Apache Docker Hub image].</source>
          <target state="new">This example is similar to one in [Launching containers with fleet] and uses the [CoreOS Apache Docker Hub image].</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph> To run the highly available Apache server, you'll need to configure a load-balanced HTTP endpoint on the virtual machines (public port 80, private port 80).</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph> To run the highly available Apache server, you'll need to configure a load-balanced HTTP endpoint on the virtual machines (public port 80, private port 80).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can do this after creating the CoreOS cluster, using the Azure portal or <bpt id="p1">**</bpt>azure vm endpoint<ept id="p1">**</ept> command.</source>
          <target state="new">You can do this after creating the CoreOS cluster, using the Azure portal or <bpt id="p1">**</bpt>azure vm endpoint<ept id="p1">**</ept> command.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See [Configure a load-balanced set] for more information.</source>
          <target state="new">See [Configure a load-balanced set] for more information.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>On your client computer, use your favorite text editor to create a <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> template unit file, named apache@.service.</source>
          <target state="new">On your client computer, use your favorite text editor to create a <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> template unit file, named apache@.service.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You'll use that template to launch three separate instances, named apache@1.service, apache@2.service, and apache@3.service:</source>
          <target state="new">You'll use that template to launch three separate instances, named apache@1.service, apache@2.service, and apache@3.service:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The <ph id="ph2">`X-Conflicts`</ph> attribute tells CoreOS that only one instance of this container can be run on a given CoreOS host.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The <ph id="ph2">`X-Conflicts`</ph> attribute tells CoreOS that only one instance of this container can be run on a given CoreOS host.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For details see [Unit Files].</source>
          <target state="new">For details see [Unit Files].</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Now start the unit instances on the CoreOS cluster.</source>
          <target state="new">Now start the unit instances on the CoreOS cluster.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You should see that they're running on three different machines:</source>
          <target state="new">You should see that they're running on three different machines:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To reach the Apache server running on one of the units, send a simple request to the cloud service hosting the CoreOS cluster.</source>
          <target state="new">To reach the Apache server running on one of the units, send a simple request to the cloud service hosting the CoreOS cluster.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You'll see default text returned from the Apache server similar to:</source>
          <target state="new">You'll see default text returned from the Apache server similar to:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can try shutting down one or more virtual machines in your cluster to verify that the Apache service continues to run.</source>
          <target state="new">You can try shutting down one or more virtual machines in your cluster to verify that the Apache service continues to run.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When done, stop and unload units.</source>
          <target state="new">When done, stop and unload units.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can try doing more with your three-node CoreOS cluster on Azure.</source>
          <target state="new">You can try doing more with your three-node CoreOS cluster on Azure.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Explore how to create more complex clusters and use Docker and create more interesting applications by reading [Tim Park's CoreOS Tutorial], [Patrick Chanezon's CoreOS Tutorial], [Docker] documentation, and the [CoreOS Overview].</source>
          <target state="new">Explore how to create more complex clusters and use Docker and create more interesting applications by reading [Tim Park's CoreOS Tutorial], [Patrick Chanezon's CoreOS Tutorial], [Docker] documentation, and the [CoreOS Overview].</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To get started with Fleet and CoreOS in Azure Resource Manager, try this <bpt id="p1">[</bpt>quickstart template<ept id="p1">](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/)</ept>.</source>
          <target state="new">To get started with Fleet and CoreOS in Azure Resource Manager, try this <bpt id="p1">[</bpt>quickstart template<ept id="p1">](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See [Linux and Open-Source Computing on Azure] for more on using open-source environments on Linux VMs in Azure.</source>
          <target state="new">See [Linux and Open-Source Computing on Azure] for more on using open-source environments on Linux VMs in Azure.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1477833229822d14af174515a447cab9428aafd</xliffext:olfilehash>
  </header>
</xliff>