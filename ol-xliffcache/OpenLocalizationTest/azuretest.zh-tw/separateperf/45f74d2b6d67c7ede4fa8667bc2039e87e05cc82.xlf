<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Configure Asset Delivery Policies using REST</source>
          <target state="new">Configure Asset Delivery Policies using REST</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic shows how to configure different asset delivery policies.</source>
          <target state="new">This topic shows how to configure different asset delivery policies.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to: Configure Asset Delivery Policies</source>
          <target state="new">How to: Configure Asset Delivery Policies</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you plan to deliver dynamically encrypted assets, one of the steps in the Media Services content delivery workflow is configuring delivery policies for assets.</source>
          <target state="new">If you plan to deliver dynamically encrypted assets, one of the steps in the Media Services content delivery workflow is configuring delivery policies for assets.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption).</source>
          <target state="new">The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption).</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic discusses why and how to create and configure asset delivery policies.</source>
          <target state="new">This topic discusses why and how to create and configure asset delivery policies.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one scale unit (also known as streaming unit).</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>To be able to use dynamic packaging and dynamic encryption, you must make sure to have at least one scale unit (also known as streaming unit).</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to Scale a Media Service<ept id="p1">](media-services-manage-origins.md#scale_streaming_endpoints)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>How to Scale a Media Service<ept id="p1">](media-services-manage-origins.md#scale_streaming_endpoints)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Also, your asset must contain a set of adaptive bitrate MP4s or adaptive bitrate Smooth Streaming files.</source>
          <target state="new">Also, your asset must contain a set of adaptive bitrate MP4s or adaptive bitrate Smooth Streaming files.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You could apply different policies to the same asset.</source>
          <target state="new">You could apply different policies to the same asset.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you could apply PlayReady encryption to Smooth Streaming and AES Envelope encryption to MPEG DASH and HLS.</source>
          <target state="new">For example, you could apply PlayReady encryption to Smooth Streaming and AES Envelope encryption to MPEG DASH and HLS.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any protocols that are not defined in a delivery policy (for example, you add a single policy that only specifies HLS as the protocol) will be blocked from streaming.</source>
          <target state="new">Any protocols that are not defined in a delivery policy (for example, you add a single policy that only specifies HLS as the protocol) will be blocked from streaming.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The exception to this is if you have no asset delivery policy defined at all.</source>
          <target state="new">The exception to this is if you have no asset delivery policy defined at all.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Then, all protocols will be allowed in the clear.</source>
          <target state="new">Then, all protocols will be allowed in the clear.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that if your want to delivery a storage encrypted asset, you must configure the asset’s delivery policy.</source>
          <target state="new">Note that if your want to delivery a storage encrypted asset, you must configure the asset’s delivery policy.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy.</source>
          <target state="new">Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) envelope encryption key, set the policy type to <bpt id="p1">**</bpt>DynamicEnvelopeEncryption<ept id="p1">**</ept>.</source>
          <target state="new">For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) envelope encryption key, set the policy type to <bpt id="p1">**</bpt>DynamicEnvelopeEncryption<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To remove storage encryption and stream the asset in the clear, set the policy type to <bpt id="p1">**</bpt>NoDynamicEncryption<ept id="p1">**</ept>.</source>
          <target state="new">To remove storage encryption and stream the asset in the clear, set the policy type to <bpt id="p1">**</bpt>NoDynamicEncryption<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Examples that show how to configure these policy types follow.</source>
          <target state="new">Examples that show how to configure these policy types follow.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Depending on how you configure the asset delivery policy you would be able to dynamically package, dynamically encrypt, and stream the following streaming protocols: Smooth Streaming, HLS, MPEG DASH, and HDS streams.</source>
          <target state="new">Depending on how you configure the asset delivery policy you would be able to dynamically package, dynamically encrypt, and stream the following streaming protocols: Smooth Streaming, HLS, MPEG DASH, and HDS streams.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following list shows the formats that you use to stream Smooth, HLS, DASH and HDS.</source>
          <target state="new">The following list shows the formats that you use to stream Smooth, HLS, DASH and HDS.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Smooth Streaming:</source>
          <target state="new">Smooth Streaming:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>HLS:</source>
          <target state="new">HLS:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>MPEG DASH</source>
          <target state="new">MPEG DASH</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>HDS</source>
          <target state="new">HDS</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For instructions on how to publish an asset and build a streaming URL, see <bpt id="p1">[</bpt>Build a streaming URL<ept id="p1">](media-services-deliver-streaming-content.md)</ept>.</source>
          <target state="new">For instructions on how to publish an asset and build a streaming URL, see <bpt id="p1">[</bpt>Build a streaming URL<ept id="p1">](media-services-deliver-streaming-content.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</source>
          <target state="new">When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Setup for Media Services REST API Development<ept id="p1">](media-services-rest-how-to-use.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Setup for Media Services REST API Development<ept id="p1">](media-services-rest-how-to-use.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</source>
          <target state="new">After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must make subsequent calls to the new URI as described in <bpt id="p1">[</bpt>Connecting to Media Services using REST API<ept id="p1">](media-services-rest-connect_programmatically.md)</ept>.</source>
          <target state="new">You must make subsequent calls to the new URI as described in <bpt id="p1">[</bpt>Connecting to Media Services using REST API<ept id="p1">](media-services-rest-connect_programmatically.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Clear asset delivery policy</source>
          <target state="new">Clear asset delivery policy</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="create_asset_delivery_policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create asset delivery policy</source>
          <target state="new"><ph id="ph1">&lt;a id="create_asset_delivery_policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create asset delivery policy</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following HTTP request creates an asset delivery policy that specifies to not apply dynamic encryption and to deliver the stream in any of the following protocols:  MPEG DASH, HLS, and Smooth Streaming protocols.</source>
          <target state="new">The following HTTP request creates an asset delivery policy that specifies to not apply dynamic encryption and to deliver the stream in any of the following protocols:  MPEG DASH, HLS, and Smooth Streaming protocols.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</source>
          <target state="new">For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="link_asset_with_asset_delivery_policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Link asset with asset delivery policy</source>
          <target state="new"><ph id="ph1">&lt;a id="link_asset_with_asset_delivery_policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Link asset with asset delivery policy</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following HTTP request links the specified asset to the asset delivery policy to.</source>
          <target state="new">The following HTTP request links the specified asset to the asset delivery policy to.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>DynamicEnvelopeEncryption asset delivery policy</source>
          <target state="new">DynamicEnvelopeEncryption asset delivery policy</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Create content key of the EnvelopeEncryption type and link it to the asset</source>
          <target state="new">Create content key of the EnvelopeEncryption type and link it to the asset</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When specifying DynamicEnvelopeEncryption delivery policy, you need to make sure to link your asset to a content key of the EnvelopeEncryption type.</source>
          <target state="new">When specifying DynamicEnvelopeEncryption delivery policy, you need to make sure to link your asset to a content key of the EnvelopeEncryption type.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see: <bpt id="p1">[</bpt>Creating a content key<ept id="p1">](media-services-rest-create-contentkey.md)</ept>).</source>
          <target state="new">For more information, see: <bpt id="p1">[</bpt>Creating a content key<ept id="p1">](media-services-rest-create-contentkey.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="get_delivery_url"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Get delivery URL</source>
          <target state="new"><ph id="ph1">&lt;a id="get_delivery_url"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Get delivery URL</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Get the delivery URL for the specified delivery method of the content key created in the previous step.</source>
          <target state="new">Get the delivery URL for the specified delivery method of the content key created in the previous step.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A client uses the returned URL to request an AES key or a PlayReady license in order to playback the protected content.</source>
          <target state="new">A client uses the returned URL to request an AES key or a PlayReady license in order to playback the protected content.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specify the type of the URL to get in the body of the HTTP request.</source>
          <target state="new">Specify the type of the URL to get in the body of the HTTP request.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you are protecting your content with PlayReady, request a Media Services PlayReady license acquisition URL, using 1 for the keyDeliveryType: {"keyDeliveryType":1}.</source>
          <target state="new">If you are protecting your content with PlayReady, request a Media Services PlayReady license acquisition URL, using 1 for the keyDeliveryType: {"keyDeliveryType":1}.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you are protecting your content with the envelope encryption, request a key acquisition URL by specifying 2 for keyDeliveryType: {"keyDeliveryType":2}.</source>
          <target state="new">If you are protecting your content with the envelope encryption, request a key acquisition URL by specifying 2 for keyDeliveryType: {"keyDeliveryType":2}.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create asset delivery policy</source>
          <target state="new">Create asset delivery policy</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following HTTP request creates the <bpt id="p1">**</bpt>AssetDeliveryPolicy<ept id="p1">**</ept> that is configured to apply dynamic envelope encryption (<bpt id="p2">**</bpt>DynamicEnvelopeEncryption<ept id="p2">**</ept>) to the <bpt id="p3">**</bpt>HLS<ept id="p3">**</ept> protocol (in this example, other protocols will be blocked from streaming).</source>
          <target state="new">The following HTTP request creates the <bpt id="p1">**</bpt>AssetDeliveryPolicy<ept id="p1">**</ept> that is configured to apply dynamic envelope encryption (<bpt id="p2">**</bpt>DynamicEnvelopeEncryption<ept id="p2">**</ept>) to the <bpt id="p3">**</bpt>HLS<ept id="p3">**</ept> protocol (in this example, other protocols will be blocked from streaming).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</source>
          <target state="new">For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Link asset with asset delivery policy</source>
          <target state="new">Link asset with asset delivery policy</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Link asset with asset delivery policy<ept id="p1">](#link_asset_with_asset_delivery_policy)</ept></source>
          <target state="new">See <bpt id="p1">[</bpt>Link asset with asset delivery policy<ept id="p1">](#link_asset_with_asset_delivery_policy)</ept></target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>DynamicCommonEncryption asset delivery policy</source>
          <target state="new">DynamicCommonEncryption asset delivery policy</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Create content key of the CommonEncryption type and link it to the asset</source>
          <target state="new">Create content key of the CommonEncryption type and link it to the asset</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When specifying DynamicCommonEncryption delivery policy, you need to make sure to link your asset to a content key of the CommonEncryption type.</source>
          <target state="new">When specifying DynamicCommonEncryption delivery policy, you need to make sure to link your asset to a content key of the CommonEncryption type.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see: <bpt id="p1">[</bpt>Creating a content key<ept id="p1">](media-services-rest-create-contentkey.md)</ept>).</source>
          <target state="new">For more information, see: <bpt id="p1">[</bpt>Creating a content key<ept id="p1">](media-services-rest-create-contentkey.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Get Delivery URL</source>
          <target state="new">Get Delivery URL</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Get the delivery URL for the PlayReady delivery method of the content key created in the previous step.</source>
          <target state="new">Get the delivery URL for the PlayReady delivery method of the content key created in the previous step.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A client uses the returned URL to request a PlayReady license in order to playback the protected content.</source>
          <target state="new">A client uses the returned URL to request a PlayReady license in order to playback the protected content.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Get Delivery URL<ept id="p1">](#get_delivery_url)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Get Delivery URL<ept id="p1">](#get_delivery_url)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Create asset delivery policy</source>
          <target state="new">Create asset delivery policy</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following HTTP request creates the <bpt id="p1">**</bpt>AssetDeliveryPolicy<ept id="p1">**</ept> that is configured to apply dynamic common encryption (<bpt id="p2">**</bpt>DynamicCommonEncryption<ept id="p2">**</ept>) to the <bpt id="p3">**</bpt>Smooth Streaming<ept id="p3">**</ept> protocol (in this example, other protocols will be blocked from streaming).</source>
          <target state="new">The following HTTP request creates the <bpt id="p1">**</bpt>AssetDeliveryPolicy<ept id="p1">**</ept> that is configured to apply dynamic common encryption (<bpt id="p2">**</bpt>DynamicCommonEncryption<ept id="p2">**</ept>) to the <bpt id="p3">**</bpt>Smooth Streaming<ept id="p3">**</ept> protocol (in this example, other protocols will be blocked from streaming).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</source>
          <target state="new">For information on what values you can specify when creating an AssetDeliveryPolicy, see the <bpt id="p1">[</bpt>Types used when defining AssetDeliveryPolicy<ept id="p1">](#types)</ept> section.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Link asset with asset delivery policy</source>
          <target state="new">Link asset with asset delivery policy</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Link asset with asset delivery policy<ept id="p1">](#link_asset_with_asset_delivery_policy)</ept></source>
          <target state="new">See <bpt id="p1">[</bpt>Link asset with asset delivery policy<ept id="p1">](#link_asset_with_asset_delivery_policy)</ept></target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Types used when defining AssetDeliveryPolicy</source>
          <target state="new"><ph id="ph1">&lt;a id="types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Types used when defining AssetDeliveryPolicy</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>AssetDeliveryProtocol</source>
          <target state="new">AssetDeliveryProtocol</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>AssetDeliveryPolicyType</source>
          <target state="new">AssetDeliveryPolicyType</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ContentKeyDeliveryType</source>
          <target state="new">ContentKeyDeliveryType</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>AssetDeliveryPolicyConfigurationKey</source>
          <target state="new">AssetDeliveryPolicyConfigurationKey</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45f74d2b6d67c7ede4fa8667bc2039e87e05cc82</xliffext:olfilehash>
  </header>
</xliff>