{
  "nodes": [
    {
      "content": "How to use Service Bus queues (PHP) | Microsoft Azure",
      "pos": [
        28,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus queues in Azure.",
      "pos": [
        101,
        146
      ]
    },
    {
      "content": "Code samples written in PHP.",
      "pos": [
        147,
        175
      ]
    },
    {
      "content": "How to use Service Bus queues",
      "pos": [
        485,
        514
      ]
    },
    {
      "content": "This guide shows you how to use Service Bus queues.",
      "pos": [
        516,
        567
      ]
    },
    {
      "content": "The samples are written in PHP and use the <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](../php-download-sdk.md)</ept>.",
      "pos": [
        568,
        655
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating queues<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>sending and receiving messages<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>deleting queues<ept id=\"p3\">**</ept>.",
      "pos": [
        656,
        767
      ]
    },
    {
      "content": "Create a PHP application",
      "pos": [
        860,
        884
      ]
    },
    {
      "content": "The only requirement for creating a PHP application that accesses the Azure Blob service is the referencing of classes in the <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](../php-download-sdk.md)</ept> from within your code.",
      "pos": [
        886,
        1078
      ]
    },
    {
      "content": "You can use any development tools to create your application, or Notepad.",
      "pos": [
        1079,
        1152
      ]
    },
    {
      "pos": [
        1156,
        1276
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Your PHP installation must also have the <bpt id=\"p1\">[</bpt>OpenSSL extension<ept id=\"p1\">](http://php.net/openssl)</ept> installed and enabled."
    },
    {
      "content": "In this guide, you will use service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.",
      "pos": [
        1278,
        1451
      ]
    },
    {
      "content": "Get the Azure client libraries",
      "pos": [
        1456,
        1486
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        1571,
        1616
      ]
    },
    {
      "content": "To use the Azure Service Bus queue APIs, do the following:",
      "pos": [
        1618,
        1676
      ]
    },
    {
      "pos": [
        1681,
        1760
      ],
      "content": "Reference the autoloader file using the <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> statement."
    },
    {
      "content": "Reference any classes you might use.",
      "pos": [
        1764,
        1800
      ]
    },
    {
      "pos": [
        1802,
        1909
      ],
      "content": "The following example shows how to include the autoloader file and reference the <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This example (and other examples in this article) assumes you have installed the PHP Client Libraries for Azure via Composer.",
      "pos": [
        1913,
        2051
      ]
    },
    {
      "content": "If you installed the libraries manually or as a PEAR package, you must reference the <bpt id=\"p1\">**</bpt>WindowsAzure.php<ept id=\"p1\">**</ept> autoloader file.",
      "pos": [
        2052,
        2174
      ]
    },
    {
      "pos": [
        2262,
        2409
      ],
      "content": "In the examples below, the <ph id=\"ph1\">`require_once`</ph> statement will always be shown, but only the classes necessary for the example to execute are referenced."
    },
    {
      "content": "Set up an Azure Service Bus connection",
      "pos": [
        2414,
        2452
      ]
    },
    {
      "content": "To instantiate a Service Bus client, you must first have a valid connection string in this format:",
      "pos": [
        2454,
        2552
      ]
    },
    {
      "pos": [
        2651,
        2746
      ],
      "content": "Where <bpt id=\"p1\">**</bpt>Endpoint<ept id=\"p1\">**</ept> is typically of the format <ph id=\"ph1\">`https://[yourNamespace].servicebus.windows.net`</ph>."
    },
    {
      "content": "To create any Azure service client you must use the <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> class.",
      "pos": [
        2748,
        2826
      ]
    },
    {
      "content": "You can:",
      "pos": [
        2827,
        2835
      ]
    },
    {
      "content": "Pass the connection string directly to it.",
      "pos": [
        2839,
        2881
      ]
    },
    {
      "pos": [
        2884,
        2989
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> to check multiple external sources for the connection string:"
    },
    {
      "content": "By default it comes with support for one external source - environmental variables",
      "pos": [
        2996,
        3078
      ]
    },
    {
      "pos": [
        3085,
        3158
      ],
      "content": "You can add new sources by extending the <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> class"
    },
    {
      "content": "For the examples outlined here, the connection string will be passed directly.",
      "pos": [
        3160,
        3238
      ]
    },
    {
      "content": "How to: create a queue",
      "pos": [
        3555,
        3577
      ]
    },
    {
      "content": "You can perform management operations for Service Bus queues via the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> class.",
      "pos": [
        3579,
        3678
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> object is constructed via the <bpt id=\"p2\">**</bpt>ServicesBuilder::createServiceBusService<ept id=\"p2\">**</ept> factory method with an appropriate connection string that encapsulates the token permissions to manage it.",
      "pos": [
        3679,
        3886
      ]
    },
    {
      "pos": [
        3888,
        4084
      ],
      "content": "The following example shows how to instantiate a <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> and call <bpt id=\"p2\">**</bpt>ServiceBusRestProxy-&gt;createQueue<ept id=\"p2\">**</ept> to create a queue named <ph id=\"ph1\">`myqueue`</ph> within a <ph id=\"ph2\">`MySBNamespace`</ph> service namespace:"
    },
    {
      "pos": [
        4912,
        5078
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You can use the <ph id=\"ph2\">`listQueues`</ph> method on <ph id=\"ph3\">`ServiceBusRestProxy`</ph> objects to check if a queue with a specified name already exists within a service namespace."
    },
    {
      "content": "How to: send messages to a queue",
      "pos": [
        5083,
        5115
      ]
    },
    {
      "content": "To send a message to a Service Bus queue, your application calls the <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;sendQueueMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        5117,
        5235
      ]
    },
    {
      "content": "The following code shows how to send a message to the <ph id=\"ph1\">`myqueue`</ph> queue previously created within the",
      "pos": [
        5236,
        5335
      ]
    },
    {
      "content": "<ph id=\"ph1\">`MySBNamespace`</ph> service namespace.",
      "pos": [
        5336,
        5370
      ]
    },
    {
      "content": "Messages sent to (and received from ) Service Bus queues are instances of the <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> class.",
      "pos": [
        6275,
        6379
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set of standard methods (such as <bpt id=\"p2\">**</bpt>getLabel<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>getTimeToLive<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>setLabel<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>setTimeToLive<ept id=\"p5\">**</ept>) and properties that are used to hold custom application-specific properties, and a body of arbitrary application data.",
      "pos": [
        6380,
        6636
      ]
    },
    {
      "content": "Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        6638,
        6808
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        6809,
        6938
      ]
    },
    {
      "content": "This upper limit on queue size is 5 GB.",
      "pos": [
        6939,
        6978
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        6983,
        7019
      ]
    },
    {
      "content": "The best way to receive messages from a queue is to use a <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;receiveQueueMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        7021,
        7131
      ]
    },
    {
      "content": "Messages can be received in two different modes: <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> (the default) and <bpt id=\"p2\">**</bpt>PeekLock<ept id=\"p2\">**</ept>.",
      "pos": [
        7132,
        7233
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a queue, it marks the message as being consumed and returns it to the application.",
      "pos": [
        7235,
        7463
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        7464,
        7629
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        7630,
        7757
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        7758,
        7967
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode, receiving a message becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        7969,
        8128
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers from receiving it, and then returns it to the application.",
      "pos": [
        8129,
        8302
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by passing the received message to <bpt id=\"p1\">**</bpt>ServiceBusRestProxy-&gt;deleteMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        8303,
        8531
      ]
    },
    {
      "content": "When Service Bus sees the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> call, it will mark the message as being consumed and remove it from the queue.",
      "pos": [
        8532,
        8654
      ]
    },
    {
      "pos": [
        8656,
        8775
      ],
      "content": "The following example shows how a message can be received and processed using <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (not the default mode)."
    },
    {
      "content": "How to: handle application crashes and unreadable messages",
      "pos": [
        10158,
        10216
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        10218,
        10353
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the received message (instead of the <bpt id=\"p2\">**</bpt>deleteMessage<ept id=\"p2\">**</ept> method).",
      "pos": [
        10354,
        10542
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        10543,
        10731
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.",
      "pos": [
        10733,
        11033
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> request is issued, then the message will be redelivered to the application when it restarts.",
      "pos": [
        11035,
        11231
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>; that is, each message is processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        11232,
        11394
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then adding additional logic to applications to handle duplicate message delivery is recommended.",
      "pos": [
        11395,
        11546
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>getMessageId<ept id=\"p1\">**</ept> method of the message, which remains constant across delivery attempts.",
      "pos": [
        11547,
        11668
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        11673,
        11683
      ]
    },
    {
      "pos": [
        11685,
        11821
      ],
      "content": "Now that you've learned the basics of Service Bus queues, see the MSDN topic <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept> for more information."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus queues (PHP) | Microsoft Azure\" \n    description=\"Learn how to use Service Bus queues in Azure. Code samples written in PHP.\" \n    services=\"service-bus\" \n    documentationCenter=\"php\" \n    authors=\"sethmanheim\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"PHP\" \n    ms.topic=\"article\" \n    ms.date=\"07/06/2015\" \n    ms.author=\"sethm\"/>\n\n# How to use Service Bus queues\n\nThis guide shows you how to use Service Bus queues. The samples are written in PHP and use the [Azure SDK for PHP](../php-download-sdk.md). The scenarios covered include **creating queues**, **sending and receiving messages**, and **deleting queues**.\n\n[AZURE.INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\n\n## Create a PHP application\n\nThe only requirement for creating a PHP application that accesses the Azure Blob service is the referencing of classes in the [Azure SDK for PHP](../php-download-sdk.md) from within your code. You can use any development tools to create your application, or Notepad.\n\n> [AZURE.NOTE] Your PHP installation must also have the [OpenSSL extension](http://php.net/openssl) installed and enabled.\n\nIn this guide, you will use service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.\n\n## Get the Azure client libraries\n\n[AZURE.INCLUDE [get-client-libraries](../../includes/get-client-libraries.md)]\n\n## Configure your application to use Service Bus\n\nTo use the Azure Service Bus queue APIs, do the following:\n\n1. Reference the autoloader file using the [require_once][require_once] statement.\n2. Reference any classes you might use.\n\nThe following example shows how to include the autoloader file and reference the **ServicesBuilder** class.\n\n> [AZURE.NOTE] This example (and other examples in this article) assumes you have installed the PHP Client Libraries for Azure via Composer. If you installed the libraries manually or as a PEAR package, you must reference the **WindowsAzure.php** autoloader file.\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\nIn the examples below, the `require_once` statement will always be shown, but only the classes necessary for the example to execute are referenced.\n\n## Set up an Azure Service Bus connection\n\nTo instantiate a Service Bus client, you must first have a valid connection string in this format:\n\n    Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\n\nWhere **Endpoint** is typically of the format `https://[yourNamespace].servicebus.windows.net`.\n\nTo create any Azure service client you must use the **ServicesBuilder** class. You can:\n\n* Pass the connection string directly to it.\n* Use the **CloudConfigurationManager (CCM)** to check multiple external sources for the connection string:\n    * By default it comes with support for one external source - environmental variables\n    * You can add new sources by extending the **ConnectionStringSource** class\n\nFor the examples outlined here, the connection string will be passed directly.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $connectionString = \"Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\";\n\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n\n\n## How to: create a queue\n\nYou can perform management operations for Service Bus queues via the **ServiceBusRestProxy** class. A **ServiceBusRestProxy** object is constructed via the **ServicesBuilder::createServiceBusService** factory method with an appropriate connection string that encapsulates the token permissions to manage it.\n\nThe following example shows how to instantiate a **ServiceBusRestProxy** and call **ServiceBusRestProxy->createQueue** to create a queue named `myqueue` within a `MySBNamespace` service namespace:\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\QueueInfo;\n\n    // Create Service Bus REST proxy.\n        $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    \n    try {\n        $queueInfo = new QueueInfo(\"myqueue\");\n        \n        // Create queue.\n        $serviceBusRestProxy->createQueue($queueInfo);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/dd179357\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n> [AZURE.NOTE] You can use the `listQueues` method on `ServiceBusRestProxy` objects to check if a queue with a specified name already exists within a service namespace.\n\n## How to: send messages to a queue\n\nTo send a message to a Service Bus queue, your application calls the **ServiceBusRestProxy->sendQueueMessage** method. The following code shows how to send a message to the `myqueue` queue previously created within the\n`MySBNamespace` service namespace.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\BrokeredMessage;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Create message.\n        $message = new BrokeredMessage();\n        $message->setBody(\"my message\");\n    \n        // Send message.\n        $serviceBusRestProxy->sendQueueMessage(\"myqueue\", $message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/library/windowsazure/hh780775\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\nMessages sent to (and received from ) Service Bus queues are instances of the **BrokeredMessage** class. **BrokeredMessage** objects have a set of standard methods (such as **getLabel**, **getTimeToLive**, **setLabel**, and **setTimeToLive**) and properties that are used to hold custom application-specific properties, and a body of arbitrary application data.\n\nService Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This upper limit on queue size is 5 GB.\n\n## How to receive messages from a queue\n\nThe best way to receive messages from a queue is to use a **ServiceBusRestProxy->receiveQueueMessage** method. Messages can be received in two different modes: **ReceiveAndDelete** (the default) and **PeekLock**.\n\nWhen using the **ReceiveAndDelete** mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a queue, it marks the message as being consumed and returns it to the application. **ReceiveAndDelete** mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIn **PeekLock** mode, receiving a message becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers from receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by passing the received message to **ServiceBusRestProxy->deleteMessage**. When Service Bus sees the **deleteMessage** call, it will mark the message as being consumed and remove it from the queue.\n\nThe following example shows how a message can be received and processed using **PeekLock** mode (not the default mode).\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\ReceiveMessageOptions;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Set the receive mode to PeekLock (default is ReceiveAndDelete).\n        $options = new ReceiveMessageOptions();\n        $options->setPeekLock();\n        \n        // Receive message.\n        $message = $serviceBusRestProxy->receiveQueueMessage(\"myqueue\", $options);\n        echo \"Body: \".$message->getBody().\"<br />\";\n        echo \"MessageID: \".$message->getMessageId().\"<br />\";\n        \n        /*---------------------------\n            Process message here.\n        ----------------------------*/\n        \n        // Delete message. Not necessary if peek lock is not set.\n        echo \"Message deleted.<br />\";\n        $serviceBusRestProxy->deleteMessage($message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/windowsazure/hh780735\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## How to: handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlockMessage** method on the received message (instead of the **deleteMessage** method). This will cause Service Bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **deleteMessage** request is issued, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**; that is, each message is processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then adding additional logic to applications to handle duplicate message delivery is recommended. This is often achieved using the **getMessageId** method of the message, which remains constant across delivery attempts.\n\n## Next steps\n\nNow that you've learned the basics of Service Bus queues, see the MSDN topic [Queues, Topics, and Subscriptions][] for more information.\n\n[Service Bus Queue Diagram]: ../../../DevCenter/Java/Media/SvcBusQueues_01_FlowDiagram.jpg\n[Azure Management Portal]: http://manage.windowsazure.com/\n[Service Bus Node screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_02_SvcBusNode.jpg\n[Create a New Namespace screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_03_CreateNewSvcNamespace.jpg\n[Available Namespaces screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_04_SvcBusNode_AvailNamespaces.jpg\n[Namespace List screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_05_NamespaceList.jpg\n[Properties Pane screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_06_PropertiesPane.jpg\n[Default Key screenshot]: ../../../DevCenter/Java/Media/SvcBusQueues_07_DefaultKey.jpg\n[Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n[require_once]: http://php.net/require_once\n\n \n"
}