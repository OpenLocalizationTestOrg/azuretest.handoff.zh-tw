{
  "nodes": [
    {
      "content": "Group by options in SQL Data Warehouse | Microsoft Azure",
      "pos": [
        26,
        82
      ]
    },
    {
      "content": "Tips for implementing group by options in Azure SQL Data Warehouse for developing solutions.",
      "pos": [
        100,
        192
      ]
    },
    {
      "content": "Group by options in SQL Data Warehouse",
      "pos": [
        530,
        568
      ]
    },
    {
      "content": "The [GROUP BY] clause is used to aggregate data to a summary set of rows.",
      "pos": [
        570,
        643
      ]
    },
    {
      "content": "It also has a few options that extend it's functionality that need to be worked around as they are not directly supported by Azure SQL Data Warehouse.",
      "pos": [
        644,
        794
      ]
    },
    {
      "content": "These options are",
      "pos": [
        796,
        813
      ]
    },
    {
      "content": "GROUP BY with ROLLUP",
      "pos": [
        816,
        836
      ]
    },
    {
      "content": "GROUPING SETS",
      "pos": [
        839,
        852
      ]
    },
    {
      "content": "GROUP BY with CUBE",
      "pos": [
        855,
        873
      ]
    },
    {
      "content": "Rollup and grouping sets options",
      "pos": [
        878,
        910
      ]
    },
    {
      "content": "The simplest option here is to use <ph id=\"ph1\">`UNION ALL`</ph> instead to perform the rollup rather than relying on the explicit syntax.",
      "pos": [
        911,
        1031
      ]
    },
    {
      "content": "The result is exactly the same",
      "pos": [
        1032,
        1062
      ]
    },
    {
      "pos": [
        1064,
        1134
      ],
      "content": "Below is an example of a group by statement using the <ph id=\"ph1\">`ROLLUP`</ph> option:"
    },
    {
      "content": "By using ROLLUP we have requested the following aggregations:",
      "pos": [
        1512,
        1573
      ]
    },
    {
      "content": "Country and Region",
      "pos": [
        1576,
        1594
      ]
    },
    {
      "content": "Country",
      "pos": [
        1597,
        1604
      ]
    },
    {
      "content": "Grand Total",
      "pos": [
        1607,
        1618
      ]
    },
    {
      "pos": [
        1620,
        1745
      ],
      "content": "To replace this you will need to use <ph id=\"ph1\">`UNION ALL`</ph>; specifying the aggregations required explicitly to return the same results:"
    },
    {
      "content": "For GROUPING SETS all we need to do is adopt the same principal but only create UNION ALL sections for the aggregation levels we want to see",
      "pos": [
        2494,
        2634
      ]
    },
    {
      "content": "Cube options",
      "pos": [
        2639,
        2651
      ]
    },
    {
      "content": "It is possible to create a GROUP BY WITH CUBE using the UNION ALL approach.",
      "pos": [
        2652,
        2727
      ]
    },
    {
      "content": "The problem is that the code can quickly become cumbersome and unwieldy.",
      "pos": [
        2728,
        2800
      ]
    },
    {
      "content": "To mitigate this you can use this more advanced approach.",
      "pos": [
        2801,
        2858
      ]
    },
    {
      "content": "Let's use the example above.",
      "pos": [
        2860,
        2888
      ]
    },
    {
      "content": "The first step is to define the 'cube' that defines all the levels of aggregation that we want to create.",
      "pos": [
        2890,
        2995
      ]
    },
    {
      "content": "It is important to take note of the CROSS JOIN of the two derived tables.",
      "pos": [
        2996,
        3069
      ]
    },
    {
      "content": "This generates all the levels for us.",
      "pos": [
        3070,
        3107
      ]
    },
    {
      "content": "The rest of the code is really there for formatting.",
      "pos": [
        3108,
        3160
      ]
    },
    {
      "content": "The results of the CTAS can be seen below:",
      "pos": [
        3960,
        4002
      ]
    },
    {
      "content": "![][1]",
      "pos": [
        4004,
        4010
      ]
    },
    {
      "content": "The second step is to specify a target table to store interim results:",
      "pos": [
        4012,
        4082
      ]
    },
    {
      "content": "The third step is to loop over our cube of columns performing the aggregation.",
      "pos": [
        4397,
        4475
      ]
    },
    {
      "content": "The query will run once for every row in the #Cube temporary table and store the results in the #Results temp table",
      "pos": [
        4476,
        4591
      ]
    },
    {
      "content": "Lastly we can return the results by simply reading from the #Results temporary table",
      "pos": [
        5218,
        5302
      ]
    },
    {
      "content": "By breaking the code up into sections and generating a looping construct the code becomes more manageable and maintainable.",
      "pos": [
        5354,
        5477
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        5484,
        5494
      ]
    },
    {
      "pos": [
        5495,
        5551
      ],
      "content": "For more development tips, see <bpt id=\"p1\">[</bpt>development overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Group by options in SQL Data Warehouse | Microsoft Azure\"\n   description=\"Tips for implementing group by options in Azure SQL Data Warehouse for developing solutions.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"06/26/2015\"\n   ms.author=\"JRJ@BigBangData.co.uk;barbkess\"/>\n\n# Group by options in SQL Data Warehouse\n\nThe [GROUP BY] clause is used to aggregate data to a summary set of rows. It also has a few options that extend it's functionality that need to be worked around as they are not directly supported by Azure SQL Data Warehouse.\n\nThese options are\n- GROUP BY with ROLLUP\n- GROUPING SETS\n- GROUP BY with CUBE\n\n## Rollup and grouping sets options\nThe simplest option here is to use `UNION ALL` instead to perform the rollup rather than relying on the explicit syntax. The result is exactly the same\n\nBelow is an example of a group by statement using the `ROLLUP` option:\n\n```\nSELECT [SalesTerritoryCountry]\n,      [SalesTerritoryRegion]\n,      SUM(SalesAmount)             AS TotalSalesAmount\nFROM  dbo.factInternetSales s\nJOIN  dbo.DimSalesTerritory t       ON s.SalesTerritoryKey       = t.SalesTerritoryKey\nGROUP BY ROLLUP (\n                        [SalesTerritoryCountry]\n                ,       [SalesTerritoryRegion]\n                )\n;\n```\n\nBy using ROLLUP we have requested the following aggregations:\n- Country and Region\n- Country\n- Grand Total\n\nTo replace this you will need to use `UNION ALL`; specifying the aggregations required explicitly to return the same results:\n\n```\nSELECT [SalesTerritoryCountry]\n,      [SalesTerritoryRegion]\n,      SUM(SalesAmount) AS TotalSalesAmount\nFROM  dbo.factInternetSales s\nJOIN  dbo.DimSalesTerritory t     ON s.SalesTerritoryKey       = t.SalesTerritoryKey\nGROUP BY \n       [SalesTerritoryCountry]\n,      [SalesTerritoryRegion]\nUNION ALL\nSELECT [SalesTerritoryCountry]\n,      NULL\n,      SUM(SalesAmount) AS TotalSalesAmount\nFROM  dbo.factInternetSales s\nJOIN  dbo.DimSalesTerritory t     ON s.SalesTerritoryKey       = t.SalesTerritoryKey\nGROUP BY \n       [SalesTerritoryCountry]\nUNION ALL\nSELECT NULL\n,      NULL\n,      SUM(SalesAmount) AS TotalSalesAmount\nFROM  dbo.factInternetSales s\nJOIN  dbo.DimSalesTerritory t     ON s.SalesTerritoryKey       = t.SalesTerritoryKey;\n```\n\nFor GROUPING SETS all we need to do is adopt the same principal but only create UNION ALL sections for the aggregation levels we want to see\n\n## Cube options\nIt is possible to create a GROUP BY WITH CUBE using the UNION ALL approach. The problem is that the code can quickly become cumbersome and unwieldy. To mitigate this you can use this more advanced approach.\n\nLet's use the example above.\n\nThe first step is to define the 'cube' that defines all the levels of aggregation that we want to create. It is important to take note of the CROSS JOIN of the two derived tables. This generates all the levels for us. The rest of the code is really there for formatting.\n\n```\nCREATE TABLE #Cube\nWITH \n(   DISTRIBUTION = ROUND_ROBIN\n,   LOCATION = USER_DB\n)\nAS\nWITH GrpCube AS\n(SELECT    CAST(ISNULL(Country,'NULL')+','+ISNULL(Region,'NULL') AS NVARCHAR(50)) as 'Cols'\n,          CAST(ISNULL(Country+',','')+ISNULL(Region,'') AS NVARCHAR(50))  as 'GroupBy'\n,          ROW_NUMBER() OVER (ORDER BY Country) as 'Seq'\nFROM       ( SELECT 'SalesTerritoryCountry' as Country\n             UNION ALL\n             SELECT NULL\n           ) c\nCROSS JOIN ( SELECT 'SalesTerritoryRegion' as Region\n             UNION ALL\n             SELECT NULL\n           ) r\n)\nSELECT Cols\n,      CASE WHEN SUBSTRING(GroupBy,LEN(GroupBy),1) = ',' \n            THEN SUBSTRING(GroupBy,1,LEN(GroupBy)-1) \n            ELSE GroupBy \n       END AS GroupBy  --Remove Trailing Comma\n,Seq\nFROM GrpCube;\n```\n\nThe results of the CTAS can be seen below:\n\n![][1]\n\nThe second step is to specify a target table to store interim results:\n\n```\nDECLARE \n @SQL NVARCHAR(4000)\n,@Columns NVARCHAR(4000)\n,@GroupBy NVARCHAR(4000)\n,@i INT = 1\n,@nbr INT = 0\n;\nCREATE TABLE #Results\n(\n [SalesTerritoryCountry] NVARCHAR(50)\n,[SalesTerritoryRegion]  NVARCHAR(50)\n,[TotalSalesAmount]      MONEY\n)\nWITH\n(   DISTRIBUTION = ROUND_ROBIN\n,   LOCATION = USER_DB\n)\n;\n```\n\nThe third step is to loop over our cube of columns performing the aggregation. The query will run once for every row in the #Cube temporary table and store the results in the #Results temp table\n\n```\nSET @nbr =(SELECT MAX(Seq) FROM #Cube);\n\nWHILE @i<=@nbr\nBEGIN\n    SET @Columns = (SELECT Cols    FROM #Cube where seq = @i);\n    SET @GroupBy = (SELECT GroupBy FROM #Cube where seq = @i);\n\n    SET @SQL ='INSERT INTO #Results\n              SELECT '+@Columns+'\n              ,      SUM(SalesAmount) AS TotalSalesAmount\n              FROM  dbo.factInternetSales s\n              JOIN  dbo.DimSalesTerritory t  \n              ON s.SalesTerritoryKey = t.SalesTerritoryKey\n              '+CASE WHEN @GroupBy <>'' \n                     THEN 'GROUP BY '+@GroupBy ELSE '' END\n\n    EXEC sp_executesql @SQL;\n    SET @i +=1;\nEND\n```\n\nLastly we can return the results by simply reading from the #Results temporary table\n\n```\nSELECT * \nFROM #Results\nORDER BY 1,2,3\n;\n```\n\nBy breaking the code up into sections and generating a looping construct the code becomes more manageable and maintainable. \n\n\n## Next steps\nFor more development tips, see [development overview][].\n\n<!--Image references-->\n[1]: media/sql-data-warehouse-develop-group-by-options/sql-data-warehouse-develop-group-by-cube.png\n\n<!--Article references-->\n[development overview]: sql-data-warehouse-overview-develop.md\n\n<!--MSDN references-->\n[GROUP BY]: https://msdn.microsoft.com/en-us/library/ms177673.aspx\n\n\n<!--Other Web references-->\n\n"
}