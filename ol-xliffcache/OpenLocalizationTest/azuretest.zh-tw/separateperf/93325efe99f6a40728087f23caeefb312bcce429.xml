{
  "nodes": [
    {
      "content": "Azure Media Services Concepts",
      "pos": [
        28,
        57
      ]
    },
    {
      "content": "This topic gives an overview of Azure Media Services Concepts",
      "pos": [
        77,
        138
      ]
    },
    {
      "content": "Azure Media Services Concepts",
      "pos": [
        449,
        478
      ]
    },
    {
      "content": "This topic gives an overview of the most important Media Services concepts.",
      "pos": [
        481,
        556
      ]
    },
    {
      "pos": [
        560,
        597
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"assets\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Assets and Storage"
    },
    {
      "content": "Assets",
      "pos": [
        602,
        608
      ]
    },
    {
      "content": "An <bpt id=\"p1\">[</bpt>Asset<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974277.aspx)</ept> contains digital files (including video, audio, images, thumbnail collections, text tracks and closed caption files) and the metadata about these files.",
      "pos": [
        610,
        829
      ]
    },
    {
      "content": "After the digital files are uploaded into an asset, they could be used in the Media Services encoding and streaming workflows.",
      "pos": [
        830,
        956
      ]
    },
    {
      "content": "An asset is mapped to a blob container in the Azure Storage account and the files in the asset are stored as blobs in that container.",
      "pos": [
        958,
        1091
      ]
    },
    {
      "content": "When deciding what media content to upload and store in an asset, the following considerations apply:",
      "pos": [
        1093,
        1194
      ]
    },
    {
      "content": "An asset should contain only a single, unique instance of media content.",
      "pos": [
        1198,
        1270
      ]
    },
    {
      "content": "For example, a single edit of a TV episode, movie, or advertisement.",
      "pos": [
        1271,
        1339
      ]
    },
    {
      "content": "An asset should not contain multiple renditions or edits of an audiovisual file.",
      "pos": [
        1342,
        1422
      ]
    },
    {
      "content": "One example of an improper usage of an Asset would be attempting to store more than one TV episode, advertisement, or multiple camera angles from a single production inside an asset.",
      "pos": [
        1423,
        1605
      ]
    },
    {
      "content": "Storing multiple renditions or edits of an audiovisual file in an asset can result in difficulties submitting encoding jobs, streaming and securing the delivery of the asset later in the workflow.",
      "pos": [
        1606,
        1802
      ]
    },
    {
      "content": "Asset file",
      "pos": [
        1809,
        1819
      ]
    },
    {
      "content": "An <bpt id=\"p1\">[</bpt>AssetFile<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974275.aspx)</ept> represents an actual video or audio file that is stored in a blob container.",
      "pos": [
        1821,
        1968
      ]
    },
    {
      "content": "An asset file is always associated with an asset, and an asset may contain one or many files.",
      "pos": [
        1969,
        2062
      ]
    },
    {
      "content": "The Media Services Encoder task fails if an asset file object is not associated with a digital file in a blob container.",
      "pos": [
        2063,
        2183
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>AssetFile<ept id=\"p1\">**</ept> instance and the actual media file are two distinct objects.",
      "pos": [
        2185,
        2263
      ]
    },
    {
      "content": "The AssetFile instance contains metadata about the media file, while the media file contains the actual media content.",
      "pos": [
        2264,
        2382
      ]
    },
    {
      "content": "You should not attempt to change the contents of blob containers that were generated by Media Services without using Media Service APIs.",
      "pos": [
        2384,
        2520
      ]
    },
    {
      "content": "Asset encryption options",
      "pos": [
        2525,
        2549
      ]
    },
    {
      "content": "Depending on the type of content you want to upload, store, and deliver, Media Services provides various encryption options that you can choose from.",
      "pos": [
        2551,
        2700
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>None<ept id=\"p1\">**</ept> No encryption is used.",
      "pos": [
        2702,
        2733
      ]
    },
    {
      "content": "This is the default value.",
      "pos": [
        2734,
        2760
      ]
    },
    {
      "content": "Note that when using this option your content is not protected in transit or at rest in storage.",
      "pos": [
        2761,
        2857
      ]
    },
    {
      "content": "If you plan to deliver an MP4 using progressive download, use this option to upload your content.",
      "pos": [
        2859,
        2956
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>StorageEncrypted<ept id=\"p1\">**</ept> – Use this option to encrypt your clear content locally using AES 256 bit encryption and then upload it to Azure Storage where it is stored encrypted at rest.",
      "pos": [
        2958,
        3137
      ]
    },
    {
      "content": "Assets protected with storage encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset.",
      "pos": [
        3138,
        3341
      ]
    },
    {
      "content": "The primary use case for storage encryption is when you want to secure your high quality input media files with strong encryption at rest on disk.",
      "pos": [
        3342,
        3488
      ]
    },
    {
      "content": "In order to deliver a storage encrypted asset, you must configure the asset’s delivery policy so Media Services knows how you want to deliver your content.",
      "pos": [
        3491,
        3646
      ]
    },
    {
      "content": "Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy (for example, AES, PlayReady, or no encryption).",
      "pos": [
        3647,
        3843
      ]
    },
    {
      "pos": [
        3846,
        4056
      ],
      "content": "<bpt id=\"p1\">**</bpt>CommonEncryptionProtected<ept id=\"p1\">**</ept> - Use this option if you want to encrypt (or upload already encrypted) content with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM)."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>EnvelopeEncryptionProtected<ept id=\"p1\">**</ept> – Use this option if you want to protect (or upload already protected) HTTP Live Streaming (HLS) encrypted with Advanced Encryption Standard (AES).",
      "pos": [
        4058,
        4237
      ]
    },
    {
      "content": "Note that if you are uploading HLS already encrypted with AES, it must have been encrypted by Transform Manager.",
      "pos": [
        4238,
        4350
      ]
    },
    {
      "content": "Access policy",
      "pos": [
        4355,
        4368
      ]
    },
    {
      "content": "An <bpt id=\"p1\">[</bpt>AccessPolicy<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974297.aspx)</ept> defines permissions (like read, write, and list) and duration of access to an asset.",
      "pos": [
        4371,
        4529
      ]
    },
    {
      "content": "You would usually pass an AccessPolicy object to a locator that would then be used to access the files contained in an asset.",
      "pos": [
        4530,
        4655
      ]
    },
    {
      "content": "Blob container",
      "pos": [
        4661,
        4675
      ]
    },
    {
      "content": "A blob container provides a grouping of a set of blobs.",
      "pos": [
        4677,
        4732
      ]
    },
    {
      "content": "Blob containers are used in Media Services as boundary point for access control, and Shared Access Signature (SAS) locators on assets.",
      "pos": [
        4733,
        4867
      ]
    },
    {
      "content": "An Azure Storage account can contain an unlimited number of blob containers.",
      "pos": [
        4868,
        4944
      ]
    },
    {
      "content": "A container can store an unlimited number of blobs.",
      "pos": [
        4945,
        4996
      ]
    },
    {
      "pos": [
        4999,
        5147
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>You should not attempt to change the contents of blob containers that were generated by Media Services without using Media Service APIs."
    },
    {
      "pos": [
        5152,
        5181
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"locators\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Locators"
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Locator<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974308.aspx)</ept>s provide an entry point to access the files contained in an asset.",
      "pos": [
        5183,
        5315
      ]
    },
    {
      "content": "An access policy is used to define the permissions and duration that a client has access to a given asset.",
      "pos": [
        5316,
        5422
      ]
    },
    {
      "content": "Locators can have a many to one relationship with an access policy, such that different locators can provide different start times and connection types to different clients while all using the same permission and duration settings; however, because of a shared access policy restriction set by Azure storage services, you cannot have more than five unique locators associated with a given asset at one time.",
      "pos": [
        5423,
        5830
      ]
    },
    {
      "content": "Media Services supports two types of locators: OnDemandOrigin locators, used to stream media (for example, MPEG DASH, HLS, or Smooth Streaming) or progressively download media and SAS URL locators, used to upload or download media files to\\from Azure storage.",
      "pos": [
        5833,
        6092
      ]
    },
    {
      "content": "Note, that the list permission (AccessPermissions.List) should not be used when creating an OrDemandOrigin locator.",
      "pos": [
        6095,
        6210
      ]
    },
    {
      "content": "Storage account",
      "pos": [
        6216,
        6231
      ]
    },
    {
      "content": "All access to Azure Storage is done through a storage account.",
      "pos": [
        6233,
        6295
      ]
    },
    {
      "content": "A Media Service account can associate with one or more storage accounts.",
      "pos": [
        6296,
        6368
      ]
    },
    {
      "content": "An account can contain an unlimited number of containers, as long as their total size is under 500TB per storage account.",
      "pos": [
        6369,
        6490
      ]
    },
    {
      "content": "Media Services provides SDK level tooling to allow you to manage multiple storage accounts and load balance the distribution of your assets during upload to these accounts based on metrics or random distribution.",
      "pos": [
        6492,
        6704
      ]
    },
    {
      "content": "For more information, see Working with <bpt id=\"p1\">[</bpt>Azure Storage<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn767951.aspx)</ept>.",
      "pos": [
        6705,
        6816
      ]
    },
    {
      "content": "Jobs and tasks",
      "pos": [
        6821,
        6835
      ]
    },
    {
      "content": "A <bpt id=\"p1\">[</bpt>job<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974289.aspx)</ept> is typically used to process (for example, index or encode) one audio/video presentation.",
      "pos": [
        6837,
        6990
      ]
    },
    {
      "content": "If you are processing multiple videos, create a job for each video to be encoded.",
      "pos": [
        6991,
        7072
      ]
    },
    {
      "content": "A job contains metadata about the processing to be performed.",
      "pos": [
        7074,
        7135
      ]
    },
    {
      "content": "Each job contains one or more <bpt id=\"p1\">[</bpt>task<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh974286.aspx)</ept>s that specify an atomic processing task, its input Assets, output Assets, a media processor and its associated settings.",
      "pos": [
        7136,
        7349
      ]
    },
    {
      "content": "Tasks within a job can be chained together, where the output asset of one task is given as the input asset to the next task.",
      "pos": [
        7350,
        7474
      ]
    },
    {
      "content": "In this way one job can contain all of the processing necessary for a media presentation.",
      "pos": [
        7475,
        7564
      ]
    },
    {
      "pos": [
        7568,
        7609
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"encoding\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Encoding \\ packaging"
    },
    {
      "content": "Encoding",
      "pos": [
        7614,
        7622
      ]
    },
    {
      "content": "In order to deliver digital video over the internet you must compress the media.",
      "pos": [
        7624,
        7704
      ]
    },
    {
      "content": "Digital video files are quite large and may be too big to deliver over the internet or for your customers’ devices to display properly.",
      "pos": [
        7705,
        7840
      ]
    },
    {
      "content": "People watch videos on a variety of devices from TVs with set-top boxes, desktop PCs to tablets and smartphones.",
      "pos": [
        7841,
        7953
      ]
    },
    {
      "content": "Each of these devices have different bandwidth and compression requirements.",
      "pos": [
        7954,
        8030
      ]
    },
    {
      "content": "Encoding is the process of compressing video and audio using Compressor/Decompressors or codecs.",
      "pos": [
        8031,
        8127
      ]
    },
    {
      "content": "Transcoding is the process of taking a video that has been encoded and re-encode it into a different encoding format.",
      "pos": [
        8130,
        8247
      ]
    },
    {
      "content": "Since most cameras encode video to some degree, most encoding work done on Azure Media Services is technically transcoding.",
      "pos": [
        8248,
        8371
      ]
    },
    {
      "content": "Codecs and File formats",
      "pos": [
        8376,
        8399
      ]
    },
    {
      "content": "Codecs have two components: one to compress digital media files for transmission and the other to decompress digital media files for playback.",
      "pos": [
        8402,
        8544
      ]
    },
    {
      "content": "There are audio codecs that compress and decompress audio and video codecs that compress and decompress video.",
      "pos": [
        8545,
        8655
      ]
    },
    {
      "content": "Codecs can use lossless or lossy compression.",
      "pos": [
        8656,
        8701
      ]
    },
    {
      "content": "Lossless codecs preserve all of the information when compression occurs.",
      "pos": [
        8702,
        8774
      ]
    },
    {
      "content": "When the file is decompressed, the result is a file that is identical to the input media, making lossless codecs well suited to archiving and storage.",
      "pos": [
        8775,
        8925
      ]
    },
    {
      "content": "Lossy codecs lose some of the information when encoding and produce smaller files (than the original) at the cost of video quality and are well suited to streaming over the internet.",
      "pos": [
        8926,
        9108
      ]
    },
    {
      "content": "The two main codecs used by the Azure Media Encoder to encode are H.264 and VC-1.",
      "pos": [
        9109,
        9190
      ]
    },
    {
      "content": "Other codecs may be available in our partner ecosystem of encoders.",
      "pos": [
        9191,
        9258
      ]
    },
    {
      "content": "Media Services Encoders",
      "pos": [
        9264,
        9287
      ]
    },
    {
      "pos": [
        9289,
        9378
      ],
      "content": "For information about supported encoders, see <bpt id=\"p1\">[</bpt>Encoders<ept id=\"p1\">](media-services-encode-asset.md)</ept>."
    },
    {
      "content": "Live Streaming",
      "pos": [
        9383,
        9397
      ]
    },
    {
      "content": "On-premises (3rd Party) Live transcoder",
      "pos": [
        9402,
        9441
      ]
    },
    {
      "content": "An on-premises live encoder (or transcoder) converts the audio and/or video that is streamed from your camera into a multi-bitrate RTMP or Smooth Streaming format.",
      "pos": [
        9443,
        9606
      ]
    },
    {
      "content": "The transcoder then pushes the adaptive bitrate RTMP or Smooth streams into a Media Services channel.",
      "pos": [
        9607,
        9708
      ]
    },
    {
      "content": "Media Services then broadcasts the event live.",
      "pos": [
        9709,
        9755
      ]
    },
    {
      "content": "Channel",
      "pos": [
        9760,
        9767
      ]
    },
    {
      "content": "In Media Services, <bpt id=\"p1\">[</bpt>Channel<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn783458.aspx)</ept>s are responsible for processing live streaming content.",
      "pos": [
        9769,
        9909
      ]
    },
    {
      "content": "A Channel provides an input endpoint (ingest URL) that you then provide to a live transcoder.",
      "pos": [
        9910,
        10003
      ]
    },
    {
      "content": "The channel receives live input streams from the live transcoder and makes it available for streaming through one or more StreamingEndpoints.",
      "pos": [
        10004,
        10145
      ]
    },
    {
      "content": "Channels also provide a preview endpoint (preview URL) that you use to preview and validate your stream before further processing and delivery.",
      "pos": [
        10146,
        10289
      ]
    },
    {
      "content": "You can get the ingest URL and the preview URL when you create the channel.",
      "pos": [
        10291,
        10366
      ]
    },
    {
      "content": "To get these URLs, the channel does not have to be in the started state.",
      "pos": [
        10367,
        10439
      ]
    },
    {
      "content": "When you are ready to start pushing data from a live transcoder into the channel, the channel must be started.",
      "pos": [
        10440,
        10550
      ]
    },
    {
      "content": "Once the live transcoder starts ingesting data, you can preview your stream.",
      "pos": [
        10551,
        10627
      ]
    },
    {
      "content": "Each Media Services account can contain multiple Channels, multiple Programs, and multiple StreamingEndpoints.",
      "pos": [
        10629,
        10739
      ]
    },
    {
      "content": "Depending on the bandwidth and security needs, StreamingEndpoint services can be dedicated to one or more channels.",
      "pos": [
        10740,
        10855
      ]
    },
    {
      "content": "Any StreamingEndpoint can pull from any Channel.",
      "pos": [
        10856,
        10904
      ]
    },
    {
      "content": "By default you can add 5 channels to your Media Services account.",
      "pos": [
        10906,
        10971
      ]
    },
    {
      "content": "To request a higher limit, see <bpt id=\"p1\">[</bpt>Quotas and limitations<ept id=\"p1\">](media-services-quotas-and-limitations.md)</ept>.",
      "pos": [
        10972,
        11070
      ]
    },
    {
      "content": "You are only billed when your channel is in running state.",
      "pos": [
        11074,
        11132
      ]
    },
    {
      "content": "Program",
      "pos": [
        11137,
        11144
      ]
    },
    {
      "content": "A <bpt id=\"p1\">[</bpt>Program<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn783463.aspx)</ept> enables you to control the publishing and storage of segments in a live stream.",
      "pos": [
        11147,
        11294
      ]
    },
    {
      "content": "Channels manage Programs.",
      "pos": [
        11295,
        11320
      ]
    },
    {
      "content": "The Channel and Program relationship is very similar to traditional media where a channel has a constant stream of content and a program is scoped to some timed event on that channel.",
      "pos": [
        11321,
        11504
      ]
    },
    {
      "content": "You can specify the number of hours you want to retain the recorded content for the program by setting the <bpt id=\"p1\">**</bpt>ArchiveWindowLength<ept id=\"p1\">**</ept> property.",
      "pos": [
        11505,
        11645
      ]
    },
    {
      "content": "This value can be set from a minimum of 5 minutes to a maximum of 25 hours.",
      "pos": [
        11646,
        11721
      ]
    },
    {
      "content": "ArchiveWindowLength also dictates the maximum amount of time clients can seek back in time from the current live position.",
      "pos": [
        11724,
        11846
      ]
    },
    {
      "content": "Programs can run over the specified amount of time, but content that falls behind the window length is continuously discarded.",
      "pos": [
        11847,
        11973
      ]
    },
    {
      "content": "This value of this property also determines how long the client manifests can grow.",
      "pos": [
        11974,
        12057
      ]
    },
    {
      "content": "Each program is associated with an Asset.",
      "pos": [
        12059,
        12100
      ]
    },
    {
      "content": "To publish the program you must create a locator for the associated asset.",
      "pos": [
        12101,
        12175
      ]
    },
    {
      "content": "Having this locator will enable you to build a streaming URL that you can provide to your clients.",
      "pos": [
        12176,
        12274
      ]
    },
    {
      "content": "A channel supports up to three concurrently running programs so you can create multiple archives of the same incoming stream.",
      "pos": [
        12276,
        12401
      ]
    },
    {
      "content": "This allows you to publish and archive different parts of an event as needed.",
      "pos": [
        12402,
        12479
      ]
    },
    {
      "content": "For example, your business requirement is to archive 6 hours of a program, but to broadcast only last 10 minutes.",
      "pos": [
        12480,
        12593
      ]
    },
    {
      "content": "To accomplish this, you need to create two concurrently running programs.",
      "pos": [
        12594,
        12667
      ]
    },
    {
      "content": "One program is set to archive 6 hours of the event but the program is not published.",
      "pos": [
        12668,
        12752
      ]
    },
    {
      "content": "The other program is set to archive for 10 minutes and this program is published.",
      "pos": [
        12753,
        12834
      ]
    },
    {
      "content": "Protecting content",
      "pos": [
        12838,
        12856
      ]
    },
    {
      "content": "Dynamic encryption",
      "pos": [
        12861,
        12879
      ]
    },
    {
      "content": "Microsoft Azure Media Services enables you to deliver your content encrypted  dynamically with Advanced Encryption Standard (AES) (using 128-bit encryption keys) and PlayReady DRM.",
      "pos": [
        12881,
        13061
      ]
    },
    {
      "content": "Currently, you can encrypt the following streaming formats: HLS, MPEG DASH, and Smooth Streaming.",
      "pos": [
        13064,
        13161
      ]
    },
    {
      "content": "You cannot encrypt HDS streaming format, or progressive downloads.",
      "pos": [
        13162,
        13228
      ]
    },
    {
      "content": "If you want for Media Services to encrypt an asset, you need to associate an encryption key (CommonEncryption or EnvelopeEncryption) with your asset and also configure authorization policies for the key.",
      "pos": [
        13230,
        13433
      ]
    },
    {
      "content": "You also need to configure the asset's delivery policy.",
      "pos": [
        13435,
        13490
      ]
    },
    {
      "content": "If you want to stream a storage encrypted asset, make sure to specify how you want to deliver it by configuring asset delivery policy.",
      "pos": [
        13491,
        13625
      ]
    },
    {
      "content": "When a stream is requested by a player, Media Services uses the specified key to dynamically encrypt your content using AES or PlayReady encryption.",
      "pos": [
        13629,
        13777
      ]
    },
    {
      "content": "To decrypt the stream, the player will request the key from the key delivery service.",
      "pos": [
        13778,
        13863
      ]
    },
    {
      "content": "To decide whether or not the user is authorized to get the key, the service evaluates the authorization policies that you specified for the key.",
      "pos": [
        13864,
        14008
      ]
    },
    {
      "content": "PlayReady DRM licenses and AES clear keys delivery services",
      "pos": [
        14013,
        14072
      ]
    },
    {
      "content": "Media Services provides a service for delivering PlayReady licenses and AES clear keys to authorized clients.",
      "pos": [
        14074,
        14183
      ]
    },
    {
      "content": "You can use the Azure Management Portal, REST API, or Media Services SDK for .NET to configure authorization and authentication policies for your licenses and keys.",
      "pos": [
        14184,
        14348
      ]
    },
    {
      "content": "Note if you are using the Portal, you can configure one AES policy (which will be applied to all the AES encrypted content) and one PlayReady policy (which will be applied to all the PlayReady encrypted content).",
      "pos": [
        14350,
        14562
      ]
    },
    {
      "content": "Use Media Services SDK for .NET if you want more control over the configurations.",
      "pos": [
        14563,
        14644
      ]
    },
    {
      "content": "PlayReady license template",
      "pos": [
        14649,
        14675
      ]
    },
    {
      "content": "Media Services provides a service for delivering PlayReady licenses.",
      "pos": [
        14677,
        14745
      ]
    },
    {
      "content": "When the end user player (for example, Silverlight) tries to play your PlayReady protected content, a request is sent to the license delivery service to obtain a license.",
      "pos": [
        14746,
        14916
      ]
    },
    {
      "content": "If the license service approves the request, it issues the license which is sent to the client and can be used to decrypt and play the specified content.",
      "pos": [
        14917,
        15070
      ]
    },
    {
      "content": "Licenses contain the rights and restrictions that you want for the PlayReady DRM runtime to enforce when a user is trying to playback protected content.",
      "pos": [
        15072,
        15224
      ]
    },
    {
      "content": "Media Services provides APIs that let you configure your PlayReady licenses.",
      "pos": [
        15225,
        15301
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Media Services PlayReady License Template Overview<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn783459.aspx)</ept>",
      "pos": [
        15302,
        15436
      ]
    },
    {
      "content": "Token restriction",
      "pos": [
        15441,
        15458
      ]
    },
    {
      "content": "The content key authorization policy could have one or more authorization restrictions: open, token restriction, or IP restriction.",
      "pos": [
        15460,
        15591
      ]
    },
    {
      "content": "The token restricted policy must be accompanied by a token issued by a Secure Token Service (STS).",
      "pos": [
        15592,
        15690
      ]
    },
    {
      "content": "Media Services supports tokens in the Simple Web Tokens (SWT) format and JSON Web Token (JWT) format.",
      "pos": [
        15691,
        15792
      ]
    },
    {
      "content": "Media Services does not provide Secure Token Services.",
      "pos": [
        15793,
        15847
      ]
    },
    {
      "content": "You can create a custom STS or leverage Microsoft Azure ACS to issue tokens.",
      "pos": [
        15848,
        15924
      ]
    },
    {
      "content": "The STS must be configured to create a token signed with the specified key and issue claims that you specified in the token restriction configuration.",
      "pos": [
        15925,
        16075
      ]
    },
    {
      "content": "The Media Services key delivery service will return the requested key (or license) to the client if the token is valid and the claims in the token match those configured for the key (or license).",
      "pos": [
        16076,
        16271
      ]
    },
    {
      "content": "When configuring the token restricted policy, you must specify the primary verification key, issuer and audience parameters.",
      "pos": [
        16273,
        16397
      ]
    },
    {
      "content": "The primary verification key contains the key that the token was signed with, issuer is the secure token service that issues the token.",
      "pos": [
        16398,
        16533
      ]
    },
    {
      "content": "The audience (sometimes called scope) describes the intent of the token or the resource the token authorizes access to.",
      "pos": [
        16534,
        16653
      ]
    },
    {
      "content": "The Media Services key delivery service validates that these values in the token match the values in the template.",
      "pos": [
        16654,
        16768
      ]
    },
    {
      "content": "Delivering",
      "pos": [
        16772,
        16782
      ]
    },
    {
      "pos": [
        16787,
        16834
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"dynamic_packaging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Dynamic packaging"
    },
    {
      "pos": [
        16836,
        17074
      ],
      "content": "When working with Media Services it is recommended to encode your mezzanine files into an adaptive bitrate MP4 set and then convert the set to the desired format using the <bpt id=\"p1\">[</bpt>Dynamic Packaging<ept id=\"p1\">](media-services-dynamic-packaging-overview.md)</ept>."
    },
    {
      "content": "Streaming endpoint",
      "pos": [
        17081,
        17099
      ]
    },
    {
      "content": "A StreamingEndpoint represents a streaming service that can deliver content directly to a client player application, or to a Content Delivery Network (CDN) for further distribution (Azure Media Services now provides the Azure CDN integration.) The outbound stream from a StreamingEndpoint service can be a live stream, or a video on demand Asset in your Media Services account.",
      "pos": [
        17101,
        17478
      ]
    },
    {
      "content": "In addition, you can control the capacity of the StreamingEndpoint service to handle growing bandwidth needs by adjusting scale units (also known as streaming units).",
      "pos": [
        17479,
        17645
      ]
    },
    {
      "content": "It is recommended to allocate one or more scale units for applications in production environment.",
      "pos": [
        17646,
        17743
      ]
    },
    {
      "content": "Scale units provide you with both dedicated egress capacity that can be purchased in increments of 200 Mbps and additional functionality which currently includes use dynamic packaging.",
      "pos": [
        17744,
        17928
      ]
    },
    {
      "content": "It is recommended to use dynamic packaging and\\or dynamic encryption.",
      "pos": [
        17931,
        18000
      ]
    },
    {
      "content": "To use these features, you must have at least one streaming unit for the endpoint from which you plan to stream.",
      "pos": [
        18001,
        18113
      ]
    },
    {
      "content": "For more information, see  <bpt id=\"p1\">[</bpt>Scaling streaming units<ept id=\"p1\">](media-services-manage-origins.md#scale_streaming_endpoints)</ept>.",
      "pos": [
        18114,
        18227
      ]
    },
    {
      "content": "By default you can have up to 2 streaming endpoints in your Media Services account.",
      "pos": [
        18229,
        18312
      ]
    },
    {
      "content": "To request a higher limit, see <bpt id=\"p1\">[</bpt>Quotas and limitations<ept id=\"p1\">](media-services-quotas-and-limitations.md)</ept>.",
      "pos": [
        18313,
        18411
      ]
    },
    {
      "content": "You are only billed when your StreamingEndpoint is in running state.",
      "pos": [
        18414,
        18482
      ]
    },
    {
      "content": "Asset delivery policy",
      "pos": [
        18487,
        18508
      ]
    },
    {
      "content": "One of the steps in the Media Services content delivery workflow is configuring <bpt id=\"p1\">[</bpt>delivery policies for assets <ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn799055.aspx)</ept>that you want to be streamed.",
      "pos": [
        18510,
        18706
      ]
    },
    {
      "content": "The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption).",
      "pos": [
        18707,
        19026
      ]
    },
    {
      "content": "If you have a storage encrypted asset, before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy.",
      "pos": [
        19028,
        19215
      ]
    },
    {
      "content": "For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) encryption key, set the policy type to DynamicEnvelopeEncryption.",
      "pos": [
        19216,
        19366
      ]
    },
    {
      "content": "To remove storage encryption and stream the asset in the clear, set the policy type to NoDynamicEncryption.",
      "pos": [
        19367,
        19474
      ]
    },
    {
      "content": "Progressive download",
      "pos": [
        19480,
        19500
      ]
    },
    {
      "content": "Progressive download allows you to start playing media before the entire file has been downloaded.",
      "pos": [
        19503,
        19601
      ]
    },
    {
      "content": "You can only progressively download an MP4 file.",
      "pos": [
        19602,
        19650
      ]
    },
    {
      "content": "Note that you must decrypt encrypted assets if you wish for them to be available for progressive download.",
      "pos": [
        19653,
        19759
      ]
    },
    {
      "content": "To provide users with progressive download URLs, you first must create an OnDemandOrigin locator.",
      "pos": [
        19762,
        19859
      ]
    },
    {
      "content": "Creating the locator, gives you the base Path to the asset.",
      "pos": [
        19860,
        19919
      ]
    },
    {
      "content": "You then need to append the name of MP4 file.",
      "pos": [
        19920,
        19965
      ]
    },
    {
      "content": "For example:",
      "pos": [
        19966,
        19978
      ]
    },
    {
      "content": "Streaming URLs",
      "pos": [
        20126,
        20140
      ]
    },
    {
      "content": "Streaming your content to clients.",
      "pos": [
        20142,
        20176
      ]
    },
    {
      "content": "To provide users with streaming URLs, you first must create an OnDemandOrigin locator.",
      "pos": [
        20177,
        20263
      ]
    },
    {
      "content": "Creating the locator, gives you the base Path to the asset that contains the content you want to stream.",
      "pos": [
        20264,
        20368
      ]
    },
    {
      "content": "However, to be able to stream this content you need to modify this path further.",
      "pos": [
        20369,
        20449
      ]
    },
    {
      "content": "To construct a full URL to the streaming manifest file, you must concatenate the locator’s Path value and the manifest (filename.ism) file name.",
      "pos": [
        20450,
        20594
      ]
    },
    {
      "content": "Then, append /Manifest and an appropriate format (if needed) to the locator path.",
      "pos": [
        20595,
        20676
      ]
    },
    {
      "content": "You can also stream your content over an SSL connection.",
      "pos": [
        20679,
        20735
      ]
    },
    {
      "content": "To do this, make sure your streaming URLs start with HTTPS.",
      "pos": [
        20736,
        20795
      ]
    },
    {
      "content": "Note that you can only stream over SSL if the streaming endpoint from which you deliver your content was created after September 10th, 2014.",
      "pos": [
        20797,
        20937
      ]
    },
    {
      "content": "If your streaming URLs are based on the streaming endpoints created after September 10th, the URL contains “streaming.mediaservices.windows.net” (the new format).",
      "pos": [
        20938,
        21100
      ]
    },
    {
      "content": "Streaming URLs that contain “origin.mediaservices.windows.net” (the old format) do not support SSL.",
      "pos": [
        21101,
        21200
      ]
    },
    {
      "content": "If your URL is in the old format and you want to be able to stream over SSL, create a new streaming endpoint.",
      "pos": [
        21201,
        21310
      ]
    },
    {
      "content": "Use URLs created based on the new streaming endpoint to stream your content over SSL.",
      "pos": [
        21311,
        21396
      ]
    },
    {
      "content": "The following list describes different streaming formats and gives examples:",
      "pos": [
        21399,
        21475
      ]
    },
    {
      "content": "Smooth Streaming",
      "pos": [
        21479,
        21495
      ]
    },
    {
      "content": "{streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest",
      "pos": [
        21501,
        21627
      ]
    },
    {
      "content": "MPEG DASH",
      "pos": [
        21780,
        21789
      ]
    },
    {
      "content": "{streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=mpd-time-csf)",
      "pos": [
        21795,
        21942
      ]
    },
    {
      "content": "Apple HTTP Live Streaming (HLS) V4",
      "pos": [
        22110,
        22144
      ]
    },
    {
      "content": "{streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl)",
      "pos": [
        22150,
        22294
      ]
    },
    {
      "content": "Apple HTTP Live Streaming (HLS) V3",
      "pos": [
        22458,
        22492
      ]
    },
    {
      "content": "{streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl-v3)",
      "pos": [
        22498,
        22645
      ]
    },
    {
      "content": "HDS (for Adobe PrimeTime/Access licensees only)",
      "pos": [
        22810,
        22857
      ]
    },
    {
      "content": "{streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=f4m-f4f)",
      "pos": [
        22863,
        23005
      ]
    },
    {
      "content": "test",
      "pos": [
        23166,
        23170
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Azure Media Services Concepts\" \n    description=\"This topic gives an overview of Azure Media Services Concepts\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\"\n    ms.author=\"juliako\"/>\n\n#Azure Media Services Concepts \n\nThis topic gives an overview of the most important Media Services concepts.\n\n##<a id=\"assets\"></a>Assets and Storage\n\n###Assets\n\nAn [Asset](https://msdn.microsoft.com/library/azure/hh974277.aspx) contains digital files (including video, audio, images, thumbnail collections, text tracks and closed caption files) and the metadata about these files. After the digital files are uploaded into an asset, they could be used in the Media Services encoding and streaming workflows.\n\nAn asset is mapped to a blob container in the Azure Storage account and the files in the asset are stored as blobs in that container.\n\nWhen deciding what media content to upload and store in an asset, the following considerations apply:\n\n- An asset should contain only a single, unique instance of media content. For example, a single edit of a TV episode, movie, or advertisement.\n- An asset should not contain multiple renditions or edits of an audiovisual file. One example of an improper usage of an Asset would be attempting to store more than one TV episode, advertisement, or multiple camera angles from a single production inside an asset. Storing multiple renditions or edits of an audiovisual file in an asset can result in difficulties submitting encoding jobs, streaming and securing the delivery of the asset later in the workflow.  \n\n###Asset file \nAn [AssetFile](https://msdn.microsoft.com/library/azure/hh974275.aspx) represents an actual video or audio file that is stored in a blob container. An asset file is always associated with an asset, and an asset may contain one or many files. The Media Services Encoder task fails if an asset file object is not associated with a digital file in a blob container.\n\nThe **AssetFile** instance and the actual media file are two distinct objects. The AssetFile instance contains metadata about the media file, while the media file contains the actual media content.\n\nYou should not attempt to change the contents of blob containers that were generated by Media Services without using Media Service APIs.\n\n###Asset encryption options\n\nDepending on the type of content you want to upload, store, and deliver, Media Services provides various encryption options that you can choose from.\n\n**None** No encryption is used. This is the default value. Note that when using this option your content is not protected in transit or at rest in storage.\n\nIf you plan to deliver an MP4 using progressive download, use this option to upload your content.\n\n**StorageEncrypted** – Use this option to encrypt your clear content locally using AES 256 bit encryption and then upload it to Azure Storage where it is stored encrypted at rest. Assets protected with storage encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset. The primary use case for storage encryption is when you want to secure your high quality input media files with strong encryption at rest on disk. \n\nIn order to deliver a storage encrypted asset, you must configure the asset’s delivery policy so Media Services knows how you want to deliver your content. Before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy (for example, AES, PlayReady, or no encryption). \n\n**CommonEncryptionProtected** - Use this option if you want to encrypt (or upload already encrypted) content with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM).\n\n**EnvelopeEncryptionProtected** – Use this option if you want to protect (or upload already protected) HTTP Live Streaming (HLS) encrypted with Advanced Encryption Standard (AES). Note that if you are uploading HLS already encrypted with AES, it must have been encrypted by Transform Manager.\n\n###Access policy \n\nAn [AccessPolicy](https://msdn.microsoft.com/library/azure/hh974297.aspx) defines permissions (like read, write, and list) and duration of access to an asset. You would usually pass an AccessPolicy object to a locator that would then be used to access the files contained in an asset.\n\n\n###Blob container\n\nA blob container provides a grouping of a set of blobs. Blob containers are used in Media Services as boundary point for access control, and Shared Access Signature (SAS) locators on assets. An Azure Storage account can contain an unlimited number of blob containers. A container can store an unlimited number of blobs.\n\n>[AZURE.NOTE]You should not attempt to change the contents of blob containers that were generated by Media Services without using Media Service APIs.\n\n###<a id=\"locators\"></a>Locators\n\n[Locator](https://msdn.microsoft.com/library/azure/hh974308.aspx)s provide an entry point to access the files contained in an asset. An access policy is used to define the permissions and duration that a client has access to a given asset. Locators can have a many to one relationship with an access policy, such that different locators can provide different start times and connection types to different clients while all using the same permission and duration settings; however, because of a shared access policy restriction set by Azure storage services, you cannot have more than five unique locators associated with a given asset at one time. \n\nMedia Services supports two types of locators: OnDemandOrigin locators, used to stream media (for example, MPEG DASH, HLS, or Smooth Streaming) or progressively download media and SAS URL locators, used to upload or download media files to\\from Azure storage. \n\nNote, that the list permission (AccessPermissions.List) should not be used when creating an OrDemandOrigin locator. \n\n###Storage account\n\nAll access to Azure Storage is done through a storage account. A Media Service account can associate with one or more storage accounts. An account can contain an unlimited number of containers, as long as their total size is under 500TB per storage account.  Media Services provides SDK level tooling to allow you to manage multiple storage accounts and load balance the distribution of your assets during upload to these accounts based on metrics or random distribution. For more information, see Working with [Azure Storage](https://msdn.microsoft.com/library/azure/dn767951.aspx). \n\n##Jobs and tasks\n\nA [job](https://msdn.microsoft.com/library/azure/hh974289.aspx) is typically used to process (for example, index or encode) one audio/video presentation. If you are processing multiple videos, create a job for each video to be encoded.\n\nA job contains metadata about the processing to be performed. Each job contains one or more [task](https://msdn.microsoft.com/library/azure/hh974286.aspx)s that specify an atomic processing task, its input Assets, output Assets, a media processor and its associated settings. Tasks within a job can be chained together, where the output asset of one task is given as the input asset to the next task. In this way one job can contain all of the processing necessary for a media presentation.\n\n##<a id=\"encoding\"></a>Encoding \\ packaging\n\n###Encoding\n\nIn order to deliver digital video over the internet you must compress the media. Digital video files are quite large and may be too big to deliver over the internet or for your customers’ devices to display properly. People watch videos on a variety of devices from TVs with set-top boxes, desktop PCs to tablets and smartphones. Each of these devices have different bandwidth and compression requirements. Encoding is the process of compressing video and audio using Compressor/Decompressors or codecs. \n\nTranscoding is the process of taking a video that has been encoded and re-encode it into a different encoding format. Since most cameras encode video to some degree, most encoding work done on Azure Media Services is technically transcoding.\n\n###Codecs and File formats \n\nCodecs have two components: one to compress digital media files for transmission and the other to decompress digital media files for playback. There are audio codecs that compress and decompress audio and video codecs that compress and decompress video. Codecs can use lossless or lossy compression. Lossless codecs preserve all of the information when compression occurs. When the file is decompressed, the result is a file that is identical to the input media, making lossless codecs well suited to archiving and storage. Lossy codecs lose some of the information when encoding and produce smaller files (than the original) at the cost of video quality and are well suited to streaming over the internet. The two main codecs used by the Azure Media Encoder to encode are H.264 and VC-1. Other codecs may be available in our partner ecosystem of encoders. \n\n###Media Services Encoders\n\nFor information about supported encoders, see [Encoders](media-services-encode-asset.md).\n\n\n##Live Streaming\n\n###On-premises (3rd Party) Live transcoder\n\nAn on-premises live encoder (or transcoder) converts the audio and/or video that is streamed from your camera into a multi-bitrate RTMP or Smooth Streaming format. The transcoder then pushes the adaptive bitrate RTMP or Smooth streams into a Media Services channel. Media Services then broadcasts the event live.\n\n###Channel\n\nIn Media Services, [Channel](https://msdn.microsoft.com/library/azure/dn783458.aspx)s are responsible for processing live streaming content. A Channel provides an input endpoint (ingest URL) that you then provide to a live transcoder. The channel receives live input streams from the live transcoder and makes it available for streaming through one or more StreamingEndpoints. Channels also provide a preview endpoint (preview URL) that you use to preview and validate your stream before further processing and delivery.\n\nYou can get the ingest URL and the preview URL when you create the channel. To get these URLs, the channel does not have to be in the started state. When you are ready to start pushing data from a live transcoder into the channel, the channel must be started. Once the live transcoder starts ingesting data, you can preview your stream.\n\nEach Media Services account can contain multiple Channels, multiple Programs, and multiple StreamingEndpoints. Depending on the bandwidth and security needs, StreamingEndpoint services can be dedicated to one or more channels. Any StreamingEndpoint can pull from any Channel.\n\nBy default you can add 5 channels to your Media Services account. To request a higher limit, see [Quotas and limitations](media-services-quotas-and-limitations.md).  \n\nYou are only billed when your channel is in running state.\n\n###Program \n\nA [Program](https://msdn.microsoft.com/library/azure/dn783463.aspx) enables you to control the publishing and storage of segments in a live stream. Channels manage Programs. The Channel and Program relationship is very similar to traditional media where a channel has a constant stream of content and a program is scoped to some timed event on that channel.\nYou can specify the number of hours you want to retain the recorded content for the program by setting the **ArchiveWindowLength** property. This value can be set from a minimum of 5 minutes to a maximum of 25 hours. \n\nArchiveWindowLength also dictates the maximum amount of time clients can seek back in time from the current live position. Programs can run over the specified amount of time, but content that falls behind the window length is continuously discarded. This value of this property also determines how long the client manifests can grow.\n\nEach program is associated with an Asset. To publish the program you must create a locator for the associated asset. Having this locator will enable you to build a streaming URL that you can provide to your clients.\n\nA channel supports up to three concurrently running programs so you can create multiple archives of the same incoming stream. This allows you to publish and archive different parts of an event as needed. For example, your business requirement is to archive 6 hours of a program, but to broadcast only last 10 minutes. To accomplish this, you need to create two concurrently running programs. One program is set to archive 6 hours of the event but the program is not published. The other program is set to archive for 10 minutes and this program is published.\n\n##Protecting content\n\n###Dynamic encryption\n\nMicrosoft Azure Media Services enables you to deliver your content encrypted  dynamically with Advanced Encryption Standard (AES) (using 128-bit encryption keys) and PlayReady DRM. \n\nCurrently, you can encrypt the following streaming formats: HLS, MPEG DASH, and Smooth Streaming. You cannot encrypt HDS streaming format, or progressive downloads.\n\nIf you want for Media Services to encrypt an asset, you need to associate an encryption key (CommonEncryption or EnvelopeEncryption) with your asset and also configure authorization policies for the key.\n\nYou also need to configure the asset's delivery policy. If you want to stream a storage encrypted asset, make sure to specify how you want to deliver it by configuring asset delivery policy.  \n\nWhen a stream is requested by a player, Media Services uses the specified key to dynamically encrypt your content using AES or PlayReady encryption. To decrypt the stream, the player will request the key from the key delivery service. To decide whether or not the user is authorized to get the key, the service evaluates the authorization policies that you specified for the key.\n\n###PlayReady DRM licenses and AES clear keys delivery services\n\nMedia Services provides a service for delivering PlayReady licenses and AES clear keys to authorized clients. You can use the Azure Management Portal, REST API, or Media Services SDK for .NET to configure authorization and authentication policies for your licenses and keys.\n\nNote if you are using the Portal, you can configure one AES policy (which will be applied to all the AES encrypted content) and one PlayReady policy (which will be applied to all the PlayReady encrypted content). Use Media Services SDK for .NET if you want more control over the configurations.\n\n###PlayReady license template\n\nMedia Services provides a service for delivering PlayReady licenses. When the end user player (for example, Silverlight) tries to play your PlayReady protected content, a request is sent to the license delivery service to obtain a license. If the license service approves the request, it issues the license which is sent to the client and can be used to decrypt and play the specified content.\n\nLicenses contain the rights and restrictions that you want for the PlayReady DRM runtime to enforce when a user is trying to playback protected content. Media Services provides APIs that let you configure your PlayReady licenses. For more information, see [Media Services PlayReady License Template Overview](https://msdn.microsoft.com/library/azure/dn783459.aspx)\n\n###Token restriction\n\nThe content key authorization policy could have one or more authorization restrictions: open, token restriction, or IP restriction. The token restricted policy must be accompanied by a token issued by a Secure Token Service (STS). Media Services supports tokens in the Simple Web Tokens (SWT) format and JSON Web Token (JWT) format. Media Services does not provide Secure Token Services. You can create a custom STS or leverage Microsoft Azure ACS to issue tokens. The STS must be configured to create a token signed with the specified key and issue claims that you specified in the token restriction configuration. The Media Services key delivery service will return the requested key (or license) to the client if the token is valid and the claims in the token match those configured for the key (or license).\n\nWhen configuring the token restricted policy, you must specify the primary verification key, issuer and audience parameters. The primary verification key contains the key that the token was signed with, issuer is the secure token service that issues the token. The audience (sometimes called scope) describes the intent of the token or the resource the token authorizes access to. The Media Services key delivery service validates that these values in the token match the values in the template.\n\n##Delivering\n\n###<a id=\"dynamic_packaging\"></a>Dynamic packaging\n\nWhen working with Media Services it is recommended to encode your mezzanine files into an adaptive bitrate MP4 set and then convert the set to the desired format using the [Dynamic Packaging](media-services-dynamic-packaging-overview.md). \n\n\n###Streaming endpoint\n\nA StreamingEndpoint represents a streaming service that can deliver content directly to a client player application, or to a Content Delivery Network (CDN) for further distribution (Azure Media Services now provides the Azure CDN integration.) The outbound stream from a StreamingEndpoint service can be a live stream, or a video on demand Asset in your Media Services account. In addition, you can control the capacity of the StreamingEndpoint service to handle growing bandwidth needs by adjusting scale units (also known as streaming units). It is recommended to allocate one or more scale units for applications in production environment. Scale units provide you with both dedicated egress capacity that can be purchased in increments of 200 Mbps and additional functionality which currently includes use dynamic packaging. \n\nIt is recommended to use dynamic packaging and\\or dynamic encryption. To use these features, you must have at least one streaming unit for the endpoint from which you plan to stream. For more information, see  [Scaling streaming units](media-services-manage-origins.md#scale_streaming_endpoints).\n\nBy default you can have up to 2 streaming endpoints in your Media Services account. To request a higher limit, see [Quotas and limitations](media-services-quotas-and-limitations.md). \n\nYou are only billed when your StreamingEndpoint is in running state.\n\n###Asset delivery policy\n\nOne of the steps in the Media Services content delivery workflow is configuring [delivery policies for assets ](https://msdn.microsoft.com/library/azure/dn799055.aspx)that you want to be streamed. The asset delivery policy tells Media Services how you want for your asset to be delivered: into which streaming protocol should your asset be dynamically packaged (for example, MPEG DASH, HLS, Smooth Streaming, or all), whether or not you want to dynamically encrypt your asset and how (envelope or common encryption).\n\nIf you have a storage encrypted asset, before your asset can be streamed, the streaming server removes the storage encryption and streams your content using the specified delivery policy. For example, to deliver your asset encrypted with Advanced Encryption Standard (AES) encryption key, set the policy type to DynamicEnvelopeEncryption. To remove storage encryption and stream the asset in the clear, set the policy type to NoDynamicEncryption. \n\n###Progressive download \n\nProgressive download allows you to start playing media before the entire file has been downloaded. You can only progressively download an MP4 file. \n\nNote that you must decrypt encrypted assets if you wish for them to be available for progressive download. \n\nTo provide users with progressive download URLs, you first must create an OnDemandOrigin locator. Creating the locator, gives you the base Path to the asset. You then need to append the name of MP4 file. For example:\n\n    http://amstest1.streaming.mediaservices.windows.net/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_650kbps_AAC_und_ch2_96kbps.mp4\n\n###Streaming URLs\n\nStreaming your content to clients. To provide users with streaming URLs, you first must create an OnDemandOrigin locator. Creating the locator, gives you the base Path to the asset that contains the content you want to stream. However, to be able to stream this content you need to modify this path further. To construct a full URL to the streaming manifest file, you must concatenate the locator’s Path value and the manifest (filename.ism) file name. Then, append /Manifest and an appropriate format (if needed) to the locator path. \n\nYou can also stream your content over an SSL connection. To do this, make sure your streaming URLs start with HTTPS.\n\nNote that you can only stream over SSL if the streaming endpoint from which you deliver your content was created after September 10th, 2014. If your streaming URLs are based on the streaming endpoints created after September 10th, the URL contains “streaming.mediaservices.windows.net” (the new format). Streaming URLs that contain “origin.mediaservices.windows.net” (the old format) do not support SSL. If your URL is in the old format and you want to be able to stream over SSL, create a new streaming endpoint. Use URLs created based on the new streaming endpoint to stream your content over SSL. \n\nThe following list describes different streaming formats and gives examples:\n\n- Smooth Streaming\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest\n        \n        http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest\n\n\n- MPEG DASH\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=mpd-time-csf)\n \n        http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=mpd-time-csf)\n\n\n\n- Apple HTTP Live Streaming (HLS) V4\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl)\n\n        http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl)\n\n\n\n- Apple HTTP Live Streaming (HLS) V3\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl-v3)\n\n        http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl-v3)\n\n- HDS (for Adobe PrimeTime/Access licensees only)\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.windows.net/{locator ID}/{filename}.ism/Manifest(format=f4m-f4f)\n\n        http://testendpoint-testaccount.streaming.mediaservices.windows.net/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=f4m-f4f) \n\n \ntest\n"
}