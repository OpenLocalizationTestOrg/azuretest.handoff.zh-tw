<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Diagnose failures and exceptions in ASP.NET apps with Application Insights</source>
          <target state="new">Diagnose failures and exceptions in ASP.NET apps with Application Insights</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Configure your app to get a compelling diagnostic experience by capturing exceptions along with request telemetry.</source>
          <target state="new">Configure your app to get a compelling diagnostic experience by capturing exceptions along with request telemetry.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Diagnose failures and exceptions in ASP.NET apps with Application Insights</source>
          <target state="new">Diagnose failures and exceptions in ASP.NET apps with Application Insights</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By monitoring your application with [Visual Studio Application Insights][start], you can correlate failed requests with exceptions and other events at both the client and server, so that you can quickly diagnose the causes.</source>
          <target state="new">By monitoring your application with [Visual Studio Application Insights][start], you can correlate failed requests with exceptions and other events at both the client and server, so that you can quickly diagnose the causes.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To monitor an ASP.NET app, you have to [add Application Insights SDK][greenbrown] to your application, or [install Status Monitor on your IIS server][redfield], or, if your app is an Azure Web App, add the [Application Insights Extension][azure].</source>
          <target state="new">To monitor an ASP.NET app, you have to [add Application Insights SDK][greenbrown] to your application, or [install Status Monitor on your IIS server][redfield], or, if your app is an Azure Web App, add the [Application Insights Extension][azure].</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Diagnosing failures</source>
          <target state="new">Diagnosing failures</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>From the overview blade, the Failures tile shows you charts of exceptions and failed HTTP requests, together with a list of the request URLs that cause the most frequent failures.</source>
          <target state="new">From the overview blade, the Failures tile shows you charts of exceptions and failed HTTP requests, together with a list of the request URLs that cause the most frequent failures.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Select Failures</source>
          <target state="new">Select Failures</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Click through one of the failed request types in the list to get to individual occurrences of the failure.</source>
          <target state="new">Click through one of the failed request types in the list to get to individual occurrences of the failure.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>From there, click through to the exceptions or any trace data associated with it:</source>
          <target state="new">From there, click through to the exceptions or any trace data associated with it:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Select an instance of a failed request, and under exception details, get to instances of the exception.</source>
          <target state="new">Select an instance of a failed request, and under exception details, get to instances of the exception.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alternatively,<ept id="p1">**</ept> you can start from the list of exceptions that you'll find further down the Failures blade.</source>
          <target state="new"><bpt id="p1">**</bpt>Alternatively,<ept id="p1">**</ept> you can start from the list of exceptions that you'll find further down the Failures blade.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Keep clicking until you eventually get to individual exceptions.</source>
          <target state="new">Keep clicking until you eventually get to individual exceptions.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Drill through</source>
          <target state="new">Drill through</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>No exceptions showing?</source>
          <target state="new">No exceptions showing?</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Capture exceptions<ept id="p1">](#exceptions)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Capture exceptions<ept id="p1">](#exceptions)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>From there you can look at the stack trace and detailed properties of each exception and find related log trace or other events.</source>
          <target state="new">From there you can look at the stack trace and detailed properties of each exception and find related log trace or other events.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Drill through</source>
          <target state="new">Drill through</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>[Learn more about Diagnostic Search][diagnostic].</source>
          <target state="new">[Learn more about Diagnostic Search][diagnostic].</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Dependency failures</source>
          <target state="new">Dependency failures</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>dependency<ept id="p1">*</ept> is a service that your application calls, typically through a REST API or database connection.</source>
          <target state="new">A <bpt id="p1">*</bpt>dependency<ept id="p1">*</ept> is a service that your application calls, typically through a REST API or database connection.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>[Application Insights Status Monitor][redfield] automatically monitors a variety of types of dependency call, measuring call duration and success or failure.</source>
          <target state="new">[Application Insights Status Monitor][redfield] automatically monitors a variety of types of dependency call, measuring call duration and success or failure.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To get dependency data, you have to [install Status Monitor][redfield] on your IIS server, or if your app is an Azure Web App, use the [Application Insights Extension][azure].</source>
          <target state="new">To get dependency data, you have to [install Status Monitor][redfield] on your IIS server, or if your app is an Azure Web App, use the [Application Insights Extension][azure].</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can do this either</source>
          <target state="new">You can do this either</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Failed calls to dependencies are listed on the Failures blade, and you can also find them under Related Items in the request details and exception details.</source>
          <target state="new">Failed calls to dependencies are listed on the Failures blade, and you can also find them under Related Items in the request details and exception details.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No dependency failures?</source>
          <target state="new">No dependency failures?</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>That's good.</source>
          <target state="new">That's good.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>But to verify that you're getting dependency data, open the Performance blade and look at the Dependency Duration chart.</source>
          <target state="new">But to verify that you're getting dependency data, open the Performance blade and look at the Dependency Duration chart.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Custom tracing and log data</source>
          <target state="new">Custom tracing and log data</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To get diagnostic data specific to your app, you can insert code to send your own telemetry data.</source>
          <target state="new">To get diagnostic data specific to your app, you can insert code to send your own telemetry data.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This displayed in diagnostic search alongside the request, page view and other automatically-collected data.</source>
          <target state="new">This displayed in diagnostic search alongside the request, page view and other automatically-collected data.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You have several options:</source>
          <target state="new">You have several options:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>TrackEvent()<ept id="p1">](app-insights-api-custom-events-metrics.md#track-event)</ept> is typically used for monitoring usage patterns, but the data it sends also appears under Custom Events in diagnostic search.</source>
          <target state="new"><bpt id="p1">[</bpt>TrackEvent()<ept id="p1">](app-insights-api-custom-events-metrics.md#track-event)</ept> is typically used for monitoring usage patterns, but the data it sends also appears under Custom Events in diagnostic search.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Events are named, and can carry string properties and numeric metrics on which you can [filter your diagnostic searches][diagnostic].</source>
          <target state="new">Events are named, and can carry string properties and numeric metrics on which you can [filter your diagnostic searches][diagnostic].</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>TrackTrace()<ept id="p1">](app-insights-api-custom-events-metrics.md#track-trace)</ept> lets you send longer data such as POST information.</source>
          <target state="new"><bpt id="p1">[</bpt>TrackTrace()<ept id="p1">](app-insights-api-custom-events-metrics.md#track-trace)</ept> lets you send longer data such as POST information.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>TrackException()<ept id="p1">](#exceptions)</ept> sends stack traces.</source>
          <target state="new"><bpt id="p1">[</bpt>TrackException()<ept id="p1">](#exceptions)</ept> sends stack traces.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>More about exceptions<ept id="p1">](#exceptions)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>More about exceptions<ept id="p1">](#exceptions)</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you already use a logging framework like Log4Net or NLog, you can [capture those logs][netlogs] and see them in diagnostic search alongside request and exception data.</source>
          <target state="new">If you already use a logging framework like Log4Net or NLog, you can [capture those logs][netlogs] and see them in diagnostic search alongside request and exception data.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To see these events, open [Search][diagnostic], open Filter, and then choose Custom Event, Trace, or Exception.</source>
          <target state="new">To see these events, open [Search][diagnostic], open Filter, and then choose Custom Event, Trace, or Exception.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Drill through</source>
          <target state="new">Drill through</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>How to see request POST data</source>
          <target state="new">How to see request POST data</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Request details don't include the data sent to your app in a POST call.</source>
          <target state="new">Request details don't include the data sent to your app in a POST call.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To have this data reported:</source>
          <target state="new">To have this data reported:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>[Install the SDK][greenbrown] in your application project.</source>
          <target state="new">[Install the SDK][greenbrown] in your application project.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Insert code in your application to call [Microsoft.ApplicationInsights.TrackTrace()][api].</source>
          <target state="new">Insert code in your application to call [Microsoft.ApplicationInsights.TrackTrace()][api].</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Send the POST data in the message parameter.</source>
          <target state="new">Send the POST data in the message parameter.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There is a limit to the permitted size, so you should try to send just the essential data.</source>
          <target state="new">There is a limit to the permitted size, so you should try to send just the essential data.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you investigate a failed request, find the associated traces.</source>
          <target state="new">When you investigate a failed request, find the associated traces.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Drill through</source>
          <target state="new">Drill through</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="exceptions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Capturing exceptions and related diagnostic data</source>
          <target state="new"><ph id="ph1">&lt;a name="exceptions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Capturing exceptions and related diagnostic data</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>At first, you won't see in the portal all the exceptions that cause failures in your app.</source>
          <target state="new">At first, you won't see in the portal all the exceptions that cause failures in your app.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You'll see any browser exceptions (if you're using the [JavaScript SDK][client] in your web pages).</source>
          <target state="new">You'll see any browser exceptions (if you're using the [JavaScript SDK][client] in your web pages).</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>But most server exceptions are caught by IIS and you have to write a bit of code to see them.</source>
          <target state="new">But most server exceptions are caught by IIS and you have to write a bit of code to see them.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can:</source>
          <target state="new">You can:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Log exceptions explicitly<ept id="p1">**</ept> by inserting code in exception handlers to report the exceptions.</source>
          <target state="new"><bpt id="p1">**</bpt>Log exceptions explicitly<ept id="p1">**</ept> by inserting code in exception handlers to report the exceptions.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Capture exceptions automatically<ept id="p1">**</ept> by configuring your ASP.NET framework.</source>
          <target state="new"><bpt id="p1">**</bpt>Capture exceptions automatically<ept id="p1">**</ept> by configuring your ASP.NET framework.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The necessary additions are different for different types of framework.</source>
          <target state="new">The necessary additions are different for different types of framework.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Reporting exceptions explicitly</source>
          <target state="new">Reporting exceptions explicitly</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The simplest way is to insert a call to TrackException() in an exception handler.</source>
          <target state="new">The simplest way is to insert a call to TrackException() in an exception handler.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="new">JavaScript</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>VB</source>
          <target state="new">VB</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The properties and measurements parameters are optional, but are useful for [filtering and adding][diagnostic] extra information.</source>
          <target state="new">The properties and measurements parameters are optional, but are useful for [filtering and adding][diagnostic] extra information.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if you have an app that can run several games, you could find all the exception reports related to a particular game.</source>
          <target state="new">For example, if you have an app that can run several games, you could find all the exception reports related to a particular game.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can add as many items as you like to each dictionary.</source>
          <target state="new">You can add as many items as you like to each dictionary.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Browser exceptions</source>
          <target state="new">Browser exceptions</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Most browser exceptions are reported.</source>
          <target state="new">Most browser exceptions are reported.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If your web page includes script files from content delivery networks or other domains, ensure your script tag has the attribute <ph id="ph1">```crossorigin="anonymous"```</ph>,  and that the server sends <bpt id="p1">[</bpt>CORS headers<ept id="p1">](http://enable-cors.org/)</ept>.</source>
          <target state="new">If your web page includes script files from content delivery networks or other domains, ensure your script tag has the attribute <ph id="ph1">```crossorigin="anonymous"```</ph>,  and that the server sends <bpt id="p1">[</bpt>CORS headers<ept id="p1">](http://enable-cors.org/)</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This will allow you to get a stack trace and detail for unhandled JavaScript exceptions from these resources.</source>
          <target state="new">This will allow you to get a stack trace and detail for unhandled JavaScript exceptions from these resources.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Web forms</source>
          <target state="new">Web forms</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For web forms, the HTTP Module will be able to collect the exceptions when there are no redirects configured with CustomErrors.</source>
          <target state="new">For web forms, the HTTP Module will be able to collect the exceptions when there are no redirects configured with CustomErrors.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>But if you have active redirects, add the following lines to the Application_Error function in Global.asax.cs.</source>
          <target state="new">But if you have active redirects, add the following lines to the Application_Error function in Global.asax.cs.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(Add a Global.asax file if you don't already have one.)</source>
          <target state="new">(Add a Global.asax file if you don't already have one.)</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>MVC</source>
          <target state="new">MVC</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt>CustomErrors<ept id="p1">](https://msdn.microsoft.com/library/h0hfz6fc.aspx)</ept> configuration is <ph id="ph1">`Off`</ph>, then exceptions will be available for the <bpt id="p2">[</bpt>HTTP Module<ept id="p2">](https://msdn.microsoft.com/library/ms178468.aspx)</ept> to collect.</source>
          <target state="new">If the <bpt id="p1">[</bpt>CustomErrors<ept id="p1">](https://msdn.microsoft.com/library/h0hfz6fc.aspx)</ept> configuration is <ph id="ph1">`Off`</ph>, then exceptions will be available for the <bpt id="p2">[</bpt>HTTP Module<ept id="p2">](https://msdn.microsoft.com/library/ms178468.aspx)</ept> to collect.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, if it is <ph id="ph1">`RemoteOnly`</ph> (default), or <ph id="ph2">`On`</ph>, then the exception will be cleared and not available for Application Insights to automatically collect.</source>
          <target state="new">However, if it is <ph id="ph1">`RemoteOnly`</ph> (default), or <ph id="ph2">`On`</ph>, then the exception will be cleared and not available for Application Insights to automatically collect.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can fix that by overriding the <bpt id="p1">[</bpt>System.Web.Mvc.HandleErrorAttribute class<ept id="p1">](http://msdn.microsoft.com/library/system.web.mvc.handleerrorattribute.aspx)</ept>, and applying the overridden class as shown for the different MVC versions below (<bpt id="p2">[</bpt>github source<ept id="p2">](https://github.com/AppInsightsSamples/Mvc2UnhandledExceptions/blob/master/MVC2App/Controllers/AiHandleErrorAttribute.cs)</ept>):</source>
          <target state="new">You can fix that by overriding the <bpt id="p1">[</bpt>System.Web.Mvc.HandleErrorAttribute class<ept id="p1">](http://msdn.microsoft.com/library/system.web.mvc.handleerrorattribute.aspx)</ept>, and applying the overridden class as shown for the different MVC versions below (<bpt id="p2">[</bpt>github source<ept id="p2">](https://github.com/AppInsightsSamples/Mvc2UnhandledExceptions/blob/master/MVC2App/Controllers/AiHandleErrorAttribute.cs)</ept>):</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>MVC 2</source>
          <target state="new">MVC 2</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Replace the HandleError attribute with your new attribute in your controllers.</source>
          <target state="new">Replace the HandleError attribute with your new attribute in your controllers.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>MVC 3</source>
          <target state="new">MVC 3</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Register <ph id="ph1">`AiHandleErrorAttribute`</ph> as a global filter in Global.asax.cs:</source>
          <target state="new">Register <ph id="ph1">`AiHandleErrorAttribute`</ph> as a global filter in Global.asax.cs:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>MVC 4, MVC5</source>
          <target state="new">MVC 4, MVC5</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Register AiHandleErrorAttribute as a global filter in FilterConfig.cs:</source>
          <target state="new">Register AiHandleErrorAttribute as a global filter in FilterConfig.cs:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Web API 1.x</source>
          <target state="new">Web API 1.x</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Override System.Web.Http.Filters.ExceptionFilterAttribute:</source>
          <target state="new">Override System.Web.Http.Filters.ExceptionFilterAttribute:</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You could add this overridden attribute to specific controllers, or add it to the global filter configuration in the WebApiConfig class:</source>
          <target state="new">You could add this overridden attribute to specific controllers, or add it to the global filter configuration in the WebApiConfig class:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>There are a number of cases that the exception filters cannot handle.</source>
          <target state="new">There are a number of cases that the exception filters cannot handle.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Exceptions thrown from controller constructors.</source>
          <target state="new">Exceptions thrown from controller constructors.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Exceptions thrown from message handlers.</source>
          <target state="new">Exceptions thrown from message handlers.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Exceptions thrown during routing.</source>
          <target state="new">Exceptions thrown during routing.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Exceptions thrown during response content serialization.</source>
          <target state="new">Exceptions thrown during response content serialization.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Web API 2.x</source>
          <target state="new">Web API 2.x</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add an implementation of IExceptionLogger:</source>
          <target state="new">Add an implementation of IExceptionLogger:</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Add this to the services in WebApiConfig:</source>
          <target state="new">Add this to the services in WebApiConfig:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>As alternatives, you could:</source>
          <target state="new">As alternatives, you could:</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Replace the only ExceptionHandler with a custom implementation of IExceptionHandler.</source>
          <target state="new">Replace the only ExceptionHandler with a custom implementation of IExceptionHandler.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is only called when the framework is still able to choose which response message to send (not when the connection is aborted for instance)</source>
          <target state="new">This is only called when the framework is still able to choose which response message to send (not when the connection is aborted for instance)</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Exception Filters (as described in the section on Web API 1.x controllers above) - not called in all cases.</source>
          <target state="new">Exception Filters (as described in the section on Web API 1.x controllers above) - not called in all cases.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>WCF</source>
          <target state="new">WCF</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Add a class that extends Attribute and implements IErrorHandler and IServiceBehavior.</source>
          <target state="new">Add a class that extends Attribute and implements IErrorHandler and IServiceBehavior.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Add the attribute to the service implementations:</source>
          <target state="new">Add the attribute to the service implementations:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sample</source>
          <target state="new">Sample</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bd5a418f2b09bfd4b6b132550451f5ccc2e5c5b</xliffext:olfilehash>
  </header>
</xliff>