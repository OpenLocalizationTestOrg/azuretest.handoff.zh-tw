{
  "nodes": [
    {
      "content": "Node.js web app using the Azure Table Service",
      "pos": [
        27,
        72
      ]
    },
    {
      "content": "A tutorial that teaches you how to use the Azure Table service to store data from a Node.js application hosted in Azure App Service Web Apps.",
      "pos": [
        91,
        232
      ]
    },
    {
      "content": "Node.js web app using the Azure Table Service",
      "pos": [
        579,
        624
      ]
    },
    {
      "content": "Overview",
      "pos": [
        629,
        637
      ]
    },
    {
      "content": "This tutorial shows you how to use Table service provided by Azure Data Management to store and access data from a <bpt id=\"p1\">[</bpt><ept id=\"p1\">node]</ept> application hosted in <bpt id=\"p2\">[</bpt>Azure App Service<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=529714)</ept> Web Apps.",
      "pos": [
        639,
        859
      ]
    },
    {
      "content": "This tutorial assumes that you have some prior experience using node and <bpt id=\"p1\">[</bpt><ept id=\"p1\">Git]</ept>.",
      "pos": [
        860,
        939
      ]
    },
    {
      "content": "You will learn:",
      "pos": [
        941,
        956
      ]
    },
    {
      "content": "How to use npm (node package manager) to install the node modules",
      "pos": [
        960,
        1025
      ]
    },
    {
      "content": "How to work with the Azure Table service",
      "pos": [
        1029,
        1069
      ]
    },
    {
      "content": "How to use the Azure CLI to create a web app.",
      "pos": [
        1073,
        1118
      ]
    },
    {
      "content": "By following this tutorial, you will build a simple web-based \"to-do list\" application that allows creating, retrieving and completing tasks.",
      "pos": [
        1120,
        1261
      ]
    },
    {
      "content": "The tasks are stored in the Table service.",
      "pos": [
        1262,
        1304
      ]
    },
    {
      "content": "Here is the completed application:",
      "pos": [
        1306,
        1340
      ]
    },
    {
      "content": "A web page displaying an empty tasklist",
      "pos": [
        1344,
        1383
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you want to get started with Azure App Service before signing up for an Azure account, go to <bpt id=\"p1\">[</bpt>Try App Service<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=523751)</ept>, where you can immediately create a short-lived starter web app in App Service.",
      "pos": [
        1408,
        1661
      ]
    },
    {
      "content": "No credit cards required; no commitments.",
      "pos": [
        1662,
        1703
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1709,
        1722
      ]
    },
    {
      "content": "Before following the instructions in this article, ensure that you have the following installed:",
      "pos": [
        1724,
        1820
      ]
    },
    {
      "pos": [
        1824,
        1856
      ],
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">node]</ept> version 0.10.24 or higher"
    },
    {
      "content": "Git",
      "pos": [
        1861,
        1864
      ]
    },
    {
      "content": "Create a storage account",
      "pos": [
        1975,
        1999
      ]
    },
    {
      "content": "Create an Azure storage account.",
      "pos": [
        2001,
        2033
      ]
    },
    {
      "content": "The app will use this account to store the to-do items.",
      "pos": [
        2034,
        2089
      ]
    },
    {
      "pos": [
        2095,
        2149
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt>Azure Portal<ept id=\"p1\">](https://portal.azure.com)</ept>."
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> icon on the bottom left of the portal, then click <bpt id=\"p2\">**</bpt>Data + Storage<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Storage<ept id=\"p3\">**</ept>.",
      "pos": [
        2154,
        2255
      ]
    },
    {
      "content": "Give the storage account a unique name and create a new <bpt id=\"p1\">[</bpt>resource group<ept id=\"p1\">](../resource-group-overview.md)</ept> for it.",
      "pos": [
        2256,
        2367
      ]
    },
    {
      "content": "New Button",
      "pos": [
        2375,
        2385
      ]
    },
    {
      "pos": [
        2465,
        2670
      ],
      "content": "When the storage account has been created, the <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> button will flash a green <bpt id=\"p2\">**</bpt>SUCCESS<ept id=\"p2\">**</ept> and the storage account's blade is open to show that it belongs to the new resource group you created."
    },
    {
      "content": "In the storage account's blade, click <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Keys<ept id=\"p2\">**</ept>.",
      "pos": [
        2675,
        2737
      ]
    },
    {
      "content": "Copy the primary access key to the clipboard.",
      "pos": [
        2738,
        2783
      ]
    },
    {
      "content": "Access key",
      "pos": [
        2791,
        2801
      ]
    },
    {
      "content": "Install modules and generate scaffolding",
      "pos": [
        2835,
        2875
      ]
    },
    {
      "content": "In this section you will create a new Node application and use npm to add module packages.",
      "pos": [
        2877,
        2967
      ]
    },
    {
      "content": "For this application you will use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Express]</ept> and <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure]</ept> modules.",
      "pos": [
        2968,
        3036
      ]
    },
    {
      "content": "The Express module provides a Model View Controller framework for node, while the Azure modules provides connectivity to the Table service.",
      "pos": [
        3037,
        3176
      ]
    },
    {
      "content": "Install express and generate scaffolding",
      "pos": [
        3182,
        3222
      ]
    },
    {
      "pos": [
        3227,
        3321
      ],
      "content": "From the command line, create a new directory named <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> and switch to that directory."
    },
    {
      "content": "Enter the following command to install the Express module.",
      "pos": [
        3328,
        3386
      ]
    },
    {
      "content": "Depending on the operating system, you may need to put 'sudo' before the command:",
      "pos": [
        3440,
        3521
      ]
    },
    {
      "content": "The output appears similar to the following example:",
      "pos": [
        3580,
        3632
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The '-g' parameter installs the module globally.",
      "pos": [
        3789,
        3850
      ]
    },
    {
      "content": "That way, we can use <bpt id=\"p1\">**</bpt>express<ept id=\"p1\">**</ept> to generate web app scaffolding without having to type in additional path information.",
      "pos": [
        3851,
        3970
      ]
    },
    {
      "pos": [
        3975,
        4052
      ],
      "content": "To create the scaffolding for the application, enter the <bpt id=\"p1\">**</bpt>express<ept id=\"p1\">**</ept> command:"
    },
    {
      "content": "The output of this command appears similar to the following example:",
      "pos": [
        4075,
        4143
      ]
    },
    {
      "pos": [
        4881,
        4958
      ],
      "content": "You now have several new directories and files in the <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> directory."
    },
    {
      "content": "Install additional modules",
      "pos": [
        4964,
        4990
      ]
    },
    {
      "content": "One of the files that <bpt id=\"p1\">**</bpt>express<ept id=\"p1\">**</ept> creates is <bpt id=\"p2\">**</bpt>package.json<ept id=\"p2\">**</ept>.",
      "pos": [
        4992,
        5054
      ]
    },
    {
      "content": "This file contains a list of module dependencies.",
      "pos": [
        5055,
        5104
      ]
    },
    {
      "content": "Later, when you deploy the application to App Service Web Apps, this file determines which modules need to be installed on Azure.",
      "pos": [
        5105,
        5234
      ]
    },
    {
      "content": "From the command-line, enter the following command to install the modules described in the <bpt id=\"p1\">**</bpt>package.json<ept id=\"p1\">**</ept> file.",
      "pos": [
        5236,
        5349
      ]
    },
    {
      "content": "You may need to use 'sudo'.",
      "pos": [
        5350,
        5377
      ]
    },
    {
      "content": "The output of this command appears similar to the following example:",
      "pos": [
        5396,
        5464
      ]
    },
    {
      "pos": [
        5618,
        5717
      ],
      "content": "Next, enter the following command to install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">azure]</ept>, <bpt id=\"p2\">[</bpt><ept id=\"p2\">node-uuid]</ept>, <bpt id=\"p3\">[</bpt><ept id=\"p3\">nconf]</ept> and <bpt id=\"p4\">[</bpt><ept id=\"p4\">async]</ept> modules:"
    },
    {
      "pos": [
        5779,
        5859
      ],
      "content": "The <bpt id=\"p1\">**</bpt>--save<ept id=\"p1\">**</ept> flag adds entries for these modules to the <bpt id=\"p2\">**</bpt>package.json<ept id=\"p2\">**</ept> file."
    },
    {
      "content": "The output of this command appears similar to the following example:",
      "pos": [
        5861,
        5929
      ]
    },
    {
      "content": "Create the application",
      "pos": [
        6157,
        6179
      ]
    },
    {
      "content": "Now we're ready to build the application.",
      "pos": [
        6181,
        6222
      ]
    },
    {
      "content": "Create a model",
      "pos": [
        6228,
        6242
      ]
    },
    {
      "content": "A <bpt id=\"p1\">*</bpt>model<ept id=\"p1\">*</ept> is an object that represents the data in your application.",
      "pos": [
        6244,
        6312
      ]
    },
    {
      "content": "For the application, the only model is a task object, which represents an item in the to-do list.",
      "pos": [
        6313,
        6410
      ]
    },
    {
      "content": "Tasks will have the following fields:",
      "pos": [
        6411,
        6448
      ]
    },
    {
      "content": "PartitionKey",
      "pos": [
        6452,
        6464
      ]
    },
    {
      "content": "RowKey",
      "pos": [
        6467,
        6473
      ]
    },
    {
      "content": "name (string)",
      "pos": [
        6476,
        6489
      ]
    },
    {
      "content": "category (string)",
      "pos": [
        6492,
        6509
      ]
    },
    {
      "content": "completed (Boolean)",
      "pos": [
        6512,
        6531
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> are used by the Table Service as table keys.",
      "pos": [
        6533,
        6609
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Understanding the Table Service data model<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dd179338.aspx)</ept>.",
      "pos": [
        6610,
        6737
      ]
    },
    {
      "pos": [
        6743,
        6814
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> directory, create a new directory named <bpt id=\"p2\">**</bpt>models<ept id=\"p2\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>models<ept id=\"p1\">**</ept> directory, create a new file named <bpt id=\"p2\">**</bpt>task.js<ept id=\"p2\">**</ept>.",
      "pos": [
        6819,
        6884
      ]
    },
    {
      "content": "This file will contain the model for the tasks created by your application.",
      "pos": [
        6885,
        6960
      ]
    },
    {
      "pos": [
        6965,
        7062
      ],
      "content": "At the beginning of the <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> file, add the following code to reference required libraries:"
    },
    {
      "content": "Add the following code to define and export the Task object.",
      "pos": [
        7217,
        7277
      ]
    },
    {
      "content": "This object is responsible for connecting to the table.",
      "pos": [
        7278,
        7333
      ]
    },
    {
      "content": "Add the following code to define additional methods on the Task object, which allow interactions with data stored in the table:",
      "pos": [
        7747,
        7874
      ]
    },
    {
      "pos": [
        9653,
        9689
      ],
      "content": "Save and close the <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Create a controller",
      "pos": [
        9695,
        9714
      ]
    },
    {
      "pos": [
        9716,
        9783
      ],
      "content": "A <bpt id=\"p1\">*</bpt>controller<ept id=\"p1\">*</ept> handles HTTP requests and renders the HTML response."
    },
    {
      "pos": [
        9788,
        9895
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>tasklist/routes<ept id=\"p1\">**</ept> directory, create a new file named <bpt id=\"p2\">**</bpt>tasklist.js<ept id=\"p2\">**</ept> and open it in a text editor."
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept>.",
      "pos": [
        9900,
        9942
      ]
    },
    {
      "content": "This loads the azure and async modules, which are used by <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept>.",
      "pos": [
        9943,
        10017
      ]
    },
    {
      "content": "This also defines the <bpt id=\"p1\">**</bpt>TaskList<ept id=\"p1\">**</ept> function, which is passed an instance of the <bpt id=\"p2\">**</bpt>Task<ept id=\"p2\">**</ept> object we defined earlier:",
      "pos": [
        10018,
        10133
      ]
    },
    {
      "pos": [
        10259,
        10288
      ],
      "content": "Define a <bpt id=\"p1\">**</bpt>TaskList<ept id=\"p1\">**</ept> object."
    },
    {
      "pos": [
        10367,
        10409
      ],
      "content": "Add the following methods to <bpt id=\"p1\">**</bpt>TaskList<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Modify app.js",
      "pos": [
        11749,
        11762
      ]
    },
    {
      "content": "From the <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> directory, open the <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept> file.",
      "pos": [
        11767,
        11825
      ]
    },
    {
      "content": "This file was created earlier by running the <bpt id=\"p1\">**</bpt>express<ept id=\"p1\">**</ept> command.",
      "pos": [
        11826,
        11891
      ]
    },
    {
      "content": "At the beginning of the file, add the following to load the azure module, set the table name, partition key, and set the storage credentials used by this example:",
      "pos": [
        11896,
        12058
      ]
    },
    {
      "pos": [
        12438,
        12582
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> nconf will load the configuration values from either environment variables or the <bpt id=\"p1\">**</bpt>config.json<ept id=\"p1\">**</ept> file, which we will create later."
    },
    {
      "content": "In the app.js file, scroll down to where you see the following line:",
      "pos": [
        12587,
        12655
      ]
    },
    {
      "content": "Replace the above lines with the code shown below.",
      "pos": [
        12726,
        12776
      ]
    },
    {
      "content": "This will initialize an instance of <ph id=\"ph1\">&lt;strong&gt;</ph>Task<ph id=\"ph2\">&lt;/strong&gt;</ph> with a connection to your storage account.",
      "pos": [
        12777,
        12877
      ]
    },
    {
      "content": "This is passed to the <ph id=\"ph1\">&lt;strong&gt;</ph>TaskList<ph id=\"ph2\">&lt;/strong&gt;</ph>, which will use it to communicate with the Table service:",
      "pos": [
        12878,
        12983
      ]
    },
    {
      "pos": [
        13429,
        13454
      ],
      "content": "Save the <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Modify the index view",
      "pos": [
        13460,
        13481
      ]
    },
    {
      "pos": [
        13486,
        13547
      ],
      "content": "Open the <bpt id=\"p1\">**</bpt>tasklist/views/index.jade<ept id=\"p1\">**</ept> file in a text editor."
    },
    {
      "content": "Replace the entire contents of the file with the following code.",
      "pos": [
        13552,
        13616
      ]
    },
    {
      "content": "This defines a view that displays existing tasks and includes a form for adding new tasks and marking existing ones as completed.",
      "pos": [
        13617,
        13746
      ]
    },
    {
      "pos": [
        15056,
        15091
      ],
      "content": "Save and close <bpt id=\"p1\">**</bpt>index.jade<ept id=\"p1\">**</ept> file."
    },
    {
      "content": "Modify the global layout",
      "pos": [
        15097,
        15121
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>layout.jade<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">**</bpt>views<ept id=\"p2\">**</ept> directory is a global template for other <bpt id=\"p3\">**</bpt>.jade<ept id=\"p3\">**</ept> files.",
      "pos": [
        15123,
        15222
      ]
    },
    {
      "content": "In this step you will modify it to use <bpt id=\"p1\">[</bpt>Twitter Bootstrap<ept id=\"p1\">](https://github.com/twbs/bootstrap)</ept>, which is a toolkit that makes it easy to design a nice looking web app.",
      "pos": [
        15223,
        15389
      ]
    },
    {
      "content": "Download and extract the files for <bpt id=\"p1\">[</bpt>Twitter Bootstrap<ept id=\"p1\">](http://getbootstrap.com/)</ept>.",
      "pos": [
        15391,
        15472
      ]
    },
    {
      "content": "Copy the <bpt id=\"p1\">**</bpt>bootstrap.min.css<ept id=\"p1\">**</ept> file from the Bootstrap <bpt id=\"p2\">**</bpt>css<ept id=\"p2\">**</ept> folder into the <bpt id=\"p3\">**</bpt>public/stylesheets<ept id=\"p3\">**</ept> directory of your application.",
      "pos": [
        15473,
        15605
      ]
    },
    {
      "pos": [
        15607,
        15706
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> folder, open <bpt id=\"p2\">**</bpt>layout.jade<ept id=\"p2\">**</ept> and replace the entire contents with the following:"
    },
    {
      "content": "Create a config file",
      "pos": [
        16046,
        16066
      ]
    },
    {
      "content": "To run the app locally, we'll put Azure Storage credentials into a config file.",
      "pos": [
        16068,
        16147
      ]
    },
    {
      "content": "Create a file named *<bpt id=\"p1\">*</bpt>config.json<ept id=\"p1\">*</ept> *with the following JSON:",
      "pos": [
        16148,
        16208
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>storage account name<ept id=\"p1\">**</ept> with the name of the storage account you created earlier, and replace <bpt id=\"p2\">**</bpt>storage access key<ept id=\"p2\">**</ept> with the primary access key for your storage account.",
      "pos": [
        16386,
        16565
      ]
    },
    {
      "content": "For example:",
      "pos": [
        16566,
        16578
      ]
    },
    {
      "pos": [
        16738,
        16825
      ],
      "content": "Save this file <bpt id=\"p1\">*</bpt>one directory level higher<ept id=\"p1\">*</ept> than the <bpt id=\"p2\">**</bpt>tasklist<ept id=\"p2\">**</ept> directory, like this:"
    },
    {
      "content": "The reason for doing this is to avoid checking the config file into source control, where it might become public.",
      "pos": [
        16882,
        16995
      ]
    },
    {
      "content": "When we deploy the app to Azure, we will use environment variables instead of a config file.",
      "pos": [
        16996,
        17088
      ]
    },
    {
      "content": "Run the application locally",
      "pos": [
        17094,
        17121
      ]
    },
    {
      "content": "To test the application on your local machine, perform the following steps:",
      "pos": [
        17123,
        17198
      ]
    },
    {
      "pos": [
        17203,
        17275
      ],
      "content": "From the command-line, change directories to the <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> directory."
    },
    {
      "content": "Use the following command to launch the application locally:",
      "pos": [
        17280,
        17340
      ]
    },
    {
      "content": "Open a web browser and navigate to http://127.0.0.1:3000.",
      "pos": [
        17364,
        17421
      ]
    },
    {
      "content": "A web page similar to the following example appears.",
      "pos": [
        17427,
        17479
      ]
    },
    {
      "content": "A webpage displaying an empty tasklist",
      "pos": [
        17487,
        17525
      ]
    },
    {
      "pos": [
        17552,
        17629
      ],
      "content": "To create a new to-do item, enter a name and category and click <bpt id=\"p1\">**</bpt>Add Item<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        17635,
        17709
      ],
      "content": "To mark a task as complete, check <bpt id=\"p1\">**</bpt>Complete<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Update Tasks<ept id=\"p2\">**</ept>."
    },
    {
      "content": "An image of the new item in the list of tasks",
      "pos": [
        17717,
        17762
      ]
    },
    {
      "content": "Even though the application is running locally, it is storing the data in the Azure Table service.",
      "pos": [
        17788,
        17886
      ]
    },
    {
      "content": "Deploy your application to Azure",
      "pos": [
        17891,
        17923
      ]
    },
    {
      "content": "The steps in this section use the Azure command-line tools to create a new web app in App Service, and then use Git to deploy your application.",
      "pos": [
        17925,
        18068
      ]
    },
    {
      "content": "To perform these steps you must have an Azure subscription.",
      "pos": [
        18069,
        18128
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> These steps can also be performed by using the <bpt id=\"p1\">[</bpt>Azure Portal<ept id=\"p1\">](https://portal.azure.com)</ept>.",
      "pos": [
        18132,
        18233
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Build and deploy a Node.js web app in Azure App Service]</ept>.",
      "pos": [
        18234,
        18296
      ]
    },
    {
      "content": "If this is the first web app you have created, you must use the Azure Portal to deploy this application.",
      "pos": [
        18301,
        18405
      ]
    },
    {
      "pos": [
        18407,
        18503
      ],
      "content": "To get started, install the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure CLI]</ept> by entering the following command from the command line:"
    },
    {
      "content": "Import publishing settings",
      "pos": [
        18539,
        18565
      ]
    },
    {
      "content": "In this step, you will download a file containing information about your subscription.",
      "pos": [
        18567,
        18653
      ]
    },
    {
      "content": "Enter the following command:",
      "pos": [
        18658,
        18686
      ]
    },
    {
      "content": "This command launches a browser and navigates to the download page.",
      "pos": [
        18724,
        18791
      ]
    },
    {
      "content": "If prompted, log in with the account associated with your Azure subscription.",
      "pos": [
        18792,
        18869
      ]
    },
    {
      "content": "The file download begins automatically; if it does not, you can click the link at the beginning of the page to manually download the file.",
      "pos": [
        18940,
        19078
      ]
    },
    {
      "content": "Save the file and note the file path.",
      "pos": [
        19079,
        19116
      ]
    },
    {
      "content": "Enter the following command to import the settings:",
      "pos": [
        19121,
        19172
      ]
    },
    {
      "content": "Specify the path and file name of the publishing settings file you downloaded in the previous step.",
      "pos": [
        19223,
        19322
      ]
    },
    {
      "content": "After the settings are imported, delete the publish settings file.",
      "pos": [
        19327,
        19393
      ]
    },
    {
      "content": "It is no longer needed, and contains sensitive information regarding your Azure subscription.",
      "pos": [
        19394,
        19487
      ]
    },
    {
      "content": "Create an App Service web app",
      "pos": [
        19493,
        19522
      ]
    },
    {
      "pos": [
        19527,
        19599
      ],
      "content": "From the command-line, change directories to the <bpt id=\"p1\">**</bpt>tasklist<ept id=\"p1\">**</ept> directory."
    },
    {
      "content": "Use the following command to create a new web app.",
      "pos": [
        19604,
        19654
      ]
    },
    {
      "content": "You will be prompted for the web app name and location.",
      "pos": [
        19693,
        19748
      ]
    },
    {
      "content": "Provide a unique name and select the same geographical location as your Azure Storage account.",
      "pos": [
        19749,
        19843
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`--git`</ph> parameter creates a Git repository on Azure for this web app.",
      "pos": [
        19849,
        19922
      ]
    },
    {
      "content": "It also initializes a Git repository in the current directory if none exists, and adds a <bpt id=\"p1\">[</bpt><ept id=\"p1\">Git remote]</ept> named 'azure', which is used to publish the application to Azure.",
      "pos": [
        19923,
        20090
      ]
    },
    {
      "content": "Finally, it creates a <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> file, which contains settings used by Azure to host node applications.",
      "pos": [
        20091,
        20198
      ]
    },
    {
      "content": "If you omit the <ph id=\"ph1\">`--git`</ph> parameter but the directory contains a Git repository, the command will still create the 'azure' remote.",
      "pos": [
        20199,
        20327
      ]
    },
    {
      "content": "Once this command has completed, you will see output similar to the following.",
      "pos": [
        20333,
        20411
      ]
    },
    {
      "content": "Note that the line beginning with <bpt id=\"p1\">**</bpt>Website created at<ept id=\"p1\">**</ept> contains the URL for the web app.",
      "pos": [
        20412,
        20502
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If this is the first App Service web app for your subscription, you will be instructed to use the Azure Portal to create the web app.",
      "pos": [
        21101,
        21247
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Build and deploy a Node.js web app in Azure App Service]</ept>.",
      "pos": [
        21248,
        21332
      ]
    },
    {
      "content": "Set environment variables",
      "pos": [
        21338,
        21363
      ]
    },
    {
      "content": "In this step, you will add environment variables to your web app configuration on Azure.",
      "pos": [
        21365,
        21453
      ]
    },
    {
      "content": "From the command line, enter the following:",
      "pos": [
        21454,
        21497
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&lt;storage account name&gt;</ph><ept id=\"p1\">**</ept> with the name of the storage account you created earlier, and replace <bpt id=\"p2\">**</bpt><ph id=\"ph2\">&lt;storage access key&gt;</ph><ept id=\"p2\">**</ept> with the primary access key for your storage account.",
      "pos": [
        21647,
        21830
      ]
    },
    {
      "content": "(Use the same values as the config.json file that you created earlier.)",
      "pos": [
        21831,
        21902
      ]
    },
    {
      "pos": [
        21904,
        22001
      ],
      "content": "Alternatively, you can set environment variables in the <bpt id=\"p1\">[</bpt>Azure Portal<ept id=\"p1\">](https://portal.azure.com)</ept>:"
    },
    {
      "pos": [
        22007,
        22090
      ],
      "content": "Open the web app's blade by clicking <bpt id=\"p1\">**</bpt>Browse<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Web Apps<ept id=\"p2\">**</ept> &gt; your web app name."
    },
    {
      "pos": [
        22096,
        22171
      ],
      "content": "In your web app's blade, click <bpt id=\"p1\">**</bpt>All Settings<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Application Settings<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        22284,
        22356
      ],
      "content": "Scroll down to the <bpt id=\"p1\">**</bpt>App settings<ept id=\"p1\">**</ept> section and add the key/value pairs."
    },
    {
      "content": "App Settings",
      "pos": [
        22364,
        22376
      ]
    },
    {
      "pos": [
        22463,
        22478
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>SAVE<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Publish the application",
      "pos": [
        22485,
        22508
      ]
    },
    {
      "content": "To publish the app, commit the code files to Git and then push to azure/master.",
      "pos": [
        22510,
        22589
      ]
    },
    {
      "content": "Set your deployment credentials.",
      "pos": [
        22594,
        22626
      ]
    },
    {
      "content": "Add and commit your application files.",
      "pos": [
        22689,
        22727
      ]
    },
    {
      "content": "Push the commit to the App Service web app:",
      "pos": [
        22788,
        22831
      ]
    },
    {
      "content": "Use <bpt id=\"p1\">**</bpt>master<ept id=\"p1\">**</ept> as the target branch.",
      "pos": [
        22868,
        22904
      ]
    },
    {
      "content": "At the end of the deployment, you see a statement similar to the following example:",
      "pos": [
        22905,
        22988
      ]
    },
    {
      "pos": [
        23118,
        23263
      ],
      "content": "Once the push operation has completed, browse to the web app URL returned previously by the <ph id=\"ph1\">`azure create site`</ph> command to view your application."
    },
    {
      "content": "Next steps",
      "pos": [
        23269,
        23279
      ]
    },
    {
      "content": "While the steps in this article describe using the Table Service to store information, you can also use MongoDB.",
      "pos": [
        23281,
        23393
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js web app with MongoDB]</ept> for more information.",
      "pos": [
        23394,
        23450
      ]
    },
    {
      "content": "Additional resources",
      "pos": [
        23455,
        23475
      ]
    },
    {
      "content": "Azure CLI",
      "pos": [
        23478,
        23487
      ]
    },
    {
      "content": "What's changed",
      "pos": [
        23493,
        23507
      ]
    },
    {
      "pos": [
        23510,
        23678
      ],
      "content": "For a guide to the change from Websites to App Service see: <bpt id=\"p1\">[</bpt>Azure App Service and Its Impact on Existing Azure Services<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529714)</ept>"
    },
    {
      "pos": [
        23681,
        23852
      ],
      "content": "For a guide to the change of the Azure portal to the Azure preview portal see: <bpt id=\"p1\">[</bpt>Reference for navigating the preview portal<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=529715)</ept>"
    },
    {
      "content": "test",
      "pos": [
        25833,
        25837
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Node.js web app using the Azure Table Service\"\n    description=\"A tutorial that teaches you how to use the Azure Table service to store data from a Node.js application hosted in Azure App Service Web Apps.\"\n    tags=\"azure-portal\"\n    services=\"app-service\\web, storage\"\n    documentationCenter=\"nodejs\"\n    authors=\"MikeWasson\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"nodejs\"\n    ms.topic=\"article\"\n    ms.date=\"09/01/2015\"\n    ms.author=\"mwasson\"/>\n\n\n\n# Node.js web app using the Azure Table Service\n\n## Overview\n\nThis tutorial shows you how to use Table service provided by Azure Data Management to store and access data from a [node] application hosted in [Azure App Service](http://go.microsoft.com/fwlink/?LinkId=529714) Web Apps. This tutorial assumes that you have some prior experience using node and [Git].\n\nYou will learn:\n\n* How to use npm (node package manager) to install the node modules\n\n* How to work with the Azure Table service\n\n* How to use the Azure CLI to create a web app.\n\nBy following this tutorial, you will build a simple web-based \"to-do list\" application that allows creating, retrieving and completing tasks. The tasks are stored in the Table service.\n\nHere is the completed application:\n\n![A web page displaying an empty tasklist][node-table-finished]\n\n>[AZURE.NOTE] If you want to get started with Azure App Service before signing up for an Azure account, go to [Try App Service](http://go.microsoft.com/fwlink/?LinkId=523751), where you can immediately create a short-lived starter web app in App Service. No credit cards required; no commitments.\n\n\n## Prerequisites\n\nBefore following the instructions in this article, ensure that you have the following installed:\n\n* [node] version 0.10.24 or higher\n\n* [Git]\n\n\n[AZURE.INCLUDE [create-account-and-websites-note](../../includes/create-account-and-websites-note.md)]\n\n## Create a storage account\n\nCreate an Azure storage account. The app will use this account to store the to-do items.\n\n1.  Log into the [Azure Portal](https://portal.azure.com).\n\n2. Click the **New** icon on the bottom left of the portal, then click **Data + Storage** > **Storage**. Give the storage account a unique name and create a new [resource group](../resource-group-overview.md) for it.\n\n    ![New Button](./media/storage-nodejs-use-table-storage-web-site/configure-storage.png)\n\n    When the storage account has been created, the **Notifications** button will flash a green **SUCCESS** and the storage account's blade is open to show that it belongs to the new resource group you created.\n\n5. In the storage account's blade, click **Settings** > **Keys**. Copy the primary access key to the clipboard.\n\n    ![Access key][portal-storage-access-keys]\n\n\n##Install modules and generate scaffolding\n\nIn this section you will create a new Node application and use npm to add module packages. For this application you will use the [Express] and [Azure] modules. The Express module provides a Model View Controller framework for node, while the Azure modules provides connectivity to the Table service.\n\n### Install express and generate scaffolding\n\n1. From the command line, create a new directory named **tasklist** and switch to that directory.  \n\n2. Enter the following command to install the Express module.\n\n        npm install express-generator@4.2.0 -g\n\n    Depending on the operating system, you may need to put 'sudo' before the command:\n\n        sudo npm install express-generator@4.2.0 -g\n\n    The output appears similar to the following example:\n\n        express-generator@4.2.0 /usr/local/lib/node_modules/express-generator\n        ├── mkdirp@0.3.5\n        └── commander@1.3.2 (keypress@0.1.0)\n\n    > [AZURE.NOTE] The '-g' parameter installs the module globally. That way, we can use **express** to generate web app scaffolding without having to type in additional path information.\n\n4. To create the scaffolding for the application, enter the **express** command:\n\n        express\n\n    The output of this command appears similar to the following example:\n\n           create : .\n           create : ./package.json\n           create : ./app.js\n           create : ./public\n           create : ./public/images\n           create : ./routes\n           create : ./routes/index.js\n           create : ./routes/users.js\n           create : ./public/stylesheets\n           create : ./public/stylesheets/style.css\n           create : ./views\n           create : ./views/index.jade\n           create : ./views/layout.jade\n           create : ./views/error.jade\n           create : ./public/javascripts\n           create : ./bin\n           create : ./bin/www\n\n           install dependencies:\n             $ cd . && npm install\n\n           run the app:\n             $ DEBUG=my-application ./bin/www\n\n    You now have several new directories and files in the **tasklist** directory.\n\n### Install additional modules\n\nOne of the files that **express** creates is **package.json**. This file contains a list of module dependencies. Later, when you deploy the application to App Service Web Apps, this file determines which modules need to be installed on Azure.\n\nFrom the command-line, enter the following command to install the modules described in the **package.json** file. You may need to use 'sudo'.\n\n    npm install\n\nThe output of this command appears similar to the following example:\n\n    debug@0.7.4 node_modules\\debug\n\n    cookie-parser@1.0.1 node_modules\\cookie-parser\n    ├── cookie-signature@1.0.3\n    └── cookie@0.1.0\n\n    [...]\n\n\nNext, enter the following command to install the [azure], [node-uuid], [nconf] and [async] modules:\n\n    npm install azure-storage node-uuid async nconf --save\n\nThe **--save** flag adds entries for these modules to the **package.json** file.\n\nThe output of this command appears similar to the following example:\n\n    async@0.9.0 node_modules\\async\n\n    node-uuid@1.4.1 node_modules\\node-uuid\n\n    nconf@0.6.9 node_modules\\nconf\n    ├── ini@1.2.1\n    ├── async@0.2.9\n    └── optimist@0.6.0 (wordwrap@0.0.2, minimist@0.0.10)\n\n    [...]\n\n\n## Create the application\n\nNow we're ready to build the application.\n\n### Create a model\n\nA *model* is an object that represents the data in your application. For the application, the only model is a task object, which represents an item in the to-do list. Tasks will have the following fields:\n\n- PartitionKey\n- RowKey\n- name (string)\n- category (string)\n- completed (Boolean)\n\n**PartitionKey** and **RowKey** are used by the Table Service as table keys. For more information, see [Understanding the Table Service data model](https://msdn.microsoft.com/library/azure/dd179338.aspx).\n\n\n1. In the **tasklist** directory, create a new directory named **models**.\n\n2. In the **models** directory, create a new file named **task.js**. This file will contain the model for the tasks created by your application.\n\n3. At the beginning of the **task.js** file, add the following code to reference required libraries:\n\n        var azure = require('azure-storage');\n        var uuid = require('node-uuid');\n        var entityGen = azure.TableUtilities.entityGenerator;\n\n4. Add the following code to define and export the Task object. This object is responsible for connecting to the table.\n\n        module.exports = Task;\n\n        function Task(storageClient, tableName, partitionKey) {\n          this.storageClient = storageClient;\n          this.tableName = tableName;\n          this.partitionKey = partitionKey;\n          this.storageClient.createTableIfNotExists(tableName, function tableCreated(error) {\n            if(error) {\n              throw error;\n            }\n          });\n        };\n\n5. Add the following code to define additional methods on the Task object, which allow interactions with data stored in the table:\n\n        Task.prototype = {\n          find: function(query, callback) {\n            self = this;\n            self.storageClient.queryEntities(this.tableName, query, null, function entitiesQueried(error, result) {\n              if(error) {\n                callback(error);\n              } else {\n                callback(null, result.entries);\n              }\n            });\n          },\n\n          addItem: function(item, callback) {\n            self = this;\n            // use entityGenerator to set types\n            // NOTE: RowKey must be a string type, even though\n            // it contains a GUID in this example.\n            var itemDescriptor = {\n              PartitionKey: entityGen.String(self.partitionKey),\n              RowKey: entityGen.String(uuid()),\n              name: entityGen.String(item.name),\n              category: entityGen.String(item.category),\n              completed: entityGen.Boolean(false)\n            };\n            self.storageClient.insertEntity(self.tableName, itemDescriptor, function entityInserted(error) {\n              if(error){  \n                callback(error);\n              }\n              callback(null);\n            });\n          },\n\n          updateItem: function(rKey, callback) {\n            self = this;\n            self.storageClient.retrieveEntity(self.tableName, self.partitionKey, rKey, function entityQueried(error, entity) {\n              if(error) {\n                callback(error);\n              }\n              entity.completed._ = true;\n              self.storageClient.updateEntity(self.tableName, entity, function entityUpdated(error) {\n                if(error) {\n                  callback(error);\n                }\n                callback(null);\n              });\n            });\n          }\n        }\n\n6. Save and close the **task.js** file.\n\n### Create a controller\n\nA *controller* handles HTTP requests and renders the HTML response.\n\n1. In the **tasklist/routes** directory, create a new file named **tasklist.js** and open it in a text editor.\n\n2. Add the following code to **tasklist.js**. This loads the azure and async modules, which are used by **tasklist.js**. This also defines the **TaskList** function, which is passed an instance of the **Task** object we defined earlier:\n\n        var azure = require('azure-storage');\n        var async = require('async');\n\n        module.exports = TaskList;\n\n3. Define a **TaskList** object.\n\n        function TaskList(task) {\n          this.task = task;\n        }\n\n\n4. Add the following methods to **TaskList**:\n\n        TaskList.prototype = {\n          showTasks: function(req, res) {\n            self = this;\n            var query = new azure.TableQuery()\n              .where('completed eq ?', false);\n            self.task.find(query, function itemsFound(error, items) {\n              res.render('index',{title: 'My ToDo List ', tasks: items});\n            });\n          },\n\n          addTask: function(req,res) {\n            var self = this\n            var item = req.body.item;\n            self.task.addItem(item, function itemAdded(error) {\n              if(error) {\n                throw error;\n              }\n              res.redirect('/');\n            });\n          },\n\n          completeTask: function(req,res) {\n            var self = this;\n            var completedTasks = Object.keys(req.body);\n            async.forEach(completedTasks, function taskIterator(completedTask, callback) {\n              self.task.updateItem(completedTask, function itemsUpdated(error) {\n                if(error){\n                  callback(error);\n                } else {\n                  callback(null);\n                }\n              });\n            }, function goHome(error){\n              if(error) {\n                throw error;\n              } else {\n               res.redirect('/');\n              }\n            });\n          }\n        }\n\n\n### Modify app.js\n\n1. From the **tasklist** directory, open the **app.js** file. This file was created earlier by running the **express** command.\n\n2. At the beginning of the file, add the following to load the azure module, set the table name, partition key, and set the storage credentials used by this example:\n\n        var azure = require('azure-storage');\n        var nconf = require('nconf');\n        nconf.env()\n             .file({ file: 'config.json', search: true });\n        var tableName = nconf.get(\"TABLE_NAME\");\n        var partitionKey = nconf.get(\"PARTITION_KEY\");\n        var accountName = nconf.get(\"STORAGE_NAME\");\n        var accountKey = nconf.get(\"STORAGE_KEY\");\n\n    > [AZURE.NOTE] nconf will load the configuration values from either environment variables or the **config.json** file, which we will create later.\n\n3. In the app.js file, scroll down to where you see the following line:\n\n        app.use('/', routes);\n        app.use('/users', users);\n\n    Replace the above lines with the code shown below. This will initialize an instance of <strong>Task</strong> with a connection to your storage account. This is passed to the <strong>TaskList</strong>, which will use it to communicate with the Table service:\n\n        var TaskList = require('./routes/tasklist');\n        var Task = require('./models/task');\n        var task = new Task(azure.createTableService(accountName, accountKey), tableName, partitionKey);\n        var taskList = new TaskList(task);\n\n        app.get('/', taskList.showTasks.bind(taskList));\n        app.post('/addtask', taskList.addTask.bind(taskList));\n        app.post('/completetask', taskList.completeTask.bind(taskList));\n\n4. Save the **app.js** file.\n\n### Modify the index view\n\n1. Open the **tasklist/views/index.jade** file in a text editor.\n\n2. Replace the entire contents of the file with the following code. This defines a view that displays existing tasks and includes a form for adding new tasks and marking existing ones as completed.\n\n        extends layout\n\n        block content\n          h1= title\n          br\n\n          form(action=\"/completetask\", method=\"post\")\n            table.table.table-striped.table-bordered\n              tr\n                td Name\n                td Category\n                td Date\n                td Complete\n              if (typeof tasks === \"undefined\")\n                tr\n                  td\n              else\n                each task in tasks\n                  tr\n                    td #{task.name._}\n                    td #{task.category._}\n                    - var day   = task.Timestamp._.getDate();\n                    - var month = task.Timestamp._.getMonth() + 1;\n                    - var year  = task.Timestamp._.getFullYear();\n                    td #{month + \"/\" + day + \"/\" + year}\n                    td\n                      input(type=\"checkbox\", name=\"#{task.RowKey._}\", value=\"#{!task.completed._}\", checked=task.completed._)\n            button.btn(type=\"submit\") Update tasks\n          hr\n          form.well(action=\"/addtask\", method=\"post\")\n            label Item Name:\n            input(name=\"item[name]\", type=\"textbox\")\n            label Item Category:\n            input(name=\"item[category]\", type=\"textbox\")\n            br\n            button.btn(type=\"submit\") Add item\n\n3. Save and close **index.jade** file.\n\n### Modify the global layout\n\nThe **layout.jade** file in the **views** directory is a global template for other **.jade** files. In this step you will modify it to use [Twitter Bootstrap](https://github.com/twbs/bootstrap), which is a toolkit that makes it easy to design a nice looking web app.\n\nDownload and extract the files for [Twitter Bootstrap](http://getbootstrap.com/). Copy the **bootstrap.min.css** file from the Bootstrap **css** folder into the **public/stylesheets** directory of your application.\n\nFrom the **views** folder, open **layout.jade** and replace the entire contents with the following:\n\n    doctype html\n    html\n      head\n        title= title\n        link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')\n        link(rel='stylesheet', href='/stylesheets/style.css')\n      body.app\n        nav.navbar.navbar-default\n          div.navbar-header\n          a.navbar-brand(href='/') My Tasks\n        block content\n\n### Create a config file\n\nTo run the app locally, we'll put Azure Storage credentials into a config file. Create a file named **config.json* *with the following JSON:\n\n    {\n        \"STORAGE_NAME\": \"<storage account name>\",\n        \"STORAGE_KEY\": \"<storage access key>\",\n        \"PARTITION_KEY\": \"mytasks\",\n        \"TABLE_NAME\": \"tasks\"\n    }\n\nReplace **storage account name** with the name of the storage account you created earlier, and replace **storage access key** with the primary access key for your storage account. For example:\n\n    {\n        \"STORAGE_NAME\": \"nodejsappstorage\",\n        \"STORAGE_KEY\": \"KG0oDd...\"\n        \"PARTITION_KEY\": \"mytasks\",\n        \"TABLE_NAME\": \"tasks\"\n    }\n\nSave this file *one directory level higher* than the **tasklist** directory, like this:\n\n    parent/\n      |-- config.json\n      |-- tasklist/\n\nThe reason for doing this is to avoid checking the config file into source control, where it might become public. When we deploy the app to Azure, we will use environment variables instead of a config file.\n\n\n## Run the application locally\n\nTo test the application on your local machine, perform the following steps:\n\n1. From the command-line, change directories to the **tasklist** directory.\n\n2. Use the following command to launch the application locally:\n\n        npm start\n\n3. Open a web browser and navigate to http://127.0.0.1:3000.\n\n    A web page similar to the following example appears.\n\n    ![A webpage displaying an empty tasklist][node-table-finished]\n\n4. To create a new to-do item, enter a name and category and click **Add Item**. \n\n6. To mark a task as complete, check **Complete** and click **Update Tasks**.\n\n    ![An image of the new item in the list of tasks][node-table-list-items]\n\nEven though the application is running locally, it is storing the data in the Azure Table service.\n\n## Deploy your application to Azure\n\nThe steps in this section use the Azure command-line tools to create a new web app in App Service, and then use Git to deploy your application. To perform these steps you must have an Azure subscription.\n\n> [AZURE.NOTE] These steps can also be performed by using the [Azure Portal](https://portal.azure.com). See [Build and deploy a Node.js web app in Azure App Service].\n>\n> If this is the first web app you have created, you must use the Azure Portal to deploy this application.\n\nTo get started, install the [Azure CLI] by entering the following command from the command line:\n\n    npm install azure-cli -g\n\n### Import publishing settings\n\nIn this step, you will download a file containing information about your subscription.\n\n1. Enter the following command:\n\n        azure account download\n\n    This command launches a browser and navigates to the download page. If prompted, log in with the account associated with your Azure subscription.\n\n    <!-- ![The download page][download-publishing-settings] -->\n\n    The file download begins automatically; if it does not, you can click the link at the beginning of the page to manually download the file. Save the file and note the file path.\n\n2. Enter the following command to import the settings:\n\n        azure account import <path-to-file>\n\n    Specify the path and file name of the publishing settings file you downloaded in the previous step.\n\n3. After the settings are imported, delete the publish settings file. It is no longer needed, and contains sensitive information regarding your Azure subscription.\n\n### Create an App Service web app\n\n1. From the command-line, change directories to the **tasklist** directory.\n\n2. Use the following command to create a new web app.\n\n        azure site create --git\n\n    You will be prompted for the web app name and location. Provide a unique name and select the same geographical location as your Azure Storage account.\n\n    The `--git` parameter creates a Git repository on Azure for this web app. It also initializes a Git repository in the current directory if none exists, and adds a [Git remote] named 'azure', which is used to publish the application to Azure. Finally, it creates a **web.config** file, which contains settings used by Azure to host node applications. If you omit the `--git` parameter but the directory contains a Git repository, the command will still create the 'azure' remote.\n\n    Once this command has completed, you will see output similar to the following. Note that the line beginning with **Website created at** contains the URL for the web app.\n\n        info:   Executing command site create\n        help:   Need a site name\n        Name: TableTasklist\n        info:   Using location southcentraluswebspace\n        info:   Executing `git init`\n        info:   Creating default .gitignore file\n        info:   Creating a new web site\n        info:   Created web site at  tabletasklist.azurewebsites.net\n        info:   Initializing repository\n        info:   Repository initialized\n        info:   Executing `git remote add azure https://username@tabletasklist.azurewebsites.net/TableTasklist.git`\n        info:   site create command OK\n\n    > [AZURE.NOTE] If this is the first App Service web app for your subscription, you will be instructed to use the Azure Portal to create the web app. For more information, see [Build and deploy a Node.js web app in Azure App Service].\n\n### Set environment variables\n\nIn this step, you will add environment variables to your web app configuration on Azure.\nFrom the command line, enter the following:\n\n    azure site appsetting add\n        STORAGE_NAME=<storage account name>;STORAGE_KEY=<storage access key>;PARTITION_KEY=mytasks;TABLE_NAME=tasks\n\n\nReplace **<storage account name>** with the name of the storage account you created earlier, and replace **<storage access key>** with the primary access key for your storage account. (Use the same values as the config.json file that you created earlier.)\n\nAlternatively, you can set environment variables in the [Azure Portal](https://portal.azure.com):\n\n1.  Open the web app's blade by clicking **Browse** > **Web Apps** > your web app name.\n\n1.  In your web app's blade, click **All Settings** > **Application Settings**.\n\n    <!-- ![Top Menu](./media/storage-nodejs-use-table-storage-web-site/PollsCommonWebSiteTopMenu.png) -->\n\n1.  Scroll down to the **App settings** section and add the key/value pairs.\n\n    ![App Settings](./media/storage-nodejs-use-table-storage-web-site/storage-tasks-appsettings.png)\n\n1. Click **SAVE**.\n\n\n### Publish the application\n\nTo publish the app, commit the code files to Git and then push to azure/master.\n\n1. Set your deployment credentials.\n\n        azure site deployment user set <name> <password>\n\n2. Add and commit your application files.\n\n        git add .\n        git commit -m \"adding files\"\n\n3. Push the commit to the App Service web app:\n\n        git push azure master\n\n    Use **master** as the target branch. At the end of the deployment, you see a statement similar to the following example:\n\n        To https://username@tabletasklist.azurewebsites.net/TableTasklist.git\n         * [new branch]      master -> master\n\n4. Once the push operation has completed, browse to the web app URL returned previously by the `azure create site` command to view your application.\n\n\n## Next steps\n\nWhile the steps in this article describe using the Table Service to store information, you can also use MongoDB. See [Node.js web app with MongoDB] for more information.\n\n## Additional resources\n\n[Azure CLI]\n\n## What's changed\n* For a guide to the change from Websites to App Service see: [Azure App Service and Its Impact on Existing Azure Services](http://go.microsoft.com/fwlink/?LinkId=529714)\n* For a guide to the change of the Azure portal to the Azure preview portal see: [Reference for navigating the preview portal](http://go.microsoft.com/fwlink/?LinkId=529715)\n\n[Build and deploy a Node.js web app in Azure App Service]: web-sites-nodejs-develop-deploy-mac.md\n[Continuous deployment using GIT in Azure App Service]: web-sites-publish-source-control.md\n[Azure Developer Center]: /develop/nodejs/\n\n\n[node]: http://nodejs.org\n[Git]: http://git-scm.com\n[Express]: http://expressjs.com\n[for free]: http://windowsazure.com\n[Git remote]: http://git-scm.com/docs/git-remote\n\n[Node.js web app with MongoDB]: web-sites-nodejs-store-data-mongodb.md\n[Azure CLI]: ../xplat-cli.md\n\n[Continuous deployment using GIT in Azure App Service]: web-sites-publish-source-control.md\n[azure]: https://github.com/Azure/azure-sdk-for-node\n[node-uuid]: https://www.npmjs.com/package/node-uuid\n[nconf]: https://www.npmjs.com/package/nconf\n[async]: https://www.npmjs.com/package/async\n\n[Azure Portal]: https://portal.azure.com\n\n\n[node-table-finished]: ./media/storage-nodejs-use-table-storage-web-site/table_todo_empty.png\n[node-table-list-items]: ./media/storage-nodejs-use-table-storage-web-site/table_todo_list.png\n[download-publishing-settings]: ./media/storage-nodejs-use-table-storage-web-site/azure-account-download-cli.png\n[portal-new]: ./media/storage-nodejs-use-table-storage-web-site/plus-new.png\n[portal-storage-account]: ./media/storage-nodejs-use-table-storage-web-site/new-storage.png\n[portal-quick-create-storage]: ./media/storage-nodejs-use-table-storage-web-site/quick-storage.png\n[portal-storage-access-keys]: ./media/storage-nodejs-use-table-storage-web-site/manage-access-keys.png\n\n[go-to-dashboard]: ./media/storage-nodejs-use-table-storage-web-site/go_to_dashboard.png\n[web-configure]: ./media/storage-nodejs-use-table-storage-web-site/sql-task-configure.png\n[app-settings-save]: ./media/storage-nodejs-use-table-storage-web-site/savebutton.png\n[app-settings]: ./media/storage-nodejs-use-table-storage-web-site/storage-tasks-appsettings.png\n\n[Create and deploy a Node.js application to an Azure Web Site]: web-sites-nodejs-develop-deploy-mac.md\n \ntest\n"
}