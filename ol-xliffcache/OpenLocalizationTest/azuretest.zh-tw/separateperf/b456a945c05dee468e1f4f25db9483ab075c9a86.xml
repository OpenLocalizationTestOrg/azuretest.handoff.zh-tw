{
  "nodes": [
    {
      "content": "How to use Table storage from Python | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how you can use the Table service from Python to create and delete a table, and to insert and query a table.",
      "pos": [
        100,
        214
      ]
    },
    {
      "content": "How to use Table storage from Python",
      "pos": [
        523,
        559
      ]
    },
    {
      "content": "Overview",
      "pos": [
        664,
        672
      ]
    },
    {
      "content": "This guide shows you how to perform common scenarios by using the Azure Table storage service.",
      "pos": [
        674,
        768
      ]
    },
    {
      "content": "The samples are written in Python and use the <bpt id=\"p1\">[</bpt>Python Azure Storage package<ept id=\"p1\">][]</ept>.",
      "pos": [
        769,
        848
      ]
    },
    {
      "content": "The covered scenarios include creating and deleting a",
      "pos": [
        849,
        902
      ]
    },
    {
      "content": "table, in addition to inserting and querying entities in a table.",
      "pos": [
        903,
        968
      ]
    },
    {
      "pos": [
        1170,
        1311
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you need to install Python or the <bpt id=\"p1\">[</bpt>Python Azure package<ept id=\"p1\">][]</ept>, see the <bpt id=\"p2\">[</bpt>Python installation guide<ept id=\"p2\">](../python-how-to-install.md)</ept>."
    },
    {
      "content": "Create a table",
      "pos": [
        1317,
        1331
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> object lets you work with table services.",
      "pos": [
        1333,
        1395
      ]
    },
    {
      "content": "The",
      "pos": [
        1396,
        1399
      ]
    },
    {
      "content": "following code creates a <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> object.",
      "pos": [
        1400,
        1449
      ]
    },
    {
      "content": "Add the code near",
      "pos": [
        1450,
        1467
      ]
    },
    {
      "content": "the top of any Python file in which you wish to programmatically access Azure Storage:",
      "pos": [
        1468,
        1554
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> object by using the storage account name and account key.",
      "pos": [
        1614,
        1717
      ]
    },
    {
      "content": "Replace 'myaccount' and 'mykey' with the real account and key.",
      "pos": [
        1719,
        1781
      ]
    },
    {
      "content": "Add an entity to a table",
      "pos": [
        1912,
        1936
      ]
    },
    {
      "content": "To add an entity, first create a dictionary that defines your entity",
      "pos": [
        1938,
        2006
      ]
    },
    {
      "content": "property names and values.",
      "pos": [
        2007,
        2033
      ]
    },
    {
      "content": "Note that for every entity, you must",
      "pos": [
        2034,
        2070
      ]
    },
    {
      "content": "specify <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>.",
      "pos": [
        2071,
        2111
      ]
    },
    {
      "content": "These are the unique",
      "pos": [
        2112,
        2132
      ]
    },
    {
      "content": "identifiers of your entities.",
      "pos": [
        2133,
        2162
      ]
    },
    {
      "content": "You can query these values much",
      "pos": [
        2163,
        2194
      ]
    },
    {
      "content": "faster than you can query your other properties.",
      "pos": [
        2195,
        2243
      ]
    },
    {
      "content": "The system uses <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> to",
      "pos": [
        2244,
        2279
      ]
    },
    {
      "content": "automatically distribute the table entities over many storage nodes.",
      "pos": [
        2280,
        2348
      ]
    },
    {
      "content": "Entities that have the same <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> are stored on the same node.",
      "pos": [
        2349,
        2422
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> is the unique ID of the entity within the partition that it",
      "pos": [
        2423,
        2493
      ]
    },
    {
      "content": "belongs to.",
      "pos": [
        2494,
        2505
      ]
    },
    {
      "content": "To add an entity to your table, pass a dictionary object",
      "pos": [
        2507,
        2563
      ]
    },
    {
      "content": "to the <bpt id=\"p1\">**</bpt>insert\\_entity<ept id=\"p1\">**</ept> method.",
      "pos": [
        2564,
        2597
      ]
    },
    {
      "pos": [
        2766,
        2853
      ],
      "content": "You can also pass an instance of the <bpt id=\"p1\">**</bpt>Entity<ept id=\"p1\">**</ept> class to the <bpt id=\"p2\">**</bpt>insert\\_entity<ept id=\"p2\">**</ept> method."
    },
    {
      "content": "Update an entity",
      "pos": [
        3053,
        3069
      ]
    },
    {
      "content": "This code shows how to replace the old version of an existing entity",
      "pos": [
        3071,
        3139
      ]
    },
    {
      "content": "with an updated version.",
      "pos": [
        3140,
        3164
      ]
    },
    {
      "content": "If the entity that is being updated does not exist, then the update",
      "pos": [
        3309,
        3376
      ]
    },
    {
      "content": "operation will fail.",
      "pos": [
        3377,
        3397
      ]
    },
    {
      "content": "If you want to store an entity",
      "pos": [
        3398,
        3428
      ]
    },
    {
      "content": "regardless of whether it existed before, use <bpt id=\"p1\">**</bpt>insert\\_or\\_replace_entity<ept id=\"p1\">**</ept>.",
      "pos": [
        3429,
        3505
      ]
    },
    {
      "content": "In the following example, the first call will replace the existing entity.",
      "pos": [
        3506,
        3580
      ]
    },
    {
      "content": "The second call will insert a new entity, since no entity with the specified <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> exists in the table.",
      "pos": [
        3581,
        3710
      ]
    },
    {
      "content": "Change a group of entities",
      "pos": [
        4022,
        4048
      ]
    },
    {
      "content": "Sometimes it makes sense to submit multiple operations together in a",
      "pos": [
        4050,
        4118
      ]
    },
    {
      "content": "batch to ensure atomic processing by the server.",
      "pos": [
        4119,
        4167
      ]
    },
    {
      "content": "To accomplish that, you",
      "pos": [
        4168,
        4191
      ]
    },
    {
      "content": "use the <bpt id=\"p1\">**</bpt>begin\\_batch<ept id=\"p1\">**</ept> method on <bpt id=\"p2\">**</bpt>TableService<ept id=\"p2\">**</ept> and then call the",
      "pos": [
        4192,
        4261
      ]
    },
    {
      "content": "series of operations as usual.",
      "pos": [
        4262,
        4292
      ]
    },
    {
      "content": "When you do want to submit the",
      "pos": [
        4293,
        4323
      ]
    },
    {
      "content": "batch, you call <bpt id=\"p1\">**</bpt>commit\\_batch<ept id=\"p1\">**</ept>.",
      "pos": [
        4324,
        4358
      ]
    },
    {
      "content": "Note that all entities must be in the same partition in order to be changed as a batch.",
      "pos": [
        4359,
        4446
      ]
    },
    {
      "content": "The example below adds two entities together in a batch.",
      "pos": [
        4447,
        4503
      ]
    },
    {
      "content": "Query for an entity",
      "pos": [
        4917,
        4936
      ]
    },
    {
      "content": "To query an entity in a table, use the <bpt id=\"p1\">**</bpt>get\\_entity<ept id=\"p1\">**</ept> method by",
      "pos": [
        4938,
        5002
      ]
    },
    {
      "content": "passing <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>.",
      "pos": [
        5003,
        5043
      ]
    },
    {
      "content": "Query a set of entities",
      "pos": [
        5172,
        5195
      ]
    },
    {
      "pos": [
        5197,
        5263
      ],
      "content": "This example finds all tasks in Seattle based on <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Query a subset of entity properties",
      "pos": [
        5441,
        5476
      ]
    },
    {
      "content": "A query to a table can retrieve just a few properties from an entity.",
      "pos": [
        5478,
        5547
      ]
    },
    {
      "content": "This technique, called <bpt id=\"p1\">*</bpt>projection<ept id=\"p1\">*</ept>, reduces bandwidth and can improve",
      "pos": [
        5548,
        5618
      ]
    },
    {
      "content": "query performance, especially for large entities.",
      "pos": [
        5619,
        5668
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept>",
      "pos": [
        5669,
        5687
      ]
    },
    {
      "content": "parameter and pass the names of the properties that you want to bring over",
      "pos": [
        5688,
        5762
      ]
    },
    {
      "content": "to the client.",
      "pos": [
        5763,
        5777
      ]
    },
    {
      "content": "The query in the following code returns only the descriptions of",
      "pos": [
        5779,
        5843
      ]
    },
    {
      "content": "entities in the table.",
      "pos": [
        5844,
        5866
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The following snippet works only against the cloud",
      "pos": [
        5868,
        5931
      ]
    },
    {
      "content": "storage service.",
      "pos": [
        5932,
        5948
      ]
    },
    {
      "content": "This is not supported by the storage",
      "pos": [
        5949,
        5985
      ]
    },
    {
      "content": "emulator.",
      "pos": [
        5986,
        5995
      ]
    },
    {
      "content": "Delete an entity",
      "pos": [
        6159,
        6175
      ]
    },
    {
      "content": "You can delete an entity by using its partition and row key.",
      "pos": [
        6177,
        6237
      ]
    },
    {
      "content": "Delete a table",
      "pos": [
        6309,
        6323
      ]
    },
    {
      "content": "The following code deletes a table from a storage account.",
      "pos": [
        6325,
        6383
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        6433,
        6443
      ]
    },
    {
      "content": "Now that you have learned the basics of Table storage, follow these links",
      "pos": [
        6445,
        6518
      ]
    },
    {
      "content": "to learn about more complex storage tasks:",
      "pos": [
        6519,
        6561
      ]
    },
    {
      "pos": [
        6567,
        6608
      ],
      "content": "See the MSDN reference <bpt id=\"p1\">[</bpt>Azure Storage<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        6613,
        6651
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage Team blog<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Table storage from Python | Microsoft Azure\"\n    description=\"Learn how you can use the Table service from Python to create and delete a table, and to insert and query a table.\"\n    services=\"storage\"\n    documentationCenter=\"python\"\n    authors=\"emgerner-msft\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"python\"\n    ms.topic=\"article\"\n    ms.date=\"08/25/2015\"\n    ms.author=\"emgerner\"/>\n\n\n# How to use Table storage from Python\n\n[AZURE.INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\n\n## Overview\n\nThis guide shows you how to perform common scenarios by using the Azure Table storage service. The samples are written in Python and use the [Python Azure Storage package][]. The covered scenarios include creating and deleting a\ntable, in addition to inserting and querying entities in a table.\n\n[AZURE.INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n[AZURE.NOTE] If you need to install Python or the [Python Azure package][], see the [Python installation guide](../python-how-to-install.md).\n\n\n## Create a table\n\nThe **TableService** object lets you work with table services. The\nfollowing code creates a **TableService** object. Add the code near\nthe top of any Python file in which you wish to programmatically access Azure Storage:\n\n    from azure.storage.table import TableService, Entity\n\nThe following code creates a **TableService** object by using the storage account name and account key.  Replace 'myaccount' and 'mykey' with the real account and key.\n\n    table_service = TableService(account_name='myaccount', account_key='mykey')\n\n    table_service.create_table('tasktable')\n\n## Add an entity to a table\n\nTo add an entity, first create a dictionary that defines your entity\nproperty names and values. Note that for every entity, you must\nspecify **PartitionKey** and **RowKey**. These are the unique\nidentifiers of your entities. You can query these values much\nfaster than you can query your other properties. The system uses **PartitionKey** to\nautomatically distribute the table entities over many storage nodes.\nEntities that have the same **PartitionKey** are stored on the same node. **RowKey** is the unique ID of the entity within the partition that it\nbelongs to.\n\nTo add an entity to your table, pass a dictionary object\nto the **insert\\_entity** method.\n\n    task = {'PartitionKey': 'tasksSeattle', 'RowKey': '1', 'description' : 'Take out the trash', 'priority' : 200}\n    table_service.insert_entity('tasktable', task)\n\nYou can also pass an instance of the **Entity** class to the **insert\\_entity** method.\n\n    task = Entity()\n    task.PartitionKey = 'tasksSeattle'\n    task.RowKey = '2'\n    task.description = 'Wash the car'\n    task.priority = 100\n    table_service.insert_entity('tasktable', task)\n\n## Update an entity\n\nThis code shows how to replace the old version of an existing entity\nwith an updated version.\n\n    task = {'description' : 'Take out the garbage', 'priority' : 250}\n    table_service.update_entity('tasktable', 'tasksSeattle', '1', task)\n\nIf the entity that is being updated does not exist, then the update\noperation will fail. If you want to store an entity\nregardless of whether it existed before, use **insert\\_or\\_replace_entity**.\nIn the following example, the first call will replace the existing entity. The second call will insert a new entity, since no entity with the specified **PartitionKey** and **RowKey** exists in the table.\n\n    task = {'description' : 'Take out the garbage again', 'priority' : 250}\n    table_service.insert_or_replace_entity('tasktable', 'tasksSeattle', '1', task)\n\n    task = {'description' : 'Buy detergent', 'priority' : 300}\n    table_service.insert_or_replace_entity('tasktable', 'tasksSeattle', '3', task)\n\n## Change a group of entities\n\nSometimes it makes sense to submit multiple operations together in a\nbatch to ensure atomic processing by the server. To accomplish that, you\nuse the **begin\\_batch** method on **TableService** and then call the\nseries of operations as usual. When you do want to submit the\nbatch, you call **commit\\_batch**. Note that all entities must be in the same partition in order to be changed as a batch. The example below adds two entities together in a batch.\n\n    task10 = {'PartitionKey': 'tasksSeattle', 'RowKey': '10', 'description' : 'Go grocery shopping', 'priority' : 400}\n    task11 = {'PartitionKey': 'tasksSeattle', 'RowKey': '11', 'description' : 'Clean the bathroom', 'priority' : 100}\n    table_service.begin_batch()\n    table_service.insert_entity('tasktable', task10)\n    table_service.insert_entity('tasktable', task11)\n    table_service.commit_batch()\n\n## Query for an entity\n\nTo query an entity in a table, use the **get\\_entity** method by\npassing **PartitionKey** and **RowKey**.\n\n    task = table_service.get_entity('tasktable', 'tasksSeattle', '1')\n    print(task.description)\n    print(task.priority)\n\n## Query a set of entities\n\nThis example finds all tasks in Seattle based on **PartitionKey**.\n\n    tasks = table_service.query_entities('tasktable', \"PartitionKey eq 'tasksSeattle'\")\n    for task in tasks:\n        print(task.description)\n        print(task.priority)\n\n## Query a subset of entity properties\n\nA query to a table can retrieve just a few properties from an entity.\nThis technique, called *projection*, reduces bandwidth and can improve\nquery performance, especially for large entities. Use the **select**\nparameter and pass the names of the properties that you want to bring over\nto the client.\n\nThe query in the following code returns only the descriptions of\nentities in the table.\n\n[AZURE.NOTE] The following snippet works only against the cloud\nstorage service. This is not supported by the storage\nemulator.\n\n    tasks = table_service.query_entities('tasktable', \"PartitionKey eq 'tasksSeattle'\", 'description')\n    for task in tasks:\n        print(task.description)\n\n## Delete an entity\n\nYou can delete an entity by using its partition and row key.\n\n    table_service.delete_entity('tasktable', 'tasksSeattle', '1')\n\n## Delete a table\n\nThe following code deletes a table from a storage account.\n\n    table_service.delete_table('tasktable')\n\n## Next steps\n\nNow that you have learned the basics of Table storage, follow these links\nto learn about more complex storage tasks:\n\n-   See the MSDN reference [Azure Storage][].\n-   Visit the [Azure Storage Team blog][].\n\n[Azure Storage]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n[Azure Storage Team blog]: http://blogs.msdn.com/b/windowsazurestorage/\n[Python Azure package]: https://pypi.python.org/pypi/azure\n[Python Azure Storage package]: https://pypi.python.org/pypi/azure-storage\n"
}