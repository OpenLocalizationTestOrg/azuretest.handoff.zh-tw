<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Inserting Ads on the Client Side</source>
          <target state="new">Inserting Ads on the Client Side</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic shows how to insert ads on the client side.</source>
          <target state="new">This topic shows how to insert ads on the client side.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Inserting Ads on the Client Side</source>
          <target state="new">Inserting Ads on the Client Side</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic contains information on how to insert various types of ads on the client side.</source>
          <target state="new">This topic contains information on how to insert various types of ads on the client side.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about closed captioning and ad support in Live streaming videos, see <bpt id="p1">[</bpt>Supported Closed Captioning and Ad Insertion Standards<ept id="p1">](https://msdn.microsoft.com/library/azure/dn783466.aspx#caption_ad)</ept>.</source>
          <target state="new">For information about closed captioning and ad support in Live streaming videos, see <bpt id="p1">[</bpt>Supported Closed Captioning and Ad Insertion Standards<ept id="p1">](https://msdn.microsoft.com/library/azure/dn783466.aspx#caption_ad)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="insert_ads_into_media"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Inserting Ads into your Media</source>
          <target state="new"><ph id="ph1">&lt;a id="insert_ads_into_media"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Inserting Ads into your Media</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure Media Services provides support for ad insertion through the Windows Media Platform: Player Frameworks.</source>
          <target state="new">Azure Media Services provides support for ad insertion through the Windows Media Platform: Player Frameworks.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Player frameworks with ad support are available for Windows 8, Silverlight, Windows Phone 8, and iOS devices.</source>
          <target state="new">Player frameworks with ad support are available for Windows 8, Silverlight, Windows Phone 8, and iOS devices.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each player framework contains sample code that shows you how to implement a player application.There are three different kinds of ads you can insert into your media:list.</source>
          <target state="new">Each player framework contains sample code that shows you how to implement a player application.There are three different kinds of ads you can insert into your media:list.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Linear<ept id="p1">**</ept> – full frame ads that pause the main video.</source>
          <target state="new"><bpt id="p1">**</bpt>Linear<ept id="p1">**</ept> – full frame ads that pause the main video.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Nonlinear<ept id="p1">**</ept> – overlay ads that are displayed as the main video is playing, usually a logo or other static image placed within the player.</source>
          <target state="new"><bpt id="p1">**</bpt>Nonlinear<ept id="p1">**</ept> – overlay ads that are displayed as the main video is playing, usually a logo or other static image placed within the player.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Companion<ept id="p1">**</ept> – ads that are displayed outside of the player.</source>
          <target state="new"><bpt id="p1">**</bpt>Companion<ept id="p1">**</ept> – ads that are displayed outside of the player.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Ads can be placed at any point in the main video’s time line.</source>
          <target state="new">Ads can be placed at any point in the main video’s time line.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must tell the player when to play the ad and which ads to play.</source>
          <target state="new">You must tell the player when to play the ad and which ads to play.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is done using a set of standard XML-based files: Video Ad Service Template (VAST), Digital Video Multiple Ad Playlist (VMAP), Media Abstract Sequencing Template (MAST), and Digital Video Player Ad Interface Definition (VPAID).</source>
          <target state="new">This is done using a set of standard XML-based files: Video Ad Service Template (VAST), Digital Video Multiple Ad Playlist (VMAP), Media Abstract Sequencing Template (MAST), and Digital Video Player Ad Interface Definition (VPAID).</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>VAST files specify what ads to display.</source>
          <target state="new">VAST files specify what ads to display.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>VMAP files specify when to play various ads and contain VAST XML.</source>
          <target state="new">VMAP files specify when to play various ads and contain VAST XML.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>MAST files are another way to sequence ads which also can contain VAST XML.</source>
          <target state="new">MAST files are another way to sequence ads which also can contain VAST XML.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>VPAID files define an interface between the video player and the ad or ad server.</source>
          <target state="new">VPAID files define an interface between the video player and the ad or ad server.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each player framework works differently and each will be covered in its own topic.</source>
          <target state="new">Each player framework works differently and each will be covered in its own topic.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This topic will describe the basic mechanisms used to insert ads.Video player applications request ads from an ad server.</source>
          <target state="new">This topic will describe the basic mechanisms used to insert ads.Video player applications request ads from an ad server.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The ad server can respond in a number of ways:</source>
          <target state="new">The ad server can respond in a number of ways:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Return a VAST file</source>
          <target state="new">Return a VAST file</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Return a VMAP file (with embedded VAST)</source>
          <target state="new">Return a VMAP file (with embedded VAST)</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Return a MAST file (with embedded VAST)</source>
          <target state="new">Return a MAST file (with embedded VAST)</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Return a VAST file with VPAID ads</source>
          <target state="new">Return a VAST file with VPAID ads</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using a Video Ad Service Template (VAST) File</source>
          <target state="new">Using a Video Ad Service Template (VAST) File</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A VAST file specifies what ad or ads to display.</source>
          <target state="new">A VAST file specifies what ad or ads to display.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following XML is an example of a VAST file for a linear ad:</source>
          <target state="new">The following XML is an example of a VAST file for a linear ad:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The linear ad is described by the <bpt id="p1">**</bpt><ph id="ph1">&lt;Linear&gt;</ph><ept id="p1">**</ept> element.</source>
          <target state="new">The linear ad is described by the <bpt id="p1">**</bpt><ph id="ph1">&lt;Linear&gt;</ph><ept id="p1">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It specifies the duration of the ad, tracking events, click through, click tracking, and a number of <bpt id="p1">**</bpt><ph id="ph1">&lt;MediaFile&gt;</ph><ept id="p1">**</ept> elements.</source>
          <target state="new">It specifies the duration of the ad, tracking events, click through, click tracking, and a number of <bpt id="p1">**</bpt><ph id="ph1">&lt;MediaFile&gt;</ph><ept id="p1">**</ept> elements.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Tracking events are specified within the <bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> element and allow an ad server to track various events that occur while viewing the ad.</source>
          <target state="new">Tracking events are specified within the <bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> element and allow an ad server to track various events that occur while viewing the ad.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case the start, midpoint, complete, and expand events are tracked.</source>
          <target state="new">In this case the start, midpoint, complete, and expand events are tracked.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The start event occurs when the ad is displayed.</source>
          <target state="new">The start event occurs when the ad is displayed.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The midpoint event occurs when at least 50% of the ad’s timeline has been viewed.</source>
          <target state="new">The midpoint event occurs when at least 50% of the ad’s timeline has been viewed.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The complete event occurs when the ad has run to the end.</source>
          <target state="new">The complete event occurs when the ad has run to the end.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Expand event occurs when the user expands the video player to full screen.</source>
          <target state="new">The Expand event occurs when the user expands the video player to full screen.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Clickthroughs are specified with a <bpt id="p1">**</bpt><ph id="ph1">&lt;ClickThrough&gt;</ph><ept id="p1">**</ept> element within a <bpt id="p2">**</bpt><ph id="ph2">&lt;VideoClicks&gt;</ph><ept id="p2">**</ept> element and specifies a URI to a resource to display when the user clicks on the ad.</source>
          <target state="new">Clickthroughs are specified with a <bpt id="p1">**</bpt><ph id="ph1">&lt;ClickThrough&gt;</ph><ept id="p1">**</ept> element within a <bpt id="p2">**</bpt><ph id="ph2">&lt;VideoClicks&gt;</ph><ept id="p2">**</ept> element and specifies a URI to a resource to display when the user clicks on the ad.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ClickTracking is specified in a <bpt id="p1">**</bpt><ph id="ph1">&lt;ClickTracking&gt;</ph><ept id="p1">**</ept> element, also within the <bpt id="p2">**</bpt><ph id="ph2">&lt;VideoClicks&gt;</ph><ept id="p2">**</ept> element and specifies a tracking resource for the player to request when the user clicks on the ad.The <bpt id="p3">**</bpt><ph id="ph3">&lt;MediaFile&gt;</ph><ept id="p3">**</ept> elements specify information about a specific encoding of an ad.</source>
          <target state="new">ClickTracking is specified in a <bpt id="p1">**</bpt><ph id="ph1">&lt;ClickTracking&gt;</ph><ept id="p1">**</ept> element, also within the <bpt id="p2">**</bpt><ph id="ph2">&lt;VideoClicks&gt;</ph><ept id="p2">**</ept> element and specifies a tracking resource for the player to request when the user clicks on the ad.The <bpt id="p3">**</bpt><ph id="ph3">&lt;MediaFile&gt;</ph><ept id="p3">**</ept> elements specify information about a specific encoding of an ad.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When there is more than one <bpt id="p1">**</bpt><ph id="ph1">&lt;MediaFile&gt;</ph><ept id="p1">**</ept> element, the video player can choose the best encoding for the platform.</source>
          <target state="new">When there is more than one <bpt id="p1">**</bpt><ph id="ph1">&lt;MediaFile&gt;</ph><ept id="p1">**</ept> element, the video player can choose the best encoding for the platform.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Linear ads can be displayed in a specified order.</source>
          <target state="new">Linear ads can be displayed in a specified order.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To do this, add additional</source>
          <target state="new">To do this, add additional</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>elements to the VAST file and specify the order using the sequence attribute.</source>
          <target state="new">elements to the VAST file and specify the order using the sequence attribute.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example illustrates this:</source>
          <target state="new">The following example illustrates this:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Nonlinear ads are specified in a</source>
          <target state="new">Nonlinear ads are specified in a</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>element as well.</source>
          <target state="new">element as well.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example shows a</source>
          <target state="new">The following example shows a</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>element that describes a nonlinear ad.</source>
          <target state="new">element that describes a nonlinear ad.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinearAds&gt;</ph><ept id="p1">**</ept> element can contain one or more <bpt id="p2">**</bpt><ph id="ph2">&lt;NonLinear&gt;</ph><ept id="p2">**</ept> elements, each of which can describe a nonlinear ad.</source>
          <target state="new">The <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinearAds&gt;</ph><ept id="p1">**</ept> element can contain one or more <bpt id="p2">**</bpt><ph id="ph2">&lt;NonLinear&gt;</ph><ept id="p2">**</ept> elements, each of which can describe a nonlinear ad.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinear&gt;</ph><ept id="p1">**</ept> element specifies the resource for the nonlinear ad.</source>
          <target state="new">The <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinear&gt;</ph><ept id="p1">**</ept> element specifies the resource for the nonlinear ad.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The resource can be a <bpt id="p1">**</bpt><ph id="ph1">&lt;StaticResouce&gt;</ph><ept id="p1">**</ept>, an <bpt id="p2">**</bpt><ph id="ph2">&lt;IFrameResource&gt;</ph><ept id="p2">**</ept>, or an <bpt id="p3">**</bpt><ph id="ph3">&lt;HTMLResouce&gt;</ph><ept id="p3">**</ept>.<bpt id="p4">**</bpt><ph id="ph4">&lt;StaticResource&gt;</ph><ept id="p4">**</ept> describes a non-HTML resource and defines a creativeType attribute that specifies how the resource is displayed:</source>
          <target state="new">The resource can be a <bpt id="p1">**</bpt><ph id="ph1">&lt;StaticResouce&gt;</ph><ept id="p1">**</ept>, an <bpt id="p2">**</bpt><ph id="ph2">&lt;IFrameResource&gt;</ph><ept id="p2">**</ept>, or an <bpt id="p3">**</bpt><ph id="ph3">&lt;HTMLResouce&gt;</ph><ept id="p3">**</ept>.<bpt id="p4">**</bpt><ph id="ph4">&lt;StaticResource&gt;</ph><ept id="p4">**</ept> describes a non-HTML resource and defines a creativeType attribute that specifies how the resource is displayed:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Image/gif, image/jpeg, image/png – the resource is displayed in an HTML <bpt id="p1">**</bpt><ph id="ph1">&lt;img&gt;</ph><ept id="p1">**</ept> tag.</source>
          <target state="new">Image/gif, image/jpeg, image/png – the resource is displayed in an HTML <bpt id="p1">**</bpt><ph id="ph1">&lt;img&gt;</ph><ept id="p1">**</ept> tag.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Application/x-javascript – the resource is displayed in an HTML &lt;<bpt id="p1">**</bpt>script<ept id="p1">**</ept>&gt; tag.</source>
          <target state="new">Application/x-javascript – the resource is displayed in an HTML &lt;<bpt id="p1">**</bpt>script<ept id="p1">**</ept>&gt; tag.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Application/x-shockwave-flash – the resource is displayed in a Flash player.</source>
          <target state="new">Application/x-shockwave-flash – the resource is displayed in a Flash player.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&lt;IFrameResource&gt;</ph><ept id="p1">**</ept> describes an HTML resource that can be displayed in an IFrame.</source>
          <target state="new"><bpt id="p1">**</bpt><ph id="ph1">&lt;IFrameResource&gt;</ph><ept id="p1">**</ept> describes an HTML resource that can be displayed in an IFrame.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&lt;HTMLResource&gt;</ph><ept id="p1">**</ept> describes a piece of HTML code that can be inserted into a web page.</source>
          <target state="new"><bpt id="p1">**</bpt><ph id="ph1">&lt;HTMLResource&gt;</ph><ept id="p1">**</ept> describes a piece of HTML code that can be inserted into a web page.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> specify tracking events and the URI to request when the event occurs.</source>
          <target state="new"><bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> specify tracking events and the URI to request when the event occurs.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this sample the acceptInvitation and collapse events are tracked.</source>
          <target state="new">In this sample the acceptInvitation and collapse events are tracked.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information on the <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinearAds&gt;</ph><ept id="p1">**</ept> element and its children, see IAB.NET/VAST.</source>
          <target state="new">For more information on the <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinearAds&gt;</ph><ept id="p1">**</ept> element and its children, see IAB.NET/VAST.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> element is located within the**</source>
          <target state="new">Note that the <bpt id="p1">**</bpt><ph id="ph1">&lt;TrackingEvents&gt;</ph><ept id="p1">**</ept> element is located within the**</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>** element rather than the <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinear&gt;</ph><ept id="p1">**</ept> element.</source>
          <target state="new">** element rather than the <bpt id="p1">**</bpt><ph id="ph1">&lt;NonLinear&gt;</ph><ept id="p1">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Companion ads are defined within a</source>
          <target state="new">Companion ads are defined within a</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>element.</source>
          <target state="new">element.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>element can contain one or more</source>
          <target state="new">element can contain one or more</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>elements.</source>
          <target state="new">elements.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each</source>
          <target state="new">Each</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>element describes a companion ad and can contain a</source>
          <target state="new">element describes a companion ad and can contain a</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new">,</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="new">, or</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>which are specified in the same way as in a nonlinear ad.</source>
          <target state="new">which are specified in the same way as in a nonlinear ad.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A VAST file can contain multiple companion ads and the player application can choose the most appropriate ad to display.</source>
          <target state="new">A VAST file can contain multiple companion ads and the player application can choose the most appropriate ad to display.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about VAST, see <bpt id="p1">[</bpt>VAST 3.0<ept id="p1">](http://www.iab.net/media/file/VASTv3.0.pdf)</ept>.</source>
          <target state="new">For more information about VAST, see <bpt id="p1">[</bpt>VAST 3.0<ept id="p1">](http://www.iab.net/media/file/VASTv3.0.pdf)</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using a Digital Video Multiple Ad Playlist (VMAP) File</source>
          <target state="new">Using a Digital Video Multiple Ad Playlist (VMAP) File</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A VMAP file allows you to specify when ad breaks occur, how long each break is, how many ads can be displayed within a break, and what types of ads may be displayed during a break.</source>
          <target state="new">A VMAP file allows you to specify when ad breaks occur, how long each break is, how many ads can be displayed within a break, and what types of ads may be displayed during a break.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following in an example VMAP file that defines a single ad break:</source>
          <target state="new">The following in an example VMAP file that defines a single ad break:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A VMAP file begins with a</source>
          <target state="new">A VMAP file begins with a</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>element that contains one or more</source>
          <target state="new">element that contains one or more</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>elements, each defining an ad break.</source>
          <target state="new">elements, each defining an ad break.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Each ad break specifies a break type, break ID, and time offset.</source>
          <target state="new">Each ad break specifies a break type, break ID, and time offset.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The breakType attribute specifies the type of ad that can be played during the break: linear, nonlinear, or display.</source>
          <target state="new">The breakType attribute specifies the type of ad that can be played during the break: linear, nonlinear, or display.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Display ads map to VAST companion ads.</source>
          <target state="new">Display ads map to VAST companion ads.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>More than one ad type can be specified in a comma (no spaces) separated list.</source>
          <target state="new">More than one ad type can be specified in a comma (no spaces) separated list.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The breakID is an optional identifier for the ad.</source>
          <target state="new">The breakID is an optional identifier for the ad.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The timeOffset specifies when the ad should be displayed.</source>
          <target state="new">The timeOffset specifies when the ad should be displayed.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It can be specified in one of the following ways:</source>
          <target state="new">It can be specified in one of the following ways:</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Time – in hh:mm:ss or hh:mm:ss.mmm format where .mmm is milliseconds.</source>
          <target state="new">Time – in hh:mm:ss or hh:mm:ss.mmm format where .mmm is milliseconds.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value of this attribute specifies the time from the beginning of the video timeline to the beginning of the ad break.</source>
          <target state="new">The value of this attribute specifies the time from the beginning of the video timeline to the beginning of the ad break.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Percentage – in n% format where n is the percentage of the video timeline to play before playing the ad</source>
          <target state="new">Percentage – in n% format where n is the percentage of the video timeline to play before playing the ad</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Start/End – specifies that an ad should be displayed before or after the video has been displayed</source>
          <target state="new">Start/End – specifies that an ad should be displayed before or after the video has been displayed</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Position – specifies the order of ad breaks when the timing of the ad breaks is unknown, such as in live streaming.</source>
          <target state="new">Position – specifies the order of ad breaks when the timing of the ad breaks is unknown, such as in live streaming.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The order of each ad break is specified in the #n format where n is an integer 1 or greater.</source>
          <target state="new">The order of each ad break is specified in the #n format where n is an integer 1 or greater.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>1 signifies the ad should be played at the first opportunity, 2 signifies the ad should be played at the second opportunity and so on.</source>
          <target state="new">1 signifies the ad should be played at the first opportunity, 2 signifies the ad should be played at the second opportunity and so on.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Within the &lt;<bpt id="p1">**</bpt>AdBreak<ept id="p1">**</ept>&gt; element there can be one &lt;<bpt id="p2">**</bpt>AdSource<ept id="p2">**</ept>&gt; element.</source>
          <target state="new">Within the &lt;<bpt id="p1">**</bpt>AdBreak<ept id="p1">**</ept>&gt; element there can be one &lt;<bpt id="p2">**</bpt>AdSource<ept id="p2">**</ept>&gt; element.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The &lt;<bpt id="p1">**</bpt>AdSource<ept id="p1">**</ept>&gt; element contains the following attributes:</source>
          <target state="new">The &lt;<bpt id="p1">**</bpt>AdSource<ept id="p1">**</ept>&gt; element contains the following attributes:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Id – specifies an identifier for the ad source</source>
          <target state="new">Id – specifies an identifier for the ad source</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>allowMultipleAds – a Boolean value that specifies whether multiple ads can be displayed during the ad break</source>
          <target state="new">allowMultipleAds – a Boolean value that specifies whether multiple ads can be displayed during the ad break</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>followRedirects – an optional Boolean value that specifies if the video player should honor redirects within an ad response</source>
          <target state="new">followRedirects – an optional Boolean value that specifies if the video player should honor redirects within an ad response</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;<bpt id="p1">**</bpt>AdSource<ept id="p1">**</ept>&gt; element provides the player an inline ad response or a reference to an ad response.</source>
          <target state="new">The &lt;<bpt id="p1">**</bpt>AdSource<ept id="p1">**</ept>&gt; element provides the player an inline ad response or a reference to an ad response.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It can contain one of the following elements:</source>
          <target state="new">It can contain one of the following elements:</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>indicates a VAST ad response is embedded within the VMAP file</source>
          <target state="new">indicates a VAST ad response is embedded within the VMAP file</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>a URI that references an ad response from another system</source>
          <target state="new">a URI that references an ad response from another system</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-an arbitrary string that respresents a non-VAST response</source>
          <target state="new">-an arbitrary string that respresents a non-VAST response</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In this example an in-line ad response is specified with a</source>
          <target state="new">In this example an in-line ad response is specified with a</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>element that contains a VAST ad response.</source>
          <target state="new">element that contains a VAST ad response.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about the other elements, see <bpt id="p1">[</bpt>VMAP<ept id="p1">](http://www.iab.net/guidelines/508676/digitalvideo/vsuite/vmap)</ept>.</source>
          <target state="new">For more information about the other elements, see <bpt id="p1">[</bpt>VMAP<ept id="p1">](http://www.iab.net/guidelines/508676/digitalvideo/vsuite/vmap)</ept>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The &lt;<bpt id="p1">**</bpt>AdBreak<ept id="p1">**</ept>&gt; element can also contain one &lt;<bpt id="p2">**</bpt>TrackingEvents<ept id="p2">**</ept>&gt; element.</source>
          <target state="new">The &lt;<bpt id="p1">**</bpt>AdBreak<ept id="p1">**</ept>&gt; element can also contain one &lt;<bpt id="p2">**</bpt>TrackingEvents<ept id="p2">**</ept>&gt; element.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element allows you to track the start or end of an ad break or whether an error occurred during the ad break.</source>
          <target state="new">The &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element allows you to track the start or end of an ad break or whether an error occurred during the ad break.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element contains one or more &lt;<bpt id="p2">**</bpt>Tracking<ept id="p2">**</ept>&gt; elements, each of which specifies a tracking event and a tracking URI.</source>
          <target state="new">The &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element contains one or more &lt;<bpt id="p2">**</bpt>Tracking<ept id="p2">**</ept>&gt; elements, each of which specifies a tracking event and a tracking URI.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The possible tracking events are:</source>
          <target state="new">The possible tracking events are:</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>breakStart – tracks the beginning of an ad break</source>
          <target state="new">breakStart – tracks the beginning of an ad break</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>breakEnd – track the completion of an ad break</source>
          <target state="new">breakEnd – track the completion of an ad break</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>error – tracks an error that occurred during the ad break</source>
          <target state="new">error – tracks an error that occurred during the ad break</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The following example shows a VMAP file that specifies tracking events</source>
          <target state="new">The following example shows a VMAP file that specifies tracking events</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element and its children, see http://iab.org/VMAP.pdf</source>
          <target state="new">For more information on the &lt;<bpt id="p1">**</bpt>TrackingEvents<ept id="p1">**</ept>&gt; element and its children, see http://iab.org/VMAP.pdf</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Using a Media Abstract Sequencing Template (MAST) File</source>
          <target state="new">Using a Media Abstract Sequencing Template (MAST) File</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A MAST file allows you to specify triggers that define when an ad is displayed.</source>
          <target state="new">A MAST file allows you to specify triggers that define when an ad is displayed.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following is an example MAST file that contains triggers for a pre roll ad, a mid-roll ad, and a post-roll ad.</source>
          <target state="new">The following is an example MAST file that contains triggers for a pre roll ad, a mid-roll ad, and a post-roll ad.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A MAST file begins with a <bpt id="p1">**</bpt><ph id="ph1">&lt;MAST&gt;</ph><ept id="p1">**</ept> element that contains one <bpt id="p2">**</bpt><ph id="ph2">&lt;triggers&gt;</ph><ept id="p2">**</ept> element.</source>
          <target state="new">A MAST file begins with a <bpt id="p1">**</bpt><ph id="ph1">&lt;MAST&gt;</ph><ept id="p1">**</ept> element that contains one <bpt id="p2">**</bpt><ph id="ph2">&lt;triggers&gt;</ph><ept id="p2">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>element contains one or more <bpt id="p1">**</bpt><ph id="ph1">&lt;trigger&gt;</ph><ept id="p1">**</ept> elements that define when an ad should be played.</source>
          <target state="new">element contains one or more <bpt id="p1">**</bpt><ph id="ph1">&lt;trigger&gt;</ph><ept id="p1">**</ept> elements that define when an ad should be played.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">&lt;trigger&gt;</ph><ept id="p1">**</ept> element contains a <bpt id="p2">**</bpt><ph id="ph2">&lt;startConditions&gt;</ph><ept id="p2">**</ept> element which specify when an ad should begin to play.</source>
          <target state="new">The <bpt id="p1">**</bpt><ph id="ph1">&lt;trigger&gt;</ph><ept id="p1">**</ept> element contains a <bpt id="p2">**</bpt><ph id="ph2">&lt;startConditions&gt;</ph><ept id="p2">**</ept> element which specify when an ad should begin to play.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">&lt;startConditions&gt;</ph><ept id="p1">**</ept> element contains one or more</source>
          <target state="new">The <bpt id="p1">**</bpt><ph id="ph1">&lt;startConditions&gt;</ph><ept id="p1">**</ept> element contains one or more</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>elements.</source>
          <target state="new">elements.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When each</source>
          <target state="new">When each</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>evaluates to true a trigger is initiated or revoked depending upon whether the</source>
          <target state="new">evaluates to true a trigger is initiated or revoked depending upon whether the</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>is contained within a <bpt id="p1">**</bpt>&lt;startConditions<ept id="p1">**</ept>&gt; or <bpt id="p2">**</bpt><ph id="ph1">&lt;endConditions&gt;</ph><ept id="p2">**</ept> element respectively.</source>
          <target state="new">is contained within a <bpt id="p1">**</bpt>&lt;startConditions<ept id="p1">**</ept>&gt; or <bpt id="p2">**</bpt><ph id="ph1">&lt;endConditions&gt;</ph><ept id="p2">**</ept> element respectively.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When multiple</source>
          <target state="new">When multiple</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>elements are present, they are treated as an implicit OR, any condition evaluating to true will cause the trigger to initiate.</source>
          <target state="new">elements are present, they are treated as an implicit OR, any condition evaluating to true will cause the trigger to initiate.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>elements can be nested.</source>
          <target state="new">elements can be nested.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When child</source>
          <target state="new">When child</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>elements are preset, they are treated as an implicit AND, all conditions must evaluate to true for the trigger to initiate.</source>
          <target state="new">elements are preset, they are treated as an implicit AND, all conditions must evaluate to true for the trigger to initiate.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>element contains the following attributes that define the condition:</source>
          <target state="new">element contains the following attributes that define the condition:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>type<ept id="p1">**</ept> – specifies the type of condition, event or property</source>
          <target state="new"><bpt id="p1">**</bpt>type<ept id="p1">**</ept> – specifies the type of condition, event or property</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>name<ept id="p1">**</ept> – the name of the property or event to be used during evaluation</source>
          <target state="new"><bpt id="p1">**</bpt>name<ept id="p1">**</ept> – the name of the property or event to be used during evaluation</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>value<ept id="p1">**</ept> – the value that a property will be evaluated against</source>
          <target state="new"><bpt id="p1">**</bpt>value<ept id="p1">**</ept> – the value that a property will be evaluated against</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operator<ept id="p1">**</ept> – the operation to use during evaluation: EQ (equal), NEQ (not equal), GTR (greater), GEQ (greater or equal), LT (Less than), LEQ (less than or equal), MOD (modulo)</source>
          <target state="new"><bpt id="p1">**</bpt>operator<ept id="p1">**</ept> – the operation to use during evaluation: EQ (equal), NEQ (not equal), GTR (greater), GEQ (greater or equal), LT (Less than), LEQ (less than or equal), MOD (modulo)</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">&lt;endConditions&gt;</ph><ept id="p1">**</ept> also contain</source>
          <target state="new"><bpt id="p1">**</bpt><ph id="ph1">&lt;endConditions&gt;</ph><ept id="p1">**</ept> also contain</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>elements.</source>
          <target state="new">elements.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When a condition evaluates to true the trigger is reset.The</source>
          <target state="new">When a condition evaluates to true the trigger is reset.The</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>element also contains a</source>
          <target state="new">element also contains a</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>element that contains one or more</source>
          <target state="new">element that contains one or more</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>elements.</source>
          <target state="new">elements.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>elements define the URI to the ad response and the type of ad response.</source>
          <target state="new">elements define the URI to the ad response and the type of ad response.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>In this example a URI is given to a VAST response.</source>
          <target state="new">In this example a URI is given to a VAST response.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Using Video Player-Ad Interface Definition (VPAID)</source>
          <target state="new">Using Video Player-Ad Interface Definition (VPAID)</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>VPAID is an API for enabling executable ad units to communicate with a video player.</source>
          <target state="new">VPAID is an API for enabling executable ad units to communicate with a video player.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This allows highly interactive ad experiences.</source>
          <target state="new">This allows highly interactive ad experiences.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The user can interact with the ad and the ad can respond to actions taken by the viewer.</source>
          <target state="new">The user can interact with the ad and the ad can respond to actions taken by the viewer.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example an ad may display buttons that allow the user to view more information or a longer version of the ad.</source>
          <target state="new">For example an ad may display buttons that allow the user to view more information or a longer version of the ad.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The video player must support the VPAID API and the executable ad must implement the API.</source>
          <target state="new">The video player must support the VPAID API and the executable ad must implement the API.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When a player requests an ad from an ad server the server may respond with a VAST response that contains a VPAID ad.</source>
          <target state="new">When a player requests an ad from an ad server the server may respond with a VAST response that contains a VPAID ad.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An executable ad is created in code that must be executed in a runtime environment such as Adobe Flash™ or JavaScript that can be executed in a web browser.</source>
          <target state="new">An executable ad is created in code that must be executed in a runtime environment such as Adobe Flash™ or JavaScript that can be executed in a web browser.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When an ad server returns a VAST response containing a VPAID ad, the value of the apiFramework attribute in the</source>
          <target state="new">When an ad server returns a VAST response containing a VPAID ad, the value of the apiFramework attribute in the</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>element must be “VPAID”.</source>
          <target state="new">element must be “VPAID”.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This attribute specifies that the contained ad is a VPAID executable ad.</source>
          <target state="new">This attribute specifies that the contained ad is a VPAID executable ad.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The type attribute must be set to the MIME type of the executable, such as “application/x-shockwave-flash” or “application/x-javascript”.</source>
          <target state="new">The type attribute must be set to the MIME type of the executable, such as “application/x-shockwave-flash” or “application/x-javascript”.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following XML snippet shows the</source>
          <target state="new">The following XML snippet shows the</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>element from a VAST response containing a VPAID executable ad.</source>
          <target state="new">element from a VAST response containing a VPAID executable ad.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>An executable ad can be initialized using the</source>
          <target state="new">An executable ad can be initialized using the</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>element within the</source>
          <target state="new">element within the</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="new">or</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>elements in a VAST response.</source>
          <target state="new">elements in a VAST response.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For more information on the</source>
          <target state="new">For more information on the</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>element, see <bpt id="p1">[</bpt>VAST 3.0<ept id="p1">](http://www.iab.net/media/file/VASTv3.0.pdf)</ept>.</source>
          <target state="new">element, see <bpt id="p1">[</bpt>VAST 3.0<ept id="p1">](http://www.iab.net/media/file/VASTv3.0.pdf)</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For more information about the VPAID API, see <bpt id="p1">[</bpt>VPAID 2.0<ept id="p1">](http://www.iab.net/media/file/VPAID_2.0_Final_04-10-2012.pdf)</ept>.</source>
          <target state="new">For more information about the VPAID API, see <bpt id="p1">[</bpt>VPAID 2.0<ept id="p1">](http://www.iab.net/media/file/VPAID_2.0_Final_04-10-2012.pdf)</ept>.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Implementing a Windows or Windows Phone 8 Player with Ad Support</source>
          <target state="new">Implementing a Windows or Windows Phone 8 Player with Ad Support</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The Microsoft Media Platform: Player Framework for Windows 8 and Windows Phone 8 contains a collection of sample applications that show you how to implement a video player application using the framework.</source>
          <target state="new">The Microsoft Media Platform: Player Framework for Windows 8 and Windows Phone 8 contains a collection of sample applications that show you how to implement a video player application using the framework.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You can download the Player Framework and the samples from <bpt id="p1">[</bpt>Player Framework for Windows 8 and Windows Phone 8<ept id="p1">](https://playerframework.codeplex.com)</ept>.</source>
          <target state="new">You can download the Player Framework and the samples from <bpt id="p1">[</bpt>Player Framework for Windows 8 and Windows Phone 8<ept id="p1">](https://playerframework.codeplex.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>When you open the Microsoft.PlayerFramework.Xaml.Samples solution you will see a number of folders within the project.</source>
          <target state="new">When you open the Microsoft.PlayerFramework.Xaml.Samples solution you will see a number of folders within the project.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The Advertising folder contains the sample code relevant to creating a video player with ad support.</source>
          <target state="new">The Advertising folder contains the sample code relevant to creating a video player with ad support.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Inside the Advertising folder is a number of XAML/cs files each of which show how to insert ads in a different way.</source>
          <target state="new">Inside the Advertising folder is a number of XAML/cs files each of which show how to insert ads in a different way.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The following list describes each:</source>
          <target state="new">The following list describes each:</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>AdPodPage.xaml Shows how to display an ad pod.</source>
          <target state="new">AdPodPage.xaml Shows how to display an ad pod.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>AdSchedulingPage.xaml Shows how to schedule ads.</source>
          <target state="new">AdSchedulingPage.xaml Shows how to schedule ads.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>FreeWheelPage.xaml Shows how to use the FreeWheel plugin to schedule ads.</source>
          <target state="new">FreeWheelPage.xaml Shows how to use the FreeWheel plugin to schedule ads.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>MastPage.xaml Shows how to schedule ads with a MAST file.</source>
          <target state="new">MastPage.xaml Shows how to schedule ads with a MAST file.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>ProgrammaticAdPage.xaml Shows how to programmatically schedule ads into a video.</source>
          <target state="new">ProgrammaticAdPage.xaml Shows how to programmatically schedule ads into a video.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>ScheduleClipPage.xaml Shows how to schedule an ad without a VAST file.</source>
          <target state="new">ScheduleClipPage.xaml Shows how to schedule an ad without a VAST file.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>VastLinearCompanionPage.xaml Shows how to insert a linear and companion ad.</source>
          <target state="new">VastLinearCompanionPage.xaml Shows how to insert a linear and companion ad.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>VastNonLinearPage.xaml Shows how to insert a non-linear ad.</source>
          <target state="new">VastNonLinearPage.xaml Shows how to insert a non-linear ad.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>VmapPage.xaml Shows how to specify ads with a VMAP file.</source>
          <target state="new">VmapPage.xaml Shows how to specify ads with a VMAP file.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Each of these samples uses the MediaPlayer class defined by the player framework.</source>
          <target state="new">Each of these samples uses the MediaPlayer class defined by the player framework.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Most samples use plugins that add support for various ad response formats.</source>
          <target state="new">Most samples use plugins that add support for various ad response formats.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The ProgrammaticAdPage sample programmatically interacts with a MediaPlayer instance.</source>
          <target state="new">The ProgrammaticAdPage sample programmatically interacts with a MediaPlayer instance.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>AdPodPage Sample</source>
          <target state="new">AdPodPage Sample</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This sample uses the AdSchedulerPlugin to define when to display an ad.</source>
          <target state="new">This sample uses the AdSchedulerPlugin to define when to display an ad.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In this example a mid-roll advertisement is scheduled to be played after 5 seconds.</source>
          <target state="new">In this example a mid-roll advertisement is scheduled to be played after 5 seconds.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The ad pod (a group of ads to display in order) is specified in a VAST file returned from an ad server.</source>
          <target state="new">The ad pod (a group of ads to display in order) is specified in a VAST file returned from an ad server.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The URI to the VAST file is specified in the</source>
          <target state="new">The URI to the VAST file is specified in the</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>element.</source>
          <target state="new">element.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For more information about the AdSchedulerPlugin, see <bpt id="p1">[</bpt>Advertising in the Player Framework on Windows 8 and Windows Phone 8<ept id="p1">](http://playerframework.codeplex.com/wikipage?title=Advertising&amp;referringTitle=Windows%208%20Player%20Documentation)</ept></source>
          <target state="new">For more information about the AdSchedulerPlugin, see <bpt id="p1">[</bpt>Advertising in the Player Framework on Windows 8 and Windows Phone 8<ept id="p1">](http://playerframework.codeplex.com/wikipage?title=Advertising&amp;referringTitle=Windows%208%20Player%20Documentation)</ept></target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>AdSchedulingPage</source>
          <target state="new">AdSchedulingPage</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This sample also uses the AdSchedulerPlugin.</source>
          <target state="new">This sample also uses the AdSchedulerPlugin.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>It schedules three ads, a pre-roll ad, a mid-roll ad, and a post-roll ad.</source>
          <target state="new">It schedules three ads, a pre-roll ad, a mid-roll ad, and a post-roll ad.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The URI to the VAST for each ad is specified in a</source>
          <target state="new">The URI to the VAST for each ad is specified in a</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>element.</source>
          <target state="new">element.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>FreeWheelPage</source>
          <target state="new">FreeWheelPage</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This sample uses the FreeWheelPlugin which specifies a Source attribute that specifies a URI that points to a SmartXML file that specifies ad content as well as ad scheduling information.</source>
          <target state="new">This sample uses the FreeWheelPlugin which specifies a Source attribute that specifies a URI that points to a SmartXML file that specifies ad content as well as ad scheduling information.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>MastPage</source>
          <target state="new">MastPage</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This sample uses the MastSchedulerPlugin that allows you to use a MAST file.</source>
          <target state="new">This sample uses the MastSchedulerPlugin that allows you to use a MAST file.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The Source attribute specifies the location of the MAST file.</source>
          <target state="new">The Source attribute specifies the location of the MAST file.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>ProgrammaticAdPage</source>
          <target state="new">ProgrammaticAdPage</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>This sample programmatically interacts with the MediaPlayer.</source>
          <target state="new">This sample programmatically interacts with the MediaPlayer.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The ProgrammaticAdPage.xaml file instantiates the MediaPlayer:</source>
          <target state="new">The ProgrammaticAdPage.xaml file instantiates the MediaPlayer:</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The ProgrammaticAdPage.xaml.cs file creates an AdHandlerPlugin, adds a TimelineMarker to specify when an ad should be displayed, and then adds a handler for the MarkerReached event which loads a RemoteAdSource specifying a URI to a VAST file, and then plays the ad.</source>
          <target state="new">The ProgrammaticAdPage.xaml.cs file creates an AdHandlerPlugin, adds a TimelineMarker to specify when an ad should be displayed, and then adds a handler for the MarkerReached event which loads a RemoteAdSource specifying a URI to a VAST file, and then plays the ad.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>ScheduleClipPage</source>
          <target state="new">ScheduleClipPage</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This sample uses the AdSchedulerPlugin to schedule a mid-roll ad by specifying a .wmv file that contains the ad.</source>
          <target state="new">This sample uses the AdSchedulerPlugin to schedule a mid-roll ad by specifying a .wmv file that contains the ad.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>VastLinearCompanionPage</source>
          <target state="new">VastLinearCompanionPage</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This sample illustrates how to use the AdSchedulerPlugin to schedule a mid-roll linear ad with an companion ad.</source>
          <target state="new">This sample illustrates how to use the AdSchedulerPlugin to schedule a mid-roll linear ad with an companion ad.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>element specifies the location of the VAST file.</source>
          <target state="new">element specifies the location of the VAST file.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>VastLinearNonLinearPage</source>
          <target state="new">VastLinearNonLinearPage</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>This sample uses the AdSchedulerPlugin to schedule a linear and a non-linear ad.</source>
          <target state="new">This sample uses the AdSchedulerPlugin to schedule a linear and a non-linear ad.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The VAST file location is specified with the</source>
          <target state="new">The VAST file location is specified with the</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>element.</source>
          <target state="new">element.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>VMAPPage</source>
          <target state="new">VMAPPage</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This samples uses the VmapSchedulerPlugin to schedule ads using a VMAP file.</source>
          <target state="new">This samples uses the VmapSchedulerPlugin to schedule ads using a VMAP file.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The URI to the VMAP file is specified in the Source attribute of the</source>
          <target state="new">The URI to the VMAP file is specified in the Source attribute of the</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>element.</source>
          <target state="new">element.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Implementing an iOS Video Player with Ad Support</source>
          <target state="new">Implementing an iOS Video Player with Ad Support</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The Microsoft Media Platform: Player Framework for iOS contains a collection of sample applications that show you how to implement a video player application using the framework.</source>
          <target state="new">The Microsoft Media Platform: Player Framework for iOS contains a collection of sample applications that show you how to implement a video player application using the framework.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can download the Player Framework and the samples from <bpt id="p1">[</bpt>Azure Media Player Framework<ept id="p1">](https://github.com/Azure/azure-media-player-framework)</ept>.</source>
          <target state="new">You can download the Player Framework and the samples from <bpt id="p1">[</bpt>Azure Media Player Framework<ept id="p1">](https://github.com/Azure/azure-media-player-framework)</ept>.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The github page has a link to a Wiki that contains additional information on the player framework and an introduction to the player sample: <bpt id="p1">[</bpt>Azure Media Player Wiki<ept id="p1">](https://github.com/Azure/azure-media-player-framework/wiki/How-to-use-Azure-media-player-framework)</ept>.</source>
          <target state="new">The github page has a link to a Wiki that contains additional information on the player framework and an introduction to the player sample: <bpt id="p1">[</bpt>Azure Media Player Wiki<ept id="p1">](https://github.com/Azure/azure-media-player-framework/wiki/How-to-use-Azure-media-player-framework)</ept>.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Scheduling Ads with VMAP</source>
          <target state="new">Scheduling Ads with VMAP</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The following example shows how to schedule ads using a VMAP file.</source>
          <target state="new">The following example shows how to schedule ads using a VMAP file.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Scheduling Ads with VAST</source>
          <target state="new">Scheduling Ads with VAST</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The following sample shows how to schedule a late binding VAST ad.</source>
          <target state="new">The following sample shows how to schedule a late binding VAST ad.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The following sample shows how to schedule an early binding VAST ad.</source>
          <target state="new">The following sample shows how to schedule an early binding VAST ad.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>//Example:4 Schedule an early binding VAST ad</source>
          <target state="new">//Example:4 Schedule an early binding VAST ad</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>//Download the VAST file</source>
          <target state="new">//Download the VAST file</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>if (![framework.adResolver downloadManifest:&amp;manifest withURL:[NSURL URLWithString:@"http://portalvhdsq3m25bf47d15c.blob.core.windows.net/vast/PlayerTestVAST.xml"]])</source>
          <target state="new">if (![framework.adResolver downloadManifest:&amp;manifest withURL:[NSURL URLWithString:@"http://portalvhdsq3m25bf47d15c.blob.core.windows.net/vast/PlayerTestVAST.xml"]])</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>[self logFrameworkError];</source>
          <target state="new">[self logFrameworkError];</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="new">else</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>adLinearTime.startTime = 7;</source>
          <target state="new">adLinearTime.startTime = 7;</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>adLinearTime.duration = 0;</source>
          <target state="new">adLinearTime.duration = 0;</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The following sample shows how to insert an ad using Rough Cut Editing (RCE)</source>
          <target state="new">The following sample shows how to insert an ad using Rough Cut Editing (RCE)</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The following example shows how to schedule an ad pod.</source>
          <target state="new">The following example shows how to schedule an ad pod.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The following example shows how to schedule a non-sticky mid-roll ad.</source>
          <target state="new">The following example shows how to schedule a non-sticky mid-roll ad.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>A non-sticky ad is only played once regardless of any seeking the viewer performs.</source>
          <target state="new">A non-sticky ad is only played once regardless of any seeking the viewer performs.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The following example shows how to schedule a sticky mid-roll ad.</source>
          <target state="new">The following example shows how to schedule a sticky mid-roll ad.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A sticky ad will be displayed each time the specified point on the video timeline is reached.</source>
          <target state="new">A sticky ad will be displayed each time the specified point on the video timeline is reached.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following sample shows how to schedule a post-roll ad.</source>
          <target state="new">The following sample shows how to schedule a post-roll ad.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The following sample shows how to schedule a pre-roll ad.</source>
          <target state="new">The following sample shows how to schedule a pre-roll ad.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The following sample shows how to schedule a mid-roll overlay ad.</source>
          <target state="new">The following sample shows how to schedule a mid-roll overlay ad.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Develop video player applications</source>
          <target state="new">Develop video player applications</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92a924e6d54cbbb9ce7cd3334b9bed231a28382f</xliffext:olfilehash>
  </header>
</xliff>