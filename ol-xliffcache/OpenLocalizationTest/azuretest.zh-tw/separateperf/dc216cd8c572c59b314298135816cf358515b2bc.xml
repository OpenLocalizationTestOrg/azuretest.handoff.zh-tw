{
  "nodes": [
    {
      "content": "How to Deliver Streaming Content from Media Services",
      "pos": [
        28,
        80
      ]
    },
    {
      "content": "Learn how to create a locator that is used to build a streaming URL.",
      "pos": [
        100,
        168
      ]
    },
    {
      "content": "The code uses REST API.",
      "pos": [
        169,
        192
      ]
    },
    {
      "content": "How to: Deliver streaming content",
      "pos": [
        505,
        538
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        542,
        558
      ]
    },
    {
      "content": ".NET",
      "pos": [
        562,
        566
      ]
    },
    {
      "content": "REST",
      "pos": [
        616,
        620
      ]
    },
    {
      "content": "Portal",
      "pos": [
        675,
        681
      ]
    },
    {
      "content": "Overview",
      "pos": [
        728,
        736
      ]
    },
    {
      "content": "You can stream an adaptive bitrate MP4 set by creating an OnDemand streaming locator and building a streaming URL.",
      "pos": [
        739,
        853
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>encoding an asset<ept id=\"p1\">](media-services-rest-encode-asset.md)</ept> topic shows how to encode into an adaptive bitrate MP4 set.",
      "pos": [
        854,
        974
      ]
    },
    {
      "content": "If your content is encrypted, configure asset delivery policy (as described in <bpt id=\"p1\">[</bpt>this<ept id=\"p1\">](media-services-rest-configure-asset-delivery-policy.md)</ept> topic) before creating a locator.",
      "pos": [
        975,
        1150
      ]
    },
    {
      "content": "You can also use an OnDemand streaming locator to build URLs that point to MP4 files that can be progressively downloaded.",
      "pos": [
        1153,
        1275
      ]
    },
    {
      "content": "This topic shows how to create an OnDemand streaming locator in order to publish your asset and build a Smooth, MPEG DASH, and HLS streaming URLs.",
      "pos": [
        1279,
        1425
      ]
    },
    {
      "content": "It also shows hot to build progressive download URLs.",
      "pos": [
        1426,
        1479
      ]
    },
    {
      "pos": [
        1481,
        1574
      ],
      "content": "The <bpt id=\"p1\">[</bpt>following<ept id=\"p1\">](#types)</ept> section shows the enum types whose values are used in the REST calls."
    },
    {
      "content": "Create an OnDemand streaming locator",
      "pos": [
        1583,
        1619
      ]
    },
    {
      "content": "To create the OnDemand streaming locator and get URLs you need to do the following:",
      "pos": [
        1621,
        1704
      ]
    },
    {
      "content": "If the content is encrypted, define an access policy.",
      "pos": [
        1713,
        1766
      ]
    },
    {
      "content": "Create an OnDemand streaming locator.",
      "pos": [
        1773,
        1810
      ]
    },
    {
      "content": "If you plan to stream, get the streaming manifest file (.ism) in the asset.",
      "pos": [
        1817,
        1892
      ]
    },
    {
      "content": "Build URLs to the manifest file or MP4 files.",
      "pos": [
        1994,
        2039
      ]
    },
    {
      "content": "Create an access policy",
      "pos": [
        2046,
        2069
      ]
    },
    {
      "content": "Request:",
      "pos": [
        2071,
        2079
      ]
    },
    {
      "content": "Response:",
      "pos": [
        3074,
        3083
      ]
    },
    {
      "content": "Create an OnDemand streaming locator",
      "pos": [
        4080,
        4116
      ]
    },
    {
      "content": "Create the locator for the specified asset and asset policy.",
      "pos": [
        4118,
        4178
      ]
    },
    {
      "content": "Request:",
      "pos": [
        4180,
        4188
      ]
    },
    {
      "content": "Response:",
      "pos": [
        5283,
        5292
      ]
    },
    {
      "content": "Build streaming URLs",
      "pos": [
        6604,
        6624
      ]
    },
    {
      "pos": [
        6626,
        6737
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> value returned after the creation of the locator to build the Smooth, HLS, and MPEG DASH URLs."
    },
    {
      "pos": [
        6740,
        6801
      ],
      "content": "Smooth Streaming: <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> + manifest file name + \"/manifest\""
    },
    {
      "content": "example:",
      "pos": [
        6803,
        6811
      ]
    },
    {
      "pos": [
        6933,
        6999
      ],
      "content": "HLS: <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> + manifest file name + \"/manifest(format=m3u8-aapl)\""
    },
    {
      "content": "example:",
      "pos": [
        7001,
        7009
      ]
    },
    {
      "pos": [
        7150,
        7220
      ],
      "content": "DASH: <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> + manifest file name + \"/manifest(format=mpd-time-csf)\""
    },
    {
      "content": "example:",
      "pos": [
        7223,
        7231
      ]
    },
    {
      "content": "Build progressive download URLs",
      "pos": [
        7378,
        7409
      ]
    },
    {
      "pos": [
        7411,
        7515
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> value returned after the creation of the locator to build the progressive download URL."
    },
    {
      "pos": [
        7520,
        7555
      ],
      "content": "URL: <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept> + asset file mp4 name"
    },
    {
      "content": "example:",
      "pos": [
        7557,
        7565
      ]
    },
    {
      "pos": [
        7712,
        7740
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enum types"
    },
    {
      "content": "test",
      "pos": [
        7998,
        8002
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to Deliver Streaming Content from Media Services\" \n    description=\"Learn how to create a locator that is used to build a streaming URL. The code uses REST API.\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"media-services\" \n    documentationCenter=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\" \n    ms.author=\"juliako\"/>\n\n\n#How to: Deliver streaming content\n\n> [AZURE.SELECTOR]\n- [.NET](media-services-deliver-streaming-content.md)\n- [REST](media-services-rest-deliver-streaming-content.md)\n- [Portal](media-services-manage-content.md#publish)\n\n##Overview\n\n\nYou can stream an adaptive bitrate MP4 set by creating an OnDemand streaming locator and building a streaming URL. The [encoding an asset](media-services-rest-encode-asset.md) topic shows how to encode into an adaptive bitrate MP4 set. If your content is encrypted, configure asset delivery policy (as described in [this](media-services-rest-configure-asset-delivery-policy.md) topic) before creating a locator. \n\nYou can also use an OnDemand streaming locator to build URLs that point to MP4 files that can be progressively downloaded.  \n\nThis topic shows how to create an OnDemand streaming locator in order to publish your asset and build a Smooth, MPEG DASH, and HLS streaming URLs. It also shows hot to build progressive download URLs.\n\nThe [following](#types) section shows the enum types whose values are used in the REST calls.   \n  \n##Create an OnDemand streaming locator\n\nTo create the OnDemand streaming locator and get URLs you need to do the following:\n\n\n   1. If the content is encrypted, define an access policy.\n   2. Create an OnDemand streaming locator.\n   3. If you plan to stream, get the streaming manifest file (.ism) in the asset. \n        \n    If you plan to progressively download, get the names of MP4 files in the asset. \n   4. Build URLs to the manifest file or MP4 files. \n\n\n###Create an access policy\n\nRequest:\n        \n    POST https://media.windows.net/api/AccessPolicies HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amstest1&urn%3aSubscriptionId=zbbef702-e769-2233-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1424263184&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=NWE%2f986Hr5lZTzVGKtC%2ftzHm9n6U%2fxpTFULItxKUGC4%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: 6bcfd511-a561-448d-a022-a319a89ecffa\n    Host: media.windows.net\n    Content-Length: 68\n    \n    {\"Name\":\"access policy\",\"DurationInMinutes\":43200.0,\"Permissions\":1}\n    \nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 311\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https:/media.windows.net/api/AccessPolicies('nb%3Apid%3AUUID%3A69c80d98-7830-407f-a9af-e25f4b0d3e5f')\n    Server: Microsoft-IIS/8.5\n    request-id: a877528a-bdb4-4414-9862-273f8e64f882\n    x-ms-request-id: a877528a-bdb4-4414-9862-273f8e64f882\n    x-ms-client-request-id: 6bcfd511-a561-448d-a022-a319a89ecffa\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Wed, 18 Feb 2015 06:52:09 GMT\n    \n    {\"odata.metadata\":\"https://media.windows.net/api/$metadata#AccessPolicies/@Element\",\"Id\":\"nb:pid:UUID:69c80d98-7830-407f-a9af-e25f4b0d3e5f\",\"Created\":\"2015-02-18T06:52:09.8862191Z\",\"LastModified\":\"2015-02-18T06:52:09.8862191Z\",\"Name\":\"access policy\",\"DurationInMinutes\":43200.0,\"Permissions\":1}\n\n###Create an OnDemand streaming locator\n\nCreate the locator for the specified asset and asset policy.\n\nRequest:\n    \n    POST https://media.windows.net/api/Locators HTTP/1.1\n    Content-Type: application/json\n    DataServiceVersion: 1.0;NetFx\n    MaxDataServiceVersion: 3.0;NetFx\n    Accept: application/json\n    Accept-Charset: UTF-8\n    Authorization: Bearer http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=amstest1&urn%3aSubscriptionId=zbbef702-e769-2233-9f16-bc4d3aa97387&http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&Audience=urn%3aWindowsAzureMediaServices&ExpiresOn=1424263184&Issuer=https%3a%2f%2fwamsprodglobal001acs.accesscontrol.windows.net%2f&HMACSHA256=NWE%2f986Hr5lZTzVGKtC%2ftzHm9n6U%2fxpTFULItxKUGC4%3d\n    x-ms-version: 2.11\n    x-ms-client-request-id: ac159492-9a0c-40c3-aacc-551b1b4c5f62\n    Host: media.windows.net\n    Content-Length: 181\n    \n    {\"AccessPolicyId\":\"nb:pid:UUID:1480030d-c481-430a-9687-535c6a5cb272\",\"AssetId\":\"nb:cid:UUID:cc1e445d-1500-80bd-538e-f1e4b71b465e\",\"StartTime\":\"2015-02-18T06:34:47.267872Z\",\"Type\":2}\n\nResponse:\n    \n    HTTP/1.1 201 Created\n    Cache-Control: no-cache\n    Content-Length: 637\n    Content-Type: application/json;odata=minimalmetadata;streaming=true;charset=utf-8\n    Location: https://media.windows.net/api/Locators('nb%3Alid%3AUUID%3Abe245661-2bbd-4fc6-b14f-9cf9a1492e5e')\n    Server: Microsoft-IIS/8.5\n    request-id: 5bd5864a-0afd-44c0-a67a-4044a2c9043b\n    x-ms-request-id: 5bd5864a-0afd-44c0-a67a-4044a2c9043b\n    x-ms-client-request-id: ac159492-9a0c-40c3-aacc-551b1b4c5f62\n    X-Content-Type-Options: nosniff\n    DataServiceVersion: 3.0;\n    X-Powered-By: ASP.NET\n    Strict-Transport-Security: max-age=31536000; includeSubDomains\n    Date: Wed, 18 Feb 2015 06:58:37 GMT\n    \n    {\"odata.metadata\":\"https://media.windows.net/api/$metadata#Locators/@Element\",\"Id\":\"nb:lid:UUID:be245661-2bbd-4fc6-b14f-9cf9a1492e5e\",\"ExpirationDateTime\":\"2015-03-20T06:34:47.267872+00:00\",\"Type\":2,\"Path\":\"http://amstest1.streaming.mediaservices.windows.net/be245661-2bbd-4fc6-b14f-9cf9a1492e5e/\",\"BaseUri\":\"http://amstest1.streaming.mediaservices.windows.net\",\"ContentAccessComponent\":\"be245661-2bbd-4fc6-b14f-9cf9a1492e5e\",\"AccessPolicyId\":\"nb:pid:UUID:1480030d-c481-430a-9687-535c6a5cb272\",\"AssetId\":\"nb:cid:UUID:cc1e445d-1500-80bd-538e-f1e4b71b465e\",\"StartTime\":\"2015-02-18T06:34:47.267872+00:00\",\"Name\":null}\n\n###Build streaming URLs\n\nUse the **Path** value returned after the creation of the locator to build the Smooth, HLS, and MPEG DASH URLs. \n\nSmooth Streaming: **Path** + manifest file name + \"/manifest\"\n\nexample:\n\n    http://amstest1.streaming.mediaservices.windows.net/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest\n\nHLS: **Path** + manifest file name + \"/manifest(format=m3u8-aapl)\"\n\nexample:\n\n    http://amstest1.streaming.mediaservices.windows.net/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest(format=m3u8-aapl)\n\n\nDASH: **Path** + manifest file name + \"/manifest(format=mpd-time-csf)\"\n\n\nexample:\n\n    http://amstest1.streaming.mediaservices.windows.net/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest(format=mpd-time-csf)\n\n\n###Build progressive download URLs\n\nUse the **Path** value returned after the creation of the locator to build the progressive download URL.   \n\nURL: **Path** + asset file mp4 name\n\nexample:\n\n    http://amstest1.streaming.mediaservices.windows.net/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_650kbps_AAC_und_ch2_96kbps.mp4\n\n##<a id=\"types\"></a>Enum types\n\n    [Flags]\n    public enum AccessPermissions\n    {\n        None = 0,\n        Read = 1,\n        Write = 2,\n        Delete = 4,\n        List = 8,\n    }\n\n    public enum LocatorType\n    {\n        None = 0,\n        Sas = 1,\n        OnDemandOrigin = 2,\n    } \ntest\n"
}