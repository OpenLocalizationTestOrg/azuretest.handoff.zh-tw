{
  "nodes": [
    {
      "content": "Stateful Reliable Service Diagnostics",
      "pos": [
        26,
        63
      ]
    },
    {
      "content": "Diagnostic Functionality for Stateful Reliable Services",
      "pos": [
        81,
        136
      ]
    },
    {
      "content": "Diagnostic Functionality for Stateful Reliable Services",
      "pos": [
        433,
        488
      ]
    },
    {
      "content": "The Stateful Reliable Services StatefulServiceBase class emits <bpt id=\"p1\">[</bpt>EventSource<ept id=\"p1\">](https://msdn.microsoft.com/library/system.diagnostics.tracing.eventsource.aspx)</ept> events",
      "pos": [
        489,
        652
      ]
    },
    {
      "content": "that can be used for debugging the service, provide insights into how the runtime is operating and help with troubleshooting.",
      "pos": [
        654,
        779
      ]
    },
    {
      "content": "EventSource events",
      "pos": [
        785,
        803
      ]
    },
    {
      "content": "The EventSource name for Stateful Reliable Service StatefulServiceBase class is \"Microsoft-ServiceFabric-Services\".",
      "pos": [
        804,
        919
      ]
    },
    {
      "content": "Events from this event source appear in the",
      "pos": [
        920,
        963
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Diagnostics Events<ept id=\"p1\">](service-fabric-diagnostics-how-to-monitor-and-diagnose-services-locally.md#view-service-fabric-system-events-in-visual-studio)</ept> window when the service",
      "pos": [
        965,
        1136
      ]
    },
    {
      "content": "is being <bpt id=\"p1\">[</bpt>debugged in Visual Studio<ept id=\"p1\">](service-fabric-debugging-your-application.md)</ept>.",
      "pos": [
        1138,
        1221
      ]
    },
    {
      "content": "Service Fabric also offers the option of directing these events to <bpt id=\"p1\">[</bpt>Application Insights<ept id=\"p1\">](http://azure.microsoft.com/services/application-insights/)</ept>.",
      "pos": [
        1223,
        1372
      ]
    },
    {
      "content": "For more information on this, please see",
      "pos": [
        1373,
        1413
      ]
    },
    {
      "content": "the article on <bpt id=\"p1\">[</bpt>Application Insights setup for Service Fabric<ept id=\"p1\">](service-fabric-diagnostics-application-insights-setup.md)</ept>.",
      "pos": [
        1415,
        1536
      ]
    },
    {
      "content": "Other examples of tools and technologies that help in collecting and/or viewing EventSource events are <bpt id=\"p1\">[</bpt>PerfView<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=28567)</ept>,",
      "pos": [
        1538,
        1709
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Microsoft Azure Diagnostics<ept id=\"p1\">](../cloud-services-dotnet-diagnostics.md)</ept> and the",
      "pos": [
        1711,
        1789
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Microsoft TraceEvent Library<ept id=\"p1\">](http://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent)</ept>.",
      "pos": [
        1791,
        1894
      ]
    },
    {
      "content": "Events",
      "pos": [
        1899,
        1905
      ]
    },
    {
      "content": "Event Name",
      "pos": [
        1908,
        1918
      ]
    },
    {
      "content": "Event Id",
      "pos": [
        1919,
        1927
      ]
    },
    {
      "content": "Level",
      "pos": [
        1928,
        1933
      ]
    },
    {
      "content": "Event Description",
      "pos": [
        1934,
        1951
      ]
    },
    {
      "content": "StatefulRunAsyncInvocation",
      "pos": [
        2000,
        2026
      ]
    },
    {
      "content": "1",
      "pos": [
        2027,
        2028
      ]
    },
    {
      "content": "Informational",
      "pos": [
        2029,
        2042
      ]
    },
    {
      "content": "Emitted when service RunAsync task is started",
      "pos": [
        2043,
        2088
      ]
    },
    {
      "content": "StatefulRunAsyncCancellation",
      "pos": [
        2091,
        2119
      ]
    },
    {
      "content": "2",
      "pos": [
        2120,
        2121
      ]
    },
    {
      "content": "Informational",
      "pos": [
        2122,
        2135
      ]
    },
    {
      "content": "Emitted when service RunAsync task is cancelled",
      "pos": [
        2136,
        2183
      ]
    },
    {
      "content": "StatefulRunAsyncCompletion",
      "pos": [
        2186,
        2212
      ]
    },
    {
      "content": "3",
      "pos": [
        2213,
        2214
      ]
    },
    {
      "content": "Informational",
      "pos": [
        2215,
        2228
      ]
    },
    {
      "content": "Emitted when service RunAsync task is completed",
      "pos": [
        2229,
        2276
      ]
    },
    {
      "content": "StatefulRunAsyncSlowCancellation",
      "pos": [
        2279,
        2311
      ]
    },
    {
      "content": "4",
      "pos": [
        2312,
        2313
      ]
    },
    {
      "content": "Warning",
      "pos": [
        2314,
        2321
      ]
    },
    {
      "content": "Emitted when service RunAsync task takes too long to complete cancellation",
      "pos": [
        2322,
        2396
      ]
    },
    {
      "content": "StatefulRunAsyncFailure",
      "pos": [
        2399,
        2422
      ]
    },
    {
      "content": "5",
      "pos": [
        2423,
        2424
      ]
    },
    {
      "content": "Error",
      "pos": [
        2425,
        2430
      ]
    },
    {
      "content": "Emitted when service RunAsync task throws an exception",
      "pos": [
        2431,
        2485
      ]
    },
    {
      "content": "Interpreting Events",
      "pos": [
        2491,
        2510
      ]
    },
    {
      "content": "StatefulRunAsyncInvocation, StatefulRunAsyncCompletion and StatefulRunAsyncCancellation events are useful to the service writer to understand the lifecycle of a service as well as the timing for when a",
      "pos": [
        2512,
        2713
      ]
    },
    {
      "content": "service is started, cancelled and completed.",
      "pos": [
        2715,
        2759
      ]
    },
    {
      "content": "This can be useful when debugging service issues or understanding the service lifecycle.",
      "pos": [
        2760,
        2848
      ]
    },
    {
      "content": "Service writers should pay close attention",
      "pos": [
        2851,
        2893
      ]
    },
    {
      "content": "to StatefulRunAsyncSlowCancellation and StatefulRunAsyncFailure events as they indicate issues with the service.",
      "pos": [
        2895,
        3007
      ]
    },
    {
      "content": "StatefulRunAsyncFailure is emitted whenever",
      "pos": [
        3010,
        3053
      ]
    },
    {
      "content": "the service RunAsync() task throws an exception.",
      "pos": [
        3054,
        3102
      ]
    },
    {
      "content": "Typically an exception thrown indicates an error or bug in the service.",
      "pos": [
        3103,
        3174
      ]
    },
    {
      "content": "Additionally the exception causes the service to fail and thus moved to a",
      "pos": [
        3175,
        3248
      ]
    },
    {
      "content": "different node which can be an expensive operation and delay incoming requests while the service is moved.",
      "pos": [
        3250,
        3356
      ]
    },
    {
      "content": "Service writers should determine the cause of the exception and if possible mitigate it.",
      "pos": [
        3357,
        3445
      ]
    },
    {
      "content": "StatefulRunAsyncSlowCancellation is emitted whenever a cancellation request for the RunAsync task takes longer than 4 seconds.",
      "pos": [
        3448,
        3574
      ]
    },
    {
      "content": "When a service takes too long to complete cancellation, it impacts",
      "pos": [
        3575,
        3641
      ]
    },
    {
      "content": "the ability for the service to be quickly restarted on another node and may impact overall availability of the service.",
      "pos": [
        3642,
        3761
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Stateful Reliable Service Diagnostics\"\n   description=\"Diagnostic Functionality for Stateful Reliable Services\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"AlanWarwick\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"Service-Fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"NA\"\n   ms.date=\"04/20/2015\"\n   ms.author=\"alanwar\"/>\n\n# Diagnostic Functionality for Stateful Reliable Services\nThe Stateful Reliable Services StatefulServiceBase class emits [EventSource](https://msdn.microsoft.com/library/system.diagnostics.tracing.eventsource.aspx) events \nthat can be used for debugging the service, provide insights into how the runtime is operating and help with troubleshooting. \n\n## EventSource events\nThe EventSource name for Stateful Reliable Service StatefulServiceBase class is \"Microsoft-ServiceFabric-Services\". Events from this event source appear in the \n[Diagnostics Events](service-fabric-diagnostics-how-to-monitor-and-diagnose-services-locally.md#view-service-fabric-system-events-in-visual-studio) window when the service \nis being [debugged in Visual Studio](service-fabric-debugging-your-application.md).\n\nService Fabric also offers the option of directing these events to [Application Insights](http://azure.microsoft.com/services/application-insights/). For more information on this, please see \nthe article on [Application Insights setup for Service Fabric](service-fabric-diagnostics-application-insights-setup.md).\n\nOther examples of tools and technologies that help in collecting and/or viewing EventSource events are [PerfView](http://www.microsoft.com/download/details.aspx?id=28567), \n[Microsoft Azure Diagnostics](../cloud-services-dotnet-diagnostics.md) and the \n[Microsoft TraceEvent Library](http://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent).\n\n## Events\n\n|Event Name|Event Id|Level|Event Description|\n|----------|--------|-----|-----------------|\n|StatefulRunAsyncInvocation|1|Informational|Emitted when service RunAsync task is started|\n|StatefulRunAsyncCancellation|2|Informational|Emitted when service RunAsync task is cancelled|\n|StatefulRunAsyncCompletion|3|Informational|Emitted when service RunAsync task is completed|\n|StatefulRunAsyncSlowCancellation|4|Warning|Emitted when service RunAsync task takes too long to complete cancellation|\n|StatefulRunAsyncFailure|5|Error|Emitted when service RunAsync task throws an exception|\n\n## Interpreting Events\n\nStatefulRunAsyncInvocation, StatefulRunAsyncCompletion and StatefulRunAsyncCancellation events are useful to the service writer to understand the lifecycle of a service as well as the timing for when a \nservice is started, cancelled and completed. This can be useful when debugging service issues or understanding the service lifecycle. \n\nService writers should pay close attention \nto StatefulRunAsyncSlowCancellation and StatefulRunAsyncFailure events as they indicate issues with the service. \n\nStatefulRunAsyncFailure is emitted whenever\nthe service RunAsync() task throws an exception. Typically an exception thrown indicates an error or bug in the service. Additionally the exception causes the service to fail and thus moved to a \ndifferent node which can be an expensive operation and delay incoming requests while the service is moved. Service writers should determine the cause of the exception and if possible mitigate it. \n\nStatefulRunAsyncSlowCancellation is emitted whenever a cancellation request for the RunAsync task takes longer than 4 seconds. When a service takes too long to complete cancellation, it impacts\nthe ability for the service to be quickly restarted on another node and may impact overall availability of the service. "
}