<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Customize Swashbuckle-generated API definitions</source>
          <target state="new">Customize Swashbuckle-generated API definitions</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to customize Swagger API definitions that are generated by Swashbuckle for an API app in Azure App Service.</source>
          <target state="new">Learn how to customize Swagger API definitions that are generated by Swashbuckle for an API app in Azure App Service.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Customize Swashbuckle-generated API definitions</source>
          <target state="new">Customize Swashbuckle-generated API definitions</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article explains how to customize Swashbuckle to handle common scenarios where you may want to alter the default behavior:</source>
          <target state="new">This article explains how to customize Swashbuckle to handle common scenarios where you may want to alter the default behavior:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Swashbuckle generates duplicate operation identifiers for overloads of controller methods</source>
          <target state="new">Swashbuckle generates duplicate operation identifiers for overloads of controller methods</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Swashbuckle assumes that the only valid response from a method is HTTP 200 (OK)</source>
          <target state="new">Swashbuckle assumes that the only valid response from a method is HTTP 200 (OK)</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Customize operation identifier generation</source>
          <target state="new">Customize operation identifier generation</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Swashbuckle generates Swagger operation identifiers by concatenating controller name and method name.</source>
          <target state="new">Swashbuckle generates Swagger operation identifiers by concatenating controller name and method name.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This pattern creates a problem when you have multiple overloads of a method: Swashbuckle generates duplicate operation ids, which is invalid Swagger JSON.</source>
          <target state="new">This pattern creates a problem when you have multiple overloads of a method: Swashbuckle generates duplicate operation ids, which is invalid Swagger JSON.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, the following controller code causes Swashbuckle to generate three Contact_Get operation ids.</source>
          <target state="new">For example, the following controller code causes Swashbuckle to generate three Contact_Get operation ids.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can solve the problem manually by giving the methods unique names, such as the following for this example:</source>
          <target state="new">You can solve the problem manually by giving the methods unique names, such as the following for this example:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Get</source>
          <target state="new">Get</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>GetById</source>
          <target state="new">GetById</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>GetPage</source>
          <target state="new">GetPage</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The alternative is to extend Swashbuckle to make it automatically generate unique operation ids.</source>
          <target state="new">The alternative is to extend Swashbuckle to make it automatically generate unique operation ids.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following steps show how to customize Swashbuckle by using the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file that is included in the project by the Visual Studio API Apps Preview project template.</source>
          <target state="new">The following steps show how to customize Swashbuckle by using the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file that is included in the project by the Visual Studio API Apps Preview project template.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also customize Swashbuckle in a Web API project that you configure for deployment as an API app.</source>
          <target state="new">You can also customize Swashbuckle in a Web API project that you configure for deployment as an API app.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a custom <ph id="ph1">`IOperationFilter`</ph> implementation</source>
          <target state="new">Create a custom <ph id="ph1">`IOperationFilter`</ph> implementation</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IOperationFilter`</ph> interface provides an extensibility point for Swashbuckle users who want to customize various aspects of the Swagger metadata process.</source>
          <target state="new">The <ph id="ph1">`IOperationFilter`</ph> interface provides an extensibility point for Swashbuckle users who want to customize various aspects of the Swagger metadata process.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following code demonstrates one method of changing the operation-id-generation behavior.</source>
          <target state="new">The following code demonstrates one method of changing the operation-id-generation behavior.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code appends parameter names to the operation id name.</source>
          <target state="new">The code appends parameter names to the operation id name.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>App_Start\SwaggerConfig.cs<ept id="p1">*</ept> file, call the <ph id="ph1">`OperationFilter`</ph> method to cause Swashbuckle to use the new <ph id="ph2">`IOperationFilter`</ph> implementation.</source>
          <target state="new">In <bpt id="p1">*</bpt>App_Start\SwaggerConfig.cs<ept id="p1">*</ept> file, call the <ph id="ph1">`OperationFilter`</ph> method to cause Swashbuckle to use the new <ph id="ph2">`IOperationFilter`</ph> implementation.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file that is dropped in by the Swashbuckle NuGet package contains many commented-out examples of extensibility points.</source>
          <target state="new">The <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file that is dropped in by the Swashbuckle NuGet package contains many commented-out examples of extensibility points.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The additional comments are not shown here.</source>
          <target state="new">The additional comments are not shown here.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>After you make this change, your <ph id="ph1">`IOperationFilter`</ph> implementation is used and causes unique operation ids to be generated.</source>
          <target state="new">After you make this change, your <ph id="ph1">`IOperationFilter`</ph> implementation is used and causes unique operation ids to be generated.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Allow response codes other than 200</source>
          <target state="new">Allow response codes other than 200</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>By default, Swashbuckle assumes that an HTTP 200 (OK) response is the <bpt id="p1">*</bpt>only<ept id="p1">*</ept> legitimate response from a Web API method.</source>
          <target state="new">By default, Swashbuckle assumes that an HTTP 200 (OK) response is the <bpt id="p1">*</bpt>only<ept id="p1">*</ept> legitimate response from a Web API method.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to return other response codes without causing the client to raise an exception.</source>
          <target state="new">In some cases, you may want to return other response codes without causing the client to raise an exception.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the following Web API code demonstrates a scenario in which you would want the client to accept either a 200 or a 404 as valid responses.</source>
          <target state="new">For example, the following Web API code demonstrates a scenario in which you would want the client to accept either a 200 or a 404 as valid responses.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this scenario, the Swagger that Swashbuckle generates by default specifies only one legitimate HTTP status code, HTTP 200.</source>
          <target state="new">In this scenario, the Swagger that Swashbuckle generates by default specifies only one legitimate HTTP status code, HTTP 200.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Since Visual Studio uses the Swagger API definition to generate code for the client, it creates client code that raises an exception for any response other than an HTTP 200.</source>
          <target state="new">Since Visual Studio uses the Swagger API definition to generate code for the client, it creates client code that raises an exception for any response other than an HTTP 200.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The code below is from a C# client generated for this sample Web API method.</source>
          <target state="new">The code below is from a C# client generated for this sample Web API method.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Swashbuckle provides two ways of customizing the list of expected HTTP response codes that it generates, using XML comments or the <ph id="ph1">`SwaggerResponse`</ph> attribute.</source>
          <target state="new">Swashbuckle provides two ways of customizing the list of expected HTTP response codes that it generates, using XML comments or the <ph id="ph1">`SwaggerResponse`</ph> attribute.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The attribute is easier, but it is only available in Swashbuckle 5.1.5 or later.</source>
          <target state="new">The attribute is easier, but it is only available in Swashbuckle 5.1.5 or later.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The API Apps preview new-project template in Visual Studio 2013 includes Swashbuckle version 5.0.0, so if you used the template and don't want to update Swashbuckle, your only option is to use XML comments.</source>
          <target state="new">The API Apps preview new-project template in Visual Studio 2013 includes Swashbuckle version 5.0.0, so if you used the template and don't want to update Swashbuckle, your only option is to use XML comments.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Customize expected response codes using XML comments</source>
          <target state="new">Customize expected response codes using XML comments</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use this method to specify response codes if your Swashbuckle version is earlier than 5.1.5.</source>
          <target state="new">Use this method to specify response codes if your Swashbuckle version is earlier than 5.1.5.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>First, add XML documentation comments over the methods you wish to specify HTTP response codes for.</source>
          <target state="new">First, add XML documentation comments over the methods you wish to specify HTTP response codes for.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Taking the sample Web API action shown above and applying the XML documentation to it would result in code like the following example.</source>
          <target state="new">Taking the sample Web API action shown above and applying the XML documentation to it would result in code like the following example.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add instructions in the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file to direct Swashbuckle to make use of the XML documentation file.</source>
          <target state="new">Add instructions in the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file to direct Swashbuckle to make use of the XML documentation file.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> and create a method on the <bpt id="p2">*</bpt>SwaggerConfig<ept id="p2">*</ept> class to specify the path to the documentation XML file.</source>
          <target state="new">Open <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> and create a method on the <bpt id="p2">*</bpt>SwaggerConfig<ept id="p2">*</ept> class to specify the path to the documentation XML file.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Scroll down in the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file until you see the commented-out line of code resembling the screen shot below.</source>
          <target state="new">Scroll down in the <bpt id="p1">*</bpt>SwaggerConfig.cs<ept id="p1">*</ept> file until you see the commented-out line of code resembling the screen shot below.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Uncomment the line to enable the XML comments processing during Swagger generation.</source>
          <target state="new">Uncomment the line to enable the XML comments processing during Swagger generation.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In order to generate the XML documentation file, go into the project's properties and enable the XML documentation file as shown in the screenshot below.</source>
          <target state="new">In order to generate the XML documentation file, go into the project's properties and enable the XML documentation file as shown in the screenshot below.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Once you perform these steps, the Swagger JSON generated by Swashbuckle will reflect the HTTP response codes that you specified in the XML comments.</source>
          <target state="new">Once you perform these steps, the Swagger JSON generated by Swashbuckle will reflect the HTTP response codes that you specified in the XML comments.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The screenshot below demonstrates this new JSON payload.</source>
          <target state="new">The screenshot below demonstrates this new JSON payload.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you use Visual Studio to regenerate the client code for your REST API, the C# code accepts both the HTTP OK and Not Found status codes without raising an exception, allowing your consuming code to make decisions on how to handle the return of a null Contact record.</source>
          <target state="new">When you use Visual Studio to regenerate the client code for your REST API, the C# code accepts both the HTTP OK and Not Found status codes without raising an exception, allowing your consuming code to make decisions on how to handle the return of a null Contact record.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The code for this demonstration can be found in <bpt id="p1">[</bpt>this GitHub repository<ept id="p1">](https://github.com/Azure-Samples/API-Apps-DotNet-Swashbuckle-Customization-MultipleResponseCodes)</ept>.</source>
          <target state="new">The code for this demonstration can be found in <bpt id="p1">[</bpt>this GitHub repository<ept id="p1">](https://github.com/Azure-Samples/API-Apps-DotNet-Swashbuckle-Customization-MultipleResponseCodes)</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Along with the Web API project marked up with XML documentation comments is a Console Application project that contains a generated client for this API.</source>
          <target state="new">Along with the Web API project marked up with XML documentation comments is a Console Application project that contains a generated client for this API.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Customize expected response codes using the SwaggerResponse attribute</source>
          <target state="new">Customize expected response codes using the SwaggerResponse attribute</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SwaggerResponse<ept id="p1">](https://github.com/domaindrivendev/Swashbuckle/blob/master/Swashbuckle.Core/Swagger/Annotations/SwaggerResponseAttribute.cs)</ept> attribute is available in Swashbuckle 5.1.5 and later.</source>
          <target state="new">The <bpt id="p1">[</bpt>SwaggerResponse<ept id="p1">](https://github.com/domaindrivendev/Swashbuckle/blob/master/Swashbuckle.Core/Swagger/Annotations/SwaggerResponseAttribute.cs)</ept> attribute is available in Swashbuckle 5.1.5 and later.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In case you have an earlier version in your project, this section starts by explaining how to update the Swashbuckle NuGet package so that you can use this attribute.</source>
          <target state="new">In case you have an earlier version in your project, this section starts by explaining how to update the Swashbuckle NuGet package so that you can use this attribute.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click your Web API project and click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click your Web API project and click <bpt id="p2">**</bpt>Manage NuGet Packages<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">*</bpt>Update<ept id="p1">*</ept> button next to the <bpt id="p2">*</bpt>Swashbuckle<ept id="p2">*</ept> NuGet package.</source>
          <target state="new">Click the <bpt id="p1">*</bpt>Update<ept id="p1">*</ept> button next to the <bpt id="p2">*</bpt>Swashbuckle<ept id="p2">*</ept> NuGet package.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">*</bpt>SwaggerResponse<ept id="p1">*</ept> attributes to the Web API action methods for which you want to specify valid HTTP response codes.</source>
          <target state="new">Add the <bpt id="p1">*</bpt>SwaggerResponse<ept id="p1">*</ept> attributes to the Web API action methods for which you want to specify valid HTTP response codes.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement for the attribute's namespace:</source>
          <target state="new">Add a <ph id="ph1">`using`</ph> statement for the attribute's namespace:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Browse to the <bpt id="p1">*</bpt>/swagger/docs/v1<ept id="p1">*</ept> URL of your project and the various HTTP response codes will be visible in the Swagger JSON.</source>
          <target state="new">Browse to the <bpt id="p1">*</bpt>/swagger/docs/v1<ept id="p1">*</ept> URL of your project and the various HTTP response codes will be visible in the Swagger JSON.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The code for this demonstration can be found in <bpt id="p1">[</bpt>this GitHub repository<ept id="p1">](https://github.com/Azure-Samples/API-Apps-DotNet-Swashbuckle-Customization-MultipleResponseCodes-With-Attributes)</ept>.</source>
          <target state="new">The code for this demonstration can be found in <bpt id="p1">[</bpt>this GitHub repository<ept id="p1">](https://github.com/Azure-Samples/API-Apps-DotNet-Swashbuckle-Customization-MultipleResponseCodes-With-Attributes)</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Along with the Web API project decorated with the <bpt id="p1">*</bpt>SwaggerResponse<ept id="p1">*</ept> attribute is a Console Application project that contains a generated client for this API.</source>
          <target state="new">Along with the Web API project decorated with the <bpt id="p1">*</bpt>SwaggerResponse<ept id="p1">*</ept> attribute is a Console Application project that contains a generated client for this API.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This article has shown how to customize the way Swashbuckle generates operation ids and valid response codes.</source>
          <target state="new">This article has shown how to customize the way Swashbuckle generates operation ids and valid response codes.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Swashbuckle on GitHub<ept id="p1">](https://github.com/domaindrivendev/Swashbuckle)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Swashbuckle on GitHub<ept id="p1">](https://github.com/domaindrivendev/Swashbuckle)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6af250c35f32dc8392b50e3c8821d99297db3e1b</xliffext:olfilehash>
  </header>
</xliff>