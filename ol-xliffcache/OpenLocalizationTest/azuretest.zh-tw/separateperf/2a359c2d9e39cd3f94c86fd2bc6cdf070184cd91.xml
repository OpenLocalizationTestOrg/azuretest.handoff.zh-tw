{
  "nodes": [
    {
      "content": "How to use Queue storage from Node.js | Microsoft Azure",
      "pos": [
        28,
        83
      ]
    },
    {
      "content": "Learn how to use the Azure Queue service to create and delete queues, and insert, get, and delete messages.",
      "pos": [
        103,
        210
      ]
    },
    {
      "content": "Samples written in Node.js.",
      "pos": [
        211,
        238
      ]
    },
    {
      "content": "How to use Queue storage from Node.js",
      "pos": [
        555,
        592
      ]
    },
    {
      "content": "Overview",
      "pos": [
        697,
        705
      ]
    },
    {
      "content": "This guide shows you how to perform common scenarios using the Microsoft",
      "pos": [
        707,
        779
      ]
    },
    {
      "content": "Azure Queue service.",
      "pos": [
        780,
        800
      ]
    },
    {
      "content": "The samples are written using the Node.js",
      "pos": [
        801,
        842
      ]
    },
    {
      "content": "API.",
      "pos": [
        843,
        847
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>inserting<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>peeking<ept id=\"p2\">**</ept>,",
      "pos": [
        848,
        905
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>getting<ept id=\"p1\">**</ept>, and <bpt id=\"p2\">**</bpt>deleting<ept id=\"p2\">**</ept> queue messages, as well as <bpt id=\"p3\">**</bpt>creating and\ndeleting queues<ept id=\"p3\">**</ept>.",
      "pos": [
        906,
        996
      ]
    },
    {
      "content": "Create a Node.js Application",
      "pos": [
        1201,
        1229
      ]
    },
    {
      "content": "Create a blank Node.js application.",
      "pos": [
        1231,
        1266
      ]
    },
    {
      "content": "For instructions creating a Node.js application, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create and deploy a Node.js application to an Azure Web Site]</ept>, <bpt id=\"p2\">[</bpt>Node.js Cloud Service<ept id=\"p2\">][Node.js Cloud Service]</ept> (using Windows PowerShell), or <bpt id=\"p3\">[</bpt><ept id=\"p3\">Web Site with WebMatrix]</ept>.",
      "pos": [
        1267,
        1488
      ]
    },
    {
      "content": "Configure Your Application to Access Storage",
      "pos": [
        1493,
        1537
      ]
    },
    {
      "content": "To use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that",
      "pos": [
        1539,
        1655
      ]
    },
    {
      "content": "communicate with the storage REST services.",
      "pos": [
        1656,
        1699
      ]
    },
    {
      "content": "Use Node Package Manager (NPM) to obtain the package",
      "pos": [
        1705,
        1757
      ]
    },
    {
      "pos": [
        1763,
        1931
      ],
      "content": "Use a command-line interface such as <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows,) <bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac,) or <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix), navigate to the folder where you created your sample application."
    },
    {
      "content": "Type <bpt id=\"p1\">**</bpt>npm install azure-storage<ept id=\"p1\">**</ept> in the command window.",
      "pos": [
        1937,
        1994
      ]
    },
    {
      "content": "Output from the command is similar to the following example.",
      "pos": [
        1995,
        2055
      ]
    },
    {
      "pos": [
        2768,
        2995
      ],
      "content": "You can manually run the **ls** command to verify that a\n**node\\_modules** folder was created. Inside that folder you will\nfind the **azure-storage** package, which contains the libraries you need to\naccess storage.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "You can manually run the <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> command to verify that a",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "**node\\_modules** folder was created. Inside that folder you will",
          "pos": [
            57,
            122
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>node\\_modules<ept id=\"p1\">**</ept> folder was created.",
              "pos": [
                0,
                37
              ]
            },
            {
              "content": "Inside that folder you will",
              "pos": [
                38,
                65
              ]
            }
          ]
        },
        {
          "content": "find the <bpt id=\"p1\">**</bpt>azure-storage<ept id=\"p1\">**</ept> package, which contains the libraries you need to",
          "pos": [
            123,
            199
          ]
        },
        {
          "content": "access storage.",
          "pos": [
            200,
            215
          ]
        }
      ]
    },
    {
      "content": "Import the package",
      "pos": [
        3001,
        3019
      ]
    },
    {
      "content": "Using Notepad or another text editor, add the following to the top the",
      "pos": [
        3021,
        3091
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> file of the application where you intend to use storage:",
      "pos": [
        3092,
        3162
      ]
    },
    {
      "content": "Setup an Azure Storage Connection",
      "pos": [
        3210,
        3243
      ]
    },
    {
      "content": "The azure module will read the environment variables AZURE\\_STORAGE\\_ACCOUNT and AZURE\\_STORAGE\\_ACCESS\\_KEY, or AZURE\\_STORAGE\\_CONNECTION\\_STRING for information required to connect to your Azure storage account.",
      "pos": [
        3245,
        3459
      ]
    },
    {
      "content": "If these environment variables are not set, you must specify the account information when calling <bpt id=\"p1\">**</bpt>createQueueService<ept id=\"p1\">**</ept>.",
      "pos": [
        3460,
        3581
      ]
    },
    {
      "pos": [
        3583,
        3724
      ],
      "content": "For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Web Application with Storage]</ept>"
    },
    {
      "content": "How To: Create a Queue",
      "pos": [
        3729,
        3751
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> object, which enables you",
      "pos": [
        3753,
        3824
      ]
    },
    {
      "content": "to work with queues.",
      "pos": [
        3825,
        3845
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>createQueueIfNotExists<ept id=\"p1\">**</ept> method, which returns the specified",
      "pos": [
        3895,
        3965
      ]
    },
    {
      "content": "queue if it already exists or creates a new queue with the specified",
      "pos": [
        3966,
        4034
      ]
    },
    {
      "content": "name if it does not already exist.",
      "pos": [
        4035,
        4069
      ]
    },
    {
      "content": "If the queue is created, <ph id=\"ph1\">`result`</ph> is true.",
      "pos": [
        4223,
        4265
      ]
    },
    {
      "content": "If the queue exists, <ph id=\"ph1\">`result`</ph> is false.",
      "pos": [
        4266,
        4305
      ]
    },
    {
      "content": "Filters",
      "pos": [
        4311,
        4318
      ]
    },
    {
      "content": "Optional filtering operations can be applied to operations performed using <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept>.",
      "pos": [
        4320,
        4412
      ]
    },
    {
      "content": "Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:",
      "pos": [
        4413,
        4547
      ]
    },
    {
      "content": "After doing its preprocessing on the request options, the method needs to call \"next\" passing a callback with the following signature:",
      "pos": [
        4597,
        4731
      ]
    },
    {
      "content": "In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.",
      "pos": [
        4787,
        5055
      ]
    },
    {
      "content": "Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>.",
      "pos": [
        5057,
        5206
      ]
    },
    {
      "content": "The following creates a <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> object that uses the <bpt id=\"p2\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p2\">**</ept>:",
      "pos": [
        5207,
        5302
      ]
    },
    {
      "content": "How To: Insert a Message into a Queue",
      "pos": [
        5451,
        5488
      ]
    },
    {
      "content": "To insert a message into a queue, use the <bpt id=\"p1\">**</bpt>createMessage<ept id=\"p1\">**</ept> method to",
      "pos": [
        5490,
        5559
      ]
    },
    {
      "content": "create a new message and add it to the queue.",
      "pos": [
        5560,
        5605
      ]
    },
    {
      "content": "How To: Peek at the Next Message",
      "pos": [
        5762,
        5794
      ]
    },
    {
      "content": "You can peek at the message in the front of a queue without removing it",
      "pos": [
        5796,
        5867
      ]
    },
    {
      "content": "from the queue by calling the <bpt id=\"p1\">**</bpt>peekMessages<ept id=\"p1\">**</ept> method.",
      "pos": [
        5868,
        5922
      ]
    },
    {
      "content": "By default,",
      "pos": [
        5923,
        5934
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>peekMessages<ept id=\"p1\">**</ept> peeks at a single message.",
      "pos": [
        5935,
        5978
      ]
    },
    {
      "pos": [
        6141,
        6175
      ],
      "content": "The <ph id=\"ph1\">`result`</ph> contains the message."
    },
    {
      "pos": [
        6179,
        6318
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Using <bpt id=\"p1\">**</bpt>peekMessages<ept id=\"p1\">**</ept> when there are no messages in the queue will not return an error, however no messages will be returned."
    },
    {
      "content": "How To: Dequeue the Next Message",
      "pos": [
        6323,
        6355
      ]
    },
    {
      "content": "Processing a message is a two-stage process:",
      "pos": [
        6357,
        6401
      ]
    },
    {
      "content": "Dequeue the message.",
      "pos": [
        6406,
        6426
      ]
    },
    {
      "content": "Delete the message.",
      "pos": [
        6431,
        6450
      ]
    },
    {
      "content": "To dequeue a message, use <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept>.",
      "pos": [
        6452,
        6494
      ]
    },
    {
      "content": "This makes the messages invisible in the queue, so no other clients can process them.",
      "pos": [
        6495,
        6580
      ]
    },
    {
      "content": "Once your application has processed a message, call <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> to delete it from the queue.",
      "pos": [
        6581,
        6679
      ]
    },
    {
      "content": "The following example gets a message, then deletes it:",
      "pos": [
        6680,
        6734
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> By default, a message is only hidden for 30 seconds, after which it is visible to other clients.",
      "pos": [
        7115,
        7224
      ]
    },
    {
      "content": "You can specify a different value by using <ph id=\"ph1\">`options.visibilityTimeout`</ph> with <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept>.",
      "pos": [
        7225,
        7317
      ]
    },
    {
      "pos": [
        7321,
        7461
      ],
      "content": "[AZURE.NOTE]\nUsing **getMessages** when there are no messages in the queue will not return an error, however no messages will be returned.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "Using <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> when there are no messages in the queue will not return an error, however no messages will be returned.",
          "pos": [
            13,
            138
          ]
        }
      ]
    },
    {
      "content": "How To: Change the Contents of a Queued Message",
      "pos": [
        7466,
        7513
      ]
    },
    {
      "content": "You can change the contents of a message in-place in the queue using <bpt id=\"p1\">**</bpt>updateMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        7515,
        7602
      ]
    },
    {
      "content": "The following example updates the text of a message:",
      "pos": [
        7603,
        7655
      ]
    },
    {
      "content": "How To: Additional Options for Dequeuing Messages",
      "pos": [
        8063,
        8112
      ]
    },
    {
      "content": "There are two ways you can customize message retrieval from a queue:",
      "pos": [
        8114,
        8182
      ]
    },
    {
      "pos": [
        8186,
        8252
      ],
      "content": "<ph id=\"ph1\">`options.numOfMessages`</ph> - Retrieve a batch of messages (up to 32.)"
    },
    {
      "pos": [
        8255,
        8330
      ],
      "content": "<ph id=\"ph1\">`options.visibilityTimeout`</ph> - Set a longer or shorter invisibility timeout."
    },
    {
      "content": "The following example uses the <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> method to get 15 messages in one call.",
      "pos": [
        8332,
        8417
      ]
    },
    {
      "content": "Then it processes",
      "pos": [
        8418,
        8435
      ]
    },
    {
      "content": "each message using a for loop.",
      "pos": [
        8436,
        8466
      ]
    },
    {
      "content": "It also sets the invisibility timeout to five minutes for all messages returned by this method.",
      "pos": [
        8467,
        8562
      ]
    },
    {
      "content": "How To: Get the Queue Length",
      "pos": [
        9089,
        9117
      ]
    },
    {
      "pos": [
        9119,
        9244
      ],
      "content": "The <bpt id=\"p1\">**</bpt>getQueueMetadata<ept id=\"p1\">**</ept> returns metadata about the queue, including the approximate number of messages waiting in the queue."
    },
    {
      "content": "How To: List Queues",
      "pos": [
        9431,
        9450
      ]
    },
    {
      "content": "To retrieve a list of queues, use <bpt id=\"p1\">**</bpt>listQueuesSegmented<ept id=\"p1\">**</ept>.",
      "pos": [
        9452,
        9510
      ]
    },
    {
      "content": "To retrieve a list filtered by a specific prefix, use <bpt id=\"p1\">**</bpt>listQueuesSegmentedWithPrefix<ept id=\"p1\">**</ept>.",
      "pos": [
        9511,
        9599
      ]
    },
    {
      "pos": [
        9764,
        9973
      ],
      "content": "If all queues cannot be returned, <ph id=\"ph1\">`result.continuationToken`</ph> can be used as the first parameter of <bpt id=\"p1\">**</bpt>listQueuesSegmented<ept id=\"p1\">**</ept> or the second parameter of <bpt id=\"p2\">**</bpt>listQueuesSegmentedWithPrefix<ept id=\"p2\">**</ept> to retrieve more results."
    },
    {
      "content": "How To: Delete a Queue",
      "pos": [
        9978,
        10000
      ]
    },
    {
      "content": "To delete a queue and all the messages contained in it, call the",
      "pos": [
        10002,
        10066
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>deleteQueue<ept id=\"p1\">**</ept> method on the queue object.",
      "pos": [
        10067,
        10110
      ]
    },
    {
      "pos": [
        10252,
        10330
      ],
      "content": "To clear all messages from a queue without deleting it, use <bpt id=\"p1\">**</bpt>clearMessages<ept id=\"p1\">**</ept>."
    },
    {
      "content": "How to: Work with Shared Access Signatures",
      "pos": [
        10335,
        10377
      ]
    },
    {
      "content": "Shared Access Signatures (SAS) are a secure way to provide granular access to queues without providing your storage account name or keys.",
      "pos": [
        10379,
        10516
      ]
    },
    {
      "content": "SAS are often used to provide limited access to your queues, such as allowing a mobile app to submit messages.",
      "pos": [
        10517,
        10627
      ]
    },
    {
      "content": "A trusted application such as a cloud-based service generates a SAS using the <bpt id=\"p1\">**</bpt>generateSharedAccessSignature<ept id=\"p1\">**</ept> of the <bpt id=\"p2\">**</bpt>QueueService<ept id=\"p2\">**</ept>, and provides it to an untrusted or semi-trusted application.",
      "pos": [
        10629,
        10826
      ]
    },
    {
      "content": "For example, a mobile app.",
      "pos": [
        10827,
        10853
      ]
    },
    {
      "content": "The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.",
      "pos": [
        10854,
        11016
      ]
    },
    {
      "content": "The following example generates a new shared access policy that will allow the SAS holder to add messages to the queue, and expires 100 minutes after the time it is created.",
      "pos": [
        11018,
        11191
      ]
    },
    {
      "content": "Note that the host information must be provided also, as it is required when the SAS holder attempts to access the queue.",
      "pos": [
        11699,
        11820
      ]
    },
    {
      "content": "The client application then uses the SAS with <bpt id=\"p1\">**</bpt>QueueServiceWithSAS<ept id=\"p1\">**</ept> to perform operations against the queue.",
      "pos": [
        11822,
        11932
      ]
    },
    {
      "content": "The following example connects to the queue and creates a message.",
      "pos": [
        11933,
        11999
      ]
    },
    {
      "content": "Since the SAS was generated with add access, if an attempt were made to read, update or delete messages, an error would be returned.",
      "pos": [
        12246,
        12378
      ]
    },
    {
      "content": "Access control lists",
      "pos": [
        12384,
        12404
      ]
    },
    {
      "content": "You can also use an Access Control List (ACL) to set the access policy for a SAS.",
      "pos": [
        12406,
        12487
      ]
    },
    {
      "content": "This is useful if you wish to allow multiple clients to access the queue, but provide different access policies for each client.",
      "pos": [
        12488,
        12616
      ]
    },
    {
      "content": "An ACL is implemented using an array of access policies, with an ID associated with each policy.",
      "pos": [
        12618,
        12714
      ]
    },
    {
      "content": "The  following example defines two policies; one for 'user1' and one for 'user2':",
      "pos": [
        12715,
        12796
      ]
    },
    {
      "content": "The following example gets the current ACL for <bpt id=\"p1\">**</bpt>myqueue<ept id=\"p1\">**</ept>, then adds the new policies using <bpt id=\"p2\">**</bpt>setQueueAcl<ept id=\"p2\">**</ept>.",
      "pos": [
        13244,
        13353
      ]
    },
    {
      "content": "This approach allows:",
      "pos": [
        13354,
        13375
      ]
    },
    {
      "content": "Once the ACL has been set, you can then create a SAS based on the ID for a policy.",
      "pos": [
        13748,
        13830
      ]
    },
    {
      "content": "The following example creates a new SAS for 'user2':",
      "pos": [
        13831,
        13883
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        13972,
        13982
      ]
    },
    {
      "content": "Now that you've learned the basics of queue storage, follow these links",
      "pos": [
        13984,
        14055
      ]
    },
    {
      "content": "to learn about more complex storage tasks.",
      "pos": [
        14056,
        14098
      ]
    },
    {
      "pos": [
        14104,
        14168
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Storing and Accessing Data in Azure<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        14173,
        14211
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage Team Blog<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        14216,
        14278
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage SDK for Node<ept id=\"p1\">][]</ept> repository on GitHub."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Queue storage from Node.js | Microsoft Azure\" \n    description=\"Learn how to use the Azure Queue service to create and delete queues, and insert, get, and delete messages. Samples written in Node.js.\" \n    services=\"storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"storage\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"09/01/2015\" \n    ms.author=\"mwasson\"/>\n\n\n# How to use Queue storage from Node.js\n\n[AZURE.INCLUDE [storage-selector-queue-include](../../includes/storage-selector-queue-include.md)]\n\n## Overview\n\nThis guide shows you how to perform common scenarios using the Microsoft\nAzure Queue service. The samples are written using the Node.js\nAPI. The scenarios covered include **inserting**, **peeking**,\n**getting**, and **deleting** queue messages, as well as **creating and\ndeleting queues**.\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a Node.js Application\n\nCreate a blank Node.js application. For instructions creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], [Node.js Cloud Service][Node.js Cloud Service] (using Windows PowerShell), or [Web Site with WebMatrix].\n\n## Configure Your Application to Access Storage\n\nTo use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that\ncommunicate with the storage REST services.\n\n### Use Node Package Manager (NPM) to obtain the package\n\n1.  Use a command-line interface such as **PowerShell** (Windows,) **Terminal** (Mac,) or **Bash** (Unix), navigate to the folder where you created your sample application.\n\n2.  Type **npm install azure-storage** in the command window. Output from the command is similar to the following example.\n\n        azure-storage@0.5.0 node_modules\\azure-storage\n        +-- extend@1.2.1\n        +-- xmlbuilder@0.4.3\n        +-- mime@1.2.11\n        +-- node-uuid@1.4.3\n        +-- validator@3.22.2\n        +-- underscore@1.4.4\n        +-- readable-stream@1.0.33 (string_decoder@0.10.31, isarray@0.0.1, inherits@2.0.1, core-util-is@1.0.1)\n        +-- xml2js@0.2.7 (sax@0.5.2)\n        +-- request@2.57.0 (caseless@0.10.0, aws-sign2@0.5.0, forever-agent@0.6.1, stringstream@0.0.4, oauth-sign@0.8.0, tunnel-agent@0.4.1, isstream@0.1.2, json-stringify-safe@5.0.1, bl@0.9.4, combined-stream@1.0.5, qs@3.1.0, mime-types@2.0.14, form-data@0.2.0, http-signature@0.11.0, tough-cookie@2.0.0, hawk@2.3.1, har-validator@1.8.0)\n\n3.  You can manually run the **ls** command to verify that a\n    **node\\_modules** folder was created. Inside that folder you will\n    find the **azure-storage** package, which contains the libraries you need to\n    access storage.\n\n### Import the package\n\nUsing Notepad or another text editor, add the following to the top the\n**server.js** file of the application where you intend to use storage:\n\n    var azure = require('azure-storage');\n\n## Setup an Azure Storage Connection\n\nThe azure module will read the environment variables AZURE\\_STORAGE\\_ACCOUNT and AZURE\\_STORAGE\\_ACCESS\\_KEY, or AZURE\\_STORAGE\\_CONNECTION\\_STRING for information required to connect to your Azure storage account. If these environment variables are not set, you must specify the account information when calling **createQueueService**.\n\nFor an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]\n\n## How To: Create a Queue\n\nThe following code creates a **QueueService** object, which enables you\nto work with queues.\n\n    var queueSvc = azure.createQueueService();\n\nUse the **createQueueIfNotExists** method, which returns the specified\nqueue if it already exists or creates a new queue with the specified\nname if it does not already exist.\n\n    queueSvc.createQueueIfNotExists('myqueue', function(error, result, response){\n      if(!error){\n        // Queue created or exists\n      }\n    });\n\nIf the queue is created, `result` is true. If the queue exists, `result` is false.\n\n### Filters\n\nOptional filtering operations can be applied to operations performed using **QueueService**. Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:\n\n        function handle (requestOptions, next)\n\nAfter doing its preprocessing on the request options, the method needs to call \"next\" passing a callback with the following signature:\n\n        function (returnObject, finalCallback, next)\n\nIn this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.\n\nTwo filters that implement retry logic are included with the Azure SDK for Node.js, **ExponentialRetryPolicyFilter** and **LinearRetryPolicyFilter**. The following creates a **QueueService** object that uses the **ExponentialRetryPolicyFilter**:\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var queueSvc = azure.createQueueService().withFilter(retryOperations);\n\n## How To: Insert a Message into a Queue\n\nTo insert a message into a queue, use the **createMessage** method to\ncreate a new message and add it to the queue.\n\n    queueSvc.createMessage('myqueue', \"Hello world!\", function(error, result, response){\n      if(!error){\n        // Message inserted\n      }\n    });\n\n## How To: Peek at the Next Message\n\nYou can peek at the message in the front of a queue without removing it\nfrom the queue by calling the **peekMessages** method. By default,\n**peekMessages** peeks at a single message.\n\n    queueSvc.peekMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Message text is in messages[0].messagetext\n      }\n    });\n\nThe `result` contains the message.\n\n> [AZURE.NOTE] Using **peekMessages** when there are no messages in the queue will not return an error, however no messages will be returned.\n\n## How To: Dequeue the Next Message\n\nProcessing a message is a two-stage process:\n\n1. Dequeue the message.\n\n2. Delete the message.\n\nTo dequeue a message, use **getMessages**. This makes the messages invisible in the queue, so no other clients can process them. Once your application has processed a message, call **deleteMessage** to delete it from the queue. The following example gets a message, then deletes it:\n\n    queueSvc.getMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Message text is in messages[0].messagetext\n        var message = result[0];\n        queueSvc.deleteMessage('myqueue', message.messageid, message.popreceipt, function(error, response){\n          if(!error){\n            //message deleted\n          }\n        });\n      }\n    });\n\n> [AZURE.NOTE] By default, a message is only hidden for 30 seconds, after which it is visible to other clients. You can specify a different value by using `options.visibilityTimeout` with **getMessages**.\n\n> [AZURE.NOTE]\n> Using **getMessages** when there are no messages in the queue will not return an error, however no messages will be returned.\n\n## How To: Change the Contents of a Queued Message\n\nYou can change the contents of a message in-place in the queue using **updateMessage**. The following example updates the text of a message:\n\n    queueSvc.getMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Got the message\n        var message = result[0];\n        queueSvc.updateMessage('myqueue', message.messageid, message.popreceipt, 10, {messageText: 'new text'}, function(error, result, response){\n          if(!error){\n            // Message updated successfully\n          }\n        });\n      }\n    });\n\n## How To: Additional Options for Dequeuing Messages\n\nThere are two ways you can customize message retrieval from a queue:\n\n* `options.numOfMessages` - Retrieve a batch of messages (up to 32.)\n* `options.visibilityTimeout` - Set a longer or shorter invisibility timeout.\n\nThe following example uses the **getMessages** method to get 15 messages in one call. Then it processes\neach message using a for loop. It also sets the invisibility timeout to five minutes for all messages returned by this method.\n\n    queueSvc.getMessages('myqueue', {numOfMessages: 15, visibilityTimeout: 5 * 60}, function(error, result, response){\n      if(!error){\n        // Messages retreived\n        for(var index in result){\n          // text is available in result[index].messageText\n          var message = result[index];\n          queueSvc.deleteMessage(queueName, message.messageid, message.popreceipt, function(error, response){\n            if(!error){\n              // Message deleted\n            }\n          });\n        }\n      }\n    });\n\n## How To: Get the Queue Length\n\nThe **getQueueMetadata** returns metadata about the queue, including the approximate number of messages waiting in the queue.\n\n    queueSvc.getQueueMetadata('myqueue', function(error, result, response){\n      if(!error){\n        // Queue length is available in result.approximatemessagecount\n      }\n    });\n\n## How To: List Queues\n\nTo retrieve a list of queues, use **listQueuesSegmented**. To retrieve a list filtered by a specific prefix, use **listQueuesSegmentedWithPrefix**.\n\n    queueSvc.listQueuesSegmented(null, function(error, result, response){\n      if(!error){\n        // result.entries contains the list of queues\n      }\n    });\n\nIf all queues cannot be returned, `result.continuationToken` can be used as the first parameter of **listQueuesSegmented** or the second parameter of **listQueuesSegmentedWithPrefix** to retrieve more results.\n\n## How To: Delete a Queue\n\nTo delete a queue and all the messages contained in it, call the\n**deleteQueue** method on the queue object.\n\n    queueSvc.deleteQueue(queueName, function(error, response){\n        if(!error){\n            // Queue has been deleted\n        }\n    });\n\nTo clear all messages from a queue without deleting it, use **clearMessages**.\n\n## How to: Work with Shared Access Signatures\n\nShared Access Signatures (SAS) are a secure way to provide granular access to queues without providing your storage account name or keys. SAS are often used to provide limited access to your queues, such as allowing a mobile app to submit messages.\n\nA trusted application such as a cloud-based service generates a SAS using the **generateSharedAccessSignature** of the **QueueService**, and provides it to an untrusted or semi-trusted application. For example, a mobile app. The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.\n\nThe following example generates a new shared access policy that will allow the SAS holder to add messages to the queue, and expires 100 minutes after the time it is created.\n\n    var startDate = new Date();\n    var expiryDate = new Date(startDate);\n    expiryDate.setMinutes(startDate.getMinutes() + 100);\n    startDate.setMinutes(startDate.getMinutes() - 100);\n    \n    var sharedAccessPolicy = {\n      AccessPolicy: {\n        Permissions: azure.QueueUtilities.SharedAccessPermissions.ADD,\n        Start: startDate,\n        Expiry: expiryDate\n      }\n    };\n\n    var queueSAS = queueSvc.generateSharedAccessSignature('myqueue', sharedAccessPolicy);\n    var host = queueSvc.host;\n\nNote that the host information must be provided also, as it is required when the SAS holder attempts to access the queue.\n\nThe client application then uses the SAS with **QueueServiceWithSAS** to perform operations against the queue. The following example connects to the queue and creates a message.\n\n    var sharedQueueService = azure.createQueueServiceWithSas(host, queueSAS);\n    sharedQueueService.createMessage('myqueue', 'Hello world from SAS!', function(error, result, response){\n      if(!error){\n        //message added\n      }\n    });\n\nSince the SAS was generated with add access, if an attempt were made to read, update or delete messages, an error would be returned.\n\n### Access control lists\n\nYou can also use an Access Control List (ACL) to set the access policy for a SAS. This is useful if you wish to allow multiple clients to access the queue, but provide different access policies for each client.\n\nAn ACL is implemented using an array of access policies, with an ID associated with each policy. The  following example defines two policies; one for 'user1' and one for 'user2':\n\n    var sharedAccessPolicy = [\n      {\n        AccessPolicy: {\n          Permissions: azure.QueueUtilities.SharedAccessPermissions.PROCESS,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user1'\n      },\n      {\n        AccessPolicy: {\n          Permissions: azure.QueueUtilities.SharedAccessPermissions.ADD,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user2'\n      }\n    ];\n\nThe following example gets the current ACL for **myqueue**, then adds the new policies using **setQueueAcl**. This approach allows:\n\n    queueSvc.getQueueAcl('myqueue', function(error, result, response) {\n      if(!error){\n        //push the new policy into signedIdentifiers\n        result.signedIdentifiers.push(sharedAccessPolicy);\n        queueSvc.setQueueAcl('myqueue', result, function(error, result, response){\n          if(!error){\n            // ACL set\n          }\n        });\n      }\n    });\n\nOnce the ACL has been set, you can then create a SAS based on the ID for a policy. The following example creates a new SAS for 'user2':\n\n    queueSAS = queueSvc.generateSharedAccessSignature('myqueue', { Id: 'user2' });\n\n## Next Steps\n\nNow that you've learned the basics of queue storage, follow these links\nto learn about more complex storage tasks.\n\n-   See the MSDN Reference: [Storing and Accessing Data in Azure][].\n-   Visit the [Azure Storage Team Blog][].\n-   Visit the [Azure Storage SDK for Node][] repository on GitHub.\n\n  [Azure Storage SDK for Node]: https://github.com/Azure/azure-storage-node\n  [using the REST API]: http://msdn.microsoft.com/library/azure/hh264518.aspx\n  [Azure Management Portal]: http://manage.windowsazure.com\n  [Create and deploy a Node.js application to an Azure Web Site]: ../web-sites-nodejs-develop-deploy-mac.md\n  [Node.js Cloud Service with Storage]: ../storage-nodejs-use-table-storage-cloud-service-app.md\n  [Node.js Web Application with Storage]: ../storage-nodejs-use-table-storage-web-site.md\n\n  \n  [Queue1]: ./media/storage-nodejs-how-to-use-queues/queue1.png\n  [plus-new]: ./media/storage-nodejs-how-to-use-queues/plus-new.png\n  [quick-create-storage]: ./media/storage-nodejs-how-to-use-queues/quick-storage.png\n  \n  \n  \n  [Node.js Cloud Service]: ../cloud-services-nodejs-develop-deploy-app.md\n  [Storing and Accessing Data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n [Web Site with WebMatrix]: ../web-sites-nodejs-use-webmatrix.md\n "
}