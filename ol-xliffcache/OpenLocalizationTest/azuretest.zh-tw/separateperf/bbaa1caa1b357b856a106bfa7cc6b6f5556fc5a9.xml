{
  "nodes": [
    {
      "content": "What is the Table Service",
      "pos": [
        3,
        28
      ]
    },
    {
      "content": "The Azure Table storage service stores large amounts of",
      "pos": [
        30,
        85
      ]
    },
    {
      "content": "structured data.",
      "pos": [
        86,
        102
      ]
    },
    {
      "content": "The service is a NoSQL datastore which accepts",
      "pos": [
        103,
        149
      ]
    },
    {
      "content": "authenticated calls from inside and outside the Azure cloud.",
      "pos": [
        150,
        210
      ]
    },
    {
      "content": "Azure",
      "pos": [
        211,
        216
      ]
    },
    {
      "content": "tables are ideal for storing structured, non-relational data.",
      "pos": [
        217,
        278
      ]
    },
    {
      "content": "Common",
      "pos": [
        279,
        285
      ]
    },
    {
      "content": "uses of the Table service include:",
      "pos": [
        286,
        320
      ]
    },
    {
      "pos": [
        326,
        402
      ],
      "content": "Storing TBs of structured data capable of serving web scale\napplications",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Storing TBs of structured data capable of serving web scale",
          "pos": [
            0,
            59
          ]
        },
        {
          "content": "applications",
          "pos": [
            60,
            72
          ]
        }
      ]
    },
    {
      "pos": [
        407,
        536
      ],
      "content": "Storing datasets that don't require complex joins, foreign keys, or\nstored procedures and can be denormalized for fast access",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Storing datasets that don't require complex joins, foreign keys, or",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "stored procedures and can be denormalized for fast access",
          "pos": [
            68,
            125
          ]
        }
      ]
    },
    {
      "content": "Quickly querying data using a clustered index",
      "pos": [
        541,
        586
      ]
    },
    {
      "pos": [
        591,
        688
      ],
      "content": "Accessing data using the OData protocol and LINQ queries with WCF\nData Service .NET Libraries",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Accessing data using the OData protocol and LINQ queries with WCF",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "Data Service .NET Libraries",
          "pos": [
            66,
            93
          ]
        }
      ]
    },
    {
      "content": "You can use the Table service to store and query huge sets of",
      "pos": [
        690,
        751
      ]
    },
    {
      "content": "structured, non-relational data, and your tables will scale as demand",
      "pos": [
        752,
        821
      ]
    },
    {
      "content": "increases.",
      "pos": [
        822,
        832
      ]
    },
    {
      "content": "Table Service Concepts",
      "pos": [
        837,
        859
      ]
    },
    {
      "content": "The Table service contains the following components:",
      "pos": [
        861,
        913
      ]
    },
    {
      "content": "Table1",
      "pos": [
        917,
        923
      ]
    },
    {
      "pos": [
        938,
        1087
      ],
      "content": "**URL format:** Code addresses tables in an account using this\naddress format:   \nhttp://`<storage account>`.table.core.windows.net/`<table>`",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>URL format:<ept id=\"p1\">**</ept> Code addresses tables in an account using this",
          "pos": [
            0,
            62
          ]
        },
        {
          "content": "address format:",
          "pos": [
            63,
            78
          ]
        },
        {
          "content": "http://<ph id=\"ph1\">`&lt;storage account&gt;`</ph>.table.core.windows.net/<ph id=\"ph2\">`&lt;table&gt;`</ph>",
          "pos": [
            82,
            141
          ]
        }
      ]
    },
    {
      "pos": [
        1101,
        1226
      ],
      "content": "You can address Azure tables directly using this address with the\nOData protocol. For more information, see [OData.org][]",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "You can address Azure tables directly using this address with the",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "OData protocol. For more information, see [OData.org][]",
          "pos": [
            66,
            121
          ],
          "nodes": [
            {
              "content": "OData protocol.",
              "pos": [
                0,
                15
              ]
            },
            {
              "content": "For more information, see <bpt id=\"p1\">[</bpt>OData.org<ept id=\"p1\">][]</ept>",
              "pos": [
                16,
                55
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        1232,
        1451
      ],
      "content": "**Storage Account:** All access to Azure Storage is done\nthrough a storage account. See [Azure Storage Scalability and Performance Targets](storage-scalability-targets.md) for details about storage account capacity.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Storage Account:<ept id=\"p1\">**</ept> All access to Azure Storage is done",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "through a storage account. See [Azure Storage Scalability and Performance Targets](storage-scalability-targets.md) for details about storage account capacity.",
          "pos": [
            57,
            215
          ],
          "nodes": [
            {
              "content": "through a storage account.",
              "pos": [
                0,
                26
              ]
            },
            {
              "content": "See <bpt id=\"p1\">[</bpt>Azure Storage Scalability and Performance Targets<ept id=\"p1\">](storage-scalability-targets.md)</ept> for details about storage account capacity.",
              "pos": [
                27,
                158
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        1457,
        1764
      ],
      "content": "**Table**: A table is a collection of entities. Tables don't enforce\na schema on entities, which means a single table can contain\nentities that have different sets of properties. The number of tables that a \nstorage account can contain is limited only by the \nstorage account capacity limit.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "**Table**: A table is a collection of entities. Tables don't enforce",
          "pos": [
            0,
            68
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>Table<ept id=\"p1\">**</ept>: A table is a collection of entities.",
              "pos": [
                0,
                47
              ]
            },
            {
              "content": "Tables don't enforce",
              "pos": [
                48,
                68
              ]
            }
          ]
        },
        {
          "content": "a schema on entities, which means a single table can contain",
          "pos": [
            69,
            129
          ]
        },
        {
          "content": "entities that have different sets of properties. The number of tables that a",
          "pos": [
            130,
            206
          ],
          "nodes": [
            {
              "content": "entities that have different sets of properties.",
              "pos": [
                0,
                48
              ]
            },
            {
              "content": "The number of tables that a",
              "pos": [
                49,
                76
              ]
            }
          ]
        },
        {
          "content": "storage account can contain is limited only by the",
          "pos": [
            208,
            258
          ]
        },
        {
          "content": "storage account capacity limit.",
          "pos": [
            260,
            291
          ]
        }
      ]
    },
    {
      "pos": [
        1770,
        1882
      ],
      "content": "**Entity**: An entity is a set of properties, similar to a database\nrow. An entity can be up to 1MB in size.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>Entity<ept id=\"p1\">**</ept>: An entity is a set of properties, similar to a database",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "row. An entity can be up to 1MB in size.",
          "pos": [
            68,
            108
          ],
          "nodes": [
            {
              "content": "row.",
              "pos": [
                0,
                4
              ]
            },
            {
              "content": "An entity can be up to 1MB in size.",
              "pos": [
                5,
                40
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        1888,
        2289
      ],
      "content": "**Properties**: A property is a name-value pair. Each entity can\ninclude up to 252 properties to store data. Each entity also has 3\nsystem properties that specify a partition key, a row key, and a\ntimestamp. Entities with the same partition key can be queried more\nquickly, and inserted/updated in atomic operations. An entity's row\nkey is its unique identifier within a partition.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "**Properties**: A property is a name-value pair. Each entity can",
          "pos": [
            0,
            64
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>: A property is a name-value pair.",
              "pos": [
                0,
                48
              ]
            },
            {
              "content": "Each entity can",
              "pos": [
                49,
                64
              ]
            }
          ]
        },
        {
          "content": "include up to 252 properties to store data. Each entity also has 3",
          "pos": [
            65,
            131
          ],
          "nodes": [
            {
              "content": "include up to 252 properties to store data.",
              "pos": [
                0,
                43
              ]
            },
            {
              "content": "Each entity also has 3",
              "pos": [
                44,
                66
              ]
            }
          ]
        },
        {
          "content": "system properties that specify a partition key, a row key, and a",
          "pos": [
            132,
            196
          ]
        },
        {
          "content": "timestamp. Entities with the same partition key can be queried more",
          "pos": [
            197,
            264
          ],
          "nodes": [
            {
              "content": "timestamp.",
              "pos": [
                0,
                10
              ]
            },
            {
              "content": "Entities with the same partition key can be queried more",
              "pos": [
                11,
                67
              ]
            }
          ]
        },
        {
          "content": "quickly, and inserted/updated in atomic operations. An entity's row",
          "pos": [
            265,
            332
          ],
          "nodes": [
            {
              "content": "quickly, and inserted/updated in atomic operations.",
              "pos": [
                0,
                51
              ]
            },
            {
              "content": "An entity's row",
              "pos": [
                52,
                67
              ]
            }
          ]
        },
        {
          "content": "key is its unique identifier within a partition.",
          "pos": [
            333,
            381
          ]
        }
      ]
    }
  ],
  "content": "## What is the Table Service\n\nThe Azure Table storage service stores large amounts of\nstructured data. The service is a NoSQL datastore which accepts\nauthenticated calls from inside and outside the Azure cloud. Azure\ntables are ideal for storing structured, non-relational data. Common\nuses of the Table service include:\n\n-   Storing TBs of structured data capable of serving web scale\n    applications\n-   Storing datasets that don't require complex joins, foreign keys, or\n    stored procedures and can be denormalized for fast access\n-   Quickly querying data using a clustered index\n-   Accessing data using the OData protocol and LINQ queries with WCF\n    Data Service .NET Libraries\n\nYou can use the Table service to store and query huge sets of\nstructured, non-relational data, and your tables will scale as demand\nincreases.\n\n## Table Service Concepts\n\nThe Table service contains the following components:\n\n![Table1][Table1]\n\n-   **URL format:** Code addresses tables in an account using this\n    address format:   \n    http://`<storage account>`.table.core.windows.net/`<table>`  \n      \n    You can address Azure tables directly using this address with the\n    OData protocol. For more information, see [OData.org][]\n\n-   **Storage Account:** All access to Azure Storage is done\n    through a storage account. See [Azure Storage Scalability and Performance Targets](storage-scalability-targets.md) for details about storage account capacity.\n\n-   **Table**: A table is a collection of entities. Tables don't enforce\n    a schema on entities, which means a single table can contain\n    entities that have different sets of properties. The number of tables that a \n    storage account can contain is limited only by the \n    storage account capacity limit.\n\n-   **Entity**: An entity is a set of properties, similar to a database\n    row. An entity can be up to 1MB in size.\n\n-   **Properties**: A property is a name-value pair. Each entity can\n    include up to 252 properties to store data. Each entity also has 3\n    system properties that specify a partition key, a row key, and a\n    timestamp. Entities with the same partition key can be queried more\n    quickly, and inserted/updated in atomic operations. An entity's row\n    key is its unique identifier within a partition.\n\n\n  \n  [Table1]: ./media/storage-table-concepts-include/table1.png\n  [OData.org]: http://www.odata.org/\n"
}