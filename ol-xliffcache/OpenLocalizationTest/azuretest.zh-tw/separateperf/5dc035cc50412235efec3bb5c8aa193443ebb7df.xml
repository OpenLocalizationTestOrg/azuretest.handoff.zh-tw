{
  "nodes": [
    {
      "content": "Build a web app with Python and Flask using DocumentDB | Microsoft Azure",
      "pos": [
        27,
        99
      ]
    },
    {
      "content": "Learn how to use DocumentDB to store and access data from an Python and Flask (MVC) web application hosted on Azure.",
      "pos": [
        118,
        234
      ]
    },
    {
      "content": "Build a web application with Python and Flask (MVC) using DocumentDB",
      "pos": [
        568,
        636
      ]
    },
    {
      "content": "To highlight how customers can efficiently leverage Azure DocumentDB to",
      "pos": [
        638,
        709
      ]
    },
    {
      "content": "store and query JSON documents, this document provides an end-to-end",
      "pos": [
        710,
        778
      ]
    },
    {
      "content": "tutorial showing how to build a voting web application using Azure DocumentDB.",
      "pos": [
        779,
        857
      ]
    },
    {
      "content": "This tutorial shows you how to use the DocumentDB service provided by",
      "pos": [
        859,
        928
      ]
    },
    {
      "content": "Azure to store and access data from a Python web application hosted on",
      "pos": [
        929,
        999
      ]
    },
    {
      "content": "Azure and presumes that you have some prior experience using Python and",
      "pos": [
        1000,
        1071
      ]
    },
    {
      "content": "Azure websites.",
      "pos": [
        1072,
        1087
      ]
    },
    {
      "content": "This tutorial covers:",
      "pos": [
        1089,
        1110
      ]
    },
    {
      "content": "Creating and provisioning a DocumentDB account.",
      "pos": [
        1115,
        1162
      ]
    },
    {
      "content": "Creating a Python MVC application.",
      "pos": [
        1166,
        1200
      ]
    },
    {
      "content": "Connecting to and using Azure DocumentDB from your web application.",
      "pos": [
        1204,
        1271
      ]
    },
    {
      "content": "Deploying the web application to Azure Websites.",
      "pos": [
        1275,
        1323
      ]
    },
    {
      "content": "By following this tutorial, you will build a simple voting",
      "pos": [
        1325,
        1383
      ]
    },
    {
      "content": "application that allows you to vote for a poll.",
      "pos": [
        1384,
        1431
      ]
    },
    {
      "content": "Screen shot of the todo list web application created by this tutorial",
      "pos": [
        1435,
        1504
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1561,
        1574
      ]
    },
    {
      "content": "Before following the instructions in this article, you should ensure",
      "pos": [
        1576,
        1644
      ]
    },
    {
      "content": "that you have the following installed:",
      "pos": [
        1645,
        1683
      ]
    },
    {
      "pos": [
        1687,
        1801
      ],
      "content": "<bpt id=\"p1\">[</bpt>Visual Studio 2013<ept id=\"p1\">](http://www.visualstudio.com/)</ept> or higher, or Visual Studio Express, which is the free version."
    },
    {
      "pos": [
        1804,
        1849
      ],
      "content": "Python Tools for Visual Studio from <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">][]</ept>."
    },
    {
      "content": "Azure SDK for Visual Studio 2013, version 2.4 or higher available from",
      "pos": [
        1852,
        1922
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>here<ept id=\"p1\">][1]</ept>.",
      "pos": [
        1923,
        1933
      ]
    },
    {
      "pos": [
        1936,
        1962
      ],
      "content": "Python 2.7 from <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">][2]</ept>."
    },
    {
      "pos": [
        1965,
        2025
      ],
      "content": "Microsoft Visual C++ Compiler for Python 2.7 from <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">][3]</ept>."
    },
    {
      "content": "Step 1: Create a DocumentDB database account",
      "pos": [
        2030,
        2074
      ]
    },
    {
      "content": "Let's start by creating a DocumentDB account.",
      "pos": [
        2076,
        2121
      ]
    },
    {
      "content": "If you already have an account, you can skip to <bpt id=\"p1\">[</bpt>Step 2: Create a new Python Flask web application<ept id=\"p1\">](#Step-2:-Create-a-new-Python-Flask-Web-Application)</ept>.",
      "pos": [
        2122,
        2274
      ]
    },
    {
      "content": "We will now walk through how to create a new Python Flask web application from the ground up.",
      "pos": [
        2446,
        2539
      ]
    },
    {
      "content": "Step 2: Create a new Python Flask web application",
      "pos": [
        2544,
        2593
      ]
    },
    {
      "pos": [
        2598,
        2753
      ],
      "content": "Open Visual Studio, click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> -\\&gt; <bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept> -\\&gt; <bpt id=\"p3\">**</bpt>Python<ept id=\"p3\">**</ept> -\\&gt;, <bpt id=\"p4\">**</bpt>Flask Web\nProject<ept id=\"p4\">**</ept>, and then create a new project with the name <bpt id=\"p5\">**</bpt>tutorial<ept id=\"p5\">**</ept>."
    },
    {
      "content": "For those new to Flask, it is a web framework that helps us build web",
      "pos": [
        2759,
        2828
      ]
    },
    {
      "content": "applications in Python faster.",
      "pos": [
        2829,
        2859
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Click here to access Flask tutorials<ept id=\"p1\">][]</ept>.",
      "pos": [
        2860,
        2901
      ]
    },
    {
      "content": "Screen shot of the New Project window in Visual Studio with Python highlighted on the left, Flask Web Project selected in the middle, and the name tutorial in the Name box",
      "pos": [
        2909,
        3080
      ]
    },
    {
      "content": "It will ask you whether you want to",
      "pos": [
        3136,
        3171
      ]
    },
    {
      "content": "install external packages.",
      "pos": [
        3172,
        3198
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Install into a virtual environment<ept id=\"p1\">**</ept>.",
      "pos": [
        3199,
        3244
      ]
    },
    {
      "content": "Be sure to use Python 2.7 as the base environment because PyDocumentDB does not currently support Python 3.x.",
      "pos": [
        3245,
        3354
      ]
    },
    {
      "content": "This will set up the required Python virtual environment for your project.",
      "pos": [
        3356,
        3430
      ]
    },
    {
      "content": "Screen shot of the tutorial - Python Tools for Visual Studio window",
      "pos": [
        3438,
        3505
      ]
    },
    {
      "content": "Step 3: Modify the Python Flask web application",
      "pos": [
        3563,
        3610
      ]
    },
    {
      "content": "Add Flask packages to your project",
      "pos": [
        3616,
        3650
      ]
    },
    {
      "content": "After your project is set up, you need to add certain Flask packages that",
      "pos": [
        3652,
        3725
      ]
    },
    {
      "content": "you will need for your project, including pydocumentdb, the Python package for DocumentDB.",
      "pos": [
        3726,
        3816
      ]
    },
    {
      "pos": [
        3821,
        3906
      ],
      "content": "Open the file named <bpt id=\"p1\">**</bpt>requirements.txt<ept id=\"p1\">**</ept> and replace the contents with the following:"
    },
    {
      "pos": [
        4194,
        4258
      ],
      "content": "Right-click <bpt id=\"p1\">**</bpt>env<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>install from requirements.txt<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Screen shot showing env (Python 2.7) selected with Install from requirements.txt highlighted in the list",
      "pos": [
        4266,
        4370
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> In rare cases, you might see a failure in the output window.",
      "pos": [
        4426,
        4499
      ]
    },
    {
      "content": "If",
      "pos": [
        4500,
        4502
      ]
    },
    {
      "content": "this happens, check if the error is related to cleanup.",
      "pos": [
        4503,
        4558
      ]
    },
    {
      "content": "Sometimes the",
      "pos": [
        4559,
        4572
      ]
    },
    {
      "content": "cleanup fails, but the installation will still be successful (scroll up",
      "pos": [
        4573,
        4644
      ]
    },
    {
      "content": "in the output window to verify this).",
      "pos": [
        4645,
        4682
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"verify-the-virtual-environment\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> If this occurs, it's OK to continue.",
      "pos": [
        4683,
        4765
      ]
    },
    {
      "content": "Verify the virtual environment",
      "pos": [
        4772,
        4802
      ]
    },
    {
      "content": "Let's make sure that everything is installed correctly.",
      "pos": [
        4804,
        4859
      ]
    },
    {
      "content": "Start the website by pressing <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> This launches the Flask development server",
      "pos": [
        4863,
        4942
      ]
    },
    {
      "content": "and starts your web browser.",
      "pos": [
        4943,
        4971
      ]
    },
    {
      "content": "You should see the following page.",
      "pos": [
        4972,
        5006
      ]
    },
    {
      "content": "The empty Flask project displayed in a browser",
      "pos": [
        5014,
        5060
      ]
    },
    {
      "content": "Create database, collection, and document definitions",
      "pos": [
        5118,
        5171
      ]
    },
    {
      "content": "Now let's create your voting application.",
      "pos": [
        5173,
        5214
      ]
    },
    {
      "content": "Add a Python file by right-clicking the folder named <bpt id=\"p1\">**</bpt>tutorial<ept id=\"p1\">**</ept> in the Solution Explorer.",
      "pos": [
        5218,
        5309
      ]
    },
    {
      "content": "Name the file <bpt id=\"p1\">**</bpt>forms.py<ept id=\"p1\">**</ept>.",
      "pos": [
        5311,
        5338
      ]
    },
    {
      "content": "Add the required imports to views.py",
      "pos": [
        5706,
        5742
      ]
    },
    {
      "content": "Add the following import statements at the top in <bpt id=\"p1\">**</bpt>views.py<ept id=\"p1\">**</ept>.",
      "pos": [
        5746,
        5809
      ]
    },
    {
      "content": "These import DocumentDB's PythonSDK and the Flask packages.",
      "pos": [
        5810,
        5869
      ]
    },
    {
      "content": "Create database, collection, and document",
      "pos": [
        5997,
        6038
      ]
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>views.py<ept id=\"p1\">**</ept>.",
      "pos": [
        6042,
        6081
      ]
    },
    {
      "content": "This takes care of creating the",
      "pos": [
        6082,
        6113
      ]
    },
    {
      "content": "database used by the form.",
      "pos": [
        6114,
        6140
      ]
    },
    {
      "content": "Do not delete any of the existing code in",
      "pos": [
        6141,
        6182
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>views.py<ept id=\"p1\">**</ept>.",
      "pos": [
        6183,
        6196
      ]
    },
    {
      "content": "Simply append this to the end.",
      "pos": [
        6197,
        6227
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> The <bpt id=\"p1\">**</bpt>CreateCollection<ept id=\"p1\">**</ept> method takes an optional <bpt id=\"p2\">**</bpt>RequestOptions<ept id=\"p2\">**</ept> as the third parameter.",
      "pos": [
        7608,
        7712
      ]
    },
    {
      "content": "This can be used to specify the Offer Type for the collection.",
      "pos": [
        7713,
        7775
      ]
    },
    {
      "content": "If no offerType value is supplied, then the collection will be created using the default Offer Type.",
      "pos": [
        7776,
        7876
      ]
    },
    {
      "content": "For more information on DocumentDB Offer Types, see <bpt id=\"p1\">[</bpt>Performance levels in DocumentDB<ept id=\"p1\">](documentdb-performance-levels.md)</ept>.",
      "pos": [
        7877,
        7998
      ]
    },
    {
      "content": "Read database, collection, document, and submit form",
      "pos": [
        8005,
        8057
      ]
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>views.py<ept id=\"p1\">**</ept>.",
      "pos": [
        8061,
        8100
      ]
    },
    {
      "content": "This takes care of setting up",
      "pos": [
        8101,
        8130
      ]
    },
    {
      "content": "the form, reading the database, collection, and document.",
      "pos": [
        8131,
        8188
      ]
    },
    {
      "content": "Do not delete",
      "pos": [
        8189,
        8202
      ]
    },
    {
      "content": "any of the existing code in <bpt id=\"p1\">**</bpt>views.py<ept id=\"p1\">**</ept>.",
      "pos": [
        8203,
        8244
      ]
    },
    {
      "content": "Simply append this to the end.",
      "pos": [
        8245,
        8275
      ]
    },
    {
      "content": "Create the HTML files",
      "pos": [
        10400,
        10421
      ]
    },
    {
      "content": "Under the templates folder, add the following html files: create.html, results.html, vote.html.",
      "pos": [
        10423,
        10518
      ]
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>create.html<ept id=\"p1\">**</ept>.",
      "pos": [
        10523,
        10565
      ]
    },
    {
      "content": "It takes care of displaying",
      "pos": [
        10566,
        10593
      ]
    },
    {
      "content": "a message stating that we created a new database, collection, and document.",
      "pos": [
        10594,
        10669
      ]
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>results.html<ept id=\"p1\">**</ept>.",
      "pos": [
        10921,
        10964
      ]
    },
    {
      "content": "It takes care of displaying",
      "pos": [
        10965,
        10992
      ]
    },
    {
      "content": "the results of the poll.",
      "pos": [
        10993,
        11017
      ]
    },
    {
      "content": "Add the following code to <bpt id=\"p1\">**</bpt>vote.html<ept id=\"p1\">**</ept>.",
      "pos": [
        11895,
        11935
      ]
    },
    {
      "content": "It takes care of displaying the",
      "pos": [
        11936,
        11967
      ]
    },
    {
      "content": "poll and accepting the votes.",
      "pos": [
        11968,
        11997
      ]
    },
    {
      "content": "On registering the votes, the control is",
      "pos": [
        11998,
        12038
      ]
    },
    {
      "content": "passed over to views.py where we will recognize the vote cast and",
      "pos": [
        12039,
        12104
      ]
    },
    {
      "content": "append the document accordingly.",
      "pos": [
        12105,
        12137
      ]
    },
    {
      "content": "Replace the contents of <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept> with the following.",
      "pos": [
        12518,
        12576
      ]
    },
    {
      "content": "This",
      "pos": [
        12577,
        12581
      ]
    },
    {
      "content": "serves as the landing page for your application.",
      "pos": [
        12582,
        12630
      ]
    },
    {
      "content": "Add a configuration file and change the \\_\\_init\\_\\_.py",
      "pos": [
        13091,
        13146
      ]
    },
    {
      "content": "Right-click the project name tutorial and add a file, <bpt id=\"p1\">**</bpt>config.py<ept id=\"p1\">**</ept>.",
      "pos": [
        13151,
        13219
      ]
    },
    {
      "content": "This config file is required by forms in Flask.",
      "pos": [
        13220,
        13267
      ]
    },
    {
      "content": "You can use it to provide a",
      "pos": [
        13268,
        13295
      ]
    },
    {
      "content": "secret key as well.",
      "pos": [
        13296,
        13315
      ]
    },
    {
      "content": "This key is not needed for this tutorial though.",
      "pos": [
        13316,
        13364
      ]
    },
    {
      "content": "Add the following code to config.py.",
      "pos": [
        13369,
        13405
      ]
    },
    {
      "content": "Alter the values of <bpt id=\"p1\">**</bpt>DOCUMENTDB\\_HOST<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>DOCUMENTDB\\_KEY<ept id=\"p2\">**</ept>.",
      "pos": [
        13406,
        13471
      ]
    },
    {
      "pos": [
        13837,
        13910
      ],
      "content": "Similarly replace the contents of <bpt id=\"p1\">**</bpt>\\_\\_init\\_\\_.py<ept id=\"p1\">**</ept> with the following."
    },
    {
      "content": "After following the above mentioned steps, this is how Solution",
      "pos": [
        14049,
        14112
      ]
    },
    {
      "content": "Explorer should look.",
      "pos": [
        14113,
        14134
      ]
    },
    {
      "content": "Screen shot of the Visual Studio Solution Explorer window",
      "pos": [
        14142,
        14199
      ]
    },
    {
      "content": "Step 4: Run your application locally",
      "pos": [
        14257,
        14293
      ]
    },
    {
      "content": "Press F5 or click the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> button in Visual Studio, and you should see the",
      "pos": [
        14298,
        14375
      ]
    },
    {
      "content": "following on your screen.",
      "pos": [
        14376,
        14401
      ]
    },
    {
      "content": "Screen shot of the Python + DocumentDB Voting Application displayed in a web browser",
      "pos": [
        14409,
        14493
      ]
    },
    {
      "pos": [
        14550,
        14618
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Create/Clear the Voting Database<ept id=\"p1\">**</ept> to generate the database."
    },
    {
      "content": "Screen shot of the Create Page of the web application",
      "pos": [
        14626,
        14679
      ]
    },
    {
      "pos": [
        14736,
        14780
      ],
      "content": "Then, click <bpt id=\"p1\">**</bpt>Vote<ept id=\"p1\">**</ept> and select your option."
    },
    {
      "content": "Screen shot of the web application with a voting question posed",
      "pos": [
        14788,
        14851
      ]
    },
    {
      "content": "For every vote you cast, it increments the appropriate counter.",
      "pos": [
        14908,
        14971
      ]
    },
    {
      "content": "Screen shot of the Results of the vote page shown",
      "pos": [
        14979,
        15028
      ]
    },
    {
      "content": "Step 5: Deploy the application to Azure Websites",
      "pos": [
        15086,
        15134
      ]
    },
    {
      "content": "Now that you have the complete application working correctly against",
      "pos": [
        15136,
        15204
      ]
    },
    {
      "content": "DocumentDB, we're going to deploy this to Azure Websites.",
      "pos": [
        15205,
        15262
      ]
    },
    {
      "content": "Right-click the project in Solution Explorer (make sure you're not still running it",
      "pos": [
        15267,
        15350
      ]
    },
    {
      "content": "locally) and select <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>.",
      "pos": [
        15351,
        15383
      ]
    },
    {
      "content": "Then, select <bpt id=\"p1\">**</bpt>Microsoft Azure Websites<ept id=\"p1\">**</ept>.",
      "pos": [
        15385,
        15427
      ]
    },
    {
      "content": "Screen shot of the tutorial selected in Solution Explorer, with the Publish option highlighted",
      "pos": [
        15435,
        15529
      ]
    },
    {
      "pos": [
        15586,
        15667
      ],
      "content": "Configure your Azure website by providing your credentials and click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Screen shot of the Publish Web window",
      "pos": [
        15675,
        15712
      ]
    },
    {
      "content": "In a few seconds, Visual Studio will finish publishing your web",
      "pos": [
        15769,
        15832
      ]
    },
    {
      "content": "application and launch a browser where you can see your handy work",
      "pos": [
        15833,
        15899
      ]
    },
    {
      "content": "running in Azure!",
      "pos": [
        15900,
        15917
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        15922,
        15932
      ]
    },
    {
      "content": "Congratulations!",
      "pos": [
        15934,
        15950
      ]
    },
    {
      "content": "You have just built your first Python application using",
      "pos": [
        15951,
        16006
      ]
    },
    {
      "content": "Azure DocumentDB and published it to Azure Websites.",
      "pos": [
        16007,
        16059
      ]
    },
    {
      "content": "We'd like to know if you found this tutorial helpful, so please use the voting buttons at the beginning or end of the topic to let us know how we did.",
      "pos": [
        16061,
        16211
      ]
    },
    {
      "content": "This topic is actively being updated, so we want your feedback on improving it.",
      "pos": [
        16212,
        16291
      ]
    },
    {
      "content": "If you'd like us to contact you, feel free to include your email address in the comment for follow-up.",
      "pos": [
        16292,
        16394
      ]
    },
    {
      "pos": [
        16398,
        16551
      ],
      "content": "To add additional functionality to your application, review the APIs available in the <bpt id=\"p1\">[</bpt>DocumentDB Python SDK<ept id=\"p1\">](https://pypi.python.org/pypi/pydocumentdb)</ept>."
    },
    {
      "content": "test",
      "pos": [
        17077,
        17081
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Build a web app with Python and Flask using DocumentDB | Microsoft Azure\"\n    description=\"Learn how to use DocumentDB to store and access data from an Python and Flask (MVC) web application hosted on Azure.\"\n    services=\"documentdb\"\n    documentationCenter=\"python\"\n    authors=\"ryancrawcour\"\n    manager=\"jhubbard\"\n    editor=\"cgronlun\"/>\n\n<tags\n    ms.service=\"documentdb\"\n    ms.workload=\"data-management\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"python\"\n    ms.topic=\"hero-article\"\n    ms.date=\"09/03/2015\"\n    ms.author=\"ryancraw\"/>\n\n# Build a web application with Python and Flask (MVC) using DocumentDB\n\nTo highlight how customers can efficiently leverage Azure DocumentDB to\nstore and query JSON documents, this document provides an end-to-end\ntutorial showing how to build a voting web application using Azure DocumentDB.\n\nThis tutorial shows you how to use the DocumentDB service provided by\nAzure to store and access data from a Python web application hosted on\nAzure and presumes that you have some prior experience using Python and\nAzure websites.\n\nThis tutorial covers:\n\n1. Creating and provisioning a DocumentDB account.\n2. Creating a Python MVC application.\n3. Connecting to and using Azure DocumentDB from your web application.\n4. Deploying the web application to Azure Websites.\n\nBy following this tutorial, you will build a simple voting\napplication that allows you to vote for a poll.\n\n![Screen shot of the todo list web application created by this tutorial](./media/documentdb-python-application/image1.png)\n\n\n## Prerequisites\n\nBefore following the instructions in this article, you should ensure\nthat you have the following installed:\n\n- [Visual Studio 2013](http://www.visualstudio.com/) or higher, or Visual Studio Express, which is the free version.\n- Python Tools for Visual Studio from [here][].\n- Azure SDK for Visual Studio 2013, version 2.4 or higher available from\n[here][1].\n- Python 2.7 from [here][2].\n- Microsoft Visual C++ Compiler for Python 2.7 from [here][3].\n\n## Step 1: Create a DocumentDB database account\n\nLet's start by creating a DocumentDB account. If you already have an account, you can skip to [Step 2: Create a new Python Flask web application](#Step-2:-Create-a-new-Python-Flask-Web-Application).\n\n[AZURE.INCLUDE [documentdb-create-dbaccount](../../includes/documentdb-create-dbaccount.md)]\n\n[AZURE.INCLUDE [documentdb-keys](../../includes/documentdb-keys.md)]\n\n<br/>\nWe will now walk through how to create a new Python Flask web application from the ground up.\n\n## Step 2: Create a new Python Flask web application\n\n1. Open Visual Studio, click **File** -\\> **New Project** -\\> **Python** -\\>, **Flask Web\nProject**, and then create a new project with the name **tutorial**.\n\n    For those new to Flask, it is a web framework that helps us build web\napplications in Python faster. [Click here to access Flask tutorials][].\n\n    ![Screen shot of the New Project window in Visual Studio with Python highlighted on the left, Flask Web Project selected in the middle, and the name tutorial in the Name box](./media/documentdb-python-application/image9.png)\n\n2. It will ask you whether you want to\ninstall external packages. Click **Install into a virtual environment**. Be sure to use Python 2.7 as the base environment because PyDocumentDB does not currently support Python 3.x.  This will set up the required Python virtual environment for your project.\n\n    ![Screen shot of the tutorial - Python Tools for Visual Studio window](./media/documentdb-python-application/image10.png)\n\n\n## Step 3: Modify the Python Flask web application\n\n### Add Flask packages to your project\n\nAfter your project is set up, you need to add certain Flask packages that\nyou will need for your project, including pydocumentdb, the Python package for DocumentDB.\n\n1. Open the file named **requirements.txt** and replace the contents with the following:\n\n        flask==0.9\n        flask-mail==0.7.6\n        sqlalchemy==0.7.9\n        flask-sqlalchemy==0.16\n        sqlalchemy-migrate==0.7.2\n        flask-whooshalchemy==0.55a\n        flask-wtf==0.8.4\n        pytz==2013b\n        flask-babel==0.8\n        flup\n        pydocumentdb>=1.0.0\n\n2. Right-click **env** and click **install from requirements.txt**.\n\n    ![Screen shot showing env (Python 2.7) selected with Install from requirements.txt highlighted in the list](./media/documentdb-python-application/image11.png)\n\n> [AZURE.NOTE] In rare cases, you might see a failure in the output window. If\nthis happens, check if the error is related to cleanup. Sometimes the\ncleanup fails, but the installation will still be successful (scroll up\nin the output window to verify this).\n<a name=\"verify-the-virtual-environment\"></a> If this occurs, it's OK to continue.\n\n\n### Verify the virtual environment\n\nLet's make sure that everything is installed correctly.\n\n- Start the website by pressing **F5** This launches the Flask development server\nand starts your web browser. You should see the following page.\n\n    ![The empty Flask project displayed in a browser](./media/documentdb-python-application/image12.png)\n\n### Create database, collection, and document definitions\n\nNow let's create your voting application.\n\n- Add a Python file by right-clicking the folder named **tutorial** in the Solution Explorer.  Name the file **forms.py**.  \n\n        from flask.ext.wtf import Form\n        from wtforms import RadioField\n\n        class VoteForm(Form):\n            deploy_preference  = RadioField('Deployment Preference', choices=[\n                ('Web Site', 'Web Site'),\n                ('Cloud Service', 'Cloud Service'),\n                ('Virtual Machine', 'Virtual Machine')], default='Web Site')\n\n### Add the required imports to views.py\n\n- Add the following import statements at the top in **views.py**. These import DocumentDB's PythonSDK and the Flask packages.\n\n        from forms import VoteForm\n        import config\n        import pydocumentdb.document_client as document_client\n\n\n### Create database, collection, and document\n\n- Add the following code to **views.py**. This takes care of creating the\ndatabase used by the form. Do not delete any of the existing code in\n**views.py**. Simply append this to the end.\n\n        @app.route('/create')\n        def create():\n            \"\"\"Renders the contact page.\"\"\"\n            client = document_client.DocumentClient(config.DOCUMENTDB_HOST, {'masterKey': config.DOCUMENTDB_KEY})\n\n            # Attempt to delete the database.  This allows this to be used to recreate as well as create\n            try:\n                db = next((data for data in client.ReadDatabases() if data['id'] == config.DOCUMENTDB_DATABASE))\n                client.DeleteDatabase(db['_self'])\n            except:\n                pass\n\n            # Create database\n            db = client.CreateDatabase({ 'id': config.DOCUMENTDB_DATABASE })\n            # Create collection\n            collection = client.CreateCollection(db['_self'],{ 'id': config.DOCUMENTDB_COLLECTION }, { 'offerType': 'S1' })\n            # Create document\n            document = client.CreateDocument(collection['_self'],\n                { 'id': config.DOCUMENTDB_DOCUMENT,\n                'Web Site': 0,\n                'Cloud Service': 0,\n                'Virtual Machine': 0,\n                'name': config.DOCUMENTDB_DOCUMENT })\n\n            return render_template(\n                'create.html',\n                title='Create Page',\n                year=datetime.now().year,\n                message='You just created a new database, collection, and document.  Your old votes have been deleted')\n\n> [AZURE.TIP] The **CreateCollection** method takes an optional **RequestOptions** as the third parameter. This can be used to specify the Offer Type for the collection. If no offerType value is supplied, then the collection will be created using the default Offer Type. For more information on DocumentDB Offer Types, see [Performance levels in DocumentDB](documentdb-performance-levels.md).\n>\n### Read database, collection, document, and submit form\n\n- Add the following code to **views.py**. This takes care of setting up\nthe form, reading the database, collection, and document. Do not delete\nany of the existing code in **views.py**. Simply append this to the end.\n\n        @app.route('/vote', methods=['GET', 'POST'])\n        def vote():\n            form = VoteForm()\n            replaced_document ={}\n            if form.validate_on_submit(): # is user submitted vote  \n                client = document_client.DocumentClient(config.DOCUMENTDB_HOST, {'masterKey': config.DOCUMENTDB_KEY})\n\n                # Read databases and take the first since the id should not be duplicated.\n                db = next((data for data in client.ReadDatabases() if data['id'] == config.DOCUMENTDB_DATABASE))\n\n                # Read collections and take the first since the id should not be duplicated.\n                coll = next((coll for coll in client.ReadCollections(db['_self']) if coll['id'] == config.DOCUMENTDB_COLLECTION))\n\n                # Read documents and take the first since the id should not be duplicated.\n                doc = next((doc for doc in client.ReadDocuments(coll['_self']) if doc['id'] == config.DOCUMENTDB_DOCUMENT))\n\n                # Take the data from the deploy_preference and increment your database\n                doc[form.deploy_preference.data] = doc[form.deploy_preference.data] + 1\n                replaced_document = client.ReplaceDocument(doc['_self'], doc)\n\n                # Create a model to pass to results.html\n                class VoteObject:\n                    choices = dict()\n                    total_votes = 0\n\n                vote_object = VoteObject()\n                vote_object.choices = {\n                    \"Web Site\" : doc['Web Site'],\n                    \"Cloud Service\" : doc['Cloud Service'],\n                    \"Virtual Machine\" : doc['Virtual Machine']\n                }\n                vote_object.total_votes = sum(vote_object.choices.values())\n\n                return render_template(\n                    'results.html',\n                    year=datetime.now().year,\n                    vote_object = vote_object)\n\n            else :\n                return render_template(\n                    'vote.html',\n                    title = 'Vote',\n                    year=datetime.now().year,\n                    form = form)\n\n\n### Create the HTML files\n\nUnder the templates folder, add the following html files: create.html, results.html, vote.html.\n\n1. Add the following code to **create.html**. It takes care of displaying\na message stating that we created a new database, collection, and document.\n\n        {% extends \"layout.html\" %}\n        {% block content %}\n        <h2>{{ title }}.</h2>\n        <h3>{{ message }}</h3>\n        <p><a href=\"{{ url_for('vote') }}\" class=\"btn btn-primary btn-large\">Vote &raquo;</a></p>\n        {% endblock %}\n\n2. Add the following code to **results.html**. It takes care of displaying\nthe results of the poll.\n\n        {% extends \"layout.html\" %}\n        {% block content %}\n        <h2>Results of the vote</h2>\n        <br />\n\n        {% for choice in vote_object.choices %}\n        <div class=\"row\">\n            <div class=\"col-sm-5\">{{choice}}</div>\n            <div class=\"col-sm-5\">\n                <div class=\"progress\">\n                    <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{vote_object.choices[choice]}}\" aria-valuemin=\"0\"\n                     aria-valuemax=\"{{vote_object.total_votes}}\" style=\"width: {{(vote_object.choices[choice]/vote_object.total_votes)*100}}%;\">\n                        {{vote_object.choices[choice]}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        {% endfor %}\n\n        <br />\n        <a class=\"btn btn-primary\" href=\"{{ url_for('vote') }}\">Vote again?</a>\n        {% endblock %}\n\n3. Add the following code to **vote.html**. It takes care of displaying the\npoll and accepting the votes. On registering the votes, the control is\npassed over to views.py where we will recognize the vote cast and\nappend the document accordingly.\n\n        {% extends \"layout.html\" %}\n        {% block content %}\n        <h2>What is your favorite way to host an application on Azure?</h2>\n        <form action=\"\" method=\"post\" name=\"vote\">\n            {{form.hidden_tag()}}\n            {{form.deploy_preference}}\n            <button class=\"btn btn-primary\" type=\"submit\">Vote</button>\n        </form>\n        {% endblock %}\n\n4. Replace the contents of **index.html** with the following. This\nserves as the landing page for your application.\n\n        {% extends \"layout.html\" %}\n        {% block content %}\n        <h2>Python + DocumentDB Voting Application.</h2>\n        <h3>This is a sample DocumentDB voting application using PyDocumentDB</h3>\n        <p><a href=\"{{ url_for('create') }}\" class=\"btn btn-primary btn-large\">Create/Clear the Voting Database &raquo;</a></p>\n        <p><a href=\"{{ url_for('vote') }}\" class=\"btn btn-primary btn-large\">Vote &raquo;</a></p>\n        {% endblock %}\n\n\n### Add a configuration file and change the \\_\\_init\\_\\_.py\n\n1. Right-click the project name tutorial and add a file, **config.py**.\nThis config file is required by forms in Flask. You can use it to provide a\nsecret key as well. This key is not needed for this tutorial though.\n\n2. Add the following code to config.py. Alter the values of **DOCUMENTDB\\_HOST** and **DOCUMENTDB\\_KEY**.\n\n        CSRF_ENABLED = True\n        SECRET_KEY = 'you-will-never-guess'\n\n        DOCUMENTDB_HOST = 'https://YOUR_DOCUMENTDB_NAME.documents.azure.com:443/'\n        DOCUMENTDB_KEY = 'YOUR_SECRET_KEY_ENDING_IN_=='\n\n        DOCUMENTDB_DATABASE = 'voting database'\n        DOCUMENTDB_COLLECTION = 'voting collection'\n        DOCUMENTDB_DOCUMENT = 'voting document'\n\n3. Similarly replace the contents of **\\_\\_init\\_\\_.py** with the following.\n\n        from flask import Flask\n        app = Flask(__name__)\n        app.config.from_object('config')\n        import tutorial.views\n\n4. After following the above mentioned steps, this is how Solution\nExplorer should look.\n\n    ![Screen shot of the Visual Studio Solution Explorer window](./media/documentdb-python-application/image15.png)\n\n\n## Step 4: Run your application locally\n\n1. Press F5 or click the **Run** button in Visual Studio, and you should see the\nfollowing on your screen.\n\n    ![Screen shot of the Python + DocumentDB Voting Application displayed in a web browser](./media/documentdb-python-application/image16.png)\n\n2. Click **Create/Clear the Voting Database** to generate the database.\n\n    ![Screen shot of the Create Page of the web application](./media/documentdb-python-application/image17.png)\n\n3. Then, click **Vote** and select your option.\n\n    ![Screen shot of the web application with a voting question posed](./media/documentdb-python-application/image18.png)\n\n4. For every vote you cast, it increments the appropriate counter.\n\n    ![Screen shot of the Results of the vote page shown](./media/documentdb-python-application/image19.png)\n\n\n## Step 5: Deploy the application to Azure Websites\n\nNow that you have the complete application working correctly against\nDocumentDB, we're going to deploy this to Azure Websites.\n\n1. Right-click the project in Solution Explorer (make sure you're not still running it\nlocally) and select **Publish**.  Then, select **Microsoft Azure Websites**.\n\n    ![Screen shot of the tutorial selected in Solution Explorer, with the Publish option highlighted](./media/documentdb-python-application/image20.png)\n\n2. Configure your Azure website by providing your credentials and click **Publish**.\n\n    ![Screen shot of the Publish Web window](./media/documentdb-python-application/image21.png)\n\n3. In a few seconds, Visual Studio will finish publishing your web\napplication and launch a browser where you can see your handy work\nrunning in Azure!\n\n## Next steps\n\nCongratulations! You have just built your first Python application using\nAzure DocumentDB and published it to Azure Websites.\n\nWe'd like to know if you found this tutorial helpful, so please use the voting buttons at the beginning or end of the topic to let us know how we did. This topic is actively being updated, so we want your feedback on improving it. If you'd like us to contact you, feel free to include your email address in the comment for follow-up.  \n\nTo add additional functionality to your application, review the APIs available in the [DocumentDB Python SDK](https://pypi.python.org/pypi/pydocumentdb).\n\n  [Click here to access Flask tutorials]: http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\n  [Visual Studio Express]: http://www.visualstudio.com/products/visual-studio-express-vs.aspx\n  [here]: http://aka.ms/ptvs\n  [1]: http://go.microsoft.com/fwlink/?linkid=254281&clcid=0x409\n  [2]: https://www.python.org/downloads/windows/\n  [3]: http://aka.ms/vcpython27\n  [Microsoft Web Platform Installer]: http://www.microsoft.com/web/downloads/platform.aspx\n  [Azure portal]: http://portal.azure.com\n\ntest\n"
}