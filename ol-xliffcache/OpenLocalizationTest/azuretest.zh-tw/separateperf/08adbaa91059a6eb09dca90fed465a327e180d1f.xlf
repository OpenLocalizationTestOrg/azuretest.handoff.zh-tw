<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>App Model v2.0 | Microsoft Azure</source>
          <target state="new">App Model v2.0 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The types of apps and scenarios supported by the Azure AD App Model v2.0 Public Preview.</source>
          <target state="new">The types of apps and scenarios supported by the Azure AD App Model v2.0 Public Preview.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>App model v2.0 preview: Types of apps</source>
          <target state="new">App model v2.0 preview: Types of apps</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The v2.0 app model supports authentication for a variety of modern app architectures, all of which are based on the industry standard protocols <bpt id="p1">[</bpt>OAuth 2.0<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept> and/or <bpt id="p2">[</bpt>OpenID Connect<ept id="p2">](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</source>
          <target state="new">The v2.0 app model supports authentication for a variety of modern app architectures, all of which are based on the industry standard protocols <bpt id="p1">[</bpt>OAuth 2.0<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept> and/or <bpt id="p2">[</bpt>OpenID Connect<ept id="p2">](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This doc briefly describes the types of apps you can build, independent of the language or platform you prefer.</source>
          <target state="new">This doc briefly describes the types of apps you can build, independent of the language or platform you prefer.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It will help you understand the high level scenarios before you <bpt id="p1">[</bpt>jump right into the code<ept id="p1">](active-directory-appmodel-v2-overview.md#getting-started)</ept>.</source>
          <target state="new">It will help you understand the high level scenarios before you <bpt id="p1">[</bpt>jump right into the code<ept id="p1">](active-directory-appmodel-v2-overview.md#getting-started)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This information applies to the v2.0 app model public preview.</source>
          <target state="new">This information applies to the v2.0 app model public preview.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</source>
          <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="new">The Basics</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Every app that uses the v2.0 app model will need to be registered at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>.</source>
          <target state="new">Every app that uses the v2.0 app model will need to be registered at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The app registration process will collect &amp; assign a few values to your app:</source>
          <target state="new">The app registration process will collect &amp; assign a few values to your app:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> that uniquely identifies your app</source>
          <target state="new">An <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> that uniquely identifies your app</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> that can be used to direct responses back to your app</source>
          <target state="new">A <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> that can be used to direct responses back to your app</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A few other scenario-specific values.</source>
          <target state="new">A few other scenario-specific values.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more detail, learn how to <bpt id="p1">[</bpt>register an app<ept id="p1">](active-directory-v2-app-registration.md)</ept>.</source>
          <target state="new">For more detail, learn how to <bpt id="p1">[</bpt>register an app<ept id="p1">](active-directory-v2-app-registration.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once registered, the app communicates with Azure AD my sending requests to the v2.0 endpoint:</source>
          <target state="new">Once registered, the app communicates with Azure AD my sending requests to the v2.0 endpoint:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Every app's interaction with the v2.0 endpoint will follow a similar high level pattern:</source>
          <target state="new">Every app's interaction with the v2.0 endpoint will follow a similar high level pattern:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The app directs the end-user to the v2.0 endpoint for sign-in.</source>
          <target state="new">The app directs the end-user to the v2.0 endpoint for sign-in.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The user authenticates, entering their username and password or otherwise.</source>
          <target state="new">The user authenticates, entering their username and password or otherwise.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The user authorizes the app to act on their behalf, by granting permissions the app requests.</source>
          <target state="new">The user authorizes the app to act on their behalf, by granting permissions the app requests.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The app receives a security token of some sort from the v2.0 endpoint.</source>
          <target state="new">The app receives a security token of some sort from the v2.0 endpoint.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The app uses the security token to access protected information, or a resource.</source>
          <target state="new">The app uses the security token to access protected information, or a resource.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The resource server validates the security token to ensure access can be granted.</source>
          <target state="new">The resource server validates the security token to ensure access can be granted.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The app refreshes the security token periodically.</source>
          <target state="new">The app refreshes the security token periodically.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each of these seven steps will differ slightly based on the type of app you're building, and we have open source libraries that take care of the details for you.</source>
          <target state="new">Each of these seven steps will differ slightly based on the type of app you're building, and we have open source libraries that take care of the details for you.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can learn more about <bpt id="p1">[</bpt><ept id="p1">permissions, consent, and scopes](active-directory-v2-scopes.md)</ept>, or read on to explore some concrete examples.</source>
          <target state="new">You can learn more about <bpt id="p1">[</bpt><ept id="p1">permissions, consent, and scopes](active-directory-v2-scopes.md)</ept>, or read on to explore some concrete examples.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Web Apps
For web apps (.NET, PHP, Java, Ruby, Python, Node, etc) that are accessed through a browser, the v2.0 app model supports user sign-in using <bpt id="p1">[</bpt><ept id="p1">OpenID Connect](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</source>
          <target state="new">Web Apps
For web apps (.NET, PHP, Java, Ruby, Python, Node, etc) that are accessed through a browser, the v2.0 app model supports user sign-in using <bpt id="p1">[</bpt><ept id="p1">OpenID Connect](active-directory-v2-protocols.md#openid-connect-sign-in-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In OpenID Connect the web app receives an <ph id="ph1">`id_token`</ph>, a security token that verifies the user's identity and provides information about the user in the form of claims:

```
// Partial raw id_token
eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImtyaU1QZG1Cd...

// Partial content of a decoded id_token
{
    "name": "John Smith",
    "email": "john.smith@gmail.com",
    "oid": "d9674823-dffc-4e3f-a6eb-62fe4bd48a58"
    ...
}
```

You can learn about all of the types of tokens and claims available to an app in the <bpt id="p1">[</bpt><ept id="p1">v2.0 token reference](active-directory-v2-tokens.md)</ept>.</source>
          <target state="new">In OpenID Connect the web app receives an <ph id="ph1">`id_token`</ph>, a security token that verifies the user's identity and provides information about the user in the form of claims:

```
// Partial raw id_token
eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImtyaU1QZG1Cd...

// Partial content of a decoded id_token
{
    "name": "John Smith",
    "email": "john.smith@gmail.com",
    "oid": "d9674823-dffc-4e3f-a6eb-62fe4bd48a58"
    ...
}
```

You can learn about all of the types of tokens and claims available to an app in the <bpt id="p1">[</bpt><ept id="p1">v2.0 token reference](active-directory-v2-tokens.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In web server apps, the sign-in authentication flow takes these high level steps:

<ph id="ph1">![Web App Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_webapp.png)</ph>

The validation of the id_token using a public signing key received from the v2.0 endpoint is sufficient to ensure the user's identity, and set a session cookie that can be used to identify the user on subsequent page requests.</source>
          <target state="new">In web server apps, the sign-in authentication flow takes these high level steps:

<ph id="ph1">![Web App Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_webapp.png)</ph>

The validation of the id_token using a public signing key received from the v2.0 endpoint is sufficient to ensure the user's identity, and set a session cookie that can be used to identify the user on subsequent page requests.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To see this scenario in action, try out one of the web app sign-in code samples in our <bpt id="p1">[</bpt><ept id="p1">Getting Started](active-directory-appmodel-v2-overview.md#getting-started)</ept> section.</source>
          <target state="new">To see this scenario in action, try out one of the web app sign-in code samples in our <bpt id="p1">[</bpt><ept id="p1">Getting Started](active-directory-appmodel-v2-overview.md#getting-started)</ept> section.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In addition to simple sign-in, a web server app might also need to access some other web service such as a REST API.</source>
          <target state="new">In addition to simple sign-in, a web server app might also need to access some other web service such as a REST API.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this case the web server app can engage in a combined OpenID Connect &amp; OAuth 2.0 flow, using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Authorization Code flow](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</source>
          <target state="new">In this case the web server app can engage in a combined OpenID Connect &amp; OAuth 2.0 flow, using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Authorization Code flow](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This scenario is covered below in the <bpt id="p1">[</bpt><ept id="p1">Web APIs section](#web-apis)</ept>, and in our <bpt id="p2">[</bpt><ept id="p2">WebApp-WebAPI Getting Started topic](active-directory-v2-devquickstarts-webapp-webapi-dotnet.md)</ept>.</source>
          <target state="new">This scenario is covered below in the <bpt id="p1">[</bpt><ept id="p1">Web APIs section](#web-apis)</ept>, and in our <bpt id="p2">[</bpt><ept id="p2">WebApp-WebAPI Getting Started topic](active-directory-v2-devquickstarts-webapp-webapi-dotnet.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Web APIs
You can use the v2.0 app model to secure web services as well, such as your app's RESTful Web API.</source>
          <target state="new">Web APIs
You can use the v2.0 app model to secure web services as well, such as your app's RESTful Web API.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Instead of id_tokens and session cookies, Web APIs use OAuth 2.0 access_tokens to secure their data and authenticate incoming requests.</source>
          <target state="new">Instead of id_tokens and session cookies, Web APIs use OAuth 2.0 access_tokens to secure their data and authenticate incoming requests.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The caller of a Web API appends an access_token in the authorization header of an HTTP request:

```
GET /api/items HTTP/1.1
Host: www.mywebapi.com
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6...
Accept: application/json
...
```

The Web API can then use the access_token to verify the API caller's identity and extract information about the caller from claims that are encoded in the access_token.</source>
          <target state="new">The caller of a Web API appends an access_token in the authorization header of an HTTP request:

```
GET /api/items HTTP/1.1
Host: www.mywebapi.com
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6...
Accept: application/json
...
```

The Web API can then use the access_token to verify the API caller's identity and extract information about the caller from claims that are encoded in the access_token.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can learn about all of the types of tokens and claims available to an app in the <bpt id="p1">[</bpt><ept id="p1">v2.0 token reference](active-directory-v2-tokens.md)</ept>.</source>
          <target state="new">You can learn about all of the types of tokens and claims available to an app in the <bpt id="p1">[</bpt><ept id="p1">v2.0 token reference](active-directory-v2-tokens.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A Web API can give users the power to opt-in/opt-out of certain functionality or data by exposing permissions, otherwise known as <bpt id="p1">[</bpt><ept id="p1">scopes](active-directory-v2-scopes.md)</ept>.</source>
          <target state="new">A Web API can give users the power to opt-in/opt-out of certain functionality or data by exposing permissions, otherwise known as <bpt id="p1">[</bpt><ept id="p1">scopes](active-directory-v2-scopes.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For a calling app to acquire permission to a scope, the user must consent to the scope during an flow.</source>
          <target state="new">For a calling app to acquire permission to a scope, the user must consent to the scope during an flow.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The v2.0 endpoint will take care of asking the user for permission, and recording those permissions in all access_tokens that the Web API receives.</source>
          <target state="new">The v2.0 endpoint will take care of asking the user for permission, and recording those permissions in all access_tokens that the Web API receives.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>All the Web API needs to worry about is validating the access_tokens it receives on each call and performing the proper authorization checks.</source>
          <target state="new">All the Web API needs to worry about is validating the access_tokens it receives on each call and performing the proper authorization checks.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A Web API can receive access_tokens from all types of apps, including web server apps, desktop and mobile apps, single page apps, server side daemons, and even other Web APIs.</source>
          <target state="new">A Web API can receive access_tokens from all types of apps, including web server apps, desktop and mobile apps, single page apps, server side daemons, and even other Web APIs.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As an example, let's look at the complete flow for a web server app that calls a Web API.</source>
          <target state="new">As an example, let's look at the complete flow for a web server app that calls a Web API.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![Web App Web API Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_webapp_webapi.png)</ph>

To learn more about authorization_codes, refresh_tokens, and the detailed steps of getting access_tokens, read about the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 protocol](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</source>
          <target state="new"><ph id="ph1">![Web App Web API Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_webapp_webapi.png)</ph>

To learn more about authorization_codes, refresh_tokens, and the detailed steps of getting access_tokens, read about the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 protocol](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To learn how to secure a Web API with the v2.0 app model and OAuth 2.0 access_tokens, check out the Web API code samples in our <bpt id="p1">[</bpt><ept id="p1">Getting Started section](active-directory-appmodel-v2-overview.md#getting-started)</ept>.</source>
          <target state="new">To learn how to secure a Web API with the v2.0 app model and OAuth 2.0 access_tokens, check out the Web API code samples in our <bpt id="p1">[</bpt><ept id="p1">Getting Started section](active-directory-appmodel-v2-overview.md#getting-started)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Mobile and Native Apps
Apps that are installed on a device, such as mobile and desktop apps, often need to access backend services or Web APIs that store data and perform various functions on behalf of a user.</source>
          <target state="new">Mobile and Native Apps
Apps that are installed on a device, such as mobile and desktop apps, often need to access backend services or Web APIs that store data and perform various functions on behalf of a user.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These apps can add sign-in and authorization to backend services using the v2.0 model and the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Authorization Code flow](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</source>
          <target state="new">These apps can add sign-in and authorization to backend services using the v2.0 model and the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Authorization Code flow](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this flow, a the app receives an authorization_code from the v2.0 endpoint upon user sign-in, which represents the app's permission to call backend services on behalf of the currently signed-in user.</source>
          <target state="new">In this flow, a the app receives an authorization_code from the v2.0 endpoint upon user sign-in, which represents the app's permission to call backend services on behalf of the currently signed-in user.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The app can then exchange the authoriztion_code in the background for an OAuth 2.0 access_token and a refresh_token.</source>
          <target state="new">The app can then exchange the authoriztion_code in the background for an OAuth 2.0 access_token and a refresh_token.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The app can use the access_token to authenticate to Web APIs in HTTP requests, and can use the refresh_token to get new access_tokens when older ones expire.</source>
          <target state="new">The app can use the access_token to authenticate to Web APIs in HTTP requests, and can use the refresh_token to get new access_tokens when older ones expire.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![Native App Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_native.png)</ph><ph id="ph2">

##</ph> Current Preview Limitations
These types of apps are not currently supported by the v2.0 app model preview, but are on the roadmap to be supported in time for general availability.</source>
          <target state="new"><ph id="ph1">![Native App Swimlanes Image](../media/active-directory-v2-flows/convergence_scenarios_native.png)</ph><ph id="ph2">

##</ph> Current Preview Limitations
These types of apps are not currently supported by the v2.0 app model preview, but are on the roadmap to be supported in time for general availability.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Additional limitations and restrictions for the v2.0 app model public preview are described in the <bpt id="p1">[</bpt><ept id="p1">v2.0 preview limitations article](active-directory-v2-limitations.md)</ept>.</source>
          <target state="new">Additional limitations and restrictions for the v2.0 app model public preview are described in the <bpt id="p1">[</bpt><ept id="p1">v2.0 preview limitations article](active-directory-v2-limitations.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Single Page Apps (Javascript)
Many modern apps have a Single Page App front-end written primarily in javascript and often using a SPA frameworks such as AngularJS, Ember.js, Durandal, etc.  The generally available Azure AD service supports these apps using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Implicit Flow](active-directory-v2-protocols.md#oauth2-implicit-flow)</ept> - however, this flow is not yet available in the v2.0 app model.</source>
          <target state="new">Single Page Apps (Javascript)
Many modern apps have a Single Page App front-end written primarily in javascript and often using a SPA frameworks such as AngularJS, Ember.js, Durandal, etc.  The generally available Azure AD service supports these apps using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 Implicit Flow](active-directory-v2-protocols.md#oauth2-implicit-flow)</ept> - however, this flow is not yet available in the v2.0 app model.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It will be in short order.</source>
          <target state="new">It will be in short order.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you're anxious to get a SPA working with the v2.0 app model, you can implement authentication using the <bpt id="p1">[</bpt><ept id="p1">web server app flow](#web-apps)</ept> described above.</source>
          <target state="new">If you're anxious to get a SPA working with the v2.0 app model, you can implement authentication using the <bpt id="p1">[</bpt><ept id="p1">web server app flow](#web-apps)</ept> described above.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>But this is not the recommended approach, and documentation for this scenario will be limited.</source>
          <target state="new">But this is not the recommended approach, and documentation for this scenario will be limited.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you'd like to get a feel for the SPA scenario, you can check out the <bpt id="p1">[</bpt><ept id="p1">generally available Azure AD SPA code sample](active-directory-devquickstarts-angular.md)</ept>.</source>
          <target state="new">If you'd like to get a feel for the SPA scenario, you can check out the <bpt id="p1">[</bpt><ept id="p1">generally available Azure AD SPA code sample](active-directory-devquickstarts-angular.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Daemons/Server Side Apps
Apps that contain long running processes or that operate without the presence of a user also need a way to access secured resources, such as Web APIs.</source>
          <target state="new">Daemons/Server Side Apps
Apps that contain long running processes or that operate without the presence of a user also need a way to access secured resources, such as Web APIs.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These apps can authenticate and get tokens using the app's identity (rather than a user's delegated identity) using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 client credentials flow](active-directory-v2-protocols.md#oauth2-client-credentials-grant-flow)</ept>.</source>
          <target state="new">These apps can authenticate and get tokens using the app's identity (rather than a user's delegated identity) using the <bpt id="p1">[</bpt><ept id="p1">OAuth 2.0 client credentials flow](active-directory-v2-protocols.md#oauth2-client-credentials-grant-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This flow is not currently supported by the v2.0 app model - which is to say that apps can only get tokens after an interactive user sign-in flow has occurred.</source>
          <target state="new">This flow is not currently supported by the v2.0 app model - which is to say that apps can only get tokens after an interactive user sign-in flow has occurred.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The client credentials flow will be added in the near future.</source>
          <target state="new">The client credentials flow will be added in the near future.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you would like to see the client credentials flow in the generally available Azure AD service, check out the <bpt id="p1">[</bpt><ept id="p1">Daemon sample on GitHub](https://github.com/AzureADSamples/Daemon-DotNet)</ept>.</source>
          <target state="new">If you would like to see the client credentials flow in the generally available Azure AD service, check out the <bpt id="p1">[</bpt><ept id="p1">Daemon sample on GitHub](https://github.com/AzureADSamples/Daemon-DotNet)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Chained Web APIs (On-Behalf-Of)
Many architectures include a Web API that needs to call another downstream Web API, both secured by the v2.0 app model.</source>
          <target state="new">Chained Web APIs (On-Behalf-Of)
Many architectures include a Web API that needs to call another downstream Web API, both secured by the v2.0 app model.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This scenario is common in native clients that have a Web API backend, which in turn calls a Microsoft Online service such as Office 365 or the Graph API.</source>
          <target state="new">This scenario is common in native clients that have a Web API backend, which in turn calls a Microsoft Online service such as Office 365 or the Graph API.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This chained Web API scenario can be supported using the OAuth 2.0 Jwt Bearer Credential grant, otherwise known as the <bpt id="p1">[</bpt><ept id="p1">On-Behalf-Of Flow](active-directory-v2-protocols.md#oauth2-on-behalf-of-flow)</ept>.</source>
          <target state="new">This chained Web API scenario can be supported using the OAuth 2.0 Jwt Bearer Credential grant, otherwise known as the <bpt id="p1">[</bpt><ept id="p1">On-Behalf-Of Flow](active-directory-v2-protocols.md#oauth2-on-behalf-of-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, the On-Behalf-Of flow is not currently implemented in the v2.0 app model preview.</source>
          <target state="new">However, the On-Behalf-Of flow is not currently implemented in the v2.0 app model preview.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To see how this flow works in the generally available Azure AD service, check out the <bpt id="p1">[</bpt><ept id="p1">On-Behalf-Of code sample on GitHub](https://github.com/AzureADSamples/WebAPI-OnBehalfOf-DotNet)</ept>.</source>
          <target state="new">To see how this flow works in the generally available Azure AD service, check out the <bpt id="p1">[</bpt><ept id="p1">On-Behalf-Of code sample on GitHub](https://github.com/AzureADSamples/WebAPI-OnBehalfOf-DotNet)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08adbaa91059a6eb09dca90fed465a327e180d1f</xliffext:olfilehash>
  </header>
</xliff>