{
  "nodes": [
    {
      "content": "Using System health reports for troubleshooting",
      "pos": [
        26,
        73
      ]
    },
    {
      "content": "Describes the System Health reports and how to use them for troubleshooting cluster or application issues",
      "pos": [
        91,
        196
      ]
    },
    {
      "content": "Using System health reports for troubleshooting",
      "pos": [
        487,
        534
      ]
    },
    {
      "content": "Service Fabric components report out of the box on all entities in the cluster.",
      "pos": [
        536,
        615
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Health Store<ept id=\"p1\">](service-fabric-health-introduction.md#health-store)</ept> creates and deletes entities based on the system reports, and organizes them in an hierarchy that captures entity interactions.",
      "pos": [
        616,
        814
      ]
    },
    {
      "pos": [
        818,
        958
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Read more about the <bpt id=\"p1\">[</bpt>Service Fabric Health Model<ept id=\"p1\">](service-fabric-health-introduction.md)</ept> to understand health related concepts."
    },
    {
      "content": "The System health reports provide visibility into cluster and application functionality and flag issues through health.",
      "pos": [
        960,
        1079
      ]
    },
    {
      "content": "For application and services, the System health reports verify that entities are implemented and are behaving correctly from Service Fabric perspective.",
      "pos": [
        1080,
        1232
      ]
    },
    {
      "content": "The reports do not provide any health monitoring of the business logic of the service or detection of hung processes.",
      "pos": [
        1233,
        1350
      ]
    },
    {
      "content": "User services can enrich the health data with information specific to their logic.",
      "pos": [
        1351,
        1433
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Watchdogs health reports are only visible <bpt id=\"p1\">**</bpt>after<ept id=\"p1\">**</ept> the system components create an entity.",
      "pos": [
        1437,
        1541
      ]
    },
    {
      "content": "When an entity is deleted, the Health Store automatically deletes all health reports associated with it.",
      "pos": [
        1542,
        1646
      ]
    },
    {
      "content": "Same when a new instance of the entity is created (eg.",
      "pos": [
        1647,
        1701
      ]
    },
    {
      "content": "a new service replica instance is created): all reports associated with the old instance are deleted and cleaned up from store.",
      "pos": [
        1702,
        1829
      ]
    },
    {
      "content": "The System components reports are identified by the source, which starts with <bpt id=\"p1\">*</bpt>\"System.\"<ept id=\"p1\">*</ept> prefix.",
      "pos": [
        1831,
        1928
      ]
    },
    {
      "content": "Watchdogs can't use the same prefix for their sources, as reports will be rejected with invalid parameters.",
      "pos": [
        1929,
        2036
      ]
    },
    {
      "content": "Let's look at some system reports and understand what triggers them and how to correct possible issues they represent.",
      "pos": [
        2037,
        2155
      ]
    },
    {
      "pos": [
        2159,
        2319
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Service Fabric continues to add reports for conditions of interest that would improve visibility into what is happening in the cluster/application."
    },
    {
      "content": "Cluster System health reports",
      "pos": [
        2324,
        2353
      ]
    },
    {
      "content": "The cluster health entity is created automatically in the health store, so if everything works properly it doesn't have a system report.",
      "pos": [
        2354,
        2490
      ]
    },
    {
      "content": "Neighborhood loss",
      "pos": [
        2496,
        2513
      ]
    },
    {
      "content": "System.Federation reports an Error when it detects a neighborhood loss.",
      "pos": [
        2514,
        2585
      ]
    },
    {
      "content": "The report is from individual nodes and node id is included in the property name.",
      "pos": [
        2586,
        2667
      ]
    },
    {
      "content": "If there is one neighborhood loss in the entire Service Fabric ring, typically we can expect two events (both sides of the gap will report).",
      "pos": [
        2668,
        2808
      ]
    },
    {
      "content": "If there are more neighborhoods lost, there will be more events.",
      "pos": [
        2809,
        2873
      ]
    },
    {
      "content": "The report specifies Global Lease timeout as the TTL and the report is re-sent every half of the TTL as long as the condition is still active.",
      "pos": [
        2874,
        3016
      ]
    },
    {
      "content": "The event is automatically removed when expired, so if the reporting node is down, it is still correctly cleaned up from Health Store.",
      "pos": [
        3017,
        3151
      ]
    },
    {
      "content": "SourceId: System.Federation",
      "pos": [
        3155,
        3182
      ]
    },
    {
      "content": "Property: starts with \"Neighborhood\" and includes node information.",
      "pos": [
        3185,
        3252
      ]
    },
    {
      "content": "Next steps: investigate why the neighborhood is lost.",
      "pos": [
        3255,
        3308
      ]
    },
    {
      "content": "Eg.",
      "pos": [
        3309,
        3312
      ]
    },
    {
      "content": "Check communication between cluster nodes.",
      "pos": [
        3313,
        3355
      ]
    },
    {
      "content": "Node System health reports",
      "pos": [
        3360,
        3386
      ]
    },
    {
      "content": "System.FM, which represents the Failover Manager service, is the authority that manages information about cluster nodes.",
      "pos": [
        3387,
        3507
      ]
    },
    {
      "content": "Any node should have one report from System.FM showing its state.",
      "pos": [
        3508,
        3573
      ]
    },
    {
      "content": "The node entities are removed when the node is disabled.",
      "pos": [
        3574,
        3630
      ]
    },
    {
      "content": "Node up/down",
      "pos": [
        3636,
        3648
      ]
    },
    {
      "content": "System.FM reports Ok when the node joins the ring (it's up and running) and Error when the node departs the ring (it's down, either for upgrading, or simply failed).",
      "pos": [
        3649,
        3814
      ]
    },
    {
      "content": "The health hierarchy built by the Health Store takes action on deployed entities in correlation with System.FM node reports.",
      "pos": [
        3816,
        3940
      ]
    },
    {
      "content": "It considers node a virtual parent of all deployed entities.",
      "pos": [
        3941,
        4001
      ]
    },
    {
      "content": "The deployed entities on that node are not exposed through queries if the node is down or not reported, or the node has a different instance than the instance associated with the entities.",
      "pos": [
        4002,
        4190
      ]
    },
    {
      "content": "When FM reports the node down or restarted (new instance), the Health Store automatically cleans up the deployed entities that can only exist on the down node or the previous instance of the node.",
      "pos": [
        4191,
        4387
      ]
    },
    {
      "content": "SourceId: System.FM",
      "pos": [
        4391,
        4410
      ]
    },
    {
      "content": "Property: State",
      "pos": [
        4413,
        4428
      ]
    },
    {
      "content": "Next steps: If the node is down for upgrade, it should come up once upgraded, in which case the health state should be switched back to Ok.",
      "pos": [
        4431,
        4570
      ]
    },
    {
      "content": "If the node doesn't come back or it failed, it needs more investigation.",
      "pos": [
        4571,
        4643
      ]
    },
    {
      "content": "The following shows the System.FM event with health state Ok for node up:",
      "pos": [
        4645,
        4718
      ]
    },
    {
      "content": "Certificate expiration",
      "pos": [
        5540,
        5562
      ]
    },
    {
      "content": "System.FabricNode reports Warning when certificates used by the node are close to expiration.",
      "pos": [
        5563,
        5656
      ]
    },
    {
      "content": "There are three certificates per node: Certificate_cluster, Certificate_server and Certificate_default_client.",
      "pos": [
        5657,
        5767
      ]
    },
    {
      "content": "When the expiration is at least two weeks away, the report type is OK; if the expiration is within two weeks, the report type is Warning.",
      "pos": [
        5768,
        5905
      ]
    },
    {
      "content": "TTL of these events is infinite, they are removed when a node leaves the cluster.",
      "pos": [
        5906,
        5987
      ]
    },
    {
      "content": "SourceId: System.FabricNode",
      "pos": [
        5991,
        6018
      ]
    },
    {
      "content": "Property: starts with \"Certificate\" and contains more information about certificate type.",
      "pos": [
        6021,
        6110
      ]
    },
    {
      "content": "Next steps: Update the certificates if they are close to expiration.",
      "pos": [
        6113,
        6181
      ]
    },
    {
      "content": "Load capacity violation",
      "pos": [
        6187,
        6210
      ]
    },
    {
      "content": "The Service Fabric load balancer reports Warning if it detects a node capacity violation.",
      "pos": [
        6211,
        6300
      ]
    },
    {
      "content": "SourceId: System.PLB",
      "pos": [
        6305,
        6325
      ]
    },
    {
      "content": "Property: starts with \"Capacity\".",
      "pos": [
        6329,
        6362
      ]
    },
    {
      "content": "Next steps: Check provided metrics and view the current capacity on the node.",
      "pos": [
        6366,
        6443
      ]
    },
    {
      "content": "Application System health reports",
      "pos": [
        6448,
        6481
      ]
    },
    {
      "content": "System.CM, which represents the Cluster Manager service, is the authority that manages information about application.",
      "pos": [
        6482,
        6599
      ]
    },
    {
      "content": "State",
      "pos": [
        6605,
        6610
      ]
    },
    {
      "content": "System.CM reports Ok when the application is created or updated.",
      "pos": [
        6611,
        6675
      ]
    },
    {
      "content": "It informs the Health Store when the application is deleted, so it can be removed from store.",
      "pos": [
        6676,
        6769
      ]
    },
    {
      "content": "SourceId: System.CM",
      "pos": [
        6773,
        6792
      ]
    },
    {
      "content": "Property: State",
      "pos": [
        6795,
        6810
      ]
    },
    {
      "content": "Next steps: If the application is created, it should have the CM health report.",
      "pos": [
        6813,
        6892
      ]
    },
    {
      "content": "Otherwise, check the state of the application by issuing a query (eg Powershell cmdlet Get-ServiceFabricApplication -ApplicationName",
      "pos": [
        6893,
        7025
      ]
    },
    {
      "content": ").",
      "pos": [
        7043,
        7045
      ]
    },
    {
      "content": "The following shows the State event on fabric:/WordCount application.",
      "pos": [
        7047,
        7116
      ]
    },
    {
      "content": "Service System health reports",
      "pos": [
        8348,
        8377
      ]
    },
    {
      "content": "System.FM, which represents the Failover Manager service, is the authority that manages information about services.",
      "pos": [
        8378,
        8493
      ]
    },
    {
      "content": "State",
      "pos": [
        8499,
        8504
      ]
    },
    {
      "content": "System.FM reports Ok when the service is created.",
      "pos": [
        8505,
        8554
      ]
    },
    {
      "content": "It deletes the entity from Health Store when the service is deleted.",
      "pos": [
        8555,
        8623
      ]
    },
    {
      "content": "SourceId: System.FM",
      "pos": [
        8627,
        8646
      ]
    },
    {
      "content": "Property: State.",
      "pos": [
        8649,
        8665
      ]
    },
    {
      "content": "The following shows the State event on the service fabric:/WordCount/WordCountService.",
      "pos": [
        8667,
        8753
      ]
    },
    {
      "content": "Unplaced replicas violation",
      "pos": [
        9790,
        9817
      ]
    },
    {
      "content": "System.PLB reports Warning if it was unable to find a placement for one or more of the service replica.",
      "pos": [
        9818,
        9921
      ]
    },
    {
      "content": "The report is removed when expired.",
      "pos": [
        9922,
        9957
      ]
    },
    {
      "content": "SourceId: System.FM",
      "pos": [
        9961,
        9980
      ]
    },
    {
      "content": "Property: State.",
      "pos": [
        9983,
        9999
      ]
    },
    {
      "content": "Next steps: Check the service constraints.",
      "pos": [
        10002,
        10044
      ]
    },
    {
      "content": "Check the current state of the placement.",
      "pos": [
        10045,
        10086
      ]
    },
    {
      "content": "Partition System health reports",
      "pos": [
        10091,
        10122
      ]
    },
    {
      "content": "System.FM, which represents the Failover Manager service, is the authority that manages information about service partitions.",
      "pos": [
        10123,
        10248
      ]
    },
    {
      "content": "State",
      "pos": [
        10254,
        10259
      ]
    },
    {
      "content": "System.FM reports Ok when the partition is created and healthy.",
      "pos": [
        10260,
        10323
      ]
    },
    {
      "content": "It deletes the entity from Health Store when the partition is deleted.",
      "pos": [
        10324,
        10394
      ]
    },
    {
      "content": "If the partition is below min replica count, it reports Error.",
      "pos": [
        10395,
        10457
      ]
    },
    {
      "content": "If the partition is not below min replica count, but it is below target replica count, it reports Warning.",
      "pos": [
        10458,
        10564
      ]
    },
    {
      "content": "If the partition is in quorum loss, FM reports error.",
      "pos": [
        10565,
        10618
      ]
    },
    {
      "content": "Other important events are: Warning when the reconfiguration takes longer than expected and when the build is taking longer than expected.",
      "pos": [
        10619,
        10757
      ]
    },
    {
      "content": "The expected times for build or reconfiguration are configurable based on service scenarios.",
      "pos": [
        10758,
        10850
      ]
    },
    {
      "content": "Eg.",
      "pos": [
        10851,
        10854
      ]
    },
    {
      "content": "if a service has TB of state, like SQL Azure, the build will take longer than a service with a small amount of state.",
      "pos": [
        10855,
        10972
      ]
    },
    {
      "content": "SourceId: System.FM",
      "pos": [
        10976,
        10995
      ]
    },
    {
      "content": "Property: State.",
      "pos": [
        10998,
        11014
      ]
    },
    {
      "content": "Next steps: if health state is not Ok, it's possible some replicas are not created/opened/promoted to primary or secondary correctly.",
      "pos": [
        11017,
        11150
      ]
    },
    {
      "content": "In many instances, the root cause is a service bug in the open or change role implementation.",
      "pos": [
        11151,
        11244
      ]
    },
    {
      "content": "The following shows a healthy partition.",
      "pos": [
        11246,
        11286
      ]
    },
    {
      "content": "The following shows the health of a partition that is below target replica count.",
      "pos": [
        12231,
        12312
      ]
    },
    {
      "content": "Next steps: get the partition description, which shows how it was configured: MinReplicaSetSize is 2, TargetReplicaSetSize is 7.",
      "pos": [
        12313,
        12441
      ]
    },
    {
      "content": "Then get the number of nodes in the cluster: 5.",
      "pos": [
        12442,
        12489
      ]
    },
    {
      "content": "So in this case, 2 replicas can't be placed.",
      "pos": [
        12490,
        12534
      ]
    },
    {
      "content": "Replica constraint violation",
      "pos": [
        14252,
        14280
      ]
    },
    {
      "content": "System.PLB reports Warning if it detects replica constraint violation and can't place replicas of the partition.",
      "pos": [
        14281,
        14393
      ]
    },
    {
      "content": "SourceId: System.PLB",
      "pos": [
        14397,
        14417
      ]
    },
    {
      "content": "Property: starts with \"ReplicaConstraintViolation\".",
      "pos": [
        14420,
        14471
      ]
    },
    {
      "content": "Replica System health reports",
      "pos": [
        14476,
        14505
      ]
    },
    {
      "content": "System.RA, which represents the Reconfiguration Agent component, is the authority for replica state.",
      "pos": [
        14506,
        14606
      ]
    },
    {
      "content": "State",
      "pos": [
        14612,
        14617
      ]
    },
    {
      "content": "System.RA reports Ok when the replica is created.",
      "pos": [
        14618,
        14667
      ]
    },
    {
      "content": "SourceId: System.RA",
      "pos": [
        14671,
        14690
      ]
    },
    {
      "content": "Property: State.",
      "pos": [
        14693,
        14709
      ]
    },
    {
      "content": "The following shows a healthy replica:",
      "pos": [
        14711,
        14749
      ]
    },
    {
      "content": "Replica open status",
      "pos": [
        15781,
        15800
      ]
    },
    {
      "content": "The description of this health report contains the start time (UTC) when the API call was invoked.",
      "pos": [
        15801,
        15899
      ]
    },
    {
      "content": "System.RA reports Warning if replica open takes longer than the configured period (default: 30 minutes).",
      "pos": [
        15900,
        16004
      ]
    },
    {
      "content": "If the API impacts service availability, the report is issued much faster (configurable interval, default 30 seconds).",
      "pos": [
        16005,
        16123
      ]
    },
    {
      "content": "This time includes time taken for replicator open and service open.",
      "pos": [
        16124,
        16191
      ]
    },
    {
      "content": "The property changes to Ok if open completes.",
      "pos": [
        16192,
        16237
      ]
    },
    {
      "content": "SourceId: System.RA",
      "pos": [
        16241,
        16260
      ]
    },
    {
      "content": "Property: ReplicaOpenStatus.",
      "pos": [
        16263,
        16291
      ]
    },
    {
      "content": "Next steps: If health state is not Ok, check why the replica open takes longer than expected.",
      "pos": [
        16294,
        16387
      ]
    },
    {
      "content": "Slow service API call",
      "pos": [
        16393,
        16414
      ]
    },
    {
      "content": "System.RAP and System.Replicator report Warning if a call into user service code takes longer than configured time.",
      "pos": [
        16415,
        16530
      ]
    },
    {
      "content": "The warning is cleared when the call completes.",
      "pos": [
        16531,
        16578
      ]
    },
    {
      "content": "SourceId: System.RAP or System.Replicator",
      "pos": [
        16582,
        16623
      ]
    },
    {
      "content": "Property: the name of the slow API.",
      "pos": [
        16626,
        16661
      ]
    },
    {
      "content": "The description gives more detail about the time the API has been pending.",
      "pos": [
        16662,
        16736
      ]
    },
    {
      "content": "Next steps: investigate why the call it takes longer than expected.",
      "pos": [
        16739,
        16806
      ]
    },
    {
      "content": "The following example shows a partition in quorum loss and investigation steps done to figure out why.",
      "pos": [
        16808,
        16910
      ]
    },
    {
      "content": "One of the replicas has Warning health state, so we get its health.",
      "pos": [
        16911,
        16978
      ]
    },
    {
      "content": "It shows that service operation takes longer than expected, event reported by System.RAP.",
      "pos": [
        16979,
        17068
      ]
    },
    {
      "content": "After this information, next step is to look at service code and investigate.",
      "pos": [
        17069,
        17146
      ]
    },
    {
      "content": "For this case, the RunAsync implementation of the stateful service throws an unhandled exception.",
      "pos": [
        17147,
        17244
      ]
    },
    {
      "content": "Note that replicas are recycling, so you may not see any replicas in Warning state.",
      "pos": [
        17245,
        17328
      ]
    },
    {
      "content": "Retry getting the health and look whether there are any differences in replica id, this gives clues in certain cases.",
      "pos": [
        17329,
        17446
      ]
    },
    {
      "content": "When starting the faulty application under debugger, the Diagnostic Events windows show the exception thrown from RunAsync:",
      "pos": [
        21763,
        21886
      ]
    },
    {
      "content": "Visual Studio 2015 Diagnostic Events: RunAsync failure in fabric:/HelloWorldStatefulApplication.",
      "pos": [
        21890,
        21986
      ]
    },
    {
      "content": "Visual Studio 2015 Diagnostic Events: RunAsync failure in fabric:/HelloWorldStatefulApplication.",
      "pos": [
        21992,
        22088
      ]
    },
    {
      "content": "Replication queue full",
      "pos": [
        22226,
        22248
      ]
    },
    {
      "content": "System.Replicator reports Warning if replication queue is full.",
      "pos": [
        22249,
        22312
      ]
    },
    {
      "content": "On the primary, this usually happens because one or more replicas secondary replicas are slow to ack operations.",
      "pos": [
        22313,
        22425
      ]
    },
    {
      "content": "On secondary, this usually happens when the service is slow to apply the operations.",
      "pos": [
        22426,
        22510
      ]
    },
    {
      "content": "The Warning is cleared when the queue is no longer full.",
      "pos": [
        22511,
        22567
      ]
    },
    {
      "content": "SourceId: System.Replicator",
      "pos": [
        22571,
        22598
      ]
    },
    {
      "content": "Property: PrimaryReplicationQueueStatus or SecondaryReplicationQueueStatus, depending on the replica role.",
      "pos": [
        22601,
        22707
      ]
    },
    {
      "content": "DeployedApplication System health reports",
      "pos": [
        22712,
        22753
      ]
    },
    {
      "content": "System.Hosting is the authority on deployed entities.",
      "pos": [
        22754,
        22807
      ]
    },
    {
      "content": "Activation",
      "pos": [
        22813,
        22823
      ]
    },
    {
      "content": "System.Hosting reports Ok when an application is successfully activated on the node, Error otherwise.",
      "pos": [
        22824,
        22925
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        22929,
        22953
      ]
    },
    {
      "content": "Property: Activation.",
      "pos": [
        22956,
        22977
      ]
    },
    {
      "content": "Includes the rollout version.",
      "pos": [
        22978,
        23007
      ]
    },
    {
      "content": "Next steps: If unhealthy, investigate why the activation failed.",
      "pos": [
        23010,
        23074
      ]
    },
    {
      "content": "The following shows successful activation:",
      "pos": [
        23076,
        23118
      ]
    },
    {
      "content": "Download",
      "pos": [
        24528,
        24536
      ]
    },
    {
      "content": "System.Hosting reports Error is the application package download failed.",
      "pos": [
        24537,
        24609
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        24613,
        24637
      ]
    },
    {
      "content": "Property: Download:",
      "pos": [
        24640,
        24659
      ]
    },
    {
      "content": "Next steps: Investigate why download failed on the node.",
      "pos": [
        24678,
        24734
      ]
    },
    {
      "content": "DeployedServicePackage System health reports",
      "pos": [
        24739,
        24783
      ]
    },
    {
      "content": "System.Hosting is the authority on deployed entities.",
      "pos": [
        24784,
        24837
      ]
    },
    {
      "content": "Service package activation",
      "pos": [
        24843,
        24869
      ]
    },
    {
      "content": "System.Hosting reports Ok if the service package activation on the node is successful, Error otherwise.",
      "pos": [
        24870,
        24973
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        24977,
        25001
      ]
    },
    {
      "content": "Property: Activation.",
      "pos": [
        25004,
        25025
      ]
    },
    {
      "content": "Next steps: Investigate why the activation failed.",
      "pos": [
        25028,
        25078
      ]
    },
    {
      "content": "Code package activation",
      "pos": [
        25084,
        25107
      ]
    },
    {
      "content": "System.Hosting reports Ok for each code package if activation is successful.",
      "pos": [
        25108,
        25184
      ]
    },
    {
      "content": "If the activation fails, it reports Warning as configured; if the CodePackage failed to activate or terminated with an error more than the configured 'CodePackageHealthErrorThreshold', Hosting reports Error.",
      "pos": [
        25185,
        25392
      ]
    },
    {
      "content": "If there are multiple code packages in a service package, there will be an Activation report generated for each one.",
      "pos": [
        25393,
        25509
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        25513,
        25537
      ]
    },
    {
      "content": "Property: prefix CodePackageActivation and contains the name of the code package and te entry point.",
      "pos": [
        25540,
        25640
      ]
    },
    {
      "content": "CodePackageActivation:",
      "pos": [
        25641,
        25663
      ]
    },
    {
      "content": ":&lt;SetupEntryPoint/EntryPoint&gt;.",
      "pos": [
        25680,
        25710
      ]
    },
    {
      "content": "Eg.",
      "pos": [
        25711,
        25714
      ]
    },
    {
      "content": "CodePackageActivation:Code:SetupEntryPoint.",
      "pos": [
        25715,
        25758
      ]
    },
    {
      "content": "Service type registration",
      "pos": [
        25764,
        25789
      ]
    },
    {
      "content": "System.Hosting reports Ok if the service type was registered successfully.",
      "pos": [
        25790,
        25864
      ]
    },
    {
      "content": "It reports Error if the registration wasn't done in time (configured with ServiceTypeRegistrationTimeout).",
      "pos": [
        25865,
        25971
      ]
    },
    {
      "content": "If the service type is unregistered from the node, because the runtime was closed.",
      "pos": [
        25972,
        26054
      ]
    },
    {
      "content": "Hosting reports Warning.",
      "pos": [
        26055,
        26079
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        26083,
        26107
      ]
    },
    {
      "content": "Property: prefix ServiceTypeRegistration and contains the service type name.",
      "pos": [
        26110,
        26186
      ]
    },
    {
      "content": "Eg.",
      "pos": [
        26187,
        26190
      ]
    },
    {
      "content": "\"ServiceTypeRegistration:FileStoreServiceType\"",
      "pos": [
        26191,
        26237
      ]
    },
    {
      "content": "The following shows a healthy deployed service package.",
      "pos": [
        26239,
        26294
      ]
    },
    {
      "content": "Download",
      "pos": [
        28836,
        28844
      ]
    },
    {
      "content": "System.Hosting reports Error is the service package download failed.",
      "pos": [
        28845,
        28913
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        28917,
        28941
      ]
    },
    {
      "content": "Property: Download:",
      "pos": [
        28944,
        28963
      ]
    },
    {
      "content": "Next steps: Investigate why download failed on the node.",
      "pos": [
        28982,
        29038
      ]
    },
    {
      "content": "Upgrade validation",
      "pos": [
        29044,
        29062
      ]
    },
    {
      "content": "System.Hosting reports Error if validation during upgrade fails or if upgrade fails on the node.",
      "pos": [
        29063,
        29159
      ]
    },
    {
      "content": "SourceId: System.Hosting",
      "pos": [
        29163,
        29187
      ]
    },
    {
      "content": "Property: prefix FabricUpgradeValidation, contains the upgrade version.",
      "pos": [
        29190,
        29261
      ]
    },
    {
      "content": "Description: points to the error encountered.",
      "pos": [
        29264,
        29309
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        29314,
        29324
      ]
    },
    {
      "content": "How to view Service Fabric health reports",
      "pos": [
        29326,
        29367
      ]
    },
    {
      "content": "How to Monitor and Diagnose Services locally",
      "pos": [
        29422,
        29466
      ]
    },
    {
      "content": "Service Fabric Application Upgrade",
      "pos": [
        29546,
        29580
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Using System health reports for troubleshooting\"\n   description=\"Describes the System Health reports and how to use them for troubleshooting cluster or application issues\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"oanapl\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"na\"\n   ms.date=\"06/16/2015\"\n   ms.author=\"oanapl\"/>\n\n# Using System health reports for troubleshooting\n\nService Fabric components report out of the box on all entities in the cluster. The [Health Store](service-fabric-health-introduction.md#health-store) creates and deletes entities based on the system reports, and organizes them in an hierarchy that captures entity interactions.\n\n> [AZURE.NOTE] Read more about the [Service Fabric Health Model](service-fabric-health-introduction.md) to understand health related concepts.\n\nThe System health reports provide visibility into cluster and application functionality and flag issues through health. For application and services, the System health reports verify that entities are implemented and are behaving correctly from Service Fabric perspective. The reports do not provide any health monitoring of the business logic of the service or detection of hung processes. User services can enrich the health data with information specific to their logic.\n\n> [AZURE.NOTE] Watchdogs health reports are only visible **after** the system components create an entity. When an entity is deleted, the Health Store automatically deletes all health reports associated with it. Same when a new instance of the entity is created (eg. a new service replica instance is created): all reports associated with the old instance are deleted and cleaned up from store.\n\nThe System components reports are identified by the source, which starts with *\"System.\"* prefix. Watchdogs can't use the same prefix for their sources, as reports will be rejected with invalid parameters.\nLet's look at some system reports and understand what triggers them and how to correct possible issues they represent.\n\n> [AZURE.NOTE] Service Fabric continues to add reports for conditions of interest that would improve visibility into what is happening in the cluster/application.\n\n## Cluster System health reports\nThe cluster health entity is created automatically in the health store, so if everything works properly it doesn't have a system report.\n\n### Neighborhood loss\nSystem.Federation reports an Error when it detects a neighborhood loss. The report is from individual nodes and node id is included in the property name. If there is one neighborhood loss in the entire Service Fabric ring, typically we can expect two events (both sides of the gap will report). If there are more neighborhoods lost, there will be more events.\nThe report specifies Global Lease timeout as the TTL and the report is re-sent every half of the TTL as long as the condition is still active. The event is automatically removed when expired, so if the reporting node is down, it is still correctly cleaned up from Health Store.\n\n- SourceId: System.Federation\n- Property: starts with \"Neighborhood\" and includes node information.\n- Next steps: investigate why the neighborhood is lost. Eg. Check communication between cluster nodes.\n\n## Node System health reports\nSystem.FM, which represents the Failover Manager service, is the authority that manages information about cluster nodes. Any node should have one report from System.FM showing its state. The node entities are removed when the node is disabled.\n\n### Node up/down\nSystem.FM reports Ok when the node joins the ring (it's up and running) and Error when the node departs the ring (it's down, either for upgrading, or simply failed).  The health hierarchy built by the Health Store takes action on deployed entities in correlation with System.FM node reports. It considers node a virtual parent of all deployed entities. The deployed entities on that node are not exposed through queries if the node is down or not reported, or the node has a different instance than the instance associated with the entities. When FM reports the node down or restarted (new instance), the Health Store automatically cleans up the deployed entities that can only exist on the down node or the previous instance of the node.\n\n- SourceId: System.FM\n- Property: State\n- Next steps: If the node is down for upgrade, it should come up once upgraded, in which case the health state should be switched back to Ok. If the node doesn't come back or it failed, it needs more investigation.\n\nThe following shows the System.FM event with health state Ok for node up:\n\n```powershell\n\nPS C:\\> Get-ServiceFabricNodeHealth -NodeName Node.1\nNodeName              : Node.1\nAggregatedHealthState : Ok\nHealthEvents          :\n                        SourceId              : System.FM\n                        Property              : State\n                        HealthState           : Ok\n                        SequenceNumber        : 2\n                        SentAt                : 4/24/2015 5:27:33 PM\n                        ReceivedAt            : 4/24/2015 5:28:50 PM\n                        TTL                   : Infinite\n                        Description           : Fabric node is up.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 5:28:50 PM\n\n```\n\n\n### Certificate expiration\nSystem.FabricNode reports Warning when certificates used by the node are close to expiration. There are three certificates per node: Certificate_cluster, Certificate_server and Certificate_default_client.\nWhen the expiration is at least two weeks away, the report type is OK; if the expiration is within two weeks, the report type is Warning. TTL of these events is infinite, they are removed when a node leaves the cluster.\n\n- SourceId: System.FabricNode\n- Property: starts with \"Certificate\" and contains more information about certificate type.\n- Next steps: Update the certificates if they are close to expiration.\n\n### Load capacity violation\nThe Service Fabric load balancer reports Warning if it detects a node capacity violation.\n\n - SourceId: System.PLB\n - Property: starts with \"Capacity\".\n - Next steps: Check provided metrics and view the current capacity on the node.\n\n## Application System health reports\nSystem.CM, which represents the Cluster Manager service, is the authority that manages information about application.\n\n### State\nSystem.CM reports Ok when the application is created or updated. It informs the Health Store when the application is deleted, so it can be removed from store.\n\n- SourceId: System.CM\n- Property: State\n- Next steps: If the application is created, it should have the CM health report. Otherwise, check the state of the application by issuing a query (eg Powershell cmdlet Get-ServiceFabricApplication -ApplicationName <applicationName>).\n\nThe following shows the State event on fabric:/WordCount application.\n\n```powershell\nPS C:\\> Get-ServiceFabricApplicationHealth fabric:/WordCount -ServicesHealthStateFilter ([System.Fabric.Health.HealthStateFilter]::None) -DeployedApplicationsHealthStateFilter ([System.Fabric.Health.HealthStateFilter]::None)\n\nApplicationName                 : fabric:/WordCount\nAggregatedHealthState           : Ok\nServiceHealthStates             : None\nDeployedApplicationHealthStates : None\nHealthEvents                    :\n                                  SourceId              : System.CM\n                                  Property              : State\n                                  HealthState           : Ok\n                                  SequenceNumber        : 82\n                                  SentAt                : 4/24/2015 6:12:51 PM\n                                  ReceivedAt            : 4/24/2015 6:12:51 PM\n                                  TTL                   : Infinite\n                                  Description           : Application has been created.\n                                  RemoveWhenExpired     : False\n                                  IsExpired             : False\n                                  Transitions           : ->Ok = 4/24/2015 6:12:51 PM\n```\n\n## Service System health reports\nSystem.FM, which represents the Failover Manager service, is the authority that manages information about services.\n\n### State\nSystem.FM reports Ok when the service is created. It deletes the entity from Health Store when the service is deleted.\n\n- SourceId: System.FM\n- Property: State.\n\nThe following shows the State event on the service fabric:/WordCount/WordCountService.\n\n```powershell\nPS C:\\> Get-ServiceFabricServiceHealth fabric:/WordCount/WordCountService\n\nServiceName           : fabric:/WordCount/WordCountService\nAggregatedHealthState : Ok\nPartitionHealthStates :\n                        PartitionId           : 875a1caa-d79f-43bd-ac9d-43ee89a9891c\n                        AggregatedHealthState : Ok\n\nHealthEvents          :\n                        SourceId              : System.FM\n                        Property              : State\n                        HealthState           : Ok\n                        SequenceNumber        : 3\n                        SentAt                : 4/24/2015 6:12:51 PM\n                        ReceivedAt            : 4/24/2015 6:13:01 PM\n                        TTL                   : Infinite\n                        Description           : Service has been created.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:13:01 PM\n```\n\n### Unplaced replicas violation\nSystem.PLB reports Warning if it was unable to find a placement for one or more of the service replica. The report is removed when expired.\n\n- SourceId: System.FM\n- Property: State.\n- Next steps: Check the service constraints. Check the current state of the placement.\n\n## Partition System health reports\nSystem.FM, which represents the Failover Manager service, is the authority that manages information about service partitions.\n\n### State\nSystem.FM reports Ok when the partition is created and healthy. It deletes the entity from Health Store when the partition is deleted.\nIf the partition is below min replica count, it reports Error.\nIf the partition is not below min replica count, but it is below target replica count, it reports Warning.\nIf the partition is in quorum loss, FM reports error.\nOther important events are: Warning when the reconfiguration takes longer than expected and when the build is taking longer than expected. The expected times for build or reconfiguration are configurable based on service scenarios. Eg. if a service has TB of state, like SQL Azure, the build will take longer than a service with a small amount of state.\n\n- SourceId: System.FM\n- Property: State.\n- Next steps: if health state is not Ok, it's possible some replicas are not created/opened/promoted to primary or secondary correctly. In many instances, the root cause is a service bug in the open or change role implementation.\n\nThe following shows a healthy partition.\n\n```powershell\nPS C:\\> Get-ServiceFabricPartition fabric:/StatelessPiApplication/StatelessPiService | Get-ServiceFabricPartitionHealth\nPartitionId           : 29da484c-2c08-40c5-b5d9-03774af9a9bf\nAggregatedHealthState : Ok\nReplicaHealthStates   : None\nHealthEvents          :\n                        SourceId              : System.FM\n                        Property              : State\n                        HealthState           : Ok\n                        SequenceNumber        : 38\n                        SentAt                : 4/24/2015 6:33:10 PM\n                        ReceivedAt            : 4/24/2015 6:33:31 PM\n                        TTL                   : Infinite\n                        Description           : Partition is healthy.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:33:31 PM\n```\n\nThe following shows the health of a partition that is below target replica count. Next steps: get the partition description, which shows how it was configured: MinReplicaSetSize is 2, TargetReplicaSetSize is 7. Then get the number of nodes in the cluster: 5. So in this case, 2 replicas can't be placed.\n\n```powershell\nPS C:\\> Get-ServiceFabricPartition fabric:/WordCount/WordCountService | Get-ServiceFabricPartitionHealth -ReplicasHealthStateFilter ([System.Fabric.Health.HealthStateFilter]::None)\n\nPartitionId           : 875a1caa-d79f-43bd-ac9d-43ee89a9891c\nAggregatedHealthState : Warning\nUnhealthyEvaluations  :\n                        Unhealthy event: SourceId='System.FM', Property='State', HealthState='Warning', ConsiderWarningAsError=false.\n\nReplicaHealthStates   : None\nHealthEvents          :\n                        SourceId              : System.FM\n                        Property              : State\n                        HealthState           : Warning\n                        SequenceNumber        : 37\n                        SentAt                : 4/24/2015 6:13:12 PM\n                        ReceivedAt            : 4/24/2015 6:13:31 PM\n                        TTL                   : Infinite\n                        Description           : Partition is below target replica or instance count.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : Ok->Warning = 4/24/2015 6:13:31 PM\n\nPS C:\\> Get-ServiceFabricPartition fabric:/WordCount/WordCountService\n\nPartitionId            : 875a1caa-d79f-43bd-ac9d-43ee89a9891c\nPartitionKind          : Int64Range\nPartitionLowKey        : 1\nPartitionHighKey       : 26\nPartitionStatus        : Ready\nLastQuorumLossDuration : 00:00:00\nMinReplicaSetSize      : 2\nTargetReplicaSetSize   : 7\nHealthState            : Warning\nDataLossNumber         : 130743727710830900\nConfigurationNumber    : 8589934592\n\n\nPS C:\\> @(Get-ServiceFabricNode).Count\n5\n```\n\n### Replica constraint violation\nSystem.PLB reports Warning if it detects replica constraint violation and can't place replicas of the partition.\n\n- SourceId: System.PLB\n- Property: starts with \"ReplicaConstraintViolation\".\n\n## Replica System health reports\nSystem.RA, which represents the Reconfiguration Agent component, is the authority for replica state.\n\n### State\nSystem.RA reports Ok when the replica is created.\n\n- SourceId: System.RA\n- Property: State.\n\nThe following shows a healthy replica:\n\n```powershell\nPS C:\\> Get-ServiceFabricPartition fabric:/WordCount/WordCountService | Get-ServiceFabricReplica | where {$_.ReplicaRole -eq \"Primary\"} | Get-ServiceFabricReplicaHealth\nPartitionId           : 875a1caa-d79f-43bd-ac9d-43ee89a9891c\nReplicaId             : 130743727717237310\nAggregatedHealthState : Ok\nHealthEvents          :\n                        SourceId              : System.RA\n                        Property              : State\n                        HealthState           : Ok\n                        SequenceNumber        : 130743727718018580\n                        SentAt                : 4/24/2015 6:12:51 PM\n                        ReceivedAt            : 4/24/2015 6:13:02 PM\n                        TTL                   : Infinite\n                        Description           : Replica has been created.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:13:02 PM\n```\n\n### Replica open status\nThe description of this health report contains the start time (UTC) when the API call was invoked.\nSystem.RA reports Warning if replica open takes longer than the configured period (default: 30 minutes). If the API impacts service availability, the report is issued much faster (configurable interval, default 30 seconds). This time includes time taken for replicator open and service open. The property changes to Ok if open completes.\n\n- SourceId: System.RA\n- Property: ReplicaOpenStatus.\n- Next steps: If health state is not Ok, check why the replica open takes longer than expected.\n\n### Slow service API call\nSystem.RAP and System.Replicator report Warning if a call into user service code takes longer than configured time. The warning is cleared when the call completes.\n\n- SourceId: System.RAP or System.Replicator\n- Property: the name of the slow API. The description gives more detail about the time the API has been pending.\n- Next steps: investigate why the call it takes longer than expected.\n\nThe following example shows a partition in quorum loss and investigation steps done to figure out why. One of the replicas has Warning health state, so we get its health. It shows that service operation takes longer than expected, event reported by System.RAP. After this information, next step is to look at service code and investigate. For this case, the RunAsync implementation of the stateful service throws an unhandled exception. Note that replicas are recycling, so you may not see any replicas in Warning state. Retry getting the health and look whether there are any differences in replica id, this gives clues in certain cases.\n\n```powershell\nPS C:\\> Get-ServiceFabricPartition fabric:/HelloWorldStatefulApplication/HelloWorldStateful | Get-ServiceFabricPartitionHealth\n\nPartitionId           : 72a0fb3e-53ec-44f2-9983-2f272aca3e38\nAggregatedHealthState : Error\nUnhealthyEvaluations  :\n                        Error event: SourceId='System.FM', Property='State'.\n\nReplicaHealthStates   :\n                        ReplicaId             : 130743748372546446\n                        AggregatedHealthState : Ok\n\n                        ReplicaId             : 130743746168084332\n                        AggregatedHealthState : Ok\n\n                        ReplicaId             : 130743746195428808\n                        AggregatedHealthState : Warning\n\n                        ReplicaId             : 130743746195428807\n                        AggregatedHealthState : Ok\n\nHealthEvents          :\n                        SourceId              : System.FM\n                        Property              : State\n                        HealthState           : Error\n                        SequenceNumber        : 182\n                        SentAt                : 4/24/2015 7:00:17 PM\n                        ReceivedAt            : 4/24/2015 7:00:31 PM\n                        TTL                   : Infinite\n                        Description           : Partition is in quorum loss.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : Warning->Error = 4/24/2015 6:51:31 PM\n\nPS C:\\> Get-ServiceFabricPartition fabric:/HelloWorldStatefulApplication/HelloWorldStateful\n\nPartitionId            : 72a0fb3e-53ec-44f2-9983-2f272aca3e38\nPartitionKind          : Int64Range\nPartitionLowKey        : -9223372036854775808\nPartitionHighKey       : 9223372036854775807\nPartitionStatus        : InQuorumLoss\nLastQuorumLossDuration : 00:00:13\nMinReplicaSetSize      : 2\nTargetReplicaSetSize   : 3\nHealthState            : Error\nDataLossNumber         : 130743746152927699\nConfigurationNumber    : 227633266688\n\nPS C:\\> Get-ServiceFabricReplica 72a0fb3e-53ec-44f2-9983-2f272aca3e38 130743746195428808\n\nReplicaId           : 130743746195428808\nReplicaAddress      : PartitionId: 72a0fb3e-53ec-44f2-9983-2f272aca3e38, ReplicaId: 130743746195428808\nReplicaRole         : Primary\nNodeName            : Node.3\nReplicaStatus       : Ready\nLastInBuildDuration : 00:00:01\nHealthState         : Warning\n\nPS C:\\> Get-ServiceFabricReplicaHealth 72a0fb3e-53ec-44f2-9983-2f272aca3e38 130743746195428808\n\nPartitionId           : 72a0fb3e-53ec-44f2-9983-2f272aca3e38\nReplicaId             : 130743746195428808\nAggregatedHealthState : Warning\nUnhealthyEvaluations  :\n                        Unhealthy event: SourceId='System.RAP', Property='ServiceOpenOperationDuration', HealthState='Warning', ConsiderWarningAsError=false.\n\nHealthEvents          :\n                        SourceId              : System.RA\n                        Property              : State\n                        HealthState           : Ok\n                        SequenceNumber        : 130743756170185892\n                        SentAt                : 4/24/2015 7:00:17 PM\n                        ReceivedAt            : 4/24/2015 7:00:33 PM\n                        TTL                   : Infinite\n                        Description           : Replica has been created.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 7:00:33 PM\n\n                        SourceId              : System.RAP\n                        Property              : ServiceOpenOperationDuration\n                        HealthState           : Warning\n                        SequenceNumber        : 130743756399407044\n                        SentAt                : 4/24/2015 7:00:39 PM\n                        ReceivedAt            : 4/24/2015 7:00:59 PM\n                        TTL                   : Infinite\n                        Description           : Start Time (UTC): 2015-04-24 19:00:17.019\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Warning = 4/24/2015 7:00:59 PM\n```\n\nWhen starting the faulty application under debugger, the Diagnostic Events windows show the exception thrown from RunAsync:\n\n![Visual Studio 2015 Diagnostic Events: RunAsync failure in fabric:/HelloWorldStatefulApplication.][1]\n\nVisual Studio 2015 Diagnostic Events: RunAsync failure in fabric:/HelloWorldStatefulApplication.\n\n[1]: ./media/service-fabric-understand-and-troubleshoot-with-system-health-reports/servicefabric-health-vs-runasync-exception.png\n\n\n### Replication queue full\nSystem.Replicator reports Warning if replication queue is full. On the primary, this usually happens because one or more replicas secondary replicas are slow to ack operations. On secondary, this usually happens when the service is slow to apply the operations. The Warning is cleared when the queue is no longer full.\n\n- SourceId: System.Replicator\n- Property: PrimaryReplicationQueueStatus or SecondaryReplicationQueueStatus, depending on the replica role.\n\n## DeployedApplication System health reports\nSystem.Hosting is the authority on deployed entities.\n\n### Activation\nSystem.Hosting reports Ok when an application is successfully activated on the node, Error otherwise.\n\n- SourceId: System.Hosting\n- Property: Activation. Includes the rollout version.\n- Next steps: If unhealthy, investigate why the activation failed.\n\nThe following shows successful activation:\n\n```powershell\nPS C:\\> Get-ServiceFabricDeployedApplicationHealth -NodeName Node.1 -ApplicationName fabric:/WordCount\n\nApplicationName                    : fabric:/WordCount\nNodeName                           : Node.1\nAggregatedHealthState              : Ok\nDeployedServicePackageHealthStates :\n                                     ServiceManifestName   : WordCountServicePkg\n                                     NodeName              : Node.1\n                                     AggregatedHealthState : Ok\n\nHealthEvents                       :\n                                     SourceId              : System.Hosting\n                                     Property              : Activation\n                                     HealthState           : Ok\n                                     SequenceNumber        : 130743727751144415\n                                     SentAt                : 4/24/2015 6:12:55 PM\n                                     ReceivedAt            : 4/24/2015 6:13:03 PM\n                                     TTL                   : Infinite\n                                     Description           : The application was activated successfully.\n                                     RemoveWhenExpired     : False\n                                     IsExpired             : False\n                                     Transitions           : ->Ok = 4/24/2015 6:13:03 PM\n```\n\n### Download\nSystem.Hosting reports Error is the application package download failed.\n\n- SourceId: System.Hosting\n- Property: Download:<RolloutVersion>\n- Next steps: Investigate why download failed on the node.\n\n## DeployedServicePackage System health reports\nSystem.Hosting is the authority on deployed entities.\n\n### Service package activation\nSystem.Hosting reports Ok if the service package activation on the node is successful, Error otherwise.\n\n- SourceId: System.Hosting\n- Property: Activation.\n- Next steps: Investigate why the activation failed.\n\n### Code package activation\nSystem.Hosting reports Ok for each code package if activation is successful. If the activation fails, it reports Warning as configured; if the CodePackage failed to activate or terminated with an error more than the configured 'CodePackageHealthErrorThreshold', Hosting reports Error.\nIf there are multiple code packages in a service package, there will be an Activation report generated for each one.\n\n- SourceId: System.Hosting\n- Property: prefix CodePackageActivation and contains the name of the code package and te entry point. CodePackageActivation:<CodePackageName>:<SetupEntryPoint/EntryPoint>. Eg. CodePackageActivation:Code:SetupEntryPoint.\n\n### Service type registration\nSystem.Hosting reports Ok if the service type was registered successfully. It reports Error if the registration wasn't done in time (configured with ServiceTypeRegistrationTimeout). If the service type is unregistered from the node, because the runtime was closed. Hosting reports Warning.\n\n- SourceId: System.Hosting\n- Property: prefix ServiceTypeRegistration and contains the service type name. Eg. \"ServiceTypeRegistration:FileStoreServiceType\"\n\nThe following shows a healthy deployed service package.\n\n```powershell\nPS C:\\> Get-ServiceFabricDeployedServicePackageHealth -NodeName Node.1 -ApplicationName fabric:/WordCount -ServiceManifestName WordCountServicePkg\n\n\nApplicationName       : fabric:/WordCount\nServiceManifestName   : WordCountServicePkg\nNodeName              : Node.1\nAggregatedHealthState : Ok\nHealthEvents          :\n                        SourceId              : System.Hosting\n                        Property              : Activation\n                        HealthState           : Ok\n                        SequenceNumber        : 130743727751456915\n                        SentAt                : 4/24/2015 6:12:55 PM\n                        ReceivedAt            : 4/24/2015 6:13:03 PM\n                        TTL                   : Infinite\n                        Description           : The ServicePackage was activated successfully.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:13:03 PM\n\n                        SourceId              : System.Hosting\n                        Property              : CodePackageActivation:Code:EntryPoint\n                        HealthState           : Ok\n                        SequenceNumber        : 130743727751613185\n                        SentAt                : 4/24/2015 6:12:55 PM\n                        ReceivedAt            : 4/24/2015 6:13:03 PM\n                        TTL                   : Infinite\n                        Description           : The CodePackage was activated successfully.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:13:03 PM\n\n                        SourceId              : System.Hosting\n                        Property              : ServiceTypeRegistration:WordCountServiceType\n                        HealthState           : Ok\n                        SequenceNumber        : 130743727753644473\n                        SentAt                : 4/24/2015 6:12:55 PM\n                        ReceivedAt            : 4/24/2015 6:13:03 PM\n                        TTL                   : Infinite\n                        Description           : The ServiceType was registered successfully.\n                        RemoveWhenExpired     : False\n                        IsExpired             : False\n                        Transitions           : ->Ok = 4/24/2015 6:13:03 PM\n```\n\n### Download\nSystem.Hosting reports Error is the service package download failed.\n\n- SourceId: System.Hosting\n- Property: Download:<RolloutVersion>\n- Next steps: Investigate why download failed on the node.\n\n### Upgrade validation\nSystem.Hosting reports Error if validation during upgrade fails or if upgrade fails on the node.\n\n- SourceId: System.Hosting\n- Property: prefix FabricUpgradeValidation, contains the upgrade version.\n- Description: points to the error encountered.\n\n## Next steps\n[How to view Service Fabric health reports](service-fabric-view-entities-aggregated-health.md)\n\n[How to Monitor and Diagnose Services locally](service-fabric-diagnostics-how-to-monitor-and-diagnose-services-locally.md)\n\n[Service Fabric Application Upgrade](service-fabric-application-upgrade.md)\n "
}