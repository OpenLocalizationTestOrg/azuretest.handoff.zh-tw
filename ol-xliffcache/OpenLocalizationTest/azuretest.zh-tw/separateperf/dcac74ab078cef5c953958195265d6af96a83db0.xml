{
  "nodes": [
    {
      "content": "Managing identity is just as important in the public cloud is it is on premises.",
      "pos": [
        0,
        80
      ]
    },
    {
      "content": "To help with this, Azure supports several different cloud identity technologies.",
      "pos": [
        81,
        161
      ]
    },
    {
      "content": "They include these:",
      "pos": [
        162,
        181
      ]
    },
    {
      "content": "You can run Windows Server Active Directory (commonly called just AD) in the cloud using virtual machines created with Azure Virtual machines.",
      "pos": [
        185,
        327
      ]
    },
    {
      "content": "This approach makes sense when you're using Azure to extend your on-premises datacenter into the cloud.",
      "pos": [
        328,
        431
      ]
    },
    {
      "content": "You can use Azure Active Directory to give your users single sign-on to Software as a Service (SaaS) applications.",
      "pos": [
        435,
        549
      ]
    },
    {
      "content": "Microsoft's Office 365 uses this technology, for example, and applications running on Azure or other cloud platforms can also use it.",
      "pos": [
        550,
        683
      ]
    },
    {
      "content": "Applications running in the cloud or on-premises can use Azure Active Directory Access Control to let users log in using identities from Facebook, Google, Microsoft, and other identity providers.",
      "pos": [
        687,
        882
      ]
    },
    {
      "content": "This article describes all three of these options.",
      "pos": [
        885,
        935
      ]
    },
    {
      "content": "Table of Contents",
      "pos": [
        940,
        957
      ]
    },
    {
      "content": "Running Windows Server Active Directory in virtual machines",
      "pos": [
        962,
        1021
      ]
    },
    {
      "content": "Using Azure Active Directory",
      "pos": [
        1036,
        1064
      ]
    },
    {
      "content": "Using Azure Active Directory Access Control",
      "pos": [
        1075,
        1118
      ]
    },
    {
      "pos": [
        1130,
        1210
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adinvm\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Running Windows Server Active Directory in virtual machines"
    },
    {
      "content": "Running Windows Server AD in Azure virtual machines is much like running it on-premises.",
      "pos": [
        1212,
        1300
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Figure 1<ept id=\"p1\">](#fig1)</ept> shows a typical example of how this looks.",
      "pos": [
        1301,
        1361
      ]
    },
    {
      "content": "Azure Active Directory in Virtual Machine",
      "pos": [
        1365,
        1406
      ]
    },
    {
      "pos": [
        1451,
        1628
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Fig1\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Figure 1: Windows Server Active Directory can run in Azure virtual machines connected to an organization's on-premises datacenter using Azure Virtual Network."
    },
    {
      "content": "In the example shown here, Windows Server AD is running in VMs created using Azure Virtual Machines, the platform's IaaS technology.",
      "pos": [
        1630,
        1762
      ]
    },
    {
      "content": "These VMs and a few others are grouped into a virtual network connected to an on-premises datacenter using Azure Virtual Network.",
      "pos": [
        1763,
        1892
      ]
    },
    {
      "content": "The virtual network carves out a group of cloud virtual machines that interact with the on-premises network via a virtual private network (VPN) connection.",
      "pos": [
        1893,
        2048
      ]
    },
    {
      "content": "Doing this lets these Azure virtual machines look like just another subnet to the on-premises datacenter.",
      "pos": [
        2049,
        2154
      ]
    },
    {
      "content": "As the figure shows, two of those VMs are running Windows Server AD domain controllers.",
      "pos": [
        2155,
        2242
      ]
    },
    {
      "content": "The other virtual machines in the virtual network might be running applications, such as SharePoint, or being used in some other way, such as for development and testing.",
      "pos": [
        2243,
        2413
      ]
    },
    {
      "content": "The on-premises datacenter is also running two Windows Server AD domain controllers.",
      "pos": [
        2414,
        2498
      ]
    },
    {
      "content": "There are several options for connecting the domain controllers in the cloud with those running on premises:",
      "pos": [
        2500,
        2608
      ]
    },
    {
      "content": "Make all of them part of a single Active Directory domain.",
      "pos": [
        2612,
        2670
      ]
    },
    {
      "content": "Create separate AD domains on-premises and in the cloud that are part of the same forest.",
      "pos": [
        2674,
        2763
      ]
    },
    {
      "content": "Create separate AD forests in the cloud and on-premises, then connect the forests using cross-forest trusts or Windows Server Active Directory Federation Services (AD FS), which can also run in virtual machines on Azure.",
      "pos": [
        2767,
        2987
      ]
    },
    {
      "content": "Whatever choice is made, an administrator should make sure that authentication requests from on-premises users go to cloud domain controllers only when necessary, since the link to the cloud is likely to be slower than on-premises networks.",
      "pos": [
        2989,
        3229
      ]
    },
    {
      "content": "Another factor to consider in connecting cloud and on-premises domain controllers is the traffic generated by replication.",
      "pos": [
        3230,
        3352
      ]
    },
    {
      "content": "Domain controllers in the cloud are typically in their own AD site, which allows an administrator to schedule how often replication is done.",
      "pos": [
        3353,
        3493
      ]
    },
    {
      "content": "Azure charges for traffic sent out of an Azure datacenter, although not for bytes sent in, which might affect the administrator's replication choices.",
      "pos": [
        3494,
        3644
      ]
    },
    {
      "content": "It's also worth pointing out that while Azure does provide its own Domain Name System (DNS) support, this service is missing features required by Active Directory (such as support for Dynamic DNS and SRV records).",
      "pos": [
        3645,
        3858
      ]
    },
    {
      "content": "Because of this, running Windows Server AD on Azure requires setting up your own DNS servers in the cloud.",
      "pos": [
        3859,
        3965
      ]
    },
    {
      "content": "Running Windows Server AD in Azure VMs can make sense in several different situations.",
      "pos": [
        3967,
        4053
      ]
    },
    {
      "content": "Here are some examples:",
      "pos": [
        4054,
        4077
      ]
    },
    {
      "content": "If you're using Azure Virtual Machines as an extension of your own datacenter, you might run applications in the cloud that need local domain controllers to handle things such as Windows Integrated Authentication requests or LDAP queries.",
      "pos": [
        4081,
        4319
      ]
    },
    {
      "content": "SharePoint, for example, interacts frequently with Active Directory, and so while it's possible to run a SharePoint farm on Azure using an on-premises directory, setting up domain controllers in the cloud will significantly improve performance.",
      "pos": [
        4320,
        4564
      ]
    },
    {
      "content": "(It's important to realize that this isn't necessarily required, however; plenty of applications can run successfully in the cloud using only on-premises domain controllers.)",
      "pos": [
        4565,
        4739
      ]
    },
    {
      "content": "Suppose a faraway branch office lacks the resources to run its own domain controllers.",
      "pos": [
        4743,
        4829
      ]
    },
    {
      "content": "Today, its users must authenticate to domain controllers on the other side of the world - logins are slow.",
      "pos": [
        4830,
        4936
      ]
    },
    {
      "content": "Running Active Directory on Azure in a closer Microsoft datacenter can speed this up without requiring more servers in the branch office.",
      "pos": [
        4937,
        5074
      ]
    },
    {
      "content": "An organization that uses Azure for disaster recovery might maintain a small set of active VMs in the cloud, including a domain controller.",
      "pos": [
        5078,
        5217
      ]
    },
    {
      "content": "It can then be prepared to expand this site as needed to take over for failures elsewhere.",
      "pos": [
        5218,
        5308
      ]
    },
    {
      "content": "There are also other possibilities.",
      "pos": [
        5310,
        5345
      ]
    },
    {
      "content": "For example, you're not required to connect Windows Server AD in the cloud to an on-premises datacenter.",
      "pos": [
        5346,
        5450
      ]
    },
    {
      "content": "If you wanted to run a SharePoint farm that served a particular set of users, for instance, all of whom would log in solely with cloud-based identities, you might create a standalone forest on Azure.",
      "pos": [
        5451,
        5650
      ]
    },
    {
      "content": "How you use this technology depends on what your goals are.",
      "pos": [
        5651,
        5710
      ]
    },
    {
      "content": "(For more detailed guidance on using Windows Server AD with Azure, <bpt id=\"p1\">[</bpt>see here<ept id=\"p1\">](http://msdn.microsoft.com/library/windowsazure/jj156090.aspx)</ept>.)",
      "pos": [
        5711,
        5852
      ]
    },
    {
      "pos": [
        5857,
        5902
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"ad\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Using Azure Active Directory"
    },
    {
      "content": "As SaaS applications become more and more common, they raise an obvious question: What kind of directory service should these cloud-based applications use?",
      "pos": [
        5904,
        6059
      ]
    },
    {
      "content": "Microsoft's answer to that question is Azure Active Directory.",
      "pos": [
        6060,
        6122
      ]
    },
    {
      "content": "There are two main options for using this directory service in the cloud:",
      "pos": [
        6124,
        6197
      ]
    },
    {
      "content": "Individuals and organizations that use only SaaS applications can rely on Azure Active Directory as their sole directory service.",
      "pos": [
        6201,
        6330
      ]
    },
    {
      "content": "Organizations that run Windows Server Active Directory can connect their on-premises directory to Azure Active Directory, then use it to give their users single sign-on to SaaS applications.",
      "pos": [
        6334,
        6524
      ]
    },
    {
      "pos": [
        6527,
        6641
      ],
      "content": "<bpt id=\"p1\">[</bpt>Figure 2<ept id=\"p1\">](#fig2)</ept> illustrates the first of these two options, where Azure Active Directory is all that's required."
    },
    {
      "content": "Azure Active Directory in Virtual Machine",
      "pos": [
        6645,
        6686
      ]
    },
    {
      "pos": [
        6726,
        6866
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"fig2\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Figure 2: Azure Active Directory gives an organization's users single sign-on to SaaS applications, including Office 365."
    },
    {
      "content": "As the figure shows, Azure AD is a multi-tenant service.",
      "pos": [
        6868,
        6924
      ]
    },
    {
      "content": "This means that it can simultaneously support many different organizations, storing directory information about users at each of them.",
      "pos": [
        6925,
        7059
      ]
    },
    {
      "content": "In this example, a user at organization A is trying to access a SaaS application.",
      "pos": [
        7060,
        7141
      ]
    },
    {
      "content": "This application might be part of Office 365, such as SharePoint Online, or it might be something else - non-Microsoft applications can also use this technology.",
      "pos": [
        7142,
        7303
      ]
    },
    {
      "content": "Because Azure AD supports the SAML 2.0 protocol, all that's required from an application is the ability to interact using this industry standard.",
      "pos": [
        7304,
        7449
      ]
    },
    {
      "content": "(In fact, applications that use Azure AD can run in any datacenter, not just an Azure datacenter.)",
      "pos": [
        7450,
        7548
      ]
    },
    {
      "content": "The process begins when the user accesses a SaaS application (step 1).",
      "pos": [
        7550,
        7620
      ]
    },
    {
      "content": "To use this application, the user must present a token issued by Azure AD.",
      "pos": [
        7621,
        7695
      ]
    },
    {
      "content": "This token contains information that identifies the user, and it's digitally signed by Azure AD.",
      "pos": [
        7697,
        7793
      ]
    },
    {
      "content": "To get the token, the user authenticates himself to Azure AD by providing a username and password (step 2).",
      "pos": [
        7794,
        7901
      ]
    },
    {
      "content": "Azure AD then returns the token he needs (step 3).",
      "pos": [
        7902,
        7952
      ]
    },
    {
      "content": "This token is then sent to the SaaS application (step 4), which validates the token's signature and uses its contents (step 5).",
      "pos": [
        7954,
        8081
      ]
    },
    {
      "content": "Typically, the application will use the identity information the token contains to decide what information the user is allowed to access and perhaps in other ways.",
      "pos": [
        8082,
        8245
      ]
    },
    {
      "content": "If the application needs more information about the user than what's contained in the token, it can request this directly from Azure AD using the Azure AD Graph API (step 6).",
      "pos": [
        8247,
        8421
      ]
    },
    {
      "content": "In the initial version of Azure AD, the directory schema is quite simple: It contains just users and groups and relationships among them.",
      "pos": [
        8422,
        8559
      ]
    },
    {
      "content": "Applications can use this information to learn about connections between users.",
      "pos": [
        8560,
        8639
      ]
    },
    {
      "content": "For example, suppose an application needs to know who this user's manager is to decide whether he's allowed access to some chunk of data.",
      "pos": [
        8640,
        8777
      ]
    },
    {
      "content": "It can learn this by querying Azure AD through the Graph API.",
      "pos": [
        8778,
        8839
      ]
    },
    {
      "content": "The Graph API uses an ordinary RESTful protocol, which makes it straightforward to use from most clients, including mobile devices.",
      "pos": [
        8841,
        8972
      ]
    },
    {
      "content": "The API also supports the extensions defined by OData, adding things such as a query language to let clients access data in more useful ways.",
      "pos": [
        8973,
        9114
      ]
    },
    {
      "content": "(For more on OData, see <bpt id=\"p1\">[</bpt>Introducing OData<ept id=\"p1\">](http://download.microsoft.com/download/E/5/A/E5A59052-EE48-4D64-897B-5F7C608165B8/IntroducingOData.pdf)</ept>.) Because the Graph API can be used to learn about relationships between users, it lets applications understand the social graph that's embedded in the Azure AD schema for a particular organization (which is why it's called the Graph API).",
      "pos": [
        9115,
        9502
      ]
    },
    {
      "content": "And to authenticate itself to Azure AD for Graph API requests, an application uses OAuth 2.0.",
      "pos": [
        9503,
        9596
      ]
    },
    {
      "content": "If an organization doesn't use Windows Server Active Directory - it has no on-premises servers or domains - and relies solely on cloud applications that use Azure AD, using just this cloud directory would give the firm's users single sign-on to all of them.",
      "pos": [
        9598,
        9855
      ]
    },
    {
      "content": "Yet while this scenario gets more common every day, most organizations still use on-premises domains created with Windows Server Active Directory.",
      "pos": [
        9856,
        10002
      ]
    },
    {
      "content": "Azure AD has a useful role to play here as well, as <bpt id=\"p1\">[</bpt>Figure 3<ept id=\"p1\">](#fig3)</ept> shows.",
      "pos": [
        10003,
        10079
      ]
    },
    {
      "content": "<ph id=\"ph1\">![</ph>Azure Active Directory in Virtual Machine<ph id=\"ph2\">](./media/identity/identity_03_AD.png)</ph>",
      "pos": [
        10081,
        10162
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"fig3\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Figure 3: An organization can federate Windows Server Active Directory with Azure Active Directory to give its users single sign-on to SaaS applications.",
      "pos": [
        10163,
        10333
      ]
    },
    {
      "content": "In this scenario, a user at organization B wishes to access a SaaS application.",
      "pos": [
        10335,
        10414
      ]
    },
    {
      "content": "Before she does this, the organization's directory administrators must establish a federation relationship with Azure AD using AD FS, as the figure shows.",
      "pos": [
        10415,
        10569
      ]
    },
    {
      "content": "Those admins must also configure data synchronization between the organization's on-premises Windows Server AD and Azure AD.",
      "pos": [
        10570,
        10694
      ]
    },
    {
      "content": "This automatically copies user and group information from the on-premises directory to Azure AD.",
      "pos": [
        10695,
        10791
      ]
    },
    {
      "content": "Notice what this allows: In effect, the organization is extending its on-premises directory into the cloud.",
      "pos": [
        10792,
        10899
      ]
    },
    {
      "content": "Combining Windows Server AD and Azure AD in this way gives the organization a directory service that can be managed as a single entity, while still having a footprint both on-premises and in the cloud.",
      "pos": [
        10900,
        11101
      ]
    },
    {
      "content": "To use Azure AD, the user first logs in to her on-premises Active Directory domain as usual (step 1).",
      "pos": [
        11103,
        11204
      ]
    },
    {
      "content": "When she tries to access the SaaS application (step 2), the federation process results in Azure AD issuing her a token for this application (step 3).",
      "pos": [
        11205,
        11354
      ]
    },
    {
      "content": "(For more on how federation works, see <bpt id=\"p1\">[</bpt>Claims-Based Identity for Windows: Technologies and Scenarios<ept id=\"p1\">](http://www.davidchappell.com/writing/white_papers/Claims-Based_Identity_for_Windows_v3.0--Chappell.docx)</ept>.) As before, this token contains information that identifies the user, and it's digitally signed by Azure AD.",
      "pos": [
        11355,
        11672
      ]
    },
    {
      "content": "This token is then sent to the SaaS application (step 4), which validates the token's signature and uses its contents (step 5).",
      "pos": [
        11673,
        11800
      ]
    },
    {
      "content": "And is in the previous scenario, the SaaS application can use the Graph API to learn more about this user if necessary (step 6).",
      "pos": [
        11801,
        11929
      ]
    },
    {
      "content": "Today, Azure AD isn't a complete replacement for on-premises Windows Server AD.",
      "pos": [
        11931,
        12010
      ]
    },
    {
      "content": "As already mentioned, the cloud directory has a much simpler schema, and it's also missing things such as group policy, the ability to store information about machines, and support for LDAP.",
      "pos": [
        12011,
        12201
      ]
    },
    {
      "content": "(In fact, a Windows machine can't be configured to let users log in to it using nothing but Azure AD - this isn't a supported scenario.) Instead, the initial goals of Azure AD include letting enterprise users access applications in the cloud without maintaining a separate login and freeing on-premises directory administrators from manually synchronizing their on-premises directory with every SaaS application their organization uses.",
      "pos": [
        12202,
        12638
      ]
    },
    {
      "content": "Over time, however, expect this cloud directory service to address a wider range of scenarios.",
      "pos": [
        12639,
        12733
      ]
    },
    {
      "pos": [
        12738,
        12798
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"ac\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Using Azure Active Directory Access Control"
    },
    {
      "content": "Cloud-based identity technologies can be used to solve a variety of problems.",
      "pos": [
        12800,
        12877
      ]
    },
    {
      "content": "Azure Active Directory can give an organization's users single sign-on to multiple SaaS applications, for example.",
      "pos": [
        12878,
        12992
      ]
    },
    {
      "content": "But identity technologies in the cloud can also be used in other ways.",
      "pos": [
        12993,
        13063
      ]
    },
    {
      "content": "Suppose, for instance, that an application wishes to let its users log in using tokens issued by multiple <bpt id=\"p1\">*</bpt>identity providers (IdPs)<ept id=\"p1\">*</ept>.",
      "pos": [
        13065,
        13199
      ]
    },
    {
      "content": "Lots of different identity providers exist today, including Facebook, Google, Microsoft, and others, and applications frequently let users sign in using one of these identities.",
      "pos": [
        13200,
        13377
      ]
    },
    {
      "content": "Why should an application bother to maintain its own list of users and passwords when it can instead rely on identities that already exist?",
      "pos": [
        13378,
        13517
      ]
    },
    {
      "content": "Accepting existing identities makes life simpler both for users, who have one less username and password to remember, and for the people who create the application, who no longer need to maintain their own lists of usernames and passwords.",
      "pos": [
        13518,
        13757
      ]
    },
    {
      "content": "But while every identity provider issues some kind of token, those tokens aren't standard - each IdP has its own format.",
      "pos": [
        13759,
        13879
      ]
    },
    {
      "content": "Furthermore, the information in those tokens also isn't standard.",
      "pos": [
        13880,
        13945
      ]
    },
    {
      "content": "An application that wishes to accept tokens issued by, say, Facebook, Google, and Microsoft is faced with the challenge of writing unique code to handle each of these different formats.",
      "pos": [
        13946,
        14131
      ]
    },
    {
      "content": "But why do this?",
      "pos": [
        14133,
        14149
      ]
    },
    {
      "content": "Why not instead create an intermediary that can generate a single token format with a common representation of identity information?",
      "pos": [
        14150,
        14282
      ]
    },
    {
      "content": "This approach would make life simpler for the developers who create applications, since they now need to handle only one kind of token.",
      "pos": [
        14283,
        14418
      ]
    },
    {
      "content": "Azure Active Directory Access Control does exactly this, providing an intermediary in the cloud for working with diverse tokens.",
      "pos": [
        14419,
        14547
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Figure 4<ept id=\"p1\">](#fig4)</ept> shows how it works",
      "pos": [
        14548,
        14584
      ]
    },
    {
      "content": "<ph id=\"ph1\">![</ph>Azure Active Directory in Virtual Machine<ph id=\"ph2\">](./media/identity/identity_04_IdentityProviders.png)</ph>",
      "pos": [
        14586,
        14682
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"fig4\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Figure 4: Azure Active Directory Access Control makes it easier for applications to accept identity tokens issued by different identity providers.",
      "pos": [
        14683,
        14846
      ]
    },
    {
      "content": "The process begins when a user attempts to access the application from a browser.",
      "pos": [
        14848,
        14929
      ]
    },
    {
      "content": "The application redirects her to an IdP of her choice (and that the application also trusts).",
      "pos": [
        14930,
        15023
      ]
    },
    {
      "content": "She authenticates herself to this IdP, such as by entering a username and password (step 1), and the IdP returns a token containing information about her (step 2).",
      "pos": [
        15024,
        15187
      ]
    },
    {
      "content": "As the figure shows, Access Control supports a range of different cloud-based IdPs, including accounts created by Google, Yahoo, Facebook, Microsoft (formerly known as Windows Live ID), and any OpenID provider.",
      "pos": [
        15189,
        15399
      ]
    },
    {
      "content": "It also supports identifies created using Azure Active Directory and, through federation with AD FS, Windows Server Active Directory.",
      "pos": [
        15400,
        15533
      ]
    },
    {
      "content": "The goal is to cover the most commonly used identities today, whether they're issued by IdPs in the cloud or on-premises.",
      "pos": [
        15534,
        15655
      ]
    },
    {
      "content": "Once the user's browser has an IdP token from her chosen IdP, it sends this token to Access Control (step 3).",
      "pos": [
        15657,
        15766
      ]
    },
    {
      "content": "Access Control validates the token, making sure that it really was issued by this IdP, then creates a new token according to the rules that have been defined for this application.",
      "pos": [
        15767,
        15946
      ]
    },
    {
      "content": "Like Azure Active Directory, Access Control is a multi-tenant service, but the tenants are applications rather than customer organizations.",
      "pos": [
        15947,
        16086
      ]
    },
    {
      "content": "Each application can get its own namespace, as the figure shows, and can define various rules about authorization and more.",
      "pos": [
        16087,
        16210
      ]
    },
    {
      "content": "These rules let each application's administrator define how tokens from various IdPs should be transformed into an Access Control token.",
      "pos": [
        16212,
        16348
      ]
    },
    {
      "content": "For example, if different IdPs use different types for representing usernames, Access Control rules can transform all of these into a common username type.",
      "pos": [
        16349,
        16504
      ]
    },
    {
      "content": "Access Control then sends this new token back to the browser (step 4), which submits it to the application (step 5).",
      "pos": [
        16505,
        16621
      ]
    },
    {
      "content": "Once it has the Access Control token, the application verifies that this token really was issued by Access Control, then uses the information it contains (step 6).",
      "pos": [
        16622,
        16785
      ]
    },
    {
      "content": "While this process might seem a little complicated, it actually makes life significantly simpler for the creator of the application.",
      "pos": [
        16787,
        16919
      ]
    },
    {
      "content": "Rather than handle diverse tokens containing different information, the application can accept identities issued by multiple identity providers while still receiving only a single token with familiar information.",
      "pos": [
        16920,
        17132
      ]
    },
    {
      "content": "Also, rather than require each application to be configured to trust various IdPs, these trust relationships are instead maintained by Access Control - an application need only trust it.",
      "pos": [
        17133,
        17319
      ]
    },
    {
      "content": "It's worth pointing out that nothing about Access Control is tied to Windows - it could just as well be used by a Linux application that accepted only Google and Facebook identities.",
      "pos": [
        17321,
        17503
      ]
    },
    {
      "content": "And even though Access Control is part of the Azure Active Directory family, you can think of it as an entirely distinct service from what was described in the previous section.",
      "pos": [
        17504,
        17681
      ]
    },
    {
      "content": "While both technologies work with identity, they address quite different problems (although Microsoft has said that it expects to integrate the two at some point).",
      "pos": [
        17682,
        17845
      ]
    },
    {
      "content": "Working with identity is important in nearly every application.",
      "pos": [
        17847,
        17910
      ]
    },
    {
      "content": "The goal of Access Control is to make it easier for developers to create applications that accept identities from diverse identity providers.",
      "pos": [
        17911,
        18052
      ]
    },
    {
      "content": "By putting this service in the cloud, Microsoft has made it available to any application running on any platform.",
      "pos": [
        18053,
        18166
      ]
    },
    {
      "content": "About the Author",
      "pos": [
        18170,
        18186
      ]
    },
    {
      "pos": [
        18188,
        18324
      ],
      "content": "David Chappell is Principal of Chappell &amp; Associates <bpt id=\"p1\">[</bpt>www.davidchappell.com<ept id=\"p1\">](http://www.davidchappell.com)</ept> in San Francisco, California."
    }
  ],
  "content": "Managing identity is just as important in the public cloud is it is on premises. To help with this, Azure supports several different cloud identity technologies. They include these:\n\n- You can run Windows Server Active Directory (commonly called just AD) in the cloud using virtual machines created with Azure Virtual machines. This approach makes sense when you're using Azure to extend your on-premises datacenter into the cloud.\n\n- You can use Azure Active Directory to give your users single sign-on to Software as a Service (SaaS) applications. Microsoft's Office 365 uses this technology, for example, and applications running on Azure or other cloud platforms can also use it.\n\n- Applications running in the cloud or on-premises can use Azure Active Directory Access Control to let users log in using identities from Facebook, Google, Microsoft, and other identity providers.\n\n\nThis article describes all three of these options.\n\n## Table of Contents\n\n- [Running Windows Server Active Directory in virtual machines](#adinvm)\n\n- [Using Azure Active Directory](#ad)\n\n- [Using Azure Active Directory Access Control](#ac)\n\n\n## <a name=\"adinvm\"></a>Running Windows Server Active Directory in virtual machines\n\nRunning Windows Server AD in Azure virtual machines is much like running it on-premises. [Figure 1](#fig1) shows a typical example of how this looks.\n\n![Azure Active Directory in Virtual Machine](./media/identity/identity_01_ADinVM.png)\n\n\n<a name=\"Fig1\"></a>Figure 1: Windows Server Active Directory can run in Azure virtual machines connected to an organization's on-premises datacenter using Azure Virtual Network.\n\nIn the example shown here, Windows Server AD is running in VMs created using Azure Virtual Machines, the platform's IaaS technology. These VMs and a few others are grouped into a virtual network connected to an on-premises datacenter using Azure Virtual Network. The virtual network carves out a group of cloud virtual machines that interact with the on-premises network via a virtual private network (VPN) connection. Doing this lets these Azure virtual machines look like just another subnet to the on-premises datacenter. As the figure shows, two of those VMs are running Windows Server AD domain controllers. The other virtual machines in the virtual network might be running applications, such as SharePoint, or being used in some other way, such as for development and testing. The on-premises datacenter is also running two Windows Server AD domain controllers.\n\nThere are several options for connecting the domain controllers in the cloud with those running on premises:\n\n- Make all of them part of a single Active Directory domain.\n\n- Create separate AD domains on-premises and in the cloud that are part of the same forest.\n\n- Create separate AD forests in the cloud and on-premises, then connect the forests using cross-forest trusts or Windows Server Active Directory Federation Services (AD FS), which can also run in virtual machines on Azure.\n\nWhatever choice is made, an administrator should make sure that authentication requests from on-premises users go to cloud domain controllers only when necessary, since the link to the cloud is likely to be slower than on-premises networks. Another factor to consider in connecting cloud and on-premises domain controllers is the traffic generated by replication. Domain controllers in the cloud are typically in their own AD site, which allows an administrator to schedule how often replication is done. Azure charges for traffic sent out of an Azure datacenter, although not for bytes sent in, which might affect the administrator's replication choices. It's also worth pointing out that while Azure does provide its own Domain Name System (DNS) support, this service is missing features required by Active Directory (such as support for Dynamic DNS and SRV records). Because of this, running Windows Server AD on Azure requires setting up your own DNS servers in the cloud.\n\nRunning Windows Server AD in Azure VMs can make sense in several different situations. Here are some examples:\n\n- If you're using Azure Virtual Machines as an extension of your own datacenter, you might run applications in the cloud that need local domain controllers to handle things such as Windows Integrated Authentication requests or LDAP queries. SharePoint, for example, interacts frequently with Active Directory, and so while it's possible to run a SharePoint farm on Azure using an on-premises directory, setting up domain controllers in the cloud will significantly improve performance. (It's important to realize that this isn't necessarily required, however; plenty of applications can run successfully in the cloud using only on-premises domain controllers.)\n\n- Suppose a faraway branch office lacks the resources to run its own domain controllers. Today, its users must authenticate to domain controllers on the other side of the world - logins are slow. Running Active Directory on Azure in a closer Microsoft datacenter can speed this up without requiring more servers in the branch office.\n\n- An organization that uses Azure for disaster recovery might maintain a small set of active VMs in the cloud, including a domain controller. It can then be prepared to expand this site as needed to take over for failures elsewhere.\n\nThere are also other possibilities. For example, you're not required to connect Windows Server AD in the cloud to an on-premises datacenter. If you wanted to run a SharePoint farm that served a particular set of users, for instance, all of whom would log in solely with cloud-based identities, you might create a standalone forest on Azure. How you use this technology depends on what your goals are. (For more detailed guidance on using Windows Server AD with Azure, [see here](http://msdn.microsoft.com/library/windowsazure/jj156090.aspx).)\n\n## <a name=\"ad\"></a>Using Azure Active Directory\n\nAs SaaS applications become more and more common, they raise an obvious question: What kind of directory service should these cloud-based applications use? Microsoft's answer to that question is Azure Active Directory.\n\nThere are two main options for using this directory service in the cloud:\n\n- Individuals and organizations that use only SaaS applications can rely on Azure Active Directory as their sole directory service.\n\n- Organizations that run Windows Server Active Directory can connect their on-premises directory to Azure Active Directory, then use it to give their users single sign-on to SaaS applications.\n\n\n[Figure 2](#fig2) illustrates the first of these two options, where Azure Active Directory is all that's required.\n\n![Azure Active Directory in Virtual Machine](./media/identity/identity_02_AD.png)\n\n<a name=\"fig2\"></a>Figure 2: Azure Active Directory gives an organization's users single sign-on to SaaS applications, including Office 365.\n\nAs the figure shows, Azure AD is a multi-tenant service. This means that it can simultaneously support many different organizations, storing directory information about users at each of them. In this example, a user at organization A is trying to access a SaaS application. This application might be part of Office 365, such as SharePoint Online, or it might be something else - non-Microsoft applications can also use this technology. Because Azure AD supports the SAML 2.0 protocol, all that's required from an application is the ability to interact using this industry standard. (In fact, applications that use Azure AD can run in any datacenter, not just an Azure datacenter.)\n\nThe process begins when the user accesses a SaaS application (step 1). To use this application, the user must present a token issued by Azure AD.\n\nThis token contains information that identifies the user, and it's digitally signed by Azure AD. To get the token, the user authenticates himself to Azure AD by providing a username and password (step 2). Azure AD then returns the token he needs (step 3).\n\nThis token is then sent to the SaaS application (step 4), which validates the token's signature and uses its contents (step 5). Typically, the application will use the identity information the token contains to decide what information the user is allowed to access and perhaps in other ways.\n\nIf the application needs more information about the user than what's contained in the token, it can request this directly from Azure AD using the Azure AD Graph API (step 6). In the initial version of Azure AD, the directory schema is quite simple: It contains just users and groups and relationships among them. Applications can use this information to learn about connections between users. For example, suppose an application needs to know who this user's manager is to decide whether he's allowed access to some chunk of data. It can learn this by querying Azure AD through the Graph API.\n\nThe Graph API uses an ordinary RESTful protocol, which makes it straightforward to use from most clients, including mobile devices. The API also supports the extensions defined by OData, adding things such as a query language to let clients access data in more useful ways. (For more on OData, see [Introducing OData](http://download.microsoft.com/download/E/5/A/E5A59052-EE48-4D64-897B-5F7C608165B8/IntroducingOData.pdf).) Because the Graph API can be used to learn about relationships between users, it lets applications understand the social graph that's embedded in the Azure AD schema for a particular organization (which is why it's called the Graph API). And to authenticate itself to Azure AD for Graph API requests, an application uses OAuth 2.0.\n\nIf an organization doesn't use Windows Server Active Directory - it has no on-premises servers or domains - and relies solely on cloud applications that use Azure AD, using just this cloud directory would give the firm's users single sign-on to all of them. Yet while this scenario gets more common every day, most organizations still use on-premises domains created with Windows Server Active Directory. Azure AD has a useful role to play here as well, as [Figure 3](#fig3) shows.\n\n![Azure Active Directory in Virtual Machine](./media/identity/identity_03_AD.png)\n<a id=\"fig3\"></a>Figure 3: An organization can federate Windows Server Active Directory with Azure Active Directory to give its users single sign-on to SaaS applications.\n\nIn this scenario, a user at organization B wishes to access a SaaS application. Before she does this, the organization's directory administrators must establish a federation relationship with Azure AD using AD FS, as the figure shows. Those admins must also configure data synchronization between the organization's on-premises Windows Server AD and Azure AD. This automatically copies user and group information from the on-premises directory to Azure AD. Notice what this allows: In effect, the organization is extending its on-premises directory into the cloud. Combining Windows Server AD and Azure AD in this way gives the organization a directory service that can be managed as a single entity, while still having a footprint both on-premises and in the cloud.\n\nTo use Azure AD, the user first logs in to her on-premises Active Directory domain as usual (step 1). When she tries to access the SaaS application (step 2), the federation process results in Azure AD issuing her a token for this application (step 3). (For more on how federation works, see [Claims-Based Identity for Windows: Technologies and Scenarios](http://www.davidchappell.com/writing/white_papers/Claims-Based_Identity_for_Windows_v3.0--Chappell.docx).) As before, this token contains information that identifies the user, and it's digitally signed by Azure AD. This token is then sent to the SaaS application (step 4), which validates the token's signature and uses its contents (step 5). And is in the previous scenario, the SaaS application can use the Graph API to learn more about this user if necessary (step 6).\n\nToday, Azure AD isn't a complete replacement for on-premises Windows Server AD. As already mentioned, the cloud directory has a much simpler schema, and it's also missing things such as group policy, the ability to store information about machines, and support for LDAP. (In fact, a Windows machine can't be configured to let users log in to it using nothing but Azure AD - this isn't a supported scenario.) Instead, the initial goals of Azure AD include letting enterprise users access applications in the cloud without maintaining a separate login and freeing on-premises directory administrators from manually synchronizing their on-premises directory with every SaaS application their organization uses. Over time, however, expect this cloud directory service to address a wider range of scenarios.\n\n## <a name=\"ac\"></a>Using Azure Active Directory Access Control\n\nCloud-based identity technologies can be used to solve a variety of problems. Azure Active Directory can give an organization's users single sign-on to multiple SaaS applications, for example. But identity technologies in the cloud can also be used in other ways.\n\nSuppose, for instance, that an application wishes to let its users log in using tokens issued by multiple *identity providers (IdPs)*. Lots of different identity providers exist today, including Facebook, Google, Microsoft, and others, and applications frequently let users sign in using one of these identities. Why should an application bother to maintain its own list of users and passwords when it can instead rely on identities that already exist? Accepting existing identities makes life simpler both for users, who have one less username and password to remember, and for the people who create the application, who no longer need to maintain their own lists of usernames and passwords.\n\nBut while every identity provider issues some kind of token, those tokens aren't standard - each IdP has its own format. Furthermore, the information in those tokens also isn't standard. An application that wishes to accept tokens issued by, say, Facebook, Google, and Microsoft is faced with the challenge of writing unique code to handle each of these different formats.\n\nBut why do this? Why not instead create an intermediary that can generate a single token format with a common representation of identity information? This approach would make life simpler for the developers who create applications, since they now need to handle only one kind of token. Azure Active Directory Access Control does exactly this, providing an intermediary in the cloud for working with diverse tokens. [Figure 4](#fig4) shows how it works\n\n![Azure Active Directory in Virtual Machine](./media/identity/identity_04_IdentityProviders.png)\n<a id=\"fig4\"></a>Figure 4: Azure Active Directory Access Control makes it easier for applications to accept identity tokens issued by different identity providers.\n\nThe process begins when a user attempts to access the application from a browser. The application redirects her to an IdP of her choice (and that the application also trusts). She authenticates herself to this IdP, such as by entering a username and password (step 1), and the IdP returns a token containing information about her (step 2).\n\nAs the figure shows, Access Control supports a range of different cloud-based IdPs, including accounts created by Google, Yahoo, Facebook, Microsoft (formerly known as Windows Live ID), and any OpenID provider. It also supports identifies created using Azure Active Directory and, through federation with AD FS, Windows Server Active Directory. The goal is to cover the most commonly used identities today, whether they're issued by IdPs in the cloud or on-premises.\n\nOnce the user's browser has an IdP token from her chosen IdP, it sends this token to Access Control (step 3). Access Control validates the token, making sure that it really was issued by this IdP, then creates a new token according to the rules that have been defined for this application. Like Azure Active Directory, Access Control is a multi-tenant service, but the tenants are applications rather than customer organizations. Each application can get its own namespace, as the figure shows, and can define various rules about authorization and more.\n\nThese rules let each application's administrator define how tokens from various IdPs should be transformed into an Access Control token. For example, if different IdPs use different types for representing usernames, Access Control rules can transform all of these into a common username type. Access Control then sends this new token back to the browser (step 4), which submits it to the application (step 5). Once it has the Access Control token, the application verifies that this token really was issued by Access Control, then uses the information it contains (step 6).\n\nWhile this process might seem a little complicated, it actually makes life significantly simpler for the creator of the application. Rather than handle diverse tokens containing different information, the application can accept identities issued by multiple identity providers while still receiving only a single token with familiar information. Also, rather than require each application to be configured to trust various IdPs, these trust relationships are instead maintained by Access Control - an application need only trust it.\n\nIt's worth pointing out that nothing about Access Control is tied to Windows - it could just as well be used by a Linux application that accepted only Google and Facebook identities. And even though Access Control is part of the Azure Active Directory family, you can think of it as an entirely distinct service from what was described in the previous section. While both technologies work with identity, they address quite different problems (although Microsoft has said that it expects to integrate the two at some point).\n\nWorking with identity is important in nearly every application. The goal of Access Control is to make it easier for developers to create applications that accept identities from diverse identity providers. By putting this service in the cloud, Microsoft has made it available to any application running on any platform.\n\n##About the Author\n\nDavid Chappell is Principal of Chappell & Associates [www.davidchappell.com](http://www.davidchappell.com) in San Francisco, California.\n"
}