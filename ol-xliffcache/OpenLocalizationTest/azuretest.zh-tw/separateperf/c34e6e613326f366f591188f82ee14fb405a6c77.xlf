<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>App Model v2.0 | Microsoft Azure</source>
          <target state="new">App Model v2.0 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a NodeJS Web API accepts tokens from both personal Microsoft Account and work or school accounts.</source>
          <target state="new">How to build a NodeJS Web API accepts tokens from both personal Microsoft Account and work or school accounts.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>App Model v2.0 Preview: Secure a Web API using node.js</source>
          <target state="new">App Model v2.0 Preview: Secure a Web API using node.js</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This information applies to the v2.0 app model public preview.</source>
          <target state="new">This information applies to the v2.0 app model public preview.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</source>
          <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With the v2.0 app model, you can protecet a Web API using <bpt id="p1">[</bpt>OAuth 2.0<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept> access tokens, enabling users with both personal Microsoft account and work or school accounts to securely access your Web API.</source>
          <target state="new">With the v2.0 app model, you can protecet a Web API using <bpt id="p1">[</bpt>OAuth 2.0<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept> access tokens, enabling users with both personal Microsoft account and work or school accounts to securely access your Web API.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Passport<ept id="p1">**</ept> is authentication middleware for Node.js.</source>
          <target state="new"><bpt id="p1">**</bpt>Passport<ept id="p1">**</ept> is authentication middleware for Node.js.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</source>
          <target state="new">Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</source>
          <target state="new">A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>We have developed a strategy for Microsoft Azure Active Directory.</source>
          <target state="new">We have developed a strategy for Microsoft Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>We will install this module and then add the Microsoft Azure Active Directory <ph id="ph1">`passport-azure-ad`</ph> plug-in.</source>
          <target state="new">We will install this module and then add the Microsoft Azure Active Directory <ph id="ph1">`passport-azure-ad`</ph> plug-in.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In order to do this, you’ll need to:</source>
          <target state="new">In order to do this, you’ll need to:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Register an application with Azure AD</source>
          <target state="new">Register an application with Azure AD</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Set up your app to use Passport's azure-ad-passport plug-in.</source>
          <target state="new">Set up your app to use Passport's azure-ad-passport plug-in.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Configure a client application to call the To Do List Web API</source>
          <target state="new">Configure a client application to call the To Do List Web API</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs)</ept>.</source>
          <target state="new">The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs)</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs/archive/skeleton.zip)</ept> or clone the skeleton:</source>
          <target state="new">To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs/archive/skeleton.zip)</ept> or clone the skeleton:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The completed application is provided at the end of this tutorial as well.</source>
          <target state="new">The completed application is provided at the end of this tutorial as well.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>1. Register an App</source>
          <target state="new">1. Register an App</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</source>
          <target state="new">Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Make sure to:</source>
          <target state="new">Make sure to:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>Mobile<ept id="p1">**</ept> platform for your app.</source>
          <target state="new">Add the <bpt id="p1">**</bpt>Mobile<ept id="p1">**</ept> platform for your app.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> from the portal.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> from the portal.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You must use the default value of <ph id="ph1">`urn:ietf:wg:oauth:2.0:oob`</ph>.</source>
          <target state="new">You must use the default value of <ph id="ph1">`urn:ietf:wg:oauth:2.0:oob`</ph>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>2: Download node.js for your platform</source>
          <target state="new">2: Download node.js for your platform</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To successfully use this sample, you must have a working installation of Node.js.</source>
          <target state="new">To successfully use this sample, you must have a working installation of Node.js.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Install Node.js from <bpt id="p1">[</bpt>http://nodejs.org<ept id="p1">](http://nodejs.org)</ept>.</source>
          <target state="new">Install Node.js from <bpt id="p1">[</bpt>http://nodejs.org<ept id="p1">](http://nodejs.org)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>3: Install MongoDB on to your platform</source>
          <target state="new">3: Install MongoDB on to your platform</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To successfully use this sample, you must have a working installation of MongoDB.</source>
          <target state="new">To successfully use this sample, you must have a working installation of MongoDB.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We will use MongoDB to make our REST API persistant across server instances.</source>
          <target state="new">We will use MongoDB to make our REST API persistant across server instances.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Install MongoDB from <bpt id="p1">[</bpt>http://mongodb.org<ept id="p1">](http://www.mongodb.org)</ept>.</source>
          <target state="new">Install MongoDB from <bpt id="p1">[</bpt>http://mongodb.org<ept id="p1">](http://www.mongodb.org)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This walkthrough assumes that you use the default installation and server endpoints for MongoDB, which at the time of this writing is: mongodb://localhost</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This walkthrough assumes that you use the default installation and server endpoints for MongoDB, which at the time of this writing is: mongodb://localhost</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>4: Install the Restify modules in to your Web API</source>
          <target state="new">4: Install the Restify modules in to your Web API</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>We will be using Resitfy to build our REST API.</source>
          <target state="new">We will be using Resitfy to build our REST API.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Restify is a minimal and flexible Node.js application framework derived from Express that has a robust set of features for building REST APIs on top of Connect.</source>
          <target state="new">Restify is a minimal and flexible Node.js application framework derived from Express that has a robust set of features for building REST APIs on top of Connect.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Install Restify</source>
          <target state="new">Install Restify</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the azuread directory.</source>
          <target state="new">From the command-line, change directories to the azuread directory.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory does not exist, create it.</source>
          <target state="new">If the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> directory does not exist, create it.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cd azuread`</ph> - or- <ph id="ph2">`mkdir azuread;`</ph></source>
          <target state="new"><ph id="ph1">`cd azuread`</ph> - or- <ph id="ph2">`mkdir azuread;`</ph></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Type the following command:</source>
          <target state="new">Type the following command:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This command installs Restify.</source>
          <target state="new">This command installs Restify.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Did you get an error?</source>
          <target state="new">Did you get an error?</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When using npm on some operating systems, you may receive an error of Error: EPERM, chmod '/usr/local/bin/..'</source>
          <target state="new">When using npm on some operating systems, you may receive an error of Error: EPERM, chmod '/usr/local/bin/..'</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>and a request to try running the account as an administrator.</source>
          <target state="new">and a request to try running the account as an administrator.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If this occurs, use the sudo command to run npm at a higher privilege level.</source>
          <target state="new">If this occurs, use the sudo command to run npm at a higher privilege level.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Did you get an error regarding DTrace?</source>
          <target state="new">Did you get an error regarding DTrace?</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You may see something like this when installing Restify:</source>
          <target state="new">You may see something like this when installing Restify:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Restify provides a powerful mechanism to trace REST calls using DTrace.</source>
          <target state="new">Restify provides a powerful mechanism to trace REST calls using DTrace.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>However, many operating systems do not have DTrace available.</source>
          <target state="new">However, many operating systems do not have DTrace available.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can safely ignore these errors.</source>
          <target state="new">You can safely ignore these errors.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The output of this command should appear similar to the following:</source>
          <target state="new">The output of this command should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>5: Install Passport.js into your Web API</source>
          <target state="new">5: Install Passport.js into your Web API</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept> is authentication middleware for Node.js.</source>
          <target state="new"><bpt id="p1">[</bpt>Passport<ept id="p1">](http://passportjs.org/)</ept> is authentication middleware for Node.js.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</source>
          <target state="new">Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</source>
          <target state="new">A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>We have developed a strategy for Azure Active Directory.</source>
          <target state="new">We have developed a strategy for Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>We will install this module and then add the Azure Active Directory strategy plug-in.</source>
          <target state="new">We will install this module and then add the Azure Active Directory strategy plug-in.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the azuread directory.</source>
          <target state="new">From the command-line, change directories to the azuread directory.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Enter the following command to install passport.js</source>
          <target state="new">Enter the following command to install passport.js</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The output of the commadn should appear similar to the following:</source>
          <target state="new">The output of the commadn should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>6: Add Passport-Azure-AD to your Web API</source>
          <target state="new">6: Add Passport-Azure-AD to your Web API</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Next, we will add the OAuth strategy, using passport-azuread, a suite of strategies that connect Azure Active Directory with  Passport.</source>
          <target state="new">Next, we will add the OAuth strategy, using passport-azuread, a suite of strategies that connect Azure Active Directory with  Passport.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We will use this strategy for Bearer Tokens in this Rest API sample.</source>
          <target state="new">We will use this strategy for Bearer Tokens in this Rest API sample.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Although OAuth2 provides a framework in which any known token type can be issued, only certain token types have gained wide-spread use.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Although OAuth2 provides a framework in which any known token type can be issued, only certain token types have gained wide-spread use.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For protecting endpoints, that has turned out to be Bearer Tokens.</source>
          <target state="new">For protecting endpoints, that has turned out to be Bearer Tokens.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Bearer tokens are the most widely issued type of token in OAuth2, and many implementations assume that bearer tokens are the only type of token issued.</source>
          <target state="new">Bearer tokens are the most widely issued type of token in OAuth2, and many implementations assume that bearer tokens are the only type of token issued.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the azuread directory</source>
          <target state="new">From the command-line, change directories to the azuread directory</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Type the following command to install Passport.js passport-azure-ad module:</source>
          <target state="new">Type the following command to install Passport.js passport-azure-ad module:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The output of the command should appear similar to the following:</source>
          <target state="new">The output of the command should appear similar to the following:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>7: Add MongoDB modules to your Web API</source>
          <target state="new">7: Add MongoDB modules to your Web API</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We will be using MongoDB as our datastore For that reason, we need to install both the widely used plug-in to manage models and schemas called Mongoose, as well as the database driver for MongoDB, also called MongoDB.</source>
          <target state="new">We will be using MongoDB as our datastore For that reason, we need to install both the widely used plug-in to manage models and schemas called Mongoose, as well as the database driver for MongoDB, also called MongoDB.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>8: Install additional modules</source>
          <target state="new">8: Install additional modules</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Next, we'll install the remaining required modules.</source>
          <target state="new">Next, we'll install the remaining required modules.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Enter the following commands to install the following modules in your node_modules directory:</source>
          <target state="new">Enter the following commands to install the following modules in your node_modules directory:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>9: Create a server.js with your dependencies</source>
          <target state="new">9: Create a server.js with your dependencies</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The server.js file will be providing the majority of our functionality for our Web API server.</source>
          <target state="new">The server.js file will be providing the majority of our functionality for our Web API server.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>We will be adding most of our code to this file.</source>
          <target state="new">We will be adding most of our code to this file.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For production purposes you would refactor the functionality in to smaller files, such as separate routes and controllers.</source>
          <target state="new">For production purposes you would refactor the functionality in to smaller files, such as separate routes and controllers.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For the purpose of this demo we will use server.js for this functionality.</source>
          <target state="new">For the purpose of this demo we will use server.js for this functionality.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Create a <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
          <target state="new">Save the file.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>We will return to it shortly.</source>
          <target state="new">We will return to it shortly.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>10: Create a config file to store your Azure AD settings</source>
          <target state="new">10: Create a config file to store your Azure AD settings</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This code file passes the configuration parameters from your Azure Active Directory Portal to Passport.js.</source>
          <target state="new">This code file passes the configuration parameters from your Azure Active Directory Portal to Passport.js.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You created these configuration values when you added the Web API to the portal in the first part of the walkthrough.</source>
          <target state="new">You created these configuration values when you added the Web API to the portal in the first part of the walkthrough.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We will explain what to put in the values of these parameters after you've copied the code.</source>
          <target state="new">We will explain what to put in the values of these parameters after you've copied the code.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`config.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Create a <ph id="ph1">`config.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Required Values</source>
          <target state="new">Required Values</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>IdentityMetadata<ept id="p1">*</ept>: This is where passport-azure-ad will look for your configuration data for the IdP as well as the keys to validate the JWT tokens.</source>
          <target state="new"><bpt id="p1">*</bpt>IdentityMetadata<ept id="p1">*</ept>: This is where passport-azure-ad will look for your configuration data for the IdP as well as the keys to validate the JWT tokens.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You probably do not want to change this if using Azure Active Directory.</source>
          <target state="new">You probably do not want to change this if using Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>audience<ept id="p1">*</ept>: Your redirect URI from the portal.</source>
          <target state="new"><bpt id="p1">*</bpt>audience<ept id="p1">*</ept>: Your redirect URI from the portal.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>We roll our keys at frequent intervals.</source>
          <target state="new">We roll our keys at frequent intervals.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Please ensure that you are always pulling from the "openid_keys" URL and that the app can access the internet.</source>
          <target state="new">Please ensure that you are always pulling from the "openid_keys" URL and that the app can access the internet.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>11: Add configuration to your server.js file</source>
          <target state="new">11: Add configuration to your server.js file</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>We need to read these values from the Config file you just created across our application.</source>
          <target state="new">We need to read these values from the Config file you just created across our application.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To do this, we simply add the .config file as a required resource in our application and then set the global variables to those in the config.js document</source>
          <target state="new">To do this, we simply add the .config file as a required resource in our application and then set the global variables to those in the config.js document</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information:</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Then, add a new section to <ph id="ph1">`server.js`</ph> with the following code:</source>
          <target state="new">Then, add a new section to <ph id="ph1">`server.js`</ph> with the following code:</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Step 12: Add The MongoDB Model and Schema Information using Moongoose</source>
          <target state="new">Step 12: Add The MongoDB Model and Schema Information using Moongoose</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Now all this preparation is going to start paying off as we wind these three files together in to a REST API service.</source>
          <target state="new">Now all this preparation is going to start paying off as we wind these three files together in to a REST API service.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For this walkthrough we will be using MongoDB to store our Tasks as discussed in <bpt id="p1">***</bpt>Step 4<ept id="p1">***</ept>.</source>
          <target state="new">For this walkthrough we will be using MongoDB to store our Tasks as discussed in <bpt id="p1">***</bpt>Step 4<ept id="p1">***</ept>.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you recall from the config.js file we created in Step 11, we called our database <bpt id="p1">*</bpt>tasklist<ept id="p1">*</ept>, as that was what we put at the end of our mogoose_auth_local connection URL.</source>
          <target state="new">If you recall from the config.js file we created in Step 11, we called our database <bpt id="p1">*</bpt>tasklist<ept id="p1">*</ept>, as that was what we put at the end of our mogoose_auth_local connection URL.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You don't need to create this database beforehand in MongoDB, it will create this for us on first run of our server application (assuming it does not already exist).</source>
          <target state="new">You don't need to create this database beforehand in MongoDB, it will create this for us on first run of our server application (assuming it does not already exist).</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Now that we've told the server what MongoDB database we'd like to use, we need to write some additional code to create the model and schema for our server's Tasks.</source>
          <target state="new">Now that we've told the server what MongoDB database we'd like to use, we need to write some additional code to create the model and schema for our server's Tasks.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Discussion of the model</source>
          <target state="new">Discussion of the model</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Our Schema model is very simple, and you expand it as required.</source>
          <target state="new">Our Schema model is very simple, and you expand it as required.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>NAME - The name of who is assigned to the task.</source>
          <target state="new">NAME - The name of who is assigned to the task.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>TASK - The task itself.</source>
          <target state="new">TASK - The task itself.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>String<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>DATE - The date that the task is due.</source>
          <target state="new">DATE - The date that the task is due.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>DATETIME<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>DATETIME<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>COMPLETED - If the Task is completed or not.</source>
          <target state="new">COMPLETED - If the Task is completed or not.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">***</bpt>BOOLEAN<ept id="p1">***</ept></source>
          <target state="new">A <bpt id="p1">***</bpt>BOOLEAN<ept id="p1">***</ept></target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Creating the schema in the code</source>
          <target state="new">Creating the schema in the code</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the configuration entry:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the configuration entry:</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This will connect to the MongoDB server and hand back a Schema object to us.</source>
          <target state="new">This will connect to the MongoDB server and hand back a Schema object to us.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Using the Schema, create our model in the code</source>
          <target state="new">Using the Schema, create our model in the code</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Below the code you wrote above, add the following code:</source>
          <target state="new">Below the code you wrote above, add the following code:</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>As you can tell from the code, we create our Schema and then create a model object we will use to store our data throughout the code when we define our <bpt id="p1">***</bpt>Routes<ept id="p1">***</ept>.</source>
          <target state="new">As you can tell from the code, we create our Schema and then create a model object we will use to store our data throughout the code when we define our <bpt id="p1">***</bpt>Routes<ept id="p1">***</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Step 13: Add our Routes for our Task REST API server</source>
          <target state="new">Step 13: Add our Routes for our Task REST API server</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Now that we have a database model to work with, let's add the routes we will use for our REST API server.</source>
          <target state="new">Now that we have a database model to work with, let's add the routes we will use for our REST API server.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>About Routes in Restify</source>
          <target state="new">About Routes in Restify</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Routes work in Restify in the exact same way they do using the Express stack.</source>
          <target state="new">Routes work in Restify in the exact same way they do using the Express stack.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>You define routes using the URI that you expect the client applicaitons to call.</source>
          <target state="new">You define routes using the URI that you expect the client applicaitons to call.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Usually, you define your routes in a separate file.</source>
          <target state="new">Usually, you define your routes in a separate file.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For our purposes, we will put our routes in the server.js file.</source>
          <target state="new">For our purposes, we will put our routes in the server.js file.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>We recommend you factor these in to their own file for production use.</source>
          <target state="new">We recommend you factor these in to their own file for production use.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A typical pattern for a Restify Route is:</source>
          <target state="new">A typical pattern for a Restify Route is:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This is the pattern at the most basic level.</source>
          <target state="new">This is the pattern at the most basic level.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Resitfy (and Express) provide much deeper functionaltiy such as defining application types and doing complex routing across different endpoints.</source>
          <target state="new">Resitfy (and Express) provide much deeper functionaltiy such as defining application types and doing complex routing across different endpoints.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For our purposes, we will keep these routes very simply.</source>
          <target state="new">For our purposes, we will keep these routes very simply.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Add default routes to our server</source>
          <target state="new">Add default routes to our server</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>We will now add the basic CRUD routes of Create, Retrieve, Update, and Delete.</source>
          <target state="new">We will now add the basic CRUD routes of Create, Retrieve, Update, and Delete.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the database entries you made above:</source>
          <target state="new">Open your <ph id="ph1">`server.js`</ph> file in our favorite editor and add the following information below the database entries you made above:</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Add some error handling for the routes</source>
          <target state="new">Add some error handling for the routes</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>It makes sense to add some error handling so we can communicate back to the client the problem we encountered in a way it can understand.</source>
          <target state="new">It makes sense to add some error handling so we can communicate back to the client the problem we encountered in a way it can understand.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Add the following code underneath the code you've written above:</source>
          <target state="new">Add the following code underneath the code you've written above:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Step 14: Create your Server!</source>
          <target state="new">Step 14: Create your Server!</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>We have our database defined, we have our routes in place, and the last thing to do is add our server instance that will manage our calls.</source>
          <target state="new">We have our database defined, we have our routes in place, and the last thing to do is add our server instance that will manage our calls.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Restify (and Express) have a lot of deep customization you can do for a REST API server, but again we will use the most basic setup for our purposes.</source>
          <target state="new">Restify (and Express) have a lot of deep customization you can do for a REST API server, but again we will use the most basic setup for our purposes.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>15: Adding the routes (without authentication for now)</source>
          <target state="new">15: Adding the routes (without authentication for now)</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>16: Before we add OAuth support, let's run the server.</source>
          <target state="new">16: Before we add OAuth support, let's run the server.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Test out your server before we add authentication</source>
          <target state="new">Test out your server before we add authentication</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is by using curl in a command line.</source>
          <target state="new">The easiest way to do this is by using curl in a command line.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Before we do that, we need a simple utility that allows us to parse output as JSON.</source>
          <target state="new">Before we do that, we need a simple utility that allows us to parse output as JSON.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To do that, install the json tool as all the examples below use that.</source>
          <target state="new">To do that, install the json tool as all the examples below use that.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This installs the JSON tool globally.</source>
          <target state="new">This installs the JSON tool globally.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Now that we’ve accomplished that – let’s play with the server:</source>
          <target state="new">Now that we’ve accomplished that – let’s play with the server:</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>First, make sure that your monogoDB isntance is running..</source>
          <target state="new">First, make sure that your monogoDB isntance is running..</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Then, change to the directory and start curling..</source>
          <target state="new">Then, change to the directory and start curling..</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Then, we can add a task this way:</source>
          <target state="new">Then, we can add a task this way:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The response should be:</source>
          <target state="new">The response should be:</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>And we can list tasks for Brandon this way:</source>
          <target state="new">And we can list tasks for Brandon this way:</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If all this works out, we are ready to add OAuth to the REST API server.</source>
          <target state="new">If all this works out, we are ready to add OAuth to the REST API server.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You have a REST API server with MongoDB!</source>
          <target state="new">You have a REST API server with MongoDB!</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>17: Add Authentication to our REST API Server</source>
          <target state="new">17: Add Authentication to our REST API Server</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Now that we have a running REST API (congrats, btw!) let's get to making it useful against Azure AD.</source>
          <target state="new">Now that we have a running REST API (congrats, btw!) let's get to making it useful against Azure AD.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</source>
          <target state="new">From the command-line, change directories to the <bpt id="p1">**</bpt>azuread<ept id="p1">**</ept> folder if not already there:</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>1: Use the oidcbearerstrategy that is included with passport-azure-ad</source>
          <target state="new">1: Use the oidcbearerstrategy that is included with passport-azure-ad</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>So far we have built a typical REST TODO server without any kind of authorization.</source>
          <target state="new">So far we have built a typical REST TODO server without any kind of authorization.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This is where we start putting that together.</source>
          <target state="new">This is where we start putting that together.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>First, we need to indicate that we want to use Passport.</source>
          <target state="new">First, we need to indicate that we want to use Passport.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Put this right after your other server configuration:</source>
          <target state="new">Put this right after your other server configuration:</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>When writing APIs you should always link the data to something unique from the token that the user can’t spoof.</source>
          <target state="new">When writing APIs you should always link the data to something unique from the token that the user can’t spoof.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>When this server stores TODO items, it stores them based on the subscription ID of the user in the token (called through token.sub) which we put in the “owner” field.</source>
          <target state="new">When this server stores TODO items, it stores them based on the subscription ID of the user in the token (called through token.sub) which we put in the “owner” field.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This ensures that only that user can access his TODOs and no one else can access the TODOs entered.</source>
          <target state="new">This ensures that only that user can access his TODOs and no one else can access the TODOs entered.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>There is no exposure in the API of “owner” so an external user can request other’s TODOs even if they are authenticated.</source>
          <target state="new">There is no exposure in the API of “owner” so an external user can request other’s TODOs even if they are authenticated.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Next, let’s use the Open ID Connect Bearer strategy that comes with passport-azure-ad.</source>
          <target state="new">Next, let’s use the Open ID Connect Bearer strategy that comes with passport-azure-ad.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Just look at the code for now, I’ll explain it shortly.</source>
          <target state="new">Just look at the code for now, I’ll explain it shortly.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Put this after what you pated above:</source>
          <target state="new">Put this after what you pated above:</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.) that all Strategy writers adhere to.</source>
          <target state="new">Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.) that all Strategy writers adhere to.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</source>
          <target state="new">Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The strategy will dutifully come back to us once it does all it’s work.</source>
          <target state="new">The strategy will dutifully come back to us once it does all it’s work.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</source>
          <target state="new">Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The code above takes any user that happens to authenticate to our server.</source>
          <target state="new">The code above takes any user that happens to authenticate to our server.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This is known as auto registration.</source>
          <target state="new">This is known as auto registration.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</source>
          <target state="new">In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</source>
          <target state="new">This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If this wasn’t a command line program, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</source>
          <target state="new">If this wasn’t a command line program, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Since this is a test server we simply add them to the in-memory database.</source>
          <target state="new">Since this is a test server we simply add them to the in-memory database.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>2. Finally, protect some endpoints</source>
          <target state="new">2. Finally, protect some endpoints</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You protect endpoints by specifying the passport.authenticate() call with the protocol you wish to use.</source>
          <target state="new">You protect endpoints by specifying the passport.authenticate() call with the protocol you wish to use.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Let’s edit our route in our server code to do something more interesting:</source>
          <target state="new">Let’s edit our route in our server code to do something more interesting:</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>18: Run your server application again and ensure it rejects you</source>
          <target state="new">18: Run your server application again and ensure it rejects you</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Let's use <ph id="ph1">`curl`</ph> again to see if we now have OAuth2 protection against our endpoints.</source>
          <target state="new">Let's use <ph id="ph1">`curl`</ph> again to see if we now have OAuth2 protection against our endpoints.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>We will do this before runnning any of our client SDKs against this endpoint.</source>
          <target state="new">We will do this before runnning any of our client SDKs against this endpoint.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The headers returned should be enough to tell us we are down the right path.</source>
          <target state="new">The headers returned should be enough to tell us we are down the right path.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>First, make sure that your monogoDB isntance is running..</source>
          <target state="new">First, make sure that your monogoDB isntance is running..</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Then, change to the directory and start curling..</source>
          <target state="new">Then, change to the directory and start curling..</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Try a basic POST:</source>
          <target state="new">Try a basic POST:</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A 401 is the response you are looking for here, as that indicates that the Passport layer is trying to redirect to the authorize endpoint, which is exactly what you want.</source>
          <target state="new">A 401 is the response you are looking for here, as that indicates that the Passport layer is trying to redirect to the authorize endpoint, which is exactly what you want.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You have a REST API Service using OAuth2!</source>
          <target state="new">You have a REST API Service using OAuth2!</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>You've went as far as you can with this server without using an OAuth2 compatible client.</source>
          <target state="new">You've went as far as you can with this server without using an OAuth2 compatible client.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>You will need to go through an additional walkthrough.</source>
          <target state="new">You will need to go through an additional walkthrough.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>If you were just looking for information on how to implement a REST API using Restify and OAuth2, you have more than enough code to keep developing your service and learning how to build on this example.</source>
          <target state="new">If you were just looking for information on how to implement a REST API using Restify and OAuth2, you have more than enough code to keep developing your service and learning how to build on this example.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs/archive/complete.zip)</ept>, or you can clone it from GitHub:</source>
          <target state="new">For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-WebAPI-nodejs/archive/complete.zip)</ept>, or you can clone it from GitHub:</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You can now move onto more advanced topics.</source>
          <target state="new">You can now move onto more advanced topics.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>You may want to try:</source>
          <target state="new">You may want to try:</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Secure a Web App with the v2.0 app model in Node.js &gt;&gt;</source>
          <target state="new">Secure a Web App with the v2.0 app model in Node.js &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>For additional resources, check out:</source>
          <target state="new">For additional resources, check out:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The App Model v2.0 Preview &gt;&gt;</source>
          <target state="new">The App Model v2.0 Preview &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>StackOverflow "azure-active-directory" tag &gt;&gt;</source>
          <target state="new">StackOverflow "azure-active-directory" tag &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c34e6e613326f366f591188f82ee14fb405a6c77</xliffext:olfilehash>
  </header>
</xliff>