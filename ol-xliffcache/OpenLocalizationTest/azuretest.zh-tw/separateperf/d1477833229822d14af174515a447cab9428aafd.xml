{
  "nodes": [
    {
      "content": "Get Started with Fleet on CoreOS on Azure",
      "pos": [
        27,
        68
      ]
    },
    {
      "content": "Provides basic examples of using Fleet and Docker on a CoreOS Linux virtual machine on Azure.",
      "pos": [
        87,
        180
      ]
    },
    {
      "content": "Get Started with Fleet on CoreOS on Azure",
      "pos": [
        548,
        589
      ]
    },
    {
      "pos": [
        591,
        783
      ],
      "content": "This article gives you two quick examples of using <bpt id=\"p1\">[</bpt>fleet<ept id=\"p1\">](https://github.com/coreos/fleet)</ept> and <bpt id=\"p2\">[</bpt>Docker<ept id=\"p2\">](https://www.docker.com/)</ept> to run applications on a cluster of [CoreOS] virtual machines."
    },
    {
      "content": "To use these examples, first set up a three-node CoreOS cluster as described in [How to Use CoreOS on Azure].",
      "pos": [
        785,
        894
      ]
    },
    {
      "content": "Having done that, you'll understand the very basic elements of CoreOS deployments and have a working cluster and client computer.",
      "pos": [
        895,
        1024
      ]
    },
    {
      "content": "We'll use exactly the same cluster name in these examples.",
      "pos": [
        1025,
        1083
      ]
    },
    {
      "content": "Also, these examples assume you're using your local Linux host to run your <bpt id=\"p1\">**</bpt>fleetctl<ept id=\"p1\">**</ept> commands.",
      "pos": [
        1084,
        1181
      ]
    },
    {
      "pos": [
        1189,
        1242
      ],
      "content": "<ph id=\"ph1\">&lt;a id='simple'&gt;</ph>Example 1: Hello World with Docker<ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "content": "Here is a simple \"Hello World\" application that runs in a single Docker container.",
      "pos": [
        1244,
        1326
      ]
    },
    {
      "content": "This uses the [busybox Docker Hub image].",
      "pos": [
        1327,
        1368
      ]
    },
    {
      "content": "On your Linux client computer, use your favorite text editor to create the following <bpt id=\"p1\">**</bpt>systemd<ept id=\"p1\">**</ept> unit file and name it <ph id=\"ph1\">`helloworld.service`</ph>.",
      "pos": [
        1370,
        1510
      ]
    },
    {
      "content": "(For details about the syntax, see [Unit Files].)",
      "pos": [
        1511,
        1560
      ]
    },
    {
      "content": "Now connect to the CoreOS cluster and start the unit by running the following <bpt id=\"p1\">**</bpt>fleetctl<ept id=\"p1\">**</ept> command.",
      "pos": [
        1958,
        2057
      ]
    },
    {
      "content": "The output shows that the unit is started and where it's located.",
      "pos": [
        2058,
        2123
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To run your remote <bpt id=\"p1\">**</bpt>fleetctl<ept id=\"p1\">**</ept> commands without the <bpt id=\"p2\">**</bpt>--tunnel<ept id=\"p2\">**</ept> parameter, optionally set the FLEETCTL_TUNNEL environment variable to tunnel the requests.",
      "pos": [
        2273,
        2442
      ]
    },
    {
      "content": "For example: <ph id=\"ph1\">`export FLEETCTL_TUNNEL=coreos-cluster.cloudapp.net:22`</ph>.",
      "pos": [
        2443,
        2512
      ]
    },
    {
      "content": "You can connect to the container to see the output of the service:",
      "pos": [
        2515,
        2581
      ]
    },
    {
      "content": "To clean up, stop and unload the unit.",
      "pos": [
        3169,
        3207
      ]
    },
    {
      "pos": [
        3370,
        3433
      ],
      "content": "<ph id=\"ph1\">&lt;a id='highavail'&gt;</ph>Example 2: Highly available Apache server<ph id=\"ph2\">&lt;/a&gt;</ph>"
    },
    {
      "content": "One advantage of using CoreOS, Docker, and <bpt id=\"p1\">**</bpt>fleet<ept id=\"p1\">**</ept> is that it's easy to run services in a highly available manner.",
      "pos": [
        3435,
        3551
      ]
    },
    {
      "content": "In this example you'll deploy a service that consists of three identical containers running the Apache web server.",
      "pos": [
        3552,
        3666
      ]
    },
    {
      "content": "The containers will run on the three VMs in the cluster.",
      "pos": [
        3667,
        3723
      ]
    },
    {
      "content": "This example is similar to one in [Launching containers with fleet] and uses the [CoreOS Apache Docker Hub image].",
      "pos": [
        3724,
        3838
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> To run the highly available Apache server, you'll need to configure a load-balanced HTTP endpoint on the virtual machines (public port 80, private port 80).",
      "pos": [
        3841,
        4015
      ]
    },
    {
      "content": "You can do this after creating the CoreOS cluster, using the Azure portal or <bpt id=\"p1\">**</bpt>azure vm endpoint<ept id=\"p1\">**</ept> command.",
      "pos": [
        4016,
        4123
      ]
    },
    {
      "content": "See [Configure a load-balanced set] for more information.",
      "pos": [
        4124,
        4181
      ]
    },
    {
      "content": "On your client computer, use your favorite text editor to create a <bpt id=\"p1\">**</bpt>systemd<ept id=\"p1\">**</ept> template unit file, named apache@.service.",
      "pos": [
        4183,
        4304
      ]
    },
    {
      "content": "You'll use that template to launch three separate instances, named apache@1.service, apache@2.service, and apache@3.service:",
      "pos": [
        4305,
        4429
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The <ph id=\"ph2\">`X-Conflicts`</ph> attribute tells CoreOS that only one instance of this container can be run on a given CoreOS host.",
      "pos": [
        4876,
        5005
      ]
    },
    {
      "content": "For details see [Unit Files].",
      "pos": [
        5006,
        5035
      ]
    },
    {
      "content": "Now start the unit instances on the CoreOS cluster.",
      "pos": [
        5037,
        5088
      ]
    },
    {
      "content": "You should see that they're running on three different machines:",
      "pos": [
        5089,
        5153
      ]
    },
    {
      "content": "To reach the Apache server running on one of the units, send a simple request to the cloud service hosting the CoreOS cluster.",
      "pos": [
        5422,
        5548
      ]
    },
    {
      "content": "You'll see default text returned from the Apache server similar to:",
      "pos": [
        5593,
        5660
      ]
    },
    {
      "content": "You can try shutting down one or more virtual machines in your cluster to verify that the Apache service continues to run.",
      "pos": [
        5867,
        5989
      ]
    },
    {
      "content": "When done, stop and unload units.",
      "pos": [
        5991,
        6024
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        6195,
        6205
      ]
    },
    {
      "content": "You can try doing more with your three-node CoreOS cluster on Azure.",
      "pos": [
        6209,
        6277
      ]
    },
    {
      "content": "Explore how to create more complex clusters and use Docker and create more interesting applications by reading [Tim Park's CoreOS Tutorial], [Patrick Chanezon's CoreOS Tutorial], [Docker] documentation, and the [CoreOS Overview].",
      "pos": [
        6278,
        6507
      ]
    },
    {
      "pos": [
        6511,
        6686
      ],
      "content": "To get started with Fleet and CoreOS in Azure Resource Manager, try this <bpt id=\"p1\">[</bpt>quickstart template<ept id=\"p1\">](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/)</ept>."
    },
    {
      "content": "See [Linux and Open-Source Computing on Azure] for more on using open-source environments on Linux VMs in Azure.",
      "pos": [
        6690,
        6802
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get Started with Fleet on CoreOS on Azure\"\n    description=\"Provides basic examples of using Fleet and Docker on a CoreOS Linux virtual machine on Azure.\"\n    services=\"virtual-machines\"\n    documentationCenter=\"\"\n    authors=\"dlepow\"\n    manager=\"timlt\"\n    editor=\"\"\n    tags=\"azure-service-management\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.devlang=\"multiple\"\n    ms.topic=\"article\"\n    ms.tgt_pltfrm=\"vm-linux\"\n    ms.workload=\"infrastructure-services\"\n    ms.date=\"08/03/2015\"\n    ms.author=\"danlep\"/>\n\n# Get Started with Fleet on CoreOS on Azure\n\nThis article gives you two quick examples of using [fleet](https://github.com/coreos/fleet) and [Docker](https://www.docker.com/) to run applications on a cluster of [CoreOS] virtual machines.\n\nTo use these examples, first set up a three-node CoreOS cluster as described in [How to Use CoreOS on Azure]. Having done that, you'll understand the very basic elements of CoreOS deployments and have a working cluster and client computer. We'll use exactly the same cluster name in these examples. Also, these examples assume you're using your local Linux host to run your **fleetctl** commands.\n\n\n\n\n## <a id='simple'>Example 1: Hello World with Docker</a>\n\nHere is a simple \"Hello World\" application that runs in a single Docker container. This uses the [busybox Docker Hub image].\n\nOn your Linux client computer, use your favorite text editor to create the following **systemd** unit file and name it `helloworld.service`. (For details about the syntax, see [Unit Files].)\n\n```\n[Unit]\nDescription=HelloWorld\nAfter=docker.service\nRequires=docker.service\n\n[Service]\n\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill busybox1\nExecStartPre=-/usr/bin/docker rm busybox1\nExecStartPre=/usr/bin/docker pull busybox\nExecStart=/usr/bin/docker run --name busybox1 busybox /bin/sh -c \"while true; do echo Hello World; sleep 1; done\"\nExecStop=/usr/bin/docker stop busybox1\n\n```\n\nNow connect to the CoreOS cluster and start the unit by running the following **fleetctl** command. The output shows that the unit is started and where it's located.\n\n\n```\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 start helloworld.service\n\n\nUnit helloworld.service launched on 62f0f66e.../100.79.86.62\n```\n\n>[AZURE.NOTE] To run your remote **fleetctl** commands without the **--tunnel** parameter, optionally set the FLEETCTL_TUNNEL environment variable to tunnel the requests. For example: `export FLEETCTL_TUNNEL=coreos-cluster.cloudapp.net:22`.\n\n\nYou can connect to the container to see the output of the service:\n\n```\nfleetctl --tunnel coreos-cloudapp.cluster.net:22 journal helloworld.service\n\nMar 04 21:29:26 node-1 docker[57876]: Hello World\nMar 04 21:29:27 node-1 docker[57876]: Hello World\nMar 04 21:29:28 node-1 docker[57876]: Hello World\nMar 04 21:29:29 node-1 docker[57876]: Hello World\nMar 04 21:29:30 node-1 docker[57876]: Hello World\nMar 04 21:29:31 node-1 docker[57876]: Hello World\nMar 04 21:29:32 node-1 docker[57876]: Hello World\nMar 04 21:29:33 node-1 docker[57876]: Hello World\nMar 04 21:29:34 node-1 docker[57876]: Hello World\nMar 04 21:29:35 node-1 docker[57876]: Hello World\n```\n\nTo clean up, stop and unload the unit.\n\n```\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 stop helloworld.service\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 unload helloworld.service\n```\n\n\n## <a id='highavail'>Example 2: Highly available Apache server</a>\n\nOne advantage of using CoreOS, Docker, and **fleet** is that it's easy to run services in a highly available manner. In this example you'll deploy a service that consists of three identical containers running the Apache web server. The containers will run on the three VMs in the cluster. This example is similar to one in [Launching containers with fleet] and uses the [CoreOS Apache Docker Hub image].\n\n>[AZURE.IMPORTANT] To run the highly available Apache server, you'll need to configure a load-balanced HTTP endpoint on the virtual machines (public port 80, private port 80). You can do this after creating the CoreOS cluster, using the Azure portal or **azure vm endpoint** command. See [Configure a load-balanced set] for more information.\n\nOn your client computer, use your favorite text editor to create a **systemd** template unit file, named apache@.service. You'll use that template to launch three separate instances, named apache@1.service, apache@2.service, and apache@3.service:\n\n```\n[Unit]\nDescription=High Availability Apache\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker kill apache1\nExecStartPre=-/usr/bin/docker rm apache1\nExecStartPre=/usr/bin/docker pull coreos/apache\nExecStart=/usr/bin/docker run -rm --name apache1 -p 80:80 coreos/apache /usr/sbin/apache2ctl -D FOREGROUND\nExecStop=/usr/bin/docker stop apache1\n\n[X-Fleet]\nX-Conflicts=apache@*.service\n```\n\n>[AZURE.NOTE] The `X-Conflicts` attribute tells CoreOS that only one instance of this container can be run on a given CoreOS host. For details see [Unit Files].\n\nNow start the unit instances on the CoreOS cluster. You should see that they're running on three different machines:\n\n```\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 start apache@{1,2,3}.service\n\nunit apache@3.service launched on 00c927e4.../100.79.62.16\nunit apache@1.\\service launched on 62f0f66e.../100.79.86.62\nunit apache@2.service launched on df85f2d1.../100.78.126.15\n\n```\nTo reach the Apache server running on one of the units, send a simple request to the cloud service hosting the CoreOS cluster.\n\n`curl http://coreos-cluster.cloudapp.net`\n\nYou'll see default text returned from the Apache server similar to:\n\n```\n\\<html>\\<body\\>\\<h1\\>It works!\\</h1\\>\n\\<p\\>This is the default web page for this server.\\</p\\>\n\\<p\\>The web server software is running but no content has been added, yet.\\</p\\>\n\\</body\\>\\</html\\>\n```\n\nYou can try shutting down one or more virtual machines in your cluster to verify that the Apache service continues to run.\n\nWhen done, stop and unload units.\n\n```\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 stop apache@{1,2,3}.service\nfleetctl --tunnel coreos-cluster.cloudapp.net:22 unload apache@{1,2,3}.service\n\n```\n\n## Next steps\n\n* You can try doing more with your three-node CoreOS cluster on Azure. Explore how to create more complex clusters and use Docker and create more interesting applications by reading [Tim Park's CoreOS Tutorial], [Patrick Chanezon's CoreOS Tutorial], [Docker] documentation, and the [CoreOS Overview].\n\n* To get started with Fleet and CoreOS in Azure Resource Manager, try this [quickstart template](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/).\n\n* See [Linux and Open-Source Computing on Azure] for more on using open-source environments on Linux VMs in Azure.\n\n<!--Link references-->\n[Azure Command-Line Interface (Azure)]: ../xplat-cli.md\n[CoreOS]: https://coreos.com/\n[CoreOS Overview]: https://coreos.com/using-coreos/\n[CoreOS with Azure]: https://coreos.com/docs/running-coreos/cloud-providers/azure/\n[Tim Park's CoreOS Tutorial]: https://github.com/timfpark/coreos-azure\n[Patrick Chanezon's CoreOS Tutorial]: https://github.com/chanezon/azure-linux/tree/master/coreos/cloud-init\n[Docker]: http://docker.io\n[YAML]: http://yaml.org/\n[How to Use CoreOS on Azure]: virtual-machines-linux-coreos-how-to.md\n[Configure a load-balanced set]: ../load-balancer/load-balancer-internet-getstarted.md\n[Launching containers with fleet]: https://coreos.com/docs/launching-containers/launching/launching-containers-fleet/\n[Unit Files]: https://coreos.com/docs/launching-containers/launching/fleet-unit-files/\n[busybox Docker Hub image]: https://registry.hub.docker.com/_/busybox/\n[CoreOS Apache Docker Hub image]: https://registry.hub.docker.com/u/coreos/apache/\n[Linux and Open-Source Computing on Azure]: virtual-machines-linux-opensource.md\n"
}