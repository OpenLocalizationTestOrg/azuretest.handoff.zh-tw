{
  "nodes": [
    {
      "content": "Connect to SQL Database by using Node.js with Tedious on Ubuntu Linux",
      "pos": [
        28,
        97
      ]
    },
    {
      "content": "Presents a Node.js code sample you can use to connect to Azure SQL Database.",
      "pos": [
        117,
        193
      ]
    },
    {
      "content": "The sample uses the Tedious driver to connect.",
      "pos": [
        194,
        240
      ]
    },
    {
      "content": "Connect to SQL Database by using Node.js with Tedious on Ubuntu Linux",
      "pos": [
        569,
        638
      ]
    },
    {
      "content": "This topic presents a Node.js code sample that runs on Ubuntu Linux.",
      "pos": [
        806,
        874
      ]
    },
    {
      "content": "The sample connects to Azure SQL Database by using the Tedious driver.",
      "pos": [
        875,
        945
      ]
    },
    {
      "content": "Required software items",
      "pos": [
        951,
        974
      ]
    },
    {
      "pos": [
        977,
        1080
      ],
      "content": "Open your terminal and install <bpt id=\"p1\">**</bpt>node<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>npm<ept id=\"p2\">**</ept>, unless they are already installed on your machine."
    },
    {
      "pos": [
        1144,
        1308
      ],
      "content": "After your machine is configured with <bpt id=\"p1\">**</bpt>node<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>npm<ept id=\"p2\">**</ept>, navigate to a directory where you plan to create your Node.js project, and enter the following commands."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>npm init<ept id=\"p1\">**</ept> creates a node project.",
      "pos": [
        1360,
        1396
      ]
    },
    {
      "content": "To retain the defaults during your project creation, press enter until the project is created.",
      "pos": [
        1397,
        1491
      ]
    },
    {
      "content": "Now you see a <bpt id=\"p1\">**</bpt>package.json<ept id=\"p1\">**</ept> file in your project directory.",
      "pos": [
        1492,
        1554
      ]
    },
    {
      "content": "Create an AdventureWorks database",
      "pos": [
        1561,
        1594
      ]
    },
    {
      "content": "The code sample in this topic expects an <bpt id=\"p1\">**</bpt>AdventureWorks<ept id=\"p1\">**</ept> test database.",
      "pos": [
        1597,
        1671
      ]
    },
    {
      "content": "If you do not already have one, see <bpt id=\"p1\">[</bpt>Get started with SQL Database<ept id=\"p1\">](sql-database-get-started.md)</ept>.",
      "pos": [
        1672,
        1769
      ]
    },
    {
      "content": "It is important that you follow the guide to create an <bpt id=\"p1\">**</bpt>AdventureWorks database template<ept id=\"p1\">**</ept>.",
      "pos": [
        1770,
        1862
      ]
    },
    {
      "content": "The examples shown below work only with the <bpt id=\"p1\">**</bpt>AdventureWorks schema<ept id=\"p1\">**</ept>.",
      "pos": [
        1863,
        1933
      ]
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        1940,
        1968
      ]
    },
    {
      "pos": [
        1970,
        2087
      ],
      "content": "The <bpt id=\"p1\">[</bpt>new Connection<ept id=\"p1\">](http://pekim.github.io/tedious/api-connection.html)</ept> function is used to connect to SQL Database."
    },
    {
      "content": "Execute an SQL SELECT",
      "pos": [
        2583,
        2604
      ]
    },
    {
      "content": "All SQL statements are executed using the <bpt id=\"p1\">[</bpt>new Request()<ept id=\"p1\">](http://pekim.github.io/tedious/api-request.html)</ept> function.",
      "pos": [
        2607,
        2723
      ]
    },
    {
      "content": "If the statement returns rows, such as a select statement, you can retreive them using the <bpt id=\"p1\">[</bpt>request.on()<ept id=\"p1\">](http://pekim.github.io/tedious/api-request.html)</ept> function.",
      "pos": [
        2724,
        2888
      ]
    },
    {
      "content": "If there are no rows, <bpt id=\"p1\">[</bpt>request.on()<ept id=\"p1\">](http://pekim.github.io/tedious/api-request.html)</ept> function returns empty lists.",
      "pos": [
        2889,
        3004
      ]
    },
    {
      "content": "Insert a row, apply parameters, and retrieve the generated primary key",
      "pos": [
        4575,
        4645
      ]
    },
    {
      "content": "In SQL Database the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](https://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENCE<ept id=\"p2\">](https://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key<ept id=\"p3\">](https://msdn.microsoft.com/library/ms179610.aspx)</ept> values.",
      "pos": [
        4648,
        4914
      ]
    },
    {
      "content": "In this example you will see how to execute an insert-statement, safely pass parameters which protects from SQL injection, and retrieve the auto-generated primary key value.",
      "pos": [
        4915,
        5088
      ]
    },
    {
      "content": "The code sample in this section applies parameters to an SQL INSERT statement.",
      "pos": [
        5091,
        5169
      ]
    },
    {
      "content": "The primary key value that is generated is retrieved by the program.",
      "pos": [
        5170,
        5238
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Connect to SQL Database by using Node.js with Tedious on Ubuntu Linux\" \n    description=\"Presents a Node.js code sample you can use to connect to Azure SQL Database. The sample uses the Tedious driver to connect.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"meet-bhagdev\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"data-management\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"07/20/2015\" \n    ms.author=\"mebha\"/>\n\n\n# Connect to SQL Database by using Node.js with Tedious on Ubuntu Linux\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\nThis topic presents a Node.js code sample that runs on Ubuntu Linux. The sample connects to Azure SQL Database by using the Tedious driver.\n\n\n## Required software items\n\n\nOpen your terminal and install **node** and **npm**, unless they are already installed on your machine.\n\n\n    sudo apt-get install node\n    sudo apt-get install npm\n\n\nAfter your machine is configured with **node** and **npm**, navigate to a directory where you plan to create your Node.js project, and enter the following commands.\n\n\n    sudo npm init\n    sudo npm install tedious\n\n\n**npm init** creates a node project. To retain the defaults during your project creation, press enter until the project is created. Now you see a **package.json** file in your project directory.\n\n\n### Create an AdventureWorks database\n\n\nThe code sample in this topic expects an **AdventureWorks** test database. If you do not already have one, see [Get started with SQL Database](sql-database-get-started.md). It is important that you follow the guide to create an **AdventureWorks database template**. The examples shown below work only with the **AdventureWorks schema**. \n\n\n## Connect to your SQL Database\n\nThe [new Connection](http://pekim.github.io/tedious/api-connection.html) function is used to connect to SQL Database.\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.windows.net',\n        // If you are on Microsoft Azure, you need this:\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n    // If no error, then good to proceed.\n        console.log(\"Connected\");\n    });\n\n\n## Execute an SQL SELECT\n\n\nAll SQL statements are executed using the [new Request()](http://pekim.github.io/tedious/api-request.html) function. If the statement returns rows, such as a select statement, you can retreive them using the [request.on()](http://pekim.github.io/tedious/api-request.html) function. If there are no rows, [request.on()](http://pekim.github.io/tedious/api-request.html) function returns empty lists.\n\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.windows.net',\n        // When you connect to Azure SQL Database, you need these next options.\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n        // If no error, then good to proceed.\n        console.log(\"Connected\");\n        executeStatement();\n    });\n    \n    var Request = require('tedious').Request;\n    var TYPES = require('tedious').TYPES;\n    \n    function executeStatement() {\n        request = new Request(\"SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;\", function(err) {\n        if (err) {\n            console.log(err);} \n        });\n        var result = \"\";\n        request.on('row', function(columns) {\n            columns.forEach(function(column) {\n              if (column.value === null) {\n                console.log('NULL');\n              } else {\n                result+= column.value + \" \";\n              }\n            });\n            console.log(result);\n            result =\"\";\n        });\n    \n        request.on('done', function(rowCount, more) {\n        console.log(rowCount + ' rows returned');\n        });\n        connection.execSql(request);\n    }\n\n\n## Insert a row, apply parameters, and retrieve the generated primary key\n\n\nIn SQL Database the [IDENTITY](https://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENCE](https://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key](https://msdn.microsoft.com/library/ms179610.aspx) values. In this example you will see how to execute an insert-statement, safely pass parameters which protects from SQL injection, and retrieve the auto-generated primary key value.\n\n\nThe code sample in this section applies parameters to an SQL INSERT statement. The primary key value that is generated is retrieved by the program.\n\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.windows.net',\n        // If you are on Azure SQL Database, you need these next options.\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n        // If no error, then good to proceed.\n        console.log(\"Connected\");\n        executeStatement1();\n    });\n    \n    var Request = require('tedious').Request\n    var TYPES = require('tedious').TYPES;\n    \n    function executeStatement1() {\n        request = new Request(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES (@Name, @Number, @Cost, @Price, CURRENT_TIMESTAMP);\", function(err) {\n         if (err) {\n            console.log(err);} \n        });\n        request.addParameter('Name', TYPES.NVarChar,'SQL Server Express 2014');\n        request.addParameter('Number', TYPES.NVarChar , 'SQLEXPRESS2014');\n        request.addParameter('Cost', TYPES.Int, 11);\n        request.addParameter('Price', TYPES.Int,11);\n        request.on('row', function(columns) {\n            columns.forEach(function(column) {\n              if (column.value === null) {\n                console.log('NULL');\n              } else {\n                console.log(\"Product id of inserted item is \" + column.value);\n              }\n            });\n        });     \n        connection.execSql(request);\n    }\n\n \n"
}