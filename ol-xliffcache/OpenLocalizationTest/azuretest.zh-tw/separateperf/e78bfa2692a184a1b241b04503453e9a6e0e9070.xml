{
  "nodes": [
    {
      "content": "Get started with Azure Notification Hubs | Microsoft Azure",
      "pos": [
        27,
        85
      ]
    },
    {
      "content": "In this tutorial, you learn how to use Azure Notification Hubs to push notifications to Android devices.",
      "pos": [
        104,
        208
      ]
    },
    {
      "content": "Get started with Notification Hubs",
      "pos": [
        541,
        575
      ]
    },
    {
      "content": "Overview",
      "pos": [
        695,
        703
      ]
    },
    {
      "content": "This tutorial shows you how to use Azure Notification Hubs to send push notifications to an Android application.",
      "pos": [
        705,
        817
      ]
    },
    {
      "content": "You'll create a blank Android app that receives push notifications by using Google Cloud Messaging (GCM).",
      "pos": [
        818,
        923
      ]
    },
    {
      "content": "When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app.",
      "pos": [
        924,
        1058
      ]
    },
    {
      "content": "This tutorial demonstrates the simple broadcast scenario in using Notification Hubs.",
      "pos": [
        1060,
        1144
      ]
    },
    {
      "content": "Be sure to follow along with the next tutorial to see how to use Notification Hubs to address specific users and groups of devices.",
      "pos": [
        1145,
        1276
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1281,
        1294
      ]
    },
    {
      "content": "This tutorial requires the following:",
      "pos": [
        1296,
        1333
      ]
    },
    {
      "pos": [
        1337,
        1458
      ],
      "content": "Android Studio, which you can download from <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\"&gt;</ph>the Android site<ph id=\"ph2\">&lt;/a&gt;</ph>."
    },
    {
      "content": "An active Azure account.",
      "pos": [
        1461,
        1485
      ]
    },
    {
      "content": "If you don't have an account, you can create a free trial account in just a couple of minutes.",
      "pos": [
        1486,
        1580
      ]
    },
    {
      "content": "For details, see <bpt id=\"p1\">[</bpt>Azure Free Trial<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fnotification-hubs-android-get-started%2F)</ept>.",
      "pos": [
        1581,
        1809
      ]
    },
    {
      "content": "Completing this tutorial is a prerequisite for all other Notification Hubs tutorials for Android apps.",
      "pos": [
        1812,
        1914
      ]
    },
    {
      "content": "Create a project that supports Google Cloud Messaging",
      "pos": [
        1919,
        1972
      ]
    },
    {
      "content": "Configure a new notification hub",
      "pos": [
        2107,
        2139
      ]
    },
    {
      "pos": [
        2263,
        2330
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"connecting-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Connect your app to the notification hub"
    },
    {
      "content": "Create a new Android project",
      "pos": [
        2335,
        2363
      ]
    },
    {
      "content": "In Android Studio, start a new Android Studio project.",
      "pos": [
        2368,
        2422
      ]
    },
    {
      "content": "![][13]",
      "pos": [
        2428,
        2435
      ]
    },
    {
      "content": "Choose the <bpt id=\"p1\">**</bpt>Phone and Tablet<ept id=\"p1\">**</ept> form factor and the <bpt id=\"p2\">**</bpt>Minimum SDK<ept id=\"p2\">**</ept> that you want to support.",
      "pos": [
        2440,
        2533
      ]
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>.",
      "pos": [
        2534,
        2554
      ]
    },
    {
      "content": "![][14]",
      "pos": [
        2560,
        2567
      ]
    },
    {
      "pos": [
        2572,
        2663
      ],
      "content": "Choose <bpt id=\"p1\">**</bpt>Blank Activity<ept id=\"p1\">**</ept> for the main activity, click <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Finish<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Add Google Play services to the project",
      "pos": [
        2668,
        2707
      ]
    },
    {
      "content": "Add code",
      "pos": [
        2809,
        2817
      ]
    },
    {
      "content": "Download the <ph id=\"ph1\">&lt;a href=\"https://go.microsoft.com/fwLink/?LinkID=280126&amp;clcid=0x409\"&gt;</ph>Notification Hubs Android SDK<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        2822,
        2938
      ]
    },
    {
      "content": "Extract the .zip file and copy <bpt id=\"p1\">**</bpt>notificationhubs\\notification-hubs-0.4.jar<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>notifications\\notifications-1.0.1.jar<ept id=\"p2\">**</ept> to the <bpt id=\"p3\">**</bpt>app\\libs<ept id=\"p3\">**</ept> directory of your project.",
      "pos": [
        2939,
        3109
      ]
    },
    {
      "content": "You can do this by dragging the files directly into the <bpt id=\"p1\">**</bpt>libs<ept id=\"p1\">**</ept> folder in the Project View window of Android Studio.",
      "pos": [
        3110,
        3227
      ]
    },
    {
      "content": "Refresh the <bpt id=\"p1\">**</bpt>libs<ept id=\"p1\">**</ept> folder.",
      "pos": [
        3228,
        3256
      ]
    },
    {
      "content": "Set up the application to obtain a registration ID from GCM, and use it to register the app instance to the notification hub.",
      "pos": [
        3744,
        3869
      ]
    },
    {
      "content": "In the AndroidManifest.xml file, add the following permissions below the  <ph id=\"ph1\">`&lt;/application&gt;`</ph> tag.",
      "pos": [
        3875,
        3970
      ]
    },
    {
      "content": "Make sure to replace <ph id=\"ph1\">`&lt;your package&gt;`</ph> with the package name shown at the top of the AndroidManifest.xml file (<ph id=\"ph2\">`com.example.testnotificationhubs`</ph> in this example).",
      "pos": [
        3971,
        4133
      ]
    },
    {
      "pos": [
        4633,
        4730
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>MainActivity<ept id=\"p1\">**</ept> class, add the following <ph id=\"ph1\">`import`</ph> statements above the class declaration."
    },
    {
      "content": "Add the following private members at the top of the class.",
      "pos": [
        5040,
        5098
      ]
    },
    {
      "content": "Make sure to update the three placeholders:",
      "pos": [
        5447,
        5490
      ]
    },
    {
      "pos": [
        5497,
        5674
      ],
      "content": "<bpt id=\"p1\">**</bpt>SENDER_ID<ept id=\"p1\">**</ept>: Set <ph id=\"ph1\">`SENDER_ID`</ph> to the project number that you obtained earlier from the project that you created in  the <bpt id=\"p2\">[</bpt>Google Cloud Console<ept id=\"p2\">](http://cloud.google.com/console)</ept>."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>HubListenConnectionString<ept id=\"p1\">**</ept>: Set <ph id=\"ph1\">`HubListenConnectionString`</ph> to the <bpt id=\"p2\">**</bpt>DefaultListenAccessSignature<ept id=\"p2\">**</ept> connection string for your hub.",
      "pos": [
        5681,
        5815
      ]
    },
    {
      "content": "You can copy that connection string by clicking <bpt id=\"p1\">**</bpt>View Connection String<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Dashboard<ept id=\"p2\">**</ept> tab of your hub on the <bpt id=\"p3\">[</bpt><ept id=\"p3\">Azure portal]</ept>.",
      "pos": [
        5816,
        5950
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>HubName<ept id=\"p1\">**</ept>: Use the name of your notification hub that appears at the top of the page in Azure for your hub (<bpt id=\"p2\">**</bpt>not<ept id=\"p2\">**</ept> the full URL).",
      "pos": [
        5957,
        6089
      ]
    },
    {
      "content": "For example, use <ph id=\"ph1\">`\"myhub\"`</ph>.",
      "pos": [
        6090,
        6117
      ]
    },
    {
      "pos": [
        6124,
        6261
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>OnCreate<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>MainActivity<ept id=\"p2\">**</ept> class, add the following code to perform the registration on creation of the activity."
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept>, add the code below for the <bpt id=\"p2\">**</bpt>registerWithNotificationHubs()<ept id=\"p2\">**</ept> method.",
      "pos": [
        6561,
        6656
      ]
    },
    {
      "content": "This method reports success after registering with Google Cloud Messaging and the notification hub.",
      "pos": [
        6657,
        6756
      ]
    },
    {
      "content": "Add the <bpt id=\"p1\">**</bpt>DialogNotify<ept id=\"p1\">**</ept> method to the activity to display the notification when the app is running and visible.",
      "pos": [
        7476,
        7588
      ]
    },
    {
      "content": "Also override <bpt id=\"p1\">**</bpt>onStart<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>onStop<ept id=\"p2\">**</ept> to determine whether the activity is visible to display the dialog.",
      "pos": [
        7589,
        7697
      ]
    },
    {
      "content": "Because Android does not display notifications, you must write your own receiver.",
      "pos": [
        9258,
        9339
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept>, add the following element inside the <ph id=\"ph1\">`&lt;application&gt;`</ph> element.",
      "pos": [
        9340,
        9429
      ]
    },
    {
      "pos": [
        9437,
        9497
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Replace the placeholder with your package name."
    },
    {
      "content": "In the Project View, expand <bpt id=\"p1\">**</bpt>app<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>src<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>main<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>java<ept id=\"p4\">**</ept>.",
      "pos": [
        9905,
        9973
      ]
    },
    {
      "content": "Right-click your package folder under <bpt id=\"p1\">**</bpt>java<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Java Class<ept id=\"p3\">**</ept>.",
      "pos": [
        9974,
        10067
      ]
    },
    {
      "content": "![][6]",
      "pos": [
        10073,
        10079
      ]
    },
    {
      "pos": [
        10085,
        10168
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> field for the new class, type <bpt id=\"p2\">**</bpt>MyHandler<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        10175,
        10244
      ],
      "content": "Add the following import statements at the top of <bpt id=\"p1\">**</bpt>MyHandler.java<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        10591,
        10744
      ],
      "content": "Update the class declaration as follows to make <ph id=\"ph1\">`MyHandler`</ph> a subclass of <ph id=\"ph2\">`com.microsoft.windowsazure.notifications.NotificationsHandler`</ph> as shown below."
    },
    {
      "pos": [
        10814,
        10863
      ],
      "content": "Add the following code for the <ph id=\"ph1\">`MyHandler`</ph> class."
    },
    {
      "content": "This code overrides the <ph id=\"ph1\">`OnReceive`</ph> method, so the handler will pop up an <ph id=\"ph2\">`AlertDialog`</ph> to show notifications that are received.",
      "pos": [
        10869,
        10997
      ]
    },
    {
      "content": "The handler also sends the notification to the Android notification manager by using the <ph id=\"ph1\">`sendNotification()`</ph> method.",
      "pos": [
        10998,
        11115
      ]
    },
    {
      "pos": [
        12463,
        12577
      ],
      "content": "In Android Studio on the menu bar, click <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Rebuild Project<ept id=\"p2\">**</ept> to make sure that no errors are detected."
    },
    {
      "content": "Send notifications",
      "pos": [
        12581,
        12599
      ]
    },
    {
      "content": "You can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.",
      "pos": [
        12603,
        12769
      ]
    },
    {
      "content": "![][30]",
      "pos": [
        12771,
        12778
      ]
    },
    {
      "content": "![][31]",
      "pos": [
        12930,
        12937
      ]
    },
    {
      "content": "In Android Studio Project View, expand <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>src<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>main<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>res<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>layout<ept id=\"p5\">**</ept>.",
      "pos": [
        12942,
        13033
      ]
    },
    {
      "content": "Open the <bpt id=\"p1\">**</bpt>activity_main.xml<ept id=\"p1\">**</ept> layout file and click the <bpt id=\"p2\">**</bpt>Text<ept id=\"p2\">**</ept> tab to update the text contents of the file.",
      "pos": [
        13034,
        13144
      ]
    },
    {
      "content": "Update it with the code below, which adds new <ph id=\"ph1\">`Button`</ph> and <ph id=\"ph2\">`EditText`</ph> controls for sending notification messages to the notification hub.",
      "pos": [
        13145,
        13282
      ]
    },
    {
      "content": "Add this code at the bottom, just before <ph id=\"ph1\">`&lt;/RelativeLayout&gt;`</ph>.",
      "pos": [
        13283,
        13344
      ]
    },
    {
      "content": "In Android Studio Project View, expand <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>src<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>main<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>res<ept id=\"p4\">**</ept> &gt; <bpt id=\"p5\">**</bpt>values<ept id=\"p5\">**</ept>.",
      "pos": [
        14045,
        14136
      ]
    },
    {
      "content": "Open the <bpt id=\"p1\">**</bpt>strings.xml<ept id=\"p1\">**</ept> file and add the string values that are referenced by the new <ph id=\"ph1\">`Button`</ph> and <ph id=\"ph2\">`EditText`</ph> controls.",
      "pos": [
        14137,
        14257
      ]
    },
    {
      "content": "Add these at the bottom of the file, just before <ph id=\"ph1\">`&lt;/resources&gt;`</ph>.",
      "pos": [
        14258,
        14322
      ]
    },
    {
      "pos": [
        14481,
        14586
      ],
      "content": "In your <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept> file, add the following <ph id=\"ph1\">`import`</ph> statements above the <ph id=\"ph2\">`MainActivity`</ph> class."
    },
    {
      "pos": [
        15087,
        15188
      ],
      "content": "In your <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept> file, add the following members at the top of the <ph id=\"ph1\">`MainActivity`</ph> class."
    },
    {
      "content": "Enter the name of your hub for <ph id=\"ph1\">`HubName`</ph>, not the namespace.",
      "pos": [
        15194,
        15254
      ]
    },
    {
      "content": "For example, enter \"myhub\".",
      "pos": [
        15255,
        15282
      ]
    },
    {
      "content": "Also, enter the <bpt id=\"p1\">**</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">**</ept> connection string.",
      "pos": [
        15283,
        15354
      ]
    },
    {
      "content": "This connection string can be copied from the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept> by clicking <bpt id=\"p2\">**</bpt>View Connection String<ept id=\"p2\">**</ept> on the <bpt id=\"p3\">**</bpt>Dashboard<ept id=\"p3\">**</ept> tab for your notification hub.",
      "pos": [
        15355,
        15506
      ]
    },
    {
      "content": "Your activity holds the hub name and the full shared access connection string for the hub.",
      "pos": [
        15743,
        15833
      ]
    },
    {
      "content": "You must create a Software Access Signature (SaS) token to authenticate a POST request to send messages to your notification hub.",
      "pos": [
        15834,
        15963
      ]
    },
    {
      "content": "This is done by parsing the key data from the connection string and then creating the SaS token, as mentioned in the <bpt id=\"p1\">[</bpt>Common Concepts<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn495627.aspx)</ept> REST API reference.",
      "pos": [
        15964,
        16173
      ]
    },
    {
      "pos": [
        16179,
        16290
      ],
      "content": "In <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept>, add the following method to the <ph id=\"ph1\">`MainActivity`</ph> class to parse your connection string."
    },
    {
      "pos": [
        17456,
        17572
      ],
      "content": "In <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept>, add the following method to the <ph id=\"ph1\">`MainActivity`</ph> class to create a SaS authentication token."
    },
    {
      "pos": [
        19825,
        20020
      ],
      "content": "In <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept>, add the following method to the <ph id=\"ph1\">`MainActivity`</ph> class to handle the <bpt id=\"p2\">**</bpt>Send Notification<ept id=\"p2\">**</ept> button click and send the notification message to the hub by using the REST API."
    },
    {
      "content": "Test your app",
      "pos": [
        22131,
        22144
      ]
    },
    {
      "content": "Emulator testing",
      "pos": [
        22150,
        22166
      ]
    },
    {
      "content": "If you want to test on an emulator, make sure that your emulator image supports the Google API level that you choose for your app.",
      "pos": [
        22168,
        22298
      ]
    },
    {
      "content": "If your image doesn't support the Google APIs, you will end up with the <bpt id=\"p1\">**</bpt>SERVICE\\_NOT\\_AVAILABLE<ept id=\"p1\">**</ept> exception.",
      "pos": [
        22299,
        22409
      ]
    },
    {
      "content": "Also make sure that you have added your Google account to your running emulator under <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Accounts<ept id=\"p2\">**</ept>.",
      "pos": [
        22411,
        22525
      ]
    },
    {
      "content": "Otherwise, your attempts to register with GCM may result in the <bpt id=\"p1\">**</bpt>AUTHENTICATION\\_FAILED<ept id=\"p1\">**</ept> exception.",
      "pos": [
        22526,
        22627
      ]
    },
    {
      "content": "Testing the app",
      "pos": [
        22633,
        22648
      ]
    },
    {
      "content": "Run the app and notice that the registration ID is reported for a successful registration.",
      "pos": [
        22653,
        22743
      ]
    },
    {
      "content": "![][18]",
      "pos": [
        22749,
        22756
      ]
    },
    {
      "content": "Enter a notification message to be sent to all Android devices that have registered with the hub.",
      "pos": [
        22761,
        22858
      ]
    },
    {
      "content": "![][19]",
      "pos": [
        22864,
        22871
      ]
    },
    {
      "content": "Press <bpt id=\"p1\">**</bpt>Send Notification<ept id=\"p1\">**</ept>.",
      "pos": [
        22876,
        22904
      ]
    },
    {
      "content": "Any devices that have the app running will show an <ph id=\"ph1\">`AlertDialog`</ph> with the notification message.",
      "pos": [
        22905,
        23000
      ]
    },
    {
      "content": "Devices that don't have the app running but were previously registered for the notifications will receive a notification added to the notification manager.",
      "pos": [
        23001,
        23156
      ]
    },
    {
      "content": "Notifications can be viewed by swiping down from the upper-left corner.",
      "pos": [
        23157,
        23228
      ]
    },
    {
      "content": "![][21]",
      "pos": [
        23234,
        23241
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        23245,
        23255
      ]
    },
    {
      "content": "In this simple example, you broadcast notifications to all your Android devices.",
      "pos": [
        23257,
        23337
      ]
    },
    {
      "content": "In order to target specific users, refer to the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Use Notification Hubs to push notifications to users]</ept>.",
      "pos": [
        23338,
        23450
      ]
    },
    {
      "content": "If you want to segment your users by interest groups, you can read <bpt id=\"p1\">[</bpt><ept id=\"p1\">Use Notification Hubs to send breaking news]</ept>.",
      "pos": [
        23451,
        23564
      ]
    },
    {
      "content": "Learn more about how to use Notification Hubs in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Notification Hubs Guidance]</ept>.",
      "pos": [
        23565,
        23643
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with Azure Notification Hubs | Microsoft Azure\"\n    description=\"In this tutorial, you learn how to use Azure Notification Hubs to push notifications to Android devices.\"\n    services=\"notification-hubs\"\n    documentationCenter=\"android\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-android\"\n    ms.devlang=\"java\"\n    ms.topic=\"hero-article\"\n    ms.date=\"09/01/2015\"\n    ms.author=\"wesmc\"/>\n\n# Get started with Notification Hubs\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\n\n##Overview\n\nThis tutorial shows you how to use Azure Notification Hubs to send push notifications to an Android application.\nYou'll create a blank Android app that receives push notifications by using Google Cloud Messaging (GCM). When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app.\n\nThis tutorial demonstrates the simple broadcast scenario in using Notification Hubs. Be sure to follow along with the next tutorial to see how to use Notification Hubs to address specific users and groups of devices.\n\n\n##Prerequisites\n\nThis tutorial requires the following:\n\n+ Android Studio, which you can download from <a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\">the Android site</a>.\n+ An active Azure account. If you don't have an account, you can create a free trial account in just a couple of minutes. For details, see [Azure Free Trial](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fnotification-hubs-android-get-started%2F).\n\n\nCompleting this tutorial is a prerequisite for all other Notification Hubs tutorials for Android apps.\n\n\n##Create a project that supports Google Cloud Messaging\n\n[AZURE.INCLUDE [mobile-services-enable-Google-cloud-messaging](../../includes/mobile-services-enable-google-cloud-messaging.md)]\n\n\n##Configure a new notification hub\n\n[AZURE.INCLUDE [notification-hubs-android-configure-push](../../includes/notification-hubs-android-configure-push.md)]\n\n##<a id=\"connecting-app\"></a>Connect your app to the notification hub\n\n###Create a new Android project\n\n1. In Android Studio, start a new Android Studio project.\n\n    ![][13]\n\n2. Choose the **Phone and Tablet** form factor and the **Minimum SDK** that you want to support. Then click **Next**.\n\n    ![][14]\n\n3. Choose **Blank Activity** for the main activity, click **Next**, and then click **Finish**.\n\n###Add Google Play services to the project\n\n[AZURE.INCLUDE [Add Play Services](../../includes/mobile-services-add-google-play-services.md)]\n\n###Add code\n\n1. Download the <a href=\"https://go.microsoft.com/fwLink/?LinkID=280126&clcid=0x409\">Notification Hubs Android SDK</a>. Extract the .zip file and copy **notificationhubs\\notification-hubs-0.4.jar** and **notifications\\notifications-1.0.1.jar** to the **app\\libs** directory of your project. You can do this by dragging the files directly into the **libs** folder in the Project View window of Android Studio. Refresh the **libs** folder.\n\n\n\n    The reference documentation for these two packages is located in the links below:\n    * [com.microsoft.windowsazure.messaging](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/messaging/package-summary.html)\n    * [com.microsoft.windowsazure.notifications](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/notifications/package-summary.html)\n\n\n    > [AZURE.NOTE] The numbers at the end of the file name may change in subsequent SDK releases.\n\n2. Set up the application to obtain a registration ID from GCM, and use it to register the app instance to the notification hub.\n\n    In the AndroidManifest.xml file, add the following permissions below the  `</application>` tag. Make sure to replace `<your package>` with the package name shown at the top of the AndroidManifest.xml file (`com.example.testnotificationhubs` in this example).\n\n        <uses-permission android:name=\"android.permission.INTERNET\"/>\n        <uses-permission android:name=\"android.permission.GET_ACCOUNTS\"/>\n        <uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n        <uses-permission android:name=\"com.google.android.c2dm.permission.RECEIVE\" />\n\n        <permission android:name=\"<your package>.permission.C2D_MESSAGE\" android:protectionLevel=\"signature\" />\n        <uses-permission android:name=\"<your package>.permission.C2D_MESSAGE\"/>\n\n3. In the **MainActivity** class, add the following `import` statements above the class declaration.\n\n        import android.app.AlertDialog;\n        import android.content.DialogInterface;\n        import android.os.AsyncTask;\n        import com.google.android.gms.gcm.*;\n        import com.microsoft.windowsazure.messaging.*;\n        import com.microsoft.windowsazure.notifications.NotificationsManager;\n\n\n4. Add the following private members at the top of the class.\n\n        private String SENDER_ID = \"<your project number>\";\n        private GoogleCloudMessaging gcm;\n        private NotificationHub hub;\n        private String HubName = \"<Enter Your Hub Name>\";\n        private String HubListenConnectionString = \"<Your default listen connection string>\";\n        private static Boolean isVisible = false;\n\n\n    Make sure to update the three placeholders:\n    * **SENDER_ID**: Set `SENDER_ID` to the project number that you obtained earlier from the project that you created in  the [Google Cloud Console](http://cloud.google.com/console).\n    * **HubListenConnectionString**: Set `HubListenConnectionString` to the **DefaultListenAccessSignature** connection string for your hub. You can copy that connection string by clicking **View Connection String** on the **Dashboard** tab of your hub on the [Azure portal].\n    * **HubName**: Use the name of your notification hub that appears at the top of the page in Azure for your hub (**not** the full URL). For example, use `\"myhub\"`.\n\n\n\n5. In the **OnCreate** method of the **MainActivity** class, add the following code to perform the registration on creation of the activity.\n\n        MyHandler.mainActivity = this;\n        NotificationsManager.handleNotifications(this, SENDER_ID, MyHandler.class);\n        gcm = GoogleCloudMessaging.getInstance(this);\n        hub = new NotificationHub(HubName, HubListenConnectionString, this);\n        registerWithNotificationHubs();\n\n6. In **MainActivity.java**, add the code below for the **registerWithNotificationHubs()** method. This method reports success after registering with Google Cloud Messaging and the notification hub.\n\n        @SuppressWarnings(\"unchecked\")\n        private void registerWithNotificationHubs() {\n            new AsyncTask() {\n                @Override\n                protected Object doInBackground(Object... params) {\n                    try {\n                        String regid = gcm.register(SENDER_ID);\n                    DialogNotify(\"Registered Successfully\",\"RegId : \" +\n                        hub.register(regid).getRegistrationId());\n                    } catch (Exception e) {\n                        DialogNotify(\"Exception\",e.getMessage());\n                        return e;\n                    }\n                    return null;\n                }\n            }.execute(null, null, null);\n        }\n\n\n7. Add the **DialogNotify** method to the activity to display the notification when the app is running and visible. Also override **onStart** and **onStop** to determine whether the activity is visible to display the dialog.\n\n        @Override\n        protected void onStart() {\n            super.onStart();\n            isVisible = true;\n        }\n    \n        @Override\n        protected void onStop() {\n            super.onStop();\n            isVisible = false;\n        }\n\n\n        /**\n          * A modal AlertDialog for displaying a message on the UI thread\n          * when there's an exception or message to report.\n          *\n          * @param title   Title for the AlertDialog box.\n          * @param message The message displayed for the AlertDialog box.\n          */\n        public void DialogNotify(final String title,final String message)\n        {\n            if (isVisible == false)\n                return;\n\n            final AlertDialog.Builder dlg;\n            dlg = new AlertDialog.Builder(this);\n\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    AlertDialog dlgAlert = dlg.create();\n                    dlgAlert.setTitle(title);\n                    dlgAlert.setButton(DialogInterface.BUTTON_POSITIVE,\n                        (CharSequence) \"OK\",\n                        new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                dialog.dismiss();\n                            }\n                        });\n                    dlgAlert.setMessage(message);\n                    dlgAlert.setCancelable(false);\n                    dlgAlert.show();\n                }\n            });\n        }\n\n8. Because Android does not display notifications, you must write your own receiver. In **AndroidManifest.xml**, add the following element inside the `<application>` element.\n\n    > [AZURE.NOTE] Replace the placeholder with your package name.\n\n        <receiver android:name=\"com.microsoft.windowsazure.notifications.NotificationsBroadcastReceiver\"\n            android:permission=\"com.google.android.c2dm.permission.SEND\">\n            <intent-filter>\n                <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" />\n                <category android:name=\"<your package name>\" />\n            </intent-filter>\n        </receiver>\n\n\n9. In the Project View, expand **app** > **src** > **main** > **java**. Right-click your package folder under **java**, click **New**, and then click **Java Class**.\n\n    ![][6]\n\n10. In the **Name** field for the new class, type **MyHandler**, and then click **OK**.\n\n\n11. Add the following import statements at the top of **MyHandler.java**:\n\n        import android.app.NotificationManager;\n        import android.app.PendingIntent;\n        import android.content.Context;\n        import android.content.Intent;\n        import android.os.Bundle;\n        import android.support.v4.app.NotificationCompat;\n        import com.microsoft.windowsazure.notifications.NotificationsHandler;\n\n\n12. Update the class declaration as follows to make `MyHandler` a subclass of `com.microsoft.windowsazure.notifications.NotificationsHandler` as shown below.\n\n        public class MyHandler extends NotificationsHandler {\n\n\n13. Add the following code for the `MyHandler` class.\n\n    This code overrides the `OnReceive` method, so the handler will pop up an `AlertDialog` to show notifications that are received. The handler also sends the notification to the Android notification manager by using the `sendNotification()` method.\n\n        public static final int NOTIFICATION_ID = 1;\n        private NotificationManager mNotificationManager;\n        NotificationCompat.Builder builder;\n        Context ctx;\n\n        static public MainActivity mainActivity;\n\n        @Override\n        public void onReceive(Context context, Bundle bundle) {\n            ctx = context;\n            String nhMessage = bundle.getString(\"message\");\n\n            sendNotification(nhMessage);\n            mainActivity.DialogNotify(\"Received Notification\",nhMessage);\n        }\n\n        private void sendNotification(String msg) {\n            mNotificationManager = (NotificationManager)\n                ctx.getSystemService(Context.NOTIFICATION_SERVICE);\n\n            PendingIntent contentIntent = PendingIntent.getActivity(ctx, 0,\n                new Intent(ctx, MainActivity.class), 0);\n\n            NotificationCompat.Builder mBuilder =\n                new NotificationCompat.Builder(ctx)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(\"Notification Hub Demo\")\n                    .setStyle(new NotificationCompat.BigTextStyle()\n                    .bigText(msg))\n                    .setContentText(msg);\n\n            mBuilder.setContentIntent(contentIntent);\n            mNotificationManager.notify(NOTIFICATION_ID, mBuilder.build());\n        }\n\n14. In Android Studio on the menu bar, click **Build** > **Rebuild Project** to make sure that no errors are detected.\n\n##Send notifications\n\n\n\nYou can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.\n\n![][30]\n\n[AZURE.INCLUDE [notification-hubs-sending-notifications-from-the-portal](../../includes/notification-hubs-sending-notifications-from-the-portal.md)]\n\n![][31]\n\n1. In Android Studio Project View, expand **App** > **src** > **main** > **res** > **layout**. Open the **activity_main.xml** layout file and click the **Text** tab to update the text contents of the file. Update it with the code below, which adds new `Button` and `EditText` controls for sending notification messages to the notification hub. Add this code at the bottom, just before `</RelativeLayout>`.\n\n        <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/send_button\"\n        android:id=\"@+id/sendbutton\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"sendNotificationButtonOnClick\" />\n\n        <EditText\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/editTextNotificationMessage\"\n        android:layout_above=\"@+id/sendbutton\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginBottom=\"42dp\"\n        android:hint=\"@string/notification_message_hint\" />\n\n2. In Android Studio Project View, expand **App** > **src** > **main** > **res** > **values**. Open the **strings.xml** file and add the string values that are referenced by the new `Button` and `EditText` controls. Add these at the bottom of the file, just before `</resources>`.\n\n        <string name=\"send_button\">Send Notification</string>\n        <string name=\"notification_message_hint\">Enter notification message text</string>\n\n\n3. In your **MainActivity.java** file, add the following `import` statements above the `MainActivity` class.\n\n        import java.net.URLEncoder;\n        import javax.crypto.Mac;\n        import javax.crypto.spec.SecretKeySpec;\n\n        import android.util.Base64;\n        import android.view.View;\n        import android.widget.EditText;\n\n        import org.apache.http.HttpResponse;\n        import org.apache.http.client.HttpClient;\n        import org.apache.http.client.methods.HttpPost;\n        import org.apache.http.entity.StringEntity;\n        import org.apache.http.impl.client.DefaultHttpClient;\n\n\n3. In your **MainActivity.java** file, add the following members at the top of the `MainActivity` class.\n\n    Enter the name of your hub for `HubName`, not the namespace. For example, enter \"myhub\". Also, enter the **DefaultFullSharedAccessSignature** connection string. This connection string can be copied from the [Azure portal] by clicking **View Connection String** on the **Dashboard** tab for your notification hub.\n\n        private String HubEndpoint = null;\n        private String HubSasKeyName = null;\n        private String HubSasKeyValue = null;\n        private String HubFullAccess = \"<Enter Your DefaultFullSharedAccess Connection string>\";\n\n4. Your activity holds the hub name and the full shared access connection string for the hub. You must create a Software Access Signature (SaS) token to authenticate a POST request to send messages to your notification hub. This is done by parsing the key data from the connection string and then creating the SaS token, as mentioned in the [Common Concepts](http://msdn.microsoft.com/library/azure/dn495627.aspx) REST API reference.\n\n    In **MainActivity.java**, add the following method to the `MainActivity` class to parse your connection string.\n\n        /**\n         * Example code from http://msdn.microsoft.com/library/azure/dn495627.aspx\n         * to parse the connection string so a SaS authentication token can be\n         * constructed.\n         *\n         * @param connectionString This must be the DefaultFullSharedAccess connection\n         *                         string for this example.\n         */\n        private void ParseConnectionString(String connectionString)\n        {\n            String[] parts = connectionString.split(\";\");\n            if (parts.length != 3)\n                throw new RuntimeException(\"Error parsing connection string: \"\n                        + connectionString);\n\n            for (int i = 0; i < parts.length; i++) {\n                if (parts[i].startsWith(\"Endpoint\")) {\n                    this.HubEndpoint = \"https\" + parts[i].substring(11);\n                } else if (parts[i].startsWith(\"SharedAccessKeyName\")) {\n                    this.HubSasKeyName = parts[i].substring(20);\n                } else if (parts[i].startsWith(\"SharedAccessKey\")) {\n                    this.HubSasKeyValue = parts[i].substring(16);\n                }\n            }\n        }\n\n5. In **MainActivity.java**, add the following method to the `MainActivity` class to create a SaS authentication token.\n\n        /**\n         * Example code from http://msdn.microsoft.com/library/azure/dn495627.aspx to\n         * construct a SaS token from the access key to authenticate a request.\n         *\n         * @param uri The unencoded resource URI string for this operation. The resource\n         *            URI is the full URI of the Service Bus resource to which access is\n         *            claimed. For example,\n         *            \"http://<namespace>.servicebus.windows.net/<hubName>\"\n         */\n        private String generateSasToken(String uri) {\n\n            String targetUri;\n            try {\n                targetUri = URLEncoder\n                        .encode(uri.toString().toLowerCase(), \"UTF-8\")\n                        .toLowerCase();\n\n                long expiresOnDate = System.currentTimeMillis();\n                int expiresInMins = 60; // 1 hour\n                expiresOnDate += expiresInMins * 60 * 1000;\n                long expires = expiresOnDate / 1000;\n                String toSign = targetUri + \"\\n\" + expires;\n\n                // Get an hmac_sha1 key from the raw key bytes\n                byte[] keyBytes = HubSasKeyValue.getBytes(\"UTF-8\");\n                SecretKeySpec signingKey = new SecretKeySpec(keyBytes, \"HmacSHA256\");\n\n                // Get an hmac_sha1 Mac instance and initialize with the signing key\n                Mac mac = Mac.getInstance(\"HmacSHA256\");\n                mac.init(signingKey);\n\n                // Compute the hmac on input data bytes\n                byte[] rawHmac = mac.doFinal(toSign.getBytes(\"UTF-8\"));\n\n                // Using android.util.Base64 for Android Studio instead of\n                // Apache commons codec\n                String signature = URLEncoder.encode(\n                        Base64.encodeToString(rawHmac, Base64.NO_WRAP).toString(), \"UTF-8\");\n\n                // Construct authorization string\n                String token = \"SharedAccessSignature sr=\" + targetUri + \"&sig=\"\n                        + signature + \"&se=\" + expires + \"&skn=\" + HubSasKeyName;\n                return token;\n            } catch (Exception e) {\n                DialogNotify(\"Exception Generating SaS\",e.getMessage().toString());\n            }\n\n            return null;\n        }\n\n\n6. In **MainActivity.java**, add the following method to the `MainActivity` class to handle the **Send Notification** button click and send the notification message to the hub by using the REST API.\n\n        /**\n         * Send Notification button click handler. This method parses the\n         * DefaultFullSharedAccess connection string and generates a SaS token. The\n         * token is added to the Authorization header on the POST request to the\n         * notification hub. The text in the editTextNotificationMessage control\n         * is added as the JSON body for the request to add a GCM message to the hub.\n         *\n         * @param v\n         */\n        public void sendNotificationButtonOnClick(View v) {\n            EditText notificationText = (EditText) findViewById(R.id.editTextNotificationMessage);\n            final String json = \"{\\\"data\\\":{\\\"message\\\":\\\"\" + notificationText.getText().toString() + \"\\\"}}\";\n\n            new Thread()\n            {\n                public void run()\n                {\n                    try\n                    {\n                        HttpClient client = new DefaultHttpClient();\n\n                        // Based on reference documentation...\n                        // http://msdn.microsoft.com/library/azure/dn223273.aspx\n                        ParseConnectionString(HubFullAccess);\n                        String url = HubEndpoint + HubName + \"/messages/?api-version=2015-01\";\n                        HttpPost post = new HttpPost(url);\n\n                        // Authenticate the POST request with the SaS token\n                        post.setHeader(\"Authorization\", generateSasToken(url));\n\n                        // JSON content for GCM\n                        post.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n\n                        // Notification format should be GCM\n                        post.setHeader(\"ServiceBusNotification-Format\", \"gcm\");\n                        post.setEntity(new StringEntity(json));\n\n                        HttpResponse response = client.execute(post);\n                    }\n                    catch(Exception e)\n                    {\n                        DialogNotify(\"Exception\",e.getMessage().toString());\n                    }\n                }\n            }.start();\n        }\n\n\n\n##Test your app\n\n####Emulator testing\n\nIf you want to test on an emulator, make sure that your emulator image supports the Google API level that you choose for your app. If your image doesn't support the Google APIs, you will end up with the **SERVICE\\_NOT\\_AVAILABLE** exception.\n\nAlso make sure that you have added your Google account to your running emulator under **Settings** > **Accounts**. Otherwise, your attempts to register with GCM may result in the **AUTHENTICATION\\_FAILED** exception.\n\n####Testing the app\n\n1. Run the app and notice that the registration ID is reported for a successful registration.\n\n    ![][18]\n\n2. Enter a notification message to be sent to all Android devices that have registered with the hub.\n\n    ![][19]\n\n3. Press **Send Notification**. Any devices that have the app running will show an `AlertDialog` with the notification message. Devices that don't have the app running but were previously registered for the notifications will receive a notification added to the notification manager. Notifications can be viewed by swiping down from the upper-left corner.\n\n    ![][21]\n\n##Next steps\n\nIn this simple example, you broadcast notifications to all your Android devices. In order to target specific users, refer to the tutorial [Use Notification Hubs to push notifications to users]. If you want to segment your users by interest groups, you can read [Use Notification Hubs to send breaking news]. Learn more about how to use Notification Hubs in [Notification Hubs Guidance].\n\n\n<!-- Images. -->\n[1]: ./media/notification-hubs-android-get-started/mobile-services-google-new-project.png\n[2]: ./media/notification-hubs-android-get-started/mobile-services-google-create-server-key.png\n[3]: ./media/notification-hubs-android-get-started/mobile-services-google-create-server-key2.png\n[4]: ./media/notification-hubs-android-get-started/mobile-services-google-create-server-key3.png\n[5]: ./media/notification-hubs-android-get-started/mobile-services-google-enable-GCM.png\n[6]: ./media/notification-hubs-android-get-started/notification-hub-android-new-class.png\n\n[12]: ./media/notification-hubs-android-get-started/notification-hub-connection-strings.png\n\n[13]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-new-project.png\n[14]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-choose-form-factor.png\n[15]: ./media/notification-hubs-android-get-started/notification-hub-create-android-app4.png\n[16]: ./media/notification-hubs-android-get-started/notification-hub-create-android-app5.png\n[17]: ./media/notification-hubs-android-get-started/notification-hub-create-android-app6.png\n\n[18]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-registered.png\n[19]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-set-message.png\n\n[20]: ./media/notification-hubs-android-get-started/notification-hub-create-console-app.png\n[21]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-received-message.png\n[22]: ./media/notification-hubs-android-get-started/notification-hub-scheduler1.png\n[23]: ./media/notification-hubs-android-get-started/notification-hub-scheduler2.png\n[29]: ./media/mobile-services-android-get-started-push/mobile-eclipse-import-Play-library.png\n\n[30]: ./media/notification-hubs-android-get-started/notification-hubs-debug-hub-gcm.png\n\n[31]: ./media/notification-hubs-android-get-started/notification-hubs-android-studio-add-ui.png\n\n\n<!-- URLs. -->\n[Get started with push notifications in Mobile Services]: ../mobile-services-javascript-backend-android-get-started-push.md  \n[Mobile Services Android SDK]: https://go.microsoft.com/fwLink/?LinkID=280126&clcid=0x409\n[Referencing a library project]: http://go.microsoft.com/fwlink/?LinkId=389800\n[Azure portal]: https://manage.windowsazure.com/\n[Notification Hubs Guidance]: http://msdn.microsoft.com/library/jj927170.aspx\n[Use Notification Hubs to push notifications to users]: notification-hubs-aspnet-backend-android-notify-users.md\n[Use Notification Hubs to send breaking news]: notification-hubs-aspnet-backend-android-breaking-news.md\n"
}