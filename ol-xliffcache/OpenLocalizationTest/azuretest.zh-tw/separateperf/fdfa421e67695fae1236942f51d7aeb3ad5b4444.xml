{
  "nodes": [
    {
      "content": "Using offline data in Mobile Services (Xamarin Android) | Microsoft Azure",
      "pos": [
        27,
        100
      ]
    },
    {
      "content": "Learn how to use Azure Mobile Services to cache and sync offline data in your Xamarin Android application",
      "pos": [
        119,
        224
      ]
    },
    {
      "content": "Using offline data sync in Mobile Services",
      "pos": [
        566,
        608
      ]
    },
    {
      "content": "This topic walks through the offline sync capabilities of Azure Mobile Services in the todo list quickstart app.",
      "pos": [
        714,
        826
      ]
    },
    {
      "content": "Offline sync allows you to easily create apps that are usable even when the end user has no network access.",
      "pos": [
        827,
        934
      ]
    },
    {
      "content": "Offline sync has several potential uses:",
      "pos": [
        936,
        976
      ]
    },
    {
      "content": "Improve app responsiveness by caching server data locally on the device",
      "pos": [
        980,
        1051
      ]
    },
    {
      "content": "Make apps resilient against intermittent network connectivity",
      "pos": [
        1054,
        1115
      ]
    },
    {
      "content": "Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity",
      "pos": [
        1118,
        1249
      ]
    },
    {
      "content": "Sync data across multiple devices and detect conflicts when the same record is modified by two devices",
      "pos": [
        1252,
        1354
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To complete this tutorial, you need a Azure account.",
      "pos": [
        1357,
        1422
      ]
    },
    {
      "content": "If you don't have an account, you can sign up for an Azure trial and get up to 10 free mobile services that you can keep using even after your trial ends.",
      "pos": [
        1423,
        1577
      ]
    },
    {
      "content": "For details, see <ph id=\"ph1\">&lt;a href=\"http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=AE564AB28\" target=\"_blank\"&gt;</ph>Azure Free Trial<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        1578,
        1709
      ]
    },
    {
      "content": "If this is your first experience with Mobile Services, you should first complete [Get started with Mobile Services].",
      "pos": [
        1714,
        1830
      ]
    },
    {
      "content": "This tutorial walks you through these basic steps:",
      "pos": [
        1832,
        1882
      ]
    },
    {
      "content": "[Review the Mobile Services sync code]",
      "pos": [
        1887,
        1925
      ]
    },
    {
      "content": "[Update the sync behavior of the app]",
      "pos": [
        1929,
        1966
      ]
    },
    {
      "content": "[Update the app to reconnect your mobile service]",
      "pos": [
        1970,
        2019
      ]
    },
    {
      "content": "This tutorial requires the following:",
      "pos": [
        2021,
        2058
      ]
    },
    {
      "pos": [
        2062,
        2128
      ],
      "content": "Visual Studio with the [Xamarin extension] <bpt id=\"p1\">**</bpt>or<ept id=\"p1\">**</ept> [Xamarin Studio]"
    },
    {
      "content": "Completion of the [Get started with Mobile Services] tutorial",
      "pos": [
        2131,
        2192
      ]
    },
    {
      "pos": [
        2197,
        2262
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"review-offline\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Review the Mobile Services sync code"
    },
    {
      "content": "Azure Mobile Services offline sync allows end users to interact with a local database when the network is not accessible.",
      "pos": [
        2264,
        2385
      ]
    },
    {
      "content": "To use these features in your app, you initialize <ph id=\"ph1\">`MobileServiceClient.SyncContext`</ph> to a local store.",
      "pos": [
        2386,
        2487
      ]
    },
    {
      "content": "Then reference your table through the <ph id=\"ph1\">`IMobileServiceSyncTable`</ph> interface.",
      "pos": [
        2488,
        2562
      ]
    },
    {
      "content": "This section walks through the offline sync related code in <ph id=\"ph1\">`ToDoActivity.cs`</ph>.",
      "pos": [
        2563,
        2641
      ]
    },
    {
      "content": "In Visual Studio or Xamarin Studio, open the project that you completed in the [Get started with Mobile Services] tutorial.",
      "pos": [
        2646,
        2769
      ]
    },
    {
      "content": "Open the file <ph id=\"ph1\">`ToDoActivity.cs`</ph>.",
      "pos": [
        2770,
        2802
      ]
    },
    {
      "content": "Notice the type of the member <ph id=\"ph1\">`toDoTable`</ph> is <ph id=\"ph2\">`IMobileServiceSyncTable`</ph>.",
      "pos": [
        2807,
        2878
      ]
    },
    {
      "content": "Offline sync uses this sync table interface instead of <ph id=\"ph1\">`IMobileServiceTable`</ph>.",
      "pos": [
        2879,
        2956
      ]
    },
    {
      "content": "When a sync table is used, all operations go to the local store and are only synchronized with the remote service with explicit push and pull operations.",
      "pos": [
        2957,
        3110
      ]
    },
    {
      "content": "To get a reference to a sync table, the method <ph id=\"ph1\">`GetSyncTable()`</ph> is used.",
      "pos": [
        3116,
        3188
      ]
    },
    {
      "content": "To remove the offline sync functionality, you would instead use <ph id=\"ph1\">`GetTable()`</ph>.",
      "pos": [
        3189,
        3266
      ]
    },
    {
      "content": "Before any table operations can be performed, the local store must be initialized.",
      "pos": [
        3271,
        3353
      ]
    },
    {
      "content": "This is done in the <ph id=\"ph1\">`InitLocalStoreAsync`</ph> method:",
      "pos": [
        3354,
        3403
      ]
    },
    {
      "content": "This creates a local store using the class <ph id=\"ph1\">`MobileServiceSQLiteStore`</ph>, which is provided in the Mobile Services SDK.",
      "pos": [
        4018,
        4134
      ]
    },
    {
      "content": "You can also a provide a different local store implementation by implementing <ph id=\"ph1\">`IMobileServiceLocalStore`</ph>.",
      "pos": [
        4135,
        4240
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`DefineTable`</ph> method creates a table in the local store that matches the fields in the provided type, <ph id=\"ph2\">`ToDoItem`</ph> in this case.",
      "pos": [
        4246,
        4376
      ]
    },
    {
      "content": "The type doesn't have to include all of the columns that are in the remote database--it is possible to store just a subset of columns.",
      "pos": [
        4377,
        4511
      ]
    },
    {
      "content": "This overload of <ph id=\"ph1\">`InitializeAsync`</ph> uses the default conflict handler, which fails whenever there is a conflict.",
      "pos": [
        4517,
        4628
      ]
    },
    {
      "content": "To provide a custom conflict handler, see the tutorial [Handling conflicts with offline support for Mobile Services].",
      "pos": [
        4629,
        4746
      ]
    },
    {
      "pos": [
        4751,
        4809
      ],
      "content": "The method <ph id=\"ph1\">`SyncAsync`</ph> triggers the actual sync operation:"
    },
    {
      "content": "First, there is a call to <ph id=\"ph1\">`IMobileServiceSyncContext.PushAsync()`</ph>.",
      "pos": [
        5046,
        5112
      ]
    },
    {
      "content": "This method is a member of <ph id=\"ph1\">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.",
      "pos": [
        5113,
        5242
      ]
    },
    {
      "content": "Only records that have been modified in some way locally (through CUD operations) will be sent to the server.",
      "pos": [
        5243,
        5352
      ]
    },
    {
      "content": "Next, the method calls <ph id=\"ph1\">`IMobileServiceSyncTable.PullAsync()`</ph> to pull data from a table on the server to the app.",
      "pos": [
        5358,
        5470
      ]
    },
    {
      "content": "Note that if there are any changes pending in the sync context, a pull always issues a push first.",
      "pos": [
        5471,
        5569
      ]
    },
    {
      "content": "This is to ensure all tables in the local store along with relationships are consistent.",
      "pos": [
        5570,
        5658
      ]
    },
    {
      "content": "In this case, we have called push explicitly.",
      "pos": [
        5659,
        5704
      ]
    },
    {
      "content": "In this example, we retrieve all records in the remote <ph id=\"ph1\">`TodoItem`</ph> table, but it is also possible to filter records by passing a query.",
      "pos": [
        5710,
        5844
      ]
    },
    {
      "content": "The first parameter to <ph id=\"ph1\">`PullAsync()`</ph> is a query ID that is used for incremental sync, which uses the <ph id=\"ph2\">`UpdatedAt`</ph> timestamp to get only those records modified since the last sync.",
      "pos": [
        5845,
        6023
      ]
    },
    {
      "content": "The query ID should be a descriptive string that is unique for each logical query in your app.",
      "pos": [
        6024,
        6118
      ]
    },
    {
      "content": "To opt-out of incremental sync, pass <ph id=\"ph1\">`null`</ph> as the query ID.",
      "pos": [
        6119,
        6179
      ]
    },
    {
      "content": "This will retrieve all records on each pull operation, which is potentially inefficient.",
      "pos": [
        6180,
        6268
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].",
      "pos": [
        6275,
        6427
      ]
    },
    {
      "content": "Otherwise, your app should periodically call <ph id=\"ph1\">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.",
      "pos": [
        6428,
        6537
      ]
    },
    {
      "content": "Note that the <ph id=\"ph1\">`MobileServicePushFailedException`</ph> can occur for both a push and a pull operation.",
      "pos": [
        6543,
        6639
      ]
    },
    {
      "content": "The next tutorial, [Handling conflicts with offline support for Mobile Services], shows how to handle these sync related exceptions.",
      "pos": [
        6640,
        6772
      ]
    },
    {
      "content": "In the class <ph id=\"ph1\">`ToDoActivity`</ph>, the method <ph id=\"ph2\">`SyncAsync()`</ph> is called after the operations that modify data, <ph id=\"ph3\">`AddItem()`</ph> and <ph id=\"ph4\">`CheckItem()`</ph>.",
      "pos": [
        6777,
        6910
      ]
    },
    {
      "content": "It is also called from <ph id=\"ph1\">`OnRefreshItemsSelected()`</ph>, so that users get the latest data whenever they push the <bpt id=\"p1\">**</bpt>Refresh<ept id=\"p1\">**</ept> button.",
      "pos": [
        6911,
        7038
      ]
    },
    {
      "content": "The app also performs a sync on launch, since <ph id=\"ph1\">`ToDoActivity.OnCreate()`</ph> calls <ph id=\"ph2\">`OnRefreshItemsSelected()`</ph>.",
      "pos": [
        7039,
        7144
      ]
    },
    {
      "content": "Because <ph id=\"ph1\">`SyncAsync()`</ph> is called whenever data is modified, this app assumes that the user is online whenever they are editing data.",
      "pos": [
        7150,
        7281
      ]
    },
    {
      "content": "In the next section, we will update the app so that users can edit even when they are offline.",
      "pos": [
        7282,
        7376
      ]
    },
    {
      "pos": [
        7381,
        7442
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-sync\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Update the sync behavior of the app"
    },
    {
      "content": "In this section, you will modify the app so that it does not sync on app launch or on the insert and update operations, but only when the refresh button is pushed.",
      "pos": [
        7444,
        7607
      ]
    },
    {
      "content": "Then, you will break the app connection with the mobile service to simulate an offline scenario.",
      "pos": [
        7608,
        7704
      ]
    },
    {
      "content": "When you add data items, they will be held in the local store, but not immediately synced to the mobile service.",
      "pos": [
        7705,
        7817
      ]
    },
    {
      "pos": [
        7822,
        7940
      ],
      "content": "In the class <ph id=\"ph1\">`ToDoActivity`</ph>, edit the methods <ph id=\"ph2\">`AddItem()`</ph> and <ph id=\"ph3\">`CheckItem()`</ph> to comment out the calls to <ph id=\"ph4\">`SyncAsync()`</ph>."
    },
    {
      "content": "In <ph id=\"ph1\">`ToDoActivity`</ph>, comment out the definitions of the members <ph id=\"ph2\">`applicationURL`</ph> and <ph id=\"ph3\">`applicationKey`</ph>.",
      "pos": [
        7945,
        8045
      ]
    },
    {
      "content": "Add the following lines, which reference an invalid mobile service URL:",
      "pos": [
        8046,
        8117
      ]
    },
    {
      "pos": [
        8260,
        8353
      ],
      "content": "In <ph id=\"ph1\">`ToDoActivity.OnCreate()`</ph>, remove the call to <ph id=\"ph2\">`OnRefreshItemsSelected()`</ph> and replace with:"
    },
    {
      "content": "Build and run the app.",
      "pos": [
        8535,
        8557
      ]
    },
    {
      "content": "Add some new todo items.",
      "pos": [
        8558,
        8582
      ]
    },
    {
      "content": "These new items exist only in the local store until they can be pushed to the mobile service.",
      "pos": [
        8583,
        8676
      ]
    },
    {
      "content": "The client app behaves as if is connected to the mobile service supporting all create, read, update, delete (CRUD) operations.",
      "pos": [
        8677,
        8803
      ]
    },
    {
      "content": "Close the app and restart it to verify that the new items you created are persisted to the local store.",
      "pos": [
        8808,
        8911
      ]
    },
    {
      "pos": [
        8916,
        8995
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-online-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Update the app to reconnect your mobile service"
    },
    {
      "content": "In this section you will reconnect the app to the mobile service.",
      "pos": [
        8997,
        9062
      ]
    },
    {
      "content": "This simulates the app moving from an offline state to an online state with the mobile service.",
      "pos": [
        9063,
        9158
      ]
    },
    {
      "content": "When you push the <bpt id=\"p1\">**</bpt>Refresh<ept id=\"p1\">**</ept> button, data will be synced to your mobile service.",
      "pos": [
        9159,
        9240
      ]
    },
    {
      "content": "Open <ph id=\"ph1\">`ToDoActivity.cs`</ph>.",
      "pos": [
        9245,
        9268
      ]
    },
    {
      "content": "Remove the invalid mobile service URL and add back the correct URL and app key.",
      "pos": [
        9269,
        9348
      ]
    },
    {
      "content": "Rebuild and run the app.",
      "pos": [
        9353,
        9377
      ]
    },
    {
      "content": "Notice that the data looks the same as the offline scenario even though the app is now connected to the mobile service.",
      "pos": [
        9378,
        9497
      ]
    },
    {
      "content": "This is because this app always uses the <ph id=\"ph1\">`IMobileServiceSyncTable`</ph> that is pointed to the local store.",
      "pos": [
        9498,
        9600
      ]
    },
    {
      "content": "Log into the Microsoft Azure Management portal and look at the database for your mobile service.",
      "pos": [
        9605,
        9701
      ]
    },
    {
      "content": "If your service uses the JavaScript backend, you can browse the data from the <bpt id=\"p1\">**</bpt>Data<ept id=\"p1\">**</ept> tab of the mobile service.",
      "pos": [
        9702,
        9815
      ]
    },
    {
      "content": "If you are using the .NET backend for your mobile service, in Visual Studio go to <bpt id=\"p1\">**</bpt>Server Explorer<ept id=\"p1\">**</ept> -&gt; <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept> -&gt; <bpt id=\"p3\">**</bpt>SQL Databases<ept id=\"p3\">**</ept>.",
      "pos": [
        9821,
        9957
      ]
    },
    {
      "content": "Right click your database and select <bpt id=\"p1\">**</bpt>Open in SQL Server Object Explorer<ept id=\"p1\">**</ept>.",
      "pos": [
        9958,
        10034
      ]
    },
    {
      "pos": [
        10040,
        10125
      ],
      "content": "Notice the data has <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> been synchronized between the database and the local store."
    },
    {
      "content": "In the app, push the refresh button.",
      "pos": [
        10130,
        10166
      ]
    },
    {
      "content": "This calls <ph id=\"ph1\">`OnRefreshItemsSelected()`</ph>, which in turn calls <ph id=\"ph2\">`SyncAsync()`</ph>.",
      "pos": [
        10167,
        10240
      ]
    },
    {
      "content": "This will perform the push and pull operations, first sending the local store items to the mobile service, then retrieving new data from the service.",
      "pos": [
        10241,
        10390
      ]
    },
    {
      "content": "Check the database for your mobile service to confirm that changes have been synchronized.",
      "pos": [
        10395,
        10485
      ]
    },
    {
      "content": "Summary",
      "pos": [
        10489,
        10496
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        10617,
        10627
      ]
    },
    {
      "content": "[Handling conflicts with offline support for Mobile Services]",
      "pos": [
        10631,
        10692
      ]
    },
    {
      "content": "[How to use the Xamarin Component client for Azure Mobile Services]",
      "pos": [
        10696,
        10763
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Using offline data in Mobile Services (Xamarin Android) | Microsoft Azure\"\n    description=\"Learn how to use Azure Mobile Services to cache and sync offline data in your Xamarin Android application\"\n    documentationCenter=\"xamarin\"\n    authors=\"lindydonna\"\n    editor=\"wesmc\"\n    manager=\"dwrede\"\n    services=\"mobile-services\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-xamarin-android\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"06/15/2015\"\n    ms.author=\"donnam\"/>\n\n# Using offline data sync in Mobile Services\n\n[AZURE.INCLUDE [mobile-services-selector-offline](../../includes/mobile-services-selector-offline.md)]\n\nThis topic walks through the offline sync capabilities of Azure Mobile Services in the todo list quickstart app. Offline sync allows you to easily create apps that are usable even when the end user has no network access.\n\nOffline sync has several potential uses:\n\n* Improve app responsiveness by caching server data locally on the device\n* Make apps resilient against intermittent network connectivity\n* Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity\n* Sync data across multiple devices and detect conflicts when the same record is modified by two devices\n\n>[AZURE.NOTE] To complete this tutorial, you need a Azure account. If you don't have an account, you can sign up for an Azure trial and get up to 10 free mobile services that you can keep using even after your trial ends. For details, see <a href=\"http://www.windowsazure.com/pricing/free-trial/?WT.mc_id=AE564AB28\" target=\"_blank\">Azure Free Trial</a>.\n>\n> If this is your first experience with Mobile Services, you should first complete [Get started with Mobile Services].\n\nThis tutorial walks you through these basic steps:\n\n1. [Review the Mobile Services sync code]\n2. [Update the sync behavior of the app]\n3. [Update the app to reconnect your mobile service]\n\nThis tutorial requires the following:\n\n* Visual Studio with the [Xamarin extension] **or** [Xamarin Studio]\n* Completion of the [Get started with Mobile Services] tutorial\n\n## <a name=\"review-offline\"></a>Review the Mobile Services sync code\n\nAzure Mobile Services offline sync allows end users to interact with a local database when the network is not accessible. To use these features in your app, you initialize `MobileServiceClient.SyncContext` to a local store. Then reference your table through the `IMobileServiceSyncTable` interface.\nThis section walks through the offline sync related code in `ToDoActivity.cs`.\n\n1. In Visual Studio or Xamarin Studio, open the project that you completed in the [Get started with Mobile Services] tutorial. Open the file `ToDoActivity.cs`.\n\n2. Notice the type of the member `toDoTable` is `IMobileServiceSyncTable`. Offline sync uses this sync table interface instead of `IMobileServiceTable`. When a sync table is used, all operations go to the local store and are only synchronized with the remote service with explicit push and pull operations.\n\n    To get a reference to a sync table, the method `GetSyncTable()` is used. To remove the offline sync functionality, you would instead use `GetTable()`.\n\n3. Before any table operations can be performed, the local store must be initialized. This is done in the `InitLocalStoreAsync` method:\n\n        private async Task InitLocalStoreAsync()\n        {\n            // new code to initialize the SQLite store\n            string path = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal), localDbFilename);\n\n            if (!File.Exists(path))\n            {\n                File.Create(path).Dispose();\n            }\n\n            var store = new MobileServiceSQLiteStore(path);\n            store.DefineTable<ToDoItem>();\n\n            // Uses the default conflict handler, which fails on conflict\n            await client.SyncContext.InitializeAsync(store);\n        }\n\n    This creates a local store using the class `MobileServiceSQLiteStore`, which is provided in the Mobile Services SDK. You can also a provide a different local store implementation by implementing `IMobileServiceLocalStore`.\n\n    The `DefineTable` method creates a table in the local store that matches the fields in the provided type, `ToDoItem` in this case. The type doesn't have to include all of the columns that are in the remote database--it is possible to store just a subset of columns.\n\n    This overload of `InitializeAsync` uses the default conflict handler, which fails whenever there is a conflict. To provide a custom conflict handler, see the tutorial [Handling conflicts with offline support for Mobile Services].\n\n4. The method `SyncAsync` triggers the actual sync operation:\n\n        private async Task SyncAsync()\n        {\n            await client.SyncContext.PushAsync();\n            await toDoTable.PullAsync(\"allTodoItems\", toDoTable.CreateQuery()); // query ID is used for incremental sync\n        }\n\n    First, there is a call to `IMobileServiceSyncContext.PushAsync()`. This method is a member of `IMobileServicesSyncContext` instead of the sync table because it will push changes across all tables. Only records that have been modified in some way locally (through CUD operations) will be sent to the server.\n\n    Next, the method calls `IMobileServiceSyncTable.PullAsync()` to pull data from a table on the server to the app. Note that if there are any changes pending in the sync context, a pull always issues a push first. This is to ensure all tables in the local store along with relationships are consistent. In this case, we have called push explicitly.\n\n    In this example, we retrieve all records in the remote `TodoItem` table, but it is also possible to filter records by passing a query. The first parameter to `PullAsync()` is a query ID that is used for incremental sync, which uses the `UpdatedAt` timestamp to get only those records modified since the last sync. The query ID should be a descriptive string that is unique for each logical query in your app. To opt-out of incremental sync, pass `null` as the query ID. This will retrieve all records on each pull operation, which is potentially inefficient.\n\n    >[AZURE.NOTE] To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete]. Otherwise, your app should periodically call `IMobileServiceSyncTable.PurgeAsync()` to purge the local store.\n\n    Note that the `MobileServicePushFailedException` can occur for both a push and a pull operation. The next tutorial, [Handling conflicts with offline support for Mobile Services], shows how to handle these sync related exceptions.\n\n5. In the class `ToDoActivity`, the method `SyncAsync()` is called after the operations that modify data, `AddItem()` and `CheckItem()`. It is also called from `OnRefreshItemsSelected()`, so that users get the latest data whenever they push the **Refresh** button. The app also performs a sync on launch, since `ToDoActivity.OnCreate()` calls `OnRefreshItemsSelected()`.\n\n    Because `SyncAsync()` is called whenever data is modified, this app assumes that the user is online whenever they are editing data. In the next section, we will update the app so that users can edit even when they are offline.\n\n## <a name=\"update-sync\"></a>Update the sync behavior of the app\n\nIn this section, you will modify the app so that it does not sync on app launch or on the insert and update operations, but only when the refresh button is pushed. Then, you will break the app connection with the mobile service to simulate an offline scenario. When you add data items, they will be held in the local store, but not immediately synced to the mobile service.\n\n1. In the class `ToDoActivity`, edit the methods `AddItem()` and `CheckItem()` to comment out the calls to `SyncAsync()`.\n\n2. In `ToDoActivity`, comment out the definitions of the members `applicationURL` and `applicationKey`. Add the following lines, which reference an invalid mobile service URL:\n\n        const string applicationURL = @\"https://your-mobile-service.azure-mobile.xxx/\";\n        const string applicationKey = @\"AppKey\";\n\n3. In `ToDoActivity.OnCreate()`, remove the call to `OnRefreshItemsSelected()` and replace with:\n\n        // Load the items from the Mobile Service\n        // OnRefreshItemsSelected (); // don't sync on app launch\n        await RefreshItemsFromTableAsync(); // load UI only\n\n4. Build and run the app. Add some new todo items. These new items exist only in the local store until they can be pushed to the mobile service. The client app behaves as if is connected to the mobile service supporting all create, read, update, delete (CRUD) operations.\n\n5. Close the app and restart it to verify that the new items you created are persisted to the local store.\n\n## <a name=\"update-online-app\"></a>Update the app to reconnect your mobile service\n\nIn this section you will reconnect the app to the mobile service. This simulates the app moving from an offline state to an online state with the mobile service. When you push the **Refresh** button, data will be synced to your mobile service.\n\n1. Open `ToDoActivity.cs`. Remove the invalid mobile service URL and add back the correct URL and app key.\n\n2. Rebuild and run the app. Notice that the data looks the same as the offline scenario even though the app is now connected to the mobile service. This is because this app always uses the `IMobileServiceSyncTable` that is pointed to the local store.\n\n3. Log into the Microsoft Azure Management portal and look at the database for your mobile service. If your service uses the JavaScript backend, you can browse the data from the **Data** tab of the mobile service.\n\n    If you are using the .NET backend for your mobile service, in Visual Studio go to **Server Explorer** -> **Azure** -> **SQL Databases**. Right click your database and select **Open in SQL Server Object Explorer**.\n\n    Notice the data has *not* been synchronized between the database and the local store.\n\n4. In the app, push the refresh button. This calls `OnRefreshItemsSelected()`, which in turn calls `SyncAsync()`. This will perform the push and pull operations, first sending the local store items to the mobile service, then retrieving new data from the service.\n\n5. Check the database for your mobile service to confirm that changes have been synchronized.\n\n##Summary\n\n[AZURE.INCLUDE [mobile-services-offline-summary-csharp](../../includes/mobile-services-offline-summary-csharp.md)]\n\n## Next steps\n\n* [Handling conflicts with offline support for Mobile Services]\n\n* [How to use the Xamarin Component client for Azure Mobile Services]\n\n<!-- Anchors. -->\n[Review the Mobile Services sync code]: #review-offline\n[Update the sync behavior of the app]: #update-sync\n[Update the app to reconnect your mobile service]: #update-online-app\n\n<!-- Images -->\n\n\n<!-- URLs. -->\n[Handling conflicts with offline support for Mobile Services]: ../mobile-services-xamarin-android-handling-conflicts-offline-data.md\n[Get started with data]: mobile-services-android-get-started-data.md\n[Get started with Mobile Services]: mobile-services-android-get-started.md\n[How to use the Xamarin Component client for Azure Mobile Services]: partner-xamarin-mobile-services-how-to-use-client-library.md\n[Soft Delete]: mobile-services-using-soft-delete.md\n\n[Mobile Services SDK Nuget]: http://www.nuget.org/packages/WindowsAzure.MobileServices/1.3.0\n[SQLite store nuget]: http://www.nuget.org/packages/WindowsAzure.MobileServices.SQLiteStore/1.0.0\n[Xamarin Studio]: http://xamarin.com/download\n[Xamarin extension]: http://xamarin.com/visual-studio\n[NuGet Addin for Xamarin]: https://github.com/mrward/monodevelop-nuget-addin\n "
}