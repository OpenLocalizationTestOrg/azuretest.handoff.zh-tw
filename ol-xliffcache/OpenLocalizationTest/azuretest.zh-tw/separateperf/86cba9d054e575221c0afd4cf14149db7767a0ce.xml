{
  "nodes": [
    {
      "content": "Getting started with Azure Queue storage and Visual Studio connected services (Cloud Service projects)",
      "pos": [
        28,
        130
      ]
    },
    {
      "content": "How to get started using Azure Queue storage in a cloud service project in Visual Studio",
      "pos": [
        150,
        238
      ]
    },
    {
      "content": "Getting started with Azure Queue storage and Visual Studio connected services (cloud services projects)",
      "pos": [
        561,
        664
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        668,
        684
      ]
    },
    {
      "content": "Getting started",
      "pos": [
        690,
        705
      ]
    },
    {
      "content": "What happened",
      "pos": [
        765,
        778
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        827,
        843
      ]
    },
    {
      "content": "Blobs",
      "pos": [
        849,
        854
      ]
    },
    {
      "content": "Queues",
      "pos": [
        913,
        919
      ]
    },
    {
      "content": "Tables",
      "pos": [
        979,
        985
      ]
    },
    {
      "content": "Overview",
      "pos": [
        1043,
        1051
      ]
    },
    {
      "pos": [
        1053,
        1290
      ],
      "content": "This article describes how to get started using Azure Queue storage in Visual Studio after you have created or referenced an Azure storage account in a cloud services project by using the  Visual Studio <bpt id=\"p1\">**</bpt>Add Connected Services<ept id=\"p1\">**</ept> dialog."
    },
    {
      "content": "We'll show you how to create a queue in code.",
      "pos": [
        1293,
        1338
      ]
    },
    {
      "content": "We'll also show you how to perform basic queue operations, such as adding, modifying, reading and removing queue messages.",
      "pos": [
        1339,
        1461
      ]
    },
    {
      "content": "The samples are written in C# code and use the <bpt id=\"p1\">[</bpt>Azure Storage Client Library for .NET<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn261237.aspx)</ept>.",
      "pos": [
        1462,
        1605
      ]
    },
    {
      "pos": [
        1608,
        1820
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Add Connected Services<ept id=\"p1\">**</ept> operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files."
    },
    {
      "pos": [
        1825,
        1955
      ],
      "content": "See <bpt id=\"p1\">[</bpt>How to use Queue Storage from .NET<ept id=\"p1\">](storage-dotnet-how-to-use-queues.md)</ept> for more information on manipulating queues in code."
    },
    {
      "pos": [
        1959,
        2092
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Storage documentation<ept id=\"p1\">](https://azure.microsoft.com/documentation/services/storage/)</ept> for general information about Azure Storage."
    },
    {
      "pos": [
        2096,
        2249
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Cloud Services documentation<ept id=\"p1\">](http://azure.microsoft.com/documentation/services/cloud-services/)</ept> for general information about Azure cloud services."
    },
    {
      "pos": [
        2253,
        2347
      ],
      "content": "See <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept> for more information about programming ASP.NET applications."
    },
    {
      "content": "Azure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS.",
      "pos": [
        2350,
        2513
      ]
    },
    {
      "content": "A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.",
      "pos": [
        2514,
        2663
      ]
    },
    {
      "content": "Access queues in code",
      "pos": [
        2668,
        2689
      ]
    },
    {
      "content": "To access queues in Visual Studio Cloud Services projects, you need to include the following items to any C# source file that access Azure Queue storage.",
      "pos": [
        2691,
        2844
      ]
    },
    {
      "pos": [
        2849,
        2947
      ],
      "content": "Make sure the namespace declarations at the top of the C# file include these <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements."
    },
    {
      "content": "Get a <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> object that represents your storage account information.",
      "pos": [
        3100,
        3186
      ]
    },
    {
      "content": "Use the following code to get the your storage connection string and storage account information from the Azure service configuration.",
      "pos": [
        3187,
        3321
      ]
    },
    {
      "pos": [
        3505,
        3594
      ],
      "content": "Get a <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> object to reference the queue objects in your storage account."
    },
    {
      "pos": [
        3718,
        3776
      ],
      "content": "Get a <bpt id=\"p1\">**</bpt>CloudQueue<ept id=\"p1\">**</ept> object to reference a specific queue."
    },
    {
      "pos": [
        3920,
        4002
      ],
      "content": "<bpt id=\"p1\">**</bpt>NOTE:<ept id=\"p1\">**</ept> Use all of the above code in front of the code in the following samples."
    },
    {
      "content": "Create a queue in code",
      "pos": [
        4006,
        4028
      ]
    },
    {
      "pos": [
        4030,
        4100
      ],
      "content": "To create the queue in code, just add a call to <bpt id=\"p1\">**</bpt>CreateIfNotExists<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Add a message to a queue",
      "pos": [
        4343,
        4367
      ]
    },
    {
      "pos": [
        4369,
        4492
      ],
      "content": "To insert a message into an existing queue, create a new <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept> object, then call the <bpt id=\"p2\">**</bpt>AddMessage<ept id=\"p2\">**</ept> method."
    },
    {
      "pos": [
        4494,
        4595
      ],
      "content": "A <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept> object can be created from either a string (in UTF-8 format) or a byte array."
    },
    {
      "content": "Here is an example which inserts the message 'Hello, World'.",
      "pos": [
        4597,
        4657
      ]
    },
    {
      "content": "Read a message in a queue",
      "pos": [
        4966,
        4991
      ]
    },
    {
      "pos": [
        4993,
        5118
      ],
      "content": "You can peek at the message in the front of a queue without removing it from the queue by calling the <bpt id=\"p1\">**</bpt>PeekMessage<ept id=\"p1\">**</ept> method."
    },
    {
      "content": "Read and remove a message in a queue",
      "pos": [
        5371,
        5407
      ]
    },
    {
      "content": "Your code can remove (de-queue) a message from a queue in two steps.",
      "pos": [
        5409,
        5477
      ]
    },
    {
      "content": "Call <bpt id=\"p1\">**</bpt>GetMessage<ept id=\"p1\">**</ept> to get the next message in a queue.",
      "pos": [
        5482,
        5537
      ]
    },
    {
      "content": "A message returned from <bpt id=\"p1\">**</bpt>GetMessage<ept id=\"p1\">**</ept> becomes invisible to any other code reading messages from this queue.",
      "pos": [
        5538,
        5646
      ]
    },
    {
      "content": "By default, this message stays invisible for 30 seconds.",
      "pos": [
        5647,
        5703
      ]
    },
    {
      "pos": [
        5708,
        5778
      ],
      "content": "To finish removing the message from the queue, call <bpt id=\"p1\">**</bpt>DeleteMessage<ept id=\"p1\">**</ept>."
    },
    {
      "content": "This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.",
      "pos": [
        5780,
        5983
      ]
    },
    {
      "content": "The following code calls <bpt id=\"p1\">**</bpt>DeleteMessage<ept id=\"p1\">**</ept> right after the message has been processed.",
      "pos": [
        5984,
        6070
      ]
    },
    {
      "content": "Leverage additional options for processing and removing queue messages",
      "pos": [
        6478,
        6548
      ]
    },
    {
      "content": "There are two ways you can customize message retrieval from a queue.",
      "pos": [
        6550,
        6618
      ]
    },
    {
      "content": "You can get a batch of messages (up to 32).",
      "pos": [
        6623,
        6666
      ]
    },
    {
      "content": "You can set a longer or shorter invisibility timeout, allowing your code more or less",
      "pos": [
        6670,
        6755
      ]
    },
    {
      "content": "time to fully process each message.",
      "pos": [
        6756,
        6791
      ]
    },
    {
      "content": "The following code example uses the",
      "pos": [
        6792,
        6827
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept> method to get 20 messages in one call.",
      "pos": [
        6828,
        6882
      ]
    },
    {
      "content": "Then it processes",
      "pos": [
        6883,
        6900
      ]
    },
    {
      "content": "each message using a <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> loop.",
      "pos": [
        6901,
        6939
      ]
    },
    {
      "content": "It also sets the invisibility",
      "pos": [
        6940,
        6969
      ]
    },
    {
      "content": "timeout to five minutes for each message.",
      "pos": [
        6970,
        7011
      ]
    },
    {
      "content": "Note that the 5 minutes starts",
      "pos": [
        7012,
        7042
      ]
    },
    {
      "content": "for all messages at the same time, so after 5 minutes have passed since",
      "pos": [
        7043,
        7114
      ]
    },
    {
      "content": "the call to <bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept>, any messages which have not been deleted",
      "pos": [
        7115,
        7184
      ]
    },
    {
      "content": "will become visible again.",
      "pos": [
        7185,
        7211
      ]
    },
    {
      "content": "Here's an example:",
      "pos": [
        7213,
        7231
      ]
    },
    {
      "content": "Get the queue length",
      "pos": [
        7699,
        7719
      ]
    },
    {
      "content": "You can get an estimate of the number of messages in a queue.",
      "pos": [
        7721,
        7782
      ]
    },
    {
      "content": "The",
      "pos": [
        7783,
        7786
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> method asks the Queue service to",
      "pos": [
        7787,
        7839
      ]
    },
    {
      "content": "retrieve the queue attributes, including the message count.",
      "pos": [
        7840,
        7899
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ApproximateMethodCount<ept id=\"p1\">**</ept>",
      "pos": [
        7900,
        7930
      ]
    },
    {
      "content": "property returns the last value retrieved by the",
      "pos": [
        7931,
        7979
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> method, without calling the Queue service.",
      "pos": [
        7980,
        8042
      ]
    },
    {
      "content": "Use Async-Await Pattern with common Azure Queue APIs",
      "pos": [
        8505,
        8557
      ]
    },
    {
      "content": "This example shows how to use the Async-Await pattern with common Azure Queue APIs.",
      "pos": [
        8559,
        8642
      ]
    },
    {
      "content": "The sample calls the async version of each of the given methods, this can be seen by the <bpt id=\"p1\">**</bpt>Async<ept id=\"p1\">**</ept> post-fix of each method.",
      "pos": [
        8643,
        8766
      ]
    },
    {
      "content": "When an async method is used the async-await pattern suspends local execution until the call completes.",
      "pos": [
        8767,
        8870
      ]
    },
    {
      "content": "This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application.",
      "pos": [
        8871,
        9030
      ]
    },
    {
      "content": "For more details on using the Async-Await pattern in .NET see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)",
      "pos": [
        9031,
        9183
      ]
    },
    {
      "content": "Delete a queue",
      "pos": [
        9948,
        9962
      ]
    },
    {
      "pos": [
        9964,
        10067
      ],
      "content": "To delete a queue and all the messages contained in it, call the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> method on the queue object."
    },
    {
      "content": "Next steps",
      "pos": [
        10274,
        10284
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Getting started with Azure Queue storage and Visual Studio connected services (Cloud Service projects)\" \n    description=\"How to get started using Azure Queue storage in a cloud service project in Visual Studio\" \n    services=\"storage\" \n    documentationCenter=\"\" \n    authors=\"patshea123\" \n    manager=\"douge\" \n    editor=\"tglee\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"web\" \n    ms.tgt_pltfrm=\"vs-getting-started\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/04/2015\" \n    ms.author=\"patshea123\"/>\n\n# Getting started with Azure Queue storage and Visual Studio connected services (cloud services projects)\n\n> [AZURE.SELECTOR]\n> - [Getting started](vs-storage-cloud-services-getting-started-queues.md)\n> - [What happened](vs-storage-cloud-services-what-happened.md)\n\n> [AZURE.SELECTOR]\n> - [Blobs](vs-storage-cloud-services-getting-started-blobs.md)\n> - [Queues](vs-storage-cloud-services-getting-started-queues.md)\n> - [Tables](vs-storage-cloud-services-getting-started-tables.md)\n\n##Overview\n\nThis article describes how to get started using Azure Queue storage in Visual Studio after you have created or referenced an Azure storage account in a cloud services project by using the  Visual Studio **Add Connected Services** dialog. \n\nWe'll show you how to create a queue in code. We'll also show you how to perform basic queue operations, such as adding, modifying, reading and removing queue messages. The samples are written in C# code and use the [Azure Storage Client Library for .NET](https://msdn.microsoft.com/library/azure/dn261237.aspx). \n\nThe **Add Connected Services** operation installs the appropriate NuGet packages to access Azure storage in your project and adds the connection string for the storage account to your project configuration files.\n\n - See [How to use Queue Storage from .NET](storage-dotnet-how-to-use-queues.md) for more information on manipulating queues in code.\n - See [Storage documentation](https://azure.microsoft.com/documentation/services/storage/) for general information about Azure Storage.\n - See [Cloud Services documentation](http://azure.microsoft.com/documentation/services/cloud-services/) for general information about Azure cloud services.\n - See [ASP.NET](http://www.asp.net) for more information about programming ASP.NET applications.\n\n\nAzure Queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using HTTP or HTTPS. A single queue message can be up to 64 KB in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\n\n##Access queues in code\n\nTo access queues in Visual Studio Cloud Services projects, you need to include the following items to any C# source file that access Azure Queue storage.\n\n1. Make sure the namespace declarations at the top of the C# file include these **using** statements.\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Queue;\n\n2. Get a **CloudStorageAccount** object that represents your storage account information. Use the following code to get the your storage connection string and storage account information from the Azure service configuration.\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n3. Get a **CloudQueueClient** object to reference the queue objects in your storage account.  \n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n4. Get a **CloudQueue** object to reference a specific queue.\n\n        // Get a reference to a queue named \"messageQueue\"\n        CloudQueue messageQueue = queueClient.GetQueueReference(\"messageQueue\");\n\n\n**NOTE:** Use all of the above code in front of the code in the following samples.\n\n##Create a queue in code\n\nTo create the queue in code, just add a call to **CreateIfNotExists**.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Create the CloudQueue if it does not exist\n    messageQueue.CreateIfNotExists();\n\n##Add a message to a queue\n\nTo insert a message into an existing queue, create a new **CloudQueueMessage** object, then call the **AddMessage** method.\n\nA **CloudQueueMessage** object can be created from either a string (in UTF-8 format) or a byte array.\n\nHere is an example which inserts the message 'Hello, World'.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' as described in \n    // the \"Access queues in code\" section.\n\n    // Create a message and add it to the queue.\n    CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n    messageQueue.AddMessage(message);\n\n##Read a message in a queue\n\nYou can peek at the message in the front of a queue without removing it from the queue by calling the **PeekMessage** method.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Peek at the next message\n    CloudQueueMessage peekedMessage = messageQueue.PeekMessage();\n\n##Read and remove a message in a queue\n\nYour code can remove (de-queue) a message from a queue in two steps.\n\n1. Call **GetMessage** to get the next message in a queue. A message returned from **GetMessage** becomes invisible to any other code reading messages from this queue. By default, this message stays invisible for 30 seconds.\n2.  To finish removing the message from the queue, call **DeleteMessage**.\n\nThis two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again. The following code calls **DeleteMessage** right after the message has been processed.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Get the next message in the queue.\n    CloudQueueMessage retrievedMessage = messageQueue.GetMessage();\n\n    // Process the message in less than 30 seconds\n\n    // Then delete the message.\n    await messageQueue.DeleteMessage(retrievedMessage);\n\n\n## Leverage additional options for processing and removing queue messages\n\nThere are two ways you can customize message retrieval from a queue.\n\n - You can get a batch of messages (up to 32).\n - You can set a longer or shorter invisibility timeout, allowing your code more or less\ntime to fully process each message. The following code example uses the\n**GetMessages** method to get 20 messages in one call. Then it processes\neach message using a **foreach** loop. It also sets the invisibility\ntimeout to five minutes for each message. Note that the 5 minutes starts\nfor all messages at the same time, so after 5 minutes have passed since\nthe call to **GetMessages**, any messages which have not been deleted\nwill become visible again.\n\nHere's an example:\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    foreach (CloudQueueMessage message in messageQueue.GetMessages(20, TimeSpan.FromMinutes(5)))\n    {\n        // Process all messages in less than 5 minutes, deleting each message after processing.\n    \n        // Then delete the message after processing\n        messageQueue.DeleteMessage(message);\n    \n    }\n\n## Get the queue length\n\nYou can get an estimate of the number of messages in a queue. The\n**FetchAttributes** method asks the Queue service to\nretrieve the queue attributes, including the message count. The **ApproximateMethodCount**\nproperty returns the last value retrieved by the\n**FetchAttributes** method, without calling the Queue service.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Fetch the queue attributes.\n    messageQueue.FetchAttributes();\n\n    // Retrieve the cached approximate message count.\n    int? cachedMessageCount = messageQueue.ApproximateMessageCount;\n\n    // Display number of messages.\n    Console.WriteLine(\"Number of messages in queue: \" + cachedMessageCount);\n\n## Use Async-Await Pattern with common Azure Queue APIs\n\nThis example shows how to use the Async-Await pattern with common Azure Queue APIs. The sample calls the async version of each of the given methods, this can be seen by the **Async** post-fix of each method. When an async method is used the async-await pattern suspends local execution until the call completes. This behavior allows the current thread to do other work which helps avoid performance bottlenecks and improves the overall responsiveness of your application. For more details on using the Async-Await pattern in .NET see [Async and Await (C# and Visual Basic)] (https://msdn.microsoft.com/library/hh191443.aspx)\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Create a message to put in the queue\n    CloudQueueMessage cloudQueueMessage = new CloudQueueMessage(\"My message\");\n\n    // Add the message asynchronously\n    await messageQueue.AddMessageAsync(cloudQueueMessage);\n    Console.WriteLine(\"Message added\");\n\n    // Async dequeue the message\n    CloudQueueMessage retrievedMessage = await messageQueue.GetMessageAsync();\n    Console.WriteLine(\"Retrieved message with content '{0}'\", retrievedMessage.AsString);\n\n    // Delete the message asynchronously\n    await messageQueue.DeleteMessageAsync(retrievedMessage);\n    Console.WriteLine(\"Deleted message\");\n\n## Delete a queue\n\nTo delete a queue and all the messages contained in it, call the **Delete** method on the queue object.\n\n    // Get a reference to a CloudQueue object with the variable name 'messageQueue' \n    // as described in the \"Access queues in code\" section.\n    \n    // Delete the queue.\n    messageQueue.Delete();\n\n##Next steps\n\n[AZURE.INCLUDE [vs-storage-dotnet-queues-next-steps](../../includes/vs-storage-dotnet-queues-next-steps.md)]\n            \n"
}