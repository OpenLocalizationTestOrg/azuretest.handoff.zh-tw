{
  "nodes": [
    {
      "content": "Reliable Actors Notes on Actor type serialization",
      "pos": [
        26,
        75
      ]
    },
    {
      "content": "Discusses basic requirements for defining serializable classes that can be used to define Service Fabric Reliable Actor state and interfaces",
      "pos": [
        93,
        233
      ]
    },
    {
      "content": "Notes on Service Fabric Reliable Actors type serialization",
      "pos": [
        524,
        582
      ]
    },
    {
      "content": "There are few important aspects that needs to be kept in mind while defining the Actor's interface(s) and State: types need to be Data Contract serializable.",
      "pos": [
        584,
        741
      ]
    },
    {
      "content": "More information about Data Contracts can be found on <bpt id=\"p1\">[</bpt>MSDN<ept id=\"p1\">](https://msdn.microsoft.com/library/ms731923.aspx)</ept>.",
      "pos": [
        742,
        853
      ]
    },
    {
      "content": "Types used in Actor Interface(s)",
      "pos": [
        858,
        890
      ]
    },
    {
      "content": "The arguments of all the methods and the result type of the task returned by each method defined in the <bpt id=\"p1\">[</bpt>actor interface<ept id=\"p1\">](service-fabric-reliable-actors-introduction.md#actors)</ept> need to be data contract serializable.",
      "pos": [
        892,
        1107
      ]
    },
    {
      "content": "This also applies to the arguments of methods defined in <bpt id=\"p1\">[</bpt>actor event interfaces<ept id=\"p1\">](service-fabric-reliable-actors-events.md#actor-events)</ept>.",
      "pos": [
        1108,
        1245
      ]
    },
    {
      "content": "(Actor event interface methods always return void).",
      "pos": [
        1246,
        1297
      ]
    },
    {
      "content": "For instance, if the <ph id=\"ph1\">`IVoiceMail`</ph> interface defines a method as:",
      "pos": [
        1298,
        1362
      ]
    },
    {
      "content": "<ph id=\"ph1\">`List&lt;T&gt;`</ph> is a standard .NET type that is already Data Contract serializable.",
      "pos": [
        1423,
        1500
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`Voicemail`</ph> type needs to be Data Contract serializable.",
      "pos": [
        1501,
        1561
      ]
    },
    {
      "content": "Actor State class",
      "pos": [
        1796,
        1813
      ]
    },
    {
      "content": "The actor state needs to be data contract serializable.",
      "pos": [
        1815,
        1870
      ]
    },
    {
      "content": "For instance if we have an Actor class definition that looks like:",
      "pos": [
        1871,
        1937
      ]
    },
    {
      "content": "The state class is going to be defined with the class and its members annotated with the DataContract and DataMember attributes respectively.",
      "pos": [
        2024,
        2165
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Reliable Actors Notes on Actor type serialization\"\n   description=\"Discusses basic requirements for defining serializable classes that can be used to define Service Fabric Reliable Actor state and interfaces\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"clca\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"NA\"\n   ms.date=\"08/11/2015\"\n   ms.author=\"claudioc\"/>\n\n# Notes on Service Fabric Reliable Actors type serialization\n\nThere are few important aspects that needs to be kept in mind while defining the Actor's interface(s) and State: types need to be Data Contract serializable. More information about Data Contracts can be found on [MSDN](https://msdn.microsoft.com/library/ms731923.aspx).\n\n## Types used in Actor Interface(s)\n\nThe arguments of all the methods and the result type of the task returned by each method defined in the [actor interface](service-fabric-reliable-actors-introduction.md#actors) need to be data contract serializable. This also applies to the arguments of methods defined in [actor event interfaces](service-fabric-reliable-actors-events.md#actor-events). (Actor event interface methods always return void).\nFor instance, if the `IVoiceMail` interface defines a method as:\n\n```csharp\n\nTask<List<Voicemail>> GetMessagesAsync();\n\n```\n\n`List<T>` is a standard .NET type that is already Data Contract serializable. The `Voicemail` type needs to be Data Contract serializable.\n\n```csharp\n\n[DataContract]\npublic class Voicemail\n{\n    [DataMember]\n    public Guid Id { get; set; }\n\n    [DataMember]\n    public string Message { get; set; }\n\n    [DataMember]\n    public DateTime ReceivedAt { get; set; }\n}\n\n```\n\n## Actor State class\n\nThe actor state needs to be data contract serializable. For instance if we have an Actor class definition that looks like:\n\n```csharp\n\npublic class VoiceMailActor : Actor<VoicemailBox>, IVoiceMail\n{\n...\n\n```\n\nThe state class is going to be defined with the class and its members annotated with the DataContract and DataMember attributes respectively.\n\n```csharp\n\n[DataContract]\npublic class VoicemailBox\n{\n    public VoicemailBox()\n    {\n        this.MessageList = new List<Voicemail>();\n    }\n\n    [DataMember]\n    public List<Voicemail> MessageList { get; set; }\n\n    [DataMember]\n    public string Greeting { get; set; }\n}\n\n```\n"
}