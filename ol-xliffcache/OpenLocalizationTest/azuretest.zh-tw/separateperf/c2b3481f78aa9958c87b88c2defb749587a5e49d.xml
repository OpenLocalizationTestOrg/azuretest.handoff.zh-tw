{
  "nodes": [
    {
      "content": "Respond to lifecycle events for a Cloud Services using .NET",
      "pos": [
        24,
        83
      ]
    },
    {
      "content": "Learn how the lifecycle methods of a Cloud Service role can be used in .NET",
      "pos": [
        99,
        174
      ]
    },
    {
      "content": "Customize the Lifecycle of a Web or Worker role in .NET",
      "pos": [
        437,
        492
      ]
    },
    {
      "content": "When you create a worker role, you extend the <bpt id=\"p1\">[</bpt>RoleEntryPoint<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.aspx)</ept> class which provides methods for you to override that let you respond to lifecycle events.",
      "pos": [
        494,
        747
      ]
    },
    {
      "content": "For web roles this class is optional, so you much use it to respond to lifecycle events.",
      "pos": [
        748,
        836
      ]
    },
    {
      "content": "Extend the RoleEntryPoint class",
      "pos": [
        841,
        872
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>RoleEntryPoint<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.aspx)</ept> class includes methods that are called by Azure when it <bpt id=\"p2\">**</bpt>starts<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>runs<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>stops<ept id=\"p4\">**</ept> a web or worker role.",
      "pos": [
        874,
        1107
      ]
    },
    {
      "content": "You can optionally override these methods to manage role initialization, role shutdown sequences, or the execution thread of the role.",
      "pos": [
        1108,
        1242
      ]
    },
    {
      "pos": [
        1245,
        1342
      ],
      "content": "When extending <bpt id=\"p1\">**</bpt>RoleEntryPoint<ept id=\"p1\">**</ept>, you should be aware of the following behaviors of the methods:"
    },
    {
      "pos": [
        1348,
        1679
      ],
      "content": "The <bpt id=\"p1\">[</bpt>OnStart<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.onstart.aspx)</ept> and <bpt id=\"p2\">[</bpt>OnStop<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.onstop.aspx)</ept> methods return a boolean value, so it is possible to return <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> from these methods."
    },
    {
      "content": "If your code returns <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>, the role process is abruptly terminated, without running any shutdown sequence you may have in place.",
      "pos": [
        1686,
        1819
      ]
    },
    {
      "content": "In general, you should avoid returning <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>OnStart<ept id=\"p2\">**</ept> method.",
      "pos": [
        1820,
        1897
      ]
    },
    {
      "pos": [
        1908,
        2018
      ],
      "content": "Any uncaught exception within an overload of a <bpt id=\"p1\">**</bpt>RoleEntryPoint<ept id=\"p1\">**</ept> method is treated as an unhandled exception."
    },
    {
      "content": "If an exception occurs within one of the lifecycle methods, Azure will raise the <bpt id=\"p1\">[</bpt>UnhandledException<ept id=\"p1\">](https://msdn.microsoft.com/library/system.appdomain.unhandledexception.aspx)</ept> event, and then the process is terminated.",
      "pos": [
        2025,
        2246
      ]
    },
    {
      "content": "After your role has been taken offline, it will be restarted by Azure.",
      "pos": [
        2247,
        2317
      ]
    },
    {
      "content": "When an unhandled exception occurs, the <bpt id=\"p1\">[</bpt>Stopping<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.stopping.aspx)</ept> event is not raised, and the <bpt id=\"p2\">**</bpt>OnStop<ept id=\"p2\">**</ept> method is not called.",
      "pos": [
        2318,
        2540
      ]
    },
    {
      "content": "If your role does not start, or is recycling between the initializing, busy, and stopping states, your code may be throwing an unhandled exception within one of the lifecycle events each time the role restarts.",
      "pos": [
        2542,
        2752
      ]
    },
    {
      "content": "In this case, use the <bpt id=\"p1\">[</bpt>UnhandledException<ept id=\"p1\">](https://msdn.microsoft.com/library/system.appdomain.unhandledexception.aspx)</ept> event to determine the cause of the exception and handle it appropriately.",
      "pos": [
        2753,
        2947
      ]
    },
    {
      "content": "Your role may also be returning from the <bpt id=\"p1\">[</bpt>Run<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.run.aspx)</ept> method, which causes the role to restart.",
      "pos": [
        2948,
        3140
      ]
    },
    {
      "content": "For more information about deployment states, see <bpt id=\"p1\">[</bpt>Common Issues Which Cause Roles to Recycle<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/gg465402.aspx)</ept>.",
      "pos": [
        3141,
        3292
      ]
    },
    {
      "pos": [
        3296,
        3585
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you are using the <bpt id=\"p1\">[</bpt>Azure Tools for Microsoft Visual Studio<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ee405484.aspx)</ept> to develop your application, the role project templates automatically extend the <bpt id=\"p2\">**</bpt>RoleEntryPoint<ept id=\"p2\">**</ept> class for you, in the WebRole.cs and WorkerRole.cs files."
    },
    {
      "content": "OnStart method",
      "pos": [
        3590,
        3604
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>OnStart<ept id=\"p1\">**</ept> method is called when your role instance is brought online by Azure.",
      "pos": [
        3606,
        3690
      ]
    },
    {
      "content": "While the OnStart code is executing, the role instance is marked as <bpt id=\"p1\">**</bpt>Busy<ept id=\"p1\">**</ept> and no external traffic will be directed to it by the load balancer.",
      "pos": [
        3691,
        3836
      ]
    },
    {
      "content": "You can override this method to perform initialization work, such as implementing event handlers and starting <bpt id=\"p1\">[</bpt>Azure Diagnostics<ept id=\"p1\">](cloud-services-how-to-monitor.md)</ept>.",
      "pos": [
        3837,
        4001
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>OnStart<ept id=\"p1\">**</ept> returns <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, the instance is successfully initialized and Azure calls the <bpt id=\"p3\">**</bpt>RoleEntryPoint.Run<ept id=\"p3\">**</ept> method.",
      "pos": [
        4003,
        4127
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>OnStart<ept id=\"p1\">**</ept> returns <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>, the role terminates immediately, without executing any planned shutdown sequences.",
      "pos": [
        4128,
        4244
      ]
    },
    {
      "content": "The following code example shows how to override the <bpt id=\"p1\">**</bpt>OnStart<ept id=\"p1\">**</ept> method.",
      "pos": [
        4246,
        4318
      ]
    },
    {
      "content": "This method configures and starts a diagnostic monitor when the role instance starts and sets up a transfer of logging data to a storage account:",
      "pos": [
        4319,
        4464
      ]
    },
    {
      "content": "OnStop method",
      "pos": [
        4857,
        4870
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>OnStop<ept id=\"p1\">**</ept> method is called after a role instance has been taken offline by Azure and before the process exits.",
      "pos": [
        4872,
        4987
      ]
    },
    {
      "content": "You can override this method to call code required for your role instance to cleanly shut down.",
      "pos": [
        4988,
        5083
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> Code running in the <bpt id=\"p1\">**</bpt>OnStop<ept id=\"p1\">**</ept> method has a limited time to finish when it is called for reasons other than a user-initiated shutdown.",
      "pos": [
        5087,
        5239
      ]
    },
    {
      "content": "After this time elapses, the process is terminated, so you must make sure that code in the <bpt id=\"p1\">**</bpt>OnStop<ept id=\"p1\">**</ept> method can run quickly or tolerates not running to completion.",
      "pos": [
        5240,
        5404
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>OnStop<ept id=\"p1\">**</ept> method is called after the <bpt id=\"p2\">**</bpt>Stopping<ept id=\"p2\">**</ept> event is raised.",
      "pos": [
        5405,
        5476
      ]
    },
    {
      "content": "Run method",
      "pos": [
        5482,
        5492
      ]
    },
    {
      "pos": [
        5494,
        5588
      ],
      "content": "You can override the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> method to implement a long-running thread for your role instance."
    },
    {
      "content": "Overriding the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> method is not required; the default implementation starts a thread that sleeps forever.",
      "pos": [
        5590,
        5700
      ]
    },
    {
      "content": "If you do override the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> method, your code should block indefinitely.",
      "pos": [
        5701,
        5776
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> method returns, the role is automatically gracefully recycled; in other words, Azure raises the <bpt id=\"p2\">**</bpt>Stopping<ept id=\"p2\">**</ept> event and calls the <bpt id=\"p3\">**</bpt>OnStop<ept id=\"p3\">**</ept> method so that your shutdown sequences may be executed before the role is taken offline.",
      "pos": [
        5777,
        6020
      ]
    },
    {
      "content": "Implementing the ASP.NET lifecycle methods for a web role",
      "pos": [
        6027,
        6084
      ]
    },
    {
      "content": "You can use the ASP.NET lifecycle methods, in addition to those provided by the <bpt id=\"p1\">**</bpt>RoleEntryPoint<ept id=\"p1\">**</ept> class, to manage initialization and shutdown sequences for a web role.",
      "pos": [
        6086,
        6255
      ]
    },
    {
      "content": "This may be useful for compatibility purposes if you are porting an existing ASP.NET application to Azure.",
      "pos": [
        6256,
        6362
      ]
    },
    {
      "content": "The ASP.NET lifecycle methods are called from within the <bpt id=\"p1\">**</bpt>RoleEntryPoint<ept id=\"p1\">**</ept> methods.",
      "pos": [
        6363,
        6447
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Application\\_Start<ept id=\"p1\">**</ept> method is called after the <bpt id=\"p2\">**</bpt>RoleEntryPoint.OnStart<ept id=\"p2\">**</ept> method finishes.",
      "pos": [
        6448,
        6545
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Application\\_End<ept id=\"p1\">**</ept> method is called before the <bpt id=\"p2\">**</bpt>RoleEntryPoint.OnStop<ept id=\"p2\">**</ept> method is called.",
      "pos": [
        6546,
        6642
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        6647,
        6657
      ]
    },
    {
      "content": "Learn how to <bpt id=\"p1\">[</bpt>create a cloud service package<ept id=\"p1\">](cloud-services-model-and-package.md)</ept>.",
      "pos": [
        6658,
        6741
      ]
    },
    {
      "content": "test",
      "pos": [
        6742,
        6746
      ]
    }
  ],
  "content": "<properties \npageTitle=\"Respond to lifecycle events for a Cloud Services using .NET\" \ndescription=\"Learn how the lifecycle methods of a Cloud Service role can be used in .NET\" \nservices=\"cloud-services\" \ndocumentationCenter=\".net\" \nauthors=\"Thraka\" \nmanager=\"timlt\" \neditor=\"\"/>\n<tags \nms.service=\"cloud-services\" \nms.workload=\"tbd\" \nms.tgt_pltfrm=\"na\" \nms.devlang=\"na\" \nms.topic=\"article\" \nms.date=\"06/11/2015\" \nms.author=\"adegeo\"/>\n\n# Customize the Lifecycle of a Web or Worker role in .NET\n\nWhen you create a worker role, you extend the [RoleEntryPoint](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.aspx) class which provides methods for you to override that let you respond to lifecycle events. For web roles this class is optional, so you much use it to respond to lifecycle events.\n\n## Extend the RoleEntryPoint class\n\nThe [RoleEntryPoint](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.aspx) class includes methods that are called by Azure when it **starts**, **runs**, or **stops** a web or worker role. You can optionally override these methods to manage role initialization, role shutdown sequences, or the execution thread of the role. \n\nWhen extending **RoleEntryPoint**, you should be aware of the following behaviors of the methods:\n\n-   The [OnStart](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.onstart.aspx) and [OnStop](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.onstop.aspx) methods return a boolean value, so it is possible to return **false** from these methods.\n\n     If your code returns **false**, the role process is abruptly terminated, without running any shutdown sequence you may have in place. In general, you should avoid returning **false** from the **OnStart** method.\n     \n-   Any uncaught exception within an overload of a **RoleEntryPoint** method is treated as an unhandled exception.\n\n     If an exception occurs within one of the lifecycle methods, Azure will raise the [UnhandledException](https://msdn.microsoft.com/library/system.appdomain.unhandledexception.aspx) event, and then the process is terminated. After your role has been taken offline, it will be restarted by Azure. When an unhandled exception occurs, the [Stopping](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.stopping.aspx) event is not raised, and the **OnStop** method is not called.\n\nIf your role does not start, or is recycling between the initializing, busy, and stopping states, your code may be throwing an unhandled exception within one of the lifecycle events each time the role restarts. In this case, use the [UnhandledException](https://msdn.microsoft.com/library/system.appdomain.unhandledexception.aspx) event to determine the cause of the exception and handle it appropriately. Your role may also be returning from the [Run](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleentrypoint.run.aspx) method, which causes the role to restart. For more information about deployment states, see [Common Issues Which Cause Roles to Recycle](https://msdn.microsoft.com/library/azure/gg465402.aspx).\n\n> [AZURE.NOTE] If you are using the [Azure Tools for Microsoft Visual Studio](https://msdn.microsoft.com/library/azure/ee405484.aspx) to develop your application, the role project templates automatically extend the **RoleEntryPoint** class for you, in the WebRole.cs and WorkerRole.cs files.\n\n## OnStart method\n\nThe **OnStart** method is called when your role instance is brought online by Azure. While the OnStart code is executing, the role instance is marked as **Busy** and no external traffic will be directed to it by the load balancer. You can override this method to perform initialization work, such as implementing event handlers and starting [Azure Diagnostics](cloud-services-how-to-monitor.md).\n\nIf **OnStart** returns **true**, the instance is successfully initialized and Azure calls the **RoleEntryPoint.Run** method. If **OnStart** returns **false**, the role terminates immediately, without executing any planned shutdown sequences.\n\nThe following code example shows how to override the **OnStart** method. This method configures and starts a diagnostic monitor when the role instance starts and sets up a transfer of logging data to a storage account:\n\n```csharp\npublic override bool OnStart()\n{\n    var config = DiagnosticMonitor.GetDefaultInitialConfiguration();\n\n    config.DiagnosticInfrastructureLogs.ScheduledTransferLogLevelFilter = LogLevel.Error;\n    config.DiagnosticInfrastructureLogs.ScheduledTransferPeriod = TimeSpan.FromMinutes(5);\n\n    DiagnosticMonitor.Start(\"DiagnosticsConnectionString\", config);\n\n    return true;\n}\n```\n\n## OnStop method\n\nThe **OnStop** method is called after a role instance has been taken offline by Azure and before the process exits. You can override this method to call code required for your role instance to cleanly shut down.\n\n> [AZURE.IMPORTANT] Code running in the **OnStop** method has a limited time to finish when it is called for reasons other than a user-initiated shutdown. After this time elapses, the process is terminated, so you must make sure that code in the **OnStop** method can run quickly or tolerates not running to completion. The **OnStop** method is called after the **Stopping** event is raised.\n\n\n## Run method\n\nYou can override the **Run** method to implement a long-running thread for your role instance.\n\nOverriding the **Run** method is not required; the default implementation starts a thread that sleeps forever. If you do override the **Run** method, your code should block indefinitely. If the **Run** method returns, the role is automatically gracefully recycled; in other words, Azure raises the **Stopping** event and calls the **OnStop** method so that your shutdown sequences may be executed before the role is taken offline.\n\n\n### Implementing the ASP.NET lifecycle methods for a web role\n\nYou can use the ASP.NET lifecycle methods, in addition to those provided by the **RoleEntryPoint** class, to manage initialization and shutdown sequences for a web role. This may be useful for compatibility purposes if you are porting an existing ASP.NET application to Azure. The ASP.NET lifecycle methods are called from within the **RoleEntryPoint** methods. The **Application\\_Start** method is called after the **RoleEntryPoint.OnStart** method finishes. The **Application\\_End** method is called before the **RoleEntryPoint.OnStop** method is called.\n\n## Next steps\nLearn how to [create a cloud service package](cloud-services-model-and-package.md).\ntest\n"
}