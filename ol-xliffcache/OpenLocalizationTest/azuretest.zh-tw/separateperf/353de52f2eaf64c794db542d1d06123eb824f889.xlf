<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Author Logic App definitions</source>
          <target state="new">Author Logic App definitions</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to write the JSON definition for Logic apps.</source>
          <target state="new">Learn how to write the JSON definition for Logic apps.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Author Logic App definitions</source>
          <target state="new">Author Logic App definitions</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to use <bpt id="p1">[</bpt>App Services Logic Apps<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept> definitions, which is a simple, declarative JSON language.</source>
          <target state="new">This topic demonstrates how to use <bpt id="p1">[</bpt>App Services Logic Apps<ept id="p1">](app-service-logic-what-are-logic-apps.md)</ept> definitions, which is a simple, declarative JSON language.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you haven't done so yet, check out <bpt id="p1">[</bpt>how to Create a new Logic app<ept id="p1">](../app-service-create-a-logic-app.md)</ept> first.</source>
          <target state="new">If you haven't done so yet, check out <bpt id="p1">[</bpt>how to Create a new Logic app<ept id="p1">](../app-service-create-a-logic-app.md)</ept> first.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also read the <bpt id="p1">[</bpt>full reference material of the definition language on MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx)</ept>.</source>
          <target state="new">You can also read the <bpt id="p1">[</bpt>full reference material of the definition language on MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Several steps that repeat over a list</source>
          <target state="new">Several steps that repeat over a list</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A common pattern is to have one step that gets a list of items, and then you have a series of two or more actions that you want to do on the list.</source>
          <target state="new">A common pattern is to have one step that gets a list of items, and then you have a series of two or more actions that you want to do on the list.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Repeat over lists</source>
          <target state="new">Repeat over lists</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example there are 3 actions:</source>
          <target state="new">In this example there are 3 actions:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Get a list of articles.</source>
          <target state="new">Get a list of articles.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This returns back an object that contains an array.</source>
          <target state="new">This returns back an object that contains an array.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An action that goes to a link property on each article, which will return back the actual location of the article.</source>
          <target state="new">An action that goes to a link property on each article, which will return back the actual location of the article.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An action that iterates over all of the results from the second action to download the actual articles.</source>
          <target state="new">An action that iterates over all of the results from the second action to download the actual articles.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As covered in <bpt id="p1">[</bpt>use logic app features<ept id="p1">](app-service-logic-use-logic-app-features.md)</ept>, you iterate over the first list by using the <ph id="ph1">`repeat:`</ph> property on the second action.</source>
          <target state="new">As covered in <bpt id="p1">[</bpt>use logic app features<ept id="p1">](app-service-logic-use-logic-app-features.md)</ept>, you iterate over the first list by using the <ph id="ph1">`repeat:`</ph> property on the second action.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, for the third action, you need to select the <ph id="ph1">`@actions('readLinks').outputs.repeatItems`</ph> property, because the second executed for each article.</source>
          <target state="new">However, for the third action, you need to select the <ph id="ph1">`@actions('readLinks').outputs.repeatItems`</ph> property, because the second executed for each article.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Inside the action you can use either the: <bpt id="p1">[</bpt><ph id="ph1">`repeatItem()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatItem)</ept>, the <bpt id="p2">[</bpt><ph id="ph2">`repeatOutputs()`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs)</ept> or <bpt id="p3">[</bpt><ph id="ph3">`repeatBody()`</ph><ept id="p3">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatBody)</ept> functions.</source>
          <target state="new">Inside the action you can use either the: <bpt id="p1">[</bpt><ph id="ph1">`repeatItem()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatItem)</ept>, the <bpt id="p2">[</bpt><ph id="ph2">`repeatOutputs()`</ph><ept id="p2">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs)</ept> or <bpt id="p3">[</bpt><ph id="ph3">`repeatBody()`</ph><ept id="p3">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatBody)</ept> functions.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this example, I wanted to get the <ph id="ph1">`location`</ph> header, so I used the <bpt id="p1">[</bpt><ph id="ph2">`repeatOutputs()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs)</ept> function to get the outputs of the action execution from the second action that we are now iterating over.</source>
          <target state="new">In this example, I wanted to get the <ph id="ph1">`location`</ph> header, so I used the <bpt id="p1">[</bpt><ph id="ph2">`repeatOutputs()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#repeatOutputs)</ept> function to get the outputs of the action execution from the second action that we are now iterating over.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Mapping items in a list to some different configuration</source>
          <target state="new">Mapping items in a list to some different configuration</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Next, let's say that we want to get completely different content depending on a value of a property.</source>
          <target state="new">Next, let's say that we want to get completely different content depending on a value of a property.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We can create a map of values to destinations as a parameter.</source>
          <target state="new">We can create a map of values to destinations as a parameter.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, we first get a list of articles, and then the second step looks up in a map, based on the category that was defined as a parameter, which URL to get the content from.</source>
          <target state="new">In this case, we first get a list of articles, and then the second step looks up in a map, based on the category that was defined as a parameter, which URL to get the content from.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Two items to pay attention here: the <bpt id="p1">[</bpt><ph id="ph1">`intersection()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#intersection)</ept> function is used to check to see if the category matches one of the known categories defined.</source>
          <target state="new">Two items to pay attention here: the <bpt id="p1">[</bpt><ph id="ph1">`intersection()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#intersection)</ept> function is used to check to see if the category matches one of the known categories defined.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Second, once we get the category, we can pull the item of the map using square brackets: <ph id="ph1">`parameters[...]`</ph>.</source>
          <target state="new">Second, once we get the category, we can pull the item of the map using square brackets: <ph id="ph1">`parameters[...]`</ph>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Chain/nest Logic Apps while repeating over a list</source>
          <target state="new">Chain/nest Logic Apps while repeating over a list</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It can often be easier to manage your Logic Apps when they are more discreet.</source>
          <target state="new">It can often be easier to manage your Logic Apps when they are more discreet.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can do this by factoring your logic into multiple definitions and calling them from the same parent definition.</source>
          <target state="new">You can do this by factoring your logic into multiple definitions and calling them from the same parent definition.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this example, there will be a parent Logic app that receives orders, and a child logic app that executes some steps for each order.</source>
          <target state="new">In this example, there will be a parent Logic app that receives orders, and a child logic app that executes some steps for each order.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the parent logic app:</source>
          <target state="new">In the parent logic app:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Then, in the child logic app you'll use the <bpt id="p1">[</bpt><ph id="ph1">`triggerBody()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerBody)</ept> function to get the values that were passed into the child workflow.</source>
          <target state="new">Then, in the child logic app you'll use the <bpt id="p1">[</bpt><ph id="ph1">`triggerBody()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerBody)</ept> function to get the values that were passed into the child workflow.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You'll then populate the outputs with the data that you want to return to the parent flow.</source>
          <target state="new">You'll then populate the outputs with the data that you want to return to the parent flow.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can read about the <bpt id="p1">[</bpt>Logic app type action on MSDN<ept id="p1">](https://msdn.microsoft.com/en-US/library/azure/dn948511.aspx)</ept>.</source>
          <target state="new">You can read about the <bpt id="p1">[</bpt>Logic app type action on MSDN<ept id="p1">](https://msdn.microsoft.com/en-US/library/azure/dn948511.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>The Logic app designer does not support Logic app type actions so you will need to edit the definition manually.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>The Logic app designer does not support Logic app type actions so you will need to edit the definition manually.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A failure-handling step if something goes wrong</source>
          <target state="new">A failure-handling step if something goes wrong</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You commonly want to be able to write a <bpt id="p1">*</bpt>remediation step<ept id="p1">*</ept> -- some logic that executes, if , <bpt id="p2">**</bpt>and only if<ept id="p2">**</ept>, one or more of your calls failed.</source>
          <target state="new">You commonly want to be able to write a <bpt id="p1">*</bpt>remediation step<ept id="p1">*</ept> -- some logic that executes, if , <bpt id="p2">**</bpt>and only if<ept id="p2">**</ept>, one or more of your calls failed.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, we are getting data from a variety of places, but if the call fails, I want to POST a message somewhere so I can track down that failure later.</source>
          <target state="new">In this example, we are getting data from a variety of places, but if the call fails, I want to POST a message somewhere so I can track down that failure later.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>I am using two conditions because in the first step I am repeating over a list.</source>
          <target state="new">I am using two conditions because in the first step I am repeating over a list.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you just had a single action, you'd only need one condition (the first one).</source>
          <target state="new">If you just had a single action, you'd only need one condition (the first one).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also note that you can use the <bpt id="p1">*</bpt>inputs<ept id="p1">*</ept> to the failed action in your remediation step -- here I pass the failed URL to the second step.</source>
          <target state="new">Also note that you can use the <bpt id="p1">*</bpt>inputs<ept id="p1">*</ept> to the failed action in your remediation step -- here I pass the failed URL to the second step.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remediation</source>
          <target state="new">Remediation</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Finally, because you have now handled the error, we no longer mark the run as <bpt id="p1">**</bpt>Failed<ept id="p1">**</ept>.</source>
          <target state="new">Finally, because you have now handled the error, we no longer mark the run as <bpt id="p1">**</bpt>Failed<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As you can see here, this run is <bpt id="p1">**</bpt>Succeeded<ept id="p1">**</ept> even though one step Failed, because I wrote the step to handle this failure.</source>
          <target state="new">As you can see here, this run is <bpt id="p1">**</bpt>Succeeded<ept id="p1">**</ept> even though one step Failed, because I wrote the step to handle this failure.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Two (or more) steps that execute in parellel</source>
          <target state="new">Two (or more) steps that execute in parellel</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To have multiple actions execution in parellel, rather than in sequence, you need to remove the <ph id="ph1">`dependsOn`</ph> condition that links those two actions together.</source>
          <target state="new">To have multiple actions execution in parellel, rather than in sequence, you need to remove the <ph id="ph1">`dependsOn`</ph> condition that links those two actions together.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Once the dependency is removed, actions will automatically execute in parallel, unless they need data from each other.</source>
          <target state="new">Once the dependency is removed, actions will automatically execute in parallel, unless they need data from each other.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Branches</source>
          <target state="new">Branches</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As you can see in the example above, branch1 and branch2 just depend on the content from readData.</source>
          <target state="new">As you can see in the example above, branch1 and branch2 just depend on the content from readData.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>As a result, both of these branches will run in parallel:</source>
          <target state="new">As a result, both of these branches will run in parallel:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parallel</source>
          <target state="new">Parallel</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can see the timestamp for both branches is identical.</source>
          <target state="new">You can see the timestamp for both branches is identical.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Join two conditional branches of logic</source>
          <target state="new">Join two conditional branches of logic</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can combine two conditional flows of logic (that may or may not have executed) by having a single action that takes data from both branches.</source>
          <target state="new">You can combine two conditional flows of logic (that may or may not have executed) by having a single action that takes data from both branches.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Your strategy for this varies depending on if you are handling one item, or a collection of items.</source>
          <target state="new">Your strategy for this varies depending on if you are handling one item, or a collection of items.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the case of a single item, you'll want to use the <bpt id="p1">[</bpt><ph id="ph1">`coalesce()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#coalesce)</ept> function:</source>
          <target state="new">In the case of a single item, you'll want to use the <bpt id="p1">[</bpt><ph id="ph1">`coalesce()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#coalesce)</ept> function:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Alternatively, when your first two branches both operate on a list of orders, for example, you'll want to use the <bpt id="p1">[</bpt><ph id="ph1">`union()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#union)</ept> function to combine the data from both branches.</source>
          <target state="new">Alternatively, when your first two branches both operate on a list of orders, for example, you'll want to use the <bpt id="p1">[</bpt><ph id="ph1">`union()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#union)</ept> function to combine the data from both branches.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Working with Strings</source>
          <target state="new">Working with Strings</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are variety of functions that can be used to maniplate string.</source>
          <target state="new">There are variety of functions that can be used to maniplate string.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Let's take an example where we have a string that we want to pass to a system, but we are not confident that character encoding will be handled properly.</source>
          <target state="new">Let's take an example where we have a string that we want to pass to a system, but we are not confident that character encoding will be handled properly.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>One option is to base64 encode this string.</source>
          <target state="new">One option is to base64 encode this string.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, to avoid escaping in a URL we are going to replace a few characters.</source>
          <target state="new">However, to avoid escaping in a URL we are going to replace a few characters.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>We also want a substring of the the order's name because the first 5 characters are not used.</source>
          <target state="new">We also want a substring of the the order's name because the first 5 characters are not used.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Working from the inside out:</source>
          <target state="new">Working from the inside out:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Get the <bpt id="p1">[</bpt><ph id="ph1">`length()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#length)</ept>  of the orderer's name, this returns back the total number of characters</source>
          <target state="new">Get the <bpt id="p1">[</bpt><ph id="ph1">`length()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#length)</ept>  of the orderer's name, this returns back the total number of characters</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Subtract 5 (because we'll want a shorter string)</source>
          <target state="new">Subtract 5 (because we'll want a shorter string)</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Actually take the <bpt id="p1">[</bpt><ph id="ph1">`substring()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#substring)</ept> .</source>
          <target state="new">Actually take the <bpt id="p1">[</bpt><ph id="ph1">`substring()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#substring)</ept> .</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>We start at index <ph id="ph1">`5`</ph> and go the remainder of the string.</source>
          <target state="new">We start at index <ph id="ph1">`5`</ph> and go the remainder of the string.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Convert this substring to a <bpt id="p1">[</bpt><ph id="ph1">`base64()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#base64)</ept> string</source>
          <target state="new">Convert this substring to a <bpt id="p1">[</bpt><ph id="ph1">`base64()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#base64)</ept> string</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`replace()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)</ept>  all of the <ph id="ph2">`+`</ph> characters with <ph id="ph3">`-`</ph></source>
          <target state="new"><bpt id="p1">[</bpt><ph id="ph1">`replace()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)</ept>  all of the <ph id="ph2">`+`</ph> characters with <ph id="ph3">`-`</ph></target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`replace()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)</ept> all of the <ph id="ph2">`/`</ph> characters with <ph id="ph3">`_`</ph></source>
          <target state="new"><bpt id="p1">[</bpt><ph id="ph1">`replace()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#replace)</ept> all of the <ph id="ph2">`/`</ph> characters with <ph id="ph3">`_`</ph></target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Working with Date Times</source>
          <target state="new">Working with Date Times</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Date Times can be useful, particularly when you are trying to pull data from a data source that doesn't naturally support <bpt id="p1">**</bpt>Triggers<ept id="p1">**</ept>.</source>
          <target state="new">Date Times can be useful, particularly when you are trying to pull data from a data source that doesn't naturally support <bpt id="p1">**</bpt>Triggers<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also use Date Times to figure out how long various steps are taking.</source>
          <target state="new">You can also use Date Times to figure out how long various steps are taking.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In this example, we are extracting the <ph id="ph1">`startTime`</ph> of the previous step.</source>
          <target state="new">In this example, we are extracting the <ph id="ph1">`startTime`</ph> of the previous step.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Then we are getting the current time and subtracting one second :<bpt id="p1">[</bpt><ph id="ph1">`addseconds(..., -1)`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#addseconds)</ept> (you could use other units of time such as <ph id="ph2">`minutes`</ph> or <ph id="ph3">`hours`</ph>).</source>
          <target state="new">Then we are getting the current time and subtracting one second :<bpt id="p1">[</bpt><ph id="ph1">`addseconds(..., -1)`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#addseconds)</ept> (you could use other units of time such as <ph id="ph2">`minutes`</ph> or <ph id="ph3">`hours`</ph>).</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Finally, we can compare these two values.</source>
          <target state="new">Finally, we can compare these two values.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the first is less than the second, then that means more than one second has elapsed since the order was first placed.</source>
          <target state="new">If the first is less than the second, then that means more than one second has elapsed since the order was first placed.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Also note that we can use string formatters to format dates: in the query string I use <bpt id="p1">[</bpt><ph id="ph1">`utcnow('r')`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow)</ept> to get the RFC1123.</source>
          <target state="new">Also note that we can use string formatters to format dates: in the query string I use <bpt id="p1">[</bpt><ph id="ph1">`utcnow('r')`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow)</ept> to get the RFC1123.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>All date formatting <bpt id="p1">[</bpt>is documented on MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow)</ept>.</source>
          <target state="new">All date formatting <bpt id="p1">[</bpt>is documented on MSDN<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#utcnow)</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Passing in values at runtime to vary behavior</source>
          <target state="new">Passing in values at runtime to vary behavior</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Let's say you have different behaviors that you want to run based on some value that you use to kick off your Logic app.</source>
          <target state="new">Let's say you have different behaviors that you want to run based on some value that you use to kick off your Logic app.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><ph id="ph1">`triggerOutputs()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerOutputs)</ept> function to get these values out of what you passed in:</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><ph id="ph1">`triggerOutputs()`</ph><ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx#triggerOutputs)</ept> function to get these values out of what you passed in:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To actually make this work, when you start the run you need to pass the properties you want (in the above example <ph id="ph1">`uriToGet`</ph> and <ph id="ph2">`doMoreLogic`</ph>).</source>
          <target state="new">To actually make this work, when you start the run you need to pass the properties you want (in the above example <ph id="ph1">`uriToGet`</ph> and <ph id="ph2">`doMoreLogic`</ph>).</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Here is the call you can <bpt id="p1">[</bpt>use Basic auth for<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948513.aspx#basicAuth)</ept>:</source>
          <target state="new">Here is the call you can <bpt id="p1">[</bpt>use Basic auth for<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948513.aspx#basicAuth)</ept>:</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>With the following payload.</source>
          <target state="new">With the following payload.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Note that you have provided the Logic app with the values to use now:</source>
          <target state="new">Note that you have provided the Logic app with the values to use now:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When this logic app runs it will call the uri I passed in, and run that additional step because I passed <ph id="ph1">`true`</ph>.</source>
          <target state="new">When this logic app runs it will call the uri I passed in, and run that additional step because I passed <ph id="ph1">`true`</ph>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you want to only vary parameters at deployment time (not for <bpt id="p1">*</bpt>each run<ept id="p1">*</ept>), then you should use <ph id="ph1">`parameters`</ph> as called out below.</source>
          <target state="new">If you want to only vary parameters at deployment time (not for <bpt id="p1">*</bpt>each run<ept id="p1">*</ept>), then you should use <ph id="ph1">`parameters`</ph> as called out below.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Using deployment-time parameters for different environments</source>
          <target state="new">Using deployment-time parameters for different environments</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It is common to have a deployment lifecycle where you have a development environment, a staging environment, and then a production environment.</source>
          <target state="new">It is common to have a deployment lifecycle where you have a development environment, a staging environment, and then a production environment.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In all of these you may want the same definition, but use different databases, for example.</source>
          <target state="new">In all of these you may want the same definition, but use different databases, for example.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Likewise, you may want to use the same definition across many different regions for high availability, but want each Logic app instance to talk to that region's database.</source>
          <target state="new">Likewise, you may want to use the same definition across many different regions for high availability, but want each Logic app instance to talk to that region's database.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Note that this is different from taking different parameters at <bpt id="p1">*</bpt>runtime<ept id="p1">*</ept>, for that you should use the <ph id="ph1">`trigger()`</ph> function as called out above.</source>
          <target state="new">Note that this is different from taking different parameters at <bpt id="p1">*</bpt>runtime<ept id="p1">*</ept>, for that you should use the <ph id="ph1">`trigger()`</ph> function as called out above.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can start with a very simplistic definition like this one:</source>
          <target state="new">You can start with a very simplistic definition like this one:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Then, in the actual <ph id="ph1">`PUT`</ph> request for the Logic app you can provide the parameter <ph id="ph2">`connection`</ph>.</source>
          <target state="new">Then, in the actual <ph id="ph1">`PUT`</ph> request for the Logic app you can provide the parameter <ph id="ph2">`connection`</ph>.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Note, as there is no longer a default value this parameter is required in the Logic app payload:</source>
          <target state="new">Note, as there is no longer a default value this parameter is required in the Logic app payload:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In each environment you can then provide a different value for the <ph id="ph1">`connection`</ph> parameter.</source>
          <target state="new">In each environment you can then provide a different value for the <ph id="ph1">`connection`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>REST API documentation<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948513.aspx)</ept> for all of the options you have for creating and managing Logic apps.</source>
          <target state="new">See the <bpt id="p1">[</bpt>REST API documentation<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948513.aspx)</ept> for all of the options you have for creating and managing Logic apps.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">353de52f2eaf64c794db542d1d06123eb824f889</xliffext:olfilehash>
  </header>
</xliff>