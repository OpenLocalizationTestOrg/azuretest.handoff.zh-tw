{
  "nodes": [
    {
      "content": "Multi-shard querying",
      "pos": [
        28,
        48
      ]
    },
    {
      "content": "Run queries across shards using the elastic database client library.",
      "pos": [
        68,
        136
      ]
    },
    {
      "content": "Multi-shard querying",
      "pos": [
        454,
        474
      ]
    },
    {
      "content": "Overview",
      "pos": [
        479,
        487
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Multi-shard querying<ept id=\"p1\">**</ept> is used for tasks such as data collection/reporting that require running a query that stretches across several shards.",
      "pos": [
        489,
        632
      ]
    },
    {
      "content": "(Contrast this to <bpt id=\"p1\">[</bpt>data-dependent routing<ept id=\"p1\">](sql-database-elastic-scale-data-dependent-routing.md)</ept>, which performs all work on a single shard.) To use SQL Server Management Studio, see <bpt id=\"p2\">[</bpt>Getting started with Elastic Database query<ept id=\"p2\">](sql-database-elastic-query-getting-started.md)</ept>.",
      "pos": [
        633,
        909
      ]
    },
    {
      "content": "The elastic database client library introduces a new namespace called <bpt id=\"p1\">**</bpt>Microsoft.Azure.SqlDatabase.ElasticScale.Query<ept id=\"p1\">**</ept> that provides the ability to query multiple shards using a single query and result.",
      "pos": [
        911,
        1115
      ]
    },
    {
      "content": "It provides a querying abstraction over a collection of shards.",
      "pos": [
        1116,
        1179
      ]
    },
    {
      "content": "It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.",
      "pos": [
        1180,
        1313
      ]
    },
    {
      "content": "The main entry point into multi-shard querying is the <bpt id=\"p1\">**</bpt>MultiShardConnection<ept id=\"p1\">**</ept> class.",
      "pos": [
        1317,
        1402
      ]
    },
    {
      "content": "As with data-dependent routing, the API follows the familiar experience of the <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt>System.Data.SqlClient<ept id=\"p2\">](http://msdn.microsoft.com/library/System.Data.SqlClient(v=vs.110).aspx)</ept><ept id=\"p1\">**</ept> classes and methods.",
      "pos": [
        1403,
        1602
      ]
    },
    {
      "content": "With the <bpt id=\"p1\">**</bpt>SqlClient<ept id=\"p1\">**</ept> library, the first step is to create a <bpt id=\"p2\">**</bpt>SqlConnection<ept id=\"p2\">**</ept>, then create a <bpt id=\"p3\">**</bpt>SqlCommand<ept id=\"p3\">**</ept> for the connection, then execute the command through one of the <bpt id=\"p4\">**</bpt>Execute<ept id=\"p4\">**</ept> methods.",
      "pos": [
        1603,
        1797
      ]
    },
    {
      "content": "Finally, <bpt id=\"p1\">**</bpt>SqlDataReader<ept id=\"p1\">**</ept> iterates through the result sets returned from the command execution.",
      "pos": [
        1798,
        1894
      ]
    },
    {
      "content": "The experience with the multi-shard query APIs follows these steps:",
      "pos": [
        1895,
        1962
      ]
    },
    {
      "pos": [
        1968,
        2002
      ],
      "content": "Create a <bpt id=\"p1\">**</bpt>MultiShardConnection<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2006,
        2068
      ],
      "content": "Create a <bpt id=\"p1\">**</bpt>MultiShardCommand<ept id=\"p1\">**</ept> for a <bpt id=\"p2\">**</bpt>MultiShardConnection<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Execute the command.",
      "pos": [
        2072,
        2092
      ]
    },
    {
      "pos": [
        2096,
        2153
      ],
      "content": "Consume the results through the <bpt id=\"p1\">**</bpt>MultiShardDataReader<ept id=\"p1\">**</ept>."
    },
    {
      "content": "A key difference is the construction of multi-shard connections.",
      "pos": [
        2156,
        2220
      ]
    },
    {
      "content": "Where <bpt id=\"p1\">**</bpt>SqlConnection<ept id=\"p1\">**</ept> operates on a single database, the <bpt id=\"p2\">**</bpt>MultiShardConnection<ept id=\"p2\">**</ept> takes a <bpt id=\"p3\">***</bpt>collection of shards<ept id=\"p3\">***</ept> as its input.",
      "pos": [
        2221,
        2353
      ]
    },
    {
      "content": "One can populate the collection of shards from a shard map.",
      "pos": [
        2354,
        2413
      ]
    },
    {
      "content": "The query is then executed on the collection of shards using <bpt id=\"p1\">**</bpt>UNION ALL<ept id=\"p1\">**</ept> semantics to assemble a single overall result.",
      "pos": [
        2414,
        2535
      ]
    },
    {
      "content": "Optionally, the name of the shard where the row originates from can be added to the output using the <bpt id=\"p1\">**</bpt>ExecutionOptions<ept id=\"p1\">**</ept> property on command.",
      "pos": [
        2536,
        2678
      ]
    },
    {
      "content": "The following code illustrates the usage of multi-shard querying using a given <bpt id=\"p1\">**</bpt>ShardMap<ept id=\"p1\">**</ept> named <bpt id=\"p2\">*</bpt>myShardMap<ept id=\"p2\">*</ept>.",
      "pos": [
        2679,
        2790
      ]
    },
    {
      "content": "Note the call to <bpt id=\"p1\">**</bpt>myShardMap.GetShards()<ept id=\"p1\">**</ept>.",
      "pos": [
        3790,
        3834
      ]
    },
    {
      "content": "This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases.",
      "pos": [
        3835,
        3957
      ]
    },
    {
      "content": "The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to <bpt id=\"p1\">**</bpt>myShardMap.GetShards()<ept id=\"p1\">**</ept>.",
      "pos": [
        3958,
        4130
      ]
    },
    {
      "content": "In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.",
      "pos": [
        4131,
        4291
      ]
    },
    {
      "content": "A limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried.",
      "pos": [
        4292,
        4409
      ]
    },
    {
      "content": "While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check.",
      "pos": [
        4410,
        4563
      ]
    },
    {
      "content": "This can lead to multi-shard queries running on databases that have since been removed from the shard map.",
      "pos": [
        4564,
        4670
      ]
    },
    {
      "content": "Multi-shard queries and split-merge operations",
      "pos": [
        4675,
        4721
      ]
    },
    {
      "content": "Multi-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations.",
      "pos": [
        4723,
        4851
      ]
    },
    {
      "content": "This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query.",
      "pos": [
        4852,
        4977
      ]
    },
    {
      "content": "Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.",
      "pos": [
        4978,
        5127
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Multi-shard querying\" \n    description=\"Run queries across shards using the elastic database client library.\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    manager=\"jeffreyg\" \n    authors=\"sidneyh\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"sql-database\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"07/24/2015\" \n    ms.author=\"sidneyh\"/>\n\n# Multi-shard querying\n\n## Overview\n\n**Multi-shard querying** is used for tasks such as data collection/reporting that require running a query that stretches across several shards. (Contrast this to [data-dependent routing](sql-database-elastic-scale-data-dependent-routing.md), which performs all work on a single shard.) To use SQL Server Management Studio, see [Getting started with Elastic Database query](sql-database-elastic-query-getting-started.md).\n\nThe elastic database client library introduces a new namespace called **Microsoft.Azure.SqlDatabase.ElasticScale.Query** that provides the ability to query multiple shards using a single query and result. It provides a querying abstraction over a collection of shards. It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.  \n\nThe main entry point into multi-shard querying is the **MultiShardConnection** class. As with data-dependent routing, the API follows the familiar experience of the **[System.Data.SqlClient](http://msdn.microsoft.com/library/System.Data.SqlClient(v=vs.110).aspx)** classes and methods. With the **SqlClient** library, the first step is to create a **SqlConnection**, then create a **SqlCommand** for the connection, then execute the command through one of the **Execute** methods. Finally, **SqlDataReader** iterates through the result sets returned from the command execution. The experience with the multi-shard query APIs follows these steps: \n\n1. Create a **MultiShardConnection**.\n2. Create a **MultiShardCommand** for a **MultiShardConnection**.\n3. Execute the command.\n4. Consume the results through the **MultiShardDataReader**. \n\nA key difference is the construction of multi-shard connections. Where **SqlConnection** operates on a single database, the **MultiShardConnection** takes a ***collection of shards*** as its input. One can populate the collection of shards from a shard map. The query is then executed on the collection of shards using **UNION ALL** semantics to assemble a single overall result. Optionally, the name of the shard where the row originates from can be added to the output using the **ExecutionOptions** property on command. The following code illustrates the usage of multi-shard querying using a given **ShardMap** named *myShardMap*. \n\n    using (MultiShardConnection conn = new MultiShardConnection( \n                                        myShardMap.GetShards(), \n                                        myShardConnectionString) \n          ) \n    { \n    using (MultiShardCommand cmd = conn.CreateCommand())\n           { \n            cmd.CommandText = \"SELECT c1, c2, c3 FROM ShardedTable\"; \n            cmd.CommandType = CommandType.Text; \n            cmd.ExecutionOptions = MultiShardExecutionOptions.IncludeShardNameColumn; \n            cmd.ExecutionPolicy = MultiShardExecutionPolicy.PartialResults; \n\n            using (MultiShardDataReader sdr = cmd.ExecuteReader()) \n                { \n                    while (sdr.Read())\n                        { \n                            var c1Field = sdr.GetString(0); \n                            var c2Field = sdr.GetFieldValue<int>(1); \n                            var c3Field = sdr.GetFieldValue<Int64>(2);\n                        } \n                } \n           } \n    } \n \n\nNote the call to **myShardMap.GetShards()**. This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases. The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to **myShardMap.GetShards()**. In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.\nA limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried. While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check. This can lead to multi-shard queries running on databases that have since been removed from the shard map.\n\n## Multi-shard queries and split-merge operations\n\nMulti-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations. This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query. Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.\n\n[AZURE.INCLUDE [elastic-scale-include](../../includes/elastic-scale-include.md)]\n "
}