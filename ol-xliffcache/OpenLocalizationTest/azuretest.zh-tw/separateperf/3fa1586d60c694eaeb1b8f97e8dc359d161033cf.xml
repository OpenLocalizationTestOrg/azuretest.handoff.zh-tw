{
  "nodes": [
    {
      "content": "NuGet Packages | Microsoft Azure",
      "pos": [
        26,
        58
      ]
    },
    {
      "content": "Guidance on NuGet Packages for general retry policy work.",
      "pos": [
        76,
        133
      ]
    },
    {
      "content": "NuGet Packages",
      "pos": [
        421,
        435
      ]
    },
    {
      "content": "As more components begin to communicate, transient failures become",
      "pos": [
        453,
        519
      ]
    },
    {
      "content": "more important to smartly handle.",
      "pos": [
        520,
        553
      ]
    },
    {
      "content": "The Transient Fault Handling work handled by the",
      "pos": [
        554,
        602
      ]
    },
    {
      "content": "retry policies NuGet package can help handle retries within a single instance.",
      "pos": [
        603,
        681
      ]
    },
    {
      "content": "This document was based on a draft as a proof of concept.",
      "pos": [
        689,
        746
      ]
    },
    {
      "content": "It is not the actual",
      "pos": [
        747,
        767
      ]
    },
    {
      "content": "reviewed guidance.",
      "pos": [
        770,
        788
      ]
    },
    {
      "pos": [
        790,
        890
      ],
      "content": "The Patterns &amp; Practices <ph id=\"ph1\">`TransientFaultHandling`</ph> code is recommended for general retry policy work."
    },
    {
      "content": "Configuration",
      "pos": [
        974,
        987
      ]
    },
    {
      "content": "Section includes the configuration information for the retry feature:",
      "pos": [
        989,
        1058
      ]
    },
    {
      "content": "Parameter",
      "pos": [
        1060,
        1069
      ]
    },
    {
      "content": "Description",
      "pos": [
        1083,
        1094
      ]
    },
    {
      "content": "MaximumExecutionTime",
      "pos": [
        1141,
        1161
      ]
    },
    {
      "content": "Maximum execution time for the request, including all potential retry attempts.",
      "pos": [
        1164,
        1243
      ]
    },
    {
      "content": "ServerTimeOut",
      "pos": [
        1244,
        1257
      ]
    },
    {
      "content": "Server timeout interval for the request",
      "pos": [
        1267,
        1306
      ]
    },
    {
      "content": "RetryPolicy",
      "pos": [
        1307,
        1318
      ]
    },
    {
      "content": "Retry policy.",
      "pos": [
        1330,
        1343
      ]
    },
    {
      "content": "See Policies section below",
      "pos": [
        1344,
        1370
      ]
    },
    {
      "content": "Programmatic:",
      "pos": [
        1641,
        1654
      ]
    },
    {
      "content": "Support for setting on the Client.",
      "pos": [
        1658,
        1692
      ]
    },
    {
      "content": "Enable overriding at operations provided by client",
      "pos": [
        1695,
        1745
      ]
    },
    {
      "content": "Configuration file:",
      "pos": [
        1747,
        1766
      ]
    },
    {
      "content": "Policies",
      "pos": [
        2176,
        2184
      ]
    },
    {
      "content": "Exponential",
      "pos": [
        2190,
        2201
      ]
    },
    {
      "content": "Used for spacing out repeated attempts of service invocations exponentially to avoid service throttling.",
      "pos": [
        2203,
        2307
      ]
    },
    {
      "content": "Approach:",
      "pos": [
        2311,
        2320
      ]
    },
    {
      "content": "Exponentially increase the backoff interval between subsequent attempts.",
      "pos": [
        2324,
        2396
      ]
    },
    {
      "content": "Add randomization to (+/- 20%) to backoff interval to avoid all clients retrying simultaneously",
      "pos": [
        2397,
        2492
      ]
    },
    {
      "content": "Configuration:",
      "pos": [
        2496,
        2510
      ]
    },
    {
      "content": "Parameter",
      "pos": [
        2514,
        2523
      ]
    },
    {
      "content": "Description",
      "pos": [
        2537,
        2548
      ]
    },
    {
      "content": "maxAttempt",
      "pos": [
        2628,
        2638
      ]
    },
    {
      "content": "Number of retry attempts.",
      "pos": [
        2651,
        2676
      ]
    },
    {
      "content": "deltaBackoff",
      "pos": [
        2677,
        2689
      ]
    },
    {
      "content": "Back-off interval between retries.",
      "pos": [
        2700,
        2734
      ]
    },
    {
      "content": "Multiples of this timespan will be used for subsequent retry attempts.",
      "pos": [
        2735,
        2805
      ]
    },
    {
      "content": "MinBackoff",
      "pos": [
        2806,
        2816
      ]
    },
    {
      "content": "Added to all retry intervals computed from deltaBackoff.",
      "pos": [
        2829,
        2885
      ]
    },
    {
      "content": "FastFirst",
      "pos": [
        2886,
        2895
      ]
    },
    {
      "content": "Immediate first retry",
      "pos": [
        2909,
        2930
      ]
    },
    {
      "content": "MaxBackoff",
      "pos": [
        2931,
        2941
      ]
    },
    {
      "content": "MaxBackoff is used if the computed retry interval is greater than MaxBackoff.",
      "pos": [
        2954,
        3031
      ]
    },
    {
      "content": "This value cannot be changed.",
      "pos": [
        3032,
        3061
      ]
    },
    {
      "content": "Implementation Logic:",
      "pos": [
        3065,
        3086
      ]
    },
    {
      "content": "Linear",
      "pos": [
        3601,
        3607
      ]
    },
    {
      "content": "Used for spacing out repeated attempts of service invocations linearly to avoid service throttling.",
      "pos": [
        3609,
        3708
      ]
    },
    {
      "content": "Approach:",
      "pos": [
        3712,
        3721
      ]
    },
    {
      "content": "Perform a specified number of retries, using a specified fixed time interval between retries.",
      "pos": [
        3725,
        3818
      ]
    },
    {
      "content": "Add randomization to (+/- 20%) to backoff interval to avoid all clients retrying simultaneously.",
      "pos": [
        3819,
        3915
      ]
    },
    {
      "content": "Configuration:",
      "pos": [
        3919,
        3933
      ]
    },
    {
      "content": "Parameter",
      "pos": [
        3937,
        3946
      ]
    },
    {
      "content": "Description",
      "pos": [
        3960,
        3971
      ]
    },
    {
      "content": "maxAttempt",
      "pos": [
        4051,
        4061
      ]
    },
    {
      "content": "Number of retry attempts.",
      "pos": [
        4064,
        4089
      ]
    },
    {
      "content": "deltaBackoff",
      "pos": [
        4090,
        4102
      ]
    },
    {
      "content": "Back-off interval between retries.",
      "pos": [
        4105,
        4139
      ]
    },
    {
      "content": "FastFirst",
      "pos": [
        4140,
        4149
      ]
    },
    {
      "content": "Immediate first retry",
      "pos": [
        4152,
        4173
      ]
    },
    {
      "content": "Implementation Logic:",
      "pos": [
        4177,
        4198
      ]
    },
    {
      "content": "Adaptive",
      "pos": [
        4489,
        4497
      ]
    },
    {
      "content": "Used for spacing out repeated attempts of service invocations based on error code / metadata passed by service in response header.",
      "pos": [
        4499,
        4629
      ]
    },
    {
      "content": "Approach:",
      "pos": [
        4633,
        4642
      ]
    },
    {
      "content": "Perform a specified number of retries, using a backoff interval calculated based on error code / metadata passed by service in response header",
      "pos": [
        4646,
        4788
      ]
    },
    {
      "content": "Configuration:",
      "pos": [
        4793,
        4807
      ]
    },
    {
      "content": "Not configurable",
      "pos": [
        4811,
        4827
      ]
    },
    {
      "content": "Implementation Logic:",
      "pos": [
        4831,
        4852
      ]
    },
    {
      "content": "Based on error code / metadata passed by service in response header",
      "pos": [
        4856,
        4923
      ]
    },
    {
      "content": "Circuit Break:",
      "pos": [
        4927,
        4941
      ]
    },
    {
      "pos": [
        4945,
        5020
      ],
      "content": "Based on <bpt id=\"p1\">[</bpt>Circuit Breaker<ept id=\"p1\">](http://msdn.microsoft.com/library/dn589784.aspx)</ept>"
    },
    {
      "content": "Extensibility",
      "pos": [
        5025,
        5038
      ]
    },
    {
      "content": "Public interface that can be implemented for providing Custom Retry policy",
      "pos": [
        5040,
        5114
      ]
    },
    {
      "content": "Telemetry",
      "pos": [
        6041,
        6050
      ]
    },
    {
      "content": "Log retries as ETW events using an EventSource.",
      "pos": [
        6052,
        6099
      ]
    },
    {
      "content": "Here are the fields that should be logged for every retry attempt",
      "pos": [
        6100,
        6165
      ]
    },
    {
      "content": "Parameter",
      "pos": [
        6167,
        6176
      ]
    },
    {
      "content": "Description",
      "pos": [
        6190,
        6201
      ]
    },
    {
      "content": "requestId",
      "pos": [
        6281,
        6290
      ]
    },
    {
      "content": "\"\"",
      "pos": [
        6293,
        6295
      ]
    },
    {
      "content": "policyType",
      "pos": [
        6296,
        6306
      ]
    },
    {
      "content": "\"RetryExponential\"",
      "pos": [
        6309,
        6327
      ]
    },
    {
      "content": "operation",
      "pos": [
        6328,
        6337
      ]
    },
    {
      "content": "\"Get:https://retry-guidance-tests.servicebus.windows.net/TestQueue/?api-version=2014-05\"",
      "pos": [
        6340,
        6428
      ]
    },
    {
      "content": "operationStartTime",
      "pos": [
        6429,
        6447
      ]
    },
    {
      "content": "\"9/5/2014 10:00:13 PM\"",
      "pos": [
        6450,
        6472
      ]
    },
    {
      "content": "operationEndTime",
      "pos": [
        6473,
        6489
      ]
    },
    {
      "content": "\"9/5/2014 10:00:14 PM\"",
      "pos": [
        6492,
        6514
      ]
    },
    {
      "content": "iteration",
      "pos": [
        6515,
        6524
      ]
    },
    {
      "content": "\"0\"",
      "pos": [
        6527,
        6530
      ]
    },
    {
      "content": "iterationSleep",
      "pos": [
        6531,
        6545
      ]
    },
    {
      "content": "\"00:00:00.1000000\"",
      "pos": [
        6548,
        6566
      ]
    },
    {
      "content": "lastExceptionType",
      "pos": [
        6567,
        6584
      ]
    },
    {
      "content": "\"Microsoft.ServiceBus.Messaging.MessagingCommunicationException\"",
      "pos": [
        6587,
        6651
      ]
    },
    {
      "content": "exceptionMessage",
      "pos": [
        6652,
        6668
      ]
    },
    {
      "content": "\"The remote name could not be resolved: 'retry-guidance-tests.servicebus.windows.net'.TrackingId:6a26f99c-dc6d-422e-8565-f89fdd0d4fe3,TimeStamp:9/5/2014 10:00:13 PM\"",
      "pos": [
        6671,
        6836
      ]
    },
    {
      "content": "test",
      "pos": [
        6838,
        6842
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"NuGet Packages | Microsoft Azure\"\n   description=\"Guidance on NuGet Packages for general retry policy work.\"\n   services=\"\"\n   documentationCenter=\"na\"\n   authors=\"dragon119\"\n   manager=\"masimms\"\n   editor=\"\"\n   tags=\"\"/>\n\n<tags\n   ms.service=\"best-practice\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"na\"\n   ms.date=\"04/09/2015\"\n   ms.author=\"masashin\"/>\n\n# NuGet Packages\n\n<p class=\"lead\">As more components begin to communicate, transient failures become\nmore important to smartly handle. The Transient Fault Handling work handled by the\nretry policies NuGet package can help handle retries within a single instance.</p>\n\n> This document was based on a draft as a proof of concept. It is not the actual\n  reviewed guidance.\n\nThe Patterns & Practices `TransientFaultHandling` code is recommended for general retry policy work.\n\n```\nInstall-Package EnterpriseLibrary.WindowsAzure.TransientFaultHandling\n```\n\n## Configuration\n\nSection includes the configuration information for the retry feature:\n\nParameter            | Description\n-------------------- | ----------------------\nMaximumExecutionTime | Maximum execution time for the request, including all potential retry attempts.\nServerTimeOut        | Server timeout interval for the request\nRetryPolicy          | Retry policy. See Policies section below\n\n```csharp\n/// <summary>\n/// An interface required for request option types.\n/// </summary>\npublic interface IRequestOptions\n{\n    IRetryPolicy RetryPolicy { get; set; }\n\n    TimeSpan? ServerTimeout { get; set; }\n\n    TimeSpan? MaximumExecutionTime { get; set; }\n}\n```\n\nProgrammatic:\n\n- Support for setting on the Client.\n- Enable overriding at operations provided by client\n\nConfiguration file:\n\n```xml\n<RetryPolicyConfiguration defaultRetryStrategy=\"Fixed Interval Retry Strategy\">\n    <linearInterval name=\"Fixed Interval Retry Strategy\"\n    retryInterval=\"00:00:01\" maxRetryCount=\"10\" />\n    <exponentialBackoff name=\"Backoff Retry Strategy\" minBackoff=\"00:00:01\"\n        maxBackoff=\"00:00:30\" deltaBackoff=\"00:00:10\" maxRetryCount=\"10\"\n        fastFirst=\"false\"/>\n</RetryPolicyConfiguration>\n```\n\n## Policies\n\n### Exponential\n\nUsed for spacing out repeated attempts of service invocations exponentially to avoid service throttling.\n\n__Approach:__\n\nExponentially increase the backoff interval between subsequent attempts. Add randomization to (+/- 20%) to backoff interval to avoid all clients retrying simultaneously\n\n__Configuration:__\n\nParameter            | Description\n-------------------- | -------------------------------------------------------\nmaxAttempt           | Number of retry attempts.\ndeltaBackoff         | Back-off interval between retries. Multiples of this timespan will be used for subsequent retry attempts.\nMinBackoff           | Added to all retry intervals computed from deltaBackoff.\nFastFirst            | Immediate first retry\nMaxBackoff           | MaxBackoff is used if the computed retry interval is greater than MaxBackoff. This value cannot be changed.\n\n__Implementation Logic:__\n\n```csharp\nif(!ExponentialRetry.FastFirst){\n    Random r = new Random();\n    double increment = (Math.Pow(2, currentRetryCount) - 1) * r.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8), (int)(this.deltaBackoff.TotalMilliseconds * 1.2));\n    retryInterval = (increment < 0) ? ExponentialRetry.MaxBackoff :\n    TimeSpan.FromMilliseconds(Math.Min(ExponentialRetry.MaxBackoff.TotalMilliseconds, ExponentialRetry.MinBackoff.TotalMilliseconds + increment));\n} else {\n    retryInterval = TimeSpan.Zero;\n}\n```\n\n## Linear\n\nUsed for spacing out repeated attempts of service invocations linearly to avoid service throttling.\n\n__Approach:__\n\nPerform a specified number of retries, using a specified fixed time interval between retries. Add randomization to (+/- 20%) to backoff interval to avoid all clients retrying simultaneously.\n\n__Configuration:__\n\nParameter            | Description\n-------------------- | -------------------------------------------------------\nmaxAttempt | Number of retry attempts.\ndeltaBackoff | Back-off interval between retries.\nFastFirst | Immediate first retry\n\n__Implementation Logic:__\n\n```csharp\nif(!ExponentialRetry.FastFirst) {\n    Random r = new Random();\n    retryInterval = TimeSpan.FromMilliseconds(r.Next((int)(\n    this.deltaBackoff.TotalMilliseconds * 0.8), (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));\n} else {\n    retryInterval = TimeSpan.Zero;\n}\n```\n\n## Adaptive\n\nUsed for spacing out repeated attempts of service invocations based on error code / metadata passed by service in response header.\n\n__Approach:__\n\nPerform a specified number of retries, using a backoff interval calculated based on error code / metadata passed by service in response header\n\n\n__Configuration:__\n\nNot configurable\n\n__Implementation Logic:__\n\nBased on error code / metadata passed by service in response header\n\n__Circuit Break:__\n\nBased on [Circuit Breaker](http://msdn.microsoft.com/library/dn589784.aspx)\n\n## Extensibility\n\nPublic interface that can be implemented for providing Custom Retry policy\n\n```csharp\npublic interface IRetryPolicy\n{\n    /// <summary>\n    /// Generates a new retry policy for the current request attempt.\n    /// </summary>\n    IRetryPolicy CreateInstance();\n\n    /// <summary>\n    /// Determines whether the operation should be retried and the interval until the next retry.\n    /// </summary>\n    /// <param name=\"currentRetryCount\">An integer specifying the number of retries for the given operation. A value of zero signifies this is the first error encountered.</param>\n    /// <param name=\"statusCode\">An integer containing the status code for the last operation.</param>\n    /// <param name=\"retryInterval\">A <see cref=\"TimeSpan\"/> indicating the interval to wait until the next retry.</param>\n    /// <returns><c>true</c> if the operation should be retried; otherwise, <c>false</c>.</returns>\n    bool ShouldRetry(int currentRetryCount, int statusCode, out TimeSpan retryInterval);\n}\n```\n\n## Telemetry\n\nLog retries as ETW events using an EventSource. Here are the fields that should be logged for every retry attempt\n\nParameter            | Description\n-------------------- | -------------------------------------------------------\nrequestId | \"\"\npolicyType | \"RetryExponential\"\noperation | \"Get:https://retry-guidance-tests.servicebus.windows.net/TestQueue/?api-version=2014-05\"\noperationStartTime | \"9/5/2014 10:00:13 PM\"\noperationEndTime | \"9/5/2014 10:00:14 PM\"\niteration | \"0\"\niterationSleep | \"00:00:00.1000000\"\nlastExceptionType | \"Microsoft.ServiceBus.Messaging.MessagingCommunicationException\"\nexceptionMessage | \"The remote name could not be resolved: 'retry-guidance-tests.servicebus.windows.net'.TrackingId:6a26f99c-dc6d-422e-8565-f89fdd0d4fe3,TimeStamp:9/5/2014 10:00:13 PM\"\n\ntest\n"
}