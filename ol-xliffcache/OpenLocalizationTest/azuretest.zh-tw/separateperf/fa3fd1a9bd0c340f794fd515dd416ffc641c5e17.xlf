<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Introduction to Service Fabric Health Monitoring</source>
          <target state="new">Introduction to Service Fabric Health Monitoring</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes the Azure Service Fabric Health Monitoring model, including health entities, reporting and evaluation.</source>
          <target state="new">This article describes the Azure Service Fabric Health Monitoring model, including health entities, reporting and evaluation.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Introduction to Service Fabric Health Monitoring</source>
          <target state="new">Introduction to Service Fabric Health Monitoring</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric introduces a health model that provides rich, flexible and extensible health evaluation and reporting.</source>
          <target state="new">Service Fabric introduces a health model that provides rich, flexible and extensible health evaluation and reporting.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This includes near real-time monitoring of the state of the cluster and of the services running in it.</source>
          <target state="new">This includes near real-time monitoring of the state of the cluster and of the services running in it.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You  can easily obtain the health information and take actions to correct potential issues before they cascade and cause massive outages.</source>
          <target state="new">You  can easily obtain the health information and take actions to correct potential issues before they cascade and cause massive outages.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The typical model is that services send reports based on their local view and the information is aggregated to provide an overall cluster level view.</source>
          <target state="new">The typical model is that services send reports based on their local view and the information is aggregated to provide an overall cluster level view.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Service Fabric components use this health model to report their current state.</source>
          <target state="new">Service Fabric components use this health model to report their current state.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>And you can use the same mechanism to report health from your applications.</source>
          <target state="new">And you can use the same mechanism to report health from your applications.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The quality and richness of health reporting specific to your custom conditions will determine how easily you will be able to detect and fix issues for your running application.</source>
          <target state="new">The quality and richness of health reporting specific to your custom conditions will determine how easily you will be able to detect and fix issues for your running application.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> We started the Health subsystem as a need for monitored upgrades.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> We started the Health subsystem as a need for monitored upgrades.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Service Fabric provides monitored upgrades that know how to upgrade a cluster or an application with no down time, minimum to no user intervention and with full cluster and application availability.</source>
          <target state="new">Service Fabric provides monitored upgrades that know how to upgrade a cluster or an application with no down time, minimum to no user intervention and with full cluster and application availability.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To do this, the upgrade checks health based on configured upgrade policies and allows upgrade to proceed only when health respects desired thresholds.</source>
          <target state="new">To do this, the upgrade checks health based on configured upgrade policies and allows upgrade to proceed only when health respects desired thresholds.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Otherwise, the upgrade is either automatically rolled back or paused to give administrators a chance to fix the issues.</source>
          <target state="new">Otherwise, the upgrade is either automatically rolled back or paused to give administrators a chance to fix the issues.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To learn more about application upgrades see <bpt id="p1">[</bpt>this article<ept id="p1">](service-fabric-application-upgrade.md)</ept>.</source>
          <target state="new">To learn more about application upgrades see <bpt id="p1">[</bpt>this article<ept id="p1">](service-fabric-application-upgrade.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Health Store</source>
          <target state="new">Health Store</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Health Store keeps health related information about entities in the cluster for easy retrieval and evaluation.</source>
          <target state="new">The Health Store keeps health related information about entities in the cluster for easy retrieval and evaluation.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is implemented as a Service Fabric persisted stateful service to ensure high availability and scalability.</source>
          <target state="new">It is implemented as a Service Fabric persisted stateful service to ensure high availability and scalability.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is part of the fabric:/System application and is available as soon as the cluster is up and running.</source>
          <target state="new">It is part of the fabric:/System application and is available as soon as the cluster is up and running.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Health entities and hierarchy</source>
          <target state="new">Health entities and hierarchy</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The health entities are organized in a logical hierarchy that captures interactions and dependencies between different entities.</source>
          <target state="new">The health entities are organized in a logical hierarchy that captures interactions and dependencies between different entities.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The entities and the hierarchy are automatically built by the Health Store based on reports received from the Service Fabric components.</source>
          <target state="new">The entities and the hierarchy are automatically built by the Health Store based on reports received from the Service Fabric components.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The health entities mirror the Service Fabric entities (eg.</source>
          <target state="new">The health entities mirror the Service Fabric entities (eg.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>health application entity matches an application instance deployed in the cluster, health node entity matches a Service Fabric cluster node).</source>
          <target state="new">health application entity matches an application instance deployed in the cluster, health node entity matches a Service Fabric cluster node).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The health hierarchy captures the interactions of the system entities and is the basis for advanced health evaluation.</source>
          <target state="new">The health hierarchy captures the interactions of the system entities and is the basis for advanced health evaluation.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can learn about the key Service Fabric concepts at <bpt id="p1">[</bpt>Service Fabric technical overview<ept id="p1">](service-fabric-technical-overview.md)</ept>.</source>
          <target state="new">You can learn about the key Service Fabric concepts at <bpt id="p1">[</bpt>Service Fabric technical overview<ept id="p1">](service-fabric-technical-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more on application, go to <bpt id="p1">[</bpt>Service Fabric application model<ept id="p1">](service-fabric-application-model.md)</ept>.</source>
          <target state="new">For more on application, go to <bpt id="p1">[</bpt>Service Fabric application model<ept id="p1">](service-fabric-application-model.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The health entities and hierarchy allow for effective reporting, debugging and monitoring of the cluster and applications.</source>
          <target state="new">The health entities and hierarchy allow for effective reporting, debugging and monitoring of the cluster and applications.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The health model allows an accurate, <bpt id="p1">**</bpt>granular<ept id="p1">**</ept> representation of the health of the many moving pieces in the cluster.</source>
          <target state="new">The health model allows an accurate, <bpt id="p1">**</bpt>granular<ept id="p1">**</ept> representation of the health of the many moving pieces in the cluster.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Health Entities.</source>
          <target state="new">Health Entities.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The health entities, organized in an hierarchy based on parent-children relationships.</source>
          <target state="new">The health entities, organized in an hierarchy based on parent-children relationships.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The health entities are:</source>
          <target state="new">The health entities are:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cluster<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Cluster<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Represents the health of a Service Fabric cluster.</source>
          <target state="new">Represents the health of a Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Cluster health reports describe conditions that affect the entire cluster and can't be narrowed down to one or more unhealthy children.</source>
          <target state="new">Cluster health reports describe conditions that affect the entire cluster and can't be narrowed down to one or more unhealthy children.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example: split-brain of the cluster due to network partitioning or communication issues.</source>
          <target state="new">Example: split-brain of the cluster due to network partitioning or communication issues.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Node<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Node<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Represents the health of a Service Fabric node.</source>
          <target state="new">Represents the health of a Service Fabric node.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Node health reports describe conditions that affect the node functionality and typically affect all the deployed entities running on it.</source>
          <target state="new">Node health reports describe conditions that affect the node functionality and typically affect all the deployed entities running on it.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example: node is out of disk space (or other machine wide property such as memory, connections, etc.) or node is down.</source>
          <target state="new">Example: node is out of disk space (or other machine wide property such as memory, connections, etc.) or node is down.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The node entity is identified by the node name (string).</source>
          <target state="new">The node entity is identified by the node name (string).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Application<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Represents the health of an application instance running in the cluster.</source>
          <target state="new">Represents the health of an application instance running in the cluster.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Application health reports describe conditions that affect the overall health of the application and can't be narrowed down to individual children (services or deployed applications).</source>
          <target state="new">Application health reports describe conditions that affect the overall health of the application and can't be narrowed down to individual children (services or deployed applications).</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example: the end to end interaction between different services in the application.</source>
          <target state="new">Example: the end to end interaction between different services in the application.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The application entity is identified by the application name (Uri).</source>
          <target state="new">The application entity is identified by the application name (Uri).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Service<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Represents the health of a service running in the cluster.</source>
          <target state="new">Represents the health of a service running in the cluster.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Service health reports describe conditions that affect the overall health of the service, and can't be narrowed down to a partition or a replica.</source>
          <target state="new">Service health reports describe conditions that affect the overall health of the service, and can't be narrowed down to a partition or a replica.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example: a service configuration (such as port or external file share) that is causing issues for all partitions.</source>
          <target state="new">Example: a service configuration (such as port or external file share) that is causing issues for all partitions.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The service entity is identified by the service name (Uri).</source>
          <target state="new">The service entity is identified by the service name (Uri).</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Partition<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Partition<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Represents the health of a service partition.</source>
          <target state="new">Represents the health of a service partition.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Partition health reports describe conditions that affect the entire replica set.</source>
          <target state="new">Partition health reports describe conditions that affect the entire replica set.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example: the number of replicas is below target count or partition is in quorum loss.</source>
          <target state="new">Example: the number of replicas is below target count or partition is in quorum loss.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The partition entity is identified by the partition id (Guid).</source>
          <target state="new">The partition entity is identified by the partition id (Guid).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Replica<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Replica<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Represents the health of a stateful service replica or a stateless service instance.</source>
          <target state="new">Represents the health of a stateful service replica or a stateless service instance.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is the smallest unit watchdogs and system components can report on for an application.</source>
          <target state="new">This is the smallest unit watchdogs and system components can report on for an application.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Example: For stateful services, primary replica can report if it can't replicate operations to secondaries or replication is not proceeding at the expected pace.</source>
          <target state="new">Example: For stateful services, primary replica can report if it can't replicate operations to secondaries or replication is not proceeding at the expected pace.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A stateless instance can report if it is running out of resources or has connectivity issues.</source>
          <target state="new">A stateless instance can report if it is running out of resources or has connectivity issues.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The replica entity is identified by the partition id (Guid) and the replica or instance id (long).</source>
          <target state="new">The replica entity is identified by the partition id (Guid) and the replica or instance id (long).</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DeployedApplication<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>DeployedApplication<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Represents the health of an <bpt id="p1">*</bpt>application running on a node<ept id="p1">*</ept>.</source>
          <target state="new">Represents the health of an <bpt id="p1">*</bpt>application running on a node<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Deployed application health reports describe conditions specific to the application on the node that can't be narrowed down to service packages deployed on the same node.</source>
          <target state="new">Deployed application health reports describe conditions specific to the application on the node that can't be narrowed down to service packages deployed on the same node.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example: the application package can't be downloaded on that node or there is an issue setting up application security principals on the node.</source>
          <target state="new">Example: the application package can't be downloaded on that node or there is an issue setting up application security principals on the node.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The deployed application is identified by application name (Uri) and node name (string).</source>
          <target state="new">The deployed application is identified by application name (Uri) and node name (string).</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DeployedServicePackage<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>DeployedServicePackage<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Represents the health of a service package of an application running in a node in the cluster.</source>
          <target state="new">Represents the health of a service package of an application running in a node in the cluster.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It describes conditions specific to a service package that do not affect the other service packages on the same node for the same application.</source>
          <target state="new">It describes conditions specific to a service package that do not affect the other service packages on the same node for the same application.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example: a code package in the service package cannot be started or configuration package cannot be read.</source>
          <target state="new">Example: a code package in the service package cannot be started or configuration package cannot be read.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The deployed service package is identified by application name (Uri), node name (string) and service manifest name (string).</source>
          <target state="new">The deployed service package is identified by application name (Uri), node name (string) and service manifest name (string).</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The granularity of the health model makes it easy to detect and correct issues.</source>
          <target state="new">The granularity of the health model makes it easy to detect and correct issues.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, if a service is not responding, it is feasible to report that the application instance is unhealthy; however, it is not ideal because the issue might not be affecting all services within that application.</source>
          <target state="new">For example, if a service is not responding, it is feasible to report that the application instance is unhealthy; however, it is not ideal because the issue might not be affecting all services within that application.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The report should be applied on the unhealthy service, or, if more information points to a specific child partition, on that partition.</source>
          <target state="new">The report should be applied on the unhealthy service, or, if more information points to a specific child partition, on that partition.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The data will automatically surface through the hierarchy: an unhealthy partition will be made visible at service and application levels.</source>
          <target state="new">The data will automatically surface through the hierarchy: an unhealthy partition will be made visible at service and application levels.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This will help pinpoint and resolve the root cause of the issues faster.</source>
          <target state="new">This will help pinpoint and resolve the root cause of the issues faster.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The health hierarchy is composed of parent-children relationships.</source>
          <target state="new">The health hierarchy is composed of parent-children relationships.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Cluster is composed of nodes and applications; applications have services and deployed applications; deployed applications have deployed service packages.</source>
          <target state="new">Cluster is composed of nodes and applications; applications have services and deployed applications; deployed applications have deployed service packages.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Services have partitions, and each partition has one or more replicas.</source>
          <target state="new">Services have partitions, and each partition has one or more replicas.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>There is a special relationship between nodes and deployed entities.</source>
          <target state="new">There is a special relationship between nodes and deployed entities.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If a node is unhealthy as reported by its authority System component (Failover Manager Service), it will affect the deployed applications, service packages and replicas deployed on it.</source>
          <target state="new">If a node is unhealthy as reported by its authority System component (Failover Manager Service), it will affect the deployed applications, service packages and replicas deployed on it.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The health hierarchy represents the latest state of the system based on the latest health reports, which is almost real-time information.</source>
          <target state="new">The health hierarchy represents the latest state of the system based on the latest health reports, which is almost real-time information.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Internal and external watchdogs can report on the same entities based on application specific logic or custom monitored conditions.</source>
          <target state="new">Internal and external watchdogs can report on the same entities based on application specific logic or custom monitored conditions.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The user reports co-exist with the system reports.</source>
          <target state="new">The user reports co-exist with the system reports.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Investing time on planning how to report and respond to health while designing the service makes large cloud services easier to debug, monitor, and subsequently operate.</source>
          <target state="new">Investing time on planning how to report and respond to health while designing the service makes large cloud services easier to debug, monitor, and subsequently operate.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Health states</source>
          <target state="new">Health states</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Service Fabric uses three health states to describe whether an entity is healthy or not: Ok, Warning and Error.</source>
          <target state="new">Service Fabric uses three health states to describe whether an entity is healthy or not: Ok, Warning and Error.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Any report sent to the Health Store must specify one of these states.</source>
          <target state="new">Any report sent to the Health Store must specify one of these states.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The health evaluation result is one of these states.</source>
          <target state="new">The health evaluation result is one of these states.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The possible health states are:</source>
          <target state="new">The possible health states are:</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Ok: The entity is healthy.</source>
          <target state="new">Ok: The entity is healthy.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>There are no known issues reported on it or its children (when applicable).</source>
          <target state="new">There are no known issues reported on it or its children (when applicable).</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Warning: The entity experiences some issues but it is not yet unhealthy (i.e., unexpected delay that it is not causing any functional issue).</source>
          <target state="new">Warning: The entity experiences some issues but it is not yet unhealthy (i.e., unexpected delay that it is not causing any functional issue).</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In some cases, the warning condition may fix itself without any special intervention, and it is useful to provide visibility into what is going on.</source>
          <target state="new">In some cases, the warning condition may fix itself without any special intervention, and it is useful to provide visibility into what is going on.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In other cases, the Warning condition may degrade into a severe problem without user intervention.</source>
          <target state="new">In other cases, the Warning condition may degrade into a severe problem without user intervention.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Error: The entity is unhealthy.</source>
          <target state="new">Error: The entity is unhealthy.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Action should be taken to fix the state of the entity, as it can't function properly.</source>
          <target state="new">Action should be taken to fix the state of the entity, as it can't function properly.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Unknown: The entity doesn't exist in the health store.</source>
          <target state="new">Unknown: The entity doesn't exist in the health store.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This result can be obtained from distributed queries like get the Service Fabric nodes or applications.</source>
          <target state="new">This result can be obtained from distributed queries like get the Service Fabric nodes or applications.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>These queries merge results from multiple system components.</source>
          <target state="new">These queries merge results from multiple system components.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If another system component has an entity that has not reached the health store yet or that has been cleaned up from health store, the merged query will populate health result with 'Unknown' health state.</source>
          <target state="new">If another system component has an entity that has not reached the health store yet or that has been cleaned up from health store, the merged query will populate health result with 'Unknown' health state.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Health policies</source>
          <target state="new">Health policies</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The Health Store applies health policies to determine whether an entity is healthy based on its reports and its children.</source>
          <target state="new">The Health Store applies health policies to determine whether an entity is healthy based on its reports and its children.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The health policies can be specified in the cluster manifest (for cluster and node health evaluation) or the application manifest (for application evaluation and any of its children).</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The health policies can be specified in the cluster manifest (for cluster and node health evaluation) or the application manifest (for application evaluation and any of its children).</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The health evaluation requests can also pass in custom health evaluation policies, which will only be used for that evaluation.</source>
          <target state="new">The health evaluation requests can also pass in custom health evaluation policies, which will only be used for that evaluation.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>By default, Service Fabric applies strict rules (everything must be healthy) for the parent-children hierarchical relationship; as long as one of the children has one unhealthy event, the parent is considered unhealthy.</source>
          <target state="new">By default, Service Fabric applies strict rules (everything must be healthy) for the parent-children hierarchical relationship; as long as one of the children has one unhealthy event, the parent is considered unhealthy.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Cluster Health Policy</source>
          <target state="new">Cluster Health Policy</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The cluster health policy is used to evaluate cluster health state and node health states.</source>
          <target state="new">The cluster health policy is used to evaluate cluster health state and node health states.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It can be defined in the cluster manifest.</source>
          <target state="new">It can be defined in the cluster manifest.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If not present, it defaults to the default policy (0 tolerated failures).</source>
          <target state="new">If not present, it defaults to the default policy (0 tolerated failures).</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Contains:</source>
          <target state="new">Contains:</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConsiderWarningAsError<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>ConsiderWarningAsError<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Specifies whether to treat Warning health reports as errors during health evaluation.</source>
          <target state="new">Specifies whether to treat Warning health reports as errors during health evaluation.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Default: False.</source>
          <target state="new">Default: False.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyApplications<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyApplications<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in Error.</source>
          <target state="new">Maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in Error.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyNodes<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyNodes<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in Error.</source>
          <target state="new">Maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in Error.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In large clusters, there will always be nodes down or out for repairs, so this percentage should be configured to tolerate that.</source>
          <target state="new">In large clusters, there will always be nodes down or out for repairs, so this percentage should be configured to tolerate that.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following is an excerpt from a cluster manifest:</source>
          <target state="new">The following is an excerpt from a cluster manifest:</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Application Health Policy</source>
          <target state="new">Application Health Policy</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The application health policy describes how evaluation of events and children states aggregation is done for application and its children.</source>
          <target state="new">The application health policy describes how evaluation of events and children states aggregation is done for application and its children.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It can be defined in the application manifest, ApplicationManifest.xml in the application package.</source>
          <target state="new">It can be defined in the application manifest, ApplicationManifest.xml in the application package.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If not specified, Service Fabric assumes the entity to be unhealthy if is has a health report or a child at Warning or Error health state.</source>
          <target state="new">If not specified, Service Fabric assumes the entity to be unhealthy if is has a health report or a child at Warning or Error health state.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The configurable policies are:</source>
          <target state="new">The configurable policies are:</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ConsiderWarningAsError<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>ConsiderWarningAsError<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies whether to treat Warning health reports as errors during health evaluation.</source>
          <target state="new">Specifies whether to treat Warning health reports as errors during health evaluation.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Default: False.</source>
          <target state="new">Default: False.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyDeployedApplications<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyDeployedApplications<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in Error.</source>
          <target state="new">Maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in Error.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This is calculated by dividing the number of unhealthy deployed applications over the number of nodes that the applications is currently deployed on in the cluster.</source>
          <target state="new">This is calculated by dividing the number of unhealthy deployed applications over the number of nodes that the applications is currently deployed on in the cluster.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The computation rounds up to tolerate one failure on small number of nodes.</source>
          <target state="new">The computation rounds up to tolerate one failure on small number of nodes.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Default: 0%.</source>
          <target state="new">Default: 0%.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DefaultServiceTypeHealthPolicy<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>DefaultServiceTypeHealthPolicy<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies the default service type health policy, which will replace the default health policy for all service types in the application.</source>
          <target state="new">Specifies the default service type health policy, which will replace the default health policy for all service types in the application.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceTypeHealthPolicyMap<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceTypeHealthPolicyMap<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Map with service health policies per service type, which replace the default service type health policy for the specified service types.</source>
          <target state="new">Map with service health policies per service type, which replace the default service type health policy for the specified service types.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For example, in an application that contains a stateless Gateway service type and a stateful Engine service type, the health policy for the stateless and stateful service can be configured differently.</source>
          <target state="new">For example, in an application that contains a stateless Gateway service type and a stateful Engine service type, the health policy for the stateless and stateful service can be configured differently.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Specifying policy per service types allows a more granular control of the health of the service.</source>
          <target state="new">Specifying policy per service types allows a more granular control of the health of the service.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Service Type Health Policy</source>
          <target state="new">Service Type Health Policy</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The service type health policy specifies how to evaluate and aggregate children of service.</source>
          <target state="new">The service type health policy specifies how to evaluate and aggregate children of service.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Contains:</source>
          <target state="new">Contains:</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyPartitionsPerService<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyPartitionsPerService<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of unhealthy partitions before a service is considered unhealthy.</source>
          <target state="new">Maximum tolerated percentage of unhealthy partitions before a service is considered unhealthy.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Default: 0%.</source>
          <target state="new">Default: 0%.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyReplicasPerPartition<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyReplicasPerPartition<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of unhealthy replicas before a partition is considered unhealthy.</source>
          <target state="new">Maximum tolerated percentage of unhealthy replicas before a partition is considered unhealthy.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Default: 0%.</source>
          <target state="new">Default: 0%.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MaxPercentUnhealthyServices<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>MaxPercentUnhealthyServices<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Maximum tolerated percentage of unhealthy services before the application is considered unhealthy.</source>
          <target state="new">Maximum tolerated percentage of unhealthy services before the application is considered unhealthy.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Default: 0%</source>
          <target state="new">Default: 0%</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following is an excerpt from an application manifest:</source>
          <target state="new">The following is an excerpt from an application manifest:</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Health evaluation</source>
          <target state="new">Health evaluation</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Users or automated services can evaluate health for any entity at any point in time.</source>
          <target state="new">Users or automated services can evaluate health for any entity at any point in time.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To evaluate an entity health, the Health Store aggregates all health reports on the entity and evaluates all its children (when applicable).</source>
          <target state="new">To evaluate an entity health, the Health Store aggregates all health reports on the entity and evaluates all its children (when applicable).</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The health aggregation algorithm uses health policies that specify how to evaluate health reports as well as how to aggregate children health states (when applicable).</source>
          <target state="new">The health aggregation algorithm uses health policies that specify how to evaluate health reports as well as how to aggregate children health states (when applicable).</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Health reports aggregation</source>
          <target state="new">Health reports aggregation</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>One entity can have multiple health reports sent by different reporters (system components or watchdogs) on different properties.</source>
          <target state="new">One entity can have multiple health reports sent by different reporters (system components or watchdogs) on different properties.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The aggregation uses the associated health policies, in particular the ConsiderWarningAsError member of application or cluster health policy, which specifies how to evaluate warnings.</source>
          <target state="new">The aggregation uses the associated health policies, in particular the ConsiderWarningAsError member of application or cluster health policy, which specifies how to evaluate warnings.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The aggregated health state is triggered by the <bpt id="p1">**</bpt>worst<ept id="p1">**</ept> health reports on the entity.</source>
          <target state="new">The aggregated health state is triggered by the <bpt id="p1">**</bpt>worst<ept id="p1">**</ept> health reports on the entity.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If there is at least one Error health report, the aggregated health state is Error.</source>
          <target state="new">If there is at least one Error health report, the aggregated health state is Error.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Health Report Aggregation with Error Report.</source>
          <target state="new">Health Report Aggregation with Error Report.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Error health report triggers the health entity to be in Error state.</source>
          <target state="new">Error health report triggers the health entity to be in Error state.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If there are no Error reports, and one or more Warning, the aggregated health state is either Warning or Error, depending on the ConsiderWarningAsError policy flag.</source>
          <target state="new">If there are no Error reports, and one or more Warning, the aggregated health state is either Warning or Error, depending on the ConsiderWarningAsError policy flag.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Health Report Aggregation with Warning Report and ConsiderWarningAsError false.</source>
          <target state="new">Health Report Aggregation with Warning Report and ConsiderWarningAsError false.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Health Report Aggregation with Warning Report and ConsiderWarningAsError false (default).</source>
          <target state="new">Health Report Aggregation with Warning Report and ConsiderWarningAsError false (default).</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Children health aggregation</source>
          <target state="new">Children health aggregation</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The aggregated health state of an entity reflects the children health states (when applicable).</source>
          <target state="new">The aggregated health state of an entity reflects the children health states (when applicable).</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The algorithm for aggregating children health states uses the health policies applicable based on the entity type.</source>
          <target state="new">The algorithm for aggregating children health states uses the health policies applicable based on the entity type.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Children entities health aggregation.</source>
          <target state="new">Children entities health aggregation.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Children aggregation based on health policies.</source>
          <target state="new">Children aggregation based on health policies.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>After evaluating all children, the Health Store aggregates the health states based on the configured max percent unhealthy taken from the policy based on the entity and child type.</source>
          <target state="new">After evaluating all children, the Health Store aggregates the health states based on the configured max percent unhealthy taken from the policy based on the entity and child type.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If all children have Ok states, the children aggregated health state is Ok.</source>
          <target state="new">If all children have Ok states, the children aggregated health state is Ok.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If children have Ok and Warning states, the children aggregated health state is Warning.</source>
          <target state="new">If children have Ok and Warning states, the children aggregated health state is Warning.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If there are children with Error states that do not respect max allowed percentage of unhealthy children, the aggregated health state is error.</source>
          <target state="new">If there are children with Error states that do not respect max allowed percentage of unhealthy children, the aggregated health state is error.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If the children with Error states respect the max allowed percentage of unhealthy children, the aggregated health state is Warning.</source>
          <target state="new">If the children with Error states respect the max allowed percentage of unhealthy children, the aggregated health state is Warning.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Health reporting</source>
          <target state="new">Health reporting</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>System components and internal/external watchdogs can report against the Service Fabric entities.</source>
          <target state="new">System components and internal/external watchdogs can report against the Service Fabric entities.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>reporters<ept id="p1">*</ept> make a <bpt id="p2">**</bpt>local<ept id="p2">**</ept> determination of the health of the monitored entity based on some conditions they are monitoring.</source>
          <target state="new">The <bpt id="p1">*</bpt>reporters<ept id="p1">*</ept> make a <bpt id="p2">**</bpt>local<ept id="p2">**</ept> determination of the health of the monitored entity based on some conditions they are monitoring.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>They don't need to look at any global state and aggregate data.</source>
          <target state="new">They don't need to look at any global state and aggregate data.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This is not desired, as it would make the reporters complex organisms that need to look at many things in order to infer what information to send.</source>
          <target state="new">This is not desired, as it would make the reporters complex organisms that need to look at many things in order to infer what information to send.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>To send health data to the health store, the reporters need to identify the affected entity and create a health report.</source>
          <target state="new">To send health data to the health store, the reporters need to identify the affected entity and create a health report.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The report can then be sent through API with FabricClient.HealthManager.ReportHealth, through Powershell or through REST.</source>
          <target state="new">The report can then be sent through API with FabricClient.HealthManager.ReportHealth, through Powershell or through REST.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Health reports</source>
          <target state="new">Health reports</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The health reports for each of the entities in the cluster contain the following information:</source>
          <target state="new">The health reports for each of the entities in the cluster contain the following information:</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>SourceId.</source>
          <target state="new">SourceId.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A string that uniquely identifies the reporter of the health event.</source>
          <target state="new">A string that uniquely identifies the reporter of the health event.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Entity identifier.</source>
          <target state="new">Entity identifier.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Identifies the entity on which the report is applied on.</source>
          <target state="new">Identifies the entity on which the report is applied on.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>It differs based on the <bpt id="p1">[</bpt>entity type<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept>:</source>
          <target state="new">It differs based on the <bpt id="p1">[</bpt>entity type<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept>:</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Cluster: none</source>
          <target state="new">Cluster: none</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Node: node name  (string).</source>
          <target state="new">Node: node name  (string).</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Application:  application name (URI).</source>
          <target state="new">Application:  application name (URI).</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Represents the name of the application instance deployed in the cluster.</source>
          <target state="new">Represents the name of the application instance deployed in the cluster.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Service: service name (URI).</source>
          <target state="new">Service: service name (URI).</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Represents the name of the service instance deployed in the cluster.</source>
          <target state="new">Represents the name of the service instance deployed in the cluster.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Partition: partition id (GUID).</source>
          <target state="new">Partition: partition id (GUID).</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Represents the partition unique identifier.</source>
          <target state="new">Represents the partition unique identifier.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Replica: the sateful service replica id or the stateless service instance id (Int64).</source>
          <target state="new">Replica: the sateful service replica id or the stateless service instance id (Int64).</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>DeployedApplication: application name (URI) and node name (string).</source>
          <target state="new">DeployedApplication: application name (URI) and node name (string).</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>DeployedServicePackage: application name (URI), node name (string) and service manifest name (string).</source>
          <target state="new">DeployedServicePackage: application name (URI), node name (string) and service manifest name (string).</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Property.</source>
          <target state="new">Property.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>string<ept id="p1">*</ept> (not a fixed enumeration) that allows the reporter to categorize the health event for a specific property of the entity.</source>
          <target state="new">A <bpt id="p1">*</bpt>string<ept id="p1">*</ept> (not a fixed enumeration) that allows the reporter to categorize the health event for a specific property of the entity.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For example, reporter A can report health on Node01 "storage" property and reporter B can report health on Node01 "connectivity" property.</source>
          <target state="new">For example, reporter A can report health on Node01 "storage" property and reporter B can report health on Node01 "connectivity" property.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Both these reports are treated as separate health events in the health store for the Node01 entity.</source>
          <target state="new">Both these reports are treated as separate health events in the health store for the Node01 entity.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Description.</source>
          <target state="new">Description.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A string that allows the reporter to provide detail information about the health event.</source>
          <target state="new">A string that allows the reporter to provide detail information about the health event.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>SourceId, Property and HealthState should fully describe the report.</source>
          <target state="new">SourceId, Property and HealthState should fully describe the report.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The description adds human readable information about the report to make it easier for administrators and users to understand.</source>
          <target state="new">The description adds human readable information about the report to make it easier for administrators and users to understand.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>HealthState.</source>
          <target state="new">HealthState.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>enumeration<ept id="p1">](service-fabric-health-introduction.md#health-states)</ept> that describes the health state of the report.</source>
          <target state="new">An <bpt id="p1">[</bpt>enumeration<ept id="p1">](service-fabric-health-introduction.md#health-states)</ept> that describes the health state of the report.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The accepted values are OK, Warning, and Error.</source>
          <target state="new">The accepted values are OK, Warning, and Error.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>TimeToLive.</source>
          <target state="new">TimeToLive.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A timespan that indicates how long the health report is valid.</source>
          <target state="new">A timespan that indicates how long the health report is valid.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Coupled with RemoveWhenExpired, it lets the HealthStore know how to evaluate expired events.</source>
          <target state="new">Coupled with RemoveWhenExpired, it lets the HealthStore know how to evaluate expired events.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>By default, the value is infinite and the report is valid forever.</source>
          <target state="new">By default, the value is infinite and the report is valid forever.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>RemoveWhenExpired.</source>
          <target state="new">RemoveWhenExpired.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A boolean.</source>
          <target state="new">A boolean.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If set to true, the expired health report is automatically removed from health store and it doesn't impact entity health evaluation.</source>
          <target state="new">If set to true, the expired health report is automatically removed from health store and it doesn't impact entity health evaluation.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>This is used when the report is valid for a period of time only and the reporter doesn't need to explicitly clear it out.</source>
          <target state="new">This is used when the report is valid for a period of time only and the reporter doesn't need to explicitly clear it out.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>It's also used to delete reports from health store.</source>
          <target state="new">It's also used to delete reports from health store.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="new">Eg.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>a watchdog is changed and stops sending reports with previous source and property.</source>
          <target state="new">a watchdog is changed and stops sending reports with previous source and property.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>So it can send a report with small TTL and RemoveWhenExpired to clear up any previous state from Health Store.</source>
          <target state="new">So it can send a report with small TTL and RemoveWhenExpired to clear up any previous state from Health Store.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If set to false, the expired report is treated as an error on health evaluation.</source>
          <target state="new">If set to false, the expired report is treated as an error on health evaluation.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>It signals to the health store that the source should report periodically on this property; if it doesn't, then there must be something wrong with the watchdog.</source>
          <target state="new">It signals to the health store that the source should report periodically on this property; if it doesn't, then there must be something wrong with the watchdog.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The watchdog health is captured by considering the event as error.</source>
          <target state="new">The watchdog health is captured by considering the event as error.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>SequenceNumber.</source>
          <target state="new">SequenceNumber.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>A positive integer that needs to be ever increasing, as it represents the order of the reports.</source>
          <target state="new">A positive integer that needs to be ever increasing, as it represents the order of the reports.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>It is used by Health Store to detect stale reports, received late because of network delays or other issues.</source>
          <target state="new">It is used by Health Store to detect stale reports, received late because of network delays or other issues.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Reports are rejected if the sequence number is less or equal the latest applied one for the same entity, source and property.</source>
          <target state="new">Reports are rejected if the sequence number is less or equal the latest applied one for the same entity, source and property.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The sequence number is auto-generated if not specified.</source>
          <target state="new">The sequence number is auto-generated if not specified.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>It is only necessary to put in the sequence number when reporting on state transitions: the source needs to remember what reports it sent and persist the information for recovery on failover.</source>
          <target state="new">It is only necessary to put in the sequence number when reporting on state transitions: the source needs to remember what reports it sent and persist the information for recovery on failover.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The SourceId, entity identifier, Property and HealthState are required for every health report.</source>
          <target state="new">The SourceId, entity identifier, Property and HealthState are required for every health report.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The SourceId string is not allowed to start with prefix "System.", which is reserved for System reports.</source>
          <target state="new">The SourceId string is not allowed to start with prefix "System.", which is reserved for System reports.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>For the same entity, there is only one report for the same source and property; if multiple reports are generated for the same source and property, they override each other, either on health client side (if they are batched) or on the health store side.</source>
          <target state="new">For the same entity, there is only one report for the same source and property; if multiple reports are generated for the same source and property, they override each other, either on health client side (if they are batched) or on the health store side.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The replacement is done based on sequence number: newer reports (with higher sequence number) replace older reports.</source>
          <target state="new">The replacement is done based on sequence number: newer reports (with higher sequence number) replace older reports.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Health events</source>
          <target state="new">Health events</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Internally, the Health Store keeps health events, which contain all the information from the reports plus additional metadata, such as time the report was given to the health client and time it was modified on the server side.</source>
          <target state="new">Internally, the Health Store keeps health events, which contain all the information from the reports plus additional metadata, such as time the report was given to the health client and time it was modified on the server side.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The health events are returned by the <bpt id="p1">[</bpt>health queries<ept id="p1">](service-fabric-view-entities-aggregated-health.md#health-queries)</ept>.</source>
          <target state="new">The health events are returned by the <bpt id="p1">[</bpt>health queries<ept id="p1">](service-fabric-view-entities-aggregated-health.md#health-queries)</ept>.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The added metadata contains:</source>
          <target state="new">The added metadata contains:</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>SourceUtcTimestamp: the time the report was given to the health client (Utc)</source>
          <target state="new">SourceUtcTimestamp: the time the report was given to the health client (Utc)</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>LastModifiedUtcTimestamp: the time the report was last modified on the server side (Utc)</source>
          <target state="new">LastModifiedUtcTimestamp: the time the report was last modified on the server side (Utc)</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>IsExpired: flag to indicate whether the report was expired at the time the query was executed by the Health Store.</source>
          <target state="new">IsExpired: flag to indicate whether the report was expired at the time the query was executed by the Health Store.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>An event can be expired only if RemoveWhenExpired is false; otherwise, the event is not returned by query, it is removed from store.</source>
          <target state="new">An event can be expired only if RemoveWhenExpired is false; otherwise, the event is not returned by query, it is removed from store.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>LastOkTransitionAt, LastWarningTransitionAt, LastErrorTransitionAt: last time for Ok/Warning/Error transitions.</source>
          <target state="new">LastOkTransitionAt, LastWarningTransitionAt, LastErrorTransitionAt: last time for Ok/Warning/Error transitions.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>These fields give the history of the transition of the health states for the event.</source>
          <target state="new">These fields give the history of the transition of the health states for the event.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The state transition fields can be used for smarter alerting or "historical" health event information.</source>
          <target state="new">The state transition fields can be used for smarter alerting or "historical" health event information.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>They enable scenarios like:</source>
          <target state="new">They enable scenarios like:</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Alert when a property has been at Warning/Error for more than X minutes.</source>
          <target state="new">Alert when a property has been at Warning/Error for more than X minutes.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This avoids alerting on temporary conditions.</source>
          <target state="new">This avoids alerting on temporary conditions.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Eg: alert if the health state has been Warning for more than 5 minutes can be translated into (HealthState == Warning and Now - LastWarningTransitionTime</source>
          <target state="new">Eg: alert if the health state has been Warning for more than 5 minutes can be translated into (HealthState == Warning and Now - LastWarningTransitionTime</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>5 minutes).</source>
          <target state="new">5 minutes).</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Alert only on conditions that changed in the last X minutes.</source>
          <target state="new">Alert only on conditions that changed in the last X minutes.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>If a report is at Error since before that, it can be ignored (because it was already signaled previously).</source>
          <target state="new">If a report is at Error since before that, it can be ignored (because it was already signaled previously).</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>If a property is toggling between Warning and Error, determine how long it has been unhealthy (i.e. not Ok).</source>
          <target state="new">If a property is toggling between Warning and Error, determine how long it has been unhealthy (i.e. not Ok).</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Eg: alert if the property wasn't healthy for more than 5 minutes can be translated into: (HealthState != Ok and Now - LastOkTransitionTime &gt; 5 minutes).</source>
          <target state="new">Eg: alert if the property wasn't healthy for more than 5 minutes can be translated into: (HealthState != Ok and Now - LastOkTransitionTime &gt; 5 minutes).</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Example: report and evaluate application health</source>
          <target state="new">Example: report and evaluate application health</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The following example sends a health report through Powershell on the application named fabric:/WordCount from the source MyWatchdog.</source>
          <target state="new">The following example sends a health report through Powershell on the application named fabric:/WordCount from the source MyWatchdog.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The health report contains information about the health property Availability in an Error health state, with infinite TTL.</source>
          <target state="new">The health report contains information about the health property Availability in an Error health state, with infinite TTL.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Then it queries the application health, which will return aggregated health state error and the reported health event as part of the list of health events.</source>
          <target state="new">Then it queries the application health, which will return aggregated health state error and the reported health event as part of the list of health events.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Health model usage</source>
          <target state="new">Health model usage</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The health model allows the cloud services and the underlying Service Fabric platform to scale, because the monitoring and health determination is distributed among the different monitors within the cluster.</source>
          <target state="new">The health model allows the cloud services and the underlying Service Fabric platform to scale, because the monitoring and health determination is distributed among the different monitors within the cluster.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Other systems have a single centralized service at the cluster level parsing all the <bpt id="p1">*</bpt>potentially<ept id="p1">*</ept> useful information emitted by services.</source>
          <target state="new">Other systems have a single centralized service at the cluster level parsing all the <bpt id="p1">*</bpt>potentially<ept id="p1">*</ept> useful information emitted by services.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>This hinders their scalability and it doesn't allow them to collect very specific information to help identify issues and potential issues as close to the root cause as possible.</source>
          <target state="new">This hinders their scalability and it doesn't allow them to collect very specific information to help identify issues and potential issues as close to the root cause as possible.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The health model is heavily used for monitoring and diagnosis, for evaluating the cluster and application health, and for monitored upgrades.</source>
          <target state="new">The health model is heavily used for monitoring and diagnosis, for evaluating the cluster and application health, and for monitored upgrades.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Other services use the health data to perform automatic repairs, to build cluster health history and to issue alerts on certain conditions.</source>
          <target state="new">Other services use the health data to perform automatic repairs, to build cluster health history and to issue alerts on certain conditions.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>How to view Service Fabric health reports</source>
          <target state="new">How to view Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Using System health reports for troubleshooting</source>
          <target state="new">Using System health reports for troubleshooting</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Adding custom Service Fabric health reports</source>
          <target state="new">Adding custom Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>How to Monitor and Diagnose Services locally</source>
          <target state="new">How to Monitor and Diagnose Services locally</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade</source>
          <target state="new">Service Fabric Application Upgrade</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa3fd1a9bd0c340f794fd515dd416ffc641c5e17</xliffext:olfilehash>
  </header>
</xliff>