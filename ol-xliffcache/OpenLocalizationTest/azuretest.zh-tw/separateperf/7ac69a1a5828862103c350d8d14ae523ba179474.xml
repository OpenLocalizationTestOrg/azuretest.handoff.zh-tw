{
  "nodes": [
    {
      "content": "Create, monitor, and manage Azure data factories by using Data Factory SDK",
      "pos": [
        28,
        102
      ]
    },
    {
      "content": "Learn how to programmatically create, monitor, and manage Azure data factories by using Data Factory SDK.",
      "pos": [
        122,
        227
      ]
    },
    {
      "content": "Create, monitor, and manage Azure data factories using Data Factory .NET SDK",
      "pos": [
        555,
        631
      ]
    },
    {
      "content": "Overview",
      "pos": [
        635,
        643
      ]
    },
    {
      "content": "You can create, monitor, and manage Azure data factories programmatically using Data Factory .NET SDK.",
      "pos": [
        644,
        746
      ]
    },
    {
      "content": "This article contains a walkthrough that you can follow to create a sample .NET console application that creates and monitors a data factory.",
      "pos": [
        747,
        888
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Data Factory Class Library Reference<ept id=\"p1\">][adf-class-library-reference]</ept> for details about Data Factory .NET SDK.",
      "pos": [
        889,
        1001
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1009,
        1022
      ]
    },
    {
      "content": "Visual Studio 2012 or 2013",
      "pos": [
        1026,
        1052
      ]
    },
    {
      "pos": [
        1055,
        1116
      ],
      "content": "Download and install <bpt id=\"p1\">[</bpt>Azure .NET SDK<ept id=\"p1\">][azure-developer-center]</ept>"
    },
    {
      "content": "Download and install NuGet packages for Azure Data Factory.",
      "pos": [
        1119,
        1178
      ]
    },
    {
      "content": "Instructions are in the walkthrough.",
      "pos": [
        1179,
        1215
      ]
    },
    {
      "content": "Walkthrough",
      "pos": [
        1220,
        1231
      ]
    },
    {
      "pos": [
        1235,
        1937
      ],
      "content": "Using Visual Studio 2012 or 2013, create a C# .NET console application.\n <ol type=\"a\">\n     <li>Launch <b>Visual Studio 2012</b> or <b>Visual Studio 2013</b>.</li>\n     <li>Click <b>File</b>, point to <b>New</b>, and click <b>Project</b>.</li> \n     <li>Expand <b>Templates</b>, and select <b>Visual C#</b>. In this walkthrough, you use C#, but you can use any .NET language.</li> \n     <li>Select <b>Console Application</b> from the list of project types on the right.</li>\n     <li>Enter <b>DataFactoryAPITestApp</b> for the <b>Name</b>.</li> \n     <li>Select <b>C:\\ADFGetStarted</b> for the <b>Location</b>.</li>\n     <li>Click <b>OK</b> to create the project.</li>\n </ol>",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "Using Visual Studio 2012 or 2013, create a C# .NET console application.",
          "pos": [
            0,
            71
          ]
        },
        {
          "content": "Launch <ph id=\"ph1\">&lt;b&gt;</ph>Visual Studio 2012<ph id=\"ph2\">&lt;/b&gt;</ph> or <ph id=\"ph3\">&lt;b&gt;</ph>Visual Studio 2013<ph id=\"ph4\">&lt;/b&gt;</ph>.",
          "pos": [
            96,
            158
          ]
        },
        {
          "content": "Click <ph id=\"ph1\">&lt;b&gt;</ph>File<ph id=\"ph2\">&lt;/b&gt;</ph>, point to <ph id=\"ph3\">&lt;b&gt;</ph>New<ph id=\"ph4\">&lt;/b&gt;</ph>, and click <ph id=\"ph5\">&lt;b&gt;</ph>Project<ph id=\"ph6\">&lt;/b&gt;</ph>.",
          "pos": [
            173,
            238
          ]
        },
        {
          "content": "Expand <b>Templates</b>, and select <b>Visual C#</b>. In this walkthrough, you use C#, but you can use any .NET language.",
          "pos": [
            254,
            375
          ],
          "nodes": [
            {
              "content": "Expand <ph id=\"ph1\">&lt;b&gt;</ph>Templates<ph id=\"ph2\">&lt;/b&gt;</ph>, and select <ph id=\"ph3\">&lt;b&gt;</ph>Visual C#<ph id=\"ph4\">&lt;/b&gt;</ph>.",
              "pos": [
                0,
                53
              ]
            },
            {
              "content": "In this walkthrough, you use C#, but you can use any .NET language.",
              "pos": [
                54,
                121
              ]
            }
          ]
        },
        {
          "content": "Select <ph id=\"ph1\">&lt;b&gt;</ph>Console Application<ph id=\"ph2\">&lt;/b&gt;</ph> from the list of project types on the right.",
          "pos": [
            391,
            469
          ]
        },
        {
          "content": "Enter <ph id=\"ph1\">&lt;b&gt;</ph>DataFactoryAPITestApp<ph id=\"ph2\">&lt;/b&gt;</ph> for the <ph id=\"ph3\">&lt;b&gt;</ph>Name<ph id=\"ph4\">&lt;/b&gt;</ph>.",
          "pos": [
            484,
            539
          ]
        },
        {
          "content": "Select <ph id=\"ph1\">&lt;b&gt;</ph>C:\\ADFGetStarted<ph id=\"ph2\">&lt;/b&gt;</ph> for the <ph id=\"ph3\">&lt;b&gt;</ph>Location<ph id=\"ph4\">&lt;/b&gt;</ph>.",
          "pos": [
            555,
            610
          ]
        },
        {
          "content": "Click <ph id=\"ph1\">&lt;b&gt;</ph>OK<ph id=\"ph2\">&lt;/b&gt;</ph> to create the project.",
          "pos": [
            625,
            663
          ]
        }
      ]
    },
    {
      "pos": [
        1941,
        2041
      ],
      "content": "Click <ph id=\"ph1\">&lt;b&gt;</ph>Tools<ph id=\"ph2\">&lt;/b&gt;</ph>, point to <ph id=\"ph3\">&lt;b&gt;</ph>NuGet Package Manager<ph id=\"ph4\">&lt;/b&gt;</ph>, and click <ph id=\"ph5\">&lt;b&gt;</ph>Package Manager Console<ph id=\"ph6\">&lt;/b&gt;</ph>."
    },
    {
      "pos": [
        2046,
        2132
      ],
      "content": "In the <ph id=\"ph1\">&lt;b&gt;</ph>Package Manager Console<ph id=\"ph2\">&lt;/b&gt;</ph>, execute the following commands one-by-one.<ph id=\"ph3\">&lt;/b&gt;</ph>."
    },
    {
      "content": "Add the following <bpt id=\"p1\">**</bpt>appSetttings<ept id=\"p1\">**</ept> section to the <bpt id=\"p2\">**</bpt>App.config<ept id=\"p2\">**</ept> file.",
      "pos": [
        2275,
        2345
      ]
    },
    {
      "content": "These are used by the helper method: <bpt id=\"p1\">**</bpt>GetAuthorizationHeader<ept id=\"p1\">**</ept>.",
      "pos": [
        2346,
        2410
      ]
    },
    {
      "content": "Replace values for <bpt id=\"p1\">**</bpt>SubscriptionId<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ActiveDirectoryTenantId<ept id=\"p2\">**</ept> with your Azure subscription and tenant IDs.",
      "pos": [
        2417,
        2531
      ]
    },
    {
      "content": "You can get these values by running <bpt id=\"p1\">**</bpt>Get-AzureAccount<ept id=\"p1\">**</ept> from Azure PowerShell (you may need to login first by using Add-AzureAccount).",
      "pos": [
        2532,
        2667
      ]
    },
    {
      "pos": [
        3400,
        3486
      ],
      "content": "Add the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements to the source file (Program.cs) in the project."
    },
    {
      "content": "Add the following code that creates an instance of  <bpt id=\"p1\">**</bpt>DataPipelineManagementClient<ept id=\"p1\">**</ept> class to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method.",
      "pos": [
        3906,
        4020
      ]
    },
    {
      "content": "You will use this object to create a data factory, a linked service, input and output tables, and a pipeline.",
      "pos": [
        4021,
        4130
      ]
    },
    {
      "content": "You will also this object to monitor slices of a table at runtime.",
      "pos": [
        4131,
        4197
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Replace the <bpt id=\"p1\">**</bpt>resourcegroupname<ept id=\"p1\">**</ept> with the name of your Azure resource group.",
      "pos": [
        4799,
        4889
      ]
    },
    {
      "content": "You can create a resource group using the <bpt id=\"p1\">[</bpt>New-AzureResourceGroup<ept id=\"p1\">](https://msdn.microsoft.com/library/Dn654594.aspx)</ept> cmdlet.",
      "pos": [
        4890,
        5014
      ]
    },
    {
      "pos": [
        5019,
        5097
      ],
      "content": "Add the following code that creates a <bpt id=\"p1\">**</bpt>data factory<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method."
    },
    {
      "pos": [
        5580,
        5660
      ],
      "content": "Add the following code that creates a <bpt id=\"p1\">**</bpt>linked service<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method."
    },
    {
      "pos": [
        5669,
        5782
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Use <bpt id=\"p1\">**</bpt>account name<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>account key<ept id=\"p2\">**</ept> of your Azure storage account for the <bpt id=\"p3\">**</bpt>ConnectionString<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        6445,
        6532
      ],
      "content": "Add the following code that creates <bpt id=\"p1\">**</bpt>input and output tables<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method."
    },
    {
      "content": "Note that the <bpt id=\"p1\">**</bpt>FolderPath<ept id=\"p1\">**</ept> for the input blob is set to <bpt id=\"p2\">**</bpt>adftutorial/<ept id=\"p2\">**</ept> where <bpt id=\"p3\">**</bpt>adftutorial<ept id=\"p3\">**</ept> is the  name of the container in your blob storage.",
      "pos": [
        6539,
        6687
      ]
    },
    {
      "content": "If this container does not exist in your Azure blob storage, create a container with this name: <bpt id=\"p1\">**</bpt>adftutorial<ept id=\"p1\">**</ept> and upload a text file to the container.",
      "pos": [
        6688,
        6840
      ]
    },
    {
      "pos": [
        6850,
        7058
      ],
      "content": "Note that the FolderPath for the output blob is set to: <bpt id=\"p1\">**</bpt>adftutorial/apifactoryoutput/{Slice}<ept id=\"p1\">**</ept> where <bpt id=\"p2\">**</bpt>Slice<ept id=\"p2\">**</ept> is dynamically calculated based on the value of <bpt id=\"p3\">**</bpt>SliceStart<ept id=\"p3\">**</ept> (start date-time of each slice.)"
    },
    {
      "content": "Add the following code that <bpt id=\"p1\">**</bpt>creates and activates a pipeline<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method.",
      "pos": [
        9899,
        9987
      ]
    },
    {
      "content": "This pipeline has a <bpt id=\"p1\">**</bpt>CopyActivity<ept id=\"p1\">**</ept> that takes <bpt id=\"p2\">**</bpt>BlobSource<ept id=\"p2\">**</ept> as a source and <bpt id=\"p3\">**</bpt>BlobSink<ept id=\"p3\">**</ept> as a sink.",
      "pos": [
        9988,
        10090
      ]
    },
    {
      "content": "Add the following helper method used by the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method to the <bpt id=\"p2\">**</bpt>Program<ept id=\"p2\">**</ept> class.",
      "pos": [
        12556,
        12641
      ]
    },
    {
      "content": "This method pops a dialog box that that lets you provide <bpt id=\"p1\">**</bpt>user name<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>password<ept id=\"p2\">**</ept> that you use to login to Azure portal.",
      "pos": [
        12642,
        12768
      ]
    },
    {
      "content": "Add the following code to the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method to get the status of a data slice of the output table.",
      "pos": [
        14079,
        14179
      ]
    },
    {
      "content": "There is only slice expected in this sample.",
      "pos": [
        14180,
        14224
      ]
    },
    {
      "pos": [
        15525,
        15628
      ],
      "content": "<bpt id=\"p1\">**</bpt>(optional)<ept id=\"p1\">**</ept> Add the following code to get run details for a data slice slice to the <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> method."
    },
    {
      "content": "Build the console application.",
      "pos": [
        16988,
        17018
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> on the menu and click <bpt id=\"p2\">**</bpt>Build Solution<ept id=\"p2\">**</ept>.",
      "pos": [
        17019,
        17076
      ]
    },
    {
      "content": "If you get an error about <bpt id=\"p1\">**</bpt>ConfigurationManager<ept id=\"p1\">**</ept> class, add a reference to the <bpt id=\"p2\">**</bpt>System.Configuration<ept id=\"p2\">**</ept> assembly and try to build again.",
      "pos": [
        17077,
        17215
      ]
    },
    {
      "content": "Confirm that there is at least one file in the adftutorial container in your Azure blob storage.",
      "pos": [
        17221,
        17317
      ]
    },
    {
      "content": "If not, create Emp.txt file in Notepad with the following content and upload it to the adftutorial container.",
      "pos": [
        17318,
        17427
      ]
    },
    {
      "content": "Run the sample by clicking <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> -&gt; <bpt id=\"p2\">**</bpt>Start Debugging<ept id=\"p2\">**</ept> on the menu.",
      "pos": [
        17475,
        17547
      ]
    },
    {
      "content": "When you see the <bpt id=\"p1\">**</bpt>Getting run details of a data slice<ept id=\"p1\">**</ept>, wait for a few minutes, and press <bpt id=\"p2\">**</bpt>ENTER<ept id=\"p2\">**</ept>.",
      "pos": [
        17548,
        17650
      ]
    },
    {
      "pos": [
        17656,
        17781
      ],
      "content": "Use the Azure Preview Portal to verify that the data factory: <bpt id=\"p1\">**</bpt>APITutorialFactory<ept id=\"p1\">**</ept> is created with the following artifacts:"
    },
    {
      "pos": [
        17789,
        17835
      ],
      "content": "Linked service: <bpt id=\"p1\">**</bpt>LinkedService_AzureStorage<ept id=\"p1\">**</ept>"
    },
    {
      "pos": [
        17843,
        17900
      ],
      "content": "Tables: <bpt id=\"p1\">**</bpt>TableBlobSource<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TableBlobDestination<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        17907,
        17939
      ],
      "content": "Pipeline: <bpt id=\"p1\">**</bpt>PipelineBlobSample<ept id=\"p1\">**</ept>"
    },
    {
      "pos": [
        17945,
        18051
      ],
      "content": "Verify that an output file is created in the <bpt id=\"p1\">**</bpt>apifactoryoutput<ept id=\"p1\">**</ept> folder in the <bpt id=\"p2\">**</bpt>adftutorial<ept id=\"p2\">**</ept> container."
    },
    {
      "content": "See Also",
      "pos": [
        18057,
        18065
      ]
    },
    {
      "content": "Article",
      "pos": [
        18067,
        18074
      ]
    },
    {
      "content": "Description",
      "pos": [
        18077,
        18088
      ]
    },
    {
      "content": "Azure Data Factory Developer Reference",
      "pos": [
        18115,
        18153
      ]
    },
    {
      "content": "The Developer Reference has the comprehensive reference content for .NET class library, cmdlets, JSON script, functions, etc…",
      "pos": [
        18178,
        18303
      ]
    },
    {
      "content": "test",
      "pos": [
        18730,
        18734
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Create, monitor, and manage Azure data factories by using Data Factory SDK\" \n    description=\"Learn how to programmatically create, monitor, and manage Azure data factories by using Data Factory SDK.\" \n    services=\"data-factory\" \n    documentationCenter=\"\" \n    authors=\"spelluru\" \n    manager=\"jhubbard\" \n    editor=\"monicar\"/>\n\n<tags \n    ms.service=\"data-factory\" \n    ms.workload=\"data-services\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/25/2015\" \n    ms.author=\"spelluru\"/>\n\n# Create, monitor, and manage Azure data factories using Data Factory .NET SDK\n## Overview\nYou can create, monitor, and manage Azure data factories programmatically using Data Factory .NET SDK. This article contains a walkthrough that you can follow to create a sample .NET console application that creates and monitors a data factory. See [Data Factory Class Library Reference][adf-class-library-reference] for details about Data Factory .NET SDK. \n\n\n\n## Prerequisites\n\n- Visual Studio 2012 or 2013\n- Download and install [Azure .NET SDK][azure-developer-center]\n- Download and install NuGet packages for Azure Data Factory. Instructions are in the walkthrough.\n\n## Walkthrough\n1. Using Visual Studio 2012 or 2013, create a C# .NET console application.\n    <ol type=\"a\">\n        <li>Launch <b>Visual Studio 2012</b> or <b>Visual Studio 2013</b>.</li>\n        <li>Click <b>File</b>, point to <b>New</b>, and click <b>Project</b>.</li> \n        <li>Expand <b>Templates</b>, and select <b>Visual C#</b>. In this walkthrough, you use C#, but you can use any .NET language.</li> \n        <li>Select <b>Console Application</b> from the list of project types on the right.</li>\n        <li>Enter <b>DataFactoryAPITestApp</b> for the <b>Name</b>.</li> \n        <li>Select <b>C:\\ADFGetStarted</b> for the <b>Location</b>.</li>\n        <li>Click <b>OK</b> to create the project.</li>\n    </ol>\n2. Click <b>Tools</b>, point to <b>NuGet Package Manager</b>, and click <b>Package Manager Console</b>.\n3.  In the <b>Package Manager Console</b>, execute the following commands one-by-one.</b>. \n\n        Install-Package Microsoft.Azure.Management.DataFactories\n        Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory\n6. Add the following **appSetttings** section to the **App.config** file. These are used by the helper method: **GetAuthorizationHeader**. \n\n    Replace values for **SubscriptionId** and **ActiveDirectoryTenantId** with your Azure subscription and tenant IDs. You can get these values by running **Get-AzureAccount** from Azure PowerShell (you may need to login first by using Add-AzureAccount).\n \n        <appSettings>\n            <!--CSM Prod related values-->\n            <add key=\"ActiveDirectoryEndpoint\" value=\"https://login.windows.net/\" />\n            <add key=\"ResourceManagerEndpoint\" value=\"https://management.azure.com/\" />\n            <add key=\"WindowsManagementUri\" value=\"https://management.core.windows.net/\" />\n            <add key=\"AdfClientId\" value=\"1950a258-227b-4e31-a9cf-717495945fc2\" />\n            <add key=\"RedirectUri\" value=\"urn:ietf:wg:oauth:2.0:oob\" />\n            <!--Make sure to write your own tenenat id and subscription ID here-->\n            <add key=\"SubscriptionId\" value=\"<subscription ID>\" />\n            <add key=\"ActiveDirectoryTenantId\" value=\"<tenant ID\" />\n        </appSettings>\n6. Add the following **using** statements to the source file (Program.cs) in the project.\n\n        using System.Threading;\n        using System.Configuration;\n        using System.Collections.ObjectModel;\n        \n        using Microsoft.Azure.Management.DataFactories;\n        using Microsoft.Azure.Management.DataFactories.Models;\n        using Microsoft.Azure.Management.DataFactories.Common.Models;\n        \n        using Microsoft.IdentityModel.Clients.ActiveDirectory;\n        using Microsoft.Azure;\n6. Add the following code that creates an instance of  **DataPipelineManagementClient** class to the **Main** method. You will use this object to create a data factory, a linked service, input and output tables, and a pipeline. You will also this object to monitor slices of a table at runtime.    \n\n        // create data factory management client\n        string resourceGroupName = \"resourcegroupname\";\n        string dataFactoryName = \"APITutorialFactorySP\";\n\n        TokenCloudCredentials aadTokenCredentials =\n            new TokenCloudCredentials(\n                ConfigurationManager.AppSettings[\"SubscriptionId\"],\n                GetAuthorizationHeader());\n\n        Uri resourceManagerUri = new Uri(ConfigurationManager.AppSettings[\"ResourceManagerEndpoint\"]);\n\n        DataFactoryManagementClient client = new DataFactoryManagementClient(aadTokenCredentials, resourceManagerUri);\n\n    > [AZURE.NOTE] Replace the **resourcegroupname** with the name of your Azure resource group. You can create a resource group using the [New-AzureResourceGroup](https://msdn.microsoft.com/library/Dn654594.aspx) cmdlet.\n\n7. Add the following code that creates a **data factory** to the **Main** method.\n\n        // create a data factory\n        Console.WriteLine(\"Creating a data factory\");\n        client.DataFactories.CreateOrUpdate(resourceGroupName,\n            new DataFactoryCreateOrUpdateParameters()\n            {\n                DataFactory = new DataFactory()\n                {\n                    Name = dataFactoryName,\n                    Location = \"westus\",\n                    Properties = new DataFactoryProperties() { }\n                }\n            }\n        );\n\n8. Add the following code that creates a **linked service** to the **Main** method. \n\n    > [AZURE.NOTE] Use **account name** and **account key** of your Azure storage account for the **ConnectionString**. \n\n        // create a linked service\n        Console.WriteLine(\"Creating a linked service\");\n        client.LinkedServices.CreateOrUpdate(resourceGroupName, dataFactoryName,\n            new LinkedServiceCreateOrUpdateParameters()\n            {\n                LinkedService = new LinkedService()\n                {\n                    Name = \"LinkedService-AzureStorage\",\n                    Properties = new LinkedServiceProperties\n                    (\n                        new AzureStorageLinkedService(\"DefaultEndpointsProtocol=https;AccountName=<account name>;AccountKey=<account key>\")\n                    )\n                }\n            }\n        );\n9. Add the following code that creates **input and output tables** to the **Main** method. \n\n    Note that the **FolderPath** for the input blob is set to **adftutorial/** where **adftutorial** is the  name of the container in your blob storage. If this container does not exist in your Azure blob storage, create a container with this name: **adftutorial** and upload a text file to the container.\n    \n    Note that the FolderPath for the output blob is set to: **adftutorial/apifactoryoutput/{Slice}** where **Slice** is dynamically calculated based on the value of **SliceStart** (start date-time of each slice.)  \n\n \n        // create input and output tables\n        Console.WriteLine(\"Creating input and output tables\");\n        string Table_Source = \"TableBlobSource\";\n        string Table_Destination = \"TableBlobDestination\";\n\n        client.Tables.CreateOrUpdate(resourceGroupName, dataFactoryName,\n            new TableCreateOrUpdateParameters()\n            {\n                Table = new Table()\n                {\n                    Name = Table_Source,\n                    Properties = new TableProperties()\n                    {\n                        LinkedServiceName = \"LinkedService-AzureStorage\",\n                        TypeProperties = new AzureBlobDataset()\n                        {\n                            FolderPath = \"adftutorial/\",\n                            FileName = \"emp.txt\"\n                        },\n                        External = true,\n                        Availability = new Availability()\n                        {\n                            Frequency = SchedulePeriod.Hour,\n                            Interval = 1,\n                        },\n\n                        Policy = new Policy()\n                        {\n                            Validation = new ValidationPolicy()\n                            {\n                                MinimumRows = 1\n                            }\n                        }\n                    }\n                }\n            });\n\n        client.Tables.CreateOrUpdate(resourceGroupName, dataFactoryName,\n            new TableCreateOrUpdateParameters()\n            {\n                Table = new Table()\n                {\n                    Name = Table_Destination,\n                    Properties = new TableProperties()\n                    {\n\n                        LinkedServiceName = \"LinkedService-AzureStorage\",\n                        TypeProperties = new AzureBlobDataset()\n                        {\n                            FolderPath = \"adftutorial/apifactoryoutput/{Slice}\",\n                            PartitionedBy = new Collection<Partition>()\n                            {\n                                new Partition()\n                                {\n                                    Name = \"Slice\",\n                                    Value = new DateTimePartitionValue()\n                                    {\n                                        Date = \"SliceStart\",\n                                        Format = \"yyyyMMdd-HH\"\n                                    }\n                                }\n                            }\n                        },\n\n                        Availability = new Availability()\n                        {\n                            Frequency = SchedulePeriod.Hour,\n                            Interval = 1,\n                        },\n                    }\n                }\n            });\n\n11. Add the following code that **creates and activates a pipeline** to the **Main** method. This pipeline has a **CopyActivity** that takes **BlobSource** as a source and **BlobSink** as a sink.\n\n            // create a pipeline\n        Console.WriteLine(\"Creating a pipeline\");\n        DateTime PipelineActivePeriodStartTime = new DateTime(2014, 8, 9, 0, 0, 0, 0, DateTimeKind.Utc);\n        DateTime PipelineActivePeriodEndTime = PipelineActivePeriodStartTime.AddMinutes(60);\n        string PipelineName = \"PipelineBlobSample\";\n\n        client.Pipelines.CreateOrUpdate(resourceGroupName, dataFactoryName,\n            new PipelineCreateOrUpdateParameters()\n            {\n                Pipeline = new Pipeline()\n                {\n                    Name = PipelineName,\n                    Properties = new PipelineProperties()\n                    {\n                        Description = \"Demo Pipeline for data transfer between blobs\",\n\n                        // Initial value for pipeline's active period. With this, you won't need to set slice status\n                        Start = PipelineActivePeriodStartTime,\n                        End = PipelineActivePeriodEndTime,\n\n                        Activities = new List<Activity>()\n                        {                                \n                            new Activity()\n                            {   \n                                Name = \"BlobToBlob\",\n                                Inputs = new List<ActivityInput>()\n                                {\n                                    new ActivityInput() {\n                                        Name = Table_Source\n                                    }\n                                },\n                                Outputs = new List<ActivityOutput>()\n                                {\n                                    new ActivityOutput()\n                                    {\n                                        Name = Table_Destination\n                                    }\n                                },\n                                TypeProperties = new CopyActivity()\n                                {\n                                    Source = new BlobSource(),\n                                    Sink = new BlobSink()\n                                    {\n                                        WriteBatchSize = 10000,\n                                        WriteBatchTimeout = TimeSpan.FromMinutes(10)\n                                    }\n                                }\n                            }\n\n                        },\n                    }\n                }\n            });\n\n    \n\n12. Add the following helper method used by the **Main** method to the **Program** class. This method pops a dialog box that that lets you provide **user name** and **password** that you use to login to Azure portal. \n \n        public static string GetAuthorizationHeader()\n        {\n            AuthenticationResult result = null;\n            var thread = new Thread(() =>\n            {\n                try\n                {\n                    var context = new AuthenticationContext(ConfigurationManager.AppSettings[\"ActiveDirectoryEndpoint\"] + ConfigurationManager.AppSettings[\"ActiveDirectoryTenantId\"]);\n\n                    result = context.AcquireToken(\n                        resource: ConfigurationManager.AppSettings[\"WindowsManagementUri\"],\n                        clientId: ConfigurationManager.AppSettings[\"AdfClientId\"],\n                        redirectUri: new Uri(ConfigurationManager.AppSettings[\"RedirectUri\"]),\n                        promptBehavior: PromptBehavior.Always);\n                }\n                catch (Exception threadEx)\n                {\n                    Console.WriteLine(threadEx.Message);\n                }\n            });\n\n            thread.SetApartmentState(ApartmentState.STA);\n            thread.Name = \"AcquireTokenThread\";\n            thread.Start();\n            thread.Join();\n\n            if (result != null)\n            {\n                return result.AccessToken;\n            }\n\n            throw new InvalidOperationException(\"Failed to acquire token\");\n        }  \n \n13. Add the following code to the **Main** method to get the status of a data slice of the output table. There is only slice expected in this sample.   \n \n        // Pulling status within a timeout threshold\n        DateTime start = DateTime.Now;\n        bool done = false;\n\n        while (DateTime.Now - start < TimeSpan.FromMinutes(5) && !done)\n        {\n            Console.WriteLine(\"Pulling the slice status\");\n            // wait before the next status check\n            Thread.Sleep(1000 * 12);\n\n            var datalistResponse = client.DataSlices.List(resourceGroupName, dataFactoryName, Table_Destination,\n                new DataSliceListParameters()\n                {\n                    DataSliceRangeStartTime = PipelineActivePeriodStartTime.ConvertToISO8601DateTimeString(),\n                    DataSliceRangeEndTime = PipelineActivePeriodEndTime.ConvertToISO8601DateTimeString()\n                });\n\n            foreach (DataSlice slice in datalistResponse.DataSlices)\n            {\n                if (slice.State == DataSliceState.Failed || slice.State == DataSliceState.Ready)\n                {\n                    Console.WriteLine(\"Slice execution is done with status: {0}\", slice.State);\n                    done = true;\n                    break;\n                }\n                else\n                {\n                    Console.WriteLine(\"Slice status is: {0}\", slice.State);\n                }\n            }\n        }\n\n14. **(optional)** Add the following code to get run details for a data slice slice to the **Main** method.\n\n        Console.WriteLine(\"Getting run details of a data slice\");\n\n        // give it a few minutes for the output slice to be ready\n        Console.WriteLine(\"\\nGive it a few minutes for the output slice to be ready and press any key.\");\n        Console.ReadKey();\n\n        var datasliceRunListResponse = client.DataSliceRuns.List(\n                resourceGroupName,\n                dataFactoryName,\n                Table_Destination,\n                new DataSliceRunListParameters()\n                {\n                    DataSliceStartTime = PipelineActivePeriodStartTime.ConvertToISO8601DateTimeString()\n                }\n            );\n        \n        foreach (DataSliceRun run in datasliceRunListResponse.DataSliceRuns)\n        {\n            Console.WriteLine(\"Status: \\t\\t{0}\", run.Status);\n            Console.WriteLine(\"DataSliceStart: \\t{0}\", run.DataSliceStart);\n            Console.WriteLine(\"DataSliceEnd: \\t\\t{0}\", run.DataSliceEnd);\n            Console.WriteLine(\"ActivityId: \\t\\t{0}\", run.ActivityName);\n            Console.WriteLine(\"ProcessingStartTime: \\t{0}\", run.ProcessingStartTime);\n            Console.WriteLine(\"ProcessingEndTime: \\t{0}\", run.ProcessingEndTime);\n            Console.WriteLine(\"ErrorMessage: \\t{0}\", run.ErrorMessage);\n        }\n\n        Console.WriteLine(\"\\nPress any key to exit.\");\n        Console.ReadKey();\n\n15. Build the console application. Click **Build** on the menu and click **Build Solution**. If you get an error about **ConfigurationManager** class, add a reference to the **System.Configuration** assembly and try to build again. \n16. Confirm that there is at least one file in the adftutorial container in your Azure blob storage. If not, create Emp.txt file in Notepad with the following content and upload it to the adftutorial container.\n\n        John, Doe\n        Jane, Doe\n     \n17. Run the sample by clicking **Debug** -> **Start Debugging** on the menu. When you see the **Getting run details of a data slice**, wait for a few minutes, and press **ENTER**. \n18. Use the Azure Preview Portal to verify that the data factory: **APITutorialFactory** is created with the following artifacts: \n    - Linked service: **LinkedService_AzureStorage** \n    - Tables: **TableBlobSource** and **TableBlobDestination**.\n    - Pipeline: **PipelineBlobSample** \n18. Verify that an output file is created in the **apifactoryoutput** folder in the **adftutorial** container.\n\n\n## See Also\n\nArticle | Description\n------ | ---------------\n[Azure Data Factory Developer Reference][developer-reference] | The Developer Reference has the comprehensive reference content for .NET class library, cmdlets, JSON script, functions, etc… \n\n\n[data-factory-introduction]: data-factory-introduction.md\n[adf-getstarted]: data-factory-get-started.md\n[adf-tutorial]: data-factory-tutorial.md\n[use-custom-activities]: data-factory-use-custom-activities.md\n[developer-reference]: http://go.microsoft.com/fwlink/?LinkId=516908\n \n[adf-class-library-reference]: http://go.microsoft.com/fwlink/?LinkID=521877\n[azure-developer-center]: http://azure.microsoft.com/downloads/\n \n\ntest\n"
}