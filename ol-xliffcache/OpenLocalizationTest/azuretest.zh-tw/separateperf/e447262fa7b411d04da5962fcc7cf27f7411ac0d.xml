{
  "nodes": [
    {
      "content": "How to use Service Bus queues (Node.js) | Microsoft Azure",
      "pos": [
        28,
        85
      ]
    },
    {
      "content": "Learn how to use Service Bus queues in Azure from a Node.js app.",
      "pos": [
        105,
        169
      ]
    },
    {
      "content": "How to use Service Bus queues",
      "pos": [
        489,
        518
      ]
    },
    {
      "content": "This guide describes how to use Service Bus queues.",
      "pos": [
        520,
        571
      ]
    },
    {
      "content": "The samples are written in JavaScript and use the Node.js Azure module.",
      "pos": [
        572,
        643
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating queues, sending and receiving messages<ept id=\"p1\">**</ept>, and <bpt id=\"p2\">**</bpt>deleting queues<ept id=\"p2\">**</ept>.",
      "pos": [
        644,
        751
      ]
    },
    {
      "content": "For more information on queues, see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Next steps]</ept> section.",
      "pos": [
        752,
        813
      ]
    },
    {
      "content": "Create a Node.js application",
      "pos": [
        906,
        934
      ]
    },
    {
      "content": "Create a blank Node.js application.",
      "pos": [
        936,
        971
      ]
    },
    {
      "content": "For instructions on creating a Node.js application, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create and deploy a Node.js application to an Azure Web Site]</ept>, or <bpt id=\"p2\">[</bpt>Node.js Cloud Service<ept id=\"p2\">][Node.js Cloud Service]</ept> (using Windows PowerShell).",
      "pos": [
        972,
        1169
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        1174,
        1219
      ]
    },
    {
      "content": "To use Azure Service Bus, download and use the Node.js azure package.",
      "pos": [
        1221,
        1290
      ]
    },
    {
      "content": "This includes a set of libraries that communicate with the Service Bus REST services.",
      "pos": [
        1291,
        1376
      ]
    },
    {
      "content": "Use Node Package Manager (NPM) to obtain the package",
      "pos": [
        1382,
        1434
      ]
    },
    {
      "pos": [
        1440,
        1602
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>Windows PowerShell for Node.js<ept id=\"p1\">**</ept> command window to navigate to the <bpt id=\"p2\">**</bpt>c:\\\\node\\\\sbqueues\\\\WebRole1<ept id=\"p2\">**</ept> folder in which you created your sample application."
    },
    {
      "pos": [
        1608,
        1713
      ],
      "content": "Type <bpt id=\"p1\">**</bpt>npm install azure<ept id=\"p1\">**</ept> in the command window, which should result in output similar to the following:"
    },
    {
      "content": "You can manually run the <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> command to verify that a <bpt id=\"p2\">**</bpt>node\\_modules<ept id=\"p2\">**</ept> folder was created.",
      "pos": [
        2243,
        2337
      ]
    },
    {
      "content": "Inside that folder find the <bpt id=\"p1\">**</bpt>azure<ept id=\"p1\">**</ept> package, which contains the libraries you need to access Service Bus queues.",
      "pos": [
        2338,
        2452
      ]
    },
    {
      "content": "Import the module",
      "pos": [
        2458,
        2475
      ]
    },
    {
      "pos": [
        2477,
        2589
      ],
      "content": "Using Notepad or another text editor, add the following to the top of the <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> file of the application:"
    },
    {
      "content": "Set up an Azure Service Bus connection",
      "pos": [
        2630,
        2668
      ]
    },
    {
      "content": "The Azure module reads the environment variables AZURE\\_SERVICEBUS\\_NAMESPACE and AZURE\\_SERVICEBUS\\_ACCESS\\_KEY to obtain information required to connect to Service Bus.",
      "pos": [
        2670,
        2840
      ]
    },
    {
      "content": "If these environment variables are not set, you must specify the account information when calling <bpt id=\"p1\">**</bpt>createServiceBusService<ept id=\"p1\">**</ept>.",
      "pos": [
        2841,
        2967
      ]
    },
    {
      "pos": [
        2969,
        3114
      ],
      "content": "For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Cloud Service with Storage]</ept>."
    },
    {
      "pos": [
        3116,
        3257
      ],
      "content": "For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Web Application with Storage]</ept>"
    },
    {
      "content": "How to create a queue",
      "pos": [
        3262,
        3283
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object enables you to work with queues.",
      "pos": [
        3285,
        3350
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        3351,
        3409
      ]
    },
    {
      "content": "Add it near the top of the <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> file, after the statement to import the Azure module:",
      "pos": [
        3410,
        3504
      ]
    },
    {
      "content": "By calling <bpt id=\"p1\">**</bpt>createQueueIfNotExists<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object, the specified queue will be returned (if it exists,) or a new queue with the specified name will be created.",
      "pos": [
        3568,
        3751
      ]
    },
    {
      "content": "The following code uses <bpt id=\"p1\">**</bpt>createQueueIfNotExists<ept id=\"p1\">**</ept> to create or connect to the queue named 'myqueue':",
      "pos": [
        3752,
        3853
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>createServiceBusService<ept id=\"p1\">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.",
      "pos": [
        3995,
        4160
      ]
    },
    {
      "content": "The following example sets the maximum queue size to 5 GB, and a time to live value of 1 minute:",
      "pos": [
        4161,
        4257
      ]
    },
    {
      "content": "Filters",
      "pos": [
        4535,
        4542
      ]
    },
    {
      "content": "Optional filtering operations can be applied to operations performed using <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept>.",
      "pos": [
        4544,
        4641
      ]
    },
    {
      "content": "Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:",
      "pos": [
        4642,
        4776
      ]
    },
    {
      "pos": [
        4826,
        4958
      ],
      "content": "After doing its pre-processing on the request options, the method must call <ph id=\"ph1\">`next`</ph>, passing a callback with the following signature:"
    },
    {
      "pos": [
        5014,
        5279
      ],
      "content": "In this callback, and after processing the <bpt id=\"p1\">**</bpt>returnObject<ept id=\"p1\">**</ept> (the response from the request to the server), the callback must either invoke <ph id=\"ph1\">`next`</ph> if it exists to continue processing other filters, or simply invoke <ph id=\"ph2\">`finalCallback`</ph>, which ends the service invocation."
    },
    {
      "content": "Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>.",
      "pos": [
        5281,
        5430
      ]
    },
    {
      "content": "The following creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object that uses the <bpt id=\"p2\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p2\">**</ept>:",
      "pos": [
        5431,
        5531
      ]
    },
    {
      "content": "How to send messages to a queue",
      "pos": [
        5694,
        5725
      ]
    },
    {
      "content": "To send a message to a Service Bus queue, your application calls the <bpt id=\"p1\">**</bpt>sendQueueMessage<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        5727,
        5860
      ]
    },
    {
      "content": "Messages sent to (and received from) Service Bus queues are <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects, and have a set of standard properties (such as <bpt id=\"p2\">**</bpt>Label<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>TimeToLive<ept id=\"p3\">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.",
      "pos": [
        5861,
        6143
      ]
    },
    {
      "content": "An application can set the body of the message by passing a string as the message.",
      "pos": [
        6144,
        6226
      ]
    },
    {
      "content": "Any required standard properties are populated with default values.",
      "pos": [
        6227,
        6294
      ]
    },
    {
      "pos": [
        6296,
        6414
      ],
      "content": "The following example demonstrates how to send a test message to the queue named <ph id=\"ph1\">`myqueue`</ph> using <bpt id=\"p1\">**</bpt>sendQueueMessage<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        6687,
        6857
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        6858,
        6987
      ]
    },
    {
      "content": "This queue size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        6988,
        7061
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        7066,
        7102
      ]
    },
    {
      "content": "Messages are received from a queue using the <bpt id=\"p1\">**</bpt>receiveQueueMessage<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        7104,
        7216
      ]
    },
    {
      "content": "By default, messages are deleted from the queue as they are read; however, you can read (peek) and lock the message without deleting it from the queue by setting the optional parameter <bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.",
      "pos": [
        7217,
        7429
      ]
    },
    {
      "content": "The default behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        7431,
        7661
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        7662,
        7789
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        7790,
        7999
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> parameter is set to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        8001,
        8182
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        8183,
        8351
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method and providing the message to be deleted as a parameter.",
      "pos": [
        8352,
        8597
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method will mark the message as being consumed and remove it from the queue.",
      "pos": [
        8598,
        8696
      ]
    },
    {
      "content": "The following example demonstrates how to receive and process messages using <bpt id=\"p1\">**</bpt>receiveQueueMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        8698,
        8799
      ]
    },
    {
      "content": "The example first receives and deletes a message, and then receives a message using <bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, then deletes the message using <bpt id=\"p3\">**</bpt>deleteMessage<ept id=\"p3\">**</ept>:",
      "pos": [
        8800,
        8965
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        9518,
        9575
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        9577,
        9712
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        9713,
        9871
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the",
      "pos": [
        9872,
        9913
      ]
    },
    {
      "content": "message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        9914,
        10060
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.",
      "pos": [
        10062,
        10355
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method is called, then the message will be redelivered to the application when it restarts.",
      "pos": [
        10357,
        10552
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        10553,
        10720
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        10721,
        10889
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>MessageId<ept id=\"p1\">**</ept> property of the message, which will remain constant across delivery attempts.",
      "pos": [
        10890,
        11014
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        11019,
        11029
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus queues, follow these links to learn more.",
      "pos": [
        11031,
        11122
      ]
    },
    {
      "pos": [
        11128,
        11190
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions.<ept id=\"p1\">][]</ept>"
    },
    {
      "pos": [
        11195,
        11247
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure SDK for Node]</ept> repository on GitHub."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus queues (Node.js) | Microsoft Azure\" \n    description=\"Learn how to use Service Bus queues in Azure from a Node.js app.\" \n    services=\"service-bus\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"07/06/2015\" \n    ms.author=\"mwasson\"/>\n\n# How to use Service Bus queues\n\nThis guide describes how to use Service Bus queues. The samples are written in JavaScript and use the Node.js Azure module. The scenarios covered include **creating queues, sending and receiving messages**, and **deleting queues**. For more information on queues, see the [Next steps] section.\n\n[AZURE.INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\n\n## Create a Node.js application\n\nCreate a blank Node.js application. For instructions on creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], or [Node.js Cloud Service][Node.js Cloud Service] (using Windows PowerShell).\n\n## Configure your application to use Service Bus\n\nTo use Azure Service Bus, download and use the Node.js azure package. This includes a set of libraries that communicate with the Service Bus REST services.\n\n### Use Node Package Manager (NPM) to obtain the package\n\n1.  Use the **Windows PowerShell for Node.js** command window to navigate to the **c:\\\\node\\\\sbqueues\\\\WebRole1** folder in which you created your sample application.\n\n2.  Type **npm install azure** in the command window, which should result in output similar to the following:\n\n        azure@0.7.5 node_modules\\azure\n        ├── dateformat@1.0.2-1.2.3\n        ├── xmlbuilder@0.4.2\n        ├── node-uuid@1.2.0\n        ├── mime@1.2.9\n        ├── underscore@1.4.4\n        ├── validator@1.1.1\n        ├── tunnel@0.0.2\n        ├── wns@0.5.3\n        ├── xml2js@0.2.7 (sax@0.5.2)\n        └── request@2.21.0 (json-stringify-safe@4.0.0, forever-agent@0.5.0, aws-sign@0.3.0, tunnel-agent@0.3.0, oauth-sign@0.3.0, qs@0.6.5, cookie-jar@0.3.0, node-uuid@1.4.0, http-signature@0.9.11, form-data@0.0.8, hawk@0.13.1)\n\n3.  You can manually run the **ls** command to verify that a **node\\_modules** folder was created. Inside that folder find the **azure** package, which contains the libraries you need to access Service Bus queues.\n\n### Import the module\n\nUsing Notepad or another text editor, add the following to the top of the **server.js** file of the application:\n\n    var azure = require('azure');\n\n### Set up an Azure Service Bus connection\n\nThe Azure module reads the environment variables AZURE\\_SERVICEBUS\\_NAMESPACE and AZURE\\_SERVICEBUS\\_ACCESS\\_KEY to obtain information required to connect to Service Bus. If these environment variables are not set, you must specify the account information when calling **createServiceBusService**.\n\nFor an example of setting the environment variables in a configuration file for an Azure Cloud Service, see [Node.js Cloud Service with Storage].\n\nFor an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]\n\n## How to create a queue\n\nThe **ServiceBusService** object enables you to work with queues. The following code creates a **ServiceBusService** object. Add it near the top of the **server.js** file, after the statement to import the Azure module:\n\n    var serviceBusService = azure.createServiceBusService();\n\nBy calling **createQueueIfNotExists** on the **ServiceBusService** object, the specified queue will be returned (if it exists,) or a new queue with the specified name will be created. The following code uses **createQueueIfNotExists** to create or connect to the queue named 'myqueue':\n\n    serviceBusService.createQueueIfNotExists('myqueue', function(error){\n        if(!error){\n            // Queue exists\n        }\n    });\n\n**createServiceBusService** also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size. The following example sets the maximum queue size to 5 GB, and a time to live value of 1 minute:\n\n    var queueOptions = {\n          MaxSizeInMegabytes: '5120',\n          DefaultMessageTimeToLive: 'PT1M'\n        };\n\n    serviceBusService.createQueueIfNotExists('myqueue', queueOptions, function(error){\n        if(!error){\n            // Queue exists\n        }\n    });\n\n### Filters\n\nOptional filtering operations can be applied to operations performed using **ServiceBusService**. Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:\n\n        function handle (requestOptions, next)\n\nAfter doing its pre-processing on the request options, the method must call `next`, passing a callback with the following signature:\n\n        function (returnObject, finalCallback, next)\n\nIn this callback, and after processing the **returnObject** (the response from the request to the server), the callback must either invoke `next` if it exists to continue processing other filters, or simply invoke `finalCallback`, which ends the service invocation.\n\nTwo filters that implement retry logic are included with the Azure SDK for Node.js, **ExponentialRetryPolicyFilter** and **LinearRetryPolicyFilter**. The following creates a **ServiceBusService** object that uses the **ExponentialRetryPolicyFilter**:\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var serviceBusService = azure.createServiceBusService().withFilter(retryOperations);\n\n## How to send messages to a queue\n\nTo send a message to a Service Bus queue, your application calls the **sendQueueMessage** method on the **ServiceBusService** object. Messages sent to (and received from) Service Bus queues are **BrokeredMessage** objects, and have a set of standard properties (such as **Label** and **TimeToLive**), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data. An application can set the body of the message by passing a string as the message. Any required standard properties are populated with default values.\n\nThe following example demonstrates how to send a test message to the queue named `myqueue` using **sendQueueMessage**:\n\n    var message = {\n        body: 'Test message',\n        customProperties: {\n            testproperty: 'TestValue'\n        }};\n    serviceBusService.sendQueueMessage('myqueue', message, function(error){\n        if(!error){\n            // message sent\n        }\n    });\n\nService Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This queue size is defined at creation time, with an upper limit of 5 GB.\n\n## How to receive messages from a queue\n\nMessages are received from a queue using the **receiveQueueMessage** method on the **ServiceBusService** object. By default, messages are deleted from the queue as they are read; however, you can read (peek) and lock the message without deleting it from the queue by setting the optional parameter **isPeekLock** to **true**.\n\nThe default behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIf the **isPeekLock** parameter is set to **true**, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling **deleteMessage** method and providing the message to be deleted as a parameter. The **deleteMessage** method will mark the message as being consumed and remove it from the queue.\n\nThe following example demonstrates how to receive and process messages using **receiveQueueMessage**. The example first receives and deletes a message, and then receives a message using **isPeekLock** set to **true**, then deletes the message using **deleteMessage**:\n\n    serviceBusService.receiveQueueMessage('myqueue', function(error, receivedMessage){\n        if(!error){\n            // Message received and deleted\n        }\n    });\n    serviceBusService.receiveQueueMessage('myqueue', { isPeekLock: true }, function(error, lockedMessage){\n        if(!error){\n            // Message received and locked\n            serviceBusService.deleteMessage(lockedMessage, function (deleteError){\n                if(!deleteError){\n                    // Message deleted\n                }\n            });\n        }\n    });\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlockMessage** method on the **ServiceBusService** object. This will cause Service Bus to unlock the\nmessage within the queue and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **deleteMessage** method is called, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**, that is, each message will be processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the **MessageId** property of the message, which will remain constant across delivery attempts.\n\n## Next steps\n\nNow that you've learned the basics of Service Bus queues, follow these links to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions.][]\n-   Visit the [Azure SDK for Node] repository on GitHub.\n\n  [Azure SDK for Node]: https://github.com/Azure/azure-sdk-for-node\n  [Next steps]: #next-steps\n  [What are Service Bus Queues?]: #what-are-service-bus-queues\n  [Create a Service Namespace]: #create-a-service-namespace\n  [Obtain the Default Management Credentials for the Namespace]: #obtain-default-credentials\n  [Create a Node.js Application]: #create-app\n  [Configure Your Application to Use Service Bus]: #configure-app\n  [How to: Create a Queue]: #create-queue\n  [How to: Send Messages to a Queue]: #send-messages\n  [How to: Receive Messages from a Queue]: #receive-messages\n  [How to: Handle Application Crashes and Unreadable Messages]: #handle-crashes\n  [Queue Concepts]: ../../dotNet/Media/sb-queues-08.png\n  [Azure Management Portal]: http://manage.windowsazure.com\n  \n  [Node.js Cloud Service]: ../cloud-services/cloud-services-nodejs-develop-deploy-app.md\n  [Queues, Topics, and Subscriptions.]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n  [Create and deploy a Node.js application to an Azure Web Site]: ../app-service-web/web-sites-nodejs-develop-deploy-mac.md\n  [Node.js Cloud Service with Storage]: ../cloud-services/storage-nodejs-use-table-storage-cloud-service-app.md\n  [Node.js Web Application with Storage]: ../storage/storage-nodejs-how-to-use-table-storage.md\n \n"
}