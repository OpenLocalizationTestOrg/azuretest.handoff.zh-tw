{
  "nodes": [
    {
      "content": "Compute-intensive Java application on a VM | Microsoft Azure",
      "pos": [
        27,
        87
      ]
    },
    {
      "content": "Learn how to create an Azure virtual machine that runs a compute-intensive Java application that can be monitored by another Java application.",
      "pos": [
        106,
        248
      ]
    },
    {
      "content": "How to run a compute-intensive task in Java on a virtual machine",
      "pos": [
        593,
        657
      ]
    },
    {
      "content": "With Azure, you can use a virtual machine to handle compute-intensive tasks.",
      "pos": [
        659,
        735
      ]
    },
    {
      "content": "For example, a virtual machine can handle tasks and deliver results to client machines or mobile applications.",
      "pos": [
        736,
        846
      ]
    },
    {
      "content": "After reading this article, you will have an understanding of how to create a virtual machine that runs a compute-intensive Java application that can be monitored by another Java application.",
      "pos": [
        847,
        1038
      ]
    },
    {
      "content": "This tutorial assumes you know how to create Java console applications, can import libraries to your Java application, and can generate a Java archive (JAR).",
      "pos": [
        1040,
        1197
      ]
    },
    {
      "content": "No knowledge of Microsoft Azure is assumed.",
      "pos": [
        1198,
        1241
      ]
    },
    {
      "content": "You will learn:",
      "pos": [
        1243,
        1258
      ]
    },
    {
      "content": "How to create a virtual machine with a Java Development Kit (JDK) already installed.",
      "pos": [
        1262,
        1346
      ]
    },
    {
      "content": "How to remotely log in to your virtual machine.",
      "pos": [
        1349,
        1396
      ]
    },
    {
      "content": "How to create a service bus namespace.",
      "pos": [
        1399,
        1437
      ]
    },
    {
      "content": "How to create a Java application that performs a compute-intensive task.",
      "pos": [
        1440,
        1512
      ]
    },
    {
      "content": "How to create a Java application that monitors the progress of the compute-intensive task.",
      "pos": [
        1515,
        1605
      ]
    },
    {
      "content": "How to run the Java applications.",
      "pos": [
        1608,
        1641
      ]
    },
    {
      "content": "How to stop the Java applications.",
      "pos": [
        1644,
        1678
      ]
    },
    {
      "content": "This tutorial will use the Traveling Salesman Problem for the compute-intensive task.",
      "pos": [
        1680,
        1765
      ]
    },
    {
      "content": "The following is an example of the Java application running the compute-intensive task.",
      "pos": [
        1766,
        1853
      ]
    },
    {
      "content": "Traveling Salesman Problem solver",
      "pos": [
        1857,
        1890
      ]
    },
    {
      "content": "The following is an example of the Java application monitoring the compute-intensive task.",
      "pos": [
        1908,
        1998
      ]
    },
    {
      "content": "Traveling Salesman Problem client",
      "pos": [
        2002,
        2035
      ]
    },
    {
      "content": "To create a virtual machine",
      "pos": [
        2150,
        2177
      ]
    },
    {
      "pos": [
        2182,
        2255
      ],
      "content": "Log in to the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        2259,
        2352
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Compute<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Virtual machine<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>From Gallery<ept id=\"p4\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Virtual machine image select<ept id=\"p1\">**</ept> dialog box, select <bpt id=\"p2\">**</bpt>JDK 7 Windows Server 2012<ept id=\"p2\">**</ept>.",
      "pos": [
        2356,
        2445
      ]
    },
    {
      "content": "Note that <bpt id=\"p1\">**</bpt>JDK 6 Windows Server 2012<ept id=\"p1\">**</ept> is available in case you have legacy applications that are not yet ready to run in JDK 7.",
      "pos": [
        2446,
        2575
      ]
    },
    {
      "pos": [
        2579,
        2594
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2598,
        2650
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Virtual machine configuration<ept id=\"p1\">**</ept> dialog box:"
    },
    {
      "content": "Specify a name for the virtual machine.",
      "pos": [
        2658,
        2697
      ]
    },
    {
      "content": "Specify the size to use for the virtual machine.",
      "pos": [
        2705,
        2753
      ]
    },
    {
      "content": "Enter a name for the administrator in the <bpt id=\"p1\">**</bpt>User Name<ept id=\"p1\">**</ept> field.",
      "pos": [
        2761,
        2823
      ]
    },
    {
      "content": "Remember this name and the password you will enter next, you will use them when you remotely log in to the virtual machine.",
      "pos": [
        2824,
        2947
      ]
    },
    {
      "content": "Enter a password in the <bpt id=\"p1\">**</bpt>New password<ept id=\"p1\">**</ept> field, and re-enter it in the <bpt id=\"p2\">**</bpt>Confirm<ept id=\"p2\">**</ept> field.",
      "pos": [
        2955,
        3044
      ]
    },
    {
      "content": "This is the Administrator account password.",
      "pos": [
        3045,
        3088
      ]
    },
    {
      "pos": [
        3096,
        3111
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        3115,
        3172
      ],
      "content": "In the next <bpt id=\"p1\">**</bpt>Virtual machine configuration<ept id=\"p1\">**</ept> dialog box:"
    },
    {
      "pos": [
        3180,
        3250
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Cloud service<ept id=\"p1\">**</ept>, use the default <bpt id=\"p2\">**</bpt>Create a new cloud service<ept id=\"p2\">**</ept>."
    },
    {
      "content": "The value for <bpt id=\"p1\">**</bpt>Cloud service DNS name<ept id=\"p1\">**</ept> must be unique across cloudapp.net.",
      "pos": [
        3258,
        3334
      ]
    },
    {
      "content": "If needed, modify this value so that Azure indicates it is unique.",
      "pos": [
        3335,
        3401
      ]
    },
    {
      "content": "Specify a region, affinity group, or virtual network.",
      "pos": [
        3409,
        3462
      ]
    },
    {
      "content": "For purposes of this tutorial, specify a region such as <bpt id=\"p1\">**</bpt>West US<ept id=\"p1\">**</ept>.",
      "pos": [
        3463,
        3531
      ]
    },
    {
      "pos": [
        3539,
        3622
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Storage Account<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Use an automatically generated storage account<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        3630,
        3674
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Availability Set<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>(None)<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        3682,
        3697
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        3701,
        3759
      ],
      "content": "In the final <bpt id=\"p1\">**</bpt>Virtual machine configuration<ept id=\"p1\">**</ept> dialog box:"
    },
    {
      "content": "Accept the default endpoint entries.",
      "pos": [
        3767,
        3803
      ]
    },
    {
      "pos": [
        3811,
        3830
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Complete<ept id=\"p1\">**</ept>."
    },
    {
      "content": "To remotely log in to your virtual machine",
      "pos": [
        3835,
        3877
      ]
    },
    {
      "pos": [
        3882,
        3949
      ],
      "content": "Log on to the <bpt id=\"p1\">[</bpt>Management Portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        3953,
        3980
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Virtual machines<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click the name of the virtual machine that you want to log in to.",
      "pos": [
        3984,
        4049
      ]
    },
    {
      "pos": [
        4053,
        4071
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Connect<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Respond to the prompts as needed to connect to the virtual machine.",
      "pos": [
        4075,
        4142
      ]
    },
    {
      "content": "When prompted for the administrator name and password, use the values that you provided when you created the virtual machine.",
      "pos": [
        4143,
        4268
      ]
    },
    {
      "content": "Note that the Azure Service Bus functionality requires the Baltimore CyberTrust Root certificate to be installed as part of your JRE's <bpt id=\"p1\">**</bpt>cacerts<ept id=\"p1\">**</ept> store.",
      "pos": [
        4270,
        4423
      ]
    },
    {
      "content": "This certificate is automatically included in the Java Runtime Environment (JRE) used by this tutorial.",
      "pos": [
        4424,
        4527
      ]
    },
    {
      "content": "If you do not have this certificate in your JRE <bpt id=\"p1\">**</bpt>cacerts<ept id=\"p1\">**</ept> store, see <bpt id=\"p2\">[</bpt>Adding a Certificate to the Java CA Certificate Store<ept id=\"p2\">][add_ca_cert]</ept> for information on adding it (as well as information on viewing the certificates in your cacerts store).",
      "pos": [
        4528,
        4772
      ]
    },
    {
      "content": "How to create a service bus namespace",
      "pos": [
        4777,
        4814
      ]
    },
    {
      "content": "To begin using Service Bus queues in Azure, you must first",
      "pos": [
        4816,
        4874
      ]
    },
    {
      "content": "create a service namespace.",
      "pos": [
        4875,
        4902
      ]
    },
    {
      "content": "A service namespace provides a scoping",
      "pos": [
        4903,
        4941
      ]
    },
    {
      "content": "container for addressing Service Bus resources within your application.",
      "pos": [
        4942,
        5013
      ]
    },
    {
      "content": "To create a service namespace:",
      "pos": [
        5015,
        5045
      ]
    },
    {
      "pos": [
        5051,
        5124
      ],
      "content": "Log on to the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](https://manage.windowsazure.com)</ept>."
    },
    {
      "pos": [
        5129,
        5237
      ],
      "content": "In the lower-left navigation pane of the Management Portal, click <bpt id=\"p1\">**</bpt>Service Bus, Access Control &amp; Caching<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        5242,
        5412
      ],
      "content": "In the upper-left pane of the Management Portal, click the **Service\nBus** node, and then click the **New** button.  \n![Service Bus Node screenshot][svc_bus_node]",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In the upper-left pane of the Management Portal, click the <bpt id=\"p1\">**</bpt>Service\nBus<ept id=\"p1\">**</ept> node, and then click the <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> button.",
          "pos": [
            0,
            115
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Service Bus Node screenshot<ph id=\"ph2\">][svc_bus_node]</ph>",
          "pos": [
            118,
            162
          ]
        }
      ]
    },
    {
      "pos": [
        5417,
        5644
      ],
      "content": "In the **Create a new Service Namespace** dialog box, enter a\n**Namespace**, and then to make sure that it is unique, click the\n**Check Availability** button.  \n![Create a New Namespace screenshot][create_namespace]",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In the <bpt id=\"p1\">**</bpt>Create a new Service Namespace<ept id=\"p1\">**</ept> dialog box, enter a",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept>, and then to make sure that it is unique, click the",
          "pos": [
            62,
            127
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Check Availability<ept id=\"p1\">**</ept> button.",
          "pos": [
            128,
            158
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Create a New Namespace screenshot<ph id=\"ph2\">][create_namespace]</ph>",
          "pos": [
            161,
            215
          ]
        }
      ]
    },
    {
      "pos": [
        5649,
        5822
      ],
      "content": "After making sure the namespace name is available, choose the\ncountry or region in which your namespace should be hosted, and then click the **Create Namespace** button.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "After making sure the namespace name is available, choose the",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "country or region in which your namespace should be hosted, and then click the <bpt id=\"p1\">**</bpt>Create Namespace<ept id=\"p1\">**</ept> button.",
          "pos": [
            62,
            169
          ]
        }
      ]
    },
    {
      "pos": [
        5830,
        6007
      ],
      "content": "The namespace you created will then appear in the Management Portal\nand takes a moment to activate. Wait until the status is **Active** before continuing with the next step.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "The namespace you created will then appear in the Management Portal",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "and takes a moment to activate. Wait until the status is **Active** before continuing with the next step.",
          "pos": [
            68,
            173
          ],
          "nodes": [
            {
              "content": "and takes a moment to activate.",
              "pos": [
                0,
                31
              ]
            },
            {
              "content": "Wait until the status is <bpt id=\"p1\">**</bpt>Active<ept id=\"p1\">**</ept> before continuing with the next step.",
              "pos": [
                32,
                105
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "Obtain the Default Management Credentials for the namespace",
      "pos": [
        6012,
        6071
      ]
    },
    {
      "content": "In order to perform management operations, such as creating a queue, on",
      "pos": [
        6073,
        6144
      ]
    },
    {
      "content": "the new namespace, you need to obtain the management credentials for the",
      "pos": [
        6145,
        6217
      ]
    },
    {
      "content": "namespace.",
      "pos": [
        6218,
        6228
      ]
    },
    {
      "pos": [
        6234,
        6399
      ],
      "content": "In the left navigation pane, click the **Service Bus** node to\ndisplay the list of available namespaces.\n![Available Namespaces screenshot][avail_namespaces]",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "In the left navigation pane, click the <bpt id=\"p1\">**</bpt>Service Bus<ept id=\"p1\">**</ept> node to",
          "pos": [
            0,
            62
          ]
        },
        {
          "content": "display the list of available namespaces.",
          "pos": [
            63,
            104
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Available Namespaces screenshot<ph id=\"ph2\">][avail_namespaces]</ph>",
          "pos": [
            105,
            157
          ]
        }
      ]
    },
    {
      "pos": [
        6404,
        6511
      ],
      "content": "Select the namespace you just created from the list shown.\n![Namespace List screenshot][namespace_list]",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Select the namespace you just created from the list shown.",
          "pos": [
            0,
            58
          ]
        },
        {
          "content": "Namespace List screenshot",
          "pos": [
            61,
            86
          ]
        }
      ]
    },
    {
      "pos": [
        6516,
        6649
      ],
      "content": "The right-hand **Properties** pane lists the properties for the\nnew namespace.\n![Properties Pane screenshot][properties_pane]",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "The right-hand <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> pane lists the properties for the",
          "pos": [
            0,
            63
          ]
        },
        {
          "content": "new namespace.",
          "pos": [
            64,
            78
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Properties Pane screenshot<ph id=\"ph2\">][properties_pane]</ph>",
          "pos": [
            79,
            125
          ]
        }
      ]
    },
    {
      "pos": [
        6654,
        6794
      ],
      "content": "The **Default Key** is hidden. Click the **View** button to display\nthe security credentials.\n![Default Key screenshot][default_key]",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "The **Default Key** is hidden. Click the **View** button to display",
          "pos": [
            0,
            67
          ],
          "nodes": [
            {
              "content": "The <bpt id=\"p1\">**</bpt>Default Key<ept id=\"p1\">**</ept> is hidden.",
              "pos": [
                0,
                30
              ]
            },
            {
              "content": "Click the <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> button to display",
              "pos": [
                31,
                67
              ]
            }
          ]
        },
        {
          "content": "the security credentials.",
          "pos": [
            68,
            93
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>Default Key screenshot<ph id=\"ph2\">][default_key]</ph>",
          "pos": [
            94,
            132
          ]
        }
      ]
    },
    {
      "pos": [
        6799,
        6949
      ],
      "content": "Make a note of the **Default Issuer** and the **Default Key** as you\nwill use this information below to perform operations with the\nnamespace.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Make a note of the <bpt id=\"p1\">**</bpt>Default Issuer<ept id=\"p1\">**</ept> and the <bpt id=\"p2\">**</bpt>Default Key<ept id=\"p2\">**</ept> as you",
          "pos": [
            0,
            68
          ]
        },
        {
          "content": "will use this information below to perform operations with the",
          "pos": [
            69,
            131
          ]
        },
        {
          "content": "namespace.",
          "pos": [
            132,
            142
          ]
        }
      ]
    },
    {
      "content": "How to create a Java application that performs a compute-intensive task",
      "pos": [
        6954,
        7025
      ]
    },
    {
      "pos": [
        7030,
        7200
      ],
      "content": "On your development machine (which does not have to be the virtual machine that you created), download the <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">](http://azure.microsoft.com/develop/java/)</ept>."
    },
    {
      "content": "Create a Java console application using the example code at the end of this section.",
      "pos": [
        7204,
        7288
      ]
    },
    {
      "content": "In this tutorial, we'll use <bpt id=\"p1\">**</bpt>TSPSolver.java<ept id=\"p1\">**</ept> as the Java file name.",
      "pos": [
        7289,
        7358
      ]
    },
    {
      "content": "Modify the <bpt id=\"p1\">**</bpt>your\\_service\\_bus\\_namespace<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>your\\_service\\_bus\\_owner<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>your\\_service\\_bus\\_key<ept id=\"p3\">**</ept> placeholders to use your service bus <bpt id=\"p4\">**</bpt>namespace<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Default Issuer<ept id=\"p5\">**</ept> and <bpt id=\"p6\">**</bpt>Default Key<ept id=\"p6\">**</ept> values, respectively.",
      "pos": [
        7359,
        7580
      ]
    },
    {
      "content": "After coding, export the application to a runnable Java archive (JAR), and package the required libraries into the generated JAR.",
      "pos": [
        7584,
        7713
      ]
    },
    {
      "content": "In this tutorial, we'll use <bpt id=\"p1\">**</bpt>TSPSolver.jar<ept id=\"p1\">**</ept> as the generated JAR name.",
      "pos": [
        7714,
        7786
      ]
    },
    {
      "content": "How to create a Java application that monitors the progress of the compute-intensive task",
      "pos": [
        15406,
        15495
      ]
    },
    {
      "content": "On your development machine, create a Java console application using the example code at the end of this section.",
      "pos": [
        15500,
        15613
      ]
    },
    {
      "content": "In this tutorial, we'll use <bpt id=\"p1\">**</bpt>TSPClient.java<ept id=\"p1\">**</ept> as the Java file name.",
      "pos": [
        15614,
        15683
      ]
    },
    {
      "content": "As shown earlier, modify the <bpt id=\"p1\">**</bpt>your\\_service\\_bus\\_namespace<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>your\\_service\\_bus\\_owner<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>your\\_service\\_bus\\_key<ept id=\"p3\">**</ept> placeholders to use your service bus <bpt id=\"p4\">**</bpt>namespace<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Default Issuer<ept id=\"p5\">**</ept> and <bpt id=\"p6\">**</bpt>Default Key<ept id=\"p6\">**</ept> values, respectively.",
      "pos": [
        15684,
        15923
      ]
    },
    {
      "content": "Export the application to a runnable JAR, and package the required libraries into the generated JAR.",
      "pos": [
        15927,
        16027
      ]
    },
    {
      "content": "In this tutorial, we'll use <bpt id=\"p1\">**</bpt>TSPClient.jar<ept id=\"p1\">**</ept> as the generated JAR name.",
      "pos": [
        16028,
        16100
      ]
    },
    {
      "content": "How to run the Java applications",
      "pos": [
        20089,
        20121
      ]
    },
    {
      "content": "Run the compute-intensive application, first to create the queue, then to solve the Traveling Saleseman Problem, which will add the current best route to the service bus queue.",
      "pos": [
        20122,
        20298
      ]
    },
    {
      "content": "While the compute-intensive application is running (or afterwards), run the client to display results from the service bus queue.",
      "pos": [
        20299,
        20428
      ]
    },
    {
      "content": "To run the compute-intensive application",
      "pos": [
        20434,
        20474
      ]
    },
    {
      "content": "Log on to your virtual machine.",
      "pos": [
        20479,
        20510
      ]
    },
    {
      "content": "Create a folder where you will run your application.",
      "pos": [
        20514,
        20566
      ]
    },
    {
      "content": "For example, <bpt id=\"p1\">**</bpt>c:\\TSP<ept id=\"p1\">**</ept>.",
      "pos": [
        20567,
        20591
      ]
    },
    {
      "pos": [
        20595,
        20632
      ],
      "content": "Copy <bpt id=\"p1\">**</bpt>TSPSolver.jar<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>c:\\TSP<ept id=\"p2\">**</ept>,"
    },
    {
      "pos": [
        20636,
        20706
      ],
      "content": "Create a file named <bpt id=\"p1\">**</bpt>c:\\TSP\\cities.txt<ept id=\"p1\">**</ept> with the following contents."
    },
    {
      "content": "At a command prompt, change directories to c:\\TSP.",
      "pos": [
        22370,
        22420
      ]
    },
    {
      "content": "Ensure the JRE's bin folder is in the PATH environment variable.",
      "pos": [
        22424,
        22488
      ]
    },
    {
      "content": "You'll need to create the service bus queue before you run the TSP solver permutations.",
      "pos": [
        22492,
        22579
      ]
    },
    {
      "content": "Run the following command to create the service bus queue.",
      "pos": [
        22580,
        22638
      ]
    },
    {
      "content": "Now that the queue is created, you can run the TSP solver permutations.",
      "pos": [
        22688,
        22759
      ]
    },
    {
      "content": "For example, run the following command to run the solver for 8 cities.",
      "pos": [
        22760,
        22830
      ]
    },
    {
      "content": "If you don't specify a number, it will run for 10 cities.",
      "pos": [
        22868,
        22925
      ]
    },
    {
      "content": "As the solver finds current shortest routes, it will add them to the queue.",
      "pos": [
        22926,
        23001
      ]
    },
    {
      "pos": [
        23005,
        23432
      ],
      "content": "[AZURE.NOTE]\nThe larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of runtime (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "The larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of runtime (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
          "pos": [
            13,
            425
          ],
          "nodes": [
            {
              "content": "The larger the number that you specify, the longer the solver will run.",
              "pos": [
                0,
                71
              ]
            },
            {
              "content": "For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours.",
              "pos": [
                72,
                186
              ]
            },
            {
              "content": "Increasing to 16 or more cities could result in days of runtime (eventually weeks, months, and years).",
              "pos": [
                187,
                289
              ]
            },
            {
              "content": "This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.",
              "pos": [
                290,
                412
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "How to run the monitoring client application",
      "pos": [
        23438,
        23482
      ]
    },
    {
      "content": "Log on to your machine where you will run the client application.",
      "pos": [
        23486,
        23551
      ]
    },
    {
      "content": "This does not need to be the same machine running the <bpt id=\"p1\">**</bpt>TSPSolver<ept id=\"p1\">**</ept> application, although it can be.",
      "pos": [
        23552,
        23652
      ]
    },
    {
      "content": "Create a folder where you will run your application.",
      "pos": [
        23656,
        23708
      ]
    },
    {
      "content": "For example, <bpt id=\"p1\">**</bpt>c:\\TSP<ept id=\"p1\">**</ept>.",
      "pos": [
        23709,
        23733
      ]
    },
    {
      "pos": [
        23737,
        23774
      ],
      "content": "Copy <bpt id=\"p1\">**</bpt>TSPClient.jar<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>c:\\TSP<ept id=\"p2\">**</ept>,"
    },
    {
      "content": "Ensure the JRE's bin folder is in the PATH environment variable.",
      "pos": [
        23778,
        23842
      ]
    },
    {
      "content": "At a command prompt, change directories to c:\\TSP.",
      "pos": [
        23846,
        23896
      ]
    },
    {
      "content": "Run the following command.",
      "pos": [
        23900,
        23926
      ]
    },
    {
      "content": "Optionally, specify the number of minutes to sleep in between checking the queue, by passing in a command-line argument.",
      "pos": [
        23965,
        24085
      ]
    },
    {
      "content": "The default sleep period for checking the queue is 3 minutes, which is used if no command-line argument is passed to <bpt id=\"p1\">**</bpt>TSPClient<ept id=\"p1\">**</ept>.",
      "pos": [
        24086,
        24217
      ]
    },
    {
      "content": "If you want to use a different value for the sleep interval, for example, one minute, run the following command.",
      "pos": [
        24218,
        24330
      ]
    },
    {
      "content": "The client will run until it sees a queue message of \"Complete\".",
      "pos": [
        24371,
        24435
      ]
    },
    {
      "content": "Note that if you run multiple occurrences of the solver without running the client, you may need to run the client multiple times to completely empty the queue.",
      "pos": [
        24436,
        24596
      ]
    },
    {
      "content": "Alternatively, you can delete the queue and then create it again.",
      "pos": [
        24597,
        24662
      ]
    },
    {
      "content": "To delete the queue, run the following <bpt id=\"p1\">**</bpt>TSPSolver<ept id=\"p1\">**</ept> (not <bpt id=\"p2\">**</bpt>TSPClient<ept id=\"p2\">**</ept>)  command.",
      "pos": [
        24663,
        24745
      ]
    },
    {
      "content": "The solver will run until it finishes examining all routes.",
      "pos": [
        24796,
        24855
      ]
    },
    {
      "content": "How to stop the Java applications",
      "pos": [
        24860,
        24893
      ]
    },
    {
      "pos": [
        24894,
        25018
      ],
      "content": "For both the solver and client applications, you can press <bpt id=\"p1\">**</bpt>Ctrl+C<ept id=\"p1\">**</ept> to exit if you want to end prior to normal completion."
    }
  ],
  "content": "<properties\n    pageTitle=\"Compute-intensive Java application on a VM | Microsoft Azure\"\n    description=\"Learn how to create an Azure virtual machine that runs a compute-intensive Java application that can be monitored by another Java application.\"\n    services=\"virtual-machines\"\n    documentationCenter=\"java\"\n    authors=\"rmcmurray\"\n    manager=\"wpickett\"\n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.workload=\"infrastructure-services\"\n    ms.tgt_pltfrm=\"vm-windows\"\n    ms.devlang=\"Java\"\n    ms.topic=\"article\"\n    ms.date=\"06/03/2015\"\n    ms.author=\"robmcm\"/>\n\n# How to run a compute-intensive task in Java on a virtual machine\n\nWith Azure, you can use a virtual machine to handle compute-intensive tasks. For example, a virtual machine can handle tasks and deliver results to client machines or mobile applications. After reading this article, you will have an understanding of how to create a virtual machine that runs a compute-intensive Java application that can be monitored by another Java application.\n\nThis tutorial assumes you know how to create Java console applications, can import libraries to your Java application, and can generate a Java archive (JAR). No knowledge of Microsoft Azure is assumed.\n\nYou will learn:\n\n* How to create a virtual machine with a Java Development Kit (JDK) already installed.\n* How to remotely log in to your virtual machine.\n* How to create a service bus namespace.\n* How to create a Java application that performs a compute-intensive task.\n* How to create a Java application that monitors the progress of the compute-intensive task.\n* How to run the Java applications.\n* How to stop the Java applications.\n\nThis tutorial will use the Traveling Salesman Problem for the compute-intensive task. The following is an example of the Java application running the compute-intensive task.\n\n![Traveling Salesman Problem solver][solver_output]\n\nThe following is an example of the Java application monitoring the compute-intensive task.\n\n![Traveling Salesman Problem client][client_output]\n\n[AZURE.INCLUDE [create-account-and-vms-note](../../includes/create-account-and-vms-note.md)]\n\n## To create a virtual machine\n\n1. Log in to the [Azure Management Portal](https://manage.windowsazure.com).\n2. Click **New**, click **Compute**, click **Virtual machine**, and then click **From Gallery**.\n3. In the **Virtual machine image select** dialog box, select **JDK 7 Windows Server 2012**.\nNote that **JDK 6 Windows Server 2012** is available in case you have legacy applications that are not yet ready to run in JDK 7.\n4. Click **Next**.\n4. In the **Virtual machine configuration** dialog box:\n    1. Specify a name for the virtual machine.\n    2. Specify the size to use for the virtual machine.\n    3. Enter a name for the administrator in the **User Name** field. Remember this name and the password you will enter next, you will use them when you remotely log in to the virtual machine.\n    4. Enter a password in the **New password** field, and re-enter it in the **Confirm** field. This is the Administrator account password.\n    5. Click **Next**.\n5. In the next **Virtual machine configuration** dialog box:\n    1. For **Cloud service**, use the default **Create a new cloud service**.\n    2. The value for **Cloud service DNS name** must be unique across cloudapp.net. If needed, modify this value so that Azure indicates it is unique.\n    2. Specify a region, affinity group, or virtual network. For purposes of this tutorial, specify a region such as **West US**.\n    2. For **Storage Account**, select **Use an automatically generated storage account**.\n    3. For **Availability Set**, select **(None)**.\n    4. Click **Next**.\n5. In the final **Virtual machine configuration** dialog box:\n    1. Accept the default endpoint entries.\n    2. Click **Complete**.\n\n## To remotely log in to your virtual machine\n\n1. Log on to the [Management Portal](https://manage.windowsazure.com).\n2. Click **Virtual machines**.\n3. Click the name of the virtual machine that you want to log in to.\n4. Click **Connect**.\n5. Respond to the prompts as needed to connect to the virtual machine. When prompted for the administrator name and password, use the values that you provided when you created the virtual machine.\n\nNote that the Azure Service Bus functionality requires the Baltimore CyberTrust Root certificate to be installed as part of your JRE's **cacerts** store. This certificate is automatically included in the Java Runtime Environment (JRE) used by this tutorial. If you do not have this certificate in your JRE **cacerts** store, see [Adding a Certificate to the Java CA Certificate Store][add_ca_cert] for information on adding it (as well as information on viewing the certificates in your cacerts store).\n\n## How to create a service bus namespace\n\nTo begin using Service Bus queues in Azure, you must first\ncreate a service namespace. A service namespace provides a scoping\ncontainer for addressing Service Bus resources within your application.\n\nTo create a service namespace:\n\n1.  Log on to the [Azure Management Portal](https://manage.windowsazure.com).\n2.  In the lower-left navigation pane of the Management Portal, click **Service Bus, Access Control & Caching**.\n3.  In the upper-left pane of the Management Portal, click the **Service\n    Bus** node, and then click the **New** button.  \n    ![Service Bus Node screenshot][svc_bus_node]\n4.  In the **Create a new Service Namespace** dialog box, enter a\n    **Namespace**, and then to make sure that it is unique, click the\n    **Check Availability** button.  \n    ![Create a New Namespace screenshot][create_namespace]\n5.  After making sure the namespace name is available, choose the\n    country or region in which your namespace should be hosted, and then click the **Create Namespace** button.  \n\n    The namespace you created will then appear in the Management Portal\n    and takes a moment to activate. Wait until the status is **Active** before continuing with the next step.\n\n## Obtain the Default Management Credentials for the namespace\n\nIn order to perform management operations, such as creating a queue, on\nthe new namespace, you need to obtain the management credentials for the\nnamespace.\n\n1.  In the left navigation pane, click the **Service Bus** node to\n    display the list of available namespaces.\n    ![Available Namespaces screenshot][avail_namespaces]\n2.  Select the namespace you just created from the list shown.\n    ![Namespace List screenshot][namespace_list]\n3.  The right-hand **Properties** pane lists the properties for the\n    new namespace.\n    ![Properties Pane screenshot][properties_pane]\n4.  The **Default Key** is hidden. Click the **View** button to display\n    the security credentials.\n    ![Default Key screenshot][default_key]\n5.  Make a note of the **Default Issuer** and the **Default Key** as you\n    will use this information below to perform operations with the\n    namespace.\n\n## How to create a Java application that performs a compute-intensive task\n\n1. On your development machine (which does not have to be the virtual machine that you created), download the [Azure SDK for Java](http://azure.microsoft.com/develop/java/).\n2. Create a Java console application using the example code at the end of this section. In this tutorial, we'll use **TSPSolver.java** as the Java file name. Modify the **your\\_service\\_bus\\_namespace**, **your\\_service\\_bus\\_owner**, and **your\\_service\\_bus\\_key** placeholders to use your service bus **namespace**, **Default Issuer** and **Default Key** values, respectively.\n3. After coding, export the application to a runnable Java archive (JAR), and package the required libraries into the generated JAR. In this tutorial, we'll use **TSPSolver.jar** as the generated JAR name.\n\n<p/>\n\n    // TSPSolver.java\n\n    import com.microsoft.windowsazure.services.core.Configuration;\n    import com.microsoft.windowsazure.services.core.ServiceException;\n    import com.microsoft.windowsazure.services.serviceBus.*;\n    import com.microsoft.windowsazure.services.serviceBus.models.*;\n    import java.io.*;\n    import java.text.DateFormat;\n    import java.text.SimpleDateFormat;\n    import java.util.ArrayList;\n    import java.util.Date;\n    import java.util.List;\n\n    public class TSPSolver {\n\n        //  Value specifying how often to provide an update to the console.\n        private static long loopCheck = 100000000;  \n\n        private static long nTimes = 0, nLoops=0;\n\n        private static double[][] distances;\n        private static String[] cityNames;\n        private static int[] bestOrder;\n        private static double minDistance;\n        private static ServiceBusContract service;\n\n        private static void buildDistances(String fileLocation, int numCities) throws Exception{\n            try{\n                BufferedReader file = new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(new File(fileLocation)))));\n                double[][] cityLocs = new double[numCities][2];\n                for (int i = 0; i<numCities; i++){\n                    String[] line = file.readLine().split(\", \");\n                    cityNames[i] = line[0];\n                    cityLocs[i][0] = Double.parseDouble(line[1]);\n                    cityLocs[i][1] = Double.parseDouble(line[2]);\n                }\n                for (int i = 0; i<numCities; i++){\n                    for (int j = i; j<numCities; j++){\n                        distances[i][j] = Math.hypot(Math.abs(cityLocs[i][0] - cityLocs[j][0]), Math.abs(cityLocs[i][1] - cityLocs[j][1]));\n                        distances[j][i] = distances[i][j];\n                    }\n                }\n            } catch (Exception e){\n                throw e;\n            }\n        }\n\n        private static void permutation(List<Integer> startCities, double distSoFar, List<Integer> restCities) throws Exception {\n\n            try\n            {\n                nTimes++;\n                if (nTimes == loopCheck)\n                {\n                    nLoops++;\n                    nTimes = 0;\n                    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\n                    Date date = new Date();\n                    System.out.print(\"Current time is \" + dateFormat.format(date) + \". \");\n                    System.out.println(  \"Completed \" + nLoops + \" iterations of size of \" + loopCheck + \".\");\n                }\n\n                if ((restCities.size() == 1) && ((minDistance == -1) || (distSoFar + distances[restCities.get(0)][startCities.get(0)] + distances[restCities.get(0)][startCities.get(startCities.size()-1)] < minDistance))){\n                    startCities.add(restCities.get(0));\n                    newBestDistance(startCities, distSoFar + distances[restCities.get(0)][startCities.get(0)] + distances[restCities.get(0)][startCities.get(startCities.size()-2)]);\n                    startCities.remove(startCities.size()-1);\n                }\n                else{\n                    for (int i=0; i<restCities.size(); i++){\n                        startCities.add(restCities.get(0));\n                        restCities.remove(0);\n                        permutation(startCities, distSoFar + distances[startCities.get(startCities.size()-1)][startCities.get(startCities.size()-2)],restCities);\n                        restCities.add(startCities.get(startCities.size()-1));\n                        startCities.remove(startCities.size()-1);\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n        }\n\n        private static void newBestDistance(List<Integer> cities, double distance) throws ServiceException, Exception {\n            try\n            {\n                minDistance = distance;\n                String cityList = \"Shortest distance is \"+minDistance+\", with route: \";\n                for (int i = 0; i<bestOrder.length; i++){\n                    bestOrder[i] = cities.get(i);\n                    cityList += cityNames[bestOrder[i]];\n                    if (i != bestOrder.length -1)\n                        cityList += \", \";\n                }\n                System.out.println(cityList);\n                service.sendQueueMessage(\"TSPQueue\", new BrokeredMessage(cityList));\n            }\n            catch (ServiceException se)\n            {\n                throw se;\n            }\n            catch (Exception e)\n            {\n                throw e;\n            }\n        }\n\n        public static void main(String args[]){\n\n            try {\n\n                Configuration config = ServiceBusConfiguration.configureWithWrapAuthentication(\n                        \"your_service_bus_namespace\", \"your_service_bus_owner\",\n                        \"your_service_bus_key\",\n                        \".servicebus.windows.net\",\n                        \"-sb.accesscontrol.windows.net/WRAPv0.9\");\n\n                service = ServiceBusService.create(config);\n\n                int numCities = 10;  // Use as the default, if no value is specified at command line.\n                if (args.length != 0)\n                {\n                    if (args[0].toLowerCase().compareTo(\"createqueue\")==0)\n                    {\n                        // No processing to occur other than creating the queue.\n                        QueueInfo queueInfo = new QueueInfo(\"TSPQueue\");\n\n                        service.createQueue(queueInfo);\n\n                        System.out.println(\"Queue named TSPQueue was created.\");\n\n                        System.exit(0);\n                    }\n\n                    if (args[0].toLowerCase().compareTo(\"deletequeue\")==0)\n                    {\n                        // No processing to occur other than deleting the queue.\n                        service.deleteQueue(\"TSPQueue\");\n\n                        System.out.println(\"Queue named TSPQueue was deleted.\");\n\n                        System.exit(0);\n                    }\n\n                    // Neither creating or deleting a queue.\n                    // Assume the value passed in is the number of cities to solve.\n                    numCities = Integer.valueOf(args[0]);  \n                }\n\n                System.out.println(\"Running for \" + numCities + \" cities.\");\n\n                List<Integer> startCities = new ArrayList<Integer>();\n                List<Integer> restCities = new ArrayList<Integer>();\n                startCities.add(0);\n                for(int i = 1; i<numCities; i++)\n                    restCities.add(i);\n                distances = new double[numCities][numCities];\n                cityNames = new String[numCities];\n                buildDistances(\"c:\\\\TSP\\\\cities.txt\", numCities);\n                minDistance = -1;\n                bestOrder = new int[numCities];\n                permutation(startCities, 0, restCities);\n                System.out.println(\"Final solution found!\");\n                service.sendQueueMessage(\"TSPQueue\", new BrokeredMessage(\"Complete\"));\n            }\n            catch (ServiceException se)\n            {\n                System.out.println(se.getMessage());\n                se.printStackTrace();\n                System.exit(-1);\n            }\n            catch (Exception e)\n            {\n                System.out.println(e.getMessage());\n                e.printStackTrace();\n                System.exit(-1);\n            }\n        }\n\n    }\n\n\n\n## How to create a Java application that monitors the progress of the compute-intensive task\n\n1. On your development machine, create a Java console application using the example code at the end of this section. In this tutorial, we'll use **TSPClient.java** as the Java file name. As shown earlier, modify the **your\\_service\\_bus\\_namespace**, **your\\_service\\_bus\\_owner**, and **your\\_service\\_bus\\_key** placeholders to use your service bus **namespace**, **Default Issuer** and **Default Key** values, respectively.\n2. Export the application to a runnable JAR, and package the required libraries into the generated JAR. In this tutorial, we'll use **TSPClient.jar** as the generated JAR name.\n\n<p/>\n\n    // TSPClient.java\n\n    import java.util.Date;\n    import java.text.DateFormat;\n    import java.text.SimpleDateFormat;\n    import com.microsoft.windowsazure.services.serviceBus.*;\n    import com.microsoft.windowsazure.services.serviceBus.models.*;\n    import com.microsoft.windowsazure.services.core.*;\n\n    public class TSPClient\n    {\n\n        public static void main(String[] args)\n        {\n                try\n                {\n\n                    DateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\n                    Date date = new Date();\n                    System.out.println(\"Starting at \" + dateFormat.format(date) + \".\");\n\n                    String namespace = \"your_service_bus_namespace\";\n                    String issuer = \"your_service_bus_owner\";\n                    String key = \"your_service_bus_key\";\n\n                    Configuration config;\n                    config = ServiceBusConfiguration.configureWithWrapAuthentication(\n                            namespace, issuer, key,\n                            \".servicebus.windows.net\",\n                            \"-sb.accesscontrol.windows.net/WRAPv0.9\");\n\n                    ServiceBusContract service = ServiceBusService.create(config);\n\n                    BrokeredMessage message;\n\n                    int waitMinutes = 3;  // Use as the default, if no value is specified at command line.\n                    if (args.length != 0)\n                    {\n                        waitMinutes = Integer.valueOf(args[0]);  \n                    }\n\n                    String waitString;\n\n                    waitString = (waitMinutes == 1) ? \"minute.\" : waitMinutes + \" minutes.\";\n\n                    // This queue must have previously been created.\n                    service.getQueue(\"TSPQueue\");\n\n                    int numRead;\n\n                    String s = null;\n\n                    while (true)\n                    {\n\n                        ReceiveQueueMessageResult resultQM = service.receiveQueueMessage(\"TSPQueue\");\n                        message = resultQM.getValue();\n\n                        if (null != message && null != message.getMessageId())\n                        {\n\n                            // Display the queue message.\n                            byte[] b = new byte[200];\n\n                            System.out.print(\"From queue: \");\n\n                            s = null;\n                            numRead = message.getBody().read(b);\n                            while (-1 != numRead)\n                            {\n                                s = new String(b);\n                                s = s.trim();\n                                System.out.print(s);\n                                numRead = message.getBody().read(b);\n                            }\n                            System.out.println();\n                            if (s.compareTo(\"Complete\") == 0)\n                            {\n                                // No more processing to occur.\n                                date = new Date();\n                                System.out.println(\"Finished at \" + dateFormat.format(date) + \".\");\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            // The queue is empty.\n                            System.out.println(\"Queue is empty. Sleeping for another \" + waitString);\n                            Thread.sleep(60000 * waitMinutes);\n                        }\n                    }\n\n            }\n            catch (ServiceException se)\n            {\n                System.out.println(se.getMessage());\n                se.printStackTrace();\n                System.exit(-1);\n            }\n            catch (Exception e)\n            {\n                System.out.println(e.getMessage());\n                e.printStackTrace();\n                System.exit(-1);\n            }\n\n        }\n\n    }\n\n## How to run the Java applications\nRun the compute-intensive application, first to create the queue, then to solve the Traveling Saleseman Problem, which will add the current best route to the service bus queue. While the compute-intensive application is running (or afterwards), run the client to display results from the service bus queue.\n\n### To run the compute-intensive application\n\n1. Log on to your virtual machine.\n2. Create a folder where you will run your application. For example, **c:\\TSP**.\n3. Copy **TSPSolver.jar** to **c:\\TSP**,\n4. Create a file named **c:\\TSP\\cities.txt** with the following contents.\n\n        City_1, 1002.81, -1841.35\n        City_2, -953.55, -229.6\n        City_3, -1363.11, -1027.72\n        City_4, -1884.47, -1616.16\n        City_5, 1603.08, -1030.03\n        City_6, -1555.58, 218.58\n        City_7, 578.8, -12.87\n        City_8, 1350.76, 77.79\n        City_9, 293.36, -1820.01\n        City_10, 1883.14, 1637.28\n        City_11, -1271.41, -1670.5\n        City_12, 1475.99, 225.35\n        City_13, 1250.78, 379.98\n        City_14, 1305.77, 569.75\n        City_15, 230.77, 231.58\n        City_16, -822.63, -544.68\n        City_17, -817.54, -81.92\n        City_18, 303.99, -1823.43\n        City_19, 239.95, 1007.91\n        City_20, -1302.92, 150.39\n        City_21, -116.11, 1933.01\n        City_22, 382.64, 835.09\n        City_23, -580.28, 1040.04\n        City_24, 205.55, -264.23\n        City_25, -238.81, -576.48\n        City_26, -1722.9, -909.65\n        City_27, 445.22, 1427.28\n        City_28, 513.17, 1828.72\n        City_29, 1750.68, -1668.1\n        City_30, 1705.09, -309.35\n        City_31, -167.34, 1003.76\n        City_32, -1162.85, -1674.33\n        City_33, 1490.32, 821.04\n        City_34, 1208.32, 1523.3\n        City_35, 18.04, 1857.11\n        City_36, 1852.46, 1647.75\n        City_37, -167.44, -336.39\n        City_38, 115.4, 0.2\n        City_39, -66.96, 917.73\n        City_40, 915.96, 474.1\n        City_41, 140.03, 725.22\n        City_42, -1582.68, 1608.88\n        City_43, -567.51, 1253.83\n        City_44, 1956.36, 830.92\n        City_45, -233.38, 909.93\n        City_46, -1750.45, 1940.76\n        City_47, 405.81, 421.84\n        City_48, 363.68, 768.21\n        City_49, -120.3, -463.13\n        City_50, 588.51, 679.33\n\n5. At a command prompt, change directories to c:\\TSP.\n6. Ensure the JRE's bin folder is in the PATH environment variable.\n7. You'll need to create the service bus queue before you run the TSP solver permutations. Run the following command to create the service bus queue.\n\n        java -jar TSPSolver.jar createqueue\n\n8. Now that the queue is created, you can run the TSP solver permutations. For example, run the following command to run the solver for 8 cities.\n\n        java -jar TSPSolver.jar 8\n\n If you don't specify a number, it will run for 10 cities. As the solver finds current shortest routes, it will add them to the queue.\n\n> [AZURE.NOTE]\n> The larger the number that you specify, the longer the solver will run. For example, running for 14 cities could take several minutes, and running for 15 cities could take several hours. Increasing to 16 or more cities could result in days of runtime (eventually weeks, months, and years). This is due to the rapid increase in the number of permutations evaluated by the solver as the number of cities increases.\n\n### How to run the monitoring client application\n1. Log on to your machine where you will run the client application. This does not need to be the same machine running the **TSPSolver** application, although it can be.\n2. Create a folder where you will run your application. For example, **c:\\TSP**.\n3. Copy **TSPClient.jar** to **c:\\TSP**,\n4. Ensure the JRE's bin folder is in the PATH environment variable.\n5. At a command prompt, change directories to c:\\TSP.\n6. Run the following command.\n\n        java -jar TSPClient.jar\n\n    Optionally, specify the number of minutes to sleep in between checking the queue, by passing in a command-line argument. The default sleep period for checking the queue is 3 minutes, which is used if no command-line argument is passed to **TSPClient**. If you want to use a different value for the sleep interval, for example, one minute, run the following command.\n\n        java -jar TSPClient.jar 1\n\n    The client will run until it sees a queue message of \"Complete\". Note that if you run multiple occurrences of the solver without running the client, you may need to run the client multiple times to completely empty the queue. Alternatively, you can delete the queue and then create it again. To delete the queue, run the following **TSPSolver** (not **TSPClient**)  command.\n\n        java -jar TSPSolver.jar deletequeue\n\n    The solver will run until it finishes examining all routes.\n\n## How to stop the Java applications\nFor both the solver and client applications, you can press **Ctrl+C** to exit if you want to end prior to normal completion.\n\n\n[solver_output]: ./media/virtual-machines-java-run-compute-intensive-task/WA_JavaTSPSolver.png\n[client_output]: ./media/virtual-machines-java-run-compute-intensive-task/WA_JavaTSPClient.png\n[svc_bus_node]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_02_SvcBusNode.jpg\n[create_namespace]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_03_CreateNewSvcNamespace.jpg\n[avail_namespaces]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_04_SvcBusNode_AvailNamespaces.jpg\n[namespace_list]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_05_NamespaceList.jpg\n[properties_pane]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_06_PropertiesPane.jpg\n[default_key]: ./media/virtual-machines-java-run-compute-intensive-task/SvcBusQueues_07_DefaultKey.jpg\n[add_ca_cert]: ../java-add-certificate-ca-store.md\n"
}