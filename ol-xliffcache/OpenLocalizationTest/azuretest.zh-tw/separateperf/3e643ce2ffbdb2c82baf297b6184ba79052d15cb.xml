{
  "nodes": [
    {
      "content": "Using linked templates with Azure Resource Manager",
      "pos": [
        26,
        76
      ]
    },
    {
      "content": "Describes how to use linked templates in an Azure Resource Manager template to create a modular template solution.",
      "pos": [
        94,
        208
      ]
    },
    {
      "content": "Shows how to pass parameters values, specify a parameter file, and dynamically created URLs.",
      "pos": [
        209,
        301
      ]
    },
    {
      "content": "Using linked templates with Azure Resource Manager",
      "pos": [
        608,
        658
      ]
    },
    {
      "content": "From within one Azure Resource Manager template, you can link to another template which enables you to decompose your deployment into a set of targeted, purpose-specific templates.",
      "pos": [
        660,
        840
      ]
    },
    {
      "content": "Just as with decomposing an application",
      "pos": [
        841,
        880
      ]
    },
    {
      "content": "into a number of code classes, decomposition provides benefits in terms of testing, re-use, and readability.",
      "pos": [
        882,
        990
      ]
    },
    {
      "content": "You can pass parameters from a main template to a linked template, and those parameters can directly map to parameters or variables exposed by the calling template.",
      "pos": [
        994,
        1158
      ]
    },
    {
      "content": "The linked template can also pass an output variable back",
      "pos": [
        1159,
        1216
      ]
    },
    {
      "content": "to the source template, enabling a two-way data exchange between templates.",
      "pos": [
        1218,
        1293
      ]
    },
    {
      "content": "Linking to a template",
      "pos": [
        1298,
        1319
      ]
    },
    {
      "content": "You create a link between two templates by adding a deployment resource within the main template that points to the linked template.",
      "pos": [
        1321,
        1453
      ]
    },
    {
      "content": "You set the <bpt id=\"p1\">**</bpt>templateLink<ept id=\"p1\">**</ept> property to the URI of the linked template.",
      "pos": [
        1454,
        1526
      ]
    },
    {
      "content": "You can",
      "pos": [
        1527,
        1534
      ]
    },
    {
      "content": "provide parameter values for the linked template either by specifying the values directly in your template or by",
      "pos": [
        1536,
        1648
      ]
    },
    {
      "content": "linking to a parameter file.",
      "pos": [
        1650,
        1678
      ]
    },
    {
      "content": "The following example uses the <bpt id=\"p1\">**</bpt>parameters<ept id=\"p1\">**</ept> property to specify a paramter value directly.",
      "pos": [
        1679,
        1771
      ]
    },
    {
      "content": "Resource Manager must be able to access the linked template, which means you cannot specify a local file for the linked template.",
      "pos": [
        2317,
        2446
      ]
    },
    {
      "content": "You can only provide a URI value that includes either <bpt id=\"p1\">**</bpt>http<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>https<ept id=\"p2\">**</ept>.",
      "pos": [
        2447,
        2523
      ]
    },
    {
      "content": "One option is to place your linked template in a storage account, and use the URI for that item, such as shown below.",
      "pos": [
        2524,
        2641
      ]
    },
    {
      "content": "Linking to a parameter file",
      "pos": [
        2801,
        2828
      ]
    },
    {
      "pos": [
        2830,
        2912
      ],
      "content": "The next example uses the <bpt id=\"p1\">**</bpt>parametersLink<ept id=\"p1\">**</ept> property to link to a parameter file."
    },
    {
      "pos": [
        3495,
        3613
      ],
      "content": "The the URI value for the linked parameter file cannot be a local file, and must include either <bpt id=\"p1\">**</bpt>http<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>https<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Using variables to link templates",
      "pos": [
        3618,
        3651
      ]
    },
    {
      "content": "The previous examples showed hard-coded URL values for the template links.",
      "pos": [
        3653,
        3727
      ]
    },
    {
      "content": "This approach might work for a simple template but it does not work well when working with a large set of modular templates.",
      "pos": [
        3728,
        3852
      ]
    },
    {
      "content": "Instead, you can create a static variable that stores a base URL",
      "pos": [
        3853,
        3917
      ]
    },
    {
      "content": "for the main template and then dynamically create URLs for the linked templates from that base URL.",
      "pos": [
        3919,
        4018
      ]
    },
    {
      "content": "The benefit of this approach is you can",
      "pos": [
        4019,
        4058
      ]
    },
    {
      "content": "easily move or fork the template because you only need to change the static variable in the main template.",
      "pos": [
        4060,
        4166
      ]
    },
    {
      "content": "The main template passes the correct URIs throughout the decomposed template.",
      "pos": [
        4167,
        4244
      ]
    },
    {
      "pos": [
        4246,
        4379
      ],
      "content": "The following example shows how to use a base URL to create two URLs for linked templates (<bpt id=\"p1\">**</bpt>sharedTemplateUrl<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>vmTemplate<ept id=\"p2\">**</ept>)."
    },
    {
      "content": "Passing values back from a linked template",
      "pos": [
        5119,
        5161
      ]
    },
    {
      "content": "If you need to pass a value from linked template to the main template, you can create a value in <bpt id=\"p1\">**</bpt>outputs<ept id=\"p1\">**</ept> section of the linked template.",
      "pos": [
        5163,
        5303
      ]
    },
    {
      "content": "For an example, see",
      "pos": [
        5304,
        5323
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Sharing State in Azure Resource Manager Templates<ept id=\"p1\">](best-practices-resource-manager-state.md)</ept>.",
      "pos": [
        5325,
        5419
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        5424,
        5434
      ]
    },
    {
      "content": "Authoring templates",
      "pos": [
        5438,
        5457
      ]
    },
    {
      "content": "Deploying templates",
      "pos": [
        5503,
        5522
      ]
    },
    {
      "content": "test",
      "pos": [
        5573,
        5577
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Using linked templates with Azure Resource Manager\"\n   description=\"Describes how to use linked templates in an Azure Resource Manager template to create a modular template solution. Shows how to pass parameters values, specify a parameter file, and dynamically created URLs.\"\n   services=\"azure-resource-manager\"\n   documentationCenter=\"na\"\n   authors=\"tfitzmac\"\n   manager=\"wpickett\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"azure-resource-manager\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"na\"\n   ms.date=\"09/02/2015\"\n   ms.author=\"tomfitz\"/>\n\n# Using linked templates with Azure Resource Manager\n\nFrom within one Azure Resource Manager template, you can link to another template which enables you to decompose your deployment into a set of targeted, purpose-specific templates. Just as with decomposing an application \ninto a number of code classes, decomposition provides benefits in terms of testing, re-use, and readability.  \n\nYou can pass parameters from a main template to a linked template, and those parameters can directly map to parameters or variables exposed by the calling template. The linked template can also pass an output variable back \nto the source template, enabling a two-way data exchange between templates.\n\n## Linking to a template\n\nYou create a link between two templates by adding a deployment resource within the main template that points to the linked template. You set the **templateLink** property to the URI of the linked template. You can \nprovide parameter values for the linked template either by specifying the values directly in your template or by \nlinking to a parameter file. The following example uses the **parameters** property to specify a paramter value directly.\n\n    \"resources\": [ \n      { \n         \"apiVersion\": \"2015-01-01\", \n         \"name\": \"nestedTemplate\", \n         \"type\": \"Microsoft.Resources/deployments\", \n         \"properties\": { \n           \"mode\": \"incremental\", \n           \"templateLink\": {\n              \"uri\": \"https://www.contoso.com/AzureTemplates/newStorageAccount.json\",\n              \"contentVersion\": \"1.0.0.0\"\n           }, \n           \"parameters\": { \n              \"StorageAccountName\":{\"value\": \"[parameters('StorageAccountName')]\"} \n           } \n         } \n      } \n    ] \n\nResource Manager must be able to access the linked template, which means you cannot specify a local file for the linked template. You can only provide a URI value that includes either **http** or **https**. One option is to place your linked template in a storage account, and use the URI for that item, such as shown below.\n\n    \"templateLink\": {\n        \"uri\": \"http://mystorageaccount.blob.core.windows.net/templates/template.json\",\n        \"contentVersion\": \"1.0.0.0\",\n    }\n\n\n## Linking to a parameter file\n\nThe next example uses the **parametersLink** property to link to a parameter file.\n\n    \"resources\": [ \n      { \n         \"apiVersion\": \"2015-01-01\", \n         \"name\": \"nestedTemplate\", \n         \"type\": \"Microsoft.Resources/deployments\", \n         \"properties\": { \n           \"mode\": \"incremental\", \n           \"templateLink\": {\n              \"uri\":\"https://www.contoso.com/AzureTemplates/newStorageAccount.json\",\n              \"contentVersion\":\"1.0.0.0\"\n           }, \n           \"parametersLink\": { \n              \"uri\":\"https://www.contoso.com/AzureTemplates/parameters.json\",\n              \"contentVersion\":\"1.0.0.0\"\n           } \n         } \n      } \n    ] \n\nThe the URI value for the linked parameter file cannot be a local file, and must include either **http** or **https**.\n\n## Using variables to link templates\n\nThe previous examples showed hard-coded URL values for the template links. This approach might work for a simple template but it does not work well when working with a large set of modular templates. Instead, you can create a static variable that stores a base URL \nfor the main template and then dynamically create URLs for the linked templates from that base URL. The benefit of this approach is you can \neasily move or fork the template because you only need to change the static variable in the main template. The main template passes the correct URIs throughout the decomposed template.\n\nThe following example shows how to use a base URL to create two URLs for linked templates (**sharedTemplateUrl** and **vmTemplate**). \n\n    \"variables\": {\n        \"templateBaseUrl\": \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/postgresql-on-ubuntu/\",\n        \"sharedTemplateUrl\": \"[concat(variables('templateBaseUrl'), 'shared-resources.json')]\",\n        \"tshirtSizeSmall\": {\n            \"vmSize\": \"Standard_A1\",\n            \"diskSize\": 1023,\n            \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-2disk-resources.json')]\",\n            \"vmCount\": 2,\n            \"slaveCount\": 1,\n            \"storage\": {\n                \"name\": \"[parameters('storageAccountNamePrefix')]\",\n                \"count\": 1,\n                \"pool\": \"db\",\n                \"map\": [0,0],\n                \"jumpbox\": 0\n            }\n        }\n    }\n\n## Passing values back from a linked template\n\nIf you need to pass a value from linked template to the main template, you can create a value in **outputs** section of the linked template. For an example, see \n[Sharing State in Azure Resource Manager Templates](best-practices-resource-manager-state.md).\n\n## Next steps\n- [Authoring templates](./resource-group-authoring-templates.md)\n- [Deploying templates](azure-portal/resource-group-template-deploy.md)\n\ntest\n"
}