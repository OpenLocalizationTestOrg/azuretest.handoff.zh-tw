{
  "nodes": [
    {
      "content": "How to deploy a SQL Database to SQL Azure",
      "pos": [
        28,
        69
      ]
    },
    {
      "content": "Deploy a SQL Server database to Azure SQL Database using the Wizard in SQL Server 2016 Management Studio.",
      "pos": [
        89,
        194
      ]
    },
    {
      "content": "How to Deploy a SQL Server database to Azure SQL Database",
      "pos": [
        516,
        573
      ]
    },
    {
      "content": "In this article, you'll use the <bpt id=\"p1\">**</bpt>Deploy Database to Azure SQL Database wizard<ept id=\"p1\">**</ept> to upload a sample database to Azure SQL Database.",
      "pos": [
        575,
        706
      ]
    },
    {
      "content": "You must download <bpt id=\"p1\">**</bpt>SQL Server 2016 Management Studio (CTP 2.1)<ept id=\"p1\">**</ept> for this tutorial.",
      "pos": [
        707,
        791
      ]
    },
    {
      "content": "Estimated time to completion: 15 minutes (includes download time)",
      "pos": [
        793,
        858
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This tutorial uses a \"school\" sample database that is purposefully simple; all of its objects are compatible with Azure SQL Database, eliminating the need to modify or prepare the database for migration.",
      "pos": [
        862,
        1078
      ]
    },
    {
      "content": "If you are migrating a more complex existing database, you could also consider using the <bpt id=\"p1\">[</bpt>SQL Database Migration Wizard<ept id=\"p1\">](http://sqlazuremw.codeplex.com/)</ept> and see this <bpt id=\"p2\">[</bpt>overview<ept id=\"p2\">](sql-database-cloud-migrate.md)</ept>.",
      "pos": [
        1079,
        1288
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1293,
        1306
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>Microsoft Azure account<ept id=\"p1\">**</ept>.",
      "pos": [
        1308,
        1338
      ]
    },
    {
      "content": "For a free trial, see this <bpt id=\"p1\">[</bpt>offer<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/)</ept>.",
      "pos": [
        1339,
        1422
      ]
    },
    {
      "content": "Download <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SQL Server Management Studio<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/mt238290.aspx)</ept>.",
      "pos": [
        1424,
        1518
      ]
    },
    {
      "content": "(For more information about the tool, see <bpt id=\"p1\">[</bpt>SQL Server Management Studio - June 2015 Release Notes<ept id=\"p1\">](https://msdn.microsoft.com/library/mt238486.aspx)</ept>.)",
      "pos": [
        1520,
        1670
      ]
    },
    {
      "content": "An existing <bpt id=\"p1\">**</bpt>Azure SQL Database server<ept id=\"p1\">**</ept>.",
      "pos": [
        1672,
        1714
      ]
    },
    {
      "content": "In order to create a server, you must create at least one database first.",
      "pos": [
        1715,
        1788
      ]
    },
    {
      "content": "When you create a database, you have the choice of creating it on a new server, or on an existing server.",
      "pos": [
        1789,
        1894
      ]
    },
    {
      "content": "For instructions on creating a new database (on a new server), see <bpt id=\"p1\">[</bpt>Create your first Azure SQL Database<ept id=\"p1\">](sql-database-get-started.md)</ept>.",
      "pos": [
        1895,
        2030
      ]
    },
    {
      "content": "Create the school database on an on-premises server",
      "pos": [
        2035,
        2086
      ]
    },
    {
      "content": "Run these scripts in SQL Server Management Studio (SSMS) to create an on-premises version of the \"school\" database.",
      "pos": [
        2088,
        2203
      ]
    },
    {
      "content": "In SSMS, connect to an on-premises server.",
      "pos": [
        2208,
        2250
      ]
    },
    {
      "content": "Right-click <bpt id=\"p1\">**</bpt>Databases<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>New Database<ept id=\"p2\">**</ept>, and enter <bpt id=\"p3\">*</bpt>school<ept id=\"p3\">*</ept>.",
      "pos": [
        2251,
        2321
      ]
    },
    {
      "pos": [
        2326,
        2371
      ],
      "content": "Right-click on <bpt id=\"p1\">*</bpt>school<ept id=\"p1\">*</ept>, click <bpt id=\"p2\">**</bpt>New Query<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Copy and execute this script:",
      "pos": [
        2377,
        2406
      ]
    },
    {
      "content": "Next, copy and execute the Insert Data script.",
      "pos": [
        10789,
        10835
      ]
    },
    {
      "content": "You now have an on-premises database that you can export to Azure.",
      "pos": [
        24113,
        24179
      ]
    },
    {
      "content": "Next, you'll run a wizard that creates a .bacpac file, loads it onto Azure, and imports it into SQL Database.",
      "pos": [
        24180,
        24289
      ]
    },
    {
      "content": "Deploy the database to Azure SQL",
      "pos": [
        24299,
        24331
      ]
    },
    {
      "pos": [
        24341,
        24500
      ],
      "content": "In Management Studio, right-click the school database that you just created, point to <bpt id=\"p1\">**</bpt>Tasks<ept id=\"p1\">**</ept>, and click <bpt id=\"p2\">**</bpt>Deploy Database to Microsoft Azure SQL Database<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        24504,
        24580
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Deployment Settings<ept id=\"p1\">**</ept>, enter a name for the database, such as <bpt id=\"p2\">*</bpt>school<ept id=\"p2\">*</ept>."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Connect<ept id=\"p1\">**</ept>.",
      "pos": [
        24584,
        24602
      ]
    },
    {
      "content": "To solve problems with connectivity, try this <bpt id=\"p1\">[</bpt>troubleshooter<ept id=\"p1\">](https://support2.microsoft.com/common/survey.aspx?scid=sw;en;3844&amp;showpage=1)</ept>.",
      "pos": [
        24603,
        24744
      ]
    },
    {
      "pos": [
        24748,
        24841
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Server name<ept id=\"p1\">**</ept>, enter the 10-character server name, followed by <bpt id=\"p2\">**</bpt>.database.windows.net<ept id=\"p2\">**</ept>"
    },
    {
      "pos": [
        24845,
        24905
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Authentication<ept id=\"p1\">**</ept>, choose <bpt id=\"p2\">**</bpt>SQL Server Authentication<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Enter the administrator login name and password that you created when provisioning the SQL Database logical server.",
      "pos": [
        24909,
        25024
      ]
    },
    {
      "pos": [
        25028,
        25046
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        25051,
        25121
      ],
      "content": "In Connection Properties, in <bpt id=\"p1\">**</bpt>Connect to database<ept id=\"p1\">**</ept>, type <bpt id=\"p2\">**</bpt>master<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        25127,
        25252
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> You must connect to the <bpt id=\"p2\">**</bpt>master<ept id=\"p2\">**</ept> database whenever you want to create a database on the Azure SQL Database server."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Connect<ept id=\"p1\">**</ept>.",
      "pos": [
        25258,
        25276
      ]
    },
    {
      "content": "This step concludes the connection specification and takes you back to the wizard.",
      "pos": [
        25277,
        25359
      ]
    },
    {
      "pos": [
        25364,
        25418
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Finish<ept id=\"p2\">**</ept> to run the wizard."
    },
    {
      "content": "How to: Verify database deployment",
      "pos": [
        25428,
        25462
      ]
    },
    {
      "pos": [
        25471,
        25547
      ],
      "content": "In Management Studio, under <bpt id=\"p1\">**</bpt>Object Explorer<ept id=\"p1\">**</ept>, click the <bpt id=\"p2\">**</bpt>Connect<ept id=\"p2\">**</ept> icon."
    },
    {
      "pos": [
        25551,
        25654
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Server<ept id=\"p1\">**</ept> name box, type the name of the Azure SQL server, followed by <bpt id=\"p2\">**</bpt>database.windows.net<ept id=\"p2\">**</ept>"
    },
    {
      "pos": [
        25658,
        25717
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Authentication<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>SQL Server Authenication<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Enter the administrator login name and password you created when provisioning the server.",
      "pos": [
        25721,
        25810
      ]
    },
    {
      "pos": [
        25815,
        25844
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Connect to database<ept id=\"p1\">**</ept> dropdown, and click <bpt id=\"p2\">**</bpt>Browse server<ept id=\"p2\">**</ept>.",
      "pos": [
        25848,
        25920
      ]
    },
    {
      "content": "In the following dialog box, click <bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept> to allow browsing of the server.",
      "pos": [
        25921,
        25996
      ]
    },
    {
      "pos": [
        26000,
        26062
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>school<ept id=\"p1\">**</ept> database to select it, then click <bpt id=\"p2\">**</bpt>OK<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Then click <bpt id=\"p1\">**</bpt>Connect<ept id=\"p1\">**</ept>.",
      "pos": [
        26067,
        26090
      ]
    },
    {
      "content": "To solve problems with connectivity, try this <bpt id=\"p1\">[</bpt>troubleshooter<ept id=\"p1\">](https://support2.microsoft.com/common/survey.aspx?scid=sw;en;3844&amp;showpage=1)</ept>.",
      "pos": [
        26091,
        26232
      ]
    },
    {
      "content": "Expand the <bpt id=\"p1\">**</bpt>Databases<ept id=\"p1\">**</ept> folder.",
      "pos": [
        26236,
        26268
      ]
    },
    {
      "content": "You should see the <bpt id=\"p1\">**</bpt>school<ept id=\"p1\">**</ept> database in the list.",
      "pos": [
        26269,
        26320
      ]
    },
    {
      "pos": [
        26326,
        26386
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> You must connect to the database you want to query."
    },
    {
      "pos": [
        26391,
        26438
      ],
      "content": "Right-click <bpt id=\"p1\">**</bpt>school<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>New Query<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Execute the following query to verify that data is accessible.",
      "pos": [
        26442,
        26504
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        27243,
        27253
      ]
    },
    {
      "content": "For a tutorial on creating a new Azure SQL database, see <bpt id=\"p1\">[</bpt>Getting Started with SQL Database Administration<ept id=\"p1\">](sql-database-get-started.md)</ept>.",
      "pos": [
        27255,
        27392
      ]
    },
    {
      "content": "For the basics of connecting to an Azure SQL database from a C# app, see <bpt id=\"p1\">[</bpt>Connect to and query your SQL Database with C#<ept id=\"p1\">](sql-database-connect-query.md)</ept>.",
      "pos": [
        27393,
        27546
      ]
    },
    {
      "content": "For more tutorials on connection from various platforms (such as PHP) see <bpt id=\"p1\">[</bpt>Azure SQL Database Development: How-to Topics<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ee621787.aspx)</ept>.",
      "pos": [
        27547,
        27725
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to deploy a SQL Database to SQL Azure\" \n    description=\"Deploy a SQL Server database to Azure SQL Database using the Wizard in SQL Server 2016 Management Studio.\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"sidneyh\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"data-management\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"07/17/2015\" \n    ms.author=\"sidneyh\"/>\n\n\n# How to Deploy a SQL Server database to Azure SQL Database\n\nIn this article, you'll use the **Deploy Database to Azure SQL Database wizard** to upload a sample database to Azure SQL Database. You must download **SQL Server 2016 Management Studio (CTP 2.1)** for this tutorial.\n\nEstimated time to completion: 15 minutes (includes download time)\n\n> [AZURE.NOTE] This tutorial uses a \"school\" sample database that is purposefully simple; all of its objects are compatible with Azure SQL Database, eliminating the need to modify or prepare the database for migration. If you are migrating a more complex existing database, you could also consider using the [SQL Database Migration Wizard](http://sqlazuremw.codeplex.com/) and see this [overview](sql-database-cloud-migrate.md).\n\n## Prerequisites\n\nA **Microsoft Azure account**. For a free trial, see this [offer](http://azure.microsoft.com/pricing/free-trial/).\n\nDownload [**SQL Server Management Studio**](https://msdn.microsoft.com/library/mt238290.aspx).  (For more information about the tool, see [SQL Server Management Studio - June 2015 Release Notes](https://msdn.microsoft.com/library/mt238486.aspx).)\n\nAn existing **Azure SQL Database server**. In order to create a server, you must create at least one database first. When you create a database, you have the choice of creating it on a new server, or on an existing server. For instructions on creating a new database (on a new server), see [Create your first Azure SQL Database](sql-database-get-started.md).\n\n## Create the school database on an on-premises server\n\nRun these scripts in SQL Server Management Studio (SSMS) to create an on-premises version of the \"school\" database.\n\n1. In SSMS, connect to an on-premises server. Right-click **Databases**, click **New Database**, and enter *school*.\n\n2. Right-click on *school*, click **New Query**. \n\n3. Copy and execute this script: \n\n<div style=\"width:auto; height:300px; overflow:auto\"><pre>\n    -- Create the Department table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[Department]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[Department](\n        [DepartmentID] [int] NOT NULL,\n        [Name] [nvarchar](50) NOT NULL,\n        [Budget] [money] NOT NULL,\n        [StartDate] [datetime] NOT NULL,\n        [Administrator] [int] NULL,\n     CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED \n    (\n    [DepartmentID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    )\n    END;\n    GO\n\n    -- Create the Person table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[Person]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[Person](\n        [PersonID] [int] IDENTITY(1,1) NOT NULL,\n        [LastName] [nvarchar](50) NOT NULL,\n        [FirstName] [nvarchar](50) NOT NULL,\n        [HireDate] [datetime] NULL,\n        [EnrollmentDate] [datetime] NULL,\n     CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   \n    (\n    [PersonID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    ) \n    END;\n    GO\n\n    -- Create the OnsiteCourse table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[OnsiteCourse]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[OnsiteCourse](\n        [CourseID] [int] NOT NULL,\n        [Location] [nvarchar](50) NOT NULL,\n        [Days] [nvarchar](50) NOT NULL,\n        [Time] [smalldatetime] NOT NULL,\n     CONSTRAINT [PK_OnsiteCourse] PRIMARY KEY CLUSTERED \n    (\n        [CourseID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    ) \n    END;\n    GO\n\n    -- Create the OnlineCourse table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[OnlineCourse]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[OnlineCourse](\n        [CourseID] [int] NOT NULL,\n        [URL] [nvarchar](100) NOT NULL,\n     CONSTRAINT [PK_OnlineCourse] PRIMARY KEY CLUSTERED \n    (\n        [CourseID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    ) \n    END;\n    GO\n\n    --Create the StudentGrade table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[StudentGrade]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[StudentGrade](\n        [EnrollmentID] [int] IDENTITY(1,1) NOT NULL,\n        [CourseID] [int] NOT NULL,\n        [StudentID] [int] NOT NULL,\n        [Grade] [decimal](3, 2) NULL,\n     CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED \n    (\n        [EnrollmentID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    ) \n    END;\n    GO\n\n    -- Create the CourseInstructor table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[CourseInstructor]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[CourseInstructor](\n        [CourseID] [int] NOT NULL,\n        [PersonID] [int] NOT NULL,\n     CONSTRAINT [PK_CourseInstructor] PRIMARY KEY CLUSTERED \n    (\n        [CourseID] ASC,\n        [PersonID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    ) \n    END;\n    GO\n\n    -- Create the Course table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[Course]') \n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[Course](\n        [CourseID] [int] NOT NULL,\n        [Title] [nvarchar](100) NOT NULL,\n        [Credits] [int] NOT NULL,\n        [DepartmentID] [int] NOT NULL,\n     CONSTRAINT [PK_School.Course] PRIMARY KEY CLUSTERED \n    (\n        [CourseID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    )\n    END;\n    GO\n\n    -- Create the OfficeAssignment table.\n    IF NOT EXISTS (SELECT * FROM sys.objects \n        WHERE object_id = OBJECT_ID(N'[dbo].[OfficeAssignment]')\n        AND type in (N'U'))\n    BEGIN\n    CREATE TABLE [dbo].[OfficeAssignment](\n        [InstructorID] [int] NOT NULL,\n        [Location] [nvarchar](50) NOT NULL,\n        [Timestamp] [timestamp] NOT NULL,\n     CONSTRAINT [PK_OfficeAssignment] PRIMARY KEY CLUSTERED \n    (\n        [InstructorID] ASC\n    )WITH (IGNORE_DUP_KEY = OFF)\n    )\n    END;\n    GO\n\n    -- Define the relationship between OnsiteCourse and Course.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n       WHERE object_id = OBJECT_ID(N'[dbo].[FK_OnsiteCourse_Course]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[OnsiteCourse]'))\n    ALTER TABLE [dbo].[OnsiteCourse]  WITH CHECK ADD  \n       CONSTRAINT [FK_OnsiteCourse_Course] FOREIGN KEY([CourseID])\n    REFERENCES [dbo].[Course] ([CourseID]);\n    GO\n    ALTER TABLE [dbo].[OnsiteCourse] CHECK \n       CONSTRAINT [FK_OnsiteCourse_Course];\n    GO\n\n    -- Define the relationship between OnlineCourse and Course.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n       WHERE object_id = OBJECT_ID(N'[dbo].[FK_OnlineCourse_Course]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[OnlineCourse]'))\n    ALTER TABLE [dbo].[OnlineCourse]  WITH CHECK ADD  \n       CONSTRAINT [FK_OnlineCourse_Course] FOREIGN KEY([CourseID])\n    REFERENCES [dbo].[Course] ([CourseID]);\n    GO\n    ALTER TABLE [dbo].[OnlineCourse] CHECK \n       CONSTRAINT [FK_OnlineCourse_Course];\n    GO\n    -- Define the relationship between StudentGrade and Course.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n       WHERE object_id = OBJECT_ID(N'[dbo].[FK_StudentGrade_Course]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[StudentGrade]'))\n    ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  \n       CONSTRAINT [FK_StudentGrade_Course] FOREIGN KEY([CourseID])\n    REFERENCES [dbo].[Course] ([CourseID]);\n    GO\n    ALTER TABLE [dbo].[StudentGrade] CHECK \n       CONSTRAINT [FK_StudentGrade_Course];\n    GO\n\n    --Define the relationship between StudentGrade and Student.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n       WHERE object_id = OBJECT_ID(N'[dbo].[FK_StudentGrade_Student]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[StudentGrade]'))   \n    ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  \n       CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])\n    REFERENCES [dbo].[Person] ([PersonID]);\n    GO\n    ALTER TABLE [dbo].[StudentGrade] CHECK \n       CONSTRAINT [FK_StudentGrade_Student];\n    GO\n\n    -- Define the relationship between CourseInstructor and Course.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n     WHERE object_id = OBJECT_ID(N'[dbo].[FK_CourseInstructor_Course]')\n     AND parent_object_id = OBJECT_ID(N'[dbo].[CourseInstructor]'))\n    ALTER TABLE [dbo].[CourseInstructor]  WITH CHECK ADD  \n     CONSTRAINT [FK_CourseInstructor_Course] FOREIGN KEY([CourseID])\n    REFERENCES [dbo].[Course] ([CourseID]);\n    GO\n    ALTER TABLE [dbo].[CourseInstructor] CHECK \n      CONSTRAINT [FK_CourseInstructor_Course];\n    GO\n\n    -- Define the relationship between CourseInstructor and Person.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n      WHERE object_id = OBJECT_ID(N'[dbo].[FK_CourseInstructor_Person]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[CourseInstructor]'))\n    ALTER TABLE [dbo].[CourseInstructor]  WITH CHECK ADD  \n      CONSTRAINT [FK_CourseInstructor_Person] FOREIGN KEY([PersonID])\n    REFERENCES [dbo].[Person] ([PersonID]);\n    GO\n    ALTER TABLE [dbo].[CourseInstructor] CHECK \n     CONSTRAINT [FK_CourseInstructor_Person];\n    GO\n\n    -- Define the relationship between Course and Department.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n       WHERE object_id = OBJECT_ID(N'[dbo].[FK_Course_Department]')\n       AND parent_object_id = OBJECT_ID(N'[dbo].[Course]'))\n    ALTER TABLE [dbo].[Course]  WITH CHECK ADD  \n       CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])\n    REFERENCES [dbo].[Department] ([DepartmentID]);\n    GO\n    ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department];\n    GO\n\n    --Define the relationship between OfficeAssignment and Person.\n    IF NOT EXISTS (SELECT * FROM sys.foreign_keys \n      WHERE object_id = OBJECT_ID(N'[dbo].[FK_OfficeAssignment_Person]')\n      AND parent_object_id = OBJECT_ID(N'[dbo].[OfficeAssignment]'))\n    ALTER TABLE [dbo].[OfficeAssignment]  WITH CHECK ADD  \n      CONSTRAINT [FK_OfficeAssignment_Person] FOREIGN KEY([InstructorID])\n    REFERENCES [dbo].[Person] ([PersonID]);\n    GO\n    ALTER TABLE [dbo].[OfficeAssignment] CHECK \n     CONSTRAINT [FK_OfficeAssignment_Person];\n    GO\n</pre></div>\n\nNext, copy and execute the Insert Data script.\n\n<div style=\"width:auto; height:300px; overflow:auto\"><pre>\n    -- Insert data into the Person table.\n    SET IDENTITY_INSERT dbo.Person ON;\n    GO\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (1, 'Abercrombie', 'Kim', '1995-03-11', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (2, 'Barzdukas', 'Gytis', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (3, 'Justice', 'Peggy', null, '2001-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (4, 'Fakhouri', 'Fadi', '2002-08-06', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (5, 'Harui', 'Roger', '1998-07-01', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (6, 'Li', 'Yan', null, '2002-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (7, 'Norman', 'Laura', null, '2003-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (8, 'Olivotto', 'Nino', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (9, 'Tang', 'Wayne', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (10, 'Alonso', 'Meredith', null, '2002-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (11, 'Lopez', 'Sophia', null, '2004-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (12, 'Browning', 'Meredith', null, '2000-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (13, 'Anand', 'Arturo', null, '2003-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (14, 'Walker', 'Alexandra', null, '2000-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (15, 'Powell', 'Carson', null, '2004-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (16, 'Jai', 'Damien', null, '2001-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (17, 'Carlson', 'Robyn', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (18, 'Zheng', 'Roger', '2004-02-12', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (19, 'Bryant', 'Carson', null, '2001-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (20, 'Suarez', 'Robyn', null, '2004-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (21, 'Holt', 'Roger', null, '2004-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (22, 'Alexander', 'Carson', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (23, 'Morgan', 'Isaiah', null, '2001-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (24, 'Martin', 'Randall', null, '2005-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (25, 'Kapoor', 'Candace', '2001-01-15', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (26, 'Rogers', 'Cody', null, '2002-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (27, 'Serrano', 'Stacy', '1999-06-01', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (28, 'White', 'Anthony', null, '2001-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (29, 'Griffin', 'Rachel', null, '2004-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (30, 'Shan', 'Alicia', null, '2003-09-01');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (31, 'Stewart', 'Jasmine', '1997-10-12', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (32, 'Xu', 'Kristen', '2001-7-23', null);\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (33, 'Gao', 'Erica', null, '2003-01-30');\n    INSERT INTO dbo.Person (PersonID, LastName, FirstName, HireDate, EnrollmentDate)\n    VALUES (34, 'Van Houten', 'Roger', '2000-12-07', null);\n    GO\n    SET IDENTITY_INSERT dbo.Person OFF;\n    GO\n    -- Insert data into the Department table.\n    INSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\n    VALUES (1, 'Engineering', 350000.00, '2007-09-01', 2);\n    INSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\n    VALUES (2, 'English', 120000.00, '2007-09-01', 6);\n    INSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\n    VALUES (4, 'Economics', 200000.00, '2007-09-01', 4);\n    INSERT INTO dbo.Department (DepartmentID, [Name], Budget, StartDate, Administrator)\n    VALUES (7, 'Mathematics', 250000.00, '2007-09-01', 3);\n    GO\n    -- Insert data into the Course table.\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (1050, 'Chemistry', 4, 1);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (1061, 'Physics', 4, 1);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (1045, 'Calculus', 4, 7);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (2030, 'Poetry', 2, 2);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (2021, 'Composition', 3, 2);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (2042, 'Literature', 4, 2);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (4022, 'Microeconomics', 3, 4);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (4041, 'Macroeconomics', 3, 4);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (4061, 'Quantitative', 2, 4);\n    INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID)\n    VALUES (3141, 'Trigonometry', 4, 7);\n    GO\n    -- Insert data into the OnlineCourse table.\n    INSERT INTO dbo.OnlineCourse (CourseID, URL)\n    VALUES (2030, 'http://www.fineartschool.net/Poetry');\n    INSERT INTO dbo.OnlineCourse (CourseID, URL)\n    VALUES (2021, 'http://www.fineartschool.net/Composition');\n    INSERT INTO dbo.OnlineCourse (CourseID, URL)\n    VALUES (4041, 'http://www.fineartschool.net/Macroeconomics');\n    INSERT INTO dbo.OnlineCourse (CourseID, URL)\n    VALUES (3141, 'http://www.fineartschool.net/Trigonometry');\n    --Insert data into OnsiteCourse table.\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (1050, '123 Smith', 'MTWH', '11:30');\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (1061, '234 Smith', 'TWHF', '13:15');\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (1045, '121 Smith','MWHF', '15:30');\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (4061, '22 Williams', 'TH', '11:15');\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (2042, '225 Adams', 'MTWH', '11:00');\n    INSERT INTO dbo.OnsiteCourse (CourseID, Location, Days, [Time])\n    VALUES (4022, '23 Williams', 'MWF', '9:00');\n    -- Insert data into the CourseInstructor table.\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (1050, 1);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (1061, 31);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (1045, 5);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (2030, 4);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (2021, 27);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (2042, 25);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (4022, 18);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (4041, 32);\n    INSERT INTO dbo.CourseInstructor(CourseID, PersonID)\n    VALUES (4061, 34);\n    GO\n    --Insert data into the OfficeAssignment table.\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (1, '17 Smith');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (4, '29 Adams');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (5, '37 Williams');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (18, '143 Smith');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (25, '57 Adams');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (27, '271 Williams');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (31, '131 Smith');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (32, '203 Williams');\n    INSERT INTO dbo.OfficeAssignment(InstructorID, Location)\n    VALUES (34, '213 Smith');\n    -- Insert data into the StudentGrade table.\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2021, 2, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2030, 2, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2021, 3, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2030, 3, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2021, 6, 2.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2042, 6, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2021, 7, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2042, 7, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2021, 8, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (2042, 8, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 9, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 10, null);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 11, 2.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 12, null);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4061, 12, null);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 14, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 13, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4061, 13, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 14, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 15, 2.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 16, 2);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 17, null);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 19, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4061, 20, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4061, 21, 2);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 22, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4041, 22, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4061, 22, 2.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (4022, 23, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1045, 23, 1.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 24, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 25, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1050, 26, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 26, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 27, 3);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1045, 28, 2.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1050, 28, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 29, 4);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1050, 30, 3.5);\n    INSERT INTO dbo.StudentGrade (CourseID, StudentID, Grade)\n    VALUES (1061, 30, 4);\n    GO\n</pre></div>\n    \nYou now have an on-premises database that you can export to Azure. Next, you'll run a wizard that creates a .bacpac file, loads it onto Azure, and imports it into SQL Database.\n\n    \n## Deploy the database to Azure SQL \n    \n1. In Management Studio, right-click the school database that you just created, point to **Tasks**, and click **Deploy Database to Microsoft Azure SQL Database**.\n2. In **Deployment Settings**, enter a name for the database, such as *school*.\n5. Click **Connect**. To solve problems with connectivity, try this [troubleshooter](https://support2.microsoft.com/common/survey.aspx?scid=sw;en;3844&showpage=1).\n6. In **Server name**, enter the 10-character server name, followed by **.database.windows.net**\n7. In **Authentication**, choose **SQL Server Authentication**.\n8. Enter the administrator login name and password that you created when provisioning the SQL Database logical server.\n9. Click **Options**.\n10. In Connection Properties, in **Connect to database**, type **master**.\n\n    **Note** You must connect to the **master** database whenever you want to create a database on the Azure SQL Database server. \n11. Click **Connect**. This step concludes the connection specification and takes you back to the wizard.\n12. Click **Next** and click **Finish** to run the wizard.\n\n    \n## How to: Verify database deployment\n    \n1. In Management Studio, under **Object Explorer**, click the **Connect** icon.\n2. In the **Server** name box, type the name of the Azure SQL server, followed by **database.windows.net**\n3. In **Authentication**, select **SQL Server Authenication**.\n4. Enter the administrator login name and password you created when provisioning the server. \n5. Click the **Options** button.\n6. Click the **Connect to database** dropdown, and click **Browse server**. In the following dialog box, click **Yes** to allow browsing of the server.\n7. Click the **school** database to select it, then click **OK**. \n8. Then click **Connect**. To solve problems with connectivity, try this [troubleshooter](https://support2.microsoft.com/common/survey.aspx?scid=sw;en;3844&showpage=1).\n2. Expand the **Databases** folder. You should see the **school** database in the list.\n\n    **Note** You must connect to the database you want to query. \n3. Right-click **school** and click **New Query**.\n4. Execute the following query to verify that data is accessible.\n\n        SELECT\n            Course.Title as \"Course Title\"\n                ,Department.Name as \"Department\"\n                ,Person.LastName as \"Instructor\"\n                ,OnsiteCourse.Location as \"Location\"\n                ,OnsiteCourse.Days as \"Days\"\n                ,OnsiteCourse.Time as \"Time\"\n        FROM\n             Course\n             INNER JOIN Department\n              ON Course.DepartmentID = Department.DepartmentID\n             INNER JOIN CourseInstructor\n               ON Course.CourseID = CourseInstructor.CourseID\n             INNER JOIN Person\n               ON CourseInstructor.PersonID = Person.PersonID\n             INNER JOIN OnsiteCourse\n        ON OnsiteCourse.CourseID = CourseInstructor.CourseID;\n        \n## Next steps\n\nFor a tutorial on creating a new Azure SQL database, see [Getting Started with SQL Database Administration](sql-database-get-started.md). For the basics of connecting to an Azure SQL database from a C# app, see [Connect to and query your SQL Database with C#](sql-database-connect-query.md). For more tutorials on connection from various platforms (such as PHP) see [Azure SQL Database Development: How-to Topics](https://msdn.microsoft.com/library/azure/ee621787.aspx).\n\n "
}