<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Automatically Scale Compute Nodes in an Azure Batch Pool | Microsoft Azure</source>
          <target state="new">Automatically Scale Compute Nodes in an Azure Batch Pool | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enable automatic scaling on a cloud pool to dynamically adjust the number of compute nodes in the pool.</source>
          <target state="new">Enable automatic scaling on a cloud pool to dynamically adjust the number of compute nodes in the pool.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Automatically scale compute nodes in an Azure Batch pool</source>
          <target state="new">Automatically scale compute nodes in an Azure Batch pool</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Automatically scaling compute nodes in an Azure Batch pool is the dynamic adjustment of processing power used by your application.</source>
          <target state="new">Automatically scaling compute nodes in an Azure Batch pool is the dynamic adjustment of processing power used by your application.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This ease of adjustment saves you time and money.</source>
          <target state="new">This ease of adjustment saves you time and money.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To learn more about compute nodes and pools, see the <bpt id="p1">[</bpt>Azure Batch technical overview<ept id="p1">](batch-technical-overview.md)</ept>.</source>
          <target state="new">To learn more about compute nodes and pools, see the <bpt id="p1">[</bpt>Azure Batch technical overview<ept id="p1">](batch-technical-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Automatic scaling occurs when it is enabled on a pool and a formula is associated with the pool.</source>
          <target state="new">Automatic scaling occurs when it is enabled on a pool and a formula is associated with the pool.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The formula is used to determine the number of compute nodes that are needed to process the application.</source>
          <target state="new">The formula is used to determine the number of compute nodes that are needed to process the application.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Acting on samples that are collected periodically, the number of available compute nodes in the pool are adjusted every 15 minutes based on the associated formula.</source>
          <target state="new">Acting on samples that are collected periodically, the number of available compute nodes in the pool are adjusted every 15 minutes based on the associated formula.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Automatic scaling can be set when a pool is created, or enabled later on an existing pool.</source>
          <target state="new">Automatic scaling can be set when a pool is created, or enabled later on an existing pool.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The formula can also be updated on a pool where automatic scaling was previously enabled.</source>
          <target state="new">The formula can also be updated on a pool where automatic scaling was previously enabled.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It’s always good practice to evaluate a formula before assigning it to a pool, and it’s important to monitor the status of the automatic scaling runs; we discuss each of these topics below.</source>
          <target state="new">It’s always good practice to evaluate a formula before assigning it to a pool, and it’s important to monitor the status of the automatic scaling runs; we discuss each of these topics below.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Each Azure Batch account is limited to a maximum number of compute nodes that can be used for processing.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Each Azure Batch account is limited to a maximum number of compute nodes that can be used for processing.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The system will create nodes only up to that limit and therefore may not reach the target numbers specified by a formula.</source>
          <target state="new">The system will create nodes only up to that limit and therefore may not reach the target numbers specified by a formula.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Scale compute resources automatically</source>
          <target state="new">Scale compute resources automatically</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The scaling formulas you define determine the number of available compute nodes in a pool for the next interval of processing.</source>
          <target state="new">The scaling formulas you define determine the number of available compute nodes in a pool for the next interval of processing.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An automatic scaling formula is simply a string value assigned to a pool's <bpt id="p1">[</bpt>autoScaleFormula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820173.aspx)</ept> element in a request body (REST API) or <bpt id="p2">[</bpt>CloudPool.AutoScaleFormula<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> property (.NET API).</source>
          <target state="new">An automatic scaling formula is simply a string value assigned to a pool's <bpt id="p1">[</bpt>autoScaleFormula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820173.aspx)</ept> element in a request body (REST API) or <bpt id="p2">[</bpt>CloudPool.AutoScaleFormula<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> property (.NET API).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This formula string cannot exceed 8KB in size, can include up to 100 statements separated by semicolons, and can include line breaks and comments.</source>
          <target state="new">This formula string cannot exceed 8KB in size, can include up to 100 statements separated by semicolons, and can include line breaks and comments.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Statements in a formula are free-formed expressions.</source>
          <target state="new">Statements in a formula are free-formed expressions.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>They can include any system-defined variables, user-defined variables, constant values, and supported operations on these variables or constants.</source>
          <target state="new">They can include any system-defined variables, user-defined variables, constant values, and supported operations on these variables or constants.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Complex formulas are created by using multiple statements and variables:</source>
          <target state="new">Complex formulas are created by using multiple statements and variables:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> An automatic scaling formula is comprised of <bpt id="p1">[</bpt>Batch REST<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820158.aspx)</ept> API variables, types, operations, and functions.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> An automatic scaling formula is comprised of <bpt id="p1">[</bpt>Batch REST<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820158.aspx)</ept> API variables, types, operations, and functions.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These are used in formula strings even while working with the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library.</source>
          <target state="new">These are used in formula strings even while working with the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="new">Variables</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Both system-defined and user-defined variables can be used in a formula.</source>
          <target state="new">Both system-defined and user-defined variables can be used in a formula.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> and <bpt id="p2">*</bpt>set<ept id="p2">*</ept> the value of these <bpt id="p3">**</bpt>system-defined variables<ept id="p3">**</ept> to manage the number of compute nodes in a pool.</source>
          <target state="new"><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> and <bpt id="p2">*</bpt>set<ept id="p2">*</ept> the value of these <bpt id="p3">**</bpt>system-defined variables<ept id="p3">**</ept> to manage the number of compute nodes in a pool.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="new">Variable</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>$TargetDedicated</source>
          <target state="new">$TargetDedicated</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The target number of dedicated compute nodes for the pool.</source>
          <target state="new">The target number of dedicated compute nodes for the pool.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The value can be changed based upon actual usage for tasks.</source>
          <target state="new">The value can be changed based upon actual usage for tasks.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>$NodeDeallocationOption</source>
          <target state="new">$NodeDeallocationOption</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The action that occurs when compute nodes are removed from a pool.</source>
          <target state="new">The action that occurs when compute nodes are removed from a pool.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Possible values are:</source>
          <target state="new">Possible values are:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>requeue<ph id="ph1">&lt;/b&gt;</ph> – Terminate tasks immediately and put them back on the job queue so that they are rescheduled.</source>
          <target state="new">requeue<ph id="ph1">&lt;/b&gt;</ph> – Terminate tasks immediately and put them back on the job queue so that they are rescheduled.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>terminate<ph id="ph1">&lt;/b&gt;</ph> – Terminate tasks immediately and remove them from the job queue.</source>
          <target state="new">terminate<ph id="ph1">&lt;/b&gt;</ph> – Terminate tasks immediately and remove them from the job queue.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>taskcompletion<ph id="ph1">&lt;/b&gt;</ph> – Wait for currently running tasks to finish and then remove the node from the pool.</source>
          <target state="new">taskcompletion<ph id="ph1">&lt;/b&gt;</ph> – Wait for currently running tasks to finish and then remove the node from the pool.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>retaineddata<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2"> -</ph> Wait for all the local task retained data on the node to be cleaned up before removing the node from the pool.</source>
          <target state="new">retaineddata<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2"> -</ph> Wait for all the local task retained data on the node to be cleaned up before removing the node from the pool.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> the value of these <bpt id="p2">**</bpt>system-defined variables<ept id="p2">**</ept> to make adjustments based on metrics from compute nodes in the samples.</source>
          <target state="new"><bpt id="p1">*</bpt>Get<ept id="p1">*</ept> the value of these <bpt id="p2">**</bpt>system-defined variables<ept id="p2">**</ept> to make adjustments based on metrics from compute nodes in the samples.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These variables are read-only.</source>
          <target state="new">These variables are read-only.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="new">Variable</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>$CPUPercent</source>
          <target state="new">$CPUPercent</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The average percentage of CPU usage</source>
          <target state="new">The average percentage of CPU usage</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>$WallClockSeconds</source>
          <target state="new">$WallClockSeconds</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The number of seconds consumed</source>
          <target state="new">The number of seconds consumed</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>$MemoryBytes</source>
          <target state="new">$MemoryBytes</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The average number of megabytes used</source>
          <target state="new">The average number of megabytes used</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>$DiskBytes</source>
          <target state="new">$DiskBytes</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The average number of gigabytes used on the local disks</source>
          <target state="new">The average number of gigabytes used on the local disks</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>$DiskReadBytes</source>
          <target state="new">$DiskReadBytes</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The number of bytes read</source>
          <target state="new">The number of bytes read</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>$DiskWriteBytes</source>
          <target state="new">$DiskWriteBytes</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The number of bytes written</source>
          <target state="new">The number of bytes written</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>$DiskReadOps</source>
          <target state="new">$DiskReadOps</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The count of read disk operations performed</source>
          <target state="new">The count of read disk operations performed</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>$DiskWriteOps</source>
          <target state="new">$DiskWriteOps</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The count of write disk operations performed</source>
          <target state="new">The count of write disk operations performed</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>$NetworkInBytes</source>
          <target state="new">$NetworkInBytes</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The number of inbound bytes</source>
          <target state="new">The number of inbound bytes</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>$NetworkOutBytes</source>
          <target state="new">$NetworkOutBytes</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The number of outbound bytes</source>
          <target state="new">The number of outbound bytes</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>$SampleNodeCount</source>
          <target state="new">$SampleNodeCount</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The count of compute nodes</source>
          <target state="new">The count of compute nodes</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>$ActiveTasks</source>
          <target state="new">$ActiveTasks</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The number of tasks that are in an active state</source>
          <target state="new">The number of tasks that are in an active state</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>$RunningTasks</source>
          <target state="new">$RunningTasks</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The number of tasks in a running state</source>
          <target state="new">The number of tasks in a running state</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>$SucceededTasks</source>
          <target state="new">$SucceededTasks</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The number of tasks that finished successfully</source>
          <target state="new">The number of tasks that finished successfully</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>$FailedTasks</source>
          <target state="new">$FailedTasks</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The number of tasks that failed</source>
          <target state="new">The number of tasks that failed</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>$CurrentDedicated</source>
          <target state="new">$CurrentDedicated</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The current number of dedicated compute nodes</source>
          <target state="new">The current number of dedicated compute nodes</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="new">Types</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These <bpt id="p1">**</bpt>types<ept id="p1">**</ept> are supported in a formula.</source>
          <target state="new">These <bpt id="p1">**</bpt>types<ept id="p1">**</ept> are supported in a formula.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>double</source>
          <target state="new">double</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>doubleVec</source>
          <target state="new">doubleVec</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="new">string</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>timestamp -- timestamp is a compound structure which contains the following members:</source>
          <target state="new">timestamp -- timestamp is a compound structure which contains the following members:</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>year</source>
          <target state="new">year</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>month (1-12)</source>
          <target state="new">month (1-12)</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>day (1-31)</source>
          <target state="new">day (1-31)</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>weekday (in the format of number, e.g. 1 for Monday)</source>
          <target state="new">weekday (in the format of number, e.g. 1 for Monday)</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>hour (in 24-hour number format, e.g. 13 means 1PM)</source>
          <target state="new">hour (in 24-hour number format, e.g. 13 means 1PM)</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>minute (00-59)</source>
          <target state="new">minute (00-59)</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>second (00-59)</source>
          <target state="new">second (00-59)</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>timeinterval</source>
          <target state="new">timeinterval</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>TimeInterval_Zero</source>
          <target state="new">TimeInterval_Zero</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>TimeInterval_100ns</source>
          <target state="new">TimeInterval_100ns</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>TimeInterval_Microsecond</source>
          <target state="new">TimeInterval_Microsecond</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>TimeInterval_Millisecond</source>
          <target state="new">TimeInterval_Millisecond</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>TimeInterval_Second</source>
          <target state="new">TimeInterval_Second</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>TimeInterval_Minute</source>
          <target state="new">TimeInterval_Minute</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>TimeInterval_Hour</source>
          <target state="new">TimeInterval_Hour</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>TimeInterval_Day</source>
          <target state="new">TimeInterval_Day</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>TimeInterval_Week</source>
          <target state="new">TimeInterval_Week</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>TimeInterval_Year</source>
          <target state="new">TimeInterval_Year</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="new">Operations</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>These <bpt id="p1">**</bpt>operations<ept id="p1">**</ept> are allowed on the types listed above.</source>
          <target state="new">These <bpt id="p1">**</bpt>operations<ept id="p1">**</ept> are allowed on the types listed above.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="new">Operation</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Allowed operators</source>
          <target state="new">Allowed operators</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</source>
          <target state="new">double &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>doubleVec &amp;lt;operator&amp;gt; double =&amp;gt; doubleVec</source>
          <target state="new">doubleVec &amp;lt;operator&amp;gt; double =&amp;gt; doubleVec</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>doubleVec &amp;lt;operator&amp;gt; doubleVec =&amp;gt; doubleVec</source>
          <target state="new">doubleVec &amp;lt;operator&amp;gt; doubleVec =&amp;gt; doubleVec</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>+, -, *, /</source>
          <target state="new">+, -, *, /</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; double =&amp;gt; timeinterval</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; double =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>*, /</source>
          <target state="new">*, /</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>+, -</source>
          <target state="new">+, -</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timestamp =&amp;gt; timestamp</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timestamp =&amp;gt; timestamp</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timestamp</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timeinterval =&amp;gt; timestamp</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; timeinterval</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>&amp;lt;operator&amp;gt;double =&amp;gt; double</source>
          <target state="new">&amp;lt;operator&amp;gt;double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>-, !</source>
          <target state="new">-, !</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>&amp;lt;operator&amp;gt;timeinterval =&amp;gt; timeinterval</source>
          <target state="new">&amp;lt;operator&amp;gt;timeinterval =&amp;gt; timeinterval</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>string &amp;lt;operator&amp;gt; string =&amp;gt; double</source>
          <target state="new">string &amp;lt;operator&amp;gt; string =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; double</source>
          <target state="new">timestamp &amp;lt;operator&amp;gt; timestamp =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt, !=</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; double</source>
          <target state="new">timeinterval &amp;lt;operator&amp;gt; timeinterval =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</source>
          <target state="new">&amp;lt;, &amp;lt;=, ==, &amp;gt;=, &amp;gt;, !=</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>double &amp;lt;operator&amp;gt; double =&amp;gt; double</source>
          <target state="new">double &amp;lt;operator&amp;gt; double =&amp;gt; double</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>&amp;&amp;, ||</source>
          <target state="new">&amp;&amp;, ||</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>test double only (non-zero is true, zero is false)</source>
          <target state="new">test double only (non-zero is true, zero is false)</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>:</source>
          <target state="new">:</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="new">Functions</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>These predefined <bpt id="p1">**</bpt>functions<ept id="p1">**</ept> are available for defining an automatic scaling formula.</source>
          <target state="new">These predefined <bpt id="p1">**</bpt>functions<ept id="p1">**</ept> are available for defining an automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="new">Function</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>avg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>avg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The average value for all values in the doubleVecList.</source>
          <target state="new">The average value for all values in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>len<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>len<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The length of the vector created from the doubleVecList.</source>
          <target state="new">The length of the vector created from the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Log base 2.</source>
          <target state="new">Log base 2.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>lg<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Componentwise log base 2.</source>
          <target state="new">Componentwise log base 2.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A vec(double) must be explicitly passed for single double parameter, otherwise the double lg(double) version is assumed.</source>
          <target state="new">A vec(double) must be explicitly passed for single double parameter, otherwise the double lg(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Natural log.</source>
          <target state="new">Natural log.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>ln<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Componentwise log base 2.</source>
          <target state="new">Componentwise log base 2.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A vec(double) must be explicitly passed for single double parameter, otherwise the double lg(double) version is assumed.</source>
          <target state="new">A vec(double) must be explicitly passed for single double parameter, otherwise the double lg(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(double)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(double)</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Log base 10.</source>
          <target state="new">Log base 10.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>doubleVec <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">doubleVec <ph id="ph1">&lt;b&gt;</ph>log<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Componentwise log base 10.</source>
          <target state="new">Componentwise log base 10.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A vec(double) must be explicitly passed for single double parameter, otherwise the double log(double) version is assumed.</source>
          <target state="new">A vec(double) must be explicitly passed for single double parameter, otherwise the double log(double) version is assumed.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>max<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>max<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The maximum value in the doubleVecList.</source>
          <target state="new">The maximum value in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>min<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>min<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The minimum value in the doubleVecList.</source>
          <target state="new">The minimum value in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>norm<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>norm<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The two-norm of the vector created from the doubleVecList.</source>
          <target state="new">The two-norm of the vector created from the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>percentile<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double p)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>percentile<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double p)</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The percentile element of the vector v.</source>
          <target state="new">The percentile element of the vector v.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>rand<ph id="ph2">&lt;/b&gt;</ph>()</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>rand<ph id="ph2">&lt;/b&gt;</ph>()</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A random value between 0.0 and 1.0.</source>
          <target state="new">A random value between 0.0 and 1.0.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>range<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>range<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The difference between the min and max values in doubleVecList.</source>
          <target state="new">The difference between the min and max values in doubleVecList.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>std<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>std<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The sample standard deviation of the values in the doubleVecList.</source>
          <target state="new">The sample standard deviation of the values in the doubleVecList.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>stop<ph id="ph1">&lt;/b&gt;</ph>()</source>
          <target state="new">stop<ph id="ph1">&lt;/b&gt;</ph>()</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Stop auto-scaling expression evaluation.</source>
          <target state="new">Stop auto-scaling expression evaluation.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>sum<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>sum<ph id="ph2">&lt;/b&gt;</ph>(doubleVecList)</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The sum of all the components of doubleVecList.</source>
          <target state="new">The sum of all the components of doubleVecList.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>timestamp <ph id="ph1">&lt;b&gt;</ph>time<ph id="ph2">&lt;/b&gt;</ph>(string dateTime="")</source>
          <target state="new">timestamp <ph id="ph1">&lt;b&gt;</ph>time<ph id="ph2">&lt;/b&gt;</ph>(string dateTime="")</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The timestamp of the current time if no parameters passed, or the timestamp of the dateTime string if passed.</source>
          <target state="new">The timestamp of the current time if no parameters passed, or the timestamp of the dateTime string if passed.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Supported dateTime formats are W3CDTF and RFC1123.</source>
          <target state="new">Supported dateTime formats are W3CDTF and RFC1123.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>double <ph id="ph1">&lt;b&gt;</ph>val<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double i)</source>
          <target state="new">double <ph id="ph1">&lt;b&gt;</ph>val<ph id="ph2">&lt;/b&gt;</ph>(doubleVec v, double i)</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The value of the element at location i in vector v with a starting index of zero.</source>
          <target state="new">The value of the element at location i in vector v with a starting index of zero.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Some of the functions described in the table above can accept a list as an argument.</source>
          <target state="new">Some of the functions described in the table above can accept a list as an argument.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The comma separated list is any combination of <bpt id="p1">*</bpt>double<ept id="p1">*</ept> and <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept>.</source>
          <target state="new">The comma separated list is any combination of <bpt id="p1">*</bpt>double<ept id="p1">*</ept> and <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>doubleVecList<ept id="p1">*</ept> value is converted to a single <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept> prior to evaluation.</source>
          <target state="new">The <bpt id="p1">*</bpt>doubleVecList<ept id="p1">*</ept> value is converted to a single <bpt id="p2">*</bpt>doubleVec<ept id="p2">*</ept> prior to evaluation.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For example, if v = [1,2,3], then calling avg(v) is equivalent to calling avg(1,2,3) and calling avg(v, 7) is equivalent to calling avg(1,2,3,7).</source>
          <target state="new">For example, if v = [1,2,3], then calling avg(v) is equivalent to calling avg(1,2,3) and calling avg(v, 7) is equivalent to calling avg(1,2,3,7).</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Obtain sample data</source>
          <target state="new">Obtain sample data</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The system-defined variables described above are objects that provide methods to access the associated data.</source>
          <target state="new">The system-defined variables described above are objects that provide methods to access the associated data.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For example, the following expression shows a request to get the last five minutes of CPU usage:</source>
          <target state="new">For example, the following expression shows a request to get the last five minutes of CPU usage:</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>These methods can be used to get sample data.</source>
          <target state="new">These methods can be used to get sample data.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="new">Method</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Count()</source>
          <target state="new">Count()</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Returns the total number of samples in the metric history.</source>
          <target state="new">Returns the total number of samples in the metric history.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>GetSample()</source>
          <target state="new">GetSample()</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Returns a vector of data samples.</source>
          <target state="new">Returns a vector of data samples.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample(double count)<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2"> -</ph> Specifies the number of samples that are required from the most recent samples.</source>
          <target state="new">doubleVec GetSample(double count)<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2"> -</ph> Specifies the number of samples that are required from the most recent samples.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A sample is 5 seconds worth of metrics data.</source>
          <target state="new">A sample is 5 seconds worth of metrics data.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>GetSample(1) returns the last available sample, but for metrics like $CPUPercent you shouldn’t use this because it isn’t possible to know when the sample was collected.</source>
          <target state="new">GetSample(1) returns the last available sample, but for metrics like $CPUPercent you shouldn’t use this because it isn’t possible to know when the sample was collected.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It might be recent, or because of system issues, it might be much older.</source>
          <target state="new">It might be recent, or because of system issues, it might be much older.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>It is better to use a time interval as shown below.</source>
          <target state="new">It is better to use a time interval as shown below.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample((timestamp | timeinterval) startTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph> – Specifies a time frame for gathering sample data and optionally specifies the percentage of samples that must be in the requested range.</source>
          <target state="new">doubleVec GetSample((timestamp | timeinterval) startTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph> – Specifies a time frame for gathering sample data and optionally specifies the percentage of samples that must be in the requested range.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>$CPUPercent.GetSample(TimeInterval\_Minute\*10), should return 200 samples if all samples for the last ten minutes are present in the CPUPercent history.</source>
          <target state="new">$CPUPercent.GetSample(TimeInterval\_Minute\*10), should return 200 samples if all samples for the last ten minutes are present in the CPUPercent history.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If the last minute of history is still not present, only 180 samples are returned.</source>
          <target state="new">If the last minute of history is still not present, only 180 samples are returned.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>$CPUPercent.GetSample(TimeInterval\_Minute\*10, 80) succeeds, and $CPUPercent.GetSample(TimeInterval_Minute\*10,95) fails.</source>
          <target state="new">$CPUPercent.GetSample(TimeInterval\_Minute\*10, 80) succeeds, and $CPUPercent.GetSample(TimeInterval_Minute\*10,95) fails.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>doubleVec GetSample((timestamp | timeinterval) startTime, (timestamp | timeinterval) endTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph> – Specifies a time frame for gathering data with both a start time and an end time.</source>
          <target state="new">doubleVec GetSample((timestamp | timeinterval) startTime, (timestamp | timeinterval) endTime [, double samplePercent])<ph id="ph1">&lt;/b&gt;</ph> – Specifies a time frame for gathering data with both a start time and an end time.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Note that there is a delay between when a sample is collected and when it is available to a formula; this must be considered when using the GetSample method; see GetSamplePercent below.</source>
          <target state="new">Note that there is a delay between when a sample is collected and when it is available to a formula; this must be considered when using the GetSample method; see GetSamplePercent below.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>GetSamplePeriod()</source>
          <target state="new">GetSamplePeriod()</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Returns the period of the samples taken in a historical sample data set.</source>
          <target state="new">Returns the period of the samples taken in a historical sample data set.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>HistoryBeginTime()</source>
          <target state="new">HistoryBeginTime()</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Returns the timestamp  of the oldest available data sample for the metric.</source>
          <target state="new">Returns the timestamp  of the oldest available data sample for the metric.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>GetSamplePercent()</source>
          <target state="new">GetSamplePercent()</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Returns the percent of samples a history currently has for a given time interval.</source>
          <target state="new">Returns the percent of samples a history currently has for a given time interval.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>doubleVec GetSamplePercent( (timestamp | timeinterval) startTime [, (timestamp | timeinterval) endTime] )<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2">
    </ph></source>
          <target state="new">doubleVec GetSamplePercent( (timestamp | timeinterval) startTime [, (timestamp | timeinterval) endTime] )<ph id="ph1">&lt;/b&gt;</ph><ph id="ph2">
    </ph></target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Because the GetSample method fails if the percent of samples returned is less than the samplePercent specified, you can use the GetSamplePercent method to first check, then perform an alternate action when enough samples are not present without halting their automatic scaling evaluation.</source>
          <target state="new">Because the GetSample method fails if the percent of samples returned is less than the samplePercent specified, you can use the GetSamplePercent method to first check, then perform an alternate action when enough samples are not present without halting their automatic scaling evaluation.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Metrics</source>
          <target state="new">Metrics</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>You can use both resource and task <bpt id="p1">**</bpt>metrics<ept id="p1">**</ept> when defining a formula, and these metrics can be used to manage the compute nodes in a pool.</source>
          <target state="new">You can use both resource and task <bpt id="p1">**</bpt>metrics<ept id="p1">**</ept> when defining a formula, and these metrics can be used to manage the compute nodes in a pool.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Metric</source>
          <target state="new">Metric</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="new">Resource</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Resource metrics are based on CPU usage, bandwidth usage, memory usage, and the number of compute nodes.</source>
          <target state="new">Resource metrics are based on CPU usage, bandwidth usage, memory usage, and the number of compute nodes.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>These system-defined variables (described in <bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> above) are used in formulas to manage the compute nodes in a pool:</source>
          <target state="new">These system-defined variables (described in <bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> above) are used in formulas to manage the compute nodes in a pool:</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>$TargetDedicated</source>
          <target state="new">$TargetDedicated</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>$NodeDeallocationOption</source>
          <target state="new">$NodeDeallocationOption</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>These system-defined variables are used for making adjustments based on node resource metrics:</source>
          <target state="new">These system-defined variables are used for making adjustments based on node resource metrics:</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>$CPUPercent</source>
          <target state="new">$CPUPercent</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>$WallClockSeconds</source>
          <target state="new">$WallClockSeconds</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>$MemoryBytes</source>
          <target state="new">$MemoryBytes</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>$DiskBytes</source>
          <target state="new">$DiskBytes</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>$DiskReadBytes</source>
          <target state="new">$DiskReadBytes</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>$DiskWriteBytes</source>
          <target state="new">$DiskWriteBytes</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>$DiskReadOps</source>
          <target state="new">$DiskReadOps</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>$DiskWriteOps</source>
          <target state="new">$DiskWriteOps</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>$NetworkInBytes</source>
          <target state="new">$NetworkInBytes</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>$NetworkOutBytes</source>
          <target state="new">$NetworkOutBytes</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="new">Task</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Based on the status of tasks, such as Active, Pending, and Completed.</source>
          <target state="new">Based on the status of tasks, such as Active, Pending, and Completed.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>These system-defined variables are used for making adjustments based on task metrics:</source>
          <target state="new">These system-defined variables are used for making adjustments based on task metrics:</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>$ActiveTasks</source>
          <target state="new">$ActiveTasks</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>$RunningTasks</source>
          <target state="new">$RunningTasks</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>$SucceededTasks</source>
          <target state="new">$SucceededTasks</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>$FailedTasks</source>
          <target state="new">$FailedTasks</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>$CurrentDedicated</source>
          <target state="new">$CurrentDedicated</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Build an autoscale formula</source>
          <target state="new">Build an autoscale formula</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Constructing an autoscaling formula is done by forming statements using the above components and combining those statements into a complete formula.</source>
          <target state="new">Constructing an autoscaling formula is done by forming statements using the above components and combining those statements into a complete formula.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>For example, here we construct a formula by first defining the requirements for a formula that will:</source>
          <target state="new">For example, here we construct a formula by first defining the requirements for a formula that will:</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Increase the target number of compute nodes in a pool if CPU usage is high</source>
          <target state="new">Increase the target number of compute nodes in a pool if CPU usage is high</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Descrease the target number of compute nodes in a pool when CPU usage is low</source>
          <target state="new">Descrease the target number of compute nodes in a pool when CPU usage is low</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Always restrict the maximum number of nodes to 400</source>
          <target state="new">Always restrict the maximum number of nodes to 400</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For the <bpt id="p1">*</bpt>increase<ept id="p1">*</ept> of nodes during high CPU usage, we define the statement that populates a user-defined variable ($TotalNodes) with a value that is 110% of the current target number of nodes if the minimum average CPU usage during the last 10 minutes was above 70%:</source>
          <target state="new">For the <bpt id="p1">*</bpt>increase<ept id="p1">*</ept> of nodes during high CPU usage, we define the statement that populates a user-defined variable ($TotalNodes) with a value that is 110% of the current target number of nodes if the minimum average CPU usage during the last 10 minutes was above 70%:</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The next statement sets the same variable to 90% of the current target number of nodes if the average CPU usage of the past 60 minutes was <bpt id="p1">*</bpt>under<ept id="p1">*</ept> 20%, lowering the target number during low CPU usage.</source>
          <target state="new">The next statement sets the same variable to 90% of the current target number of nodes if the average CPU usage of the past 60 minutes was <bpt id="p1">*</bpt>under<ept id="p1">*</ept> 20%, lowering the target number during low CPU usage.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Note that this statement also references the user-defined variable <bpt id="p1">*</bpt>$TotalNodes<ept id="p1">*</ept> from the statement above.</source>
          <target state="new">Note that this statement also references the user-defined variable <bpt id="p1">*</bpt>$TotalNodes<ept id="p1">*</ept> from the statement above.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Now limit the target number of dedicated compute nodes to a <bpt id="p1">**</bpt>maximum<ept id="p1">**</ept> of 400:</source>
          <target state="new">Now limit the target number of dedicated compute nodes to a <bpt id="p1">**</bpt>maximum<ept id="p1">**</ept> of 400:</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Here's the complete formula:</source>
          <target state="new">Here's the complete formula:</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Create a pool with automatic scaling enabled</source>
          <target state="new">Create a pool with automatic scaling enabled</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>To enable automatic scaling when creating a pool, use one of the following techniques:</source>
          <target state="new">To enable automatic scaling when creating a pool, use one of the following techniques:</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New-AzureBatchPool<ept id="p1">](https://msdn.microsoft.com/library/azure/mt125936.aspx)</ept> – This Azure PowerShell cmdlet uses the AutoScaleFormula parameter to specify the automatic scaling formula.</source>
          <target state="new"><bpt id="p1">[</bpt>New-AzureBatchPool<ept id="p1">](https://msdn.microsoft.com/library/azure/mt125936.aspx)</ept> – This Azure PowerShell cmdlet uses the AutoScaleFormula parameter to specify the automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createpool.aspx)</ept> – After this .NET method is called to create a pool, you'll then set the pool's <bpt id="p2">[</bpt>CloudPool.AutoScaleEnabled<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleenabled.aspx)</ept> and <bpt id="p3">[</bpt>CloudPool.AutoScaleFormula<ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> properties to enable automatic scaling.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createpool.aspx)</ept> – After this .NET method is called to create a pool, you'll then set the pool's <bpt id="p2">[</bpt>CloudPool.AutoScaleEnabled<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleenabled.aspx)</ept> and <bpt id="p3">[</bpt>CloudPool.AutoScaleFormula<ept id="p3">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscaleformula.aspx)</ept> properties to enable automatic scaling.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add a pool to an account<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820174.aspx)</ept> – The enableAutoScale and autoScaleFormula elements are used in this REST API request to set up automatic scaling for the pool when it is created.</source>
          <target state="new"><bpt id="p1">[</bpt>Add a pool to an account<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820174.aspx)</ept> – The enableAutoScale and autoScaleFormula elements are used in this REST API request to set up automatic scaling for the pool when it is created.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If you set up automatic scaling when the pool is created using one of the techniques above, the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter for the pool is not (and must not) be specified when created.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If you set up automatic scaling when the pool is created using one of the techniques above, the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter for the pool is not (and must not) be specified when created.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Also note that if you wish to manually resize an autoscale-enabled pool (for example with <bpt id="p1">[</bpt>BatchClient.PoolOperations.ResizePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.resizepool.aspx)</ept>) then you must first disable automatic scaling on the pool, then resize the pool.</source>
          <target state="new">Also note that if you wish to manually resize an autoscale-enabled pool (for example with <bpt id="p1">[</bpt>BatchClient.PoolOperations.ResizePool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.resizepool.aspx)</ept>) then you must first disable automatic scaling on the pool, then resize the pool.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The following code snippet shows the creation of an autoscale-enabled <bpt id="p1">[</bpt>CloudPool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept> using the <bpt id="p2">[</bpt>Batch .NET<ept id="p2">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library whose formula sets the target number of nodes to 5 on Mondays, and 1 on every other day of the week.</source>
          <target state="new">The following code snippet shows the creation of an autoscale-enabled <bpt id="p1">[</bpt>CloudPool<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept> using the <bpt id="p2">[</bpt>Batch .NET<ept id="p2">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library whose formula sets the target number of nodes to 5 on Mondays, and 1 on every other day of the week.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>In the snippet, "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx)</ept>):</source>
          <target state="new">In the snippet, "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx)</ept>):</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Enable automatic scaling after a pool was created</source>
          <target state="new">Enable automatic scaling after a pool was created</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If you've already set up a pool with a specified number of compute nodes using the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter, you can update the existing pool at a later time to automatically scale.</source>
          <target state="new">If you've already set up a pool with a specified number of compute nodes using the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter, you can update the existing pool at a later time to automatically scale.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Do this in one of these ways:</source>
          <target state="new">Do this in one of these ways:</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.EnableAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.enableautoscale.aspx)</ept> – This .NET method requires the ID of an existing pool and the automatic scaling formula to apply to the pool.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.EnableAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.enableautoscale.aspx)</ept> – This .NET method requires the ID of an existing pool and the automatic scaling formula to apply to the pool.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enable automatic scaling on a pool<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820173.aspx)</ept> – This REST API request requires the ID of the existing pool in the URI and the automatic scaling formula in the request body.</source>
          <target state="new"><bpt id="p1">[</bpt>Enable automatic scaling on a pool<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820173.aspx)</ept> – This REST API request requires the ID of the existing pool in the URI and the automatic scaling formula in the request body.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If a value was specified for the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter when the pool was created, it is ignored when the automatic scaling formula is evaluated.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If a value was specified for the <bpt id="p1">*</bpt>targetDedicated<ept id="p1">*</ept> parameter when the pool was created, it is ignored when the automatic scaling formula is evaluated.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This code snippet demonstrates enabling autoscaling on an existing pool using the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library.</source>
          <target state="new">This code snippet demonstrates enabling autoscaling on an existing pool using the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Note that both enabling and updating the formula on an existing pool use the same method.</source>
          <target state="new">Note that both enabling and updating the formula on an existing pool use the same method.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>As such, this technique would <bpt id="p1">*</bpt>update<ept id="p1">*</ept> the formula on the specified pool if autoscaling had already been enabled.</source>
          <target state="new">As such, this technique would <bpt id="p1">*</bpt>update<ept id="p1">*</ept> the formula on the specified pool if autoscaling had already been enabled.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This snippet assumes that "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx)</ept>, and "mypool" is the ID of an existing <bpt id="p2">[</bpt>CloudPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept>.</source>
          <target state="new">This snippet assumes that "myBatchClient" is a properly initialized instance of <bpt id="p1">[</bpt>BatchClient<ept id="p1">](http://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx)</ept>, and "mypool" is the ID of an existing <bpt id="p2">[</bpt>CloudPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Evaluate the automatic scaling formula</source>
          <target state="new">Evaluate the automatic scaling formula</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>It’s always good practice to evaluate a formula before you use it in your application.</source>
          <target state="new">It’s always good practice to evaluate a formula before you use it in your application.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A formula is evaluated by performing a "test run" of the formula on an existing pool.</source>
          <target state="new">A formula is evaluated by performing a "test run" of the formula on an existing pool.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Do this by using:</source>
          <target state="new">Do this by using:</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.EvaluateAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscale.aspx)</ept> or <bpt id="p2">[</bpt>BatchClient.PoolOperations.EvaluateAutoScaleAsync<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscaleasync.aspx)</ept> – These .NET methods require the ID of an existing pool and the string that contains the automatic scaling formula.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.EvaluateAutoScale<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscale.aspx)</ept> or <bpt id="p2">[</bpt>BatchClient.PoolOperations.EvaluateAutoScaleAsync<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.evaluateautoscaleasync.aspx)</ept> – These .NET methods require the ID of an existing pool and the string that contains the automatic scaling formula.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The results of the call are contained in an instance of the <bpt id="p1">[</bpt>AutoScaleEvaluation<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscaleevaluation.aspx)</ept> class.</source>
          <target state="new">The results of the call are contained in an instance of the <bpt id="p1">[</bpt>AutoScaleEvaluation<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscaleevaluation.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Evaluate an automatic scaling formula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820183.aspx)</ept> – In this REST API request, the pool ID is specified in the URI and the automatic scaling formula is specified in the <bpt id="p2">*</bpt>autoScaleFormula<ept id="p2">*</ept> element of the request body.</source>
          <target state="new"><bpt id="p1">[</bpt>Evaluate an automatic scaling formula<ept id="p1">](https://msdn.microsoft.com/library/azure/dn820183.aspx)</ept> – In this REST API request, the pool ID is specified in the URI and the automatic scaling formula is specified in the <bpt id="p2">*</bpt>autoScaleFormula<ept id="p2">*</ept> element of the request body.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The response of the operation contains any error information that might be related to the formula.</source>
          <target state="new">The response of the operation contains any error information that might be related to the formula.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To evaluate an autoscaling formula, you must first have enabled autoscaling on the pool using a valid formula.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To evaluate an autoscaling formula, you must first have enabled autoscaling on the pool using a valid formula.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>In this code snippet using the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library, we evaluate a formula prior to applying it to the <bpt id="p2">[</bpt>CloudPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept>.</source>
          <target state="new">In this code snippet using the <bpt id="p1">[</bpt>Batch .NET<ept id="p1">](https://msdn.microsoft.com/library/azure/mt348682.aspx)</ept> library, we evaluate a formula prior to applying it to the <bpt id="p2">[</bpt>CloudPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Successful evaluation of the formula in this snippet will result in output similar to the following:</source>
          <target state="new">Successful evaluation of the formula in this snippet will result in output similar to the following:</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Obtain information about automatic scaling runs</source>
          <target state="new">Obtain information about automatic scaling runs</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Periodically checking the results of automatic scaling runs should be done to a formula is performing as expected.</source>
          <target state="new">Periodically checking the results of automatic scaling runs should be done to a formula is performing as expected.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Do this in one of these ways:</source>
          <target state="new">Do this in one of these ways:</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CloudPool.AutoScaleRun<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscalerun.aspx)</ept> – When using the .NET library, this property of a pool provides an instance of the <bpt id="p2">[</bpt>AutoScaleRun<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscalerun.aspx)</ept> class which provides the following properties of the latest automatic scaling run:</source>
          <target state="new"><bpt id="p1">[</bpt>CloudPool.AutoScaleRun<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.autoscalerun.aspx)</ept> – When using the .NET library, this property of a pool provides an instance of the <bpt id="p2">[</bpt>AutoScaleRun<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.autoscalerun.aspx)</ept> class which provides the following properties of the latest automatic scaling run:</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Error</source>
          <target state="new">AutoScaleRun.Error</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Results</source>
          <target state="new">AutoScaleRun.Results</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>AutoScaleRun.Timestamp</source>
          <target state="new">AutoScaleRun.Timestamp</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get information about a pool<ept id="p1">](https://msdn.microsoft.com/library/dn820165.aspx)</ept> – This REST API request returns information about the pool, which includes the latest automatic scaling run.</source>
          <target state="new"><bpt id="p1">[</bpt>Get information about a pool<ept id="p1">](https://msdn.microsoft.com/library/dn820165.aspx)</ept> – This REST API request returns information about the pool, which includes the latest automatic scaling run.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Example formulas</source>
          <target state="new">Example formulas</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Let's take a look at some examples showing just a few ways formulas can be used to automatically scale compute resources in a pool.</source>
          <target state="new">Let's take a look at some examples showing just a few ways formulas can be used to automatically scale compute resources in a pool.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Example 1</source>
          <target state="new">Example 1</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Perhaps you want to adjust the pool size based on the day of the week and time of day, increasing or decreasing the number of nodes in the pool accordingly:</source>
          <target state="new">Perhaps you want to adjust the pool size based on the day of the week and time of day, increasing or decreasing the number of nodes in the pool accordingly:</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This formula first obtains the current time.</source>
          <target state="new">This formula first obtains the current time.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>If it's a weekday (1-5) and within working hours (8AM-6PM), the target pool size is set to 20 nodes.</source>
          <target state="new">If it's a weekday (1-5) and within working hours (8AM-6PM), the target pool size is set to 20 nodes.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Otherwise, the pool size is targeted at 10 nodes.</source>
          <target state="new">Otherwise, the pool size is targeted at 10 nodes.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="new">Example 2</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>In this example, the pool size is adjusted based on the number of tasks in the queue.</source>
          <target state="new">In this example, the pool size is adjusted based on the number of tasks in the queue.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Note that both comments and line breaks are acceptable in formula strings.</source>
          <target state="new">Note that both comments and line breaks are acceptable in formula strings.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Example 3</source>
          <target state="new">Example 3</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Another example that adjusts the pool size based on the number of tasks, this formula also takes into account the <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.maxtaskspercomputenode.aspx)</ept> value that has been set for the pool.</source>
          <target state="new">Another example that adjusts the pool size based on the number of tasks, this formula also takes into account the <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.maxtaskspercomputenode.aspx)</ept> value that has been set for the pool.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This is particularly useful in situations where parallel task execution on compute nodes is desired.</source>
          <target state="new">This is particularly useful in situations where parallel task execution on compute nodes is desired.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>To fully assess the efficiency of your application, you might need to access a compute node.</source>
          <target state="new">To fully assess the efficiency of your application, you might need to access a compute node.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>To take advantage of remote access, a user account must be added to the node that you want to access and an RDP file must be retrieved for that node.</source>
          <target state="new">To take advantage of remote access, a user account must be added to the node that you want to access and an RDP file must be retrieved for that node.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Add the user account in one of these ways:</source>
          <target state="new">Add the user account in one of these ways:</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>New-AzureBatchVMUser<ept id="p1">](https://msdn.microsoft.com/library/mt149846.aspx)</ept> – This PowerShell cmdlet takes the pool name, compute node name, account name, and password as parameters.</source>
          <target state="new"><bpt id="p1">[</bpt>New-AzureBatchVMUser<ept id="p1">](https://msdn.microsoft.com/library/mt149846.aspx)</ept> – This PowerShell cmdlet takes the pool name, compute node name, account name, and password as parameters.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreateComputeNodeUser<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createcomputenodeuser.aspx)</ept> – This .NET method creates an instance of the <bpt id="p2">[</bpt>ComputeNodeUser<ept id="p2">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.aspx)</ept> class on which the account name and password can be set for the compute node, and <bpt id="p3">[</bpt>ComputeNodeUser.Commit<ept id="p3">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.commit.aspx)</ept> is then called on the instance to create the user on that node.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.CreateComputeNodeUser<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createcomputenodeuser.aspx)</ept> – This .NET method creates an instance of the <bpt id="p2">[</bpt>ComputeNodeUser<ept id="p2">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.aspx)</ept> class on which the account name and password can be set for the compute node, and <bpt id="p3">[</bpt>ComputeNodeUser.Commit<ept id="p3">](https://msdn.microsoft.com/library/microsoft.azure.batch.computenodeuser.commit.aspx)</ept> is then called on the instance to create the user on that node.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add a user account to a node<ept id="p1">](https://msdn.microsoft.com/library/dn820137.aspx)</ept> – The name of the pool and the compute node are specified in the URI and the account name and password are sent to the node in the request body of this REST API request.</source>
          <target state="new"><bpt id="p1">[</bpt>Add a user account to a node<ept id="p1">](https://msdn.microsoft.com/library/dn820137.aspx)</ept> – The name of the pool and the compute node are specified in the URI and the account name and password are sent to the node in the request body of this REST API request.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Get the RDP file:</source>
          <target state="new">Get the RDP file:</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BatchClient.PoolOperations.GetRDPFile<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getrdpfile.aspx)</ept> – This .NET method requires the ID of the pool, the node ID, and the name of the RDP file to create.</source>
          <target state="new"><bpt id="p1">[</bpt>BatchClient.PoolOperations.GetRDPFile<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getrdpfile.aspx)</ept> – This .NET method requires the ID of the pool, the node ID, and the name of the RDP file to create.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get a remote desktop protocol file from a node<ept id="p1">](https://msdn.microsoft.com/library/dn820120.aspx)</ept> – This REST API request requires the name of the pool and the name of the compute node.</source>
          <target state="new"><bpt id="p1">[</bpt>Get a remote desktop protocol file from a node<ept id="p1">](https://msdn.microsoft.com/library/dn820120.aspx)</ept> – This REST API request requires the name of the pool and the name of the compute node.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The response contains the contents of the RDP file.</source>
          <target state="new">The response contains the contents of the RDP file.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get-AzureBatchRDPFile<ept id="p1">](https://msdn.microsoft.com/library/mt149851.aspx)</ept> – This PowerShell cmdlet gets the RDP file from the specified compute node and saves it to the specified file location or to a stream.</source>
          <target state="new"><bpt id="p1">[</bpt>Get-AzureBatchRDPFile<ept id="p1">](https://msdn.microsoft.com/library/mt149851.aspx)</ept> – This PowerShell cmdlet gets the RDP file from the specified compute node and saves it to the specified file location or to a stream.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Some applications produce large amounts of data that can be difficult to process.</source>
          <target state="new">Some applications produce large amounts of data that can be difficult to process.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>One way to solve this is through <bpt id="p1">[</bpt>efficient list querying<ept id="p1">](batch-efficient-list-queries.md)</ept>.</source>
          <target state="new">One way to solve this is through <bpt id="p1">[</bpt>efficient list querying<ept id="p1">](batch-efficient-list-queries.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f146238399b9d43a5a9d46ff738080764bd74184</xliffext:olfilehash>
  </header>
</xliff>