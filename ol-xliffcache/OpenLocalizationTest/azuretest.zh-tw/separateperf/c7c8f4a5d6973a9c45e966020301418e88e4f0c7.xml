{
  "nodes": [
    {
      "content": "Get started with Notification Hubs for Xamarin.Android apps | Microsoft Azure",
      "pos": [
        27,
        104
      ]
    },
    {
      "content": "In this tutorial, you learn how to use Azure Notification Hubs to send push notifications to a Xamarin Android application.",
      "pos": [
        123,
        246
      ]
    },
    {
      "content": "Get started with Notification Hubs",
      "pos": [
        591,
        625
      ]
    },
    {
      "content": "Overview",
      "pos": [
        745,
        753
      ]
    },
    {
      "content": "This tutorial shows you how to use Azure Notification Hubs to send push notifications to a Xamarin.Android application.",
      "pos": [
        755,
        874
      ]
    },
    {
      "content": "You'll create a blank Xamarin.Android app that receives push notifications by using Google Cloud Messaging (GCM).",
      "pos": [
        875,
        988
      ]
    },
    {
      "content": "When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app.",
      "pos": [
        989,
        1123
      ]
    },
    {
      "content": "The finished code is available in the [NotificationHubs app][GitHub] sample.",
      "pos": [
        1124,
        1200
      ]
    },
    {
      "content": "This tutorial demonstrates the simple broadcast scenario in using Notification Hubs.",
      "pos": [
        1202,
        1286
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1290,
        1303
      ]
    },
    {
      "content": "This tutorial requires the following:",
      "pos": [
        1305,
        1342
      ]
    },
    {
      "content": "[Xamarin.Android]",
      "pos": [
        1346,
        1363
      ]
    },
    {
      "content": "Active Google account",
      "pos": [
        1366,
        1387
      ]
    },
    {
      "content": "[Azure Mobile Services Component]",
      "pos": [
        1390,
        1423
      ]
    },
    {
      "content": "[Azure Messaging Component]",
      "pos": [
        1426,
        1453
      ]
    },
    {
      "content": "[Google Cloud Messaging Client Component]",
      "pos": [
        1456,
        1497
      ]
    },
    {
      "content": "Completing this tutorial is a prerequisite for all other Notification Hubs tutorials for Xamarin.Android apps.",
      "pos": [
        1499,
        1609
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> To complete this tutorial, you must have an active Azure account.",
      "pos": [
        1613,
        1696
      ]
    },
    {
      "content": "If you don't have an account, you can create a free trial account in just a couple of minutes.",
      "pos": [
        1697,
        1791
      ]
    },
    {
      "content": "For details, see <bpt id=\"p1\">[</bpt>Azure Free Trial<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A9C9624B5&amp;amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fpartner-xamarin-notification-hubs-android-get-started%2F)</ept>.",
      "pos": [
        1792,
        2036
      ]
    },
    {
      "pos": [
        2040,
        2092
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enable Google Cloud Messaging"
    },
    {
      "pos": [
        2226,
        2285
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"configure-hub\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Configure your notification hub"
    },
    {
      "pos": [
        2409,
        2478
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"connecting-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Connect your app to the notification hub"
    },
    {
      "content": "Create a new project",
      "pos": [
        2484,
        2504
      ]
    },
    {
      "pos": [
        2509,
        2662
      ],
      "content": "In Xamarin Studio (or Visual Studio), click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Android Application<ept id=\"p3\">**</ept> in the <bpt id=\"p4\">**</bpt>New Solution<ept id=\"p4\">**</ept> dialog, and finally click <bpt id=\"p5\">**</bpt>OK<ept id=\"p5\">**</ept>."
    },
    {
      "content": "This creates a new Android project.",
      "pos": [
        2681,
        2716
      ]
    },
    {
      "content": "Open the project properties by right-clicking your new project in the Solution view and choosing <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept>.",
      "pos": [
        2721,
        2830
      ]
    },
    {
      "content": "Select the <bpt id=\"p1\">**</bpt>Android Application<ept id=\"p1\">**</ept> item in the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> section.",
      "pos": [
        2831,
        2896
      ]
    },
    {
      "pos": [
        2914,
        2965
      ],
      "content": "Set the <bpt id=\"p1\">**</bpt>Minimum Android version<ept id=\"p1\">**</ept> to API Level 8."
    },
    {
      "pos": [
        2970,
        3080
      ],
      "content": "Set the <bpt id=\"p1\">**</bpt>Target Android version<ept id=\"p1\">**</ept> to the API version that you want to target (must be API level 8 or higher)."
    },
    {
      "pos": [
        3085,
        3152
      ],
      "content": "Ensure that the first letter of your <bpt id=\"p1\">**</bpt>Package name<ept id=\"p1\">**</ept> is lowercase."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> The first letter of the package name must be lowercase.",
      "pos": [
        3160,
        3233
      ]
    },
    {
      "content": "Otherwise, you will receive application manifest errors when you register your <bpt id=\"p1\">**</bpt>BroadcastReceiver<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IntentFilter<ept id=\"p2\">**</ept> for push notifications below.",
      "pos": [
        3234,
        3385
      ]
    },
    {
      "content": "Add the required components to your project",
      "pos": [
        3391,
        3434
      ]
    },
    {
      "content": "The Google Cloud Messaging Client available on the Xamarin Component Store simplifies the process of supporting push notifications in Xamarin.Android.",
      "pos": [
        3436,
        3586
      ]
    },
    {
      "pos": [
        3591,
        3683
      ],
      "content": "Right-click the Components folder in Xamarin.Android app and choose <bpt id=\"p1\">**</bpt>Get More Components<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        3688,
        3759
      ],
      "content": "Search for the <bpt id=\"p1\">**</bpt>Azure Messaging<ept id=\"p1\">**</ept> component and add it to the project."
    },
    {
      "pos": [
        3764,
        3849
      ],
      "content": "Search for the <bpt id=\"p1\">**</bpt>Google Cloud Messaging Client<ept id=\"p1\">**</ept> component and add it to the project."
    },
    {
      "content": "Set up notification hubs in your project",
      "pos": [
        3856,
        3896
      ]
    },
    {
      "content": "Gather the following information for your Android app and notification hub:",
      "pos": [
        3901,
        3976
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GoogleProjectNumber<ept id=\"p1\">**</ept>:  Get this Project Number value from the overview of your app on the Google Developer Portal.",
      "pos": [
        3984,
        4101
      ]
    },
    {
      "content": "You made a note of this value earlier when you created the app on the portal.",
      "pos": [
        4102,
        4179
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Listen connection string<ept id=\"p1\">**</ept>: On the dashboard in the Azure portal, click <bpt id=\"p2\">**</bpt>View connection strings<ept id=\"p2\">**</ept>.",
      "pos": [
        4186,
        4288
      ]
    },
    {
      "content": "Copy the <bpt id=\"p1\">*</bpt>DefaultListenSharedAccessSignature<ept id=\"p1\">*</ept> connection string for this value.",
      "pos": [
        4289,
        4368
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Hub name<ept id=\"p1\">**</ept>: This is the name of your hub from the Azure portal.",
      "pos": [
        4375,
        4440
      ]
    },
    {
      "content": "For example, <bpt id=\"p1\">*</bpt>mynotificationhub2<ept id=\"p1\">*</ept>.",
      "pos": [
        4441,
        4475
      ]
    },
    {
      "content": "Create a <bpt id=\"p1\">**</bpt>Constants.cs<ept id=\"p1\">**</ept> class for your Xamarin project and define the following constant values in the class.",
      "pos": [
        4481,
        4592
      ]
    },
    {
      "content": "Replace the placeholders with your values.",
      "pos": [
        4593,
        4635
      ]
    },
    {
      "pos": [
        4881,
        4939
      ],
      "content": "Add the following using statements to <bpt id=\"p1\">**</bpt>MainActivity.cs<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        4999,
        5118
      ],
      "content": "Add an instance variable to the <ph id=\"ph1\">`MainActivity`</ph> class that will be used to show an alert dialog when the app is running:"
    },
    {
      "pos": [
        5170,
        5228
      ],
      "content": "Create the following method in the <bpt id=\"p1\">**</bpt>MainActivity<ept id=\"p1\">**</ept> class:"
    },
    {
      "pos": [
        5596,
        5676
      ],
      "content": "Add a call to <ph id=\"ph1\">`RegisterWithGCM`</ph> in the <ph id=\"ph2\">`OnCreate`</ph> method of <bpt id=\"p1\">**</bpt>MainActivity.cs<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        6143,
        6187
      ],
      "content": "Create a new class, <bpt id=\"p1\">**</bpt>MyBroadcastReceiver<ept id=\"p1\">**</ept>."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> We will walk through creating a <bpt id=\"p1\">**</bpt>BroadcastReceiver<ept id=\"p1\">**</ept> class from scratch below.",
      "pos": [
        6195,
        6287
      ]
    },
    {
      "content": "However, a quick alternative to manually creating <bpt id=\"p1\">**</bpt>MyBroadcastReceiver.cs<ept id=\"p1\">**</ept> is to refer to the <bpt id=\"p2\">**</bpt>GcmService.cs<ept id=\"p2\">**</ept> file found in the sample Xamarin.Android project included with the [NotificationHubs samples][GitHub].",
      "pos": [
        6288,
        6504
      ]
    },
    {
      "content": "Duplicating <bpt id=\"p1\">**</bpt>GcmService.cs<ept id=\"p1\">**</ept> and changing class names can be a great place to start as well.",
      "pos": [
        6505,
        6598
      ]
    },
    {
      "pos": [
        6603,
        6733
      ],
      "content": "Add the following using statements to <bpt id=\"p1\">**</bpt>MyBroadcastReceiver.cs<ept id=\"p1\">**</ept> (referring to the component and assembly that you added earlier):"
    },
    {
      "pos": [
        6958,
        7063
      ],
      "content": "Add the following permission requests between the <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements and the <bpt id=\"p2\">**</bpt>namespace<ept id=\"p2\">**</ept> declaration:"
    },
    {
      "pos": [
        7619,
        7714
      ],
      "content": "In <bpt id=\"p1\">**</bpt>MyBroadcastReceiver.cs<ept id=\"p1\">**</ept>, change the <bpt id=\"p2\">**</bpt>MyBroadcastReceiver<ept id=\"p2\">**</ept> class to match the following:"
    },
    {
      "content": "Add another class in <bpt id=\"p1\">**</bpt>MyBroadcastReceiver.cs<ept id=\"p1\">**</ept> named <bpt id=\"p2\">**</bpt>PushHandlerService<ept id=\"p2\">**</ept>, which derives from <bpt id=\"p3\">**</bpt>GcmServiceBase<ept id=\"p3\">**</ept>.",
      "pos": [
        8521,
        8637
      ]
    },
    {
      "content": "Make sure to apply the <bpt id=\"p1\">**</bpt>Service<ept id=\"p1\">**</ept> attribute to the class:",
      "pos": [
        8638,
        8696
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GcmServiceBase<ept id=\"p1\">**</ept> implements methods <bpt id=\"p2\">**</bpt>OnRegistered()<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>OnUnRegistered()<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>OnMessage()<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>OnRecoverableError()<ept id=\"p5\">**</ept>, and <bpt id=\"p6\">**</bpt>OnError()<ept id=\"p6\">**</ept>.",
      "pos": [
        9133,
        9274
      ]
    },
    {
      "content": "Our implementation class <bpt id=\"p1\">**</bpt>PushHandlerService<ept id=\"p1\">**</ept> must override these methods, and these methods will fire in response to interacting with the notification hub.",
      "pos": [
        9275,
        9433
      ]
    },
    {
      "pos": [
        9439,
        9532
      ],
      "content": "Override the <bpt id=\"p1\">**</bpt>OnRegistered()<ept id=\"p1\">**</ept> method in <bpt id=\"p2\">**</bpt>PushHandlerService<ept id=\"p2\">**</ept> by using the following code:"
    },
    {
      "pos": [
        10679,
        10818
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> In the <bpt id=\"p1\">**</bpt>OnRegistered()<ept id=\"p1\">**</ept> code above, you should note the ability to specify tags to register for specific messaging channels."
    },
    {
      "pos": [
        10824,
        10912
      ],
      "content": "Override the <bpt id=\"p1\">**</bpt>OnMessage<ept id=\"p1\">**</ept> method in <bpt id=\"p2\">**</bpt>PushHandlerService<ept id=\"p2\">**</ept> by using the following code:"
    },
    {
      "pos": [
        11705,
        11853
      ],
      "content": "Add the following <bpt id=\"p1\">**</bpt>createNotification<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>dialogNotify<ept id=\"p2\">**</ept> methods to <bpt id=\"p3\">**</bpt>PushHandlerService<ept id=\"p3\">**</ept> for notifying users when a notification is received."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Notification design in Android version 5.0 and later represents a significant departure from that of previous versions.",
      "pos": [
        11860,
        11992
      ]
    },
    {
      "content": "If you test this on Android 5.0 or later, the app will need to be running to receive the notification.",
      "pos": [
        11993,
        12095
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Android Notifications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=615880)</ept>.",
      "pos": [
        12096,
        12193
      ]
    },
    {
      "pos": [
        13757,
        13876
      ],
      "content": "Override abstract members <bpt id=\"p1\">**</bpt>OnUnRegistered()<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>OnRecoverableError()<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>OnError()<ept id=\"p3\">**</ept> so that your code compiles:"
    },
    {
      "pos": [
        14587,
        14637
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"run-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Run your app in the emulator"
    },
    {
      "content": "If you run this app in the emulator, make sure that you use an Android Virtual Device (AVD) that supports Google APIs.",
      "pos": [
        14639,
        14757
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> In order to receive push notifications, you must set up a Google account on your Android Virtual Device.",
      "pos": [
        14761,
        14883
      ]
    },
    {
      "content": "(In the emulator, navigate to <bpt id=\"p1\">**</bpt>Settings<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Add Account<ept id=\"p2\">**</ept>.) Also, make sure that the emulator is connected to the Internet.",
      "pos": [
        14884,
        15018
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Notification design in Android version 5.0 and later represents a significant departure from that of previous versions.",
      "pos": [
        15021,
        15153
      ]
    },
    {
      "content": "If you test this on Android 5.0 or later, the app will need to be running to receive the notification.",
      "pos": [
        15154,
        15256
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Android Notifications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=615880)</ept>.",
      "pos": [
        15257,
        15354
      ]
    },
    {
      "pos": [
        15360,
        15461
      ],
      "content": "From <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Open Android Emulator Manager<ept id=\"p2\">**</ept>, select your device, and then click <bpt id=\"p3\">**</bpt>Edit<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        15479,
        15539
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Google APIs<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Target<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "content": "On the top toolbar, click <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept>, and then select your app.",
      "pos": [
        15557,
        15617
      ]
    },
    {
      "content": "This starts the emulator and runs the app.",
      "pos": [
        15618,
        15660
      ]
    },
    {
      "pos": [
        15664,
        15752
      ],
      "content": "The app retrieves the <bpt id=\"p1\">*</bpt>registrationId<ept id=\"p1\">*</ept> from GCM and registers with the notification hub."
    },
    {
      "content": "Send notifications from your backend",
      "pos": [
        15756,
        15792
      ]
    },
    {
      "content": "You can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.",
      "pos": [
        15795,
        15961
      ]
    },
    {
      "content": "Push notifications are normally sent in a backend service like Mobile Services or ASP.NET through a compatible library.",
      "pos": [
        15973,
        16092
      ]
    },
    {
      "content": "You can also use the REST API directly to send notification messages if a library is not available for your backend.",
      "pos": [
        16093,
        16209
      ]
    },
    {
      "content": "Here is a list of some other tutorials that you may want to review for sending notifications:",
      "pos": [
        16211,
        16304
      ]
    },
    {
      "content": "ASP.NET: See [Use Notification Hubs to push notifications to users].",
      "pos": [
        16308,
        16376
      ]
    },
    {
      "content": "Azure Notification Hubs Java SDK: See <bpt id=\"p1\">[</bpt>How to use Notification Hubs from Java<ept id=\"p1\">](notification-hubs-java-backend-how-to.md)</ept> for sending notifications from Java.",
      "pos": [
        16379,
        16536
      ]
    },
    {
      "content": "This has been tested in Eclipse for Android Development.",
      "pos": [
        16537,
        16593
      ]
    },
    {
      "pos": [
        16596,
        16686
      ],
      "content": "PHP: See <bpt id=\"p1\">[</bpt>How to use Notification Hubs from PHP<ept id=\"p1\">](notification-hubs-php-backend-how-to.md)</ept>."
    },
    {
      "content": "In the next subsections of the tutorial, you send notifications by using a .NET console app, and by using a mobile service through a node script.",
      "pos": [
        16689,
        16834
      ]
    },
    {
      "content": "Send notifications by using a .NET app",
      "pos": [
        16839,
        16877
      ]
    },
    {
      "content": "Microsoft provides the Azure Service Bus SDK for sending notifications on the .NET platform.",
      "pos": [
        16880,
        16972
      ]
    },
    {
      "content": "In this section, you will create a .NET console application with Visual Studio to use the Azure Service Bus SDK to send a notification.",
      "pos": [
        16973,
        17108
      ]
    },
    {
      "content": "Create a new Visual C# console application:",
      "pos": [
        17113,
        17156
      ]
    },
    {
      "content": "Add a reference to the Azure Service Bus SDK by using the <ph id=\"ph1\">&lt;a href=\"http://nuget.org/packages/WindowsAzure.ServiceBus/\"&gt;</ph>WindowsAzure.ServiceBus NuGet package<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        17174,
        17335
      ]
    },
    {
      "content": "In the Visual Studio main menu, click <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Library Package Manager<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Package Manager Console<ept id=\"p3\">**</ept>.",
      "pos": [
        17336,
        17463
      ]
    },
    {
      "content": "Then, in the console window, type:",
      "pos": [
        17464,
        17498
      ]
    },
    {
      "content": "and press Enter.",
      "pos": [
        17553,
        17569
      ]
    },
    {
      "content": "Open the file Program.cs and add the following using statement:",
      "pos": [
        17574,
        17637
      ]
    },
    {
      "content": "In your <ph id=\"ph1\">`Program`</ph> class, add the following method.",
      "pos": [
        17693,
        17743
      ]
    },
    {
      "content": "Update the placeholder text with your <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> connection string and hub name from the Azure portal.",
      "pos": [
        17744,
        17870
      ]
    },
    {
      "pos": [
        18211,
        18259
      ],
      "content": "Add the following lines in your <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method:"
    },
    {
      "content": "Press the F5 key to run the app.",
      "pos": [
        18328,
        18360
      ]
    },
    {
      "content": "You should receive a notification in the app.",
      "pos": [
        18361,
        18406
      ]
    },
    {
      "content": "Send notifications by using a mobile service",
      "pos": [
        18424,
        18468
      ]
    },
    {
      "content": "Follow [Get started with Mobile Services].",
      "pos": [
        18473,
        18515
      ]
    },
    {
      "content": "Sign in to the [Azure portal], and select your mobile service.",
      "pos": [
        18520,
        18582
      ]
    },
    {
      "pos": [
        18587,
        18627
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Scheduler<ept id=\"p1\">**</ept> tab on the top."
    },
    {
      "pos": [
        18645,
        18713
      ],
      "content": "Create a new scheduled job, insert a name, and select <bpt id=\"p1\">**</bpt>On demand<ept id=\"p1\">**</ept>."
    },
    {
      "content": "When the job is created, click the job name.",
      "pos": [
        18731,
        18775
      ]
    },
    {
      "content": "Then click the <bpt id=\"p1\">**</bpt>Script<ept id=\"p1\">**</ept> tab on the top bar.",
      "pos": [
        18776,
        18821
      ]
    },
    {
      "content": "Insert the following script inside your scheduler function.",
      "pos": [
        18826,
        18885
      ]
    },
    {
      "content": "Make sure to replace the placeholders with your notification hub name and the connection string for <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> that you obtained earlier.",
      "pos": [
        18886,
        19047
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>.",
      "pos": [
        19048,
        19063
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Run Once<ept id=\"p1\">**</ept> on the bottom bar.",
      "pos": [
        19580,
        19617
      ]
    },
    {
      "content": "You should receive a toast notification.",
      "pos": [
        19618,
        19658
      ]
    },
    {
      "pos": [
        19663,
        19699
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "content": "In this simple example, you broadcasted notifications to all your Android devices.",
      "pos": [
        19701,
        19783
      ]
    },
    {
      "content": "In order to target specific users, refer to the tutorial [Use Notification Hubs to push notifications to users].",
      "pos": [
        19784,
        19896
      ]
    },
    {
      "content": "If you want to segment your users by interest groups, you can read [Use Notification Hubs to send breaking news].",
      "pos": [
        19897,
        20010
      ]
    },
    {
      "content": "Learn more about how to use Notification Hubs in [Notification Hubs Guidance] and in the [Notification Hubs How-To for Android].",
      "pos": [
        20011,
        20139
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with Notification Hubs for Xamarin.Android apps | Microsoft Azure\"\n    description=\"In this tutorial, you learn how to use Azure Notification Hubs to send push notifications to a Xamarin Android application.\"\n    authors=\"ysxu\"\n    manager=\"dwrede\"\n    editor=\"\"\n    services=\"notification-hubs\"\n    documentationCenter=\"xamarin\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-xamarin-android\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\"\n    ms.date=\"06/09/2015\"\n    ms.author=\"yuaxu;wesmc\"/>\n\n# Get started with Notification Hubs\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\n\n##Overview\n\nThis tutorial shows you how to use Azure Notification Hubs to send push notifications to a Xamarin.Android application.\nYou'll create a blank Xamarin.Android app that receives push notifications by using Google Cloud Messaging (GCM). When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app. The finished code is available in the [NotificationHubs app][GitHub] sample.\n\nThis tutorial demonstrates the simple broadcast scenario in using Notification Hubs.\n\n##Prerequisites\n\nThis tutorial requires the following:\n\n+ [Xamarin.Android]\n+ Active Google account\n+ [Azure Mobile Services Component]\n+ [Azure Messaging Component]\n+ [Google Cloud Messaging Client Component]\n\nCompleting this tutorial is a prerequisite for all other Notification Hubs tutorials for Xamarin.Android apps.\n\n> [AZURE.IMPORTANT] To complete this tutorial, you must have an active Azure account. If you don't have an account, you can create a free trial account in just a couple of minutes. For details, see [Azure Free Trial](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A9C9624B5&amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fpartner-xamarin-notification-hubs-android-get-started%2F).\n\n##<a name=\"register\"></a>Enable Google Cloud Messaging\n\n[AZURE.INCLUDE [mobile-services-enable-Google-cloud-messaging](../../includes/mobile-services-enable-google-cloud-messaging.md)]\n\n##<a name=\"configure-hub\"></a>Configure your notification hub\n\n[AZURE.INCLUDE [notification-hubs-android-configure-push](../../includes/notification-hubs-android-configure-push.md)]\n\n##<a name=\"connecting-app\"></a>Connect your app to the notification hub\n\n### Create a new project\n\n1. In Xamarin Studio (or Visual Studio), click **File** and **New**, click **Android Application** in the **New Solution** dialog, and finally click **OK**.\n\n    ![][14]\n\n    This creates a new Android project.\n\n2. Open the project properties by right-clicking your new project in the Solution view and choosing **Options**. Select the **Android Application** item in the **Build** section.\n\n    ![][15]\n\n3. Set the **Minimum Android version** to API Level 8.\n\n4. Set the **Target Android version** to the API version that you want to target (must be API level 8 or higher).\n\n5. Ensure that the first letter of your **Package name** is lowercase.\n\n    > [AZURE.IMPORTANT] The first letter of the package name must be lowercase. Otherwise, you will receive application manifest errors when you register your **BroadcastReceiver** and **IntentFilter** for push notifications below.\n\n### Add the required components to your project\n\nThe Google Cloud Messaging Client available on the Xamarin Component Store simplifies the process of supporting push notifications in Xamarin.Android.\n\n1. Right-click the Components folder in Xamarin.Android app and choose **Get More Components**.\n\n2. Search for the **Azure Messaging** component and add it to the project.\n\n3. Search for the **Google Cloud Messaging Client** component and add it to the project.\n\n\n### Set up notification hubs in your project\n\n1. Gather the following information for your Android app and notification hub:\n\n    - **GoogleProjectNumber**:  Get this Project Number value from the overview of your app on the Google Developer Portal. You made a note of this value earlier when you created the app on the portal.\n    - **Listen connection string**: On the dashboard in the Azure portal, click **View connection strings**. Copy the *DefaultListenSharedAccessSignature* connection string for this value.\n    - **Hub name**: This is the name of your hub from the Azure portal. For example, *mynotificationhub2*.\n\n    Create a **Constants.cs** class for your Xamarin project and define the following constant values in the class. Replace the placeholders with your values.\n\n        public const string SenderID = \"<GoogleProjectNumber>\"; // Google API Project Number\n        public const string ListenConnectionString = \"<Listen connection string>\";\n        public const string NotificationHubName = \"<hub name>\";\n\n2. Add the following using statements to **MainActivity.cs**:\n\n        using Android.Util;\n        using Gcm.Client;\n\n3. Add an instance variable to the `MainActivity` class that will be used to show an alert dialog when the app is running:\n\n        public static MainActivity instance;\n\n\n3. Create the following method in the **MainActivity** class:\n\n        private void RegisterWithGCM()\n        {\n            // Check to ensure everything's set up right\n            GcmClient.CheckDevice(this);\n            GcmClient.CheckManifest(this);\n\n            // Register for push notifications\n            Log.Info(\"MainActivity\", \"Registering...\");\n            GcmClient.Register(this, Constants.SenderID);\n        }\n\n4. Add a call to `RegisterWithGCM` in the `OnCreate` method of **MainActivity.cs**:\n\n        protected override void OnCreate (Bundle bundle)\n        {\n            instance = this;\n\n            base.OnCreate (bundle);\n\n            // Set your view from the \"main\" layout resource\n            SetContentView (Resource.Layout.Main);\n\n            // Get your button from the layout resource,\n            // and attach an event to it\n            Button button = FindViewById<Button> (Resource.Id.myButton);\n\n            RegisterWithGCM();\n        }\n\n\n4. Create a new class, **MyBroadcastReceiver**.\n\n    > [AZURE.NOTE] We will walk through creating a **BroadcastReceiver** class from scratch below. However, a quick alternative to manually creating **MyBroadcastReceiver.cs** is to refer to the **GcmService.cs** file found in the sample Xamarin.Android project included with the [NotificationHubs samples][GitHub]. Duplicating **GcmService.cs** and changing class names can be a great place to start as well.\n\n5. Add the following using statements to **MyBroadcastReceiver.cs** (referring to the component and assembly that you added earlier):\n\n        using System.Collections.Generic;\n        using System.Text;\n        using Android.App;\n        using Android.Content;\n        using Android.Util;\n        using Gcm.Client;\n        using WindowsAzure.Messaging;\n\n5. Add the following permission requests between the **using** statements and the **namespace** declaration:\n\n        [assembly: Permission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"com.google.android.c2dm.permission.RECEIVE\")]\n\n        //GET_ACCOUNTS is needed only for Android versions 4.0.3 and below\n        [assembly: UsesPermission(Name = \"android.permission.GET_ACCOUNTS\")]\n        [assembly: UsesPermission(Name = \"android.permission.INTERNET\")]\n        [assembly: UsesPermission(Name = \"android.permission.WAKE_LOCK\")]\n\n6. In **MyBroadcastReceiver.cs**, change the **MyBroadcastReceiver** class to match the following:\n\n        [BroadcastReceiver(Permission=Gcm.Client.Constants.PERMISSION_GCM_INTENTS)]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_MESSAGE },\n            Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_REGISTRATION_CALLBACK },\n            Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_LIBRARY_RETRY },\n            Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        public class MyBroadcastReceiver : GcmBroadcastReceiverBase<PushHandlerService>\n        {\n            public static string[] SENDER_IDS = new string[] { Constants.SenderID };\n\n            public const string TAG = \"MyBroadcastReceiver-GCM\";\n        }\n\n7. Add another class in **MyBroadcastReceiver.cs** named **PushHandlerService**, which derives from **GcmServiceBase**. Make sure to apply the **Service** attribute to the class:\n\n        [Service] // Must use the service tag\n        public class PushHandlerService : GcmServiceBase\n        {\n            public static string RegistrationID { get; private set; }\n            private NotificationHub Hub { get; set; }\n\n            public PushHandlerService() : base(Constants.SenderID)\n            {\n                Log.Info(MyBroadcastReceiver.TAG, \"PushHandlerService() constructor\");\n            }\n        }\n\n\n8. **GcmServiceBase** implements methods **OnRegistered()**, **OnUnRegistered()**, **OnMessage()**, **OnRecoverableError()**, and **OnError()**. Our implementation class **PushHandlerService** must override these methods, and these methods will fire in response to interacting with the notification hub.\n\n\n9. Override the **OnRegistered()** method in **PushHandlerService** by using the following code:\n\n        protected override void OnRegistered(Context context, string registrationId)\n        {\n            Log.Verbose(MyBroadcastReceiver.TAG, \"GCM Registered: \" + registrationId);\n            RegistrationID = registrationId;\n\n            createNotification(\"PushHandlerService-GCM Registered...\",\n                                \"The device has been Registered!\");\n\n            Hub = new NotificationHub(Constants.NotificationHubName, Constants.ListenConnectionString,\n                                        context);\n            try\n            {\n                Hub.UnregisterAll(registrationId);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(MyBroadcastReceiver.TAG, ex.Message);\n            }\n\n            //var tags = new List<string>() { \"falcons\" }; // create tags if you want\n            var tags = new List<string>() {};\n\n            try\n            {\n                var hubRegistration = Hub.Register(registrationId, tags.ToArray());\n            }\n            catch (Exception ex)\n            {\n                Log.Error(MyBroadcastReceiver.TAG, ex.Message);\n            }\n        }\n\n    > [AZURE.NOTE] In the **OnRegistered()** code above, you should note the ability to specify tags to register for specific messaging channels.\n\n10. Override the **OnMessage** method in **PushHandlerService** by using the following code:\n\n        protected override void OnMessage(Context context, Intent intent)\n        {\n            Log.Info(MyBroadcastReceiver.TAG, \"GCM Message Received!\");\n\n            var msg = new StringBuilder();\n\n            if (intent != null && intent.Extras != null)\n            {\n                foreach (var key in intent.Extras.KeySet())\n                    msg.AppendLine(key + \"=\" + intent.Extras.Get(key).ToString());\n            }\n\n            string messageText = intent.Extras.GetString(\"message\");\n            if (!string.IsNullOrEmpty (messageText))\n            {\n                createNotification (\"New hub message!\", messageText);\n            }\n            else\n            {\n                createNotification (\"Unknown message details\", msg.ToString ());\n            }\n        }\n\n11. Add the following **createNotification** and **dialogNotify** methods to **PushHandlerService** for notifying users when a notification is received.\n\n    >[AZURE.NOTE] Notification design in Android version 5.0 and later represents a significant departure from that of previous versions. If you test this on Android 5.0 or later, the app will need to be running to receive the notification. For more information, see [Android Notifications](http://go.microsoft.com/fwlink/?LinkId=615880).\n\n        void createNotification(string title, string desc)\n        {\n            //Create notification\n            var notificationManager = GetSystemService(Context.NotificationService) as NotificationManager;\n\n            //Create an intent to show UI\n            var uiIntent = new Intent(this, typeof(MainActivity));\n\n            //Create the notification\n            var notification = new Notification(Android.Resource.Drawable.SymActionEmail, title);\n\n            //Auto-cancel will remove the notification once the user touches it\n            notification.Flags = NotificationFlags.AutoCancel;\n\n            //Set the notification info\n            //we use the pending intent, passing our ui intent over, which will get called\n            //when the notification is tapped.\n            notification.SetLatestEventInfo(this, title, desc, PendingIntent.GetActivity(this, 0, uiIntent, 0));\n\n            //Show the notification\n            notificationManager.Notify(1, notification);\n            dialogNotify (title, desc);\n        }\n\n        protected void dialogNotify(String title, String message)\n        {\n\n            MainActivity.instance.RunOnUiThread(() => {\n                AlertDialog.Builder dlg = new AlertDialog.Builder(MainActivity.instance);\n                AlertDialog alert = dlg.Create();\n                alert.SetTitle(title);\n                alert.SetButton(\"Ok\", delegate {\n                    alert.Dismiss();\n                });\n                alert.SetMessage(message);\n                alert.Show();\n            });\n        }\n\n\n12. Override abstract members **OnUnRegistered()**, **OnRecoverableError()**, and **OnError()** so that your code compiles:\n\n        protected override void OnUnRegistered(Context context, string registrationId)\n        {\n            Log.Verbose(MyBroadcastReceiver.TAG, \"GCM Unregistered: \" + registrationId);\n\n            createNotification(\"GCM Unregistered...\", \"The device has been unregistered!\");\n        }\n\n        protected override bool OnRecoverableError(Context context, string errorId)\n        {\n            Log.Warn(MyBroadcastReceiver.TAG, \"Recoverable Error: \" + errorId);\n\n            return base.OnRecoverableError (context, errorId);\n        }\n\n        protected override void OnError(Context context, string errorId)\n        {\n            Log.Error(MyBroadcastReceiver.TAG, \"GCM Error: \" + errorId);\n        }\n\n\n##<a name=\"run-app\"></a>Run your app in the emulator\n\nIf you run this app in the emulator, make sure that you use an Android Virtual Device (AVD) that supports Google APIs.\n\n> [AZURE.IMPORTANT] In order to receive push notifications, you must set up a Google account on your Android Virtual Device. (In the emulator, navigate to **Settings** and click **Add Account**.) Also, make sure that the emulator is connected to the Internet.\n\n>[AZURE.NOTE] Notification design in Android version 5.0 and later represents a significant departure from that of previous versions. If you test this on Android 5.0 or later, the app will need to be running to receive the notification. For more information, see [Android Notifications](http://go.microsoft.com/fwlink/?LinkId=615880).\n\n\n1. From **Tools**, click **Open Android Emulator Manager**, select your device, and then click **Edit**.\n\n    ![][18]\n\n2. Select **Google APIs** in **Target**, and then click **OK**.\n\n    ![][19]\n\n3. On the top toolbar, click **Run**, and then select your app. This starts the emulator and runs the app.\n\n  The app retrieves the *registrationId* from GCM and registers with the notification hub.\n\n##Send notifications from your backend\n\n\nYou can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.\n\n![][30]\n\n\nPush notifications are normally sent in a backend service like Mobile Services or ASP.NET through a compatible library. You can also use the REST API directly to send notification messages if a library is not available for your backend.\n\nHere is a list of some other tutorials that you may want to review for sending notifications:\n\n- ASP.NET: See [Use Notification Hubs to push notifications to users].\n- Azure Notification Hubs Java SDK: See [How to use Notification Hubs from Java](notification-hubs-java-backend-how-to.md) for sending notifications from Java. This has been tested in Eclipse for Android Development.\n- PHP: See [How to use Notification Hubs from PHP](notification-hubs-php-backend-how-to.md).\n\n\nIn the next subsections of the tutorial, you send notifications by using a .NET console app, and by using a mobile service through a node script.\n\n###Send notifications by using a .NET app\n\n\nMicrosoft provides the Azure Service Bus SDK for sending notifications on the .NET platform. In this section, you will create a .NET console application with Visual Studio to use the Azure Service Bus SDK to send a notification.\n\n1. Create a new Visual C# console application:\n\n    ![][20]\n\n2. Add a reference to the Azure Service Bus SDK by using the <a href=\"http://nuget.org/packages/WindowsAzure.ServiceBus/\">WindowsAzure.ServiceBus NuGet package</a>. In the Visual Studio main menu, click **Tools**, click **Library Package Manager**, and then click **Package Manager Console**. Then, in the console window, type:\n\n        Install-Package WindowsAzure.ServiceBus\n\n    and press Enter.\n\n2. Open the file Program.cs and add the following using statement:\n\n        using Microsoft.ServiceBus.Notifications;\n\n3. In your `Program` class, add the following method. Update the placeholder text with your *DefaultFullSharedAccessSignature* connection string and hub name from the Azure portal.\n\n        private static async void SendNotificationAsync()\n        {\n            NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"<connection string with full access>\", \"<hub name>\");\n            await hub.SendGcmNativeNotificationAsync(\"{ \\\"data\\\" : {\\\"message\\\":\\\"Hello from Azure!\\\"}}\");\n        }\n\n4. Add the following lines in your **Main** method:\n\n         SendNotificationAsync();\n         Console.ReadLine();\n\n5. Press the F5 key to run the app. You should receive a notification in the app.\n\n    ![][21]\n\n###Send notifications by using a mobile service\n\n1. Follow [Get started with Mobile Services].\n\n1. Sign in to the [Azure portal], and select your mobile service.\n\n2. Select the **Scheduler** tab on the top.\n\n    ![][22]\n\n3. Create a new scheduled job, insert a name, and select **On demand**.\n\n    ![][23]\n\n4. When the job is created, click the job name. Then click the **Script** tab on the top bar.\n\n5. Insert the following script inside your scheduler function. Make sure to replace the placeholders with your notification hub name and the connection string for *DefaultFullSharedAccessSignature* that you obtained earlier. Click **Save**.\n\n        var azure = require('azure');\n        var notificationHubService = azure.createNotificationHubService('<hub name>', '<connection string>');\n        notificationHubService.gcm.send(null,'{\"data\":{\"message\" : \"Hello from Mobile Services!\"}}',\n          function (error)\n          {\n            if (!error) {\n               console.warn(\"Notification successful\");\n            }\n            else\n            {\n              console.warn(\"Notification failed\" + error);\n            }\n          }\n        );\n\n6. Click **Run Once** on the bottom bar. You should receive a toast notification.\n\n## <a name=\"next-steps\"> </a>Next steps\n\nIn this simple example, you broadcasted notifications to all your Android devices. In order to target specific users, refer to the tutorial [Use Notification Hubs to push notifications to users]. If you want to segment your users by interest groups, you can read [Use Notification Hubs to send breaking news]. Learn more about how to use Notification Hubs in [Notification Hubs Guidance] and in the [Notification Hubs How-To for Android].\n\n<!-- Anchors. -->\n[Enable Google Cloud Messaging]: #register\n[Configure your Notification Hub]: #configure-hub\n[Connecting your app to the Notification Hub]: #connecting-app\n[Run your app with the emulator]: #run-app\n[Send notifications from your back-end]: #send\n[Next steps]:#next-steps\n\n<!-- Images. -->\n[1]: ./media/partner-xamarin-notification-hubs-android-get-started/mobile-services-google-developers.png\n[2]: ./media/partner-xamarin-notification-hubs-android-get-started/mobile-services-google-create-server.png\n[3]: ./media/partner-xamarin-notification-hubs-android-get-started/mobile-services-google-create-server2.png\n[4]: ./media/partner-xamarin-notification-hubs-android-get-started/mobile-services-google-create-server3.png\n\n[7]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-from-portal.png\n[8]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-from-portal2.png\n[9]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-select-from-portal.png\n[10]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-select-from-portal2.png\n[11]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-configure-android.png\n[12]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-connection-strings.png\n\n[13]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-xamarin-android-app1.png\n[14]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-xamarin-android-app2.png\n[15]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-xamarin-android-app3.png\n\n[18]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-android-app7.png\n[19]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-android-app8.png\n\n[20]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-create-console-app.png\n[21]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-android-toast.png\n[22]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-scheduler1.png\n[23]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hub-scheduler2.png\n\n[30]: ./media/partner-xamarin-notification-hubs-android-get-started/notification-hubs-debug-hub-gcm.png\n\n\n<!-- URLs. -->\n[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\n[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\n[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253\n[Get started with Mobile Services]: /develop/mobile/tutorials/get-started-xamarin-android/#create-new-service\n[JavaScript and HTML]: /develop/mobile/tutorials/get-started-with-push-js\n\n[Azure portal]: https://manage.windowsazure.com/\n[wns object]: http://go.microsoft.com/fwlink/p/?LinkId=260591\n[Notification Hubs Guidance]: http://msdn.microsoft.com/library/jj927170.aspx\n[Notification Hubs How-To for Android]: http://msdn.microsoft.com/library/dn282661.aspx\n\n[Use Notification Hubs to push notifications to users]: /manage/services/notification-hubs/notify-users-aspnet\n[Use Notification Hubs to send breaking news]: /manage/services/notification-hubs/breaking-news-dotnet\n[GCMClient Component page]: http://components.xamarin.com/view/GCMClient\n[Xamarin.NotificationHub GitHub page]: https://github.com/SaschaDittmann/Xamarin.NotificationHub\n[GitHub]: http://go.microsoft.com/fwlink/p/?LinkId=331329\n[Xamarin.Android]: http://xamarin.com/download/\n[Azure Mobile Services Component]: http://components.xamarin.com/view/azure-mobile-services/\n[Google Cloud Messaging Client Component]: http://components.xamarin.com/view/GCMClient/\n[Azure Messaging Component]: http://components.xamarin.com/view/azure-messaging\n"
}