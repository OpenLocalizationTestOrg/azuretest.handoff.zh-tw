{
  "nodes": [
    {
      "content": "How to use Service Bus topics (.NET) | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus topics and subscriptions in Azure.",
      "pos": [
        100,
        163
      ]
    },
    {
      "content": "Code samples are written for .NET applications.",
      "pos": [
        164,
        211
      ]
    },
    {
      "content": "How to use Azure Service Bus topics and subscriptions",
      "pos": [
        525,
        578
      ]
    },
    {
      "content": "This article describes how to use Service Bus topics and subscriptions.",
      "pos": [
        580,
        651
      ]
    },
    {
      "content": "The samples are written in C# and use the .NET APIs.",
      "pos": [
        652,
        704
      ]
    },
    {
      "content": "The scenarios covered include creating topics and subscriptions, creating subscription filters, sending messages to a topic, receiving messages from a subscription, and deleting topics and subscriptions.",
      "pos": [
        705,
        908
      ]
    },
    {
      "content": "For more information about topics and subscriptions, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#Next-steps)</ept> section.",
      "pos": [
        909,
        1004
      ]
    },
    {
      "content": "Configure the application to use Service Bus",
      "pos": [
        1175,
        1219
      ]
    },
    {
      "content": "When you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.",
      "pos": [
        1221,
        1369
      ]
    },
    {
      "content": "Get the Service Bus NuGet package",
      "pos": [
        1374,
        1407
      ]
    },
    {
      "content": "The Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        1409,
        1560
      ]
    },
    {
      "content": "The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express.",
      "pos": [
        1561,
        1694
      ]
    },
    {
      "content": "The Service Bus NuGet package is the easiest way",
      "pos": [
        1695,
        1743
      ]
    },
    {
      "content": "to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        1744,
        1846
      ]
    },
    {
      "content": "To install the NuGet package in your application, do the following:",
      "pos": [
        1848,
        1915
      ]
    },
    {
      "pos": [
        1921,
        2012
      ],
      "content": "In Solution Explorer, right-click **References**, then click\n**Manage NuGet Packages**.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "In Solution Explorer, right-click <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept>, then click",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>.",
          "pos": [
            61,
            87
          ]
        }
      ]
    },
    {
      "pos": [
        2017,
        2187
      ],
      "content": "Search for \"Service Bus\" and select the **Microsoft Azure\nService Bus** item. Click **Install** to complete the installation,\nthen close the following dialog box.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "Search for \"Service Bus\" and select the **Microsoft Azure\nService Bus** item. Click **Install** to complete the installation,",
          "pos": [
            0,
            125
          ],
          "nodes": [
            {
              "content": "Search for \"Service Bus\" and select the <bpt id=\"p1\">**</bpt>Microsoft Azure\nService Bus<ept id=\"p1\">**</ept> item.",
              "pos": [
                0,
                77
              ]
            },
            {
              "content": "Click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept> to complete the installation,",
              "pos": [
                78,
                125
              ]
            }
          ]
        },
        {
          "content": "then close the following dialog box.",
          "pos": [
            126,
            162
          ]
        }
      ]
    },
    {
      "content": "You are now ready to write code for Service Bus.",
      "pos": [
        2201,
        2249
      ]
    },
    {
      "content": "How to set up a Service Bus connection string",
      "pos": [
        2254,
        2299
      ]
    },
    {
      "content": "Service Bus uses a connection string to store endpoints and credentials.",
      "pos": [
        2301,
        2373
      ]
    },
    {
      "content": "You can put your connection string in a configuration file, rather than hard-coding it:",
      "pos": [
        2374,
        2461
      ]
    },
    {
      "content": "When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).",
      "pos": [
        2465,
        2625
      ]
    },
    {
      "content": "When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).",
      "pos": [
        2628,
        2808
      ]
    },
    {
      "pos": [
        2810,
        2953
      ],
      "content": "In both cases, you can retrieve your connection string using the <ph id=\"ph1\">`CloudConfigurationManager.GetSetting`</ph> method, as shown later in this article."
    },
    {
      "content": "Configuring your connection string when using Cloud Services",
      "pos": [
        2959,
        3019
      ]
    },
    {
      "content": "The service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application.",
      "pos": [
        3021,
        3220
      ]
    },
    {
      "content": "For example, add a <ph id=\"ph1\">`Setting`</ph> label to your service definition (*<bpt id=\"p1\">**</bpt>.csdef<ept id=\"p1\">**</ept>) file, as shown in the next example.",
      "pos": [
        3221,
        3332
      ]
    },
    {
      "content": "You then specify values in the service configuration (.cscfg) file.",
      "pos": [
        3626,
        3693
      ]
    },
    {
      "content": "Use the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as",
      "pos": [
        4141,
        4237
      ]
    },
    {
      "content": "described in the previous section.",
      "pos": [
        4238,
        4272
      ]
    },
    {
      "content": "Configuring your connection string when using Azure websites or Azure Virtual Machines",
      "pos": [
        4278,
        4364
      ]
    },
    {
      "content": "When using websites or Virtual Machines, it is recommended you use the .NET configuration system (for example, Web.config).",
      "pos": [
        4366,
        4489
      ]
    },
    {
      "content": "You store the connection string using the <ph id=\"ph1\">`&lt;appSettings&gt;`</ph> element.",
      "pos": [
        4490,
        4556
      ]
    },
    {
      "content": "Use the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.",
      "pos": [
        4863,
        4974
      ]
    },
    {
      "content": "How to create a topic",
      "pos": [
        4979,
        5000
      ]
    },
    {
      "content": "You can perform management operations for Service Bus topics and subscriptions using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`NamespaceManager`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.",
      "pos": [
        5002,
        5197
      ]
    },
    {
      "content": "This class provides methods to create, enumerate, and delete topics.",
      "pos": [
        5198,
        5266
      ]
    },
    {
      "content": "The following example constructs a <ph id=\"ph1\">`NamespaceManager`</ph> object using the Azure <ph id=\"ph2\">`CloudConfigurationManager`</ph> class",
      "pos": [
        5268,
        5378
      ]
    },
    {
      "content": "with a connection string consisting of the base address of a Service Bus service namespace and the appropriate",
      "pos": [
        5379,
        5489
      ]
    },
    {
      "content": "SAS credentials with permissions to manage it.",
      "pos": [
        5490,
        5536
      ]
    },
    {
      "content": "This connection string is of the following form.",
      "pos": [
        5537,
        5585
      ]
    },
    {
      "content": "Use the following example, given the configuration settings in the previous section.",
      "pos": [
        5723,
        5807
      ]
    },
    {
      "content": "There are overloads of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`CreateTopic`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.createtopic.aspx)</ept> method that enable you to tune properties of the topic, for example, to set the default \"time-to-live\" value to be applied to messages sent to the topic.",
      "pos": [
        6196,
        6483
      ]
    },
    {
      "content": "These settings are applied by using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`TopicDescription`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicdescription.aspx)</ept> class.",
      "pos": [
        6484,
        6640
      ]
    },
    {
      "content": "The following example shows how to create a topic named TestTopic with a maximum size of 5 GB and a default message time-to-live of 1 minute.",
      "pos": [
        6641,
        6782
      ]
    },
    {
      "pos": [
        7344,
        7687
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You can use the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`TopicExists`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.topicexists.aspx)</ept> method on <bpt id=\"p2\">[</bpt><ph id=\"ph3\">`NamespaceManager`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> objects to check whether a topic with a specified name already exists within a service namespace."
    },
    {
      "content": "How to create a subscription",
      "pos": [
        7692,
        7720
      ]
    },
    {
      "content": "You can also create topic subscriptions using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`NamespaceManager`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx)</ept> class.",
      "pos": [
        7722,
        7878
      ]
    },
    {
      "content": "Subscriptions are named and can have an optional filter that",
      "pos": [
        7879,
        7939
      ]
    },
    {
      "content": "restricts the set of messages passed to the subscription's virtual",
      "pos": [
        7940,
        8006
      ]
    },
    {
      "content": "queue.",
      "pos": [
        8007,
        8013
      ]
    },
    {
      "content": "Create a subscription with the default (MatchAll) filter",
      "pos": [
        8019,
        8075
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.",
      "pos": [
        8077,
        8197
      ]
    },
    {
      "content": "When you use the <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter, all messages published to the topic are placed in the subscription's virtual queue.",
      "pos": [
        8198,
        8319
      ]
    },
    {
      "content": "The following example creates a subscription named \"AllMessages\" and uses the default <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter.",
      "pos": [
        8320,
        8426
      ]
    },
    {
      "content": "Create subscriptions with filters",
      "pos": [
        8809,
        8842
      ]
    },
    {
      "content": "You can also set up filters that enable you to specify which messages sent to a topic should appear within a specific topic subscription.",
      "pos": [
        8844,
        8981
      ]
    },
    {
      "content": "The most flexible type of filter supported by subscriptions is the <bpt id=\"p1\">[</bpt><ept id=\"p1\">SqlFilter]</ept> class, which implements a subset of SQL92.",
      "pos": [
        8983,
        9104
      ]
    },
    {
      "content": "SQL filters operate on the properties of the messages that are published to the topic.",
      "pos": [
        9105,
        9191
      ]
    },
    {
      "content": "For more information about the expressions that can be used with a SQL filter, see the <bpt id=\"p1\">[</bpt>SqlFilter.SqlExpression<ept id=\"p1\">][]</ept> syntax.",
      "pos": [
        9192,
        9314
      ]
    },
    {
      "pos": [
        9316,
        9498
      ],
      "content": "The following example creates a subscription named <bpt id=\"p1\">**</bpt>HighMessages<ept id=\"p1\">**</ept> with a <bpt id=\"p2\">[</bpt><ept id=\"p2\">SqlFilter]</ept> object that only selects messages that have a custom <bpt id=\"p3\">**</bpt>MessageNumber<ept id=\"p3\">**</ept> property greater than 3."
    },
    {
      "pos": [
        9744,
        9931
      ],
      "content": "Similarly, the following example creates a subscription named <bpt id=\"p1\">**</bpt>LowMessages<ept id=\"p1\">**</ept> with a <bpt id=\"p2\">[</bpt><ept id=\"p2\">SqlFilter]</ept> that only selects messages that have a <bpt id=\"p3\">**</bpt>MessageNumber<ept id=\"p3\">**</ept> property less than or equal to 3."
    },
    {
      "pos": [
        10174,
        10456
      ],
      "content": "Now when a message is sent to <ph id=\"ph1\">`TestTopic`</ph>, it is always delivered to receivers subscribed to the <bpt id=\"p1\">**</bpt>AllMessages<ept id=\"p1\">**</ept> topic subscription, and selectively delivered to receivers subscribed to the <bpt id=\"p2\">**</bpt>HighMessages<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>LowMessages<ept id=\"p3\">**</ept> topic subscriptions (depending on the message content)."
    },
    {
      "content": "How to send messages to a topic",
      "pos": [
        10461,
        10492
      ]
    },
    {
      "pos": [
        10494,
        10704
      ],
      "content": "To send a message to a Service Bus topic, your application creates a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`TopicClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object using the connection string."
    },
    {
      "pos": [
        10706,
        11066
      ],
      "content": "The following code demonstrates how to create a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`TopicClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.aspx)</ept> object for the <bpt id=\"p2\">**</bpt>TestTopic<ept id=\"p2\">**</ept> topic created earlier using the <bpt id=\"p3\">[</bpt><ph id=\"ph2\">`CreateFromConnectionString`</ph><ept id=\"p3\">](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx)</ept> API call."
    },
    {
      "content": "Messages sent to Service Bus topics are instances of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`BrokeredMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> class.",
      "pos": [
        11333,
        11510
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set of",
      "pos": [
        11511,
        11552
      ]
    },
    {
      "content": "standard properties (such as <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Label`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`TimeToLive`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>), a dictionary that is used to hold custom application-specific properties, and a body of arbitrary application data.",
      "pos": [
        11553,
        11933
      ]
    },
    {
      "content": "An application can set the body of the",
      "pos": [
        11934,
        11972
      ]
    },
    {
      "content": "message by passing any serializable object to the constructor of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`BrokeredMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> object, and the appropriate <bpt id=\"p2\">**</bpt>DataContractSerializer<ept id=\"p2\">**</ept> is then used to serialize the object.",
      "pos": [
        11973,
        12248
      ]
    },
    {
      "content": "Alternatively, a <bpt id=\"p1\">**</bpt>System.IO.Stream<ept id=\"p1\">**</ept> can be provided.",
      "pos": [
        12249,
        12303
      ]
    },
    {
      "content": "The following example demonstrates how to send five test messages to the <bpt id=\"p1\">**</bpt>TestTopic<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`TopicClient`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> object obtained in the previous code example.",
      "pos": [
        12305,
        12543
      ]
    },
    {
      "content": "Note that the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`MessageNumber`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx)</ept> property value of each message varies depending on the iteration of the loop (this determines which subscriptions receive it).",
      "pos": [
        12544,
        12807
      ]
    },
    {
      "content": "Service Bus topics support a <bpt id=\"p1\">[</bpt>maximum message size of 256 KB<ept id=\"p1\">](service-bus-quotas.md)</ept> (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        13172,
        13367
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.",
      "pos": [
        13368,
        13497
      ]
    },
    {
      "content": "This topic size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        13498,
        13571
      ]
    },
    {
      "content": "If partitioning is enabled, the upper limit is higher.",
      "pos": [
        13572,
        13626
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Partitioning Messaging Entities<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn520246.aspx)</ept>.",
      "pos": [
        13627,
        13743
      ]
    },
    {
      "content": "How to receive messages from a subscription",
      "pos": [
        13748,
        13791
      ]
    },
    {
      "content": "The recommended way to receive messages from a subscription is to use a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`SubscriptionClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx)</ept> object.",
      "pos": [
        13793,
        13992
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>SubscriptionClient<ept id=\"p1\">**</ept> objects can work in two different modes: <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`ReceiveAndDelete`</ph> and <ph id=\"ph2\">`PeekLock`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>.",
      "pos": [
        13993,
        14183
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application.",
      "pos": [
        14185,
        14420
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        14421,
        14586
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        14587,
        14714
      ]
    },
    {
      "content": "Because Service Bus will have marked",
      "pos": [
        14715,
        14751
      ]
    },
    {
      "content": "the message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        14752,
        14913
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (which is the default mode), the receive process becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        14915,
        15101
      ]
    },
    {
      "content": "When Service Bus receives a request,",
      "pos": [
        15102,
        15138
      ]
    },
    {
      "content": "it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        15139,
        15270
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.",
      "pos": [
        15271,
        15576
      ]
    },
    {
      "content": "When Service Bus sees the <ph id=\"ph1\">`Complete`</ph> call, it marks the message as being consumed and removes it from the subscription.",
      "pos": [
        15577,
        15696
      ]
    },
    {
      "content": "The following example demonstrates how messages can be received and processed using the default <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode.",
      "pos": [
        15698,
        15812
      ]
    },
    {
      "content": "To specify a different <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ReceiveMode`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> value, you can use another overload for <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`CreateFromConnectionString`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx)</ept>.",
      "pos": [
        15813,
        16137
      ]
    },
    {
      "content": "This example uses the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`OnMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback to process messages as they arrive",
      "pos": [
        16138,
        16324
      ]
    },
    {
      "content": "in the <bpt id=\"p1\">**</bpt>HighMessages<ept id=\"p1\">**</ept> subscription.",
      "pos": [
        16325,
        16362
      ]
    },
    {
      "content": "This example configures the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`OnMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> callback using an <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`OnMessageOptions`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> object.",
      "pos": [
        17480,
        17770
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`AutoComplete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept> is set to <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept> to enable manual control of when to call <bpt id=\"p3\">[</bpt><ph id=\"ph2\">`Complete`</ph><ept id=\"p3\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.",
      "pos": [
        17771,
        18097
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`AutoRenewTimeout`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages.",
      "pos": [
        18098,
        18398
      ]
    },
    {
      "content": "This property value reduces the number of times the client makes",
      "pos": [
        18399,
        18463
      ]
    },
    {
      "content": "chargeable calls that do not retrieve messages.",
      "pos": [
        18464,
        18511
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        18516,
        18573
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        18575,
        18710
      ]
    },
    {
      "content": "If a receiving application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Abandon`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> method on the received message (instead",
      "pos": [
        18711,
        18962
      ]
    },
    {
      "content": "of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> method).",
      "pos": [
        18963,
        19094
      ]
    },
    {
      "content": "This causes Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        19095,
        19286
      ]
    },
    {
      "content": "There is also a time-out associated with a message locked within the subscription, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.",
      "pos": [
        19288,
        19594
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> request is issued, the message will be redelivered to the application when it restarts.",
      "pos": [
        19596,
        19885
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>; that is, each message is processed at least once but in certain situations the same message may be",
      "pos": [
        19886,
        20035
      ]
    },
    {
      "content": "redelivered.",
      "pos": [
        20036,
        20048
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        20049,
        20217
      ]
    },
    {
      "content": "This is often achieved using the",
      "pos": [
        20218,
        20250
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`MessageId`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> property of the message, which will remain constant across delivery attempts.",
      "pos": [
        20251,
        20446
      ]
    },
    {
      "content": "How to delete topics and subscriptions",
      "pos": [
        20451,
        20489
      ]
    },
    {
      "pos": [
        20491,
        20607
      ],
      "content": "The following example demonstrates how to delete the topic <bpt id=\"p1\">**</bpt>TestTopic<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>HowToSample<ept id=\"p2\">**</ept> service namespace."
    },
    {
      "content": "Deleting a topic also deletes any subscriptions that are registered with the topic.",
      "pos": [
        20680,
        20763
      ]
    },
    {
      "content": "Subscriptions can also be deleted independently.",
      "pos": [
        20764,
        20812
      ]
    },
    {
      "content": "The following code demonstrates how to delete a subscription named <bpt id=\"p1\">**</bpt>HighMessages<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>TestTopic<ept id=\"p2\">**</ept> topic.",
      "pos": [
        20813,
        20926
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        21004,
        21014
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus topics and subscriptions, follow these links to learn more.",
      "pos": [
        21016,
        21125
      ]
    },
    {
      "pos": [
        21131,
        21193
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        21198,
        21230
      ],
      "content": "API reference for <bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        21235,
        21378
      ],
      "content": "Build a working application that sends and receives messages to and from a Service Bus queue: <bpt id=\"p1\">[</bpt>Service Bus Brokered Messaging .NET Tutorial<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        21383,
        21468
      ],
      "content": "Service Bus samples: Download from <bpt id=\"p1\">[</bpt>Azure Samples<ept id=\"p1\">][]</ept> or see the overview on <bpt id=\"p2\">[</bpt>MSDN<ept id=\"p2\">][]</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus topics (.NET) | Microsoft Azure\"\n    description=\"Learn how to use Service Bus topics and subscriptions in Azure. Code samples are written for .NET applications.\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"get-started-article\"\n    ms.date=\"07/02/2015\"\n    ms.author=\"sethm\"/>\n\n# How to use Azure Service Bus topics and subscriptions\n\nThis article describes how to use Service Bus topics and subscriptions. The samples are written in C# and use the .NET APIs. The scenarios covered include creating topics and subscriptions, creating subscription filters, sending messages to a topic, receiving messages from a subscription, and deleting topics and subscriptions. For more information about topics and subscriptions, see the [Next steps](#Next-steps) section.\n\n[AZURE.INCLUDE [create-account-note](../../includes/create-account-note.md)]\n\n[AZURE.INCLUDE [howto-service-bus-topics](../../includes/howto-service-bus-topics.md)]\n\n## Configure the application to use Service Bus\n\nWhen you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.\n\n## Get the Service Bus NuGet package\n\nThe Service Bus NuGet package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies. The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express. The Service Bus NuGet package is the easiest way\nto get the Service Bus API and to configure your application with all of the Service Bus dependencies.\n\nTo install the NuGet package in your application, do the following:\n\n1.  In Solution Explorer, right-click **References**, then click\n    **Manage NuGet Packages**.\n2.  Search for \"Service Bus\" and select the **Microsoft Azure\n    Service Bus** item. Click **Install** to complete the installation,\n    then close the following dialog box.\n\n    ![][7]\n\nYou are now ready to write code for Service Bus.\n\n## How to set up a Service Bus connection string\n\nService Bus uses a connection string to store endpoints and credentials. You can put your connection string in a configuration file, rather than hard-coding it:\n\n- When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).\n- When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).\n\nIn both cases, you can retrieve your connection string using the `CloudConfigurationManager.GetSetting` method, as shown later in this article.\n\n### Configuring your connection string when using Cloud Services\n\nThe service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application. For example, add a `Setting` label to your service definition (***.csdef**) file, as shown in the next example.\n\n    <ServiceDefinition name=\"Azure1\">\n    ...\n        <WebRole name=\"MyRole\" vmsize=\"Small\">\n            <ConfigurationSettings>\n                <Setting name=\"Microsoft.ServiceBus.ConnectionString\" />\n            </ConfigurationSettings>\n        </WebRole>\n    ...\n    </ServiceDefinition>\n\nYou then specify values in the service configuration (.cscfg) file.\n\n    <ServiceConfiguration serviceName=\"Azure1\">\n    ...\n        <Role name=\"MyRole\">\n            <ConfigurationSettings>\n                <Setting name=\"Microsoft.ServiceBus.ConnectionString\"\n                         value=\"Endpoint=sb://yourServiceNamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n            </ConfigurationSettings>\n        </Role>\n    ...\n    </ServiceConfiguration>\n\nUse the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as\ndescribed in the previous section.\n\n### Configuring your connection string when using Azure websites or Azure Virtual Machines\n\nWhen using websites or Virtual Machines, it is recommended you use the .NET configuration system (for example, Web.config). You store the connection string using the `<appSettings>` element.\n\n    <configuration>\n        <appSettings>\n            <add key=\"Microsoft.ServiceBus.ConnectionString\"\n                 value=\"Endpoint=sb://yourServiceNamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n        </appSettings>\n    </configuration>\n\nUse the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.\n\n## How to create a topic\n\nYou can perform management operations for Service Bus topics and subscriptions using the [`NamespaceManager`](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx) class. This class provides methods to create, enumerate, and delete topics.\n\nThe following example constructs a `NamespaceManager` object using the Azure `CloudConfigurationManager` class\nwith a connection string consisting of the base address of a Service Bus service namespace and the appropriate\nSAS credentials with permissions to manage it. This connection string is of the following form.\n\n    Endpoint=sb://<yourServiceNamespace>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\n\nUse the following example, given the configuration settings in the previous section.\n\n    // Create the topic if it does not exist already.\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n        NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.TopicExists(\"TestTopic\"))\n    {\n        namespaceManager.CreateTopic(\"TestTopic\");\n    }\n\nThere are overloads of the [`CreateTopic`](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.createtopic.aspx) method that enable you to tune properties of the topic, for example, to set the default \"time-to-live\" value to be applied to messages sent to the topic. These settings are applied by using the [`TopicDescription`](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicdescription.aspx) class. The following example shows how to create a topic named TestTopic with a maximum size of 5 GB and a default message time-to-live of 1 minute.\n\n    // Configure Topic Settings.\n    TopicDescription td = new TopicDescription(\"TestTopic\");\n    td.MaxSizeInMegabytes = 5120;\n    td.DefaultMessageTimeToLive = new TimeSpan(0, 1, 0);\n\n    // Create a new Topic with custom settings.\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n        NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.TopicExists(\"TestTopic\"))\n    {\n        namespaceManager.CreateTopic(td);\n    }\n\n> [AZURE.NOTE] You can use the [`TopicExists`](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.topicexists.aspx) method on [`NamespaceManager`](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx) objects to check whether a topic with a specified name already exists within a service namespace.\n\n## How to create a subscription\n\nYou can also create topic subscriptions using the [`NamespaceManager`](https://msdn.microsoft.com/library/microsoft.servicebus.namespacemanager.aspx) class. Subscriptions are named and can have an optional filter that\nrestricts the set of messages passed to the subscription's virtual\nqueue.\n\n### Create a subscription with the default (MatchAll) filter\n\nThe **MatchAll** filter is the default filter that is used if no filter is specified when a new subscription is created. When you use the **MatchAll** filter, all messages published to the topic are placed in the subscription's virtual queue. The following example creates a subscription named \"AllMessages\" and uses the default **MatchAll** filter.\n\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n        NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.SubscriptionExists(\"TestTopic\", \"AllMessages\"))\n    {\n        namespaceManager.CreateSubscription(\"TestTopic\", \"AllMessages\");\n    }\n\n### Create subscriptions with filters\n\nYou can also set up filters that enable you to specify which messages sent to a topic should appear within a specific topic subscription.\n\nThe most flexible type of filter supported by subscriptions is the [SqlFilter] class, which implements a subset of SQL92. SQL filters operate on the properties of the messages that are published to the topic. For more information about the expressions that can be used with a SQL filter, see the [SqlFilter.SqlExpression][] syntax.\n\nThe following example creates a subscription named **HighMessages** with a [SqlFilter] object that only selects messages that have a custom **MessageNumber** property greater than 3.\n\n     // Create a \"HighMessages\" filtered subscription.\n     SqlFilter highMessagesFilter =\n        new SqlFilter(\"MessageNumber > 3\");\n\n     namespaceManager.CreateSubscription(\"TestTopic\",\n        \"HighMessages\",\n        highMessagesFilter);\n\nSimilarly, the following example creates a subscription named **LowMessages** with a [SqlFilter] that only selects messages that have a **MessageNumber** property less than or equal to 3.\n\n     // Create a \"LowMessages\" filtered subscription.\n     SqlFilter lowMessagesFilter =\n        new SqlFilter(\"MessageNumber <= 3\");\n\n     namespaceManager.CreateSubscription(\"TestTopic\",\n        \"LowMessages\",\n        lowMessagesFilter);\n\nNow when a message is sent to `TestTopic`, it is always delivered to receivers subscribed to the **AllMessages** topic subscription, and selectively delivered to receivers subscribed to the **HighMessages** and **LowMessages** topic subscriptions (depending on the message content).\n\n## How to send messages to a topic\n\nTo send a message to a Service Bus topic, your application creates a [`TopicClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx) object using the connection string.\n\nThe following code demonstrates how to create a [`TopicClient`](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.aspx) object for the **TestTopic** topic created earlier using the [`CreateFromConnectionString`](https://msdn.microsoft.com/library/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx) API call.\n\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    TopicClient Client =\n        TopicClient.CreateFromConnectionString(connectionString, \"TestTopic\");\n\n    Client.Send(new BrokeredMessage());\n\n\nMessages sent to Service Bus topics are instances of the [`BrokeredMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) class. **BrokeredMessage** objects have a set of\nstandard properties (such as [`Label`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx) and [`TimeToLive`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)), a dictionary that is used to hold custom application-specific properties, and a body of arbitrary application data. An application can set the body of the\nmessage by passing any serializable object to the constructor of the [`BrokeredMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) object, and the appropriate **DataContractSerializer** is then used to serialize the object. Alternatively, a **System.IO.Stream** can be provided.\n\nThe following example demonstrates how to send five test messages to the **TestTopic** [`TopicClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.topicclient.aspx) object obtained in the previous code example. Note that the [`MessageNumber`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx) property value of each message varies depending on the iteration of the loop (this determines which subscriptions receive it).\n\n     for (int i=0; i<5; i++)\n     {\n       // Create message, passing a string message for the body.\n       BrokeredMessage message =\n        new BrokeredMessage(\"Test message \" + i);\n\n       // Set additional custom app-specific property.\n       message.Properties[\"MessageNumber\"] = i;\n\n       // Send message to the topic.\n       Client.Send(message);\n     }\n\nService Bus topics support a [maximum message size of 256 KB](service-bus-quotas.md) (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic. This topic size is defined at creation time, with an upper limit of 5 GB. If partitioning is enabled, the upper limit is higher. For more information, see [Partitioning Messaging Entities](https://msdn.microsoft.com/library/azure/dn520246.aspx).\n\n## How to receive messages from a subscription\n\nThe recommended way to receive messages from a subscription is to use a [`SubscriptionClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx) object. **SubscriptionClient** objects can work in two different modes: [`ReceiveAndDelete` and `PeekLock`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx).\n\nWhen using the **ReceiveAndDelete** mode, receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a subscription, it marks the message as being consumed and returns it to the application. **ReceiveAndDelete** mode is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked\nthe message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIn **PeekLock** mode (which is the default mode), the receive process becomes a two-stage operation which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request,\nit finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) on the received message. When Service Bus sees the `Complete` call, it marks the message as being consumed and removes it from the subscription.\n\nThe following example demonstrates how messages can be received and processed using the default **PeekLock** mode. To specify a different [`ReceiveMode`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx) value, you can use another overload for [`CreateFromConnectionString`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx). This example uses the [`OnMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx) callback to process messages as they arrive\nin the **HighMessages** subscription.\n\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    SubscriptionClient Client =\n        SubscriptionClient.CreateFromConnectionString\n                (connectionString, \"TestTopic\", \"HighMessages\");\n\n    // Configure the callback options.\n    OnMessageOptions options = new OnMessageOptions();\n    options.AutoComplete = false;\n    options.AutoRenewTimeout = TimeSpan.FromMinutes(1);\n\n    Client.OnMessage((message) =>\n    {\n        try\n        {\n            // Process message from subscription.\n            Console.WriteLine(\"\\n**High Messages**\");\n            Console.WriteLine(\"Body: \" + message.GetBody<string>());\n            Console.WriteLine(\"MessageID: \" + message.MessageId);\n            Console.WriteLine(\"Message Number: \" +\n                message.Properties[\"MessageNumber\"]);\n\n            // Remove message from subscription.\n            message.Complete();\n        }\n        catch (Exception)\n        {\n            // Indicates a problem, unlock message in subscription.\n            message.Abandon();\n        }\n    }, options);\n\nThis example configures the [`OnMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx) callback using an [`OnMessageOptions`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx) object. [`AutoComplete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx) is set to **false** to enable manual control of when to call [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) on the received message. [`AutoRenewTimeout`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx) is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages. This property value reduces the number of times the client makes\nchargeable calls that do not retrieve messages.\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiving application is unable to process the message for some reason, then it can call the [`Abandon`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx) method on the received message (instead\nof the [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) method). This causes Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a time-out associated with a message locked within the subscription, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.\n\nIn the event that the application crashes after processing the message but before the [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) request is issued, the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**; that is, each message is processed at least once but in certain situations the same message may be\nredelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the\n[`MessageId`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx) property of the message, which will remain constant across delivery attempts.\n\n## How to delete topics and subscriptions\n\nThe following example demonstrates how to delete the topic **TestTopic** from the **HowToSample** service namespace.\n\n     // Delete Topic.\n     namespaceManager.DeleteTopic(\"TestTopic\");\n\nDeleting a topic also deletes any subscriptions that are registered with the topic. Subscriptions can also be deleted independently. The following code demonstrates how to delete a subscription named **HighMessages** from the **TestTopic** topic.\n\n      namespaceManager.DeleteSubscription(\"TestTopic\", \"HighMessages\");\n\n## Next steps\n\nNow that you've learned the basics of Service Bus topics and subscriptions, follow these links to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions][].\n-   API reference for [SqlFilter][].\n-   Build a working application that sends and receives messages to and from a Service Bus queue: [Service Bus Brokered Messaging .NET Tutorial][].\n-   Service Bus samples: Download from [Azure Samples][] or see the overview on [MSDN][].\n\n  [Azure portal]: http://manage.windowsazure.com\n\n  [7]: ./media/service-bus-dotnet-how-to-use-topics-subscriptions/getting-started-multi-tier-13.png\n\n  [Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/hh367516.aspx\n  [SqlFilter]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.aspx\n  [SqlFilter.SqlExpression]: https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n  [Service Bus Brokered Messaging .NET Tutorial]: http://msdn.microsoft.com/library/azure/hh367512.aspx\n  [Azure Samples]: https://code.msdn.microsoft.com/windowsazure/site/search?query=service%20bus&f%5B0%5D.Value=service%20bus&f%5B0%5D.Type=SearchText&ac=2\n  [MSDN]: https://msdn.microsoft.com/library/azure/dn194201.aspx\n"
}