<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues (Node.js) | Microsoft Azure</source>
          <target state="new">How to use Service Bus queues (Node.js) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Service Bus queues in Azure from a Node.js app.</source>
          <target state="new">Learn how to use Service Bus queues in Azure from a Node.js app.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues</source>
          <target state="new">How to use Service Bus queues</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Service Bus queues.</source>
          <target state="new">This guide describes how to use Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The samples are written in JavaScript and use the Node.js Azure module.</source>
          <target state="new">The samples are written in JavaScript and use the Node.js Azure module.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The scenarios covered include <bpt id="p1">**</bpt>creating queues, sending and receiving messages<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>deleting queues<ept id="p2">**</ept>.</source>
          <target state="new">The scenarios covered include <bpt id="p1">**</bpt>creating queues, sending and receiving messages<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>deleting queues<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on queues, see the <bpt id="p1">[</bpt><ept id="p1">Next steps]</ept> section.</source>
          <target state="new">For more information on queues, see the <bpt id="p1">[</bpt><ept id="p1">Next steps]</ept> section.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a Node.js application</source>
          <target state="new">Create a Node.js application</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a blank Node.js application.</source>
          <target state="new">Create a blank Node.js application.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For instructions on creating a Node.js application, see <bpt id="p1">[</bpt><ept id="p1">Create and deploy a Node.js application to an Azure Web Site]</ept>, or <bpt id="p2">[</bpt>Node.js Cloud Service<ept id="p2">][Node.js Cloud Service]</ept> (using Windows PowerShell).</source>
          <target state="new">For instructions on creating a Node.js application, see <bpt id="p1">[</bpt><ept id="p1">Create and deploy a Node.js application to an Azure Web Site]</ept>, or <bpt id="p2">[</bpt>Node.js Cloud Service<ept id="p2">][Node.js Cloud Service]</ept> (using Windows PowerShell).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Configure your application to use Service Bus</source>
          <target state="new">Configure your application to use Service Bus</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To use Azure Service Bus, download and use the Node.js azure package.</source>
          <target state="new">To use Azure Service Bus, download and use the Node.js azure package.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This includes a set of libraries that communicate with the Service Bus REST services.</source>
          <target state="new">This includes a set of libraries that communicate with the Service Bus REST services.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use Node Package Manager (NPM) to obtain the package</source>
          <target state="new">Use Node Package Manager (NPM) to obtain the package</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Windows PowerShell for Node.js<ept id="p1">**</ept> command window to navigate to the <bpt id="p2">**</bpt>c:\\node\\sbqueues\\WebRole1<ept id="p2">**</ept> folder in which you created your sample application.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>Windows PowerShell for Node.js<ept id="p1">**</ept> command window to navigate to the <bpt id="p2">**</bpt>c:\\node\\sbqueues\\WebRole1<ept id="p2">**</ept> folder in which you created your sample application.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>npm install azure<ept id="p1">**</ept> in the command window, which should result in output similar to the following:</source>
          <target state="new">Type <bpt id="p1">**</bpt>npm install azure<ept id="p1">**</ept> in the command window, which should result in output similar to the following:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can manually run the <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> command to verify that a <bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> folder was created.</source>
          <target state="new">You can manually run the <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> command to verify that a <bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> folder was created.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Inside that folder find the <bpt id="p1">**</bpt>azure<ept id="p1">**</ept> package, which contains the libraries you need to access Service Bus queues.</source>
          <target state="new">Inside that folder find the <bpt id="p1">**</bpt>azure<ept id="p1">**</ept> package, which contains the libraries you need to access Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Import the module</source>
          <target state="new">Import the module</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using Notepad or another text editor, add the following to the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file of the application:</source>
          <target state="new">Using Notepad or another text editor, add the following to the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file of the application:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set up an Azure Service Bus connection</source>
          <target state="new">Set up an Azure Service Bus connection</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Azure module reads the environment variables AZURE\_SERVICEBUS\_NAMESPACE and AZURE\_SERVICEBUS\_ACCESS\_KEY to obtain information required to connect to Service Bus.</source>
          <target state="new">The Azure module reads the environment variables AZURE\_SERVICEBUS\_NAMESPACE and AZURE\_SERVICEBUS\_ACCESS\_KEY to obtain information required to connect to Service Bus.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If these environment variables are not set, you must specify the account information when calling <bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept>.</source>
          <target state="new">If these environment variables are not set, you must specify the account information when calling <bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see <bpt id="p1">[</bpt><ept id="p1">Node.js Cloud Service with Storage]</ept>.</source>
          <target state="new">For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see <bpt id="p1">[</bpt><ept id="p1">Node.js Cloud Service with Storage]</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id="p1">[</bpt><ept id="p1">Node.js Web Application with Storage]</ept></source>
          <target state="new">For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id="p1">[</bpt><ept id="p1">Node.js Web Application with Storage]</ept></target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to create a queue</source>
          <target state="new">How to create a queue</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object enables you to work with queues.</source>
          <target state="new">The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object enables you to work with queues.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following code creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object.</source>
          <target state="new">The following code creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add it near the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file, after the statement to import the Azure module:</source>
          <target state="new">Add it near the top of the <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> file, after the statement to import the Azure module:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By calling <bpt id="p1">**</bpt>createQueueIfNotExists<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object, the specified queue will be returned (if it exists,) or a new queue with the specified name will be created.</source>
          <target state="new">By calling <bpt id="p1">**</bpt>createQueueIfNotExists<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object, the specified queue will be returned (if it exists,) or a new queue with the specified name will be created.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code uses <bpt id="p1">**</bpt>createQueueIfNotExists<ept id="p1">**</ept> to create or connect to the queue named 'myqueue':</source>
          <target state="new">The following code uses <bpt id="p1">**</bpt>createQueueIfNotExists<ept id="p1">**</ept> to create or connect to the queue named 'myqueue':</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.</source>
          <target state="new"><bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> also supports additional options, which enable you to override default queue settings such as message time to live or maximum queue size.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example sets the maximum queue size to 5 GB, and a time to live value of 1 minute:</source>
          <target state="new">The following example sets the maximum queue size to 5 GB, and a time to live value of 1 minute:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="new">Filters</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Optional filtering operations can be applied to operations performed using <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept>.</source>
          <target state="new">Optional filtering operations can be applied to operations performed using <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</source>
          <target state="new">Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After doing its pre-processing on the request options, the method must call <ph id="ph1">`next`</ph>, passing a callback with the following signature:</source>
          <target state="new">After doing its pre-processing on the request options, the method must call <ph id="ph1">`next`</ph>, passing a callback with the following signature:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this callback, and after processing the <bpt id="p1">**</bpt>returnObject<ept id="p1">**</ept> (the response from the request to the server), the callback must either invoke <ph id="ph1">`next`</ph> if it exists to continue processing other filters, or simply invoke <ph id="ph2">`finalCallback`</ph>, which ends the service invocation.</source>
          <target state="new">In this callback, and after processing the <bpt id="p1">**</bpt>returnObject<ept id="p1">**</ept> (the response from the request to the server), the callback must either invoke <ph id="ph1">`next`</ph> if it exists to continue processing other filters, or simply invoke <ph id="ph2">`finalCallback`</ph>, which ends the service invocation.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>.</source>
          <target state="new">Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object that uses the <bpt id="p2">**</bpt>ExponentialRetryPolicyFilter<ept id="p2">**</ept>:</source>
          <target state="new">The following creates a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object that uses the <bpt id="p2">**</bpt>ExponentialRetryPolicyFilter<ept id="p2">**</ept>:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>How to send messages to a queue</source>
          <target state="new">How to send messages to a queue</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To send a message to a Service Bus queue, your application calls the <bpt id="p1">**</bpt>sendQueueMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">To send a message to a Service Bus queue, your application calls the <bpt id="p1">**</bpt>sendQueueMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Messages sent to (and received from) Service Bus queues are <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects, and have a set of standard properties (such as <bpt id="p2">**</bpt>Label<ept id="p2">**</ept> and <bpt id="p3">**</bpt>TimeToLive<ept id="p3">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.</source>
          <target state="new">Messages sent to (and received from) Service Bus queues are <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects, and have a set of standard properties (such as <bpt id="p2">**</bpt>Label<ept id="p2">**</ept> and <bpt id="p3">**</bpt>TimeToLive<ept id="p3">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An application can set the body of the message by passing a string as the message.</source>
          <target state="new">An application can set the body of the message by passing a string as the message.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Any required standard properties are populated with default values.</source>
          <target state="new">Any required standard properties are populated with default values.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send a test message to the queue named <ph id="ph1">`myqueue`</ph> using <bpt id="p1">**</bpt>sendQueueMessage<ept id="p1">**</ept>:</source>
          <target state="new">The following example demonstrates how to send a test message to the queue named <ph id="ph1">`myqueue`</ph> using <bpt id="p1">**</bpt>sendQueueMessage<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</source>
          <target state="new">Service Bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</source>
          <target state="new">There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This queue size is defined at creation time, with an upper limit of 5 GB.</source>
          <target state="new">This queue size is defined at creation time, with an upper limit of 5 GB.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>How to receive messages from a queue</source>
          <target state="new">How to receive messages from a queue</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Messages are received from a queue using the <bpt id="p1">**</bpt>receiveQueueMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">Messages are received from a queue using the <bpt id="p1">**</bpt>receiveQueueMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>By default, messages are deleted from the queue as they are read; however, you can read (peek) and lock the message without deleting it from the queue by setting the optional parameter <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
          <target state="new">By default, messages are deleted from the queue as they are read; however, you can read (peek) and lock the message without deleting it from the queue by setting the optional parameter <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</source>
          <target state="new">The default behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
          <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
          <target state="new">Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</source>
          <target state="new">If the <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
          <target state="new">When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method and providing the message to be deleted as a parameter.</source>
          <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method and providing the message to be deleted as a parameter.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the queue.</source>
          <target state="new">The <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the queue.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to receive and process messages using <bpt id="p1">**</bpt>receiveQueueMessage<ept id="p1">**</ept>.</source>
          <target state="new">The following example demonstrates how to receive and process messages using <bpt id="p1">**</bpt>receiveQueueMessage<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The example first receives and deletes a message, and then receives a message using <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, then deletes the message using <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept>:</source>
          <target state="new">The example first receives and deletes a message, and then receives a message using <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, then deletes the message using <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept>:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>How to handle application crashes and unreadable messages</source>
          <target state="new">How to handle application crashes and unreadable messages</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</source>
          <target state="new">Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This will cause Service Bus to unlock the</source>
          <target state="new">This will cause Service Bus to unlock the</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</source>
          <target state="new">message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.</source>
          <target state="new">There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then Service Bus will unlock the message automatically and make it available to be received again.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</source>
          <target state="new">In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</source>
          <target state="new">This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</source>
          <target state="new">If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This is often achieved using the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</source>
          <target state="new">This is often achieved using the <bpt id="p1">**</bpt>MessageId<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of Service Bus queues, follow these links to learn more.</source>
          <target state="new">Now that you've learned the basics of Service Bus queues, follow these links to learn more.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions.<ept id="p1">][]</ept></source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions.<ept id="p1">][]</ept></target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt><ept id="p1">Azure SDK for Node]</ept> repository on GitHub.</source>
          <target state="new">Visit the <bpt id="p1">[</bpt><ept id="p1">Azure SDK for Node]</ept> repository on GitHub.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e447262fa7b411d04da5962fcc7cf27f7411ac0d</xliffext:olfilehash>
  </header>
</xliff>