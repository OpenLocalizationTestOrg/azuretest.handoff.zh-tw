<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scheduling and Execution with Data Factory</source>
          <target state="new">Scheduling and Execution with Data Factory</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn scheduling and execution aspects of Azure Data Factory application model.</source>
          <target state="new">Learn scheduling and execution aspects of Azure Data Factory application model.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Scheduling &amp; Execution with Data Factory</source>
          <target state="new">Scheduling &amp; Execution with Data Factory</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article explains the scheduling and execution aspects of Azure Data Factory application model.</source>
          <target state="new">This article explains the scheduling and execution aspects of Azure Data Factory application model.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article builds on <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> and <bpt id="p2">[</bpt>Creating Datasets<ept id="p2">](data-factory-create-datasets.md)</ept> articles and assumes that you understand basics of data factory application model concepts: activity, pipelines, linked services and datasets.</source>
          <target state="new">This article builds on <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> and <bpt id="p2">[</bpt>Creating Datasets<ept id="p2">](data-factory-create-datasets.md)</ept> articles and assumes that you understand basics of data factory application model concepts: activity, pipelines, linked services and datasets.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Scheduling Activities</source>
          <target state="new">Scheduling Activities</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>scheduler<ept id="p1">**</ept> section in the activity JSON, you can specify a recurring schedule for the activity.</source>
          <target state="new">With the <bpt id="p1">**</bpt>scheduler<ept id="p1">**</ept> section in the activity JSON, you can specify a recurring schedule for the activity.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example you can schedule activity runs every hour as follows:</source>
          <target state="new">For example you can schedule activity runs every hour as follows:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Scheduler example</source>
          <target state="new">Scheduler example</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As shown above, specifying an hourly schedule creates activity runs corresponding to a series of tumbling windows.</source>
          <target state="new">As shown above, specifying an hourly schedule creates activity runs corresponding to a series of tumbling windows.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Tumbling windows are series of fixed-sized, non-overlapping and contiguous time intervals.</source>
          <target state="new">Tumbling windows are series of fixed-sized, non-overlapping and contiguous time intervals.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For the currently executing activity run, the window time interval can be accessed with <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WindowEnd<ept id="p2">**</ept> system variables in the activity JSON.</source>
          <target state="new">For the currently executing activity run, the window time interval can be accessed with <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WindowEnd<ept id="p2">**</ept> system variables in the activity JSON.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use these variables for different purposes in your activity JSON and scripts associated with the activity including selecting data from input, output datasets representing time series data.</source>
          <target state="new">You can use these variables for different purposes in your activity JSON and scripts associated with the activity including selecting data from input, output datasets representing time series data.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information on different properties available for scheduler including scheduling at a specific time offset, setting the mode to align processing at the beginning of interval for the window or at the end please refer to the <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article.</source>
          <target state="new">For more information on different properties available for scheduler including scheduling at a specific time offset, setting the mode to align processing at the beginning of interval for the window or at the end please refer to the <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Time series Datasets and Data Slices</source>
          <target state="new">Time series Datasets and Data Slices</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Time series data is a continuous sequence of data points typically consisting of successive measurements made over a time interval.</source>
          <target state="new">Time series data is a continuous sequence of data points typically consisting of successive measurements made over a time interval.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Common examples of time series data include sensor data, application telemetry data etc.</source>
          <target state="new">Common examples of time series data include sensor data, application telemetry data etc.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>With Azure Data Factory, you can process time series data in batched fashion with activity runs.</source>
          <target state="new">With Azure Data Factory, you can process time series data in batched fashion with activity runs.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typically, there are recurring cadences at which input data arrives and output data needs to be produced.</source>
          <target state="new">Typically, there are recurring cadences at which input data arrives and output data needs to be produced.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This cadence is modeled by specifying <bpt id="p1">**</bpt>availability<ept id="p1">**</ept> section on the dataset as follows:</source>
          <target state="new">This cadence is modeled by specifying <bpt id="p1">**</bpt>availability<ept id="p1">**</ept> section on the dataset as follows:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each unit of data consumed and produced by an activity run is called a data <bpt id="p1">**</bpt>slice<ept id="p1">**</ept>.</source>
          <target state="new">Each unit of data consumed and produced by an activity run is called a data <bpt id="p1">**</bpt>slice<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The diagram below shows an example of an activity with an input time series dataset and an output time series dataset each with availability set to hourly frequency.</source>
          <target state="new">The diagram below shows an example of an activity with an input time series dataset and an output time series dataset each with availability set to hourly frequency.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Availability scheduler</source>
          <target state="new">Availability scheduler</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The hourly data slices for the input and output dataset are shown in the diagram above.</source>
          <target state="new">The hourly data slices for the input and output dataset are shown in the diagram above.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The diagram shows 3 input slices that are ready for processing and the 10-11AM activity run in progress producing the 10-11AM output slice.</source>
          <target state="new">The diagram shows 3 input slices that are ready for processing and the 10-11AM activity run in progress producing the 10-11AM output slice.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The time interval associated with the current slice being produced can be accessed in the dataset JSON with variables <bpt id="p1">**</bpt>SliceStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SliceEnd<ept id="p2">**</ept>.</source>
          <target state="new">The time interval associated with the current slice being produced can be accessed in the dataset JSON with variables <bpt id="p1">**</bpt>SliceStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SliceEnd<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information on different properties available for availability section please refer to the <bpt id="p1">[</bpt>Creating Datasets<ept id="p1">](data-factory-create-datasets.md)</ept> article.</source>
          <target state="new">For more information on different properties available for availability section please refer to the <bpt id="p1">[</bpt>Creating Datasets<ept id="p1">](data-factory-create-datasets.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Sample – Copy Activity moving data from Azure SQL to Azure Blob</source>
          <target state="new">Sample – Copy Activity moving data from Azure SQL to Azure Blob</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Let’s put some thing together and in action by revisiting the sample for copy activity shown in the <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article that copies data from an Azure SQL table to Azure blob every hour.</source>
          <target state="new">Let’s put some thing together and in action by revisiting the sample for copy activity shown in the <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article that copies data from an Azure SQL table to Azure blob every hour.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Input: Azure SQL dataset</source>
          <target state="new">Input: Azure SQL dataset</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>frequency<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Hour<ept id="p2">**</ept> and <bpt id="p3">**</bpt>interval<ept id="p3">**</ept> is set to <bpt id="p4">**</bpt>1<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>availability<ept id="p5">**</ept> section.</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>frequency<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Hour<ept id="p2">**</ept> and <bpt id="p3">**</bpt>interval<ept id="p3">**</ept> is set to <bpt id="p4">**</bpt>1<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>availability<ept id="p5">**</ept> section.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Output: Azure Blob dataset</source>
          <target state="new">Output: Azure Blob dataset</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>frequency<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Hour<ept id="p2">**</ept> and <bpt id="p3">**</bpt>interval<ept id="p3">**</ept> is set to <bpt id="p4">**</bpt>1<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>availability<ept id="p5">**</ept> section.</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>frequency<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Hour<ept id="p2">**</ept> and <bpt id="p3">**</bpt>interval<ept id="p3">**</ept> is set to <bpt id="p4">**</bpt>1<ept id="p4">**</ept> in the <bpt id="p5">**</bpt>availability<ept id="p5">**</ept> section.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Activity: Copy activity</source>
          <target state="new">Activity: Copy activity</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The sample above shows activity schedule and dataset availability sections set to hourly frequency.</source>
          <target state="new">The sample above shows activity schedule and dataset availability sections set to hourly frequency.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The sample shows how you can leverage the <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WindowEnd<ept id="p2">**</ept> variables to select the relevant data for the given activity run and send it to a blob with appropriate dynamic <bpt id="p3">**</bpt>folderPath<ept id="p3">**</ept> parameterized to have the folder for every hour.</source>
          <target state="new">The sample shows how you can leverage the <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WindowEnd<ept id="p2">**</ept> variables to select the relevant data for the given activity run and send it to a blob with appropriate dynamic <bpt id="p3">**</bpt>folderPath<ept id="p3">**</ept> parameterized to have the folder for every hour.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When 3 of the slices between 8 – 11 AM execute, this is what it will look like for a sample Azure table and Blob.</source>
          <target state="new">When 3 of the slices between 8 – 11 AM execute, this is what it will look like for a sample Azure table and Blob.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Suppose the data in Azure SQL is as follows:</source>
          <target state="new">Suppose the data in Azure SQL is as follows:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Sample input</source>
          <target state="new">Sample input</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>On deploying the above pipeline the Azure blob will populated as follows:</source>
          <target state="new">On deploying the above pipeline the Azure blob will populated as follows:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>File mypath/2015/1/1/8/Data.</source>
          <target state="new">File mypath/2015/1/1/8/Data.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.txt with data</source>
          <target state="new">.txt with data</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>will be replaced with an actual guid.</source>
          <target state="new">will be replaced with an actual guid.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example file name: Data.bcde1348-7620-4f93-bb89-0eed3455890b.txt</source>
          <target state="new">Example file name: Data.bcde1348-7620-4f93-bb89-0eed3455890b.txt</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>File mypath/2015/1/1/9/Data.</source>
          <target state="new">File mypath/2015/1/1/9/Data.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>.txt with data:</source>
          <target state="new">.txt with data:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>File mypath/2015/1/1/10/Data.</source>
          <target state="new">File mypath/2015/1/1/10/Data.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>.txt with no data.</source>
          <target state="new">.txt with no data.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Data Slices, Active Period for Pipeline and Concurrent Slice Execution</source>
          <target state="new">Data Slices, Active Period for Pipeline and Concurrent Slice Execution</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article introduced the concept of active period for a pipeline specified by setting the <bpt id="p2">**</bpt>start<ept id="p2">**</ept> and <bpt id="p3">**</bpt>end<ept id="p3">**</ept> properties of the pipeline.</source>
          <target state="new">The <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> article introduced the concept of active period for a pipeline specified by setting the <bpt id="p2">**</bpt>start<ept id="p2">**</ept> and <bpt id="p3">**</bpt>end<ept id="p3">**</ept> properties of the pipeline.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can set the start date for the pipeline active period in the past and data factory will automatically calculate (back fill) all data slices in the past and will begin processing them.</source>
          <target state="new">You can set the start date for the pipeline active period in the past and data factory will automatically calculate (back fill) all data slices in the past and will begin processing them.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>With back filled data slices, it is possible to configure them to be run in parallel.</source>
          <target state="new">With back filled data slices, it is possible to configure them to be run in parallel.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can do that by setting the concurrency property in <bpt id="p1">**</bpt>policy<ept id="p1">**</ept> section of the activity JSON as shown in the <bpt id="p2">[</bpt>Creating Pipelines<ept id="p2">](data-factory-create-pipelines.md)</ept> article.</source>
          <target state="new">You can do that by setting the concurrency property in <bpt id="p1">**</bpt>policy<ept id="p1">**</ept> section of the activity JSON as shown in the <bpt id="p2">[</bpt>Creating Pipelines<ept id="p2">](data-factory-create-pipelines.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Rerunning Failed Data Slices and Automatic Data Dependency Tracking</source>
          <target state="new">Rerunning Failed Data Slices and Automatic Data Dependency Tracking</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can monitor execution of slices in a rich visual way.</source>
          <target state="new">You can monitor execution of slices in a rich visual way.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Monitoring and managing pipelines<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article for details.</source>
          <target state="new">See <bpt id="p1">[</bpt>Monitoring and managing pipelines<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article for details.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Consider the following example which shows two activities.</source>
          <target state="new">Consider the following example which shows two activities.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Activity1 produces a time series dataset with slices as output that is consumed as input by Activity2 to produce the final output time series dataset.</source>
          <target state="new">Activity1 produces a time series dataset with slices as output that is consumed as input by Activity2 to produce the final output time series dataset.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Failed slice</source>
          <target state="new">Failed slice</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The above diagram shows that out of 3 recent slices there was a failure producing the 9-10 AM slice for <bpt id="p1">**</bpt>Dataset2<ept id="p1">**</ept>.</source>
          <target state="new">The above diagram shows that out of 3 recent slices there was a failure producing the 9-10 AM slice for <bpt id="p1">**</bpt>Dataset2<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Data factory automatically tracks dependency for time series dataset and as a result holds off kicking off the activity run for 9-10 AM downstream slice.</source>
          <target state="new">Data factory automatically tracks dependency for time series dataset and as a result holds off kicking off the activity run for 9-10 AM downstream slice.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Data factory monitoring &amp; management tools allow you to drill into the diagnostic logs for the failed slice easily find the root cause for the issue and fix it.</source>
          <target state="new">Data factory monitoring &amp; management tools allow you to drill into the diagnostic logs for the failed slice easily find the root cause for the issue and fix it.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Once you have fixed the issue you can also easily kick off the activity run to produce the failed slice.</source>
          <target state="new">Once you have fixed the issue you can also easily kick off the activity run to produce the failed slice.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more details on how to kick off reruns, understand state transitions for data slices please refer to the <bpt id="p1">[</bpt>monitoring &amp; management<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article.</source>
          <target state="new">For more details on how to kick off reruns, understand state transitions for data slices please refer to the <bpt id="p1">[</bpt>monitoring &amp; management<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Once you kick off the rerun and the 9-10AM slice for dataset2 is ready, data factory kicks off the run for the 9-10 AM dependent slice on final dataset as shown in the diagram below.</source>
          <target state="new">Once you kick off the rerun and the 9-10AM slice for dataset2 is ready, data factory kicks off the run for the 9-10 AM dependent slice on final dataset as shown in the diagram below.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Rerun failed slice</source>
          <target state="new">Rerun failed slice</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For deeper dive on specifying dependency and tracking the dependencies for complex chain of activities and datasets, refer to sections below.</source>
          <target state="new">For deeper dive on specifying dependency and tracking the dependencies for complex chain of activities and datasets, refer to sections below.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Modeling datasets with different frequencies</source>
          <target state="new">Modeling datasets with different frequencies</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the samples shown above, the frequencies for input and output datasets and activity schedule window were same.</source>
          <target state="new">In the samples shown above, the frequencies for input and output datasets and activity schedule window were same.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Some scenarios require the ability to produce output at a frequency different than frequencies of one or more inputs.</source>
          <target state="new">Some scenarios require the ability to produce output at a frequency different than frequencies of one or more inputs.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Data factory supports modeling these scenarios.</source>
          <target state="new">Data factory supports modeling these scenarios.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Sample 1: Producing daily output report for input data that is available every hour</source>
          <target state="new">Sample 1: Producing daily output report for input data that is available every hour</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Consider a scenario where we have input measurement data from sensors available every hour in Azure Blob and we want to produce a daily aggregate report with statistics like mean, max, min etc... for the day with data factory <bpt id="p1">[</bpt>Hive activity<ept id="p1">](data-factory-hive-activity.md)</ept>.</source>
          <target state="new">Consider a scenario where we have input measurement data from sensors available every hour in Azure Blob and we want to produce a daily aggregate report with statistics like mean, max, min etc... for the day with data factory <bpt id="p1">[</bpt>Hive activity<ept id="p1">](data-factory-hive-activity.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Here is how you can model this with data factory:</source>
          <target state="new">Here is how you can model this with data factory:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Input Azure blob dataset:</source>
          <target state="new">Input Azure blob dataset:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The hourly input files are dropped in the folder for the given day.</source>
          <target state="new">The hourly input files are dropped in the folder for the given day.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Availability for input is set Hourly (frequency: Hour, interval: 1).</source>
          <target state="new">Availability for input is set Hourly (frequency: Hour, interval: 1).</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Output Azure blob dataset</source>
          <target state="new">Output Azure blob dataset</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One output file will be dropped every day in the folder for the day.</source>
          <target state="new">One output file will be dropped every day in the folder for the day.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Availability of output is set Daily (frequency: Day and interval: 1).</source>
          <target state="new">Availability of output is set Daily (frequency: Day and interval: 1).</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Activity: Hive activity in a pipeline</source>
          <target state="new">Activity: Hive activity in a pipeline</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The hive script receives the appropriate datetime information as parameters leveraging the <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> variable as shown below.</source>
          <target state="new">The hive script receives the appropriate datetime information as parameters leveraging the <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept> variable as shown below.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The hive script uses this variable to load the data from the right folder for the day and run the aggregation to generate the output.</source>
          <target state="new">The hive script uses this variable to load the data from the right folder for the day and run the aggregation to generate the output.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Here is how this looks like from data dependency point of view.</source>
          <target state="new">Here is how this looks like from data dependency point of view.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Data dapendency</source>
          <target state="new">Data dapendency</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The output slice for every day depends on 24 hourly slices from input dataset.</source>
          <target state="new">The output slice for every day depends on 24 hourly slices from input dataset.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Data factory computes these dependencies automatically by figuring out the input data slices that fall in the same time period as the output slice to be produced.</source>
          <target state="new">Data factory computes these dependencies automatically by figuring out the input data slices that fall in the same time period as the output slice to be produced.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If any of the 24 input slices is not available (due to processing happening in an activity upstream that produces the that slice for example) data factory will wait for the input slice to be ready before kicking off the daily activity run.</source>
          <target state="new">If any of the 24 input slices is not available (due to processing happening in an activity upstream that produces the that slice for example) data factory will wait for the input slice to be ready before kicking off the daily activity run.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sample 2: Specify dependency with expressions and data factory functions</source>
          <target state="new">Sample 2: Specify dependency with expressions and data factory functions</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Let’s consider another scenario.</source>
          <target state="new">Let’s consider another scenario.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Suppose you have a Hive activity that processes two input datasets, one of them has new data daily but one of them gets new data every week.</source>
          <target state="new">Suppose you have a Hive activity that processes two input datasets, one of them has new data daily but one of them gets new data every week.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to do a join across the two inputs and produce an output daily.</source>
          <target state="new">Suppose you wanted to do a join across the two inputs and produce an output daily.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The simple approach so far where data factory automatically figures out the right input slices to process by including input data slices aligned to the output data slice’s time period no longer works.</source>
          <target state="new">The simple approach so far where data factory automatically figures out the right input slices to process by including input data slices aligned to the output data slice’s time period no longer works.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You need a way to specify for every activity run the data factory should use last week’s data slice for the weekly input dataset.</source>
          <target state="new">You need a way to specify for every activity run the data factory should use last week’s data slice for the weekly input dataset.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can do that with the help of Azure Data Factory functions as shows below.</source>
          <target state="new">You can do that with the help of Azure Data Factory functions as shows below.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Input1: Azure Blob</source>
          <target state="new">Input1: Azure Blob</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>First input is Azure blob updated <bpt id="p1">**</bpt>daily<ept id="p1">**</ept>.</source>
          <target state="new">First input is Azure blob updated <bpt id="p1">**</bpt>daily<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Input2: Azure Blob</source>
          <target state="new">Input2: Azure Blob</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Input2 is Azure blob updated <bpt id="p1">**</bpt>weekly<ept id="p1">**</ept>.</source>
          <target state="new">Input2 is Azure blob updated <bpt id="p1">**</bpt>weekly<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Output: Azure Blob</source>
          <target state="new">Output: Azure Blob</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>One output file will be dropped every day in the folder for the day.</source>
          <target state="new">One output file will be dropped every day in the folder for the day.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Availability of output is set Daily (frequency: Day, interval: 1).</source>
          <target state="new">Availability of output is set Daily (frequency: Day, interval: 1).</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Activity: Hive activity in a pipeline</source>
          <target state="new">Activity: Hive activity in a pipeline</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The hive activity takes the 2 inputs and produces an output slice every day.</source>
          <target state="new">The hive activity takes the 2 inputs and produces an output slice every day.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can specify every day’s output slice to depend on last week’s input slice for weekly input as follows.</source>
          <target state="new">You can specify every day’s output slice to depend on last week’s input slice for weekly input as follows.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Data Factory System Variables</source>
          <target state="new">Data Factory System Variables</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Variable Name</source>
          <target state="new">Variable Name</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Object Scope</source>
          <target state="new">Object Scope</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>JSON Scope and Use Cases</source>
          <target state="new">JSON Scope and Use Cases</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>WindowStart</source>
          <target state="new">WindowStart</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Start of time interval for current activity run window</source>
          <target state="new">Start of time interval for current activity run window</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>activity</source>
          <target state="new">activity</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specify data selection queries.</source>
          <target state="new">Specify data selection queries.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See connector articles referenced in the <bpt id="p1">[</bpt>Data Movement Activities<ept id="p1">](data-factory-data-movement-activities.md)</ept> article.</source>
          <target state="new">See connector articles referenced in the <bpt id="p1">[</bpt>Data Movement Activities<ept id="p1">](data-factory-data-movement-activities.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Pass parameters to Hive script (sample shown above).</source>
          <target state="new">Pass parameters to Hive script (sample shown above).</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>WindowEnd</source>
          <target state="new">WindowEnd</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>End of time interval for current activity run window</source>
          <target state="new">End of time interval for current activity run window</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>activity</source>
          <target state="new">activity</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>same as above</source>
          <target state="new">same as above</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>SliceStart</source>
          <target state="new">SliceStart</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Start of time interval for data  slice being produced</source>
          <target state="new">Start of time interval for data  slice being produced</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>activity</source>
          <target state="new">activity</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>dataset</source>
          <target state="new">dataset</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specify dynamic folder paths and file names while working with <bpt id="p1">[</bpt>Azure Blob<ept id="p1">](data-factory-azure-blob-connector.md)</ept> and <bpt id="p2">[</bpt>File System datasets<ept id="p2">](data-factory-onprem-file-system-connector.md)</ept>.</source>
          <target state="new">Specify dynamic folder paths and file names while working with <bpt id="p1">[</bpt>Azure Blob<ept id="p1">](data-factory-azure-blob-connector.md)</ept> and <bpt id="p2">[</bpt>File System datasets<ept id="p2">](data-factory-onprem-file-system-connector.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Specify input dependencies with data factory functions in activity inputs collection.</source>
          <target state="new">Specify input dependencies with data factory functions in activity inputs collection.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>SliceEnd</source>
          <target state="new">SliceEnd</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>End of time interval for current data slice being produced</source>
          <target state="new">End of time interval for current data slice being produced</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>activity</source>
          <target state="new">activity</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>dataset</source>
          <target state="new">dataset</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>same as above.</source>
          <target state="new">same as above.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Currently data factory requires that the schedule specified in the activity exactly match the schedule specified in availability of the output dataset.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Currently data factory requires that the schedule specified in the activity exactly match the schedule specified in availability of the output dataset.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This means WindowStart, WindowEnd and SliceStart and SliceEnd always map to the same time period and a single output slice.</source>
          <target state="new">This means WindowStart, WindowEnd and SliceStart and SliceEnd always map to the same time period and a single output slice.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Data Factory Functions Reference</source>
          <target state="new">Data Factory Functions Reference</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can use functions in data factory along with above mentioned system variables for the following purposes:</source>
          <target state="new">You can use functions in data factory along with above mentioned system variables for the following purposes:</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Specifying data selection queries (see connector articles referenced by the <bpt id="p1">[</bpt>Data Movement Activities<ept id="p1">](data-factory-data-movement-activities.md)</ept> article.</source>
          <target state="new">Specifying data selection queries (see connector articles referenced by the <bpt id="p1">[</bpt>Data Movement Activities<ept id="p1">](data-factory-data-movement-activities.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The syntax to invoke a data factory function is: <bpt id="p1">**</bpt>$$<ph id="ph1">&lt;function&gt;</ph><ept id="p1">**</ept> for data selection  queries and other properties in the activity and datasets.</source>
          <target state="new">The syntax to invoke a data factory function is: <bpt id="p1">**</bpt>$$<ph id="ph1">&lt;function&gt;</ph><ept id="p1">**</ept> for data selection  queries and other properties in the activity and datasets.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Specifying input dependencies with data factory functions in activity inputs collection (see sample above).</source>
          <target state="new">Specifying input dependencies with data factory functions in activity inputs collection (see sample above).</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>$$ is not needed for specifying input dependency expressions.</source>
          <target state="new">$$ is not needed for specifying input dependency expressions.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In the following sample, <bpt id="p1">**</bpt>sqlReaderQuery<ept id="p1">**</ept> property in a JSON file is assigned to a value returned by the <bpt id="p2">**</bpt>Text.Format<ept id="p2">**</ept> function.</source>
          <target state="new">In the following sample, <bpt id="p1">**</bpt>sqlReaderQuery<ept id="p1">**</ept> property in a JSON file is assigned to a value returned by the <bpt id="p2">**</bpt>Text.Format<ept id="p2">**</ept> function.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This sample also uses a system variable named <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept>, which represents the start time of the activity run window.</source>
          <target state="new">This sample also uses a system variable named <bpt id="p1">**</bpt>WindowStart<ept id="p1">**</ept>, which represents the start time of the activity run window.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="new">Functions</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The following tables list all the functions in Azure Data Factory:</source>
          <target state="new">The following tables list all the functions in Azure Data Factory:</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="new">Category</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="new">Function</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="new">Time</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>AddHours(X,Y)</source>
          <target state="new">AddHours(X,Y)</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Adds Y hours to the given time X.</source>
          <target state="new">Adds Y hours to the given time X.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example: 9/5/2013 12:00:00 PM + 2 hours = 9/5/2013 2:00:00 PM</source>
          <target state="new">Example: 9/5/2013 12:00:00 PM + 2 hours = 9/5/2013 2:00:00 PM</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="new">Time</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>AddMinutes(X,Y)</source>
          <target state="new">AddMinutes(X,Y)</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Adds Y minutes to X.</source>
          <target state="new">Adds Y minutes to X.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12: 00:00 PM + 15 minutes = 9/15/2013 12: 15:00 PM</source>
          <target state="new">Example: 9/15/2013 12: 00:00 PM + 15 minutes = 9/15/2013 12: 15:00 PM</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="new">Time</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>StartOfHour(X)</source>
          <target state="new">StartOfHour(X)</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>X: Datetime</source>
          <target state="new">X: Datetime</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets the starting time for the hour represented by the hour component of X.</source>
          <target state="new">Gets the starting time for the hour represented by the hour component of X.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Example: StartOfHour of 9/15/2013 05: 10:23 PM is 9/15/2013 05: 00:00 PM</source>
          <target state="new">Example: StartOfHour of 9/15/2013 05: 10:23 PM is 9/15/2013 05: 00:00 PM</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>AddDays(X,Y)</source>
          <target state="new">AddDays(X,Y)</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Adds Y days to X.</source>
          <target state="new">Adds Y days to X.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12:00:00 PM + 2 days = 9/17/2013 12:00:00 PM</source>
          <target state="new">Example: 9/15/2013 12:00:00 PM + 2 days = 9/17/2013 12:00:00 PM</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>AddMonths(X,Y)</source>
          <target state="new">AddMonths(X,Y)</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Adds Y months to X.</source>
          <target state="new">Adds Y months to X.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12:00:00 PM + 1 month = 10/15/2013 12:00:00 PM</source>
          <target state="new">Example: 9/15/2013 12:00:00 PM + 1 month = 10/15/2013 12:00:00 PM</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>AddQuarters(X,Y)</source>
          <target state="new">AddQuarters(X,Y)</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Adds Y * 3 months to X.</source>
          <target state="new">Adds Y * 3 months to X.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12:00:00 PM + 1 quarter = 12/15/2013 12:00:00 PM</source>
          <target state="new">Example: 9/15/2013 12:00:00 PM + 1 quarter = 12/15/2013 12:00:00 PM</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>AddWeeks(X,Y)</source>
          <target state="new">AddWeeks(X,Y)</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Adds Y * 7 days to X</source>
          <target state="new">Adds Y * 7 days to X</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12:00:00 PM + 1 week = 9/22/2013 12:00:00 PM</source>
          <target state="new">Example: 9/15/2013 12:00:00 PM + 1 week = 9/22/2013 12:00:00 PM</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>AddYears(X,Y)</source>
          <target state="new">AddYears(X,Y)</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Y: int</source>
          <target state="new">Y: int</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Adds Y years to X.</source>
          <target state="new">Adds Y years to X.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Example: 9/15/2013 12:00:00 PM + 1 year = 9/15/2014 12:00:00 PM</source>
          <target state="new">Example: 9/15/2013 12:00:00 PM + 1 year = 9/15/2014 12:00:00 PM</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Day(X)</source>
          <target state="new">Day(X)</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Gets the day component of X.</source>
          <target state="new">Gets the day component of X.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Example: Day of 9/15/2013 12:00:00 PM is 9.</source>
          <target state="new">Example: Day of 9/15/2013 12:00:00 PM is 9.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>DayOfWeek(X)</source>
          <target state="new">DayOfWeek(X)</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Gets the day of week component of X.</source>
          <target state="new">Gets the day of week component of X.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example: DayOfWeek of 9/15/2013 12:00:00 PM is Sunday.</source>
          <target state="new">Example: DayOfWeek of 9/15/2013 12:00:00 PM is Sunday.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>DayOfYear(X)</source>
          <target state="new">DayOfYear(X)</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Gets the day in the year represented by the year component of X.</source>
          <target state="new">Gets the day in the year represented by the year component of X.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="new">Examples:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>12/1/2015: day 335 of 2015</source>
          <target state="new">12/1/2015: day 335 of 2015</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>12/31/2015: day 365 of 2015</source>
          <target state="new">12/31/2015: day 365 of 2015</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>12/31/2016: day 366 of 2016 (Leap Year)</source>
          <target state="new">12/31/2016: day 366 of 2016 (Leap Year)</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>DaysInMonth(X)</source>
          <target state="new">DaysInMonth(X)</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets the days in the month represented by the month component of parameter X.</source>
          <target state="new">Gets the days in the month represented by the month component of parameter X.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Example: DaysInMonth of 9/15/2013 are 30 since there are 30 days in the September month.</source>
          <target state="new">Example: DaysInMonth of 9/15/2013 are 30 since there are 30 days in the September month.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>EndOfDay(X)</source>
          <target state="new">EndOfDay(X)</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Gets the date-time that represents the end of the day (day component) of X.</source>
          <target state="new">Gets the date-time that represents the end of the day (day component) of X.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Example: EndOfDay of 9/15/2013 05:10:23 PM is 9/15/2013 11:59:59 PM.</source>
          <target state="new">Example: EndOfDay of 9/15/2013 05:10:23 PM is 9/15/2013 11:59:59 PM.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>EndOfMonth(X)</source>
          <target state="new">EndOfMonth(X)</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Gets the end of the month represented by month component of parameter X.</source>
          <target state="new">Gets the end of the month represented by month component of parameter X.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Example: EndOfMonth of 9/15/2013 05:10:23 PM is 9/30/2013 11:59:59 PM (date time that represents the end of September month)</source>
          <target state="new">Example: EndOfMonth of 9/15/2013 05:10:23 PM is 9/30/2013 11:59:59 PM (date time that represents the end of September month)</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new">Date</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>StartOfDay(X)</source>
          <target state="new">StartOfDay(X)</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Gets the start of the day represented by the day component of parameter X.</source>
          <target state="new">Gets the start of the day represented by the day component of parameter X.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Example: StartOfDay of 9/15/2013 05:10:23 PM is 9/15/2013 12:00:00 AM.</source>
          <target state="new">Example: StartOfDay of 9/15/2013 05:10:23 PM is 9/15/2013 12:00:00 AM.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="new">DateTime</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>From(X)</source>
          <target state="new">From(X)</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>X: String</source>
          <target state="new">X: String</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Parse string X to a date time.</source>
          <target state="new">Parse string X to a date time.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="new">DateTime</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Ticks(X)</source>
          <target state="new">Ticks(X)</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>X: DateTime</source>
          <target state="new">X: DateTime</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Gets the ticks property of the parameter X. One tick equals 100 nanoseconds.</source>
          <target state="new">Gets the ticks property of the parameter X. One tick equals 100 nanoseconds.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The value of this property represents the number of ticks that have elapsed since 12:00:00 midnight, January 1, 0001.</source>
          <target state="new">The value of this property represents the number of ticks that have elapsed since 12:00:00 midnight, January 1, 0001.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="new">Text</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Format(X)</source>
          <target state="new">Format(X)</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>X: String variable</source>
          <target state="new">X: String variable</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Formats the text.</source>
          <target state="new">Formats the text.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Text.Format example</source>
          <target state="new">Text.Format example</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When using a function within another function, you do not need to use <bpt id="p1">**</bpt>$$<ept id="p1">**</ept> prefix for the inner function.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When using a function within another function, you do not need to use <bpt id="p1">**</bpt>$$<ept id="p1">**</ept> prefix for the inner function.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For example: $$Text.Format('PartitionKey eq \\'my_pkey_filter_value\\' and RowKey ge \\'{0:yyyy-MM-dd HH:mm:ss}\\'', Time.AddHours(SliceStart, -6)).</source>
          <target state="new">For example: $$Text.Format('PartitionKey eq \\'my_pkey_filter_value\\' and RowKey ge \\'{0:yyyy-MM-dd HH:mm:ss}\\'', Time.AddHours(SliceStart, -6)).</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>In this example, notice that <bpt id="p1">**</bpt>$$<ept id="p1">**</ept> prefix is not used for the <bpt id="p2">**</bpt>Time.AddHours<ept id="p2">**</ept> function.</source>
          <target state="new">In this example, notice that <bpt id="p1">**</bpt>$$<ept id="p1">**</ept> prefix is not used for the <bpt id="p2">**</bpt>Time.AddHours<ept id="p2">**</ept> function.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Data Dependency Deep Dive</source>
          <target state="new">Data Dependency Deep Dive</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In order to generate a dataset slice by an activity run, data factory uses the following <bpt id="p1">**</bpt>dependency model<ept id="p1">**</ept> to determine the relationships between the dataset(s) consumed by an activity and the dataset(s) produced by an activity.</source>
          <target state="new">In order to generate a dataset slice by an activity run, data factory uses the following <bpt id="p1">**</bpt>dependency model<ept id="p1">**</ept> to determine the relationships between the dataset(s) consumed by an activity and the dataset(s) produced by an activity.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The time range of the input dataset(s) required to generate the output dataset slice called the <bpt id="p1">**</bpt>dependency period<ept id="p1">**</ept>.</source>
          <target state="new">The time range of the input dataset(s) required to generate the output dataset slice called the <bpt id="p1">**</bpt>dependency period<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An activity run generates a dataset slice only after the data slices in input dataset(s) within the dependency period are available.</source>
          <target state="new">An activity run generates a dataset slice only after the data slices in input dataset(s) within the dependency period are available.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>It means that all the input slices comprising the dependency period must be in <bpt id="p1">**</bpt>Ready<ept id="p1">**</ept> status  for the output dataset slice to be produced by an activity run.</source>
          <target state="new">It means that all the input slices comprising the dependency period must be in <bpt id="p1">**</bpt>Ready<ept id="p1">**</ept> status  for the output dataset slice to be produced by an activity run.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>To generate the dataset slice [start, end], a function is needed to map the dataset slice to its dependency period.</source>
          <target state="new">To generate the dataset slice [start, end], a function is needed to map the dataset slice to its dependency period.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This function is essentially a formula that converts the start and end of the dataset slice to the start and end of the dependency period.</source>
          <target state="new">This function is essentially a formula that converts the start and end of the dataset slice to the start and end of the dependency period.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>More formally,</source>
          <target state="new">More formally,</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>where f and g are mapping functions that calculate the start and end of the dependency period for each activity input.</source>
          <target state="new">where f and g are mapping functions that calculate the start and end of the dependency period for each activity input.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>As seen in samples shown above in most cases the dependency period is same as the period for the data slice to be produced.</source>
          <target state="new">As seen in samples shown above in most cases the dependency period is same as the period for the data slice to be produced.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>In these cases data factory automatically computes the input slices that fall in the dependency period.</source>
          <target state="new">In these cases data factory automatically computes the input slices that fall in the dependency period.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>For example: In the aggregation sample above where output is produced daily and input data is available every hour, the data slice period is 24 hours.</source>
          <target state="new">For example: In the aggregation sample above where output is produced daily and input data is available every hour, the data slice period is 24 hours.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Data factory finds the relevant hourly input slices for this time period and makes the output slice dependent on the input slice.</source>
          <target state="new">Data factory finds the relevant hourly input slices for this time period and makes the output slice dependent on the input slice.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>You can also provide your own mapping for the dependency period as shown in the sample above where one of the inputs was weekly and the output slice is produced daily.</source>
          <target state="new">You can also provide your own mapping for the dependency period as shown in the sample above where one of the inputs was weekly and the output slice is produced daily.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Data Dependency and Validation</source>
          <target state="new">Data Dependency and Validation</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A dataset can optionally have a validation policy defined that specifies how the data generated by a slice execution can be validated before it is ready for consumption.</source>
          <target state="new">A dataset can optionally have a validation policy defined that specifies how the data generated by a slice execution can be validated before it is ready for consumption.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Creating datasets<ept id="p1">](data-factory-create-datasets.md)</ept> article for details.</source>
          <target state="new">See <bpt id="p1">[</bpt>Creating datasets<ept id="p1">](data-factory-create-datasets.md)</ept> article for details.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>In such cases, once the slice has finished execution, the output slice status is changed to <bpt id="p1">**</bpt>Waiting<ept id="p1">**</ept> with a substatus of <bpt id="p2">**</bpt>Validation<ept id="p2">**</ept>.</source>
          <target state="new">In such cases, once the slice has finished execution, the output slice status is changed to <bpt id="p1">**</bpt>Waiting<ept id="p1">**</ept> with a substatus of <bpt id="p2">**</bpt>Validation<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Once the slices are validated, the slice status changes to <bpt id="p1">**</bpt>Ready<ept id="p1">**</ept>.</source>
          <target state="new">Once the slices are validated, the slice status changes to <bpt id="p1">**</bpt>Ready<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If a data slice has been produced but did not pass the validation, activity runs for downstream slices depending on the slice that failed validation will not be processed.</source>
          <target state="new">If a data slice has been produced but did not pass the validation, activity runs for downstream slices depending on the slice that failed validation will not be processed.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The various states of data slices in data factory are covered in the <bpt id="p1">[</bpt>Monitor and manage pipelines<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article.</source>
          <target state="new">The various states of data slices in data factory are covered in the <bpt id="p1">[</bpt>Monitor and manage pipelines<ept id="p1">](data-factory-monitor-manage-pipelines.md)</ept> article.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>External Data</source>
          <target state="new">External Data</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A dataset can be marked as external (as shown in the JSON below), implying it was not generated with Azure Data Factory.</source>
          <target state="new">A dataset can be marked as external (as shown in the JSON below), implying it was not generated with Azure Data Factory.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>In such a case, the Dataset policy can have an additional set of parameters describing validation and retry policy for the dataset.</source>
          <target state="new">In such a case, the Dataset policy can have an additional set of parameters describing validation and retry policy for the dataset.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Please see <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> for a description of all the properties.</source>
          <target state="new">Please see <bpt id="p1">[</bpt>Creating Pipelines<ept id="p1">](data-factory-create-pipelines.md)</ept> for a description of all the properties.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Similar to datasets that are produced by data factory the data slices for external data need to be ready   before dependent slices can be processed.</source>
          <target state="new">Similar to datasets that are produced by data factory the data slices for external data need to be ready   before dependent slices can be processed.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4ab0ac7f01f36bbeb7816b942c963848ef6f434</xliffext:olfilehash>
  </header>
</xliff>