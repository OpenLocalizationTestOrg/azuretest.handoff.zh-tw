<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Default communication stack provided by Service Fabric</source>
          <target state="new">Default communication stack provided by Service Fabric</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</source>
          <target state="new">This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Default communication stack provided by Reliable Services Framework</source>
          <target state="new">Default communication stack provided by Reliable Services Framework</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</source>
          <target state="new">For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Please update to the latest nuget packges to get the features mentioned below.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Please update to the latest nuget packges to get the features mentioned below.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service Communication Listener</source>
          <target state="new">Service Communication Listener</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The default communication listener for the service is implemented in the <ph id="ph1">`ServiceCommunicationListener`</ph> class</source>
          <target state="new">The default communication listener for the service is implemented in the <ph id="ph1">`ServiceCommunicationListener`</ph> class</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <ph id="ph1">`IService`</ph> interface.</source>
          <target state="new">The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <ph id="ph1">`IService`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The service can then just instantiate the <ph id="ph1">`ServiceCommunicationListener`</ph> object and return it in the <bpt id="p1">[</bpt><ph id="ph2">`CreateCommunicationListener`</ph> method<ept id="p1">](service-fabric-reliable-services-communication.md)</ept>.</source>
          <target state="new">The service can then just instantiate the <ph id="ph1">`ServiceCommunicationListener`</ph> object and return it in the <bpt id="p1">[</bpt><ph id="ph2">`CreateCommunicationListener`</ph> method<ept id="p1">](service-fabric-reliable-services-communication.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the HelloWorld service code to setup this communication stack may be defined as follows.</source>
          <target state="new">For example, the HelloWorld service code to setup this communication stack may be defined as follows.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="p1">[</bpt>DataContractSerializer<ept id="p1">](https://msdn.microsoft.com/library/ms731923.aspx)</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="p1">[</bpt>DataContractSerializer<ept id="p1">](https://msdn.microsoft.com/library/ms731923.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Writing Clients to communicate with ServiceCommunicationListener</source>
          <target state="new">Writing Clients to communicate with ServiceCommunicationListener</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For clients to communicate to services using the <ph id="ph1">`ServiceCommunicationListener`</ph>, the framework provides a <ph id="ph2">`ServiceProxy`</ph> class.</source>
          <target state="new">For clients to communicate to services using the <ph id="ph1">`ServiceCommunicationListener`</ph>, the framework provides a <ph id="ph2">`ServiceProxy`</ph> class.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</source>
          <target state="new">Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The communication framework takes care of propagating exceptions thrown at the service to the client.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The communication framework takes care of propagating exceptions thrown at the service to the client.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</source>
          <target state="new">So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd58144e981e7c7799efb6aa3e09cf898a396af0</xliffext:olfilehash>
  </header>
</xliff>