<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</source>
          <target state="new">The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Not only is this method inefficient, you can run into usage-relates issues should many customers try to start you app at the same time.</source>
          <target state="new">Not only is this method inefficient, you can run into usage-relates issues should many customers try to start you app at the same time.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</source>
          <target state="new">A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial uses service-managed authentication.</source>
          <target state="new">This tutorial uses service-managed authentication.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the default.js project file, replace the existing <bpt id="p1">**</bpt>Login<ept id="p1">**</ept> function with the following code:</source>
          <target state="new">In the default.js project file, replace the existing <bpt id="p1">**</bpt>Login<ept id="p1">**</ept> function with the following code:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Replace the existing <bpt id="p1">**</bpt>authenticate<ept id="p1">**</ept> function with the following code:</source>
          <target state="new">Replace the existing <bpt id="p1">**</bpt>authenticate<ept id="p1">**</ept> function with the following code:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this version of <bpt id="p1">**</bpt>authenticate<ept id="p1">**</ept>, the app tries to use credentials stored in the <bpt id="p2">**</bpt>PasswordVault<ept id="p2">**</ept> to access the mobile service.</source>
          <target state="new">In this version of <bpt id="p1">**</bpt>authenticate<ept id="p1">**</ept>, the app tries to use credentials stored in the <bpt id="p2">**</bpt>PasswordVault<ept id="p2">**</ept> to access the mobile service.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A simple query is sent to verify that the stored token is not expired.</source>
          <target state="new">A simple query is sent to verify that the stored token is not expired.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When a 401 is returned, a regular provider-based sign-in is attempted.</source>
          <target state="new">When a 401 is returned, a regular provider-based sign-in is attempted.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A regular sign-in is also performed when there is no stored credential.</source>
          <target state="new">A regular sign-in is also performed when there is no stored credential.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Restart the app twice.</source>
          <target state="new">Restart the app twice.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Notice that on the first start-up, sign-in with the provider is again required.</source>
          <target state="new">Notice that on the first start-up, sign-in with the provider is again required.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, on the second restart the cached credentials are used and sign-in is bypassed.</source>
          <target state="new">However, on the second restart the cached credentials are used and sign-in is bypassed.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c24a2d708b20b789ffd8614e7d0c89cfadda4aa</xliffext:olfilehash>
  </header>
</xliff>