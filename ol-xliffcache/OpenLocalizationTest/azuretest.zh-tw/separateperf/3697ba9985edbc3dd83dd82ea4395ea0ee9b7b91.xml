{
  "nodes": [
    {
      "content": "Defining dependencies in Azure Resource Manager templates",
      "pos": [
        26,
        83
      ]
    },
    {
      "content": "Describes how to set one resource as dependent on another resource during deployment.",
      "pos": [
        101,
        186
      ]
    },
    {
      "content": "Defining dependencies in Azure Resource Manager templates",
      "pos": [
        494,
        551
      ]
    },
    {
      "content": "For a given resource, there can be multiple upstream and child dependencies that are critical to the success of your topology.",
      "pos": [
        553,
        679
      ]
    },
    {
      "content": "You can define dependencies on other resources using <bpt id=\"p1\">**</bpt>dependsOn<ept id=\"p1\">**</ept> and",
      "pos": [
        680,
        750
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>resources<ept id=\"p1\">**</ept> property of a resource.",
      "pos": [
        752,
        789
      ]
    },
    {
      "content": "A dependency can also be specified using the <bpt id=\"p1\">**</bpt>reference<ept id=\"p1\">**</ept> function.",
      "pos": [
        790,
        858
      ]
    },
    {
      "content": "There are also resource links which can define relationships between resources, and support defining these relationships across resource groups.",
      "pos": [
        1314,
        1458
      ]
    },
    {
      "content": "dependsOn",
      "pos": [
        1463,
        1472
      ]
    },
    {
      "content": "For a given virtual machine, you may be dependent on having a database resource successfully provisioned.",
      "pos": [
        1474,
        1579
      ]
    },
    {
      "content": "In another case, you may be dependent for multiple nodes in your cluster to be installed",
      "pos": [
        1580,
        1668
      ]
    },
    {
      "content": "before deploying a virtual machine with the cluster management tool.",
      "pos": [
        1670,
        1738
      ]
    },
    {
      "content": "Within your template, the dependsOn property provides the ability to define this dependency for a resource.",
      "pos": [
        1740,
        1847
      ]
    },
    {
      "content": "It's value can be a comma separated list of resource names.",
      "pos": [
        1848,
        1907
      ]
    },
    {
      "content": "The dependencies between",
      "pos": [
        1908,
        1932
      ]
    },
    {
      "content": "resources are evaluated and resources are deployed in their dependent order.",
      "pos": [
        1934,
        2010
      ]
    },
    {
      "content": "When resources are not dependent on each other, they are attempted to be deployed in parallel.",
      "pos": [
        2011,
        2105
      ]
    },
    {
      "content": "While you may be inclined to use dependsOn to map dependencies between your resources, it's important to understand why you're doing it because it can impact the performance of your deployment.",
      "pos": [
        2108,
        2301
      ]
    },
    {
      "content": "For example, if you're doing this because you want to document how resources are interconnected, dependsOn is not the right approach.",
      "pos": [
        2303,
        2436
      ]
    },
    {
      "content": "The lifecycle of dependsOn is just for deployment and is",
      "pos": [
        2437,
        2493
      ]
    },
    {
      "content": "not available post-deployment.",
      "pos": [
        2495,
        2525
      ]
    },
    {
      "content": "Once deployed there is no way to query these dependencies.",
      "pos": [
        2526,
        2584
      ]
    },
    {
      "content": "By using dependsOn you run the risk of impacting performance where you may inadvertently distract the",
      "pos": [
        2585,
        2686
      ]
    },
    {
      "content": "deployment engine from using parallelism where it might have otherwise.",
      "pos": [
        2688,
        2759
      ]
    },
    {
      "content": "To document and provide query capabililty over the relationships between resources, you should instead use <bpt id=\"p1\">[</bpt>resource linking<ept id=\"p1\">](resource-group-link-resources.md)</ept>.",
      "pos": [
        2760,
        2920
      ]
    },
    {
      "content": "This element is not needed if the reference function is used to get a representation of a resource because a reference object implies a dependency on the resource.",
      "pos": [
        2922,
        3085
      ]
    },
    {
      "content": "In fact, if there is an",
      "pos": [
        3086,
        3109
      ]
    },
    {
      "content": "option to use a reference vs. dependsOn, the guidance is to use the reference function and have implicit references.",
      "pos": [
        3111,
        3227
      ]
    },
    {
      "content": "The rationale here again is performance.",
      "pos": [
        3228,
        3268
      ]
    },
    {
      "content": "References define implicit dependencies",
      "pos": [
        3270,
        3309
      ]
    },
    {
      "content": "that are known to be required as they're referenced within the template.",
      "pos": [
        3311,
        3383
      ]
    },
    {
      "content": "By their presence, they are relevant, avoiding again optimizing for performance and to avoid the potential risk of",
      "pos": [
        3384,
        3498
      ]
    },
    {
      "content": "distracting the deployment engine from avoiding parallelism unnecessarily.",
      "pos": [
        3500,
        3574
      ]
    },
    {
      "content": "resources",
      "pos": [
        3579,
        3588
      ]
    },
    {
      "content": "The resources property allows you to specify child resources that are related to the resource being defined.",
      "pos": [
        3590,
        3698
      ]
    },
    {
      "content": "Child resources can only be defined 5 levels deep.",
      "pos": [
        3699,
        3749
      ]
    },
    {
      "content": "It is important to note that an implicit dependency is not created between a child resource and the parent resource.",
      "pos": [
        3750,
        3866
      ]
    },
    {
      "content": "If you need the child resource to be deployed after the parent resource, you must explicitly state that dependency with the dependsOn property.",
      "pos": [
        3867,
        4010
      ]
    },
    {
      "content": "reference function",
      "pos": [
        4016,
        4034
      ]
    },
    {
      "content": "The reference function enables an expression to derive its value from other JSON name and value pairs or runtime resources.",
      "pos": [
        4036,
        4159
      ]
    },
    {
      "content": "Reference expressions implicitly declare that one resource depends on another.",
      "pos": [
        4160,
        4238
      ]
    },
    {
      "content": "The property represented by <bpt id=\"p1\">**</bpt>propertyPath<ept id=\"p1\">**</ept> below is optional, if it is not specified, the reference is to the resource.",
      "pos": [
        4240,
        4361
      ]
    },
    {
      "content": "You can use either this element or the dependsOn element to specify dependencies, but you do not need to use both for the same dependent resource.",
      "pos": [
        4407,
        4553
      ]
    },
    {
      "content": "The guidance is to use the implicit reference to avoid the",
      "pos": [
        4554,
        4612
      ]
    },
    {
      "content": "risk of inadvertently having an unnecessary dependsOn element stop the deployment engine from doing aspects of the deployment in parallel.",
      "pos": [
        4614,
        4752
      ]
    },
    {
      "pos": [
        4754,
        4843
      ],
      "content": "To learn more, see <bpt id=\"p1\">[</bpt>reference function<ept id=\"p1\">](../resource-group-template-functions/#reference)</ept>."
    },
    {
      "content": "Next steps",
      "pos": [
        4848,
        4858
      ]
    },
    {
      "pos": [
        4862,
        4985
      ],
      "content": "To learn about creating Azure Resource Manager templates, see <bpt id=\"p1\">[</bpt>Authoring templates<ept id=\"p1\">](resource-group-authoring-templates.md)</ept>."
    },
    {
      "pos": [
        4989,
        5105
      ],
      "content": "For a list of the available functions in a template, see <bpt id=\"p1\">[</bpt>Template functions<ept id=\"p1\">](resource-group-template-functions.md)</ept>."
    },
    {
      "content": "test",
      "pos": [
        5108,
        5112
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Defining dependencies in Azure Resource Manager templates\"\n   description=\"Describes how to set one resource as dependent on another resource during deployment.\"\n   services=\"azure-resource-manager\"\n   documentationCenter=\"na\"\n   authors=\"mmercuri\"\n   manager=\"wpickett\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"azure-resource-manager\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"na\"\n   ms.date=\"07/15/2015\"\n   ms.author=\"mmercuri\"/>\n\n# Defining dependencies in Azure Resource Manager templates\n\nFor a given resource, there can be multiple upstream and child dependencies that are critical to the success of your topology. You can define dependencies on other resources using **dependsOn** and \n**resources** property of a resource. A dependency can also be specified using the **reference** function.\n\n    {\n        \"name\": \"<name-of-the-resource>\",\n        \"type\": \"<resource-provider-namespace/resource-type-name>\",\n        \"apiVersion\": \"<supported-api-version-of-resource>\",\n        \"location\": \"<location-of-resource>\",\n        \"tags\": { <name-value-pairs-for-resource-tagging> },\n        \"dependsOn\": [ <array-of-related-resource-names> ],\n        \"properties\": { <settings-for-the-resource> },\n        \"resources\": { <dependent-resources> }\n    }\n\n There are also resource links which can define relationships between resources, and support defining these relationships across resource groups.\n\n## dependsOn\n\nFor a given virtual machine, you may be dependent on having a database resource successfully provisioned. In another case, you may be dependent for multiple nodes in your cluster to be installed \nbefore deploying a virtual machine with the cluster management tool.\n\nWithin your template, the dependsOn property provides the ability to define this dependency for a resource. It's value can be a comma separated list of resource names. The dependencies between \nresources are evaluated and resources are deployed in their dependent order. When resources are not dependent on each other, they are attempted to be deployed in parallel. \n\nWhile you may be inclined to use dependsOn to map dependencies between your resources, it's important to understand why you're doing it because it can impact the performance of your deployment. \nFor example, if you're doing this because you want to document how resources are interconnected, dependsOn is not the right approach. The lifecycle of dependsOn is just for deployment and is \nnot available post-deployment. Once deployed there is no way to query these dependencies. By using dependsOn you run the risk of impacting performance where you may inadvertently distract the \ndeployment engine from using parallelism where it might have otherwise. To document and provide query capabililty over the relationships between resources, you should instead use [resource linking](resource-group-link-resources.md).\n\nThis element is not needed if the reference function is used to get a representation of a resource because a reference object implies a dependency on the resource. In fact, if there is an \noption to use a reference vs. dependsOn, the guidance is to use the reference function and have implicit references. The rationale here again is performance.  References define implicit dependencies \nthat are known to be required as they're referenced within the template. By their presence, they are relevant, avoiding again optimizing for performance and to avoid the potential risk of \ndistracting the deployment engine from avoiding parallelism unnecessarily.\n\n## resources\n\nThe resources property allows you to specify child resources that are related to the resource being defined. Child resources can only be defined 5 levels deep. It is important to note that an implicit dependency is not created between a child resource and the parent resource. If you need the child resource to be deployed after the parent resource, you must explicitly state that dependency with the dependsOn property. \n\n## reference function\n\nThe reference function enables an expression to derive its value from other JSON name and value pairs or runtime resources. Reference expressions implicitly declare that one resource depends on another. \nThe property represented by **propertyPath** below is optional, if it is not specified, the reference is to the resource.\n\n    reference('resourceName').propertyPath\n\nYou can use either this element or the dependsOn element to specify dependencies, but you do not need to use both for the same dependent resource. The guidance is to use the implicit reference to avoid the \nrisk of inadvertently having an unnecessary dependsOn element stop the deployment engine from doing aspects of the deployment in parallel.\n\nTo learn more, see [reference function](../resource-group-template-functions/#reference).\n\n## Next steps\n\n- To learn about creating Azure Resource Manager templates, see [Authoring templates](resource-group-authoring-templates.md). \n- For a list of the available functions in a template, see [Template functions](resource-group-template-functions.md).\n\n\ntest\n"
}