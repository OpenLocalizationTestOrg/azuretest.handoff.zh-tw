{
  "nodes": [
    {
      "content": "How to use queue storage (C++) | Microsoft Azure",
      "pos": [
        28,
        76
      ]
    },
    {
      "content": "Learn how to use the queue storage service in Azure.",
      "pos": [
        96,
        148
      ]
    },
    {
      "content": "Samples are written in C++.",
      "pos": [
        149,
        176
      ]
    },
    {
      "content": "How to use Queue Storage from C++",
      "pos": [
        479,
        512
      ]
    },
    {
      "content": "Overview",
      "pos": [
        619,
        627
      ]
    },
    {
      "content": "This guide will show you how to perform common scenarios using the Azure Queue storage service.",
      "pos": [
        628,
        723
      ]
    },
    {
      "content": "The samples are written in C++ and use the <bpt id=\"p1\">[</bpt>Azure Storage Client Library for C++<ept id=\"p1\">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>.",
      "pos": [
        724,
        872
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>inserting<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>peeking<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>getting<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>deleting<ept id=\"p4\">**</ept> queue messages, as well as <bpt id=\"p5\">**</bpt>creating and deleting queues<ept id=\"p5\">**</ept>.",
      "pos": [
        874,
        1022
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This guide targets the Azure Storage Client Library for C++ version 1.0.0 and above.",
      "pos": [
        1027,
        1124
      ]
    },
    {
      "content": "The recommended version is Storage Client Library 1.0.0, which is available via <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](http://www.nuget.org/packages/wastorage)</ept> or <bpt id=\"p2\">[</bpt>GitHub<ept id=\"p2\">](https://github.com/)</ept>.",
      "pos": [
        1125,
        1287
      ]
    },
    {
      "content": "Create a C++ application",
      "pos": [
        1492,
        1516
      ]
    },
    {
      "content": "In this guide, you will use storage features which can be run within a C++ application.",
      "pos": [
        1519,
        1606
      ]
    },
    {
      "content": "To do so, you will need to install the Azure Storage Client Library for C++ and create an Azure storage account in your Azure subscription.",
      "pos": [
        1610,
        1749
      ]
    },
    {
      "content": "To install the Azure Storage Client Library for C++, you can use the following methods:",
      "pos": [
        1753,
        1840
      ]
    },
    {
      "pos": [
        1846,
        2011
      ],
      "content": "<bpt id=\"p1\">**</bpt>Linux:<ept id=\"p1\">**</ept> Follow the instructions given in the <bpt id=\"p2\">[</bpt>Azure Storage Client Library for C++ README<ept id=\"p2\">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept> page."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Windows:<ept id=\"p1\">**</ept> In Visual Studio, click <bpt id=\"p2\">**</bpt>Tools &gt; NuGet Package Manager &gt; Package Manager Console<ept id=\"p2\">**</ept>.",
      "pos": [
        2018,
        2115
      ]
    },
    {
      "content": "Type the following command into the <bpt id=\"p1\">[</bpt>NuGet Package Manager console<ept id=\"p1\">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept> and press <bpt id=\"p2\">**</bpt>ENTER<ept id=\"p2\">**</ept>.",
      "pos": [
        2116,
        2277
      ]
    },
    {
      "content": "Configure your application to access Queue Storage",
      "pos": [
        2321,
        2371
      ]
    },
    {
      "content": "Add the following include statements to the top of the C++ file where you want to use the Azure storage APIs to access queues:",
      "pos": [
        2372,
        2498
      ]
    },
    {
      "content": "Setup an Azure storage connection string",
      "pos": [
        2570,
        2610
      ]
    },
    {
      "content": "An Azure storage client uses a storage connection string to store endpoints and credentials for accessing data management services.",
      "pos": [
        2612,
        2743
      ]
    },
    {
      "content": "When running in a client application, you must provide the storage connection string in the following format, using the name of your storage account and the storage access key for the storage account listed in the Management Portal for the <bpt id=\"p1\">*</bpt>AccountName<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>AccountKey<ept id=\"p2\">*</ept> values.",
      "pos": [
        2744,
        3022
      ]
    },
    {
      "content": "For information on storage accounts and access keys, see <bpt id=\"p1\">[</bpt>About Azure Storage Accounts<ept id=\"p1\">](storage-create-storage-account.md)</ept>.",
      "pos": [
        3023,
        3146
      ]
    },
    {
      "content": "This example shows how you can declare a static field to hold the connection string:",
      "pos": [
        3147,
        3231
      ]
    },
    {
      "content": "To test your application in your local Windows computer, you can use the Microsoft Azure <bpt id=\"p1\">[</bpt>storage emulator<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh403989.aspx)</ept>  that is installed with the <bpt id=\"p2\">[</bpt>Azure SDK<ept id=\"p2\">](http://azure.microsoft.com/downloads/)</ept>.",
      "pos": [
        3451,
        3694
      ]
    },
    {
      "content": "The storage emulator is a utility that simulates the Blob, Queue, and Table services available in Azure on your local development machine.",
      "pos": [
        3695,
        3833
      ]
    },
    {
      "content": "The following example shows how you can declare a static field to hold the connection string to your local storage emulator:",
      "pos": [
        3834,
        3958
      ]
    },
    {
      "content": "To start the Azure storage emulator, Select the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button or press the <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept> key.",
      "pos": [
        4119,
        4213
      ]
    },
    {
      "content": "Begin typing <bpt id=\"p1\">**</bpt>Azure Storage Emulator<ept id=\"p1\">**</ept>, and select <bpt id=\"p2\">**</bpt>Microsoft Azure Storage Emulator<ept id=\"p2\">**</ept> from the list of applications.",
      "pos": [
        4214,
        4333
      ]
    },
    {
      "content": "The following samples assume that you have used one of these two methods to get the storage connection string.",
      "pos": [
        4337,
        4447
      ]
    },
    {
      "content": "Retrieve your connection string",
      "pos": [
        4454,
        4485
      ]
    },
    {
      "content": "You can use the <bpt id=\"p1\">**</bpt>cloud_storage_account<ept id=\"p1\">**</ept> class to represent your Storage Account information.",
      "pos": [
        4486,
        4580
      ]
    },
    {
      "content": "To retrieve your storage account information from the storage connection string, you can use the <bpt id=\"p1\">**</bpt>parse<ept id=\"p1\">**</ept> method.",
      "pos": [
        4581,
        4695
      ]
    },
    {
      "content": "How to: Create a queue",
      "pos": [
        4891,
        4913
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>cloud_queue_client<ept id=\"p1\">**</ept> object lets you get reference objects for queues.",
      "pos": [
        4914,
        4988
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>cloud_queue_client<ept id=\"p1\">**</ept> object.",
      "pos": [
        4989,
        5048
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>cloud_queue_client<ept id=\"p1\">**</ept> object to get a reference to the queue you want to use.",
      "pos": [
        5372,
        5458
      ]
    },
    {
      "content": "You can create the queue if it doesn't exist.",
      "pos": [
        5459,
        5504
      ]
    },
    {
      "content": "How to: Insert a message into a queue",
      "pos": [
        5736,
        5773
      ]
    },
    {
      "content": "To insert a message into an existing queue, first create a new <bpt id=\"p1\">**</bpt>cloud_queue_message<ept id=\"p1\">**</ept>.",
      "pos": [
        5774,
        5861
      ]
    },
    {
      "content": "Next, call the <bpt id=\"p1\">**</bpt>add_message<ept id=\"p1\">**</ept> method.",
      "pos": [
        5862,
        5900
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>cloud_queue_message<ept id=\"p1\">**</ept> can be created from either a string or a <bpt id=\"p2\">**</bpt>byte<ept id=\"p2\">**</ept> array.",
      "pos": [
        5901,
        5983
      ]
    },
    {
      "content": "Here is code which creates a queue (if it doesn't exist) and inserts the message 'Hello, World':",
      "pos": [
        5984,
        6080
      ]
    },
    {
      "content": "How to: Peek at the next message",
      "pos": [
        6786,
        6818
      ]
    },
    {
      "pos": [
        6819,
        6945
      ],
      "content": "You can peek at the message in the front of a queue without removing it from the queue by calling the <bpt id=\"p1\">**</bpt>peek_message<ept id=\"p1\">**</ept> method."
    },
    {
      "content": "How to: Change the contents of a queued message",
      "pos": [
        7660,
        7707
      ]
    },
    {
      "content": "You can change the contents of a message in-place in the queue.",
      "pos": [
        7708,
        7771
      ]
    },
    {
      "content": "If the message represents a work task, you could use this feature to update the status of the work task.",
      "pos": [
        7772,
        7876
      ]
    },
    {
      "content": "The following code updates the queue message with new contents, and sets the visibility timeout to extend another 60 seconds.",
      "pos": [
        7877,
        8002
      ]
    },
    {
      "content": "This saves the state of work associated with the message, and gives the client another minute to continue working on the message.",
      "pos": [
        8003,
        8132
      ]
    },
    {
      "content": "You could use this technique to track multi-step workflows on queue messages, without having to start over from the beginning if a processing step fails due to hardware or software failure.",
      "pos": [
        8133,
        8322
      ]
    },
    {
      "content": "Typically, you would keep a retry count as well, and if the message is retried more than n times, you would delete it.",
      "pos": [
        8323,
        8441
      ]
    },
    {
      "content": "This protects against a message that triggers an application error each time it is processed.",
      "pos": [
        8442,
        8535
      ]
    },
    {
      "content": "How to: De-queue the next message",
      "pos": [
        9618,
        9651
      ]
    },
    {
      "content": "Your code de-queues a message from a queue in two steps.",
      "pos": [
        9652,
        9708
      ]
    },
    {
      "content": "When you call <bpt id=\"p1\">**</bpt>get_message<ept id=\"p1\">**</ept>, you get the next message in a queue.",
      "pos": [
        9709,
        9776
      ]
    },
    {
      "content": "A message returned from <bpt id=\"p1\">**</bpt>get_message<ept id=\"p1\">**</ept> becomes invisible to any other code reading messages from this queue.",
      "pos": [
        9777,
        9886
      ]
    },
    {
      "content": "To finish removing the message from the queue, you must also call <bpt id=\"p1\">**</bpt>delete_message<ept id=\"p1\">**</ept>.",
      "pos": [
        9887,
        9972
      ]
    },
    {
      "content": "This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.",
      "pos": [
        9973,
        10176
      ]
    },
    {
      "content": "Your code calls <bpt id=\"p1\">**</bpt>delete_message<ept id=\"p1\">**</ept> right after the message has been processed.",
      "pos": [
        10177,
        10255
      ]
    },
    {
      "content": "How to: Leverage additional options for de-queuing messages",
      "pos": [
        10998,
        11057
      ]
    },
    {
      "content": "There are two ways you can customize message retrieval from a queue.",
      "pos": [
        11058,
        11126
      ]
    },
    {
      "content": "First, you can get a batch of messages (up to 32).",
      "pos": [
        11127,
        11177
      ]
    },
    {
      "content": "Second, you can set a longer or shorter invisibility timeout, allowing your code more or less time to fully process each message.",
      "pos": [
        11178,
        11307
      ]
    },
    {
      "content": "The following code example uses the <bpt id=\"p1\">**</bpt>get_messages<ept id=\"p1\">**</ept> method to get 20 messages in one call.",
      "pos": [
        11308,
        11399
      ]
    },
    {
      "content": "Then it processes each message using a <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop.",
      "pos": [
        11400,
        11452
      ]
    },
    {
      "content": "It also sets the invisibility timeout to five minutes for each message.",
      "pos": [
        11453,
        11524
      ]
    },
    {
      "content": "Note that the 5 minutes starts for all messages at the same time, so after 5 minutes have passed since the call to <bpt id=\"p1\">**</bpt>get_messages<ept id=\"p1\">**</ept>, any messages which have not been deleted will become visible again.",
      "pos": [
        11525,
        11725
      ]
    },
    {
      "content": "How to: Get the queue length",
      "pos": [
        12846,
        12874
      ]
    },
    {
      "content": "You can get an estimate of the number of messages in a queue.",
      "pos": [
        12875,
        12936
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>download_attributes<ept id=\"p1\">**</ept> method asks the Queue service to retrieve the queue attributes, including the message count.",
      "pos": [
        12937,
        13057
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>approximate_message_count<ept id=\"p1\">**</ept> method gets the approximate number of messages in the queue.",
      "pos": [
        13058,
        13152
      ]
    },
    {
      "content": "How to: Delete a queue",
      "pos": [
        13933,
        13955
      ]
    },
    {
      "pos": [
        13956,
        14075
      ],
      "content": "To delete a queue and all the messages contained in it, call the <bpt id=\"p1\">**</bpt>delete_queue_if_exists<ept id=\"p1\">**</ept> method on the queue object."
    },
    {
      "content": "Next steps",
      "pos": [
        14620,
        14630
      ]
    },
    {
      "content": "Now that you've learned the basics of Queue storage, follow these links to learn more about Azure Storage.",
      "pos": [
        14631,
        14737
      ]
    },
    {
      "content": "How to use Blob Storage from C++",
      "pos": [
        14746,
        14778
      ]
    },
    {
      "content": "How to use Table Storage from C++",
      "pos": [
        14826,
        14859
      ]
    },
    {
      "content": "List Azure Storage Resources in C++",
      "pos": [
        14908,
        14943
      ]
    },
    {
      "content": "Storage Client Library for C++ Reference",
      "pos": [
        14986,
        15026
      ]
    },
    {
      "content": "Azure Storage Documentation",
      "pos": [
        15075,
        15102
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use queue storage (C++) | Microsoft Azure\" \n    description=\"Learn how to use the queue storage service in Azure. Samples are written in C++.\" \n    services=\"storage\" \n    documentationCenter=\".net\" \n    authors=\"tamram\" \n    manager=\"adinah\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"storage\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"07/19/2015\" \n    ms.author=\"tamram\"/>\n\n# How to use Queue Storage from C++  \n\n[AZURE.INCLUDE [storage-selector-queue-include](../../includes/storage-selector-queue-include.md)]\n\n## Overview\nThis guide will show you how to perform common scenarios using the Azure Queue storage service. The samples are written in C++ and use the [Azure Storage Client Library for C++](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md).  The scenarios covered include **inserting**, **peeking**, **getting**, and **deleting** queue messages, as well as **creating and deleting queues**.  \n\n>[AZURE.NOTE] This guide targets the Azure Storage Client Library for C++ version 1.0.0 and above. The recommended version is Storage Client Library 1.0.0, which is available via [NuGet](http://www.nuget.org/packages/wastorage) or [GitHub](https://github.com/). \n\n[AZURE.INCLUDE [storage-queue-concepts-include](../../includes/storage-queue-concepts-include.md)]\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a C++ application  \nIn this guide, you will use storage features which can be run within a C++ application.  \n\nTo do so, you will need to install the Azure Storage Client Library for C++ and create an Azure storage account in your Azure subscription.  \n\nTo install the Azure Storage Client Library for C++, you can use the following methods:\n\n-   **Linux:** Follow the instructions given in the [Azure Storage Client Library for C++ README](https://github.com/Azure/azure-storage-cpp/blob/master/README.md) page.  \n-   **Windows:** In Visual Studio, click **Tools > NuGet Package Manager > Package Manager Console**. Type the following command into the [NuGet Package Manager console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console) and press **ENTER**.  \n\n        Install-Package wastorage \n \n## Configure your application to access Queue Storage\nAdd the following include statements to the top of the C++ file where you want to use the Azure storage APIs to access queues:  \n\n    #include \"was/storage_account.h\"\n    #include \"was/queue.h\"\n\n## Setup an Azure storage connection string\n\nAn Azure storage client uses a storage connection string to store endpoints and credentials for accessing data management services. When running in a client application, you must provide the storage connection string in the following format, using the name of your storage account and the storage access key for the storage account listed in the Management Portal for the *AccountName* and *AccountKey* values. For information on storage accounts and access keys, see [About Azure Storage Accounts](storage-create-storage-account.md). This example shows how you can declare a static field to hold the connection string:  \n\n    // Define the connection-string with your values.\n    const utility::string_t storage_connection_string(U(\"DefaultEndpointsProtocol=https;AccountName=your_storage_account;AccountKey=your_storage_account_key\"));\n\nTo test your application in your local Windows computer, you can use the Microsoft Azure [storage emulator](https://msdn.microsoft.com/library/azure/hh403989.aspx)  that is installed with the [Azure SDK](http://azure.microsoft.com/downloads/). The storage emulator is a utility that simulates the Blob, Queue, and Table services available in Azure on your local development machine. The following example shows how you can declare a static field to hold the connection string to your local storage emulator:  \n\n    // Define the connection-string with Azure Storage Emulator.\n    const utility::string_t storage_connection_string(U(\"UseDevelopmentStorage=true;\"));  \n\nTo start the Azure storage emulator, Select the **Start** button or press the **Windows** key. Begin typing **Azure Storage Emulator**, and select **Microsoft Azure Storage Emulator** from the list of applications.  \n\nThe following samples assume that you have used one of these two methods to get the storage connection string.  \n\n## Retrieve your connection string\nYou can use the **cloud_storage_account** class to represent your Storage Account information. To retrieve your storage account information from the storage connection string, you can use the **parse** method. \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n## How to: Create a queue\nA **cloud_queue_client** object lets you get reference objects for queues. The following code creates a **cloud_queue_client** object.  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create a queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\nUse the **cloud_queue_client** object to get a reference to the queue you want to use. You can create the queue if it doesn't exist.\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Create the queue if it doesn't already exist.\n    queue.create_if_not_exists();  \n\n## How to: Insert a message into a queue\nTo insert a message into an existing queue, first create a new **cloud_queue_message**. Next, call the **add_message** method. A **cloud_queue_message** can be created from either a string or a **byte** array. Here is code which creates a queue (if it doesn't exist) and inserts the message 'Hello, World':\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Create the queue if it doesn't already exist.\n    queue.create_if_not_exists();\n\n    // Create a message and add it to the queue.\n    azure::storage::cloud_queue_message message1(U(\"Hello, World\"));\n    queue.add_message(message1);  \n\n## How to: Peek at the next message\nYou can peek at the message in the front of a queue without removing it from the queue by calling the **peek_message** method.  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Peek at the next message.\n    azure::storage::cloud_queue_message peeked_message = queue.peek_message();\n\n    // Output the message content.\n    std::wcout << U(\"Peeked message content: \") << peeked_message.content_as_string() << std::endl;\n\n## How to: Change the contents of a queued message\nYou can change the contents of a message in-place in the queue. If the message represents a work task, you could use this feature to update the status of the work task. The following code updates the queue message with new contents, and sets the visibility timeout to extend another 60 seconds. This saves the state of work associated with the message, and gives the client another minute to continue working on the message. You could use this technique to track multi-step workflows on queue messages, without having to start over from the beginning if a processing step fails due to hardware or software failure. Typically, you would keep a retry count as well, and if the message is retried more than n times, you would delete it. This protects against a message that triggers an application error each time it is processed.  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_conection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n        \n    // Get the message from the queue and update the message contents.\n    // The visibility timeout \"0\" means make it visible immediately.\n    // The visibility timeout \"60\" means the client can get another minute to continue \n    // working on the message.\n    azure::storage::cloud_queue_message changed_message = queue.get_message();\n\n    changed_message.set_content(U(\"Changed message\"));\n    queue.update_message(changed_message, std::chrono::seconds(60), true);\n\n    // Output the message content.\n    std::wcout << U(\"Changed message content: \") << changed_message.content_as_string() << std::endl;  \n\n## How to: De-queue the next message\nYour code de-queues a message from a queue in two steps. When you call **get_message**, you get the next message in a queue. A message returned from **get_message** becomes invisible to any other code reading messages from this queue. To finish removing the message from the queue, you must also call **delete_message**. This two-step process of removing a message assures that if your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again. Your code calls **delete_message** right after the message has been processed.\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Get the next message.\n    azure::storage::cloud_queue_message dequeued_message = queue.get_message();\n    std::wcout << U(\"Dequeued message: \") << dequeued_message.content_as_string() << std::endl;\n\n    // Delete the message.\n    queue.delete_message(dequeued_message); \n\n## How to: Leverage additional options for de-queuing messages\nThere are two ways you can customize message retrieval from a queue. First, you can get a batch of messages (up to 32). Second, you can set a longer or shorter invisibility timeout, allowing your code more or less time to fully process each message. The following code example uses the **get_messages** method to get 20 messages in one call. Then it processes each message using a **for** loop. It also sets the invisibility timeout to five minutes for each message. Note that the 5 minutes starts for all messages at the same time, so after 5 minutes have passed since the call to **get_messages**, any messages which have not been deleted will become visible again.  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Dequeue some queue messages (maximum 32 at a time) and set their visibility timeout to \n    // 5 minutes (300 seconds).\n    azure::storage::queue_request_options options;\n    azure::storage::operation_context context;\n\n    // Retrieve 20 messages from the queue with a visibility timeout of 300 seconds.\n    std::vector<azure::storage::cloud_queue_message> messages = queue.get_messages(20, std::chrono::seconds(300), options, context);\n        \n    for (auto it = messages.cbegin(); it != messages.cend(); ++it)\n    {\n        // Display the contents of the message.\n        std::wcout << U(\"Get: \") << it->content_as_string() << std::endl;\n    }\n\n## How to: Get the queue length\nYou can get an estimate of the number of messages in a queue. The **download_attributes** method asks the Queue service to retrieve the queue attributes, including the message count. The **approximate_message_count** method gets the approximate number of messages in the queue.  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Fetch the queue attributes.\n    queue.download_attributes();\n\n    // Retrieve the cached approximate message count.\n    int cachedMessageCount = queue.approximate_message_count();\n\n    // Display number of messages.\n    std::wcout << U(\"Number of messages in queue: \") << cachedMessageCount << std::endl;  \n\n## How to: Delete a queue\nTo delete a queue and all the messages contained in it, call the **delete_queue_if_exists** method on the queue object.\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // If the queue exists and delete it.\n    queue.delete_queue_if_exists();  \n\n## Next steps\nNow that you've learned the basics of Queue storage, follow these links to learn more about Azure Storage.  \n\n-   [How to use Blob Storage from C++](storage-c-plus-plus-how-to-use-blobs.md)\n-   [How to use Table Storage from C++](storage-c-plus-plus-how-to-use-tables.md)\n-   [List Azure Storage Resources in C++](storage-c-plus-plus-enumeration.md)\n-   [Storage Client Library for C++ Reference](http://azure.github.io/azure-storage-cpp)\n-   [Azure Storage Documentation](http://azure.microsoft.com/documentation/services/storage/)\n\n \n"
}