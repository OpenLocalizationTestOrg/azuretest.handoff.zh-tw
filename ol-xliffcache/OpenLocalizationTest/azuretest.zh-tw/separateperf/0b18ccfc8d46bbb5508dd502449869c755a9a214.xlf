<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Testability Action | Microsoft Azure</source>
          <target state="new">Testability Action | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article talks about the testability actions found in Microsoft Azure Service Fabric.</source>
          <target state="new">This article talks about the testability actions found in Microsoft Azure Service Fabric.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Testability actions</source>
          <target state="new">Testability actions</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In order to simulate an unreliable infrastructure, Service Fabric provides developers with ways to simulate various real world failures and state transitions.</source>
          <target state="new">In order to simulate an unreliable infrastructure, Service Fabric provides developers with ways to simulate various real world failures and state transitions.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These are exposed as Testability actions.</source>
          <target state="new">These are exposed as Testability actions.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The actions are the low level APIs that cause a specific fault injection, state transition or validation.</source>
          <target state="new">The actions are the low level APIs that cause a specific fault injection, state transition or validation.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Combining these actions, a service developer can write comprehensive test scenarios for your services.</source>
          <target state="new">Combining these actions, a service developer can write comprehensive test scenarios for your services.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Service Fabric provides some common test scenarios out of the box composed of these actions.</source>
          <target state="new">Service Fabric provides some common test scenarios out of the box composed of these actions.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is highly recommended to utilize these built-in scenarios, which are carefully chosen to test common state transitions and failure cases.</source>
          <target state="new">It is highly recommended to utilize these built-in scenarios, which are carefully chosen to test common state transitions and failure cases.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, actions can be used to create custom test scenarios when you want to add coverage for scenarios that are either not covered by the built-in scenarios yet or custom tailored for your application.</source>
          <target state="new">However, actions can be used to create custom test scenarios when you want to add coverage for scenarios that are either not covered by the built-in scenarios yet or custom tailored for your application.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>C# implementation of the actions are found in the System.Fabric.Testability.dll assembly.</source>
          <target state="new">C# implementation of the actions are found in the System.Fabric.Testability.dll assembly.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Testability PowerShell module is found in the Microsoft.ServiceFabric.Testability.Powershell.dll assembly.</source>
          <target state="new">The Testability PowerShell module is found in the Microsoft.ServiceFabric.Testability.Powershell.dll assembly.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As part of runtime installation the ServiceFabricTestability PowerShell module is installed to allow for easy use.</source>
          <target state="new">As part of runtime installation the ServiceFabricTestability PowerShell module is installed to allow for easy use.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Graceful vs. ungraceful fault actions</source>
          <target state="new">Graceful vs. ungraceful fault actions</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Testability actions are classified into two major buckets:</source>
          <target state="new">Testability actions are classified into two major buckets:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Ungraceful faults: These faults simulate failures like machine restarts and process crashes.</source>
          <target state="new">Ungraceful faults: These faults simulate failures like machine restarts and process crashes.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In such cases of failures, the execution context of process stops abruptly.</source>
          <target state="new">In such cases of failures, the execution context of process stops abruptly.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This means no cleanup of state can run before the application starts up again.</source>
          <target state="new">This means no cleanup of state can run before the application starts up again.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Graceful faults: These faults simulate graceful actions like replica moves and drops triggered by load balancing.</source>
          <target state="new">Graceful faults: These faults simulate graceful actions like replica moves and drops triggered by load balancing.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In such cases the service gets notification of close and can cleanup state before exiting.</source>
          <target state="new">In such cases the service gets notification of close and can cleanup state before exiting.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For better quality validation, run the service and business workload while inducing various graceful and ungraceful faults.</source>
          <target state="new">For better quality validation, run the service and business workload while inducing various graceful and ungraceful faults.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Ungraceful faults exercise scenarios where the service process abruptly exits in the middle of some workflow.</source>
          <target state="new">Ungraceful faults exercise scenarios where the service process abruptly exits in the middle of some workflow.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This tests  the recovery path once the service replica is restored by Service Fabric.</source>
          <target state="new">This tests  the recovery path once the service replica is restored by Service Fabric.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This will help test data consistency and whether the service state is maintained correctly after failures.</source>
          <target state="new">This will help test data consistency and whether the service state is maintained correctly after failures.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The other set of failures i.e. the graceful failures test that the service correctly reacts to replicas being moved around by Service Fabric.</source>
          <target state="new">The other set of failures i.e. the graceful failures test that the service correctly reacts to replicas being moved around by Service Fabric.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This tests handling of cancellation in the RunAsync method.</source>
          <target state="new">This tests handling of cancellation in the RunAsync method.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The service needs to check for the Cancellation token being set, correctly save its state and exit the RunAsync method.</source>
          <target state="new">The service needs to check for the Cancellation token being set, correctly save its state and exit the RunAsync method.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Testability actions list</source>
          <target state="new">Testability actions list</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="new">Actions</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Managed API</source>
          <target state="new">Managed API</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Powershell Cmdlet</source>
          <target state="new">Powershell Cmdlet</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Graceful/UnGraceful Faults</source>
          <target state="new">Graceful/UnGraceful Faults</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CleanTestState</source>
          <target state="new">CleanTestState</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Removes all the test state from the cluster in case of a bad shutdown of the test driver.</source>
          <target state="new">Removes all the test state from the cluster in case of a bad shutdown of the test driver.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CleanTestStateAsync</source>
          <target state="new">CleanTestStateAsync</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remove-ServiceFabricTestState</source>
          <target state="new">Remove-ServiceFabricTestState</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Not Applicable</source>
          <target state="new">Not Applicable</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>InvokeDataLoss</source>
          <target state="new">InvokeDataLoss</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Induces data loss into a service partition.</source>
          <target state="new">Induces data loss into a service partition.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>InvokeDataLossAsync</source>
          <target state="new">InvokeDataLossAsync</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Invoke-ServiceFabricPartitionDataLoss</source>
          <target state="new">Invoke-ServiceFabricPartitionDataLoss</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>InvokeQuorumLoss</source>
          <target state="new">InvokeQuorumLoss</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Puts a given stateful service partition in to quorum loss.</source>
          <target state="new">Puts a given stateful service partition in to quorum loss.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>InvokeQuorumLossAsync</source>
          <target state="new">InvokeQuorumLossAsync</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Invoke-ServiceFabricQuorumLoss</source>
          <target state="new">Invoke-ServiceFabricQuorumLoss</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Move Primary</source>
          <target state="new">Move Primary</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Moves the specified primary replica of stateful service to the specified cluster node.</source>
          <target state="new">Moves the specified primary replica of stateful service to the specified cluster node.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>MovePrimaryAsync</source>
          <target state="new">MovePrimaryAsync</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Move-ServiceFabricPrimaryReplica</source>
          <target state="new">Move-ServiceFabricPrimaryReplica</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Move Secondary</source>
          <target state="new">Move Secondary</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Moves the current secondary replica of a stateful service to a different cluster node.</source>
          <target state="new">Moves the current secondary replica of a stateful service to a different cluster node.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>MoveSecondaryAsync</source>
          <target state="new">MoveSecondaryAsync</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Move-ServiceFabricSecondaryReplica</source>
          <target state="new">Move-ServiceFabricSecondaryReplica</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>RemoveReplica</source>
          <target state="new">RemoveReplica</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Simulates a replica failure by removing a replica from a cluster.</source>
          <target state="new">Simulates a replica failure by removing a replica from a cluster.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This will close the replica and will transition it to role 'None', removing all of its state from the cluster.</source>
          <target state="new">This will close the replica and will transition it to role 'None', removing all of its state from the cluster.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>RemoveReplicaAsync</source>
          <target state="new">RemoveReplicaAsync</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Remove-ServiceFabricReplica</source>
          <target state="new">Remove-ServiceFabricReplica</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>RestartDeployedCodePackage</source>
          <target state="new">RestartDeployedCodePackage</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Simulates a code package process failure by restarting a code package deployed on a node in a cluster.</source>
          <target state="new">Simulates a code package process failure by restarting a code package deployed on a node in a cluster.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This aborts the code package process which will restart all the user service replicas hosted in that process.</source>
          <target state="new">This aborts the code package process which will restart all the user service replicas hosted in that process.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>RestartDeployedCodePackageAsync</source>
          <target state="new">RestartDeployedCodePackageAsync</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Restart-ServiceFabricDeployedCodePackage</source>
          <target state="new">Restart-ServiceFabricDeployedCodePackage</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Ungraceful</source>
          <target state="new">Ungraceful</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>RestartNode</source>
          <target state="new">RestartNode</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Simulates a Service Fabric cluster node failure by restarting a node.</source>
          <target state="new">Simulates a Service Fabric cluster node failure by restarting a node.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>RestartNodeAsync</source>
          <target state="new">RestartNodeAsync</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Restart-ServiceFabricNode</source>
          <target state="new">Restart-ServiceFabricNode</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Ungraceful</source>
          <target state="new">Ungraceful</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>RestartPartition</source>
          <target state="new">RestartPartition</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Simulates a data center blackout or cluster blackout scenario by restarting some or all replicas of a partition.</source>
          <target state="new">Simulates a data center blackout or cluster blackout scenario by restarting some or all replicas of a partition.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>RestartPartitionAsync</source>
          <target state="new">RestartPartitionAsync</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Restart-ServiceFabricPartition</source>
          <target state="new">Restart-ServiceFabricPartition</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>RestartReplica</source>
          <target state="new">RestartReplica</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Simulates a replica failure by restarting a persisted replica in a cluster, closing the replica and then reopening it.</source>
          <target state="new">Simulates a replica failure by restarting a persisted replica in a cluster, closing the replica and then reopening it.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>RestartReplicaAsync</source>
          <target state="new">RestartReplicaAsync</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Restart-ServiceFabricReplica</source>
          <target state="new">Restart-ServiceFabricReplica</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Graceful</source>
          <target state="new">Graceful</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>StartNode</source>
          <target state="new">StartNode</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Starts a node in a cluster which is already stopped.</source>
          <target state="new">Starts a node in a cluster which is already stopped.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>StartNodeAsync</source>
          <target state="new">StartNodeAsync</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Start-ServiceFabricNode</source>
          <target state="new">Start-ServiceFabricNode</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Not Applicable</source>
          <target state="new">Not Applicable</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>StopNode</source>
          <target state="new">StopNode</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Simulates a node failure by stopping a node in a cluster.</source>
          <target state="new">Simulates a node failure by stopping a node in a cluster.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The node will stay down until StartNode is called.</source>
          <target state="new">The node will stay down until StartNode is called.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>StopNodeAsync</source>
          <target state="new">StopNodeAsync</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Stop-ServiceFabricNode</source>
          <target state="new">Stop-ServiceFabricNode</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Ungraceful</source>
          <target state="new">Ungraceful</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ValidateApplication</source>
          <target state="new">ValidateApplication</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Validates the availability and health of all Service Fabric services within an application, usually after inducing some fault into the system.</source>
          <target state="new">Validates the availability and health of all Service Fabric services within an application, usually after inducing some fault into the system.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>ValidateApplicationAsync</source>
          <target state="new">ValidateApplicationAsync</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Test-ServiceFabricApplication</source>
          <target state="new">Test-ServiceFabricApplication</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Not Applicable</source>
          <target state="new">Not Applicable</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>ValidateService</source>
          <target state="new">ValidateService</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Validates the availability and health of a Service Fabric service, usually after inducing some fault into the system.</source>
          <target state="new">Validates the availability and health of a Service Fabric service, usually after inducing some fault into the system.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>ValidateServiceAsync</source>
          <target state="new">ValidateServiceAsync</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Test-ServiceFabricService</source>
          <target state="new">Test-ServiceFabricService</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Not Applicable</source>
          <target state="new">Not Applicable</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Running a testability action with Powershell</source>
          <target state="new">Running a testability action with Powershell</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to run a Testability action with PowerShell.</source>
          <target state="new">This tutorial shows you how to run a Testability action with PowerShell.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You will learn how to run a Testability action against a Local (aka.</source>
          <target state="new">You will learn how to run a Testability action against a Local (aka.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>one-box) cluster or an Azure cluster.</source>
          <target state="new">one-box) cluster or an Azure cluster.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Microsoft.Fabric.Testability.Powershell.dll - the Testability PowerShell module - is installed automatically when you install the Microsoft Service Fabric MSI; and, the module is loaded automatically when you open a PowerShell prompt.</source>
          <target state="new">Microsoft.Fabric.Testability.Powershell.dll - the Testability PowerShell module - is installed automatically when you install the Microsoft Service Fabric MSI; and, the module is loaded automatically when you open a PowerShell prompt.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Tutorial segments:</source>
          <target state="new">Tutorial segments:</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Run an action against a one-box cluster</source>
          <target state="new">Run an action against a one-box cluster</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Run an action against an Azure cluster</source>
          <target state="new">Run an action against an Azure cluster</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Run an action against a one-box cluster</source>
          <target state="new">Run an action against a one-box cluster</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To run a Testability action against a Local Cluster, first you need to connect to the cluster and you should open the PowerShell prompt in administrator mode.</source>
          <target state="new">To run a Testability action against a Local Cluster, first you need to connect to the cluster and you should open the PowerShell prompt in administrator mode.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Let us look at the <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> action.</source>
          <target state="new">Let us look at the <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> action.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Here the action <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> is being run on a node named "Node1" and the completion mode specifies that it should not verify whether the restart action actually succeeded; specifying the completion mode as "Verify" will cause it to verify whether the restart action actually succeeded.</source>
          <target state="new">Here the action <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> is being run on a node named "Node1" and the completion mode specifies that it should not verify whether the restart action actually succeeded; specifying the completion mode as "Verify" will cause it to verify whether the restart action actually succeeded.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Instead of directly specifying the node by its name, you can specify via a partition key and the kind of replica, as follows:</source>
          <target state="new">Instead of directly specifying the node by its name, you can specify via a partition key and the kind of replica, as follows:</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> should be used to restart a Service Fabric node in a cluster.</source>
          <target state="new"><bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> should be used to restart a Service Fabric node in a cluster.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This will kill the Fabric.exe process which will restart all of the system service and user service replicas hosted on that node.</source>
          <target state="new">This will kill the Fabric.exe process which will restart all of the system service and user service replicas hosted on that node.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Using this API to test your service helps uncover bugs along the failover recovery paths.</source>
          <target state="new">Using this API to test your service helps uncover bugs along the failover recovery paths.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It helps simulate node failures in the cluster.</source>
          <target state="new">It helps simulate node failures in the cluster.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following screenshot shows the <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> Testability command in action.</source>
          <target state="new">The following screenshot shows the <bpt id="p1">**</bpt>Restart-ServiceFabricNode<ept id="p1">**</ept> Testability command in action.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The output of the first <bpt id="p1">*</bpt>Get-ServiceFabricNode<ept id="p1">*</ept> (a cmdlet from the ServiceFabric PowerShell module) shows that the local cluster has five nodes: Node.1 to Node.5; then after executing the Testability action (cmdlet) <bpt id="p2">**</bpt>Restart-ServiceFabricNode<ept id="p2">**</ept> on the node, named Node.4, we see that the node's uptime has been reset.</source>
          <target state="new">The output of the first <bpt id="p1">*</bpt>Get-ServiceFabricNode<ept id="p1">*</ept> (a cmdlet from the ServiceFabric PowerShell module) shows that the local cluster has five nodes: Node.1 to Node.5; then after executing the Testability action (cmdlet) <bpt id="p2">**</bpt>Restart-ServiceFabricNode<ept id="p2">**</ept> on the node, named Node.4, we see that the node's uptime has been reset.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Run an action against an Azure cluster</source>
          <target state="new">Run an action against an Azure cluster</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Running a Testability action (with PowerShell) against an Azure Cluster is similar to running the action against a local cluster; only difference being: before you can run the action, instead of connecting to the local cluster, you need to connect to the Azure Cluster first.</source>
          <target state="new">Running a Testability action (with PowerShell) against an Azure Cluster is similar to running the action against a local cluster; only difference being: before you can run the action, instead of connecting to the local cluster, you need to connect to the Azure Cluster first.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Running a Testability action with C</source>
          <target state="new">Running a Testability action with C</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To run a Testability action using C#, first you need to connect to the cluster using the FabricClient.</source>
          <target state="new">To run a Testability action using C#, first you need to connect to the cluster using the FabricClient.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Then obtain the parameters needed to run the action.</source>
          <target state="new">Then obtain the parameters needed to run the action.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Different parameters can be used to run the same action.</source>
          <target state="new">Different parameters can be used to run the same action.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Looking at the RestartServiceFabricNode action, one way to run it is by using the node information (Node Name and Node Instance ID) in the cluster.</source>
          <target state="new">Looking at the RestartServiceFabricNode action, one way to run it is by using the node information (Node Name and Node Instance ID) in the cluster.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Several parameter explanation:</source>
          <target state="new">Several parameter explanation:</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CompleteMode<ept id="p1">**</ept> - completion mode specifies that it should not verify whether the restart action actually succeeded; specifying the completion mode as "Verify" will cause it to verify whether the restart action actually succeeded.</source>
          <target state="new"><bpt id="p1">**</bpt>CompleteMode<ept id="p1">**</ept> - completion mode specifies that it should not verify whether the restart action actually succeeded; specifying the completion mode as "Verify" will cause it to verify whether the restart action actually succeeded.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OperationTimeout<ept id="p1">**</ept> - sets the amount of time for the operation to finish before a TimeoutException exception is thrown.</source>
          <target state="new"><bpt id="p1">**</bpt>OperationTimeout<ept id="p1">**</ept> - sets the amount of time for the operation to finish before a TimeoutException exception is thrown.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CancellationToken<ept id="p1">**</ept> - enables a pending call to be canceled.</source>
          <target state="new"><bpt id="p1">**</bpt>CancellationToken<ept id="p1">**</ept> - enables a pending call to be canceled.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Instead of directly specifying the node by its name, you can specify via a partition key and the kind of replica.</source>
          <target state="new">Instead of directly specifying the node by its name, you can specify via a partition key and the kind of replica.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For further information see <bpt id="p1">[</bpt>Partition Selector and Replica Selector<ept id="p1">](#partition_replica_selector)</ept>.</source>
          <target state="new">For further information see <bpt id="p1">[</bpt>Partition Selector and Replica Selector<ept id="p1">](#partition_replica_selector)</ept>.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Partition Selector and Replica Selector</source>
          <target state="new">Partition Selector and Replica Selector</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Partition Selector</source>
          <target state="new">Partition Selector</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>PartitionSelector is a helper exposed in Testability and is used to select a specific partition on which to perform any of the Testability actions.</source>
          <target state="new">PartitionSelector is a helper exposed in Testability and is used to select a specific partition on which to perform any of the Testability actions.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>It can be used to select a specific partition if the partition ID is known beforehand.</source>
          <target state="new">It can be used to select a specific partition if the partition ID is known beforehand.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Or, you can provide the partition key and the operation will resolve the partition ID internally.</source>
          <target state="new">Or, you can provide the partition key and the operation will resolve the partition ID internally.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You also have the option of selecting a random partition.</source>
          <target state="new">You also have the option of selecting a random partition.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To use, create the PartitionSelector object and select the partition using one of the Select* methods and then pass in the PartitionSelector object to the API that requires it.</source>
          <target state="new">To use, create the PartitionSelector object and select the partition using one of the Select* methods and then pass in the PartitionSelector object to the API that requires it.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If no option is selected it defaults to random partition.</source>
          <target state="new">If no option is selected it defaults to random partition.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Replica Selector</source>
          <target state="new">Replica Selector</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>ReplicaSelector is a helper exposed in Testability and is used to help select a replica on which to perform any of the Testability actions.</source>
          <target state="new">ReplicaSelector is a helper exposed in Testability and is used to help select a replica on which to perform any of the Testability actions.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It can be used to select a specific replica if the replica id is known beforehand.</source>
          <target state="new">It can be used to select a specific replica if the replica id is known beforehand.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In addition, you have the option of selecting a primary replica or a random secondary as well.</source>
          <target state="new">In addition, you have the option of selecting a primary replica or a random secondary as well.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>ReplicaSelector derives from PartitionSelector, so you need to select both the replica and the partition on which you wish to perform the Testability operation.</source>
          <target state="new">ReplicaSelector derives from PartitionSelector, so you need to select both the replica and the partition on which you wish to perform the Testability operation.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To use, create a ReplicaSelector object and set the way you want to select the replica and the partition.</source>
          <target state="new">To use, create a ReplicaSelector object and set the way you want to select the replica and the partition.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can then pass it into the API that requires it.</source>
          <target state="new">You can then pass it into the API that requires it.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If no option is selected it defaults to random replica and random partition.</source>
          <target state="new">If no option is selected it defaults to random replica and random partition.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Guid partitionIdGuid = new Guid("8fb7ebcc-56ee-4862-9cc0-7c6421e68829");</source>
          <target state="new">Guid partitionIdGuid = new Guid("8fb7ebcc-56ee-4862-9cc0-7c6421e68829");</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>PartitionSelector partitionSelector = PartitionSelector.PartitionIdOf(serviceName, partitionIdGuid);</source>
          <target state="new">PartitionSelector partitionSelector = PartitionSelector.PartitionIdOf(serviceName, partitionIdGuid);</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>long replicaId = 130559876481875498;</source>
          <target state="new">long replicaId = 130559876481875498;</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Testability Scenarios</source>
          <target state="new">Testability Scenarios</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>How to test your service</source>
          <target state="new">How to test your service</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Simulate failures during service workloads</source>
          <target state="new">Simulate failures during service workloads</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Service to service communication failures</source>
          <target state="new">Service to service communication failures</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b18ccfc8d46bbb5508dd502449869c755a9a214</xliffext:olfilehash>
  </header>
</xliff>