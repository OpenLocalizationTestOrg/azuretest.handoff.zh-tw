{
  "nodes": [
    {
      "content": "Create ContentKeys with .NET",
      "pos": [
        28,
        56
      ]
    },
    {
      "content": "Learn how to create content keys that provide secure access to Assets.",
      "pos": [
        76,
        146
      ]
    },
    {
      "content": "Create ContentKeys with .NET",
      "pos": [
        459,
        487
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        491,
        507
      ]
    },
    {
      "content": "REST",
      "pos": [
        511,
        515
      ]
    },
    {
      "content": ".NET",
      "pos": [
        562,
        566
      ]
    },
    {
      "content": "Media Services enables you to create and deliver encrypted assets.",
      "pos": [
        613,
        679
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>ContentKey<ept id=\"p1\">**</ept> provides secure access to your <bpt id=\"p2\">**</bpt>Asset<ept id=\"p2\">**</ept>s.",
      "pos": [
        680,
        739
      ]
    },
    {
      "pos": [
        742,
        989
      ],
      "content": "When you create a new asset (for example, before you <bpt id=\"p1\">[</bpt>upload files<ept id=\"p1\">](media-services-dotnet-upload-files.md)</ept>), you can specify the following encryption options: <bpt id=\"p2\">**</bpt>StorageEncrypted<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>CommonEncryptionProtected<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>EnvelopeEncryptionProtected<ept id=\"p4\">**</ept>."
    },
    {
      "pos": [
        992,
        1254
      ],
      "content": "When you deliver assets to your clients, you can <bpt id=\"p1\">[</bpt>configure for assets to be dynamically encrypted<ept id=\"p1\">](media-services-dotnet-configure-asset-delivery-policy.md)</ept> with one of the following two encryptions: <bpt id=\"p2\">**</bpt>DynamicEnvelopeEncryption<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>DynamicCommonEncryption<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Encrypted assets have to be associated with <bpt id=\"p1\">**</bpt>ContentKey<ept id=\"p1\">**</ept>s.",
      "pos": [
        1256,
        1316
      ]
    },
    {
      "content": "This article describes how to create a content key.",
      "pos": [
        1317,
        1368
      ]
    },
    {
      "pos": [
        1371,
        1537
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When creating a new <bpt id=\"p1\">**</bpt>StorageEncrypted<ept id=\"p1\">**</ept> asset using the Media Services .NET SDK , the <bpt id=\"p2\">**</bpt>ContentKey<ept id=\"p2\">**</ept> is automatically created and linked with the asset."
    },
    {
      "content": "ContentKeyType",
      "pos": [
        1541,
        1555
      ]
    },
    {
      "content": "One of the values that you must set when create a content key is the content key type.",
      "pos": [
        1557,
        1643
      ]
    },
    {
      "content": "Choose from one of the following values.",
      "pos": [
        1644,
        1684
      ]
    },
    {
      "pos": [
        2354,
        2417
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"envelope_contentkey\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create envelope type ContentKey"
    },
    {
      "content": "The following code snippet creates a content key of the envelope encryption type.",
      "pos": [
        2419,
        2500
      ]
    },
    {
      "content": "It then associates the key with the specified asset.",
      "pos": [
        2501,
        2553
      ]
    },
    {
      "content": "call",
      "pos": [
        3364,
        3368
      ]
    },
    {
      "pos": [
        3442,
        3501
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"common_contentkey\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create common type ContentKey"
    },
    {
      "content": "The following code snippet creates a content key of the common encryption type.",
      "pos": [
        3507,
        3586
      ]
    },
    {
      "content": "It then associates the key with the specified asset.",
      "pos": [
        3587,
        3639
      ]
    },
    {
      "content": "call",
      "pos": [
        4510,
        4514
      ]
    },
    {
      "content": "test",
      "pos": [
        4582,
        4586
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Create ContentKeys with .NET\" \n    description=\"Learn how to create content keys that provide secure access to Assets.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\" \n    ms.author=\"juliako\"/>\n\n\n#Create ContentKeys with .NET\n\n> [AZURE.SELECTOR]\n- [REST](media-services-rest-create-contentkey.md)\n- [.NET](media-services-dotnet-create-contentkey.md)\n\nMedia Services enables you to create and deliver encrypted assets. A **ContentKey** provides secure access to your **Asset**s. \n\nWhen you create a new asset (for example, before you [upload files](media-services-dotnet-upload-files.md)), you can specify the following encryption options: **StorageEncrypted**, **CommonEncryptionProtected**, or **EnvelopeEncryptionProtected**. \n\nWhen you deliver assets to your clients, you can [configure for assets to be dynamically encrypted](media-services-dotnet-configure-asset-delivery-policy.md) with one of the following two encryptions: **DynamicEnvelopeEncryption** or **DynamicCommonEncryption**.\n\nEncrypted assets have to be associated with **ContentKey**s. This article describes how to create a content key.\n\n>[AZURE.NOTE] When creating a new **StorageEncrypted** asset using the Media Services .NET SDK , the **ContentKey** is automatically created and linked with the asset.\n\n##ContentKeyType\n\nOne of the values that you must set when create a content key is the content key type. Choose from one of the following values. \n\n    /// <summary>\n    /// Specifies the type of a content key.\n    /// </summary>\n    public enum ContentKeyType\n    {\n        /// <summary>\n        /// Specifies a content key for common encryption.\n        /// </summary>\n        /// <remarks>This is the default value.</remarks>\n        CommonEncryption = 0,\n\n        /// <summary>\n        /// Specifies a content key for storage encryption.\n        /// </summary>\n        StorageEncryption = 1,\n\n        /// <summary>\n        /// Specifies a content key for encrypting encoding configuration data that may contain sensitive preset information. \n        /// </summary>\n        ConfigurationEncryption = 2,\n    }\n\n##<a id=\"envelope_contentkey\"></a>Create envelope type ContentKey\n\nThe following code snippet creates a content key of the envelope encryption type. It then associates the key with the specified asset.\n\n    static public IContentKey CreateEnvelopeTypeContentKey(IAsset asset)\n    {\n        // Create envelope encryption content key\n        Guid keyId = Guid.NewGuid();\n        byte[] contentKey = GetRandomBuffer(16);\n\n        IContentKey key = _context.ContentKeys.Create(\n                                keyId,\n                                contentKey,\n                                \"ContentKey\",\n                                ContentKeyType.EnvelopeEncryption);\n\n        asset.ContentKeys.Add(key);\n\n        return key;\n    }\n\n    static private byte[] GetRandomBuffer(int size)\n    {\n        byte[] randomBytes = new byte[size];\n        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\n        {\n            rng.GetBytes(randomBytes);\n        }\n\n        return randomBytes;\n    }\n\ncall\n\n    IContentKey key = CreateEnvelopeTypeContentKey(encryptedsset);\n\n\n\n##<a id=\"common_contentkey\"></a>Create common type ContentKey    \n\nThe following code snippet creates a content key of the common encryption type. It then associates the key with the specified asset.\n\n    static public IContentKey CreateCommonTypeContentKey(IAsset asset)\n    {\n        // Create common encryption content key\n        Guid keyId = Guid.NewGuid();\n        byte[] contentKey = GetRandomBuffer(16);\n\n        IContentKey key = _context.ContentKeys.Create(\n                                keyId,\n                                contentKey,\n                                \"ContentKey\",\n                                ContentKeyType.CommonEncryption);\n\n        // Associate the key with the asset.\n        asset.ContentKeys.Add(key);\n\n        return key;\n    }\n\n    static private byte[] GetRandomBuffer(int length)\n    {\n        var returnValue = new byte[length];\n\n        using (var rng =\n            new System.Security.Cryptography.RNGCryptoServiceProvider())\n        {\n            rng.GetBytes(returnValue);\n        }\n\n        return returnValue;\n    }\ncall\n\n    IContentKey key = CreateCommonTypeContentKey(encryptedsset); \ntest\n"
}