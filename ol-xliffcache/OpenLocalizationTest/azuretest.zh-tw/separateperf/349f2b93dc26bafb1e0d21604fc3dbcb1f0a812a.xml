{
  "nodes": [
    {
      "content": "Connect to SQL Database by using Ruby with TinyTDS on Mac OS X (Yosemite)",
      "pos": [
        28,
        101
      ]
    },
    {
      "content": "Give a Ruby code sample you can run on Mac OS X (Yosemite) to connect to Azure SQL Database.",
      "pos": [
        121,
        213
      ]
    },
    {
      "content": "Connect to SQL Database by using Ruby on Mac OS X (Yosemite)",
      "pos": [
        532,
        592
      ]
    },
    {
      "content": "This topic presents a Ruby code sample that runs on Mac computer running Yosemite to connect to an Azure SQL Database database.",
      "pos": [
        758,
        885
      ]
    },
    {
      "content": "Install the required modules",
      "pos": [
        890,
        918
      ]
    },
    {
      "content": "Open your terminal and install the following:",
      "pos": [
        920,
        965
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>1) Homebrew<ept id=\"p1\">**</ept>: Run the following command from your terminal.",
      "pos": [
        967,
        1029
      ]
    },
    {
      "content": "This will download the Homebrew package manager on your machine.",
      "pos": [
        1030,
        1094
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>2) FreeTDS:<ept id=\"p1\">**</ept> Run the following command from your terminal.",
      "pos": [
        1192,
        1253
      ]
    },
    {
      "content": "This will install FreeTDS on your machine and is required for TinyTDS to work.",
      "pos": [
        1254,
        1332
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>3) TinyTDS:<ept id=\"p1\">**</ept> Run the following command from your terminal.",
      "pos": [
        1360,
        1421
      ]
    },
    {
      "content": "This will install TinyTDS on your machine.",
      "pos": [
        1422,
        1464
      ]
    },
    {
      "content": "Create a database, retrieve your connection string",
      "pos": [
        1526,
        1576
      ]
    },
    {
      "content": "The Ruby sample relies on the AdventureWorks sample database.",
      "pos": [
        1578,
        1639
      ]
    },
    {
      "content": "If you do not already have AdventureWorks, you can see how to create it at the following topic: <bpt id=\"p1\">[</bpt>Create your first Azure SQL Database<ept id=\"p1\">](sql-database-get-started.md)</ept>",
      "pos": [
        1640,
        1803
      ]
    },
    {
      "content": "The topic also explains how to retrieve the database connection string.",
      "pos": [
        1805,
        1876
      ]
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        1881,
        1909
      ]
    },
    {
      "pos": [
        1911,
        2022
      ],
      "content": "The <bpt id=\"p1\">[</bpt>TinyTDS::Client<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> function is used to connect to SQL Database."
    },
    {
      "content": "Execute a SELECT statement and retrieve the result set",
      "pos": [
        2251,
        2305
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>TinyTds::Result<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> function is used to retrieve a result set from a query against SQL Database.",
      "pos": [
        2307,
        2450
      ]
    },
    {
      "content": "This function accepts a query and returns a result set.",
      "pos": [
        2451,
        2506
      ]
    },
    {
      "content": "The results set is iterated over by using <bpt id=\"p1\">[</bpt>result.each do |row|<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept>.",
      "pos": [
        2507,
        2617
      ]
    },
    {
      "content": "Inserting a row, passing parameters, and retrieving the generated primary key value",
      "pos": [
        2982,
        3065
      ]
    },
    {
      "content": "The code sample:",
      "pos": [
        3067,
        3083
      ]
    },
    {
      "content": "Passes parameters for values to be inserted in a row.",
      "pos": [
        3087,
        3140
      ]
    },
    {
      "content": "Inserts the row.",
      "pos": [
        3143,
        3159
      ]
    },
    {
      "content": "Retrieves the value that was generated for the primary key.",
      "pos": [
        3162,
        3221
      ]
    },
    {
      "pos": [
        3223,
        3487
      ],
      "content": "In SQL Database, the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](http://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENCE<ept id=\"p2\">](http://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key values<ept id=\"p3\">](http://msdn.microsoft.com/library/ms179610.aspx)</ept>."
    },
    {
      "content": "To use TinyTDS with Azure, it is recommended that you execute several <ph id=\"ph1\">`SET`</ph> statements to change how the current session handles specific information.",
      "pos": [
        3490,
        3640
      ]
    },
    {
      "content": "Recommended <ph id=\"ph1\">`SET`</ph> statements are provided in the code sample.",
      "pos": [
        3641,
        3702
      ]
    },
    {
      "content": "For example, <ph id=\"ph1\">`SET ANSI_NULL_DFLT_ON`</ph> will allow new columns created to allow null values even if the nullability status of the column is not explicitly stated.",
      "pos": [
        3703,
        3862
      ]
    },
    {
      "pos": [
        3864,
        4104
      ],
      "content": "To align with the Microsoft SQL Server <bpt id=\"p1\">[</bpt>datetime<ept id=\"p1\">](http://msdn.microsoft.com/library/ms187819.aspx)</ept> format, use the <bpt id=\"p2\">[</bpt>strftime<ept id=\"p2\">](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime)</ept> function to cast to the corresponding datetime format."
    }
  ],
  "content": "<properties \n    pageTitle=\"Connect to SQL Database by using Ruby with TinyTDS on Mac OS X (Yosemite)\" \n    description=\"Give a Ruby code sample you can run on Mac OS X (Yosemite) to connect to Azure SQL Database.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"ajlam\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"sql-database\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"ruby\" \n    ms.topic=\"article\" \n    ms.date=\"07/20/2015\" \n    ms.author=\"andrela\"/>\n\n\n# Connect to SQL Database by using Ruby on Mac OS X (Yosemite)\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\nThis topic presents a Ruby code sample that runs on Mac computer running Yosemite to connect to an Azure SQL Database database.\n\n## Install the required modules\n\nOpen your terminal and install the following:\n\n**1) Homebrew**: Run the following command from your terminal. This will download the Homebrew package manager on your machine. \n\n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n**2) FreeTDS:** Run the following command from your terminal. This will install FreeTDS on your machine and is required for TinyTDS to work.\n\n    brew install FreeTDS\n\n**3) TinyTDS:** Run the following command from your terminal. This will install TinyTDS on your machine. \n\n    sudo ARCHFLAGS=\"-arch x86_64\" gem install tiny_tds\n\n## Create a database, retrieve your connection string\n\nThe Ruby sample relies on the AdventureWorks sample database. If you do not already have AdventureWorks, you can see how to create it at the following topic: [Create your first Azure SQL Database](sql-database-get-started.md)\n\nThe topic also explains how to retrieve the database connection string.\n\n## Connect to your SQL Database\n\nThe [TinyTDS::Client](https://github.com/rails-sqlserver/tiny_tds) function is used to connect to SQL Database.\n\n    require 'tiny_tds' \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n\n## Execute a SELECT statement and retrieve the result set\n\nThe [TinyTds::Result](https://github.com/rails-sqlserver/tiny_tds) function is used to retrieve a result set from a query against SQL Database. This function accepts a query and returns a result set. The results set is iterated over by using [result.each do |row|](https://github.com/rails-sqlserver/tiny_tds).\n\n    require 'tiny_tds'  \n    print 'test'     \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n    results = client.execute(\"select * from SalesLT.Product\") \n    results.each do |row| \n    puts row \n    end \n\n## Inserting a row, passing parameters, and retrieving the generated primary key value\n\nThe code sample:\n\n- Passes parameters for values to be inserted in a row.\n- Inserts the row.\n- Retrieves the value that was generated for the primary key.\n\nIn SQL Database, the [IDENTITY](http://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENCE](http://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key values](http://msdn.microsoft.com/library/ms179610.aspx). \n\nTo use TinyTDS with Azure, it is recommended that you execute several `SET` statements to change how the current session handles specific information. Recommended `SET` statements are provided in the code sample. For example, `SET ANSI_NULL_DFLT_ON` will allow new columns created to allow null values even if the nullability status of the column is not explicitly stated.\n\nTo align with the Microsoft SQL Server [datetime](http://msdn.microsoft.com/library/ms187819.aspx) format, use the [strftime](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime) function to cast to the corresponding datetime format. \n\n    require 'tiny_tds' \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword', \n    host: 'yourserver.database.windows.net', port: 1433, \n    database: 'AdventureWorks', azure:true \n    results = client.execute(\"SET ANSI_NULLS ON\")\n    results = client.execute(\"SET CURSOR_CLOSE_ON_COMMIT OFF\")\n    results = client.execute(\"SET ANSI_NULL_DFLT_ON ON\")\n    results = client.execute(\"SET IMPLICIT_TRANSACTIONS OFF\")\n    results = client.execute(\"SET ANSI_PADDING ON\")\n    results = client.execute(\"SET QUOTED_IDENTIFIER ON\")\n    results = client.execute(\"SET ANSI_WARNINGS ON\")\n    results = client.execute(\"SET CONCAT_NULL_YIELDS_NULL ON\")\n    require 'date'\n    t = Time.now\n    curr_date = t.strftime(\"%Y-%m-%d %H:%M:%S.%L\") \n    results = client.execute(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) \n    OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New', 'SQLEXPRESS New', 0, 0, '#{curr_date}' )\")\n    results.each do |row| \n    puts row\n    end\n"
}