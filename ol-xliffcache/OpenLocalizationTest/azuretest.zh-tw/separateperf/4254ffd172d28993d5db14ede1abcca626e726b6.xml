{
  "nodes": [
    {
      "content": "Contextual examples of best practices for implementing templates",
      "pos": [
        27,
        91
      ]
    },
    {
      "content": "Shows examples of Azure Resource Manager templates that illustrate best practices.",
      "pos": [
        110,
        192
      ]
    },
    {
      "content": "Contextual examples of best practices for implementing templates",
      "pos": [
        521,
        585
      ]
    },
    {
      "content": "This topic provides 7 contextual examples of how to implement your Azure Resoure Manager templates.",
      "pos": [
        587,
        686
      ]
    },
    {
      "content": "For an overview of the principles",
      "pos": [
        687,
        720
      ]
    },
    {
      "content": "illustrated in these examples, see <bpt id=\"p1\">[</bpt>Best practices for designing Azure Resource Manager templates<ept id=\"p1\">](best-practices-resource-manager-design-templates.md)</ept>.",
      "pos": [
        722,
        874
      ]
    },
    {
      "content": "This topic is part of a larger whitepaper.",
      "pos": [
        876,
        918
      ]
    },
    {
      "content": "To read the full paper, download [World Class ARM Templates Considerations and Proven Practices](http://download.microsoft.com/download/8/E/1/8E1DBEFA-CECE-4DC9-A813-93520A5D7CFE/World Class ARM Templates - Considerations and Proven Practices.pdf).",
      "pos": [
        919,
        1167
      ]
    },
    {
      "content": "Moving a capability-scoped template into an end-to-end solution-scoped template",
      "pos": [
        1172,
        1251
      ]
    },
    {
      "content": "The pattern for developing a capability scoped template was shared earlier.",
      "pos": [
        1253,
        1328
      ]
    },
    {
      "content": "One question that you may ask yourself is if there are different considerations",
      "pos": [
        1330,
        1409
      ]
    },
    {
      "content": "when using this capability scoped template by itself or as part of an end to end scoped solution template.",
      "pos": [
        1411,
        1517
      ]
    },
    {
      "content": "For example, if there was a technology focused template that deployed SQL Server as a capability, what would be the considerations, if any, from using that",
      "pos": [
        1521,
        1676
      ]
    },
    {
      "content": "independently or as part of a broader end to end solution scoped template that may use that SQL Server to support a web application.",
      "pos": [
        1678,
        1810
      ]
    },
    {
      "content": "When looking at this scenario, it’s relevant to look at the number of resources likely involved.",
      "pos": [
        1812,
        1908
      ]
    },
    {
      "content": "For a robust implementation, your capability scoped template won’t",
      "pos": [
        1909,
        1975
      ]
    },
    {
      "content": "just be a storage account and a single VM with one installation of SQL Server.",
      "pos": [
        1977,
        2055
      ]
    },
    {
      "content": "A robust capability scoped template will deploy multiple VMs with SQL Server deployed",
      "pos": [
        2056,
        2141
      ]
    },
    {
      "content": "for high availability.",
      "pos": [
        2143,
        2165
      ]
    },
    {
      "content": "For some capabilities, such as Analysis Services, your topology will also have likely have Active Directory deployed with it as well.",
      "pos": [
        2166,
        2299
      ]
    },
    {
      "content": "Two key considerations for this scenario include the lifecycle of how SQL Server will be used and the RBAC that you wish to apply to it.",
      "pos": [
        2301,
        2437
      ]
    },
    {
      "content": "Specifically, will",
      "pos": [
        2439,
        2457
      ]
    },
    {
      "content": "the SQL Server be updated and deleted with the rest of the solution or will it’s lifecycle vary from the solution or other parts of the solution.",
      "pos": [
        2459,
        2604
      ]
    },
    {
      "content": "If the",
      "pos": [
        2606,
        2612
      ]
    },
    {
      "content": "lifecycle will vary, you will want to consider placing it in another resource group.",
      "pos": [
        2614,
        2698
      ]
    },
    {
      "content": "Another consideration is how you would like to apply RBAC to your SQL Server capability scoped solution template.",
      "pos": [
        2702,
        2815
      ]
    },
    {
      "content": "Based on how you want to apply RBAC within",
      "pos": [
        2817,
        2859
      ]
    },
    {
      "content": "your topology, you may opt for different resource groups based to align with those specifics.",
      "pos": [
        2861,
        2954
      ]
    },
    {
      "content": "You can apply RBAC at the Resource Level, but given the number of",
      "pos": [
        2956,
        3021
      ]
    },
    {
      "content": "resources for the SQL Server capability scoped solution template, a distinct resource group with RBAC applied to it should be a consideration.",
      "pos": [
        3023,
        3165
      ]
    },
    {
      "content": "Another consideration is an evaluation of the SQL Server capability scoped solution template to identify if it currently creates certain resources itself vs.",
      "pos": [
        3167,
        3324
      ]
    },
    {
      "content": "allowing you to “Bring Your Own Resources.”",
      "pos": [
        3326,
        3369
      ]
    },
    {
      "content": "In a “Bring Your Own Resources” (BYOR) model, the capability scoped solution template would allow your template to",
      "pos": [
        3371,
        3485
      ]
    },
    {
      "content": "re-use previously existing resources, with the typical examples being a storage account, virtual network or an availability set.",
      "pos": [
        3487,
        3615
      ]
    },
    {
      "content": "If a BYOR approach doesn’t exist",
      "pos": [
        3616,
        3648
      ]
    },
    {
      "content": "in your capability scoped template, you can alter it using the approach defined earlier in this document for optional resource templates.",
      "pos": [
        3650,
        3787
      ]
    },
    {
      "content": "In this case, your",
      "pos": [
        3789,
        3807
      ]
    },
    {
      "content": "end-to-end solution scoped template would have a shared resource template with these common resources, and the capability scoped template would be extended to",
      "pos": [
        3809,
        3967
      ]
    },
    {
      "content": "support these resources as optional.",
      "pos": [
        3969,
        4005
      ]
    },
    {
      "content": "This creates a better capability scoped solution template as it now can be used independently or part of a composition.",
      "pos": [
        4007,
        4126
      ]
    },
    {
      "content": "When assessing whether the storage account should be passed in from the end to end solution scoped template, RBAC should also be re-evaluated.",
      "pos": [
        4128,
        4270
      ]
    },
    {
      "content": "Specifically,",
      "pos": [
        4271,
        4284
      ]
    },
    {
      "content": "do you need to ensure that RBAC be applied to this specific resource?",
      "pos": [
        4286,
        4355
      ]
    },
    {
      "content": "If so, if the resource is expected to have this applied when it is passed in, a level of",
      "pos": [
        4357,
        4445
      ]
    },
    {
      "content": "trust is being placed not just in the Solution Block but any user who wishes to optionally provide this to the capability scoped template when used",
      "pos": [
        4447,
        4594
      ]
    },
    {
      "content": "independently.",
      "pos": [
        4596,
        4610
      ]
    },
    {
      "content": "If RBAC is critical, then you should consider on whether to make this an optional template within the capability scoped solution template",
      "pos": [
        4612,
        4749
      ]
    },
    {
      "content": "or to require it’s creation with the required RBAC from within the capability scoped solution template.",
      "pos": [
        4751,
        4854
      ]
    },
    {
      "content": "If a decision is made to place these in different resource groups, you can also use Resource Links to define the relationships between the resources – even",
      "pos": [
        4856,
        5011
      ]
    },
    {
      "content": "when the resources span resource groups.",
      "pos": [
        5013,
        5053
      ]
    },
    {
      "content": "Creating an end-to-end solution-scoped template with multiple capability-scoped templates",
      "pos": [
        5058,
        5147
      ]
    },
    {
      "content": "This is largely a a superset of the previous example.",
      "pos": [
        5149,
        5202
      ]
    },
    {
      "content": "In this scenario, an organization has multiple capability scoped solution templates for a set of",
      "pos": [
        5203,
        5299
      ]
    },
    {
      "content": "data technologies such as Kafka, Apache Hadoop, Apache Spark, and Apache Storm that they wish to pull together in a single solution block.",
      "pos": [
        5301,
        5439
      ]
    },
    {
      "content": "The resulting",
      "pos": [
        5441,
        5454
      ]
    },
    {
      "content": "composition will use those capability scoped solution templates as well as a shared storage and virtual network with specific subnet assignments.",
      "pos": [
        5456,
        5601
      ]
    },
    {
      "content": "Outside of the specific capability scoped templates required, additional resources will be necessary for the solution, even if just scripts to",
      "pos": [
        5603,
        5745
      ]
    },
    {
      "content": "stitch the capability scoped templates together and configure them.",
      "pos": [
        5747,
        5814
      ]
    },
    {
      "content": "In this case, it’s identified that there’s a shared virtual network and a shared storage account.",
      "pos": [
        5816,
        5913
      ]
    },
    {
      "content": "To accommodate this, you should add these to a shared",
      "pos": [
        5915,
        5968
      ]
    },
    {
      "content": "resources template in your end to end solution scoped template and ensure that a “Bring Your Own Resource” approach is supported in the capability scoped templates.",
      "pos": [
        5970,
        6134
      ]
    },
    {
      "content": "If it is not, you can modify your capability scoped templates to accommodate this, as described in the previous example.",
      "pos": [
        6136,
        6256
      ]
    },
    {
      "content": "For the additional resources that you will be adding, you will follow a superset of the pattern used for creating an individual capability scoped template.",
      "pos": [
        6258,
        6413
      ]
    },
    {
      "content": "In this case, you will add a Shared Resources Template, Optional Resources Template(s), Member Node template(s), and desired state configuration (scripts,",
      "pos": [
        6415,
        6569
      ]
    },
    {
      "content": "Chef, Puppet, Powershell DSC) for the new resources.",
      "pos": [
        6571,
        6623
      ]
    },
    {
      "content": "Where there are dependencies, you’ll optimize to use implicit references vs. dependsOn where possible",
      "pos": [
        6625,
        6726
      ]
    },
    {
      "content": "to eliminate the potential for stray dependencies which may impact the parallelism (and speed) of your deployment.",
      "pos": [
        6728,
        6842
      ]
    },
    {
      "content": "You’ll also consider the lifecycle of",
      "pos": [
        6843,
        6880
      ]
    },
    {
      "content": "these resources, the RBAC considerations, and dependencies to determine if they should be placed in different resource groups.",
      "pos": [
        6882,
        7008
      ]
    },
    {
      "content": "When adding shared resources, such as the shared storage account, you should also evaluate if a resource lock is required for it, as this can help avoid",
      "pos": [
        7012,
        7164
      ]
    },
    {
      "content": "accidental deletions.",
      "pos": [
        7166,
        7187
      ]
    },
    {
      "content": "When adding new resources, you should also examine if any of the resources being added to the end to end solution scoped template could be isolated out",
      "pos": [
        7189,
        7340
      ]
    },
    {
      "content": "as capability scoped templates themselves.",
      "pos": [
        7342,
        7384
      ]
    },
    {
      "content": "If so, this should be strongly considered as to promote further decomposition which can provide benefits for",
      "pos": [
        7386,
        7494
      ]
    },
    {
      "content": "both re-use and testing.",
      "pos": [
        7496,
        7520
      ]
    },
    {
      "content": "When integrating in your solution blocks, your next considerations are, as identified in the previous example, to identify if the lifecycle for the individual",
      "pos": [
        7522,
        7680
      ]
    },
    {
      "content": "capability scoped solution templates are different from that of the broader solution and if any RBAC requirements would necessitate separating these into",
      "pos": [
        7682,
        7835
      ]
    },
    {
      "content": "separate resource groups.",
      "pos": [
        7837,
        7862
      ]
    },
    {
      "content": "Finally, you will want to consider if you would like to be able to define and query links between the resources.",
      "pos": [
        7864,
        7976
      ]
    },
    {
      "content": "If you do, employing resource links will",
      "pos": [
        7977,
        8017
      ]
    },
    {
      "content": "enable you to do this across your end to end scoped solution template, even when spanning multiple resource groups.",
      "pos": [
        8019,
        8134
      ]
    },
    {
      "content": "Creating an end-to-end solution-scoped template with partial on/off pattern",
      "pos": [
        8139,
        8214
      ]
    },
    {
      "content": "This scenario is a variant of the previous one.",
      "pos": [
        8216,
        8263
      ]
    },
    {
      "content": "In this case, the customer extracts data from an on premise system at fixed intervals over the course of a day.",
      "pos": [
        8265,
        8376
      ]
    },
    {
      "content": "They have a data pipeline to process this incoming data and a relational data store where the data is always available for queries.",
      "pos": [
        8379,
        8510
      ]
    },
    {
      "content": "As the cloud is a",
      "pos": [
        8512,
        8529
      ]
    },
    {
      "content": "pay-as-you-go model, the customer would like to have the data pipeline operational only during those intervals when data is presented for processing.",
      "pos": [
        8531,
        8680
      ]
    },
    {
      "content": "As part of their data pipeline, they have a SQL Server, which receives the processed data and makes it available for querying.",
      "pos": [
        8682,
        8808
      ]
    },
    {
      "content": "The customer has indicated that",
      "pos": [
        8809,
        8840
      ]
    },
    {
      "content": "while they would like to turn the ingestion and processing pieces of the pipeline on and off on a fixed schedule, they would like to always have the SQL Server available.",
      "pos": [
        8842,
        9012
      ]
    },
    {
      "content": "In this scenario, there are what appear to be explicit differences in lifecycle and potentially some additional considerations the customer hasn’t",
      "pos": [
        9014,
        9160
      ]
    },
    {
      "content": "raised but should be evaluated.",
      "pos": [
        9162,
        9193
      ]
    },
    {
      "content": "As described, the SQL Server deployment will be kept alive while other resources will be created and deleted.",
      "pos": [
        9195,
        9304
      ]
    },
    {
      "content": "They will be deployed together initially",
      "pos": [
        9306,
        9346
      ]
    },
    {
      "content": "but then other members of the template will be destroyed and created on a different lifecycle.",
      "pos": [
        9348,
        9442
      ]
    },
    {
      "content": "These can be isolated into different resource groups or be",
      "pos": [
        9444,
        9502
      ]
    },
    {
      "content": "left in the same resource group with resource locking applied to the SQL Server resources.",
      "pos": [
        9504,
        9594
      ]
    },
    {
      "content": "As SQL Server specifically is, as described in the earlier examples,",
      "pos": [
        9596,
        9664
      ]
    },
    {
      "content": "likely represented as a larger set of resources, separating it out into it’s own resource group would be appropriate.",
      "pos": [
        9666,
        9783
      ]
    },
    {
      "content": "The other consideration is that while the customer has said that they want the rest of the data pipeline",
      "pos": [
        9785,
        9889
      ]
    },
    {
      "content": "turned on and off on a schedule, they may not be considering the inconsist behavior of reporting systems.",
      "pos": [
        9890,
        9995
      ]
    },
    {
      "content": "Scheduled delivery of data from third parties is not",
      "pos": [
        9997,
        10049
      ]
    },
    {
      "content": "always precise – connectivity may be unavailable for a period of time, clocks on local or cloud based servers may drift, time changes may or may not occur as",
      "pos": [
        10051,
        10208
      ]
    },
    {
      "content": "expected, etc. It should be evaluated if your ingestion mechanism should be used in an on/off pattern as well, and if so, if the lifecycle for that is greater",
      "pos": [
        10210,
        10368
      ]
    },
    {
      "content": "than that of the processing components.",
      "pos": [
        10370,
        10409
      ]
    },
    {
      "content": "If you’re using a managed service such as Azure Data Factory or Event Hub, this is less of an issue as their operating models and associated billing approach",
      "pos": [
        10411,
        10568
      ]
    },
    {
      "content": "make them readily available to ingest your data and place it in storage.",
      "pos": [
        10570,
        10642
      ]
    },
    {
      "content": "If you’re using another technology, such as Kafka, that you’ve deployed to a virtual",
      "pos": [
        10644,
        10728
      ]
    },
    {
      "content": "machine, you may want to look at the lifecycle for how you make that and the associated storage account(s) required for ingestion available.",
      "pos": [
        10730,
        10870
      ]
    },
    {
      "content": "This may result in",
      "pos": [
        10872,
        10890
      ]
    },
    {
      "content": "the ingestion and processing resources being placed in a different resource groups based on their lifecycle.",
      "pos": [
        10892,
        11000
      ]
    },
    {
      "content": "Supporting distinct environments within a subscription",
      "pos": [
        11005,
        11059
      ]
    },
    {
      "content": "To effectively deliver services, many organizations have a set of scale, billing isolation, accountability isolation and geographic isolation needs that must",
      "pos": [
        11061,
        11218
      ]
    },
    {
      "content": "be met.",
      "pos": [
        11220,
        11227
      ]
    },
    {
      "content": "When designing services for Azure, they would have historically used subscription partitioning in their approach to satisfy these needs.",
      "pos": [
        11229,
        11365
      ]
    },
    {
      "content": "Resource Manager relaxes constraints on the number of resources of a given type that can be deployed within a subscription and also introduces resource groups,",
      "pos": [
        11369,
        11528
      ]
    },
    {
      "content": "RBAC, and auditing.",
      "pos": [
        11530,
        11549
      ]
    },
    {
      "content": "The combination of these can allow organizations to use resource groups for partitioning, allowing them to meet their requirements and",
      "pos": [
        11550,
        11684
      ]
    },
    {
      "content": "reduce the amount, if any, of subscription partitioning they might have to do.",
      "pos": [
        11686,
        11764
      ]
    },
    {
      "content": "This section looks at the requirements seen for these types of environments and provides guidance on how to deliver environments that satisfy them with ARM.",
      "pos": [
        11768,
        11924
      ]
    },
    {
      "content": "Isolation considerations",
      "pos": [
        11932,
        11956
      ]
    },
    {
      "content": "This section explores common customer drivers for environment, billing, and geographic isolation in more detail.",
      "pos": [
        11958,
        12070
      ]
    },
    {
      "content": "Environment isolation",
      "pos": [
        12077,
        12098
      ]
    },
    {
      "content": "Service owners have a desire to isolate their different environments.",
      "pos": [
        12100,
        12169
      ]
    },
    {
      "content": "Having each environment isolated allows teams the ability to have more fine-grained",
      "pos": [
        12171,
        12254
      ]
    },
    {
      "content": "control over who can have access to the environments.",
      "pos": [
        12256,
        12309
      ]
    },
    {
      "content": "While development environments may be more open in terms of who can access them, as the",
      "pos": [
        12310,
        12397
      ]
    },
    {
      "content": "environment scope moves closer to production the number of users – be they human or system accounts used for automation – is reduced to aid in",
      "pos": [
        12399,
        12541
      ]
    },
    {
      "content": "compliance and minimize overall risk.",
      "pos": [
        12543,
        12580
      ]
    },
    {
      "content": "Billing isolation – developing vs. running a service",
      "pos": [
        12587,
        12639
      ]
    },
    {
      "content": "To accurately reflect Cost of Goods Sold (COGS) and Operating Expenses (OpEx), business owners want to be able to break apart the cost of researching",
      "pos": [
        12641,
        12790
      ]
    },
    {
      "content": "and building the service vs. running the services.",
      "pos": [
        12792,
        12842
      ]
    },
    {
      "content": "A superset of environment isolation mentioned previously, the intent would be consolidation of development and test for individual and/or",
      "pos": [
        12846,
        12983
      ]
    },
    {
      "content": "aggregated billing for the former while production would remain independent for the latter.",
      "pos": [
        12985,
        13076
      ]
    },
    {
      "content": "Billing isolation – adding transparency and accountability to service consumption costs",
      "pos": [
        13083,
        13170
      ]
    },
    {
      "content": "Billing isolation is also used to both gain transparency into costs related to platform consumption by specific teams and introducing appropriate",
      "pos": [
        13172,
        13317
      ]
    },
    {
      "content": "levels of accountability.",
      "pos": [
        13319,
        13344
      ]
    },
    {
      "content": "While the cloud is elastic and allows for a pay-as-you-go model, this is less familiar to some developers coming from a non-cloud model where hardware",
      "pos": [
        13346,
        13496
      ]
    },
    {
      "content": "is procured and owned.",
      "pos": [
        13498,
        13520
      ]
    },
    {
      "content": "In the non-cloud model, there were physical limitations in terms of the number of “machines” that could be turned on and there",
      "pos": [
        13521,
        13647
      ]
    },
    {
      "content": "were limited incentives to scale down or turn off resources when not in use.",
      "pos": [
        13649,
        13725
      ]
    },
    {
      "content": "Procurement of this dedicated hardware, in many cases, was not done by the",
      "pos": [
        13727,
        13801
      ]
    },
    {
      "content": "developers that were utilizing it.",
      "pos": [
        13803,
        13837
      ]
    },
    {
      "content": "By isolating subscriptions and assigning accountability for those subscriptions to specific teams, service owners found this type of subscription",
      "pos": [
        13839,
        13984
      ]
    },
    {
      "content": "partitioning beneficial in driving and enforcing desired behaviors.",
      "pos": [
        13986,
        14053
      ]
    },
    {
      "content": "Geography driven isolation – deployments specific to and governed by laws of a specific geography",
      "pos": [
        14060,
        14157
      ]
    },
    {
      "content": "In certain contexts, there will be requirements that services targeted for a specific geography will need to consider how they deploy to address",
      "pos": [
        14159,
        14303
      ]
    },
    {
      "content": "compliance considerations.",
      "pos": [
        14305,
        14331
      ]
    },
    {
      "content": "While a service may be global in nature, deployments that reside within or provide service to certain geographies may be governed by operational",
      "pos": [
        14333,
        14477
      ]
    },
    {
      "content": "staffing requirements.",
      "pos": [
        14479,
        14501
      ]
    },
    {
      "content": "Specifically, having only individuals who are citizens of a specific country or country set and/or pass certain background screening",
      "pos": [
        14502,
        14634
      ]
    },
    {
      "content": "processes operate those services.",
      "pos": [
        14636,
        14669
      ]
    },
    {
      "content": "Geographic isolation also provides benefits in terms of taking advantage of new platform services and capabilities.",
      "pos": [
        14671,
        14786
      ]
    },
    {
      "content": "Some geographies, such as China, may",
      "pos": [
        14787,
        14823
      ]
    },
    {
      "content": "have only a subset of the platform services available and/or have delayed deployment of platform services.",
      "pos": [
        14825,
        14931
      ]
    },
    {
      "content": "Geographic isolation allows teams the ability to evolve their services to take advantage of new or enhanced platform services and capabilities where",
      "pos": [
        14935,
        15083
      ]
    },
    {
      "content": "they are available.",
      "pos": [
        15085,
        15104
      ]
    },
    {
      "content": "Compliance considerations",
      "pos": [
        15110,
        15135
      ]
    },
    {
      "content": "Services can be delivered across multiple geographies and to multiple verticals.",
      "pos": [
        15137,
        15217
      ]
    },
    {
      "content": "These audiences often have sensitive data or processes contained within",
      "pos": [
        15218,
        15289
      ]
    },
    {
      "content": "their applications and there are associated compliance regulations designed to both protect them and audit engagement with them.",
      "pos": [
        15291,
        15419
      ]
    },
    {
      "content": "Separation of roles and duties",
      "pos": [
        15426,
        15456
      ]
    },
    {
      "content": "Separation of roles and duties is a key requirement for internal services to be compliant with internal policies.",
      "pos": [
        15458,
        15571
      ]
    },
    {
      "content": "Many commercial services also require",
      "pos": [
        15572,
        15609
      ]
    },
    {
      "content": "this to remain in compliance with governments and industry regulatory guidelines.",
      "pos": [
        15611,
        15692
      ]
    },
    {
      "content": "Services need to limit access to services and their underlying resources",
      "pos": [
        15694,
        15766
      ]
    },
    {
      "content": "to authorized roles under specific circumstances.",
      "pos": [
        15768,
        15817
      ]
    },
    {
      "content": "Many services have built scaffolding to deliver two capabilities – RBAC and auditing.",
      "pos": [
        15818,
        15903
      ]
    },
    {
      "content": "Role-based access control (RBAC) use cases",
      "pos": [
        15910,
        15952
      ]
    },
    {
      "content": "In compliance scenarios, it is important to constrain access to certain resources.",
      "pos": [
        15954,
        16036
      ]
    },
    {
      "content": "For example, when looking at sensitive data across multiple scenarios where compliance is relevant - health information, financial data,",
      "pos": [
        16040,
        16176
      ]
    },
    {
      "content": "tax records, etc. -  it is important to limit the number of individuals who can access, view, or manipulate the data to just those who require",
      "pos": [
        16178,
        16320
      ]
    },
    {
      "content": "access to do the business of the parent organization.",
      "pos": [
        16322,
        16375
      ]
    },
    {
      "content": "RBAC provides a distinct individual, system, or group with access to specific resources under identified conditions.",
      "pos": [
        16377,
        16493
      ]
    },
    {
      "content": "Auditing",
      "pos": [
        16500,
        16508
      ]
    },
    {
      "content": "In addition to constrained access provided by RBAC, organizations also need to audit resource access and interaction with resources.",
      "pos": [
        16510,
        16642
      ]
    },
    {
      "content": "Implementing with Azure Resource Manager",
      "pos": [
        16648,
        16688
      ]
    },
    {
      "content": "Previously, organizations would have used subscription partitioning to accomplish these goals.",
      "pos": [
        16690,
        16784
      ]
    },
    {
      "content": "While possible, this was not ideal.",
      "pos": [
        16785,
        16820
      ]
    },
    {
      "content": "As the creation of",
      "pos": [
        16822,
        16840
      ]
    },
    {
      "content": "a subscription is effectively a commerce activity, the Service Management API did not expose a mechanism by which to create or delete new subscriptions",
      "pos": [
        16842,
        16993
      ]
    },
    {
      "content": "automatically and subscriptions needed to be created manually.",
      "pos": [
        16995,
        17057
      ]
    },
    {
      "content": "The resulting number of subscriptions could grow significantly – for very large services",
      "pos": [
        17058,
        17146
      ]
    },
    {
      "content": "such as Microsoft’s own commercial services – that number could span into over one thousand subscriptions.",
      "pos": [
        17148,
        17254
      ]
    },
    {
      "content": "This would often result in the creation of",
      "pos": [
        17256,
        17298
      ]
    },
    {
      "content": "custom scaffolding to create and manage subscriptions for an organization.",
      "pos": [
        17300,
        17374
      ]
    },
    {
      "content": "With Resource Manager, deploying multiple environments within a subscription is much more straightforward.",
      "pos": [
        17376,
        17482
      ]
    },
    {
      "content": "It relaxes the previous fixed caps on resources",
      "pos": [
        17484,
        17531
      ]
    },
    {
      "content": "that was in the previous model, which greatly reduces the need to partition due to resource constraints.",
      "pos": [
        17533,
        17637
      ]
    },
    {
      "content": "Environments can be placed in resource groups, which can have specific RBAC applied to them, enabling you to deliver environment isolation.",
      "pos": [
        17639,
        17778
      ]
    },
    {
      "content": "In scenarios",
      "pos": [
        17780,
        17792
      ]
    },
    {
      "content": "where geographic isolation is required, this can also be accomplished utilizing resource groups.",
      "pos": [
        17794,
        17890
      ]
    },
    {
      "content": "As resource groups can span geographies, specific isolation",
      "pos": [
        17891,
        17950
      ]
    },
    {
      "content": "for one or more geographies can be achieved.",
      "pos": [
        17952,
        17996
      ]
    },
    {
      "content": "You can apply tags to resources and resource groups which can be used in billing roll ups and summarized views to provide billing isolation.",
      "pos": [
        17998,
        18138
      ]
    },
    {
      "content": "You can use tags",
      "pos": [
        18140,
        18156
      ]
    },
    {
      "content": "to define the environment type (research, education, development, test, production), accountable organization or individual (“HR”, “Finance”, “John Smith”, “Jane Jones”).",
      "pos": [
        18158,
        18328
      ]
    },
    {
      "content": "The auditing requirement is delivered as part of the underlying Azure Resource Manager’s set of out of the box capabilities and can be viewed in a central location.",
      "pos": [
        18330,
        18494
      ]
    },
    {
      "content": "End customers would have accounts registered in Azure Active Directory that would be used for authentication and for role based access control to the",
      "pos": [
        18496,
        18645
      ]
    },
    {
      "content": "environment and resources.",
      "pos": [
        18647,
        18673
      ]
    },
    {
      "content": "Optimizing for density",
      "pos": [
        18680,
        18702
      ]
    },
    {
      "content": "While the resource limits are relaxed in Azure Resource Manager, there will still be limits.",
      "pos": [
        18704,
        18796
      ]
    },
    {
      "content": "Beyond creating the environments themselves, you should also",
      "pos": [
        18797,
        18857
      ]
    },
    {
      "content": "look at achieving density of environments within subscriptions as well.",
      "pos": [
        18859,
        18930
      ]
    },
    {
      "content": "Delivering an environment is delivering capacity to an indivual or organization and",
      "pos": [
        18932,
        19015
      ]
    },
    {
      "content": "you should evaluate what relevant “t-shirt size(s)” you will want to deliver.",
      "pos": [
        19017,
        19094
      ]
    },
    {
      "content": "Specifically, identify the variants between small, medium, large, and extra",
      "pos": [
        19096,
        19171
      ]
    },
    {
      "content": "larger customers in terms of the resources required.",
      "pos": [
        19173,
        19225
      ]
    },
    {
      "content": "You may choose to use different subscriptions for different t-shirt sizes to achieve greater density.",
      "pos": [
        19229,
        19330
      ]
    },
    {
      "content": "For example, you may be able to accommodate 1000 small",
      "pos": [
        19331,
        19385
      ]
    },
    {
      "content": "t-shirt size environments, 500 medium size deployments, 100 large deployments, and 10 extra-large deployments in a given subscription.",
      "pos": [
        19387,
        19521
      ]
    },
    {
      "content": "As there’s no billed",
      "pos": [
        19523,
        19543
      ]
    },
    {
      "content": "cost to have multiple subscriptions, you may want to isolate the different sizes into different subscriptions to provide maximum density.",
      "pos": [
        19545,
        19682
      ]
    },
    {
      "content": "This can be done",
      "pos": [
        19684,
        19700
      ]
    },
    {
      "content": "while keeping the number of subscriptions relatively modest and easy to manage.",
      "pos": [
        19702,
        19781
      ]
    },
    {
      "content": "One key consideration you should have is identifying if you would be willing to allow a customer to increase or change their t-shirt size and, if so,",
      "pos": [
        19783,
        19932
      ]
    },
    {
      "content": "how you would want to accommodate it.",
      "pos": [
        19934,
        19971
      ]
    },
    {
      "content": "One approach is to allow a customer to acquire additional capacity within their existing resource group.",
      "pos": [
        19975,
        20079
      ]
    },
    {
      "content": "This can be easily accommodated technically,",
      "pos": [
        20081,
        20125
      ]
    },
    {
      "content": "but it has implications on density.",
      "pos": [
        20127,
        20162
      ]
    },
    {
      "content": "Instead of crisply defined sizes for all customers, this introduces a level of variability that adds more overhead",
      "pos": [
        20164,
        20278
      ]
    },
    {
      "content": "for optimizing for density.",
      "pos": [
        20280,
        20307
      ]
    },
    {
      "content": "If every small size environment is a size X, you can easily pre-calculator how many small size environments to place in a",
      "pos": [
        20309,
        20430
      ]
    },
    {
      "content": "subscription for optimal density.",
      "pos": [
        20432,
        20465
      ]
    },
    {
      "content": "When allowing customers to customize the environment, the result is an unpredictable number of variants and quantities",
      "pos": [
        20467,
        20585
      ]
    },
    {
      "content": "of environments that could be X, X+1, X+2, etc.  With this level of variability, you would achieve less density as you would need to set aside capacity",
      "pos": [
        20587,
        20738
      ]
    },
    {
      "content": "within a subscription to accommodate these variances.",
      "pos": [
        20740,
        20793
      ]
    },
    {
      "content": "While possible, this is less than ideal as a general approach, as it achieves less density and requires more overhead to manage.",
      "pos": [
        20797,
        20925
      ]
    },
    {
      "content": "For larger-sized",
      "pos": [
        20926,
        20942
      ]
    },
    {
      "content": "environments, this may be a more viable option.",
      "pos": [
        20944,
        20991
      ]
    },
    {
      "content": "As fewer of these large and extra large environments would be placed in a subscription, you may choose",
      "pos": [
        20993,
        21095
      ]
    },
    {
      "content": "to place fewer of these in a subscription to accommodate growth.",
      "pos": [
        21097,
        21161
      ]
    },
    {
      "content": "Another approach is that the customers current size environment is deleted and a new environment of a different size is created.",
      "pos": [
        21163,
        21291
      ]
    },
    {
      "content": "While not appropriate for",
      "pos": [
        21293,
        21318
      ]
    },
    {
      "content": "some scenarios, this works well for environments that are used temporarily such as development and test environments.",
      "pos": [
        21320,
        21437
      ]
    },
    {
      "content": "The next easiest approach here is to provide the customer the ability to acquire a larger size environment and then manage the migration to that environment",
      "pos": [
        21439,
        21595
      ]
    },
    {
      "content": "on their own.",
      "pos": [
        21597,
        21610
      ]
    },
    {
      "content": "For example, a customer who had a SQL Server deployment in a small environment could purchase a medium environment and would be individually",
      "pos": [
        21612,
        21752
      ]
    },
    {
      "content": "responsible for the transfer of data and custom state.",
      "pos": [
        21754,
        21808
      ]
    },
    {
      "content": "An alternate approach is to provide a managed service where this transition from one size to another is accommodated.",
      "pos": [
        21810,
        21927
      ]
    },
    {
      "content": "This is obviously more complicated, but",
      "pos": [
        21928,
        21967
      ]
    },
    {
      "content": "based on the workload(s) and customer(s) this may be something your organization would be willing to accommodate.",
      "pos": [
        21969,
        22082
      ]
    },
    {
      "content": "Delivering environments with additional customer policy constraints",
      "pos": [
        22087,
        22154
      ]
    },
    {
      "content": "Some organizations have additional requirements and policies for the environments that they deploy.",
      "pos": [
        22156,
        22255
      ]
    },
    {
      "content": "Specifically, they have policies that constrain the",
      "pos": [
        22256,
        22307
      ]
    },
    {
      "content": "ports exposed externally and may have policies that require monitoring of inbound and outbound traffic to the environment.",
      "pos": [
        22309,
        22431
      ]
    },
    {
      "content": "For supportability and cost considerations, there may also be constraints on what resources an end customer can create, update or delete.",
      "pos": [
        22432,
        22569
      ]
    },
    {
      "content": "For the organization providing the environment, they will also typically require access to the subscription for support.",
      "pos": [
        22570,
        22690
      ]
    },
    {
      "content": "A superset of the previous scenario, this would require the addition of certain resources that would have additional constraints on who could and",
      "pos": [
        22692,
        22837
      ]
    },
    {
      "content": "could not create resources of a given type.",
      "pos": [
        22839,
        22882
      ]
    },
    {
      "content": "The ability for a user to create, update, or delete certain resources can be constrained using role based access control.",
      "pos": [
        22886,
        23007
      ]
    },
    {
      "content": "Examples would include an",
      "pos": [
        23009,
        23034
      ]
    },
    {
      "content": "organization requiring a certain network VNET and potentially subnets which the end customer could not update or delete.",
      "pos": [
        23036,
        23156
      ]
    },
    {
      "content": "Resource locks can be implemented to establish that resources are read only or cannot be deleted.",
      "pos": [
        23158,
        23255
      ]
    },
    {
      "content": "RBAC can be used to allow users or service principals",
      "pos": [
        23256,
        23309
      ]
    },
    {
      "content": "to perform certain activities against a resource or resource group.",
      "pos": [
        23311,
        23378
      ]
    },
    {
      "content": "If the organization requires that certain traffic, e.g. traffic between tiers in the application, first go through an intermediary such as a virtual",
      "pos": [
        23380,
        23528
      ]
    },
    {
      "content": "network appliance, user defined routes should be used.",
      "pos": [
        23530,
        23584
      ]
    },
    {
      "content": "A virtual appliance is nothing more than a VM that runs an application used to handle network traffic in some way, such as a firewall or a NAT device.",
      "pos": [
        23586,
        23736
      ]
    },
    {
      "content": "A number of third parties provide virtual network appliances on Azure, and organizations can also bring their own.",
      "pos": [
        23738,
        23852
      ]
    },
    {
      "content": "A “bring your own” appliance approach allows an organization to re-use existing code that may be used in their on premise environments.",
      "pos": [
        23854,
        23989
      ]
    },
    {
      "content": "This virtual",
      "pos": [
        23990,
        24002
      ]
    },
    {
      "content": "appliance VM must be able to receive incoming traffic that is not addressed to itself.",
      "pos": [
        24004,
        24090
      ]
    },
    {
      "content": "To allow a VM to receive traffic addressed to other destinations,",
      "pos": [
        24091,
        24156
      ]
    },
    {
      "content": "you must enable IP Forwarding in the VM.",
      "pos": [
        24158,
        24198
      ]
    },
    {
      "content": "As with prior examples, resource lifecycle and RBAC constraints should be reviewed and considered as part of your resource group strategy.",
      "pos": [
        24202,
        24340
      ]
    },
    {
      "content": "Securing resources from internal bad actors",
      "pos": [
        24345,
        24388
      ]
    },
    {
      "content": "One concern for an organization may be protecting their resources and the templates that provision them from bad actors.",
      "pos": [
        24390,
        24510
      ]
    },
    {
      "content": "One example of this could be a bank wishing to ensure that a rogue software developer or member of their IT staff don’t make modifications or",
      "pos": [
        24514,
        24655
      ]
    },
    {
      "content": "extract key information that results in data going to a bad actor for criminal purposes.",
      "pos": [
        24657,
        24745
      ]
    },
    {
      "content": "A typical enterprise scenario is to have a small group of Trusted Operators who have access to critical secrets within the deployed workloads,",
      "pos": [
        24747,
        24889
      ]
    },
    {
      "content": "with a broader group of dev/ops personnel who can create or update VM deployments.",
      "pos": [
        24891,
        24973
      ]
    },
    {
      "content": "Azure Key Vault woud be used with ARM to orchestrate and store VM secrets and certificates.",
      "pos": [
        24977,
        25068
      ]
    },
    {
      "content": "A best practice is to maintain separate ARM templates for creation of vaults (which will contain the key material) and deployment of the VMs",
      "pos": [
        25070,
        25210
      ]
    },
    {
      "content": "(with URI references the keys contained in the vaults).",
      "pos": [
        25212,
        25267
      ]
    },
    {
      "content": "Secrets stored in the Key Vault are under full RBAC control of a trusted operator.",
      "pos": [
        25269,
        25351
      ]
    },
    {
      "content": "If the trusted operator leaves the company or transfers within",
      "pos": [
        25353,
        25415
      ]
    },
    {
      "content": "the company to a new group, he or she will no longer have access to the keys they created in the Vault.",
      "pos": [
        25417,
        25520
      ]
    },
    {
      "content": "The ARM templates for deployment only contain URI references to the secrets, which means the actual secrets are not in code, config or source code",
      "pos": [
        25522,
        25668
      ]
    },
    {
      "content": "repositories.",
      "pos": [
        25670,
        25683
      ]
    },
    {
      "content": "This mitigates opportunities for both phishing secrets and limiting the ability for bad actors to make changes.",
      "pos": [
        25684,
        25795
      ]
    },
    {
      "content": "As stated earlier in the document, there are no global Key Vaults.",
      "pos": [
        25797,
        25863
      ]
    },
    {
      "content": "As Key Vaults are always regional, the secrets always have locality (and sovereignty) with the VMs.",
      "pos": [
        25864,
        25963
      ]
    },
    {
      "content": "An example implementation of this approach was provided in the Secrets and Certificates section found earlier in this document.",
      "pos": [
        25965,
        26092
      ]
    },
    {
      "content": "Enabling a \"bring your own subscription\" model",
      "pos": [
        26097,
        26143
      ]
    },
    {
      "content": "Corporate IT, System Integrators, and Cloud Services vendors may employ a \"Bring Your Own Subscription\" model with their customers.",
      "pos": [
        26145,
        26276
      ]
    },
    {
      "content": "Specifically, the",
      "pos": [
        26278,
        26295
      ]
    },
    {
      "content": "organization provides a service to an end customer and utilizes that customer’s Azure subscription in some fashion.",
      "pos": [
        26297,
        26412
      ]
    },
    {
      "content": "There are multiple variants of this approach, each with slightly different requirements, as detailed below.",
      "pos": [
        26414,
        26521
      ]
    },
    {
      "content": "Enabling 3rd party access for monitoring of resources within an account",
      "pos": [
        26527,
        26598
      ]
    },
    {
      "content": "An organization with a monitoring application may require read-only access to a customer’s subscription to retrieve data for use in that application.",
      "pos": [
        26600,
        26749
      ]
    },
    {
      "content": "This would require read-only access for an ongoing period of time.",
      "pos": [
        26751,
        26817
      ]
    },
    {
      "content": "Access would need to be in the customer’s control, providing them the ability to",
      "pos": [
        26819,
        26899
      ]
    },
    {
      "content": "terminate the access if the relationship with the provider of the monitoring service is severed.",
      "pos": [
        26901,
        26997
      ]
    },
    {
      "content": "Implementing with Azure Resource Manager",
      "pos": [
        27004,
        27044
      ]
    },
    {
      "content": "Details on implementing this are provided in significant detail in the “Developers Guide to Auth with the Azure Resource Manager API” which",
      "pos": [
        27046,
        27185
      ]
    },
    {
      "content": "can be found <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://www.dushyantgill.com/blog/2015/05/23/developers-guide-to-auth-with-azure-resource-manager-api/)</ept>.",
      "pos": [
        27187,
        27310
      ]
    },
    {
      "content": "That document provides",
      "pos": [
        27311,
        27333
      ]
    },
    {
      "content": "step-by-step implementation instructions as well as sample code.",
      "pos": [
        27335,
        27399
      ]
    },
    {
      "content": "Enabling 3rd party access for one-time deployment of software",
      "pos": [
        27405,
        27466
      ]
    },
    {
      "content": "In another example, an organization may deploy and configure a version of their software in a customer’s account, requiring write access for the period of",
      "pos": [
        27468,
        27622
      ]
    },
    {
      "content": "time for the deployment.",
      "pos": [
        27624,
        27648
      ]
    },
    {
      "content": "Implementing with Azure Resource Manager",
      "pos": [
        27655,
        27695
      ]
    },
    {
      "content": "This would follow a similar approach to the prior example.",
      "pos": [
        27697,
        27755
      ]
    },
    {
      "content": "Depending on the specific needs of the installation, the specific role assigned to the service principal should allow only the minimal level of access",
      "pos": [
        27757,
        27907
      ]
    },
    {
      "content": "required to achieve the installation and then have that access be immediately revoked after completion of the installation.",
      "pos": [
        27909,
        28032
      ]
    },
    {
      "content": "Enabling 3rd party access to use customer subscriptions for data storage",
      "pos": [
        28038,
        28110
      ]
    },
    {
      "content": "In another example, an organization may wish to run software in their own environment but use the customer’s account for storage.",
      "pos": [
        28112,
        28241
      ]
    },
    {
      "content": "This places the customer",
      "pos": [
        28242,
        28266
      ]
    },
    {
      "content": "in control of their data at all times and enables them to leverage other technologies on the platform, e.g. Azure Machine Learning or HDInsight, at their",
      "pos": [
        28268,
        28421
      ]
    },
    {
      "content": "own discretion while not adding cost/billing overhead for the Enterprise IT, System Integrator, or CSV providing the capability.",
      "pos": [
        28423,
        28551
      ]
    },
    {
      "content": "This requires ongoing access",
      "pos": [
        28552,
        28580
      ]
    },
    {
      "content": "to the storage account for the organization, with the customer in control and having access to audit information for accesses to that information.",
      "pos": [
        28582,
        28728
      ]
    },
    {
      "content": "Implementing with Azure Resource Manager",
      "pos": [
        28735,
        28775
      ]
    },
    {
      "content": "This is implemented using the same pattern as the other examples.",
      "pos": [
        28777,
        28842
      ]
    },
    {
      "content": "A service principal is provided access to the storage resource.",
      "pos": [
        28843,
        28906
      ]
    },
    {
      "content": "As this scenario required",
      "pos": [
        28908,
        28933
      ]
    },
    {
      "content": "the role to have read and write access to the storage account, the built in Contributor role would be assigned to the service principal to achieve this level of access.",
      "pos": [
        28935,
        29103
      ]
    },
    {
      "content": "As this scenario involves both a first and a third party with a shared storage account, there will also be a desire to ensure that the storage account is",
      "pos": [
        29105,
        29258
      ]
    },
    {
      "content": "not deleted accidentally.",
      "pos": [
        29260,
        29285
      ]
    },
    {
      "content": "For this aspect of the scenario, you would apply a resource lock to the storage account.",
      "pos": [
        29287,
        29375
      ]
    },
    {
      "content": "Enabling service management by a 3rd party",
      "pos": [
        29381,
        29423
      ]
    },
    {
      "content": "In another example, an organization will want to deploy, monitor, and manage software in the customers subscription.",
      "pos": [
        29425,
        29541
      ]
    },
    {
      "content": "There may be constraints on the customer",
      "pos": [
        29542,
        29582
      ]
    },
    {
      "content": "in terms of changes they can (or more explicitly cannot) make to an environment where software deployed.",
      "pos": [
        29584,
        29688
      ]
    },
    {
      "content": "Implementing with Azure Resource Manager",
      "pos": [
        29695,
        29735
      ]
    },
    {
      "content": "This follows a supserset of the pattern identified at the start of this section.",
      "pos": [
        29737,
        29817
      ]
    },
    {
      "content": "Specifically, a service principal used by a 3rd party is provided",
      "pos": [
        29818,
        29883
      ]
    },
    {
      "content": "full access to the resources within the resource group.",
      "pos": [
        29885,
        29940
      ]
    },
    {
      "content": "In addition, as there are constraints on the customer, users or groups from the customer would be given rights appropriate to utilize the environment.",
      "pos": [
        29942,
        30092
      ]
    },
    {
      "content": "This can be done via templates as identified earlier in this section.",
      "pos": [
        30095,
        30164
      ]
    },
    {
      "content": "Finally, there may be a desire to ensure that certain resources are not deleted accidentally.",
      "pos": [
        30166,
        30259
      ]
    },
    {
      "content": "If this is the case, resource locks should also be",
      "pos": [
        30261,
        30311
      ]
    },
    {
      "content": "considered for resources which require such protection.",
      "pos": [
        30313,
        30368
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        30373,
        30383
      ]
    },
    {
      "pos": [
        30387,
        30487
      ],
      "content": "To learn about creating templates, see <bpt id=\"p1\">[</bpt>Authoring templates<ept id=\"p1\">](resource-group-authoring-templates.md)</ept>."
    },
    {
      "pos": [
        30490,
        30668
      ],
      "content": "For recommendations about how to handle security in Azure Resource Manager, see <bpt id=\"p1\">[</bpt>Security considerations for Azure Resource Manager<ept id=\"p1\">](best-practices-resource-manager-security.md)</ept>."
    },
    {
      "pos": [
        30671,
        30824
      ],
      "content": "To learn about sharing state into and out of templates, see <bpt id=\"p1\">[</bpt>Sharing state in Azure Resource Manager templates<ept id=\"p1\">](best-practices-resource-manager-state.md)</ept>"
    },
    {
      "content": "test",
      "pos": [
        30826,
        30830
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Contextual examples of best practices for implementing templates\"\n    description=\"Shows examples of Azure Resource Manager templates that illustrate best practices.\"\n    services=\"azure-resource-manager\"\n    documentationCenter=\"\"\n    authors=\"mmercuri\"\n    manager=\"georgem\"\n    editor=\"tysonn\"/>\n\n<tags\n    ms.service=\"azure-resource-manager\"\n    ms.workload=\"multiple\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/13/2015\"\n    ms.author=\"mmercuri\"/>\n\n# Contextual examples of best practices for implementing templates\n\nThis topic provides 7 contextual examples of how to implement your Azure Resoure Manager templates. For an overview of the principles \nillustrated in these examples, see [Best practices for designing Azure Resource Manager templates](best-practices-resource-manager-design-templates.md).\n\nThis topic is part of a larger whitepaper. To read the full paper, download [World Class ARM Templates Considerations and Proven Practices](http://download.microsoft.com/download/8/E/1/8E1DBEFA-CECE-4DC9-A813-93520A5D7CFE/World Class ARM Templates - Considerations and Proven Practices.pdf).\n\n## Moving a capability-scoped template into an end-to-end solution-scoped template\n\nThe pattern for developing a capability scoped template was shared earlier.  One question that you may ask yourself is if there are different considerations \nwhen using this capability scoped template by itself or as part of an end to end scoped solution template.  \n\nFor example, if there was a technology focused template that deployed SQL Server as a capability, what would be the considerations, if any, from using that \nindependently or as part of a broader end to end solution scoped template that may use that SQL Server to support a web application.\n\nWhen looking at this scenario, it’s relevant to look at the number of resources likely involved. For a robust implementation, your capability scoped template won’t \njust be a storage account and a single VM with one installation of SQL Server. A robust capability scoped template will deploy multiple VMs with SQL Server deployed \nfor high availability. For some capabilities, such as Analysis Services, your topology will also have likely have Active Directory deployed with it as well.\n\nTwo key considerations for this scenario include the lifecycle of how SQL Server will be used and the RBAC that you wish to apply to it.  Specifically, will \nthe SQL Server be updated and deleted with the rest of the solution or will it’s lifecycle vary from the solution or other parts of the solution.  If the \nlifecycle will vary, you will want to consider placing it in another resource group.  \n\nAnother consideration is how you would like to apply RBAC to your SQL Server capability scoped solution template.  Based on how you want to apply RBAC within \nyour topology, you may opt for different resource groups based to align with those specifics.  You can apply RBAC at the Resource Level, but given the number of \nresources for the SQL Server capability scoped solution template, a distinct resource group with RBAC applied to it should be a consideration.\n\nAnother consideration is an evaluation of the SQL Server capability scoped solution template to identify if it currently creates certain resources itself vs. \nallowing you to “Bring Your Own Resources.”  In a “Bring Your Own Resources” (BYOR) model, the capability scoped solution template would allow your template to \nre-use previously existing resources, with the typical examples being a storage account, virtual network or an availability set. If a BYOR approach doesn’t exist \nin your capability scoped template, you can alter it using the approach defined earlier in this document for optional resource templates.  In this case, your \nend-to-end solution scoped template would have a shared resource template with these common resources, and the capability scoped template would be extended to \nsupport these resources as optional.  This creates a better capability scoped solution template as it now can be used independently or part of a composition.\n\nWhen assessing whether the storage account should be passed in from the end to end solution scoped template, RBAC should also be re-evaluated. Specifically, \ndo you need to ensure that RBAC be applied to this specific resource?  If so, if the resource is expected to have this applied when it is passed in, a level of \ntrust is being placed not just in the Solution Block but any user who wishes to optionally provide this to the capability scoped template when used \nindependently.  If RBAC is critical, then you should consider on whether to make this an optional template within the capability scoped solution template \nor to require it’s creation with the required RBAC from within the capability scoped solution template.\n\nIf a decision is made to place these in different resource groups, you can also use Resource Links to define the relationships between the resources – even \nwhen the resources span resource groups.\n\n## Creating an end-to-end solution-scoped template with multiple capability-scoped templates\n\nThis is largely a a superset of the previous example. In this scenario, an organization has multiple capability scoped solution templates for a set of \ndata technologies such as Kafka, Apache Hadoop, Apache Spark, and Apache Storm that they wish to pull together in a single solution block.  The resulting \ncomposition will use those capability scoped solution templates as well as a shared storage and virtual network with specific subnet assignments.\n\nOutside of the specific capability scoped templates required, additional resources will be necessary for the solution, even if just scripts to \nstitch the capability scoped templates together and configure them.\n\nIn this case, it’s identified that there’s a shared virtual network and a shared storage account.  To accommodate this, you should add these to a shared \nresources template in your end to end solution scoped template and ensure that a “Bring Your Own Resource” approach is supported in the capability scoped templates. \nIf it is not, you can modify your capability scoped templates to accommodate this, as described in the previous example.\n\nFor the additional resources that you will be adding, you will follow a superset of the pattern used for creating an individual capability scoped template. \nIn this case, you will add a Shared Resources Template, Optional Resources Template(s), Member Node template(s), and desired state configuration (scripts, \nChef, Puppet, Powershell DSC) for the new resources.  Where there are dependencies, you’ll optimize to use implicit references vs. dependsOn where possible \nto eliminate the potential for stray dependencies which may impact the parallelism (and speed) of your deployment. You’ll also consider the lifecycle of \nthese resources, the RBAC considerations, and dependencies to determine if they should be placed in different resource groups.  \n\nWhen adding shared resources, such as the shared storage account, you should also evaluate if a resource lock is required for it, as this can help avoid \naccidental deletions.\n\nWhen adding new resources, you should also examine if any of the resources being added to the end to end solution scoped template could be isolated out \nas capability scoped templates themselves.  If so, this should be strongly considered as to promote further decomposition which can provide benefits for \nboth re-use and testing.\n\nWhen integrating in your solution blocks, your next considerations are, as identified in the previous example, to identify if the lifecycle for the individual \ncapability scoped solution templates are different from that of the broader solution and if any RBAC requirements would necessitate separating these into \nseparate resource groups.\n\nFinally, you will want to consider if you would like to be able to define and query links between the resources. If you do, employing resource links will \nenable you to do this across your end to end scoped solution template, even when spanning multiple resource groups.\n\n## Creating an end-to-end solution-scoped template with partial on/off pattern\n\nThis scenario is a variant of the previous one.  In this case, the customer extracts data from an on premise system at fixed intervals over the course of a day.  \nThey have a data pipeline to process this incoming data and a relational data store where the data is always available for queries.  As the cloud is a \npay-as-you-go model, the customer would like to have the data pipeline operational only during those intervals when data is presented for processing.\n\nAs part of their data pipeline, they have a SQL Server, which receives the processed data and makes it available for querying. The customer has indicated that \nwhile they would like to turn the ingestion and processing pieces of the pipeline on and off on a fixed schedule, they would like to always have the SQL Server available.\n\nIn this scenario, there are what appear to be explicit differences in lifecycle and potentially some additional considerations the customer hasn’t \nraised but should be evaluated.\n\nAs described, the SQL Server deployment will be kept alive while other resources will be created and deleted.  They will be deployed together initially \nbut then other members of the template will be destroyed and created on a different lifecycle.  These can be isolated into different resource groups or be \nleft in the same resource group with resource locking applied to the SQL Server resources.  As SQL Server specifically is, as described in the earlier examples, \nlikely represented as a larger set of resources, separating it out into it’s own resource group would be appropriate.\n\nThe other consideration is that while the customer has said that they want the rest of the data pipeline\nturned on and off on a schedule, they may not be considering the inconsist behavior of reporting systems.  Scheduled delivery of data from third parties is not \nalways precise – connectivity may be unavailable for a period of time, clocks on local or cloud based servers may drift, time changes may or may not occur as \nexpected, etc. It should be evaluated if your ingestion mechanism should be used in an on/off pattern as well, and if so, if the lifecycle for that is greater \nthan that of the processing components.\n\nIf you’re using a managed service such as Azure Data Factory or Event Hub, this is less of an issue as their operating models and associated billing approach \nmake them readily available to ingest your data and place it in storage.  If you’re using another technology, such as Kafka, that you’ve deployed to a virtual \nmachine, you may want to look at the lifecycle for how you make that and the associated storage account(s) required for ingestion available.  This may result in \nthe ingestion and processing resources being placed in a different resource groups based on their lifecycle.\n\n## Supporting distinct environments within a subscription\n\nTo effectively deliver services, many organizations have a set of scale, billing isolation, accountability isolation and geographic isolation needs that must \nbe met.  When designing services for Azure, they would have historically used subscription partitioning in their approach to satisfy these needs.  \n\nResource Manager relaxes constraints on the number of resources of a given type that can be deployed within a subscription and also introduces resource groups, \nRBAC, and auditing. The combination of these can allow organizations to use resource groups for partitioning, allowing them to meet their requirements and \nreduce the amount, if any, of subscription partitioning they might have to do.  \n\nThis section looks at the requirements seen for these types of environments and provides guidance on how to deliver environments that satisfy them with ARM.  \n\n### Isolation considerations\n\nThis section explores common customer drivers for environment, billing, and geographic isolation in more detail.\n\n#### Environment isolation\n\nService owners have a desire to isolate their different environments.  Having each environment isolated allows teams the ability to have more fine-grained \ncontrol over who can have access to the environments. While development environments may be more open in terms of who can access them, as the \nenvironment scope moves closer to production the number of users – be they human or system accounts used for automation – is reduced to aid in \ncompliance and minimize overall risk.\n\n#### Billing isolation – developing vs. running a service\n\nTo accurately reflect Cost of Goods Sold (COGS) and Operating Expenses (OpEx), business owners want to be able to break apart the cost of researching \nand building the service vs. running the services.  \n\nA superset of environment isolation mentioned previously, the intent would be consolidation of development and test for individual and/or \naggregated billing for the former while production would remain independent for the latter.\n\n#### Billing isolation – adding transparency and accountability to service consumption costs\n\nBilling isolation is also used to both gain transparency into costs related to platform consumption by specific teams and introducing appropriate \nlevels of accountability.\n\nWhile the cloud is elastic and allows for a pay-as-you-go model, this is less familiar to some developers coming from a non-cloud model where hardware \nis procured and owned. In the non-cloud model, there were physical limitations in terms of the number of “machines” that could be turned on and there \nwere limited incentives to scale down or turn off resources when not in use.  Procurement of this dedicated hardware, in many cases, was not done by the \ndevelopers that were utilizing it.\n\nBy isolating subscriptions and assigning accountability for those subscriptions to specific teams, service owners found this type of subscription \npartitioning beneficial in driving and enforcing desired behaviors.\n\n#### Geography driven isolation – deployments specific to and governed by laws of a specific geography\n\nIn certain contexts, there will be requirements that services targeted for a specific geography will need to consider how they deploy to address \ncompliance considerations.\n\nWhile a service may be global in nature, deployments that reside within or provide service to certain geographies may be governed by operational \nstaffing requirements. Specifically, having only individuals who are citizens of a specific country or country set and/or pass certain background screening \nprocesses operate those services.\n\nGeographic isolation also provides benefits in terms of taking advantage of new platform services and capabilities. Some geographies, such as China, may \nhave only a subset of the platform services available and/or have delayed deployment of platform services.  \n\nGeographic isolation allows teams the ability to evolve their services to take advantage of new or enhanced platform services and capabilities where \nthey are available.\n\n### Compliance considerations\n\nServices can be delivered across multiple geographies and to multiple verticals. These audiences often have sensitive data or processes contained within \ntheir applications and there are associated compliance regulations designed to both protect them and audit engagement with them.\n\n#### Separation of roles and duties\n\nSeparation of roles and duties is a key requirement for internal services to be compliant with internal policies. Many commercial services also require \nthis to remain in compliance with governments and industry regulatory guidelines.  Services need to limit access to services and their underlying resources \nto authorized roles under specific circumstances. Many services have built scaffolding to deliver two capabilities – RBAC and auditing.\n\n#### Role-based access control (RBAC) use cases\n\nIn compliance scenarios, it is important to constrain access to certain resources.  \n\nFor example, when looking at sensitive data across multiple scenarios where compliance is relevant - health information, financial data, \ntax records, etc. -  it is important to limit the number of individuals who can access, view, or manipulate the data to just those who require \naccess to do the business of the parent organization.\n\nRBAC provides a distinct individual, system, or group with access to specific resources under identified conditions.\n\n#### Auditing\n\nIn addition to constrained access provided by RBAC, organizations also need to audit resource access and interaction with resources.\n\n### Implementing with Azure Resource Manager\n\nPreviously, organizations would have used subscription partitioning to accomplish these goals. While possible, this was not ideal.  As the creation of \na subscription is effectively a commerce activity, the Service Management API did not expose a mechanism by which to create or delete new subscriptions \nautomatically and subscriptions needed to be created manually. The resulting number of subscriptions could grow significantly – for very large services \nsuch as Microsoft’s own commercial services – that number could span into over one thousand subscriptions.  This would often result in the creation of \ncustom scaffolding to create and manage subscriptions for an organization.\n\nWith Resource Manager, deploying multiple environments within a subscription is much more straightforward.  It relaxes the previous fixed caps on resources \nthat was in the previous model, which greatly reduces the need to partition due to resource constraints.\n\nEnvironments can be placed in resource groups, which can have specific RBAC applied to them, enabling you to deliver environment isolation.  In scenarios \nwhere geographic isolation is required, this can also be accomplished utilizing resource groups. As resource groups can span geographies, specific isolation \nfor one or more geographies can be achieved.\n\nYou can apply tags to resources and resource groups which can be used in billing roll ups and summarized views to provide billing isolation.  You can use tags \nto define the environment type (research, education, development, test, production), accountable organization or individual (“HR”, “Finance”, “John Smith”, “Jane Jones”).\n\nThe auditing requirement is delivered as part of the underlying Azure Resource Manager’s set of out of the box capabilities and can be viewed in a central location.\n\nEnd customers would have accounts registered in Azure Active Directory that would be used for authentication and for role based access control to the \nenvironment and resources.\n\n#### Optimizing for density\n\nWhile the resource limits are relaxed in Azure Resource Manager, there will still be limits. Beyond creating the environments themselves, you should also \nlook at achieving density of environments within subscriptions as well.  Delivering an environment is delivering capacity to an indivual or organization and \nyou should evaluate what relevant “t-shirt size(s)” you will want to deliver.  Specifically, identify the variants between small, medium, large, and extra \nlarger customers in terms of the resources required.  \n\nYou may choose to use different subscriptions for different t-shirt sizes to achieve greater density. For example, you may be able to accommodate 1000 small \nt-shirt size environments, 500 medium size deployments, 100 large deployments, and 10 extra-large deployments in a given subscription.  As there’s no billed \ncost to have multiple subscriptions, you may want to isolate the different sizes into different subscriptions to provide maximum density.  This can be done \nwhile keeping the number of subscriptions relatively modest and easy to manage.\n\nOne key consideration you should have is identifying if you would be willing to allow a customer to increase or change their t-shirt size and, if so, \nhow you would want to accommodate it.  \n\nOne approach is to allow a customer to acquire additional capacity within their existing resource group.  This can be easily accommodated technically, \nbut it has implications on density.  Instead of crisply defined sizes for all customers, this introduces a level of variability that adds more overhead \nfor optimizing for density.  If every small size environment is a size X, you can easily pre-calculator how many small size environments to place in a \nsubscription for optimal density.  When allowing customers to customize the environment, the result is an unpredictable number of variants and quantities \nof environments that could be X, X+1, X+2, etc.  With this level of variability, you would achieve less density as you would need to set aside capacity \nwithin a subscription to accommodate these variances.  \n\nWhile possible, this is less than ideal as a general approach, as it achieves less density and requires more overhead to manage. For larger-sized \nenvironments, this may be a more viable option.  As fewer of these large and extra large environments would be placed in a subscription, you may choose \nto place fewer of these in a subscription to accommodate growth.\n\nAnother approach is that the customers current size environment is deleted and a new environment of a different size is created.  While not appropriate for \nsome scenarios, this works well for environments that are used temporarily such as development and test environments.\n\nThe next easiest approach here is to provide the customer the ability to acquire a larger size environment and then manage the migration to that environment \non their own.  For example, a customer who had a SQL Server deployment in a small environment could purchase a medium environment and would be individually \nresponsible for the transfer of data and custom state.\n\nAn alternate approach is to provide a managed service where this transition from one size to another is accommodated. This is obviously more complicated, but \nbased on the workload(s) and customer(s) this may be something your organization would be willing to accommodate.\n\n## Delivering environments with additional customer policy constraints\n\nSome organizations have additional requirements and policies for the environments that they deploy. Specifically, they have policies that constrain the \nports exposed externally and may have policies that require monitoring of inbound and outbound traffic to the environment.\nFor supportability and cost considerations, there may also be constraints on what resources an end customer can create, update or delete.\nFor the organization providing the environment, they will also typically require access to the subscription for support.\n\nA superset of the previous scenario, this would require the addition of certain resources that would have additional constraints on who could and \ncould not create resources of a given type.  \n\nThe ability for a user to create, update, or delete certain resources can be constrained using role based access control.  Examples would include an \norganization requiring a certain network VNET and potentially subnets which the end customer could not update or delete.\n\nResource locks can be implemented to establish that resources are read only or cannot be deleted. RBAC can be used to allow users or service principals \nto perform certain activities against a resource or resource group.\n\nIf the organization requires that certain traffic, e.g. traffic between tiers in the application, first go through an intermediary such as a virtual \nnetwork appliance, user defined routes should be used.\n\nA virtual appliance is nothing more than a VM that runs an application used to handle network traffic in some way, such as a firewall or a NAT device. \nA number of third parties provide virtual network appliances on Azure, and organizations can also bring their own.\n\nA “bring your own” appliance approach allows an organization to re-use existing code that may be used in their on premise environments. This virtual \nappliance VM must be able to receive incoming traffic that is not addressed to itself. To allow a VM to receive traffic addressed to other destinations, \nyou must enable IP Forwarding in the VM.  \n\nAs with prior examples, resource lifecycle and RBAC constraints should be reviewed and considered as part of your resource group strategy.\n\n## Securing resources from internal bad actors\n\nOne concern for an organization may be protecting their resources and the templates that provision them from bad actors.  \n\nOne example of this could be a bank wishing to ensure that a rogue software developer or member of their IT staff don’t make modifications or \nextract key information that results in data going to a bad actor for criminal purposes.\n\nA typical enterprise scenario is to have a small group of Trusted Operators who have access to critical secrets within the deployed workloads, \nwith a broader group of dev/ops personnel who can create or update VM deployments.  \n\nAzure Key Vault woud be used with ARM to orchestrate and store VM secrets and certificates.\n\nA best practice is to maintain separate ARM templates for creation of vaults (which will contain the key material) and deployment of the VMs \n(with URI references the keys contained in the vaults).\n\nSecrets stored in the Key Vault are under full RBAC control of a trusted operator.  If the trusted operator leaves the company or transfers within \nthe company to a new group, he or she will no longer have access to the keys they created in the Vault.\n\nThe ARM templates for deployment only contain URI references to the secrets, which means the actual secrets are not in code, config or source code \nrepositories. This mitigates opportunities for both phishing secrets and limiting the ability for bad actors to make changes.\n\nAs stated earlier in the document, there are no global Key Vaults. As Key Vaults are always regional, the secrets always have locality (and sovereignty) with the VMs.\n\nAn example implementation of this approach was provided in the Secrets and Certificates section found earlier in this document.\n\n## Enabling a \"bring your own subscription\" model\n\nCorporate IT, System Integrators, and Cloud Services vendors may employ a \"Bring Your Own Subscription\" model with their customers.  Specifically, the \norganization provides a service to an end customer and utilizes that customer’s Azure subscription in some fashion.\n\nThere are multiple variants of this approach, each with slightly different requirements, as detailed below.\n\n### Enabling 3rd party access for monitoring of resources within an account\n\nAn organization with a monitoring application may require read-only access to a customer’s subscription to retrieve data for use in that application. \nThis would require read-only access for an ongoing period of time.  Access would need to be in the customer’s control, providing them the ability to \nterminate the access if the relationship with the provider of the monitoring service is severed.\n\n#### Implementing with Azure Resource Manager\n\nDetails on implementing this are provided in significant detail in the “Developers Guide to Auth with the Azure Resource Manager API” which \ncan be found [here](http://www.dushyantgill.com/blog/2015/05/23/developers-guide-to-auth-with-azure-resource-manager-api/). That document provides \nstep-by-step implementation instructions as well as sample code.\n\n### Enabling 3rd party access for one-time deployment of software\n\nIn another example, an organization may deploy and configure a version of their software in a customer’s account, requiring write access for the period of \ntime for the deployment.\n\n#### Implementing with Azure Resource Manager\n\nThis would follow a similar approach to the prior example.\n\nDepending on the specific needs of the installation, the specific role assigned to the service principal should allow only the minimal level of access \nrequired to achieve the installation and then have that access be immediately revoked after completion of the installation.\n\n### Enabling 3rd party access to use customer subscriptions for data storage\n\nIn another example, an organization may wish to run software in their own environment but use the customer’s account for storage. This places the customer \nin control of their data at all times and enables them to leverage other technologies on the platform, e.g. Azure Machine Learning or HDInsight, at their \nown discretion while not adding cost/billing overhead for the Enterprise IT, System Integrator, or CSV providing the capability. This requires ongoing access \nto the storage account for the organization, with the customer in control and having access to audit information for accesses to that information.\n\n#### Implementing with Azure Resource Manager\n\nThis is implemented using the same pattern as the other examples. A service principal is provided access to the storage resource.  As this scenario required \nthe role to have read and write access to the storage account, the built in Contributor role would be assigned to the service principal to achieve this level of access.\n\nAs this scenario involves both a first and a third party with a shared storage account, there will also be a desire to ensure that the storage account is \nnot deleted accidentally.  For this aspect of the scenario, you would apply a resource lock to the storage account.\n\n### Enabling service management by a 3rd party\n\nIn another example, an organization will want to deploy, monitor, and manage software in the customers subscription. There may be constraints on the customer \nin terms of changes they can (or more explicitly cannot) make to an environment where software deployed.\n\n#### Implementing with Azure Resource Manager\n\nThis follows a supserset of the pattern identified at the start of this section. Specifically, a service principal used by a 3rd party is provided \nfull access to the resources within the resource group.\n\nIn addition, as there are constraints on the customer, users or groups from the customer would be given rights appropriate to utilize the environment.  \nThis can be done via templates as identified earlier in this section.\n\nFinally, there may be a desire to ensure that certain resources are not deleted accidentally.  If this is the case, resource locks should also be \nconsidered for resources which require such protection.\n\n## Next steps\n\n- To learn about creating templates, see [Authoring templates](resource-group-authoring-templates.md).\n- For recommendations about how to handle security in Azure Resource Manager, see [Security considerations for Azure Resource Manager](best-practices-resource-manager-security.md).\n- To learn about sharing state into and out of templates, see [Sharing state in Azure Resource Manager templates](best-practices-resource-manager-state.md)\n\ntest\n"
}