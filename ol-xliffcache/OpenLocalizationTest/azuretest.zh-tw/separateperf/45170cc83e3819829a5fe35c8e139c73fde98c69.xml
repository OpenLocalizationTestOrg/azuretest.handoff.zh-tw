{
  "nodes": [
    {
      "content": "How to use Service Bus topics (Python) | Microsoft Azure",
      "pos": [
        28,
        84
      ]
    },
    {
      "content": "Learn how to use Azure Service Bus topics and subscriptions from Python.",
      "pos": [
        104,
        176
      ]
    },
    {
      "content": "How to Use Service Bus topics and subscriptions",
      "pos": [
        489,
        536
      ]
    },
    {
      "content": "This guide describes how to use Service Bus topics and subscriptions.",
      "pos": [
        538,
        607
      ]
    },
    {
      "content": "The samples are written in Python and use the <bpt id=\"p1\">[</bpt>Python Azure package<ept id=\"p1\">][]</ept>.",
      "pos": [
        608,
        679
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating topics and subscriptions, creating subscription filters, sending messages<ept id=\"p1\">**</ept> to a topic, <bpt id=\"p2\">**</bpt>receiving messages from a subscription<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>deleting topics and subscriptions<ept id=\"p3\">**</ept>.",
      "pos": [
        680,
        895
      ]
    },
    {
      "content": "For more information about topics and subscriptions, see the <bpt id=\"p1\">[</bpt>Next Steps<ept id=\"p1\">](#next-steps)</ept> section.",
      "pos": [
        896,
        991
      ]
    },
    {
      "pos": [
        1081,
        1226
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> If you need to install Python or the <bpt id=\"p2\">[</bpt>Python Azure package<ept id=\"p2\">][]</ept>, please see the <bpt id=\"p3\">[</bpt>Python Installation Guide<ept id=\"p3\">](../python-how-to-install.md)</ept>."
    },
    {
      "content": "How to create a topic",
      "pos": [
        1231,
        1252
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object enables you to work with topics.",
      "pos": [
        1254,
        1319
      ]
    },
    {
      "content": "Add the following near the top of any Python file in which you wish to programmatically access Azure Service Bus:",
      "pos": [
        1320,
        1433
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        1528,
        1586
      ]
    },
    {
      "content": "Replace <ph id=\"ph1\">`mynamespace`</ph>, <ph id=\"ph2\">`sharedaccesskeyname`</ph>, and <ph id=\"ph3\">`sharedaccesskey`</ph> with your actual namespace, shared access signature (SAS) key name, and value.",
      "pos": [
        1587,
        1733
      ]
    },
    {
      "pos": [
        1919,
        2174
      ],
      "content": "You can obtain the values for the SAS key name and value from the Azure management portal connection information, or in the Visual Studio <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section)."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>create\\_topic<ept id=\"p1\">**</ept> also supports additional options, which enable you to override default topic settings such as message time to live or maximum topic size.",
      "pos": [
        2217,
        2372
      ]
    },
    {
      "content": "The following example sets the maximum topic size to 5 GB, and a time to live value of 1 minute:",
      "pos": [
        2373,
        2469
      ]
    },
    {
      "content": "How to create subscriptions",
      "pos": [
        2664,
        2691
      ]
    },
    {
      "content": "Topic subscriptions are also created with the <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        2693,
        2768
      ]
    },
    {
      "content": "Subscriptions are named and can have an optional filter that restricts the set of messages delivered to the subscription's virtual queue.",
      "pos": [
        2769,
        2906
      ]
    },
    {
      "pos": [
        2908,
        3044
      ],
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: Subscriptions are persistent and will continue to exist until either they, or the topic they are associated with, are deleted."
    },
    {
      "content": "Create a subscription with the default (MatchAll) filter",
      "pos": [
        3050,
        3106
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.",
      "pos": [
        3108,
        3228
      ]
    },
    {
      "content": "When the <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is used, all messages published to the topic are placed in the subscription's virtual queue.",
      "pos": [
        3229,
        3350
      ]
    },
    {
      "content": "The following example creates a subscription named 'AllMessages' and uses the default <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept>",
      "pos": [
        3351,
        3449
      ]
    },
    {
      "content": "filter.",
      "pos": [
        3450,
        3457
      ]
    },
    {
      "content": "Create subscriptions with filters",
      "pos": [
        3526,
        3559
      ]
    },
    {
      "content": "You can also define filters that enable you to specify which messages sent to a topic should show up within a specific topic subscription.",
      "pos": [
        3561,
        3699
      ]
    },
    {
      "content": "The most flexible type of filter supported by subscriptions is <bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept>, which implements a subset of SQL92.",
      "pos": [
        3701,
        3814
      ]
    },
    {
      "content": "SQL filters operate on the properties of the messages that are published to the topic.",
      "pos": [
        3815,
        3901
      ]
    },
    {
      "content": "For more details about the expressions that can be used with a SQL filter, see the <bpt id=\"p1\">[</bpt>SqlFilter.SqlExpression<ept id=\"p1\">][]</ept> syntax.",
      "pos": [
        3902,
        4020
      ]
    },
    {
      "content": "Filters can be added to a subscription by using the <bpt id=\"p1\">**</bpt>create\\_rule<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        4022,
        4134
      ]
    },
    {
      "content": "This method allows you to add new filters to an existing subscription.",
      "pos": [
        4135,
        4205
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: Since the default filter is applied automatically to all new subscriptions, you must first remove the default filter or the <bpt id=\"p2\">**</bpt>MatchAll<ept id=\"p2\">**</ept> will override any other filters you may specify.",
      "pos": [
        4207,
        4402
      ]
    },
    {
      "content": "You can remove the default rule by using the <bpt id=\"p1\">**</bpt>delete\\_rule<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        4403,
        4508
      ]
    },
    {
      "pos": [
        4510,
        4681
      ],
      "content": "The example below creates a subscription named <ph id=\"ph1\">`HighMessages`</ph> with a <bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept> that only selects messages that have a custom <bpt id=\"p2\">**</bpt>messagenumber<ept id=\"p2\">**</ept> property greater than 3:"
    },
    {
      "pos": [
        5007,
        5194
      ],
      "content": "Similarly, the following example creates a subscription named <ph id=\"ph1\">`LowMessages`</ph> with a <bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept> that only selects messages that have a <bpt id=\"p2\">**</bpt>messagenumber<ept id=\"p2\">**</ept> property less than or equal to 3:"
    },
    {
      "pos": [
        5517,
        5797
      ],
      "content": "When a message is now sent to <ph id=\"ph1\">`mytopic`</ph>, it is always delivered to receivers subscribed to the <bpt id=\"p1\">**</bpt>AllMessages<ept id=\"p1\">**</ept> topic subscription, and selectively delivered to receivers subscribed to the <bpt id=\"p2\">**</bpt>HighMessages<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>LowMessages<ept id=\"p3\">**</ept> topic subscriptions (depending on the message content)."
    },
    {
      "content": "How to send messages to a topic",
      "pos": [
        5802,
        5833
      ]
    },
    {
      "pos": [
        5835,
        5975
      ],
      "content": "To send a message to a Service Bus topic, your application must use the <bpt id=\"p1\">**</bpt>send\\_topic\\_message<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object."
    },
    {
      "content": "The following example demonstrates how to send five test messages to <ph id=\"ph1\">`mytopic`</ph>.",
      "pos": [
        5977,
        6056
      ]
    },
    {
      "content": "Note that the <bpt id=\"p1\">**</bpt>messagenumber<ept id=\"p1\">**</ept> property value of each message varies on the iteration of the loop (this determines which subscriptions receive it):",
      "pos": [
        6057,
        6205
      ]
    },
    {
      "content": "Service Bus topics support a maximum message size of 256 MB (the header, which includes the standard and custom application properties, can have a maximum size of 64 MB).",
      "pos": [
        6384,
        6554
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.",
      "pos": [
        6555,
        6684
      ]
    },
    {
      "content": "This topic size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        6685,
        6758
      ]
    },
    {
      "content": "How to receive messages from a subscription",
      "pos": [
        6763,
        6806
      ]
    },
    {
      "pos": [
        6808,
        6938
      ],
      "content": "Messages are received from a subscription using the <bpt id=\"p1\">**</bpt>receive\\_subscription\\_message<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object:"
    },
    {
      "content": "Messages are deleted from the subscription as they are read when the parameter <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> is set to <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept>.",
      "pos": [
        7055,
        7169
      ]
    },
    {
      "content": "You can read (peek) and lock the message without deleting it from the queue by setting the parameter <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>True<ept id=\"p2\">**</ept>.",
      "pos": [
        7170,
        7298
      ]
    },
    {
      "content": "The behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        7300,
        7522
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        7523,
        7650
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        7651,
        7860
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> parameter is set to <bpt id=\"p2\">**</bpt>True<ept id=\"p2\">**</ept>, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        7863,
        8044
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        8045,
        8213
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Message<ept id=\"p2\">**</ept> object.",
      "pos": [
        8214,
        8423
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method marks the message as being consumed and removes it from the subscription.",
      "pos": [
        8424,
        8519
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        8657,
        8714
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.",
      "pos": [
        8716,
        8851
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">**</bpt>unlock<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>Message<ept id=\"p2\">**</ept> object.",
      "pos": [
        8852,
        8993
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.",
      "pos": [
        8994,
        9189
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the subscription, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.",
      "pos": [
        9191,
        9495
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> method is called, then the message will be redelivered to the application when it restarts.",
      "pos": [
        9497,
        9685
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        9686,
        9853
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        9854,
        10022
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">**</bpt>MessageId<ept id=\"p1\">**</ept> property of the message, which will remain constant across delivery attempts.",
      "pos": [
        10023,
        10147
      ]
    },
    {
      "content": "How to delete topics and subscriptions",
      "pos": [
        10152,
        10190
      ]
    },
    {
      "content": "Topics and subscriptions are persistent, and must be explicitly deleted either through the Azure management portal or programmatically.",
      "pos": [
        10192,
        10327
      ]
    },
    {
      "content": "The following example shows how to delete the topic named <ph id=\"ph1\">`mytopic`</ph>:",
      "pos": [
        10328,
        10396
      ]
    },
    {
      "content": "Deleting a topic also deletes any subscriptions that are registered with the topic.",
      "pos": [
        10439,
        10522
      ]
    },
    {
      "content": "Subscriptions can also be deleted independently.",
      "pos": [
        10523,
        10571
      ]
    },
    {
      "content": "The following code shows how to delete a subscription named <ph id=\"ph1\">`HighMessages`</ph> from the 'mytopic' topic:",
      "pos": [
        10572,
        10672
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        10741,
        10751
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus topics, follow these links to learn more.",
      "pos": [
        10753,
        10844
      ]
    },
    {
      "pos": [
        10850,
        10912
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        10917,
        10959
      ],
      "content": "Reference for <bpt id=\"p1\">[</bpt>SqlFilter.SqlExpression<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus topics (Python) | Microsoft Azure\" \n    description=\"Learn how to use Azure Service Bus topics and subscriptions from Python.\" \n    services=\"service-bus\" \n    documentationCenter=\"python\" \n    authors=\"huguesv\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"python\" \n    ms.topic=\"article\" \n    ms.date=\"07/06/2015\" \n    ms.author=\"huvalo\"/>\n\n# How to Use Service Bus topics and subscriptions\n\nThis guide describes how to use Service Bus topics and subscriptions. The samples are written in Python and use the [Python Azure package][]. The scenarios covered include **creating topics and subscriptions, creating subscription filters, sending messages** to a topic, **receiving messages from a subscription**, and **deleting topics and subscriptions**. For more information about topics and subscriptions, see the [Next Steps](#next-steps) section.\n\n[AZURE.INCLUDE [howto-service-bus-topics](../../includes/howto-service-bus-topics.md)]\n\n**Note:** If you need to install Python or the [Python Azure package][], please see the [Python Installation Guide](../python-how-to-install.md).\n\n## How to create a topic\n\nThe **ServiceBusService** object enables you to work with topics. Add the following near the top of any Python file in which you wish to programmatically access Azure Service Bus:\n\n    from azure.servicebus import ServiceBusService, Message, Topic, Rule, DEFAULT_RULE_NAME\n\nThe following code creates a **ServiceBusService** object. Replace `mynamespace`, `sharedaccesskeyname`, and `sharedaccesskey` with your actual namespace, shared access signature (SAS) key name, and value.\n\n    bus_service = ServiceBusService(\n        service_namespace='mynamespace',\n        shared_access_key_name='sharedaccesskeyname',\n        shared_access_key_value='sharedaccesskey')\n\nYou can obtain the values for the SAS key name and value from the Azure management portal connection information, or in the Visual Studio **Properties** window when selecting the Service Bus namespace in Server Explorer (as shown in the previous section).\n\n    bus_service.create_topic('mytopic')\n\n**create\\_topic** also supports additional options, which enable you to override default topic settings such as message time to live or maximum topic size. The following example sets the maximum topic size to 5 GB, and a time to live value of 1 minute:\n\n    topic_options = Topic()\n    topic_options.max_size_in_megabytes = '5120'\n    topic_options.default_message_time_to_live = 'PT1M'\n\n    bus_service.create_topic('mytopic', topic_options)\n\n## How to create subscriptions\n\nTopic subscriptions are also created with the **ServiceBusService** object. Subscriptions are named and can have an optional filter that restricts the set of messages delivered to the subscription's virtual queue.\n\n**Note**: Subscriptions are persistent and will continue to exist until either they, or the topic they are associated with, are deleted.\n\n### Create a subscription with the default (MatchAll) filter\n\nThe **MatchAll** filter is the default filter that is used if no filter is specified when a new subscription is created. When the **MatchAll** filter is used, all messages published to the topic are placed in the subscription's virtual queue. The following example creates a subscription named 'AllMessages' and uses the default **MatchAll**\nfilter.\n\n    bus_service.create_subscription('mytopic', 'AllMessages')\n\n### Create subscriptions with filters\n\nYou can also define filters that enable you to specify which messages sent to a topic should show up within a specific topic subscription.\n\nThe most flexible type of filter supported by subscriptions is **SqlFilter**, which implements a subset of SQL92. SQL filters operate on the properties of the messages that are published to the topic. For more details about the expressions that can be used with a SQL filter, see the [SqlFilter.SqlExpression][] syntax.\n\nFilters can be added to a subscription by using the **create\\_rule** method of the **ServiceBusService** object. This method allows you to add new filters to an existing subscription.\n\n**Note**: Since the default filter is applied automatically to all new subscriptions, you must first remove the default filter or the **MatchAll** will override any other filters you may specify. You can remove the default rule by using the **delete\\_rule** method of the **ServiceBusService** object.\n\nThe example below creates a subscription named `HighMessages` with a **SqlFilter** that only selects messages that have a custom **messagenumber** property greater than 3:\n\n    bus_service.create_subscription('mytopic', 'HighMessages')\n\n    rule = Rule()\n    rule.filter_type = 'SqlFilter'\n    rule.filter_expression = 'messagenumber > 3'\n\n    bus_service.create_rule('mytopic', 'HighMessages', 'HighMessageFilter', rule)\n    bus_service.delete_rule('mytopic', 'HighMessages', DEFAULT_RULE_NAME)\n\nSimilarly, the following example creates a subscription named `LowMessages` with a **SqlFilter** that only selects messages that have a **messagenumber** property less than or equal to 3:\n\n    bus_service.create_subscription('mytopic', 'LowMessages')\n\n    rule = Rule()\n    rule.filter_type = 'SqlFilter'\n    rule.filter_expression = 'messagenumber <= 3'\n\n    bus_service.create_rule('mytopic', 'LowMessages', 'LowMessageFilter', rule)\n    bus_service.delete_rule('mytopic', 'LowMessages', DEFAULT_RULE_NAME)\n\nWhen a message is now sent to `mytopic`, it is always delivered to receivers subscribed to the **AllMessages** topic subscription, and selectively delivered to receivers subscribed to the **HighMessages** and **LowMessages** topic subscriptions (depending on the message content).\n\n## How to send messages to a topic\n\nTo send a message to a Service Bus topic, your application must use the **send\\_topic\\_message** method of the **ServiceBusService** object.\n\nThe following example demonstrates how to send five test messages to `mytopic`. Note that the **messagenumber** property value of each message varies on the iteration of the loop (this determines which subscriptions receive it):\n\n    for i in range(5):\n        msg = Message('Msg {0}'.format(i).encode('utf-8'), custom_properties={'messagenumber':i})\n        bus_service.send_topic_message('mytopic', msg)\n\nService Bus topics support a maximum message size of 256 MB (the header, which includes the standard and custom application properties, can have a maximum size of 64 MB). There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic. This topic size is defined at creation time, with an upper limit of 5 GB.\n\n## How to receive messages from a subscription\n\nMessages are received from a subscription using the **receive\\_subscription\\_message** method on the **ServiceBusService** object:\n\n    msg = bus_service.receive_subscription_message('mytopic', 'LowMessages', peek_lock=False)\n    print(msg.body)\n\nMessages are deleted from the subscription as they are read when the parameter **peek\\_lock** is set to **False**. You can read (peek) and lock the message without deleting it from the queue by setting the parameter **peek\\_lock** to **True**.\n\nThe behavior of reading and deleting the message as part of the receive operation is the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\n\nIf the **peek\\_lock** parameter is set to **True**, the receive becomes a two stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling **delete** method on the **Message** object. The **delete** method marks the message as being consumed and removes it from the subscription.\n\n    msg = bus_service.receive_subscription_message('mytopic', 'LowMessages', peek_lock=True)\n    print(msg.body)\n\n    msg.delete()\n\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the **unlock** method on the **Message** object. This will cause Service Bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.\n\nThere is also a timeout associated with a message locked within the subscription, and if the application fails to process the message before the lock timeout expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.\n\nIn the event that the application crashes after processing the message but before the **delete** method is called, then the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**, that is, each message will be processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the **MessageId** property of the message, which will remain constant across delivery attempts.\n\n## How to delete topics and subscriptions\n\nTopics and subscriptions are persistent, and must be explicitly deleted either through the Azure management portal or programmatically. The following example shows how to delete the topic named `mytopic`:\n\n    bus_service.delete_topic('mytopic')\n\nDeleting a topic also deletes any subscriptions that are registered with the topic. Subscriptions can also be deleted independently. The following code shows how to delete a subscription named `HighMessages` from the 'mytopic' topic:\n\n    bus_service.delete_subscription('mytopic', 'HighMessages')\n\n## Next steps\n\nNow that you've learned the basics of Service Bus topics, follow these links to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions][].\n-   Reference for [SqlFilter.SqlExpression][].\n\n[Azure Management Portal]: http://manage.windowsazure.com\n[Python Azure package]: https://pypi.python.org/pypi/azure  \n[Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n[SqlFilter.SqlExpression]: https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n \n"
}