<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to make data model changes to a .NET backend mobile service</source>
          <target state="new">How to make data model changes to a .NET backend mobile service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes data model initializers and how to make data model changes in a .NET backend mobile service.</source>
          <target state="new">This topic describes data model initializers and how to make data model changes in a .NET backend mobile service.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to make data model changes to a .NET backend mobile service</source>
          <target state="new">How to make data model changes to a .NET backend mobile service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows how to use Code First Migrations in Entity Framework to make data model changes to an existing Azure SQL Database to avoid losing existing data.</source>
          <target state="new">This topic shows how to use Code First Migrations in Entity Framework to make data model changes to an existing Azure SQL Database to avoid losing existing data.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This procedure assumes that you have already published your .NET backend project to Azure, that there is existing data in your database, and that the remote and local data models are still in sync.</source>
          <target state="new">This procedure assumes that you have already published your .NET backend project to Azure, that there is existing data in your database, and that the remote and local data models are still in sync.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic also describes the default Code First initializers implemented by Azure Mobile Services that are used during development.</source>
          <target state="new">This topic also describes the default Code First initializers implemented by Azure Mobile Services that are used during development.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These initializers let you easily make schema changes without using Code First Migrations when it is not necessary to maintain you existing data.</source>
          <target state="new">These initializers let you easily make schema changes without using Code First Migrations when it is not necessary to maintain you existing data.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>The schema name that is used to prefix your tables in the SQL Database is defined by the MS_MobileServiceName app setting in the web.config file.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>The schema name that is used to prefix your tables in the SQL Database is defined by the MS_MobileServiceName app setting in the web.config file.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you download the starter project from the portal, this value is already set to the mobile service name.</source>
          <target state="new">When you download the starter project from the portal, this value is already set to the mobile service name.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When your schema name matches the mobile service, multiple mobile services can safely share the same database instance.</source>
          <target state="new">When your schema name matches the mobile service, multiple mobile services can safely share the same database instance.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Note that automatic migrations are not supported in a .NET backend project.</source>
          <target state="new">Note that automatic migrations are not supported in a .NET backend project.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Updating the data model</source>
          <target state="new">Updating the data model</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As you add functionality to your .NET backend mobile service, you add new controllers to expose new endpoints in your API.</source>
          <target state="new">As you add functionality to your .NET backend mobile service, you add new controllers to expose new endpoints in your API.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You create a new API as either a custom controller or a table controller.</source>
          <target state="new">You create a new API as either a custom controller or a table controller.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A [TableController</source>
          <target state="new">A [TableController</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>] exposes a data type that inherits from [EntityData].</source>
          <target state="new">] exposes a data type that inherits from [EntityData].</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To enable data to be persisted to the database, this data type must also be added to the data model as a new [DbSet</source>
          <target state="new">To enable data to be persisted to the database, this data type must also be added to the data model as a new [DbSet</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>] in the [DbContext].</source>
          <target state="new">] in the [DbContext].</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To learn more about Code First in the Entity Framework, see <bpt id="p1">[</bpt>Creating a Model with Code First<ept id="p1">](https://msdn.microsoft.com/data/ee712907#codefirst)</ept>.</source>
          <target state="new">To learn more about Code First in the Entity Framework, see <bpt id="p1">[</bpt>Creating a Model with Code First<ept id="p1">](https://msdn.microsoft.com/data/ee712907#codefirst)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual Studio makes it easy to create a new table controller to expose a new data type to client apps.</source>
          <target state="new">Visual Studio makes it easy to create a new table controller to expose a new data type to client apps.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to use controllers to access data in mobile services<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/dn614132.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>How to use controllers to access data in mobile services<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/dn614132.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Data model initializers</source>
          <target state="new">Data model initializers</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Mobile Services provides two data model initializer base classes in a .NET backend mobile service project.</source>
          <target state="new">Mobile Services provides two data model initializer base classes in a .NET backend mobile service project.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Both initializers drop and recreate tables in the database when the Entity Framework detects a data model change in your [DbContext].</source>
          <target state="new">Both initializers drop and recreate tables in the database when the Entity Framework detects a data model change in your [DbContext].</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These initializers are designed to work both when you mobile service is running on a local computer and when it is hosted in Azure.</source>
          <target state="new">These initializers are designed to work both when you mobile service is running on a local computer and when it is hosted in Azure.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>When you publish a .NET backend mobile service, the initializer is not run until a data access operation occurs.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>When you publish a .NET backend mobile service, the initializer is not run until a data access operation occurs.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that for a newly published service, the data tables used for storage aren't created until a data access operation, such as a query, is requested by the client.</source>
          <target state="new">This means that for a newly published service, the data tables used for storage aren't created until a data access operation, such as a query, is requested by the client.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also execute a data access operation by using the built-in API help functionality, accessed from the <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept> link on the start page.</source>
          <target state="new">You can also execute a data access operation by using the built-in API help functionality, accessed from the <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept> link on the start page.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information on using the API pages to test your mobile service, see the section Test the mobile service project locally in <bpt id="p1">[</bpt>Add Mobile Services to an existing app<ept id="p1">](mobile-services-dotnet-backend-windows-universal-dotnet-get-started-data.md#test-the-service-locally)</ept>.</source>
          <target state="new">For more information on using the API pages to test your mobile service, see the section Test the mobile service project locally in <bpt id="p1">[</bpt>Add Mobile Services to an existing app<ept id="p1">](mobile-services-dotnet-backend-windows-universal-dotnet-get-started-data.md#test-the-service-locally)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Both initializers delete from the database all tables, views, functions, and procedures in the schema used by the mobile service.</source>
          <target state="new">Both initializers delete from the database all tables, views, functions, and procedures in the schema used by the mobile service.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ClearDatabaseSchemaIfModelChanges<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>ClearDatabaseSchemaIfModelChanges<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Schema objects are deleted only when Code First detects a change in the data model.</source>
          <target state="new">Schema objects are deleted only when Code First detects a change in the data model.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The default initializer in a .NET backend project downloaded from the [Azure Management Portal] inherits from this base class.</source>
          <target state="new">The default initializer in a .NET backend project downloaded from the [Azure Management Portal] inherits from this base class.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ClearDatabaseSchemaAlways<ept id="p1">**</ept>:</source>
          <target state="new"><bpt id="p1">**</bpt>ClearDatabaseSchemaAlways<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Schema objects are deleted every time that the data model is accessed.</source>
          <target state="new">Schema objects are deleted every time that the data model is accessed.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use this base class to reset the database without having to make a data model change.</source>
          <target state="new">Use this base class to reset the database without having to make a data model change.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use other Code First data model initializers when running on a local computer.</source>
          <target state="new">You can use other Code First data model initializers when running on a local computer.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, initializers that attempt to drop the database will fail in Azure because the user does not have permissions to drop the database, which is a good thing.</source>
          <target state="new">However, initializers that attempt to drop the database will fail in Azure because the user does not have permissions to drop the database, which is a good thing.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You may continue to use initializers during local development of your mobile service, and the .NET backend tutorials assume that you are using initializers.</source>
          <target state="new">You may continue to use initializers during local development of your mobile service, and the .NET backend tutorials assume that you are using initializers.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, for situations where you want to make data model changes and maintain existing data in the database, you must use Code First Migrations.</source>
          <target state="new">However, for situations where you want to make data model changes and maintain existing data in the database, you must use Code First Migrations.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>When developing and testing your mobile service project against live Azure services, you should always use a mobile service instance that is dedicated for testing.</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>When developing and testing your mobile service project against live Azure services, you should always use a mobile service instance that is dedicated for testing.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You should never develop or test against a mobile service that is currently in production or being used by client apps.</source>
          <target state="new">You should never develop or test against a mobile service that is currently in production or being used by client apps.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the downloaded quickstart project, the Code First initializer is defined in the WebApiConfig.cs file.</source>
          <target state="new">In the downloaded quickstart project, the Code First initializer is defined in the WebApiConfig.cs file.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">**</bpt>Seed<ept id="p1">**</ept> method to add initial rows of data to new tables.</source>
          <target state="new">Override the <bpt id="p1">**</bpt>Seed<ept id="p1">**</ept> method to add initial rows of data to new tables.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For examples of seeding data, see [Seeding data in migrations].</source>
          <target state="new">For examples of seeding data, see [Seeding data in migrations].</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="migrations"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Enable Code First Migrations</source>
          <target state="new"><ph id="ph1">&lt;a name="migrations"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Enable Code First Migrations</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Code First Migrations uses a snapshot method to generate code that, when executed, makes schema changes to the database.</source>
          <target state="new">Code First Migrations uses a snapshot method to generate code that, when executed, makes schema changes to the database.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With Migrations, you can make incremental changes to your data model and maintain existing data in the database.</source>
          <target state="new">With Migrations, you can make incremental changes to your data model and maintain existing data in the database.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>If you have already published your .NET backend mobile service project to Azure, and your SQL Database table schema does not match the current data model of your project, you must use an initializer, drop the tables manually, or otherwise get the schema and data model in sync before you try to publish using Code First Migrations.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>If you have already published your .NET backend mobile service project to Azure, and your SQL Database table schema does not match the current data model of your project, you must use an initializer, drop the tables manually, or otherwise get the schema and data model in sync before you try to publish using Code First Migrations.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following steps turn on Migrations and apply data model changes in the project, the local database, and in Azure.</source>
          <target state="new">The following steps turn on Migrations and apply data model changes in the project, the local database, and in Azure.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In Visual Studio in the Solution Explorer, right-click the mobile service project and click <bpt id="p1">**</bpt>Set as startup project<ept id="p1">**</ept>.</source>
          <target state="new">In Visual Studio in the Solution Explorer, right-click the mobile service project and click <bpt id="p1">**</bpt>Set as startup project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, expand <bpt id="p2">**</bpt>NuGet Package Manager<ept id="p2">**</ept>, then click <bpt id="p3">**</bpt>Package Manager Console<ept id="p3">**</ept>.</source>
          <target state="new">From the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, expand <bpt id="p2">**</bpt>NuGet Package Manager<ept id="p2">**</ept>, then click <bpt id="p3">**</bpt>Package Manager Console<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This displays the Package Manager Console, which you will use to manage your Code First Migrations.</source>
          <target state="new">This displays the Package Manager Console, which you will use to manage your Code First Migrations.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the Package Manager Console, run the following command:</source>
          <target state="new">In the Package Manager Console, run the following command:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This turns on Code First Migrations for your project.</source>
          <target state="new">This turns on Code First Migrations for your project.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the console, run the following command:</source>
          <target state="new">In the console, run the following command:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This creates a new migration named <bpt id="p1">*</bpt>Initial<ept id="p1">*</ept>.</source>
          <target state="new">This creates a new migration named <bpt id="p1">*</bpt>Initial<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Migration code is stored in the Migrations project folder.</source>
          <target state="new">Migration code is stored in the Migrations project folder.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Expand the App_Start folder, open the WebApiConfig.cs project file and add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements:</source>
          <target state="new">Expand the App_Start folder, open the WebApiConfig.cs project file and add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the above code, you must replace the <bpt id="p1">_</bpt>todolistService<ept id="p1">_</ept> string with the namespace of your project, which for the downloaded quickstart project is <ph id="ph1">&lt;em&gt;</ph>mobile&amp;#95;service&amp;#95;name<ph id="ph2">&lt;/em&gt;</ph>Service.</source>
          <target state="new">In the above code, you must replace the <bpt id="p1">_</bpt>todolistService<ept id="p1">_</ept> string with the namespace of your project, which for the downloaded quickstart project is <ph id="ph1">&lt;em&gt;</ph>mobile&amp;#95;service&amp;#95;name<ph id="ph2">&lt;/em&gt;</ph>Service.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In this same code file, comment-out the call to the <bpt id="p1">**</bpt>Database.SetInitializer<ept id="p1">**</ept> method and add the following code after it:</source>
          <target state="new">In this same code file, comment-out the call to the <bpt id="p1">**</bpt>Database.SetInitializer<ept id="p1">**</ept> method and add the following code after it:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This disables the default Code First database initializer that drops and recreates the database and replaces it with an explicit request to apply the latest migration.</source>
          <target state="new">This disables the default Code First database initializer that drops and recreates the database and replaces it with an explicit request to apply the latest migration.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>At this point, any data model changes will result in an InvalidOperationException when the data is accessed, unless a migration has been created for it.</source>
          <target state="new">At this point, any data model changes will result in an InvalidOperationException when the data is accessed, unless a migration has been created for it.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Going forward, your service must use Code First Migrations to migrate data model changes to the database.</source>
          <target state="new">Going forward, your service must use Code First Migrations to migrate data model changes to the database.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Press F5 to start the mobile service project on the local computer.</source>
          <target state="new">Press F5 to start the mobile service project on the local computer.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>At this point, the database is in sync with the data model.</source>
          <target state="new">At this point, the database is in sync with the data model.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you provided seed data, you can verify it by clicking <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GET tables/todoitem<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Try this out<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Send<ept id="p4">**</ept>.</source>
          <target state="new">If you provided seed data, you can verify it by clicking <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GET tables/todoitem<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Try this out<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Send<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information, see [Seeding data in migrations].</source>
          <target state="new">For more information, see [Seeding data in migrations].</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Now make a change to your data model, such as adding a new UserId property to the TodoItem type, rebuild the project, and then in the Package Manager, run the following command:</source>
          <target state="new">Now make a change to your data model, such as adding a new UserId property to the TodoItem type, rebuild the project, and then in the Package Manager, run the following command:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>PM&gt; Add-Migration NewUserId</source>
          <target state="new">PM&gt; Add-Migration NewUserId</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Press F5 again to restart the mobile service project on the local computer.</source>
          <target state="new">Press F5 again to restart the mobile service project on the local computer.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The migration is applied to the database and the database is again in sync with the data model.</source>
          <target state="new">The migration is applied to the database and the database is again in sync with the data model.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you provided seed data, you can verify it by clicking <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GET tables/todoitem<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Try this out<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Send<ept id="p4">**</ept>.</source>
          <target state="new">If you provided seed data, you can verify it by clicking <bpt id="p1">**</bpt>Try it out<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GET tables/todoitem<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Try this out<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Send<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see [Seeding data in migrations].</source>
          <target state="new">For more information, see [Seeding data in migrations].</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Republish the mobile service to Azure, then run the client app to access the data and verify that data loads and no error occur.</source>
          <target state="new">Republish the mobile service to Azure, then run the client app to access the data and verify that data loads and no error occur.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>(Optional) In the [Azure Management Portal], select your mobile service, click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>SQL Database<ept id="p2">**</ept>.</source>
          <target state="new">(Optional) In the [Azure Management Portal], select your mobile service, click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>SQL Database<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This navigates to the SQL Database page for your mobile service's database.</source>
          <target state="new">This navigates to the SQL Database page for your mobile service's database.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(Optional) Click <bpt id="p1">**</bpt>Manage<ept id="p1">**</ept>, log in to your SQL Database server, then click <bpt id="p2">**</bpt>Design<ept id="p2">**</ept> and verify that the schema changes have been made in Azure.</source>
          <target state="new">(Optional) Click <bpt id="p1">**</bpt>Manage<ept id="p1">**</ept>, log in to your SQL Database server, then click <bpt id="p2">**</bpt>Design<ept id="p2">**</ept> and verify that the schema changes have been made in Azure.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Using Code First Migrations without an initializer</source>
          <target state="new">Using Code First Migrations without an initializer</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Before you use Code First Migrations with your .NET backend project, you should run a data model initializer.</source>
          <target state="new">Before you use Code First Migrations with your .NET backend project, you should run a data model initializer.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you do NOT use an initializer, errors can occur when trying to apply migrations.</source>
          <target state="new">When you do NOT use an initializer, errors can occur when trying to apply migrations.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you choose not to use one of the pre-defined data model initializers, make sure that migrations is configured to use the EntityTableSqlGenerator as the SqlGenerator in the Migrations\Configuration.cs file, as in the following example:</source>
          <target state="new">If you choose not to use one of the pre-defined data model initializers, make sure that migrations is configured to use the EntityTableSqlGenerator as the SqlGenerator in the Migrations\Configuration.cs file, as in the following example:</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="seeding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Seeding data in migrations</source>
          <target state="new"><ph id="ph1">&lt;a name="seeding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Seeding data in migrations</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can have Migrations add seed data to the database when a migration is executed.</source>
          <target state="new">You can have Migrations add seed data to the database when a migration is executed.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Configuration<ept id="p1">**</ept> class has a <bpt id="p2">**</bpt>Seed<ept id="p2">**</ept> method that you can override to insert or update data.</source>
          <target state="new">The <bpt id="p1">**</bpt>Configuration<ept id="p1">**</ept> class has a <bpt id="p2">**</bpt>Seed<ept id="p2">**</ept> method that you can override to insert or update data.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The Configuration.cs code file is added to the Migrations folder when Migrations are enabled.</source>
          <target state="new">The Configuration.cs code file is added to the Migrations folder when Migrations are enabled.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>These examples show how to override the [Seed] method to seed data to the <bpt id="p1">**</bpt>TodoItems<ept id="p1">**</ept> table.</source>
          <target state="new">These examples show how to override the [Seed] method to seed data to the <bpt id="p1">**</bpt>TodoItems<ept id="p1">**</ept> table.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The [Seed] method is called after migrating to the latest version.</source>
          <target state="new">The [Seed] method is called after migrating to the latest version.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Seed a new table</source>
          <target state="new">Seed a new table</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following code seeds the <bpt id="p1">**</bpt>TodoItems<ept id="p1">**</ept> table with new rows of data:</source>
          <target state="new">The following code seeds the <bpt id="p1">**</bpt>TodoItems<ept id="p1">**</ept> table with new rows of data:</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Seed a new column in a table</source>
          <target state="new">Seed a new column in a table</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following code seeds just the UserId column:</source>
          <target state="new">The following code seeds just the UserId column:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This code calls the [AddOrUpdate] helper extension method to add seed data to the new UserId column.</source>
          <target state="new">This code calls the [AddOrUpdate] helper extension method to add seed data to the new UserId column.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>By using [AddOrUpdate], duplicate rows are not created.</source>
          <target state="new">By using [AddOrUpdate], duplicate rows are not created.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>[DropCreateDatab</source>
          <target state="new">[DropCreateDatab</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>]: https://msdn.microsoft.com/library/azure/dn643359.aspx</source>
          <target state="new">]: https://msdn.microsoft.com/library/azure/dn643359.aspx</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>[EntityData]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobile.service.entitydata.aspx</source>
          <target state="new">[EntityData]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.mobile.service.entitydata.aspx</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>[DbSet</source>
          <target state="new">[DbSet</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>]: https://msdn.microsoft.com/library/azure/gg696460.aspx

test</source>
          <target state="new">]: https://msdn.microsoft.com/library/azure/gg696460.aspx

test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89579ae492c37f23072b87ac04b3fdc8c2eda3cc</xliffext:olfilehash>
  </header>
</xliff>