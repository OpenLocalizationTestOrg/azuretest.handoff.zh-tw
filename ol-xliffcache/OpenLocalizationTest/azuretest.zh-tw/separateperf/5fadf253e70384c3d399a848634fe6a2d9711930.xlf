<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Advanced Usage of Reliable Services Programming Model</source>
          <target state="new">Advanced Usage of Reliable Services Programming Model</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about advanced usage of Service Fabric's Reliable Service programming model for added flexibility in your services.</source>
          <target state="new">Learn about advanced usage of Service Fabric's Reliable Service programming model for added flexibility in your services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Advanced usage of the Reliable Services programming model</source>
          <target state="new">Advanced usage of the Reliable Services programming model</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric simplifies writing and managing reliable stateless and stateful services.</source>
          <target state="new">Service Fabric simplifies writing and managing reliable stateless and stateful services.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will talk about advanced usages of the Reliable Services programming model to gain more control and flexibility over your services.</source>
          <target state="new">This guide will talk about advanced usages of the Reliable Services programming model to gain more control and flexibility over your services.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prior to reading this guide, familiarize yourself with <bpt id="p1">[</bpt>the Reliable Services programming model<ept id="p1">](service-fabric-reliable-services-introduction.md)</ept>.</source>
          <target state="new">Prior to reading this guide, familiarize yourself with <bpt id="p1">[</bpt>the Reliable Services programming model<ept id="p1">](service-fabric-reliable-services-introduction.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Stateless Service base classes</source>
          <target state="new">Stateless Service base classes</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The StatelessService base class provides CreateCommunicationListener() and RunAsync(), which is sufficient for the majority of stateless services.</source>
          <target state="new">The StatelessService base class provides CreateCommunicationListener() and RunAsync(), which is sufficient for the majority of stateless services.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The StatelessServiceBase class underlies StatelessService and exposes additional service lifecycle events.</source>
          <target state="new">The StatelessServiceBase class underlies StatelessService and exposes additional service lifecycle events.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can derive from StatelessServiceBase if you need additional control or flexibility.</source>
          <target state="new">You can derive from StatelessServiceBase if you need additional control or flexibility.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See the developer reference documentation on <bpt id="p1">[</bpt>StatelessService<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statelessservice.aspx)</ept> and <bpt id="p2">[</bpt>StatelessServiceBase<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statelessservicebase.aspx)</ept> for more information.</source>
          <target state="new">See the developer reference documentation on <bpt id="p1">[</bpt>StatelessService<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statelessservice.aspx)</ept> and <bpt id="p2">[</bpt>StatelessServiceBase<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statelessservicebase.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>OnInitialize is the first method called by Service Fabric.</source>
          <target state="new">OnInitialize is the first method called by Service Fabric.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Service initialization information is provided such as the service name, partition id, instance id, and code package information.</source>
          <target state="new">Service initialization information is provided such as the service name, partition id, instance id, and code package information.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>No complex processing should be done here.</source>
          <target state="new">No complex processing should be done here.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Lengthy initialization should be done in OnOpenAsync.</source>
          <target state="new">Lengthy initialization should be done in OnOpenAsync.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>OnOpenAsync is called when the stateless service instance is about to be used.</source>
          <target state="new">OnOpenAsync is called when the stateless service instance is about to be used.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Extended service initialization tasks can be started at this time.</source>
          <target state="new">Extended service initialization tasks can be started at this time.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>OnCloseAsync is called when the stateless service instance is going to be gracefully shutdown.</source>
          <target state="new">OnCloseAsync is called when the stateless service instance is going to be gracefully shutdown.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This can occur when the service's code is being upgraded, the service instance is being moved due to load balancing, or a transient fault is detected.</source>
          <target state="new">This can occur when the service's code is being upgraded, the service instance is being moved due to load balancing, or a transient fault is detected.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>OnCloseAsync can be used to safely close any resources, stop any background processing, finish saving external state, or close down existing connections.</source>
          <target state="new">OnCloseAsync can be used to safely close any resources, stop any background processing, finish saving external state, or close down existing connections.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>OnAbort is called when the stateless service instance is being forcefully shutdown.</source>
          <target state="new">OnAbort is called when the stateless service instance is being forcefully shutdown.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is generally called when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the service instance's lifecycle due to internal failures.</source>
          <target state="new">This is generally called when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the service instance's lifecycle due to internal failures.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Stateful Service base classes</source>
          <target state="new">Stateful Service base classes</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The StatefulService base class should be sufficient for most stateful services.</source>
          <target state="new">The StatefulService base class should be sufficient for most stateful services.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Similar to stateless services, the StatefulServiceBase class underlies StatefulService and exposes additional service lifecycle events.</source>
          <target state="new">Similar to stateless services, the StatefulServiceBase class underlies StatefulService and exposes additional service lifecycle events.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Additionally, it allows you to provide a custom reliable state provider and optionally support communication listeners on Secondaries.</source>
          <target state="new">Additionally, it allows you to provide a custom reliable state provider and optionally support communication listeners on Secondaries.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can derive from StatefulServiceBase if you need additional control or flexibility.</source>
          <target state="new">You can derive from StatefulServiceBase if you need additional control or flexibility.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See the developer reference documentation on <bpt id="p1">[</bpt>StatefulService<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statefulservice.aspx)</ept> and <bpt id="p2">[</bpt>StatefulServiceBase<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statefulservicebase.aspx)</ept> for more information.</source>
          <target state="new">See the developer reference documentation on <bpt id="p1">[</bpt>StatefulService<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statefulservice.aspx)</ept> and <bpt id="p2">[</bpt>StatefulServiceBase<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.servicefabric.services.statefulservicebase.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>OnChangeRoleAsync is called when the stateful service is changing roles, for example to Primary or Secondary.</source>
          <target state="new">OnChangeRoleAsync is called when the stateful service is changing roles, for example to Primary or Secondary.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Primary replicas are given write status (are allowed to create and write to the reliable collections), while Secondary replicas are given read status (can only read from existing reliable collections).</source>
          <target state="new">Primary replicas are given write status (are allowed to create and write to the reliable collections), while Secondary replicas are given read status (can only read from existing reliable collections).</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can start or update the background tasks in response to role changes, such as performing read-only validation, report generation, or data mining on a Secondary.</source>
          <target state="new">You can start or update the background tasks in response to role changes, such as performing read-only validation, report generation, or data mining on a Secondary.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A stateful service is expected to have a reliable state provider.</source>
          <target state="new">A stateful service is expected to have a reliable state provider.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>StatefulService uses the ReliableStateManager class, which provides the reliable collections (e.g. dictionaries and queues).</source>
          <target state="new">StatefulService uses the ReliableStateManager class, which provides the reliable collections (e.g. dictionaries and queues).</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You may want to supply your own provider if you wish to manage the state yourself, or extend the functionality of one of the built-in state providers.</source>
          <target state="new">You may want to supply your own provider if you wish to manage the state yourself, or extend the functionality of one of the built-in state providers.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By default, communication listeners are only created on Primaries.</source>
          <target state="new">By default, communication listeners are only created on Primaries.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Both StatefulService and StatefulServiceBase allow you to override this property to allow communication listeners to be created on Secondaries.</source>
          <target state="new">Both StatefulService and StatefulServiceBase allow you to override this property to allow communication listeners to be created on Secondaries.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You may want to allow your Secondaries to handle read-only requests, to improve the throughput on read-heavy workloads.</source>
          <target state="new">You may want to allow your Secondaries to handle read-only requests, to improve the throughput on read-heavy workloads.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> You are responsible for ensuring your Secondaries do not attempt to create or write to reliable collections.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> You are responsible for ensuring your Secondaries do not attempt to create or write to reliable collections.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Attempts to write on a Secondary will cause an exception which, if unhandled, will cause the replica to be closed and reopened.</source>
          <target state="new">Attempts to write on a Secondary will cause an exception which, if unhandled, will cause the replica to be closed and reopened.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>StatefulServiceBase also provides the same four lifecycle events as StatelessServiceBase, with the same semantics and use cases:</source>
          <target state="new">StatefulServiceBase also provides the same four lifecycle events as StatelessServiceBase, with the same semantics and use cases:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more advanced topics related to Service Fabric, see the following articles.</source>
          <target state="new">For more advanced topics related to Service Fabric, see the following articles.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Configuring Stateful Reliable Services</source>
          <target state="new">Configuring Stateful Reliable Services</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Service Fabric Health Introduction</source>
          <target state="new">Service Fabric Health Introduction</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Using System health reports for troubleshooting</source>
          <target state="new">Using System health reports for troubleshooting</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Placement Constraints Overview</source>
          <target state="new">Placement Constraints Overview</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Secure Replication traffic of Stateful Services in Azure Service Fabric</source>
          <target state="new">Secure Replication traffic of Stateful Services in Azure Service Fabric</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fadf253e70384c3d399a848634fe6a2d9711930</xliffext:olfilehash>
  </header>
</xliff>