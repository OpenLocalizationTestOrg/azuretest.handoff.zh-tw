<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transactions in SQL Data Warehouse | Microsoft Azure</source>
          <target state="new">Transactions in SQL Data Warehouse | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tips for implementing transactions in Azure SQL Data Warehouse for developing solutions.</source>
          <target state="new">Tips for implementing transactions in Azure SQL Data Warehouse for developing solutions.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Transactions in SQL Data Warehouse</source>
          <target state="new">Transactions in SQL Data Warehouse</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As you would expect SQL Data Warehouse does offer support for all transactional properties.</source>
          <target state="new">As you would expect SQL Data Warehouse does offer support for all transactional properties.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, to ensure the performance of SQL Data Warehouse is maintained at scale some features are limited when compared to SQL Server.</source>
          <target state="new">However, to ensure the performance of SQL Data Warehouse is maintained at scale some features are limited when compared to SQL Server.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article hightlights the differences and lists the others.</source>
          <target state="new">This article hightlights the differences and lists the others.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Transaction isolation levels</source>
          <target state="new">Transaction isolation levels</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SQL Data Warehouse implements ACID transactions.</source>
          <target state="new">SQL Data Warehouse implements ACID transactions.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, the Isolation of the transactional support is limited to <ph id="ph1">`READ UNCOMMITTED`</ph> and this cannot be changed.</source>
          <target state="new">However, the Isolation of the transactional support is limited to <ph id="ph1">`READ UNCOMMITTED`</ph> and this cannot be changed.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can implement a number of coding methods to prevent dirty reads of data if this is a concern for you.</source>
          <target state="new">You can implement a number of coding methods to prevent dirty reads of data if this is a concern for you.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The most popular methods leverage both CTAS and table partition switching (often known as the sliding window pattern) to prevent users from querying data that is still being prepared.</source>
          <target state="new">The most popular methods leverage both CTAS and table partition switching (often known as the sliding window pattern) to prevent users from querying data that is still being prepared.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Views that pre-filter the data is also a popular approach.</source>
          <target state="new">Views that pre-filter the data is also a popular approach.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Transaction state</source>
          <target state="new">Transaction state</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>SQL Data Warehouse uses the XACT_STATE() function to report a failed transaction using the value -2.</source>
          <target state="new">SQL Data Warehouse uses the XACT_STATE() function to report a failed transaction using the value -2.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This means that the transaction has failed and is marked for rollback only</source>
          <target state="new">This means that the transaction has failed and is marked for rollback only</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The use of -2 by the XACT_STATE function to denote a failed transaction represents different behavior to SQL Server.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The use of -2 by the XACT_STATE function to denote a failed transaction represents different behavior to SQL Server.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>SQL Server uses the value -1 to represent an un-committable transaction.</source>
          <target state="new">SQL Server uses the value -1 to represent an un-committable transaction.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SQL Server can tolerate some errors inside a transaction without it having to be marked as un-committable.</source>
          <target state="new">SQL Server can tolerate some errors inside a transaction without it having to be marked as un-committable.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example SELECT 1/0 would cause an error but not force a transaction into an un-committable state.</source>
          <target state="new">For example SELECT 1/0 would cause an error but not force a transaction into an un-committable state.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>SQL Server also permits reads in the un-committable transaction.</source>
          <target state="new">SQL Server also permits reads in the un-committable transaction.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, in SQLDW this is not the case.</source>
          <target state="new">However, in SQLDW this is not the case.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If an error occurs inside a SQLDW transaction it will automatically enter the -2 state: including SELECT 1/0 errors.</source>
          <target state="new">If an error occurs inside a SQLDW transaction it will automatically enter the -2 state: including SELECT 1/0 errors.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is therefore important to check that your application code to see if it uses  XACT_STATE().</source>
          <target state="new">It is therefore important to check that your application code to see if it uses  XACT_STATE().</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In SQL Server you might see a code fragment that looks like this:</source>
          <target state="new">In SQL Server you might see a code fragment that looks like this:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`SELECT`</ph> statement occurs before the <ph id="ph2">`ROLLBACK`</ph> statement.</source>
          <target state="new">Notice that the <ph id="ph1">`SELECT`</ph> statement occurs before the <ph id="ph2">`ROLLBACK`</ph> statement.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Also note that the setting of the <ph id="ph1">`@xact`</ph> variable uses DECLARE and not <ph id="ph2">`SELECT`</ph>.</source>
          <target state="new">Also note that the setting of the <ph id="ph1">`@xact`</ph> variable uses DECLARE and not <ph id="ph2">`SELECT`</ph>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In SQL Data Warehouse the code would need to look like this:</source>
          <target state="new">In SQL Data Warehouse the code would need to look like this:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notice that the rollback of the transaction has to happen before the read of the error information in the <ph id="ph1">`CATCH`</ph> Block.</source>
          <target state="new">Notice that the rollback of the transaction has to happen before the read of the error information in the <ph id="ph1">`CATCH`</ph> Block.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Error_Line() function</source>
          <target state="new">Error_Line() function</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is also worth noting that SQL Data Warehouse does not implement or support the ERROR_LINE() function.</source>
          <target state="new">It is also worth noting that SQL Data Warehouse does not implement or support the ERROR_LINE() function.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you have this in your code you will need to remove it to be compliant with SQL Data Warehouse.</source>
          <target state="new">If you have this in your code you will need to remove it to be compliant with SQL Data Warehouse.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use query labels in your code instead to implement equivalent functionality.</source>
          <target state="new">Use query labels in your code instead to implement equivalent functionality.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Please refer to the [query labels] article for more details on this feature.</source>
          <target state="new">Please refer to the [query labels] article for more details on this feature.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Using THROW and RAISERROR</source>
          <target state="new">Using THROW and RAISERROR</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>THROW is the more modern implementation for raising exceptions in SQL Data Warehouse but RAISERROR is also supported.</source>
          <target state="new">THROW is the more modern implementation for raising exceptions in SQL Data Warehouse but RAISERROR is also supported.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There are a few differences that are worth paying attention to however.</source>
          <target state="new">There are a few differences that are worth paying attention to however.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>User defined error messages numbers cannot be in the 100,000 - 150,000 range for THROW</source>
          <target state="new">User defined error messages numbers cannot be in the 100,000 - 150,000 range for THROW</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>RAISERROR error messages are fixed at 50,000</source>
          <target state="new">RAISERROR error messages are fixed at 50,000</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use of sys.messages is not supported</source>
          <target state="new">Use of sys.messages is not supported</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Limitiations</source>
          <target state="new">Limitiations</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>SQL Data Warehouse does have a few other restrictions that relate to transactions.</source>
          <target state="new">SQL Data Warehouse does have a few other restrictions that relate to transactions.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>They are as follows:</source>
          <target state="new">They are as follows:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>No distributed transactions</source>
          <target state="new">No distributed transactions</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>No nested transactions permitted</source>
          <target state="new">No nested transactions permitted</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>No save points allowed</source>
          <target state="new">No save points allowed</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</source>
          <target state="new">For more development tips, see <bpt id="p1">[</bpt>development overview<ept id="p1">][]</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5796b28265c73ce8fba2f19c3bd00c1d3bfb42b5</xliffext:olfilehash>
  </header>
</xliff>