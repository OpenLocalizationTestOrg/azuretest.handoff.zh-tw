{
  "nodes": [
    {
      "content": "Best Practices for Handling State in Azure Resource Manager Templates",
      "pos": [
        27,
        96
      ]
    },
    {
      "content": "Shows recommended approaches for using complex objects to share state data with Azure Resource Manager templates and linked templates",
      "pos": [
        115,
        248
      ]
    },
    {
      "content": "Sharing state in Azure Resource Manager templates",
      "pos": [
        577,
        626
      ]
    },
    {
      "content": "This topic shows best practices for managing and sharing state within an Azure Resource Manager template and across linked templates.",
      "pos": [
        628,
        761
      ]
    },
    {
      "content": "The parameters and variables shown in this topic are examples of the type of objects you can define to conveniently organize your deployment requirements.",
      "pos": [
        762,
        916
      ]
    },
    {
      "content": "From these examples, you can implement your own objects with property values that make sense for your environment.",
      "pos": [
        917,
        1031
      ]
    },
    {
      "content": "Using complex objects to share state",
      "pos": [
        1036,
        1072
      ]
    },
    {
      "content": "In addition to single-value parameters, you can use complex objects as parameters in an Azure Resource Manager template.",
      "pos": [
        1074,
        1194
      ]
    },
    {
      "content": "With complex objects, you can implement and reference collections of data for a specific area",
      "pos": [
        1195,
        1288
      ]
    },
    {
      "content": "such as t-shirt size (for describing a virtual machine), network settings, operating system (OS) settings, and availability settings.",
      "pos": [
        1290,
        1423
      ]
    },
    {
      "content": "The following example shows how to define variables that contain complex objects for representing collections of data.",
      "pos": [
        1425,
        1543
      ]
    },
    {
      "content": "The collections define values that are used for virtual machine size, network settings,",
      "pos": [
        1544,
        1631
      ]
    },
    {
      "content": "operating system settings and availability settings.",
      "pos": [
        1633,
        1685
      ]
    },
    {
      "content": "You can then reference these variables later in the template.",
      "pos": [
        3068,
        3129
      ]
    },
    {
      "content": "The ability to reference named-variables and their properties simplifies the template syntax,",
      "pos": [
        3130,
        3223
      ]
    },
    {
      "content": "and makes it easy to understand context.",
      "pos": [
        3225,
        3265
      ]
    },
    {
      "content": "The following example defines a resource to deploy by using the objects shown above to set values.",
      "pos": [
        3266,
        3364
      ]
    },
    {
      "content": "For example, note that the VM size is set by retrieving the value",
      "pos": [
        3365,
        3430
      ]
    },
    {
      "content": "for <ph id=\"ph1\">`variables('tshirtSize').vmSize`</ph> while the value for the disk size is retrieved from <ph id=\"ph2\">`variables('tshirtSize').diskSize`</ph>.",
      "pos": [
        3432,
        3556
      ]
    },
    {
      "content": "In addition, the URI for a linked template is set with the",
      "pos": [
        3557,
        3615
      ]
    },
    {
      "content": "value for <ph id=\"ph1\">`variables('tshirtSize').vmTemplate`</ph>.",
      "pos": [
        3617,
        3664
      ]
    },
    {
      "content": "Passing state to a template and its linked templates",
      "pos": [
        5255,
        5307
      ]
    },
    {
      "content": "You can share state information into a template and its linked templates through:",
      "pos": [
        5309,
        5390
      ]
    },
    {
      "content": "parameters that you provide directly to the main template during deployment",
      "pos": [
        5394,
        5469
      ]
    },
    {
      "content": "parameters, static variables, and generated variables that the main template shares with its linked templates",
      "pos": [
        5472,
        5581
      ]
    },
    {
      "content": "Common parameters provided to the main template",
      "pos": [
        5587,
        5634
      ]
    },
    {
      "content": "The following table lists commonly-used parameters in templates.",
      "pos": [
        5636,
        5700
      ]
    },
    {
      "content": "Commonly used parameters passed to the main template",
      "pos": [
        5704,
        5756
      ]
    },
    {
      "content": "Name",
      "pos": [
        5760,
        5764
      ]
    },
    {
      "content": "Value",
      "pos": [
        5767,
        5772
      ]
    },
    {
      "content": "Description",
      "pos": [
        5775,
        5786
      ]
    },
    {
      "content": "location",
      "pos": [
        5814,
        5822
      ]
    },
    {
      "content": "String from a constrained list of Azure regions",
      "pos": [
        5828,
        5875
      ]
    },
    {
      "content": "The location where the resources will be deployed.",
      "pos": [
        5880,
        5930
      ]
    },
    {
      "content": "storageAccountNamePrefix",
      "pos": [
        5931,
        5955
      ]
    },
    {
      "content": "String",
      "pos": [
        5961,
        5967
      ]
    },
    {
      "content": "Unique DNS name for the Storage Account where the VM's disks will be placed",
      "pos": [
        5973,
        6048
      ]
    },
    {
      "content": "domainName",
      "pos": [
        6049,
        6059
      ]
    },
    {
      "content": "String",
      "pos": [
        6063,
        6069
      ]
    },
    {
      "pos": [
        6075,
        6236
      ],
      "content": "Domain name of the publicly accessible jumpbox VM in the format: <bpt id=\"p1\">**</bpt>{domainName}.{location}.cloudapp.com<ept id=\"p1\">**</ept> For example: <bpt id=\"p2\">**</bpt>mydomainname.westus.cloudapp.azure.com<ept id=\"p2\">**</ept>"
    },
    {
      "content": "adminUsername",
      "pos": [
        6237,
        6250
      ]
    },
    {
      "content": "String",
      "pos": [
        6255,
        6261
      ]
    },
    {
      "content": "Username for the VMs",
      "pos": [
        6267,
        6287
      ]
    },
    {
      "content": "adminPassword",
      "pos": [
        6288,
        6301
      ]
    },
    {
      "content": "String",
      "pos": [
        6306,
        6312
      ]
    },
    {
      "content": "Password for the VMs",
      "pos": [
        6318,
        6338
      ]
    },
    {
      "content": "tshirtSize",
      "pos": [
        6339,
        6349
      ]
    },
    {
      "content": "String from a constrained list of offered t-shirt sizes",
      "pos": [
        6353,
        6408
      ]
    },
    {
      "content": "The named scale unit size to provision.",
      "pos": [
        6413,
        6452
      ]
    },
    {
      "content": "For example, \"Small\", \"Medium\", \"Large\"",
      "pos": [
        6453,
        6492
      ]
    },
    {
      "content": "virtualNetworkName",
      "pos": [
        6493,
        6511
      ]
    },
    {
      "content": "String",
      "pos": [
        6515,
        6521
      ]
    },
    {
      "content": "Name of the virtual network that the consumer wants to use.",
      "pos": [
        6527,
        6586
      ]
    },
    {
      "content": "enableJumpbox",
      "pos": [
        6587,
        6600
      ]
    },
    {
      "content": "String from a constrained list (enabled/disabled)",
      "pos": [
        6605,
        6654
      ]
    },
    {
      "content": "Parameter that identifies whether to enable a jumpbox for the environment.",
      "pos": [
        6657,
        6731
      ]
    },
    {
      "content": "Values: \"enabled\", \"disabled\"",
      "pos": [
        6732,
        6761
      ]
    },
    {
      "content": "Parameters sent to linked templates",
      "pos": [
        6767,
        6802
      ]
    },
    {
      "content": "When connecting to linked templates, you will often use a mix of static and generated variables.",
      "pos": [
        6804,
        6900
      ]
    },
    {
      "content": "Static variables",
      "pos": [
        6907,
        6923
      ]
    },
    {
      "content": "Static variables are often used to provide base values, such as URLs, that are used throughout a template or as values that are used to compose values for dynamic variables.",
      "pos": [
        6925,
        7098
      ]
    },
    {
      "content": "In the template excerpt below, <bpt id=\"p1\">*</bpt>templateBaseUrl<ept id=\"p1\">*</ept> specifies the root location for the template in GitHub.",
      "pos": [
        7100,
        7204
      ]
    },
    {
      "content": "The next line builds a new variable <bpt id=\"p1\">*</bpt>sharedTemplateUrl<ept id=\"p1\">*</ept> that concatenates the",
      "pos": [
        7205,
        7282
      ]
    },
    {
      "content": "value of <bpt id=\"p1\">*</bpt>templateBaseUrl<ept id=\"p1\">*</ept> with the known name of the shared resources template.",
      "pos": [
        7284,
        7364
      ]
    },
    {
      "content": "Below that, a complex object variable is used to store a t-shirt size, where the <bpt id=\"p1\">*</bpt>templateBaseUrl<ept id=\"p1\">*</ept> is",
      "pos": [
        7365,
        7466
      ]
    },
    {
      "content": "concatenated to specify the known configuration template location stored in the <bpt id=\"p1\">*</bpt>vmTemplate<ept id=\"p1\">*</ept> property.",
      "pos": [
        7468,
        7570
      ]
    },
    {
      "content": "The benefit of this approach is you can easily move, fork, or use the template as a base for a new one.",
      "pos": [
        7572,
        7675
      ]
    },
    {
      "content": "If the template location changes, you only need to change the static variable",
      "pos": [
        7676,
        7753
      ]
    },
    {
      "content": "in the one place — the main template — which passes it throughout the templates.",
      "pos": [
        7755,
        7835
      ]
    },
    {
      "content": "Generated variables",
      "pos": [
        8453,
        8472
      ]
    },
    {
      "content": "In addition to static variables, a number of variables are generated dynamically.",
      "pos": [
        8474,
        8555
      ]
    },
    {
      "content": "This section identifies some of the common types of generated variables.",
      "pos": [
        8556,
        8628
      ]
    },
    {
      "content": "tshirtSize",
      "pos": [
        8636,
        8646
      ]
    },
    {
      "pos": [
        8648,
        8812
      ],
      "content": "When calling the main template, you can select a t-shirt size from a fixed number of options, which typically include values such as <bpt id=\"p1\">*</bpt>Small<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Medium<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>Large<ept id=\"p3\">*</ept>."
    },
    {
      "pos": [
        8814,
        8892
      ],
      "content": "In the main template, this option appears as a parameter such as <bpt id=\"p1\">*</bpt>tshirtSize<ept id=\"p1\">*</ept>:"
    },
    {
      "content": "Within the main template, variables correspond to each of the sizes.",
      "pos": [
        9153,
        9221
      ]
    },
    {
      "content": "For example, if the available sizes are small, medium, and large, the variables section would include variables",
      "pos": [
        9222,
        9333
      ]
    },
    {
      "content": "named <bpt id=\"p1\">*</bpt>tshirtSizeSmall<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>tshirtSizeMedium<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>tshirtSizeLarge<ept id=\"p3\">*</ept>.",
      "pos": [
        9335,
        9402
      ]
    },
    {
      "content": "As the following example shows, these variables define the properties of a particular t-shirt size.",
      "pos": [
        9404,
        9503
      ]
    },
    {
      "content": "Each identifies the VM type, disk size, associated scale unit resource template",
      "pos": [
        9504,
        9583
      ]
    },
    {
      "content": "to link to, number of instances, storage account details, and jumpbox status.",
      "pos": [
        9585,
        9662
      ]
    },
    {
      "content": "The storage account name prefix is taken from a parameter supplied by a user, and the linked template is the concatenation of the base URL for the template and the filename of a specific scale unit resource template.",
      "pos": [
        9664,
        9880
      ]
    },
    {
      "content": "The <bpt id=\"p1\">*</bpt>tshirtSize<ept id=\"p1\">*</ept> variable appears further down in the variables section.",
      "pos": [
        11014,
        11086
      ]
    },
    {
      "content": "The end of the t-shirt size you provided (<bpt id=\"p1\">*</bpt>Small<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Medium<ept id=\"p2\">*</ept>, <bpt id=\"p3\">*</bpt>Large<ept id=\"p3\">*</ept>) is concatenated with the text <bpt id=\"p4\">*</bpt>tshirtSize<ept id=\"p4\">*</ept> to retrieve the",
      "pos": [
        11087,
        11215
      ]
    },
    {
      "content": "associated complex object variable for that t-shirt size:",
      "pos": [
        11217,
        11274
      ]
    },
    {
      "content": "This variable is passed to the linked scale unit resource template.",
      "pos": [
        11358,
        11425
      ]
    },
    {
      "content": "networkSettings",
      "pos": [
        11433,
        11448
      ]
    },
    {
      "content": "In a capacity, capability, or end-to-end scoped solution template, the linked templates typically create resources that exist on a network.",
      "pos": [
        11450,
        11589
      ]
    },
    {
      "content": "One straightforward approach is to use a complex object to store",
      "pos": [
        11590,
        11654
      ]
    },
    {
      "content": "network settings and pass them to linked templates.",
      "pos": [
        11656,
        11707
      ]
    },
    {
      "content": "An example of communicating network settings can be seen below.",
      "pos": [
        11709,
        11772
      ]
    },
    {
      "content": "availabilitySettings",
      "pos": [
        12220,
        12240
      ]
    },
    {
      "content": "Resources created in linked templates are often placed in an availability set.",
      "pos": [
        12242,
        12320
      ]
    },
    {
      "content": "In the following example, the availability set name is specified and also the fault domain and update domain count to use.",
      "pos": [
        12321,
        12443
      ]
    },
    {
      "content": "If you need multiple availability sets (for example, one for master nodes and another for data nodes), you can use a name as a prefix, specify multiple availability sets, or follow the model shown earlier",
      "pos": [
        12562,
        12766
      ]
    },
    {
      "content": "for creating a variable for a specific t-shirt size.",
      "pos": [
        12768,
        12820
      ]
    },
    {
      "content": "storageSettings",
      "pos": [
        12828,
        12843
      ]
    },
    {
      "content": "Storage details are often shared with linked templates.",
      "pos": [
        12845,
        12900
      ]
    },
    {
      "content": "In the example below, a <bpt id=\"p1\">*</bpt>storageSettings<ept id=\"p1\">*</ept> object provides details about the storage account and container names.",
      "pos": [
        12901,
        13013
      ]
    },
    {
      "content": "osSettings",
      "pos": [
        13384,
        13394
      ]
    },
    {
      "content": "With linked templates, you may need to pass operating system settings to various nodes types across different known configuration types.",
      "pos": [
        13396,
        13532
      ]
    },
    {
      "content": "A complex object is an easy way to store and share operating system information and also makes",
      "pos": [
        13533,
        13627
      ]
    },
    {
      "content": "it easier to support multiple operating system choices for deployment.",
      "pos": [
        13629,
        13699
      ]
    },
    {
      "pos": [
        13701,
        13756
      ],
      "content": "The following example shows an object for <bpt id=\"p1\">*</bpt>osSettings<ept id=\"p1\">*</ept>:"
    },
    {
      "content": "machineSettings",
      "pos": [
        13950,
        13965
      ]
    },
    {
      "content": "A generated variable, <bpt id=\"p1\">*</bpt>machineSettings<ept id=\"p1\">*</ept> is a complex object containing a mix of core variables for creating a new VM: administrator user name and password, a prefix for the VM names, and an operating",
      "pos": [
        13967,
        14166
      ]
    },
    {
      "content": "system image reference as shown below:",
      "pos": [
        14168,
        14206
      ]
    },
    {
      "content": "Note that <bpt id=\"p1\">*</bpt>osImageReference<ept id=\"p1\">*</ept> retrieves the values from the <bpt id=\"p2\">*</bpt>osSettings<ept id=\"p2\">*</ept> variable defined in the main template.",
      "pos": [
        14663,
        14773
      ]
    },
    {
      "content": "That means you can easily change the operating system for a VM—entirely or based",
      "pos": [
        14774,
        14854
      ]
    },
    {
      "content": "on the preference of a template consumer.",
      "pos": [
        14856,
        14897
      ]
    },
    {
      "content": "vmScripts",
      "pos": [
        14905,
        14914
      ]
    },
    {
      "content": "The <bpt id=\"p1\">*</bpt>vmScripts<ept id=\"p1\">*</ept> object contains details about the scripts to download and execute on a VM instance, including outside and inside references.",
      "pos": [
        14916,
        15056
      ]
    },
    {
      "content": "Outside references include the infrastructure.",
      "pos": [
        15057,
        15103
      ]
    },
    {
      "content": "Inside references include the installed software installed and configuration.",
      "pos": [
        15105,
        15182
      ]
    },
    {
      "pos": [
        15184,
        15267
      ],
      "content": "You use the <bpt id=\"p1\">*</bpt>scriptsToDownload<ept id=\"p1\">*</ept> property to list the scripts to download to the VM."
    },
    {
      "content": "As the example below shows, this object also contains references to command-line arguments for different types of actions.",
      "pos": [
        15269,
        15391
      ]
    },
    {
      "content": "These actions include executing the default installation for",
      "pos": [
        15392,
        15452
      ]
    },
    {
      "content": "each individual node, an installation that runs after all nodes are deployed, and any additional scripts that may be specific to a given template.",
      "pos": [
        15454,
        15600
      ]
    },
    {
      "content": "This example is from a template used to deploy MongoDB, which requires an arbiter to deliver high availability.",
      "pos": [
        15602,
        15713
      ]
    },
    {
      "content": "The <bpt id=\"p1\">*</bpt>arbiterNodeInstallCommand<ept id=\"p1\">*</ept> has been added to <bpt id=\"p2\">*</bpt>vmScripts<ept id=\"p2\">*</ept> to install the arbiter.",
      "pos": [
        15714,
        15799
      ]
    },
    {
      "content": "The variables section is where you’ll find the variables that define the specific text to execute the script with the proper values.",
      "pos": [
        15801,
        15933
      ]
    },
    {
      "content": "Returning state from a template",
      "pos": [
        16430,
        16461
      ]
    },
    {
      "content": "Not only can you pass data into a template, you can also share data back to the calling template.",
      "pos": [
        16463,
        16560
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>outputs<ept id=\"p1\">**</ept> section of a linked template, you can provide key/value pairs that can be consumed",
      "pos": [
        16561,
        16662
      ]
    },
    {
      "content": "by the source template.",
      "pos": [
        16664,
        16687
      ]
    },
    {
      "content": "The following example shows how to pass the private IP address generated in a linked template.",
      "pos": [
        16689,
        16783
      ]
    },
    {
      "content": "Within the main template, you can use that data with the following syntax:",
      "pos": [
        16976,
        17050
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        17156,
        17166
      ]
    },
    {
      "content": "Authoring Azure Resource Manager Templates",
      "pos": [
        17170,
        17212
      ]
    },
    {
      "content": "Azure Resource Manager Template Functions",
      "pos": [
        17256,
        17297
      ]
    },
    {
      "content": "test",
      "pos": [
        17339,
        17343
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Best Practices for Handling State in Azure Resource Manager Templates\"\n    description=\"Shows recommended approaches for using complex objects to share state data with Azure Resource Manager templates and linked templates\"\n    services=\"azure-resource-manager\"\n    documentationCenter=\"\"\n    authors=\"mmercuri\"\n    manager=\"georgem\"\n    editor=\"tysonn\"/>\n\n<tags\n    ms.service=\"azure-resource-manager\"\n    ms.workload=\"multiple\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"09/02/2015\"\n    ms.author=\"mmercuri\"/>\n\n# Sharing state in Azure Resource Manager templates\n\nThis topic shows best practices for managing and sharing state within an Azure Resource Manager template and across linked templates. The parameters and variables shown in this topic are examples of the type of objects you can define to conveniently organize your deployment requirements. From these examples, you can implement your own objects with property values that make sense for your environment.\n\n## Using complex objects to share state\n\nIn addition to single-value parameters, you can use complex objects as parameters in an Azure Resource Manager template. With complex objects, you can implement and reference collections of data for a specific area \nsuch as t-shirt size (for describing a virtual machine), network settings, operating system (OS) settings, and availability settings.\n\nThe following example shows how to define variables that contain complex objects for representing collections of data. The collections define values that are used for virtual machine size, network settings, \noperating system settings and availability settings.\n\n    \"tshirtSizeLarge\": {\n      \"vmSize\": \"Standard_A4\",\n      \"diskSize\": 1023,\n      \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-16disk-resources.json')]\",\n      \"vmCount\": 3,\n      \"slaveCount\": 2,\n      \"storage\": {\n        \"name\": \"[parameters('storageAccountNamePrefix')]\",\n        \"count\": 2,\n        \"pool\": \"db\",\n        \"map\": [0,1,1],\n        \"jumpbox\": 0\n      }\n    },\n    \"osSettings\": {\n      \"scripts\": [\n        \"[concat(variables('templateBaseUrl'), 'install_postgresql.sh')]\",\n        \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh\"\n      ],\n      \"imageReference\": {\n                \"publisher\": \"Canonical\",\n        \"offer\": \"UbuntuServer\",\n        \"sku\": \"14.04.2-LTS\",\n        \"version\": \"latest\"\n      }\n    },\n    \"networkSettings\": {\n      \"vnetName\": \"[parameters('virtualNetworkName')]\",\n      \"addressPrefix\": \"10.0.0.0/16\",\n      \"subnets\": {\n        \"dmz\": {\n          \"name\": \"dmz\",\n          \"prefix\": \"10.0.0.0/24\",\n          \"vnet\": \"[parameters('virtualNetworkName')]\"\n        },\n        \"data\": {\n          \"name\": \"data\",\n          \"prefix\": \"10.0.1.0/24\",\n          \"vnet\": \"[parameters('virtualNetworkName')]\"\n        }\n      }\n    },\n    \"availabilitySetSettings\": {\n      \"name\": \"pgsqlAvailabilitySet\",\n      \"fdCount\": 3,\n      \"udCount\": 5\n    }\n\nYou can then reference these variables later in the template. The ability to reference named-variables and their properties simplifies the template syntax, \nand makes it easy to understand context. The following example defines a resource to deploy by using the objects shown above to set values. For example, note that the VM size is set by retrieving the value \nfor `variables('tshirtSize').vmSize` while the value for the disk size is retrieved from `variables('tshirtSize').diskSize`. In addition, the URI for a linked template is set with the \nvalue for `variables('tshirtSize').vmTemplate`.\n\n    \"name\": \"master-node\",\n    \"type\": \"Microsoft.Resources/deployments\",\n    \"apiVersion\": \"2015-01-01\",\n    \"dependsOn\": [\n        \"[concat('Microsoft.Resources/deployments/', 'shared')]\"\n    ],\n    \"properties\": {\n        \"mode\": \"Incremental\",\n        \"templateLink\": {\n          \"uri\": \"[variables('tshirtSize').vmTemplate]\",\n          \"contentVersion\": \"1.0.0.0\"\n        },\n        \"parameters\": {\n          \"adminPassword\": {\n            \"value\": \"[parameters('adminPassword')]\"\n          },\n          \"replicatorPassword\": {\n            \"value\": \"[parameters('replicatorPassword')]\"\n          },\n          \"osSettings\": {\n        \"value\": \"[variables('osSettings')]\"\n          },\n          \"subnet\": {\n            \"value\": \"[variables('networkSettings').subnets.data]\"\n          },\n          \"commonSettings\": {\n            \"value\": {\n              \"region\": \"[parameters('region')]\",\n              \"adminUsername\": \"[parameters('adminUsername')]\",\n              \"namespace\": \"ms\"\n            }\n          },\n          \"storageSettings\": {\n            \"value\":\"[variables('tshirtSize').storage]\"\n          },\n          \"machineSettings\": {\n            \"value\": {\n              \"vmSize\": \"[variables('tshirtSize').vmSize]\",\n              \"diskSize\": \"[variables('tshirtSize').diskSize]\",\n              \"vmCount\": 1,\n              \"availabilitySet\": \"[variables('availabilitySetSettings').name]\"\n            }\n          },\n          \"masterIpAddress\": {\n            \"value\": \"0\"\n          },\n          \"dbType\": {\n            \"value\": \"MASTER\"\n          }\n        }\n      }\n    }\n\n## Passing state to a template and its linked templates\n\nYou can share state information into a template and its linked templates through:\n\n- parameters that you provide directly to the main template during deployment\n- parameters, static variables, and generated variables that the main template shares with its linked templates\n\n### Common parameters provided to the main template\n\nThe following table lists commonly-used parameters in templates.\n\n**Commonly used parameters passed to the main template**\n\nName | Value | Description\n---- | ----- | -----------\nlocation    | String from a constrained list of Azure regions   | The location where the resources will be deployed.\nstorageAccountNamePrefix    | String    | Unique DNS name for the Storage Account where the VM's disks will be placed\ndomainName  | String    | Domain name of the publicly accessible jumpbox VM in the format: **{domainName}.{location}.cloudapp.com** For example: **mydomainname.westus.cloudapp.azure.com**\nadminUsername   | String    | Username for the VMs\nadminPassword   | String    | Password for the VMs\ntshirtSize  | String from a constrained list of offered t-shirt sizes   | The named scale unit size to provision. For example, \"Small\", \"Medium\", \"Large\"\nvirtualNetworkName  | String    | Name of the virtual network that the consumer wants to use.\nenableJumpbox   | String from a constrained list (enabled/disabled) | Parameter that identifies whether to enable a jumpbox for the environment. Values: \"enabled\", \"disabled\"\n\n### Parameters sent to linked templates\n\nWhen connecting to linked templates, you will often use a mix of static and generated variables.\n\n#### Static variables\n\nStatic variables are often used to provide base values, such as URLs, that are used throughout a template or as values that are used to compose values for dynamic variables.\n\nIn the template excerpt below, *templateBaseUrl* specifies the root location for the template in GitHub. The next line builds a new variable *sharedTemplateUrl* that concatenates the \nvalue of *templateBaseUrl* with the known name of the shared resources template. Below that, a complex object variable is used to store a t-shirt size, where the *templateBaseUrl* is \nconcatenated to specify the known configuration template location stored in the *vmTemplate* property.\n\nThe benefit of this approach is you can easily move, fork, or use the template as a base for a new one. If the template location changes, you only need to change the static variable \nin the one place — the main template — which passes it throughout the templates.\n\n    \"templateBaseUrl\": \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/postgresql-on-ubuntu/\",\n    \"sharedTemplateUrl\": \"[concat(variables('templateBaseUrl'), 'shared-resources.json')]\",\n    \"tshirtSizeSmall\": {\n      \"vmSize\": \"Standard_A1\",\n      \"diskSize\": 1023,\n      \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-2disk-resources.json')]\",\n      \"vmCount\": 2,\n      \"slaveCount\": 1,\n      \"storage\": {\n        \"name\": \"[parameters('storageAccountNamePrefix')]\",\n        \"count\": 1,\n        \"pool\": \"db\",\n        \"map\": [0,0],\n        \"jumpbox\": 0\n      }\n    }\n\n#### Generated variables\n\nIn addition to static variables, a number of variables are generated dynamically. This section identifies some of the common types of generated variables.\n\n##### tshirtSize\n\nWhen calling the main template, you can select a t-shirt size from a fixed number of options, which typically include values such as *Small*, *Medium*, and *Large*.\n\nIn the main template, this option appears as a parameter such as *tshirtSize*:\n\n    \"tshirtSize\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"Small\",\n      \"allowedValues\": [\n        \"Small\",\n        \"Medium\",\n        \"Large\"\n      ],\n      \"metadata\": {\n        \"Description\": \"T-shirt size of the MongoDB deployment\"\n      }\n    }\n\nWithin the main template, variables correspond to each of the sizes. For example, if the available sizes are small, medium, and large, the variables section would include variables \nnamed *tshirtSizeSmall*, *tshirtSizeMedium*, and *tshirtSizeLarge*.\n\nAs the following example shows, these variables define the properties of a particular t-shirt size. Each identifies the VM type, disk size, associated scale unit resource template \nto link to, number of instances, storage account details, and jumpbox status.\n\nThe storage account name prefix is taken from a parameter supplied by a user, and the linked template is the concatenation of the base URL for the template and the filename of a specific scale unit resource template.\n\n    \"tshirtSizeSmall\": {\n      \"vmSize\": \"Standard_A1\",\n            \"diskSize\": 1023,\n      \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-2disk-resources.json')]\",\n      \"vmCount\": 2,\n      \"storage\": {\n        \"name\": \"[parameters('storageAccountNamePrefix')]\",\n        \"count\": 1,\n        \"pool\": \"db\",\n        \"map\": [0,0],\n        \"jumpbox\": 0\n      }\n    },\n    \"tshirtSizeMedium\": {\n      \"vmSize\": \"Standard_A3\",\n      \"diskSize\": 1023,\n      \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-8disk-resources.json')]\",\n      \"vmCount\": 2,\n      \"storage\": {\n        \"name\": \"[parameters('storageAccountNamePrefix')]\",\n        \"count\": 2,\n        \"pool\": \"db\",\n        \"map\": [0,1],\n        \"jumpbox\": 0\n      }\n    },\n    \"tshirtSizeLarge\": {\n      \"vmSize\": \"Standard_A4\",\n      \"diskSize\": 1023,\n      \"vmTemplate\": \"[concat(variables('templateBaseUrl'), 'database-16disk-resources.json')]\",\n      \"vmCount\": 3,\n      \"storage\": {\n        \"name\": \"[parameters('storageAccountNamePrefix')]\",\n        \"count\": 2,\n        \"pool\": \"db\",\n        \"map\": [0,1,1],\n        \"jumpbox\": 0\n      }\n    }\n\nThe *tshirtSize* variable appears further down in the variables section. The end of the t-shirt size you provided (*Small*, *Medium*, *Large*) is concatenated with the text *tshirtSize* to retrieve the \nassociated complex object variable for that t-shirt size:\n\n    \"tshirtSize\": \"[variables(concat('tshirtSize', parameters('tshirtSize')))]\",\n\nThis variable is passed to the linked scale unit resource template.\n\n##### networkSettings\n\nIn a capacity, capability, or end-to-end scoped solution template, the linked templates typically create resources that exist on a network. One straightforward approach is to use a complex object to store \nnetwork settings and pass them to linked templates.\n\nAn example of communicating network settings can be seen below.\n\n    \"networkSettings\": {\n      \"vnetName\": \"[parameters('virtualNetworkName')]\",\n      \"addressPrefix\": \"10.0.0.0/16\",\n      \"subnets\": {\n        \"dmz\": {\n          \"name\": \"dmz\",\n          \"prefix\": \"10.0.0.0/24\",\n          \"vnet\": \"[parameters('virtualNetworkName')]\"\n        },\n        \"data\": {\n          \"name\": \"data\",\n          \"prefix\": \"10.0.1.0/24\",\n          \"vnet\": \"[parameters('virtualNetworkName')]\"\n        }\n      }\n    }\n\n##### availabilitySettings\n\nResources created in linked templates are often placed in an availability set. In the following example, the availability set name is specified and also the fault domain and update domain count to use.\n\n    \"availabilitySetSettings\": {\n      \"name\": \"pgsqlAvailabilitySet\",\n      \"fdCount\": 3,\n      \"udCount\": 5\n    }\n\nIf you need multiple availability sets (for example, one for master nodes and another for data nodes), you can use a name as a prefix, specify multiple availability sets, or follow the model shown earlier \nfor creating a variable for a specific t-shirt size.\n\n##### storageSettings\n\nStorage details are often shared with linked templates. In the example below, a *storageSettings* object provides details about the storage account and container names.\n\n    \"storageSettings\": {\n        \"vhdStorageAccountName\": \"[parameters('storageAccountName')]\",\n        \"vhdContainerName\": \"[variables('vmStorageAccountContainerName')]\",\n        \"destinationVhdsContainer\": \"[concat('https://', parameters('storageAccountName'), variables('vmStorageAccountDomain'), '/', variables('vmStorageAccountContainerName'), '/')]\"\n    }\n\n##### osSettings\n\nWith linked templates, you may need to pass operating system settings to various nodes types across different known configuration types. A complex object is an easy way to store and share operating system information and also makes \nit easier to support multiple operating system choices for deployment.\n\nThe following example shows an object for *osSettings*:\n\n    \"osSettings\": {\n      \"imageReference\": {\n        \"publisher\": \"Canonical\",\n        \"offer\": \"UbuntuServer\",\n        \"sku\": \"14.04.2-LTS\",\n        \"version\": \"latest\"\n      }\n    }\n\n##### machineSettings\n\nA generated variable, *machineSettings* is a complex object containing a mix of core variables for creating a new VM: administrator user name and password, a prefix for the VM names, and an operating \nsystem image reference as shown below:\n\n    \"machineSettings\": {\n        \"adminUsername\": \"[parameters('adminUsername')]\",\n        \"adminPassword\": \"[parameters('adminPassword')]\",\n        \"machineNamePrefix\": \"mongodb-\",\n        \"osImageReference\": {\n            \"publisher\": \"[variables('osFamilySpec').imagePublisher]\",\n            \"offer\": \"[variables('osFamilySpec').imageOffer]\",\n            \"sku\": \"[variables('osFamilySpec').imageSKU]\",\n            \"version\": \"latest\"\n        }\n    },\n\nNote that *osImageReference* retrieves the values from the *osSettings* variable defined in the main template. That means you can easily change the operating system for a VM—entirely or based \non the preference of a template consumer.\n\n##### vmScripts\n\nThe *vmScripts* object contains details about the scripts to download and execute on a VM instance, including outside and inside references. Outside references include the infrastructure. \nInside references include the installed software installed and configuration.\n\nYou use the *scriptsToDownload* property to list the scripts to download to the VM.\n\nAs the example below shows, this object also contains references to command-line arguments for different types of actions. These actions include executing the default installation for \neach individual node, an installation that runs after all nodes are deployed, and any additional scripts that may be specific to a given template.\n\nThis example is from a template used to deploy MongoDB, which requires an arbiter to deliver high availability. The *arbiterNodeInstallCommand* has been added to *vmScripts* to install the arbiter.\n\nThe variables section is where you’ll find the variables that define the specific text to execute the script with the proper values.\n\n    \"vmScripts\": {\n        \"scriptsToDownload\": [\n            \"[concat(variables('scriptUrl'), 'mongodb-', variables('osFamilySpec').osName, '-install.sh')]\",\n            \"[concat(variables('sharedScriptUrl'), 'vm-disk-utils-0.1.sh')]\"\n        ],\n        \"regularNodeInstallCommand\": \"[variables('installCommand')]\",\n        \"lastNodeInstallCommand\": \"[concat(variables('installCommand'), ' -l')]\",\n        \"arbiterNodeInstallCommand\": \"[concat(variables('installCommand'), ' -a')]\"\n    },\n\n\n## Returning state from a template\n\nNot only can you pass data into a template, you can also share data back to the calling template. In the **outputs** section of a linked template, you can provide key/value pairs that can be consumed \nby the source template.\n\nThe following example shows how to pass the private IP address generated in a linked template.\n\n    \"outputs\": {\n        \"masterip\": {\n            \"value\": \"[reference(concat(variables('nicName'),0)).ipConfigurations[0].privateIPAddress]\",\n            \"type\": \"string\"\n         }\n    }\n\nWithin the main template, you can use that data with the following syntax:\n\n    \"masterIpAddress\": {\n        \"value\": \"[reference('master-node').outputs.masterip.value]\"\n    }\n\n## Next steps\n- [Authoring Azure Resource Manager Templates](resource-group-authoring-templates.md)\n- [Azure Resource Manager Template Functions](resource-group-template-functions.md)\n\n\ntest\n"
}