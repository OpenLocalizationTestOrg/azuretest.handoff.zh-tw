{
  "nodes": [
    {
      "content": "Getting Started with Azure storage and Visual Studio connected services (WebJob projects)",
      "pos": [
        28,
        117
      ]
    },
    {
      "content": "How to get started using Azure table storage in an Azure WebJobs 5 project in Visual Studio",
      "pos": [
        137,
        228
      ]
    },
    {
      "content": "Getting Started with Azure Storage (Azure WebJob Projects)",
      "pos": [
        540,
        598
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        602,
        618
      ]
    },
    {
      "content": "Getting started",
      "pos": [
        624,
        639
      ]
    },
    {
      "content": "What happened",
      "pos": [
        692,
        705
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        747,
        763
      ]
    },
    {
      "content": "Blobs",
      "pos": [
        769,
        774
      ]
    },
    {
      "content": "Queues",
      "pos": [
        826,
        832
      ]
    },
    {
      "content": "Tables",
      "pos": [
        885,
        891
      ]
    },
    {
      "content": "Overview",
      "pos": [
        945,
        953
      ]
    },
    {
      "content": "This article provides C# code samples that show show how to use the Azure WebJobs SDK version 1.x with the Azure table storage service.",
      "pos": [
        955,
        1090
      ]
    },
    {
      "content": "The code samples use the <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](websites-dotnet-webjobs-sdk.md)</ept> version 1.x.",
      "pos": [
        1091,
        1174
      ]
    },
    {
      "content": "The Azure Table storage service enables you to store large amounts of structured data.",
      "pos": [
        1177,
        1263
      ]
    },
    {
      "content": "The service is a NoSQL datastore that accepts authenticated calls from inside and outside the Azure cloud.",
      "pos": [
        1264,
        1370
      ]
    },
    {
      "content": "Azure tables are ideal for storing structured, non-relational data.",
      "pos": [
        1371,
        1438
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>How to use Table Storage from .NET<ept id=\"p1\">]</ept><bpt id=\"p2\">(storage-dotnet-how-to-use-tables.md/#create-a-table \"</bpt>How to use Table Storage from .NET<ept id=\"p2\">\")</ept> for more information.",
      "pos": [
        1440,
        1592
      ]
    },
    {
      "pos": [
        1603,
        1806
      ],
      "content": "Some of the code snippets show the <ph id=\"ph1\">`Table`</ph> attribute used in functions that are <bpt id=\"p1\">[</bpt>called manually<ept id=\"p1\">](vs-storage-webjobs-getting-started-blobs.md#manual)</ept>, that is, not by using one of the trigger attributes."
    },
    {
      "content": "How to add entities to a table",
      "pos": [
        1811,
        1841
      ]
    },
    {
      "content": "To add entities to a table, use the <ph id=\"ph1\">`Table`</ph> attribute with an <ph id=\"ph2\">`ICollector&lt;T&gt;`</ph> or <ph id=\"ph3\">`IAsyncCollector&lt;T&gt;`</ph> parameter where <ph id=\"ph4\">`T`</ph> specifies the schema of the entities you want to add.",
      "pos": [
        1843,
        2018
      ]
    },
    {
      "content": "The attribute constructor takes a string parameter that specifies the name of the table.",
      "pos": [
        2019,
        2107
      ]
    },
    {
      "pos": [
        2110,
        2186
      ],
      "content": "The following code sample adds <ph id=\"ph1\">`Person`</ph> entities to a table named <bpt id=\"p1\">*</bpt>Ingress<ept id=\"p1\">*</ept>."
    },
    {
      "content": "Typically the type you use with <ph id=\"ph1\">`ICollector`</ph> derives from <ph id=\"ph2\">`TableEntity`</ph> or implements <ph id=\"ph3\">`ITableEntity`</ph>, but it doesn't have to.",
      "pos": [
        2644,
        2769
      ]
    },
    {
      "content": "Either of the following <ph id=\"ph1\">`Person`</ph> classes work with the code shown in the preceding <ph id=\"ph2\">`Ingress`</ph> method.",
      "pos": [
        2770,
        2870
      ]
    },
    {
      "pos": [
        3174,
        3301
      ],
      "content": "If you want to work directly with the Azure storage API, you can add a <ph id=\"ph1\">`CloudStorageAccount`</ph> parameter to the method signature."
    },
    {
      "content": "Real-time monitoring",
      "pos": [
        3305,
        3325
      ]
    },
    {
      "content": "Because data ingress functions often process large volumes of data, the WebJobs SDK dashboard provides real-time monitoring data.",
      "pos": [
        3327,
        3456
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Invocation Log<ept id=\"p1\">**</ept> section tells you if the function is still running.",
      "pos": [
        3457,
        3531
      ]
    },
    {
      "content": "Ingress function running",
      "pos": [
        3535,
        3559
      ]
    },
    {
      "pos": [
        3632,
        3785
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Invocation Details<ept id=\"p1\">**</ept> page reports the function's progress (number of entities written) while it's running and gives you an opportunity to abort it."
    },
    {
      "content": "Ingress function running",
      "pos": [
        3790,
        3814
      ]
    },
    {
      "pos": [
        3888,
        3983
      ],
      "content": "When the function finishes, the <bpt id=\"p1\">**</bpt>Invocation Details<ept id=\"p1\">**</ept> page reports the number of rows written."
    },
    {
      "content": "Ingress function finished",
      "pos": [
        3987,
        4012
      ]
    },
    {
      "content": "How to read multiple entities from a table",
      "pos": [
        4087,
        4129
      ]
    },
    {
      "pos": [
        4131,
        4279
      ],
      "content": "To read a table, use the <ph id=\"ph1\">`Table`</ph> attribute with an <ph id=\"ph2\">`IQueryable&lt;T&gt;`</ph> parameter where type <ph id=\"ph3\">`T`</ph> derives from <ph id=\"ph4\">`TableEntity`</ph> or implements <ph id=\"ph5\">`ITableEntity`</ph>."
    },
    {
      "pos": [
        4281,
        4356
      ],
      "content": "The following code sample reads and logs all rows from the <ph id=\"ph1\">`Ingress`</ph> table:"
    },
    {
      "content": "How to read a single entity from a table",
      "pos": [
        4778,
        4818
      ]
    },
    {
      "pos": [
        4820,
        4990
      ],
      "content": "There is a <ph id=\"ph1\">`Table`</ph> attribute constructor with two additional parameters that let you specify the partition key and row key when you want to bind to a single table entity."
    },
    {
      "pos": [
        4992,
        5128
      ],
      "content": "The following code sample reads a table row for a <ph id=\"ph1\">`Person`</ph> entity based on partition key and row key values received in a queue message:"
    },
    {
      "pos": [
        5804,
        5881
      ],
      "content": "The <ph id=\"ph1\">`Person`</ph> class in this example does not have to implement <ph id=\"ph2\">`ITableEntity`</ph>."
    },
    {
      "content": "How to use the .NET Storage API directly to work with a table",
      "pos": [
        5885,
        5946
      ]
    },
    {
      "pos": [
        5948,
        6059
      ],
      "content": "You can also use the <ph id=\"ph1\">`Table`</ph> attribute with a <ph id=\"ph2\">`CloudTable`</ph> object for more flexibility in working with a table."
    },
    {
      "pos": [
        6061,
        6160
      ],
      "content": "The following code sample uses a <ph id=\"ph1\">`CloudTable`</ph> object to add a single entity to the <bpt id=\"p1\">*</bpt>Ingress<ept id=\"p1\">*</ept> table."
    },
    {
      "pos": [
        6629,
        6773
      ],
      "content": "For more information about how to use the <ph id=\"ph1\">`CloudTable`</ph> object, see <bpt id=\"p1\">[</bpt>How to use Table Storage from .NET<ept id=\"p1\">](../storage-dotnet-how-to-use-tables.md)</ept>."
    },
    {
      "content": "Related topics covered by the queues how-to article",
      "pos": [
        6778,
        6829
      ]
    },
    {
      "pos": [
        6831,
        7081
      ],
      "content": "For information about how to handle table processing triggered by a queue message, or for WebJobs SDK scenarios not specific to table processing, see <bpt id=\"p1\">[</bpt>How to use Azure queue storage with the WebJobs SDK<ept id=\"p1\">](vs-storage-webjobs-getting-started-queues.md)</ept>."
    },
    {
      "content": "Next steps",
      "pos": [
        7088,
        7098
      ]
    },
    {
      "content": "This article has provided code samples that show how to handle common scenarios for working with Azure tables.",
      "pos": [
        7100,
        7210
      ]
    },
    {
      "content": "For more information about how to use Azure WebJobs and the WebJobs SDK, see <bpt id=\"p1\">[</bpt>Azure WebJobs Recommended Resources<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=390226)</ept>.",
      "pos": [
        7211,
        7373
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Getting Started with Azure storage and Visual Studio connected services (WebJob projects)\" \n    description=\"How to get started using Azure table storage in an Azure WebJobs 5 project in Visual Studio\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"patshea123\"\n    manager=\"douge\"\n    editor=\"tglee\"/>\n\n<tags \n    ms.service=\"storage\"\n    ms.workload=\"web\"\n    ms.tgt_pltfrm=\"vs-getting-started\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"07/13/2015\"\n    ms.author=\"patshea123\"/>\n\n# Getting Started with Azure Storage (Azure WebJob Projects)\n\n> [AZURE.SELECTOR]\n> - [Getting started](vs-storage-webjobs-getting-started-tables.md)\n> - [What happened](vs-storage-webjobs-what-happened.md)\n\n> [AZURE.SELECTOR]\n> - [Blobs](vs-storage-webjobs-getting-started-blobs.md)\n> - [Queues](vs-storage-webjobs-getting-started-queues.md)\n> - [Tables](vs-storage-webjobs-getting-started-tables.md)\n\n\n\n## Overview\n\nThis article provides C# code samples that show show how to use the Azure WebJobs SDK version 1.x with the Azure table storage service. The code samples use the [WebJobs SDK](websites-dotnet-webjobs-sdk.md) version 1.x. \n\nThe Azure Table storage service enables you to store large amounts of structured data. The service is a NoSQL datastore that accepts authenticated calls from inside and outside the Azure cloud. Azure tables are ideal for storing structured, non-relational data.  See [How to use Table Storage from .NET](storage-dotnet-how-to-use-tables.md/#create-a-table \"How to use Table Storage from .NET\") for more information.\n\n        \nSome of the code snippets show the `Table` attribute used in functions that are [called manually](vs-storage-webjobs-getting-started-blobs.md#manual), that is, not by using one of the trigger attributes. \n\n##How to add entities to a table\n\nTo add entities to a table, use the `Table` attribute with an `ICollector<T>` or `IAsyncCollector<T>` parameter where `T` specifies the schema of the entities you want to add. The attribute constructor takes a string parameter that specifies the name of the table. \n\nThe following code sample adds `Person` entities to a table named *Ingress*.\n\n        [NoAutomaticTrigger]\n        public static void IngressDemo(\n            [Table(\"Ingress\")] ICollector<Person> tableBinding)\n        {\n            for (int i = 0; i < 100000; i++)\n            {\n                tableBinding.Add(\n                    new Person() { \n                        PartitionKey = \"Test\", \n                        RowKey = i.ToString(), \n                        Name = \"Name\" }\n                    );\n            }\n        }\n\nTypically the type you use with `ICollector` derives from `TableEntity` or implements `ITableEntity`, but it doesn't have to. Either of the following `Person` classes work with the code shown in the preceding `Ingress` method.\n\n        public class Person : TableEntity\n        {\n            public string Name { get; set; }\n        }\n\n        public class Person\n        {\n            public string PartitionKey { get; set; }\n            public string RowKey { get; set; }\n            public string Name { get; set; }\n        }\n\nIf you want to work directly with the Azure storage API, you can add a `CloudStorageAccount` parameter to the method signature.\n\n##Real-time monitoring\n\nBecause data ingress functions often process large volumes of data, the WebJobs SDK dashboard provides real-time monitoring data. The **Invocation Log** section tells you if the function is still running.\n\n![Ingress function running](./media/vs-storage-webjobs-getting-started-tables/ingressrunning.png)\n\nThe **Invocation Details** page reports the function's progress (number of entities written) while it's running and gives you an opportunity to abort it. \n\n![Ingress function running](./media/vs-storage-webjobs-getting-started-tables/ingressprogress.png)\n\nWhen the function finishes, the **Invocation Details** page reports the number of rows written.\n\n![Ingress function finished](./media/vs-storage-webjobs-getting-started-tables/ingresssuccess.png)\n\n##How to read multiple entities from a table\n\nTo read a table, use the `Table` attribute with an `IQueryable<T>` parameter where type `T` derives from `TableEntity` or implements `ITableEntity`.\n\nThe following code sample reads and logs all rows from the `Ingress` table:\n \n        public static void ReadTable(\n            [Table(\"Ingress\")] IQueryable<Person> tableBinding,\n            TextWriter logger)\n        {\n            var query = from p in tableBinding select p;\n            foreach (Person person in query)\n            {\n                logger.WriteLine(\"PK:{0}, RK:{1}, Name:{2}\", \n                    person.PartitionKey, person.RowKey, person.Name);\n            }\n        }\n\n###How to read a single entity from a table\n\nThere is a `Table` attribute constructor with two additional parameters that let you specify the partition key and row key when you want to bind to a single table entity.\n\nThe following code sample reads a table row for a `Person` entity based on partition key and row key values received in a queue message:  \n\n        public static void ReadTableEntity(\n            [QueueTrigger(\"inputqueue\")] Person personInQueue,\n            [Table(\"persontable\",\"{PartitionKey}\", \"{RowKey}\")] Person personInTable,\n            TextWriter logger)\n        {\n            if (personInTable == null)\n            {\n                logger.WriteLine(\"Person not found: PK:{0}, RK:{1}\",\n                        personInQueue.PartitionKey, personInQueue.RowKey);\n            }\n            else\n            {\n                logger.WriteLine(\"Person found: PK:{0}, RK:{1}, Name:{2}\",\n                        personInTable.PartitionKey, personInTable.RowKey, personInTable.Name);\n            }\n        }\n\n\nThe `Person` class in this example does not have to implement `ITableEntity`.\n\n##How to use the .NET Storage API directly to work with a table\n\nYou can also use the `Table` attribute with a `CloudTable` object for more flexibility in working with a table.\n\nThe following code sample uses a `CloudTable` object to add a single entity to the *Ingress* table. \n \n        public static void UseStorageAPI(\n            [Table(\"Ingress\")] CloudTable tableBinding,\n            TextWriter logger)\n        {\n            var person = new Person()\n                {\n                    PartitionKey = \"Test\",\n                    RowKey = \"100\",\n                    Name = \"Name\"\n                };\n            TableOperation insertOperation = TableOperation.Insert(person);\n            tableBinding.Execute(insertOperation);\n        }\n\nFor more information about how to use the `CloudTable` object, see [How to use Table Storage from .NET](../storage-dotnet-how-to-use-tables.md). \n\n##Related topics covered by the queues how-to article\n\nFor information about how to handle table processing triggered by a queue message, or for WebJobs SDK scenarios not specific to table processing, see [How to use Azure queue storage with the WebJobs SDK](vs-storage-webjobs-getting-started-queues.md). \n\n\n\n##Next steps\n\nThis article has provided code samples that show how to handle common scenarios for working with Azure tables. For more information about how to use Azure WebJobs and the WebJobs SDK, see [Azure WebJobs Recommended Resources](http://go.microsoft.com/fwlink/?linkid=390226).\n "
}