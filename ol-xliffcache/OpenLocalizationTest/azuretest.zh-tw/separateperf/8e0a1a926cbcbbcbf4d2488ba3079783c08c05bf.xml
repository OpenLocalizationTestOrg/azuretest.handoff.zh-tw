{
  "nodes": [
    {
      "content": "Azure Notification Hubs Rich Push",
      "pos": [
        27,
        60
      ]
    },
    {
      "content": "Learn how to send rich push notifications to an iOS app from Azure.",
      "pos": [
        79,
        146
      ]
    },
    {
      "content": "Code samples written in Objective-C and C#.",
      "pos": [
        147,
        190
      ]
    },
    {
      "content": "Azure Notification Hubs Rich Push",
      "pos": [
        510,
        543
      ]
    },
    {
      "content": "Overview",
      "pos": [
        548,
        556
      ]
    },
    {
      "content": "In order to engage users with instant rich contents, an application might want to push beyond plain text.",
      "pos": [
        558,
        663
      ]
    },
    {
      "content": "These notifications promote user interactions and  present content such as urls, sounds, images/coupons, and more.",
      "pos": [
        664,
        778
      ]
    },
    {
      "content": "This tutorial builds on the <bpt id=\"p1\">[</bpt>Notify Users<ept id=\"p1\">](notification-hubs-aspnet-backend-ios-notify-users.md)</ept> topic, and shows how to send push notifications that incorporate payloads (for example, image).",
      "pos": [
        779,
        971
      ]
    },
    {
      "content": "This tutorial is compatible with iOS 7 &amp; 8.",
      "pos": [
        974,
        1017
      ]
    },
    {
      "content": "At a high level:",
      "pos": [
        1032,
        1048
      ]
    },
    {
      "content": "The app backend:",
      "pos": [
        1053,
        1069
      ]
    },
    {
      "content": "Stores the rich payload (in this case, image) in the backend database/local storage",
      "pos": [
        1076,
        1159
      ]
    },
    {
      "content": "Sends ID of this rich notification to the device",
      "pos": [
        1166,
        1214
      ]
    },
    {
      "content": "App on the device:",
      "pos": [
        1218,
        1236
      ]
    },
    {
      "content": "Contacts the backend requesting the rich payload with the ID it receives",
      "pos": [
        1243,
        1315
      ]
    },
    {
      "content": "Sends users notifications on the device when data retrieval is complete, and shows the payload immediately when users tap to learn more",
      "pos": [
        1322,
        1457
      ]
    },
    {
      "content": "WebAPI Project",
      "pos": [
        1463,
        1477
      ]
    },
    {
      "pos": [
        1482,
        1634
      ],
      "content": "In Visual Studio, open the <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> project that you created in the <bpt id=\"p2\">[</bpt>Notify Users<ept id=\"p2\">](notification-hubs-aspnet-backend-ios-notify-users.md)</ept> tutorial."
    },
    {
      "pos": [
        1638,
        1749
      ],
      "content": "Obtain an image you would like to notify users with, and put it in an <bpt id=\"p1\">**</bpt>img<ept id=\"p1\">**</ept> folder in your project directory."
    },
    {
      "pos": [
        1753,
        1857
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Show All Files<ept id=\"p1\">**</ept> in the Solution Explorer, and right-click the folder to <bpt id=\"p2\">**</bpt>Include In Project<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        1861,
        1956
      ],
      "content": "With the image selected, change its Build Action in Properties window to <bpt id=\"p1\">**</bpt>Embedded Resource<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        1976,
        2035
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Notifications.cs<ept id=\"p1\">**</ept>, add the following using statement:"
    },
    {
      "content": "Update the whole <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> class with the following code.",
      "pos": [
        2074,
        2139
      ]
    },
    {
      "content": "Be sure to replace the placeholders with your notification hub credentials and image file name.",
      "pos": [
        2140,
        2235
      ]
    },
    {
      "pos": [
        4003,
        4196
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>  (optional) Refer to <bpt id=\"p1\">[</bpt>How to embed and access resources by using Visual C#<ept id=\"p1\">](http://support.microsoft.com/kb/319292)</ept> for more information on how to add and obtain project resources."
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>NotificationsController.cs<ept id=\"p1\">**</ept>, redefine <bpt id=\"p2\">**</bpt>NotificationsController<ept id=\"p2\">**</ept>  with the following snippets.",
      "pos": [
        4201,
        4302
      ]
    },
    {
      "content": "This sends an initial silent rich notification id to device and allows client-side retrieval of image:",
      "pos": [
        4303,
        4405
      ]
    },
    {
      "content": "Now we will re-deploy this app to an Azure Website in order to make it accessible from all devices.",
      "pos": [
        5908,
        6007
      ]
    },
    {
      "content": "Right-click on the <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> project and select <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>.",
      "pos": [
        6008,
        6073
      ]
    },
    {
      "content": "Select Azure Website as your publish target.",
      "pos": [
        6078,
        6122
      ]
    },
    {
      "content": "Log in with your Azure account and select an existing or new Website, and make a note of the <bpt id=\"p1\">**</bpt>destination URL<ept id=\"p1\">**</ept> property in the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> tab.",
      "pos": [
        6123,
        6271
      ]
    },
    {
      "content": "We will refer to this URL as your <bpt id=\"p1\">*</bpt>backend endpoint<ept id=\"p1\">*</ept> later in this tutorial.",
      "pos": [
        6272,
        6348
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>.",
      "pos": [
        6349,
        6367
      ]
    },
    {
      "content": "Modify the iOS project",
      "pos": [
        6372,
        6394
      ]
    },
    {
      "pos": [
        6396,
        6576
      ],
      "content": "Now that you have modified your app backend to send just the <bpt id=\"p1\">*</bpt>id<ept id=\"p1\">*</ept> of a notification, you will change your iOS app to handle that id and retrieve the rich message from your backend."
    },
    {
      "pos": [
        6581,
        6696
      ],
      "content": "Open your iOS project, and enable remote notifications by going to your main app target in the <bpt id=\"p1\">**</bpt>Targets<ept id=\"p1\">**</ept> section."
    },
    {
      "pos": [
        6701,
        6806
      ],
      "content": "Click on <bpt id=\"p1\">**</bpt>Capabilities<ept id=\"p1\">**</ept>, turn on <bpt id=\"p2\">**</bpt>Background Modes<ept id=\"p2\">**</ept>, and check the <bpt id=\"p3\">**</bpt>Remote Notifications<ept id=\"p3\">**</ept> checkbox."
    },
    {
      "pos": [
        6826,
        7030
      ],
      "content": "Go to <bpt id=\"p1\">**</bpt>Main.storyboard<ept id=\"p1\">**</ept>, and make sure you have a View Controller (refered to as Home View Controller in this tutorial) from <bpt id=\"p2\">[</bpt>Notify User<ept id=\"p2\">](notification-hubs-aspnet-backend-ios-notify-users.md)</ept> tutorial."
    },
    {
      "content": "Add a <bpt id=\"p1\">**</bpt>Navigation Controller<ept id=\"p1\">**</ept> to your storyboard, and control-drag to Home View Controller to make it the <bpt id=\"p2\">**</bpt>root view<ept id=\"p2\">**</ept> of navigation.",
      "pos": [
        7035,
        7171
      ]
    },
    {
      "content": "Make sure the <bpt id=\"p1\">**</bpt>Is Initial View Controller<ept id=\"p1\">**</ept> in Attributes inspector is selected for the Navigation Controller only.",
      "pos": [
        7172,
        7288
      ]
    },
    {
      "content": "Add a <bpt id=\"p1\">**</bpt>View Controller<ept id=\"p1\">**</ept> to storyboard and add an <bpt id=\"p2\">**</bpt>Image View<ept id=\"p2\">**</ept>.",
      "pos": [
        7293,
        7359
      ]
    },
    {
      "content": "This is the page users will see once they choose to learn more by clicking on the notifiication.",
      "pos": [
        7360,
        7456
      ]
    },
    {
      "content": "Your storyboard should look as follows:",
      "pos": [
        7457,
        7496
      ]
    },
    {
      "pos": [
        7516,
        7688
      ],
      "content": "Click on the <bpt id=\"p1\">**</bpt>Home View Controller<ept id=\"p1\">**</ept> in storyboard, and make sure it has <bpt id=\"p2\">**</bpt>homeViewController<ept id=\"p2\">**</ept> as its <bpt id=\"p3\">**</bpt>Custom Class<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Storyboard ID<ept id=\"p4\">**</ept> under the Identity inspector."
    },
    {
      "pos": [
        7693,
        7758
      ],
      "content": "Do the same for Image View Controller as <bpt id=\"p1\">**</bpt>imageViewController<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        7763,
        7869
      ],
      "content": "Then, create a new View Controller class titled <bpt id=\"p1\">**</bpt>imageViewController<ept id=\"p1\">**</ept> to handle the UI you just created."
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>imageViewController.h<ept id=\"p1\">**</ept>, add the following to the controller's interface declarations.",
      "pos": [
        7874,
        7965
      ]
    },
    {
      "content": "Make sure to control-drag from the storyboard image view to these properties to link the two:",
      "pos": [
        7966,
        8059
      ]
    },
    {
      "pos": [
        8183,
        8261
      ],
      "content": "In <bpt id=\"p1\">**</bpt>imageViewController.m<ept id=\"p1\">**</ept>, add the following at the end of <bpt id=\"p2\">**</bpt>viewDidload<ept id=\"p2\">**</ept>:"
    },
    {
      "pos": [
        8368,
        8430
      ],
      "content": "In <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept>, import the image controller you created:"
    },
    {
      "content": "Add an interface section with the following declaration:",
      "pos": [
        8477,
        8533
      ]
    },
    {
      "pos": [
        8997,
        9121
      ],
      "content": "In <bpt id=\"p1\">**</bpt>AppDelegate<ept id=\"p1\">**</ept>, make sure your app registers for silent notifications in <bpt id=\"p2\">**</bpt>application: didFinishLaunchingWithOptions<ept id=\"p2\">**</ept>:"
    },
    {
      "pos": [
        11345,
        11503
      ],
      "content": "Subsitute in the following implementation for <bpt id=\"p1\">**</bpt>application:didRegisterForRemoteNotificationsWithDeviceToken<ept id=\"p1\">**</ept> to take the storyboard UI changes into account:"
    },
    {
      "content": "Then, add the following methods to <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> to retrieve the image from your endpoint and send a local notification when retrieval is complete.",
      "pos": [
        11881,
        12032
      ]
    },
    {
      "content": "Make sure to substitute the placeholder <ph id=\"ph1\">`{backend endpoint}`</ph> with your backend endpoint:",
      "pos": [
        12033,
        12121
      ]
    },
    {
      "pos": [
        16345,
        16469
      ],
      "content": "Handle the local notification above by opening up the image view controller in <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> with the following methods:"
    },
    {
      "content": "Run the Application",
      "pos": [
        18918,
        18937
      ]
    },
    {
      "content": "In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).",
      "pos": [
        18942,
        19041
      ]
    },
    {
      "pos": [
        19046,
        19153
      ],
      "content": "In the iOS app UI, enter a username and password of the same value for authentication and click <bpt id=\"p1\">**</bpt>Log In<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Send push<ept id=\"p1\">**</ept> and you should see an in-app alert.",
      "pos": [
        19158,
        19213
      ]
    },
    {
      "content": "If you click on <bpt id=\"p1\">**</bpt>More<ept id=\"p1\">**</ept>, you will be brought to the image you chose to include in your app backend.",
      "pos": [
        19214,
        19314
      ]
    },
    {
      "content": "You can also click <bpt id=\"p1\">**</bpt>Send push<ept id=\"p1\">**</ept> and immediately press the home button of your device.",
      "pos": [
        19319,
        19405
      ]
    },
    {
      "content": "In a few moments, you will receive a push notification.",
      "pos": [
        19406,
        19461
      ]
    },
    {
      "content": "If you tap on it or click More, you will be brought to your app and the rich image content.",
      "pos": [
        19462,
        19553
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure Notification Hubs Rich Push\"\n    description=\"Learn how to send rich push notifications to an iOS app from Azure. Code samples written in Objective-C and C#.\"\n    documentationCenter=\"ios\"\n    services=\"notification-hubs\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"06/16/2015\"\n    ms.author=\"wesmc\"/>\n\n#Azure Notification Hubs Rich Push\n\n\n##Overview\n\nIn order to engage users with instant rich contents, an application might want to push beyond plain text. These notifications promote user interactions and  present content such as urls, sounds, images/coupons, and more. This tutorial builds on the [Notify Users](notification-hubs-aspnet-backend-ios-notify-users.md) topic, and shows how to send push notifications that incorporate payloads (for example, image).\n\n\nThis tutorial is compatible with iOS 7 & 8.\n\n  ![][IOS1]\n\nAt a high level:\n\n1. The app backend:\n    - Stores the rich payload (in this case, image) in the backend database/local storage\n    - Sends ID of this rich notification to the device\n2. App on the device:\n    - Contacts the backend requesting the rich payload with the ID it receives\n    - Sends users notifications on the device when data retrieval is complete, and shows the payload immediately when users tap to learn more\n\n\n## WebAPI Project\n\n1. In Visual Studio, open the **AppBackend** project that you created in the [Notify Users](notification-hubs-aspnet-backend-ios-notify-users.md) tutorial.\n2. Obtain an image you would like to notify users with, and put it in an **img** folder in your project directory.\n3. Click **Show All Files** in the Solution Explorer, and right-click the folder to **Include In Project**.\n4. With the image selected, change its Build Action in Properties window to **Embedded Resource**.\n\n    ![][IOS2]\n\n5. In **Notifications.cs**, add the following using statement:\n\n        using System.Reflection;\n\n6. Update the whole **Notifications** class with the following code. Be sure to replace the placeholders with your notification hub credentials and image file name.\n\n        public class Notification {\n            public int Id { get; set; }\n            // Initial notification message to display to users\n            public string Message { get; set; }\n            // Type of rich payload (developer-defined)\n            public string RichType { get; set; }\n            public string Payload { get; set; }\n            public bool Read { get; set; }\n        }\n\n        public class Notifications {\n            public static Notifications Instance = new Notifications();\n\n            private List<Notification> notifications = new List<Notification>();\n\n            public NotificationHubClient Hub { get; set; }\n\n            private Notifications() {\n                // Placeholders: replace with the connection string (with full access) for your notification hub and the hub name from the Azure Management Portal\n                Hub = NotificationHubClient.CreateClientFromConnectionString(\"{conn string with full access}\",  \"{hub name}\");\n            }\n\n            public Notification CreateNotification(string message, string richType, string payload) {\n                var notification = new Notification() {\n                    Id = notifications.Count,\n                    Message = message,\n                    RichType = richType,\n                    Payload = payload,\n                    Read = false\n                };\n\n                notifications.Add(notification);\n\n                return notification;\n            }\n\n            public Stream ReadImage(int id) {\n                var assembly = Assembly.GetExecutingAssembly();\n                // Placeholder: image file name (for example, logo.png).\n                return assembly.GetManifestResourceStream(\"AppBackend.img.{logo.png}\");\n            }\n        }\n\n> [AZURE.NOTE]  (optional) Refer to [How to embed and access resources by using Visual C#](http://support.microsoft.com/kb/319292) for more information on how to add and obtain project resources.\n\n7. In **NotificationsController.cs**, redefine **NotificationsController**  with the following snippets. This sends an initial silent rich notification id to device and allows client-side retrieval of image:\n\n        // Return http response with image binary\n        public HttpResponseMessage Get(int id) {\n            var stream = Notifications.Instance.ReadImage(id);\n\n            var result = new HttpResponseMessage(HttpStatusCode.OK);\n            result.Content = new StreamContent(stream);\n            // Switch in your image extension for \"png\"\n            result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"image/{png}\");\n\n            return result;\n        }\n\n        // Create rich notification and send initial silent notification (containing id) to client\n        public async Task<HttpResponseMessage> Post() {\n            // Replace the placeholder with image file name\n            var richNotificationInTheBackend = Notifications.Instance.CreateNotification(\"Check this image out!\", \"img\",  \"{logo.png}\");\n\n            var usernameTag = \"username:\" + HttpContext.Current.User.Identity.Name;\n\n            // Silent notification with content available\n            var aboutUser = \"{\\\"aps\\\": {\\\"content-available\\\": 1, \\\"sound\\\":\\\"\\\"}, \\\"richId\\\": \\\"\" + richNotificationInTheBackend.Id.ToString() + \"\\\",  \\\"richMessage\\\": \\\"\" + richNotificationInTheBackend.Message + \"\\\", \\\"richType\\\": \\\"\" + richNotificationInTheBackend.RichType + \"\\\"}\";\n\n            // Send notification to apns\n            await Notifications.Instance.Hub.SendAppleNativeNotificationAsync(aboutUser, usernameTag);\n\n            return Request.CreateResponse(HttpStatusCode.OK);\n        }\n\n8. Now we will re-deploy this app to an Azure Website in order to make it accessible from all devices. Right-click on the **AppBackend** project and select **Publish**.\n\n9. Select Azure Website as your publish target. Log in with your Azure account and select an existing or new Website, and make a note of the **destination URL** property in the **Connection** tab. We will refer to this URL as your *backend endpoint* later in this tutorial. Click **Publish**.\n\n## Modify the iOS project\n\nNow that you have modified your app backend to send just the *id* of a notification, you will change your iOS app to handle that id and retrieve the rich message from your backend.\n\n1. Open your iOS project, and enable remote notifications by going to your main app target in the **Targets** section.\n\n2. Click on **Capabilities**, turn on **Background Modes**, and check the **Remote Notifications** checkbox.\n\n    ![][IOS3]\n\n3. Go to **Main.storyboard**, and make sure you have a View Controller (refered to as Home View Controller in this tutorial) from [Notify User](notification-hubs-aspnet-backend-ios-notify-users.md) tutorial.\n\n4. Add a **Navigation Controller** to your storyboard, and control-drag to Home View Controller to make it the **root view** of navigation. Make sure the **Is Initial View Controller** in Attributes inspector is selected for the Navigation Controller only.\n\n5. Add a **View Controller** to storyboard and add an **Image View**. This is the page users will see once they choose to learn more by clicking on the notifiication. Your storyboard should look as follows:\n\n    ![][IOS4]\n\n6. Click on the **Home View Controller** in storyboard, and make sure it has **homeViewController** as its **Custom Class** and **Storyboard ID** under the Identity inspector.\n\n7. Do the same for Image View Controller as **imageViewController**.\n\n8. Then, create a new View Controller class titled **imageViewController** to handle the UI you just created.\n\n9. In **imageViewController.h**, add the following to the controller's interface declarations. Make sure to control-drag from the storyboard image view to these properties to link the two:\n\n        @property (weak, nonatomic) IBOutlet UIImageView *myImage;\n        @property (strong) UIImage* imagePayload;\n\n10. In **imageViewController.m**, add the following at the end of **viewDidload**:\n\n        // Display the UI Image in UI Image View\n        [self.myImage setImage:self.imagePayload];\n\n11. In **AppDelegate.m**, import the image controller you created:\n\n        #import \"imageViewController.h\"\n\n12. Add an interface section with the following declaration:\n\n        @interface AppDelegate ()\n\n        @property UIImage* imagePayload;\n        @property NSDictionary* userInfo;\n        @property BOOL iOS8;\n\n        // Obtain content from backend with notification id\n        - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion;\n\n        // Redirect to Image View Controller after notification interaction\n        - (void)redirectToImageViewWithImage: (UIImage *)img;\n\n        @end\n\n13. In **AppDelegate**, make sure your app registers for silent notifications in **application: didFinishLaunchingWithOptions**:\n\n        // Software version\n        self.iOS8 = [[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)] && [[UIApplication sharedApplication] respondsToSelector:@selector(registerForRemoteNotifications)];\n\n        // Register for remote notifications for iOS8 and previous versions\n        if (self.iOS8) {\n            NSLog(@\"This device is running with iOS8.\");\n\n            // Action\n            UIMutableUserNotificationAction *richPushAction = [[UIMutableUserNotificationAction alloc] init];\n            richPushAction.identifier = @\"richPushMore\";\n            richPushAction.activationMode = UIUserNotificationActivationModeForeground;\n            richPushAction.authenticationRequired = NO;\n            richPushAction.title = @\"More\";\n\n            // Notification category\n            UIMutableUserNotificationCategory* richPushCategory = [[UIMutableUserNotificationCategory alloc] init];\n            richPushCategory.identifier = @\"richPush\";\n            [richPushCategory setActions:@[richPushAction] forContext:UIUserNotificationActionContextDefault];\n\n            // Notification categories\n            NSSet* richPushCategories = [NSSet setWithObjects:richPushCategory, nil];\n\n\n            UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound |\n                                                    UIUserNotificationTypeAlert |\n                                                    UIUserNotificationTypeBadge\n                                                                                     categories:richPushCategories];\n\n            [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n            [[UIApplication sharedApplication] registerForRemoteNotifications];\n\n        }\n        else {\n            // Previous iOS versions\n            NSLog(@\"This device is running with iOS7 or earlier versions.\");\n\n            [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeNewsstandContentAvailability];\n        }\n\n        return YES;\n\n14. Subsitute in the following implementation for **application:didRegisterForRemoteNotificationsWithDeviceToken** to take the storyboard UI changes into account:\n\n        // Access navigation controller which is at the root of window\n        UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\n        // Get home view controller from stack on navigation controller\n        homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\n        hvc.deviceToken = deviceToken;\n\n15. Then, add the following methods to **AppDelegate.m** to retrieve the image from your endpoint and send a local notification when retrieval is complete. Make sure to substitute the placeholder `{backend endpoint}` with your backend endpoint:\n\n        NSString *const GetNotificationEndpoint = @\"{backend endpoint}/api/notifications\";\n\n        // Helper: retrieve notification content from backend with rich notification id\n        - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion {\n            UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\n            homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\n            NSString* authenticationHeader = hvc.registerClient.authenticationHeader;\n            // Check if authenticated\n            if (!authenticationHeader) return;\n\n            NSURLSession* session = [NSURLSession\n                                     sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\n                                     delegate:nil\n                                     delegateQueue:nil];\n\n            NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/%d\", GetNotificationEndpoint, richId]];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"GET\"];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (!error && httpResponse.statusCode == 200) {\n                    // From NSData to UIImage\n                    self.imagePayload = [UIImage imageWithData:data];\n\n                    completion(nil);\n                }\n                else {\n                    NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\n                    if (error)\n                        completion(error);\n                    else {\n                        completion([NSError errorWithDomain:@\"APICall\" code:httpResponse.statusCode userInfo:nil]);\n                    }\n                }\n            }];\n            [dataTask resume];\n        }\n\n        // Handle silent push notifications when id is sent from backend\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))handler {\n            self.userInfo = userInfo;\n            int richId = [[self.userInfo objectForKey:@\"richId\"] intValue];\n            NSString* richType = [self.userInfo objectForKey:@\"richType\"];\n\n            // Retrieve image data\n            if ([richType isEqualToString:@\"img\"]) {  \n                [self retrieveRichImageWithId:richId completion:^(NSError* error) {\n                    if (!error){\n                        // Send local notification\n                        UILocalNotification* localNotification = [[UILocalNotification alloc] init];\n\n                        // \"5\" is arbitrary here to give you enough time to quit out of the app and receive push notifications\n                        localNotification.fireDate = [NSDate dateWithTimeIntervalSinceNow:5];\n                        localNotification.userInfo = self.userInfo;\n                        localNotification.alertBody = [self.userInfo objectForKey:@\"richMessage\"];\n                        localNotification.timeZone = [NSTimeZone defaultTimeZone];\n\n                        // iOS8 categories\n                        if (self.iOS8) {\n                            localNotification.category = @\"richPush\";\n                        }\n\n                        [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];\n\n                        handler(UIBackgroundFetchResultNewData);\n                    }\n                    else{\n                        handler(UIBackgroundFetchResultFailed);\n                    }\n                }];\n            }\n            // Add \"else if\" here to handle more types of rich content such as url, sound files, etc.\n        }\n\n16. Handle the local notification above by opening up the image view controller in **AppDelegate.m** with the following methods:\n\n        // Helper: redirect users to image view controller\n        - (void)redirectToImageViewWithImage: (UIImage *)img {\n            UINavigationController *navigationController = (UINavigationController*) self.window.rootViewController;\n            UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@\"Main\"\n                                                                     bundle: nil];\n            imageViewController *imgViewController = [mainStoryboard instantiateViewControllerWithIdentifier: @\"imageViewController\"];\n            // Pass data/image to image view controller\n            imgViewController.imagePayload = img;\n\n            // Redirect\n            [navigationController pushViewController:imgViewController animated:YES];\n        }\n\n        // Handle local notification sent above in didReceiveRemoteNotification\n        - (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {\n            if (application.applicationState == UIApplicationStateActive) {\n                // Show in-app alert with an extra \"more\" button\n                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:notification.alertBody delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:@\"More\", nil];\n\n                [alert show];\n            }\n            // App becomes active from user's tap on notification\n            else {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n        }\n\n        // Handle buttons in in-app alerts and redirect with data/image\n        - (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\n            // Handle \"more\" button\n            if (buttonIndex == 1)\n            {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n            // Add \"else if\" here to handle more buttons\n        }\n\n        // Handle notification setting actions in iOS8\n        - (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)notification completionHandler:(void (^)())completionHandler {\n            // Handle richPush related buttons\n            if ([identifier isEqualToString:@\"richPushMore\"]) {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n            completionHandler();\n        }\n\n## Run the Application\n\n1. In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).\n\n2. In the iOS app UI, enter a username and password of the same value for authentication and click **Log In**.\n\n3. Click **Send push** and you should see an in-app alert. If you click on **More**, you will be brought to the image you chose to include in your app backend.\n\n4. You can also click **Send push** and immediately press the home button of your device. In a few moments, you will receive a push notification. If you tap on it or click More, you will be brought to your app and the rich image content.\n\n\n[IOS1]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-1.png\n[IOS2]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-2.png\n[IOS3]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-3.png\n[IOS4]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-4.png\n"
}