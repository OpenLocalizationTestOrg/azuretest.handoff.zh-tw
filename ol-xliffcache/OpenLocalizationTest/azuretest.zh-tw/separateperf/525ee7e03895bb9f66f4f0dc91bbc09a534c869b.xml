{
  "nodes": [
    {
      "content": "Writing Expressions for Attribute Mappings in Azure Active Directory",
      "pos": [
        27,
        95
      ]
    },
    {
      "content": "Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.",
      "pos": [
        114,
        283
      ]
    },
    {
      "content": "Writing Expressions for Attribute Mappings in Azure Active Directory",
      "pos": [
        595,
        663
      ]
    },
    {
      "content": "When you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping.",
      "pos": [
        665,
        805
      ]
    },
    {
      "content": "For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.",
      "pos": [
        808,
        968
      ]
    },
    {
      "content": "Syntax Overview",
      "pos": [
        977,
        992
      ]
    },
    {
      "content": "The syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.",
      "pos": [
        994,
        1108
      ]
    },
    {
      "content": "The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses:",
      "pos": [
        1112,
        1234
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>FunctionName(&lt;&lt;argument 1&gt;&gt;,&lt;<ph id=\"ph1\">&lt;argument N&gt;</ph>&gt;)<ept id=\"p1\">*</ept>",
      "pos": [
        1240,
        1285
      ]
    },
    {
      "content": "You may nest functions within each other.",
      "pos": [
        1290,
        1331
      ]
    },
    {
      "content": "For example:",
      "pos": [
        1332,
        1344
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>FunctionOne(FunctionTwo(&lt;<ph id=\"ph1\">&lt;argument1&gt;</ph>&gt;))<ept id=\"p1\">*</ept>",
      "pos": [
        1350,
        1391
      ]
    },
    {
      "content": "You can pass three different types of arguments into functions:",
      "pos": [
        1396,
        1459
      ]
    },
    {
      "content": "Attributes, which must be enclosed in square square brackets.",
      "pos": [
        1467,
        1528
      ]
    },
    {
      "content": "For example: [attributeName]",
      "pos": [
        1529,
        1557
      ]
    },
    {
      "content": "String constants, which must be enclosed in double quotes.",
      "pos": [
        1565,
        1623
      ]
    },
    {
      "content": "For example: \"United States\"",
      "pos": [
        1624,
        1652
      ]
    },
    {
      "content": "Other Functions.",
      "pos": [
        1660,
        1676
      ]
    },
    {
      "content": "For example: FunctionOne(&lt;",
      "pos": [
        1677,
        1703
      ]
    },
    {
      "content": "&gt;, FunctionTwo(&lt;",
      "pos": [
        1714,
        1730
      ]
    },
    {
      "content": "&gt;))",
      "pos": [
        1741,
        1744
      ]
    },
    {
      "content": "For string constants, if you need a backslash ( \\ ) or quotation mark ( \" ) in the string, it must be escaped with the backslash ( \\ ) symbol.",
      "pos": [
        1749,
        1891
      ]
    },
    {
      "content": "For example: \"Company name: \\\"Contoso\\\"\"",
      "pos": [
        1892,
        1932
      ]
    },
    {
      "content": "List of Functions",
      "pos": [
        1939,
        1956
      ]
    },
    {
      "pos": [
        1958,
        2288
      ],
      "content": "<bpt id=\"p1\">[</bpt>Append<ept id=\"p1\">](#append)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>FormatDateTime<ept id=\"p2\">](#formatdatetime)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Join<ept id=\"p3\">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>Mid<ept id=\"p4\">](#mid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Not<ept id=\"p5\">](#not)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>Replace<ept id=\"p6\">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>StripSpaces<ept id=\"p7\">](#stripspaces)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>Switch<ept id=\"p8\">](#switch)</ept>"
    },
    {
      "content": "Append",
      "pos": [
        2309,
        2315
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        2317,
        2330
      ]
    },
    {
      "content": "Append(source, suffix)",
      "pos": [
        2336,
        2358
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        2360,
        2376
      ]
    },
    {
      "content": "Takes a source string value and appends the suffix to the end of it.",
      "pos": [
        2382,
        2450
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        2453,
        2468
      ]
    },
    {
      "content": "Name",
      "pos": [
        2476,
        2480
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        2482,
        2501
      ]
    },
    {
      "content": "Type",
      "pos": [
        2504,
        2508
      ]
    },
    {
      "content": "Notes",
      "pos": [
        2511,
        2516
      ]
    },
    {
      "content": "source",
      "pos": [
        2567,
        2573
      ]
    },
    {
      "content": "Required",
      "pos": [
        2578,
        2586
      ]
    },
    {
      "content": "String",
      "pos": [
        2589,
        2595
      ]
    },
    {
      "content": "Usually name of the attribute from the source object",
      "pos": [
        2598,
        2650
      ]
    },
    {
      "content": "suffix",
      "pos": [
        2657,
        2663
      ]
    },
    {
      "content": "Required",
      "pos": [
        2668,
        2676
      ]
    },
    {
      "content": "String",
      "pos": [
        2679,
        2685
      ]
    },
    {
      "content": "The string that you want to append to the end of the source value.",
      "pos": [
        2688,
        2754
      ]
    },
    {
      "content": "FormatDateTime",
      "pos": [
        2774,
        2788
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        2790,
        2803
      ]
    },
    {
      "content": "FormatDateTime(source, inputFormat, outputFormat)",
      "pos": [
        2809,
        2858
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        2860,
        2876
      ]
    },
    {
      "content": "Takes a date string from one format and converts it into a different format.",
      "pos": [
        2882,
        2958
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        2961,
        2976
      ]
    },
    {
      "content": "Name",
      "pos": [
        2984,
        2988
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        2990,
        3009
      ]
    },
    {
      "content": "Type",
      "pos": [
        3012,
        3016
      ]
    },
    {
      "content": "Notes",
      "pos": [
        3019,
        3024
      ]
    },
    {
      "content": "source",
      "pos": [
        3075,
        3081
      ]
    },
    {
      "content": "Required",
      "pos": [
        3086,
        3094
      ]
    },
    {
      "content": "String",
      "pos": [
        3097,
        3103
      ]
    },
    {
      "content": "Usually name of the attribute from the source object.",
      "pos": [
        3106,
        3159
      ]
    },
    {
      "content": "inputFormat",
      "pos": [
        3166,
        3177
      ]
    },
    {
      "content": "Required",
      "pos": [
        3182,
        3190
      ]
    },
    {
      "content": "String",
      "pos": [
        3193,
        3199
      ]
    },
    {
      "content": "Expected format of the source value.",
      "pos": [
        3202,
        3238
      ]
    },
    {
      "content": "For supported formats, see <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx<ept id=\"p1\">](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx)</ept>.",
      "pos": [
        3239,
        3393
      ]
    },
    {
      "content": "outputFormat",
      "pos": [
        3400,
        3412
      ]
    },
    {
      "content": "Required",
      "pos": [
        3417,
        3425
      ]
    },
    {
      "content": "String",
      "pos": [
        3428,
        3434
      ]
    },
    {
      "content": "Format of the output date.",
      "pos": [
        3437,
        3463
      ]
    },
    {
      "content": "Join",
      "pos": [
        3484,
        3488
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        3490,
        3503
      ]
    },
    {
      "content": "Join(separator, source1, source2, …)",
      "pos": [
        3509,
        3545
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        3547,
        3563
      ]
    },
    {
      "content": "Join() is similar to Append(), except that it can combine multiple <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string values into a single string, and each value will be separated by a <bpt id=\"p2\">**</bpt>separator<ept id=\"p2\">**</ept> string.",
      "pos": [
        3569,
        3742
      ]
    },
    {
      "content": "If one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.",
      "pos": [
        3744,
        3890
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        3894,
        3909
      ]
    },
    {
      "content": "Name",
      "pos": [
        3917,
        3921
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        3923,
        3942
      ]
    },
    {
      "content": "Type",
      "pos": [
        3945,
        3949
      ]
    },
    {
      "content": "Notes",
      "pos": [
        3952,
        3957
      ]
    },
    {
      "content": "separator",
      "pos": [
        4008,
        4017
      ]
    },
    {
      "content": "Required",
      "pos": [
        4022,
        4030
      ]
    },
    {
      "content": "String",
      "pos": [
        4033,
        4039
      ]
    },
    {
      "content": "String used to separate source values when they are concatenated into one string.",
      "pos": [
        4042,
        4123
      ]
    },
    {
      "content": "Can be \"\" if no separator is required.",
      "pos": [
        4124,
        4162
      ]
    },
    {
      "content": "**source1  …",
      "pos": [
        4167,
        4179
      ]
    },
    {
      "content": "sourceN **",
      "pos": [
        4180,
        4190
      ]
    },
    {
      "content": "Required, variable-number of times",
      "pos": [
        4193,
        4227
      ]
    },
    {
      "content": "String",
      "pos": [
        4230,
        4236
      ]
    },
    {
      "content": "String values to be joined together.",
      "pos": [
        4239,
        4275
      ]
    },
    {
      "content": "Mid",
      "pos": [
        4296,
        4299
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        4301,
        4314
      ]
    },
    {
      "content": "Mid(source, start, length)",
      "pos": [
        4320,
        4346
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        4348,
        4364
      ]
    },
    {
      "content": "Returns a substring of the source value.",
      "pos": [
        4370,
        4410
      ]
    },
    {
      "content": "A substring is a string that contains only some of the characters from the source string.",
      "pos": [
        4411,
        4500
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        4503,
        4518
      ]
    },
    {
      "content": "Name",
      "pos": [
        4526,
        4530
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        4532,
        4551
      ]
    },
    {
      "content": "Type",
      "pos": [
        4554,
        4558
      ]
    },
    {
      "content": "Notes",
      "pos": [
        4561,
        4566
      ]
    },
    {
      "content": "source",
      "pos": [
        4617,
        4623
      ]
    },
    {
      "content": "Required",
      "pos": [
        4628,
        4636
      ]
    },
    {
      "content": "String",
      "pos": [
        4639,
        4645
      ]
    },
    {
      "content": "Usually name of the attribute.",
      "pos": [
        4648,
        4678
      ]
    },
    {
      "content": "start",
      "pos": [
        4685,
        4690
      ]
    },
    {
      "content": "Required",
      "pos": [
        4695,
        4703
      ]
    },
    {
      "content": "integer",
      "pos": [
        4706,
        4713
      ]
    },
    {
      "content": "Index in the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string where substring should start.",
      "pos": [
        4716,
        4776
      ]
    },
    {
      "content": "First character in the string will have index of 1, second character will have index 2, and so on.",
      "pos": [
        4777,
        4875
      ]
    },
    {
      "content": "length",
      "pos": [
        4882,
        4888
      ]
    },
    {
      "content": "Required",
      "pos": [
        4893,
        4901
      ]
    },
    {
      "content": "integer",
      "pos": [
        4904,
        4911
      ]
    },
    {
      "content": "Length of the substring.",
      "pos": [
        4914,
        4938
      ]
    },
    {
      "content": "If length ends outside the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> string, function will return substring from <bpt id=\"p2\">**</bpt>start<ept id=\"p2\">**</ept> index till end of <bpt id=\"p3\">**</bpt>source<ept id=\"p3\">**</ept> string.",
      "pos": [
        4939,
        5067
      ]
    },
    {
      "content": "Not",
      "pos": [
        5089,
        5092
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        5094,
        5107
      ]
    },
    {
      "content": "Not(source)",
      "pos": [
        5113,
        5124
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        5126,
        5142
      ]
    },
    {
      "content": "Flips the boolean value of the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept>.",
      "pos": [
        5148,
        5190
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value is \"<bpt id=\"p2\">*</bpt>True<ept id=\"p2\">*</ept>\", returns \"<bpt id=\"p3\">*</bpt>False<ept id=\"p3\">*</ept>\".",
      "pos": [
        5191,
        5242
      ]
    },
    {
      "content": "Otherwise, returns \"<bpt id=\"p1\">*</bpt>True<ept id=\"p1\">*</ept>\".",
      "pos": [
        5243,
        5271
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        5274,
        5289
      ]
    },
    {
      "content": "Name",
      "pos": [
        5297,
        5301
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        5303,
        5322
      ]
    },
    {
      "content": "Type",
      "pos": [
        5325,
        5329
      ]
    },
    {
      "content": "Notes",
      "pos": [
        5332,
        5337
      ]
    },
    {
      "content": "source",
      "pos": [
        5388,
        5394
      ]
    },
    {
      "content": "Required",
      "pos": [
        5399,
        5407
      ]
    },
    {
      "content": "Boolean String",
      "pos": [
        5410,
        5424
      ]
    },
    {
      "pos": [
        5427,
        5477
      ],
      "content": "Expected <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> values are \"True\" or \"False\".."
    },
    {
      "content": "Replace",
      "pos": [
        5498,
        5505
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        5507,
        5520
      ]
    },
    {
      "content": "ObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)",
      "pos": [
        5526,
        5643
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        5645,
        5661
      ]
    },
    {
      "content": "Replaces values within a string.",
      "pos": [
        5666,
        5698
      ]
    },
    {
      "content": "It works differently depending on the parameters provided:",
      "pos": [
        5699,
        5757
      ]
    },
    {
      "pos": [
        5761,
        5817
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>replacementValue<ept id=\"p2\">**</ept> are provided:"
    },
    {
      "content": "Replaces all occurrences of oldValue in the source  with replacementValue",
      "pos": [
        5824,
        5897
      ]
    },
    {
      "pos": [
        5901,
        5949
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept> are provided:"
    },
    {
      "pos": [
        5956,
        6046
      ],
      "content": "Replaces all occurrences of the <bpt id=\"p1\">**</bpt>oldValue<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept> with the <bpt id=\"p3\">**</bpt>source<ept id=\"p3\">**</ept> value"
    },
    {
      "pos": [
        6050,
        6143
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValueRegexPattern<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>oldValueRegexGroupName<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>replacementValue<ept id=\"p3\">**</ept> are provided:"
    },
    {
      "content": "Replaces all values matching oldValueRegexPattern in the source string with replacementValue",
      "pos": [
        6150,
        6242
      ]
    },
    {
      "pos": [
        6246,
        6346
      ],
      "content": "When <bpt id=\"p1\">**</bpt>oldValueRegexPattern<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>oldValueRegexGroupName<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>replacementPropertyName<ept id=\"p3\">**</ept> are provided:"
    },
    {
      "pos": [
        6353,
        6400
      ],
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> has value, <bpt id=\"p2\">**</bpt>source<ept id=\"p2\">**</ept> is returned"
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> has no value, uses <bpt id=\"p2\">**</bpt>oldValueRegexPattern<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>oldValueRegexGroupName<ept id=\"p3\">**</ept> to extract replacement value from the property with <bpt id=\"p4\">**</bpt>replacementPropertyName<ept id=\"p4\">**</ept>.",
      "pos": [
        6407,
        6576
      ]
    },
    {
      "content": "Replacement value is returned as the result",
      "pos": [
        6577,
        6620
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        6623,
        6638
      ]
    },
    {
      "content": "Name",
      "pos": [
        6646,
        6650
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        6652,
        6671
      ]
    },
    {
      "content": "Type",
      "pos": [
        6674,
        6678
      ]
    },
    {
      "content": "Notes",
      "pos": [
        6681,
        6686
      ]
    },
    {
      "content": "source",
      "pos": [
        6737,
        6743
      ]
    },
    {
      "content": "Required",
      "pos": [
        6748,
        6756
      ]
    },
    {
      "content": "String",
      "pos": [
        6759,
        6765
      ]
    },
    {
      "content": "Usually name of the attribute from the source object.",
      "pos": [
        6768,
        6821
      ]
    },
    {
      "content": "oldValue",
      "pos": [
        6828,
        6836
      ]
    },
    {
      "content": "Optional",
      "pos": [
        6841,
        6849
      ]
    },
    {
      "content": "String",
      "pos": [
        6852,
        6858
      ]
    },
    {
      "pos": [
        6861,
        6912
      ],
      "content": "Value to be replaced in <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>template<ept id=\"p2\">**</ept>."
    },
    {
      "content": "regexPattern",
      "pos": [
        6919,
        6931
      ]
    },
    {
      "content": "Optional",
      "pos": [
        6936,
        6944
      ]
    },
    {
      "content": "String",
      "pos": [
        6947,
        6953
      ]
    },
    {
      "content": "Regex pattern for the value to be replaced in <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept>.",
      "pos": [
        6956,
        7013
      ]
    },
    {
      "content": "Or, when replacementPropertyName is used, pattern to extract value from replacement property.",
      "pos": [
        7014,
        7107
      ]
    },
    {
      "content": "regexGroupName",
      "pos": [
        7114,
        7128
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7133,
        7141
      ]
    },
    {
      "content": "String",
      "pos": [
        7144,
        7150
      ]
    },
    {
      "content": "Name of the group inside <bpt id=\"p1\">**</bpt>regexPattern<ept id=\"p1\">**</ept>.",
      "pos": [
        7153,
        7195
      ]
    },
    {
      "content": "Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property.",
      "pos": [
        7196,
        7322
      ]
    },
    {
      "content": "replacementValue",
      "pos": [
        7329,
        7345
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7350,
        7358
      ]
    },
    {
      "content": "String",
      "pos": [
        7361,
        7367
      ]
    },
    {
      "content": "New value to replace old one with.",
      "pos": [
        7370,
        7404
      ]
    },
    {
      "content": "replacementAttributeName",
      "pos": [
        7411,
        7435
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7440,
        7448
      ]
    },
    {
      "content": "String",
      "pos": [
        7451,
        7457
      ]
    },
    {
      "content": "Name of the attribute to be used for replacement value, when source has no value.",
      "pos": [
        7460,
        7541
      ]
    },
    {
      "content": "template",
      "pos": [
        7548,
        7556
      ]
    },
    {
      "content": "Optional",
      "pos": [
        7561,
        7569
      ]
    },
    {
      "content": "String",
      "pos": [
        7572,
        7578
      ]
    },
    {
      "pos": [
        7581,
        7701
      ],
      "content": "When <bpt id=\"p1\">**</bpt>template<ept id=\"p1\">**</ept> value is provided, we will look for <bpt id=\"p2\">**</bpt>oldValue<ept id=\"p2\">**</ept> inside the template and replace it with source value."
    },
    {
      "content": "StripSpaces",
      "pos": [
        7722,
        7733
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        7735,
        7748
      ]
    },
    {
      "content": "StripSpaces(source)",
      "pos": [
        7754,
        7773
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        7775,
        7791
      ]
    },
    {
      "content": "Removes all space (\" \") characters from the source string.",
      "pos": [
        7797,
        7855
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        7857,
        7872
      ]
    },
    {
      "content": "Name",
      "pos": [
        7880,
        7884
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        7886,
        7905
      ]
    },
    {
      "content": "Type",
      "pos": [
        7908,
        7912
      ]
    },
    {
      "content": "Notes",
      "pos": [
        7915,
        7920
      ]
    },
    {
      "content": "source",
      "pos": [
        7971,
        7977
      ]
    },
    {
      "content": "Required",
      "pos": [
        7982,
        7990
      ]
    },
    {
      "content": "String",
      "pos": [
        7993,
        7999
      ]
    },
    {
      "pos": [
        8002,
        8029
      ],
      "content": "<bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value to update."
    },
    {
      "content": "Switch",
      "pos": [
        8050,
        8056
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Function:<ept id=\"p1\">**</ept>",
      "pos": [
        8058,
        8071
      ]
    },
    {
      "content": "Switch(source, defaultValue, key1, value1, key2, value2, …)",
      "pos": [
        8077,
        8136
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        8138,
        8154
      ]
    },
    {
      "content": "When <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value matches a <bpt id=\"p2\">**</bpt>key<ept id=\"p2\">**</ept>, returns <bpt id=\"p3\">**</bpt>value<ept id=\"p3\">**</ept> for that <bpt id=\"p4\">**</bpt>key<ept id=\"p4\">**</ept>.",
      "pos": [
        8160,
        8236
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> value doesn't match any keys, returns <bpt id=\"p2\">**</bpt>defaultValue<ept id=\"p2\">**</ept>.",
      "pos": [
        8237,
        8306
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>value<ept id=\"p2\">**</ept> parameters must always come in pairs.",
      "pos": [
        8308,
        8367
      ]
    },
    {
      "content": "The function always expects an even number of parameters.",
      "pos": [
        8368,
        8425
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Parameters:<ept id=\"p1\">**</ept>",
      "pos": [
        8427,
        8442
      ]
    },
    {
      "content": "Name",
      "pos": [
        8450,
        8454
      ]
    },
    {
      "content": "Required/ Repeating",
      "pos": [
        8456,
        8475
      ]
    },
    {
      "content": "Type",
      "pos": [
        8478,
        8482
      ]
    },
    {
      "content": "Notes",
      "pos": [
        8485,
        8490
      ]
    },
    {
      "content": "source",
      "pos": [
        8541,
        8547
      ]
    },
    {
      "content": "Required",
      "pos": [
        8552,
        8560
      ]
    },
    {
      "content": "String",
      "pos": [
        8563,
        8569
      ]
    },
    {
      "pos": [
        8572,
        8599
      ],
      "content": "<bpt id=\"p1\">**</bpt>Source<ept id=\"p1\">**</ept> value to update."
    },
    {
      "content": "defaultValue",
      "pos": [
        8606,
        8618
      ]
    },
    {
      "content": "Optional",
      "pos": [
        8623,
        8631
      ]
    },
    {
      "content": "String",
      "pos": [
        8634,
        8640
      ]
    },
    {
      "content": "Default value to be used when source doesn't match any keys.",
      "pos": [
        8643,
        8703
      ]
    },
    {
      "content": "Can be empty string (\"\").",
      "pos": [
        8704,
        8729
      ]
    },
    {
      "content": "key",
      "pos": [
        8736,
        8739
      ]
    },
    {
      "content": "Required",
      "pos": [
        8744,
        8752
      ]
    },
    {
      "content": "String",
      "pos": [
        8755,
        8761
      ]
    },
    {
      "pos": [
        8764,
        8805
      ],
      "content": "<bpt id=\"p1\">**</bpt>Key<ept id=\"p1\">**</ept> to compare <bpt id=\"p2\">**</bpt>source<ept id=\"p2\">**</ept> value with."
    },
    {
      "content": "value",
      "pos": [
        8812,
        8817
      ]
    },
    {
      "content": "Required",
      "pos": [
        8822,
        8830
      ]
    },
    {
      "content": "String",
      "pos": [
        8833,
        8839
      ]
    },
    {
      "pos": [
        8842,
        8896
      ],
      "content": "Replacement value for the <bpt id=\"p1\">**</bpt>source<ept id=\"p1\">**</ept> matching the key."
    },
    {
      "content": "Examples",
      "pos": [
        8905,
        8913
      ]
    },
    {
      "content": "Strip known domain name",
      "pos": [
        8919,
        8942
      ]
    },
    {
      "content": "You need to strip a known domain name from a user’s email to obtain a user name.",
      "pos": [
        8944,
        9024
      ]
    },
    {
      "content": "For example, if the domain is \"contoso.com\", then you could use the following expression:",
      "pos": [
        9030,
        9119
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Expression:<ept id=\"p1\">**</ept>",
      "pos": [
        9122,
        9137
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Sample input / output:<ept id=\"p1\">**</ept>",
      "pos": [
        9188,
        9214
      ]
    },
    {
      "pos": [
        9223,
        9263
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (mail): \"john.doe@contoso.com\""
    },
    {
      "pos": [
        9267,
        9290
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"john.doe\""
    },
    {
      "content": "Append constant suffix to user name",
      "pos": [
        9297,
        9332
      ]
    },
    {
      "content": "If you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.",
      "pos": [
        9334,
        9468
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Expression:<ept id=\"p1\">**</ept>",
      "pos": [
        9473,
        9488
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Sample input/output:<ept id=\"p1\">**</ept>",
      "pos": [
        9535,
        9559
      ]
    },
    {
      "pos": [
        9568,
        9622
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept>: (userPrincipalName): \"John.Doe@contoso.com\""
    },
    {
      "pos": [
        9627,
        9667
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"John.Doe@contoso.com.test\""
    },
    {
      "content": "Generate user alias by concatenating parts of first and last name",
      "pos": [
        9677,
        9742
      ]
    },
    {
      "content": "You need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.",
      "pos": [
        9744,
        9865
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Expression:<ept id=\"p1\">**</ept>",
      "pos": [
        9868,
        9883
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Sample input/output:<ept id=\"p1\">**</ept>",
      "pos": [
        9945,
        9969
      ]
    },
    {
      "pos": [
        9978,
        10007
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (givenName): \"John\""
    },
    {
      "pos": [
        10011,
        10037
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (surname): \"Doe\""
    },
    {
      "pos": [
        10041,
        10062
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"JohDoe\""
    },
    {
      "content": "Output date as a string in a certain format",
      "pos": [
        10071,
        10114
      ]
    },
    {
      "content": "You want to send dates to a SaaS application in a certain format.",
      "pos": [
        10116,
        10181
      ]
    },
    {
      "content": "For example, you want to format dates for ServiceNow.",
      "pos": [
        10187,
        10240
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Expression:<ept id=\"p1\">**</ept>",
      "pos": [
        10244,
        10259
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        10344,
        10364
      ]
    },
    {
      "pos": [
        10370,
        10422
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (extensionAttribute1): \"20150123105347.1Z\""
    },
    {
      "pos": [
        10426,
        10451
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>:  \"2015-01-23\""
    },
    {
      "content": "Replace a value based on predefined set of options",
      "pos": [
        10461,
        10511
      ]
    },
    {
      "content": "You need to define the time zone of the user based on the state code stored in Azure AD.",
      "pos": [
        10513,
        10601
      ]
    },
    {
      "content": "If the state code doesn't match any of the predefined options, use default value of \"Australia/Sydney\".",
      "pos": [
        10607,
        10710
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Expression:<ept id=\"p1\">**</ept>",
      "pos": [
        10713,
        10728
      ]
    },
    {
      "content": "Sample input/output:",
      "pos": [
        10859,
        10879
      ]
    },
    {
      "pos": [
        10885,
        10909
      ],
      "content": "<bpt id=\"p1\">**</bpt>INPUT<ept id=\"p1\">**</ept> (state): \"QLD\""
    },
    {
      "pos": [
        10913,
        10945
      ],
      "content": "<bpt id=\"p1\">**</bpt>OUTPUT<ept id=\"p1\">**</ept>: \"Australia/Brisbane\""
    },
    {
      "content": "test",
      "pos": [
        11021,
        11025
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Writing Expressions for Attribute Mappings in Azure Active Directory\"\n    description=\"Learn how to use expression mappings to transform attribute values into an acceptable format during automated provisioning of SaaS app objects in Azure Active Directory.\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"markusvi\"\n    manager=\"swadhwa\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"active-directory\"\n    ms.workload=\"identity\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"07/27/2015\"\n    ms.author=\"markusvi\"/>\n\n\n# Writing Expressions for Attribute Mappings in Azure Active Directory\n\nWhen you configure provisioning to a SaaS application, one of the types of attribute mappings that you can specify is an expression mapping. \n For these, you must write a script-like expression that allows you to transform your users’ data into formats that are more acceptable for the SaaS application.\n\n\n\n\n\n## Syntax Overview\n\nThe syntax for Expressions for Attribute Mappings is reminiscent of Visual Basic for Applications (VBA) functions.\n\n- The entire expression must be defined in terms of functions, which consist of a name followed by arguments in parentheses: <br>\n*FunctionName(<<argument 1>>,<<argument N>>)*\n\n\n- You may nest functions within each other. For example: <br> *FunctionOne(FunctionTwo(<<argument1>>))*\n\n\n- You can pass three different types of arguments into functions:\n\n   1. Attributes, which must be enclosed in square square brackets. For example: [attributeName]\n\n   2. String constants, which must be enclosed in double quotes. For example: \"United States\"\n\n   3. Other Functions. For example: FunctionOne(<<argument1>>, FunctionTwo(<<argument2>>))\n\n\n- For string constants, if you need a backslash ( \\ ) or quotation mark ( \" ) in the string, it must be escaped with the backslash ( \\ ) symbol. For example: \"Company name: \\\"Contoso\\\"\"\n\n\n\n## List of Functions\n\n[Append](#append) &nbsp;&nbsp;&nbsp;&nbsp; [FormatDateTime](#formatdatetime) &nbsp;&nbsp;&nbsp;&nbsp; [Join](#join) &nbsp;&nbsp;&nbsp;&nbsp; [Mid](#mid) &nbsp;&nbsp;&nbsp;&nbsp; [Not](#not) &nbsp;&nbsp;&nbsp;&nbsp; [Replace](#replace) &nbsp;&nbsp;&nbsp;&nbsp; [StripSpaces](#stripspaces) &nbsp;&nbsp;&nbsp;&nbsp; [Switch](#switch)\n\n\n\n\n\n----------\n### Append\n\n**Function:**<br> \nAppend(source, suffix)\n\n**Description:**<br> \nTakes a source string value and appends the suffix to the end of it.\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object |\n| **suffix** | Required | String | The string that you want to append to the end of the source value. |\n\n\n----------\n### FormatDateTime\n\n**Function:**<br> \nFormatDateTime(source, inputFormat, outputFormat)\n\n**Description:**<br> \nTakes a date string from one format and converts it into a different format.\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object. |\n| **inputFormat** | Required | String | Expected format of the source value. For supported formats, see [http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx](http://msdn.microsoft.com/library/8kb3ddd4%28v=vs.110%29.aspx). |\n| **outputFormat** | Required | String | Format of the output date. |\n\n\n\n----------\n### Join\n\n**Function:**<br> \nJoin(separator, source1, source2, …)\n\n**Description:**<br> \nJoin() is similar to Append(), except that it can combine multiple **source** string values into a single string, and each value will be separated by a **separator** string.\n\nIf one of the source values is a multi-value attribute, then every value in that attribute will be joined together, separated the separator value.\n\n \n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **separator** | Required | String | String used to separate source values when they are concatenated into one string. Can be \"\" if no separator is required. |\n| **source1  … sourceN ** | Required, variable-number of times | String | String values to be joined together. |\n\n\n\n----------\n### Mid\n\n**Function:**<br> \nMid(source, start, length)\n\n**Description:**<br> \nReturns a substring of the source value. A substring is a string that contains only some of the characters from the source string.\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute. |\n| **start** | Required | integer | Index in the **source** string where substring should start. First character in the string will have index of 1, second character will have index 2, and so on. |\n| **length** | Required | integer | Length of the substring. If length ends outside the **source** string, function will return substring from **start** index till end of **source** string. |\n\n\n\n\n----------\n### Not\n\n**Function:**<br> \nNot(source)\n\n**Description:**<br> \nFlips the boolean value of the **source**. If **source** value is \"*True*\", returns \"*False*\". Otherwise, returns \"*True*\".\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | Boolean String | Expected **source** values are \"True\" or \"False\".. |\n\n\n\n----------\n### Replace\n\n**Function:**<br> \nObsoleteReplace(source, oldValue, regexPattern, regexGroupName, replacementValue, replacementAttributeName, template)\n\n**Description:**<br>\nReplaces values within a string. It works differently depending on the parameters provided:\n\n- When **oldValue** and **replacementValue** are provided:\n\n   - Replaces all occurrences of oldValue in the source  with replacementValue\n\n- When **oldValue** and **template** are provided:\n\n   - Replaces all occurrences of the **oldValue** in the **template** with the **source** value\n\n- When **oldValueRegexPattern**, **oldValueRegexGroupName**, **replacementValue** are provided:\n\n   - Replaces all values matching oldValueRegexPattern in the source string with replacementValue\n\n- When **oldValueRegexPattern**, **oldValueRegexGroupName**, **replacementPropertyName** are provided:\n\n   - If **source** has value, **source** is returned\n\n   - If **source** has no value, uses **oldValueRegexPattern** and **oldValueRegexGroupName** to extract replacement value from the property with **replacementPropertyName**. Replacement value is returned as the result\n\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | Usually name of the attribute from the source object. |\n| **oldValue** | Optional | String | Value to be replaced in **source** or **template**. |\n| **regexPattern** | Optional | String | Regex pattern for the value to be replaced in **source**. Or, when replacementPropertyName is used, pattern to extract value from replacement property. |\n| **regexGroupName** | Optional | String | Name of the group inside **regexPattern**. Only when  replacementPropertyName is used, we will extract value of this group as replacementValue from replacement property. |\n| **replacementValue** | Optional | String | New value to replace old one with. |\n| **replacementAttributeName** | Optional | String | Name of the attribute to be used for replacement value, when source has no value. |\n| **template** | Optional | String | When **template** value is provided, we will look for **oldValue** inside the template and replace it with source value. |\n\n\n\n----------\n### StripSpaces\n\n**Function:**<br> \nStripSpaces(source)\n\n**Description:**<br> \nRemoves all space (\" \") characters from the source string.\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | **source** value to update. |\n\n\n\n----------\n### Switch\n\n**Function:**<br> \nSwitch(source, defaultValue, key1, value1, key2, value2, …)\n\n**Description:**<br> \nWhen **source** value matches a **key**, returns **value** for that **key**. If **source** value doesn't match any keys, returns **defaultValue**.  **Key** and **value** parameters must always come in pairs. The function always expects an even number of parameters.\n\n**Parameters:**<br> \n\n|Name| Required/ Repeating | Type | Notes |\n|--- | ---                 | ---  | ---   |\n| **source** | Required | String | **Source** value to update. |\n| **defaultValue** | Optional | String | Default value to be used when source doesn't match any keys. Can be empty string (\"\"). |\n| **key** | Required | String | **Key** to compare **source** value with. |\n| **value** | Required | String | Replacement value for the **source** matching the key. |\n\n\n\n## Examples\n\n### Strip known domain name\n\nYou need to strip a known domain name from a user’s email to obtain a user name. <br>\nFor example, if the domain is \"contoso.com\", then you could use the following expression:\n\n\n**Expression:** <br>\n`Replace([mail], \"@contoso.com\", , ,\"\", ,)`\n\n**Sample input / output:** <br>\n\n- **INPUT** (mail): \"john.doe@contoso.com\"\n\n- **OUTPUT**:  \"john.doe\"\n\n\n### Append constant suffix to user name\n\nIf you are using a Salesforce Sandbox, you might need to append an additional suffix to all your user names before synchronizing them.\n\n\n\n\n**Expression:** <br>\n`Append([userPrincipalName], \".test\"))`\n\n**Sample input/output:** <br>\n\n- **INPUT**: (userPrincipalName): \"John.Doe@contoso.com\"\n\n\n- **OUTPUT**:  \"John.Doe@contoso.com.test\"\n\n\n\n\n\n### Generate user alias by concatenating parts of first and last name\n\nYou need to generate a user alias by taking first 3 letters of user's first name and first 5 letters of user's last name.\n\n\n**Expression:** <br>\n`Append(Mid([givenName], 1, 3), Mid([surname], 1, 5))`\n\n**Sample input/output:** <br>\n\n- **INPUT** (givenName): \"John\"\n\n- **INPUT** (surname): \"Doe\"\n\n- **OUTPUT**:  \"JohDoe\"\n\n\n\n\n### Output date as a string in a certain format\n\nYou want to send dates to a SaaS application in a certain format. <br>\nFor example, you want to format dates for ServiceNow.\n\n\n\n**Expression:** <br>\n\n`FormatDateTime([extensionAttribute1], \"yyyyMMddHHmmss.fZ\", \"yyyy-MM-dd\")`\n\n**Sample input/output:**\n\n- **INPUT** (extensionAttribute1): \"20150123105347.1Z\"\n\n- **OUTPUT**:  \"2015-01-23\"\n\n\n\n\n\n### Replace a value based on predefined set of options\n\nYou need to define the time zone of the user based on the state code stored in Azure AD. <br>\nIf the state code doesn't match any of the predefined options, use default value of \"Australia/Sydney\".\n\n\n**Expression:** <br>\n\n`Switch([state], \"Australia/Sydney\", \"NSW\", \"Australia/Sydney\",\"QLD\", \"Australia/Brisbane\", \"SA\", \"Australia/Adelaide\")`\n\n**Sample input/output:**\n\n- **INPUT** (state): \"QLD\"\n\n- **OUTPUT**: \"Australia/Brisbane\"\n\n\n[AZURE.INCLUDE [saas-toc](../../includes/active-directory-saas-toc.md)]\n\ntest\n"
}