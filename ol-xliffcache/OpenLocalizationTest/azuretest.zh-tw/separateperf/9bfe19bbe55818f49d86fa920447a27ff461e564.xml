{
  "nodes": [
    {
      "content": "Search for data in Operational Insights",
      "pos": [
        26,
        65
      ]
    },
    {
      "content": "You can use the log search in Microsoft Azure Operational Insights to find data that you’re looking for",
      "pos": [
        83,
        186
      ]
    },
    {
      "content": "Search for data in Operational Insights",
      "pos": [
        489,
        528
      ]
    },
    {
      "content": "At the core of Microsoft Azure Operational Insights is the log search feature which allows you to combine and correlate any machine data from multiple sources within your environment.",
      "pos": [
        630,
        813
      ]
    },
    {
      "content": "Solutions are also powered by log search to bring you metrics pivoted around a particular problem area.",
      "pos": [
        814,
        917
      ]
    },
    {
      "content": "On the Search page, you can create a query, and then when you search, you can filter the results by using facet controls.",
      "pos": [
        919,
        1040
      ]
    },
    {
      "content": "You can also create advanced queries to transform, filter, and report on your results.",
      "pos": [
        1041,
        1127
      ]
    },
    {
      "content": "Common log search queries appear on most solution pages.",
      "pos": [
        1129,
        1185
      ]
    },
    {
      "content": "Throughout the Operational Insights console, you can click tiles or drill in to other items to view details about the item by using log search.",
      "pos": [
        1186,
        1329
      ]
    },
    {
      "content": "In this tutorial, we'll walk through examples to cover all the basics when you use log search.",
      "pos": [
        1331,
        1425
      ]
    },
    {
      "content": "We'll start with simple, practical examples and then build on them so that you can get an understanding of practical use cases about how to use the syntax to extract the insights you want from the data.",
      "pos": [
        1427,
        1629
      ]
    },
    {
      "content": "When you conduct log searches in Operational Insights, you'll use the following techniques:",
      "pos": [
        1631,
        1722
      ]
    },
    {
      "content": "Use basic filters",
      "pos": [
        1726,
        1743
      ]
    },
    {
      "content": "Use additional filters",
      "pos": [
        1746,
        1768
      ]
    },
    {
      "content": "Manipulate search results",
      "pos": [
        1771,
        1796
      ]
    },
    {
      "content": "Use the measure command",
      "pos": [
        1799,
        1822
      ]
    },
    {
      "content": "Use the max and min functions with the measure command",
      "pos": [
        1825,
        1879
      ]
    },
    {
      "content": "Use the avg function with the measure command",
      "pos": [
        1882,
        1927
      ]
    },
    {
      "content": "Use the where command",
      "pos": [
        1930,
        1951
      ]
    },
    {
      "pos": [
        1953,
        2148
      ],
      "content": "After you've familiar with search techniques, you can review the <bpt id=\"p1\">[</bpt>Search syntax reference<ept id=\"p1\">](#search-syntax-reference)</ept> and the <bpt id=\"p2\">[</bpt>Search field and facet reference<ept id=\"p2\">](#search-field-and-facet-reference)</ept>."
    },
    {
      "content": "Use basic filters",
      "pos": [
        2153,
        2170
      ]
    },
    {
      "content": "The first thing to know is that the first part of a search query, before any “|” vertical pipe character, is always a <bpt id=\"p1\">*</bpt>filter<ept id=\"p1\">*</ept>.",
      "pos": [
        2172,
        2299
      ]
    },
    {
      "content": "You can think of it as a WHERE clause in TSQL--it determines <bpt id=\"p1\">*</bpt>what<ept id=\"p1\">*</ept> subset of data to pull out of the Operational Insights data store.",
      "pos": [
        2300,
        2434
      ]
    },
    {
      "content": "Searching from a the data store is largely about specifying the characteristics of the data that you want to extract, so it is natural that a query would start with the WHERE clause.",
      "pos": [
        2435,
        2617
      ]
    },
    {
      "content": "The most basic filters you can use are <bpt id=\"p1\">*</bpt>keywords<ept id=\"p1\">*</ept>, such as ‘error’ or ‘timeout’, or a computer name.",
      "pos": [
        2619,
        2719
      ]
    },
    {
      "content": "These types of simple queries generally return diverse shapes of data within the same result set.",
      "pos": [
        2720,
        2817
      ]
    },
    {
      "content": "This is because Operational Insights has different <bpt id=\"p1\">*</bpt>types<ept id=\"p1\">*</ept> of data in the system.",
      "pos": [
        2818,
        2899
      ]
    },
    {
      "content": "To conduct a simple search",
      "pos": [
        2906,
        2932
      ]
    },
    {
      "pos": [
        2936,
        3079
      ],
      "content": "In the Operational Insights portal, click **Search Data Explorer**.  \n![search tile](./media/operational-insights-search/overview-search.png)",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "In the Operational Insights portal, click <bpt id=\"p1\">**</bpt>Search Data Explorer<ept id=\"p1\">**</ept>.",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search tile<ph id=\"ph2\">](./media/operational-insights-search/overview-search.png)</ph>",
          "pos": [
            70,
            141
          ]
        }
      ]
    },
    {
      "pos": [
        3083,
        3561
      ],
      "content": "In the query field, type `error` and then click **Search**.\n![search error](./media/operational-insights-search/search-error.png)  \nFor example, the query for `error` in the following image returned 100,000 **Event** records (collected by Log Management), 18 **ConfigurationAlert** records (generated by Configuration Assessment) and 12 **ConfigurationChange** records (captured by the Change Tracking).\n![search results](./media/operational-insights-search/results01.png)",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "In the query field, type <ph id=\"ph1\">`error`</ph> and then click <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept>.",
          "pos": [
            0,
            59
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search error<ph id=\"ph2\">](./media/operational-insights-search/search-error.png)</ph>",
          "pos": [
            60,
            129
          ]
        },
        {
          "content": "For example, the query for <ph id=\"ph1\">`error`</ph> in the following image returned 100,000 <bpt id=\"p1\">**</bpt>Event<ept id=\"p1\">**</ept> records (collected by Log Management), 18 <bpt id=\"p2\">**</bpt>ConfigurationAlert<ept id=\"p2\">**</ept> records (generated by Configuration Assessment) and 12 <bpt id=\"p3\">**</bpt>ConfigurationChange<ept id=\"p3\">**</ept> records (captured by the Change Tracking).",
          "pos": [
            132,
            403
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search results<ph id=\"ph2\">](./media/operational-insights-search/results01.png)</ph>",
          "pos": [
            404,
            472
          ]
        }
      ]
    },
    {
      "content": "These filters are not really object types/classes.",
      "pos": [
        3563,
        3613
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept> is just a tag, or a property, or a string/name/category, that is attached to a piece of data.",
      "pos": [
        3614,
        3714
      ]
    },
    {
      "content": "Some documents in the system are tagged as <bpt id=\"p1\">**</bpt>Type:ConfigurationAlert<ept id=\"p1\">**</ept> and some are tagged as <bpt id=\"p2\">**</bpt>Type:PerfHourly<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Type:Event<ept id=\"p3\">**</ept>, and so on.",
      "pos": [
        3715,
        3859
      ]
    },
    {
      "content": "Each search result, document, record, or entry displays all the raw properties and their values for each of those pieces of data, and you can use those field names to specify in the filter when you want to retrieve only the records where the field has that given value.",
      "pos": [
        3860,
        4129
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept> is really just a field that all records have, it is not different from any other field.",
      "pos": [
        4131,
        4225
      ]
    },
    {
      "content": "This was established based on the value of the Type field.",
      "pos": [
        4226,
        4284
      ]
    },
    {
      "content": "That record will have a different shape or form.",
      "pos": [
        4285,
        4333
      ]
    },
    {
      "content": "Incidentally, <bpt id=\"p1\">**</bpt>Type=PerfHourly<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>Type=Event<ept id=\"p2\">**</ept> is also the syntax that you need to learn to query for hourly performance data aggregates or events.",
      "pos": [
        4334,
        4487
      ]
    },
    {
      "content": "You can use either a colon (:) or a equal sign (=) after the field name and before the value.",
      "pos": [
        4489,
        4582
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Type:Event<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Type=Event<ept id=\"p2\">**</ept> are equivalent in meaning, you can chose the style you prefer.",
      "pos": [
        4583,
        4679
      ]
    },
    {
      "pos": [
        4681,
        4838
      ],
      "content": "So, if the Type=PerfHourly records have a field called 'CounterName', then you can write a query resembling <ph id=\"ph1\">`Type=PerfHourly CounterName=\"% Processor Time\"`</ph>."
    },
    {
      "content": "This will give you only the performance data where the performance counter name is \"% Processor Time\".",
      "pos": [
        4840,
        4942
      ]
    },
    {
      "content": "To search for processor time performance data",
      "pos": [
        4948,
        4993
      ]
    },
    {
      "pos": [
        4996,
        5076
      ],
      "content": "In the search query field, type <ph id=\"ph1\">`Type=PerfHourly CounterName=\"% Processor Time\"`</ph>"
    },
    {
      "content": "You can also be more specific and use <bpt id=\"p1\">**</bpt>InstanceName=_'Total'<ept id=\"p1\">**</ept> in the query, which is a Windows performance counter.",
      "pos": [
        5078,
        5195
      ]
    },
    {
      "content": "You can also select a facet and another <bpt id=\"p1\">**</bpt>field:value<ept id=\"p1\">**</ept>.",
      "pos": [
        5196,
        5252
      ]
    },
    {
      "content": "The filter is automatically added to your filter in the query bar.",
      "pos": [
        5253,
        5319
      ]
    },
    {
      "content": "You can see this in the following image.",
      "pos": [
        5320,
        5360
      ]
    },
    {
      "content": "It shows you where to click to add <bpt id=\"p1\">**</bpt>InstanceName:’_Total’<ept id=\"p1\">**</ept> to the query without typing anything.",
      "pos": [
        5361,
        5459
      ]
    },
    {
      "content": "search facet",
      "pos": [
        5463,
        5475
      ]
    },
    {
      "pos": [
        5532,
        5625
      ],
      "content": "Your query now becomes <ph id=\"ph1\">`Type=PerfHourly CounterName=”% Processor Time” InstanceName=”_Total”`</ph>"
    },
    {
      "content": "In this example, you don't have to specify <bpt id=\"p1\">**</bpt>Type=PerfHourly<ept id=\"p1\">**</ept> to get to this result.",
      "pos": [
        5627,
        5712
      ]
    },
    {
      "content": "Because the fields CounterName and InstanceName only exist for records of Type=PerfHourly, the query is specific enough to return the same results as the longer, previous one:",
      "pos": [
        5713,
        5888
      ]
    },
    {
      "content": "This is because all the filters in the query are evaluated as being in <bpt id=\"p1\">*</bpt>AND<ept id=\"p1\">*</ept> with each other.",
      "pos": [
        5951,
        6044
      ]
    },
    {
      "content": "Effectively, the more fields you add to the criteria, you get less, more specific and refined results.",
      "pos": [
        6045,
        6147
      ]
    },
    {
      "content": "For example, the query <ph id=\"ph1\">`Type=Event EventLog=\"Windows PowerShell\"`</ph> is identical to <ph id=\"ph2\">`Type=Event AND EventLog=\"Windows PowerShell\"`</ph>.",
      "pos": [
        6149,
        6278
      ]
    },
    {
      "content": "It returns all events that were logged in and collected from the Windows PowerShell event log.",
      "pos": [
        6279,
        6373
      ]
    },
    {
      "content": "If you add a filter multiple times by repeatedly selecting the same facet, then the issue is purely cosmetic--it might clutter the Search bar, but it still returns the same results because the implicit AND operator is always there.",
      "pos": [
        6374,
        6605
      ]
    },
    {
      "content": "You can easily reverse the implicit AND operator by using a NOT operator explicitly.",
      "pos": [
        6607,
        6691
      ]
    },
    {
      "content": "For example:",
      "pos": [
        6692,
        6704
      ]
    },
    {
      "pos": [
        6706,
        6895
      ],
      "content": "<ph id=\"ph1\">`Type:Event NOT(EventLog:\"Windows PowerShell\")`</ph> or it's equivalent <ph id=\"ph2\">`Type=Event EventLog!=\"Windows PowerShell\"`</ph> return all events from all other logs that are NOT the Windows PowerShell log."
    },
    {
      "content": "Or, you can use other Boolean operator such as ‘OR’.",
      "pos": [
        6897,
        6949
      ]
    },
    {
      "content": "The following query returns records for which the EventLog is either Application OR System.",
      "pos": [
        6950,
        7041
      ]
    },
    {
      "content": "Using the above query, you’ll get entries for both logs in the same result set.",
      "pos": [
        7092,
        7171
      ]
    },
    {
      "content": "However, if you remove the OR by leaving the implicit AND in place, then the following query will not produce any results because there isn’t an event log entry that belongs to BOTH logs.",
      "pos": [
        7173,
        7360
      ]
    },
    {
      "content": "Each event log entry was written to only one of the two logs.",
      "pos": [
        7361,
        7422
      ]
    },
    {
      "content": "Use additional filters",
      "pos": [
        7474,
        7496
      ]
    },
    {
      "content": "The following query returns entries for 2 event logs for all the computers that have sent data.",
      "pos": [
        7498,
        7593
      ]
    },
    {
      "content": "search results",
      "pos": [
        7646,
        7660
      ]
    },
    {
      "content": "Selecting one of the fields or filters will narrow the query to a specific computer, excluding all other ones.",
      "pos": [
        7721,
        7831
      ]
    },
    {
      "content": "The resulting query would resemble the following.",
      "pos": [
        7832,
        7881
      ]
    },
    {
      "content": "Which is equivalent to the following, because of the implicit AND.",
      "pos": [
        7961,
        8027
      ]
    },
    {
      "content": "Each query is evaluated in the following explicit order.",
      "pos": [
        8111,
        8167
      ]
    },
    {
      "content": "Note the parenthesis.",
      "pos": [
        8168,
        8189
      ]
    },
    {
      "content": "Just like the event log field, you can retrieve data only for a set of specific computers by adding OR.",
      "pos": [
        8275,
        8378
      ]
    },
    {
      "content": "For example:",
      "pos": [
        8379,
        8391
      ]
    },
    {
      "pos": [
        8543,
        8637
      ],
      "content": "Similarly, this the following query return <bpt id=\"p1\">**</bpt>% CPU Time<ept id=\"p1\">**</ept> for the selected two computers only."
    },
    {
      "content": "Boolean operators",
      "pos": [
        8778,
        8795
      ]
    },
    {
      "content": "With datetime and numeric fields, you can search for values using <bpt id=\"p1\">*</bpt>greater than<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>lesser than<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>lesser than or equal<ept id=\"p3\">*</ept>.",
      "pos": [
        8796,
        8920
      ]
    },
    {
      "content": "You can use simple operators such as &gt;, &lt; , &gt;=, &lt;= , != in the query search bar.",
      "pos": [
        8921,
        9001
      ]
    },
    {
      "content": "You can query a specific event log for a specific period of time.",
      "pos": [
        9004,
        9069
      ]
    },
    {
      "content": "For example, the last 24 hours is expressed with the following mnemonic expression.",
      "pos": [
        9070,
        9153
      ]
    },
    {
      "content": "To search using a boolean operator",
      "pos": [
        9212,
        9246
      ]
    },
    {
      "pos": [
        9249,
        9406
      ],
      "content": "In the search query field, type `EventLog=System TimeGenerated>NOW-24HOURS\"`\n![search with boolean](./media/operational-insights-search/search-boolean.png)",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "In the search query field, type <ph id=\"ph1\">`EventLog=System TimeGenerated&gt;NOW-24HOURS\"`</ph>",
          "pos": [
            0,
            76
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search with boolean<ph id=\"ph2\">](./media/operational-insights-search/search-boolean.png)</ph>",
          "pos": [
            77,
            155
          ]
        }
      ]
    },
    {
      "content": "Although you can control the time interval graphically, and most times you might want to do that, there are advantages to including a time filter directly into the query.",
      "pos": [
        9408,
        9578
      ]
    },
    {
      "content": "For example, this works great with dashboards where you can override the time for each tile, regardless of the <bpt id=\"p1\">*</bpt>global<ept id=\"p1\">*</ept> time selector on the dashboard page.",
      "pos": [
        9579,
        9735
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Time Matters in Dashboard<ept id=\"p1\">](http://cloudadministrator.wordpress.com/2014/10/19/system-center-advisor-restarted-time-matters-in-dashboard-part-6/)</ept>.",
      "pos": [
        9736,
        9908
      ]
    },
    {
      "pos": [
        9910,
        10114
      ],
      "content": "When filtering by time, keep in mind that you get results for the <bpt id=\"p1\">*</bpt>intersection<ept id=\"p1\">*</ept> of the two time periods: the one specified in the Operational Insights portal (S1) and the one specified in the query (S2)."
    },
    {
      "content": "intersection",
      "pos": [
        10118,
        10130
      ]
    },
    {
      "pos": [
        10187,
        10427
      ],
      "content": "This means, if the time periods don’t intersect, for example in the Operational Insights portal where you choose <bpt id=\"p1\">**</bpt>This week<ept id=\"p1\">**</ept> and in the query where you define <bpt id=\"p2\">**</bpt>last week<ept id=\"p2\">**</ept>, then there is no intersection and you won't receive any results."
    },
    {
      "content": "Comparison operators used for the TimeGenerated field are also useful in other situations.",
      "pos": [
        10429,
        10519
      ]
    },
    {
      "content": "For example, with numeric fields.",
      "pos": [
        10520,
        10553
      ]
    },
    {
      "content": "For example, given that Configuration Assessment’s alerts have the following severity values:",
      "pos": [
        10555,
        10648
      ]
    },
    {
      "content": "0 = Information",
      "pos": [
        10652,
        10667
      ]
    },
    {
      "content": "1 = Warning",
      "pos": [
        10670,
        10681
      ]
    },
    {
      "content": "2 = Critical",
      "pos": [
        10684,
        10696
      ]
    },
    {
      "content": "You can query for both warning and critical alerts and also exclude informational ones with the following query:",
      "pos": [
        10698,
        10810
      ]
    },
    {
      "content": "You can also use range queries.",
      "pos": [
        10859,
        10890
      ]
    },
    {
      "content": "This means that you can provide the beginning and end range of values in a sequence.",
      "pos": [
        10891,
        10975
      ]
    },
    {
      "content": "For example, if you want events from the Operations Manager event log where the EventID is greater than or equal to 2100 but not greater than 2199, then the following query would return them.",
      "pos": [
        10976,
        11167
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The range syntax you must use is the colon (:) field:value separator and <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> the equal sign (=).",
      "pos": [
        11242,
        11353
      ]
    },
    {
      "content": "Enclose the lower and upper end of the range in square brackets and separate them with two periods (..).",
      "pos": [
        11354,
        11458
      ]
    },
    {
      "content": "Manipulate search results",
      "pos": [
        11463,
        11488
      ]
    },
    {
      "content": "When you're searching for data, you'll want to refine your search query and have a good level of control over the results.",
      "pos": [
        11490,
        11612
      ]
    },
    {
      "content": "When results are retrieved, you can apply commands to transform them.",
      "pos": [
        11613,
        11682
      ]
    },
    {
      "content": "Commands in Operational Insights searches <bpt id=\"p1\">*</bpt>must<ept id=\"p1\">*</ept> follow after the vertical pipe character (|).",
      "pos": [
        11684,
        11778
      ]
    },
    {
      "content": "A filter must always be the first part of a query string.",
      "pos": [
        11779,
        11836
      ]
    },
    {
      "content": "It defines the data set you're working with and then \"pipes\" those results into a command.",
      "pos": [
        11837,
        11927
      ]
    },
    {
      "content": "You can then use the pipe to add additional commands.",
      "pos": [
        11928,
        11981
      ]
    },
    {
      "content": "This is loosely similar to the Windows PowerShell pipeline.",
      "pos": [
        11982,
        12041
      ]
    },
    {
      "content": "In general, the Operational Insights search language tries to follow PowerShell style and guidelines to make it similar to the IT pros, and to ease the learning curve.",
      "pos": [
        12043,
        12210
      ]
    },
    {
      "content": "Commands have names of verbs so you can easily tell what they do.",
      "pos": [
        12212,
        12277
      ]
    },
    {
      "content": "Sort",
      "pos": [
        12285,
        12289
      ]
    },
    {
      "content": "The sort command allows you to define the sorting order by one or multiple fields.",
      "pos": [
        12291,
        12373
      ]
    },
    {
      "content": "Even if you don’t use it, by default, a time descending order is enforced.",
      "pos": [
        12374,
        12448
      ]
    },
    {
      "content": "The most recent results are always at the top of search results.",
      "pos": [
        12449,
        12513
      ]
    },
    {
      "content": "This means that when you run a search, with <ph id=\"ph1\">`Type=Event EventID=1234`</ph> what really is executed for you is:",
      "pos": [
        12514,
        12619
      ]
    },
    {
      "content": "That's because it is the type of experience you are familiar with in logs.",
      "pos": [
        12684,
        12758
      ]
    },
    {
      "content": "For example, in the Windows Event Viewer.",
      "pos": [
        12759,
        12800
      ]
    },
    {
      "content": "You can use Sort to change the way results are returned.",
      "pos": [
        12802,
        12858
      ]
    },
    {
      "content": "The following examples show how this works.",
      "pos": [
        12859,
        12902
      ]
    },
    {
      "content": "The simple examples above show you how commands work--they change the shape of the results that the filter returned.",
      "pos": [
        13088,
        13204
      ]
    },
    {
      "content": "Limit and top",
      "pos": [
        13210,
        13223
      ]
    },
    {
      "content": "Another less known command is LIMIT.",
      "pos": [
        13224,
        13260
      ]
    },
    {
      "content": "Limit is a PowerShell-like verb.",
      "pos": [
        13261,
        13293
      ]
    },
    {
      "content": "Limit is functionally identical to the TOP command.",
      "pos": [
        13294,
        13345
      ]
    },
    {
      "content": "The following queries return the same results.",
      "pos": [
        13346,
        13392
      ]
    },
    {
      "content": "To search using top",
      "pos": [
        13484,
        13503
      ]
    },
    {
      "pos": [
        13506,
        13639
      ],
      "content": "In the search query field, type `Type=Event EventID=2110 | Top 1`\n![search top](./media/operational-insights-search/search-top.png)",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "In the search query field, type <ph id=\"ph1\">`Type=Event EventID=2110 | Top 1`</ph>",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search top<ph id=\"ph2\">](./media/operational-insights-search/search-top.png)</ph>",
          "pos": [
            66,
            131
          ]
        }
      ]
    },
    {
      "content": "In the image above, there are 988 records with EventID=2110.",
      "pos": [
        13641,
        13701
      ]
    },
    {
      "content": "The fields, facets, and filters on the left always show information about the results returned <bpt id=\"p1\">*</bpt>by the filter portion<ept id=\"p1\">*</ept> of the query, which is the the part before any pipe character.",
      "pos": [
        13702,
        13883
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Results<ept id=\"p1\">**</ept> pane only returns the most recent 1 result, because the example command shaped and transformed the results.",
      "pos": [
        13884,
        14007
      ]
    },
    {
      "content": "Select",
      "pos": [
        14013,
        14019
      ]
    },
    {
      "content": "The SELECT command behaves like Select-Object in PowerShell.",
      "pos": [
        14021,
        14081
      ]
    },
    {
      "content": "It returns filtered results that do not have all of their original properties.",
      "pos": [
        14082,
        14160
      ]
    },
    {
      "content": "Instead, it selects only the properties that you specify.",
      "pos": [
        14161,
        14218
      ]
    },
    {
      "content": "To run a search using the select command",
      "pos": [
        14225,
        14265
      ]
    },
    {
      "pos": [
        14270,
        14325
      ],
      "content": "In Search, type <ph id=\"ph1\">`Type=Event`</ph> and then click <bpt id=\"p1\">**</bpt>Search<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        14329,
        14422
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>+ show more<ept id=\"p1\">**</ept> in one of the results to view all the properties that the results have."
    },
    {
      "pos": [
        14426,
        14617
      ],
      "content": "Select some of those explicitly, and the query changes to `Type=Event | Select Computer,EventID,RenderedDescription`.\n![search select](./media/operational-insights-search/search-select.png)",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "Select some of those explicitly, and the query changes to <ph id=\"ph1\">`Type=Event | Select Computer,EventID,RenderedDescription`</ph>.",
          "pos": [
            0,
            117
          ]
        },
        {
          "content": "<ph id=\"ph1\">![</ph>search select<ph id=\"ph2\">](./media/operational-insights-search/search-select.png)</ph>",
          "pos": [
            118,
            189
          ]
        }
      ]
    },
    {
      "content": "This is command particularly useful when you want to control search output and choose only the portions of data that really matter for your exploration, which often isn’t the full record.",
      "pos": [
        14619,
        14806
      ]
    },
    {
      "content": "This is also useful when records of different types have <bpt id=\"p1\">*</bpt>some<ept id=\"p1\">*</ept> common properties, but not <bpt id=\"p2\">*</bpt>all<ept id=\"p2\">*</ept> of their properties are common.",
      "pos": [
        14807,
        14935
      ]
    },
    {
      "content": "The, you can generate output that looks more naturally like a table, or work well when exported to a CSV file and then massaged in Excel.",
      "pos": [
        14936,
        15073
      ]
    },
    {
      "content": "Use the measure command",
      "pos": [
        15172,
        15195
      ]
    },
    {
      "content": "MEASURE is one of the most versatile commands in Operational Insights searches.",
      "pos": [
        15197,
        15276
      ]
    },
    {
      "content": "It allows you to apply statistical <bpt id=\"p1\">*</bpt>functions<ept id=\"p1\">*</ept> to your data and aggregate results grouped by a given field.",
      "pos": [
        15277,
        15384
      ]
    },
    {
      "content": "There are multiple statistical functions that Measure supports.",
      "pos": [
        15385,
        15448
      ]
    },
    {
      "content": "Measure count()",
      "pos": [
        15454,
        15469
      ]
    },
    {
      "pos": [
        15471,
        15580
      ],
      "content": "The first statistical function to work with, and one of the simplest to understand is the <bpt id=\"p1\">*</bpt>count()<ept id=\"p1\">*</ept> function."
    },
    {
      "content": "Results from any search query such as <ph id=\"ph1\">`Type=Event`</ph>, show filters also called facets on the left side of search results.",
      "pos": [
        15582,
        15701
      ]
    },
    {
      "content": "The filters show a distribution of values by a given field for the results in the search executed.",
      "pos": [
        15702,
        15800
      ]
    },
    {
      "content": "search measure count",
      "pos": [
        15804,
        15824
      ]
    },
    {
      "content": "For example, in the image above you'll see the <bpt id=\"p1\">**</bpt>Computer<ept id=\"p1\">**</ept> field and it shows that within the almost 3 million events in the results, there are 20 unique and distinct values for the <bpt id=\"p2\">**</bpt>Computer<ept id=\"p2\">**</ept> field in those records.",
      "pos": [
        15891,
        16110
      ]
    },
    {
      "content": "The tile only shows the top 5, which are the most common 5 values that are written in the <bpt id=\"p1\">**</bpt>Computer<ept id=\"p1\">**</ept> fields), sorted by the number of documents that contain that specific value in that field.",
      "pos": [
        16111,
        16304
      ]
    },
    {
      "content": "In the image you can see that – among those almost 3 million events – 880 thousand come from the DM computer, 602 thousand from the DE computer, and so on.",
      "pos": [
        16305,
        16460
      ]
    },
    {
      "content": "What if you want to see all values, since the tile only shows only the top 5?",
      "pos": [
        16463,
        16540
      ]
    },
    {
      "content": "That’s what the measure command can do with the count() function.",
      "pos": [
        16542,
        16607
      ]
    },
    {
      "content": "This function doesn't use any parameters.",
      "pos": [
        16608,
        16649
      ]
    },
    {
      "content": "You just specify the field by which you want to group by – the <bpt id=\"p1\">**</bpt>Computer<ept id=\"p1\">**</ept> field in this case:",
      "pos": [
        16650,
        16745
      ]
    },
    {
      "content": "search measure count",
      "pos": [
        16793,
        16813
      ]
    },
    {
      "content": "However, <bpt id=\"p1\">**</bpt>Computer<ept id=\"p1\">**</ept> is just a field used <bpt id=\"p2\">*</bpt>in<ept id=\"p2\">*</ept> each piece of data – there are no relational databases involved and there is no separate <bpt id=\"p3\">**</bpt>Computer<ept id=\"p3\">**</ept> object anywhere.",
      "pos": [
        16887,
        17053
      ]
    },
    {
      "content": "Just the values <bpt id=\"p1\">*</bpt>in<ept id=\"p1\">*</ept> the data can describe which entity generated them, and a number of other characteristics and aspects of the data – hence the term <bpt id=\"p2\">*</bpt>facet<ept id=\"p2\">*</ept>.",
      "pos": [
        17054,
        17213
      ]
    },
    {
      "content": "However, you can just as well group by other fields.",
      "pos": [
        17214,
        17266
      ]
    },
    {
      "content": "Because the original results of almost 3 million events that  are piped into the measure command also have a field called <bpt id=\"p1\">**</bpt>EventID<ept id=\"p1\">**</ept>, you can apply the same technique to group by that field and get a count of events by EventID:",
      "pos": [
        17267,
        17495
      ]
    },
    {
      "pos": [
        17546,
        17772
      ],
      "content": "If you're not interested in the actual record count that contain a specific value, but instead if you only want a list of the values themselves, you can add a <bpt id=\"p1\">*</bpt>Select<ept id=\"p1\">*</ept> command at the end of it and just select the first column:"
    },
    {
      "content": "Then you can get more intricate and pre-sort the results in the query, or you can just click the columns in the grid, too.",
      "pos": [
        17840,
        17962
      ]
    },
    {
      "content": "To search using measure count",
      "pos": [
        18054,
        18083
      ]
    },
    {
      "pos": [
        18087,
        18160
      ],
      "content": "In the search query field, type <ph id=\"ph1\">`Type=Event | Measure count() by EventID`</ph>"
    },
    {
      "pos": [
        18163,
        18213
      ],
      "content": "Append <ph id=\"ph1\">`| Select EventID`</ph> to the end of the query."
    },
    {
      "pos": [
        18216,
        18277
      ],
      "content": "Finally, append <ph id=\"ph1\">`| Sort EventID asc`</ph> to the end of the query."
    },
    {
      "content": "There are a couple important points to notice and emphasize:",
      "pos": [
        18280,
        18340
      ]
    },
    {
      "content": "First, the results you see are not the original raw results anymore.",
      "pos": [
        18342,
        18410
      ]
    },
    {
      "content": "Instead, they are aggregated results – essentially groups of results.",
      "pos": [
        18411,
        18480
      ]
    },
    {
      "content": "This isn't a problem, but you should understand that you're interacting with a very different shape of data that differs from the original raw shape that gets created on the fly as a result of the aggregation/statistical function.",
      "pos": [
        18481,
        18711
      ]
    },
    {
      "content": "Second, <bpt id=\"p1\">**</bpt>Measure count<ept id=\"p1\">**</ept> currently returns only the top 100 distinct results.",
      "pos": [
        18713,
        18791
      ]
    },
    {
      "content": "This limit does not apply to the other statistical functions.",
      "pos": [
        18792,
        18853
      ]
    },
    {
      "content": "So, you'll usually need to use a more precise filter first to search for specific items before you apply measure count().",
      "pos": [
        18854,
        18975
      ]
    },
    {
      "content": "Use the max and min functions with the measure command",
      "pos": [
        18980,
        19034
      ]
    },
    {
      "content": "There are various scenarios where <bpt id=\"p1\">**</bpt>Measure Max()<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Measure Min()<ept id=\"p2\">**</ept> are useful.",
      "pos": [
        19036,
        19121
      ]
    },
    {
      "content": "However, since each function is opposite of each other, we'll illustrate Max() and you can experiment with Min() on your own.",
      "pos": [
        19122,
        19247
      ]
    },
    {
      "content": "If you query for Configuration Assessment alerts, they have a <bpt id=\"p1\">**</bpt>Severity<ept id=\"p1\">**</ept> property that can be 0,1, or 2 representing information, warning, and critical.",
      "pos": [
        19249,
        19403
      ]
    },
    {
      "content": "For example:",
      "pos": [
        19404,
        19416
      ]
    },
    {
      "content": "search measure count start",
      "pos": [
        19453,
        19479
      ]
    },
    {
      "content": "If you want to view the highest value for all of the alerts given a common Computer, the group by field, you can use",
      "pos": [
        19544,
        19660
      ]
    },
    {
      "content": "search measure max computer",
      "pos": [
        19733,
        19760
      ]
    },
    {
      "pos": [
        19825,
        19997
      ],
      "content": "It will display that for the computers that had <bpt id=\"p1\">**</bpt>Alert<ept id=\"p1\">**</ept> records, most of them have at least one critical alert, and the Bacc computer has a warning as its worst severity."
    },
    {
      "content": "search measure max time generated computer",
      "pos": [
        20070,
        20112
      ]
    },
    {
      "content": "This function works well with numbers, but it also works with DateTime fields.",
      "pos": [
        20177,
        20255
      ]
    },
    {
      "content": "It is useful to check for the last or most recent time stamp for any piece of data indexed for each computer.",
      "pos": [
        20256,
        20365
      ]
    },
    {
      "content": "For example : When was the most recent configuration change reported by change tracking solution for each machine?",
      "pos": [
        20366,
        20480
      ]
    },
    {
      "content": "Use the avg function with the measure command",
      "pos": [
        20560,
        20605
      ]
    },
    {
      "content": "The Avg() statistical function used with measure allows you to calculate the average value for some field, and group results by the same or other field.",
      "pos": [
        20607,
        20759
      ]
    },
    {
      "content": "This is useful in a variety of cases, such as performance data.",
      "pos": [
        20760,
        20823
      ]
    },
    {
      "content": "We'll start with performance data.",
      "pos": [
        20825,
        20859
      ]
    },
    {
      "content": "However, note that Operational Insights currently collects only certain fabric-related performance counters for Virtual Machine Manager and Hyper-V hosts as part of the Capacity Management solution.",
      "pos": [
        20860,
        21058
      ]
    },
    {
      "pos": [
        21060,
        21122
      ],
      "content": "To search for <bpt id=\"p1\">*</bpt>all<ept id=\"p1\">*</ept> performance data, the most basic query is:"
    },
    {
      "content": "search avg start",
      "pos": [
        21151,
        21167
      ]
    },
    {
      "content": "The first thing you'll notice is that Operational Insights shows you charts of the performance counters.",
      "pos": [
        21224,
        21328
      ]
    },
    {
      "content": "At the bottom of the results, you'll see the actual records behind the charts.",
      "pos": [
        21329,
        21407
      ]
    },
    {
      "content": "search avg start",
      "pos": [
        21411,
        21427
      ]
    },
    {
      "content": "In the image above, there are two sets of fields marked that indicate the following:",
      "pos": [
        21484,
        21568
      ]
    },
    {
      "content": "the first set identifies Windows Performance Counter Name, Object Name, and Instance Name in the query filter.",
      "pos": [
        21572,
        21682
      ]
    },
    {
      "content": "These are the fields you probably will most commonly use as facets/filters",
      "pos": [
        21683,
        21757
      ]
    },
    {
      "pos": [
        21760,
        21810
      ],
      "content": "<bpt id=\"p1\">**</bpt>SampleValue<ept id=\"p1\">**</ept> is the actual value of the counter"
    },
    {
      "pos": [
        21813,
        21869
      ],
      "content": "in the query, <bpt id=\"p1\">**</bpt>Type=PerfHourly<ept id=\"p1\">**</ept> is an hourly aggregate"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> is 21:00, in 24-hour time format.",
      "pos": [
        21872,
        21923
      ]
    },
    {
      "content": "It is the aggregation for that hourly period from 20:00 to 21:00.",
      "pos": [
        21924,
        21989
      ]
    },
    {
      "pos": [
        21992,
        22075
      ],
      "content": "<bpt id=\"p1\">**</bpt>SampleCount<ept id=\"p1\">**</ept> is the aggregation, computed using 12 samples (one every 5 minutes)"
    },
    {
      "pos": [
        22078,
        22213
      ],
      "content": "the <bpt id=\"p1\">**</bpt>min<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>max<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Percentile95<ept id=\"p3\">**</ept> for the hourly period was, in this example for memory in a virtual machine, 6144 (megabytes)"
    },
    {
      "pos": [
        22216,
        22366
      ],
      "content": "<bpt id=\"p1\">**</bpt>SampleValue<ept id=\"p1\">**</ept> is an hourly aggregate and it is populated with the <bpt id=\"p2\">*</bpt>average<ept id=\"p2\">*</ept> for the hourly period and is what is used to plot the performance charts"
    },
    {
      "content": "After reading about the PerfHourly record shape, and having read about other search techniques, you can use measure Avg() to aggregate this type of numerical data.",
      "pos": [
        22368,
        22531
      ]
    },
    {
      "content": "Here's a simple example:",
      "pos": [
        22533,
        22557
      ]
    },
    {
      "content": "search avg samplevalue",
      "pos": [
        22700,
        22722
      ]
    },
    {
      "content": "In this example, you select the CPU Total Time performance counter and average by Computer.",
      "pos": [
        22779,
        22870
      ]
    },
    {
      "content": "Because <bpt id=\"p1\">**</bpt>SampleValue<ept id=\"p1\">**</ept> is already an average, you actually query for an average of an average.",
      "pos": [
        22871,
        22966
      ]
    },
    {
      "content": "That’s correct with Type=PerfHourly at this point.",
      "pos": [
        22967,
        23017
      ]
    },
    {
      "content": "You should always use a filter on TimeGenerated to restrict the operation to a small or recent dataset, such as the last 4 hours--not 7 days.",
      "pos": [
        23018,
        23159
      ]
    },
    {
      "content": "So the query above becomes:",
      "pos": [
        23161,
        23188
      ]
    },
    {
      "content": "To search using the avg function with the measure command",
      "pos": [
        23358,
        23415
      ]
    },
    {
      "pos": [
        23419,
        23606
      ],
      "content": "In the Search query box, type <ph id=\"ph1\">`Type=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" TimeGenerated&gt;NOW-4HOURS | Measure Avg(SampleValue) by Computer`</ph>."
    },
    {
      "content": "Notice that the recent average will generally be higher.",
      "pos": [
        23610,
        23666
      ]
    },
    {
      "pos": [
        23670,
        23904
      ],
      "content": "Calculate the average of the Maximum hourly values by revising your search query with <ph id=\"ph1\">`Type=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" TimeGenerated&gt;NOW-4HOURS | Measure Avg(Max) by Computer`</ph>"
    },
    {
      "content": "You can aggregate and correlate data <bpt id=\"p1\">*</bpt>across<ept id=\"p1\">*</ept> computers.",
      "pos": [
        23906,
        23962
      ]
    },
    {
      "content": "For example, imagine that you have a set of hosts in some sort of farm where each node is equal to any other one and they just do all the same type of work and load should be roughly balanced.",
      "pos": [
        23963,
        24155
      ]
    },
    {
      "content": "You could get their counters all in one go with the following query and get averages for the entire farm.",
      "pos": [
        24156,
        24261
      ]
    },
    {
      "content": "You can start by choosing the computers with the following example:",
      "pos": [
        24262,
        24329
      ]
    },
    {
      "content": "Now that you have the computers, you also only want to select two key performance indicators (KPIs): % CPU Usage and % Free Disk Space.",
      "pos": [
        24461,
        24596
      ]
    },
    {
      "content": "So, that part of the query becomes:",
      "pos": [
        24597,
        24632
      ]
    },
    {
      "content": "Now you can add computers and counters with the following example:",
      "pos": [
        24831,
        24897
      ]
    },
    {
      "content": "Because you have a very specific selection, the <bpt id=\"p1\">**</bpt>measure Avg()<ept id=\"p1\">**</ept> command can return the average not by computer, but across the farm, simply by grouping by CounterName.",
      "pos": [
        25201,
        25370
      ]
    },
    {
      "content": "For example:",
      "pos": [
        25371,
        25383
      ]
    },
    {
      "content": "This gives you a useful compact view of a couple of your environment's KPIs.",
      "pos": [
        25729,
        25805
      ]
    },
    {
      "content": "search avg grouping",
      "pos": [
        25809,
        25828
      ]
    },
    {
      "content": "You can easily use this in a dashboard.",
      "pos": [
        25886,
        25925
      ]
    },
    {
      "content": "To learn more about using dashboards, see <bpt id=\"p1\">[</bpt>Operational Insights dashboards<ept id=\"p1\">](operational-insights-use-dashboards)</ept>.",
      "pos": [
        25926,
        26039
      ]
    },
    {
      "content": "search avg dashboard",
      "pos": [
        26043,
        26063
      ]
    },
    {
      "content": "Use the sum function with the measure command",
      "pos": [
        26124,
        26169
      ]
    },
    {
      "content": "The sum function is similar to other functions of the measure command.",
      "pos": [
        26171,
        26241
      ]
    },
    {
      "content": "You can see an example about how to use the sum function at <bpt id=\"p1\">[</bpt>W3C IIS Logs Search in Microsoft Azure Operational Insights<ept id=\"p1\">](http://blogs.msdn.com/b/dmuscett/archive/2014/09/20/w3c-iis-logs-search-in-system-center-advisor-limited-preview.aspx)</ept>.",
      "pos": [
        26242,
        26483
      ]
    },
    {
      "content": "You can use Max() and Min() with numbers, datetimes and text strings.",
      "pos": [
        26485,
        26554
      ]
    },
    {
      "content": "With text strings, they are sorted alphabetically and you get first and last.",
      "pos": [
        26555,
        26632
      ]
    },
    {
      "content": "However, you cannot use Sum() with anything other than numerical fields.",
      "pos": [
        26634,
        26706
      ]
    },
    {
      "content": "This also applies to Avg().",
      "pos": [
        26707,
        26734
      ]
    },
    {
      "content": "Use the where command",
      "pos": [
        26739,
        26760
      ]
    },
    {
      "content": "The where command works like a filter, but it can be applied in the pipeline to further filter aggregated results that have been produced by a Measure command – as opposed to raw results that are filtered at the beginning of a query.",
      "pos": [
        26762,
        26995
      ]
    },
    {
      "content": "For example:",
      "pos": [
        26997,
        27009
      ]
    },
    {
      "content": "You can add another pipe “|” character and the Where command to only get computers whose average CPU is above 80%, with the following example:",
      "pos": [
        27140,
        27282
      ]
    },
    {
      "content": "If you're familiar with Microsoft System Center - Operations Manager, you can think of the where command in management pack terms.",
      "pos": [
        27431,
        27561
      ]
    },
    {
      "content": "If the example were a rule, the first part of the query would be the data source and the where command would be the condition detection.",
      "pos": [
        27562,
        27698
      ]
    },
    {
      "content": "You can use the query as a tile in <bpt id=\"p1\">**</bpt>My Dashboard<ept id=\"p1\">**</ept>, as a monitor of sorts, to see when computer CPUs are over-utilized.",
      "pos": [
        27700,
        27820
      ]
    },
    {
      "content": "To learn more about dashboards, see <bpt id=\"p1\">[</bpt>Operational Insights dashboards<ept id=\"p1\">](operational-insights-use-dashboards)</ept>.",
      "pos": [
        27821,
        27928
      ]
    },
    {
      "content": "You can also create and use dashboards using the mobile app.",
      "pos": [
        27929,
        27989
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Azure Operational Insights Mobile App <ept id=\"p1\">](http://www.windowsphone.com/en-us/store/app/operational-insights/4823b935-83ce-466c-82bb-bd0a3f58d865)</ept>.",
      "pos": [
        27990,
        28160
      ]
    },
    {
      "content": "In the bottom two tiles of the following image, you can see the monitor displayed a list and as a number.",
      "pos": [
        28161,
        28266
      ]
    },
    {
      "content": "Essentially, you always want the number to be zero and the list to be empty.",
      "pos": [
        28267,
        28343
      ]
    },
    {
      "content": "Otherwise, it indicates an alert condition.",
      "pos": [
        28344,
        28387
      ]
    },
    {
      "content": "If needed, you can use it to take a look at which machines are under pressure.",
      "pos": [
        28388,
        28466
      ]
    },
    {
      "content": "mobile dashboard",
      "pos": [
        28470,
        28486
      ]
    },
    {
      "content": "Search syntax reference",
      "pos": [
        28547,
        28570
      ]
    },
    {
      "content": "The following reference section about search language describe the general query syntax options you can use when searching for data and filtering expressions to help narrow your search.",
      "pos": [
        28572,
        28757
      ]
    },
    {
      "content": "It also describes commands that you can use to take action on the data retrieved.",
      "pos": [
        28758,
        28839
      ]
    },
    {
      "pos": [
        28841,
        29031
      ],
      "content": "You can read about the fields returned in searches and the facets that help you dill-into similar categories of data at <bpt id=\"p1\">[</bpt>Search field and facet reference<ept id=\"p1\">](#Search-field-and-facet-reference)</ept>."
    },
    {
      "content": "General query syntax",
      "pos": [
        29037,
        29057
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        29059,
        29066
      ]
    },
    {
      "content": "filterExpression | command1 | command2 …",
      "pos": [
        29068,
        29108
      ]
    },
    {
      "content": "The filter expression (<bpt id=\"p1\">**</bpt>filterExpression<ept id=\"p1\">**</ept>) defines the \"where\" condition for the query.",
      "pos": [
        29110,
        29199
      ]
    },
    {
      "content": "The commands apply to the results returned by the query.",
      "pos": [
        29200,
        29256
      ]
    },
    {
      "content": "Multiple commands must be separated by the pipe character ( | ).",
      "pos": [
        29257,
        29321
      ]
    },
    {
      "content": "General syntax examples",
      "pos": [
        29328,
        29351
      ]
    },
    {
      "content": "Examples:",
      "pos": [
        29353,
        29362
      ]
    },
    {
      "content": "This query returns results that contain the word \"system\" in any field that has been indexed for full text or terms searching.",
      "pos": [
        29376,
        29502
      ]
    },
    {
      "pos": [
        29505,
        29642
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Not all fields are indexed this way, but the most common textual fields (such as descriptions and names) typically would be."
    },
    {
      "content": "This query returns results that contain the words \"system\" and \"error.\"",
      "pos": [
        29662,
        29733
      ]
    },
    {
      "content": "This query returns results that contain the words \"system\" and \"error.\"",
      "pos": [
        29809,
        29880
      ]
    },
    {
      "content": "It then sorts the results by the <bpt id=\"p1\">**</bpt>ManagementGroupName<ept id=\"p1\">**</ept> field (in ascending order), and then by <bpt id=\"p2\">**</bpt>TimeGenerated<ept id=\"p2\">**</ept> (in descending order).",
      "pos": [
        29881,
        30018
      ]
    },
    {
      "content": "It takes only the first 10 results.",
      "pos": [
        30019,
        30054
      ]
    },
    {
      "pos": [
        30057,
        30160
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> All the field names and the values for the string and text fields are case sensitive."
    },
    {
      "content": "Filter expression",
      "pos": [
        30166,
        30183
      ]
    },
    {
      "content": "The following subsections explain the filter expressions.",
      "pos": [
        30185,
        30242
      ]
    },
    {
      "content": "String literals",
      "pos": [
        30249,
        30264
      ]
    },
    {
      "content": "A string literal is any string that is not recognized by the parser as a keyword or a predefined data type (for example, a number or date).",
      "pos": [
        30266,
        30405
      ]
    },
    {
      "content": "Examples:",
      "pos": [
        30407,
        30416
      ]
    },
    {
      "content": "This query searches for results that contain occurrences of all five words.",
      "pos": [
        30454,
        30529
      ]
    },
    {
      "content": "To perform a complex string search, enclose the string literal in quotation marks, for example:",
      "pos": [
        30530,
        30625
      ]
    },
    {
      "content": "This only returns results with exact matches for “Windows Server”",
      "pos": [
        30650,
        30715
      ]
    },
    {
      "content": "Numbers",
      "pos": [
        30722,
        30729
      ]
    },
    {
      "content": "The parser supports the decimal integer and floating-point number syntax for numerical fields.",
      "pos": [
        30731,
        30825
      ]
    },
    {
      "content": "Examples:",
      "pos": [
        30827,
        30836
      ]
    },
    {
      "content": "Date/Time",
      "pos": [
        30883,
        30892
      ]
    },
    {
      "content": "Every piece of data in the system has a <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> property, which represents the original date and time of the record.",
      "pos": [
        30894,
        31020
      ]
    },
    {
      "content": "Some types of data can additionally have more Date/Time fields (for example, <bpt id=\"p1\">**</bpt>LastModified<ept id=\"p1\">**</ept>).",
      "pos": [
        31021,
        31116
      ]
    },
    {
      "content": "The timeline Chart/Time selector in Operational Insights shows a distribution of results over time (according to the current query being run), based on the <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> field.",
      "pos": [
        31118,
        31298
      ]
    },
    {
      "content": "Date/Time fields have a specific string format that can be used in queries to restrict the query to a particular timeframe.",
      "pos": [
        31299,
        31422
      ]
    },
    {
      "content": "You can also use syntax to refer to relative time intervals (for example, \"between 3 days ago and 2 hours ago\").",
      "pos": [
        31423,
        31535
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        31537,
        31544
      ]
    },
    {
      "content": "Example:",
      "pos": [
        31700,
        31708
      ]
    },
    {
      "content": "The previous command returns only records with a <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> value of exactly 12:20 on October 1, 2013.",
      "pos": [
        31746,
        31855
      ]
    },
    {
      "content": "It is unlikely that it will provide any result, but you understand the idea.",
      "pos": [
        31856,
        31932
      ]
    },
    {
      "content": "The parser also supports the mnemonic Date/Time value, NOW.",
      "pos": [
        31934,
        31993
      ]
    },
    {
      "content": "Example:",
      "pos": [
        31995,
        32003
      ]
    },
    {
      "content": "Again, it is unlikely that this will yield any result because data doesn’t make it through the system that fast.",
      "pos": [
        32006,
        32118
      ]
    },
    {
      "content": "These examples are building blocks to use for relative and absolute dates.",
      "pos": [
        32120,
        32194
      ]
    },
    {
      "content": "In the next three subsections, we’ll explain how to use them in more advanced filters with examples that use relative date ranges.",
      "pos": [
        32195,
        32325
      ]
    },
    {
      "content": "Date/Time math",
      "pos": [
        32332,
        32346
      ]
    },
    {
      "content": "Use the Date/Time math operators to offset or round the Date/Time value by using simple Date/Time calculations.",
      "pos": [
        32348,
        32459
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        32461,
        32468
      ]
    },
    {
      "content": "Operator",
      "pos": [
        32594,
        32602
      ]
    },
    {
      "content": "Description",
      "pos": [
        32620,
        32631
      ]
    },
    {
      "content": "/",
      "pos": [
        32680,
        32681
      ]
    },
    {
      "content": "Rounds Date/Time to the specified unit.",
      "pos": [
        32724,
        32763
      ]
    },
    {
      "content": "Example:&amp;nbsp;NOW/DAY rounds the current Date/Time to the midnight of the",
      "pos": [
        32780,
        32853
      ]
    },
    {
      "content": "current day.",
      "pos": [
        32862,
        32874
      ]
    },
    {
      "content": "or -",
      "pos": [
        32939,
        32943
      ]
    },
    {
      "content": "Offsets Date/Time by the specified number of units",
      "pos": [
        32986,
        33036
      ]
    },
    {
      "content": "Examples:&amp;nbsp;",
      "pos": [
        33052,
        33067
      ]
    },
    {
      "content": "NOW+1HOUR offsets the current Date/Time by one",
      "pos": [
        33120,
        33166
      ]
    },
    {
      "content": "hour ahead.",
      "pos": [
        33179,
        33190
      ]
    },
    {
      "content": "2013-10-01T12:00-10DAYS offsets the Date value",
      "pos": [
        33238,
        33284
      ]
    },
    {
      "content": "back by 10 days.",
      "pos": [
        33297,
        33313
      ]
    },
    {
      "content": "You can chain the Date/Time math operators together, for example:",
      "pos": [
        33371,
        33436
      ]
    },
    {
      "content": "The following table lists the supported Date/Time units.",
      "pos": [
        33469,
        33525
      ]
    },
    {
      "content": "Date/Time unit",
      "pos": [
        33527,
        33541
      ]
    },
    {
      "content": "Description",
      "pos": [
        33542,
        33553
      ]
    },
    {
      "content": "YEAR, YEARS",
      "pos": [
        33563,
        33574
      ]
    },
    {
      "content": "Rounds to current year, or offsets by the specified number of years.",
      "pos": [
        33575,
        33643
      ]
    },
    {
      "content": "MONTH, MONTHS",
      "pos": [
        33644,
        33657
      ]
    },
    {
      "content": "Rounds to current month, or offsets by the specified number of months.",
      "pos": [
        33658,
        33728
      ]
    },
    {
      "content": "DAY, DAYS, DATE",
      "pos": [
        33729,
        33744
      ]
    },
    {
      "content": "Rounds to current day of the month, or offsets by the specified number of days.",
      "pos": [
        33745,
        33824
      ]
    },
    {
      "content": "HOUR, HOURS",
      "pos": [
        33825,
        33836
      ]
    },
    {
      "content": "Rounds to current hour, or offsets by the specified number of hours.",
      "pos": [
        33837,
        33905
      ]
    },
    {
      "content": "MINUTE, MINUTES",
      "pos": [
        33906,
        33921
      ]
    },
    {
      "content": "Rounds to current minute, or offsets by the specified number of minutes.",
      "pos": [
        33922,
        33994
      ]
    },
    {
      "content": "SECOND, SECONDS",
      "pos": [
        33995,
        34010
      ]
    },
    {
      "content": "Rounds to current second, or offsets by the specified number of seconds.",
      "pos": [
        34011,
        34083
      ]
    },
    {
      "content": "MILLISECOND, MILLISECONDS, MILLI, MILLIS",
      "pos": [
        34084,
        34124
      ]
    },
    {
      "content": "Rounds to current millisecond, or offsets by the specified number of milliseconds.",
      "pos": [
        34125,
        34207
      ]
    },
    {
      "content": "Field facets",
      "pos": [
        34215,
        34227
      ]
    },
    {
      "content": "By using field facets, you can specify the search condition for specific fields and their exact values, as opposed to writing \"free text\" queries for various terms throughout the index.",
      "pos": [
        34229,
        34414
      ]
    },
    {
      "content": "We have already used this syntax in several examples in the previous paragraphs.",
      "pos": [
        34415,
        34495
      ]
    },
    {
      "content": "Here, we provide more complex examples.",
      "pos": [
        34496,
        34535
      ]
    },
    {
      "content": "Syntax",
      "pos": [
        34539,
        34545
      ]
    },
    {
      "content": "field:value",
      "pos": [
        34550,
        34561
      ]
    },
    {
      "content": "field=value",
      "pos": [
        34565,
        34576
      ]
    },
    {
      "content": "Description",
      "pos": [
        34581,
        34592
      ]
    },
    {
      "content": "Searches the field for the specific value.",
      "pos": [
        34596,
        34638
      ]
    },
    {
      "content": "The value can be a string literal, number, or Date/Time.",
      "pos": [
        34639,
        34695
      ]
    },
    {
      "content": "Example:",
      "pos": [
        34697,
        34705
      ]
    },
    {
      "content": "Syntax",
      "pos": [
        34802,
        34808
      ]
    },
    {
      "content": "field&gt;value",
      "pos": [
        34813,
        34824
      ]
    },
    {
      "content": "field&lt;value",
      "pos": [
        34828,
        34839
      ]
    },
    {
      "content": "field&gt;=value",
      "pos": [
        34843,
        34855
      ]
    },
    {
      "content": "field&lt;=value",
      "pos": [
        34859,
        34871
      ]
    },
    {
      "content": "field!=value",
      "pos": [
        34875,
        34887
      ]
    },
    {
      "content": "Description",
      "pos": [
        34892,
        34903
      ]
    },
    {
      "content": "Provides comparisons.",
      "pos": [
        34907,
        34928
      ]
    },
    {
      "content": "Example:",
      "pos": [
        34930,
        34938
      ]
    },
    {
      "content": "Syntax",
      "pos": [
        34973,
        34979
      ]
    },
    {
      "content": "field:[from..to]",
      "pos": [
        34984,
        35000
      ]
    },
    {
      "content": "Description",
      "pos": [
        35005,
        35016
      ]
    },
    {
      "content": "Provides range faceting.",
      "pos": [
        35020,
        35044
      ]
    },
    {
      "content": "Example:",
      "pos": [
        35046,
        35054
      ]
    },
    {
      "content": "Logical operators",
      "pos": [
        35120,
        35137
      ]
    },
    {
      "content": "The query languages support the logical operators (AND, OR, and NOT) and their C-style aliases (&amp;&amp;, ||, and !) respectively.",
      "pos": [
        35139,
        35263
      ]
    },
    {
      "content": "You can use parentheses to group these operators.",
      "pos": [
        35264,
        35313
      ]
    },
    {
      "content": "Examples:",
      "pos": [
        35315,
        35324
      ]
    },
    {
      "content": "You can omit the logical operator for the top-level filter arguments.",
      "pos": [
        35470,
        35539
      ]
    },
    {
      "content": "In this case, the AND operator is assumed.",
      "pos": [
        35540,
        35582
      ]
    },
    {
      "content": "Filter expression",
      "pos": [
        35585,
        35602
      ]
    },
    {
      "content": "Equivalent to",
      "pos": [
        35603,
        35616
      ]
    },
    {
      "content": "system error",
      "pos": [
        35625,
        35637
      ]
    },
    {
      "content": "system AND error",
      "pos": [
        35638,
        35654
      ]
    },
    {
      "content": "system \"Windows Server\" OR Severity:1",
      "pos": [
        35655,
        35692
      ]
    },
    {
      "content": "system AND (\"Windows Server\" OR Severity:1)",
      "pos": [
        35693,
        35736
      ]
    },
    {
      "content": "Commands",
      "pos": [
        35744,
        35752
      ]
    },
    {
      "content": "The commands apply to the results that are returned by the query.",
      "pos": [
        35754,
        35819
      ]
    },
    {
      "content": "Use the pipe character ( | ) to apply a command to the retrieved results.",
      "pos": [
        35820,
        35893
      ]
    },
    {
      "content": "Multiple commands must be separated by the pipe character.",
      "pos": [
        35894,
        35952
      ]
    },
    {
      "pos": [
        35955,
        36062
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Command names can be written in upper case or lower case, unlike the field names and the data."
    },
    {
      "content": "Sort",
      "pos": [
        36069,
        36073
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        36075,
        36082
      ]
    },
    {
      "content": "Sorts the results by particular fields.",
      "pos": [
        36130,
        36169
      ]
    },
    {
      "content": "The asc/desc prefix is optional.",
      "pos": [
        36170,
        36202
      ]
    },
    {
      "content": "If they are omitted, the \"asc\" sort order is assumed.",
      "pos": [
        36203,
        36256
      ]
    },
    {
      "content": "If a query does not use the <bpt id=\"p1\">**</bpt>Sort<ept id=\"p1\">**</ept> command explicitly, Sort <bpt id=\"p2\">**</bpt>TimeGenerated<ept id=\"p2\">**</ept> desc is the default behavior, and it will always return the most recent results first.",
      "pos": [
        36257,
        36423
      ]
    },
    {
      "content": "Top/Limit",
      "pos": [
        36430,
        36439
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        36441,
        36448
      ]
    },
    {
      "content": "Limits the response to the top N results.",
      "pos": [
        36484,
        36525
      ]
    },
    {
      "content": "Example:",
      "pos": [
        36527,
        36535
      ]
    },
    {
      "content": "Returns the top 10 matching results.",
      "pos": [
        36578,
        36614
      ]
    },
    {
      "content": "Skip",
      "pos": [
        36621,
        36625
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        36627,
        36634
      ]
    },
    {
      "content": "Skips the number of results listed.",
      "pos": [
        36653,
        36688
      ]
    },
    {
      "content": "Example:",
      "pos": [
        36690,
        36698
      ]
    },
    {
      "content": "Returns top 10 matching results starting at result 200.",
      "pos": [
        36752,
        36807
      ]
    },
    {
      "content": "Select",
      "pos": [
        36814,
        36820
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        36822,
        36829
      ]
    },
    {
      "content": "Limits results to the fields you choose.",
      "pos": [
        36863,
        36903
      ]
    },
    {
      "content": "Example:",
      "pos": [
        36905,
        36913
      ]
    },
    {
      "pos": [
        36971,
        37035
      ],
      "content": "Limits the returned results fields to <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Severity<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Measure",
      "pos": [
        37042,
        37049
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>measure<ept id=\"p1\">**</ept> command is used to apply statistical functions to the raw search results.",
      "pos": [
        37051,
        37140
      ]
    },
    {
      "content": "This is very useful to get <bpt id=\"p1\">*</bpt>group-by<ept id=\"p1\">*</ept> views over the data.",
      "pos": [
        37141,
        37199
      ]
    },
    {
      "content": "When you use the <bpt id=\"p1\">**</bpt>measure<ept id=\"p1\">**</ept> command, Operational Insights displays a table with aggregated results.",
      "pos": [
        37200,
        37300
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        37302,
        37309
      ]
    },
    {
      "pos": [
        37481,
        37596
      ],
      "content": "Aggregates the results by <bpt id=\"p1\">**</bpt>groupField<ept id=\"p1\">**</ept> and calculates the aggregated measure values by using <bpt id=\"p2\">**</bpt>aggregatedField<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Measure statistical function",
      "pos": [
        37678,
        37706
      ]
    },
    {
      "content": "Description",
      "pos": [
        37725,
        37736
      ]
    },
    {
      "content": "aggregateFunction<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        37790,
        37813
      ]
    },
    {
      "content": "The name of the aggregate function (case insensitive).",
      "pos": [
        37872,
        37926
      ]
    },
    {
      "content": "The following",
      "pos": [
        37927,
        37940
      ]
    },
    {
      "content": "aggregate functions are supported :",
      "pos": [
        37949,
        37984
      ]
    },
    {
      "content": "COUNT",
      "pos": [
        38036,
        38041
      ]
    },
    {
      "content": "MAX",
      "pos": [
        38089,
        38092
      ]
    },
    {
      "content": "MIN",
      "pos": [
        38140,
        38143
      ]
    },
    {
      "content": "SUM",
      "pos": [
        38191,
        38194
      ]
    },
    {
      "content": "AVG",
      "pos": [
        38242,
        38245
      ]
    },
    {
      "content": "STDDEV",
      "pos": [
        38293,
        38299
      ]
    },
    {
      "content": "aggregatedField<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        38388,
        38409
      ]
    },
    {
      "content": "The field that is being aggregated.",
      "pos": [
        38452,
        38487
      ]
    },
    {
      "content": "This field is optional for the",
      "pos": [
        38488,
        38518
      ]
    },
    {
      "content": "COUNT aggregate function, but has to be an existing numeric field for",
      "pos": [
        38527,
        38596
      ]
    },
    {
      "content": "SUM, MAX, MIN, AVG, or STDDEV.",
      "pos": [
        38605,
        38635
      ]
    },
    {
      "content": "fieldAlias<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        38701,
        38717
      ]
    },
    {
      "content": "The (optional) alias for the calculated aggregated value.",
      "pos": [
        38760,
        38817
      ]
    },
    {
      "content": "If not",
      "pos": [
        38818,
        38824
      ]
    },
    {
      "content": "specified, the field name will be <ph id=\"ph1\">&lt;em&gt;</ph>AggregatedValue.",
      "pos": [
        38833,
        38887
      ]
    },
    {
      "content": "groupField<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        38958,
        38974
      ]
    },
    {
      "content": "The name of the field that the result set is grouped by.",
      "pos": [
        39017,
        39073
      ]
    },
    {
      "content": "Interval<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        39140,
        39154
      ]
    },
    {
      "content": "The time interval in the format:",
      "pos": [
        39197,
        39229
      ]
    },
    {
      "content": "nnnNAME<ph id=\"ph1\">&lt;/em&gt;</ph><ph id=\"ph2\"> </ph>",
      "pos": [
        39250,
        39263
      ]
    },
    {
      "content": "Where:",
      "pos": [
        39295,
        39301
      ]
    },
    {
      "content": "nnn is the positive integer number",
      "pos": [
        39318,
        39352
      ]
    },
    {
      "content": "NAME<ph id=\"ph1\">&lt;/em&gt;</ph> is the interval name",
      "pos": [
        39372,
        39402
      ]
    },
    {
      "content": "Supported interval names include (case sensitive):",
      "pos": [
        39418,
        39468
      ]
    },
    {
      "content": "MILLISECOND[S]",
      "pos": [
        39521,
        39535
      ]
    },
    {
      "content": "SECOND[S]",
      "pos": [
        39583,
        39592
      ]
    },
    {
      "content": "MINUTE[S]",
      "pos": [
        39640,
        39649
      ]
    },
    {
      "content": "HOUR[S]",
      "pos": [
        39697,
        39704
      ]
    },
    {
      "content": "DAY[S]",
      "pos": [
        39752,
        39758
      ]
    },
    {
      "content": "MONTH[S]",
      "pos": [
        39806,
        39814
      ]
    },
    {
      "content": "YEAR[S]",
      "pos": [
        39862,
        39869
      ]
    },
    {
      "content": "The interval option can only be used in Date/Time group fields (such as <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TimeCreated<ept id=\"p2\">**</ept>).",
      "pos": [
        39929,
        40040
      ]
    },
    {
      "content": "Currently, this is not enforced by the service, but a field without Date/Time that is passed to the backend will cause a runtime error.",
      "pos": [
        40041,
        40176
      ]
    },
    {
      "content": "When the schema validation is implemented, the service API rejects queries that use fields without Date/Time for interval aggregation.",
      "pos": [
        40177,
        40311
      ]
    },
    {
      "content": "The current <bpt id=\"p1\">**</bpt>Measure<ept id=\"p1\">**</ept> implementation supports interval grouping for the <bpt id=\"p2\">**</bpt>Count<ept id=\"p2\">**</ept> aggregate function only.",
      "pos": [
        40312,
        40420
      ]
    },
    {
      "pos": [
        40422,
        40551
      ],
      "content": "If the BY clause is omitted but an interval is specified (as a second syntax), the <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> field is assumed by default."
    },
    {
      "content": "Examples:",
      "pos": [
        40553,
        40562
      ]
    },
    {
      "content": "Example 1",
      "pos": [
        40566,
        40575
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        40635,
        40646
      ]
    },
    {
      "content": "Groups the alerts by <bpt id=\"p1\">**</bpt>ObjectID<ept id=\"p1\">**</ept> and calculates the number of alerts for each group.",
      "pos": [
        40649,
        40734
      ]
    },
    {
      "content": "The aggregated value is returned as the <bpt id=\"p1\">**</bpt>Count<ept id=\"p1\">**</ept> field (alias).",
      "pos": [
        40735,
        40799
      ]
    },
    {
      "content": "Example 2",
      "pos": [
        40803,
        40812
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        40866,
        40877
      ]
    },
    {
      "pos": [
        40880,
        41006
      ],
      "content": "Groups the alerts by 1-hour intervals by using the <bpt id=\"p1\">**</bpt>TimeGenerated<ept id=\"p1\">**</ept> field, and returns the number of alerts in each interval."
    },
    {
      "content": "Example 3",
      "pos": [
        41010,
        41019
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41090,
        41101
      ]
    },
    {
      "pos": [
        41104,
        41189
      ],
      "content": "Same as the previous example, but with an aggregated field alias (<bpt id=\"p1\">**</bpt>AlertsPerHour<ept id=\"p1\">**</ept>)."
    },
    {
      "content": "Example 4",
      "pos": [
        41193,
        41202
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41262,
        41273
      ]
    },
    {
      "pos": [
        41276,
        41401
      ],
      "content": "Groups the results by 5-day intervals by using the <bpt id=\"p1\">**</bpt>TimeCreated<ept id=\"p1\">**</ept> field, and returns the number of results in each interval."
    },
    {
      "content": "Example 5",
      "pos": [
        41405,
        41414
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41475,
        41486
      ]
    },
    {
      "content": "Groups the alerts by workload name, and returns the maximum alert severity value for each workflow.",
      "pos": [
        41489,
        41588
      ]
    },
    {
      "content": "Example 6",
      "pos": [
        41592,
        41601
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41662,
        41673
      ]
    },
    {
      "pos": [
        41676,
        41747
      ],
      "content": "Same as the previous example, but with the <bpt id=\"p1\">**</bpt>Min<ept id=\"p1\">**</ept> aggregated function."
    },
    {
      "content": "Example 7",
      "pos": [
        41751,
        41760
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41825,
        41836
      ]
    },
    {
      "content": "Groups PerfHourly by ObjectId and calculates the average (avg).",
      "pos": [
        41839,
        41902
      ]
    },
    {
      "content": "Example 8",
      "pos": [
        41906,
        41915
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        41980,
        41991
      ]
    },
    {
      "pos": [
        41994,
        42041
      ],
      "content": "Same as the previous example, but uses <bpt id=\"p1\">**</bpt>Sum<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Example 9",
      "pos": [
        42045,
        42054
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        42122,
        42133
      ]
    },
    {
      "pos": [
        42136,
        42186
      ],
      "content": "Same as the previous example, but uses <bpt id=\"p1\">**</bpt>STDDEV<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Example 10",
      "pos": [
        42190,
        42200
      ]
    },
    {
      "content": "Explanation",
      "pos": [
        42290,
        42301
      ]
    },
    {
      "content": "Gets the top five workflows with the maximum number of alerts.",
      "pos": [
        42304,
        42366
      ]
    },
    {
      "content": "Where",
      "pos": [
        42373,
        42378
      ]
    },
    {
      "content": "Syntax:",
      "pos": [
        42380,
        42387
      ]
    },
    {
      "pos": [
        42389,
        42417
      ],
      "content": "<bpt id=\"p1\">**</bpt>where<ept id=\"p1\">**</ept> AggregatedValue&gt;20"
    },
    {
      "pos": [
        42419,
        42560
      ],
      "content": "Can only be used after a <bpt id=\"p1\">**</bpt>Measure<ept id=\"p1\">**</ept> command to further filter the aggregated results that the <bpt id=\"p2\">**</bpt>Measure<ept id=\"p2\">**</ept> aggregation function has produced."
    },
    {
      "content": "Examples:",
      "pos": [
        42562,
        42571
      ]
    },
    {
      "content": "Search field and facet reference",
      "pos": [
        42804,
        42836
      ]
    },
    {
      "content": "When you use Search to find data, results display various field and facets.",
      "pos": [
        42838,
        42913
      ]
    },
    {
      "content": "However, some of the information you’ll see might not appear very descriptive.",
      "pos": [
        42914,
        42992
      ]
    },
    {
      "content": "You can use the following information to help you understand the results.",
      "pos": [
        42993,
        43066
      ]
    },
    {
      "content": "Field",
      "pos": [
        43143,
        43148
      ]
    },
    {
      "content": "Search Type",
      "pos": [
        43173,
        43184
      ]
    },
    {
      "content": "Description",
      "pos": [
        43208,
        43219
      ]
    },
    {
      "content": "TenantId",
      "pos": [
        43272,
        43280
      ]
    },
    {
      "content": "All",
      "pos": [
        43323,
        43326
      ]
    },
    {
      "content": "Used to partition data",
      "pos": [
        43369,
        43391
      ]
    },
    {
      "content": "TimeGenerated",
      "pos": [
        43453,
        43466
      ]
    },
    {
      "content": "All",
      "pos": [
        43509,
        43512
      ]
    },
    {
      "content": "Used to drive the timeline, timeselectors (in search and in other",
      "pos": [
        43555,
        43620
      ]
    },
    {
      "content": "screens).",
      "pos": [
        43629,
        43638
      ]
    },
    {
      "content": "It represents when the piece of data was generated (typically",
      "pos": [
        43639,
        43700
      ]
    },
    {
      "content": "on the agent).",
      "pos": [
        43709,
        43723
      ]
    },
    {
      "content": "The time is expressed in ISO format and is always UTC.",
      "pos": [
        43724,
        43778
      ]
    },
    {
      "content": "In",
      "pos": [
        43779,
        43781
      ]
    },
    {
      "content": "the case of &amp;#39;types&amp;#39; that are based on existing instrumentation (i.e.",
      "pos": [
        43790,
        43866
      ]
    },
    {
      "content": "events in a log) this is typically the real time that the log",
      "pos": [
        43875,
        43936
      ]
    },
    {
      "content": "entry/line/record was logged at; for some of the other types that are",
      "pos": [
        43945,
        44014
      ]
    },
    {
      "content": "produced either via management packs or in the cloud - i.e.",
      "pos": [
        44023,
        44082
      ]
    },
    {
      "content": "recommendations/alerts/updateagent/etc, this is the time when this new",
      "pos": [
        44091,
        44161
      ]
    },
    {
      "content": "piece of data with a snapshot of a configuration of some sort was",
      "pos": [
        44170,
        44235
      ]
    },
    {
      "content": "collected or a recommendation/alert was produced based on it",
      "pos": [
        44244,
        44304
      ]
    },
    {
      "content": "EventID",
      "pos": [
        44366,
        44373
      ]
    },
    {
      "content": "Event",
      "pos": [
        44416,
        44421
      ]
    },
    {
      "content": "EventID in the Windows event log",
      "pos": [
        44464,
        44496
      ]
    },
    {
      "content": "EventLog",
      "pos": [
        44558,
        44566
      ]
    },
    {
      "content": "Event",
      "pos": [
        44609,
        44614
      ]
    },
    {
      "content": "Event Log where the event was logged by Windows",
      "pos": [
        44657,
        44704
      ]
    },
    {
      "content": "EventLevelName",
      "pos": [
        44766,
        44780
      ]
    },
    {
      "content": "Event",
      "pos": [
        44823,
        44828
      ]
    },
    {
      "content": "Critical / warning / information / success",
      "pos": [
        44871,
        44913
      ]
    },
    {
      "content": "EventLevel",
      "pos": [
        44975,
        44985
      ]
    },
    {
      "content": "Event",
      "pos": [
        45028,
        45033
      ]
    },
    {
      "content": "Numerical value for critical / warning / information / success (use",
      "pos": [
        45076,
        45143
      ]
    },
    {
      "content": "EventLevelName instead for easier/more readable queries)",
      "pos": [
        45152,
        45208
      ]
    },
    {
      "content": "SourceSystem",
      "pos": [
        45270,
        45282
      ]
    },
    {
      "content": "All",
      "pos": [
        45325,
        45328
      ]
    },
    {
      "content": "Where the data comes from (in terms of &amp;#39;attach&amp;#39; mode to the service -",
      "pos": [
        45371,
        45448
      ]
    },
    {
      "content": "i.e. Operations Manager, Operational Insights (=the data is generated in",
      "pos": [
        45457,
        45529
      ]
    },
    {
      "content": "the cloud), Azure Storage (data coming from WAD) and so on",
      "pos": [
        45538,
        45596
      ]
    },
    {
      "content": "ObjectName",
      "pos": [
        45658,
        45668
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        45711,
        45721
      ]
    },
    {
      "content": "Windows perfomance object name",
      "pos": [
        45764,
        45794
      ]
    },
    {
      "content": "InstanceName",
      "pos": [
        45856,
        45868
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        45911,
        45921
      ]
    },
    {
      "content": "Windows performance counter instance name",
      "pos": [
        45964,
        46005
      ]
    },
    {
      "content": "CounteName",
      "pos": [
        46067,
        46077
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        46120,
        46130
      ]
    },
    {
      "content": "Windows performance counter name",
      "pos": [
        46173,
        46205
      ]
    },
    {
      "content": "ObjectDisplayName",
      "pos": [
        46267,
        46284
      ]
    },
    {
      "content": "PerfHourly, ConfigurationAlert, ConfigurationObject, ConfigurationObjectProperty",
      "pos": [
        46327,
        46407
      ]
    },
    {
      "content": "Display name of the object targeted by a performance collection rule",
      "pos": [
        46450,
        46518
      ]
    },
    {
      "content": "in Operations Manager, or that of the object discovered by Operational",
      "pos": [
        46527,
        46597
      ]
    },
    {
      "content": "Insights, or against which the alert was generated",
      "pos": [
        46606,
        46656
      ]
    },
    {
      "content": "RootObjectName",
      "pos": [
        46718,
        46732
      ]
    },
    {
      "content": "PerfHourly, ConfigurationAlert, ConfigurationObject, ConfigurationObjectProperty",
      "pos": [
        46775,
        46855
      ]
    },
    {
      "content": "Display name of the parent of the parent (in a double hosting",
      "pos": [
        46898,
        46959
      ]
    },
    {
      "content": "relationship: i.e. SqlDatabase hosted by SqlInstance hosted by Windows",
      "pos": [
        46968,
        47038
      ]
    },
    {
      "content": "Computer) of the object targeted by a performance collection rule in",
      "pos": [
        47047,
        47115
      ]
    },
    {
      "content": "Operations Manager, or that of the object discovered by Operational",
      "pos": [
        47124,
        47191
      ]
    },
    {
      "content": "Insights, or against which the alert was generated",
      "pos": [
        47200,
        47250
      ]
    },
    {
      "content": "Computer",
      "pos": [
        47312,
        47320
      ]
    },
    {
      "content": "Most types",
      "pos": [
        47363,
        47373
      ]
    },
    {
      "content": "Computer name that the data belongs to",
      "pos": [
        47417,
        47455
      ]
    },
    {
      "content": "DeviceName",
      "pos": [
        47517,
        47527
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        47570,
        47586
      ]
    },
    {
      "content": "Computer name the data belongs to (same as &amp;#39;Computer&amp;#39;)",
      "pos": [
        47629,
        47691
      ]
    },
    {
      "content": "DetectionId",
      "pos": [
        47753,
        47764
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        47807,
        47823
      ]
    },
    {
      "content": "ThreatStatusRank",
      "pos": [
        47928,
        47944
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        47987,
        48003
      ]
    },
    {
      "content": "Threat status rank is a numerical representation of the threat",
      "pos": [
        48046,
        48108
      ]
    },
    {
      "content": "status, and similar to HTTP response codes, we&amp;#39;ve left gaps between the",
      "pos": [
        48117,
        48192
      ]
    },
    {
      "content": "numbers (which is why no threats is 150 and not 100 or 0) so that we&amp;#39;ve",
      "pos": [
        48201,
        48276
      ]
    },
    {
      "content": "got some room to add new states.",
      "pos": [
        48285,
        48317
      ]
    },
    {
      "content": "When we do a rollup for threat status",
      "pos": [
        48318,
        48355
      ]
    },
    {
      "content": "and protection status, we want to show the worst state that the computer",
      "pos": [
        48364,
        48436
      ]
    },
    {
      "content": "has been in during the selected time period.",
      "pos": [
        48445,
        48489
      ]
    },
    {
      "content": "We use the numbers to rank",
      "pos": [
        48490,
        48516
      ]
    },
    {
      "content": "the different states so we can look for the record with the highest",
      "pos": [
        48525,
        48592
      ]
    },
    {
      "content": "number.",
      "pos": [
        48601,
        48608
      ]
    },
    {
      "content": "ThreatStatus",
      "pos": [
        48670,
        48682
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        48725,
        48741
      ]
    },
    {
      "content": "Description of ThreatStatus, maps 1:1 with ThreatStatusRank",
      "pos": [
        48784,
        48843
      ]
    },
    {
      "content": "TypeofProtection",
      "pos": [
        48905,
        48921
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        48964,
        48980
      ]
    },
    {
      "content": "Anti-malware product that is detected in the computer: none,",
      "pos": [
        49023,
        49083
      ]
    },
    {
      "content": "Microsoft Malware Removal tool, Forefront, and so on",
      "pos": [
        49092,
        49144
      ]
    },
    {
      "content": "ScanDate",
      "pos": [
        49206,
        49214
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        49257,
        49273
      ]
    },
    {
      "content": "SourceHealthServiceId",
      "pos": [
        49378,
        49399
      ]
    },
    {
      "content": "ProtectionStatus, RequiredUpdate",
      "pos": [
        49442,
        49474
      ]
    },
    {
      "content": "HealthService ID for this computer&amp;#39;s agent",
      "pos": [
        49517,
        49563
      ]
    },
    {
      "content": "HealthServiceId",
      "pos": [
        49625,
        49640
      ]
    },
    {
      "content": "Most types",
      "pos": [
        49683,
        49693
      ]
    },
    {
      "content": "HealthService ID for this computer&amp;#39;s agent",
      "pos": [
        49737,
        49783
      ]
    },
    {
      "content": "ManagementGroupName",
      "pos": [
        49845,
        49864
      ]
    },
    {
      "content": "Most types",
      "pos": [
        49907,
        49917
      ]
    },
    {
      "content": "Management Group Name for Operations Manager-attached agents;",
      "pos": [
        49961,
        50022
      ]
    },
    {
      "content": "otherwise it will be null/blank",
      "pos": [
        50031,
        50062
      ]
    },
    {
      "content": "ObjectType",
      "pos": [
        50124,
        50134
      ]
    },
    {
      "content": "ConfigurationObject",
      "pos": [
        50177,
        50196
      ]
    },
    {
      "content": "Type (as in Operations Manager management pack&amp;#39;s &amp;#39;type&amp;#39;/class) for",
      "pos": [
        50239,
        50317
      ]
    },
    {
      "content": "this object discovered by Operational Insights configuration assessment",
      "pos": [
        50326,
        50397
      ]
    },
    {
      "content": "UpdateTitle",
      "pos": [
        50459,
        50470
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        50513,
        50527
      ]
    },
    {
      "content": "Name of the update that was found not installed",
      "pos": [
        50570,
        50617
      ]
    },
    {
      "content": "PublishDate",
      "pos": [
        50679,
        50690
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        50733,
        50747
      ]
    },
    {
      "content": "When was the update published on Microsoft update?",
      "pos": [
        50790,
        50840
      ]
    },
    {
      "content": "Server",
      "pos": [
        50902,
        50908
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        50951,
        50965
      ]
    },
    {
      "content": "Computer name the data belongs to (same as &amp;#39;Computer&amp;#39;)",
      "pos": [
        51008,
        51070
      ]
    },
    {
      "content": "Product",
      "pos": [
        51132,
        51139
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        51182,
        51196
      ]
    },
    {
      "content": "Product that the update applies to",
      "pos": [
        51239,
        51273
      ]
    },
    {
      "content": "UpdateClassification",
      "pos": [
        51335,
        51355
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        51398,
        51412
      ]
    },
    {
      "content": "Type of update (update rollup, service pack, etc)",
      "pos": [
        51455,
        51504
      ]
    },
    {
      "content": "KBID",
      "pos": [
        51566,
        51570
      ]
    },
    {
      "content": "RequiredUpdate",
      "pos": [
        51613,
        51627
      ]
    },
    {
      "content": "KB article ID that describes this best practice or update",
      "pos": [
        51670,
        51727
      ]
    },
    {
      "content": "WorkflowName",
      "pos": [
        51789,
        51801
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        51844,
        51862
      ]
    },
    {
      "content": "Name of the rule or monitor that produced the alert",
      "pos": [
        51905,
        51956
      ]
    },
    {
      "content": "Severity",
      "pos": [
        52018,
        52026
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        52069,
        52087
      ]
    },
    {
      "content": "Severity of the alert",
      "pos": [
        52130,
        52151
      ]
    },
    {
      "content": "Priority",
      "pos": [
        52213,
        52221
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        52264,
        52282
      ]
    },
    {
      "content": "Priority of the alert",
      "pos": [
        52325,
        52346
      ]
    },
    {
      "content": "IsMonitorAlert",
      "pos": [
        52408,
        52422
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        52465,
        52483
      ]
    },
    {
      "content": "Is this alert generated by a monitor (true) or a rule (false)?",
      "pos": [
        52526,
        52588
      ]
    },
    {
      "content": "AlertParameters",
      "pos": [
        52650,
        52665
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        52708,
        52726
      ]
    },
    {
      "content": "XML with the parameters of the Operational Insights alert",
      "pos": [
        52769,
        52826
      ]
    },
    {
      "content": "Context",
      "pos": [
        52888,
        52895
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        52938,
        52956
      ]
    },
    {
      "content": "XML with the &amp;#39;context&amp;#39; of the Operational Insights alert",
      "pos": [
        52999,
        53063
      ]
    },
    {
      "content": "Workload",
      "pos": [
        53125,
        53133
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        53176,
        53194
      ]
    },
    {
      "content": "Technology or &amp;#39;workload&amp;#39; that the alert refers to",
      "pos": [
        53237,
        53294
      ]
    },
    {
      "content": "AdvisorWorkload",
      "pos": [
        53357,
        53372
      ]
    },
    {
      "content": "Recommendation",
      "pos": [
        53415,
        53429
      ]
    },
    {
      "content": "Technology or &amp;#39;workload&amp;#39; that the recommendation refers to",
      "pos": [
        53472,
        53538
      ]
    },
    {
      "content": "Description",
      "pos": [
        53600,
        53611
      ]
    },
    {
      "content": "ConfigurationAlert",
      "pos": [
        53654,
        53672
      ]
    },
    {
      "content": "Alert description (short)",
      "pos": [
        53715,
        53740
      ]
    },
    {
      "content": "DaysSinceLastUpdate",
      "pos": [
        53802,
        53821
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        53864,
        53875
      ]
    },
    {
      "content": "How many days ago (relative to &amp;#39;TimeGenerated&amp;#39; of this record) did",
      "pos": [
        53918,
        53992
      ]
    },
    {
      "content": "this agent install any update from WSUS/Microsoft Update?",
      "pos": [
        54001,
        54058
      ]
    },
    {
      "content": "DaysSinceLastUpdateBucket",
      "pos": [
        54120,
        54145
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        54188,
        54199
      ]
    },
    {
      "content": "Based on DaysSinceLastUpdate, a categorization in &amp;#39;time buckets&amp;#39; of",
      "pos": [
        54242,
        54317
      ]
    },
    {
      "content": "how long ago was a computer last installed any update from",
      "pos": [
        54326,
        54384
      ]
    },
    {
      "content": "WSUS/Microsoft Update",
      "pos": [
        54393,
        54414
      ]
    },
    {
      "content": "AutomaticUpdateEnabled",
      "pos": [
        54476,
        54498
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        54541,
        54552
      ]
    },
    {
      "content": "Is automatic update checking enabled or disabled on this agent?",
      "pos": [
        54595,
        54658
      ]
    },
    {
      "content": "AutomaticUpdateValue",
      "pos": [
        54720,
        54740
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        54783,
        54794
      ]
    },
    {
      "content": "Is automatic update checking set to automatically download and",
      "pos": [
        54837,
        54899
      ]
    },
    {
      "content": "install, only download, or only check?",
      "pos": [
        54908,
        54946
      ]
    },
    {
      "content": "WindowsUpdateAgentVersion",
      "pos": [
        55008,
        55033
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        55076,
        55087
      ]
    },
    {
      "content": "Version number of the Microsoft Update agent",
      "pos": [
        55130,
        55174
      ]
    },
    {
      "content": "WSUSServer",
      "pos": [
        55236,
        55246
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        55289,
        55300
      ]
    },
    {
      "content": "Which WSUS server is this update agent targeting?",
      "pos": [
        55343,
        55392
      ]
    },
    {
      "content": "OSVersion",
      "pos": [
        55454,
        55463
      ]
    },
    {
      "content": "UpdateAgent",
      "pos": [
        55506,
        55517
      ]
    },
    {
      "content": "Version of the operating system this update agent is running on",
      "pos": [
        55560,
        55623
      ]
    },
    {
      "content": "Name",
      "pos": [
        55685,
        55689
      ]
    },
    {
      "content": "Recommendation, ConfigurationObjectProperty",
      "pos": [
        55732,
        55775
      ]
    },
    {
      "content": "Name/title of the recommendation, or name of the property from",
      "pos": [
        55818,
        55880
      ]
    },
    {
      "content": "Operational Insights Configuration Assessment",
      "pos": [
        55889,
        55934
      ]
    },
    {
      "content": "Value",
      "pos": [
        55996,
        56001
      ]
    },
    {
      "content": "ConfigurationObjectProperty",
      "pos": [
        56044,
        56071
      ]
    },
    {
      "content": "Value of a property from Operational Insights Configuration",
      "pos": [
        56114,
        56173
      ]
    },
    {
      "content": "Assessment",
      "pos": [
        56182,
        56192
      ]
    },
    {
      "content": "KBLink",
      "pos": [
        56254,
        56260
      ]
    },
    {
      "content": "Recommendation",
      "pos": [
        56303,
        56317
      ]
    },
    {
      "content": "URL to the KB article that describes this best practice or update",
      "pos": [
        56360,
        56425
      ]
    },
    {
      "content": "RecommendationStatus",
      "pos": [
        56487,
        56507
      ]
    },
    {
      "content": "Recommendation",
      "pos": [
        56550,
        56564
      ]
    },
    {
      "content": "Recommendations are among the few types whose records get &amp;#39;updated&amp;#39;,",
      "pos": [
        56607,
        56683
      ]
    },
    {
      "content": "not just added to the search index.",
      "pos": [
        56692,
        56727
      ]
    },
    {
      "content": "This status changes whether the",
      "pos": [
        56728,
        56759
      ]
    },
    {
      "content": "recommendation is active/open or if Operational Insights detects that it",
      "pos": [
        56768,
        56840
      ]
    },
    {
      "content": "has been resolved",
      "pos": [
        56849,
        56866
      ]
    },
    {
      "content": "RenderedDescription",
      "pos": [
        56928,
        56947
      ]
    },
    {
      "content": "Event",
      "pos": [
        56990,
        56995
      ]
    },
    {
      "content": "Rendered description (reused text with populated parameters) of a",
      "pos": [
        57038,
        57103
      ]
    },
    {
      "content": "Windows event",
      "pos": [
        57112,
        57125
      ]
    },
    {
      "content": "ParameterXml",
      "pos": [
        57187,
        57199
      ]
    },
    {
      "content": "Event",
      "pos": [
        57242,
        57247
      ]
    },
    {
      "content": "XML with the parameters in the &amp;#39;data&amp;#39; section of a Windows Event (as",
      "pos": [
        57290,
        57366
      ]
    },
    {
      "content": "seen in event viewer)",
      "pos": [
        57375,
        57396
      ]
    },
    {
      "content": "EventData",
      "pos": [
        57458,
        57467
      ]
    },
    {
      "content": "Event",
      "pos": [
        57510,
        57515
      ]
    },
    {
      "content": "XML with the whole &amp;#39;data&amp;#39; section of a Windows Event (as seen in",
      "pos": [
        57558,
        57630
      ]
    },
    {
      "content": "event viewer)",
      "pos": [
        57639,
        57652
      ]
    },
    {
      "content": "Source",
      "pos": [
        57714,
        57720
      ]
    },
    {
      "content": "Event",
      "pos": [
        57763,
        57768
      ]
    },
    {
      "content": "Event log source that generated the event",
      "pos": [
        57811,
        57852
      ]
    },
    {
      "content": "EventCategory",
      "pos": [
        57914,
        57927
      ]
    },
    {
      "content": "Event",
      "pos": [
        57970,
        57975
      ]
    },
    {
      "content": "Category of the event , directly from the Windows event log",
      "pos": [
        58018,
        58077
      ]
    },
    {
      "content": "UserName",
      "pos": [
        58139,
        58147
      ]
    },
    {
      "content": "Event",
      "pos": [
        58190,
        58195
      ]
    },
    {
      "content": "User name of the Windows event (typically, NT AUTHORITY\\LOCALSYSTEM)",
      "pos": [
        58238,
        58306
      ]
    },
    {
      "content": "SampleValue",
      "pos": [
        58368,
        58379
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        58422,
        58432
      ]
    },
    {
      "content": "Average value for the hourly aggregation of a performance counter",
      "pos": [
        58475,
        58540
      ]
    },
    {
      "content": "Min",
      "pos": [
        58603,
        58606
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        58649,
        58659
      ]
    },
    {
      "content": "Minimum value in the hourly interval of a performance counter hourly",
      "pos": [
        58702,
        58770
      ]
    },
    {
      "content": "aggregate",
      "pos": [
        58779,
        58788
      ]
    },
    {
      "content": "Max",
      "pos": [
        58850,
        58853
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        58896,
        58906
      ]
    },
    {
      "content": "Maximum value in the hourly interval of a performance counter hourly",
      "pos": [
        58949,
        59017
      ]
    },
    {
      "content": "aggregate",
      "pos": [
        59026,
        59035
      ]
    },
    {
      "content": "Percentile95",
      "pos": [
        59097,
        59109
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        59152,
        59162
      ]
    },
    {
      "content": "The 95th percentile value for the hourly interval of a performance",
      "pos": [
        59205,
        59271
      ]
    },
    {
      "content": "counter hourly aggregate",
      "pos": [
        59280,
        59304
      ]
    },
    {
      "content": "SampleCount",
      "pos": [
        59366,
        59377
      ]
    },
    {
      "content": "PerfHourly",
      "pos": [
        59420,
        59430
      ]
    },
    {
      "content": "How many &amp;#39;raw&amp;#39; perf counter samples were used to produce this hourly",
      "pos": [
        59473,
        59549
      ]
    },
    {
      "content": "aggregate record",
      "pos": [
        59558,
        59574
      ]
    },
    {
      "content": "Threat",
      "pos": [
        59636,
        59642
      ]
    },
    {
      "content": "ProtectionStatus",
      "pos": [
        59685,
        59701
      ]
    },
    {
      "content": "Name of malware found",
      "pos": [
        59744,
        59765
      ]
    },
    {
      "content": "StorageAccount",
      "pos": [
        59827,
        59841
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        59884,
        59893
      ]
    },
    {
      "content": "Azure storage account the log was read from",
      "pos": [
        59936,
        59979
      ]
    },
    {
      "content": "AzureDeploymentID",
      "pos": [
        60041,
        60058
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        60101,
        60110
      ]
    },
    {
      "content": "Azure deployment ID of the cloud service the log belongs to",
      "pos": [
        60153,
        60212
      ]
    },
    {
      "content": "Role",
      "pos": [
        60274,
        60278
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        60321,
        60330
      ]
    },
    {
      "content": "Role of the Azure Cloud Service the log belongs to",
      "pos": [
        60373,
        60423
      ]
    },
    {
      "content": "RoleInstance",
      "pos": [
        60485,
        60497
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        60540,
        60549
      ]
    },
    {
      "content": "RoleInstance of the Azure Role that the log belongs to",
      "pos": [
        60592,
        60646
      ]
    },
    {
      "content": "sSiteName",
      "pos": [
        60708,
        60717
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        60760,
        60769
      ]
    },
    {
      "content": "IIS Website that the log belongs to (metabase notation); the",
      "pos": [
        60812,
        60872
      ]
    },
    {
      "content": "s-sitename field in the original log",
      "pos": [
        60881,
        60917
      ]
    },
    {
      "content": "sComputerName",
      "pos": [
        60979,
        60992
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        61035,
        61044
      ]
    },
    {
      "content": "The s-computername field in the original log",
      "pos": [
        61087,
        61131
      ]
    },
    {
      "content": "sIP",
      "pos": [
        61193,
        61196
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        61239,
        61248
      ]
    },
    {
      "content": "Server IP address the HTTP request was addressed to.",
      "pos": [
        61291,
        61343
      ]
    },
    {
      "content": "The s-ip field",
      "pos": [
        61344,
        61358
      ]
    },
    {
      "content": "in the original log",
      "pos": [
        61367,
        61386
      ]
    },
    {
      "content": "csMethod",
      "pos": [
        61448,
        61456
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        61499,
        61508
      ]
    },
    {
      "content": "HTTP Method (GET/POST/etc) used by the client in the HTTP request.",
      "pos": [
        61551,
        61617
      ]
    },
    {
      "content": "The cs-method in the original log",
      "pos": [
        61626,
        61659
      ]
    },
    {
      "content": "cIP",
      "pos": [
        61721,
        61724
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        61767,
        61776
      ]
    },
    {
      "content": "Client IP address the HTTP request came from.",
      "pos": [
        61819,
        61864
      ]
    },
    {
      "content": "The c-ip field in the",
      "pos": [
        61865,
        61886
      ]
    },
    {
      "content": "original log",
      "pos": [
        61895,
        61907
      ]
    },
    {
      "content": "csUserAgent",
      "pos": [
        61969,
        61980
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        62023,
        62032
      ]
    },
    {
      "content": "HTTP User-Agent declared by the client (browser or otherwise).",
      "pos": [
        62075,
        62137
      ]
    },
    {
      "content": "The",
      "pos": [
        62138,
        62141
      ]
    },
    {
      "content": "cs-user-agent in the original log",
      "pos": [
        62150,
        62183
      ]
    },
    {
      "content": "scStatus",
      "pos": [
        62245,
        62253
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        62296,
        62305
      ]
    },
    {
      "content": "HTTP Status code (200/403/500/etc) returned by the server to the",
      "pos": [
        62348,
        62412
      ]
    },
    {
      "content": "client.",
      "pos": [
        62421,
        62428
      ]
    },
    {
      "content": "The cs-status in the original log",
      "pos": [
        62429,
        62462
      ]
    },
    {
      "content": "TimeTaken",
      "pos": [
        62524,
        62533
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        62576,
        62585
      ]
    },
    {
      "content": "How long (in milliseconds) that the request took to complete.",
      "pos": [
        62628,
        62689
      ]
    },
    {
      "content": "The",
      "pos": [
        62690,
        62693
      ]
    },
    {
      "content": "timetaken field in the original log",
      "pos": [
        62702,
        62737
      ]
    },
    {
      "content": "csUriStem",
      "pos": [
        62799,
        62808
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        62851,
        62860
      ]
    },
    {
      "content": "Relative Uri (without host address, i.e. &amp;#39;/search&amp;#39; ) that was",
      "pos": [
        62903,
        62972
      ]
    },
    {
      "content": "requested.",
      "pos": [
        62981,
        62991
      ]
    },
    {
      "content": "The cs-uristem field in the original log",
      "pos": [
        62992,
        63032
      ]
    },
    {
      "content": "csUriQuery",
      "pos": [
        63094,
        63104
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        63147,
        63156
      ]
    },
    {
      "content": "URI query.",
      "pos": [
        63199,
        63209
      ]
    },
    {
      "content": "URI queries are necessary only for dynamic pages, such as",
      "pos": [
        63210,
        63267
      ]
    },
    {
      "content": "ASP pages, so this field usually contains a hyphen for static pages.",
      "pos": [
        63276,
        63344
      ]
    },
    {
      "content": "sPort",
      "pos": [
        63406,
        63411
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        63454,
        63463
      ]
    },
    {
      "content": "Server port that the HTTP request was sent to (and IIS listens to,",
      "pos": [
        63506,
        63572
      ]
    },
    {
      "content": "since it picked it up)",
      "pos": [
        63581,
        63603
      ]
    },
    {
      "content": "csUserName",
      "pos": [
        63665,
        63675
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        63718,
        63727
      ]
    },
    {
      "content": "authenticated user name, if the request is authenticated and not",
      "pos": [
        63770,
        63834
      ]
    },
    {
      "content": "anonymous",
      "pos": [
        63843,
        63852
      ]
    },
    {
      "content": "csVersion",
      "pos": [
        63914,
        63923
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        63966,
        63975
      ]
    },
    {
      "content": "HTTP Protocol version used in the request (i.e. &amp;#39;HTTP/1.1&amp;#39;)",
      "pos": [
        64018,
        64085
      ]
    },
    {
      "content": "csCookie",
      "pos": [
        64147,
        64155
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        64198,
        64207
      ]
    },
    {
      "content": "Cookie information",
      "pos": [
        64250,
        64268
      ]
    },
    {
      "content": "csReferer",
      "pos": [
        64330,
        64339
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        64382,
        64391
      ]
    },
    {
      "content": "Site that the user last visited.",
      "pos": [
        64434,
        64466
      ]
    },
    {
      "content": "This site provided a link to the",
      "pos": [
        64467,
        64499
      ]
    },
    {
      "content": "current site.",
      "pos": [
        64508,
        64521
      ]
    },
    {
      "content": "csHost",
      "pos": [
        64584,
        64590
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        64633,
        64642
      ]
    },
    {
      "content": "Host header (i.e. &amp;#39;www.mysite.com&amp;#39;) that was requested",
      "pos": [
        64685,
        64747
      ]
    },
    {
      "content": "scSubStatus",
      "pos": [
        64809,
        64820
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        64863,
        64872
      ]
    },
    {
      "content": "Substatus error code",
      "pos": [
        64915,
        64935
      ]
    },
    {
      "content": "scWin32Status",
      "pos": [
        64997,
        65010
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        65053,
        65062
      ]
    },
    {
      "content": "Windows Status code",
      "pos": [
        65105,
        65124
      ]
    },
    {
      "content": "csBytes",
      "pos": [
        65186,
        65193
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        65236,
        65245
      ]
    },
    {
      "content": "Bytes sent in the request from the client to the server",
      "pos": [
        65288,
        65343
      ]
    },
    {
      "content": "scBytes",
      "pos": [
        65405,
        65412
      ]
    },
    {
      "content": "W3CIISLog",
      "pos": [
        65455,
        65464
      ]
    },
    {
      "content": "Bytes returned back in the response from the server to the client",
      "pos": [
        65507,
        65572
      ]
    },
    {
      "content": "ConfigChangeType",
      "pos": [
        65634,
        65650
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        65694,
        65713
      ]
    },
    {
      "content": "Type of change (WindowsServices / Software / etc)",
      "pos": [
        65756,
        65805
      ]
    },
    {
      "content": "ChangeCategory",
      "pos": [
        65867,
        65881
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        65925,
        65944
      ]
    },
    {
      "content": "Category of the change (Modified / Added / Removed)",
      "pos": [
        65987,
        66038
      ]
    },
    {
      "content": "SoftwareType",
      "pos": [
        66100,
        66112
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        66156,
        66175
      ]
    },
    {
      "content": "Type of software (Update / Application)",
      "pos": [
        66218,
        66257
      ]
    },
    {
      "content": "SoftwareName",
      "pos": [
        66319,
        66331
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        66375,
        66394
      ]
    },
    {
      "content": "Name of the software (only applicable to software changes)",
      "pos": [
        66437,
        66495
      ]
    },
    {
      "content": "Publisher",
      "pos": [
        66557,
        66566
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        66610,
        66629
      ]
    },
    {
      "content": "Vendor who publishes the software (only applicable to software",
      "pos": [
        66672,
        66734
      ]
    },
    {
      "content": "changes)",
      "pos": [
        66743,
        66751
      ]
    },
    {
      "content": "SvcChangeType",
      "pos": [
        66813,
        66826
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        66870,
        66889
      ]
    },
    {
      "content": "Type of change that was applied on a Windows service (State /",
      "pos": [
        66932,
        66993
      ]
    },
    {
      "content": "StartupType / Path / ServiceAccount) - only applicable to Windows",
      "pos": [
        67002,
        67067
      ]
    },
    {
      "content": "service changes",
      "pos": [
        67076,
        67091
      ]
    },
    {
      "content": "SvcDisplayName",
      "pos": [
        67153,
        67167
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        67211,
        67230
      ]
    },
    {
      "content": "Display name of the service that was changed",
      "pos": [
        67273,
        67317
      ]
    },
    {
      "content": "SvcName",
      "pos": [
        67379,
        67386
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        67430,
        67449
      ]
    },
    {
      "content": "Name of the service that was changed",
      "pos": [
        67492,
        67528
      ]
    },
    {
      "content": "SvcState",
      "pos": [
        67590,
        67598
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        67642,
        67661
      ]
    },
    {
      "content": "New (current) state of the service",
      "pos": [
        67704,
        67738
      ]
    },
    {
      "content": "SvcPreviousState",
      "pos": [
        67800,
        67816
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        67859,
        67878
      ]
    },
    {
      "content": "Previous known state of the service (only applicable if service state",
      "pos": [
        67921,
        67990
      ]
    },
    {
      "content": "changed)",
      "pos": [
        67999,
        68007
      ]
    },
    {
      "content": "SvcStartupType",
      "pos": [
        68069,
        68083
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        68127,
        68146
      ]
    },
    {
      "content": "Service startup type",
      "pos": [
        68189,
        68209
      ]
    },
    {
      "content": "SvcPreviousStartupType",
      "pos": [
        68271,
        68293
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        68336,
        68355
      ]
    },
    {
      "content": "Previous service startup type (only applicable if service startup",
      "pos": [
        68398,
        68463
      ]
    },
    {
      "content": "type changed)",
      "pos": [
        68472,
        68485
      ]
    },
    {
      "content": "SvcAccount",
      "pos": [
        68547,
        68557
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        68601,
        68620
      ]
    },
    {
      "content": "Service account",
      "pos": [
        68663,
        68678
      ]
    },
    {
      "content": "SvcPreviousAccount",
      "pos": [
        68740,
        68758
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        68801,
        68820
      ]
    },
    {
      "content": "Previous service account (only applicable if service account changed)",
      "pos": [
        68863,
        68932
      ]
    },
    {
      "content": "SvcPath",
      "pos": [
        68994,
        69001
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        69044,
        69063
      ]
    },
    {
      "content": "Path to the executable of the Windows service",
      "pos": [
        69106,
        69151
      ]
    },
    {
      "content": "SvcPreviousPath",
      "pos": [
        69213,
        69228
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        69271,
        69290
      ]
    },
    {
      "content": "Previous path of the executable for the Windows service (only",
      "pos": [
        69333,
        69394
      ]
    },
    {
      "content": "applicable if it changed)",
      "pos": [
        69403,
        69428
      ]
    },
    {
      "content": "SvcDescription",
      "pos": [
        69490,
        69504
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        69547,
        69566
      ]
    },
    {
      "content": "Description of the service",
      "pos": [
        69609,
        69635
      ]
    },
    {
      "content": "Previous",
      "pos": [
        69697,
        69705
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        69749,
        69768
      ]
    },
    {
      "content": "Previous state of this software (Installed / Not Installed / previous",
      "pos": [
        69811,
        69880
      ]
    },
    {
      "content": "version)",
      "pos": [
        69889,
        69897
      ]
    },
    {
      "content": "Current",
      "pos": [
        69959,
        69966
      ]
    },
    {
      "content": "ConfigurationChange",
      "pos": [
        70009,
        70028
      ]
    },
    {
      "content": "Latest state of this software (Installed / Not Installed / current",
      "pos": [
        70071,
        70137
      ]
    },
    {
      "content": "version)",
      "pos": [
        70146,
        70154
      ]
    },
    {
      "content": "Blog posts - Search use cases",
      "pos": [
        70196,
        70225
      ]
    },
    {
      "content": "W3C IIS Logs Search in Microsoft Azure Operational Insights",
      "pos": [
        70229,
        70288
      ]
    },
    {
      "content": "Monitoring SQL Backup Failures with Azure Operational Insights Search and Dashboards",
      "pos": [
        70412,
        70496
      ]
    },
    {
      "content": "IIS Management Pack Event-Alerting Rules’s OpInsights Searches Equivalents",
      "pos": [
        70644,
        70718
      ]
    },
    {
      "content": "Useful Operational Insights Search Query Collection",
      "pos": [
        70843,
        70894
      ]
    },
    {
      "content": "Other resources",
      "pos": [
        70986,
        71001
      ]
    },
    {
      "content": "Stefan Roth created a handy Search cheat sheet.",
      "pos": [
        71002,
        71049
      ]
    },
    {
      "content": "Check out his <bpt id=\"p1\">[</bpt>blog<ept id=\"p1\">](http://stefanroth.net/2014/11/05/microsoft-azure-operational-insights-search-data-explorer-cheat-sheet/)</ept> to learn more and to download his cheat sheet.",
      "pos": [
        71050,
        71222
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Search for data in Operational Insights\"\n   description=\"You can use the log search in Microsoft Azure Operational Insights to find data that you’re looking for\"\n   services=\"operational-insights\"\n   documentationCenter=\"\"\n   authors=\"bandersmsft\"\n   manager=\"jwhit\"\n   editor=\"\" />\n<tags\n   ms.service=\"operational-insights\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"tbd\"\n   ms.date=\"07/21/2015\"\n   ms.author=\"banders\" />\n\n# Search for data in Operational Insights\n\n[AZURE.INCLUDE [operational-insights-note-moms](../../includes/operational-insights-note-moms.md)]\n\nAt the core of Microsoft Azure Operational Insights is the log search feature which allows you to combine and correlate any machine data from multiple sources within your environment. Solutions are also powered by log search to bring you metrics pivoted around a particular problem area.\n\nOn the Search page, you can create a query, and then when you search, you can filter the results by using facet controls. You can also create advanced queries to transform, filter, and report on your results.\n\nCommon log search queries appear on most solution pages. Throughout the Operational Insights console, you can click tiles or drill in to other items to view details about the item by using log search.\n\nIn this tutorial, we'll walk through examples to cover all the basics when you use log search.\n\nWe'll start with simple, practical examples and then build on them so that you can get an understanding of practical use cases about how to use the syntax to extract the insights you want from the data.\n\nWhen you conduct log searches in Operational Insights, you'll use the following techniques:\n\n- Use basic filters\n- Use additional filters\n- Manipulate search results\n- Use the measure command\n- Use the max and min functions with the measure command\n- Use the avg function with the measure command\n- Use the where command\n\nAfter you've familiar with search techniques, you can review the [Search syntax reference](#search-syntax-reference) and the [Search field and facet reference](#search-field-and-facet-reference).\n\n## Use basic filters\n\nThe first thing to know is that the first part of a search query, before any “|” vertical pipe character, is always a *filter*. You can think of it as a WHERE clause in TSQL--it determines *what* subset of data to pull out of the Operational Insights data store. Searching from a the data store is largely about specifying the characteristics of the data that you want to extract, so it is natural that a query would start with the WHERE clause.\n\nThe most basic filters you can use are *keywords*, such as ‘error’ or ‘timeout’, or a computer name. These types of simple queries generally return diverse shapes of data within the same result set. This is because Operational Insights has different *types* of data in the system.\n\n\n### To conduct a simple search\n1. In the Operational Insights portal, click **Search Data Explorer**.  \n  ![search tile](./media/operational-insights-search/overview-search.png)\n2. In the query field, type `error` and then click **Search**.\n  ![search error](./media/operational-insights-search/search-error.png)  \n  For example, the query for `error` in the following image returned 100,000 **Event** records (collected by Log Management), 18 **ConfigurationAlert** records (generated by Configuration Assessment) and 12 **ConfigurationChange** records (captured by the Change Tracking).\n  ![search results](./media/operational-insights-search/results01.png)\n\nThese filters are not really object types/classes. *Type* is just a tag, or a property, or a string/name/category, that is attached to a piece of data. Some documents in the system are tagged as **Type:ConfigurationAlert** and some are tagged as **Type:PerfHourly**, or **Type:Event**, and so on. Each search result, document, record, or entry displays all the raw properties and their values for each of those pieces of data, and you can use those field names to specify in the filter when you want to retrieve only the records where the field has that given value.\n\n*Type* is really just a field that all records have, it is not different from any other field. This was established based on the value of the Type field. That record will have a different shape or form. Incidentally, **Type=PerfHourly**, or **Type=Event** is also the syntax that you need to learn to query for hourly performance data aggregates or events.\n\nYou can use either a colon (:) or a equal sign (=) after the field name and before the value. **Type:Event** and **Type=Event** are equivalent in meaning, you can chose the style you prefer.\n\nSo, if the Type=PerfHourly records have a field called 'CounterName', then you can write a query resembling `Type=PerfHourly CounterName=\"% Processor Time\"`.\n\nThis will give you only the performance data where the performance counter name is \"% Processor Time\".\n\n### To search for processor time performance data\n- In the search query field, type `Type=PerfHourly CounterName=\"% Processor Time\"`\n\nYou can also be more specific and use **InstanceName=_'Total'** in the query, which is a Windows performance counter. You can also select a facet and another **field:value**. The filter is automatically added to your filter in the query bar. You can see this in the following image. It shows you where to click to add **InstanceName:’_Total’** to the query without typing anything.\n\n![search facet](./media/operational-insights-search/search-facet.png)\n\nYour query now becomes `Type=PerfHourly CounterName=”% Processor Time” InstanceName=”_Total”`\n\nIn this example, you don't have to specify **Type=PerfHourly** to get to this result. Because the fields CounterName and InstanceName only exist for records of Type=PerfHourly, the query is specific enough to return the same results as the longer, previous one:\n```\nCounterName=”% Processor Time” InstanceName=”_Total”\n```\n\nThis is because all the filters in the query are evaluated as being in *AND* with each other. Effectively, the more fields you add to the criteria, you get less, more specific and refined results.\n\nFor example, the query `Type=Event EventLog=\"Windows PowerShell\"` is identical to `Type=Event AND EventLog=\"Windows PowerShell\"`. It returns all events that were logged in and collected from the Windows PowerShell event log. If you add a filter multiple times by repeatedly selecting the same facet, then the issue is purely cosmetic--it might clutter the Search bar, but it still returns the same results because the implicit AND operator is always there.\n\nYou can easily reverse the implicit AND operator by using a NOT operator explicitly. For example:\n\n`Type:Event NOT(EventLog:\"Windows PowerShell\")` or it's equivalent `Type=Event EventLog!=\"Windows PowerShell\"` return all events from all other logs that are NOT the Windows PowerShell log.\n\nOr, you can use other Boolean operator such as ‘OR’. The following query returns records for which the EventLog is either Application OR System.\n\n```\nEventLog=Application OR EventLog=System\n```\n\nUsing the above query, you’ll get entries for both logs in the same result set.\n\nHowever, if you remove the OR by leaving the implicit AND in place, then the following query will not produce any results because there isn’t an event log entry that belongs to BOTH logs. Each event log entry was written to only one of the two logs.\n\n```\nEventLog=Application EventLog=System\n```\n\n\n## Use additional filters\n\nThe following query returns entries for 2 event logs for all the computers that have sent data.\n\n```\nEventLog=Application OR EventLog=System\n```\n\n![search results](./media/operational-insights-search/search-results03.png)\n\nSelecting one of the fields or filters will narrow the query to a specific computer, excluding all other ones. The resulting query would resemble the following.\n\n```\nEventLog=Application OR EventLog=System Computer=SERVER1.contoso.com\n```\n\nWhich is equivalent to the following, because of the implicit AND.\n\n```\nEventLog=Application OR EventLog=System AND Computer=SERVER1.contoso.com\n```\n\nEach query is evaluated in the following explicit order. Note the parenthesis.\n\n```\n(EventLog=Application OR EventLog=System) AND Computer=SERVER1.contoso.com\n```\n\nJust like the event log field, you can retrieve data only for a set of specific computers by adding OR. For example:\n\n```\n(EventLog=Application OR EventLog=System) AND (Computer=SERVER1.contoso.com OR Computer=SERVER2.contoso.com OR Computer=SERVER3.contoso.com)\n```\n\nSimilarly, this the following query return **% CPU Time** for the selected two computers only.\n\n```\nCounterName=”% Processor Time”  AND InstanceName=”_Total” AND (Computer=SERVER1.contoso.com OR Computer=SERVER2.contoso.com)\n```\n\n\n### Boolean operators\nWith datetime and numeric fields, you can search for values using *greater than*, *lesser than*, and *lesser than or equal*. You can use simple operators such as >, < , >=, <= , != in the query search bar.\n\n\nYou can query a specific event log for a specific period of time. For example, the last 24 hours is expressed with the following mnemonic expression.\n\n```\nEventLog=System TimeGenerated>NOW-24HOURS\n```\n\n\n#### To search using a boolean operator\n- In the search query field, type `EventLog=System TimeGenerated>NOW-24HOURS\"`\n  ![search with boolean](./media/operational-insights-search/search-boolean.png)\n\nAlthough you can control the time interval graphically, and most times you might want to do that, there are advantages to including a time filter directly into the query. For example, this works great with dashboards where you can override the time for each tile, regardless of the *global* time selector on the dashboard page. For more information, see [Time Matters in Dashboard](http://cloudadministrator.wordpress.com/2014/10/19/system-center-advisor-restarted-time-matters-in-dashboard-part-6/).\n\nWhen filtering by time, keep in mind that you get results for the *intersection* of the two time periods: the one specified in the Operational Insights portal (S1) and the one specified in the query (S2).\n\n![intersection](./media/operational-insights-search/intersection.png)\n\nThis means, if the time periods don’t intersect, for example in the Operational Insights portal where you choose **This week** and in the query where you define **last week**, then there is no intersection and you won't receive any results.\n\nComparison operators used for the TimeGenerated field are also useful in other situations. For example, with numeric fields.\n\nFor example, given that Configuration Assessment’s alerts have the following severity values:\n\n- 0 = Information\n- 1 = Warning\n- 2 = Critical\n\nYou can query for both warning and critical alerts and also exclude informational ones with the following query:\n\n```\nType=ConfigurationAlert  Severity>=1\n```\n\n\nYou can also use range queries. This means that you can provide the beginning and end range of values in a sequence. For example, if you want events from the Operations Manager event log where the EventID is greater than or equal to 2100 but not greater than 2199, then the following query would return them.\n\n```\nType=Event EventLog=\"Operations Manager\" EventID:[2100..2199]\n```\n\n\n>[AZURE.NOTE] The range syntax you must use is the colon (:) field:value separator and *not* the equal sign (=). Enclose the lower and upper end of the range in square brackets and separate them with two periods (..).\n\n## Manipulate search results\n\nWhen you're searching for data, you'll want to refine your search query and have a good level of control over the results. When results are retrieved, you can apply commands to transform them.\n\nCommands in Operational Insights searches *must* follow after the vertical pipe character (|). A filter must always be the first part of a query string. It defines the data set you're working with and then \"pipes\" those results into a command. You can then use the pipe to add additional commands. This is loosely similar to the Windows PowerShell pipeline.\n\nIn general, the Operational Insights search language tries to follow PowerShell style and guidelines to make it similar to the IT pros, and to ease the learning curve.\n\nCommands have names of verbs so you can easily tell what they do.  \n\n### Sort\n\nThe sort command allows you to define the sorting order by one or multiple fields. Even if you don’t use it, by default, a time descending order is enforced. The most recent results are always at the top of search results. This means that when you run a search, with `Type=Event EventID=1234` what really is executed for you is:\n\n```\nType=Event EventID=1234 **| Sort TimeGenerated desc**\n```\n\nThat's because it is the type of experience you are familiar with in logs. For example, in the Windows Event Viewer.\n\nYou can use Sort to change the way results are returned. The following examples show how this works.\n\n```\nType=Event EventID=1234 | Sort TimeGenerated asc\n```\n\n```\nType=Event EventID=1234 | Sort Computer asc\n```\n\n```\nType=Event EventID=1234 | Sort Computer asc,TimeGenerated desc\n```\n\n\nThe simple examples above show you how commands work--they change the shape of the results that the filter returned.\n\n### Limit and top\nAnother less known command is LIMIT. Limit is a PowerShell-like verb. Limit is functionally identical to the TOP command. The following queries return the same results.\n\n```\nType=Event EventID=2110 | Limit 1\n```\n\n```\nType=Event EventID=2110 | Top 1\n```\n\n\n#### To search using top\n- In the search query field, type `Type=Event EventID=2110 | Top 1`\n  ![search top](./media/operational-insights-search/search-top.png)\n\nIn the image above, there are 988 records with EventID=2110. The fields, facets, and filters on the left always show information about the results returned *by the filter portion* of the query, which is the the part before any pipe character. The **Results** pane only returns the most recent 1 result, because the example command shaped and transformed the results.\n\n### Select\n\nThe SELECT command behaves like Select-Object in PowerShell. It returns filtered results that do not have all of their original properties. Instead, it selects only the properties that you specify.\n\n#### To run a search using the select command\n\n1. In Search, type `Type=Event` and then click **Search**.\n2. Click **+ show more** in one of the results to view all the properties that the results have.\n3. Select some of those explicitly, and the query changes to `Type=Event | Select Computer,EventID,RenderedDescription`.\n  ![search select](./media/operational-insights-search/search-select.png)\n\nThis is command particularly useful when you want to control search output and choose only the portions of data that really matter for your exploration, which often isn’t the full record. This is also useful when records of different types have *some* common properties, but not *all* of their properties are common. The, you can generate output that looks more naturally like a table, or work well when exported to a CSV file and then massaged in Excel.\n\n[AZURE.INCLUDE [operational-insights-export](../../includes/operational-insights-export.md)]\n\n## Use the measure command\n\nMEASURE is one of the most versatile commands in Operational Insights searches. It allows you to apply statistical *functions* to your data and aggregate results grouped by a given field. There are multiple statistical functions that Measure supports.\n\n### Measure count()\n\nThe first statistical function to work with, and one of the simplest to understand is the *count()* function.\n\nResults from any search query such as `Type=Event`, show filters also called facets on the left side of search results. The filters show a distribution of values by a given field for the results in the search executed.\n\n![search measure count](./media/operational-insights-search/search-measure-count01.png)\n\nFor example, in the image above you'll see the **Computer** field and it shows that within the almost 3 million events in the results, there are 20 unique and distinct values for the **Computer** field in those records. The tile only shows the top 5, which are the most common 5 values that are written in the **Computer** fields), sorted by the number of documents that contain that specific value in that field. In the image you can see that – among those almost 3 million events – 880 thousand come from the DM computer, 602 thousand from the DE computer, and so on.\n\n\nWhat if you want to see all values, since the tile only shows only the top 5?\n\nThat’s what the measure command can do with the count() function. This function doesn't use any parameters. You just specify the field by which you want to group by – the **Computer** field in this case:\n\n`Type=Event | Measure count() by Computer`\n\n![search measure count](./media/operational-insights-search/search-measure-count-computer.png)\n\nHowever, **Computer** is just a field used *in* each piece of data – there are no relational databases involved and there is no separate **Computer** object anywhere. Just the values *in* the data can describe which entity generated them, and a number of other characteristics and aspects of the data – hence the term *facet*. However, you can just as well group by other fields. Because the original results of almost 3 million events that  are piped into the measure command also have a field called **EventID**, you can apply the same technique to group by that field and get a count of events by EventID:\n\n```\nType=Event | Measure count() by EventID\n```\n\nIf you're not interested in the actual record count that contain a specific value, but instead if you only want a list of the values themselves, you can add a *Select* command at the end of it and just select the first column:\n\n```\nType=Event | Measure count() by EventID | Select EventID\n```\n\nThen you can get more intricate and pre-sort the results in the query, or you can just click the columns in the grid, too.\n\n```\nType=Event | Measure count() by EventID | Select EventID | Sort EventID asc\n```\n\n#### To search using measure count\n\n- In the search query field, type `Type=Event | Measure count() by EventID`\n- Append `| Select EventID` to the end of the query.\n- Finally, append `| Sort EventID asc` to the end of the query.\n\n\nThere are a couple important points to notice and emphasize:\n\nFirst, the results you see are not the original raw results anymore. Instead, they are aggregated results – essentially groups of results. This isn't a problem, but you should understand that you're interacting with a very different shape of data that differs from the original raw shape that gets created on the fly as a result of the aggregation/statistical function.\n\nSecond, **Measure count** currently returns only the top 100 distinct results. This limit does not apply to the other statistical functions. So, you'll usually need to use a more precise filter first to search for specific items before you apply measure count().\n\n## Use the max and min functions with the measure command\n\nThere are various scenarios where **Measure Max()** and **Measure Min()** are useful. However, since each function is opposite of each other, we'll illustrate Max() and you can experiment with Min() on your own.\n\nIf you query for Configuration Assessment alerts, they have a **Severity** property that can be 0,1, or 2 representing information, warning, and critical. For example:\n\n```\nType=ConfigurationAlert\n```\n\n![search measure count start](./media/operational-insights-search/search-measure-max01.png)\n\nIf you want to view the highest value for all of the alerts given a common Computer, the group by field, you can use\n\n```\nType=ConfigurationAlert | Measure Max(Severity) by Computer\n```\n\n![search measure max computer](./media/operational-insights-search/search-measure-max02.png)\n\nIt will display that for the computers that had **Alert** records, most of them have at least one critical alert, and the Bacc computer has a warning as its worst severity.\n\n```\nType=ConfigurationAlert | Measure Max(Severity) by Computer\n```\n\n![search measure max time generated computer](./media/operational-insights-search/search-measure-max03.png)\n\nThis function works well with numbers, but it also works with DateTime fields. It is useful to check for the last or most recent time stamp for any piece of data indexed for each computer. For example : When was the most recent configuration change reported by change tracking solution for each machine?\n\n```\nType=ConfigurationChange | Measure Max(TimeGenerated) by Computer\n```\n\n## Use the avg function with the measure command\n\nThe Avg() statistical function used with measure allows you to calculate the average value for some field, and group results by the same or other field. This is useful in a variety of cases, such as performance data.\n\nWe'll start with performance data. However, note that Operational Insights currently collects only certain fabric-related performance counters for Virtual Machine Manager and Hyper-V hosts as part of the Capacity Management solution.\n\nTo search for *all* performance data, the most basic query is:\n\n```\nType=PerfHourly\n```\n\n![search avg start](./media/operational-insights-search/search-avg01.png)\n\nThe first thing you'll notice is that Operational Insights shows you charts of the performance counters. At the bottom of the results, you'll see the actual records behind the charts.\n\n![search avg start](./media/operational-insights-search/search-avg02.png)\n\nIn the image above, there are two sets of fields marked that indicate the following:\n\n- the first set identifies Windows Performance Counter Name, Object Name, and Instance Name in the query filter. These are the fields you probably will most commonly use as facets/filters\n- **SampleValue** is the actual value of the counter\n- in the query, **Type=PerfHourly** is an hourly aggregate\n- **TimeGenerated** is 21:00, in 24-hour time format. It is the aggregation for that hourly period from 20:00 to 21:00.\n- **SampleCount** is the aggregation, computed using 12 samples (one every 5 minutes)\n- the **min**, **max**, and **Percentile95** for the hourly period was, in this example for memory in a virtual machine, 6144 (megabytes)\n- **SampleValue** is an hourly aggregate and it is populated with the *average* for the hourly period and is what is used to plot the performance charts\n\nAfter reading about the PerfHourly record shape, and having read about other search techniques, you can use measure Avg() to aggregate this type of numerical data.\n\nHere's a simple example:\n\n```\nType=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" | Measure Avg(SampleValue) by Computer\n```\n\n![search avg samplevalue](./media/operational-insights-search/search-avg03.png)\n\nIn this example, you select the CPU Total Time performance counter and average by Computer. Because **SampleValue** is already an average, you actually query for an average of an average. That’s correct with Type=PerfHourly at this point. You should always use a filter on TimeGenerated to restrict the operation to a small or recent dataset, such as the last 4 hours--not 7 days.\n\nSo the query above becomes:\n\n```\nType=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" TimeGenerated>NOW-4HOURS | Measure Avg(SampleValue) by Computer\n```\n\n### To search using the avg function with the measure command\n1. In the Search query box, type `Type=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" TimeGenerated>NOW-4HOURS | Measure Avg(SampleValue) by Computer`.\n2. Notice that the recent average will generally be higher.\n3. Calculate the average of the Maximum hourly values by revising your search query with `Type=PerfHourly  ObjectName:Processor  InstanceName:_Total  CounterName:\"% Processor Time\" TimeGenerated>NOW-4HOURS | Measure Avg(Max) by Computer`\n\nYou can aggregate and correlate data *across* computers. For example, imagine that you have a set of hosts in some sort of farm where each node is equal to any other one and they just do all the same type of work and load should be roughly balanced. You could get their counters all in one go with the following query and get averages for the entire farm. You can start by choosing the computers with the following example:\n\n```\nType=PerfHourly AND (Computer=”SERVER1.contoso.com” OR Computer=”SERVER2.contoso.com” OR Computer=”SERVER3.contoso.com”)\n```\n\nNow that you have the computers, you also only want to select two key performance indicators (KPIs): % CPU Usage and % Free Disk Space. So, that part of the query becomes:\n\n```\nType=PerfHourly  InstanceName:_Total  ((ObjectName:Processor AND CounterName:\"% Processor Time\") OR (ObjectName=\"LogicalDisk\" AND CounterName=\"% Free Space\")) AND TimeGenerated>NOW-4HOURS\n```\n\nNow you can add computers and counters with the following example:\n\n```\nType=PerfHourly  InstanceName:_Total  ((ObjectName:Processor AND CounterName:\"% Processor Time\") OR (ObjectName=\"LogicalDisk\" AND CounterName=\"% Free Space\")) AND TimeGenerated>NOW-4HOURS AND (Computer=”SERVER1.contoso.com” OR Computer=”SERVER2.contoso.com” OR Computer=”SERVER3.contoso.com”)\n```\n\nBecause you have a very specific selection, the **measure Avg()** command can return the average not by computer, but across the farm, simply by grouping by CounterName. For example:\n\n```\nType=PerfHourly  InstanceName:_Total  ((ObjectName:Processor AND CounterName:\"% Processor Time\") OR (ObjectName=\"LogicalDisk\" AND CounterName=\"% Free Space\")) AND TimeGenerated>NOW-4HOURS AND (Computer=”SERVER1.contoso.com” OR Computer=”SERVER2.contoso.com” OR Computer=”SERVER3.contoso.com”) | Measure Avg(SampleValue) by CounterName\n```\n\nThis gives you a useful compact view of a couple of your environment's KPIs.\n\n![search avg grouping](./media/operational-insights-search/search-avg04.png)\n\n\nYou can easily use this in a dashboard. To learn more about using dashboards, see [Operational Insights dashboards](operational-insights-use-dashboards).\n\n![search avg dashboard](./media/operational-insights-search/search-avg05.png)\n\n### Use the sum function with the measure command\n\nThe sum function is similar to other functions of the measure command. You can see an example about how to use the sum function at [W3C IIS Logs Search in Microsoft Azure Operational Insights](http://blogs.msdn.com/b/dmuscett/archive/2014/09/20/w3c-iis-logs-search-in-system-center-advisor-limited-preview.aspx).\n\nYou can use Max() and Min() with numbers, datetimes and text strings. With text strings, they are sorted alphabetically and you get first and last.\n\nHowever, you cannot use Sum() with anything other than numerical fields. This also applies to Avg().\n\n## Use the where command\n\nThe where command works like a filter, but it can be applied in the pipeline to further filter aggregated results that have been produced by a Measure command – as opposed to raw results that are filtered at the beginning of a query.\n\nFor example:\n\n```\nType=PerfHourly  CounterName=\"% Processor Time\"  InstanceName=\"_Total\" | Measure Avg(SampleValue) as AVGCPU by Computer\n```\n\nYou can add another pipe “|” character and the Where command to only get computers whose average CPU is above 80%, with the following example:\n\n```\nType=PerfHourly  CounterName=\"% Processor Time\"  InstanceName=\"_Total\" | Measure Avg(SampleValue) as AVGCPU by Computer | Where AVGCPU>80\n```\n\nIf you're familiar with Microsoft System Center - Operations Manager, you can think of the where command in management pack terms. If the example were a rule, the first part of the query would be the data source and the where command would be the condition detection.\n\nYou can use the query as a tile in **My Dashboard**, as a monitor of sorts, to see when computer CPUs are over-utilized. To learn more about dashboards, see [Operational Insights dashboards](operational-insights-use-dashboards). You can also create and use dashboards using the mobile app. For more information, see [Azure Operational Insights Mobile App ](http://www.windowsphone.com/en-us/store/app/operational-insights/4823b935-83ce-466c-82bb-bd0a3f58d865). In the bottom two tiles of the following image, you can see the monitor displayed a list and as a number. Essentially, you always want the number to be zero and the list to be empty. Otherwise, it indicates an alert condition. If needed, you can use it to take a look at which machines are under pressure.\n\n![mobile dashboard](./media/operational-insights-search/search-mobile.png)\n\n## Search syntax reference\n\nThe following reference section about search language describe the general query syntax options you can use when searching for data and filtering expressions to help narrow your search. It also describes commands that you can use to take action on the data retrieved.\n\nYou can read about the fields returned in searches and the facets that help you dill-into similar categories of data at [Search field and facet reference](#Search-field-and-facet-reference).\n\n### General query syntax\n\nSyntax:\n\nfilterExpression | command1 | command2 …\n\nThe filter expression (**filterExpression**) defines the \"where\" condition for the query. The commands apply to the results returned by the query. Multiple commands must be separated by the pipe character ( | ).\n\n#### General syntax examples\n\nExamples:\n\n    system\n\nThis query returns results that contain the word \"system\" in any field that has been indexed for full text or terms searching.\n\n>[AZURE.NOTE] Not all fields are indexed this way, but the most common textual fields (such as descriptions and names) typically would be.\n\n    system error\n\nThis query returns results that contain the words \"system\" and \"error.\"\n\n    system error | sort ManagementGroupName, TimeGenerated desc | top 10\n\nThis query returns results that contain the words \"system\" and \"error.\" It then sorts the results by the **ManagementGroupName** field (in ascending order), and then by **TimeGenerated** (in descending order). It takes only the first 10 results.\n\n>[AZURE.IMPORTANT] All the field names and the values for the string and text fields are case sensitive.\n\n### Filter expression\n\nThe following subsections explain the filter expressions.\n\n#### String literals\n\nA string literal is any string that is not recognized by the parser as a keyword or a predefined data type (for example, a number or date).\n\nExamples:\n\n    These all are string literals\n\n\nThis query searches for results that contain occurrences of all five words. To perform a complex string search, enclose the string literal in quotation marks, for example:\n\n    \" Windows Server\"\n\nThis only returns results with exact matches for “Windows Server”\n\n#### Numbers\n\nThe parser supports the decimal integer and floating-point number syntax for numerical fields.\n\nExamples:\n\n    Type:PerfHourly 0.5\n\n\n    HTTP 500\n\n#### Date/Time\n\nEvery piece of data in the system has a **TimeGenerated** property, which represents the original date and time of the record. Some types of data can additionally have more Date/Time fields (for example, **LastModified**).\n\nThe timeline Chart/Time selector in Operational Insights shows a distribution of results over time (according to the current query being run), based on the **TimeGenerated** field. Date/Time fields have a specific string format that can be used in queries to restrict the query to a particular timeframe. You can also use syntax to refer to relative time intervals (for example, \"between 3 days ago and 2 hours ago\").\n\nSyntax:\n\n    yyyy-mm-ddThh:mm:ss.dddZ\n\n\n    yyyy-mm-ddThh:mm:ss.ddd\n\n\n    yyyy-mm-ddThh:mm:ss\n\n\n    yyyy-mm-ddThh:mm:ss\n\n\n    yyyy-mm-ddThh:mm\n\n\n    yyyy-mm-dd\n\n\n\nExample:\n\n    TimeGenerated:2013-10-01T12:20\n\nThe previous command returns only records with a **TimeGenerated** value of exactly 12:20 on October 1, 2013. It is unlikely that it will provide any result, but you understand the idea.\n\nThe parser also supports the mnemonic Date/Time value, NOW.\n\nExample:\n\n\nAgain, it is unlikely that this will yield any result because data doesn’t make it through the system that fast.\n\nThese examples are building blocks to use for relative and absolute dates. In the next three subsections, we’ll explain how to use them in more advanced filters with examples that use relative date ranges.\n\n#### Date/Time math\n\nUse the Date/Time math operators to offset or round the Date/Time value by using simple Date/Time calculations.\n\nSyntax:\n\n    datetime/unit\n\n\n    datetime[+|-]count unit\n\n\n\n\n<table border=\"1\" cellspacing=\"4\" cellpadding=\"4\">\n    <tr>\n        <th>Operator</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>\n        <p>/</p>\n        </td>\n        <td>\n        <p>Rounds Date/Time to the specified unit. </p>\n        <p>Example:&nbsp;NOW/DAY rounds the current Date/Time to the midnight of the\n        current day. </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>+ or -</p>\n        </td>\n        <td>\n        <p>Offsets Date/Time by the specified number of units</p>\n        <p>Examples:&nbsp; </p>\n        <ul>\n            <li class=\"unordered\">NOW+1HOUR offsets the current Date/Time by one\n            hour ahead.<br><br></li>\n            <li class=\"unordered\">2013-10-01T12:00-10DAYS offsets the Date value\n            back by 10 days.</li>\n        </ul>\n        </td>\n    </tr>\n</table>\n\n\n\n\n\nYou can chain the Date/Time math operators together, for example:\n\n    NOW+1HOUR-10MONTHS/MINUTE\n\nThe following table lists the supported Date/Time units.\n\nDate/Time unit|Description\n---|--- \nYEAR, YEARS|Rounds to current year, or offsets by the specified number of years.\nMONTH, MONTHS|Rounds to current month, or offsets by the specified number of months.\nDAY, DAYS, DATE|Rounds to current day of the month, or offsets by the specified number of days.\nHOUR, HOURS|Rounds to current hour, or offsets by the specified number of hours.\nMINUTE, MINUTES|Rounds to current minute, or offsets by the specified number of minutes.\nSECOND, SECONDS|Rounds to current second, or offsets by the specified number of seconds.\nMILLISECOND, MILLISECONDS, MILLI, MILLIS|Rounds to current millisecond, or offsets by the specified number of milliseconds.\n\n\n#### Field facets\n\nBy using field facets, you can specify the search condition for specific fields and their exact values, as opposed to writing \"free text\" queries for various terms throughout the index. We have already used this syntax in several examples in the previous paragraphs. Here, we provide more complex examples.\n\n**Syntax**\n\n*field:value*\n\n*field=value*\n\n**Description**\n\nSearches the field for the specific value. The value can be a string literal, number, or Date/Time.\n\nExample:\n\n\n    TimeGenerated:NOW\n\n\n    ObjectDisplayName:\"server01.contoso.com\"\n\n\n    SampleValue:0.3\n\n**Syntax**\n\n*field>value*\n\n*field<value*\n\n*field>=value*\n\n*field<=value*\n\n*field!=value*\n\n**Description**\n\nProvides comparisons.\n\nExample:\n\n    TimeGenerated>NOW+2HOURS\n\n\n**Syntax**\n\n*field:[from..to]*\n\n**Description**\n\nProvides range faceting.\n\nExample:\n\n    TimeGenerated:[NOW..NOW+1DAY]\n\n\n    SampleValue:[0..2]\n#### Logical operators\n\nThe query languages support the logical operators (AND, OR, and NOT) and their C-style aliases (&&, ||, and !) respectively. You can use parentheses to group these operators.\n\nExamples:\n\n    system OR error\n\n\n    Type:Alert AND NOT(Severity:1 OR ObjectId:\"8066bbc0-9ec8-ca83-1edc-6f30d4779bcb8066bbc0-9ec8-ca83-1edc-6f30d4779bcb\")\nYou can omit the logical operator for the top-level filter arguments. In this case, the AND operator is assumed.\n\n\nFilter expression|Equivalent to\n---|---\nsystem error|system AND error\nsystem \"Windows Server\" OR Severity:1|system AND (\"Windows Server\" OR Severity:1)\n\n\n\n### Commands\n\nThe commands apply to the results that are returned by the query. Use the pipe character ( | ) to apply a command to the retrieved results. Multiple commands must be separated by the pipe character.\n\n>[AZURE.NOTE] Command names can be written in upper case or lower case, unlike the field names and the data.\n\n#### Sort\n\nSyntax:\n\n    sort field1 asc|desc, field2 asc|desc, …\n\nSorts the results by particular fields. The asc/desc prefix is optional. If they are omitted, the \"asc\" sort order is assumed. If a query does not use the **Sort** command explicitly, Sort **TimeGenerated** desc is the default behavior, and it will always return the most recent results first.\n\n#### Top/Limit\n\nSyntax:\n\n    top number\n\n\n    limit number\nLimits the response to the top N results.\n\nExample:\n\n    Type:Alert errors detected | top 10\n\nReturns the top 10 matching results.\n\n#### Skip\n\nSyntax:\n\n    skip number\n\nSkips the number of results listed.\n\nExample:\n\n    Type:Alert errors detected | top 10 | skip 200\n\nReturns top 10 matching results starting at result 200.\n\n#### Select\n\nSyntax:\n\n    select field1, field2, ...\n\nLimits results to the fields you choose.\n\nExample:\n\n    Type:Alert errors detected | select Name, Severity\n\nLimits the returned results fields to **Name** and **Severity**.\n\n#### Measure\n\nThe **measure** command is used to apply statistical functions to the raw search results. This is very useful to get *group-by* views over the data. When you use the **measure** command, Operational Insights displays a table with aggregated results.\n\nSyntax:\n\n    measure aggregateFunction([aggregatedField]) [as fieldAlias] by groupField [interval interval]\n\n\n    measure aggregateFunction([aggregatedField])  interval interval\n\nAggregates the results by **groupField** and calculates the aggregated measure values by using **aggregatedField**.\n\n\n<table border=\"1\" cellspacing=\"4\" cellpadding=\"4\"><table>\n    <tr>\n        <th>Measure statistical function </th>\n        <th>Description </th>\n    </tr>\n    <tr>\n        <td>\n        <p><em>aggregateFunction</em> </p>\n        <p></p>\n        </td>\n        <td>\n        <p>The name of the aggregate function (case insensitive). The following\n        aggregate functions are supported :</p>\n        <ul>\n            <li class=\"unordered\">COUNT<br><br></li>\n            <li class=\"unordered\">MAX<br><br></li>\n            <li class=\"unordered\">MIN<br><br></li>\n            <li class=\"unordered\">SUM<br><br></li>\n            <li class=\"unordered\">AVG<br><br></li>\n            <li class=\"unordered\">STDDEV<br><br></li>\n        </ul>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p><em>aggregatedField</em> </p>\n        </td>\n        <td>\n        <p>The field that is being aggregated. This field is optional for the\n        COUNT aggregate function, but has to be an existing numeric field for\n        SUM, MAX, MIN, AVG, or STDDEV.</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p><em>fieldAlias</em> </p>\n        </td>\n        <td>\n        <p>The (optional) alias for the calculated aggregated value. If not\n        specified, the field name will be <em>AggregatedValue.</em></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p><em>groupField</em> </p>\n        </td>\n        <td>\n        <p>The name of the field that the result set is grouped by. </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p><em>Interval</em> </p>\n        </td>\n        <td>\n        <p>The time interval in the format: </p>\n        <p><em>nnnNAME</em> </p>\n        <p></p>\n        <p>Where: </p>\n        <p>nnn is the positive integer number</p>\n        <p><em>NAME</em> is the interval name</p>\n        <p>Supported interval names include (case sensitive): </p>\n        <ul>\n            <li class=\"unordered\">MILLISECOND[S]<br><br></li>\n            <li class=\"unordered\">SECOND[S]<br><br></li>\n            <li class=\"unordered\">MINUTE[S]<br><br></li>\n            <li class=\"unordered\">HOUR[S]<br><br></li>\n            <li class=\"unordered\">DAY[S]<br><br></li>\n            <li class=\"unordered\">MONTH[S]<br><br></li>\n            <li class=\"unordered\">YEAR[S]<br></li>\n        </ul>\n        </td>\n    </tr>\n</table>\n\n\n\nThe interval option can only be used in Date/Time group fields (such as **TimeGenerated** and **TimeCreated**). Currently, this is not enforced by the service, but a field without Date/Time that is passed to the backend will cause a runtime error. When the schema validation is implemented, the service API rejects queries that use fields without Date/Time for interval aggregation. The current **Measure** implementation supports interval grouping for the **Count** aggregate function only.\n\nIf the BY clause is omitted but an interval is specified (as a second syntax), the **TimeGenerated** field is assumed by default.\n\nExamples:\n\n**Example 1**\n\n    Type:Alert | measure count() as Count by ObjectId\n\n*Explanation*\n\nGroups the alerts by **ObjectID** and calculates the number of alerts for each group. The aggregated value is returned as the **Count** field (alias).\n\n**Example 2**\n\n    Type:Alert | measure count() interval 1HOUR\n\n*Explanation*\n\nGroups the alerts by 1-hour intervals by using the **TimeGenerated** field, and returns the number of alerts in each interval.\n\n**Example 3**\n\n    Type:Alert | measure count() as AlertsPerHour interval 1HOUR\n\n*Explanation*\n\nSame as the previous example, but with an aggregated field alias (**AlertsPerHour**).\n\n**Example 4**\n\n    * | measure count() by TimeCreated interval 5DAYS\n\n*Explanation*\n\nGroups the results by 5-day intervals by using the **TimeCreated** field, and returns the number of results in each interval.\n\n**Example 5**\n\n    Type:Alert | measure max(Severity) by WorkflowName\n\n*Explanation*\n\nGroups the alerts by workload name, and returns the maximum alert severity value for each workflow.\n\n**Example 6**\n\n    Type:Alert | measure min(Severity) by WorkflowName\n\n*Explanation*\n\nSame as the previous example, but with the **Min** aggregated function.\n\n**Example 7**\n\n    Type:PerfHourly | measure avg(SampleValue) by ObjectId\n\n*Explanation*\n\nGroups PerfHourly by ObjectId and calculates the average (avg).\n\n**Example 8**\n\n    Type:PerfHourly | measure sum(SampleValue) by ObjectId\n\n*Explanation*\n\nSame as the previous example, but uses **Sum**.\n\n**Example 9**\n\n    Type:PerfHourly | measure stddev(SampleValue) by ObjectId\n\n*Explanation*\n\nSame as the previous example, but uses **STDDEV**.\n\n**Example 10**\n\n    Type:Alert | measure count() as Count by WorkflowName | sort Count desc | top 5\n\n*Explanation*\n\nGets the top five workflows with the maximum number of alerts.\n\n#### Where\n\nSyntax:\n\n**where** AggregatedValue>20\n\nCan only be used after a **Measure** command to further filter the aggregated results that the **Measure** aggregation function has produced.\n\nExamples:\n\n    Type:PerfHourly CounterName:\"% Total Run Time\" | Measure max(Max) as MAXCPU by\n\n    Type:PerfHourly CounterName:\"% Total Run Time\" | Measure max(Max) by RootObjectName | where (AggregatedValue>50 and AggregatedValue<90)\n\n\n\n\n## Search field and facet reference\n\nWhen you use Search to find data, results display various field and facets. However, some of the information you’ll see might not appear very descriptive. You can use the following information to help you understand the results.\n\n<table border=\"1\" cellspacing=\"4\" cellpadding=\"4\">\n    <tr>\n        <th><b>Field</b></th>\n        <th><b>Search Type<b></th>\n        <th><b>Description</b></th>\n    </tr>\n    <tr>\n        <td>\n        <p>TenantId</p>\n        </td>\n        <td>\n        <p>All</p>\n        </td>\n        <td>\n        <p>Used to partition data</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>TimeGenerated</p>\n        </td>\n        <td>\n        <p>All</p>\n        </td>\n        <td>\n        <p>Used to drive the timeline, timeselectors (in search and in other\n        screens). It represents when the piece of data was generated (typically\n        on the agent). The time is expressed in ISO format and is always UTC. In\n        the case of &#39;types&#39; that are based on existing instrumentation (i.e.\n        events in a log) this is typically the real time that the log\n        entry/line/record was logged at; for some of the other types that are\n        produced either via management packs or in the cloud - i.e.\n        recommendations/alerts/updateagent/etc, this is the time when this new\n        piece of data with a snapshot of a configuration of some sort was\n        collected or a recommendation/alert was produced based on it</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventID</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>EventID in the Windows event log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventLog</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Event Log where the event was logged by Windows</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventLevelName</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Critical / warning / information / success</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventLevel</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Numerical value for critical / warning / information / success (use\n        EventLevelName instead for easier/more readable queries)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SourceSystem</p>\n        </td>\n        <td>\n        <p>All</p>\n        </td>\n        <td>\n        <p>Where the data comes from (in terms of &#39;attach&#39; mode to the service -\n        i.e. Operations Manager, Operational Insights (=the data is generated in\n        the cloud), Azure Storage (data coming from WAD) and so on</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ObjectName</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Windows perfomance object name</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>InstanceName</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Windows performance counter instance name</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>CounteName</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Windows performance counter name</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ObjectDisplayName</p>\n        </td>\n        <td>\n        <p>PerfHourly, ConfigurationAlert, ConfigurationObject, ConfigurationObjectProperty</p>\n        </td>\n        <td>\n        <p>Display name of the object targeted by a performance collection rule\n        in Operations Manager, or that of the object discovered by Operational\n        Insights, or against which the alert was generated</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>RootObjectName</p>\n        </td>\n        <td>\n        <p>PerfHourly, ConfigurationAlert, ConfigurationObject, ConfigurationObjectProperty</p>\n        </td>\n        <td>\n        <p>Display name of the parent of the parent (in a double hosting\n        relationship: i.e. SqlDatabase hosted by SqlInstance hosted by Windows\n        Computer) of the object targeted by a performance collection rule in\n        Operations Manager, or that of the object discovered by Operational\n        Insights, or against which the alert was generated</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Computer</p>\n        </td>\n        <td>\n        <p>Most types </p>\n        </td>\n        <td>\n        <p>Computer name that the data belongs to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>DeviceName</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p>Computer name the data belongs to (same as &#39;Computer&#39;)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>DetectionId</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ThreatStatusRank</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p>Threat status rank is a numerical representation of the threat\n        status, and similar to HTTP response codes, we&#39;ve left gaps between the\n        numbers (which is why no threats is 150 and not 100 or 0) so that we&#39;ve\n        got some room to add new states. When we do a rollup for threat status\n        and protection status, we want to show the worst state that the computer\n        has been in during the selected time period. We use the numbers to rank\n        the different states so we can look for the record with the highest\n        number.</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ThreatStatus</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p>Description of ThreatStatus, maps 1:1 with ThreatStatusRank</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>TypeofProtection</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p>Anti-malware product that is detected in the computer: none,\n        Microsoft Malware Removal tool, Forefront, and so on</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ScanDate</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SourceHealthServiceId</p>\n        </td>\n        <td>\n        <p>ProtectionStatus, RequiredUpdate</p>\n        </td>\n        <td>\n        <p>HealthService ID for this computer&#39;s agent</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>HealthServiceId</p>\n        </td>\n        <td>\n        <p>Most types </p>\n        </td>\n        <td>\n        <p>HealthService ID for this computer&#39;s agent</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ManagementGroupName</p>\n        </td>\n        <td>\n        <p>Most types </p>\n        </td>\n        <td>\n        <p>Management Group Name for Operations Manager-attached agents;\n        otherwise it will be null/blank</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ObjectType</p>\n        </td>\n        <td>\n        <p>ConfigurationObject</p>\n        </td>\n        <td>\n        <p>Type (as in Operations Manager management pack&#39;s &#39;type&#39;/class) for\n        this object discovered by Operational Insights configuration assessment</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>UpdateTitle</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>Name of the update that was found not installed</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>PublishDate</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>When was the update published on Microsoft update?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Server</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>Computer name the data belongs to (same as &#39;Computer&#39;)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Product</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>Product that the update applies to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>UpdateClassification</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>Type of update (update rollup, service pack, etc)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>KBID</p>\n        </td>\n        <td>\n        <p>RequiredUpdate</p>\n        </td>\n        <td>\n        <p>KB article ID that describes this best practice or update</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>WorkflowName</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Name of the rule or monitor that produced the alert</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Severity</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Severity of the alert</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Priority</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Priority of the alert</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>IsMonitorAlert</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Is this alert generated by a monitor (true) or a rule (false)?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>AlertParameters</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>XML with the parameters of the Operational Insights alert</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Context</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>XML with the &#39;context&#39; of the Operational Insights alert</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Workload</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Technology or &#39;workload&#39; that the alert refers to </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>AdvisorWorkload</p>\n        </td>\n        <td>\n        <p>Recommendation</p>\n        </td>\n        <td>\n        <p>Technology or &#39;workload&#39; that the recommendation refers to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Description</p>\n        </td>\n        <td>\n        <p>ConfigurationAlert</p>\n        </td>\n        <td>\n        <p>Alert description (short)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>DaysSinceLastUpdate</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>How many days ago (relative to &#39;TimeGenerated&#39; of this record) did\n        this agent install any update from WSUS/Microsoft Update?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>DaysSinceLastUpdateBucket</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Based on DaysSinceLastUpdate, a categorization in &#39;time buckets&#39; of\n        how long ago was a computer last installed any update from\n        WSUS/Microsoft Update</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>AutomaticUpdateEnabled</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Is automatic update checking enabled or disabled on this agent?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>AutomaticUpdateValue</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Is automatic update checking set to automatically download and\n        install, only download, or only check?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>WindowsUpdateAgentVersion</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Version number of the Microsoft Update agent</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>WSUSServer</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Which WSUS server is this update agent targeting?</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>OSVersion</p>\n        </td>\n        <td>\n        <p>UpdateAgent</p>\n        </td>\n        <td>\n        <p>Version of the operating system this update agent is running on</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Name</p>\n        </td>\n        <td>\n        <p>Recommendation, ConfigurationObjectProperty</p>\n        </td>\n        <td>\n        <p>Name/title of the recommendation, or name of the property from\n        Operational Insights Configuration Assessment</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Value</p>\n        </td>\n        <td>\n        <p>ConfigurationObjectProperty</p>\n        </td>\n        <td>\n        <p>Value of a property from Operational Insights Configuration\n        Assessment</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>KBLink</p>\n        </td>\n        <td>\n        <p>Recommendation</p>\n        </td>\n        <td>\n        <p>URL to the KB article that describes this best practice or update</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>RecommendationStatus</p>\n        </td>\n        <td>\n        <p>Recommendation</p>\n        </td>\n        <td>\n        <p>Recommendations are among the few types whose records get &#39;updated&#39;,\n        not just added to the search index. This status changes whether the\n        recommendation is active/open or if Operational Insights detects that it\n        has been resolved</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>RenderedDescription</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Rendered description (reused text with populated parameters) of a\n        Windows event</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ParameterXml</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>XML with the parameters in the &#39;data&#39; section of a Windows Event (as\n        seen in event viewer)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventData</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>XML with the whole &#39;data&#39; section of a Windows Event (as seen in\n        event viewer)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Source</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Event log source that generated the event</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>EventCategory</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>Category of the event , directly from the Windows event log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>UserName</p>\n        </td>\n        <td>\n        <p>Event</p>\n        </td>\n        <td>\n        <p>User name of the Windows event (typically, NT AUTHORITY\\LOCALSYSTEM)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SampleValue</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Average value for the hourly aggregation of a performance counter </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Min</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Minimum value in the hourly interval of a performance counter hourly\n        aggregate</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Max</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>Maximum value in the hourly interval of a performance counter hourly\n        aggregate</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Percentile95</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>The 95th percentile value for the hourly interval of a performance\n        counter hourly aggregate</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SampleCount</p>\n        </td>\n        <td>\n        <p>PerfHourly</p>\n        </td>\n        <td>\n        <p>How many &#39;raw&#39; perf counter samples were used to produce this hourly\n        aggregate record</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Threat</p>\n        </td>\n        <td>\n        <p>ProtectionStatus</p>\n        </td>\n        <td>\n        <p>Name of malware found</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>StorageAccount</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Azure storage account the log was read from</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>AzureDeploymentID</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Azure deployment ID of the cloud service the log belongs to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Role</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Role of the Azure Cloud Service the log belongs to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>RoleInstance</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>RoleInstance of the Azure Role that the log belongs to</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>sSiteName</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>IIS Website that the log belongs to (metabase notation); the\n        s-sitename field in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>sComputerName</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>The s-computername field in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>sIP</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Server IP address the HTTP request was addressed to. The s-ip field\n        in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csMethod</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>HTTP Method (GET/POST/etc) used by the client in the HTTP request.\n        The cs-method in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>cIP</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Client IP address the HTTP request came from. The c-ip field in the\n        original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csUserAgent</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>HTTP User-Agent declared by the client (browser or otherwise). The\n        cs-user-agent in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>scStatus</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>HTTP Status code (200/403/500/etc) returned by the server to the\n        client. The cs-status in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>TimeTaken</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>How long (in milliseconds) that the request took to complete. The\n        timetaken field in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csUriStem</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Relative Uri (without host address, i.e. &#39;/search&#39; ) that was\n        requested. The cs-uristem field in the original log</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csUriQuery</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>URI query. URI queries are necessary only for dynamic pages, such as\n        ASP pages, so this field usually contains a hyphen for static pages.</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>sPort</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Server port that the HTTP request was sent to (and IIS listens to,\n        since it picked it up)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csUserName</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>authenticated user name, if the request is authenticated and not\n        anonymous</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csVersion</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>HTTP Protocol version used in the request (i.e. &#39;HTTP/1.1&#39;)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csCookie</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Cookie information</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csReferer</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Site that the user last visited. This site provided a link to the\n        current site. </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csHost</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Host header (i.e. &#39;www.mysite.com&#39;) that was requested</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>scSubStatus</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Substatus error code</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>scWin32Status</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Windows Status code</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>csBytes</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Bytes sent in the request from the client to the server</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>scBytes</p>\n        </td>\n        <td>\n        <p>W3CIISLog</p>\n        </td>\n        <td>\n        <p>Bytes returned back in the response from the server to the client</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ConfigChangeType </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Type of change (WindowsServices / Software / etc)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>ChangeCategory </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Category of the change (Modified / Added / Removed)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SoftwareType </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Type of software (Update / Application)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SoftwareName </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Name of the software (only applicable to software changes)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Publisher </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Vendor who publishes the software (only applicable to software\n        changes)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcChangeType </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Type of change that was applied on a Windows service (State /\n        StartupType / Path / ServiceAccount) - only applicable to Windows\n        service changes</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcDisplayName </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Display name of the service that was changed</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcName </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Name of the service that was changed</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcState </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>New (current) state of the service</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcPreviousState</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Previous known state of the service (only applicable if service state\n        changed)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcStartupType </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Service startup type</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcPreviousStartupType</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Previous service startup type (only applicable if service startup\n        type changed)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcAccount </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Service account</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcPreviousAccount</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Previous service account (only applicable if service account changed)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcPath</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Path to the executable of the Windows service</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcPreviousPath</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Previous path of the executable for the Windows service (only\n        applicable if it changed)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>SvcDescription</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Description of the service</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Previous </p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Previous state of this software (Installed / Not Installed / previous\n        version)</p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        <p>Current</p>\n        </td>\n        <td>\n        <p>ConfigurationChange</p>\n        </td>\n        <td>\n        <p>Latest state of this software (Installed / Not Installed / current\n        version)</p>\n        </td>\n    </tr>\n</table>\n\n## Blog posts - Search use cases\n- [W3C IIS Logs Search in Microsoft Azure Operational Insights](http://blogs.msdn.com/b/dmuscett/archive/2014/09/20/w3c-iis-logs-search-in-system-center-advisor-limited-preview.aspx)\n- [Monitoring SQL Backup Failures with Azure Operational Insights Search and Dashboards](http://blogs.msdn.com/b/dmuscett/archive/2015/02/21/monitoring-sql-backup-failures-with-azure-operational-insights-search-and-dashboards.aspx)\n- [IIS Management Pack Event-Alerting Rules’s OpInsights Searches Equivalents](http://blogs.msdn.com/b/dmuscett/archive/2014/11/05/iis-mp-event-alerting-rules-s-opinsights-searches-equivalents.aspx)\n- [Useful Operational Insights Search Query Collection](http://blogs.msdn.com/b/dmuscett/archive/2014/10/19/advisor-searches-collection.aspx)\n\n## Other resources\nStefan Roth created a handy Search cheat sheet. Check out his [blog](http://stefanroth.net/2014/11/05/microsoft-azure-operational-insights-search-data-explorer-cheat-sheet/) to learn more and to download his cheat sheet.\n"
}