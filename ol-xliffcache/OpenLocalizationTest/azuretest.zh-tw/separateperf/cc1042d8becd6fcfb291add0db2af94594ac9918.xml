{
  "nodes": [
    {
      "content": "On-premises application with blob storage (Java) | Microsoft Azure",
      "pos": [
        27,
        93
      ]
    },
    {
      "content": "Learn how to create a console application that uploads an image to Azure, and then displays the image in your browser.",
      "pos": [
        112,
        230
      ]
    },
    {
      "content": "Code samples in Java.",
      "pos": [
        231,
        252
      ]
    },
    {
      "content": "On-premises application with blob storage",
      "pos": [
        556,
        597
      ]
    },
    {
      "content": "Overview",
      "pos": [
        602,
        610
      ]
    },
    {
      "content": "The following example shows you how you can use Azure storage to",
      "pos": [
        612,
        676
      ]
    },
    {
      "content": "store images in Azure.",
      "pos": [
        677,
        699
      ]
    },
    {
      "content": "The code in this article is for a console",
      "pos": [
        700,
        741
      ]
    },
    {
      "content": "application that uploads an image to Azure, and then creates an",
      "pos": [
        742,
        805
      ]
    },
    {
      "content": "HTML file that displays the image in your browser.",
      "pos": [
        806,
        856
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        861,
        874
      ]
    },
    {
      "content": "A Java Developer Kit (JDK), version 1.6 or later, is installed.",
      "pos": [
        878,
        941
      ]
    },
    {
      "content": "The Azure SDK is installed.",
      "pos": [
        944,
        971
      ]
    },
    {
      "pos": [
        974,
        1235
      ],
      "content": "The JAR for the Azure Libraries for Java, and any applicable\n  dependency JARs, are installed and are in the build path used by\n  your Java compiler. For information about installing the Azure Libraries for Java, see [Download the\n  Azure SDK for Java][].",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "The JAR for the Azure Libraries for Java, and any applicable",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "dependency JARs, are installed and are in the build path used by",
          "pos": [
            63,
            127
          ]
        },
        {
          "content": "  your Java compiler. For information about installing the Azure Libraries for Java, see [Download the\n  Azure SDK for Java][].",
          "pos": [
            128,
            255
          ],
          "nodes": [
            {
              "content": "your Java compiler.",
              "pos": [
                2,
                21
              ]
            },
            {
              "content": "For information about installing the Azure Libraries for Java, see <bpt id=\"p1\">[</bpt>Download the\n  Azure SDK for Java<ept id=\"p1\">][]</ept>.",
              "pos": [
                22,
                127
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        1238,
        1571
      ],
      "content": "An Azure storage account has been set up. The account name\n  and account key for the storage account will be used by the code\n  in this article. See [How to Create a Storage Account] for information about creating a storage account,\n  and [How to Manage Storage Accounts][] for information about retrieving the\n  account key.",
      "leadings": [
        "",
        "  ",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "An Azure storage account has been set up. The account name",
          "pos": [
            0,
            58
          ],
          "nodes": [
            {
              "content": "An Azure storage account has been set up.",
              "pos": [
                0,
                41
              ]
            },
            {
              "content": "The account name",
              "pos": [
                42,
                58
              ]
            }
          ]
        },
        {
          "content": "and account key for the storage account will be used by the code",
          "pos": [
            61,
            125
          ]
        },
        {
          "content": "  in this article. See [How to Create a Storage Account] for information about creating a storage account,",
          "pos": [
            126,
            232
          ],
          "nodes": [
            {
              "content": "in this article.",
              "pos": [
                2,
                18
              ]
            },
            {
              "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">How to Create a Storage Account]</ept> for information about creating a storage account,",
              "pos": [
                19,
                106
              ]
            }
          ]
        },
        {
          "content": "and <bpt id=\"p1\">[</bpt>How to Manage Storage Accounts<ept id=\"p1\">][]</ept> for information about retrieving the",
          "pos": [
            235,
            310
          ]
        },
        {
          "content": "account key.",
          "pos": [
            313,
            325
          ]
        }
      ]
    },
    {
      "pos": [
        1574,
        1790
      ],
      "content": "You have created a local image file named stored at the path\n  c:\\\\myimages\\\\image1.jpg. Alternatively, modify the\n  **FileInputStream** constructor in the example to use a different\n  image path and file name.",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "You have created a local image file named stored at the path",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "  c:\\\\myimages\\\\image1.jpg. Alternatively, modify the",
          "pos": [
            61,
            114
          ],
          "nodes": [
            {
              "content": "c:\\\\myimages\\\\image1.jpg.",
              "pos": [
                2,
                27
              ]
            },
            {
              "content": "Alternatively, modify the",
              "pos": [
                28,
                53
              ]
            }
          ]
        },
        {
          "content": "<bpt id=\"p1\">  **</bpt>FileInputStream<ept id=\"p1\">**</ept> constructor in the example to use a different",
          "pos": [
            115,
            182
          ]
        },
        {
          "content": "image path and file name.",
          "pos": [
            185,
            210
          ]
        }
      ]
    },
    {
      "content": "To use Azure blob storage to upload a file",
      "pos": [
        1873,
        1915
      ]
    },
    {
      "content": "A step-by-step procedure is presented here.",
      "pos": [
        1917,
        1960
      ]
    },
    {
      "content": "If you'd like to skip ahead,",
      "pos": [
        1961,
        1989
      ]
    },
    {
      "content": "the entire code is presented later in this article.",
      "pos": [
        1990,
        2041
      ]
    },
    {
      "content": "Begin the code by including imports for the Azure core storage",
      "pos": [
        2043,
        2105
      ]
    },
    {
      "content": "classes, the Azure blob client classes, the Java IO classes, and",
      "pos": [
        2106,
        2170
      ]
    },
    {
      "content": "the <bpt id=\"p1\">**</bpt>URISyntaxException<ept id=\"p1\">**</ept> class.",
      "pos": [
        2171,
        2204
      ]
    },
    {
      "content": "Declare a class named <bpt id=\"p1\">**</bpt>StorageSample<ept id=\"p1\">**</ept>, and include the open bracket,",
      "pos": [
        2358,
        2428
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>{<ept id=\"p1\">**</ept>.",
      "pos": [
        2429,
        2435
      ]
    },
    {
      "content": "Within the <bpt id=\"p1\">**</bpt>StorageSample<ept id=\"p1\">**</ept> class, declare a string variable that will",
      "pos": [
        2471,
        2542
      ]
    },
    {
      "content": "contain the default endpoint protocol, your storage account name, and",
      "pos": [
        2543,
        2612
      ]
    },
    {
      "content": "your storage access key, as specified in your Azure storage",
      "pos": [
        2613,
        2672
      ]
    },
    {
      "content": "account.",
      "pos": [
        2673,
        2681
      ]
    },
    {
      "content": "Replace the placeholder values <bpt id=\"p1\">**</bpt>your\\_account\\_name<ept id=\"p1\">**</ept> and",
      "pos": [
        2682,
        2740
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>your\\_account\\_key<ept id=\"p1\">**</ept> with your own account name and account key,",
      "pos": [
        2741,
        2807
      ]
    },
    {
      "content": "respectively.",
      "pos": [
        2808,
        2821
      ]
    },
    {
      "content": "Add in your declaration for <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept>, include a <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block, and",
      "pos": [
        3024,
        3090
      ]
    },
    {
      "content": "include the necessary open brackets, <bpt id=\"p1\">**</bpt>{<ept id=\"p1\">**</ept>.",
      "pos": [
        3091,
        3134
      ]
    },
    {
      "content": "Declare variables of the following type (the descriptions are for how",
      "pos": [
        3208,
        3277
      ]
    },
    {
      "content": "they are used in this example):",
      "pos": [
        3278,
        3309
      ]
    },
    {
      "pos": [
        3315,
        3469
      ],
      "content": "**CloudStorageAccount**: Used to initialize the account object with\nyour Azure storage account name and key, and to create the\nblob client object.",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept>: Used to initialize the account object with",
          "pos": [
            0,
            67
          ]
        },
        {
          "content": "your Azure storage account name and key, and to create the",
          "pos": [
            68,
            126
          ]
        },
        {
          "content": "blob client object.",
          "pos": [
            127,
            146
          ]
        }
      ]
    },
    {
      "pos": [
        3474,
        3527
      ],
      "content": "<bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept>: Used to access the blob service."
    },
    {
      "pos": [
        3532,
        3651
      ],
      "content": "**CloudBlobContainer**: Used to create a blob container, list the\nblobs in the container, and delete the container.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>CloudBlobContainer<ept id=\"p1\">**</ept>: Used to create a blob container, list the",
          "pos": [
            0,
            65
          ]
        },
        {
          "content": "blobs in the container, and delete the container.",
          "pos": [
            66,
            115
          ]
        }
      ]
    },
    {
      "pos": [
        3656,
        3731
      ],
      "content": "**CloudBlockBlob**: Used to upload a local image file to the\ncontainer.",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "<bpt id=\"p1\">**</bpt>CloudBlockBlob<ept id=\"p1\">**</ept>: Used to upload a local image file to the",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "container.",
          "pos": [
            61,
            71
          ]
        }
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n\n    CloudStorageAccount account;\n    CloudBlobClient serviceClient;\n    CloudBlobContainer container;\n    CloudBlockBlob blob;</ph>\n\nAssign a value to the <bpt id=\"p1\">**</bpt>account<ept id=\"p1\">**</ept> variable.",
      "pos": [
        3741,
        3914
      ]
    },
    {
      "content": "account = CloudStorageAccount.parse(storageConnectionString);\n\nAssign a value to the <bpt id=\"p1\">**</bpt>serviceClient<ept id=\"p1\">**</ept> variable.",
      "pos": [
        3920,
        4032
      ]
    },
    {
      "content": "serviceClient = account.createCloudBlobClient();\n\nAssign a value to the <bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept> variable.",
      "pos": [
        4038,
        4133
      ]
    },
    {
      "content": "We'll get a reference to a",
      "pos": [
        4134,
        4160
      ]
    },
    {
      "content": "container named <bpt id=\"p1\">**</bpt>gettingstarted<ept id=\"p1\">**</ept>.",
      "pos": [
        4161,
        4196
      ]
    },
    {
      "content": "// Container name must be lower case.",
      "pos": [
        4202,
        4239
      ]
    },
    {
      "content": "container = serviceClient.getContainerReference(\"gettingstarted\");\n\nCreate the container.",
      "pos": [
        4244,
        4333
      ]
    },
    {
      "content": "This method will create the container if it doesn't",
      "pos": [
        4334,
        4385
      ]
    },
    {
      "content": "exist (and return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>).",
      "pos": [
        4386,
        4414
      ]
    },
    {
      "content": "If the container does exist, it will return",
      "pos": [
        4415,
        4458
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept>.",
      "pos": [
        4459,
        4469
      ]
    },
    {
      "content": "An alternative to <bpt id=\"p1\">**</bpt>createIfNotExists<ept id=\"p1\">**</ept> is the <bpt id=\"p2\">**</bpt>create<ept id=\"p2\">**</ept>",
      "pos": [
        4470,
        4527
      ]
    },
    {
      "content": "method (which will return an error if the container already exists).",
      "pos": [
        4528,
        4596
      ]
    },
    {
      "content": "container.createIfNotExists();\n\nSet anonymous access for the container.",
      "pos": [
        4602,
        4673
      ]
    },
    {
      "content": "// Set anonymous access on the container.",
      "pos": [
        4679,
        4720
      ]
    },
    {
      "content": "BlobContainerPermissions containerPermissions;\n    containerPermissions = new BlobContainerPermissions();\n    containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\n    container.uploadPermissions(containerPermissions);\n\nGet a reference to the block blob, which will represent the blob in",
      "pos": [
        4725,
        5037
      ]
    },
    {
      "content": "Azure storage.",
      "pos": [
        5038,
        5052
      ]
    },
    {
      "content": "blob = container.getBlockBlobReference(\"image1.jpg\");\n\nUse the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> constructor to get a reference to the locally created",
      "pos": [
        5058,
        5183
      ]
    },
    {
      "content": "file that you will upload.",
      "pos": [
        5184,
        5210
      ]
    },
    {
      "content": "Ensure you have created this file before",
      "pos": [
        5211,
        5251
      ]
    },
    {
      "content": "running the code.",
      "pos": [
        5252,
        5269
      ]
    },
    {
      "content": "File fileReference = new File (\"c:\\\\myimages\\\\image1.jpg\");\n\nUpload the local file through a call to the <bpt id=\"p1\">**</bpt>CloudBlockBlob.upload<ept id=\"p1\">**</ept>",
      "pos": [
        5275,
        5405
      ]
    },
    {
      "content": "method.",
      "pos": [
        5406,
        5413
      ]
    },
    {
      "content": "The first parameter to the <bpt id=\"p1\">**</bpt>CloudBlockBlob.upload<ept id=\"p1\">**</ept> method is a",
      "pos": [
        5414,
        5478
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FileInputStream<ept id=\"p1\">**</ept> object that represents the local file that will be",
      "pos": [
        5479,
        5549
      ]
    },
    {
      "content": "uploaded to Azure storage.",
      "pos": [
        5550,
        5576
      ]
    },
    {
      "content": "The second parameter is the size, in",
      "pos": [
        5577,
        5613
      ]
    },
    {
      "content": "bytes, of the file.",
      "pos": [
        5614,
        5633
      ]
    },
    {
      "content": "blob.upload(new FileInputStream(fileReference), fileReference.length());\n\nCall a helper function named <bpt id=\"p1\">**</bpt>MakeHTMLPage<ept id=\"p1\">**</ept>, to make a basic HTML page",
      "pos": [
        5639,
        5785
      ]
    },
    {
      "content": "that contains an <bpt id=\"p1\">**</bpt>&amp;lt;image&amp;gt;<ept id=\"p1\">**</ept> element with the source set to the blob that",
      "pos": [
        5786,
        5865
      ]
    },
    {
      "content": "is now in your Azure storage account.",
      "pos": [
        5866,
        5903
      ]
    },
    {
      "content": "The code for",
      "pos": [
        5904,
        5916
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>MakeHTMLPage<ept id=\"p1\">**</ept> will be discussed later in this article.",
      "pos": [
        5917,
        5974
      ]
    },
    {
      "content": "MakeHTMLPage(container);\n\nPrint out a status message and information about the created HTML page.",
      "pos": [
        5980,
        6077
      ]
    },
    {
      "content": "System.out.println(\"Processing complete.\");\n    System.out.println(\"Open index.html to see the images stored in your storage account.\");\n\nClose the <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> block by inserting a close bracket: <bpt id=\"p2\">**</bpt>}<ept id=\"p2\">**</ept>\n\nHandle the following exceptions:\n\n<bpt id=\"p3\">-   **</bpt>FileNotFoundException<ept id=\"p3\">**</ept>: Can be thrown by the <bpt id=\"p4\">**</bpt>FileInputStream<ept id=\"p4\">**</ept>",
      "pos": [
        6083,
        6387
      ]
    },
    {
      "content": "<bpt id=\"p1\">o</bpt>r **FileOutputSt<ept id=\"p1\">re</ept><ph id=\"ph1\">a</ph>m** construct<bpt id=\"p2\">ors.\n-   **</bpt>StorageException<ept id=\"p2\">**</ept>: Can be thrown by the Azure client",
      "pos": [
        6392,
        6489
      ]
    },
    {
      "content": "storage libr<bpt id=\"p1\">ary.\n-   **</bpt>URISyntaxException<ept id=\"p1\">**</ept>: Can be thrown by the <bpt id=\"p2\">**</bpt>ListBlobItem.getUri<ept id=\"p2\">**</ept>",
      "pos": [
        6494,
        6583
      ]
    },
    {
      "content": "met<bpt id=\"p1\">hod.\n-   **</bpt>Exception<ept id=\"p1\">**</ept>: Generic exception handling.",
      "pos": [
        6588,
        6642
      ]
    },
    {
      "pos": [
        7447,
        7497
      ],
      "content": "Close <bpt id=\"p1\">**</bpt>main<ept id=\"p1\">**</ept> by inserting a close bracket: <bpt id=\"p2\">**</bpt>}<ept id=\"p2\">**</ept>"
    },
    {
      "content": "Create a method named <bpt id=\"p1\">**</bpt>MakeHTMLPage<ept id=\"p1\">**</ept> to create a basic HTML page.",
      "pos": [
        7499,
        7566
      ]
    },
    {
      "content": "This",
      "pos": [
        7567,
        7571
      ]
    },
    {
      "content": "method has a parameter of type <bpt id=\"p1\">**</bpt>CloudBlobContainer<ept id=\"p1\">**</ept>, which will be",
      "pos": [
        7572,
        7640
      ]
    },
    {
      "content": "used to iterate through the list of uploaded blobs.",
      "pos": [
        7641,
        7692
      ]
    },
    {
      "content": "This method will",
      "pos": [
        7693,
        7709
      ]
    },
    {
      "content": "throw exceptions of type <bpt id=\"p1\">**</bpt>FileNotFoundException<ept id=\"p1\">**</ept>, which can be thrown",
      "pos": [
        7710,
        7781
      ]
    },
    {
      "content": "by the <bpt id=\"p1\">**</bpt>FileOutputStream<ept id=\"p1\">**</ept> constructor, and <bpt id=\"p2\">**</bpt>URISyntaxException<ept id=\"p2\">**</ept>,",
      "pos": [
        7782,
        7850
      ]
    },
    {
      "content": "which can be thrown by the <bpt id=\"p1\">**</bpt>ListBlobItem.getUri<ept id=\"p1\">**</ept> method.",
      "pos": [
        7851,
        7909
      ]
    },
    {
      "content": "Include the",
      "pos": [
        7910,
        7921
      ]
    },
    {
      "content": "opening bracket, <bpt id=\"p1\">**</bpt>{<ept id=\"p1\">**</ept>.",
      "pos": [
        7922,
        7945
      ]
    },
    {
      "pos": [
        8069,
        8110
      ],
      "content": "Create a local file named <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Write to the local file, adding in the <bpt id=\"p1\">**</bpt>&amp;lt;html&amp;gt;<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>&amp;lt;header&amp;gt;<ept id=\"p2\">**</ept>, and",
      "pos": [
        8203,
        8283
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>&amp;lt;body&amp;gt;<ept id=\"p1\">**</ept> elements.",
      "pos": [
        8284,
        8310
      ]
    },
    {
      "content": "Iterate through the list of uploaded blobs.",
      "pos": [
        8406,
        8449
      ]
    },
    {
      "content": "For each blob, in the HTML",
      "pos": [
        8450,
        8476
      ]
    },
    {
      "content": "page create an <bpt id=\"p1\">**</bpt>&amp;lt;img&amp;gt;<ept id=\"p1\">**</ept> element that has its <bpt id=\"p2\">**</bpt>src<ept id=\"p2\">**</ept> attribute sent to",
      "pos": [
        8477,
        8554
      ]
    },
    {
      "content": "the URI of the blob as it exists in your Azure storage account.",
      "pos": [
        8555,
        8618
      ]
    },
    {
      "content": "Although you added only one image in this sample, if you added more,",
      "pos": [
        8619,
        8687
      ]
    },
    {
      "content": "this code would iterate all of them.",
      "pos": [
        8688,
        8724
      ]
    },
    {
      "content": "For simplicity, this example assumes each uploaded blob is an image.",
      "pos": [
        8726,
        8794
      ]
    },
    {
      "content": "If",
      "pos": [
        8795,
        8797
      ]
    },
    {
      "content": "you've updated blobs other than images, or page blobs instead of block",
      "pos": [
        8798,
        8868
      ]
    },
    {
      "content": "blobs, adjust the code as needed.",
      "pos": [
        8869,
        8902
      ]
    },
    {
      "pos": [
        9133,
        9201
      ],
      "content": "Close the <bpt id=\"p1\">**</bpt>&amp;lt;body&amp;gt;<ept id=\"p1\">**</ept> element and the <bpt id=\"p2\">**</bpt>&amp;lt;html&amp;gt;<ept id=\"p2\">**</ept> element."
    },
    {
      "content": "Close the local file.",
      "pos": [
        9266,
        9287
      ]
    },
    {
      "pos": [
        9310,
        9368
      ],
      "content": "Close <bpt id=\"p1\">**</bpt>MakeHTMLPage<ept id=\"p1\">**</ept> by inserting a close bracket: <bpt id=\"p2\">**</bpt>}<ept id=\"p2\">**</ept>"
    },
    {
      "pos": [
        9370,
        9429
      ],
      "content": "Close <bpt id=\"p1\">**</bpt>StorageSample<ept id=\"p1\">**</ept> by inserting a close bracket: <bpt id=\"p2\">**</bpt>}<ept id=\"p2\">**</ept>"
    },
    {
      "content": "The following is the complete code for this example.",
      "pos": [
        9431,
        9483
      ]
    },
    {
      "content": "Remember to modify",
      "pos": [
        9484,
        9502
      ]
    },
    {
      "content": "the placeholder values <bpt id=\"p1\">**</bpt>your\\_account\\_name<ept id=\"p1\">**</ept> and",
      "pos": [
        9503,
        9553
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>your\\_account\\_key<ept id=\"p1\">**</ept> to use your account name and account key,",
      "pos": [
        9554,
        9618
      ]
    },
    {
      "content": "respectively.",
      "pos": [
        9619,
        9632
      ]
    },
    {
      "content": "In addition to uploading your local image file to Azure storage,",
      "pos": [
        13780,
        13844
      ]
    },
    {
      "content": "the example code creates a local file namedindex.html, which you can",
      "pos": [
        13845,
        13913
      ]
    },
    {
      "content": "open in your browser to see your uploaded image.",
      "pos": [
        13914,
        13962
      ]
    },
    {
      "content": "Because the code contains your account name and account key, ensure that",
      "pos": [
        13964,
        14036
      ]
    },
    {
      "content": "your source code is secure.",
      "pos": [
        14037,
        14064
      ]
    },
    {
      "content": "To delete a container",
      "pos": [
        14069,
        14090
      ]
    },
    {
      "content": "Because you are charged for storage, you may want to delete the",
      "pos": [
        14092,
        14155
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>gettingstarted<ept id=\"p1\">**</ept> container after you are done experimenting with this",
      "pos": [
        14156,
        14227
      ]
    },
    {
      "content": "example.",
      "pos": [
        14228,
        14236
      ]
    },
    {
      "content": "To delete a container, use the <bpt id=\"p1\">**</bpt>CloudBlobContainer.delete<ept id=\"p1\">**</ept>",
      "pos": [
        14237,
        14297
      ]
    },
    {
      "content": "method.",
      "pos": [
        14298,
        14305
      ]
    },
    {
      "content": "To call the <bpt id=\"p1\">**</bpt>CloudBlobContainer.delete<ept id=\"p1\">**</ept> method, the process of",
      "pos": [
        14403,
        14467
      ]
    },
    {
      "content": "initializing <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>ClodBlobClient<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>CloudBlobContainer<ept id=\"p3\">**</ept> objects is the same as shown for the",
      "pos": [
        14468,
        14589
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>createIfNotExist<ept id=\"p1\">**</ept> method.",
      "pos": [
        14590,
        14618
      ]
    },
    {
      "content": "The following is a complete example that",
      "pos": [
        14619,
        14659
      ]
    },
    {
      "content": "deletes the container named <bpt id=\"p1\">**</bpt>gettingstarted<ept id=\"p1\">**</ept>.",
      "pos": [
        14660,
        14707
      ]
    },
    {
      "pos": [
        16141,
        16252
      ],
      "content": "For an overview of other blob storage classes and methods, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">How to</ph>\nuse the blob storage service from Java<ept id=\"p1\">]</ept>."
    },
    {
      "content": "Next steps",
      "pos": [
        16257,
        16267
      ]
    },
    {
      "content": "Follow these links to learn more about more complex storage tasks.",
      "pos": [
        16269,
        16335
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        16340,
        16366
      ]
    },
    {
      "content": "Azure Storage Client SDK Reference",
      "pos": [
        16373,
        16407
      ]
    },
    {
      "content": "Azure Storage REST API",
      "pos": [
        16414,
        16436
      ]
    },
    {
      "content": "Azure Storage Team Blog",
      "pos": [
        16443,
        16466
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"On-premises application with blob storage (Java) | Microsoft Azure\"\n    description=\"Learn how to create a console application that uploads an image to Azure, and then displays the image in your browser. Code samples in Java.\"\n    services=\"storage\"\n    documentationCenter=\"java\"\n    authors=\"rmcmurray\"\n    manager=\"wpickett\"\n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"Java\"\n    ms.topic=\"article\"\n    ms.date=\"08/31/2015\" \n    ms.author=\"robmcm\"/>\n\n# On-premises application with blob storage\n\n## Overview\n\nThe following example shows you how you can use Azure storage to\nstore images in Azure. The code in this article is for a console\napplication that uploads an image to Azure, and then creates an\nHTML file that displays the image in your browser.\n\n## Prerequisites\n\n- A Java Developer Kit (JDK), version 1.6 or later, is installed.\n- The Azure SDK is installed.\n- The JAR for the Azure Libraries for Java, and any applicable\n    dependency JARs, are installed and are in the build path used by\n    your Java compiler. For information about installing the Azure Libraries for Java, see [Download the\n    Azure SDK for Java][].\n- An Azure storage account has been set up. The account name\n    and account key for the storage account will be used by the code\n    in this article. See [How to Create a Storage Account] for information about creating a storage account,\n    and [How to Manage Storage Accounts][] for information about retrieving the\n    account key.\n- You have created a local image file named stored at the path\n    c:\\\\myimages\\\\image1.jpg. Alternatively, modify the\n    **FileInputStream** constructor in the example to use a different\n    image path and file name.\n\n[AZURE.INCLUDE [create-account-note](../../includes/create-account-note.md)]\n\n## To use Azure blob storage to upload a file\n\nA step-by-step procedure is presented here. If you'd like to skip ahead,\nthe entire code is presented later in this article.\n\nBegin the code by including imports for the Azure core storage\nclasses, the Azure blob client classes, the Java IO classes, and\nthe **URISyntaxException** class.\n\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.blob.*;\n    import java.io.*;\n    import java.net.URISyntaxException;\n\nDeclare a class named **StorageSample**, and include the open bracket,\n**{**.\n\n    public class StorageSample {\n\nWithin the **StorageSample** class, declare a string variable that will\ncontain the default endpoint protocol, your storage account name, and\nyour storage access key, as specified in your Azure storage\naccount. Replace the placeholder values **your\\_account\\_name** and\n**your\\_account\\_key** with your own account name and account key,\nrespectively.\n\n    public static final String storageConnectionString =\n           \"DefaultEndpointsProtocol=http;\" +\n               \"AccountName=your_account_name;\" +\n               \"AccountKey=your_account_name\";\n\nAdd in your declaration for **main**, include a **try** block, and\ninclude the necessary open brackets, **{**.\n\n    public static void main(String[] args)\n    {\n        try\n        {\n\nDeclare variables of the following type (the descriptions are for how\nthey are used in this example):\n\n-   **CloudStorageAccount**: Used to initialize the account object with\n    your Azure storage account name and key, and to create the\n    blob client object.\n-   **CloudBlobClient**: Used to access the blob service.\n-   **CloudBlobContainer**: Used to create a blob container, list the\n    blobs in the container, and delete the container.\n-   **CloudBlockBlob**: Used to upload a local image file to the\n    container.\n\n<!-- -->\n\n    CloudStorageAccount account;\n    CloudBlobClient serviceClient;\n    CloudBlobContainer container;\n    CloudBlockBlob blob;\n\nAssign a value to the **account** variable.\n\n    account = CloudStorageAccount.parse(storageConnectionString);\n\nAssign a value to the **serviceClient** variable.\n\n    serviceClient = account.createCloudBlobClient();\n\nAssign a value to the **container** variable. We'll get a reference to a\ncontainer named **gettingstarted**.\n\n    // Container name must be lower case.\n    container = serviceClient.getContainerReference(\"gettingstarted\");\n\nCreate the container. This method will create the container if it doesn't\nexist (and return **true**). If the container does exist, it will return\n**false**. An alternative to **createIfNotExists** is the **create**\nmethod (which will return an error if the container already exists).\n\n    container.createIfNotExists();\n\nSet anonymous access for the container.\n\n    // Set anonymous access on the container.\n    BlobContainerPermissions containerPermissions;\n    containerPermissions = new BlobContainerPermissions();\n    containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\n    container.uploadPermissions(containerPermissions);\n\nGet a reference to the block blob, which will represent the blob in\nAzure storage.\n\n    blob = container.getBlockBlobReference(\"image1.jpg\");\n\nUse the **File** constructor to get a reference to the locally created\nfile that you will upload. Ensure you have created this file before\nrunning the code.\n\n    File fileReference = new File (\"c:\\\\myimages\\\\image1.jpg\");\n\nUpload the local file through a call to the **CloudBlockBlob.upload**\nmethod. The first parameter to the **CloudBlockBlob.upload** method is a\n**FileInputStream** object that represents the local file that will be\nuploaded to Azure storage. The second parameter is the size, in\nbytes, of the file.\n\n    blob.upload(new FileInputStream(fileReference), fileReference.length());\n\nCall a helper function named **MakeHTMLPage**, to make a basic HTML page\nthat contains an **&lt;image&gt;** element with the source set to the blob that\nis now in your Azure storage account. The code for\n**MakeHTMLPage** will be discussed later in this article.\n\n    MakeHTMLPage(container);\n\nPrint out a status message and information about the created HTML page.\n\n    System.out.println(\"Processing complete.\");\n    System.out.println(\"Open index.html to see the images stored in your storage account.\");\n\nClose the **try** block by inserting a close bracket: **}**\n\nHandle the following exceptions:\n\n-   **FileNotFoundException**: Can be thrown by the **FileInputStream**\n    or **FileOutputStream** constructors.\n-   **StorageException**: Can be thrown by the Azure client\n    storage library.\n-   **URISyntaxException**: Can be thrown by the **ListBlobItem.getUri**\n    method.\n-   **Exception**: Generic exception handling.\n\n<!-- -->\n\n    catch (FileNotFoundException fileNotFoundException)\n    {\n        System.out.print(\"FileNotFoundException encountered: \");\n        System.out.println(fileNotFoundException.getMessage());\n        System.exit(-1);\n    }\n    catch (StorageException storageException)\n    {\n        System.out.print(\"StorageException encountered: \");\n        System.out.println(storageException.getMessage());\n        System.exit(-1);\n    }\n    catch (URISyntaxException uriSyntaxException)\n    {\n        System.out.print(\"URISyntaxException encountered: \");\n        System.out.println(uriSyntaxException.getMessage());\n        System.exit(-1);\n    }\n    catch (Exception e)\n    {\n        System.out.print(\"Exception encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\nClose **main** by inserting a close bracket: **}**\n\nCreate a method named **MakeHTMLPage** to create a basic HTML page. This\nmethod has a parameter of type **CloudBlobContainer**, which will be\nused to iterate through the list of uploaded blobs. This method will\nthrow exceptions of type **FileNotFoundException**, which can be thrown\nby the **FileOutputStream** constructor, and **URISyntaxException**,\nwhich can be thrown by the **ListBlobItem.getUri** method. Include the\nopening bracket, **{**.\n\n    public static void MakeHTMLPage(CloudBlobContainer container) throws FileNotFoundException, URISyntaxException\n    {\n\nCreate a local file named **index.html**.\n\n    PrintStream stream;\n    stream = new PrintStream(new FileOutputStream(\"index.html\"));\n\nWrite to the local file, adding in the **&lt;html&gt;**, **&lt;header&gt;**, and\n**&lt;body&gt;** elements.\n\n    stream.println(\"<html>\");\n    stream.println(\"<header/>\");\n    stream.println(\"<body>\");\n\nIterate through the list of uploaded blobs. For each blob, in the HTML\npage create an **&lt;img&gt;** element that has its **src** attribute sent to\nthe URI of the blob as it exists in your Azure storage account.\nAlthough you added only one image in this sample, if you added more,\nthis code would iterate all of them.\n\nFor simplicity, this example assumes each uploaded blob is an image. If\nyou've updated blobs other than images, or page blobs instead of block\nblobs, adjust the code as needed.\n\n    // Enumerate the uploaded blobs.\n    for (ListBlobItem blobItem : container.listBlobs()) {\n    // List each blob as an <img> element in the HTML body.\n    stream.println(\"<img src='\" + blobItem.getUri() + \"'/><br/>\");\n    }\n\nClose the **&lt;body&gt;** element and the **&lt;html&gt;** element.\n\n    stream.println(\"</body>\");\n    stream.println(\"</html>\");\n\nClose the local file.\n\n    stream.close();\n\nClose **MakeHTMLPage** by inserting a close bracket: **}**\n\nClose **StorageSample** by inserting a close bracket: **}**\n\nThe following is the complete code for this example. Remember to modify\nthe placeholder values **your\\_account\\_name** and\n**your\\_account\\_key** to use your account name and account key,\nrespectively.\n\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.blob.*;\n    import java.io.*;\n    import java.net.URISyntaxException;\n\n    // Create an image, c:\\myimages\\image1.jpg, prior to running this sample.\n    // Alternatively, change the value used by the FileInputStream constructor\n    // to use a different image path and file that you have already created.\n    public class StorageSample {\n\n        public static final String storageConnectionString =\n                \"DefaultEndpointsProtocol=http;\" +\n                       \"AccountName=your_account_name;\" +\n                       \"AccountKey=your_account_name\";\n\n        public static void main(String[] args) {\n            try {\n                CloudStorageAccount account;\n                CloudBlobClient serviceClient;\n                CloudBlobContainer container;\n                CloudBlockBlob blob;\n\n                account = CloudStorageAccount.parse(storageConnectionString);\n                serviceClient = account.createCloudBlobClient();\n                // Container name must be lower case.\n                container = serviceClient.getContainerReference(\"gettingstarted\");\n                container.createIfNotExists();\n\n                // Set anonymous access on the container.\n                BlobContainerPermissions containerPermissions;\n                containerPermissions = new BlobContainerPermissions();\n                containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\n                container.uploadPermissions(containerPermissions);\n\n                // Upload an image file.\n                blob = container.getBlockBlobReference(\"image1.jpg\");\n\n                File fileReference = new File(\"c:\\\\myimages\\\\image1.jpg\");\n                blob.upload(new FileInputStream(fileReference), fileReference.length());\n\n                // At this point the image is uploaded.\n                // Next, create an HTML page that lists all of the uploaded images.\n                MakeHTMLPage(container);\n\n                System.out.println(\"Processing complete.\");\n                System.out.println(\"Open index.html to see the images stored in your storage account.\");\n\n            } catch (FileNotFoundException fileNotFoundException) {\n                System.out.print(\"FileNotFoundException encountered: \");\n                System.out.println(fileNotFoundException.getMessage());\n                System.exit(-1);\n            } catch (StorageException storageException) {\n                System.out.print(\"StorageException encountered: \");\n                System.out.println(storageException.getMessage());\n                System.exit(-1);\n            } catch (URISyntaxException uriSyntaxException) {\n                System.out.print(\"URISyntaxException encountered: \");\n                System.out.println(uriSyntaxException.getMessage());\n                System.exit(-1);\n            } catch (Exception e) {\n                System.out.print(\"Exception encountered: \");\n                System.out.println(e.getMessage());\n                System.exit(-1);\n            }\n        }\n\n        // Create an HTML page that can be used to display the uploaded images.\n        // This example assumes all of the blobs are for images.\n        public static void MakeHTMLPage(CloudBlobContainer container) throws FileNotFoundException, URISyntaxException\n        {\n            PrintStream stream;\n            stream = new PrintStream(new FileOutputStream(\"index.html\"));\n\n            // Create the opening <html>, <header>, and <body> elements.\n            stream.println(\"<html>\");\n            stream.println(\"<header/>\");\n            stream.println(\"<body>\");\n\n            // Enumerate the uploaded blobs.\n            for (ListBlobItem blobItem : container.listBlobs()) {\n                // List each blob as an <img> element in the HTML body.\n                stream.println(\"<img src='\" + blobItem.getUri() + \"'/><br/>\");\n            }\n\n            stream.println(\"</body>\");\n\n            // Complete the <html> element and close the file.\n            stream.println(\"</html>\");\n            stream.close();\n        }\n    }\n\nIn addition to uploading your local image file to Azure storage,\nthe example code creates a local file namedindex.html, which you can\nopen in your browser to see your uploaded image.\n\nBecause the code contains your account name and account key, ensure that\nyour source code is secure.\n\n## To delete a container\n\nBecause you are charged for storage, you may want to delete the\n**gettingstarted** container after you are done experimenting with this\nexample. To delete a container, use the **CloudBlobContainer.delete**\nmethod.\n\n    container = serviceClient.getContainerReference(\"gettingstarted\");\n    container.delete();\n\nTo call the **CloudBlobContainer.delete** method, the process of\ninitializing **CloudStorageAccount**, **ClodBlobClient**, and **CloudBlobContainer** objects is the same as shown for the\n**createIfNotExist** method. The following is a complete example that\ndeletes the container named **gettingstarted**.\n\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.blob.*;\n\n    public class DeleteContainer {\n\n        public static final String storageConnectionString =\n                \"DefaultEndpointsProtocol=http;\" +\n                   \"AccountName=your_account_name;\" +\n                   \"AccountKey=your_account_key\";\n\n        public static void main(String[] args)\n        {\n            try\n            {\n                CloudStorageAccount account;\n                CloudBlobClient serviceClient;\n                CloudBlobContainer container;\n\n                account = CloudStorageAccount.parse(storageConnectionString);\n                serviceClient = account.createCloudBlobClient();\n                // Container name must be lower case.\n                container = serviceClient.getContainerReference(\"gettingstarted\");\n                container.delete();\n\n                System.out.println(\"Container deleted.\");\n\n            }\n            catch (StorageException storageException)\n            {\n                System.out.print(\"StorageException encountered: \");\n                System.out.println(storageException.getMessage());\n                System.exit(-1);\n            }\n            catch (Exception e)\n            {\n                System.out.print(\"Exception encountered: \");\n                System.out.println(e.getMessage());\n                System.exit(-1);\n            }\n        }\n    }\n\nFor an overview of other blob storage classes and methods, see [How to\nuse the blob storage service from Java].\n\n## Next steps\n\nFollow these links to learn more about more complex storage tasks.\n\n- [Azure Storage SDK for Java][]\n- [Azure Storage Client SDK Reference][]\n- [Azure Storage REST API][]\n- [Azure Storage Team Blog][]\n\n  [Download the Azure SDK for Java]: http://go.microsoft.com/fwlink/?LinkID=525671\n  [How to Create a Storage Account]: storage-create-storage-account.md#create-a-storage-account\n  [How to Manage Storage Accounts]: storage-create-storage-account.md#view-copy-and-regenerate-storage-access-keys\n  [How to Use the Blob Storage Service from Java]: storage-java-how-to-use-blob-storage.md\n  [Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n  [Azure Storage Client SDK Reference]: http://dl.windowsazure.com/storage/javadoc/\n  [Azure Storage REST API]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n"
}