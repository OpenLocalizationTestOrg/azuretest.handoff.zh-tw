{
  "nodes": [
    {
      "content": "Getting started with Azure Blob storage and Visual Studio connected services",
      "pos": [
        27,
        103
      ]
    },
    {
      "content": "How to get started using Azure Blob storage in an ASP.NET project in Visual Studio",
      "pos": [
        122,
        204
      ]
    },
    {
      "content": "Getting started with Azure Blob storage and Visual Studio connected services",
      "pos": [
        515,
        591
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        595,
        611
      ]
    },
    {
      "content": "Getting started",
      "pos": [
        617,
        632
      ]
    },
    {
      "content": "What happened",
      "pos": [
        683,
        696
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        737,
        753
      ]
    },
    {
      "content": "Blobs",
      "pos": [
        759,
        764
      ]
    },
    {
      "content": "Queues",
      "pos": [
        815,
        821
      ]
    },
    {
      "content": "Tables",
      "pos": [
        873,
        879
      ]
    },
    {
      "content": "Overview",
      "pos": [
        930,
        938
      ]
    },
    {
      "content": "This article describes how to get started using Azure Blob storage after you have created or referenced an Azure storage account in an ASP.NET app by using the  Visual Studio <bpt id=\"p1\">**</bpt>Add Connected Services<ept id=\"p1\">**</ept> dialog box.",
      "pos": [
        940,
        1153
      ]
    },
    {
      "content": "The article shows you how to create blob containers and perform other common tasks such as uploading, listing, downloading, and deleting blobs.",
      "pos": [
        1154,
        1297
      ]
    },
    {
      "content": "The samples are written in C\\# and",
      "pos": [
        1298,
        1332
      ]
    },
    {
      "content": "use the <bpt id=\"p1\">[</bpt>Azure Storage Client Library for .NET<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn261237.aspx)</ept>.",
      "pos": [
        1333,
        1437
      ]
    },
    {
      "pos": [
        1443,
        1580
      ],
      "content": "For more general information about using Azure Blob storage, see <bpt id=\"p1\">[</bpt>How to use Blob storage from .NET<ept id=\"p1\">](storage-dotnet-how-to-use-blobs.md)</ept>."
    },
    {
      "pos": [
        1585,
        1664
      ],
      "content": "For more information about ASP.NET projects, see <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>."
    },
    {
      "content": "Azure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS.",
      "pos": [
        1667,
        1812
      ]
    },
    {
      "content": "A single blob can be any size.",
      "pos": [
        1813,
        1843
      ]
    },
    {
      "content": "Blobs can be things like images, audio and video files, raw data, and document files.",
      "pos": [
        1844,
        1929
      ]
    },
    {
      "content": "Just as files live in folders, storage blobs live in containers.",
      "pos": [
        1931,
        1995
      ]
    },
    {
      "content": "After you have created a storage account, you create one or more containers in the storage.",
      "pos": [
        1996,
        2087
      ]
    },
    {
      "content": "For example, in a storage called “Scrapbook,” you can create blob containers in the storage called “images” to store pictures and another called “audio” to store audio files.",
      "pos": [
        2088,
        2262
      ]
    },
    {
      "content": "After you create the containers, you can upload individual blob files to them.",
      "pos": [
        2263,
        2341
      ]
    },
    {
      "content": "Access blob containers in code",
      "pos": [
        2348,
        2378
      ]
    },
    {
      "content": "To programmatically access blobs in ASP.NET projects, you need to add the following items, if they're not already present.",
      "pos": [
        2380,
        2502
      ]
    },
    {
      "content": "Add the following code namespace declarations to the top of any C# file in which you wish to programmatically access Azure Storage.",
      "pos": [
        2507,
        2638
      ]
    },
    {
      "content": "Get a <ph id=\"ph1\">`CloudStorageAccount`</ph> object that represents your storage account information.",
      "pos": [
        2842,
        2926
      ]
    },
    {
      "content": "Use the following code to get the your storage connection string and storage account information from the Azure service configuration.",
      "pos": [
        2927,
        3061
      ]
    },
    {
      "pos": [
        3247,
        3336
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Use all of the previous code in front of the code in the following sections."
    },
    {
      "pos": [
        3341,
        3431
      ],
      "content": "Get a <ph id=\"ph1\">`CloudBlobClient`</ph> object to reference an existing container in your storage account."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Some of the APIs that perform calls out to Azure Storage in ASP.NET 5 are asynchronous.",
      "pos": [
        3698,
        3798
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Asynchronous Programming with Async and Await<ept id=\"p1\">](http://msdn.microsoft.com/library/hh191443.aspx)</ept> for more information.",
      "pos": [
        3799,
        3921
      ]
    },
    {
      "content": "Create a blob container in code",
      "pos": [
        3927,
        3958
      ]
    },
    {
      "content": "You can also use the <ph id=\"ph1\">`CloudBlobClient`</ph> object to create a container in your storage account.",
      "pos": [
        3960,
        4052
      ]
    },
    {
      "content": "All you need to do is add a call to <ph id=\"ph1\">`CreateIfNotExistsAsync`</ph> to the above code as shown in the following example.",
      "pos": [
        4053,
        4166
      ]
    },
    {
      "content": "Upload a blob into a container",
      "pos": [
        4268,
        4298
      ]
    },
    {
      "content": "Azure Blob storage supports block blobs and page blobs.",
      "pos": [
        4300,
        4355
      ]
    },
    {
      "content": "In the majority of cases, block blob is the recommended type to use.",
      "pos": [
        4357,
        4425
      ]
    },
    {
      "content": "To upload a file to a block blob, get a container reference and use it to get",
      "pos": [
        4427,
        4504
      ]
    },
    {
      "content": "a block blob reference.",
      "pos": [
        4505,
        4528
      ]
    },
    {
      "content": "Once you have a blob reference, you can upload any",
      "pos": [
        4529,
        4579
      ]
    },
    {
      "content": "stream of data to it by calling the <ph id=\"ph1\">`UploadFromStream`</ph> method.",
      "pos": [
        4580,
        4642
      ]
    },
    {
      "content": "This operation will create the blob if it didn't previously exist,",
      "pos": [
        4643,
        4709
      ]
    },
    {
      "content": "or overwrite it if it does exist.",
      "pos": [
        4710,
        4743
      ]
    },
    {
      "content": "The following example shows how to upload a blob into a container and assumes that the container was already created.",
      "pos": [
        4744,
        4861
      ]
    },
    {
      "content": "List the blobs in a container",
      "pos": [
        5175,
        5204
      ]
    },
    {
      "content": "To list the blobs in a container, use the <ph id=\"ph1\">`ListBlobs`</ph> method to retrieve the blobs and/or directories",
      "pos": [
        5206,
        5307
      ]
    },
    {
      "content": "within it.",
      "pos": [
        5308,
        5318
      ]
    },
    {
      "content": "To access the rich set of properties and methods for a",
      "pos": [
        5319,
        5373
      ]
    },
    {
      "content": "returned <ph id=\"ph1\">`IListBlobItem`</ph>, you must cast it to a <ph id=\"ph2\">`CloudBlockBlob`</ph>,",
      "pos": [
        5374,
        5439
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CloudPageBlob`</ph>, or <ph id=\"ph2\">`CloudBlobDirectory`</ph> object.",
      "pos": [
        5440,
        5488
      ]
    },
    {
      "content": "If the type is unknown, you can use a",
      "pos": [
        5490,
        5527
      ]
    },
    {
      "content": "type check to determine which to cast it to.",
      "pos": [
        5528,
        5572
      ]
    },
    {
      "content": "The following code",
      "pos": [
        5574,
        5592
      ]
    },
    {
      "content": "demonstrates how to retrieve and output the URI of each item in",
      "pos": [
        5593,
        5656
      ]
    },
    {
      "content": "the <ph id=\"ph1\">`photos`</ph> container.",
      "pos": [
        5657,
        5680
      ]
    },
    {
      "content": "As shown in the previous example, the blob service has the concept of directories within containers, as",
      "pos": [
        6630,
        6733
      ]
    },
    {
      "content": "well.",
      "pos": [
        6734,
        6739
      ]
    },
    {
      "content": "This is so that you can organize your blobs in a more folder-like",
      "pos": [
        6740,
        6805
      ]
    },
    {
      "content": "structure.",
      "pos": [
        6806,
        6816
      ]
    },
    {
      "content": "For example, consider the following set of block blobs in a container",
      "pos": [
        6817,
        6886
      ]
    },
    {
      "content": "named <ph id=\"ph1\">`photos`</ph>.",
      "pos": [
        6887,
        6902
      ]
    },
    {
      "content": "When you call <ph id=\"ph1\">`ListBlobs`</ph> on the 'photos' container (as shown in the previous example), the collection returned",
      "pos": [
        7148,
        7259
      ]
    },
    {
      "content": "will contain <ph id=\"ph1\">`CloudBlobDirectory`</ph> and <ph id=\"ph2\">`CloudBlockBlob`</ph> objects",
      "pos": [
        7260,
        7322
      ]
    },
    {
      "content": "representing the directories and blobs contained at the top level.",
      "pos": [
        7323,
        7389
      ]
    },
    {
      "content": "The following example shows the resulting output.",
      "pos": [
        7390,
        7439
      ]
    },
    {
      "content": "Optionally, you can set the <ph id=\"ph1\">`UseFlatBlobListing`</ph> parameter of of the <ph id=\"ph2\">`ListBlobs`</ph> method to",
      "pos": [
        7682,
        7772
      ]
    },
    {
      "content": "<ph id=\"ph1\">`true`</ph>.",
      "pos": [
        7773,
        7780
      ]
    },
    {
      "content": "This would result in every blob being returned as a <ph id=\"ph1\">`CloudBlockBlob`</ph>, regardless of directory.",
      "pos": [
        7781,
        7875
      ]
    },
    {
      "content": "The following example shows the call to <ph id=\"ph1\">`ListBlobs`</ph>.",
      "pos": [
        7877,
        7929
      ]
    },
    {
      "content": "And the next example shows the results.",
      "pos": [
        8098,
        8137
      ]
    },
    {
      "content": "Download blobs",
      "pos": [
        9018,
        9032
      ]
    },
    {
      "content": "To download blobs, use the <ph id=\"ph1\">`DownloadToStream`</ph> method.",
      "pos": [
        9034,
        9087
      ]
    },
    {
      "content": "The following",
      "pos": [
        9088,
        9101
      ]
    },
    {
      "content": "example uses the <ph id=\"ph1\">`DownloadToStream`</ph> method to transfer the blob",
      "pos": [
        9102,
        9165
      ]
    },
    {
      "content": "contents to a stream object that you can then persist to a local file.",
      "pos": [
        9166,
        9236
      ]
    },
    {
      "pos": [
        9643,
        9742
      ],
      "content": "You can also use the <ph id=\"ph1\">`DownloadToStream`</ph> method to download the contents of a blob as a text string."
    },
    {
      "content": "Delete blobs",
      "pos": [
        10191,
        10203
      ]
    },
    {
      "pos": [
        10205,
        10247
      ],
      "content": "To delete a blob, use the <ph id=\"ph1\">`Delete`</ph> method."
    },
    {
      "content": "List blobs in pages asynchronously",
      "pos": [
        10537,
        10571
      ]
    },
    {
      "content": "If you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results.",
      "pos": [
        10573,
        10738
      ]
    },
    {
      "content": "The following example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.",
      "pos": [
        10739,
        10894
      ]
    },
    {
      "pos": [
        10896,
        11082
      ],
      "content": "This example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the <ph id=\"ph1\">`useFlatBlobListing`</ph> parameter of the <ph id=\"ph2\">`ListBlobsSegmentedAsync`</ph> method to <ph id=\"ph3\">`false`</ph>."
    },
    {
      "content": "Because the sample method calls an asynchronous method, it must be prefaced with the <ph id=\"ph1\">`async`</ph> keyword, and it must return a <ph id=\"ph2\">`Task`</ph> object.",
      "pos": [
        11084,
        11221
      ]
    },
    {
      "content": "The await keyword specified for the <ph id=\"ph1\">`ListBlobsSegmentedAsync`</ph> method suspends execution of the sample method until the listing task is complete.",
      "pos": [
        11222,
        11366
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        12762,
        12772
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Getting started with Azure Blob storage and Visual Studio connected services\"\n    description=\"How to get started using Azure Blob storage in an ASP.NET project in Visual Studio\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"patshea123\"\n    manager=\"douge\"\n    editor=\"tglee\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"web\"\n    ms.tgt_pltfrm=\"vs-getting-started\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/04/2015\"\n    ms.author=\"patshea123\"/>\n\n# Getting started with Azure Blob storage and Visual Studio connected services\n\n> [AZURE.SELECTOR]\n> - [Getting started](vs-storage-aspnet-getting-started-blobs.md)\n> - [What happened](vs-storage-aspnet-what-happened.md)\n\n> [AZURE.SELECTOR]\n> - [Blobs](vs-storage-aspnet-getting-started-blobs.md)\n> - [Queues](vs-storage-aspnet-getting-started-queues.md)\n> - [Tables](vs-storage-aspnet-getting-started-tables.md)\n\n## Overview\n\nThis article describes how to get started using Azure Blob storage after you have created or referenced an Azure storage account in an ASP.NET app by using the  Visual Studio **Add Connected Services** dialog box. The article shows you how to create blob containers and perform other common tasks such as uploading, listing, downloading, and deleting blobs. The samples are written in C\\# and\nuse the [Azure Storage Client Library for .NET](https://msdn.microsoft.com/library/azure/dn261237.aspx). \n\n - For more general information about using Azure Blob storage, see [How to use Blob storage from .NET](storage-dotnet-how-to-use-blobs.md). \n - For more information about ASP.NET projects, see [ASP.NET](http://www.asp.net).\n\n\nAzure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS. A single blob can be any size. Blobs can be things like images, audio and video files, raw data, and document files.\n\nJust as files live in folders, storage blobs live in containers. After you have created a storage account, you create one or more containers in the storage. For example, in a storage called “Scrapbook,” you can create blob containers in the storage called “images” to store pictures and another called “audio” to store audio files. After you create the containers, you can upload individual blob files to them.\n\n\n\n\n##Access blob containers in code\n\nTo programmatically access blobs in ASP.NET projects, you need to add the following items, if they're not already present.\n\n1. Add the following code namespace declarations to the top of any C# file in which you wish to programmatically access Azure Storage.\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Auth;\n        using Microsoft.WindowsAzure.Storage.Blob;\n\n\n2. Get a `CloudStorageAccount` object that represents your storage account information. Use the following code to get the your storage connection string and storage account information from the Azure service configuration.\n\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n    > [AZURE.NOTE] Use all of the previous code in front of the code in the following sections.\n\n3. Get a `CloudBlobClient` object to reference an existing container in your storage account.\n\n        // Create a blob client.\n        CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n        // Get a reference to a container named “mycontainer.”\n        CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n> [AZURE.NOTE] Some of the APIs that perform calls out to Azure Storage in ASP.NET 5 are asynchronous. See [Asynchronous Programming with Async and Await](http://msdn.microsoft.com/library/hh191443.aspx) for more information.\n\n\n## Create a blob container in code\n\nYou can also use the `CloudBlobClient` object to create a container in your storage account. All you need to do is add a call to `CreateIfNotExistsAsync` to the above code as shown in the following example.\n\n    // If “mycontainer” doesn’t exist, create it.\n    await container.CreateIfNotExistsAsync();\n\n## Upload a blob into a container\n\nAzure Blob storage supports block blobs and page blobs.  In the majority of cases, block blob is the recommended type to use.\n\nTo upload a file to a block blob, get a container reference and use it to get\na block blob reference. Once you have a blob reference, you can upload any\nstream of data to it by calling the `UploadFromStream` method. This operation will create the blob if it didn't previously exist,\nor overwrite it if it does exist. The following example shows how to upload a blob into a container and assumes that the container was already created.\n\n    // Get a CloudBlobContainer named 'container' as described in \"Access blob containers in code.\"\n\n    // Create or overwrite the \"myblob\" blob with contents from a local file.\n    using (var fileStream = System.IO.File.OpenRead(@\"path\\myfile\"))\n    {\n        blockBlob.UploadFromStream(fileStream);\n    }\n\n## List the blobs in a container\n\nTo list the blobs in a container, use the `ListBlobs` method to retrieve the blobs and/or directories\nwithin it. To access the rich set of properties and methods for a\nreturned `IListBlobItem`, you must cast it to a `CloudBlockBlob`,\n`CloudPageBlob`, or `CloudBlobDirectory` object.  If the type is unknown, you can use a\ntype check to determine which to cast it to.  The following code\ndemonstrates how to retrieve and output the URI of each item in\nthe `photos` container.\n\n    // Get a CloudBlobContainer named 'container' as described in \"Access blob containers in code.\"\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, false))\n    {\n        if (item.GetType() == typeof(CloudBlockBlob))\n        {\n            CloudBlockBlob blob = (CloudBlockBlob)item;\n\n            Console.WriteLine(\"Block blob of length {0}: {1}\", blob.Properties.Length, blob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudPageBlob))\n        {\n            CloudPageBlob pageBlob = (CloudPageBlob)item;\n\n            Console.WriteLine(\"Page blob of length {0}: {1}\", pageBlob.Properties.Length, pageBlob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudBlobDirectory))\n        {\n            CloudBlobDirectory directory = (CloudBlobDirectory)item;\n\n            Console.WriteLine(\"Directory: {0}\", directory.Uri);\n        }\n    }\n\nAs shown in the previous example, the blob service has the concept of directories within containers, as\nwell. This is so that you can organize your blobs in a more folder-like\nstructure. For example, consider the following set of block blobs in a container\nnamed `photos`.\n\n    photo1.jpg\n    2010/architecture/description.txt\n    2010/architecture/photo3.jpg\n    2010/architecture/photo4.jpg\n    2011/architecture/photo5.jpg\n    2011/architecture/photo6.jpg\n    2011/architecture/description.txt\n    2011/photo7.jpg\n\nWhen you call `ListBlobs` on the 'photos' container (as shown in the previous example), the collection returned\nwill contain `CloudBlobDirectory` and `CloudBlockBlob` objects\nrepresenting the directories and blobs contained at the top level. The following example shows the resulting output.\n\n    Directory: https://<accountname>.blob.core.windows.net/photos/2010/\n    Directory: https://<accountname>.blob.core.windows.net/photos/2011/\n    Block blob of length 505623: https://<accountname>.blob.core.windows.net/photos/photo1.jpg\n\n\nOptionally, you can set the `UseFlatBlobListing` parameter of of the `ListBlobs` method to\n`true`. This would result in every blob being returned as a `CloudBlockBlob`, regardless of directory.  The following example shows the call to `ListBlobs`.\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, true))\n    {\n       ...\n    }\n\nAnd the next example shows the results.\n\n    Block blob of length 4: https://<accountname>.blob.core.windows.net/photos/2010/architecture/description.txt\n    Block blob of length 314618: https://<accountname>.blob.core.windows.net/photos/2010/architecture/photo3.jpg\n    Block blob of length 522713: https://<accountname>.blob.core.windows.net/photos/2010/architecture/photo4.jpg\n    Block blob of length 4: https://<accountname>.blob.core.windows.net/photos/2011/architecture/description.txt\n    Block blob of length 419048: https://<accountname>.blob.core.windows.net/photos/2011/architecture/photo5.jpg\n    Block blob of length 506388: https://<accountname>.blob.core.windows.net/photos/2011/architecture/photo6.jpg\n    Block blob of length 399751: https://<accountname>.blob.core.windows.net/photos/2011/photo7.jpg\n    Block blob of length 505623: https://<accountname>.blob.core.windows.net/photos/photo1.jpg\n\n\n\n## Download blobs\n\nTo download blobs, use the `DownloadToStream` method. The following\nexample uses the `DownloadToStream` method to transfer the blob\ncontents to a stream object that you can then persist to a local file.\n\n    // Get a CloudBlobContainer named 'container' as described in \"Access blob containers in code\"\n\n    // Retrieve a reference to a blob named \"photo1.jpg\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"photo1.jpg\");\n\n    // Save blob contents to a file.\n    using (var fileStream = System.IO.File.OpenWrite(@\"path\\myfile\"))\n    {\n        blockBlob.DownloadToStream(fileStream);\n    }\n\nYou can also use the `DownloadToStream` method to download the contents of a blob as a text string.\n\n    // Get a CloudBlobContainer named 'container' as described in \"Access blob containers in code\"\n\n    // Retrieve a reference to a blob named \"myblob.txt\"\n    CloudBlockBlob blockBlob2 = container.GetBlockBlobReference(\"myblob.txt\");\n\n    string text;\n    using (var memoryStream = new MemoryStream())\n    {\n        blockBlob2.DownloadToStream(memoryStream);\n        text = System.Text.Encoding.UTF8.GetString(memoryStream.ToArray());\n    }\n\n## Delete blobs\n\nTo delete a blob, use the `Delete` method.\n\n    // Get a CloudBlobContainer named 'container' as described in \"Access blob containers in code\"\n\n    // Retrieve reference to a blob named \"myblob.txt\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob.txt\");\n\n    // Delete the blob.\n    blockBlob.Delete();\n\n\n## List blobs in pages asynchronously\n\nIf you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results. The following example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.\n\nThis example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the `useFlatBlobListing` parameter of the `ListBlobsSegmentedAsync` method to `false`.\n\nBecause the sample method calls an asynchronous method, it must be prefaced with the `async` keyword, and it must return a `Task` object. The await keyword specified for the `ListBlobsSegmentedAsync` method suspends execution of the sample method until the listing task is complete.\n\n    async public static Task ListBlobsSegmentedInFlatListing(CloudBlobContainer container)\n    {\n        //List blobs to the console window, with paging.\n        Console.WriteLine(\"List blobs in pages:\");\n\n        int i = 0;\n        BlobContinuationToken continuationToken = null;\n        BlobResultSegment resultSegment = null;\n\n        //Call ListBlobsSegmentedAsync and enumerate the result segment returned, while the continuation token is non-null.\n        //When the continuation token is null, the last page has been returned and execution can exit the loop.\n        do\n        {\n            //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter,\n            //or by calling a different overload.\n            resultSegment = await container.ListBlobsSegmentedAsync(\"\", true, BlobListingDetails.All, 10, continuationToken, null, null);\n            if (resultSegment.Results.Count<IListBlobItem>() > 0) { Console.WriteLine(\"Page {0}:\", ++i); }\n            foreach (var blobItem in resultSegment.Results)\n            {\n                Console.WriteLine(\"\\t{0}\", blobItem.StorageUri.PrimaryUri);\n            }\n            Console.WriteLine();\n\n            //Get the continuation token.\n            continuationToken = resultSegment.ContinuationToken;\n        }\n        while (continuationToken != null);\n    }\n\n## Next steps\n\n[AZURE.INCLUDE [vs-storage-dotnet-blobs-next-steps](../../includes/vs-storage-dotnet-blobs-next-steps.md)]\n\n"
}