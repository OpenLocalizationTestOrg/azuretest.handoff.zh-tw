<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to delegate user registration and product subscription</source>
          <target state="new">How to delegate user registration and product subscription</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to delegate user registration and product subscription to a third party in Azure API Management.</source>
          <target state="new">Learn how to delegate user registration and product subscription to a third party in Azure API Management.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to delegate user registration and product subscription</source>
          <target state="new">How to delegate user registration and product subscription</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Delegation allows you to use your existing website for handling developer sign-in/sign-up and subscription to products as opposed to using the built-in functionality in the developer portal.</source>
          <target state="new">Delegation allows you to use your existing website for handling developer sign-in/sign-up and subscription to products as opposed to using the built-in functionality in the developer portal.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This enables your website to own the user data and perform the validation of these steps in a custom way.</source>
          <target state="new">This enables your website to own the user data and perform the validation of these steps in a custom way.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="delegate-signin-up"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Delegating developer sign-in and sign-up</source>
          <target state="new"><ph id="ph1">&lt;a name="delegate-signin-up"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Delegating developer sign-in and sign-up</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To delegate developer sign-in and sign-up to your existing website you will need to create a special delegation endpoint on your site that acts as the entry-point for any such request initiated from the API Management developer portal.</source>
          <target state="new">To delegate developer sign-in and sign-up to your existing website you will need to create a special delegation endpoint on your site that acts as the entry-point for any such request initiated from the API Management developer portal.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The final workflow will be as follows:</source>
          <target state="new">The final workflow will be as follows:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Developer clicks on the sign-in or sign-up link at the API Management developer portal</source>
          <target state="new">Developer clicks on the sign-in or sign-up link at the API Management developer portal</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Browser is redirected to the delegation endpoint</source>
          <target state="new">Browser is redirected to the delegation endpoint</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Delegation endpoint in return redirects to or presents UI asking user to sign-in or sign-up</source>
          <target state="new">Delegation endpoint in return redirects to or presents UI asking user to sign-in or sign-up</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>On success, the user is redirected back to the API Management developer portal page they started from</source>
          <target state="new">On success, the user is redirected back to the API Management developer portal page they started from</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To begin, let's first set-up API Management to route requests via your delegation endpoint.</source>
          <target state="new">To begin, let's first set-up API Management to route requests via your delegation endpoint.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the API Management publisher portal, click on <bpt id="p1">**</bpt>Security<ept id="p1">**</ept> and then click the <bpt id="p2">**</bpt>Delegation<ept id="p2">**</ept> tab.</source>
          <target state="new">In the API Management publisher portal, click on <bpt id="p1">**</bpt>Security<ept id="p1">**</ept> and then click the <bpt id="p2">**</bpt>Delegation<ept id="p2">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Click the checkbox to enable 'Delegate sign-in &amp; sign-up'.</source>
          <target state="new">Click the checkbox to enable 'Delegate sign-in &amp; sign-up'.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Delegation page</source>
          <target state="new">Delegation page</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Decide what the URL of your special delegation endpoint will be and enter it in the <bpt id="p1">**</bpt>Delegation endpoint URL<ept id="p1">**</ept> field.</source>
          <target state="new">Decide what the URL of your special delegation endpoint will be and enter it in the <bpt id="p1">**</bpt>Delegation endpoint URL<ept id="p1">**</ept> field.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Within the <bpt id="p1">**</bpt>Delegation authentication key<ept id="p1">**</ept> field enter a secret that will be used to compute a signature provided to you for verification to ensure that the request is indeed coming from Azure API Management.</source>
          <target state="new">Within the <bpt id="p1">**</bpt>Delegation authentication key<ept id="p1">**</ept> field enter a secret that will be used to compute a signature provided to you for verification to ensure that the request is indeed coming from Azure API Management.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can click the <bpt id="p1">**</bpt>generate<ept id="p1">**</ept> button to have API Managemnet randomly generate a key for you.</source>
          <target state="new">You can click the <bpt id="p1">**</bpt>generate<ept id="p1">**</ept> button to have API Managemnet randomly generate a key for you.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Now you need to create the <bpt id="p1">**</bpt>delegation endpoint<ept id="p1">**</ept>.</source>
          <target state="new">Now you need to create the <bpt id="p1">**</bpt>delegation endpoint<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It has to perform a number of actions:</source>
          <target state="new">It has to perform a number of actions:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Receive a request in the following form:</source>
          <target state="new">Receive a request in the following form:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>http://www.yourwebsite.com/apimdelegation?operation=SignIn&amp;returnUrl={URL of source page}&amp;salt={string}&amp;sig={string}</source>
          <target state="new">http://www.yourwebsite.com/apimdelegation?operation=SignIn&amp;returnUrl={URL of source page}&amp;salt={string}&amp;sig={string}</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Query parameters for the sign-in / sign-up case:</source>
          <target state="new">Query parameters for the sign-in / sign-up case:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is - it can only be <bpt id="p2">**</bpt>SignIn<ept id="p2">**</ept> in this case</source>
          <target state="new"><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is - it can only be <bpt id="p2">**</bpt>SignIn<ept id="p2">**</ept> in this case</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept>: the URL of the page where the user clicked on a sign-in or sign-up link</source>
          <target state="new"><bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept>: the URL of the page where the user clicked on a sign-in or sign-up link</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</source>
          <target state="new"><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</source>
          <target state="new"><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Verify that the request is coming from Azure API Management (optional, but highly recommended for security)</source>
          <target state="new">Verify that the request is coming from Azure API Management (optional, but highly recommended for security)</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compute an HMAC-SHA512 hash of a string based on the <bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept> and <bpt id="p2">**</bpt>salt<ept id="p2">**</ept> query parameters (<bpt id="p3">[</bpt><ept id="p3">example code provided below]</ept>):</source>
          <target state="new">Compute an HMAC-SHA512 hash of a string based on the <bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept> and <bpt id="p2">**</bpt>salt<ept id="p2">**</ept> query parameters (<bpt id="p3">[</bpt><ept id="p3">example code provided below]</ept>):</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>HMAC(<bpt id="p1">**</bpt>salt<ept id="p1">**</ept> + '\n' + <bpt id="p2">**</bpt>returnUrl<ept id="p2">**</ept>)</source>
          <target state="new">HMAC(<bpt id="p1">**</bpt>salt<ept id="p1">**</ept> + '\n' + <bpt id="p2">**</bpt>returnUrl<ept id="p2">**</ept>)</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Compare the above-computed hash to the value of the <bpt id="p1">**</bpt>sig<ept id="p1">**</ept> query parameter.</source>
          <target state="new">Compare the above-computed hash to the value of the <bpt id="p1">**</bpt>sig<ept id="p1">**</ept> query parameter.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the two hashes match, move on to the next step, otherwise deny the request.</source>
          <target state="new">If the two hashes match, move on to the next step, otherwise deny the request.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Verify that you are receiving a request for sign-in/sign-up: the <bpt id="p1">**</bpt>operation<ept id="p1">**</ept> query parameter will be set to "<bpt id="p2">**</bpt>SignIn<ept id="p2">**</ept>".</source>
          <target state="new">Verify that you are receiving a request for sign-in/sign-up: the <bpt id="p1">**</bpt>operation<ept id="p1">**</ept> query parameter will be set to "<bpt id="p2">**</bpt>SignIn<ept id="p2">**</ept>".</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Present the user with UI to sign-in or sign-up</source>
          <target state="new">Present the user with UI to sign-in or sign-up</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the user is signing-up you have to create a corresponding account for them in API Management.</source>
          <target state="new">If the user is signing-up you have to create a corresponding account for them in API Management.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ept id="p1">Create a user]</ept> with the API Management REST API.</source>
          <target state="new"><bpt id="p1">[</bpt><ept id="p1">Create a user]</ept> with the API Management REST API.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When doing so, ensure that you set the user ID to the same it is in your user store or to an ID that you can keep track of.</source>
          <target state="new">When doing so, ensure that you set the user ID to the same it is in your user store or to an ID that you can keep track of.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the user is successfully authenticated:</source>
          <target state="new">When the user is successfully authenticated:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ept id="p1">request a single-sign-on (SSO) token]</ept> via the API Management REST API</source>
          <target state="new"><bpt id="p1">[</bpt><ept id="p1">request a single-sign-on (SSO) token]</ept> via the API Management REST API</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>append a returnUrl query parameter to the SSO URL you have received from the API call above:</source>
          <target state="new">append a returnUrl query parameter to the SSO URL you have received from the API call above:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>e.g. https://customer.portal.azure-api.net/signin-sso?token&amp;returnUrl=/return/url</source>
          <target state="new">e.g. https://customer.portal.azure-api.net/signin-sso?token&amp;returnUrl=/return/url</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>redirect the user to the above produced URL</source>
          <target state="new">redirect the user to the above produced URL</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In addition to the <bpt id="p1">**</bpt>SignIn<ept id="p1">**</ept> operation, you can also perform account management by following the previous steps and using one of the following operations.</source>
          <target state="new">In addition to the <bpt id="p1">**</bpt>SignIn<ept id="p1">**</ept> operation, you can also perform account management by following the previous steps and using one of the following operations.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ChangePassword</source>
          <target state="new">ChangePassword</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ChangeProfile</source>
          <target state="new">ChangeProfile</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CloseAccount</source>
          <target state="new">CloseAccount</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You must pass the following query parameters for account management operations.</source>
          <target state="new">You must pass the following query parameters for account management operations.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is (ChangePassword, ChangeProfile, or CloseAccount)</source>
          <target state="new"><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is (ChangePassword, ChangeProfile, or CloseAccount)</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>userId<ept id="p1">**</ept>: the user id of the account to manage</source>
          <target state="new"><bpt id="p1">**</bpt>userId<ept id="p1">**</ept>: the user id of the account to manage</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</source>
          <target state="new"><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</source>
          <target state="new"><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="delegate-product-subscription"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Delegating product subscription</source>
          <target state="new"><ph id="ph1">&lt;a name="delegate-product-subscription"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Delegating product subscription</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Delegating product subscription works similarly to delegating user sign-in/-up.</source>
          <target state="new">Delegating product subscription works similarly to delegating user sign-in/-up.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The final workflow would be as follows:</source>
          <target state="new">The final workflow would be as follows:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Developer selects a product in the API Management developer portal and clicks on the Subscribe button</source>
          <target state="new">Developer selects a product in the API Management developer portal and clicks on the Subscribe button</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Browser is redirected to the delegation endpoint</source>
          <target state="new">Browser is redirected to the delegation endpoint</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Delegation endpoint performs required product subscription steps - this is up to you and may entail redirecting to another page to request billing information, asking additional questions, or simply storing the information and not requiring any user action</source>
          <target state="new">Delegation endpoint performs required product subscription steps - this is up to you and may entail redirecting to another page to request billing information, asking additional questions, or simply storing the information and not requiring any user action</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>On success, the user is redirected back to the API Management developer portal page they started from</source>
          <target state="new">On success, the user is redirected back to the API Management developer portal page they started from</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To enable the functionality, on the <bpt id="p1">**</bpt>Delegation<ept id="p1">**</ept> page click <bpt id="p2">**</bpt>Delegate product subscription<ept id="p2">**</ept>.</source>
          <target state="new">To enable the functionality, on the <bpt id="p1">**</bpt>Delegation<ept id="p1">**</ept> page click <bpt id="p2">**</bpt>Delegate product subscription<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Then ensure the delegation endpoint performs the following actions:</source>
          <target state="new">Then ensure the delegation endpoint performs the following actions:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Receive a request in the following form:</source>
          <target state="new">Receive a request in the following form:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>http://www.yourwebsite.com/apimdelegation?operation={operation}&amp;productId={product to subscribe to}&amp;userId={user making request}&amp;salt={string}&amp;sig={string}</source>
          <target state="new">http://www.yourwebsite.com/apimdelegation?operation={operation}&amp;productId={product to subscribe to}&amp;userId={user making request}&amp;salt={string}&amp;sig={string}</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Query parameters for the product subscription case:</source>
          <target state="new">Query parameters for the product subscription case:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is.</source>
          <target state="new"><bpt id="p1">**</bpt>operation<ept id="p1">**</ept>: identifies what type of delegation request it is.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For product subscription requests the valid options are:</source>
          <target state="new">For product subscription requests the valid options are:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>"Subscribe": a request to subscribe the user to a given product with provided ID (see below)</source>
          <target state="new">"Subscribe": a request to subscribe the user to a given product with provided ID (see below)</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>"Unsubscribe": a request to unsubscribe a user from a product</source>
          <target state="new">"Unsubscribe": a request to unsubscribe a user from a product</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>"Renew": a requst to renew a subscription (e.g. that may be expiring)</source>
          <target state="new">"Renew": a requst to renew a subscription (e.g. that may be expiring)</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>productId<ept id="p1">**</ept>: the ID of the product the user requested to subscribe to</source>
          <target state="new"><bpt id="p1">**</bpt>productId<ept id="p1">**</ept>: the ID of the product the user requested to subscribe to</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>userId<ept id="p1">**</ept>: the ID of the user for whom the request is made</source>
          <target state="new"><bpt id="p1">**</bpt>userId<ept id="p1">**</ept>: the ID of the user for whom the request is made</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</source>
          <target state="new"><bpt id="p1">**</bpt>salt<ept id="p1">**</ept>: a special salt string used for computing a security hash</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</source>
          <target state="new"><bpt id="p1">**</bpt>sig<ept id="p1">**</ept>: a computed security hash to be used for comparison to your own computed hash</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Verify that the request is coming from Azure API Management (optional, but highly recommended for security)</source>
          <target state="new">Verify that the request is coming from Azure API Management (optional, but highly recommended for security)</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Compute an HMAC-SHA512 of a string based on the <bpt id="p1">**</bpt>productId<ept id="p1">**</ept>, <bpt id="p2">**</bpt>userId<ept id="p2">**</ept> and <bpt id="p3">**</bpt>salt<ept id="p3">**</ept> query parameters:</source>
          <target state="new">Compute an HMAC-SHA512 of a string based on the <bpt id="p1">**</bpt>productId<ept id="p1">**</ept>, <bpt id="p2">**</bpt>userId<ept id="p2">**</ept> and <bpt id="p3">**</bpt>salt<ept id="p3">**</ept> query parameters:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>HMAC(<bpt id="p1">**</bpt>salt<ept id="p1">**</ept> + '\n' + <bpt id="p2">**</bpt>productId<ept id="p2">**</ept> + '\n' + <bpt id="p3">**</bpt>userId<ept id="p3">**</ept>)</source>
          <target state="new">HMAC(<bpt id="p1">**</bpt>salt<ept id="p1">**</ept> + '\n' + <bpt id="p2">**</bpt>productId<ept id="p2">**</ept> + '\n' + <bpt id="p3">**</bpt>userId<ept id="p3">**</ept>)</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Compare the above-computed hash to the value of the <bpt id="p1">**</bpt>sig<ept id="p1">**</ept> query parameter.</source>
          <target state="new">Compare the above-computed hash to the value of the <bpt id="p1">**</bpt>sig<ept id="p1">**</ept> query parameter.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the two hashes match, move on to the next step, otherwise deny the request.</source>
          <target state="new">If the two hashes match, move on to the next step, otherwise deny the request.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Perform any product subscription processing based on the type of operation requested in <bpt id="p1">**</bpt>operation<ept id="p1">**</ept> - e.g. billing, further questions, etc.</source>
          <target state="new">Perform any product subscription processing based on the type of operation requested in <bpt id="p1">**</bpt>operation<ept id="p1">**</ept> - e.g. billing, further questions, etc.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>On successfully subscribing the user to the product on your side, subscribe the user to the API Management product by <bpt id="p1">[</bpt><ept id="p1">calling the REST API for product subscription]</ept>.</source>
          <target state="new">On successfully subscribing the user to the product on your side, subscribe the user to the API Management product by <bpt id="p1">[</bpt><ept id="p1">calling the REST API for product subscription]</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Redirect the user back to the <bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept> provided when receiving the request.</source>
          <target state="new">Redirect the user back to the <bpt id="p1">**</bpt>returnUrl<ept id="p1">**</ept> provided when receiving the request.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="delegate-example-code"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph> Example Code</source>
          <target state="new"><ph id="ph1">&lt;a name="delegate-example-code"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph> Example Code</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>These code samples show how to take the <bpt id="p1">*</bpt>delegation validation key<ept id="p1">*</ept>, which is set in the Delegation screen of the API Management portal, to create a HMAC which is then used to validate the signature, proving the validity of the passed returnUrl.</source>
          <target state="new">These code samples show how to take the <bpt id="p1">*</bpt>delegation validation key<ept id="p1">*</ept>, which is set in the Delegation screen of the API Management portal, to create a HMAC which is then used to validate the signature, proving the validity of the passed returnUrl.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The same code works for the productId and userId with slight modification.</source>
          <target state="new">The same code works for the productId and userId with slight modification.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>C# code to generate hash of returnUrl</source>
          <target state="new">C# code to generate hash of returnUrl</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>NodeJS code to generate hash of returnUrl</source>
          <target state="new">NodeJS code to generate hash of returnUrl</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information on delegation, see the following video.</source>
          <target state="new">For more information on delegation, see the following video.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b01d13cc3dd76f60dd56f6452e41fd4ce055a96f</xliffext:olfilehash>
  </header>
</xliff>