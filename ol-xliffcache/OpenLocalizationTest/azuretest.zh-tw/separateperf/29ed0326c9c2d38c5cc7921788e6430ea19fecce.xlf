<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scalability of Service Fabric Services</source>
          <target state="new">Scalability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes how to scale Service Fabric services</source>
          <target state="new">Describes how to scale Service Fabric services</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Scaling Service Fabric Applications</source>
          <target state="new">Scaling Service Fabric Applications</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric makes it easy to build scalable applications by load balancing services, partitions and replicas on all the nodes in a cluster.</source>
          <target state="new">Service Fabric makes it easy to build scalable applications by load balancing services, partitions and replicas on all the nodes in a cluster.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This enables maximum resource utilization.</source>
          <target state="new">This enables maximum resource utilization.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>High Scale for Service Fabric Applications can be achieved in two ways:</source>
          <target state="new">High Scale for Service Fabric Applications can be achieved in two ways:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Scaling at the partition level</source>
          <target state="new">Scaling at the partition level</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Scaling at the service name level</source>
          <target state="new">Scaling at the service name level</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Scaling at the partition level</source>
          <target state="new">Scaling at the partition level</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Service Fabric supports partitioning an individual service into multiple smaller partitions.</source>
          <target state="new">Service Fabric supports partitioning an individual service into multiple smaller partitions.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Partitioning overview<ept id="p1">](service-fabric-concepts-partitioning.md)</ept> provides information on the types of partitioning schemes that are supported.</source>
          <target state="new">The <bpt id="p1">[</bpt>Partitioning overview<ept id="p1">](service-fabric-concepts-partitioning.md)</ept> provides information on the types of partitioning schemes that are supported.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The replicas of each partition are spread across the nodes in the cluster.</source>
          <target state="new">The replicas of each partition are spread across the nodes in the cluster.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Consider a service using the ranged partitioning scheme with a low key of 0, high key of 99 and 4 partitions.</source>
          <target state="new">Consider a service using the ranged partitioning scheme with a low key of 0, high key of 99 and 4 partitions.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In a 3 node cluster, the service might be laid out with four replicas sharing the resources on each node as shown below.</source>
          <target state="new">In a 3 node cluster, the service might be laid out with four replicas sharing the resources on each node as shown below.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Partition Layout With Three Nodes</source>
          <target state="new">Partition Layout With Three Nodes</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Increasing the number of nodes will allow Service Fabric to utilize the resources on the new nodes by moving some of the replicas to empty nodes.</source>
          <target state="new">Increasing the number of nodes will allow Service Fabric to utilize the resources on the new nodes by moving some of the replicas to empty nodes.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Thus, increasing the number of nodes to four will now have three replicas running on each node (of different partitions) allowing for better resource utilization and performance.</source>
          <target state="new">Thus, increasing the number of nodes to four will now have three replicas running on each node (of different partitions) allowing for better resource utilization and performance.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Partition Layout With Four Nodes</source>
          <target state="new">Partition Layout With Four Nodes</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Scaling at the service name level</source>
          <target state="new">Scaling at the service name level</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A service instance is a specific named instance of an application name and a service type name (see <bpt id="p1">[</bpt>Service Fabric Application Lifecycle<ept id="p1">](service-fabric-application-lifecycle.md)</ept>).</source>
          <target state="new">A service instance is a specific named instance of an application name and a service type name (see <bpt id="p1">[</bpt>Service Fabric Application Lifecycle<ept id="p1">](service-fabric-application-lifecycle.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is during service creation that you specify the partition scheme (<bpt id="p1">[</bpt>Partitioning Service Fabric Services<ept id="p1">](service-fabric-concepts-partitioning.md)</ept>) to be used.</source>
          <target state="new">It is during service creation that you specify the partition scheme (<bpt id="p1">[</bpt>Partitioning Service Fabric Services<ept id="p1">](service-fabric-concepts-partitioning.md)</ept>) to be used.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first level of scaling is by service names.</source>
          <target state="new">The first level of scaling is by service names.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can create new instances of a service, with a different level of partitioning, as your older service instances become busy.</source>
          <target state="new">You can create new instances of a service, with a different level of partitioning, as your older service instances become busy.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This allows new service consumers to use less busy service instances in favor of busier ones.</source>
          <target state="new">This allows new service consumers to use less busy service instances in favor of busier ones.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An option to increase capacity, or to increase or decrease partition counts, is to create a new service instance with a new partition scheme.</source>
          <target state="new">An option to increase capacity, or to increase or decrease partition counts, is to create a new service instance with a new partition scheme.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The complexity is that any consuming clients need to know when and how to use a differently named service.</source>
          <target state="new">The complexity is that any consuming clients need to know when and how to use a differently named service.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example Scenario – Embedded Dates</source>
          <target state="new">Example Scenario – Embedded Dates</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One possible scenario would be to use date information as part of the service name.</source>
          <target state="new">One possible scenario would be to use date information as part of the service name.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, you could use service instance with a specific name for all customers that joined in 2013 and a another name for customers that joined in 2014.</source>
          <target state="new">For example, you could use service instance with a specific name for all customers that joined in 2013 and a another name for customers that joined in 2014.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This naming scheme allows for programmatic increase in names depending on the date (as 2014 approaches, the service instance for 2014 can be created on demand).</source>
          <target state="new">This naming scheme allows for programmatic increase in names depending on the date (as 2014 approaches, the service instance for 2014 can be created on demand).</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, this approach is based on the clients using application specific naming information that is outside of the scope of Service Fabric knowledge.</source>
          <target state="new">However, this approach is based on the clients using application specific naming information that is outside of the scope of Service Fabric knowledge.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Using a Naming Convention<ept id="p1">*</ept>: In 2013 when your application goes live you create one service called fabric:/app/service2013.</source>
          <target state="new"><bpt id="p1">*</bpt>Using a Naming Convention<ept id="p1">*</ept>: In 2013 when your application goes live you create one service called fabric:/app/service2013.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Towards the second quarter of 2013 you create another service called fabric:/app/service2014.</source>
          <target state="new">Towards the second quarter of 2013 you create another service called fabric:/app/service2014.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both these services are of the same service type.</source>
          <target state="new">Both these services are of the same service type.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this approach, your client will have to have logic on constructing the appropriate service name based on the year.</source>
          <target state="new">In this approach, your client will have to have logic on constructing the appropriate service name based on the year.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Using a Lookup Service<ept id="p1">*</ept>: Another pattern is to provide a secondary “lookup service” which can provide the name of the service for a desired key.</source>
          <target state="new"><bpt id="p1">*</bpt>Using a Lookup Service<ept id="p1">*</ept>: Another pattern is to provide a secondary “lookup service” which can provide the name of the service for a desired key.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>New service instances can then be created by the lookup service.</source>
          <target state="new">New service instances can then be created by the lookup service.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The lookup service itself does not retain any application data, but only data about the service names that it creates.</source>
          <target state="new">The lookup service itself does not retain any application data, but only data about the service names that it creates.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Thus in same year based example above the client would first contact the lookup service to find out the name of the service handling data for a given year and then use that service name for performing the actual operation.</source>
          <target state="new">Thus in same year based example above the client would first contact the lookup service to find out the name of the service handling data for a given year and then use that service name for performing the actual operation.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The result of the first lookup can be cached.</source>
          <target state="new">The result of the first lookup can be cached.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For information on Service Fabric concepts, see the following:</source>
          <target state="new">For information on Service Fabric concepts, see the following:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric Services</source>
          <target state="new">Availability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Partitioning Service Fabric Services</source>
          <target state="new">Partitioning Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Defining and Managing State</source>
          <target state="new">Defining and Managing State</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29ed0326c9c2d38c5cc7921788e6430ea19fecce</xliffext:olfilehash>
  </header>
</xliff>