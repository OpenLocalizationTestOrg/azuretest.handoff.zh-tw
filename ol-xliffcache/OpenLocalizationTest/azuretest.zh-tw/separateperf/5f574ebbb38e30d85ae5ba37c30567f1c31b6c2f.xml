{
  "nodes": [
    {
      "content": "Send messages to Event Hubs",
      "pos": [
        3,
        30
      ]
    },
    {
      "content": "In this section we will write a Java console app to send events to your Event Hub.",
      "pos": [
        31,
        113
      ]
    },
    {
      "content": "We will make use of the JMS AMQP provider from the <bpt id=\"p1\">[</bpt>Apache Qpid project<ept id=\"p1\">](http://qpid.apache.org/)</ept>.",
      "pos": [
        114,
        212
      ]
    },
    {
      "content": "This is analogous to using Service Bus queues and topics with AMQP through Java as shown <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](../articles/service-bus/service-bus-java-how-to-use-jms-api-amqp.md)</ept>.",
      "pos": [
        213,
        378
      ]
    },
    {
      "content": "For more information, refer to <bpt id=\"p1\">[</bpt>Qpid JMS documentation<ept id=\"p1\">](http://qpid.apache.org/releases/qpid-0.30/programming/book/QpidJMS.html)</ept> and <bpt id=\"p2\">[</bpt>Java Messaging Service<ept id=\"p2\">](http://www.oracle.com/technetwork/java/jms/index.html)</ept>.",
      "pos": [
        379,
        592
      ]
    },
    {
      "content": "In Eclipse, install the <bpt id=\"p1\">[</bpt>Azure Toolkit for Eclipse<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh690946.aspx)</ept>.",
      "pos": [
        597,
        705
      ]
    },
    {
      "content": "This includes the Qpid JMS AMQP client libraries.",
      "pos": [
        706,
        755
      ]
    },
    {
      "pos": [
        760,
        815
      ],
      "content": "In Eclipse, create a new Java project named <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept>."
    },
    {
      "content": "In Eclipse Package Explorer, right-click the <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept> project and select <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept>.",
      "pos": [
        820,
        910
      ]
    },
    {
      "content": "In the left pane of the dialog, click <bpt id=\"p1\">**</bpt>Java Build Path<ept id=\"p1\">**</ept>, then click the <bpt id=\"p2\">**</bpt>Libraries<ept id=\"p2\">**</ept> tab, and then the <bpt id=\"p3\">**</bpt>Add Library<ept id=\"p3\">**</ept> button.",
      "pos": [
        911,
        1040
      ]
    },
    {
      "content": "Select <bpt id=\"p1\">**</bpt>Package for Apache Qpid Client Libraries for JMS (by MS Open Tech)<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Finish<ept id=\"p3\">**</ept>.",
      "pos": [
        1041,
        1162
      ]
    },
    {
      "content": "Create a file named <bpt id=\"p1\">**</bpt>servicebus.properties<ept id=\"p1\">**</ept> in the root of the <bpt id=\"p2\">**</bpt>Sender<ept id=\"p2\">**</ept> project, with the following content.",
      "pos": [
        1179,
        1291
      ]
    },
    {
      "content": "Remember to substitute the values of your:",
      "pos": [
        1292,
        1334
      ]
    },
    {
      "content": "Event Hub name.",
      "pos": [
        1341,
        1356
      ]
    },
    {
      "pos": [
        1363,
        1424
      ],
      "content": "namespace name (the latter is usually <ph id=\"ph1\">`{event hub name}-ns`</ph>)."
    },
    {
      "content": "URL-encoded <bpt id=\"p1\">**</bpt>SendRule<ept id=\"p1\">**</ept> key (you made a note of this key when you created your Event Hub).",
      "pos": [
        1431,
        1522
      ]
    },
    {
      "content": "You can URL-encode it <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>.",
      "pos": [
        1523,
        1601
      ]
    },
    {
      "content": "Create a new class named <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept>.",
      "pos": [
        2136,
        2172
      ]
    },
    {
      "content": "Add the following <ph id=\"ph1\">`import`</ph> statements:",
      "pos": [
        2173,
        2211
      ]
    },
    {
      "content": "Then, add the following code to it:",
      "pos": [
        2823,
        2858
      ]
    }
  ],
  "content": "## Send messages to Event Hubs\nIn this section we will write a Java console app to send events to your Event Hub. We will make use of the JMS AMQP provider from the [Apache Qpid project](http://qpid.apache.org/). This is analogous to using Service Bus queues and topics with AMQP through Java as shown [here](../articles/service-bus/service-bus-java-how-to-use-jms-api-amqp.md). For more information, refer to [Qpid JMS documentation](http://qpid.apache.org/releases/qpid-0.30/programming/book/QpidJMS.html) and [Java Messaging Service](http://www.oracle.com/technetwork/java/jms/index.html).\n\n1. In Eclipse, install the [Azure Toolkit for Eclipse](https://msdn.microsoft.com/library/azure/hh690946.aspx). This includes the Qpid JMS AMQP client libraries.\n\n2. In Eclipse, create a new Java project named **Sender**.\n\n3. In Eclipse Package Explorer, right-click the **Sender** project and select **Properties**. In the left pane of the dialog, click **Java Build Path**, then click the **Libraries** tab, and then the **Add Library** button. Select **Package for Apache Qpid Client Libraries for JMS (by MS Open Tech)**, click **Next**, and then click **Finish**.\n\n    ![][8]\n\n4. Create a file named **servicebus.properties** in the root of the **Sender** project, with the following content. Remember to substitute the values of your:\n    - Event Hub name.\n    - namespace name (the latter is usually `{event hub name}-ns`).\n    - URL-encoded **SendRule** key (you made a note of this key when you created your Event Hub). You can URL-encode it [here](http://www.w3schools.com/tags/ref_urlencode.asp).\n\n            # servicebus.properties - sample JNDI configuration\n\n            # Register a ConnectionFactory in JNDI using the form:\n            # connectionfactory.[jndi_name] = [ConnectionURL]\n            connectionfactory.SBCF = amqps://SendRule:{Send Rule key}@{namespace name}.servicebus.windows.net/?sync-publish=false\n\n            # Register some queues in JNDI using the form\n            # queue.[jndi_name] = [physical_name]\n            # topic.[jndi_name] = [physical_name]\n            queue.EventHub = {event hub name}\n\n5. Create a new class named **Sender**. Add the following `import` statements:\n\n        import java.io.BufferedReader;\n        import java.io.IOException;\n        import java.io.InputStreamReader;\n        import java.io.UnsupportedEncodingException;\n        import java.util.Hashtable;\n\n        import javax.jms.BytesMessage;\n        import javax.jms.Connection;\n        import javax.jms.ConnectionFactory;\n        import javax.jms.Destination;\n        import javax.jms.JMSException;\n        import javax.jms.MessageProducer;\n        import javax.jms.Session;\n        import javax.naming.Context;\n        import javax.naming.InitialContext;\n        import javax.naming.NamingException;\n\n6. Then, add the following code to it:\n\n        public static void main(String[] args) throws NamingException,\n                JMSException, IOException, InterruptedException {\n            // Configure JNDI environment\n            Hashtable<String, String> env = new Hashtable<String, String>();\n            env.put(Context.INITIAL_CONTEXT_FACTORY,\n                    \"org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactory\");\n            env.put(Context.PROVIDER_URL, \"servicebus.properties\");\n            Context context = new InitialContext(env);\n\n            ConnectionFactory cf = (ConnectionFactory) context.lookup(\"SBCF\");\n\n            Destination queue = (Destination) context.lookup(\"EventHub\");\n\n            // Create Connection\n            Connection connection = cf.createConnection();\n\n            // Create sender-side Session and MessageProducer\n            Session sendSession = connection.createSession(false,\n                    Session.AUTO_ACKNOWLEDGE);\n            MessageProducer sender = sendSession.createProducer(queue);\n\n            System.out.println(\"Press Ctrl-C to stop the sender process\");\n            System.out.println(\"Press Enter to start now\");\n            BufferedReader commandLine = new java.io.BufferedReader(\n                    new InputStreamReader(System.in));\n            commandLine.readLine();\n\n            while (true) {\n                sendBytesMessage(sendSession, sender);\n                Thread.sleep(200);\n            }\n        }\n\n        private static void sendBytesMessage(Session sendSession, MessageProducer sender) throws JMSException, UnsupportedEncodingException {\n            BytesMessage message = sendSession.createBytesMessage();\n            message.writeBytes(\"Test AMQP message from JMS\".getBytes(\"UTF-8\"));\n            sender.send(message);\n            System.out.println(\"Sent message\");\n        }\n\n\n\n<!-- Links -->\n[Azure Management Portal]: https://manage.windowsazure.com/\n\n\n<!-- Images -->\n[8]: ./media/service-bus-event-hubs-getstarted/create-sender-java1.png\n"
}