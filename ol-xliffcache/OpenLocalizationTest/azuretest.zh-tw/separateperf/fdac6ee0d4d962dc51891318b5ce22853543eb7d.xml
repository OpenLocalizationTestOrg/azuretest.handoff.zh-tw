{
  "nodes": [
    {
      "content": "Connect to SQL Database by using Python with pymssql on Ubuntu",
      "pos": [
        28,
        90
      ]
    },
    {
      "content": "Presents a Python code sample you can use to connect to Azure SQL Database.",
      "pos": [
        110,
        185
      ]
    },
    {
      "content": "The sample runs on an Ubuntu Linux client computer.",
      "pos": [
        186,
        237
      ]
    },
    {
      "content": "Connect to SQL Database by using Python on Ubuntu Linux",
      "pos": [
        572,
        627
      ]
    },
    {
      "content": "This topic presents a Python code sample that run on an Ubuntu Linux client computer, to connect to an Azure SQL Database database.",
      "pos": [
        795,
        926
      ]
    },
    {
      "content": "Requirements",
      "pos": [
        932,
        944
      ]
    },
    {
      "pos": [
        949,
        1013
      ],
      "content": "<bpt id=\"p1\">[</bpt>Python 2.7.6<ept id=\"p1\">](https://www.python.org/download/releases/2.7.6/)</ept>."
    },
    {
      "content": "Install the required modules",
      "pos": [
        1020,
        1048
      ]
    },
    {
      "content": "Open your terminal and navigate to a directory where you plan on creating your python script.",
      "pos": [
        1051,
        1144
      ]
    },
    {
      "content": "Enter the following commands to install <bpt id=\"p1\">**</bpt>FreeTDS<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>pymssql<ept id=\"p2\">**</ept>.",
      "pos": [
        1145,
        1213
      ]
    },
    {
      "content": "pymssql uses FreeTDS to connect to SQL Databases.",
      "pos": [
        1214,
        1263
      ]
    },
    {
      "content": "Create a database and retrieve your connection string",
      "pos": [
        1459,
        1512
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>getting started page<ept id=\"p1\">](sql-database-get-started.md)</ept> to learn how to create a sample database and get your connection string.",
      "pos": [
        1515,
        1647
      ]
    },
    {
      "content": "It is important you follow the guide to create an <bpt id=\"p1\">**</bpt>AdventureWorks database template<ept id=\"p1\">**</ept>.",
      "pos": [
        1648,
        1735
      ]
    },
    {
      "content": "The samples shown below only work with the <bpt id=\"p1\">**</bpt>AdventureWorks schema<ept id=\"p1\">**</ept>.",
      "pos": [
        1736,
        1805
      ]
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        1812,
        1840
      ]
    },
    {
      "pos": [
        1843,
        1956
      ],
      "content": "The <bpt id=\"p1\">[</bpt>pymssql.connect<ept id=\"p1\">](http://pymssql.org/en/latest/ref/pymssql.html)</ept> function is used to connect to SQL Database."
    },
    {
      "content": "Execute an SQL SELECT statement",
      "pos": [
        2135,
        2166
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>cursor.execute<ept id=\"p1\">](http://pymssql.org/en/latest/ref/pymssql.html#pymssql.Cursor.execute)</ept> function can be used to retrieve a result set from a query against SQL Database.",
      "pos": [
        2168,
        2339
      ]
    },
    {
      "content": "This function essentially accepts any query and returns a result set which can be iterated over with the use of <bpt id=\"p1\">[</bpt>cursor.fetchone()<ept id=\"p1\">](http://pymssql.org/en/latest/ref/pymssql.html#pymssql.Cursor.fetchone)</ept>.",
      "pos": [
        2340,
        2543
      ]
    },
    {
      "content": "Insert a row, pass parameters, and retrieve the generated primary key",
      "pos": [
        3160,
        3229
      ]
    },
    {
      "pos": [
        3231,
        3497
      ],
      "content": "In SQL Database the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](https://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENCE<ept id=\"p2\">](https://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key<ept id=\"p3\">](https://msdn.microsoft.com/library/ms179610.aspx)</ept> values."
    },
    {
      "content": "Transactions",
      "pos": [
        4034,
        4046
      ]
    },
    {
      "content": "This code example demonstrates the use of transactions in which you:",
      "pos": [
        4049,
        4117
      ]
    },
    {
      "content": "-Begin a transaction",
      "pos": [
        4120,
        4140
      ]
    },
    {
      "content": "-Insert a row of data",
      "pos": [
        4142,
        4163
      ]
    },
    {
      "content": "-Rollback your transaction to undo the insert",
      "pos": [
        4165,
        4210
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Connect to SQL Database by using Python with pymssql on Ubuntu\" \n    description=\"Presents a Python code sample you can use to connect to Azure SQL Database. The sample runs on an Ubuntu Linux client computer.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"meet-bhagdev\" \n    manager=\"jeffreyg\" \n    editor=\"genemi\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"data-management\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"python\" \n    ms.topic=\"article\" \n    ms.date=\"07/20/2015\" \n    ms.author=\"mebha\"/>\n\n\n# Connect to SQL Database by using Python on Ubuntu Linux\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\nThis topic presents a Python code sample that run on an Ubuntu Linux client computer, to connect to an Azure SQL Database database.\n\n\n## Requirements\n\n\n- [Python 2.7.6](https://www.python.org/download/releases/2.7.6/).\n\n\n### Install the required modules\n\n\nOpen your terminal and navigate to a directory where you plan on creating your python script. Enter the following commands to install **FreeTDS** and **pymssql**. pymssql uses FreeTDS to connect to SQL Databases.\n\n    sudo apt-get --assume-yes update\n    sudo apt-get --assume-yes install freetds-dev freetds-bin\n    sudo apt-get --assume-yes install python-dev python-pip\n    sudo pip install pymssql\n\n\n### Create a database and retrieve your connection string\n\n\nSee the [getting started page](sql-database-get-started.md) to learn how to create a sample database and get your connection string. It is important you follow the guide to create an **AdventureWorks database template**. The samples shown below only work with the **AdventureWorks schema**. \n\n\n## Connect to your SQL Database\n\n\nThe [pymssql.connect](http://pymssql.org/en/latest/ref/pymssql.html) function is used to connect to SQL Database.\n\n    import pymssql\n    conn = pymssql.connect(server='yourserver.database.windows.net', user='yourusername@yourserver', password='yourpassword', database='AdventureWorks')\n\n\n## Execute an SQL SELECT statement\n\nThe [cursor.execute](http://pymssql.org/en/latest/ref/pymssql.html#pymssql.Cursor.execute) function can be used to retrieve a result set from a query against SQL Database. This function essentially accepts any query and returns a result set which can be iterated over with the use of [cursor.fetchone()](http://pymssql.org/en/latest/ref/pymssql.html#pymssql.Cursor.fetchone).\n\n\n    import pymssql\n    conn = pymssql.connect(server='yourserver.database.windows.net', user='yourusername@yourserver', password='yourpassword', database='AdventureWorks')\n    cursor = conn.cursor()\n    cursor.execute('SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;')\n    row = cursor.fetchone()\n    while row:\n        print str(row[0]) + \" \" + str(row[1]) + \" \" + str(row[2])   \n        row = cursor.fetchone()\n\n\n## Insert a row, pass parameters, and retrieve the generated primary key\n\nIn SQL Database the [IDENTITY](https://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENCE](https://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key](https://msdn.microsoft.com/library/ms179610.aspx) values. \n\n\n    import pymssql\n    conn = pymssql.connect(server='yourserver.database.windows.net', user='yourusername@yourserver', password='yourpassword', database='AdventureWorks')\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express', 'SQLEXPRESS', 0, 0, CURRENT_TIMESTAMP)\")\n    row = cursor.fetchone()\n    while row:\n        print \"Inserted Product ID : \" +str(row[0])\n        row = cursor.fetchone()\n\n\n## Transactions\n\n\nThis code example demonstrates the use of transactions in which you:\n\n\n-Begin a transaction\n\n-Insert a row of data\n\n-Rollback your transaction to undo the insert\n\n\n    import pymssql\n    conn = pymssql.connect(server='yourserver.database.windows.net', user='yourusername@yourserver', password='yourpassword', database='AdventureWorks')\n    cursor = conn.cursor()\n    cursor.execute(\"BEGIN TRANSACTION\")\n    cursor.execute(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New', 'SQLEXPRESS New', 0, 0, CURRENT_TIMESTAMP)\")\n    cnxn.rollback()\n\n\n \n"
}