{
  "nodes": [
    {
      "content": "Default communication stack provided by Service Fabric",
      "pos": [
        26,
        80
      ]
    },
    {
      "content": "This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.",
      "pos": [
        98,
        238
      ]
    },
    {
      "content": "Default communication stack provided by Reliable Services Framework",
      "pos": [
        560,
        627
      ]
    },
    {
      "content": "For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.",
      "pos": [
        628,
        876
      ]
    },
    {
      "pos": [
        880,
        971
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Please update to the latest nuget packges to get the features mentioned below."
    },
    {
      "content": "Service Communication Listener",
      "pos": [
        976,
        1006
      ]
    },
    {
      "pos": [
        1007,
        1116
      ],
      "content": "The default communication listener for the service is implemented in the <ph id=\"ph1\">`ServiceCommunicationListener`</ph> class"
    },
    {
      "content": "The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <ph id=\"ph1\">`IService`</ph> interface.",
      "pos": [
        1733,
        1913
      ]
    },
    {
      "content": "The service can then just instantiate the <ph id=\"ph1\">`ServiceCommunicationListener`</ph> object and return it in the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`CreateCommunicationListener`</ph> method<ept id=\"p1\">](service-fabric-reliable-services-communication.md)</ept>.",
      "pos": [
        1914,
        2105
      ]
    },
    {
      "content": "For example, the HelloWorld service code to setup this communication stack may be defined as follows.",
      "pos": [
        2106,
        2207
      ]
    },
    {
      "pos": [
        2884,
        3114
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id=\"p1\">[</bpt>DataContractSerializer<ept id=\"p1\">](https://msdn.microsoft.com/library/ms731923.aspx)</ept>."
    },
    {
      "content": "Writing Clients to communicate with ServiceCommunicationListener",
      "pos": [
        3120,
        3184
      ]
    },
    {
      "pos": [
        3185,
        3312
      ],
      "content": "For clients to communicate to services using the <ph id=\"ph1\">`ServiceCommunicationListener`</ph>, the framework provides a <ph id=\"ph2\">`ServiceProxy`</ph> class."
    },
    {
      "content": "Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.",
      "pos": [
        3476,
        3614
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The communication framework takes care of propagating exceptions thrown at the service to the client.",
      "pos": [
        3824,
        3938
      ]
    },
    {
      "content": "So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.",
      "pos": [
        3939,
        4075
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Default communication stack provided by Service Fabric\"\n   description=\"This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"BharatNarasimman\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"required\"\n   ms.date=\"08/27/2015\"\n   ms.author=\"bharatn@microsoft.com\"/>\n\n# Default communication stack provided by Reliable Services Framework\nFor service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.\n\n> [AZURE.NOTE] Please update to the latest nuget packges to get the features mentioned below.\n\n## Service Communication Listener\nThe default communication listener for the service is implemented in the `ServiceCommunicationListener` class\n\n```csharp\n\npublic class ServiceCommunicationListener<TServiceImplementation> : ICommunicationListener where TServiceImplementation : class\n{\n    public ServiceCommunicationListener(TServiceImplementation serviceImplementationType);\n    public ServiceCommunicationListener(TServiceImplementation serviceImplementationType, string endpointResourceName);\n\n    public void Abort();\n    public Task CloseAsync(CancellationToken cancellationToken);\n    public void Initialize(ServiceInitializationParameters serviceInitializationParameters);\n    public Task<string> OpenAsync(CancellationToken cancellationToken);\n}\n\n```\nThe methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the `IService` interface. The service can then just instantiate the `ServiceCommunicationListener` object and return it in the [`CreateCommunicationListener` method](service-fabric-reliable-services-communication.md). For example, the HelloWorld service code to setup this communication stack may be defined as follows.\n\n```csharp\n\n[DataContract]\npublic class Message\n{\n    [DataMember]\n    public string Content;\n}\n\npublic interface IHelloWorld : IService\n{\n    Task<Message> GetGreeting();\n}\n\npublic class HelloWorldService : StatelessService, IHelloWorld\n{\n    public const string ServiceTypeName = \"HelloWorldUsingDefaultCommunicationType\";\n\n    private Message greeting = new Message() { Content = \"Default greeting\" };\n\n    protected override ICommunicationListener CreateCommunicationListener()\n    {\n        return new ServiceCommunicationListener<HelloWorldService>(this);\n    }\n\n    public Task<Message> GetGreeting()\n    {\n        return Task.FromResult(this.greeting);\n    }\n}\n\n```\n> [AZURE.NOTE] The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net [DataContractSerializer](https://msdn.microsoft.com/library/ms731923.aspx).\n\n\n## Writing Clients to communicate with ServiceCommunicationListener\nFor clients to communicate to services using the `ServiceCommunicationListener`, the framework provides a `ServiceProxy` class.\n\n```csharp\n\npublic abstract class ServiceProxy : IServiceProxy\n{\n...\n\n    public static TServiceInterface Create<TServiceInterface>(Uri serviceName);\n\n...\n}\n\n```\n\nClients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.\n\n```csharp\n\nvar helloWorldClient = ServiceProxy.Create<IHelloWorld>(helloWorldServiceName);\n\nvar message = await helloWorldClient.GetGreeting();\n\nConsole.WriteLine(\"Greeting is {0}\", message.Content);\n\n\n```\n\n>[AZURE.NOTE] The communication framework takes care of propagating exceptions thrown at the service to the client. So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.\n \n"
}