{
  "nodes": [
    {
      "content": "Getting Started using docker with swarm on Azure",
      "pos": [
        27,
        75
      ]
    },
    {
      "content": "Describes how to create a group of VMs with the Docker VM Extension and use swarm to create a Docker cluster.",
      "pos": [
        93,
        202
      ]
    },
    {
      "content": "How to use docker with swarm",
      "pos": [
        534,
        562
      ]
    },
    {
      "content": "This topic shows a very simple way to use <bpt id=\"p1\">[</bpt>docker<ept id=\"p1\">](https://www.docker.com/)</ept> with <bpt id=\"p2\">[</bpt>swarm<ept id=\"p2\">](https://github.com/docker/swarm)</ept> to create a swarm-managed cluster on Azure.",
      "pos": [
        564,
        729
      ]
    },
    {
      "content": "It creates four virtual machines in Azure, one to act as the swarm manager, and three as part of the cluster of docker hosts.",
      "pos": [
        730,
        855
      ]
    },
    {
      "content": "When you are finished, you can use swarm to see the cluster and then begin to use docker on it.",
      "pos": [
        856,
        951
      ]
    },
    {
      "content": "In addition, the Azure CLI calls in this topic use the service management (asm) mode.",
      "pos": [
        952,
        1037
      ]
    },
    {
      "pos": [
        1042,
        1298
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This is an early version of software, so check back for updates about using this on Azure to create large, balanced, and controlled clusters of Docker containers, as well as checking the docker swarm documentation to discover all its features."
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> In addition, this topic uses docker with swarm and the Azure CLI <bpt id=\"p1\">*</bpt>without<ept id=\"p1\">*</ept> using <bpt id=\"p2\">**</bpt>docker-machine<ept id=\"p2\">**</ept> in order to show how the different tools work together but remain independent.",
      "pos": [
        1307,
        1488
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>docker-machine<ept id=\"p1\">**</ept> has <bpt id=\"p2\">**</bpt>--swarm<ept id=\"p2\">**</ept> switches that enable you to use <bpt id=\"p3\">**</bpt>docker-machine<ept id=\"p3\">**</ept> to directly add nodes to a swarm.",
      "pos": [
        1489,
        1608
      ]
    },
    {
      "content": "For an example, see the <bpt id=\"p1\">[</bpt><ept id=\"p1\">docker-machine](https://github.com/docker/machine)</ept> documentation.",
      "pos": [
        1609,
        1699
      ]
    },
    {
      "content": "If you missed <bpt id=\"p1\">**</bpt>docker-machine<ept id=\"p1\">**</ept> running against Azure VMs, see <bpt id=\"p2\">[</bpt><ept id=\"p2\">How to use docker-machine with Azure](virtual-machines-docker-machine.md)</ept>.",
      "pos": [
        1700,
        1839
      ]
    },
    {
      "content": "Create docker hosts with Azure Virtual Machines\n\nThis topic creates four VMs, but you can use any number you want.",
      "pos": [
        1844,
        1958
      ]
    },
    {
      "content": "Call the following with <bpt id=\"p1\">*</bpt>&amp;lt;password&amp;gt;<ept id=\"p1\">*</ept> replaced by the password you have chosen.",
      "pos": [
        1959,
        2043
      ]
    },
    {
      "content": "<ph id=\"ph1\">azure vm docker create swarm-master -l \"East US\" -e 22 $imagename ops </ph>",
      "pos": [
        2049,
        2119
      ]
    },
    {
      "content": "When you're done you should be able to use <bpt id=\"p1\">**</bpt>azure vm list<ept id=\"p1\">**</ept> to see your Azure VMs:\n\n    $ azure vm list | grep \"swarm-[mn]\"\n    data:    swarm-master     ReadyRole           East US       swarm-master.cloudapp.net                               100.78.186.65\n    data:    swarm-node-1     ReadyRole           East US       swarm-node-1.cloudapp.net                               100.66.72.126\n    data:    swarm-node-2     ReadyRole           East US       swarm-node-2.cloudapp.net                               100.72.18.47  \n    data:    swarm-node-3     ReadyRole           East US       swarm-node-3.cloudapp.net                               100.78.24.68  \n\n## Installing swarm on the swarm master VM\n\nThis topic uses the <bpt id=\"p2\">[</bpt><ept id=\"p2\">container model of installation from the docker swarm documentation](https://github.com/docker/swarm#1---docker-image)</ept> -- but you could also SSH to the <bpt id=\"p3\">**</bpt>swarm-master<ept id=\"p3\">**</ept>.",
      "pos": [
        2386,
        3284
      ]
    },
    {
      "content": "In this model, <bpt id=\"p1\">**</bpt>swarm<ept id=\"p1\">**</ept> is downloaded as a docker container running swarm.",
      "pos": [
        3285,
        3360
      ]
    },
    {
      "content": "Below, we perform this step <bpt id=\"p1\">*</bpt>remotely from our laptop by using docker<ept id=\"p1\">*</ept> to connect to the <bpt id=\"p2\">**</bpt>swarm-master<ept id=\"p2\">**</ept> VM and tell it to use the cluster id creation command, <bpt id=\"p3\">**</bpt>swarm create<ept id=\"p3\">**</ept>.",
      "pos": [
        3361,
        3539
      ]
    },
    {
      "content": "The cluster id is how <bpt id=\"p1\">**</bpt>swarm<ept id=\"p1\">**</ept> discovers the members of the swarm group.",
      "pos": [
        3540,
        3613
      ]
    },
    {
      "content": "(You can also clone the repository and build it yourself, which will give you full control and enable debugging.)\n\n    $ docker --tls -H tcp://swarm-master.cloudapp.net:2376 run --rm swarm create\n    Unable to find image 'swarm:latest' locally\n    511136ea3c5a: Pull complete\n    a8bbe4db330c: Pull complete\n    9dfb95669acc: Pull complete\n    0b3950daf974: Pull complete\n    633f3d9a9685: Pull complete\n    bba5f98a0414: Pull complete\n    defbc1ab4462: Pull complete\n    92d78d321ff2: Pull complete\n    swarm:latest: The image you are pulling has been verified.",
      "pos": [
        3614,
        4176
      ]
    },
    {
      "content": "Important: image verification is a tech preview feature and should not be relied on to provide security.",
      "pos": [
        4177,
        4281
      ]
    },
    {
      "content": "Status: Downloaded newer image for swarm:latest\n    36731c17189fd8f450c395db8437befd\n\nThat last line is the cluster id; copy it somewhere because you will use it again when you join the node VMs to the swarm master to create the \"swarm\".",
      "pos": [
        4286,
        4523
      ]
    },
    {
      "content": "In this example, the cluster id is <bpt id=\"p1\">**</bpt>36731c17189fd8f450c395db8437befd<ept id=\"p1\">**</ept>.",
      "pos": [
        4524,
        4596
      ]
    },
    {
      "content": "<ph id=\"ph1\">&gt; [AZURE.NOTE]</ph> Just to be clear, we are using our local docker installation to connect to the <bpt id=\"p1\">**</bpt>swarm-master<ept id=\"p1\">**</ept> VM in Azure and instruction <bpt id=\"p2\">**</bpt>swarm-master<ept id=\"p2\">**</ept> to download, install, and run the <bpt id=\"p3\">**</bpt>create<ept id=\"p3\">**</ept> command, which returns our cluster id that we use for discovery purposes later.",
      "pos": [
        4598,
        4878
      ]
    },
    {
      "pos": [
        4890,
        5221
      ],
      "content": "To confirm this, run <ph id=\"ph1\">`docker -H tcp://`</ph><bpt id=\"p1\">*</bpt>&amp;lt;hostname&amp;gt;<ept id=\"p1\">*</ept> <ph id=\"ph2\">` images`</ph> to list the container processes on the <bpt id=\"p2\">**</bpt>swarm-master<ept id=\"p2\">**</ept> machine and on another node for comparison (because we ran the previous swarm command with the <bpt id=\"p3\">**</bpt>--rm<ept id=\"p3\">**</ept> switch, the container was removed after it finished, so using <bpt id=\"p4\">**</bpt>docker ps -a<ept id=\"p4\">**</ept> won't return anything).:"
    },
    {
      "content": "<ph id=\"ph1\">\n&gt;</ph> If you're familiar with <bpt id=\"p1\">**</bpt>docker<ept id=\"p1\">**</ept>, you'll know that the other nodes have no entries because no images have been downloaded and run yet.",
      "pos": [
        5677,
        5816
      ]
    },
    {
      "content": "Join the node VMs to our docker cluster",
      "pos": [
        5821,
        5860
      ]
    },
    {
      "content": "For each node, list the endpoint information using the Azure CLI.",
      "pos": [
        5862,
        5927
      ]
    },
    {
      "content": "Below we do that for the <bpt id=\"p1\">**</bpt>swarm-node-1<ept id=\"p1\">**</ept> docker host in order to obtain the node's docker port.",
      "pos": [
        5928,
        6024
      ]
    },
    {
      "pos": [
        6624,
        6833
      ],
      "content": "Using <bpt id=\"p1\">**</bpt>docker<ept id=\"p1\">**</ept> and the <ph id=\"ph1\">`-H`</ph> option to point the docker client at your node VM, join that node to the swarm you are creating by passing the cluster id and the node's docker port (the latter using <bpt id=\"p2\">**</bpt>--addr<ept id=\"p2\">**</ept>):"
    },
    {
      "content": "That looks good.",
      "pos": [
        7574,
        7590
      ]
    },
    {
      "content": "To confirm that <bpt id=\"p1\">**</bpt>swarm<ept id=\"p1\">**</ept> is running on <bpt id=\"p2\">**</bpt>swarm-node-1<ept id=\"p2\">**</ept> we type:",
      "pos": [
        7591,
        7656
      ]
    },
    {
      "content": "Repeat for all the other nodes in the cluster.",
      "pos": [
        8005,
        8051
      ]
    },
    {
      "content": "In our case, we do that for <bpt id=\"p1\">**</bpt>swarm-node-2<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>swarm-node-3<ept id=\"p2\">**</ept>.",
      "pos": [
        8052,
        8118
      ]
    },
    {
      "content": "Begin managing the swarm cluster",
      "pos": [
        8123,
        8155
      ]
    },
    {
      "content": "and then you can list out your nodes in your cluster:",
      "pos": [
        8360,
        8413
      ]
    },
    {
      "content": "<ph id=\"ph1\">\n##</ph> Next steps\n\nGo run things on your swarm.",
      "pos": [
        8734,
        8778
      ]
    },
    {
      "content": "To look for inspiration, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">https://github.com/docker/swarm/](https://github.com/docker/swarm/)</ept>, or perhaps a <bpt id=\"p2\">[</bpt><ept id=\"p2\">video](https://www.youtube.com/watch?v=EC25ARhZ5bI)</ept>.",
      "pos": [
        8779,
        8944
      ]
    }
  ],
  "content": "\n<properties\n   pageTitle=\"Getting Started using docker with swarm on Azure\"\n   description=\"Describes how to create a group of VMs with the Docker VM Extension and use swarm to create a Docker cluster.\"\n   services=\"virtual-machines\"\n   documentationCenter=\"virtual-machines\"\n   authors=\"squillace\"\n   manager=\"timlt\"\n   editor=\"tysonn\"/>\n\n<tags\n   ms.service=\"virtual-machines\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"vm-linux\"\n   ms.workload=\"infrastructure\"\n   ms.date=\"05/24/2015\"\n   ms.author=\"rasquill\"/>\n\n# How to use docker with swarm\n\nThis topic shows a very simple way to use [docker](https://www.docker.com/) with [swarm](https://github.com/docker/swarm) to create a swarm-managed cluster on Azure. It creates four virtual machines in Azure, one to act as the swarm manager, and three as part of the cluster of docker hosts. When you are finished, you can use swarm to see the cluster and then begin to use docker on it. In addition, the Azure CLI calls in this topic use the service management (asm) mode. \n\n> [AZURE.NOTE] This is an early version of software, so check back for updates about using this on Azure to create large, balanced, and controlled clusters of Docker containers, as well as checking the docker swarm documentation to discover all its features.\n<!-- -->\n> In addition, this topic uses docker with swarm and the Azure CLI *without* using **docker-machine** in order to show how the different tools work together but remain independent. **docker-machine** has **--swarm** switches that enable you to use **docker-machine** to directly add nodes to a swarm. For an example, see the [docker-machine](https://github.com/docker/machine) documentation. If you missed **docker-machine** running against Azure VMs, see [How to use docker-machine with Azure](virtual-machines-docker-machine.md).\n\n## Create docker hosts with Azure Virtual Machines\n\nThis topic creates four VMs, but you can use any number you want. Call the following with *&lt;password&gt;* replaced by the password you have chosen.\n\n    azure vm docker create swarm-master -l \"East US\" -e 22 $imagename ops <password>\n    azure vm docker create swarm-node-1 -l \"East US\" -e 22 $imagename ops <password>\n    azure vm docker create swarm-node-2 -l \"East US\" -e 22 $imagename ops <password>\n    azure vm docker create swarm-node-3 -l \"East US\" -e 22 $imagename ops <password>\n\nWhen you're done you should be able to use **azure vm list** to see your Azure VMs:\n\n    $ azure vm list | grep \"swarm-[mn]\"\n    data:    swarm-master     ReadyRole           East US       swarm-master.cloudapp.net                               100.78.186.65\n    data:    swarm-node-1     ReadyRole           East US       swarm-node-1.cloudapp.net                               100.66.72.126\n    data:    swarm-node-2     ReadyRole           East US       swarm-node-2.cloudapp.net                               100.72.18.47  \n    data:    swarm-node-3     ReadyRole           East US       swarm-node-3.cloudapp.net                               100.78.24.68  \n\n## Installing swarm on the swarm master VM\n\nThis topic uses the [container model of installation from the docker swarm documentation](https://github.com/docker/swarm#1---docker-image) -- but you could also SSH to the **swarm-master**. In this model, **swarm** is downloaded as a docker container running swarm. Below, we perform this step *remotely from our laptop by using docker* to connect to the **swarm-master** VM and tell it to use the cluster id creation command, **swarm create**. The cluster id is how **swarm** discovers the members of the swarm group. (You can also clone the repository and build it yourself, which will give you full control and enable debugging.)\n\n    $ docker --tls -H tcp://swarm-master.cloudapp.net:2376 run --rm swarm create\n    Unable to find image 'swarm:latest' locally\n    511136ea3c5a: Pull complete\n    a8bbe4db330c: Pull complete\n    9dfb95669acc: Pull complete\n    0b3950daf974: Pull complete\n    633f3d9a9685: Pull complete\n    bba5f98a0414: Pull complete\n    defbc1ab4462: Pull complete\n    92d78d321ff2: Pull complete\n    swarm:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.\n    Status: Downloaded newer image for swarm:latest\n    36731c17189fd8f450c395db8437befd\n\nThat last line is the cluster id; copy it somewhere because you will use it again when you join the node VMs to the swarm master to create the \"swarm\". In this example, the cluster id is **36731c17189fd8f450c395db8437befd**.\n\n> [AZURE.NOTE] Just to be clear, we are using our local docker installation to connect to the **swarm-master** VM in Azure and instruction **swarm-master** to download, install, and run the **create** command, which returns our cluster id that we use for discovery purposes later.\n<!-- -->\n> To confirm this, run `docker -H tcp://`*&lt;hostname&gt;* ` images` to list the container processes on the **swarm-master** machine and on another node for comparison (because we ran the previous swarm command with the **--rm** switch, the container was removed after it finished, so using **docker ps -a** won't return anything).:\n\n\n        $ docker --tls -H tcp://swarm-master.cloudapp.net:2376 images\n        REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n        swarm               latest              92d78d321ff2        11 days ago         7.19 MB\n        $ docker --tls -H tcp://swarm-node-1.cloudapp.net:2376 images\n        REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\n        $\n<P />\n> If you're familiar with **docker**, you'll know that the other nodes have no entries because no images have been downloaded and run yet.\n\n## Join the node VMs to our docker cluster\n\nFor each node, list the endpoint information using the Azure CLI. Below we do that for the **swarm-node-1** docker host in order to obtain the node's docker port.\n\n    $ azure vm endpoint list swarm-node-1\n    info:    Executing command vm endpoint list\n    + Getting virtual machines\n    data:    Name    Protocol  Public Port  Private Port  Virtual IP      EnableDirectServerReturn  Load Balanced\n    data:    ------  --------  -----------  ------------  --------------  ------------------------  -------------\n    data:    docker  tcp       2376         2376          138.91.112.194  false                     No\n    data:    ssh     tcp       22           22            138.91.112.194  false                     No\n    info:    vm endpoint list command OK\n\n\nUsing **docker** and the `-H` option to point the docker client at your node VM, join that node to the swarm you are creating by passing the cluster id and the node's docker port (the latter using **--addr**):\n\n    $ docker --tls -H tcp://swarm-node-1.cloudapp.net:2376 run -d swarm join --addr=138.91.112.194:2376 token://36731c17189fd8f450c395db8437befd\n    Unable to find image 'swarm:latest' locally\n    511136ea3c5a: Pull complete\n    a8bbe4db330c: Pull complete\n    9dfb95669acc: Pull complete\n    0b3950daf974: Pull complete\n    633f3d9a9685: Pull complete\n    bba5f98a0414: Pull complete\n    defbc1ab4462: Pull complete\n    92d78d321ff2: Pull complete\n    swarm:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.\n    Status: Downloaded newer image for swarm:latest\n    bbf88f61300bf876c6202d4cf886874b363cd7e2899345ac34dc8ab10c7ae924\n\nThat looks good. To confirm that **swarm** is running on **swarm-node-1** we type:\n\n    $ docker --tls -H tcp://swarm-node-1.cloudapp.net:2376 ps -a\n        CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES\n        bbf88f61300b        swarm:latest        \"/swarm join --addr=   13 seconds ago      Up 12 seconds       2375/tcp            angry_mclean\n\nRepeat for all the other nodes in the cluster. In our case, we do that for **swarm-node-2** and **swarm-node-3**.\n\n## Begin managing the swarm cluster\n\n    $ docker --tls -H tcp://swarm-master.cloudapp.net:2376 run -d -p 2375:2375 swarm manage token://36731c17189fd8f450c395db8437befd\n    d7e87c2c147ade438cb4b663bda0ee20981d4818770958f5d317d6aebdcaedd5\n\nand then you can list out your nodes in your cluster:\n\n    ralph@local:~$ docker --tls -H tcp://swarm-master.cloudapp.net:2376 run --rm swarm list token://73f8bc512e94195210fad6e9cd58986f\n    54.149.104.203:2375\n    54.187.164.89:2375\n    92.222.76.190:2375\n\n<!--Every topic should have next steps and links to the next logical set of content to keep the customer engaged-->\n## Next steps\n\nGo run things on your swarm. To look for inspiration, see [https://github.com/docker/swarm/](https://github.com/docker/swarm/), or perhaps a [video](https://www.youtube.com/watch?v=EC25ARhZ5bI).\n\n<!-- links -->\n\n[docker-machine-azure]: virtual-machines-docker-machine.md\n "
}