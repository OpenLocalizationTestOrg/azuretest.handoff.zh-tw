<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create ContentKeys with REST</source>
          <target state="new">Create ContentKeys with REST</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create content keys that provide secure access to Assets.</source>
          <target state="new">Learn how to create content keys that provide secure access to Assets.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create ContentKeys with REST</source>
          <target state="new">Create ContentKeys with REST</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>REST</source>
          <target state="new">REST</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Media Services enables you to create new and deliver encrypted assets.</source>
          <target state="new">Media Services enables you to create new and deliver encrypted assets.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> provides secure access to your <bpt id="p2">**</bpt>Asset<ept id="p2">**</ept>s.</source>
          <target state="new">A <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> provides secure access to your <bpt id="p2">**</bpt>Asset<ept id="p2">**</ept>s.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you create a new asset (for example, before you <bpt id="p1">[</bpt>upload files<ept id="p1">](media-services-rest-upload-files.md)</ept>), you can specify the following encryption options: <bpt id="p2">**</bpt>StorageEncrypted<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CommonEncryptionProtected<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>EnvelopeEncryptionProtected<ept id="p4">**</ept>.</source>
          <target state="new">When you create a new asset (for example, before you <bpt id="p1">[</bpt>upload files<ept id="p1">](media-services-rest-upload-files.md)</ept>), you can specify the following encryption options: <bpt id="p2">**</bpt>StorageEncrypted<ept id="p2">**</ept>, <bpt id="p3">**</bpt>CommonEncryptionProtected<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>EnvelopeEncryptionProtected<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you deliver assets to your clients, you can <bpt id="p1">[</bpt>configure for assets to be dynamically encrypted<ept id="p1">](media-services-rest-configure-asset-delivery-policy.md)</ept> with one of the following two encryptions: <bpt id="p2">**</bpt>DynamicEnvelopeEncryption<ept id="p2">**</ept> or <bpt id="p3">**</bpt>DynamicCommonEncryption<ept id="p3">**</ept>.</source>
          <target state="new">When you deliver assets to your clients, you can <bpt id="p1">[</bpt>configure for assets to be dynamically encrypted<ept id="p1">](media-services-rest-configure-asset-delivery-policy.md)</ept> with one of the following two encryptions: <bpt id="p2">**</bpt>DynamicEnvelopeEncryption<ept id="p2">**</ept> or <bpt id="p3">**</bpt>DynamicCommonEncryption<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Encrypted assets have to be associated with <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept>s.</source>
          <target state="new">Encrypted assets have to be associated with <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept>s.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This article describes how to create a content key.</source>
          <target state="new">This article describes how to create a content key.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following are general steps for generating content keys that you will associate with assets that you want to be encrypted.</source>
          <target state="new">The following are general steps for generating content keys that you will associate with assets that you want to be encrypted.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Randomly generate a 16-byte AES key (for common and envelope encryption) or a 32-byte AES key (for storage encryption).</source>
          <target state="new">Randomly generate a 16-byte AES key (for common and envelope encryption) or a 32-byte AES key (for storage encryption).</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This will be the content key for your asset, which means all files associated with that asset will need to use the same content key during decryption.</source>
          <target state="new">This will be the content key for your asset, which means all files associated with that asset will need to use the same content key during decryption.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>GetProtectionKeyId<ept id="p1">](https://msdn.microsoft.com/library/azure/jj683097.aspx#getprotectionkeyid)</ept> and <bpt id="p2">[</bpt>GetProtectionKey<ept id="p2">](https://msdn.microsoft.com/library/azure/jj683097.aspx#getprotectionkey)</ept> methods to get the correct X.509 Certificate that must be used to encrypt your content key.</source>
          <target state="new">Call the <bpt id="p1">[</bpt>GetProtectionKeyId<ept id="p1">](https://msdn.microsoft.com/library/azure/jj683097.aspx#getprotectionkeyid)</ept> and <bpt id="p2">[</bpt>GetProtectionKey<ept id="p2">](https://msdn.microsoft.com/library/azure/jj683097.aspx#getprotectionkey)</ept> methods to get the correct X.509 Certificate that must be used to encrypt your content key.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Encrypt your content key with the public key of the X.509 Certificate.</source>
          <target state="new">Encrypt your content key with the public key of the X.509 Certificate.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Media Services .NET SDK uses RSA with OAEP when doing the encryption.</source>
          <target state="new">Media Services .NET SDK uses RSA with OAEP when doing the encryption.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can see an example in the <bpt id="p1">[</bpt>EncryptSymmetricKeyData function<ept id="p1">](https://github.com/Azure/azure-sdk-for-media-services/blob/dev/src/net/Client/Common/Common.FileEncryption/EncryptionUtils.cs)</ept>.</source>
          <target state="new">You can see an example in the <bpt id="p1">[</bpt>EncryptSymmetricKeyData function<ept id="p1">](https://github.com/Azure/azure-sdk-for-media-services/blob/dev/src/net/Client/Common/Common.FileEncryption/EncryptionUtils.cs)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Create a checksum value (based on the PlayReady AES key checksum algorithm) calculated using the key identifier and content key.</source>
          <target state="new">Create a checksum value (based on the PlayReady AES key checksum algorithm) calculated using the key identifier and content key.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see the “PlayReady AES Key Checksum Algorithm” section of the PlayReady Header Object document located <bpt id="p1">[</bpt>here<ept id="p1">](http://www.microsoft.com/playready/documents/)</ept>.</source>
          <target state="new">For more information, see the “PlayReady AES Key Checksum Algorithm” section of the PlayReady Header Object document located <bpt id="p1">[</bpt>here<ept id="p1">](http://www.microsoft.com/playready/documents/)</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following .NET example calculates the checksum using the GUID part of the key identifier and the clear content key.</source>
          <target state="new">The following .NET example calculates the checksum using the GUID part of the key identifier and the clear content key.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create the Content key with the <bpt id="p1">**</bpt>EncryptedContentKey<ept id="p1">**</ept> (converted to base64-encoded string), <bpt id="p2">**</bpt>ProtectionKeyId<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ProtectionKeyType<ept id="p3">**</ept>, <bpt id="p4">**</bpt>ContentKeyType<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Checksum<ept id="p5">**</ept> values you have received in previous steps.</source>
          <target state="new">Create the Content key with the <bpt id="p1">**</bpt>EncryptedContentKey<ept id="p1">**</ept> (converted to base64-encoded string), <bpt id="p2">**</bpt>ProtectionKeyId<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ProtectionKeyType<ept id="p3">**</ept>, <bpt id="p4">**</bpt>ContentKeyType<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>Checksum<ept id="p5">**</ept> values you have received in previous steps.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Associate the <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> entity with your <bpt id="p2">**</bpt>Asset<ept id="p2">**</ept> entity through the $links operation.</source>
          <target state="new">Associate the <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> entity with your <bpt id="p2">**</bpt>Asset<ept id="p2">**</ept> entity through the $links operation.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that examples that generate an AES key, encrypt the key, and calculate the checksum have been omitted from this topic.</source>
          <target state="new">Note that examples that generate an AES key, encrypt the key, and calculate the checksum have been omitted from this topic.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Only the examples that show how to interact with Media Services are provided.</source>
          <target state="new">Only the examples that show how to interact with Media Services are provided.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When working with the Media Services REST API, the following considerations apply:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</source>
          <target state="new">When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Setup for Media Services REST API Development<ept id="p1">](media-services-rest-how-to-use.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Setup for Media Services REST API Development<ept id="p1">](media-services-rest-how-to-use.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</source>
          <target state="new">After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must make subsequent calls to the new URI as described in <bpt id="p1">[</bpt>Connecting to Media Services using REST API<ept id="p1">](media-services-rest-connect_programmatically.md)</ept>.</source>
          <target state="new">You must make subsequent calls to the new URI as described in <bpt id="p1">[</bpt>Connecting to Media Services using REST API<ept id="p1">](media-services-rest-connect_programmatically.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Retrieve the ProtectionKeyId</source>
          <target state="new">Retrieve the ProtectionKeyId</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows how to retrieve the ProtectionKeyId, a certificate thumbprint, for the certificate you must use when encrypting your content key.</source>
          <target state="new">The following example shows how to retrieve the ProtectionKeyId, a certificate thumbprint, for the certificate you must use when encrypting your content key.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Do this step to make sure that you already have the appropriate certificate on your machine.</source>
          <target state="new">Do this step to make sure that you already have the appropriate certificate on your machine.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Retrieve the ProtectionKey for the ProtectionKeyId</source>
          <target state="new">Retrieve the ProtectionKey for the ProtectionKeyId</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows how to retrieve the X.509 certificate using the ProtectionKeyId you received in the previous step.</source>
          <target state="new">The following example shows how to retrieve the X.509 certificate using the ProtectionKeyId you received in the previous step.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create the ContentKey</source>
          <target state="new">Create the ContentKey</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After you have retrieved the X.509 certificate and used its public key to encrypt your content key, create a <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> entity and set its property values accordingly.</source>
          <target state="new">After you have retrieved the X.509 certificate and used its public key to encrypt your content key, create a <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> entity and set its property values accordingly.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One of the values that you must set when create the content key is the type.</source>
          <target state="new">One of the values that you must set when create the content key is the type.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Choose from one of the following values.</source>
          <target state="new">Choose from one of the following values.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> with a <bpt id="p2">**</bpt>ContentKeyType<ept id="p2">**</ept> set for storage encryption ("1") and the <bpt id="p3">**</bpt>ProtectionKeyType<ept id="p3">**</ept> set to "0" to indicate that the protection key Id is the X.509 certificate thumbprint.</source>
          <target state="new">The following example shows how to create a <bpt id="p1">**</bpt>ContentKey<ept id="p1">**</ept> with a <bpt id="p2">**</bpt>ContentKeyType<ept id="p2">**</ept> set for storage encryption ("1") and the <bpt id="p3">**</bpt>ProtectionKeyType<ept id="p3">**</ept> set to "0" to indicate that the protection key Id is the X.509 certificate thumbprint.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="new">Request</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Associate the ContentKey with an Asset</source>
          <target state="new">Associate the ContentKey with an Asset</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After creating the ContentKey, associate it with your Asset using the $links operation, as shown in the following example:</source>
          <target state="new">After creating the ContentKey, associate it with your Asset using the $links operation, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Request:</source>
          <target state="new">Request:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Response:</source>
          <target state="new">Response:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bdc889bbdb65992e2fa45fbbbeb7609a6d493f2</xliffext:olfilehash>
  </header>
</xliff>