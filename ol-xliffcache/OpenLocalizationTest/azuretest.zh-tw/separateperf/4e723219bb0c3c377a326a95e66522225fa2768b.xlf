<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Best Practices for Handling State in Azure Resource Manager Templates</source>
          <target state="new">Best Practices for Handling State in Azure Resource Manager Templates</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shows recommended approaches for using complex objects to share state data with Azure Resource Manager templates and linked templates</source>
          <target state="new">Shows recommended approaches for using complex objects to share state data with Azure Resource Manager templates and linked templates</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sharing state in Azure Resource Manager templates</source>
          <target state="new">Sharing state in Azure Resource Manager templates</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic shows best practices for managing and sharing state within an Azure Resource Manager template and across linked templates.</source>
          <target state="new">This topic shows best practices for managing and sharing state within an Azure Resource Manager template and across linked templates.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The parameters and variables shown in this topic are examples of the type of objects you can define to conveniently organize your deployment requirements.</source>
          <target state="new">The parameters and variables shown in this topic are examples of the type of objects you can define to conveniently organize your deployment requirements.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>From these examples, you can implement your own objects with property values that make sense for your environment.</source>
          <target state="new">From these examples, you can implement your own objects with property values that make sense for your environment.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using complex objects to share state</source>
          <target state="new">Using complex objects to share state</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition to single-value parameters, you can use complex objects as parameters in an Azure Resource Manager template.</source>
          <target state="new">In addition to single-value parameters, you can use complex objects as parameters in an Azure Resource Manager template.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With complex objects, you can implement and reference collections of data for a specific area</source>
          <target state="new">With complex objects, you can implement and reference collections of data for a specific area</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>such as t-shirt size (for describing a virtual machine), network settings, operating system (OS) settings, and availability settings.</source>
          <target state="new">such as t-shirt size (for describing a virtual machine), network settings, operating system (OS) settings, and availability settings.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows how to define variables that contain complex objects for representing collections of data.</source>
          <target state="new">The following example shows how to define variables that contain complex objects for representing collections of data.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The collections define values that are used for virtual machine size, network settings,</source>
          <target state="new">The collections define values that are used for virtual machine size, network settings,</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>operating system settings and availability settings.</source>
          <target state="new">operating system settings and availability settings.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can then reference these variables later in the template.</source>
          <target state="new">You can then reference these variables later in the template.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The ability to reference named-variables and their properties simplifies the template syntax,</source>
          <target state="new">The ability to reference named-variables and their properties simplifies the template syntax,</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>and makes it easy to understand context.</source>
          <target state="new">and makes it easy to understand context.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example defines a resource to deploy by using the objects shown above to set values.</source>
          <target state="new">The following example defines a resource to deploy by using the objects shown above to set values.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, note that the VM size is set by retrieving the value</source>
          <target state="new">For example, note that the VM size is set by retrieving the value</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>for <ph id="ph1">`variables('tshirtSize').vmSize`</ph> while the value for the disk size is retrieved from <ph id="ph2">`variables('tshirtSize').diskSize`</ph>.</source>
          <target state="new">for <ph id="ph1">`variables('tshirtSize').vmSize`</ph> while the value for the disk size is retrieved from <ph id="ph2">`variables('tshirtSize').diskSize`</ph>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In addition, the URI for a linked template is set with the</source>
          <target state="new">In addition, the URI for a linked template is set with the</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>value for <ph id="ph1">`variables('tshirtSize').vmTemplate`</ph>.</source>
          <target state="new">value for <ph id="ph1">`variables('tshirtSize').vmTemplate`</ph>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Passing state to a template and its linked templates</source>
          <target state="new">Passing state to a template and its linked templates</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can share state information into a template and its linked templates through:</source>
          <target state="new">You can share state information into a template and its linked templates through:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>parameters that you provide directly to the main template during deployment</source>
          <target state="new">parameters that you provide directly to the main template during deployment</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>parameters, static variables, and generated variables that the main template shares with its linked templates</source>
          <target state="new">parameters, static variables, and generated variables that the main template shares with its linked templates</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Common parameters provided to the main template</source>
          <target state="new">Common parameters provided to the main template</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following table lists commonly-used parameters in templates.</source>
          <target state="new">The following table lists commonly-used parameters in templates.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Commonly used parameters passed to the main template</source>
          <target state="new">Commonly used parameters passed to the main template</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="new">Value</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>location</source>
          <target state="new">location</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>String from a constrained list of Azure regions</source>
          <target state="new">String from a constrained list of Azure regions</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The location where the resources will be deployed.</source>
          <target state="new">The location where the resources will be deployed.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>storageAccountNamePrefix</source>
          <target state="new">storageAccountNamePrefix</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Unique DNS name for the Storage Account where the VM's disks will be placed</source>
          <target state="new">Unique DNS name for the Storage Account where the VM's disks will be placed</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>domainName</source>
          <target state="new">domainName</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Domain name of the publicly accessible jumpbox VM in the format: <bpt id="p1">**</bpt>{domainName}.{location}.cloudapp.com<ept id="p1">**</ept> For example: <bpt id="p2">**</bpt>mydomainname.westus.cloudapp.azure.com<ept id="p2">**</ept></source>
          <target state="new">Domain name of the publicly accessible jumpbox VM in the format: <bpt id="p1">**</bpt>{domainName}.{location}.cloudapp.com<ept id="p1">**</ept> For example: <bpt id="p2">**</bpt>mydomainname.westus.cloudapp.azure.com<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>adminUsername</source>
          <target state="new">adminUsername</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Username for the VMs</source>
          <target state="new">Username for the VMs</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>adminPassword</source>
          <target state="new">adminPassword</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Password for the VMs</source>
          <target state="new">Password for the VMs</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>tshirtSize</source>
          <target state="new">tshirtSize</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>String from a constrained list of offered t-shirt sizes</source>
          <target state="new">String from a constrained list of offered t-shirt sizes</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The named scale unit size to provision.</source>
          <target state="new">The named scale unit size to provision.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, "Small", "Medium", "Large"</source>
          <target state="new">For example, "Small", "Medium", "Large"</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>virtualNetworkName</source>
          <target state="new">virtualNetworkName</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Name of the virtual network that the consumer wants to use.</source>
          <target state="new">Name of the virtual network that the consumer wants to use.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>enableJumpbox</source>
          <target state="new">enableJumpbox</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>String from a constrained list (enabled/disabled)</source>
          <target state="new">String from a constrained list (enabled/disabled)</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameter that identifies whether to enable a jumpbox for the environment.</source>
          <target state="new">Parameter that identifies whether to enable a jumpbox for the environment.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Values: "enabled", "disabled"</source>
          <target state="new">Values: "enabled", "disabled"</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameters sent to linked templates</source>
          <target state="new">Parameters sent to linked templates</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When connecting to linked templates, you will often use a mix of static and generated variables.</source>
          <target state="new">When connecting to linked templates, you will often use a mix of static and generated variables.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Static variables</source>
          <target state="new">Static variables</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Static variables are often used to provide base values, such as URLs, that are used throughout a template or as values that are used to compose values for dynamic variables.</source>
          <target state="new">Static variables are often used to provide base values, such as URLs, that are used throughout a template or as values that are used to compose values for dynamic variables.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the template excerpt below, <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> specifies the root location for the template in GitHub.</source>
          <target state="new">In the template excerpt below, <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> specifies the root location for the template in GitHub.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The next line builds a new variable <bpt id="p1">*</bpt>sharedTemplateUrl<ept id="p1">*</ept> that concatenates the</source>
          <target state="new">The next line builds a new variable <bpt id="p1">*</bpt>sharedTemplateUrl<ept id="p1">*</ept> that concatenates the</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>value of <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> with the known name of the shared resources template.</source>
          <target state="new">value of <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> with the known name of the shared resources template.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Below that, a complex object variable is used to store a t-shirt size, where the <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> is</source>
          <target state="new">Below that, a complex object variable is used to store a t-shirt size, where the <bpt id="p1">*</bpt>templateBaseUrl<ept id="p1">*</ept> is</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>concatenated to specify the known configuration template location stored in the <bpt id="p1">*</bpt>vmTemplate<ept id="p1">*</ept> property.</source>
          <target state="new">concatenated to specify the known configuration template location stored in the <bpt id="p1">*</bpt>vmTemplate<ept id="p1">*</ept> property.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The benefit of this approach is you can easily move, fork, or use the template as a base for a new one.</source>
          <target state="new">The benefit of this approach is you can easily move, fork, or use the template as a base for a new one.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If the template location changes, you only need to change the static variable</source>
          <target state="new">If the template location changes, you only need to change the static variable</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>in the one place — the main template — which passes it throughout the templates.</source>
          <target state="new">in the one place — the main template — which passes it throughout the templates.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Generated variables</source>
          <target state="new">Generated variables</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In addition to static variables, a number of variables are generated dynamically.</source>
          <target state="new">In addition to static variables, a number of variables are generated dynamically.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This section identifies some of the common types of generated variables.</source>
          <target state="new">This section identifies some of the common types of generated variables.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>tshirtSize</source>
          <target state="new">tshirtSize</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When calling the main template, you can select a t-shirt size from a fixed number of options, which typically include values such as <bpt id="p1">*</bpt>Small<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Medium<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>Large<ept id="p3">*</ept>.</source>
          <target state="new">When calling the main template, you can select a t-shirt size from a fixed number of options, which typically include values such as <bpt id="p1">*</bpt>Small<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Medium<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>Large<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the main template, this option appears as a parameter such as <bpt id="p1">*</bpt>tshirtSize<ept id="p1">*</ept>:</source>
          <target state="new">In the main template, this option appears as a parameter such as <bpt id="p1">*</bpt>tshirtSize<ept id="p1">*</ept>:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Within the main template, variables correspond to each of the sizes.</source>
          <target state="new">Within the main template, variables correspond to each of the sizes.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, if the available sizes are small, medium, and large, the variables section would include variables</source>
          <target state="new">For example, if the available sizes are small, medium, and large, the variables section would include variables</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>named <bpt id="p1">*</bpt>tshirtSizeSmall<ept id="p1">*</ept>, <bpt id="p2">*</bpt>tshirtSizeMedium<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>tshirtSizeLarge<ept id="p3">*</ept>.</source>
          <target state="new">named <bpt id="p1">*</bpt>tshirtSizeSmall<ept id="p1">*</ept>, <bpt id="p2">*</bpt>tshirtSizeMedium<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>tshirtSizeLarge<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>As the following example shows, these variables define the properties of a particular t-shirt size.</source>
          <target state="new">As the following example shows, these variables define the properties of a particular t-shirt size.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Each identifies the VM type, disk size, associated scale unit resource template</source>
          <target state="new">Each identifies the VM type, disk size, associated scale unit resource template</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>to link to, number of instances, storage account details, and jumpbox status.</source>
          <target state="new">to link to, number of instances, storage account details, and jumpbox status.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The storage account name prefix is taken from a parameter supplied by a user, and the linked template is the concatenation of the base URL for the template and the filename of a specific scale unit resource template.</source>
          <target state="new">The storage account name prefix is taken from a parameter supplied by a user, and the linked template is the concatenation of the base URL for the template and the filename of a specific scale unit resource template.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>tshirtSize<ept id="p1">*</ept> variable appears further down in the variables section.</source>
          <target state="new">The <bpt id="p1">*</bpt>tshirtSize<ept id="p1">*</ept> variable appears further down in the variables section.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The end of the t-shirt size you provided (<bpt id="p1">*</bpt>Small<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Medium<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Large<ept id="p3">*</ept>) is concatenated with the text <bpt id="p4">*</bpt>tshirtSize<ept id="p4">*</ept> to retrieve the</source>
          <target state="new">The end of the t-shirt size you provided (<bpt id="p1">*</bpt>Small<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Medium<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Large<ept id="p3">*</ept>) is concatenated with the text <bpt id="p4">*</bpt>tshirtSize<ept id="p4">*</ept> to retrieve the</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>associated complex object variable for that t-shirt size:</source>
          <target state="new">associated complex object variable for that t-shirt size:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This variable is passed to the linked scale unit resource template.</source>
          <target state="new">This variable is passed to the linked scale unit resource template.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>networkSettings</source>
          <target state="new">networkSettings</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In a capacity, capability, or end-to-end scoped solution template, the linked templates typically create resources that exist on a network.</source>
          <target state="new">In a capacity, capability, or end-to-end scoped solution template, the linked templates typically create resources that exist on a network.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>One straightforward approach is to use a complex object to store</source>
          <target state="new">One straightforward approach is to use a complex object to store</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>network settings and pass them to linked templates.</source>
          <target state="new">network settings and pass them to linked templates.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An example of communicating network settings can be seen below.</source>
          <target state="new">An example of communicating network settings can be seen below.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>availabilitySettings</source>
          <target state="new">availabilitySettings</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Resources created in linked templates are often placed in an availability set.</source>
          <target state="new">Resources created in linked templates are often placed in an availability set.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the following example, the availability set name is specified and also the fault domain and update domain count to use.</source>
          <target state="new">In the following example, the availability set name is specified and also the fault domain and update domain count to use.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you need multiple availability sets (for example, one for master nodes and another for data nodes), you can use a name as a prefix, specify multiple availability sets, or follow the model shown earlier</source>
          <target state="new">If you need multiple availability sets (for example, one for master nodes and another for data nodes), you can use a name as a prefix, specify multiple availability sets, or follow the model shown earlier</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>for creating a variable for a specific t-shirt size.</source>
          <target state="new">for creating a variable for a specific t-shirt size.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>storageSettings</source>
          <target state="new">storageSettings</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Storage details are often shared with linked templates.</source>
          <target state="new">Storage details are often shared with linked templates.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the example below, a <bpt id="p1">*</bpt>storageSettings<ept id="p1">*</ept> object provides details about the storage account and container names.</source>
          <target state="new">In the example below, a <bpt id="p1">*</bpt>storageSettings<ept id="p1">*</ept> object provides details about the storage account and container names.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>osSettings</source>
          <target state="new">osSettings</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>With linked templates, you may need to pass operating system settings to various nodes types across different known configuration types.</source>
          <target state="new">With linked templates, you may need to pass operating system settings to various nodes types across different known configuration types.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A complex object is an easy way to store and share operating system information and also makes</source>
          <target state="new">A complex object is an easy way to store and share operating system information and also makes</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>it easier to support multiple operating system choices for deployment.</source>
          <target state="new">it easier to support multiple operating system choices for deployment.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following example shows an object for <bpt id="p1">*</bpt>osSettings<ept id="p1">*</ept>:</source>
          <target state="new">The following example shows an object for <bpt id="p1">*</bpt>osSettings<ept id="p1">*</ept>:</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>machineSettings</source>
          <target state="new">machineSettings</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A generated variable, <bpt id="p1">*</bpt>machineSettings<ept id="p1">*</ept> is a complex object containing a mix of core variables for creating a new VM: administrator user name and password, a prefix for the VM names, and an operating</source>
          <target state="new">A generated variable, <bpt id="p1">*</bpt>machineSettings<ept id="p1">*</ept> is a complex object containing a mix of core variables for creating a new VM: administrator user name and password, a prefix for the VM names, and an operating</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>system image reference as shown below:</source>
          <target state="new">system image reference as shown below:</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">*</bpt>osImageReference<ept id="p1">*</ept> retrieves the values from the <bpt id="p2">*</bpt>osSettings<ept id="p2">*</ept> variable defined in the main template.</source>
          <target state="new">Note that <bpt id="p1">*</bpt>osImageReference<ept id="p1">*</ept> retrieves the values from the <bpt id="p2">*</bpt>osSettings<ept id="p2">*</ept> variable defined in the main template.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>That means you can easily change the operating system for a VM—entirely or based</source>
          <target state="new">That means you can easily change the operating system for a VM—entirely or based</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>on the preference of a template consumer.</source>
          <target state="new">on the preference of a template consumer.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>vmScripts</source>
          <target state="new">vmScripts</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>vmScripts<ept id="p1">*</ept> object contains details about the scripts to download and execute on a VM instance, including outside and inside references.</source>
          <target state="new">The <bpt id="p1">*</bpt>vmScripts<ept id="p1">*</ept> object contains details about the scripts to download and execute on a VM instance, including outside and inside references.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Outside references include the infrastructure.</source>
          <target state="new">Outside references include the infrastructure.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Inside references include the installed software installed and configuration.</source>
          <target state="new">Inside references include the installed software installed and configuration.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">*</bpt>scriptsToDownload<ept id="p1">*</ept> property to list the scripts to download to the VM.</source>
          <target state="new">You use the <bpt id="p1">*</bpt>scriptsToDownload<ept id="p1">*</ept> property to list the scripts to download to the VM.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>As the example below shows, this object also contains references to command-line arguments for different types of actions.</source>
          <target state="new">As the example below shows, this object also contains references to command-line arguments for different types of actions.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>These actions include executing the default installation for</source>
          <target state="new">These actions include executing the default installation for</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>each individual node, an installation that runs after all nodes are deployed, and any additional scripts that may be specific to a given template.</source>
          <target state="new">each individual node, an installation that runs after all nodes are deployed, and any additional scripts that may be specific to a given template.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This example is from a template used to deploy MongoDB, which requires an arbiter to deliver high availability.</source>
          <target state="new">This example is from a template used to deploy MongoDB, which requires an arbiter to deliver high availability.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>arbiterNodeInstallCommand<ept id="p1">*</ept> has been added to <bpt id="p2">*</bpt>vmScripts<ept id="p2">*</ept> to install the arbiter.</source>
          <target state="new">The <bpt id="p1">*</bpt>arbiterNodeInstallCommand<ept id="p1">*</ept> has been added to <bpt id="p2">*</bpt>vmScripts<ept id="p2">*</ept> to install the arbiter.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The variables section is where you’ll find the variables that define the specific text to execute the script with the proper values.</source>
          <target state="new">The variables section is where you’ll find the variables that define the specific text to execute the script with the proper values.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returning state from a template</source>
          <target state="new">Returning state from a template</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Not only can you pass data into a template, you can also share data back to the calling template.</source>
          <target state="new">Not only can you pass data into a template, you can also share data back to the calling template.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>outputs<ept id="p1">**</ept> section of a linked template, you can provide key/value pairs that can be consumed</source>
          <target state="new">In the <bpt id="p1">**</bpt>outputs<ept id="p1">**</ept> section of a linked template, you can provide key/value pairs that can be consumed</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>by the source template.</source>
          <target state="new">by the source template.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example shows how to pass the private IP address generated in a linked template.</source>
          <target state="new">The following example shows how to pass the private IP address generated in a linked template.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Within the main template, you can use that data with the following syntax:</source>
          <target state="new">Within the main template, you can use that data with the following syntax:</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Authoring Azure Resource Manager Templates</source>
          <target state="new">Authoring Azure Resource Manager Templates</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Azure Resource Manager Template Functions</source>
          <target state="new">Azure Resource Manager Template Functions</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e723219bb0c3c377a326a95e66522225fa2768b</xliffext:olfilehash>
  </header>
</xliff>