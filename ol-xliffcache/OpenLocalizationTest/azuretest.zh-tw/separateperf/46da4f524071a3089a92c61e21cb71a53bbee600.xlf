<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Service Bus topics (Ruby) | Microsoft Azure</source>
          <target state="new">How to use Service Bus topics (Ruby) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Service Bus topics and subscriptions in Azure.</source>
          <target state="new">Learn how to use Service Bus topics and subscriptions in Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples are written for Ruby applications.</source>
          <target state="new">Code samples are written for Ruby applications.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to Use Service Bus Topics/Subscriptions</source>
          <target state="new">How to Use Service Bus Topics/Subscriptions</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide will show you how to use Service Bus topics and subscriptions from Ruby applications.</source>
          <target state="new">This guide will show you how to use Service Bus topics and subscriptions from Ruby applications.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The scenarios covered include <bpt id="p1">**</bpt>creating topics and subscriptions, creating subscription filters, sending messages<ept id="p1">**</ept> to a topic, <bpt id="p2">**</bpt>receiving messages from a subscription<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>deleting topics and subscriptions<ept id="p3">**</ept>.</source>
          <target state="new">The scenarios covered include <bpt id="p1">**</bpt>creating topics and subscriptions, creating subscription filters, sending messages<ept id="p1">**</ept> to a topic, <bpt id="p2">**</bpt>receiving messages from a subscription<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>deleting topics and subscriptions<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information on topics and subscriptions, see the <bpt id="p1">[</bpt>Next Steps<ept id="p1">](#next-steps)</ept> section.</source>
          <target state="new">For more information on topics and subscriptions, see the <bpt id="p1">[</bpt>Next Steps<ept id="p1">](#next-steps)</ept> section.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>What are Service Bus Topics and Subscriptions</source>
          <target state="new">What are Service Bus Topics and Subscriptions</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Service Bus topics and subscriptions support a <bpt id="p1">**</bpt>publish/subscribe
messaging communication<ept id="p1">**</ept> model.</source>
          <target state="new">Service Bus topics and subscriptions support a <bpt id="p1">**</bpt>publish/subscribe
messaging communication<ept id="p1">**</ept> model.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When using topics and subscriptions,</source>
          <target state="new">When using topics and subscriptions,</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>components of a distributed application do not communicate directly with</source>
          <target state="new">components of a distributed application do not communicate directly with</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>each other, they instead exchange messages via a topic, which acts as an</source>
          <target state="new">each other, they instead exchange messages via a topic, which acts as an</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>intermediary.</source>
          <target state="new">intermediary.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>TopicConcepts</source>
          <target state="new">TopicConcepts</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In contrast to Service Bus queues, where each message is processed by a</source>
          <target state="new">In contrast to Service Bus queues, where each message is processed by a</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>single consumer, topics and subscriptions provide a <bpt id="p1">**</bpt>one-to-many<ept id="p1">**</ept> form</source>
          <target state="new">single consumer, topics and subscriptions provide a <bpt id="p1">**</bpt>one-to-many<ept id="p1">**</ept> form</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>of communication, using a publish/subscribe pattern.</source>
          <target state="new">of communication, using a publish/subscribe pattern.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is possible to</source>
          <target state="new">It is possible to</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>register multiple subscriptions to a topic.</source>
          <target state="new">register multiple subscriptions to a topic.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When a message is sent to a</source>
          <target state="new">When a message is sent to a</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>topic, it is then made available to each subscription to handle/process</source>
          <target state="new">topic, it is then made available to each subscription to handle/process</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>independently.</source>
          <target state="new">independently.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A topic subscription resembles a virtual queue that receives copies of</source>
          <target state="new">A topic subscription resembles a virtual queue that receives copies of</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>the messages that were sent to the topic.</source>
          <target state="new">the messages that were sent to the topic.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can optionally register</source>
          <target state="new">You can optionally register</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>filter rules for a topic on a per-subscription basis, which allows you</source>
          <target state="new">filter rules for a topic on a per-subscription basis, which allows you</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>to filter/restrict which messages to a topic are received by which topic</source>
          <target state="new">to filter/restrict which messages to a topic are received by which topic</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>subscriptions.</source>
          <target state="new">subscriptions.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Service Bus topics and subscriptions enable you to scale to process a</source>
          <target state="new">Service Bus topics and subscriptions enable you to scale to process a</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>very large number of messages across a very large number of users and</source>
          <target state="new">very large number of messages across a very large number of users and</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>applications.</source>
          <target state="new">applications.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a Service Namespace</source>
          <target state="new">Create a Service Namespace</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To begin using Service Bus queues in Azure, you must first create a service namespace.</source>
          <target state="new">To begin using Service Bus queues in Azure, you must first create a service namespace.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A service namespace provides a scoping container for addressing Service Bus resources within</source>
          <target state="new">A service namespace provides a scoping container for addressing Service Bus resources within</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>your application.</source>
          <target state="new">your application.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You must create the namespace through the command-line interface because the Portal does not create the service bus with an ACS connection.</source>
          <target state="new">You must create the namespace through the command-line interface because the Portal does not create the service bus with an ACS connection.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To create a namespace:</source>
          <target state="new">To create a namespace:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Open an Azure Powershell console.</source>
          <target state="new">Open an Azure Powershell console.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Type the command to create an Azure service bus namespace as shown below.</source>
          <target state="new">Type the command to create an Azure service bus namespace as shown below.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Provide your own namespace value and specify the same region as your application.</source>
          <target state="new">Provide your own namespace value and specify the same region as your application.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true</source>
          <target state="new">New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Create Namespace</source>
          <target state="new">Create Namespace</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Obtain Default Management Credentials for the Namespace</source>
          <target state="new">Obtain Default Management Credentials for the Namespace</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In order to perform management operations, such as creating a queue on the new</source>
          <target state="new">In order to perform management operations, such as creating a queue on the new</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>namespace, you must obtain the management credentials for the namespace.</source>
          <target state="new">namespace, you must obtain the management credentials for the namespace.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The PowerShell cmdlet you ran to create the Azure service bus namespace displays</source>
          <target state="new">The PowerShell cmdlet you ran to create the Azure service bus namespace displays</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>the key you can use to manage the namespace.</source>
          <target state="new">the key you can use to manage the namespace.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>DefaultKey<ept id="p1">**</ept> value.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>DefaultKey<ept id="p1">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You</source>
          <target state="new">You</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>will use this value in your code later in this tutorial.</source>
          <target state="new">will use this value in your code later in this tutorial.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also find this key if you log on to the</source>
          <target state="new">You can also find this key if you log on to the</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Azure Portal<ept id="p1">](http://manage.windowsazure.com/)</ept> and navigate to the</source>
          <target state="new"><bpt id="p1">[</bpt>Azure Portal<ept id="p1">](http://manage.windowsazure.com/)</ept> and navigate to the</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>connection information for your service bus namespace.</source>
          <target state="new">connection information for your service bus namespace.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a Ruby Application</source>
          <target state="new">Create a Ruby Application</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create a Ruby application.</source>
          <target state="new">Create a Ruby application.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For instructions, see <bpt id="p1">[</bpt>Create a Ruby Application on Azure<ept id="p1">](/develop/ruby/tutorials/web-app-with-linux-vm/)</ept>.</source>
          <target state="new">For instructions, see <bpt id="p1">[</bpt>Create a Ruby Application on Azure<ept id="p1">](/develop/ruby/tutorials/web-app-with-linux-vm/)</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Configure Your Application to Use Service Bus</source>
          <target state="new">Configure Your Application to Use Service Bus</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.</source>
          <target state="new">To use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use RubyGems to obtain the package</source>
          <target state="new">Use RubyGems to obtain the package</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Use a command-line interface such as <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows), <bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac), or <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix).</source>
          <target state="new">Use a command-line interface such as <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows), <bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac), or <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix).</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Type "gem install azure" in the command window to install the gem and dependencies.</source>
          <target state="new">Type "gem install azure" in the command window to install the gem and dependencies.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Import the package</source>
          <target state="new">Import the package</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:</source>
          <target state="new">Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Setup an Azure Service Bus Connection</source>
          <target state="new">Setup an Azure Service Bus Connection</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The azure module will read the environment variables <bpt id="p1">**</bpt>AZURE\_SERVICEBUS\_NAMESPACE<ept id="p1">**</ept> and <bpt id="p2">**</bpt>AZURE\_SERVICEBUS\_ACCESS\_KEY<ept id="p2">**</ept></source>
          <target state="new">The azure module will read the environment variables <bpt id="p1">**</bpt>AZURE\_SERVICEBUS\_NAMESPACE<ept id="p1">**</ept> and <bpt id="p2">**</bpt>AZURE\_SERVICEBUS\_ACCESS\_KEY<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>for information required to connect to your Azure service bus namespace.</source>
          <target state="new">for information required to connect to your Azure service bus namespace.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If these environment variables are not set, you must specify the namespace information before using <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> with the following code:</source>
          <target state="new">If these environment variables are not set, you must specify the namespace information before using <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> with the following code:</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Set the service bus namespace value to the value you created rather than the entire URL.</source>
          <target state="new">Set the service bus namespace value to the value you created rather than the entire URL.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, use <bpt id="p1">**</bpt>"yourexamplenamespace"<ept id="p1">**</ept>, not "yourexamplenamespace.servicebus.windows.net".</source>
          <target state="new">For example, use <bpt id="p1">**</bpt>"yourexamplenamespace"<ept id="p1">**</ept>, not "yourexamplenamespace.servicebus.windows.net".</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>How to Create a Topic</source>
          <target state="new">How to Create a Topic</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object lets you work with topics.</source>
          <target state="new">The <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object lets you work with topics.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following code creates an <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object.</source>
          <target state="new">The following code creates an <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To create a topic, use the <bpt id="p1">**</bpt>create\_topic()<ept id="p1">**</ept> method.</source>
          <target state="new">To create a topic, use the <bpt id="p1">**</bpt>create\_topic()<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following example creates a topic or print out the error if there is any.</source>
          <target state="new">The following example creates a topic or print out the error if there is any.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can also pass in a <bpt id="p1">**</bpt>Azure::ServiceBus::Topic<ept id="p1">**</ept> object with additional options, which allows you to override default topic settings such as message time to live or maximum queue size.</source>
          <target state="new">You can also pass in a <bpt id="p1">**</bpt>Azure::ServiceBus::Topic<ept id="p1">**</ept> object with additional options, which allows you to override default topic settings such as message time to live or maximum queue size.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:</source>
          <target state="new">The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>How to Create Subscriptions</source>
          <target state="new">How to Create Subscriptions</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Topic subscriptions are also created with the <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object.</source>
          <target state="new">Topic subscriptions are also created with the <bpt id="p1">**</bpt>Azure::ServiceBusService<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Subscriptions are named and can have an optional filter that restricts the set of messages delivered to the subscription's virtual queue.</source>
          <target state="new">Subscriptions are named and can have an optional filter that restricts the set of messages delivered to the subscription's virtual queue.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Subscriptions are persistent and will continue to exist until either they, or the topic they are associated with, are deleted.</source>
          <target state="new">Subscriptions are persistent and will continue to exist until either they, or the topic they are associated with, are deleted.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If your application contains logic to create a subscription, it should first check if the subscription already exists by using the getSubscription method.</source>
          <target state="new">If your application contains logic to create a subscription, it should first check if the subscription already exists by using the getSubscription method.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Create a Subscription with the default (MatchAll) Filter</source>
          <target state="new">Create a Subscription with the default (MatchAll) Filter</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.</source>
          <target state="new">The <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is the default filter that is used if no filter is specified when a new subscription is created.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is used, all messages published to the topic are placed in the subscription's virtual queue.</source>
          <target state="new">When the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter is used, all messages published to the topic are placed in the subscription's virtual queue.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example creates a subscription named "all-messages" and uses the default <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter.</source>
          <target state="new">The following example creates a subscription named "all-messages" and uses the default <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> filter.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="how-to-create-subscriptions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create Subscriptions with Filters</source>
          <target state="new"><ph id="ph1">&lt;a id="how-to-create-subscriptions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Create Subscriptions with Filters</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can also setup filters that allow you to scope which messages sent to a topic should show up within a specific topic subscription.</source>
          <target state="new">You can also setup filters that allow you to scope which messages sent to a topic should show up within a specific topic subscription.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The most flexible type of filter supported by subscriptions is the <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept>, which implements a subset of SQL92.</source>
          <target state="new">The most flexible type of filter supported by subscriptions is the <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept>, which implements a subset of SQL92.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>SQL filters operate on the properties of the messages that are published to the topic.</source>
          <target state="new">SQL filters operate on the properties of the messages that are published to the topic.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more details about the expressions that can be used with a SQL filter, review the <bpt id="p1">[</bpt>SqlFilter.SqlExpression<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx)</ept> syntax.</source>
          <target state="new">For more details about the expressions that can be used with a SQL filter, review the <bpt id="p1">[</bpt>SqlFilter.SqlExpression<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx)</ept> syntax.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Filters can be added to a subscription by using the <bpt id="p1">**</bpt>create\_rule()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">Filters can be added to a subscription by using the <bpt id="p1">**</bpt>create\_rule()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This method allows you to add new filters to an existing subscription.</source>
          <target state="new">This method allows you to add new filters to an existing subscription.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Since the default filter is applied automatically to all new subscriptions, you must first remove the default filter or the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> will override any other filters you may specify.</source>
          <target state="new">Since the default filter is applied automatically to all new subscriptions, you must first remove the default filter or the <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> will override any other filters you may specify.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can remove the default rule by using the <bpt id="p1">**</bpt>delete\_rule()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">You can remove the default rule by using the <bpt id="p1">**</bpt>delete\_rule()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The examples below creates a subscription named "high-messages" with a <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept> that only selects messages that have a custom <bpt id="p2">**</bpt>message\_number<ept id="p2">**</ept> property greater than 3:</source>
          <target state="new">The examples below creates a subscription named "high-messages" with a <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept> that only selects messages that have a custom <bpt id="p2">**</bpt>message\_number<ept id="p2">**</ept> property greater than 3:</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Similarly, the following example creates a subscription named "low-messages" with a <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept> that only selects messages that have a <bpt id="p2">**</bpt>message_number<ept id="p2">**</ept> property less than or equal to 3:</source>
          <target state="new">Similarly, the following example creates a subscription named "low-messages" with a <bpt id="p1">**</bpt>Azure::ServiceBus::SqlFilter<ept id="p1">**</ept> that only selects messages that have a <bpt id="p2">**</bpt>message_number<ept id="p2">**</ept> property less than or equal to 3:</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When a message is now sent to "test-topic", it will always be delivered to receivers subscribed to the "all-messages" topic subscription, and selectively delivered to receivers subscribed to the "high-messages" and "low-messages" topic subscriptions (depending upon the message content).</source>
          <target state="new">When a message is now sent to "test-topic", it will always be delivered to receivers subscribed to the "all-messages" topic subscription, and selectively delivered to receivers subscribed to the "high-messages" and "low-messages" topic subscriptions (depending upon the message content).</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>How to Send Messages to a Topic</source>
          <target state="new">How to Send Messages to a Topic</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>To send a message to a Service Bus topic, your application must use the <bpt id="p1">**</bpt>send\_topic\_message()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">To send a message to a Service Bus topic, your application must use the <bpt id="p1">**</bpt>send\_topic\_message()<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Messages sent to Service Bus Topics are <bpt id="p1">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id="p1">**</ept> objects.</source>
          <target state="new">Messages sent to Service Bus Topics are <bpt id="p1">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id="p1">**</ept> objects.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id="p1">**</ept> objects have a set of standard properties (such as <bpt id="p2">**</bpt>label<ept id="p2">**</ept> and <bpt id="p3">**</bpt>time\_to\_live<ept id="p3">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of string data.</source>
          <target state="new"><bpt id="p1">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id="p1">**</ept> objects have a set of standard properties (such as <bpt id="p2">**</bpt>label<ept id="p2">**</ept> and <bpt id="p3">**</bpt>time\_to\_live<ept id="p3">**</ept>), a dictionary that is used to hold custom application specific properties, and a body of string data.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An application can set the body of the message by passing a string value to the <bpt id="p1">**</bpt>send\_topic\_message()<ept id="p1">**</ept> method and any required standard properties will be populated by default values.</source>
          <target state="new">An application can set the body of the message by passing a string value to the <bpt id="p1">**</bpt>send\_topic\_message()<ept id="p1">**</ept> method and any required standard properties will be populated by default values.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send five test messages to "test-topic".</source>
          <target state="new">The following example demonstrates how to send five test messages to "test-topic".</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>message_number<ept id="p1">**</ept> custom property value of each message varies on the iteration of the loop (this will determine which subscription receive it):</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>message_number<ept id="p1">**</ept> custom property value of each message varies on the iteration of the loop (this will determine which subscription receive it):</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Service Bus topics support a maximum message size of 256 MB (the header, which includes the standard and custom application properties, can have a maximum size of 64 MB).</source>
          <target state="new">Service Bus topics support a maximum message size of 256 MB (the header, which includes the standard and custom application properties, can have a maximum size of 64 MB).</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.</source>
          <target state="new">There is no limit on the number of messages held in a topic but there is a cap on the total size of the messages held by a topic.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This topic size is defined at creation time, with an upper limit of 5 GB.</source>
          <target state="new">This topic size is defined at creation time, with an upper limit of 5 GB.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>How to Receive Messages from a Subscription</source>
          <target state="new">How to Receive Messages from a Subscription</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Messages are received from a subscription using the <bpt id="p1">**</bpt>receive\_subscription\_message()<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">Messages are received from a subscription using the <bpt id="p1">**</bpt>receive\_subscription\_message()<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>By default, messages are read(peak) and locked without deleting it from the subscription.</source>
          <target state="new">By default, messages are read(peak) and locked without deleting it from the subscription.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can read and delete the message from the subscription by setting the <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> option to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
          <target state="new">You can read and delete the message from the subscription by setting the <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> option to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</source>
          <target state="new">The default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
          <target state="new">When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method and providing the message to be deleted as a parameter.</source>
          <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method and providing the message to be deleted as a parameter.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the subscription.</source>
          <target state="new">The <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method will mark the message as being consumed and remove it from the subscription.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>:peek\_lock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</source>
          <target state="new">If the <bpt id="p1">**</bpt>:peek\_lock<ept id="p1">**</ept> parameter is set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
          <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
          <target state="new">Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how messages can be received and processed using <bpt id="p1">**</bpt>receive\_subscription\_message()<ept id="p1">**</ept>.</source>
          <target state="new">The example below demonstrates how messages can be received and processed using <bpt id="p1">**</bpt>receive\_subscription\_message()<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The example first receives and deletes a message from the "low-messages" subscription by using <bpt id="p1">**</bpt>:peek\_lock<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, then it receives another message from the "high-messages" and then deletes the message using <bpt id="p3">**</bpt>delete\_subscription\_message()<ept id="p3">**</ept>:</source>
          <target state="new">The example first receives and deletes a message from the "low-messages" subscription by using <bpt id="p1">**</bpt>:peek\_lock<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, then it receives another message from the "high-messages" and then deletes the message using <bpt id="p3">**</bpt>delete\_subscription\_message()<ept id="p3">**</ept>:</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>How to Handle Application Crashes and Unreadable Messages</source>
          <target state="new">How to Handle Application Crashes and Unreadable Messages</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Service bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</source>
          <target state="new">Service bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlock\_subscription\_message()<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</source>
          <target state="new">If a receiver application is unable to process the message for some reason, then it can call the <bpt id="p1">**</bpt>unlock\_subscription\_message()<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>Azure::ServiceBusService<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This will cause service bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.</source>
          <target state="new">This will cause service bus to unlock the message within the subscription and make it available to be received again, either by the same consuming application or by another consuming application.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>There is also a timeout associated with a message locked within the subscription, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.</source>
          <target state="new">There is also a timeout associated with a message locked within the subscription, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</source>
          <target state="new">In the event that the application crashes after processing the message but before the <bpt id="p1">**</bpt>delete\_subscription\_message()<ept id="p1">**</ept> method is called, then the message will be redelivered to the application when it restarts.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</source>
          <target state="new">This is often called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</source>
          <target state="new">If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This is often achieved using the <bpt id="p1">**</bpt>message\_id<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</source>
          <target state="new">This is often achieved using the <bpt id="p1">**</bpt>message\_id<ept id="p1">**</ept> property of the message, which will remain constant across delivery attempts.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>How to Delete Topics and Subscriptions</source>
          <target state="new">How to Delete Topics and Subscriptions</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Topics and subscriptions are persistent, and must be explicitly deleted either through the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](https://manage.windowsazure.com)</ept> or programmatically.</source>
          <target state="new">Topics and subscriptions are persistent, and must be explicitly deleted either through the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](https://manage.windowsazure.com)</ept> or programmatically.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to delete the topic named "test-topic".</source>
          <target state="new">The example below demonstrates how to delete the topic named "test-topic".</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Deleting a topic will also delete any subscriptions that are registered with the topic.</source>
          <target state="new">Deleting a topic will also delete any subscriptions that are registered with the topic.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Subscriptions can also be deleted independently.</source>
          <target state="new">Subscriptions can also be deleted independently.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to delete the subscription named "high-messages" from the "test-topic" topic:</source>
          <target state="new">The following code demonstrates how to delete the subscription named "high-messages" from the "test-topic" topic:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of Service Bus topics, follow these links to learn more.</source>
          <target state="new">Now that you've learned the basics of Service Bus topics, follow these links to learn more.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/hh367516.aspx)</ept></source>
          <target state="new">See the MSDN Reference: <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/hh367516.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>API reference for <bpt id="p1">[</bpt>SqlFilter<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.aspx)</ept></source>
          <target state="new">API reference for <bpt id="p1">[</bpt>SqlFilter<ept id="p1">](http://msdn.microsoft.com/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure SDK for Ruby<ept id="p1">](https://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> repository on GitHub</source>
          <target state="new">Visit the <bpt id="p1">[</bpt>Azure SDK for Ruby<ept id="p1">](https://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> repository on GitHub</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46da4f524071a3089a92c61e21cb71a53bbee600</xliffext:olfilehash>
  </header>
</xliff>