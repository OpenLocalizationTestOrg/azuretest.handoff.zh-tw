{
  "nodes": [
    {
      "content": "How to use Table storage from .NET | Microsoft Azure",
      "pos": [
        27,
        79
      ]
    },
    {
      "content": "Learn how to use Microsoft Azure Table storage to create and delete tables and insert and query entities in a table.",
      "pos": [
        98,
        214
      ]
    },
    {
      "content": "How to use Table storage from .NET",
      "pos": [
        515,
        549
      ]
    },
    {
      "content": "Overview",
      "pos": [
        654,
        662
      ]
    },
    {
      "content": "This article will show you how to perform common scenarios by using the",
      "pos": [
        664,
        735
      ]
    },
    {
      "content": "Azure Table storage service.",
      "pos": [
        736,
        764
      ]
    },
    {
      "content": "The samples are written in C\\# code",
      "pos": [
        765,
        800
      ]
    },
    {
      "content": "and use the Azure Storage Client Library for .NET.",
      "pos": [
        801,
        851
      ]
    },
    {
      "content": "The scenarios covered include creating and",
      "pos": [
        852,
        894
      ]
    },
    {
      "content": "deleting a table, as well as working with table entities.",
      "pos": [
        895,
        952
      ]
    },
    {
      "content": "Programmatically access Table storage",
      "pos": [
        1413,
        1450
      ]
    },
    {
      "content": "Namespace declarations",
      "pos": [
        1556,
        1578
      ]
    },
    {
      "content": "Add the following code namespace declarations to the top of any C\\# file",
      "pos": [
        1579,
        1651
      ]
    },
    {
      "content": "in which you wish to programmatically access Azure Storage.",
      "pos": [
        1652,
        1711
      ]
    },
    {
      "pos": [
        1851,
        1925
      ],
      "content": "Make sure you reference the <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly."
    },
    {
      "content": "Create a table",
      "pos": [
        2040,
        2054
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> object lets you get reference objects for tables",
      "pos": [
        2056,
        2127
      ]
    },
    {
      "content": "and entities.",
      "pos": [
        2128,
        2141
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> object",
      "pos": [
        2142,
        2198
      ]
    },
    {
      "content": "and uses it to create a new table.",
      "pos": [
        2199,
        2233
      ]
    },
    {
      "content": "All code in this article assumes that",
      "pos": [
        2234,
        2271
      ]
    },
    {
      "content": "the application being built is an Azure Cloud Services project and",
      "pos": [
        2272,
        2338
      ]
    },
    {
      "content": "uses a storage connection string stored in the Azure application's service configuration.",
      "pos": [
        2339,
        2428
      ]
    },
    {
      "content": "Add an entity to a table",
      "pos": [
        2890,
        2914
      ]
    },
    {
      "content": "Entities map to C\\# objects by using a custom class derived from",
      "pos": [
        2916,
        2980
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>TableEntity<ept id=\"p1\">**</ept>.",
      "pos": [
        2981,
        2997
      ]
    },
    {
      "content": "To add an entity to a table, create a",
      "pos": [
        2998,
        3035
      ]
    },
    {
      "content": "class that defines the properties of your entity.",
      "pos": [
        3036,
        3085
      ]
    },
    {
      "content": "The following code",
      "pos": [
        3086,
        3104
      ]
    },
    {
      "content": "defines an entity class that uses the customer's first name as the row",
      "pos": [
        3105,
        3175
      ]
    },
    {
      "content": "key and last name as the partition key.",
      "pos": [
        3176,
        3215
      ]
    },
    {
      "content": "Together, an entity's partition",
      "pos": [
        3216,
        3247
      ]
    },
    {
      "content": "and row key uniquely identify the entity in the table.",
      "pos": [
        3248,
        3302
      ]
    },
    {
      "content": "Entities with the",
      "pos": [
        3303,
        3320
      ]
    },
    {
      "content": "same partition key can be queried faster than those with different",
      "pos": [
        3321,
        3387
      ]
    },
    {
      "content": "partition keys, but using diverse partition keys allows for greater scalability of parallel operations.",
      "pos": [
        3388,
        3491
      ]
    },
    {
      "content": "For any property that should be stored in the Table service,",
      "pos": [
        3493,
        3553
      ]
    },
    {
      "content": "the property must be a public property of a supported type that exposes both <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph>.",
      "pos": [
        3554,
        3647
      ]
    },
    {
      "content": "Also, your entity type <bpt id=\"p1\">*</bpt>must<ept id=\"p1\">*</ept> expose a parameter-less constructor.",
      "pos": [
        3648,
        3714
      ]
    },
    {
      "content": "Table operations that involve entities are performed via the <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept>",
      "pos": [
        4068,
        4143
      ]
    },
    {
      "content": "object that you created earlier in the \"Create a table\" section.",
      "pos": [
        4144,
        4208
      ]
    },
    {
      "content": "The operation to be performed",
      "pos": [
        4209,
        4238
      ]
    },
    {
      "content": "is represented by a <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> object.",
      "pos": [
        4239,
        4285
      ]
    },
    {
      "content": "The following code example shows the creation of the <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> object and then a <bpt id=\"p2\">**</bpt>CustomerEntity<ept id=\"p2\">**</ept> object.",
      "pos": [
        4287,
        4399
      ]
    },
    {
      "content": "To prepare the operation, a <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> object is created to insert the customer entity into the table.",
      "pos": [
        4401,
        4511
      ]
    },
    {
      "content": "Finally, the operation is executed by calling <bpt id=\"p1\">**</bpt>CloudTable.Execute<ept id=\"p1\">**</ept>.",
      "pos": [
        4513,
        4582
      ]
    },
    {
      "content": "Insert a batch of entities",
      "pos": [
        5454,
        5480
      ]
    },
    {
      "content": "You can insert a batch of entities into a table in one write",
      "pos": [
        5482,
        5542
      ]
    },
    {
      "content": "operation.",
      "pos": [
        5543,
        5553
      ]
    },
    {
      "content": "Some other notes on batch",
      "pos": [
        5554,
        5579
      ]
    },
    {
      "content": "operations:",
      "pos": [
        5580,
        5591
      ]
    },
    {
      "content": "You can perform updates, deletes, and inserts in the same single batch operation.",
      "pos": [
        5596,
        5677
      ]
    },
    {
      "content": "A single batch operation can include up to 100 entities.",
      "pos": [
        5681,
        5737
      ]
    },
    {
      "pos": [
        5741,
        5819
      ],
      "content": "All entities in a single batch operation must have the same\n partition key.",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "All entities in a single batch operation must have the same",
          "pos": [
            0,
            59
          ]
        },
        {
          "content": "partition key.",
          "pos": [
            61,
            75
          ]
        }
      ]
    },
    {
      "content": "While it is possible to perform a query as a batch operation, it must be the only operation in the batch.",
      "pos": [
        5823,
        5928
      ]
    },
    {
      "content": "The following code example creates two entity objects and adds each",
      "pos": [
        5939,
        6006
      ]
    },
    {
      "content": "to <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> by using the <bpt id=\"p2\">**</bpt>Insert<ept id=\"p2\">**</ept> method.",
      "pos": [
        6007,
        6065
      ]
    },
    {
      "content": "Then, <bpt id=\"p1\">**</bpt>CloudTable.Execute<ept id=\"p1\">**</ept> is called to execute the operation.",
      "pos": [
        6066,
        6130
      ]
    },
    {
      "content": "// Retrieve the storage account from the connection string.",
      "pos": [
        6136,
        6195
      ]
    },
    {
      "content": "CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.",
      "pos": [
        6200,
        6370
      ]
    },
    {
      "content": "CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.",
      "pos": [
        6375,
        6519
      ]
    },
    {
      "content": "CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the batch operation.",
      "pos": [
        6524,
        6619
      ]
    },
    {
      "content": "TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.",
      "pos": [
        6624,
        6745
      ]
    },
    {
      "content": "CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.",
      "pos": [
        6750,
        6963
      ]
    },
    {
      "content": "CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.",
      "pos": [
        6968,
        7181
      ]
    },
    {
      "content": "batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.",
      "pos": [
        7186,
        7294
      ]
    },
    {
      "content": "table.ExecuteBatch(batchOperation);\n\n## Retrieve all entities in a partition\n\nTo query a table for all entities in a partition, use a <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> object.",
      "pos": [
        7299,
        7455
      ]
    },
    {
      "content": "The following code example specifies a filter for entities where 'Smith'",
      "pos": [
        7456,
        7528
      ]
    },
    {
      "content": "is the partition key.",
      "pos": [
        7529,
        7550
      ]
    },
    {
      "content": "This example prints the fields of",
      "pos": [
        7551,
        7584
      ]
    },
    {
      "content": "each entity in the query results to the console.",
      "pos": [
        7585,
        7633
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery</ph>",
      "pos": [
        7639,
        8193
      ]
    },
    {
      "content": "query = new TableQuery",
      "pos": [
        8210,
        8232
      ]
    },
    {
      "content": "().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n\n    // Print the fields for each customer.",
      "pos": [
        8248,
        8386
      ]
    },
    {
      "content": "foreach (CustomerEntity entity in table.ExecuteQuery(query))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## Retrieve a range of entities in a partition\n\nIf you don't want to query all the entities in a partition, you can",
      "pos": [
        8391,
        8711
      ]
    },
    {
      "content": "specify a range by combining the partition key filter with a row key filter.",
      "pos": [
        8712,
        8788
      ]
    },
    {
      "content": "The following code example",
      "pos": [
        8789,
        8815
      ]
    },
    {
      "content": "uses two filters to get all entities in partition 'Smith' where the row",
      "pos": [
        8816,
        8887
      ]
    },
    {
      "content": "key (first name) starts with a letter earlier than 'E' in the alphabet and then",
      "pos": [
        8888,
        8967
      ]
    },
    {
      "content": "prints the query results.",
      "pos": [
        8968,
        8993
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the table query.\n    TableQuery</ph>",
      "pos": [
        8999,
        9493
      ]
    },
    {
      "content": "rangeQuery = new TableQuery",
      "pos": [
        9510,
        9537
      ]
    },
    {
      "content": "().Where(",
      "pos": [
        9553,
        9562
      ]
    },
    {
      "content": "TableQuery.CombineFilters(",
      "pos": [
        9571,
        9597
      ]
    },
    {
      "content": "TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"),",
      "pos": [
        9610,
        9694
      ]
    },
    {
      "content": "TableOperators.And,",
      "pos": [
        9707,
        9726
      ]
    },
    {
      "content": "TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.LessThan, \"E\")));\n\n    // Loop through the results, displaying information about the entity.",
      "pos": [
        9739,
        9893
      ]
    },
    {
      "content": "foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## Retrieve a single entity\n\nYou can write a query to retrieve a single, specific entity.",
      "pos": [
        9898,
        10197
      ]
    },
    {
      "content": "The",
      "pos": [
        10198,
        10201
      ]
    },
    {
      "content": "following code uses <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> to specify the customer 'Ben Smith'.",
      "pos": [
        10202,
        10277
      ]
    },
    {
      "content": "This method returns just one entity rather than a",
      "pos": [
        10278,
        10327
      ]
    },
    {
      "content": "collection, and the returned value in <bpt id=\"p1\">**</bpt>TableResult.Result<ept id=\"p1\">**</ept> is a <bpt id=\"p2\">**</bpt>CustomerEntity<ept id=\"p2\">**</ept> object.",
      "pos": [
        10328,
        10420
      ]
    },
    {
      "content": "Specifying both partition and row keys in a query is the fastest way to",
      "pos": [
        10421,
        10492
      ]
    },
    {
      "content": "retrieve a single entity from the Table service.",
      "pos": [
        10493,
        10541
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve</ph>",
      "pos": [
        10547,
        11123
      ]
    },
    {
      "content": "(\"Smith\", \"Ben\");\n\n    // Execute the retrieve operation.",
      "pos": [
        11139,
        11196
      ]
    },
    {
      "content": "TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Print the phone number of the result.",
      "pos": [
        11201,
        11310
      ]
    },
    {
      "content": "if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n## Replace an entity\n\nTo update an entity, retrieve it from the Table service, modify the",
      "pos": [
        11315,
        11600
      ]
    },
    {
      "content": "entity object, and then save the changes back to the Table service.",
      "pos": [
        11601,
        11668
      ]
    },
    {
      "content": "The",
      "pos": [
        11669,
        11672
      ]
    },
    {
      "content": "following code changes an existing customer's phone number.",
      "pos": [
        11673,
        11732
      ]
    },
    {
      "content": "Instead of",
      "pos": [
        11733,
        11743
      ]
    },
    {
      "content": "calling <bpt id=\"p1\">**</bpt>Insert<ept id=\"p1\">**</ept>, this code uses",
      "pos": [
        11744,
        11778
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept>.",
      "pos": [
        11779,
        11791
      ]
    },
    {
      "content": "This causes the entity to be fully replaced on the server,",
      "pos": [
        11792,
        11850
      ]
    },
    {
      "content": "unless the entity on the server has changed since it was retrieved, in",
      "pos": [
        11851,
        11921
      ]
    },
    {
      "content": "which case the operation will fail.",
      "pos": [
        11922,
        11957
      ]
    },
    {
      "content": "This failure is to prevent your application",
      "pos": [
        11959,
        12002
      ]
    },
    {
      "content": "from inadvertently overwriting a change made between the retrieval and",
      "pos": [
        12003,
        12073
      ]
    },
    {
      "content": "update by another component of your application.",
      "pos": [
        12074,
        12122
      ]
    },
    {
      "content": "The proper handling of this failure",
      "pos": [
        12124,
        12159
      ]
    },
    {
      "content": "is to retrieve the entity again, make your changes (if still valid), and then",
      "pos": [
        12160,
        12237
      ]
    },
    {
      "content": "perform another <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> operation.",
      "pos": [
        12238,
        12276
      ]
    },
    {
      "content": "The next section will",
      "pos": [
        12278,
        12299
      ]
    },
    {
      "content": "show you how to override this behavior.",
      "pos": [
        12300,
        12339
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve</ph>",
      "pos": [
        12345,
        12921
      ]
    },
    {
      "content": "(\"Smith\", \"Ben\");\n\n    // Execute the operation.",
      "pos": [
        12937,
        12985
      ]
    },
    {
      "content": "TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.",
      "pos": [
        12990,
        13107
      ]
    },
    {
      "content": "CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.",
      "pos": [
        13112,
        13253
      ]
    },
    {
      "content": "updateEntity.PhoneNumber = \"425-555-0105\";\n\n       // Create the InsertOrReplace TableOperation.",
      "pos": [
        13261,
        13357
      ]
    },
    {
      "content": "TableOperation updateOperation = TableOperation.Replace(updateEntity);\n\n       // Execute the operation.",
      "pos": [
        13365,
        13469
      ]
    },
    {
      "content": "table.Execute(updateOperation);\n\n       Console.WriteLine(\"Entity updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## Insert-or-replace an entity\n\n<bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> operations will fail if the entity has been changed since",
      "pos": [
        13477,
        13733
      ]
    },
    {
      "content": "it was retrieved from the server.",
      "pos": [
        13734,
        13767
      ]
    },
    {
      "content": "Furthermore, you must retrieve",
      "pos": [
        13769,
        13799
      ]
    },
    {
      "content": "the entity from the server first in order for the <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> operation to be successful.",
      "pos": [
        13800,
        13889
      ]
    },
    {
      "content": "Sometimes, however, you don't know if the entity exists on the server",
      "pos": [
        13890,
        13959
      ]
    },
    {
      "content": "and the current values stored in it are irrelevant.",
      "pos": [
        13960,
        14011
      ]
    },
    {
      "content": "Your update should",
      "pos": [
        14012,
        14030
      ]
    },
    {
      "content": "overwrite them all.",
      "pos": [
        14031,
        14050
      ]
    },
    {
      "content": "To accomplish this, you would use an <bpt id=\"p1\">**</bpt>InsertOrReplace<ept id=\"p1\">**</ept>",
      "pos": [
        14052,
        14108
      ]
    },
    {
      "content": "operation.",
      "pos": [
        14109,
        14119
      ]
    },
    {
      "content": "This operation inserts the entity if it doesn't exist, or",
      "pos": [
        14121,
        14178
      ]
    },
    {
      "content": "replaces it if it does, regardless of when the last update was made.",
      "pos": [
        14179,
        14247
      ]
    },
    {
      "content": "In the",
      "pos": [
        14249,
        14255
      ]
    },
    {
      "content": "following code example, the customer entity for Ben Smith is still retrieved, but it is then saved back to the server via <bpt id=\"p1\">**</bpt>InsertOrReplace<ept id=\"p1\">**</ept>.",
      "pos": [
        14256,
        14398
      ]
    },
    {
      "content": "Any updates",
      "pos": [
        14400,
        14411
      ]
    },
    {
      "content": "made to the entity between the retrieval and update operations will be",
      "pos": [
        14412,
        14482
      ]
    },
    {
      "content": "overwritten.",
      "pos": [
        14483,
        14495
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve</ph>",
      "pos": [
        14501,
        15077
      ]
    },
    {
      "content": "(\"Smith\", \"Ben\");\n\n    // Execute the operation.",
      "pos": [
        15093,
        15141
      ]
    },
    {
      "content": "TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.",
      "pos": [
        15146,
        15263
      ]
    },
    {
      "content": "CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.",
      "pos": [
        15268,
        15409
      ]
    },
    {
      "content": "updateEntity.PhoneNumber = \"425-555-1234\";\n\n       // Create the InsertOrReplace TableOperation.",
      "pos": [
        15417,
        15513
      ]
    },
    {
      "content": "TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);\n\n       // Execute the operation.",
      "pos": [
        15521,
        15642
      ]
    },
    {
      "content": "table.Execute(insertOrReplaceOperation);\n\n       Console.WriteLine(\"Entity was updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## Query a subset of entity properties\n\nA table query can retrieve just a few properties from an entity instead of all the entity properties.",
      "pos": [
        15650,
        15959
      ]
    },
    {
      "content": "This technique, called projection, reduces bandwidth and can improve query performance, especially for large entities.",
      "pos": [
        15960,
        16078
      ]
    },
    {
      "content": "The query in the",
      "pos": [
        16079,
        16095
      ]
    },
    {
      "content": "following code returns only the email addresses of entities in the",
      "pos": [
        16096,
        16162
      ]
    },
    {
      "content": "table.",
      "pos": [
        16163,
        16169
      ]
    },
    {
      "content": "This is done by using a query of <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> and",
      "pos": [
        16170,
        16229
      ]
    },
    {
      "content": "also <bpt id=\"p1\">**</bpt>EntityResolver<ept id=\"p1\">**</ept>.",
      "pos": [
        16230,
        16254
      ]
    },
    {
      "content": "You can learn more about projection on the [Introducing Upsert and Query Projection blog post][].",
      "pos": [
        16255,
        16352
      ]
    },
    {
      "content": "Note that projection is not supported on the local storage emulator, so this code runs only when you're using an account on the Table service.",
      "pos": [
        16353,
        16495
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Define the query, and select only the Email property.\n    TableQuery</ph>",
      "pos": [
        16501,
        17018
      ]
    },
    {
      "content": "projectionQuery = new TableQuery",
      "pos": [
        17039,
        17071
      ]
    },
    {
      "content": "().Select(new string[] { \"Email\" });\n\n    <ph id=\"ph1\">// Define an entity resolver to work with the entity after retrieval.\n    EntityResolver</ph>",
      "pos": [
        17091,
        17221
      ]
    },
    {
      "content": "resolver = (pk, rk, ts, props, etag) =&gt; props.ContainsKey(\"Email\") ?",
      "pos": [
        17230,
        17298
      ]
    },
    {
      "content": "props[\"Email\"].StringValue : null;\n\n    foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))\n    {\n        Console.WriteLine(projectedEmail);\n    }\n\n## Delete an entity\n\nYou can easily delete an entity after you have retrieved it, by using the same pattern",
      "pos": [
        17299,
        17595
      ]
    },
    {
      "content": "shown for updating an entity.",
      "pos": [
        17596,
        17625
      ]
    },
    {
      "content": "The following code",
      "pos": [
        17627,
        17645
      ]
    },
    {
      "content": "retrieves and deletes a customer entity.",
      "pos": [
        17646,
        17686
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve</ph>",
      "pos": [
        17692,
        18263
      ]
    },
    {
      "content": "(\"Smith\", \"Ben\");\n\n    // Execute the operation.",
      "pos": [
        18279,
        18327
      ]
    },
    {
      "content": "TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity.",
      "pos": [
        18332,
        18442
      ]
    },
    {
      "content": "CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n\n    // Create the Delete TableOperation.",
      "pos": [
        18447,
        18558
      ]
    },
    {
      "content": "if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n\n       // Execute the operation.",
      "pos": [
        18563,
        18705
      ]
    },
    {
      "content": "table.Execute(deleteOperation);\n\n       Console.WriteLine(\"Entity deleted.\");\n    }\n\n    else\n       Console.WriteLine(\"Could not retrieve the entity.\");\n\n## Delete a table\n\nFinally, the following code example deletes a table from a storage account.",
      "pos": [
        18713,
        18962
      ]
    },
    {
      "content": "A",
      "pos": [
        18963,
        18964
      ]
    },
    {
      "content": "table that has been deleted will be unavailable to be re-created for a",
      "pos": [
        18965,
        19035
      ]
    },
    {
      "content": "period of time following the deletion.",
      "pos": [
        19036,
        19074
      ]
    },
    {
      "content": "// Retrieve the storage account from the connection string.",
      "pos": [
        19080,
        19139
      ]
    },
    {
      "content": "CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.",
      "pos": [
        19144,
        19314
      ]
    },
    {
      "content": "CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.",
      "pos": [
        19319,
        19456
      ]
    },
    {
      "content": "CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Delete the table it if exists.",
      "pos": [
        19461,
        19559
      ]
    },
    {
      "content": "table.DeleteIfExists();\n\n## Retrieve entities in pages asynchronously\n\nIf you are reading a large number of entities, and you want to process/display entities as they are retrieved rather than waiting for them all to return, you can retrieve entities by using a segmented query.",
      "pos": [
        19564,
        19842
      ]
    },
    {
      "content": "This example shows how to return results in pages by using the Async-Await pattern so that execution is not blocked while you're waiting for a large set of results to return.",
      "pos": [
        19843,
        20017
      ]
    },
    {
      "content": "For more details on using the Async-Await pattern in .NET, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Asynchronous programming with Async and Await (C# and Visual Basic)](https://msdn.microsoft.com/library/hh191443.aspx)</ept>.",
      "pos": [
        20018,
        20201
      ]
    },
    {
      "content": "<ph id=\"ph1\">// Initialize a default TableQuery to retrieve all the entities in the table.\n    TableQuery</ph>",
      "pos": [
        20207,
        20299
      ]
    },
    {
      "content": "tableQuery = new TableQuery",
      "pos": [
        20316,
        20343
      ]
    },
    {
      "content": "();\n\n    <ph id=\"ph1\">// Initialize the continuation token to null to start from the beginning of the table.\n    TableContinuationToken continuationToken = null;\n\n    do\n    {\n        // Retrieve a segment (up to 1,000 entities).\n        TableQuerySegment</ph>",
      "pos": [
        20359,
        20601
      ]
    },
    {
      "content": "tableQueryResult =",
      "pos": [
        20618,
        20636
      ]
    },
    {
      "content": "await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);\n\n        // Assign the new continuation token to tell the service where to\n        // continue on the next iteration (or null if it has reached the end).",
      "pos": [
        20649,
        20873
      ]
    },
    {
      "content": "continuationToken = tableQueryResult.ContinuationToken;\n\n        // Print the number of rows retrieved.",
      "pos": [
        20882,
        20985
      ]
    },
    {
      "content": "Console.WriteLine(\"Rows retrieved {0}\", tableQueryResult.Results.Count);\n\n    // Loop until a null continuation token is received, indicating the end of the table.",
      "pos": [
        20994,
        21157
      ]
    },
    {
      "content": "} while(continuationToken != null);\n\n## Next steps\n\nNow that you've learned the basics of Table storage, follow these links",
      "pos": [
        21162,
        21285
      ]
    },
    {
      "content": "to learn about more complex storage tasks:",
      "pos": [
        21286,
        21328
      ]
    },
    {
      "content": "View the Table service reference documentation for complete details about available APIs:",
      "pos": [
        21339,
        21428
      ]
    },
    {
      "content": "Storage Client Library for .NET reference<ph id=\"ph1\">&lt;/a&gt;</ph><ph id=\"ph2\">\n    </ph>",
      "pos": [
        21512,
        21562
      ]
    },
    {
      "content": "REST API reference",
      "pos": [
        21635,
        21653
      ]
    },
    {
      "content": "Learn about more advanced tasks you can perform with Azure Storage by reviewing <ph id=\"ph1\">&lt;a href=\"http://msdn.microsoft.com/library/azure/gg433040.aspx\"&gt;</ph>Azure Storage documentation<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        21681,
        21857
      ]
    },
    {
      "content": "Learn how to simplify the code you write to work with Azure Storage by using the <ph id=\"ph1\">&lt;a href=\"../websites-dotnet-webjobs-sdk/\"&gt;</ph>Azure WebJobs SDK<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        21867,
        22012
      ]
    },
    {
      "content": "View more feature guides to learn about additional options for storing data in Azure:",
      "pos": [
        22022,
        22107
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/storage-dotnet-how-to-use-blobs/\"&gt;</ph>Blob storage<ph id=\"ph2\">&lt;/a&gt;</ph> to store unstructured data.",
      "pos": [
        22123,
        22238
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/storage-dotnet-how-to-use-queues/\"&gt;</ph>Queue storage<ph id=\"ph2\">&lt;/a&gt;</ph> to store structured data.",
      "pos": [
        22252,
        22367
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/sql-database-dotnet-how-to-use/\"&gt;</ph>SQL Database<ph id=\"ph2\">&lt;/a&gt;</ph> to store relational data.",
      "pos": [
        22381,
        22493
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Table storage from .NET | Microsoft Azure\"\n    description=\"Learn how to use Microsoft Azure Table storage to create and delete tables and insert and query entities in a table.\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\"\n    ms.date=\"08/04/2015\"\n    ms.author=\"tamram\"/>\n\n\n# How to use Table storage from .NET\n\n[AZURE.INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\n\n## Overview\n\nThis article will show you how to perform common scenarios by using the\nAzure Table storage service. The samples are written in C\\# code\nand use the Azure Storage Client Library for .NET. The scenarios covered include creating and\ndeleting a table, as well as working with table entities.\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../../includes/storage-configure-connection-string-include.md)]\n\n## Programmatically access Table storage\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../../includes/storage-dotnet-obtain-assembly.md)]\n\n### Namespace declarations\nAdd the following code namespace declarations to the top of any C\\# file\nin which you wish to programmatically access Azure Storage.\n\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Table;\n\nMake sure you reference the `Microsoft.WindowsAzure.Storage.dll` assembly.\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../../includes/storage-dotnet-retrieve-conn-string.md)]\n\n## Create a table\n\nA **CloudTableClient** object lets you get reference objects for tables\nand entities. The following code creates a **CloudTableClient** object\nand uses it to create a new table. All code in this article assumes that\nthe application being built is an Azure Cloud Services project and\nuses a storage connection string stored in the Azure application's service configuration.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the table if it doesn't exist.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    table.CreateIfNotExists();\n\n## Add an entity to a table\n\nEntities map to C\\# objects by using a custom class derived from\n**TableEntity**. To add an entity to a table, create a\nclass that defines the properties of your entity. The following code\ndefines an entity class that uses the customer's first name as the row\nkey and last name as the partition key. Together, an entity's partition\nand row key uniquely identify the entity in the table. Entities with the\nsame partition key can be queried faster than those with different\npartition keys, but using diverse partition keys allows for greater scalability of parallel operations.  For any property that should be stored in the Table service,\nthe property must be a public property of a supported type that exposes both `get` and `set`.\nAlso, your entity type *must* expose a parameter-less constructor.\n\n    public class CustomerEntity : TableEntity\n    {\n        public CustomerEntity(string lastName, string firstName)\n        {\n            this.PartitionKey = lastName;\n            this.RowKey = firstName;\n        }\n\n        public CustomerEntity() { }\n\n        public string Email { get; set; }\n\n        public string PhoneNumber { get; set; }\n    }\n\nTable operations that involve entities are performed via the **CloudTable**\nobject that you created earlier in the \"Create a table\" section. The operation to be performed\nis represented by a **TableOperation** object.  The following code example shows the creation of the **CloudTable** object and then a **CustomerEntity** object.  To prepare the operation, a **TableOperation** object is created to insert the customer entity into the table.  Finally, the operation is executed by calling **CloudTable.Execute**.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n       CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n\n    // Create the TableOperation object that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n\n    // Execute the insert operation.\n    table.Execute(insertOperation);\n\n## Insert a batch of entities\n\nYou can insert a batch of entities into a table in one write\noperation. Some other notes on batch\noperations:\n\n-  You can perform updates, deletes, and inserts in the same single batch operation.\n-  A single batch operation can include up to 100 entities.\n-  All entities in a single batch operation must have the same\n    partition key.\n-  While it is possible to perform a query as a batch operation, it must be the only operation in the batch.\n\n<!-- -->\nThe following code example creates two entity objects and adds each\nto **TableBatchOperation** by using the **Insert** method. Then, **CloudTable.Execute** is called to execute the operation.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.\n    table.ExecuteBatch(batchOperation);\n\n## Retrieve all entities in a partition\n\nTo query a table for all entities in a partition, use a **TableQuery** object.\nThe following code example specifies a filter for entities where 'Smith'\nis the partition key. This example prints the fields of\neach entity in the query results to the console.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n\n    // Print the fields for each customer.\n    foreach (CustomerEntity entity in table.ExecuteQuery(query))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## Retrieve a range of entities in a partition\n\nIf you don't want to query all the entities in a partition, you can\nspecify a range by combining the partition key filter with a row key filter. The following code example\nuses two filters to get all entities in partition 'Smith' where the row\nkey (first name) starts with a letter earlier than 'E' in the alphabet and then\nprints the query results.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the table query.\n    TableQuery<CustomerEntity> rangeQuery = new TableQuery<CustomerEntity>().Where(\n        TableQuery.CombineFilters(\n            TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"),\n            TableOperators.And,\n            TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.LessThan, \"E\")));\n\n    // Loop through the results, displaying information about the entity.\n    foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## Retrieve a single entity\n\nYou can write a query to retrieve a single, specific entity. The\nfollowing code uses **TableOperation** to specify the customer 'Ben Smith'.\nThis method returns just one entity rather than a\ncollection, and the returned value in **TableResult.Result** is a **CustomerEntity** object.\nSpecifying both partition and row keys in a query is the fastest way to\nretrieve a single entity from the Table service.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the retrieve operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n## Replace an entity\n\nTo update an entity, retrieve it from the Table service, modify the\nentity object, and then save the changes back to the Table service. The\nfollowing code changes an existing customer's phone number. Instead of\ncalling **Insert**, this code uses\n**Replace**. This causes the entity to be fully replaced on the server,\nunless the entity on the server has changed since it was retrieved, in\nwhich case the operation will fail.  This failure is to prevent your application\nfrom inadvertently overwriting a change made between the retrieval and\nupdate by another component of your application.  The proper handling of this failure\nis to retrieve the entity again, make your changes (if still valid), and then\nperform another **Replace** operation.  The next section will\nshow you how to override this behavior.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.\n       updateEntity.PhoneNumber = \"425-555-0105\";\n\n       // Create the InsertOrReplace TableOperation.\n       TableOperation updateOperation = TableOperation.Replace(updateEntity);\n\n       // Execute the operation.\n       table.Execute(updateOperation);\n\n       Console.WriteLine(\"Entity updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## Insert-or-replace an entity\n\n**Replace** operations will fail if the entity has been changed since\nit was retrieved from the server.  Furthermore, you must retrieve\nthe entity from the server first in order for the **Replace** operation to be successful.\nSometimes, however, you don't know if the entity exists on the server\nand the current values stored in it are irrelevant. Your update should\noverwrite them all.  To accomplish this, you would use an **InsertOrReplace**\noperation.  This operation inserts the entity if it doesn't exist, or\nreplaces it if it does, regardless of when the last update was made.  In the\nfollowing code example, the customer entity for Ben Smith is still retrieved, but it is then saved back to the server via **InsertOrReplace**.  Any updates\nmade to the entity between the retrieval and update operations will be\noverwritten.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.\n       updateEntity.PhoneNumber = \"425-555-1234\";\n\n       // Create the InsertOrReplace TableOperation.\n       TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);\n\n       // Execute the operation.\n       table.Execute(insertOrReplaceOperation);\n\n       Console.WriteLine(\"Entity was updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## Query a subset of entity properties\n\nA table query can retrieve just a few properties from an entity instead of all the entity properties. This technique, called projection, reduces bandwidth and can improve query performance, especially for large entities. The query in the\nfollowing code returns only the email addresses of entities in the\ntable. This is done by using a query of **DynamicTableEntity** and\nalso **EntityResolver**. You can learn more about projection on the [Introducing Upsert and Query Projection blog post][]. Note that projection is not supported on the local storage emulator, so this code runs only when you're using an account on the Table service.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Define the query, and select only the Email property.\n    TableQuery<DynamicTableEntity> projectionQuery = new TableQuery<DynamicTableEntity>().Select(new string[] { \"Email\" });\n\n    // Define an entity resolver to work with the entity after retrieval.\n    EntityResolver<string> resolver = (pk, rk, ts, props, etag) => props.ContainsKey(\"Email\") ? props[\"Email\"].StringValue : null;\n\n    foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))\n    {\n        Console.WriteLine(projectedEmail);\n    }\n\n## Delete an entity\n\nYou can easily delete an entity after you have retrieved it, by using the same pattern\nshown for updating an entity.  The following code\nretrieves and deletes a customer entity.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n\n    // Create the Delete TableOperation.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n\n       // Execute the operation.\n       table.Execute(deleteOperation);\n\n       Console.WriteLine(\"Entity deleted.\");\n    }\n\n    else\n       Console.WriteLine(\"Could not retrieve the entity.\");\n\n## Delete a table\n\nFinally, the following code example deletes a table from a storage account. A\ntable that has been deleted will be unavailable to be re-created for a\nperiod of time following the deletion.\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Delete the table it if exists.\n    table.DeleteIfExists();\n\n## Retrieve entities in pages asynchronously\n\nIf you are reading a large number of entities, and you want to process/display entities as they are retrieved rather than waiting for them all to return, you can retrieve entities by using a segmented query. This example shows how to return results in pages by using the Async-Await pattern so that execution is not blocked while you're waiting for a large set of results to return. For more details on using the Async-Await pattern in .NET, see [Asynchronous programming with Async and Await (C# and Visual Basic)](https://msdn.microsoft.com/library/hh191443.aspx).\n\n    // Initialize a default TableQuery to retrieve all the entities in the table.\n    TableQuery<CustomerEntity> tableQuery = new TableQuery<CustomerEntity>();\n\n    // Initialize the continuation token to null to start from the beginning of the table.\n    TableContinuationToken continuationToken = null;\n\n    do\n    {\n        // Retrieve a segment (up to 1,000 entities).\n        TableQuerySegment<CustomerEntity> tableQueryResult =\n            await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);\n\n        // Assign the new continuation token to tell the service where to\n        // continue on the next iteration (or null if it has reached the end).\n        continuationToken = tableQueryResult.ContinuationToken;\n\n        // Print the number of rows retrieved.\n        Console.WriteLine(\"Rows retrieved {0}\", tableQueryResult.Results.Count);\n\n    // Loop until a null continuation token is received, indicating the end of the table.\n    } while(continuationToken != null);\n\n## Next steps\n\nNow that you've learned the basics of Table storage, follow these links\nto learn about more complex storage tasks:\n\n<ul>\n<li>View the Table service reference documentation for complete details about available APIs:\n  <ul>\n    <li><a href=\"http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409\">Storage Client Library for .NET reference</a>\n    </li>\n    <li><a href=\"http://msdn.microsoft.com/library/azure/dd179355\">REST API reference</a></li>\n  </ul>\n</li>\n<li>Learn about more advanced tasks you can perform with Azure Storage by reviewing <a href=\"http://msdn.microsoft.com/library/azure/gg433040.aspx\">Azure Storage documentation</a>.</li>\n<li>Learn how to simplify the code you write to work with Azure Storage by using the <a href=\"../websites-dotnet-webjobs-sdk/\">Azure WebJobs SDK</a>.</li>\n<li>View more feature guides to learn about additional options for storing data in Azure:\n  <ul>\n    <li>Use <a href=\"/documentation/articles/storage-dotnet-how-to-use-blobs/\">Blob storage</a> to store unstructured data.</li>\n    <li>Use <a href=\"/documentation/articles/storage-dotnet-how-to-use-queues/\">Queue storage</a> to store structured data.</li>\n    <li>Use <a href=\"/documentation/articles/sql-database-dotnet-how-to-use/\">SQL Database</a> to store relational data.</li>\n  </ul>\n</li>\n</ul>\n\n  [Download and install the Azure SDK for .NET]: /develop/net/\n  [Creating an Azure Project in Visual Studio]: http://msdn.microsoft.com/library/azure/ee405487.aspx\n\n  [Blob5]: ./media/storage-dotnet-how-to-use-table-storage/blob5.png\n  [Blob6]: ./media/storage-dotnet-how-to-use-table-storage/blob6.png\n  [Blob7]: ./media/storage-dotnet-how-to-use-table-storage/blob7.png\n  [Blob8]: ./media/storage-dotnet-how-to-use-table-storage/blob8.png\n  [Blob9]: ./media/storage-dotnet-how-to-use-table-storage/blob9.png\n\n  [Introducing Upsert and Query Projection blog post]: http://blogs.msdn.com/b/windowsazurestorage/archive/2011/09/15/windows-azure-tables-introducing-upsert-and-query-projection.aspx\n  [.NET Client Library reference]: http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409\n  [Storing and accessing data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Azure Storage Team blog]: http://blogs.msdn.com/b/windowsazurestorage/\n  [Configure Azure Storage connection strings]: http://msdn.microsoft.com/library/azure/ee758697.aspx\n  [OData]: http://nuget.org/packages/Microsoft.Data.OData/5.0.2\n  [Edm]: http://nuget.org/packages/Microsoft.Data.Edm/5.0.2\n  [Spatial]: http://nuget.org/packages/System.Spatial/5.0.2\n  [How to: Programmatically access Table storage]: #tablestorage\n"
}