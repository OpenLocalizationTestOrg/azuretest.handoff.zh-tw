<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Table storage from .NET | Microsoft Azure</source>
          <target state="new">How to use Table storage from .NET | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Microsoft Azure Table storage to create and delete tables and insert and query entities in a table.</source>
          <target state="new">Learn how to use Microsoft Azure Table storage to create and delete tables and insert and query entities in a table.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use Table storage from .NET</source>
          <target state="new">How to use Table storage from .NET</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article will show you how to perform common scenarios by using the</source>
          <target state="new">This article will show you how to perform common scenarios by using the</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure Table storage service.</source>
          <target state="new">Azure Table storage service.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The samples are written in C\# code</source>
          <target state="new">The samples are written in C\# code</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>and use the Azure Storage Client Library for .NET.</source>
          <target state="new">and use the Azure Storage Client Library for .NET.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The scenarios covered include creating and</source>
          <target state="new">The scenarios covered include creating and</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>deleting a table, as well as working with table entities.</source>
          <target state="new">deleting a table, as well as working with table entities.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Programmatically access Table storage</source>
          <target state="new">Programmatically access Table storage</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Namespace declarations</source>
          <target state="new">Namespace declarations</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following code namespace declarations to the top of any C\# file</source>
          <target state="new">Add the following code namespace declarations to the top of any C\# file</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>in which you wish to programmatically access Azure Storage.</source>
          <target state="new">in which you wish to programmatically access Azure Storage.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make sure you reference the <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly.</source>
          <target state="new">Make sure you reference the <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create a table</source>
          <target state="new">Create a table</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object lets you get reference objects for tables</source>
          <target state="new">A <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object lets you get reference objects for tables</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>and entities.</source>
          <target state="new">and entities.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code creates a <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object</source>
          <target state="new">The following code creates a <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> object</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>and uses it to create a new table.</source>
          <target state="new">and uses it to create a new table.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All code in this article assumes that</source>
          <target state="new">All code in this article assumes that</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>the application being built is an Azure Cloud Services project and</source>
          <target state="new">the application being built is an Azure Cloud Services project and</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>uses a storage connection string stored in the Azure application's service configuration.</source>
          <target state="new">uses a storage connection string stored in the Azure application's service configuration.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add an entity to a table</source>
          <target state="new">Add an entity to a table</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Entities map to C\# objects by using a custom class derived from</source>
          <target state="new">Entities map to C\# objects by using a custom class derived from</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TableEntity<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>TableEntity<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To add an entity to a table, create a</source>
          <target state="new">To add an entity to a table, create a</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>class that defines the properties of your entity.</source>
          <target state="new">class that defines the properties of your entity.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code</source>
          <target state="new">The following code</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>defines an entity class that uses the customer's first name as the row</source>
          <target state="new">defines an entity class that uses the customer's first name as the row</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>key and last name as the partition key.</source>
          <target state="new">key and last name as the partition key.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Together, an entity's partition</source>
          <target state="new">Together, an entity's partition</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>and row key uniquely identify the entity in the table.</source>
          <target state="new">and row key uniquely identify the entity in the table.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Entities with the</source>
          <target state="new">Entities with the</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>same partition key can be queried faster than those with different</source>
          <target state="new">same partition key can be queried faster than those with different</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>partition keys, but using diverse partition keys allows for greater scalability of parallel operations.</source>
          <target state="new">partition keys, but using diverse partition keys allows for greater scalability of parallel operations.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For any property that should be stored in the Table service,</source>
          <target state="new">For any property that should be stored in the Table service,</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>the property must be a public property of a supported type that exposes both <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph>.</source>
          <target state="new">the property must be a public property of a supported type that exposes both <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also, your entity type <bpt id="p1">*</bpt>must<ept id="p1">*</ept> expose a parameter-less constructor.</source>
          <target state="new">Also, your entity type <bpt id="p1">*</bpt>must<ept id="p1">*</ept> expose a parameter-less constructor.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Table operations that involve entities are performed via the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept></source>
          <target state="new">Table operations that involve entities are performed via the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>object that you created earlier in the "Create a table" section.</source>
          <target state="new">object that you created earlier in the "Create a table" section.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The operation to be performed</source>
          <target state="new">The operation to be performed</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>is represented by a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object.</source>
          <target state="new">is represented by a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following code example shows the creation of the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object and then a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</source>
          <target state="new">The following code example shows the creation of the <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> object and then a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To prepare the operation, a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object is created to insert the customer entity into the table.</source>
          <target state="new">To prepare the operation, a <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> object is created to insert the customer entity into the table.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Finally, the operation is executed by calling <bpt id="p1">**</bpt>CloudTable.Execute<ept id="p1">**</ept>.</source>
          <target state="new">Finally, the operation is executed by calling <bpt id="p1">**</bpt>CloudTable.Execute<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Insert a batch of entities</source>
          <target state="new">Insert a batch of entities</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can insert a batch of entities into a table in one write</source>
          <target state="new">You can insert a batch of entities into a table in one write</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>operation.</source>
          <target state="new">operation.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Some other notes on batch</source>
          <target state="new">Some other notes on batch</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>operations:</source>
          <target state="new">operations:</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can perform updates, deletes, and inserts in the same single batch operation.</source>
          <target state="new">You can perform updates, deletes, and inserts in the same single batch operation.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A single batch operation can include up to 100 entities.</source>
          <target state="new">A single batch operation can include up to 100 entities.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>All entities in a single batch operation must have the same</source>
          <target state="new">All entities in a single batch operation must have the same</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>partition key.</source>
          <target state="new">partition key.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>While it is possible to perform a query as a batch operation, it must be the only operation in the batch.</source>
          <target state="new">While it is possible to perform a query as a batch operation, it must be the only operation in the batch.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following code example creates two entity objects and adds each</source>
          <target state="new">The following code example creates two entity objects and adds each</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>to <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> by using the <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept> method.</source>
          <target state="new">to <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> by using the <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Then, <bpt id="p1">**</bpt>CloudTable.Execute<ept id="p1">**</ept> is called to execute the operation.</source>
          <target state="new">Then, <bpt id="p1">**</bpt>CloudTable.Execute<ept id="p1">**</ept> is called to execute the operation.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>// Retrieve the storage account from the connection string.</source>
          <target state="new">// Retrieve the storage account from the connection string.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.</source>
          <target state="new">CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.</source>
          <target state="new">CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CloudTable table = tableClient.GetTableReference("people");

    // Create the batch operation.</source>
          <target state="new">CloudTable table = tableClient.GetTableReference("people");

    // Create the batch operation.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>TableBatchOperation batchOperation = new TableBatchOperation();

    // Create a customer entity and add it to the table.</source>
          <target state="new">TableBatchOperation batchOperation = new TableBatchOperation();

    // Create a customer entity and add it to the table.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CustomerEntity customer1 = new CustomerEntity("Smith", "Jeff");
    customer1.Email = "Jeff@contoso.com";
    customer1.PhoneNumber = "425-555-0104";

    // Create another customer entity and add it to the table.</source>
          <target state="new">CustomerEntity customer1 = new CustomerEntity("Smith", "Jeff");
    customer1.Email = "Jeff@contoso.com";
    customer1.PhoneNumber = "425-555-0104";

    // Create another customer entity and add it to the table.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CustomerEntity customer2 = new CustomerEntity("Smith", "Ben");
    customer2.Email = "Ben@contoso.com";
    customer2.PhoneNumber = "425-555-0102";

    // Add both customer entities to the batch insert operation.</source>
          <target state="new">CustomerEntity customer2 = new CustomerEntity("Smith", "Ben");
    customer2.Email = "Ben@contoso.com";
    customer2.PhoneNumber = "425-555-0102";

    // Add both customer entities to the batch insert operation.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>batchOperation.Insert(customer1);
    batchOperation.Insert(customer2);

    // Execute the batch operation.</source>
          <target state="new">batchOperation.Insert(customer1);
    batchOperation.Insert(customer2);

    // Execute the batch operation.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>table.ExecuteBatch(batchOperation);

## Retrieve all entities in a partition

To query a table for all entities in a partition, use a <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> object.</source>
          <target state="new">table.ExecuteBatch(batchOperation);

## Retrieve all entities in a partition

To query a table for all entities in a partition, use a <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following code example specifies a filter for entities where 'Smith'</source>
          <target state="new">The following code example specifies a filter for entities where 'Smith'</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>is the partition key.</source>
          <target state="new">is the partition key.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This example prints the fields of</source>
          <target state="new">This example prints the fields of</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>each entity in the query results to the console.</source>
          <target state="new">each entity in the query results to the console.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Construct the query operation for all customer entities where PartitionKey="Smith".
    TableQuery</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Construct the query operation for all customer entities where PartitionKey="Smith".
    TableQuery</ph></target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>query = new TableQuery</source>
          <target state="new">query = new TableQuery</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"));

    // Print the fields for each customer.</source>
          <target state="new">().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"));

    // Print the fields for each customer.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>foreach (CustomerEntity entity in table.ExecuteQuery(query))
    {
        Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,
            entity.Email, entity.PhoneNumber);
    }

## Retrieve a range of entities in a partition

If you don't want to query all the entities in a partition, you can</source>
          <target state="new">foreach (CustomerEntity entity in table.ExecuteQuery(query))
    {
        Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,
            entity.Email, entity.PhoneNumber);
    }

## Retrieve a range of entities in a partition

If you don't want to query all the entities in a partition, you can</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>specify a range by combining the partition key filter with a row key filter.</source>
          <target state="new">specify a range by combining the partition key filter with a row key filter.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following code example</source>
          <target state="new">The following code example</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>uses two filters to get all entities in partition 'Smith' where the row</source>
          <target state="new">uses two filters to get all entities in partition 'Smith' where the row</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>key (first name) starts with a letter earlier than 'E' in the alphabet and then</source>
          <target state="new">key (first name) starts with a letter earlier than 'E' in the alphabet and then</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>prints the query results.</source>
          <target state="new">prints the query results.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create the table query.
    TableQuery</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create the table query.
    TableQuery</ph></target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>rangeQuery = new TableQuery</source>
          <target state="new">rangeQuery = new TableQuery</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>().Where(</source>
          <target state="new">().Where(</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>TableQuery.CombineFilters(</source>
          <target state="new">TableQuery.CombineFilters(</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"),</source>
          <target state="new">TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "Smith"),</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>TableOperators.And,</source>
          <target state="new">TableOperators.And,</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.LessThan, "E")));

    // Loop through the results, displaying information about the entity.</source>
          <target state="new">TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.LessThan, "E")));

    // Loop through the results, displaying information about the entity.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))
    {
        Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,
            entity.Email, entity.PhoneNumber);
    }

## Retrieve a single entity

You can write a query to retrieve a single, specific entity.</source>
          <target state="new">foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))
    {
        Console.WriteLine("{0}, {1}\t{2}\t{3}", entity.PartitionKey, entity.RowKey,
            entity.Email, entity.PhoneNumber);
    }

## Retrieve a single entity

You can write a query to retrieve a single, specific entity.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>following code uses <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> to specify the customer 'Ben Smith'.</source>
          <target state="new">following code uses <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> to specify the customer 'Ben Smith'.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This method returns just one entity rather than a</source>
          <target state="new">This method returns just one entity rather than a</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>collection, and the returned value in <bpt id="p1">**</bpt>TableResult.Result<ept id="p1">**</ept> is a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</source>
          <target state="new">collection, and the returned value in <bpt id="p1">**</bpt>TableResult.Result<ept id="p1">**</ept> is a <bpt id="p2">**</bpt>CustomerEntity<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifying both partition and row keys in a query is the fastest way to</source>
          <target state="new">Specifying both partition and row keys in a query is the fastest way to</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>retrieve a single entity from the Table service.</source>
          <target state="new">retrieve a single entity from the Table service.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>("Smith", "Ben");

    // Execute the retrieve operation.</source>
          <target state="new">("Smith", "Ben");

    // Execute the retrieve operation.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>TableResult retrievedResult = table.Execute(retrieveOperation);

    // Print the phone number of the result.</source>
          <target state="new">TableResult retrievedResult = table.Execute(retrieveOperation);

    // Print the phone number of the result.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>if (retrievedResult.Result != null)
       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);
    else
       Console.WriteLine("The phone number could not be retrieved.");

## Replace an entity

To update an entity, retrieve it from the Table service, modify the</source>
          <target state="new">if (retrievedResult.Result != null)
       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);
    else
       Console.WriteLine("The phone number could not be retrieved.");

## Replace an entity

To update an entity, retrieve it from the Table service, modify the</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>entity object, and then save the changes back to the Table service.</source>
          <target state="new">entity object, and then save the changes back to the Table service.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>following code changes an existing customer's phone number.</source>
          <target state="new">following code changes an existing customer's phone number.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Instead of</source>
          <target state="new">Instead of</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>calling <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept>, this code uses</source>
          <target state="new">calling <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept>, this code uses</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Replace<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Replace<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This causes the entity to be fully replaced on the server,</source>
          <target state="new">This causes the entity to be fully replaced on the server,</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>unless the entity on the server has changed since it was retrieved, in</source>
          <target state="new">unless the entity on the server has changed since it was retrieved, in</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>which case the operation will fail.</source>
          <target state="new">which case the operation will fail.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This failure is to prevent your application</source>
          <target state="new">This failure is to prevent your application</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>from inadvertently overwriting a change made between the retrieval and</source>
          <target state="new">from inadvertently overwriting a change made between the retrieval and</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>update by another component of your application.</source>
          <target state="new">update by another component of your application.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The proper handling of this failure</source>
          <target state="new">The proper handling of this failure</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>is to retrieve the entity again, make your changes (if still valid), and then</source>
          <target state="new">is to retrieve the entity again, make your changes (if still valid), and then</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>perform another <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operation.</source>
          <target state="new">perform another <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operation.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The next section will</source>
          <target state="new">The next section will</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>show you how to override this behavior.</source>
          <target state="new">show you how to override this behavior.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>("Smith", "Ben");

    // Execute the operation.</source>
          <target state="new">("Smith", "Ben");

    // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity object.</source>
          <target state="new">TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity object.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;

    if (updateEntity != null)
    {
       // Change the phone number.</source>
          <target state="new">CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;

    if (updateEntity != null)
    {
       // Change the phone number.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>updateEntity.PhoneNumber = "425-555-0105";

       // Create the InsertOrReplace TableOperation.</source>
          <target state="new">updateEntity.PhoneNumber = "425-555-0105";

       // Create the InsertOrReplace TableOperation.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>TableOperation updateOperation = TableOperation.Replace(updateEntity);

       // Execute the operation.</source>
          <target state="new">TableOperation updateOperation = TableOperation.Replace(updateEntity);

       // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>table.Execute(updateOperation);

       Console.WriteLine("Entity updated.");
    }

    else
       Console.WriteLine("Entity could not be retrieved.");

## Insert-or-replace an entity

<bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operations will fail if the entity has been changed since</source>
          <target state="new">table.Execute(updateOperation);

       Console.WriteLine("Entity updated.");
    }

    else
       Console.WriteLine("Entity could not be retrieved.");

## Insert-or-replace an entity

<bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operations will fail if the entity has been changed since</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>it was retrieved from the server.</source>
          <target state="new">it was retrieved from the server.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Furthermore, you must retrieve</source>
          <target state="new">Furthermore, you must retrieve</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>the entity from the server first in order for the <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operation to be successful.</source>
          <target state="new">the entity from the server first in order for the <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> operation to be successful.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Sometimes, however, you don't know if the entity exists on the server</source>
          <target state="new">Sometimes, however, you don't know if the entity exists on the server</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>and the current values stored in it are irrelevant.</source>
          <target state="new">and the current values stored in it are irrelevant.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Your update should</source>
          <target state="new">Your update should</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>overwrite them all.</source>
          <target state="new">overwrite them all.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To accomplish this, you would use an <bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept></source>
          <target state="new">To accomplish this, you would use an <bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>operation.</source>
          <target state="new">operation.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This operation inserts the entity if it doesn't exist, or</source>
          <target state="new">This operation inserts the entity if it doesn't exist, or</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>replaces it if it does, regardless of when the last update was made.</source>
          <target state="new">replaces it if it does, regardless of when the last update was made.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the</source>
          <target state="new">In the</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>following code example, the customer entity for Ben Smith is still retrieved, but it is then saved back to the server via <bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept>.</source>
          <target state="new">following code example, the customer entity for Ben Smith is still retrieved, but it is then saved back to the server via <bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Any updates</source>
          <target state="new">Any updates</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>made to the entity between the retrieval and update operations will be</source>
          <target state="new">made to the entity between the retrieval and update operations will be</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>overwritten.</source>
          <target state="new">overwritten.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable object that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that takes a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>("Smith", "Ben");

    // Execute the operation.</source>
          <target state="new">("Smith", "Ben");

    // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity object.</source>
          <target state="new">TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity object.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;

    if (updateEntity != null)
    {
       // Change the phone number.</source>
          <target state="new">CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;

    if (updateEntity != null)
    {
       // Change the phone number.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>updateEntity.PhoneNumber = "425-555-1234";

       // Create the InsertOrReplace TableOperation.</source>
          <target state="new">updateEntity.PhoneNumber = "425-555-1234";

       // Create the InsertOrReplace TableOperation.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);

       // Execute the operation.</source>
          <target state="new">TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);

       // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>table.Execute(insertOrReplaceOperation);

       Console.WriteLine("Entity was updated.");
    }

    else
       Console.WriteLine("Entity could not be retrieved.");

## Query a subset of entity properties

A table query can retrieve just a few properties from an entity instead of all the entity properties.</source>
          <target state="new">table.Execute(insertOrReplaceOperation);

       Console.WriteLine("Entity was updated.");
    }

    else
       Console.WriteLine("Entity could not be retrieved.");

## Query a subset of entity properties

A table query can retrieve just a few properties from an entity instead of all the entity properties.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This technique, called projection, reduces bandwidth and can improve query performance, especially for large entities.</source>
          <target state="new">This technique, called projection, reduces bandwidth and can improve query performance, especially for large entities.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The query in the</source>
          <target state="new">The query in the</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>following code returns only the email addresses of entities in the</source>
          <target state="new">following code returns only the email addresses of entities in the</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>table.</source>
          <target state="new">table.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This is done by using a query of <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> and</source>
          <target state="new">This is done by using a query of <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> and</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>also <bpt id="p1">**</bpt>EntityResolver<ept id="p1">**</ept>.</source>
          <target state="new">also <bpt id="p1">**</bpt>EntityResolver<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You can learn more about projection on the [Introducing Upsert and Query Projection blog post][].</source>
          <target state="new">You can learn more about projection on the [Introducing Upsert and Query Projection blog post][].</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Note that projection is not supported on the local storage emulator, so this code runs only when you're using an account on the Table service.</source>
          <target state="new">Note that projection is not supported on the local storage emulator, so this code runs only when you're using an account on the Table service.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Define the query, and select only the Email property.
    TableQuery</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Define the query, and select only the Email property.
    TableQuery</ph></target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>projectionQuery = new TableQuery</source>
          <target state="new">projectionQuery = new TableQuery</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>().Select(new string[] { "Email" });

    <ph id="ph1">// Define an entity resolver to work with the entity after retrieval.
    EntityResolver</ph></source>
          <target state="new">().Select(new string[] { "Email" });

    <ph id="ph1">// Define an entity resolver to work with the entity after retrieval.
    EntityResolver</ph></target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>resolver = (pk, rk, ts, props, etag) =&gt; props.ContainsKey("Email") ?</source>
          <target state="new">resolver = (pk, rk, ts, props, etag) =&gt; props.ContainsKey("Email") ?</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>props["Email"].StringValue : null;

    foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))
    {
        Console.WriteLine(projectedEmail);
    }

## Delete an entity

You can easily delete an entity after you have retrieved it, by using the same pattern</source>
          <target state="new">props["Email"].StringValue : null;

    foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))
    {
        Console.WriteLine(projectedEmail);
    }

## Delete an entity

You can easily delete an entity after you have retrieved it, by using the same pattern</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>shown for updating an entity.</source>
          <target state="new">shown for updating an entity.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following code</source>
          <target state="new">The following code</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>retrieves and deletes a customer entity.</source>
          <target state="new">retrieves and deletes a customer entity.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that expects a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></source>
          <target state="new"><ph id="ph1">// Retrieve the storage account from the connection string.
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.
    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.
    CloudTable table = tableClient.GetTableReference("people");

    // Create a retrieve operation that expects a customer entity.
    TableOperation retrieveOperation = TableOperation.Retrieve</ph></target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>("Smith", "Ben");

    // Execute the operation.</source>
          <target state="new">("Smith", "Ben");

    // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity.</source>
          <target state="new">TableResult retrievedResult = table.Execute(retrieveOperation);

    // Assign the result to a CustomerEntity.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;

    // Create the Delete TableOperation.</source>
          <target state="new">CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;

    // Create the Delete TableOperation.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>if (deleteEntity != null)
    {
       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);

       // Execute the operation.</source>
          <target state="new">if (deleteEntity != null)
    {
       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);

       // Execute the operation.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>table.Execute(deleteOperation);

       Console.WriteLine("Entity deleted.");
    }

    else
       Console.WriteLine("Could not retrieve the entity.");

## Delete a table

Finally, the following code example deletes a table from a storage account.</source>
          <target state="new">table.Execute(deleteOperation);

       Console.WriteLine("Entity deleted.");
    }

    else
       Console.WriteLine("Could not retrieve the entity.");

## Delete a table

Finally, the following code example deletes a table from a storage account.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="new">A</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>table that has been deleted will be unavailable to be re-created for a</source>
          <target state="new">table that has been deleted will be unavailable to be re-created for a</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>period of time following the deletion.</source>
          <target state="new">period of time following the deletion.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>// Retrieve the storage account from the connection string.</source>
          <target state="new">// Retrieve the storage account from the connection string.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.</source>
          <target state="new">CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
        CloudConfigurationManager.GetSetting("StorageConnectionString"));

    // Create the table client.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.</source>
          <target state="new">CloudTableClient tableClient = storageAccount.CreateCloudTableClient();

    // Create the CloudTable that represents the "people" table.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>CloudTable table = tableClient.GetTableReference("people");

    // Delete the table it if exists.</source>
          <target state="new">CloudTable table = tableClient.GetTableReference("people");

    // Delete the table it if exists.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>table.DeleteIfExists();

## Retrieve entities in pages asynchronously

If you are reading a large number of entities, and you want to process/display entities as they are retrieved rather than waiting for them all to return, you can retrieve entities by using a segmented query.</source>
          <target state="new">table.DeleteIfExists();

## Retrieve entities in pages asynchronously

If you are reading a large number of entities, and you want to process/display entities as they are retrieved rather than waiting for them all to return, you can retrieve entities by using a segmented query.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This example shows how to return results in pages by using the Async-Await pattern so that execution is not blocked while you're waiting for a large set of results to return.</source>
          <target state="new">This example shows how to return results in pages by using the Async-Await pattern so that execution is not blocked while you're waiting for a large set of results to return.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For more details on using the Async-Await pattern in .NET, see <bpt id="p1">[</bpt><ept id="p1">Asynchronous programming with Async and Await (C# and Visual Basic)](https://msdn.microsoft.com/library/hh191443.aspx)</ept>.</source>
          <target state="new">For more details on using the Async-Await pattern in .NET, see <bpt id="p1">[</bpt><ept id="p1">Asynchronous programming with Async and Await (C# and Visual Basic)](https://msdn.microsoft.com/library/hh191443.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">// Initialize a default TableQuery to retrieve all the entities in the table.
    TableQuery</ph></source>
          <target state="new"><ph id="ph1">// Initialize a default TableQuery to retrieve all the entities in the table.
    TableQuery</ph></target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>tableQuery = new TableQuery</source>
          <target state="new">tableQuery = new TableQuery</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>();

    <ph id="ph1">// Initialize the continuation token to null to start from the beginning of the table.
    TableContinuationToken continuationToken = null;

    do
    {
        // Retrieve a segment (up to 1,000 entities).
        TableQuerySegment</ph></source>
          <target state="new">();

    <ph id="ph1">// Initialize the continuation token to null to start from the beginning of the table.
    TableContinuationToken continuationToken = null;

    do
    {
        // Retrieve a segment (up to 1,000 entities).
        TableQuerySegment</ph></target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>tableQueryResult =</source>
          <target state="new">tableQueryResult =</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);

        // Assign the new continuation token to tell the service where to
        // continue on the next iteration (or null if it has reached the end).</source>
          <target state="new">await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);

        // Assign the new continuation token to tell the service where to
        // continue on the next iteration (or null if it has reached the end).</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>continuationToken = tableQueryResult.ContinuationToken;

        // Print the number of rows retrieved.</source>
          <target state="new">continuationToken = tableQueryResult.ContinuationToken;

        // Print the number of rows retrieved.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Console.WriteLine("Rows retrieved {0}", tableQueryResult.Results.Count);

    // Loop until a null continuation token is received, indicating the end of the table.</source>
          <target state="new">Console.WriteLine("Rows retrieved {0}", tableQueryResult.Results.Count);

    // Loop until a null continuation token is received, indicating the end of the table.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>} while(continuationToken != null);

## Next steps

Now that you've learned the basics of Table storage, follow these links</source>
          <target state="new">} while(continuationToken != null);

## Next steps

Now that you've learned the basics of Table storage, follow these links</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>to learn about more complex storage tasks:</source>
          <target state="new">to learn about more complex storage tasks:</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>View the Table service reference documentation for complete details about available APIs:</source>
          <target state="new">View the Table service reference documentation for complete details about available APIs:</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Storage Client Library for .NET reference<ph id="ph1">&lt;/a&gt;</ph><ph id="ph2">
    </ph></source>
          <target state="new">Storage Client Library for .NET reference<ph id="ph1">&lt;/a&gt;</ph><ph id="ph2">
    </ph></target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>REST API reference</source>
          <target state="new">REST API reference</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Learn about more advanced tasks you can perform with Azure Storage by reviewing <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/azure/gg433040.aspx"&gt;</ph>Azure Storage documentation<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">Learn about more advanced tasks you can perform with Azure Storage by reviewing <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/azure/gg433040.aspx"&gt;</ph>Azure Storage documentation<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Learn how to simplify the code you write to work with Azure Storage by using the <ph id="ph1">&lt;a href="../websites-dotnet-webjobs-sdk/"&gt;</ph>Azure WebJobs SDK<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">Learn how to simplify the code you write to work with Azure Storage by using the <ph id="ph1">&lt;a href="../websites-dotnet-webjobs-sdk/"&gt;</ph>Azure WebJobs SDK<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>View more feature guides to learn about additional options for storing data in Azure:</source>
          <target state="new">View more feature guides to learn about additional options for storing data in Azure:</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-blobs/"&gt;</ph>Blob storage<ph id="ph2">&lt;/a&gt;</ph> to store unstructured data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-blobs/"&gt;</ph>Blob storage<ph id="ph2">&lt;/a&gt;</ph> to store unstructured data.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-queues/"&gt;</ph>Queue storage<ph id="ph2">&lt;/a&gt;</ph> to store structured data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/storage-dotnet-how-to-use-queues/"&gt;</ph>Queue storage<ph id="ph2">&lt;/a&gt;</ph> to store structured data.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;a href="/documentation/articles/sql-database-dotnet-how-to-use/"&gt;</ph>SQL Database<ph id="ph2">&lt;/a&gt;</ph> to store relational data.</source>
          <target state="new">Use <ph id="ph1">&lt;a href="/documentation/articles/sql-database-dotnet-how-to-use/"&gt;</ph>SQL Database<ph id="ph2">&lt;/a&gt;</ph> to store relational data.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da378e3c8556fa19e0b3542ca74e3183b1e8bf9c</xliffext:olfilehash>
  </header>
</xliff>