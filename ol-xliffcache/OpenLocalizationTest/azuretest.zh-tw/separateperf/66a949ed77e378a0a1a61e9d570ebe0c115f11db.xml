{
  "nodes": [
    {
      "content": "How to use table storage from PHP | Microsoft Azure",
      "pos": [
        27,
        78
      ]
    },
    {
      "content": "Learn how to use the Table service from PHP to create and delete a table, and insert, delete, and query the table.",
      "pos": [
        97,
        211
      ]
    },
    {
      "content": "How to use table storage from PHP",
      "pos": [
        506,
        539
      ]
    },
    {
      "content": "Overview",
      "pos": [
        644,
        652
      ]
    },
    {
      "content": "This guide shows you how to perform common scenarios using the Azure Table service.",
      "pos": [
        654,
        737
      ]
    },
    {
      "content": "The samples are written in PHP and use the <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">][download]</ept>.",
      "pos": [
        738,
        811
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating and deleting a table, and inserting, deleting, and querying entities in a table<ept id=\"p1\">**</ept>.",
      "pos": [
        812,
        935
      ]
    },
    {
      "content": "For more information on the Azure Table service, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#NextSteps)</ept> section.",
      "pos": [
        936,
        1026
      ]
    },
    {
      "content": "Create a PHP application",
      "pos": [
        1231,
        1255
      ]
    },
    {
      "content": "The only requirement for creating a PHP application that accesses the Azure Table service is the referencing of classes in the Azure SDK for PHP from within your code.",
      "pos": [
        1257,
        1424
      ]
    },
    {
      "content": "You can use any development tools to create your application, including Notepad.",
      "pos": [
        1425,
        1505
      ]
    },
    {
      "content": "In this guide, you use Table service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.",
      "pos": [
        1507,
        1681
      ]
    },
    {
      "content": "Get the Azure Client Libraries",
      "pos": [
        1686,
        1716
      ]
    },
    {
      "content": "Configure your application to access the Table service",
      "pos": [
        1801,
        1855
      ]
    },
    {
      "content": "To use the Azure Table service APIs, you need to:",
      "pos": [
        1857,
        1906
      ]
    },
    {
      "pos": [
        1911,
        1994
      ],
      "content": "Reference the autoloader file using the <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> statement, and"
    },
    {
      "content": "Reference any classes you might use.",
      "pos": [
        1998,
        2034
      ]
    },
    {
      "pos": [
        2036,
        2143
      ],
      "content": "The following example shows how to include the autoloader file and reference the <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.",
      "pos": [
        2147,
        2284
      ]
    },
    {
      "content": "If you installed the libraries manually or as a PEAR package, you need to reference the <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">WindowsAzure.php</ph><ph id=\"ph3\">&lt;/code&gt;</ph> autoloader file.",
      "pos": [
        2285,
        2419
      ]
    },
    {
      "pos": [
        2508,
        2650
      ],
      "content": "In the examples below, the <ph id=\"ph1\">`require_once`</ph> statement is always shown, but only the classes necessary for the example to execute are referenced."
    },
    {
      "content": "Set up an Azure storage connection",
      "pos": [
        2655,
        2689
      ]
    },
    {
      "content": "To instantiate an Azure Table service client, you must first have a valid connection string.",
      "pos": [
        2691,
        2783
      ]
    },
    {
      "content": "The format for the Table service connection string is:",
      "pos": [
        2784,
        2838
      ]
    },
    {
      "content": "For accessing a live service:",
      "pos": [
        2840,
        2869
      ]
    },
    {
      "content": "For accessing the emulator storage:",
      "pos": [
        2961,
        2996
      ]
    },
    {
      "content": "To create any Azure service client, you need to use the <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> class.",
      "pos": [
        3031,
        3113
      ]
    },
    {
      "content": "You can:",
      "pos": [
        3114,
        3122
      ]
    },
    {
      "content": "pass the connection string directly to it or",
      "pos": [
        3126,
        3170
      ]
    },
    {
      "pos": [
        3173,
        3278
      ],
      "content": "use the <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> to check multiple external sources for the connection string:"
    },
    {
      "content": "by default, it comes with support for one external source - environmental variables",
      "pos": [
        3285,
        3368
      ]
    },
    {
      "pos": [
        3375,
        3448
      ],
      "content": "you can add new sources by extending the <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> class"
    },
    {
      "content": "For the examples outlined here, the connection string will be passed directly.",
      "pos": [
        3450,
        3528
      ]
    },
    {
      "content": "Create a table",
      "pos": [
        3715,
        3729
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>TableRestProxy<ept id=\"p1\">**</ept> object lets you create a table with the <bpt id=\"p2\">**</bpt>createTable<ept id=\"p2\">**</ept> method.",
      "pos": [
        3731,
        3815
      ]
    },
    {
      "content": "When creating a table, you can set the Table service timeout.",
      "pos": [
        3816,
        3877
      ]
    },
    {
      "content": "(For more information about the Table service timeout, see <bpt id=\"p1\">[</bpt>Setting timeouts for Table service operations<ept id=\"p1\">][table-service-timeouts]</ept>.)",
      "pos": [
        3878,
        4010
      ]
    },
    {
      "pos": [
        4657,
        4775
      ],
      "content": "For information about restrictions on table names, see <bpt id=\"p1\">[</bpt>Understanding the Table service data model<ept id=\"p1\">][table-data-model]</ept>."
    },
    {
      "content": "Add an entity to a table",
      "pos": [
        4780,
        4804
      ]
    },
    {
      "content": "To add an entity to a table, create a new <bpt id=\"p1\">**</bpt>Entity<ept id=\"p1\">**</ept> object and pass it to <bpt id=\"p2\">**</bpt>TableRestProxy-&gt;insertEntity<ept id=\"p2\">**</ept>.",
      "pos": [
        4806,
        4914
      ]
    },
    {
      "content": "Note that when you create an entity, you must specify a <ph id=\"ph1\">`PartitionKey`</ph> and <ph id=\"ph2\">`RowKey`</ph>.",
      "pos": [
        4915,
        4999
      ]
    },
    {
      "content": "These are the unique identifiers for an entity and are values that can be queried much faster than other entity properties.",
      "pos": [
        5000,
        5123
      ]
    },
    {
      "content": "The system uses <ph id=\"ph1\">`PartitionKey`</ph> to automatically distribute the tableâ€™s entities over many storage nodes.",
      "pos": [
        5124,
        5228
      ]
    },
    {
      "content": "Entities with the same <ph id=\"ph1\">`PartitionKey`</ph> are stored on the same node.",
      "pos": [
        5229,
        5295
      ]
    },
    {
      "content": "(Operations on multiple entities stored on the same node perform better than on entities stored across different nodes.) The <ph id=\"ph1\">`RowKey`</ph> is the unique ID of an entity within a partition.",
      "pos": [
        5296,
        5479
      ]
    },
    {
      "pos": [
        6572,
        6689
      ],
      "content": "For information about Table properties and types, see <bpt id=\"p1\">[</bpt>Understanding the Table service data model<ept id=\"p1\">][table-data-model]</ept>."
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TableRestProxy<ept id=\"p1\">**</ept> class offers two alternative methods for inserting entities: <bpt id=\"p2\">**</bpt>insertOrMergeEntity<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>insertOrReplaceEntity<ept id=\"p3\">**</ept>.",
      "pos": [
        6691,
        6829
      ]
    },
    {
      "content": "To use these methods, create a new <bpt id=\"p1\">**</bpt>Entity<ept id=\"p1\">**</ept> and pass it as a parameter to either method.",
      "pos": [
        6830,
        6920
      ]
    },
    {
      "content": "Each method will insert the entity if it does not exist.",
      "pos": [
        6921,
        6977
      ]
    },
    {
      "content": "If the entity already exists, <bpt id=\"p1\">**</bpt>insertOrMergeEntity<ept id=\"p1\">**</ept> updates property values if the properties already exist and adds new properties if they do not exist, while <bpt id=\"p2\">**</bpt>insertOrReplaceEntity<ept id=\"p2\">**</ept> completely replaces an existing entity.",
      "pos": [
        6978,
        7205
      ]
    },
    {
      "content": "The following example shows how to use <bpt id=\"p1\">**</bpt>insertOrMergeEntity<ept id=\"p1\">**</ept>.",
      "pos": [
        7206,
        7269
      ]
    },
    {
      "content": "If the entity with <ph id=\"ph1\">`PartitionKey`</ph> \"tasksSeattle\" and <ph id=\"ph2\">`RowKey`</ph> \"1\" does not already exist, it will be inserted.",
      "pos": [
        7270,
        7380
      ]
    },
    {
      "content": "However, if it has previously been inserted (as shown in the example above), the <ph id=\"ph1\">`DueDate`</ph> property will be updated, and the <ph id=\"ph2\">`Status`</ph> property will be added.",
      "pos": [
        7381,
        7538
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`Description`</ph> and <ph id=\"ph2\">`Location`</ph> properties are also updated, but with values that effectively leave them unchanged.",
      "pos": [
        7539,
        7655
      ]
    },
    {
      "content": "If these latter two properties were not added as shown in the example, but existed on the target entity, their existing values would remain unchanged.",
      "pos": [
        7656,
        7806
      ]
    },
    {
      "content": "Retrieve a single entity",
      "pos": [
        9393,
        9417
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;getEntity<ept id=\"p1\">**</ept> method allows you to retrieve a single entity by querying for its <ph id=\"ph1\">`PartitionKey`</ph> and <ph id=\"ph2\">`RowKey`</ph>.",
      "pos": [
        9419,
        9547
      ]
    },
    {
      "content": "In the example below, the partition key <ph id=\"ph1\">`tasksSeattle`</ph> and row key <ph id=\"ph2\">`1`</ph> are passed to the <bpt id=\"p1\">**</bpt>getEntity<ept id=\"p1\">**</ept> method.",
      "pos": [
        9548,
        9658
      ]
    },
    {
      "content": "Retrieve all entities in a partition",
      "pos": [
        10450,
        10486
      ]
    },
    {
      "content": "Entity queries are constructed using filters (for more information, see <bpt id=\"p1\">[</bpt>Querying Tables and Entities<ept id=\"p1\">][filters]</ept>).",
      "pos": [
        10488,
        10601
      ]
    },
    {
      "content": "To retrieve all entities in partition, use the filter \"PartitionKey eq <bpt id=\"p1\">*</bpt>partition_name<ept id=\"p1\">*</ept>\".",
      "pos": [
        10602,
        10691
      ]
    },
    {
      "content": "The following example shows how to retrieve all entities in the <ph id=\"ph1\">`tasksSeattle`</ph> partition by passing a filter to the <bpt id=\"p1\">**</bpt>queryEntities<ept id=\"p1\">**</ept> method.",
      "pos": [
        10692,
        10833
      ]
    },
    {
      "content": "Retrieve a subset of entities in a partition",
      "pos": [
        11726,
        11770
      ]
    },
    {
      "content": "The same pattern used in the previous example can be used to retrieve any subset of entities in a partition.",
      "pos": [
        11772,
        11880
      ]
    },
    {
      "content": "The subset of entities you retrieve are determined by the filter you use (for more information, see <bpt id=\"p1\">[</bpt>Querying tables and entities<ept id=\"p1\">][filters]</ept>).The following example shows how to use a filter to retrieve all entities with a specific <ph id=\"ph1\">`Location`</ph> and a <ph id=\"ph2\">`DueDate`</ph> less than a specified date.",
      "pos": [
        11881,
        12165
      ]
    },
    {
      "content": "Retrieve a subset of entity properties",
      "pos": [
        13075,
        13113
      ]
    },
    {
      "content": "A query can retrieve a subset of entity properties.",
      "pos": [
        13115,
        13166
      ]
    },
    {
      "content": "This technique, called <bpt id=\"p1\">*</bpt>projection<ept id=\"p1\">*</ept>, reduces bandwidth and can improve query performance, especially for large entities.",
      "pos": [
        13167,
        13287
      ]
    },
    {
      "content": "To specify a property to be retrieved, pass the name of the property to the <bpt id=\"p1\">**</bpt>Query-&gt;addSelectField<ept id=\"p1\">**</ept> method.",
      "pos": [
        13288,
        13397
      ]
    },
    {
      "content": "You can call this method multiple times to add more properties.",
      "pos": [
        13398,
        13461
      ]
    },
    {
      "content": "After executing <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;queryEntities<ept id=\"p1\">**</ept>, the returned entities will only have the selected properties.",
      "pos": [
        13462,
        13574
      ]
    },
    {
      "content": "(If you want to return a subset of Table entities, use a filter as shown in the queries above.)",
      "pos": [
        13575,
        13670
      ]
    },
    {
      "content": "Update an entity",
      "pos": [
        14854,
        14870
      ]
    },
    {
      "content": "An existing entity can be updated by using the <bpt id=\"p1\">**</bpt>Entity-&gt;setProperty<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Entity-&gt;addProperty<ept id=\"p2\">**</ept> methods on the entity, and then calling <bpt id=\"p3\">**</bpt>TableRestProxy-&gt;updateEntity<ept id=\"p3\">**</ept>.",
      "pos": [
        14872,
        15044
      ]
    },
    {
      "content": "The following example retrieves an entity, modifies one property, removes another property, and adds a new property.",
      "pos": [
        15045,
        15161
      ]
    },
    {
      "content": "Note that you can remove a property by setting its value to <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept>.",
      "pos": [
        15162,
        15231
      ]
    },
    {
      "content": "Delete an entity",
      "pos": [
        16335,
        16351
      ]
    },
    {
      "pos": [
        16353,
        16487
      ],
      "content": "To delete an entity, pass the table name, and the entity's <ph id=\"ph1\">`PartitionKey`</ph> and <ph id=\"ph2\">`RowKey`</ph> to the <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;deleteEntity<ept id=\"p1\">**</ept> method."
    },
    {
      "pos": [
        17197,
        17422
      ],
      "content": "Note that for concurrency checks, you can set the Etag for an entity to be deleted by using the <bpt id=\"p1\">**</bpt>DeleteEntityOptions-&gt;setEtag<ept id=\"p1\">**</ept> method and passing the <bpt id=\"p2\">**</bpt>DeleteEntityOptions<ept id=\"p2\">**</ept> object to <bpt id=\"p3\">**</bpt>deleteEntity<ept id=\"p3\">**</ept> as a fourth parameter."
    },
    {
      "content": "Batch table operations",
      "pos": [
        17427,
        17449
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;batch<ept id=\"p1\">**</ept> method allows you to execute multiple operations in a single request.",
      "pos": [
        17451,
        17550
      ]
    },
    {
      "content": "The pattern here involves adding operations to <bpt id=\"p1\">**</bpt>BatchRequest<ept id=\"p1\">**</ept> object and then passing the <bpt id=\"p2\">**</bpt>BatchRequest<ept id=\"p2\">**</ept> object to the <bpt id=\"p3\">**</bpt>TableRestProxy-&gt;batch<ept id=\"p3\">**</ept> method.",
      "pos": [
        17551,
        17707
      ]
    },
    {
      "content": "To add an operation to a <bpt id=\"p1\">**</bpt>BatchRequest<ept id=\"p1\">**</ept> object, you can call any of the following methods multiple times:",
      "pos": [
        17708,
        17815
      ]
    },
    {
      "pos": [
        17819,
        17871
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertEntity<ept id=\"p1\">**</ept> (adds an insertEntity operation)"
    },
    {
      "pos": [
        17874,
        17926
      ],
      "content": "<bpt id=\"p1\">**</bpt>addUpdateEntity<ept id=\"p1\">**</ept> (adds an updateEntity operation)"
    },
    {
      "pos": [
        17929,
        17978
      ],
      "content": "<bpt id=\"p1\">**</bpt>addMergeEntity<ept id=\"p1\">**</ept> (adds a mergeEntity operation)"
    },
    {
      "pos": [
        17981,
        18051
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertOrReplaceEntity<ept id=\"p1\">**</ept> (adds an insertOrReplaceEntity operation)"
    },
    {
      "pos": [
        18054,
        18120
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertOrMergeEntity<ept id=\"p1\">**</ept> (adds an insertOrMergeEntity operation)"
    },
    {
      "pos": [
        18123,
        18174
      ],
      "content": "<bpt id=\"p1\">**</bpt>addDeleteEntity<ept id=\"p1\">**</ept> (adds a deleteEntity operation)"
    },
    {
      "pos": [
        18176,
        18288
      ],
      "content": "The following example shows how to execute <bpt id=\"p1\">**</bpt>insertEntity<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>deleteEntity<ept id=\"p2\">**</ept> operations in a single request:"
    },
    {
      "pos": [
        19780,
        19904
      ],
      "content": "For more information about batching Table operations, see <bpt id=\"p1\">[</bpt>Performing entity group transactions<ept id=\"p1\">][entity-group-transactions]</ept>."
    },
    {
      "content": "Delete a table",
      "pos": [
        19909,
        19923
      ]
    },
    {
      "pos": [
        19925,
        20019
      ],
      "content": "Finally, to delete a table, pass the table name to the <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;deleteTable<ept id=\"p1\">**</ept> method."
    },
    {
      "content": "Next steps",
      "pos": [
        20709,
        20719
      ]
    },
    {
      "content": "Now that youâ€™ve learned the basics of the Azure Table service, follow these links to learn about more complex storage tasks.",
      "pos": [
        20721,
        20845
      ]
    },
    {
      "pos": [
        20849,
        20943
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Azure Storage<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept>"
    },
    {
      "pos": [
        20946,
        21027
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage team blog<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>"
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use table storage from PHP | Microsoft Azure\"\n    description=\"Learn how to use the Table service from PHP to create and delete a table, and insert, delete, and query the table.\"\n    services=\"storage\"\n    documentationCenter=\"php\"\n    authors=\"tfitzmac\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"PHP\"\n    ms.topic=\"article\"\n    ms.date=\"07/29/2015\"\n    ms.author=\"tomfitz\"/>\n\n\n# How to use table storage from PHP\n\n[AZURE.INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\n\n## Overview\n\nThis guide shows you how to perform common scenarios using the Azure Table service. The samples are written in PHP and use the [Azure SDK for PHP][download]. The scenarios covered include **creating and deleting a table, and inserting, deleting, and querying entities in a table**. For more information on the Azure Table service, see the [Next steps](#NextSteps) section.\n\n[AZURE.INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a PHP application\n\nThe only requirement for creating a PHP application that accesses the Azure Table service is the referencing of classes in the Azure SDK for PHP from within your code. You can use any development tools to create your application, including Notepad.\n\nIn this guide, you use Table service features which can be called from within a PHP application locally, or in code running within an Azure web role, worker role, or website.\n\n## Get the Azure Client Libraries\n\n[AZURE.INCLUDE [get-client-libraries](../../includes/get-client-libraries.md)]\n\n## Configure your application to access the Table service\n\nTo use the Azure Table service APIs, you need to:\n\n1. Reference the autoloader file using the [require_once][require_once] statement, and\n2. Reference any classes you might use.\n\nThe following example shows how to include the autoloader file and reference the **ServicesBuilder** class.\n\n> [AZURE.NOTE] This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer. If you installed the libraries manually or as a PEAR package, you need to reference the <code>WindowsAzure.php</code> autoloader file.\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n\nIn the examples below, the `require_once` statement is always shown, but only the classes necessary for the example to execute are referenced.\n\n## Set up an Azure storage connection\n\nTo instantiate an Azure Table service client, you must first have a valid connection string. The format for the Table service connection string is:\n\nFor accessing a live service:\n\n    DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]\n\nFor accessing the emulator storage:\n\n    UseDevelopmentStorage=true\n\n\nTo create any Azure service client, you need to use the **ServicesBuilder** class. You can:\n\n* pass the connection string directly to it or\n* use the **CloudConfigurationManager (CCM)** to check multiple external sources for the connection string:\n    * by default, it comes with support for one external source - environmental variables\n    * you can add new sources by extending the **ConnectionStringSource** class\n\nFor the examples outlined here, the connection string will be passed directly.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n\n## Create a table\n\nA **TableRestProxy** object lets you create a table with the **createTable** method. When creating a table, you can set the Table service timeout. (For more information about the Table service timeout, see [Setting timeouts for Table service operations][table-service-timeouts].)\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Create table.\n        $tableRestProxy->createTable(\"mytable\");\n    }\n    catch(ServiceException $e){\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        // Handle exception based on error codes and messages.\n        // Error codes and messages can be found here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n    }\n\nFor information about restrictions on table names, see [Understanding the Table service data model][table-data-model].\n\n## Add an entity to a table\n\nTo add an entity to a table, create a new **Entity** object and pass it to **TableRestProxy->insertEntity**. Note that when you create an entity, you must specify a `PartitionKey` and `RowKey`. These are the unique identifiers for an entity and are values that can be queried much faster than other entity properties. The system uses `PartitionKey` to automatically distribute the tableâ€™s entities over many storage nodes. Entities with the same `PartitionKey` are stored on the same node. (Operations on multiple entities stored on the same node perform better than on entities stored across different nodes.) The `RowKey` is the unique ID of an entity within a partition.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $entity = new Entity();\n    $entity->setPartitionKey(\"tasksSeattle\");\n    $entity->setRowKey(\"1\");\n    $entity->addProperty(\"Description\", null, \"Take out the trash.\");\n    $entity->addProperty(\"DueDate\",\n                         EdmType::DATETIME,\n                         new DateTime(\"2012-11-05T08:15:00-08:00\"));\n    $entity->addProperty(\"Location\", EdmType::STRING, \"Home\");\n\n    try{\n        $tableRestProxy->insertEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n    }\n\nFor information about Table properties and types, see [Understanding the Table service data model][table-data-model].\n\nThe **TableRestProxy** class offers two alternative methods for inserting entities: **insertOrMergeEntity** and **insertOrReplaceEntity**. To use these methods, create a new **Entity** and pass it as a parameter to either method. Each method will insert the entity if it does not exist. If the entity already exists, **insertOrMergeEntity** updates property values if the properties already exist and adds new properties if they do not exist, while **insertOrReplaceEntity** completely replaces an existing entity. The following example shows how to use **insertOrMergeEntity**. If the entity with `PartitionKey` \"tasksSeattle\" and `RowKey` \"1\" does not already exist, it will be inserted. However, if it has previously been inserted (as shown in the example above), the `DueDate` property will be updated, and the `Status` property will be added. The `Description` and `Location` properties are also updated, but with values that effectively leave them unchanged. If these latter two properties were not added as shown in the example, but existed on the target entity, their existing values would remain unchanged.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    //Create new entity.\n    $entity = new Entity();\n\n    // PartitionKey and RowKey are required.\n    $entity->setPartitionKey(\"tasksSeattle\");\n    $entity->setRowKey(\"1\");\n\n    // If entity exists, existing properties are updated with new values and\n    // new properties are added. Missing properties are unchanged.\n    $entity->addProperty(\"Description\", null, \"Take out the trash.\");\n    $entity->addProperty(\"DueDate\", EdmType::DATETIME, new DateTime()); // Modified the DueDate field.\n    $entity->addProperty(\"Location\", EdmType::STRING, \"Home\");\n    $entity->addProperty(\"Status\", EdmType::STRING, \"Complete\"); // Added Status field.\n\n    try {\n        // Calling insertOrReplaceEntity, instead of insertOrMergeEntity as shown,\n        // would simply replace the entity with PartitionKey \"tasksSeattle\" and RowKey \"1\".\n        $tableRestProxy->insertOrMergeEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n\n## Retrieve a single entity\n\nThe **TableRestProxy->getEntity** method allows you to retrieve a single entity by querying for its `PartitionKey` and `RowKey`. In the example below, the partition key `tasksSeattle` and row key `1` are passed to the **getEntity** method.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        $result = $tableRestProxy->getEntity(\"mytable\", \"tasksSeattle\", 1);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entity = $result->getEntity();\n\n    echo $entity->getPartitionKey().\":\".$entity->getRowKey();\n\n## Retrieve all entities in a partition\n\nEntity queries are constructed using filters (for more information, see [Querying Tables and Entities][filters]). To retrieve all entities in partition, use the filter \"PartitionKey eq *partition_name*\". The following example shows how to retrieve all entities in the `tasksSeattle` partition by passing a filter to the **queryEntities** method.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $filter = \"PartitionKey eq 'tasksSeattle'\";\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $filter);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        echo $entity->getPartitionKey().\":\".$entity->getRowKey().\"<br />\";\n    }\n\n## Retrieve a subset of entities in a partition\n\nThe same pattern used in the previous example can be used to retrieve any subset of entities in a partition. The subset of entities you retrieve are determined by the filter you use (for more information, see [Querying tables and entities][filters]).The following example shows how to use a filter to retrieve all entities with a specific `Location` and a `DueDate` less than a specified date.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $filter = \"Location eq 'Office' and DueDate lt '2012-11-5'\";\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $filter);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        echo $entity->getPartitionKey().\":\".$entity->getRowKey().\"<br />\";\n    }\n\n## Retrieve a subset of entity properties\n\nA query can retrieve a subset of entity properties. This technique, called *projection*, reduces bandwidth and can improve query performance, especially for large entities. To specify a property to be retrieved, pass the name of the property to the **Query->addSelectField** method. You can call this method multiple times to add more properties. After executing **TableRestProxy->queryEntities**, the returned entities will only have the selected properties. (If you want to return a subset of Table entities, use a filter as shown in the queries above.)\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\QueryEntitiesOptions;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $options = new QueryEntitiesOptions();\n    $options->addSelectField(\"Description\");\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $options);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    // All entities in the table are returned, regardless of whether\n    // they have the Description field.\n    // To limit the results returned, use a filter.\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        $description = $entity->getProperty(\"Description\")->getValue();\n        echo $description.\"<br />\";\n    }\n\n## Update an entity\n\nAn existing entity can be updated by using the **Entity->setProperty** and **Entity->addProperty** methods on the entity, and then calling **TableRestProxy->updateEntity**. The following example retrieves an entity, modifies one property, removes another property, and adds a new property. Note that you can remove a property by setting its value to **null**.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $result = $tableRestProxy->getEntity(\"mytable\", \"tasksSeattle\", 1);\n\n    $entity = $result->getEntity();\n\n    $entity->setPropertyValue(\"DueDate\", new DateTime()); //Modified DueDate.\n\n    $entity->setPropertyValue(\"Location\", null); //Removed Location.\n\n    $entity->addProperty(\"Status\", EdmType::STRING, \"In progress\"); //Added Status.\n\n    try {\n        $tableRestProxy->updateEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## Delete an entity\n\nTo delete an entity, pass the table name, and the entity's `PartitionKey` and `RowKey` to the **TableRestProxy->deleteEntity** method.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Delete entity.\n        $tableRestProxy->deleteEntity(\"mytable\", \"tasksSeattle\", \"2\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\nNote that for concurrency checks, you can set the Etag for an entity to be deleted by using the **DeleteEntityOptions->setEtag** method and passing the **DeleteEntityOptions** object to **deleteEntity** as a fourth parameter.\n\n## Batch table operations\n\nThe **TableRestProxy->batch** method allows you to execute multiple operations in a single request. The pattern here involves adding operations to **BatchRequest** object and then passing the **BatchRequest** object to the **TableRestProxy->batch** method. To add an operation to a **BatchRequest** object, you can call any of the following methods multiple times:\n\n* **addInsertEntity** (adds an insertEntity operation)\n* **addUpdateEntity** (adds an updateEntity operation)\n* **addMergeEntity** (adds a mergeEntity operation)\n* **addInsertOrReplaceEntity** (adds an insertOrReplaceEntity operation)\n* **addInsertOrMergeEntity** (adds an insertOrMergeEntity operation)\n* **addDeleteEntity** (adds a deleteEntity operation)\n\nThe following example shows how to execute **insertEntity** and **deleteEntity** operations in a single request:\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n    use WindowsAzure\\Table\\Models\\BatchOperations;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    // Create list of batch operation.\n    $operations = new BatchOperations();\n\n    $entity1 = new Entity();\n    $entity1->setPartitionKey(\"tasksSeattle\");\n    $entity1->setRowKey(\"2\");\n    $entity1->addProperty(\"Description\", null, \"Clean roof gutters.\");\n    $entity1->addProperty(\"DueDate\",\n                          EdmType::DATETIME,\n                          new DateTime(\"2012-11-05T08:15:00-08:00\"));\n    $entity1->addProperty(\"Location\", EdmType::STRING, \"Home\");\n\n    // Add operation to list of batch operations.\n    $operations->addInsertEntity(\"mytable\", $entity1);\n\n    // Add operation to list of batch operations.\n    $operations->addDeleteEntity(\"mytable\", \"tasksSeattle\", \"1\");\n\n    try {\n        $tableRestProxy->batch($operations);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\nFor more information about batching Table operations, see [Performing entity group transactions][entity-group-transactions].\n\n## Delete a table\n\nFinally, to delete a table, pass the table name to the **TableRestProxy->deleteTable** method.\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Delete table.\n        $tableRestProxy->deleteTable(\"mytable\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## Next steps\n\nNow that youâ€™ve learned the basics of the Azure Table service, follow these links to learn about more complex storage tasks.\n\n- See the MSDN Reference: [Azure Storage](http://msdn.microsoft.com/library/azure/gg433040.aspx)\n- Visit the [Azure Storage team blog](http://blogs.msdn.com/b/windowsazurestorage/)\n\n[download]: http://go.microsoft.com/fwlink/?LinkID=252473\n[Storing and accessing data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n[require_once]: http://php.net/require_once\n[table-service-timeouts]: http://msdn.microsoft.com/library/azure/dd894042.aspx\n\n[table-data-model]: http://msdn.microsoft.com/library/azure/dd179338.aspx\n[filters]: http://msdn.microsoft.com/library/azure/dd894031.aspx\n[entity-group-transactions]: http://msdn.microsoft.com/library/azure/dd894038.aspx\n"
}