<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Code sample: Retry logic from Enterprise Library, in C# for connecting to SQL Database | Microsoft Azure</source>
          <target state="new">Code sample: Retry logic from Enterprise Library, in C# for connecting to SQL Database | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enterprise Library is designed to ease the task of including retry logic to your client programs that access cloud services.</source>
          <target state="new">Enterprise Library is designed to ease the task of including retry logic to your client programs that access cloud services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code sample: Retry logic from Enterprise Library, in C&amp;#x23; for connecting to SQL Database</source>
          <target state="new">Code sample: Retry logic from Enterprise Library, in C&amp;#x23; for connecting to SQL Database</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic presents a complete code sample that demonstrates the Enterprise Library (EntLib).</source>
          <target state="new">This topic presents a complete code sample that demonstrates the Enterprise Library (EntLib).</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>EntLib eases the programmer's task of including retry logic in their client that interact with the SQL Database cloud service of Microsoft Azure.</source>
          <target state="new">EntLib eases the programmer's task of including retry logic in their client that interact with the SQL Database cloud service of Microsoft Azure.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Enterprise Library 6 (EntLib60) is the latest version.</source>
          <target state="new">Enterprise Library 6 (EntLib60) is the latest version.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following links are recommended for in-depth information about EntLib:</source>
          <target state="new">The following links are recommended for in-depth information about EntLib:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enterprise Library 6 – April 2013<ept id="p1">](http://msdn.microsoft.com/library/dn169621.aspx)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Enterprise Library 6 – April 2013<ept id="p1">](http://msdn.microsoft.com/library/dn169621.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Provides numerous links to further information.</source>
          <target state="new">Provides numerous links to further information.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Free ebook in .PDF format from Microsoft:</source>
          <target state="new">Free ebook in .PDF format from Microsoft:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developer's Guide to Microsoft Enterprise Library, 2nd Edition<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=41145)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Developer's Guide to Microsoft Enterprise Library, 2nd Edition<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=41145)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>EntLib is not included when you install Visual Studio and Microsoft .NET Framework.</source>
          <target state="new">EntLib is not included when you install Visual Studio and Microsoft .NET Framework.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must perform a separate download action.</source>
          <target state="new">You must perform a separate download action.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>NuGet<ept id="p1">**</ept> system through Visual Studio makes the download easy.</source>
          <target state="new">The <bpt id="p1">**</bpt>NuGet<ept id="p1">**</ept> system through Visual Studio makes the download easy.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The download results in a directory named packages\ under the same directory where your Visual Studio solution .sln file is stored.</source>
          <target state="new">The download results in a directory named packages\ under the same directory where your Visual Studio solution .sln file is stored.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The EntLib assembly .dll files are installed in a subdirectory.</source>
          <target state="new">The EntLib assembly .dll files are installed in a subdirectory.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The two assembly files are named as follows:</source>
          <target state="new">The two assembly files are named as follows:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C&amp;#x23; code files explained</source>
          <target state="new">C&amp;#x23; code files explained</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The C# code sample consists of three .cs files whose content is pasted into the sections that follow.</source>
          <target state="new">The C# code sample consists of three .cs files whose content is pasted into the sections that follow.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Their file names are:</source>
          <target state="new">Their file names are:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Shorter <ph id="ph1">`Program.cs`</ph> without <ph id="ph2">`try/catch`</ph></source>
          <target state="new">Shorter <ph id="ph1">`Program.cs`</ph> without <ph id="ph2">`try/catch`</ph></target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another .cs file provided is a much shorter version of <ph id="ph1">`Program.cs`</ph>.</source>
          <target state="new">Another .cs file provided is a much shorter version of <ph id="ph1">`Program.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All the <ph id="ph1">`try/catch`</ph> code has been removed.</source>
          <target state="new">All the <ph id="ph1">`try/catch`</ph> code has been removed.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This makes it easier for the eye to see the EntLib calls.</source>
          <target state="new">This makes it easier for the eye to see the EntLib calls.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Test .cs file</source>
          <target state="new">Test .cs file</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Testing your retry logic is tricky because there is no obvious way to cause a genuine transient fault error.</source>
          <target state="new">Testing your retry logic is tricky because there is no obvious way to cause a genuine transient fault error.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One test solution is to use temporary code to:</source>
          <target state="new">One test solution is to use temporary code to:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Cause a pretend transient fault.</source>
          <target state="new">Cause a pretend transient fault.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Fix the cause of the transient fault.</source>
          <target state="new">Fix the cause of the transient fault.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Retry the connection or query, expecting success.</source>
          <target state="new">Retry the connection or query, expecting success.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To help you test, another .cs file is provided that you can use as a temporary substitute:</source>
          <target state="new">To help you test, another .cs file is provided that you can use as a temporary substitute:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Temporary replacement for <ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy.cs`</ph>.</source>
          <target state="new">Temporary replacement for <ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code locations at which to make changes for this testing are tagged with a comment that contains the string <ph id="ph1">`TEST.PASSWORD_FIX`</ph>.</source>
          <target state="new">The code locations at which to make changes for this testing are tagged with a comment that contains the string <ph id="ph1">`TEST.PASSWORD_FIX`</ph>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Compile and run the code sample</source>
          <target state="new">Compile and run the code sample</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can compile the sample with the following steps:</source>
          <target state="new">You can compile the sample with the following steps:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a new project from the C# Console Application template.</source>
          <target state="new">In Visual Studio, create a new project from the C# Console Application template.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Right-click your project, and then add the .cs files for which source code is provided in this topic.</source>
          <target state="new">Right-click your project, and then add the .cs files for which source code is provided in this topic.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`cmd.exe`</ph> command window, run the program as shown next.</source>
          <target state="new">In a <ph id="ph1">`cmd.exe`</ph> command window, run the program as shown next.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Actual output from a run is also shown:</source>
          <target state="new">Actual output from a run is also shown:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The C# source code for the .cs files are in the following sections.</source>
          <target state="new">The C# source code for the .cs files are in the following sections.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Program.cs file</source>
          <target state="new">Program.cs file</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code file, Program.cs, is long because it contains <ph id="ph1">`try/catch`</ph> blocks that execute only if an error occurs.</source>
          <target state="new">The following code file, Program.cs, is long because it contains <ph id="ph1">`try/catch`</ph> blocks that execute only if an error occurs.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Near the end of the present topic is a much shorter version of <ph id="ph1">`Program.cs`</ph> with all the <ph id="ph2">`try/catch`</ph> lines removed.</source>
          <target state="new">Near the end of the present topic is a much shorter version of <ph id="ph1">`Program.cs`</ph> with all the <ph id="ph2">`try/catch`</ph> lines removed.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method is in <ph id="ph2">`Program.cs`</ph>.</source>
          <target state="new">The <ph id="ph1">`Main`</ph> method is in <ph id="ph2">`Program.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The call stack runs as follows:</source>
          <target state="new">The call stack runs as follows:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Main`</ph> calls <ph id="ph2">`ConnectAndQuery`</ph>.</source>
          <target state="new"><ph id="ph1">`Main`</ph> calls <ph id="ph2">`ConnectAndQuery`</ph>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConnectAndQuery`</ph> calls <ph id="ph2">`InitializeFields`</ph>.</source>
          <target state="new"><ph id="ph1">`ConnectAndQuery`</ph> calls <ph id="ph2">`InitializeFields`</ph>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ConnectAndQuery`</ph> calls <ph id="ph2">`EstablishConnection`</ph>.</source>
          <target state="new"><ph id="ph1">`ConnectAndQuery`</ph> calls <ph id="ph2">`EstablishConnection`</ph>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EstablishConnection`</ph> calls <ph id="ph2">`IssueQueryCommand`</ph>.</source>
          <target state="new"><ph id="ph1">`EstablishConnection`</ph> calls <ph id="ph2">`IssueQueryCommand`</ph>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy.cs`</ph> file</source>
          <target state="new"><ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy.cs`</ph> file</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>EntLib60 has a class named <ph id="ph1">`ReliableSqlConnection`</ph>.</source>
          <target state="new">EntLib60 has a class named <ph id="ph1">`ReliableSqlConnection`</ph>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can control how the connection instance decides whether an exception is a transient error by assigning to it a class that implements <ph id="ph1">`ITransientErrorDetectionStrategy`</ph>.</source>
          <target state="new">You can control how the connection instance decides whether an exception is a transient error by assigning to it a class that implements <ph id="ph1">`ITransientErrorDetectionStrategy`</ph>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>EntLib60 offers the class <ph id="ph1">`SqlDatabaseTransientErrorDetectionStrategy`</ph>.</source>
          <target state="new">EntLib60 offers the class <ph id="ph1">`SqlDatabaseTransientErrorDetectionStrategy`</ph>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>But in this topic we chose to implement and use our own custom class <ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy`</ph>.</source>
          <target state="new">But in this topic we chose to implement and use our own custom class <ph id="ph1">`Custom_SqlDatabaseTransientErrorDetectionStrategy`</ph>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Our custom class has a whitelist of values to compare against <ph id="ph1">`SqlException.Number`</ph>.</source>
          <target state="new">Our custom class has a whitelist of values to compare against <ph id="ph1">`SqlException.Number`</ph>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs`</ph> file</source>
          <target state="new"><ph id="ph1">`ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs`</ph> file</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This custom class that implements <ph id="ph1">`ITransientErrorDetectionStrategy`</ph> enforces our choice to never consider let EntLib60 consider any query command error to be merely transient.</source>
          <target state="new">This custom class that implements <ph id="ph1">`ITransientErrorDetectionStrategy`</ph> enforces our choice to never consider let EntLib60 consider any query command error to be merely transient.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Instead, the overall program is designed to assess the <ph id="ph1">`SqlException.Number`</ph> in its own custom logic.</source>
          <target state="new">Instead, the overall program is designed to assess the <ph id="ph1">`SqlException.Number`</ph> in its own custom logic.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>With the class in this section, we made the design choice to have our program discard and recreate a new connection before retrying any failed query command, transient or not.</source>
          <target state="new">With the class in this section, we made the design choice to have our program discard and recreate a new connection before retrying any failed query command, transient or not.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Test your retry logic</source>
          <target state="new">Test your retry logic</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It is tricky to test your EntLib60 program.</source>
          <target state="new">It is tricky to test your EntLib60 program.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It is difficult to cause a genuinely transient error, and to controls its timings.</source>
          <target state="new">It is difficult to cause a genuinely transient error, and to controls its timings.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This demo code includes a simple technique you can use to mimic a transient error.</source>
          <target state="new">This demo code includes a simple technique you can use to mimic a transient error.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The technique is to use our custom detector <ph id="ph1">`Test2_TransientErrorDetectionStrategy`</ph> class in place of the <ph id="ph2">`Custom_SqlTransientErrorDetectionStrategy`</ph> class.</source>
          <target state="new">The technique is to use our custom detector <ph id="ph1">`Test2_TransientErrorDetectionStrategy`</ph> class in place of the <ph id="ph2">`Custom_SqlTransientErrorDetectionStrategy`</ph> class.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This way you can force the <ph id="ph1">`ReliableSqlConnection`</ph> of EntLib60 to assess <bpt id="p1">*</bpt>all<ept id="p1">*</ept> <ph id="ph2">`SqlException`</ph> occurrences as being transient.</source>
          <target state="new">This way you can force the <ph id="ph1">`ReliableSqlConnection`</ph> of EntLib60 to assess <bpt id="p1">*</bpt>all<ept id="p1">*</ept> <ph id="ph2">`SqlException`</ph> occurrences as being transient.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The trick is to have the program self-fix the problem before the first retry.</source>
          <target state="new">The trick is to have the program self-fix the problem before the first retry.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Misspelled password trick</source>
          <target state="new">Misspelled password trick</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An easy approach is to start with a misspelled value for the connection password.</source>
          <target state="new">An easy approach is to start with a misspelled value for the connection password.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When this causes an <ph id="ph1">`SqlException`</ph>, with <ph id="ph2">`sqlExc.Number==18456`</ph>, the program must fix the password.</source>
          <target state="new">When this causes an <ph id="ph1">`SqlException`</ph>, with <ph id="ph2">`sqlExc.Number==18456`</ph>, the program must fix the password.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>On the retry the program succeeds.</source>
          <target state="new">On the retry the program succeeds.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To implement this test in our demo program, search the source code for all occurrences of <ph id="ph1">`TEST.PASSWORD_FIX`</ph>.</source>
          <target state="new">To implement this test in our demo program, search the source code for all occurrences of <ph id="ph1">`TEST.PASSWORD_FIX`</ph>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>After you find all occurrences of <ph id="ph1">`TEST.PASSWORD_FIX`</ph> and make the changes that are explained in comments at each location, you will have made the following changes:</source>
          <target state="new">After you find all occurrences of <ph id="ph1">`TEST.PASSWORD_FIX`</ph> and make the changes that are explained in comments at each location, you will have made the following changes:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the live code in the <ph id="ph1">`InitializeFields`</ph> method, change the password value to an incorrect value.</source>
          <target state="new">In the live code in the <ph id="ph1">`InitializeFields`</ph> method, change the password value to an incorrect value.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`//`</ph> commented code, in the <ph id="ph2">`EstablishConnection`</ph> method, there is an entire <ph id="ph3">`catch`</ph> block...</source>
          <target state="new">In <ph id="ph1">`//`</ph> commented code, in the <ph id="ph2">`EstablishConnection`</ph> method, there is an entire <ph id="ph3">`catch`</ph> block...</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>that is commented out.</source>
          <target state="new">that is commented out.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Uncomment the whole block.</source>
          <target state="new">Uncomment the whole block.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In the newly uncommented <ph id="ph1">`catch`</ph> block, assign the correct password value.</source>
          <target state="new">In the newly uncommented <ph id="ph1">`catch`</ph> block, assign the correct password value.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Where the class <ph id="ph1">`Custom_TransientErrorDetectionStrategy`</ph> is referenced in the code, replace the reference with <ph id="ph2">`Test2_TransientErrorDetectionStrategy`</ph>.</source>
          <target state="new">Where the class <ph id="ph1">`Custom_TransientErrorDetectionStrategy`</ph> is referenced in the code, replace the reference with <ph id="ph2">`Test2_TransientErrorDetectionStrategy`</ph>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can keep the variable name the same.</source>
          <target state="new">You can keep the variable name the same.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Test2_TransientErrorDetectionStrategy.cs`</ph> file</source>
          <target state="new"><ph id="ph1">`Test2_TransientErrorDetectionStrategy.cs`</ph> file</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Shorter <ph id="ph1">`Program.cs`</ph>, without <ph id="ph2">`try/catch`</ph></source>
          <target state="new">Shorter <ph id="ph1">`Program.cs`</ph>, without <ph id="ph2">`try/catch`</ph></target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The shorter code in this section does compile, and if run it would usually work.</source>
          <target state="new">The shorter code in this section does compile, and if run it would usually work.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>But the shorter code is not meant to be run in production.</source>
          <target state="new">But the shorter code is not meant to be run in production.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The only purpose of this shorter <ph id="ph1">`Program.cs`</ph> sample is to make it easier to see the same EntLib calls that are in the real <ph id="ph2">`Program.cs`</ph>.</source>
          <target state="new">The only purpose of this shorter <ph id="ph1">`Program.cs`</ph> sample is to make it easier to see the same EntLib calls that are in the real <ph id="ph2">`Program.cs`</ph>.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The removal of all the <ph id="ph1">`try/catch`</ph> blocks makes the EntLib calls easier to see.</source>
          <target state="new">The removal of all the <ph id="ph1">`try/catch`</ph> blocks makes the EntLib calls easier to see.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Related links</source>
          <target state="new">Related links</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling Namespace</source>
          <target state="new">Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling Namespace</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Enterprise Library 6 Class Library</source>
          <target state="new">Enterprise Library 6 Class Library</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Code sample: Retry logic in C# for connecting to SQL Database with ADO.NET</source>
          <target state="new">Code sample: Retry logic in C# for connecting to SQL Database with ADO.NET</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Client quick-start code samples to SQL Database</source>
          <target state="new">Client quick-start code samples to SQL Database</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6adfb6a96d21b4890895268bd3fcf0250df9c812</xliffext:olfilehash>
  </header>
</xliff>