{
  "nodes": [
    {
      "content": "Using the SQL Connector in Logic Apps | Microsoft Azure App Service",
      "pos": [
        26,
        93
      ]
    },
    {
      "content": "How to create and configure the SQL Connector or API app and use it in a logic app in Azure App Service",
      "pos": [
        111,
        214
      ]
    },
    {
      "content": "Get started with the Microsoft SQL Connector and add it to your Logic App",
      "pos": [
        544,
        617
      ]
    },
    {
      "content": "Connect to an on-premises SQL Server or an Azure SQL Database to create and change your information or data.",
      "pos": [
        618,
        726
      ]
    },
    {
      "content": "Connectors can be used in Logic Apps to retrieve, process, or push data as a part of a \"workflow\".",
      "pos": [
        727,
        825
      ]
    },
    {
      "content": "When you use the SQL Connector in your workflow, you can achieve a variety of scenarios.",
      "pos": [
        826,
        914
      ]
    },
    {
      "content": "For example, you can:",
      "pos": [
        915,
        936
      ]
    },
    {
      "content": "Expose a section of the data residing in your SQL database using a web or mobile application.",
      "pos": [
        940,
        1033
      ]
    },
    {
      "content": "Insert data into a SQL database table for storage.",
      "pos": [
        1036,
        1086
      ]
    },
    {
      "content": "For example, you can enter employee records, update sales orders, and so on.",
      "pos": [
        1087,
        1163
      ]
    },
    {
      "content": "Get data from SQL and use it in a business process.",
      "pos": [
        1166,
        1217
      ]
    },
    {
      "content": "For example, you can get customer records and put those customer records in SalesForce.",
      "pos": [
        1218,
        1305
      ]
    },
    {
      "content": "You can add the SQL Connector to your business workflow and process data as part of this workflow within a Logic App.",
      "pos": [
        1307,
        1424
      ]
    },
    {
      "content": "Triggers and Actions",
      "pos": [
        1430,
        1450
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>Triggers<ept id=\"p1\">*</ept> are events that happen.",
      "pos": [
        1451,
        1485
      ]
    },
    {
      "content": "For example, when an order is updated or when a new customer is added.",
      "pos": [
        1486,
        1556
      ]
    },
    {
      "content": "An <bpt id=\"p1\">*</bpt>Action<ept id=\"p1\">*</ept> is the result of the trigger.",
      "pos": [
        1557,
        1598
      ]
    },
    {
      "content": "For example, when an order is updated, send an alert to the salesperson.",
      "pos": [
        1599,
        1671
      ]
    },
    {
      "content": "Or, when a new customer is added, send a welcome email to the new customer.",
      "pos": [
        1672,
        1747
      ]
    },
    {
      "content": "The SQL Connector can be used as a trigger or an action in a logic app and supports data in JSON and XML formats.",
      "pos": [
        1749,
        1862
      ]
    },
    {
      "content": "For every table included in your package settings (more on that later in this topic), there is a set of JSON actions and a set of XML actions.",
      "pos": [
        1863,
        2005
      ]
    },
    {
      "content": "The SQL Connector has the following Triggers and Actions available:",
      "pos": [
        2007,
        2074
      ]
    },
    {
      "content": "Triggers",
      "pos": [
        2076,
        2084
      ]
    },
    {
      "content": "Actions",
      "pos": [
        2087,
        2094
      ]
    },
    {
      "content": "Poll Data",
      "pos": [
        2105,
        2114
      ]
    },
    {
      "content": "Insert Into Table",
      "pos": [
        2125,
        2142
      ]
    },
    {
      "content": "Update Table",
      "pos": [
        2151,
        2163
      ]
    },
    {
      "content": "Select From Table",
      "pos": [
        2172,
        2189
      ]
    },
    {
      "content": "Delete From Table",
      "pos": [
        2198,
        2215
      ]
    },
    {
      "content": "Call Stored Procedure",
      "pos": [
        2224,
        2245
      ]
    },
    {
      "content": "Create the SQL Connector",
      "pos": [
        2260,
        2284
      ]
    },
    {
      "content": "A connector can be created within a logic app or be created directly from the Azure Marketplace.",
      "pos": [
        2286,
        2382
      ]
    },
    {
      "content": "To create a connector from the Marketplace:",
      "pos": [
        2383,
        2426
      ]
    },
    {
      "pos": [
        2433,
        2481
      ],
      "content": "In the Azure startboard, select <bpt id=\"p1\">**</bpt>Marketplace<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2485,
        2546
      ],
      "content": "Search for “SQL Connector”, select it, and select <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Enter the Name, App Service Plan, and other properties.",
      "pos": [
        2550,
        2605
      ]
    },
    {
      "content": "Enter the following package settings:",
      "pos": [
        2609,
        2646
      ]
    },
    {
      "content": "Name | Required |  Description",
      "pos": [
        2652,
        2682
      ]
    },
    {
      "content": "--- | --- | ---",
      "pos": [
        2683,
        2698
      ]
    },
    {
      "content": "Server Name | Yes | Enter the SQL Server name.",
      "pos": [
        2699,
        2745
      ]
    },
    {
      "content": "For example, enter <bpt id=\"p1\">*</bpt>SQLserver/sqlexpress<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>SQLserver.mydomain.com<ept id=\"p2\">*</ept>.",
      "pos": [
        2746,
        2816
      ]
    },
    {
      "content": "Port | No | Default is 1433.",
      "pos": [
        2817,
        2845
      ]
    },
    {
      "content": "User Name | Yes | Enter a user name that can log into the SQL Server.",
      "pos": [
        2846,
        2915
      ]
    },
    {
      "content": "If connecting to an on-premises SQL Server, enter SQL Authentication credentials.",
      "pos": [
        2916,
        2997
      ]
    },
    {
      "content": "Password | Yes | Enter the user name password.",
      "pos": [
        2998,
        3044
      ]
    },
    {
      "content": "Database Name | Yes | Enter the database you are connecting.",
      "pos": [
        3045,
        3105
      ]
    },
    {
      "content": "For example, you can enter <bpt id=\"p1\">*</bpt>Customers<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>dbo/orders<ept id=\"p2\">*</ept>.",
      "pos": [
        3106,
        3161
      ]
    },
    {
      "content": "On-Premises | Yes | Default is False.",
      "pos": [
        3162,
        3199
      ]
    },
    {
      "content": "Enter False if connecting to an Azure SQL database.",
      "pos": [
        3200,
        3251
      ]
    },
    {
      "content": "Enter True if connecting to an on-premises SQL Server.",
      "pos": [
        3252,
        3306
      ]
    },
    {
      "content": "Service Bus Connection String | No | If you're connecting to on-premises, enter the Service Bus relay connection string.",
      "pos": [
        3307,
        3427
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Using the Hybrid Connection Manager<ept id=\"p1\">](app-service-logic-hybrid-connection-manager.md)</ept>",
      "pos": [
        3437,
        3522
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Service Bus Pricing<ept id=\"p1\">](http://azure.microsoft.com/pricing/details/service-bus/)</ept>",
      "pos": [
        3527,
        3605
      ]
    },
    {
      "content": "Partner Server Name | No | If the primary server is unavailable, you can enter a partner server as an alternate or backup server.",
      "pos": [
        3606,
        3735
      ]
    },
    {
      "content": "Tables | No | List the database tables that can be updated by the connector.",
      "pos": [
        3736,
        3812
      ]
    },
    {
      "content": "For example, enter <bpt id=\"p1\">*</bpt>OrdersTable<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>EmployeeTable<ept id=\"p2\">*</ept>.",
      "pos": [
        3813,
        3865
      ]
    },
    {
      "content": "If no tables are entered, all tables can be used.",
      "pos": [
        3866,
        3915
      ]
    },
    {
      "content": "Valid tables and/or Stored Procedures are required to use this connector as an action.",
      "pos": [
        3916,
        4002
      ]
    },
    {
      "content": "Stored Procedures | No | Enter an existing stored procedure that can be called by the connector.",
      "pos": [
        4003,
        4099
      ]
    },
    {
      "content": "For example, enter <bpt id=\"p1\">*</bpt>sp_IsEmployeeEligible<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>sp_CalculateOrderDiscount<ept id=\"p2\">*</ept>.",
      "pos": [
        4100,
        4174
      ]
    },
    {
      "content": "Valid tables and/or Stored Procedures are required to use this connector as an action.",
      "pos": [
        4175,
        4261
      ]
    },
    {
      "content": "Data Available Query | For trigger support | SQL statement to determine whether any data is available for polling a SQL Server database table.",
      "pos": [
        4262,
        4404
      ]
    },
    {
      "content": "This should return a numeric value representing the number of rows of data available.",
      "pos": [
        4405,
        4490
      ]
    },
    {
      "content": "Example: SELECT COUNT(<bpt id=\"p1\">*</bpt>) from table_name.\nPoll Data Query | For trigger support | The SQL statement to poll the SQL Server database table. You can enter any number of SQL statements separated by a semicolon. This statement is executed transactionally and only committed when the data is safely stored in your logic app. Example: SELECT * FROM table_name; DELETE FROM table_name. <ph id=\"ph1\">&lt;br/&gt;</ph><ph id=\"ph2\">&lt;br/&gt;</ph><ept id=\"p1\">*</ept><bpt id=\"p2\">*</bpt>Note<ept id=\"p2\">*</ept>*",
      "pos": [
        4491,
        4888
      ]
    },
    {
      "content": "You must provide a poll statement that avoids an infinite loop by deleting, moving or updating selected data to ensure that same data isn't polled again.",
      "pos": [
        4893,
        5046
      ]
    },
    {
      "content": "When complete, the Package Settings look similar to the following:",
      "pos": [
        5051,
        5117
      ]
    },
    {
      "content": "![][1]",
      "pos": [
        5120,
        5126
      ]
    },
    {
      "pos": [
        5133,
        5151
      ],
      "content": "Select <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Use the Connector as a Trigger",
      "pos": [
        5158,
        5188
      ]
    },
    {
      "content": "Let's look at a simple logic app that polls data from a SQL table, adds the data in another table, and updates the data.",
      "pos": [
        5189,
        5309
      ]
    },
    {
      "content": "To use the SQL connector as a trigger, enter the <bpt id=\"p1\">**</bpt>Data Available Query<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Poll Data Query<ept id=\"p2\">**</ept> values.",
      "pos": [
        5311,
        5416
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Data Available Query<ept id=\"p1\">**</ept> is executed on the schedule you enter and determines if any data is available.",
      "pos": [
        5417,
        5520
      ]
    },
    {
      "content": "Since this query only returns a scalar number, it can be tuned and optimized for frequent execution.",
      "pos": [
        5521,
        5621
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Poll Data Query<ept id=\"p1\">**</ept> is only executed when the Data Available Query indicates that data is available.",
      "pos": [
        5623,
        5723
      ]
    },
    {
      "content": "This statement executes within a transaction and is only committed when the extracted data is durably stored in your workflow.",
      "pos": [
        5724,
        5850
      ]
    },
    {
      "content": "It is important to avoid infinitely re-extracting the same data.",
      "pos": [
        5851,
        5915
      ]
    },
    {
      "content": "The transactional nature of this execution can be used to delete or update the data to ensure it isn't collected the next time data is queried.",
      "pos": [
        5916,
        6059
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The schema returned by this statement identifies the available properties in your connector.",
      "pos": [
        6063,
        6168
      ]
    },
    {
      "content": "All columns must be named.",
      "pos": [
        6169,
        6195
      ]
    },
    {
      "content": "Data Available Query Example",
      "pos": [
        6202,
        6230
      ]
    },
    {
      "content": "Poll Data Query Example",
      "pos": [
        6316,
        6339
      ]
    },
    {
      "content": "Add the Trigger",
      "pos": [
        6651,
        6666
      ]
    },
    {
      "content": "When creating or editing a logic app, select the SQL Connector you created as the trigger.",
      "pos": [
        6670,
        6760
      ]
    },
    {
      "content": "This lists the available triggers: <bpt id=\"p1\">**</bpt>Poll Data (JSON)<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Poll Data (XML)<ept id=\"p2\">**</ept>:",
      "pos": [
        6761,
        6841
      ]
    },
    {
      "content": "![][5]",
      "pos": [
        6844,
        6850
      ]
    },
    {
      "content": "Select the <bpt id=\"p1\">**</bpt>Poll Data (JSON)<ept id=\"p1\">**</ept> trigger, enter the frequency, and click the ✓:",
      "pos": [
        6855,
        6933
      ]
    },
    {
      "content": "![][6]",
      "pos": [
        6936,
        6942
      ]
    },
    {
      "content": "The trigger now appears as configured in the logic app.",
      "pos": [
        6947,
        7002
      ]
    },
    {
      "content": "The output(s) of the trigger are shown and can be used as inputs in any subsequent actions:",
      "pos": [
        7003,
        7094
      ]
    },
    {
      "content": "![][7]",
      "pos": [
        7097,
        7103
      ]
    },
    {
      "content": "Use the Connector as an Action",
      "pos": [
        7108,
        7138
      ]
    },
    {
      "content": "Using our simple logic app scenario that polls data from a SQL table, adds the data in another table, and updates the data.",
      "pos": [
        7139,
        7262
      ]
    },
    {
      "content": "To use the SQL Connector as an action, enter the name of the Tables and/or Stored Procedures you entered when you created the SQL Connector:",
      "pos": [
        7264,
        7404
      ]
    },
    {
      "content": "After your trigger (or choose 'run this logic manually'), add the SQL connector you created from the gallery.",
      "pos": [
        7409,
        7518
      ]
    },
    {
      "content": "Select one of the Insert actions, like <bpt id=\"p1\">*</bpt>Insert Into TempEmployeeDetails (JSON)<ept id=\"p1\">*</ept>:",
      "pos": [
        7519,
        7599
      ]
    },
    {
      "content": "![][8]",
      "pos": [
        7602,
        7608
      ]
    },
    {
      "content": "Enter the input values of the record to be inserted, and click on the ✓:",
      "pos": [
        7613,
        7685
      ]
    },
    {
      "content": "![][9]",
      "pos": [
        7688,
        7694
      ]
    },
    {
      "content": "From the gallery, select the same SQL connector you created.",
      "pos": [
        7699,
        7759
      ]
    },
    {
      "content": "As an action, select the Update action on the same table, like <bpt id=\"p1\">*</bpt>Update EmployeeDetails<ept id=\"p1\">*</ept>:",
      "pos": [
        7760,
        7848
      ]
    },
    {
      "content": "![][11]",
      "pos": [
        7851,
        7858
      ]
    },
    {
      "content": "Enter the input values for the update action, and click on the ✓:",
      "pos": [
        7863,
        7928
      ]
    },
    {
      "content": "![][12]",
      "pos": [
        7931,
        7938
      ]
    },
    {
      "content": "You can test the logic app by adding a new record in the table that is being polled.",
      "pos": [
        7940,
        8024
      ]
    },
    {
      "content": "What you can and cannot do",
      "pos": [
        8029,
        8055
      ]
    },
    {
      "content": "SQL Query",
      "pos": [
        8057,
        8066
      ]
    },
    {
      "content": "Supported",
      "pos": [
        8069,
        8078
      ]
    },
    {
      "content": "Not Supported",
      "pos": [
        8081,
        8094
      ]
    },
    {
      "content": "Where clause",
      "pos": [
        8111,
        8123
      ]
    },
    {
      "content": "Operators: AND, OR, =, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;= and LIKE",
      "pos": [
        8134,
        8182
      ]
    },
    {
      "content": "Multiple sub conditions can be combined by ‘(‘ and ‘)’",
      "pos": [
        8191,
        8245
      ]
    },
    {
      "content": "String literals, Datetime (enclosed in single quotes), numbers (should only contain numeric characters)",
      "pos": [
        8254,
        8357
      ]
    },
    {
      "content": "Should strictly be in a binary expression format, like ((operand operator operand) AND/OR (operand operator operand))*",
      "pos": [
        8366,
        8484
      ]
    },
    {
      "content": "Operators: Between, IN",
      "pos": [
        8505,
        8527
      ]
    },
    {
      "content": "All built-in functions like ADD(), MAX() NOW(), POWER(), and so on",
      "pos": [
        8536,
        8602
      ]
    },
    {
      "content": "Math operators like *, -, +, and so on",
      "pos": [
        8611,
        8649
      ]
    },
    {
      "content": "String concatenations using +.",
      "pos": [
        8658,
        8688
      ]
    },
    {
      "content": "All Joins",
      "pos": [
        8697,
        8706
      ]
    },
    {
      "content": "IS NULL and IS NOT Null",
      "pos": [
        8715,
        8738
      ]
    },
    {
      "content": "Any numbers with non-numeric characters, like hexadecimal numbers",
      "pos": [
        8747,
        8812
      ]
    },
    {
      "content": "Fields (in Select query)",
      "pos": [
        8823,
        8847
      ]
    },
    {
      "content": "Valid column names separated by commas.",
      "pos": [
        8858,
        8897
      ]
    },
    {
      "content": "No table name prefixes allowed (the connector works on one table at a time).",
      "pos": [
        8898,
        8974
      ]
    },
    {
      "content": "Names can be escaped with ‘[‘ and ‘]’",
      "pos": [
        8983,
        9020
      ]
    },
    {
      "content": "Keywords like TOP, DISTINCT, and so on",
      "pos": [
        9041,
        9079
      ]
    },
    {
      "content": "Aliasing, like Street + City + Zip AS Address",
      "pos": [
        9088,
        9133
      ]
    },
    {
      "content": "All built-in functions, like ADD(), MAX() NOW(), POWER(), and so on",
      "pos": [
        9142,
        9209
      ]
    },
    {
      "content": "Math operators, like *, -, +, and so on",
      "pos": [
        9218,
        9257
      ]
    },
    {
      "content": "String concatenations using +",
      "pos": [
        9266,
        9295
      ]
    },
    {
      "content": "Tips",
      "pos": [
        9312,
        9316
      ]
    },
    {
      "content": "For advanced queries, we suggest creating a stored procedure and execute using the execute stored procedure API.",
      "pos": [
        9320,
        9432
      ]
    },
    {
      "content": "When using inner queries, use them within stored procedures.",
      "pos": [
        9435,
        9495
      ]
    },
    {
      "content": "For joining multiple conditions, you can use the 'AND' and 'OR' operators.",
      "pos": [
        9498,
        9572
      ]
    },
    {
      "content": "Hybrid Configuration (Optional)",
      "pos": [
        9577,
        9608
      ]
    },
    {
      "pos": [
        9612,
        9713
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This step is required only if you are using SQL Server on-premises behind your firewall."
    },
    {
      "content": "App Service uses the Hybrid Configuration Manager to connect securely to your on-premises system.",
      "pos": [
        9715,
        9812
      ]
    },
    {
      "content": "If you're connector uses an on-premises SQL Server, the Hybrid Connection Manager is required.",
      "pos": [
        9813,
        9907
      ]
    },
    {
      "pos": [
        9909,
        9999
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Using the Hybrid Connection Manager<ept id=\"p1\">](app-service-logic-hybrid-connection-manager.md)</ept>."
    },
    {
      "content": "Do more with your Connector",
      "pos": [
        10005,
        10032
      ]
    },
    {
      "content": "Now that the connector is created, you can add it to a business workflow using a Logic App.",
      "pos": [
        10033,
        10124
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>What are Logic Apps?<ept id=\"p1\">](app-service-logic-what-are-logic-apps.md)</ept>.",
      "pos": [
        10125,
        10194
      ]
    },
    {
      "pos": [
        10196,
        10320
      ],
      "content": "View the Swagger REST API reference at <bpt id=\"p1\">[</bpt>Connectors and API Apps Reference<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=529766)</ept>."
    },
    {
      "content": "You can also review performance statistics and control security to the connector.",
      "pos": [
        10322,
        10403
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Manage and Monitor your built-in API Apps and Connectors<ept id=\"p1\">](app-service-logic-monitor-your-connectors.md)</ept>.",
      "pos": [
        10404,
        10513
      ]
    },
    {
      "content": "test",
      "pos": [
        11072,
        11076
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Using the SQL Connector in Logic Apps | Microsoft Azure App Service\"\n   description=\"How to create and configure the SQL Connector or API app and use it in a logic app in Azure App Service\"\n   services=\"app-service\\logic\"\n   documentationCenter=\".net,nodejs,java\"\n   authors=\"anuragdalmia\"\n   manager=\"dwrede\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"app-service-logic\"\n   ms.devlang=\"multiple\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"integration\"\n   ms.date=\"08/23/2015\"\n   ms.author=\"sameerch\"/>\n\n\n# Get started with the Microsoft SQL Connector and add it to your Logic App\nConnect to an on-premises SQL Server or an Azure SQL Database to create and change your information or data. Connectors can be used in Logic Apps to retrieve, process, or push data as a part of a \"workflow\". When you use the SQL Connector in your workflow, you can achieve a variety of scenarios. For example, you can:\n\n- Expose a section of the data residing in your SQL database using a web or mobile application.\n- Insert data into a SQL database table for storage. For example, you can enter employee records, update sales orders, and so on.\n- Get data from SQL and use it in a business process. For example, you can get customer records and put those customer records in SalesForce.\n\nYou can add the SQL Connector to your business workflow and process data as part of this workflow within a Logic App. \n\n## Triggers and Actions\n*Triggers* are events that happen. For example, when an order is updated or when a new customer is added. An *Action* is the result of the trigger. For example, when an order is updated, send an alert to the salesperson. Or, when a new customer is added, send a welcome email to the new customer.\n\nThe SQL Connector can be used as a trigger or an action in a logic app and supports data in JSON and XML formats. For every table included in your package settings (more on that later in this topic), there is a set of JSON actions and a set of XML actions.\n\nThe SQL Connector has the following Triggers and Actions available:\n\nTriggers | Actions\n--- | ---\nPoll Data | <ul><li>Insert Into Table</li><li>Update Table</li><li>Select From Table</li><li>Delete From Table</li><li>Call Stored Procedure</li></ul>\n\n## Create the SQL Connector\n\nA connector can be created within a logic app or be created directly from the Azure Marketplace. To create a connector from the Marketplace:  \n\n1. In the Azure startboard, select **Marketplace**.\n2. Search for “SQL Connector”, select it, and select **Create**.\n3. Enter the Name, App Service Plan, and other properties.\n4. Enter the following package settings:\n\n    Name | Required |  Description\n--- | --- | ---\nServer Name | Yes | Enter the SQL Server name. For example, enter *SQLserver/sqlexpress* or *SQLserver.mydomain.com*.\nPort | No | Default is 1433.\nUser Name | Yes | Enter a user name that can log into the SQL Server. If connecting to an on-premises SQL Server, enter SQL Authentication credentials.\nPassword | Yes | Enter the user name password.\nDatabase Name | Yes | Enter the database you are connecting. For example, you can enter *Customers* or *dbo/orders*.\nOn-Premises | Yes | Default is False. Enter False if connecting to an Azure SQL database. Enter True if connecting to an on-premises SQL Server.\nService Bus Connection String | No | If you're connecting to on-premises, enter the Service Bus relay connection string.<br/><br/>[Using the Hybrid Connection Manager](app-service-logic-hybrid-connection-manager.md)<br/>[Service Bus Pricing](http://azure.microsoft.com/pricing/details/service-bus/)\nPartner Server Name | No | If the primary server is unavailable, you can enter a partner server as an alternate or backup server.\nTables | No | List the database tables that can be updated by the connector. For example, enter *OrdersTable* or *EmployeeTable*. If no tables are entered, all tables can be used. Valid tables and/or Stored Procedures are required to use this connector as an action.\nStored Procedures | No | Enter an existing stored procedure that can be called by the connector. For example, enter *sp_IsEmployeeEligible* or *sp_CalculateOrderDiscount*. Valid tables and/or Stored Procedures are required to use this connector as an action.\nData Available Query | For trigger support | SQL statement to determine whether any data is available for polling a SQL Server database table. This should return a numeric value representing the number of rows of data available. Example: SELECT COUNT(*) from table_name.\nPoll Data Query | For trigger support | The SQL statement to poll the SQL Server database table. You can enter any number of SQL statements separated by a semicolon. This statement is executed transactionally and only committed when the data is safely stored in your logic app. Example: SELECT * FROM table_name; DELETE FROM table_name. <br/><br/>**Note**<br/>You must provide a poll statement that avoids an infinite loop by deleting, moving or updating selected data to ensure that same data isn't polled again.\n\n5. When complete, the Package Settings look similar to the following:  \n![][1]  \n\n6. Select **Create**. \n\n\n## Use the Connector as a Trigger\nLet's look at a simple logic app that polls data from a SQL table, adds the data in another table, and updates the data.\n\nTo use the SQL connector as a trigger, enter the **Data Available Query** and **Poll Data Query** values. **Data Available Query** is executed on the schedule you enter and determines if any data is available. Since this query only returns a scalar number, it can be tuned and optimized for frequent execution.\n\n**Poll Data Query** is only executed when the Data Available Query indicates that data is available. This statement executes within a transaction and is only committed when the extracted data is durably stored in your workflow. It is important to avoid infinitely re-extracting the same data. The transactional nature of this execution can be used to delete or update the data to ensure it isn't collected the next time data is queried.\n\n> [AZURE.NOTE] The schema returned by this statement identifies the available properties in your connector. All columns must be named.\n\n#### Data Available Query Example\n\n    SELECT COUNT(*) FROM [Order] WHERE OrderStatus = 'ProcessedForCollection'\n\n#### Poll Data Query Example\n\n    SELECT *, GetData() as 'PollTime' FROM [Order]\n        WHERE OrderStatus = 'ProcessedForCollection'\n        ORDER BY Id DESC;\n    UPDATE [Order] SET OrderStatus = 'ProcessedForFrontDesk'\n        WHERE Id =\n        (SELECT Id FROM [Order] WHERE OrderStatus = 'ProcessedForCollection' ORDER BY Id DESC)\n\n### Add the Trigger\n1. When creating or editing a logic app, select the SQL Connector you created as the trigger. This lists the available triggers: **Poll Data (JSON)** and **Poll Data (XML)**:  \n![][5]\n\n2. Select the **Poll Data (JSON)** trigger, enter the frequency, and click the ✓:  \n![][6]\n\n3. The trigger now appears as configured in the logic app. The output(s) of the trigger are shown and can be used as inputs in any subsequent actions:  \n![][7]\n\n## Use the Connector as an Action\nUsing our simple logic app scenario that polls data from a SQL table, adds the data in another table, and updates the data.\n\nTo use the SQL Connector as an action, enter the name of the Tables and/or Stored Procedures you entered when you created the SQL Connector:\n\n1. After your trigger (or choose 'run this logic manually'), add the SQL connector you created from the gallery. Select one of the Insert actions, like *Insert Into TempEmployeeDetails (JSON)*:  \n![][8]\n\n2. Enter the input values of the record to be inserted, and click on the ✓:  \n![][9]\n\n3. From the gallery, select the same SQL connector you created. As an action, select the Update action on the same table, like *Update EmployeeDetails*:  \n![][11]\n\n4. Enter the input values for the update action, and click on the ✓:  \n![][12]\n\nYou can test the logic app by adding a new record in the table that is being polled.\n\n## What you can and cannot do\n\nSQL Query | Supported | Not Supported\n--- | --- | ---\nWhere clause | <ul><li>Operators: AND, OR, =, <>, <, <=, >, >= and LIKE</li><li>Multiple sub conditions can be combined by ‘(‘ and ‘)’</li><li>String literals, Datetime (enclosed in single quotes), numbers (should only contain numeric characters)</li><li>Should strictly be in a binary expression format, like ((operand operator operand) AND/OR (operand operator operand))*</li></ul> | <ul><li>Operators: Between, IN</li><li>All built-in functions like ADD(), MAX() NOW(), POWER(), and so on</li><li>Math operators like *, -, +, and so on</li><li>String concatenations using +.</li><li>All Joins</li><li>IS NULL and IS NOT Null</li><li>Any numbers with non-numeric characters, like hexadecimal numbers</li></ul>\nFields (in Select query) | <ul><li>Valid column names separated by commas. No table name prefixes allowed (the connector works on one table at a time).</li><li>Names can be escaped with ‘[‘ and ‘]’</li></ul> | <ul><li>Keywords like TOP, DISTINCT, and so on</li><li>Aliasing, like Street + City + Zip AS Address</li><li>All built-in functions, like ADD(), MAX() NOW(), POWER(), and so on</li><li>Math operators, like *, -, +, and so on</li><li>String concatenations using +</li></ul>\n\n#### Tips\n\n- For advanced queries, we suggest creating a stored procedure and execute using the execute stored procedure API.\n- When using inner queries, use them within stored procedures.\n- For joining multiple conditions, you can use the 'AND' and 'OR' operators.\n\n## Hybrid Configuration (Optional)\n\n> [AZURE.NOTE] This step is required only if you are using SQL Server on-premises behind your firewall.\n\nApp Service uses the Hybrid Configuration Manager to connect securely to your on-premises system. If you're connector uses an on-premises SQL Server, the Hybrid Connection Manager is required.\n\nSee [Using the Hybrid Connection Manager](app-service-logic-hybrid-connection-manager.md).\n\n\n## Do more with your Connector\nNow that the connector is created, you can add it to a business workflow using a Logic App. See [What are Logic Apps?](app-service-logic-what-are-logic-apps.md).\n\nView the Swagger REST API reference at [Connectors and API Apps Reference](http://go.microsoft.com/fwlink/p/?LinkId=529766).\n\nYou can also review performance statistics and control security to the connector. See [Manage and Monitor your built-in API Apps and Connectors](app-service-logic-monitor-your-connectors.md).\n\n\n<!--Image references-->\n[1]: ./media/app-service-logic-connector-sql/Create.png\n[5]: ./media/app-service-logic-connector-sql/LogicApp1.png\n[6]: ./media/app-service-logic-connector-sql/LogicApp2.png\n[7]: ./media/app-service-logic-connector-sql/LogicApp3.png\n[8]: ./media/app-service-logic-connector-sql/LogicApp4.png\n[9]: ./media/app-service-logic-connector-sql/LogicApp5.png\n[10]: ./media/app-service-logic-connector-sql/LogicApp6.png\n[11]: ./media/app-service-logic-connector-sql/LogicApp7.png\n[12]: ./media/app-service-logic-connector-sql/LogicApp8.png\n\ntest\n"
}