<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues (Java) | Microsoft Azure</source>
          <target state="new">How to use Service Bus queues (Java) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use Service Bus queues in Azure.</source>
          <target state="new">Learn how to use Service Bus queues in Azure.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples written in Java.</source>
          <target state="new">Code samples written in Java.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use Service Bus queues</source>
          <target state="new">How to use Service Bus queues</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This guide describes how to use Service Bus queues.</source>
          <target state="new">This guide describes how to use Service Bus queues.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The samples are</source>
          <target state="new">The samples are</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>written in Java and use the <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>.</source>
          <target state="new">written in Java and use the <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new">The</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>scenarios covered include <bpt id="p1">**</bpt>creating queues<ept id="p1">**</ept>, <bpt id="p2">**</bpt>sending and receiving
messages<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>deleting queues<ept id="p3">**</ept>.</source>
          <target state="new">scenarios covered include <bpt id="p1">**</bpt>creating queues<ept id="p1">**</ept>, <bpt id="p2">**</bpt>sending and receiving
messages<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>deleting queues<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Configure your application to use Service Bus</source>
          <target state="new">Configure your application to use Service Bus</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Make sure you have installed the <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept> before building this sample.</source>
          <target state="new">Make sure you have installed the <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept> before building this sample.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you are using Eclipse, you can install the <bpt id="p1">[</bpt>Azure Toolkit for Eclipse<ept id="p1">][]</ept> that includes the Azure SDK for Java.</source>
          <target state="new">If you are using Eclipse, you can install the <bpt id="p1">[</bpt>Azure Toolkit for Eclipse<ept id="p1">][]</ept> that includes the Azure SDK for Java.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can then add the <bpt id="p1">**</bpt>Microsoft Azure Libraries for Java<ept id="p1">**</ept> to your project:</source>
          <target state="new">You can then add the <bpt id="p1">**</bpt>Microsoft Azure Libraries for Java<ept id="p1">**</ept> to your project:</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the following import statements to the top of the Java file:</source>
          <target state="new">Add the following import statements to the top of the Java file:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to create a queue</source>
          <target state="new">How to create a queue</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Management operations for Service Bus queues can be performed via the</source>
          <target state="new">Management operations for Service Bus queues can be performed via the</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> class.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object is</source>
          <target state="new">A <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object is</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>constructed with an appropriate configuration that encapsulates the</source>
          <target state="new">constructed with an appropriate configuration that encapsulates the</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>SAS token with permissions to manage it, and the <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> class is</source>
          <target state="new">SAS token with permissions to manage it, and the <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> class is</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>the sole point of communication with Azure.</source>
          <target state="new">the sole point of communication with Azure.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> class provides methods to create, enumerate,</source>
          <target state="new">The <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> class provides methods to create, enumerate,</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>and delete queues.</source>
          <target state="new">and delete queues.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The example below shows how a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object</source>
          <target state="new">The example below shows how a <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> object</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>can be used to create a queue named "TestQueue", with a namespace named "HowToSample":</source>
          <target state="new">can be used to create a queue named "TestQueue", with a namespace named "HowToSample":</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>There are methods on QueueInfo that allow properties of the queue to be</source>
          <target state="new">There are methods on QueueInfo that allow properties of the queue to be</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>tuned (for example: to set the default "time-to-live" value to be</source>
          <target state="new">tuned (for example: to set the default "time-to-live" value to be</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>applied to messages sent to the queue).</source>
          <target state="new">applied to messages sent to the queue).</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example shows how</source>
          <target state="new">The following example shows how</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>to create a queue named "TestQueue" with a maximum size of 5GB:</source>
          <target state="new">to create a queue named "TestQueue" with a maximum size of 5GB:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Note that you can use the <bpt id="p1">**</bpt>listQueues<ept id="p1">**</ept> method on <bpt id="p2">**</bpt>ServiceBusContract<ept id="p2">**</ept></source>
          <target state="new">Note that you can use the <bpt id="p1">**</bpt>listQueues<ept id="p1">**</ept> method on <bpt id="p2">**</bpt>ServiceBusContract<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>objects to check if a queue with a specified name already exists within</source>
          <target state="new">objects to check if a queue with a specified name already exists within</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>a service namespace.</source>
          <target state="new">a service namespace.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How to send messages to a queue</source>
          <target state="new">How to send messages to a queue</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To send a message to a Service Bus Queue, your application will obtain a</source>
          <target state="new">To send a message to a Service Bus Queue, your application will obtain a</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The below code demonstrates how to send a</source>
          <target state="new">The below code demonstrates how to send a</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>message for the "TestQueue" queue we created above within our</source>
          <target state="new">message for the "TestQueue" queue we created above within our</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>"HowToSample" service namespace:</source>
          <target state="new">"HowToSample" service namespace:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Messages sent to (and received from ) Service Bus queues are instances</source>
          <target state="new">Messages sent to (and received from ) Service Bus queues are instances</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>of the <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> class.</source>
          <target state="new">of the <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects have a set</source>
          <target state="new"><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> objects have a set</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>of standard methods (such as <bpt id="p1">**</bpt>getLabel<ept id="p1">**</ept>, <bpt id="p2">**</bpt>getTimeToLive<ept id="p2">**</ept>,</source>
          <target state="new">of standard methods (such as <bpt id="p1">**</bpt>getLabel<ept id="p1">**</ept>, <bpt id="p2">**</bpt>getTimeToLive<ept id="p2">**</ept>,</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>setLabel<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>setTimeToLive<ept id="p2">**</ept>), a dictionary that is used to hold</source>
          <target state="new"><bpt id="p1">**</bpt>setLabel<ept id="p1">**</ept>, and <bpt id="p2">**</bpt>setTimeToLive<ept id="p2">**</ept>), a dictionary that is used to hold</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>custom application specific properties, and a body of arbitrary</source>
          <target state="new">custom application specific properties, and a body of arbitrary</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>application data.</source>
          <target state="new">application data.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An application can set the body of the message by</source>
          <target state="new">An application can set the body of the message by</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>passing any serializable object into the constructor of the</source>
          <target state="new">passing any serializable object into the constructor of the</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept>, and the appropriate serializer will then be used to</source>
          <target state="new"><bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept>, and the appropriate serializer will then be used to</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>serialize the object.</source>
          <target state="new">serialize the object.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Alternatively, a <bpt id="p1">**</bpt>java.IO.InputStream<ept id="p1">**</ept> can be</source>
          <target state="new">Alternatively, a <bpt id="p1">**</bpt>java.IO.InputStream<ept id="p1">**</ept> can be</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>provided.</source>
          <target state="new">provided.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to send five test messages to the</source>
          <target state="new">The following example demonstrates how to send five test messages to the</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>"TestQueue" <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept> we obtained in the code snippet above:</source>
          <target state="new">"TestQueue" <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept> we obtained in the code snippet above:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Service Bus queues support a maximum message size of 256 KB (the header,</source>
          <target state="new">Service Bus queues support a maximum message size of 256 KB (the header,</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>which includes the standard and custom application properties, can have</source>
          <target state="new">which includes the standard and custom application properties, can have</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>a maximum size of 64 KB).</source>
          <target state="new">a maximum size of 64 KB).</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>There is no limit on the number of messages</source>
          <target state="new">There is no limit on the number of messages</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>held in a queue but there is a cap on the total size of the messages</source>
          <target state="new">held in a queue but there is a cap on the total size of the messages</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>held by a queue.</source>
          <target state="new">held by a queue.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This queue size is defined at creation time, with an</source>
          <target state="new">This queue size is defined at creation time, with an</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>upper limit of 5 GB.</source>
          <target state="new">upper limit of 5 GB.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>How to receive messages from a queue</source>
          <target state="new">How to receive messages from a queue</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The primary way to receive messages from a queue is to use a</source>
          <target state="new">The primary way to receive messages from a queue is to use a</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object.</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Received messages can work in two</source>
          <target state="new">Received messages can work in two</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>different modes: <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PeekLock<ept id="p2">**</ept>.</source>
          <target state="new">different modes: <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PeekLock<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode, receive is a single-shot</source>
          <target state="new">When using the <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode, receive is a single-shot</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>operation - that is, when Service Bus receives a read request for a</source>
          <target state="new">operation - that is, when Service Bus receives a read request for a</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>message in a queue, it marks the message as being consumed and returns</source>
          <target state="new">message in a queue, it marks the message as being consumed and returns</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>it to the application.</source>
          <target state="new">it to the application.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode (which is the default</source>
          <target state="new"><bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> mode (which is the default</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>mode) is the simplest model and works best for scenarios in which an</source>
          <target state="new">mode) is the simplest model and works best for scenarios in which an</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>application can tolerate not processing a message in the event of a</source>
          <target state="new">application can tolerate not processing a message in the event of a</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>failure.</source>
          <target state="new">failure.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To understand this, consider a scenario in which the consumer</source>
          <target state="new">To understand this, consider a scenario in which the consumer</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>issues the receive request and then crashes before processing it.</source>
          <target state="new">issues the receive request and then crashes before processing it.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Because Service Bus will have marked the message as being consumed, then</source>
          <target state="new">Because Service Bus will have marked the message as being consumed, then</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>when the application restarts and begins consuming messages again, it</source>
          <target state="new">when the application restarts and begins consuming messages again, it</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>will have missed the message that was consumed prior to the crash.</source>
          <target state="new">will have missed the message that was consumed prior to the crash.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode, receive becomes a two stage operation, which makes</source>
          <target state="new">In <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode, receive becomes a two stage operation, which makes</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>it possible to support applications that cannot tolerate missing</source>
          <target state="new">it possible to support applications that cannot tolerate missing</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>messages.</source>
          <target state="new">messages.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When Service Bus receives a request, it finds the next message</source>
          <target state="new">When Service Bus receives a request, it finds the next message</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>to be consumed, locks it to prevent other consumers receiving it, and</source>
          <target state="new">to be consumed, locks it to prevent other consumers receiving it, and</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>then returns it to the application.</source>
          <target state="new">then returns it to the application.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>After the application finishes</source>
          <target state="new">After the application finishes</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>processing the message (or stores it reliably for future processing), it</source>
          <target state="new">processing the message (or stores it reliably for future processing), it</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>completes the second stage of the receive process by calling <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept></source>
          <target state="new">completes the second stage of the receive process by calling <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>on the received message.</source>
          <target state="new">on the received message.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When Service Bus sees the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> call, it</source>
          <target state="new">When Service Bus sees the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> call, it</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>will mark the message as being consumed and remove it from the queue.</source>
          <target state="new">will mark the message as being consumed and remove it from the queue.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how messages can be received and</source>
          <target state="new">The example below demonstrates how messages can be received and</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>processed using <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode (not the default mode).</source>
          <target state="new">processed using <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> mode (not the default mode).</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The example</source>
          <target state="new">The example</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>below does an infinite loop and processes messages as they arrive into</source>
          <target state="new">below does an infinite loop and processes messages as they arrive into</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>our "TestQueue":</source>
          <target state="new">our "TestQueue":</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>How to handle application crashes and unreadable messages</source>
          <target state="new">How to handle application crashes and unreadable messages</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Service Bus provides functionality to help you gracefully recover from</source>
          <target state="new">Service Bus provides functionality to help you gracefully recover from</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>errors in your application or difficulties processing a message.</source>
          <target state="new">errors in your application or difficulties processing a message.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If a</source>
          <target state="new">If a</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>receiver application is unable to process the message for some reason,</source>
          <target state="new">receiver application is unable to process the message for some reason,</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>then it can call the <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> method on the received message</source>
          <target state="new">then it can call the <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> method on the received message</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>(instead of the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method).</source>
          <target state="new">(instead of the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> method).</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This will cause Service Bus</source>
          <target state="new">This will cause Service Bus</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>to unlock the message within the queue and make it available to be</source>
          <target state="new">to unlock the message within the queue and make it available to be</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>received again, either by the same consuming application or by another</source>
          <target state="new">received again, either by the same consuming application or by another</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>consuming application.</source>
          <target state="new">consuming application.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>There is also a timeout associated with a message locked within the</source>
          <target state="new">There is also a timeout associated with a message locked within the</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>queue, and if the application fails to process the message before the</source>
          <target state="new">queue, and if the application fails to process the message before the</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>lock timeout expires (e.g., if the application crashes), then Service</source>
          <target state="new">lock timeout expires (e.g., if the application crashes), then Service</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Bus will unlock the message automatically and make it available to be</source>
          <target state="new">Bus will unlock the message automatically and make it available to be</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>received again.</source>
          <target state="new">received again.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the event that the application crashes after processing the message</source>
          <target state="new">In the event that the application crashes after processing the message</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>but before the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> request is issued, then the message</source>
          <target state="new">but before the <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> request is issued, then the message</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>will be redelivered to the application when it restarts.</source>
          <target state="new">will be redelivered to the application when it restarts.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This is often</source>
          <target state="new">This is often</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be</source>
          <target state="new">called <bpt id="p1">**</bpt>At Least Once Processing<ept id="p1">**</ept>, that is, each message will be</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>processed at least once but in certain situations the same message may</source>
          <target state="new">processed at least once but in certain situations the same message may</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>be redelivered.</source>
          <target state="new">be redelivered.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the scenario cannot tolerate duplicate processing,</source>
          <target state="new">If the scenario cannot tolerate duplicate processing,</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>then application developers should add additional logic to their</source>
          <target state="new">then application developers should add additional logic to their</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>application to handle duplicate message delivery.</source>
          <target state="new">application to handle duplicate message delivery.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is often achieved</source>
          <target state="new">This is often achieved</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>using the <bpt id="p1">**</bpt>getMessageId<ept id="p1">**</ept> method of the message, which will remain</source>
          <target state="new">using the <bpt id="p1">**</bpt>getMessageId<ept id="p1">**</ept> method of the message, which will remain</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>constant across delivery attempts.</source>
          <target state="new">constant across delivery attempts.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of Service Bus queues, see the MSDN</source>
          <target state="new">Now that you've learned the basics of Service Bus queues, see the MSDN</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>topic <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept> for more information.</source>
          <target state="new">topic <bpt id="p1">[</bpt>Queues, Topics, and Subscriptions<ept id="p1">][]</ept> for more information.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fade2bd161f013521ce005b265b2b86d62b8940e</xliffext:olfilehash>
  </header>
</xliff>