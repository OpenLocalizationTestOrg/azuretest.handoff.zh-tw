<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adding custom Service Fabric health reports</source>
          <target state="new">Adding custom Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes how to send custom health reports to Azure Service Fabric health entities.</source>
          <target state="new">Describes how to send custom health reports to Azure Service Fabric health entities.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Gives recommendations for designing and implementing quality health reports.</source>
          <target state="new">Gives recommendations for designing and implementing quality health reports.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Adding custom Service Fabric health reports</source>
          <target state="new">Adding custom Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Service Fabric introduces a <bpt id="p1">[</bpt>Health Model<ept id="p1">](service-fabric-health-introduction.md)</ept> designed to flag unhealthy cluster or application conditions on specific entities.</source>
          <target state="new">Service Fabric introduces a <bpt id="p1">[</bpt>Health Model<ept id="p1">](service-fabric-health-introduction.md)</ept> designed to flag unhealthy cluster or application conditions on specific entities.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is accomplished by using <bpt id="p1">**</bpt>health reporters<ept id="p1">**</ept> (System components and watchdogs).</source>
          <target state="new">This is accomplished by using <bpt id="p1">**</bpt>health reporters<ept id="p1">**</ept> (System components and watchdogs).</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The goal is easy and fast diagnosis and repair.</source>
          <target state="new">The goal is easy and fast diagnosis and repair.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Service writers need to think upfront about health.</source>
          <target state="new">Service writers need to think upfront about health.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any condition that can impact health should be reported on, especially if it can help flagging problems close to the root.</source>
          <target state="new">Any condition that can impact health should be reported on, especially if it can help flagging problems close to the root.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This can save a lot of debugging and investigation once the service is up and running at scale in the cloud (private or Azure).</source>
          <target state="new">This can save a lot of debugging and investigation once the service is up and running at scale in the cloud (private or Azure).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Service Fabric reporters monitor identified conditions of interest.</source>
          <target state="new">The Service Fabric reporters monitor identified conditions of interest.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They report on those conditions based on their local view.</source>
          <target state="new">They report on those conditions based on their local view.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#Health-Store)</ept> aggregates health data sent by all reporters to determine whether entities are globally healthy.</source>
          <target state="new">The <bpt id="p1">[</bpt>Health Store<ept id="p1">](service-fabric-health-introduction.md#Health-Store)</ept> aggregates health data sent by all reporters to determine whether entities are globally healthy.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The model is intended to be rich, flexible and easy to use.</source>
          <target state="new">The model is intended to be rich, flexible and easy to use.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The quality of the health reports determines how accurate the health view of the cluster is.</source>
          <target state="new">The quality of the health reports determines how accurate the health view of the cluster is.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>False positives that show unhealthy issues wrongly can negatively impact upgrades or other services that use health data, like repair services or alerting mechanisms.</source>
          <target state="new">False positives that show unhealthy issues wrongly can negatively impact upgrades or other services that use health data, like repair services or alerting mechanisms.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, some thought is needed to provide reports that capture conditions of interest in the best possible way.</source>
          <target state="new">Therefore, some thought is needed to provide reports that capture conditions of interest in the best possible way.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To design and implement health reporting, watchdogs and System components must:</source>
          <target state="new">To design and implement health reporting, watchdogs and System components must:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Define the condition they are interested in, the way it is monitored and the impact on the cluster/application functionality.</source>
          <target state="new">Define the condition they are interested in, the way it is monitored and the impact on the cluster/application functionality.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This defines the health report property and health state.</source>
          <target state="new">This defines the health report property and health state.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Determine the <bpt id="p1">[</bpt>entity<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept> the report applies to.</source>
          <target state="new">Determine the <bpt id="p1">[</bpt>entity<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept> the report applies to.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determine where the reporting is done from, either from within service, internal or external watchdog.</source>
          <target state="new">Determine where the reporting is done from, either from within service, internal or external watchdog.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Define a source used to identify the reporter.</source>
          <target state="new">Define a source used to identify the reporter.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Choose a reporting strategy, either periodically or on transitions.</source>
          <target state="new">Choose a reporting strategy, either periodically or on transitions.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The recommended way is periodically, as it requires simpler code and is therefore less prone to errors.</source>
          <target state="new">The recommended way is periodically, as it requires simpler code and is therefore less prone to errors.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Determine how long the report for unhealthy conditions should stay in health store and how it should be cleared.</source>
          <target state="new">Determine how long the report for unhealthy conditions should stay in health store and how it should be cleared.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This defines the report time to live and remove on expiration behavior.</source>
          <target state="new">This defines the report time to live and remove on expiration behavior.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As mentioned above, reporting can be done from:</source>
          <target state="new">As mentioned above, reporting can be done from:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The monitored Service Fabric service replica.</source>
          <target state="new">The monitored Service Fabric service replica.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Internal watchdogs deployed as a Service Fabric service.</source>
          <target state="new">Internal watchdogs deployed as a Service Fabric service.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="new">Eg.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>a Service Fabric stateless service that monitors conditions and issues report.</source>
          <target state="new">a Service Fabric stateless service that monitors conditions and issues report.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The watchdogs can be deployed an all nodes or can be affinitized to the monitored service.</source>
          <target state="new">The watchdogs can be deployed an all nodes or can be affinitized to the monitored service.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Internal Watchdogs that run on the Service Fabric nodes but are <bpt id="p1">**</bpt>not<ept id="p1">**</ept> implemented as Service Fabric services.</source>
          <target state="new">Internal Watchdogs that run on the Service Fabric nodes but are <bpt id="p1">**</bpt>not<ept id="p1">**</ept> implemented as Service Fabric services.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>External watchdogs that are probing the resource from <bpt id="p1">**</bpt>outside<ept id="p1">**</ept> the Service Fabric cluster.</source>
          <target state="new">External watchdogs that are probing the resource from <bpt id="p1">**</bpt>outside<ept id="p1">**</ept> the Service Fabric cluster.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="new">Eg.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gomez like monitoring service.</source>
          <target state="new">Gomez like monitoring service.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Out of the box, the cluster is populated with health reports sent by the system components.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Out of the box, the cluster is populated with health reports sent by the system components.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Read more at <bpt id="p1">[</bpt>Using System health reports for troubleshooting<ept id="p1">](service-fabric-understand-and-troubleshoot-with-system-health-reports.md)</ept>.</source>
          <target state="new">Read more at <bpt id="p1">[</bpt>Using System health reports for troubleshooting<ept id="p1">](service-fabric-understand-and-troubleshoot-with-system-health-reports.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The user reports must be sent on <bpt id="p1">[</bpt>health entities<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept> already created by the system.</source>
          <target state="new">The user reports must be sent on <bpt id="p1">[</bpt>health entities<ept id="p1">](service-fabric-health-introduction.md#health-entities-and-hierarchy)</ept> already created by the system.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Once the health reporting design is clear, sending health reports is easy.</source>
          <target state="new">Once the health reporting design is clear, sending health reports is easy.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It can be done through API using FabricClient.HealthManager.ReportHealth, through Powershell or through REST.</source>
          <target state="new">It can be done through API using FabricClient.HealthManager.ReportHealth, through Powershell or through REST.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Internally, all methods use a health client contained inside a fabric client.</source>
          <target state="new">Internally, all methods use a health client contained inside a fabric client.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>There are configuration knobs to batch reports for improved performance.</source>
          <target state="new">There are configuration knobs to batch reports for improved performance.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Report health is sync and only represents the validation work on client side.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Report health is sync and only represents the validation work on client side.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The fact that the report is accepted by the health client doesn't mean it is applied in store; it will be sent asynchronously, possibly batched with other reports and the processing on the server may fail (eg.</source>
          <target state="new">The fact that the report is accepted by the health client doesn't mean it is applied in store; it will be sent asynchronously, possibly batched with other reports and the processing on the server may fail (eg.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>stale sequence number, the entity on which the report must be applied has been deleted etc).</source>
          <target state="new">stale sequence number, the entity on which the report must be applied has been deleted etc).</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Health client</source>
          <target state="new">Health client</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The health reports are sent to the Health Store using a health client, which lives inside the fabric client.</source>
          <target state="new">The health reports are sent to the Health Store using a health client, which lives inside the fabric client.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The health client can be configured with the following:</source>
          <target state="new">The health client can be configured with the following:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>HealthReportSendInterval.</source>
          <target state="new">HealthReportSendInterval.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delay between the time the report is added to the client and the time it is sent to Health Store.</source>
          <target state="new">The delay between the time the report is added to the client and the time it is sent to Health Store.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is used to batch reports in a single message rather than send one message per each report, for improved performance.</source>
          <target state="new">This is used to batch reports in a single message rather than send one message per each report, for improved performance.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Default: 30 seconds.</source>
          <target state="new">Default: 30 seconds.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>HealthReportRetrySendInterval.</source>
          <target state="new">HealthReportRetrySendInterval.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The interval at which the health client re-sends accumulated health reports to Health Store.</source>
          <target state="new">The interval at which the health client re-sends accumulated health reports to Health Store.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Default: 30 seconds.</source>
          <target state="new">Default: 30 seconds.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>HealthOperationTimeout.</source>
          <target state="new">HealthOperationTimeout.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The timeout for a report message sent to Health Store.</source>
          <target state="new">The timeout for a report message sent to Health Store.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If a message times out, the health client retries until the Health Store confirms that the reports have been processed.</source>
          <target state="new">If a message times out, the health client retries until the Health Store confirms that the reports have been processed.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Default: 2 minutes.</source>
          <target state="new">Default: 2 minutes.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> When the reports are batched, the fabric client must be kept alive for at least HealthReportSendInterval to ensure they are sent.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> When the reports are batched, the fabric client must be kept alive for at least HealthReportSendInterval to ensure they are sent.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the message is lost or Health Store is not able to apply them due to transient errors, the fabric client must be kept alive longer to give it a chance to retry.</source>
          <target state="new">If the message is lost or Health Store is not able to apply them due to transient errors, the fabric client must be kept alive longer to give it a chance to retry.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The buffering on the client takes the uniqueness of the reports into consideration.</source>
          <target state="new">The buffering on the client takes the uniqueness of the reports into consideration.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, if a particular bad reporter is reporting 100 reports per second on the same property of the same entity, the reports will get replaced with last version.</source>
          <target state="new">For example, if a particular bad reporter is reporting 100 reports per second on the same property of the same entity, the reports will get replaced with last version.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>At most one such report exists in the client queue.</source>
          <target state="new">At most one such report exists in the client queue.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If batching is configured, the number of reports sent to the Health Store is just one per send interval, the last added report, which reflects the most current state of the entity.</source>
          <target state="new">If batching is configured, the number of reports sent to the Health Store is just one per send interval, the last added report, which reflects the most current state of the entity.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>All configuration parameters can be specified when creating the FabricClient, by passing FabricClientSettings with desired values for health related entries.</source>
          <target state="new">All configuration parameters can be specified when creating the FabricClient, by passing FabricClientSettings with desired values for health related entries.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following creates a fabric client and specifies that the reports should be sent as soon as they are added.</source>
          <target state="new">The following creates a fabric client and specifies that the reports should be sent as soon as they are added.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>On retryable errors or timeouts, retries happen every 40 seconds.</source>
          <target state="new">On retryable errors or timeouts, retries happen every 40 seconds.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Same parameters can be specified when creating a connection to a cluster through Powershell.</source>
          <target state="new">Same parameters can be specified when creating a connection to a cluster through Powershell.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following starts a connection to a local cluster:</source>
          <target state="new">The following starts a connection to a local cluster:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To ensure that unauthorized services can't report health against the entities in the cluster, the server can be configured to accept only requests from secured clients.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To ensure that unauthorized services can't report health against the entities in the cluster, the server can be configured to accept only requests from secured clients.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Since the reporting is done through FabricClient, this means the FabricClient must have security enabled in order to be able to communicate with the cluster eg.</source>
          <target state="new">Since the reporting is done through FabricClient, this means the FabricClient must have security enabled in order to be able to communicate with the cluster eg.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>with Kerberos or certificate authentication.</source>
          <target state="new">with Kerberos or certificate authentication.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Design health reporting</source>
          <target state="new">Design health reporting</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The first step in generating high quality reports is identifying conditions that can impact the health of the service.</source>
          <target state="new">The first step in generating high quality reports is identifying conditions that can impact the health of the service.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Any condition that can help flag problems in the service or cluster when they start or even better, before they happen, can potentially save billions of dollars.</source>
          <target state="new">Any condition that can help flag problems in the service or cluster when they start or even better, before they happen, can potentially save billions of dollars.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Think less down time, less night hours spent investigating and repairing issues, high customer satisfaction.</source>
          <target state="new">Think less down time, less night hours spent investigating and repairing issues, high customer satisfaction.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Once the conditions are identified, watchdog writers need to figure out the best way to monitor them for best balance between overhead and usefulness.</source>
          <target state="new">Once the conditions are identified, watchdog writers need to figure out the best way to monitor them for best balance between overhead and usefulness.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, consider a service that does some complex calculations using some temporary files on a share.</source>
          <target state="new">For example, consider a service that does some complex calculations using some temporary files on a share.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A watchdog could monitor the share to make sure enough space is available.</source>
          <target state="new">A watchdog could monitor the share to make sure enough space is available.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It could listen for notifications for file/directory changes.</source>
          <target state="new">It could listen for notifications for file/directory changes.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It can report an warning if an up-front threshold is reached and error if the share is full.</source>
          <target state="new">It can report an warning if an up-front threshold is reached and error if the share is full.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On warning, a repair system could start clean up of older files on the share.</source>
          <target state="new">On warning, a repair system could start clean up of older files on the share.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>On error, a repair system could move the service replica to another node.</source>
          <target state="new">On error, a repair system could move the service replica to another node.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note how the condition states are described in terms of health: what is the state of the condition that can be considered healthy or unhealthy (warning or error).</source>
          <target state="new">Note how the condition states are described in terms of health: what is the state of the condition that can be considered healthy or unhealthy (warning or error).</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Once the monitoring details are set, watchdog writer need to figure out how to implement the watchdog.</source>
          <target state="new">Once the monitoring details are set, watchdog writer need to figure out how to implement the watchdog.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the conditions can be determined from within the service, the watchdog can be part of the monitored service itself.</source>
          <target state="new">If the conditions can be determined from within the service, the watchdog can be part of the monitored service itself.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, the service code can check the share usage and report using a local fabric client every time it tries to write a file.</source>
          <target state="new">For example, the service code can check the share usage and report using a local fabric client every time it tries to write a file.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The advantage of this approach is that reporting is simple.</source>
          <target state="new">The advantage of this approach is that reporting is simple.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Care must be taken to prevent watchdog bugs from impacting the service functionality.</source>
          <target state="new">Care must be taken to prevent watchdog bugs from impacting the service functionality.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Reporting from within the monitored service is not always an option.</source>
          <target state="new">Reporting from within the monitored service is not always an option.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An watchdog within the service may not be able to detect the conditions: either it doesn't have the logic or data to make the determination, or the overhead of monitoring the conditions is high, or the conditions are not specific to a service, but affect interactions between services.</source>
          <target state="new">An watchdog within the service may not be able to detect the conditions: either it doesn't have the logic or data to make the determination, or the overhead of monitoring the conditions is high, or the conditions are not specific to a service, but affect interactions between services.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Another option is to have watchogs in the cluster as separate processes.</source>
          <target state="new">Another option is to have watchogs in the cluster as separate processes.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The watchdogs simply monitor the conditions and report, without affecting the main services in any way.</source>
          <target state="new">The watchdogs simply monitor the conditions and report, without affecting the main services in any way.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>These watchdogs could for example be implemented as stateless services in the same application, deployed on all nodes or on the same nodes as the service.</source>
          <target state="new">These watchdogs could for example be implemented as stateless services in the same application, deployed on all nodes or on the same nodes as the service.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Sometimes, an watchdog running in the cluster is not an option either.</source>
          <target state="new">Sometimes, an watchdog running in the cluster is not an option either.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If the monitored conditions are the availability or the functionality of the service as users see it, it's best to have the watchdogs in the same place as the user clients, testing the operations in the same way users call them.</source>
          <target state="new">If the monitored conditions are the availability or the functionality of the service as users see it, it's best to have the watchdogs in the same place as the user clients, testing the operations in the same way users call them.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, we can have a watchog leaving outside the cluster and issuing requests to the service, checking the latency and the correctness of the result (for a calculator service, does 2+2 return 4 in a reasonable time?).</source>
          <target state="new">For example, we can have a watchog leaving outside the cluster and issuing requests to the service, checking the latency and the correctness of the result (for a calculator service, does 2+2 return 4 in a reasonable time?).</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Once the watchdog details have been finalized, decide a source id that uniquely identifies it.</source>
          <target state="new">Once the watchdog details have been finalized, decide a source id that uniquely identifies it.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If multiple watchdogs of the same type are living in the cluster, they must either report on different entities, or if they report on the same entity, make sure the source id or the property is different, so reports can coexist.</source>
          <target state="new">If multiple watchdogs of the same type are living in the cluster, they must either report on different entities, or if they report on the same entity, make sure the source id or the property is different, so reports can coexist.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The property of the health report should capture the monitored condition.</source>
          <target state="new">The property of the health report should capture the monitored condition.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Eg.</source>
          <target state="new">Eg.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>for the example above, the property could be ShareSize.</source>
          <target state="new">for the example above, the property could be ShareSize.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If multiple data applied to the same condition, the property should contain some dynamic information to allow reports to coexist.</source>
          <target state="new">If multiple data applied to the same condition, the property should contain some dynamic information to allow reports to coexist.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, if there are multiple shares that need to be monitored, the property name can be ShareSize-sharename.</source>
          <target state="new">For example, if there are multiple shares that need to be monitored, the property name can be ShareSize-sharename.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The health store should <bpt id="p1">**</bpt>not<ept id="p1">**</ept> be used to keep status information.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The health store should <bpt id="p1">**</bpt>not<ept id="p1">**</ept> be used to keep status information.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Only health related information should be reported as health, information that impacts the health evaluation of an entity.</source>
          <target state="new">Only health related information should be reported as health, information that impacts the health evaluation of an entity.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The health store was not designed as a general purpose store.</source>
          <target state="new">The health store was not designed as a general purpose store.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It uses health evaluation logic to aggregate all data into health state.</source>
          <target state="new">It uses health evaluation logic to aggregate all data into health state.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Sending non-health related information (eg.</source>
          <target state="new">Sending non-health related information (eg.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>reporting status with health state Ok) will not impact aggregated health state, but can negatively affect the performance of the health store.</source>
          <target state="new">reporting status with health state Ok) will not impact aggregated health state, but can negatively affect the performance of the health store.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The next decision point is what entity to report on.</source>
          <target state="new">The next decision point is what entity to report on.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Most of the time, this is obvious based on the condition.</source>
          <target state="new">Most of the time, this is obvious based on the condition.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Choose the entity with best granularity possible.</source>
          <target state="new">Choose the entity with best granularity possible.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If a condition impacts all replicas in a partition, report on the partition, not on the service.</source>
          <target state="new">If a condition impacts all replicas in a partition, report on the partition, not on the service.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>There are corner cases where more thought is needed.</source>
          <target state="new">There are corner cases where more thought is needed.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the condition impacts an entity (eg.</source>
          <target state="new">If the condition impacts an entity (eg.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>replica) but the desire is to have the condition flagged for more than replica life duration, they it should be reported on partition.</source>
          <target state="new">replica) but the desire is to have the condition flagged for more than replica life duration, they it should be reported on partition.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Otherwise, when the replica is deleted, all reports associated with it are cleaned up from store.</source>
          <target state="new">Otherwise, when the replica is deleted, all reports associated with it are cleaned up from store.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This means watchdog writers needs to also think about the lifetime of the entity and of the report.</source>
          <target state="new">This means watchdog writers needs to also think about the lifetime of the entity and of the report.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>It must be clear when a report should be cleaned up from a store (eg.</source>
          <target state="new">It must be clear when a report should be cleaned up from a store (eg.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>when an Error reported on an entity is not applying anymore).</source>
          <target state="new">when an Error reported on an entity is not applying anymore).</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Let's look at an example to put together the above points.</source>
          <target state="new">Let's look at an example to put together the above points.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Consider a Service Fabric application composed of a Master stateful persisted service and Slaves stateless services deployed on all nodes (one Slave service type for a type of task).</source>
          <target state="new">Consider a Service Fabric application composed of a Master stateful persisted service and Slaves stateless services deployed on all nodes (one Slave service type for a type of task).</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The Master has a processing queue with commands to be executed by slaves.</source>
          <target state="new">The Master has a processing queue with commands to be executed by slaves.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The slaves execute the incoming requests and send back Acks.</source>
          <target state="new">The slaves execute the incoming requests and send back Acks.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>One condition that could be monitored is Master processing queue length.</source>
          <target state="new">One condition that could be monitored is Master processing queue length.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the master queue length reaches a threshold, report Warning, as that means the slaves can't handle the load.</source>
          <target state="new">If the master queue length reaches a threshold, report Warning, as that means the slaves can't handle the load.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the queue reached max length and commands are dropped, report Error as the service can't recover.</source>
          <target state="new">If the queue reached max length and commands are dropped, report Error as the service can't recover.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The reports can be on property "QueueStatus".</source>
          <target state="new">The reports can be on property "QueueStatus".</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The watchdog lives inside the service and it's sent periodically on the Master primary replica.</source>
          <target state="new">The watchdog lives inside the service and it's sent periodically on the Master primary replica.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The TTL is 2 minutes and it's sent periodically every 30 seconds.</source>
          <target state="new">The TTL is 2 minutes and it's sent periodically every 30 seconds.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If the primary goes down, the report is cleaned up automatically from store.</source>
          <target state="new">If the primary goes down, the report is cleaned up automatically from store.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the service replica is up but deadlocked or having other issues, the report will expire in the health store and the entity will be evaluated at error.</source>
          <target state="new">If the service replica is up but deadlocked or having other issues, the report will expire in the health store and the entity will be evaluated at error.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Other condition that can be monitored is task execution time.</source>
          <target state="new">Other condition that can be monitored is task execution time.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The Master distributes the tasks to the slaves based on the task type.</source>
          <target state="new">The Master distributes the tasks to the slaves based on the task type.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Depending on the design, the Master could poll the slaves for task status or it could wait for slaves to send back ACKs when done.</source>
          <target state="new">Depending on the design, the Master could poll the slaves for task status or it could wait for slaves to send back ACKs when done.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In the second case, care must be taken to detect situations where slaves die or messages get lost.</source>
          <target state="new">In the second case, care must be taken to detect situations where slaves die or messages get lost.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>One option is for Master to send a ping request to the same Slave, which sends back the status.</source>
          <target state="new">One option is for Master to send a ping request to the same Slave, which sends back the status.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If no status is received, consider failure and re-schedule the task.</source>
          <target state="new">If no status is received, consider failure and re-schedule the task.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This assumes that the tasks are idempotent.</source>
          <target state="new">This assumes that the tasks are idempotent.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>We can translate the monitored condition as warning if task is not done in a certain time t1 (eg.</source>
          <target state="new">We can translate the monitored condition as warning if task is not done in a certain time t1 (eg.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>10 minutes); and error if the task is not completed in time t2 (eg.</source>
          <target state="new">10 minutes); and error if the task is not completed in time t2 (eg.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>20 minutes).</source>
          <target state="new">20 minutes).</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This reporting can be done in multiple ways:</source>
          <target state="new">This reporting can be done in multiple ways:</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The Master primary replica reports periodically on itself.</source>
          <target state="new">The Master primary replica reports periodically on itself.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>We can have one property for all pending tasks in the queue: if at least one task takes longer, report on property "PendingTasks" warning or error, as appropriate.</source>
          <target state="new">We can have one property for all pending tasks in the queue: if at least one task takes longer, report on property "PendingTasks" warning or error, as appropriate.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If there are no pending tasks or all are just started, report Ok.</source>
          <target state="new">If there are no pending tasks or all are just started, report Ok.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The tasks are persisted, so if primary goes down, the new promoted primary can continue to report properly.</source>
          <target state="new">The tasks are persisted, so if primary goes down, the new promoted primary can continue to report properly.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Another watchdog process (in the cloud or external) checks the tasks (from outside, based on desired task result) to see if they are completed.</source>
          <target state="new">Another watchdog process (in the cloud or external) checks the tasks (from outside, based on desired task result) to see if they are completed.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If they do not respect the thresholds, report on Master service.</source>
          <target state="new">If they do not respect the thresholds, report on Master service.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Report on each task and include the task identifier (eg: PendingTask+taskid).</source>
          <target state="new">Report on each task and include the task identifier (eg: PendingTask+taskid).</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Report only on unhealthy states.</source>
          <target state="new">Report only on unhealthy states.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Set TTL to a few minutes and mark the reports to be removed when expired to ensure cleanup.</source>
          <target state="new">Set TTL to a few minutes and mark the reports to be removed when expired to ensure cleanup.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The slave that is executing a task is reporting if it takes longer than expected to run it.</source>
          <target state="new">The slave that is executing a task is reporting if it takes longer than expected to run it.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>It reports on the service instance on property "PendingTasks".</source>
          <target state="new">It reports on the service instance on property "PendingTasks".</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This pinpoints the service instance that has issues, but it doesn't capture the situation where the instance dies.</source>
          <target state="new">This pinpoints the service instance that has issues, but it doesn't capture the situation where the instance dies.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The reports are cleaned up at that time.</source>
          <target state="new">The reports are cleaned up at that time.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>It could report on the Slave service; if the Slave completes the task, the slave instance clears the report from store.</source>
          <target state="new">It could report on the Slave service; if the Slave completes the task, the slave instance clears the report from store.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This doesn't capture the situation where the ack message is lost and the task is not finished from Master point of view.</source>
          <target state="new">This doesn't capture the situation where the ack message is lost and the task is not finished from Master point of view.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>However the reporting is done in the cases described above, they will be captured in application health when health is evaluated.</source>
          <target state="new">However the reporting is done in the cases described above, they will be captured in application health when health is evaluated.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Report periodically vs. on transition</source>
          <target state="new">Report periodically vs. on transition</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Using the health reporting model, watchdogs can send reports periodically or on transitions.</source>
          <target state="new">Using the health reporting model, watchdogs can send reports periodically or on transitions.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The recommended way is periodically, because the code is much simpler, therefore less error prone.</source>
          <target state="new">The recommended way is periodically, because the code is much simpler, therefore less error prone.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The watchdogs must strive to be as simple as possible to avoid bugs which trigger wrong reports.</source>
          <target state="new">The watchdogs must strive to be as simple as possible to avoid bugs which trigger wrong reports.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Incorrect unhealthy report will impact health evaluation and scenarios based on health, like upgrades.</source>
          <target state="new">Incorrect unhealthy report will impact health evaluation and scenarios based on health, like upgrades.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Incorrect healthy reports hide issues in the cluster, which is not desired.</source>
          <target state="new">Incorrect healthy reports hide issues in the cluster, which is not desired.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For periodic reporting, the watchdog can be implemented with a timer.</source>
          <target state="new">For periodic reporting, the watchdog can be implemented with a timer.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>On timer callback, the watchdog can check the state and send an report based on current state.</source>
          <target state="new">On timer callback, the watchdog can check the state and send an report based on current state.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>There is no need to see what report was sent previously or make any optimization in terms of messaging.</source>
          <target state="new">There is no need to see what report was sent previously or make any optimization in terms of messaging.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The health client has batching logic to help with that.</source>
          <target state="new">The health client has batching logic to help with that.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>As long as the health client is kept alive, it will retry internally until the report is ACKed by the health store or the watchdog generates a newer report with the same entity, property and source.</source>
          <target state="new">As long as the health client is kept alive, it will retry internally until the report is ACKed by the health store or the watchdog generates a newer report with the same entity, property and source.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Reporting on transition requires careful state handling.</source>
          <target state="new">Reporting on transition requires careful state handling.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The watchdog monitors some conditions and only reports when the conditions change.</source>
          <target state="new">The watchdog monitors some conditions and only reports when the conditions change.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The plus side is that less reports are needed.</source>
          <target state="new">The plus side is that less reports are needed.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The minus is that the logic of the watchdog is complex.</source>
          <target state="new">The minus is that the logic of the watchdog is complex.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The conditions or the reports must be maintained so they can be inspected to determine state changes.</source>
          <target state="new">The conditions or the reports must be maintained so they can be inspected to determine state changes.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>On failover, care must be taken to send a report which may have not be sent previously (queued, but not yet sent to health store).</source>
          <target state="new">On failover, care must be taken to send a report which may have not be sent previously (queued, but not yet sent to health store).</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The sequence number must be always increasing, or the reports will be rejected due to staleness.</source>
          <target state="new">The sequence number must be always increasing, or the reports will be rejected due to staleness.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In the rare cases where data loss is incurred, there may be synchronization needed between the state of the reporter and the state of the health store.</source>
          <target state="new">In the rare cases where data loss is incurred, there may be synchronization needed between the state of the reporter and the state of the health store.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Implement health reporting</source>
          <target state="new">Implement health reporting</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Once the entity and report details are clear, sending health reports can be done though API, Powershell or REST.</source>
          <target state="new">Once the entity and report details are clear, sending health reports can be done though API, Powershell or REST.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="new">API</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In order to report through API, users need to create a health report specific to the entity type they want to report on and then give it to a health client.</source>
          <target state="new">In order to report through API, users need to create a health report specific to the entity type they want to report on and then give it to a health client.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The following example shows periodic reporting from a watchdog from within the cluster.</source>
          <target state="new">The following example shows periodic reporting from a watchdog from within the cluster.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The watcher checks whether an external resource can be accessed from within a node.</source>
          <target state="new">The watcher checks whether an external resource can be accessed from within a node.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The resource is needed by a service manifest within the application.</source>
          <target state="new">The resource is needed by a service manifest within the application.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the resource is unavailable, the other services within the application can function properly.</source>
          <target state="new">If the resource is unavailable, the other services within the application can function properly.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Therefore, the report is sent on the deployed service package entity, periodically, every 30 seconds.</source>
          <target state="new">Therefore, the report is sent on the deployed service package entity, periodically, every 30 seconds.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Powershell</source>
          <target state="new">Powershell</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Users can send health reports with Send-ServiceFabric<bpt id="p1">*</bpt>EntityType<ept id="p1">*</ept>HealthReport.</source>
          <target state="new">Users can send health reports with Send-ServiceFabric<bpt id="p1">*</bpt>EntityType<ept id="p1">*</ept>HealthReport.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following example shows periodic reporting on CPU values on a node.</source>
          <target state="new">The following example shows periodic reporting on CPU values on a node.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The reports should be sent every 30 seconds, they have a TTL of 2 minute.</source>
          <target state="new">The reports should be sent every 30 seconds, they have a TTL of 2 minute.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If they expire, it means the reporter has issues, so the node is evaluated at error.</source>
          <target state="new">If they expire, it means the reporter has issues, so the node is evaluated at error.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>When the CPU is above a threshold, the report has health state Warning, if CPU is above threshold for more than a configured time it's reported as Error.</source>
          <target state="new">When the CPU is above a threshold, the report has health state Warning, if CPU is above threshold for more than a configured time it's reported as Error.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Otherwise, the reporter sends Ok.</source>
          <target state="new">Otherwise, the reporter sends Ok.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The following example reports a transient Warning on a replica.</source>
          <target state="new">The following example reports a transient Warning on a replica.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>It first get the partition id and the replica id for the service it is interested in, then sends a report from PowershellWatcher on property ResourceDependency.</source>
          <target state="new">It first get the partition id and the replica id for the service it is interested in, then sends a report from PowershellWatcher on property ResourceDependency.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The report is only of interest for 2 minutes, and it will be automatically removed from store.</source>
          <target state="new">The report is only of interest for 2 minutes, and it will be automatically removed from store.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Based on the health data, service writers and cluster/application administrators can think of ways to consume the information.</source>
          <target state="new">Based on the health data, service writers and cluster/application administrators can think of ways to consume the information.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, they can set up alerts based on health status to catch severe issues before provoking outages.</source>
          <target state="new">For example, they can set up alerts based on health status to catch severe issues before provoking outages.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>They can set up automatic repair systems to fix issues automatically.</source>
          <target state="new">They can set up automatic repair systems to fix issues automatically.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Introduction to Service Fabric Health Monitoring</source>
          <target state="new">Introduction to Service Fabric Health Monitoring</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>How to view Service Fabric health reports</source>
          <target state="new">How to view Service Fabric health reports</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Using System health reports for troubleshooting</source>
          <target state="new">Using System health reports for troubleshooting</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>How to Monitor and Diagnose Services locally</source>
          <target state="new">How to Monitor and Diagnose Services locally</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade</source>
          <target state="new">Service Fabric Application Upgrade</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66bd3d4cf895c5b67d347c9980224b1fabfcbe6f</xliffext:olfilehash>
  </header>
</xliff>