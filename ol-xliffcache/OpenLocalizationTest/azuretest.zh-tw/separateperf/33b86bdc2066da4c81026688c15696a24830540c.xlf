<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure App Service API app triggers</source>
          <target state="new">Azure App Service API app triggers</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to implement triggers in an API App</source>
          <target state="new">This article demonstrates how to implement triggers in an API App</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure App Service API app triggers</source>
          <target state="new">Azure App Service API app triggers</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article explains how to implement API app triggers and consume them from a Logic app.</source>
          <target state="new">This article explains how to implement API app triggers and consume them from a Logic app.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are new to <bpt id="p1">[</bpt>API apps<ept id="p1">](app-service-api-apps-why-best-platform.md)</ept> in <bpt id="p2">[</bpt>Azure App Service<ept id="p2">](../app-service/app-service-value-prop-what-is.md)</ept>, we recommend reading the multi-part series on <bpt id="p3">[</bpt>creating API apps<ept id="p3">](app-service-dotnet-create-api-app.md)</ept></source>
          <target state="new">If you are new to <bpt id="p1">[</bpt>API apps<ept id="p1">](app-service-api-apps-why-best-platform.md)</ept> in <bpt id="p2">[</bpt>Azure App Service<ept id="p2">](../app-service/app-service-value-prop-what-is.md)</ept>, we recommend reading the multi-part series on <bpt id="p3">[</bpt>creating API apps<ept id="p3">](app-service-dotnet-create-api-app.md)</ept></target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In addition, all of the code snippets in this topic are copied from the <bpt id="p1">[</bpt>FileWatcher API App code sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=534802)</ept>.</source>
          <target state="new">In addition, all of the code snippets in this topic are copied from the <bpt id="p1">[</bpt>FileWatcher API App code sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=534802)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that you'll need to download the following nuget package for the code in this article to build and run: <bpt id="p1">[</bpt>http://www.nuget.org/packages/Microsoft.Azure.AppService.ApiApps.Service/<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.AppService.ApiApps.Service/)</ept>.</source>
          <target state="new">Note that you'll need to download the following nuget package for the code in this article to build and run: <bpt id="p1">[</bpt>http://www.nuget.org/packages/Microsoft.Azure.AppService.ApiApps.Service/<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.AppService.ApiApps.Service/)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>What are API app triggers?</source>
          <target state="new">What are API app triggers?</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It's a common scenario for an API app to fire an event so that clients of the API app can take the appropriate action in response to the event.</source>
          <target state="new">It's a common scenario for an API app to fire an event so that clients of the API app can take the appropriate action in response to the event.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The REST API based mechanism that supports this scenario is called an API app trigger.</source>
          <target state="new">The REST API based mechanism that supports this scenario is called an API app trigger.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, let's say your client code is using the <bpt id="p1">[</bpt>Twitter Connector API app<ept id="p1">](../app-service-logic/app-service-logic-connector-twitter.md)</ept> and your code needs to perform an action based on new tweets that contain specific words.</source>
          <target state="new">For example, let's say your client code is using the <bpt id="p1">[</bpt>Twitter Connector API app<ept id="p1">](../app-service-logic/app-service-logic-connector-twitter.md)</ept> and your code needs to perform an action based on new tweets that contain specific words.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this case, you might set up a poll or push trigger to facilitate this need.</source>
          <target state="new">In this case, you might set up a poll or push trigger to facilitate this need.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Poll trigger versus push trigger</source>
          <target state="new">Poll trigger versus push trigger</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Currently, two types of triggers are supported:</source>
          <target state="new">Currently, two types of triggers are supported:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Poll trigger - Client polls the API app for notification of an event having been fired</source>
          <target state="new">Poll trigger - Client polls the API app for notification of an event having been fired</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Push trigger - Client is notified by the API app when an event fires</source>
          <target state="new">Push trigger - Client is notified by the API app when an event fires</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Poll trigger</source>
          <target state="new">Poll trigger</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A poll trigger is implemented as a regular REST API and expects its clients (such as a Logic app) to poll it in order to get notification.</source>
          <target state="new">A poll trigger is implemented as a regular REST API and expects its clients (such as a Logic app) to poll it in order to get notification.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>While the client may maintain state, the poll trigger itself is stateless.</source>
          <target state="new">While the client may maintain state, the poll trigger itself is stateless.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following information regarding the request and response packets illustrate some key aspects of the poll trigger contract:</source>
          <target state="new">The following information regarding the request and response packets illustrate some key aspects of the poll trigger contract:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="new">Request</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>HTTP method: GET</source>
          <target state="new">HTTP method: GET</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>triggerState - This optional parameter allows clients to specify their state so that the poll trigger can properly decide whether to return notification or not based on the specified state.</source>
          <target state="new">triggerState - This optional parameter allows clients to specify their state so that the poll trigger can properly decide whether to return notification or not based on the specified state.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>API-specific parameters</source>
          <target state="new">API-specific parameters</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="new">Response</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>200<ept id="p1">**</ept> - Request is valid and there is a notification from the trigger.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>200<ept id="p1">**</ept> - Request is valid and there is a notification from the trigger.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The content of the notification will be the response body.</source>
          <target state="new">The content of the notification will be the response body.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A "Retry-After" header in the response indicates that additional notification data must be retrieved with a subsequent request call.</source>
          <target state="new">A "Retry-After" header in the response indicates that additional notification data must be retrieved with a subsequent request call.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>202<ept id="p1">**</ept> - Request is valid, but there is no new notification from the trigger.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>202<ept id="p1">**</ept> - Request is valid, but there is no new notification from the trigger.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>4xx<ept id="p1">**</ept> - Request is not valid.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>4xx<ept id="p1">**</ept> - Request is not valid.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The client should not retry the request.</source>
          <target state="new">The client should not retry the request.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>5xx<ept id="p1">**</ept> - Request has resulted in an internal server error and/or temporary issue.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>5xx<ept id="p1">**</ept> - Request has resulted in an internal server error and/or temporary issue.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The client should retry the request.</source>
          <target state="new">The client should retry the request.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code snippet is an example of how to implement a poll trigger.</source>
          <target state="new">The following code snippet is an example of how to implement a poll trigger.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To test this poll trigger, follow these steps:</source>
          <target state="new">To test this poll trigger, follow these steps:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Deploy the API App with an authentication setting of <bpt id="p1">**</bpt>public anonymous<ept id="p1">**</ept>.</source>
          <target state="new">Deploy the API App with an authentication setting of <bpt id="p1">**</bpt>public anonymous<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>touch<ept id="p1">**</ept> operation to touch a file.</source>
          <target state="new">Call the <bpt id="p1">**</bpt>touch<ept id="p1">**</ept> operation to touch a file.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following image shows a sample request via Postman.</source>
          <target state="new">The following image shows a sample request via Postman.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Call Touch Operation via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/calltouchfilefrompostman.PNG)</ph></source>
          <target state="new"><ph id="ph1">![</ph>Call Touch Operation via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/calltouchfilefrompostman.PNG)</ph></target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Call the poll trigger with the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter set to a time stamp prior to Step #2.</source>
          <target state="new">Call the poll trigger with the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter set to a time stamp prior to Step #2.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following image shows the sample request via Postman.</source>
          <target state="new">The following image shows the sample request via Postman.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Call Poll Trigger via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/callpolltriggerfrompostman.PNG)</ph></source>
          <target state="new"><ph id="ph1">![</ph>Call Poll Trigger via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/callpolltriggerfrompostman.PNG)</ph></target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Push trigger</source>
          <target state="new">Push trigger</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A push trigger is implemented as a regular REST API that pushes notifications to clients who have registered to be notified when specific events fire.</source>
          <target state="new">A push trigger is implemented as a regular REST API that pushes notifications to clients who have registered to be notified when specific events fire.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following information regarding the request and response packets illustrate some key aspects of the push trigger contract.</source>
          <target state="new">The following information regarding the request and response packets illustrate some key aspects of the push trigger contract.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="new">Request</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>HTTP method: PUT</source>
          <target state="new">HTTP method: PUT</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>triggerId: required - Opaque string (such as a GUID) that represents the registration of a push trigger.</source>
          <target state="new">triggerId: required - Opaque string (such as a GUID) that represents the registration of a push trigger.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>callbackUrl: required - URL of the callback to invoke when the event fires.</source>
          <target state="new">callbackUrl: required - URL of the callback to invoke when the event fires.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The invocation is a simple POST HTTP call.</source>
          <target state="new">The invocation is a simple POST HTTP call.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>API-specific parameters</source>
          <target state="new">API-specific parameters</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Response</source>
          <target state="new">Response</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>200<ept id="p1">**</ept> - Request to register client successful.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>200<ept id="p1">**</ept> - Request to register client successful.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>4xx<ept id="p1">**</ept> - Request is not valid.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>4xx<ept id="p1">**</ept> - Request is not valid.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The client should not retry the request.</source>
          <target state="new">The client should not retry the request.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Status code <bpt id="p1">**</bpt>5xx<ept id="p1">**</ept> - Request has resulted in an internal server error and/or temporary issue.</source>
          <target state="new">Status code <bpt id="p1">**</bpt>5xx<ept id="p1">**</ept> - Request has resulted in an internal server error and/or temporary issue.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The client should retry the request.</source>
          <target state="new">The client should retry the request.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Callback</source>
          <target state="new">Callback</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>HTTP method: POST</source>
          <target state="new">HTTP method: POST</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Request body: Notification content.</source>
          <target state="new">Request body: Notification content.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following code snippet is an example of how to implement a push trigger:</source>
          <target state="new">The following code snippet is an example of how to implement a push trigger:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To test this poll trigger, follow these steps:</source>
          <target state="new">To test this poll trigger, follow these steps:</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Deploy the API App with an authentication setting of <bpt id="p1">**</bpt>public anonymous<ept id="p1">**</ept>.</source>
          <target state="new">Deploy the API App with an authentication setting of <bpt id="p1">**</bpt>public anonymous<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Browse to <bpt id="p1">[</bpt>http://requestb.in/<ept id="p1">](http://requestb.in/)</ept> to create a RequestBin which will serve as your callback URL.</source>
          <target state="new">Browse to <bpt id="p1">[</bpt>http://requestb.in/<ept id="p1">](http://requestb.in/)</ept> to create a RequestBin which will serve as your callback URL.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Call the push trigger with a GUID as <bpt id="p1">**</bpt>triggerId<ept id="p1">**</ept> and the RequestBin URL as <bpt id="p2">**</bpt>callbackUrl<ept id="p2">**</ept>.</source>
          <target state="new">Call the push trigger with a GUID as <bpt id="p1">**</bpt>triggerId<ept id="p1">**</ept> and the RequestBin URL as <bpt id="p2">**</bpt>callbackUrl<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Call Push Trigger via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/callpushtriggerfrompostman.PNG)</ph></source>
          <target state="new"><ph id="ph1">![</ph>Call Push Trigger via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/callpushtriggerfrompostman.PNG)</ph></target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>touch<ept id="p1">**</ept> operation to touch a file.</source>
          <target state="new">Call the <bpt id="p1">**</bpt>touch<ept id="p1">**</ept> operation to touch a file.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following image shows a sample request via Postman.</source>
          <target state="new">The following image shows a sample request via Postman.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Call Touch Operation via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/calltouchfilefrompostman.PNG)</ph></source>
          <target state="new"><ph id="ph1">![</ph>Call Touch Operation via Postman<ph id="ph2">](./media/app-service-api-dotnet-triggers/calltouchfilefrompostman.PNG)</ph></target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Check the RequestBin to confirm that the push trigger callback is invoked with property output.</source>
          <target state="new">Check the RequestBin to confirm that the push trigger callback is invoked with property output.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Call Poll Trigger via Postman</source>
          <target state="new">Call Poll Trigger via Postman</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Describe triggers in API definition</source>
          <target state="new">Describe triggers in API definition</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>After implementing the triggers and deploying your API app to Azure, navigate to the <bpt id="p1">**</bpt>API Definition<ept id="p1">**</ept> blade in the Azure preview portal and you'll see that triggers are automatically recognized in the UI, which is driven by the Swagger 2.0 API definition of the API app.</source>
          <target state="new">After implementing the triggers and deploying your API app to Azure, navigate to the <bpt id="p1">**</bpt>API Definition<ept id="p1">**</ept> blade in the Azure preview portal and you'll see that triggers are automatically recognized in the UI, which is driven by the Swagger 2.0 API definition of the API app.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>API Definition Blade</source>
          <target state="new">API Definition Blade</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you click the <bpt id="p1">**</bpt>Download Swagger<ept id="p1">**</ept> button and open the JSON file, you'll see results similar to the following:</source>
          <target state="new">If you click the <bpt id="p1">**</bpt>Download Swagger<ept id="p1">**</ept> button and open the JSON file, you'll see results similar to the following:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The extension property <bpt id="p1">**</bpt>x-ms-schedular-trigger<ept id="p1">**</ept> is how triggers are described in API definition, and is automatically added by the API app gateway when you request the API definition via the gateway if the request to one of the following criteria.</source>
          <target state="new">The extension property <bpt id="p1">**</bpt>x-ms-schedular-trigger<ept id="p1">**</ept> is how triggers are described in API definition, and is automatically added by the API app gateway when you request the API definition via the gateway if the request to one of the following criteria.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(You can also add this property manually.)</source>
          <target state="new">(You can also add this property manually.)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Poll trigger</source>
          <target state="new">Poll trigger</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the HTTP method is <bpt id="p1">**</bpt>GET<ept id="p1">**</ept>.</source>
          <target state="new">If the HTTP method is <bpt id="p1">**</bpt>GET<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>operationId<ept id="p1">**</ept> property contains the string <bpt id="p2">**</bpt>trigger<ept id="p2">**</ept>.</source>
          <target state="new">If the <bpt id="p1">**</bpt>operationId<ept id="p1">**</ept> property contains the string <bpt id="p2">**</bpt>trigger<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property includes a parameter with a <bpt id="p2">**</bpt>name<ept id="p2">**</ept> property set to <bpt id="p3">**</bpt>triggerState<ept id="p3">**</ept>.</source>
          <target state="new">If the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property includes a parameter with a <bpt id="p2">**</bpt>name<ept id="p2">**</ept> property set to <bpt id="p3">**</bpt>triggerState<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Push trigger</source>
          <target state="new">Push trigger</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the HTTP method is <bpt id="p1">**</bpt>PUT<ept id="p1">**</ept>.</source>
          <target state="new">If the HTTP method is <bpt id="p1">**</bpt>PUT<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>operationId<ept id="p1">**</ept> property contains the string <bpt id="p2">**</bpt>trigger<ept id="p2">**</ept>.</source>
          <target state="new">If the <bpt id="p1">**</bpt>operationId<ept id="p1">**</ept> property contains the string <bpt id="p2">**</bpt>trigger<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property includes a parameter with a <bpt id="p2">**</bpt>name<ept id="p2">**</ept> property set to <bpt id="p3">**</bpt>triggerId<ept id="p3">**</ept>.</source>
          <target state="new">If the <bpt id="p1">**</bpt>parameters<ept id="p1">**</ept> property includes a parameter with a <bpt id="p2">**</bpt>name<ept id="p2">**</ept> property set to <bpt id="p3">**</bpt>triggerId<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use API app triggers in Logic apps</source>
          <target state="new">Use API app triggers in Logic apps</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>List and configure API app triggers in the Logic apps designer</source>
          <target state="new">List and configure API app triggers in the Logic apps designer</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you create a Logic app in the same resource group as the API app, you will be able to add it to the designer canvas simply by clicking it.</source>
          <target state="new">If you create a Logic app in the same resource group as the API app, you will be able to add it to the designer canvas simply by clicking it.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following images illustrate this:</source>
          <target state="new">The following images illustrate this:</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Triggers in Logic App Designer</source>
          <target state="new">Triggers in Logic App Designer</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Configure Poll Trigger in Logic App Designer</source>
          <target state="new">Configure Poll Trigger in Logic App Designer</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Configure Push Trigger in Logic App Designer</source>
          <target state="new">Configure Push Trigger in Logic App Designer</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Optimize API app triggers for Logic apps</source>
          <target state="new">Optimize API app triggers for Logic apps</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>After you add triggers to an API app, there are a few things you can do to improve the experience when using the API app in a Logic app.</source>
          <target state="new">After you add triggers to an API app, there are a few things you can do to improve the experience when using the API app in a Logic app.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For instance, the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter for poll triggers should be set to the following expression in the Logic app.</source>
          <target state="new">For instance, the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter for poll triggers should be set to the following expression in the Logic app.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This expression should evaluate the last invocation of the trigger from the Logic app, and return that value.</source>
          <target state="new">This expression should evaluate the last invocation of the trigger from the Logic app, and return that value.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>NOTE: For an explanation of the functions used in the expression above, refer to the documentation on <bpt id="p1">[</bpt>Logic App Workflow Definition Language<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx)</ept>.</source>
          <target state="new">NOTE: For an explanation of the functions used in the expression above, refer to the documentation on <bpt id="p1">[</bpt>Logic App Workflow Definition Language<ept id="p1">](https://msdn.microsoft.com/library/azure/dn948512.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Logic app users would need to provide the expression above for the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter while using the trigger.</source>
          <target state="new">Logic app users would need to provide the expression above for the <bpt id="p1">**</bpt>triggerState<ept id="p1">**</ept> parameter while using the trigger.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It is possible to have this value preset by the Logic app designer through the extension property <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept>.</source>
          <target state="new">It is possible to have this value preset by the Logic app designer through the extension property <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>x-ms-visibility<ept id="p1">**</ept> extension property can be set to a value of <bpt id="p2">*</bpt>internal<ept id="p2">*</ept> so that the parameter itself is not shown on the designer.</source>
          <target state="new">The <bpt id="p1">**</bpt>x-ms-visibility<ept id="p1">**</ept> extension property can be set to a value of <bpt id="p2">*</bpt>internal<ept id="p2">*</ept> so that the parameter itself is not shown on the designer.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following snippet illustrates that.</source>
          <target state="new">The following snippet illustrates that.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For push triggers, the <bpt id="p1">**</bpt>triggerId<ept id="p1">**</ept> parameter must uniquely identify the Logic app.</source>
          <target state="new">For push triggers, the <bpt id="p1">**</bpt>triggerId<ept id="p1">**</ept> parameter must uniquely identify the Logic app.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A recommended best practice is to set this property to the name of the workflow by using the following expression:</source>
          <target state="new">A recommended best practice is to set this property to the name of the workflow by using the following expression:</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>x-ms-visibility<ept id="p2">**</ept> extension properties in its API definiton, the API app can convey to the Logic app designer to automatically set this expression for the user.</source>
          <target state="new">Using the <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>x-ms-visibility<ept id="p2">**</ept> extension properties in its API definiton, the API app can convey to the Logic app designer to automatically set this expression for the user.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Add extension properties in API defintion</source>
          <target state="new">Add extension properties in API defintion</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Additional metadata information - such as the extension properties <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>x-ms-visibility<ept id="p2">**</ept> - can be added in the API defintion in one of two ways: static or dynamic.</source>
          <target state="new">Additional metadata information - such as the extension properties <bpt id="p1">**</bpt>x-ms-scheduler-recommendation<ept id="p1">**</ept> and <bpt id="p2">**</bpt>x-ms-visibility<ept id="p2">**</ept> - can be added in the API defintion in one of two ways: static or dynamic.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For static metadata, you can directly edit the <bpt id="p1">*</bpt>/metadata/apiDefinition.swagger.json<ept id="p1">*</ept> file in your project and add the properties manually.</source>
          <target state="new">For static metadata, you can directly edit the <bpt id="p1">*</bpt>/metadata/apiDefinition.swagger.json<ept id="p1">*</ept> file in your project and add the properties manually.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For API apps using dynamic metadata, you can edit the SwaggerConfig.cs file to add an operation filter which can add these extensions.</source>
          <target state="new">For API apps using dynamic metadata, you can edit the SwaggerConfig.cs file to add an operation filter which can add these extensions.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following is an example of how this class can be implemented to facilitate the dynamic metadata scenario.</source>
          <target state="new">The following is an example of how this class can be implemented to facilitate the dynamic metadata scenario.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33b86bdc2066da4c81026688c15696a24830540c</xliffext:olfilehash>
  </header>
</xliff>