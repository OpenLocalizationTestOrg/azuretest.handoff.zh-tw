<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>App Model v2.0 | Microsoft Azure</source>
          <target state="new">App Model v2.0 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to build a .NET native app that signs users in with both personal Microsoft Account and work or school accounts.</source>
          <target state="new">How to build a .NET native app that signs users in with both personal Microsoft Account and work or school accounts.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>App model v2.0 preview: Add sign-in to a Windows Desktop app</source>
          <target state="new">App model v2.0 preview: Add sign-in to a Windows Desktop app</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With the v2.0 app model, you can quickly add authentication to your desktop apps with support for both personal Microsoft accounts and work or school accounts.</source>
          <target state="new">With the v2.0 app model, you can quickly add authentication to your desktop apps with support for both personal Microsoft accounts and work or school accounts.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It also enables your app to securely communicate with a backend web api, as well as a few of the <bpt id="p1">[</bpt>Office 365 Unified APIs<ept id="p1">](https://www.msdn.com/office/office365/howto/authenticate-Office-365-APIs-using-v2)</ept>.</source>
          <target state="new">It also enables your app to securely communicate with a backend web api, as well as a few of the <bpt id="p1">[</bpt>Office 365 Unified APIs<ept id="p1">](https://www.msdn.com/office/office365/howto/authenticate-Office-365-APIs-using-v2)</ept>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This information applies to the v2.0 app model public preview.</source>
          <target state="new">This information applies to the v2.0 app model public preview.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</source>
          <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="p1">[</bpt>Azure Active Directory Developer Guide<ept id="p1">](active-directory-developers-guide.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt>.NET native apps that run on a device<ept id="p1">](active-directory-v2-flows.md#mobile-and-native-apps)</ept>, Azure AD provides the Active Directory Authentication Library, or ADAL.</source>
          <target state="new">For <bpt id="p1">[</bpt>.NET native apps that run on a device<ept id="p1">](active-directory-v2-flows.md#mobile-and-native-apps)</ept>, Azure AD provides the Active Directory Authentication Library, or ADAL.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ADAL's sole purpose in life is to make it easy for your app to get tokens for calling web services.</source>
          <target state="new">ADAL's sole purpose in life is to make it easy for your app to get tokens for calling web services.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To demonstrate just how easy it is, here we'll build a .NET WPF To-Do List app that:</source>
          <target state="new">To demonstrate just how easy it is, here we'll build a .NET WPF To-Do List app that:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Signs the user in &amp; gets access tokens using the <bpt id="p1">[</bpt>OAuth 2.0 authentication protocol<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</source>
          <target state="new">Signs the user in &amp; gets access tokens using the <bpt id="p1">[</bpt>OAuth 2.0 authentication protocol<ept id="p1">](active-directory-v2-protocols.md#oauth2-authorization-code-flow)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Securely calls a backend To-Do List web service, which is also secured by OAuth 2.0.</source>
          <target state="new">Securely calls a backend To-Do List web service, which is also secured by OAuth 2.0.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Signs users out.</source>
          <target state="new">Signs users out.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To build the complete working app, you'll need to:</source>
          <target state="new">To build the complete working app, you'll need to:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Register your app.</source>
          <target state="new">Register your app.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Install &amp; Configure ADAL.</source>
          <target state="new">Install &amp; Configure ADAL.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use ADAL to get tokens from Azure AD.</source>
          <target state="new">Use ADAL to get tokens from Azure AD.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet)</ept>.</source>
          <target state="new">The code for this tutorial is maintained <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet/archive/skeleton.zip)</ept> or clone the skeleton:</source>
          <target state="new">To follow along, you can <bpt id="p1">[</bpt>download the app's skeleton as a .zip<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet/archive/skeleton.zip)</ept> or clone the skeleton:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The completed app is provided at the end of this tutorial as well.</source>
          <target state="new">The completed app is provided at the end of this tutorial as well.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>1. Register an App</source>
          <target state="new">1. Register an App</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</source>
          <target state="new">Create a new app at <bpt id="p1">[</bpt>apps.dev.microsoft.com<ept id="p1">](https://apps.dev.microsoft.com)</ept>, or follow these <bpt id="p2">[</bpt>detailed steps<ept id="p2">](active-directory-v2-app-registration.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Make sure to:</source>
          <target state="new">Make sure to:</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> assigned to your app, you'll need it soon.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>Mobile<ept id="p1">**</ept> platform for your app.</source>
          <target state="new">Add the <bpt id="p1">**</bpt>Mobile<ept id="p1">**</ept> platform for your app.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Copy down the <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> from the portal.</source>
          <target state="new">Copy down the <bpt id="p1">**</bpt>Redirect URI<ept id="p1">**</ept> from the portal.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You must use the default value of <ph id="ph1">`urn:ietf:wg:oauth:2.0:oob`</ph>.</source>
          <target state="new">You must use the default value of <ph id="ph1">`urn:ietf:wg:oauth:2.0:oob`</ph>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>2. Install &amp; Configure ADAL</source>
          <target state="new">2. Install &amp; Configure ADAL</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Now that you have an app registered with Microsoft, you can install ADAL and write your identity-related code.</source>
          <target state="new">Now that you have an app registered with Microsoft, you can install ADAL and write your identity-related code.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In order for ADAL to be able to communicate the v2.0 endpoint, you need to provide it with some information about your app registration.</source>
          <target state="new">In order for ADAL to be able to communicate the v2.0 endpoint, you need to provide it with some information about your app registration.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Begin by adding ADAL to the TodoListClient project using the Package Manager Console.</source>
          <target state="new">Begin by adding ADAL to the TodoListClient project using the Package Manager Console.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the TodoListClient project, open <ph id="ph1">`app.config`</ph>.</source>
          <target state="new">In the TodoListClient project, open <ph id="ph1">`app.config`</ph>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Replace the values of the elements in the <ph id="ph1">`&lt;appSettings&gt;`</ph> section to reflect the values you input into the app registration portal.</source>
          <target state="new">Replace the values of the elements in the <ph id="ph1">`&lt;appSettings&gt;`</ph> section to reflect the values you input into the app registration portal.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Your code will reference these values whenever it uses ADAL.</source>
          <target state="new">Your code will reference these values whenever it uses ADAL.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ida:ClientId`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> of your app you copied from the portal.</source>
          <target state="new">The <ph id="ph1">`ida:ClientId`</ph> is the <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> of your app you copied from the portal.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ida:RedirectUri`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> from the portal.</source>
          <target state="new">The <ph id="ph1">`ida:RedirectUri`</ph> is the <bpt id="p1">**</bpt>Redirect Uri<ept id="p1">**</ept> from the portal.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the TodoList-Service project, open <ph id="ph1">`web.config`</ph> in the root of the project.</source>
          <target state="new">In the TodoList-Service project, open <ph id="ph1">`web.config`</ph> in the root of the project.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`ida:Audience`</ph> value with the same <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> from the portal.</source>
          <target state="new">Replace the <ph id="ph1">`ida:Audience`</ph> value with the same <bpt id="p1">**</bpt>Application Id<ept id="p1">**</ept> from the portal.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>3. Use ADAL to Get Tokens</source>
          <target state="new">3. Use ADAL to Get Tokens</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The basic principle behind ADAL is that whenever your app needs an access token, you simply call <ph id="ph1">`authContext.AcquireToken(...)`</ph>, and ADAL does the rest.</source>
          <target state="new">The basic principle behind ADAL is that whenever your app needs an access token, you simply call <ph id="ph1">`authContext.AcquireToken(...)`</ph>, and ADAL does the rest.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`TodoListClient`</ph> project, open <ph id="ph2">`MainWindow.xaml.cs`</ph> and locate the <ph id="ph3">`OnInitialized(...)`</ph> method.</source>
          <target state="new">In the <ph id="ph1">`TodoListClient`</ph> project, open <ph id="ph2">`MainWindow.xaml.cs`</ph> and locate the <ph id="ph3">`OnInitialized(...)`</ph> method.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The first step is to initialize your app's <ph id="ph1">`AuthenticationContext`</ph> - ADAL's primary class.</source>
          <target state="new">The first step is to initialize your app's <ph id="ph1">`AuthenticationContext`</ph> - ADAL's primary class.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is where you pass ADAL the coordinates it needs to communicate with Azure AD and tell it how to cache tokens.</source>
          <target state="new">This is where you pass ADAL the coordinates it needs to communicate with Azure AD and tell it how to cache tokens.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the app starts up, we want to check and see if the user is already signed into the app.</source>
          <target state="new">When the app starts up, we want to check and see if the user is already signed into the app.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, we don't want to invoke a sign-in UI just yet - we'll make the user click "Sign In" to do so.</source>
          <target state="new">However, we don't want to invoke a sign-in UI just yet - we'll make the user click "Sign In" to do so.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Also in the <ph id="ph1">`OnInitialized(...)`</ph> method:</source>
          <target state="new">Also in the <ph id="ph1">`OnInitialized(...)`</ph> method:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the user is not signed in and they click the "Sign In" button, we want to invoke a login UI and have the user enter their credentials.</source>
          <target state="new">If the user is not signed in and they click the "Sign In" button, we want to invoke a login UI and have the user enter their credentials.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Implement the Sign-In button handler:</source>
          <target state="new">Implement the Sign-In button handler:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the user successfully signs-in, ADAL will receive and cache a token for you, and you can proceed to call the <ph id="ph1">`GetTodoList()`</ph> method with confidence.</source>
          <target state="new">If the user successfully signs-in, ADAL will receive and cache a token for you, and you can proceed to call the <ph id="ph1">`GetTodoList()`</ph> method with confidence.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All that's left to get a user's tasks is to implement the <ph id="ph1">`GetTodoList()`</ph> method.</source>
          <target state="new">All that's left to get a user's tasks is to implement the <ph id="ph1">`GetTodoList()`</ph> method.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You now have a working .NET WPF app that has the ability to authenticate users &amp; securely call Web APIs using OAuth 2.0.</source>
          <target state="new">You now have a working .NET WPF app that has the ability to authenticate users &amp; securely call Web APIs using OAuth 2.0.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run your both projects, and sign in with either a personal Microsoft account or a work or school account.</source>
          <target state="new">Run your both projects, and sign in with either a personal Microsoft account or a work or school account.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Add tasks to that user's To-Do list.</source>
          <target state="new">Add tasks to that user's To-Do list.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Sign out, and sign back in as another user to view their To-Do list.</source>
          <target state="new">Sign out, and sign back in as another user to view their To-Do list.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Close the app, and re-run it.</source>
          <target state="new">Close the app, and re-run it.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Notice how the user's session remains intact - that is becuase the app caches tokens in a local file.</source>
          <target state="new">Notice how the user's session remains intact - that is becuase the app caches tokens in a local file.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>ADAL makes it easy to incorporate common identity features into your app, using both personal and work accounts.</source>
          <target state="new">ADAL makes it easy to incorporate common identity features into your app, using both personal and work accounts.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It takes care of all the dirty work for you - cache management, OAuth protocol support, presenting the user with a login UI, refreshing expired tokens, and more.</source>
          <target state="new">It takes care of all the dirty work for you - cache management, OAuth protocol support, presenting the user with a login UI, refreshing expired tokens, and more.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>All you really need to know is a single API call, <ph id="ph1">`authContext.AcquireTokenAsync(...)`</ph>.</source>
          <target state="new">All you really need to know is a single API call, <ph id="ph1">`authContext.AcquireTokenAsync(...)`</ph>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet/archive/complete.zip)</ept>, or you can clone it from GitHub:</source>
          <target state="new">For reference, the completed sample (without your configuration values) <bpt id="p1">[</bpt>is provided as a .zip here<ept id="p1">](https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet/archive/complete.zip)</ept>, or you can clone it from GitHub:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can now move onto more advanced topics.</source>
          <target state="new">You can now move onto more advanced topics.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You may want to try:</source>
          <target state="new">You may want to try:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Securing the TodoListService Web API with the v2.0 app model &gt;&gt;</source>
          <target state="new">Securing the TodoListService Web API with the v2.0 app model &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For additional resources, check out:</source>
          <target state="new">For additional resources, check out:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The App Model v2.0 Preview &gt;&gt;</source>
          <target state="new">The App Model v2.0 Preview &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>StackOverflow "adal" tag &gt;&gt;</source>
          <target state="new">StackOverflow "adal" tag &gt;&gt;</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07ddfd06b8d960cff0310fbf3a1363e6f6685111</xliffext:olfilehash>
  </header>
</xliff>