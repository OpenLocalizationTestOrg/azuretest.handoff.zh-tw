{
  "nodes": [
    {
      "content": "Create the WebAPI Project",
      "pos": [
        3,
        28
      ]
    },
    {
      "content": "A new ASP.NET WebAPI backend will be created in the sections that follow and it will have three main purposes:",
      "pos": [
        30,
        140
      ]
    },
    {
      "pos": [
        145,
        283
      ],
      "content": "<bpt id=\"p1\">**</bpt>Authenticating Clients<ept id=\"p1\">**</ept>: A message handler will be added later to authenticate client requests and associate the user with the request."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Client Notification Registrations<ept id=\"p1\">**</ept>: Later, you will add a controller to handle new registrations for a client device to receive notifications.",
      "pos": [
        287,
        432
      ]
    },
    {
      "content": "The authenticated user name will automatically be added to the registration as a <bpt id=\"p1\">[</bpt>tag<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn530749.aspx)</ept>.",
      "pos": [
        433,
        576
      ]
    },
    {
      "pos": [
        580,
        756
      ],
      "content": "<bpt id=\"p1\">**</bpt>Sending Notifications to Clients<ept id=\"p1\">**</ept>: Later, you will also add a controller to provide a way for a user to trigger a secure push to devices and clients associated with the tag."
    },
    {
      "content": "The following steps show how to create the new ASP.NET WebAPI backend:",
      "pos": [
        759,
        829
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>: Before starting this tutorial, please ensure that you have installed the latest version of the NuGet Package Manager.",
      "pos": [
        835,
        980
      ]
    },
    {
      "content": "To check, start Visual Studio.",
      "pos": [
        981,
        1011
      ]
    },
    {
      "content": "From the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Extensions and Updates<ept id=\"p2\">**</ept>.",
      "pos": [
        1012,
        1070
      ]
    },
    {
      "content": "Search for <bpt id=\"p1\">**</bpt>NuGet Package Manager for Visual Studio 2013<ept id=\"p1\">**</ept>, and make sure you have version 2.8.50313.46 or later.",
      "pos": [
        1071,
        1185
      ]
    },
    {
      "content": "If not, please uninstall, then reinstall the NuGet Package Manager.",
      "pos": [
        1186,
        1253
      ]
    },
    {
      "pos": [
        1270,
        1404
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Make sure you have installed the Visual Studio <bpt id=\"p1\">[</bpt>Azure SDK<ept id=\"p1\">](http://azure.microsoft.com/downloads/)</ept> for website deployment."
    },
    {
      "content": "Start Visual Studio or Visual Studio Express.",
      "pos": [
        1409,
        1454
      ]
    },
    {
      "pos": [
        1458,
        1671
      ],
      "content": "In Visual Studio, click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>, expand <bpt id=\"p4\">**</bpt>Templates<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Visual C#<ept id=\"p5\">**</ept>, then click <bpt id=\"p6\">**</bpt>Web<ept id=\"p6\">**</ept> and <bpt id=\"p7\">**</bpt>ASP.NET Web Application<ept id=\"p7\">**</ept>, type the name <bpt id=\"p8\">**</bpt>AppBackend<ept id=\"p8\">**</ept>, and then click <bpt id=\"p9\">**</bpt>OK<ept id=\"p9\">**</ept>."
    },
    {
      "pos": [
        1694,
        1770
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>New ASP.NET Project<ept id=\"p1\">**</ept> dialog, click <bpt id=\"p2\">**</bpt>Web API<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Configure Azure Site<ept id=\"p1\">**</ept> dialog, choose a subscription, region, and database to use for this project.",
      "pos": [
        1788,
        1896
      ]
    },
    {
      "content": "Enter the password for your account and then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to create the project.",
      "pos": [
        1897,
        1977
      ]
    },
    {
      "content": "Authenticating Clients to the WebAPI Backend",
      "pos": [
        1997,
        2041
      ]
    },
    {
      "content": "In this section, you will create a new message handler class named <bpt id=\"p1\">**</bpt>AuthenticationTestHandler<ept id=\"p1\">**</ept> for the new backend.",
      "pos": [
        2043,
        2160
      ]
    },
    {
      "content": "This class is derived from <bpt id=\"p1\">[</bpt>DelegatingHandler<ept id=\"p1\">](https://msdn.microsoft.com/library/system.net.http.delegatinghandler.aspx)</ept> and added as a message handler so it can process all requests coming into the backend.",
      "pos": [
        2161,
        2369
      ]
    },
    {
      "content": "In Solution Explorer, right-click the <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> project, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.",
      "pos": [
        2377,
        2475
      ]
    },
    {
      "content": "Name the new class <bpt id=\"p1\">**</bpt>AuthenticationTestHandler.cs<ept id=\"p1\">**</ept>, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> to generate the class.",
      "pos": [
        2476,
        2569
      ]
    },
    {
      "content": "This class will be used to authenticate users using <bpt id=\"p1\">*</bpt>Basic Authentication<ept id=\"p1\">*</ept>.",
      "pos": [
        2570,
        2645
      ]
    },
    {
      "content": "Note that your app can use any authentication scheme.",
      "pos": [
        2646,
        2699
      ]
    },
    {
      "pos": [
        2704,
        2774
      ],
      "content": "In AuthenticationTestHandler.cs, add the following <ph id=\"ph1\">`using`</ph> statements:"
    },
    {
      "pos": [
        2936,
        3052
      ],
      "content": "In AuthenticationTestHandler.cs, replacing the <ph id=\"ph1\">`AuthenticationTestHandler`</ph> class definition with the following code."
    },
    {
      "content": "This handler will handle all requests that include an <bpt id=\"p1\">*</bpt>Authorization<ept id=\"p1\">*</ept> header.",
      "pos": [
        3059,
        3136
      ]
    },
    {
      "content": "If the request uses <bpt id=\"p1\">*</bpt>basic<ept id=\"p1\">*</ept> authentication, and the user name string matches the password string, then it will be authorized by the back end.",
      "pos": [
        3137,
        3278
      ]
    },
    {
      "content": "Otherwise, the request will be rejected.",
      "pos": [
        3279,
        3319
      ]
    },
    {
      "content": "This is not a true authentication and authorization approach.",
      "pos": [
        3320,
        3381
      ]
    },
    {
      "content": "It is just a very simple example for this tutorial.",
      "pos": [
        3382,
        3433
      ]
    },
    {
      "content": "If the request message is authenticated and authorized by the <ph id=\"ph1\">`AuthenticationTestHandler`</ph>, then the basic authentication user will be attached to the current request on the <bpt id=\"p1\">[</bpt>HttpContext<ept id=\"p1\">](https://msdn.microsoft.com/library/system.web.httpcontext.current.aspx)</ept>.",
      "pos": [
        3439,
        3698
      ]
    },
    {
      "content": "User information in the HttpContext will be used by another controller (RegisterController) to add a <bpt id=\"p1\">[</bpt>tag<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn530749.aspx)</ept> to the notification registration request.",
      "pos": [
        3699,
        3903
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">**</bpt>Security Note<ept id=\"p1\">**</ept>: The <ph id=\"ph2\">`AuthenticationTestHandler`</ph> class does not provide true authentication.",
      "pos": [
        6081,
        6188
      ]
    },
    {
      "content": "It is used only to mimic basic authentication and is not secure.",
      "pos": [
        6189,
        6253
      ]
    },
    {
      "content": "You must implement a secure authentication mechanism in your production applications and services.",
      "pos": [
        6254,
        6352
      ]
    },
    {
      "pos": [
        6372,
        6506
      ],
      "content": "Add the following code at the end of the <ph id=\"ph1\">`Register`</ph> method in the <bpt id=\"p1\">**</bpt>App_Start/WebApiConfig.cs<ept id=\"p1\">**</ept> class to register the message handler:"
    },
    {
      "content": "Save your changes.",
      "pos": [
        6581,
        6599
      ]
    },
    {
      "content": "Registering for Notifications using the WebAPI Backend",
      "pos": [
        6604,
        6658
      ]
    },
    {
      "content": "In this section, we will add a new controller to the WebAPI backend to handle requests to register a user and device for notifications using the client library for notification hubs, which is the Azure Service Bus client library.",
      "pos": [
        6660,
        6889
      ]
    },
    {
      "content": "The controller will add a user tag for the user that was authenticated and attached to the HttpContext by the <ph id=\"ph1\">`AuthenticationTestHandler`</ph>.",
      "pos": [
        6890,
        7028
      ]
    },
    {
      "content": "The tag will have the string format, <ph id=\"ph1\">`\"username:&lt;actual username&gt;\"`</ph>.",
      "pos": [
        7029,
        7097
      ]
    },
    {
      "pos": [
        7106,
        7208
      ],
      "content": "In Solution Explorer, right-click the <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> project and then click <bpt id=\"p2\">**</bpt>Manage NuGet Packages<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        7213,
        7306
      ],
      "content": "On the left-hand side, click <bpt id=\"p1\">**</bpt>Online<ept id=\"p1\">**</ept>, and search for <bpt id=\"p2\">**</bpt>servicebus<ept id=\"p2\">**</ept> in the <bpt id=\"p3\">**</bpt>Search<ept id=\"p3\">**</ept> box."
    },
    {
      "content": "In the results list, click <bpt id=\"p1\">**</bpt>Microsoft Azure Service Bus<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Install<ept id=\"p2\">**</ept>.",
      "pos": [
        7311,
        7398
      ]
    },
    {
      "content": "Complete the installation, then close the NuGet package manager window.",
      "pos": [
        7399,
        7470
      ]
    },
    {
      "content": "We will now create a new class file that represents the different secure notifications that will be sent.",
      "pos": [
        7489,
        7594
      ]
    },
    {
      "content": "In a complete implementation, the notifications are stored in a database.",
      "pos": [
        7595,
        7668
      ]
    },
    {
      "content": "For simplicity, this tutorial stores them in memory.",
      "pos": [
        7669,
        7721
      ]
    },
    {
      "content": "In the Solution Explorer, right-click the <bpt id=\"p1\">**</bpt>Models<ept id=\"p1\">**</ept> folder, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.",
      "pos": [
        7722,
        7819
      ]
    },
    {
      "content": "Name the new class <bpt id=\"p1\">**</bpt>Notifications.cs<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> to generate the class.",
      "pos": [
        7820,
        7902
      ]
    },
    {
      "pos": [
        7921,
        8001
      ],
      "content": "In Notifications.cs, add the following <ph id=\"ph1\">`using`</ph> statement at the top of the file:"
    },
    {
      "pos": [
        8057,
        8330
      ],
      "content": "Replace the <ph id=\"ph1\">`Notifications`</ph> class definition with the following and make sure to replace the two placeholders with the connection string (with full access) for your notification hub, and the hub name (available at <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](http://manage.windowsazure.com)</ept>):"
    },
    {
      "content": "Next we create a new controller, <bpt id=\"p1\">**</bpt>RegisterController<ept id=\"p1\">**</ept>.",
      "pos": [
        8712,
        8768
      ]
    },
    {
      "content": "In Solution Explorer, right-click the <bpt id=\"p1\">**</bpt>Controllers<ept id=\"p1\">**</ept> folder, then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Controller<ept id=\"p3\">**</ept>.",
      "pos": [
        8769,
        8877
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Web API 2 Controller -- Empty<ept id=\"p1\">**</ept> item, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.",
      "pos": [
        8878,
        8951
      ]
    },
    {
      "content": "Name the new class <bpt id=\"p1\">**</bpt>RegisterController<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> again to generate the controller.",
      "pos": [
        8952,
        9051
      ]
    },
    {
      "pos": [
        9082,
        9145
      ],
      "content": "In RegisterController.cs, add the following <ph id=\"ph1\">`using`</ph> statements:"
    },
    {
      "content": "Add the following code inside the <ph id=\"ph1\">`RegisterController`</ph> class definition.",
      "pos": [
        9344,
        9416
      ]
    },
    {
      "content": "Note that in this code, we add a user tag for the user this is attached to the HttpContext.",
      "pos": [
        9417,
        9508
      ]
    },
    {
      "content": "The user was authenticated and attached to the HttpContext by the message filter we added, <ph id=\"ph1\">`AuthenticationTestHandler`</ph>.",
      "pos": [
        9509,
        9628
      ]
    },
    {
      "content": "You can also add optional checks to verify that the user has rights to register for the requested tags.",
      "pos": [
        9629,
        9732
      ]
    },
    {
      "content": "Save your changes.",
      "pos": [
        13508,
        13526
      ]
    },
    {
      "content": "Sending Notifications from the WebAPI Backend",
      "pos": [
        13531,
        13576
      ]
    },
    {
      "content": "In this section you add a new controller that exposes a way for client devices to send a notification based on the username tag using Azure Service Bus client library in the ASP.NET WebAPI backend.",
      "pos": [
        13578,
        13775
      ]
    },
    {
      "content": "Create another new controller named <bpt id=\"p1\">**</bpt>NotificationsController<ept id=\"p1\">**</ept>.",
      "pos": [
        13781,
        13845
      ]
    },
    {
      "content": "Create it the same way you created the <bpt id=\"p1\">**</bpt>RegisterController<ept id=\"p1\">**</ept> in the previous section.",
      "pos": [
        13846,
        13932
      ]
    },
    {
      "pos": [
        13937,
        14005
      ],
      "content": "In NotificationsController.cs, add the following <ph id=\"ph1\">`using`</ph> statements:"
    },
    {
      "pos": [
        14108,
        14174
      ],
      "content": "Add the following method to the <bpt id=\"p1\">**</bpt>NotificationsController<ept id=\"p1\">**</ept> class."
    },
    {
      "content": "This code send a notification type based on the Platform Notification Service (PNS) <ph id=\"ph1\">`pns`</ph> parameter.",
      "pos": [
        14180,
        14280
      ]
    },
    {
      "content": "The value of <ph id=\"ph1\">`to_tag`</ph> is used to set the <bpt id=\"p1\">*</bpt>username<ept id=\"p1\">*</ept> tag on the message.",
      "pos": [
        14281,
        14352
      ]
    },
    {
      "content": "This tag must match a username tag of an active notification hub registration.",
      "pos": [
        14353,
        14431
      ]
    },
    {
      "content": "The notification message is pulled from the body of the POST request.",
      "pos": [
        14432,
        14501
      ]
    },
    {
      "content": "Press <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> to run the application and to ensure the accuracy of your work so far.",
      "pos": [
        16496,
        16579
      ]
    },
    {
      "content": "The app should launch a web browser and display the ASP.NET home page.",
      "pos": [
        16580,
        16650
      ]
    },
    {
      "content": "Publish the new WebAPI Backend",
      "pos": [
        16655,
        16685
      ]
    },
    {
      "content": "Now we will deploy this app to an Azure Website in order to make it accessible from all devices.",
      "pos": [
        16690,
        16786
      ]
    },
    {
      "content": "Right-click on the <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> project and select <bpt id=\"p2\">**</bpt>Publish<ept id=\"p2\">**</ept>.",
      "pos": [
        16787,
        16852
      ]
    },
    {
      "content": "Select Azure Website as your publish target.",
      "pos": [
        16857,
        16901
      ]
    },
    {
      "content": "Log in with your Azure account and select an existing or new Website.",
      "pos": [
        16920,
        16989
      ]
    },
    {
      "content": "Make a note of the <bpt id=\"p1\">**</bpt>destination URL<ept id=\"p1\">**</ept> property in the <bpt id=\"p2\">**</bpt>Connection<ept id=\"p2\">**</ept> tab.",
      "pos": [
        17008,
        17082
      ]
    },
    {
      "content": "We will refer to this URL as your <bpt id=\"p1\">*</bpt>backend endpoint<ept id=\"p1\">*</ept> later in this tutorial.",
      "pos": [
        17083,
        17159
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Publish<ept id=\"p1\">**</ept>.",
      "pos": [
        17160,
        17178
      ]
    }
  ],
  "content": "## Create the WebAPI Project\n\nA new ASP.NET WebAPI backend will be created in the sections that follow and it will have three main purposes:\n\n1. **Authenticating Clients**: A message handler will be added later to authenticate client requests and associate the user with the request.\n2. **Client Notification Registrations**: Later, you will add a controller to handle new registrations for a client device to receive notifications. The authenticated user name will automatically be added to the registration as a [tag](https://msdn.microsoft.com/library/azure/dn530749.aspx).\n3. **Sending Notifications to Clients**: Later, you will also add a controller to provide a way for a user to trigger a secure push to devices and clients associated with the tag. \n\nThe following steps show how to create the new ASP.NET WebAPI backend: \n\n\n> [AZURE.NOTE] **Important**: Before starting this tutorial, please ensure that you have installed the latest version of the NuGet Package Manager. To check, start Visual Studio. From the **Tools** menu, click **Extensions and Updates**. Search for **NuGet Package Manager for Visual Studio 2013**, and make sure you have version 2.8.50313.46 or later. If not, please uninstall, then reinstall the NuGet Package Manager.\n> \n> ![][B4]\n\n> [AZURE.NOTE] Make sure you have installed the Visual Studio [Azure SDK](http://azure.microsoft.com/downloads/) for website deployment.\n\n1. Start Visual Studio or Visual Studio Express.\n2. In Visual Studio, click **File**, then click **New**, then **Project**, expand **Templates**, **Visual C#**, then click **Web** and **ASP.NET Web Application**, type the name **AppBackend**, and then click **OK**. \n    \n    ![][B1]\n\n3. In the **New ASP.NET Project** dialog, click **Web API**, then click **OK**.\n\n    ![][B2]\n\n4. In the **Configure Azure Site** dialog, choose a subscription, region, and database to use for this project. Enter the password for your account and then click **OK** to create the project.\n\n    ![][B5]\n\n\n\n## Authenticating Clients to the WebAPI Backend\n\nIn this section, you will create a new message handler class named **AuthenticationTestHandler** for the new backend. This class is derived from [DelegatingHandler](https://msdn.microsoft.com/library/system.net.http.delegatinghandler.aspx) and added as a message handler so it can process all requests coming into the backend. \n\n\n\n1. In Solution Explorer, right-click the **AppBackend** project, click **Add**, then click **Class**. Name the new class **AuthenticationTestHandler.cs**, and click **Add** to generate the class. This class will be used to authenticate users using *Basic Authentication*. Note that your app can use any authentication scheme.\n\n2. In AuthenticationTestHandler.cs, add the following `using` statements:\n\n        using System.Net.Http;\n        using System.Threading;\n        using System.Security.Principal;\n        using System.Net;\n        using System.Web;\n\n3. In AuthenticationTestHandler.cs, replacing the `AuthenticationTestHandler` class definition with the following code. \n\n    This handler will handle all requests that include an *Authorization* header. If the request uses *basic* authentication, and the user name string matches the password string, then it will be authorized by the back end. Otherwise, the request will be rejected. This is not a true authentication and authorization approach. It is just a very simple example for this tutorial.\n\n    If the request message is authenticated and authorized by the `AuthenticationTestHandler`, then the basic authentication user will be attached to the current request on the [HttpContext](https://msdn.microsoft.com/library/system.web.httpcontext.current.aspx). User information in the HttpContext will be used by another controller (RegisterController) to add a [tag](https://msdn.microsoft.com/library/azure/dn530749.aspx) to the notification registration request.\n\n        public class AuthenticationTestHandler : DelegatingHandler\n        {\n            protected override Task<HttpResponseMessage> SendAsync(\n            HttpRequestMessage request, CancellationToken cancellationToken)\n            {\n                var authorizationHeader = request.Headers.GetValues(\"Authorization\").First();\n    \n                if (authorizationHeader != null && authorizationHeader\n                    .StartsWith(\"Basic \", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    string authorizationUserAndPwdBase64 =\n                        authorizationHeader.Substring(\"Basic \".Length);\n                    string authorizationUserAndPwd = Encoding.Default\n                        .GetString(Convert.FromBase64String(authorizationUserAndPwdBase64));\n                    string user = authorizationUserAndPwd.Split(':')[0];\n                    string password = authorizationUserAndPwd.Split(':')[1];\n    \n                    if (verifyUserAndPwd(user, password))\n                    {\n                        // Attach the new principal object to the current HttpContext object\n                        HttpContext.Current.User =\n                            new GenericPrincipal(new GenericIdentity(user), new string[0]);\n                        System.Threading.Thread.CurrentPrincipal =\n                            System.Web.HttpContext.Current.User;\n                    }\n                    else return Unauthorized();\n                }\n                else return Unauthorized();\n    \n                return base.SendAsync(request, cancellationToken);\n            }\n    \n            private bool verifyUserAndPwd(string user, string password)\n            {\n                // This is not a real authentication scheme.\n                return user == password;\n            }\n    \n            private Task<HttpResponseMessage> Unauthorized()\n            {\n                var response = new HttpResponseMessage(HttpStatusCode.Forbidden);\n                var tsc = new TaskCompletionSource<HttpResponseMessage>();\n                tsc.SetResult(response);\n                return tsc.Task;\n            }\n        }\n\n    > [AZURE.NOTE] **Security Note**: The `AuthenticationTestHandler` class does not provide true authentication. It is used only to mimic basic authentication and is not secure. You must implement a secure authentication mechanism in your production applications and services.               \n\n4. Add the following code at the end of the `Register` method in the **App_Start/WebApiConfig.cs** class to register the message handler:\n\n        config.MessageHandlers.Add(new AuthenticationTestHandler());\n\n5. Save your changes.\n\n## Registering for Notifications using the WebAPI Backend\n\nIn this section, we will add a new controller to the WebAPI backend to handle requests to register a user and device for notifications using the client library for notification hubs, which is the Azure Service Bus client library. The controller will add a user tag for the user that was authenticated and attached to the HttpContext by the `AuthenticationTestHandler`. The tag will have the string format, `\"username:<actual username>\"`.\n\n\n \n\n1. In Solution Explorer, right-click the **AppBackend** project and then click **Manage NuGet Packages**.\n\n2. On the left-hand side, click **Online**, and search for **servicebus** in the **Search** box.\n\n3. In the results list, click **Microsoft Azure Service Bus**, and then click **Install**. Complete the installation, then close the NuGet package manager window.\n\n    ![][B14]\n\n4. We will now create a new class file that represents the different secure notifications that will be sent. In a complete implementation, the notifications are stored in a database. For simplicity, this tutorial stores them in memory. In the Solution Explorer, right-click the **Models** folder, click **Add**, then click **Class**. Name the new class **Notifications.cs**, then click **Add** to generate the class. \n\n    ![][B6]\n\n5. In Notifications.cs, add the following `using` statement at the top of the file:\n\n        using Microsoft.ServiceBus.Notifications;\n\n6. Replace the `Notifications` class definition with the following and make sure to replace the two placeholders with the connection string (with full access) for your notification hub, and the hub name (available at [Azure Management Portal](http://manage.windowsazure.com)):\n\n        public class Notifications\n        {\n            public static Notifications Instance = new Notifications();\n        \n            public NotificationHubClient Hub { get; set; }\n\n            private Notifications() {\n                Hub = NotificationHubClient.CreateClientFromConnectionString(\"<conn string with full access>\", \"<hub name>\");\n            }\n        }\n\n\n\n7. Next we create a new controller, **RegisterController**. In Solution Explorer, right-click the **Controllers** folder, then click **Add**, then click **Controller**. Click the **Web API 2 Controller -- Empty** item, and then click **Add**. Name the new class **RegisterController**, and then click **Add** again to generate the controller.\n\n    ![][B7]\n\n    ![][B8]\n\n8. In RegisterController.cs, add the following `using` statements:\n\n        using Microsoft.ServiceBus.Notifications;\n        using AppBackend.Models;\n        using System.Threading.Tasks;\n        using Microsoft.ServiceBus.Messaging;\n        using System.Web;\n\n9. Add the following code inside the `RegisterController` class definition. Note that in this code, we add a user tag for the user this is attached to the HttpContext. The user was authenticated and attached to the HttpContext by the message filter we added, `AuthenticationTestHandler`. You can also add optional checks to verify that the user has rights to register for the requested tags.\n\n        private NotificationHubClient hub;\n\n        public RegisterController()\n        {\n            hub = Notifications.Instance.Hub;\n        }\n\n        public class DeviceRegistration\n        {\n            public string Platform { get; set; }\n            public string Handle { get; set; }\n            public string[] Tags { get; set; }\n        }\n\n        // POST api/register\n        // This creates a registration id\n        public async Task<string> Post(string handle = null)\n        {\n            string newRegistrationId = null;\n            \n            // make sure there are no existing registrations for this push handle (used for iOS and Android)\n            if (handle != null)\n            {\n                var registrations = await hub.GetRegistrationsByChannelAsync(handle, 100);\n\n                foreach (RegistrationDescription registration in registrations)\n                {\n                    if (newRegistrationId == null)\n                    {\n                        newRegistrationId = registration.RegistrationId;\n                    }\n                    else\n                    {\n                        await hub.DeleteRegistrationAsync(registration);\n                    }\n                }\n            }\n\n            if (newRegistrationId == null) \n                newRegistrationId = await hub.CreateRegistrationIdAsync();\n\n            return newRegistrationId;\n        }\n\n        // PUT api/register/5\n        // This creates or updates a registration (with provided channelURI) at the specified id\n        public async Task<HttpResponseMessage> Put(string id, DeviceRegistration deviceUpdate)\n        {\n            RegistrationDescription registration = null;\n            switch (deviceUpdate.Platform)\n            {\n                case \"mpns\":\n                    registration = new MpnsRegistrationDescription(deviceUpdate.Handle);\n                    break;\n                case \"wns\":\n                    registration = new WindowsRegistrationDescription(deviceUpdate.Handle);\n                    break;\n                case \"apns\":\n                    registration = new AppleRegistrationDescription(deviceUpdate.Handle);\n                    break;\n                case \"gcm\":\n                    registration = new GcmRegistrationDescription(deviceUpdate.Handle);\n                    break;\n                default:\n                    throw new HttpResponseException(HttpStatusCode.BadRequest);\n            }\n\n            registration.RegistrationId = id;\n            var username = HttpContext.Current.User.Identity.Name;\n\n            // add check if user is allowed to add these tags\n            registration.Tags = new HashSet<string>(deviceUpdate.Tags);\n            registration.Tags.Add(\"username:\" + username);\n\n            try\n            {\n                await hub.CreateOrUpdateRegistrationAsync(registration);\n            }\n            catch (MessagingException e)\n            {\n                ReturnGoneIfHubResponseIsGone(e);\n            }\n\n            return Request.CreateResponse(HttpStatusCode.OK);\n        }\n\n        // DELETE api/register/5\n        public async Task<HttpResponseMessage> Delete(string id)\n        {\n            await hub.DeleteRegistrationAsync(id);\n            return Request.CreateResponse(HttpStatusCode.OK);\n        }\n\n        private static void ReturnGoneIfHubResponseIsGone(MessagingException e)\n        {\n            var webex = e.InnerException as WebException;\n            if (webex.Status == WebExceptionStatus.ProtocolError)\n            {\n                var response = (HttpWebResponse)webex.Response;\n                if (response.StatusCode == HttpStatusCode.Gone)\n                    throw new HttpRequestException(HttpStatusCode.Gone.ToString());\n            }\n        }\n\n10. Save your changes.\n\n## Sending Notifications from the WebAPI Backend\n\nIn this section you add a new controller that exposes a way for client devices to send a notification based on the username tag using Azure Service Bus client library in the ASP.NET WebAPI backend.\n\n\n1. Create another new controller named **NotificationsController**. Create it the same way you created the **RegisterController** in the previous section.\n\n2. In NotificationsController.cs, add the following `using` statements:\n\n        using AppBackend.Models;\n        using System.Threading.Tasks;\n        using System.Web;\n\n3. Add the following method to the **NotificationsController** class.\n\n    This code send a notification type based on the Platform Notification Service (PNS) `pns` parameter. The value of `to_tag` is used to set the *username* tag on the message. This tag must match a username tag of an active notification hub registration. The notification message is pulled from the body of the POST request. \n\n        public async Task<HttpResponseMessage> Post(string pns, [FromBody]string message, string to_tag)\n        {\n            var user = HttpContext.Current.User.Identity.Name;\n            string[] userTag = new string[2];\n            userTag[0] = \"username:\" + to_tag;\n            userTag[1] = \"from:\" + user;\n\n            Microsoft.ServiceBus.Notifications.NotificationOutcome outcome = null;\n            HttpStatusCode ret = HttpStatusCode.InternalServerError;\n\n            switch (pns.ToLower())\n            {\n                case \"wns\":\n                    // Windows 8.1 / Windows Phone 8.1\n                    var toast = @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">\" + \n                                \"From \" + user + \": \" + message + \"</text></binding></visual></toast>\";\n                    outcome = await Notifications.Instance.Hub.SendWindowsNativeNotificationAsync(toast, userTag);\n                    break;\n                case \"apns\":\n                    // iOS\n                    var alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"\" + \"From \" + user + \": \" + message + \"\\\"}}\";\n                    outcome = await Notifications.Instance.Hub.SendAppleNativeNotificationAsync(alert, userTag);\n                    break;\n                case \"gcm\":\n                    // Android\n                    var notif = \"{ \\\"data\\\" : {\\\"message\\\":\\\"\" + \"From \" + user + \": \" + message + \"\\\"}}\";\n                    outcome = await Notifications.Instance.Hub.SendGcmNativeNotificationAsync(notif, userTag);\n                    break;\n            }\n\n            if (outcome != null)\n            {\n                if (!((outcome.State == Microsoft.ServiceBus.Notifications.NotificationOutcomeState.Abandoned) ||\n                    (outcome.State == Microsoft.ServiceBus.Notifications.NotificationOutcomeState.Unknown)))\n                {\n                    ret = HttpStatusCode.OK;\n                }\n            }\n\n            return Request.CreateResponse(ret);\n        }\n\n\n4. Press **F5** to run the application and to ensure the accuracy of your work so far. The app should launch a web browser and display the ASP.NET home page. \n\n##Publish the new WebAPI Backend\n\n1. Now we will deploy this app to an Azure Website in order to make it accessible from all devices. Right-click on the **AppBackend** project and select **Publish**.\n\n2. Select Azure Website as your publish target.\n\n    ![][B15]\n\n3. Log in with your Azure account and select an existing or new Website.\n\n    ![][B16]\n\n4. Make a note of the **destination URL** property in the **Connection** tab. We will refer to this URL as your *backend endpoint* later in this tutorial. Click **Publish**.\n\n    ![][B18]\n\n\n[B1]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push1.png\n[B2]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push2.png\n[B3]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push3.png\n[B4]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push4.png\n[B5]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push5.png\n[B6]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push6.png\n[B7]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push7.png\n[B8]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push8.png\n[B14]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-secure-push14.png\n[B15]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-notify-users15.PNG\n[B16]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-notify-users16.PNG\n[B18]: ./media/notification-hubs-aspnet-backend-notifyusers/notification-hubs-notify-users18.PNG\n"
}