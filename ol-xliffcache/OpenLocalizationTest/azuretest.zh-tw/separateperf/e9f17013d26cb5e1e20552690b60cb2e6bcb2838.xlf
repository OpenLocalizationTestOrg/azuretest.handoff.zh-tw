<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to use blob storage from PHP | Microsoft Azure</source>
          <target state="new">How to use blob storage from PHP | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use the Azure blob service to upload, list, download, and delete blobs.</source>
          <target state="new">Learn how to use the Azure blob service to upload, list, download, and delete blobs.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Code samples are written in PHP.</source>
          <target state="new">Code samples are written in PHP.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to use blob storage from PHP</source>
          <target state="new">How to use blob storage from PHP</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This guide shows you how to perform common scenarios using the Azure blob service.</source>
          <target state="new">This guide shows you how to perform common scenarios using the Azure blob service.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The samples are written in PHP and use the <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">] [download]</ept>.</source>
          <target state="new">The samples are written in PHP and use the <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">] [download]</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The scenarios covered include <bpt id="p1">**</bpt>uploading<ept id="p1">**</ept>, <bpt id="p2">**</bpt>listing<ept id="p2">**</ept>, <bpt id="p3">**</bpt>downloading<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>deleting<ept id="p4">**</ept> blobs.</source>
          <target state="new">The scenarios covered include <bpt id="p1">**</bpt>uploading<ept id="p1">**</ept>, <bpt id="p2">**</bpt>listing<ept id="p2">**</ept>, <bpt id="p3">**</bpt>downloading<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>deleting<ept id="p4">**</ept> blobs.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information on blobs, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#next-steps)</ept> section.</source>
          <target state="new">For more information on blobs, see the <bpt id="p1">[</bpt>Next steps<ept id="p1">](#next-steps)</ept> section.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create a PHP application</source>
          <target state="new">Create a PHP application</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The only requirement for creating a PHP application that accesses the Azure blob service is the referencing of classes in the Azure SDK for PHP from within your code.</source>
          <target state="new">The only requirement for creating a PHP application that accesses the Azure blob service is the referencing of classes in the Azure SDK for PHP from within your code.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use any development tools to create your application, including Notepad.</source>
          <target state="new">You can use any development tools to create your application, including Notepad.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this guide, you use service features, which can be called within a PHP application locally or in code running within an Azure web role, worker role, or website.</source>
          <target state="new">In this guide, you use service features, which can be called within a PHP application locally or in code running within an Azure web role, worker role, or website.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Get the Azure Client Libraries</source>
          <target state="new">Get the Azure Client Libraries</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Configure your application to access the blob service</source>
          <target state="new">Configure your application to access the blob service</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To use the Azure blob service APIs, you need to:</source>
          <target state="new">To use the Azure blob service APIs, you need to:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reference the autoloader file using the <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> statement, and</source>
          <target state="new">Reference the autoloader file using the <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> statement, and</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Reference any classes you might use.</source>
          <target state="new">Reference any classes you might use.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how to include the autoloader file and reference the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</source>
          <target state="new">The following example shows how to include the autoloader file and reference the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you installed the libraries manually or as a PEAR package, you need to reference the <ph id="ph1">`WindowsAzure.php`</ph> autoloader file.</source>
          <target state="new">If you installed the libraries manually or as a PEAR package, you need to reference the <ph id="ph1">`WindowsAzure.php`</ph> autoloader file.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the examples below, the <ph id="ph1">`require_once`</ph> statement will be shown always, but only the classes necessary for the example to execute are referenced.</source>
          <target state="new">In the examples below, the <ph id="ph1">`require_once`</ph> statement will be shown always, but only the classes necessary for the example to execute are referenced.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Set up an Azure storage connection</source>
          <target state="new">Set up an Azure storage connection</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To instantiate an Azure blob service client, you must first have a valid connection string.</source>
          <target state="new">To instantiate an Azure blob service client, you must first have a valid connection string.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The format for the blob service connection string is:</source>
          <target state="new">The format for the blob service connection string is:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For accessing a live service:</source>
          <target state="new">For accessing a live service:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For accessing the storage emulator:</source>
          <target state="new">For accessing the storage emulator:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To create any Azure service client, you need to use the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</source>
          <target state="new">To create any Azure service client, you need to use the <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can:</source>
          <target state="new">You can:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Pass the connection string directly to it or</source>
          <target state="new">Pass the connection string directly to it or</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> to check multiple external sources for the connection string:</source>
          <target state="new">Use the <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> to check multiple external sources for the connection string:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By default, it comes with support for one external source - environmental variables.</source>
          <target state="new">By default, it comes with support for one external source - environmental variables.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can add new sources by extending the <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> class.</source>
          <target state="new">You can add new sources by extending the <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For the examples outlined here, the connection string will be passed directly.</source>
          <target state="new">For the examples outlined here, the connection string will be passed directly.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create a container</source>
          <target state="new">Create a container</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>BlobRestProxy<ept id="p1">**</ept> object lets you create a blob container with the <bpt id="p2">**</bpt>createContainer<ept id="p2">**</ept> method.</source>
          <target state="new">A <bpt id="p1">**</bpt>BlobRestProxy<ept id="p1">**</ept> object lets you create a blob container with the <bpt id="p2">**</bpt>createContainer<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When creating a container, you can set options on the container, but doing so is not required.</source>
          <target state="new">When creating a container, you can set options on the container, but doing so is not required.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(The example below shows how to set the container access control list (ACL) and container metadata.)</source>
          <target state="new">(The example below shows how to set the container access control list (ACL) and container metadata.)</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>setPublicAccess(PublicAccessType::CONTAINER\_AND\_BLOBS)<ept id="p1">**</ept> makes the container and blob data accessible via anonymous requests.</source>
          <target state="new">Calling <bpt id="p1">**</bpt>setPublicAccess(PublicAccessType::CONTAINER\_AND\_BLOBS)<ept id="p1">**</ept> makes the container and blob data accessible via anonymous requests.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Calling <bpt id="p1">**</bpt>setPublicAccess(PublicAccessType::BLOBS_ONLY)<ept id="p1">**</ept> makes only blob data accessible via anonymous requests.</source>
          <target state="new">Calling <bpt id="p1">**</bpt>setPublicAccess(PublicAccessType::BLOBS_ONLY)<ept id="p1">**</ept> makes only blob data accessible via anonymous requests.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about container ACLs, see <bpt id="p1">[</bpt>Set container ACL (REST API)<ept id="p1">][container-acl]</ept>.</source>
          <target state="new">For more information about container ACLs, see <bpt id="p1">[</bpt>Set container ACL (REST API)<ept id="p1">][container-acl]</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about Blob service error codes, see <bpt id="p1">[</bpt>Blob Service Error Codes<ept id="p1">][error-codes]</ept>.</source>
          <target state="new">For more information about Blob service error codes, see <bpt id="p1">[</bpt>Blob Service Error Codes<ept id="p1">][error-codes]</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Upload a blob into a container</source>
          <target state="new">Upload a blob into a container</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To upload a file as a blob, use the <bpt id="p1">**</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="p1">**</ept> method.</source>
          <target state="new">To upload a file as a blob, use the <bpt id="p1">**</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This operation creates the blob if it doesn't exist, or overwrites it if it does.</source>
          <target state="new">This operation creates the blob if it doesn't exist, or overwrites it if it does.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The code example below assumes that the container has already been created and uses <bpt id="p1">[</bpt>fopen<ept id="p1">][fopen]</ept> to open the file as a stream.</source>
          <target state="new">The code example below assumes that the container has already been created and uses <bpt id="p1">[</bpt>fopen<ept id="p1">][fopen]</ept> to open the file as a stream.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that the previous sample uploads a blob as a stream.</source>
          <target state="new">Note that the previous sample uploads a blob as a stream.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, a blob can also be uploaded as a string using, for example, the <bpt id="p1">[</bpt>file\_get\_contents<ept id="p1">][file_get_contents]</ept> function.</source>
          <target state="new">However, a blob can also be uploaded as a string using, for example, the <bpt id="p1">[</bpt>file\_get\_contents<ept id="p1">][file_get_contents]</ept> function.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To do this using the previous sample, change <ph id="ph1">`$content = fopen("c:\myfile.txt", "r");`</ph> to <ph id="ph2">`$content = file_get_contents("c:\myfile.txt");`</ph>.</source>
          <target state="new">To do this using the previous sample, change <ph id="ph1">`$content = fopen("c:\myfile.txt", "r");`</ph> to <ph id="ph2">`$content = file_get_contents("c:\myfile.txt");`</ph>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>List the blobs in a container</source>
          <target state="new">List the blobs in a container</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To list the blobs in a container, use the <bpt id="p1">**</bpt>BlobRestProxy-&gt;listBlobs<ept id="p1">**</ept> method with a <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> loop to loop through the result.</source>
          <target state="new">To list the blobs in a container, use the <bpt id="p1">**</bpt>BlobRestProxy-&gt;listBlobs<ept id="p1">**</ept> method with a <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> loop to loop through the result.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following code displays the name of each blob as output in a container and displays its URI to the browser.</source>
          <target state="new">The following code displays the name of each blob as output in a container and displays its URI to the browser.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Download a blob</source>
          <target state="new">Download a blob</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To download a blob, call the <bpt id="p1">**</bpt>BlobRestProxy-&gt;getBlob<ept id="p1">**</ept> method, then call the <bpt id="p2">**</bpt>getContentStream<ept id="p2">**</ept> method on the resulting <bpt id="p3">**</bpt>GetBlobResult<ept id="p3">**</ept> object.</source>
          <target state="new">To download a blob, call the <bpt id="p1">**</bpt>BlobRestProxy-&gt;getBlob<ept id="p1">**</ept> method, then call the <bpt id="p2">**</bpt>getContentStream<ept id="p2">**</ept> method on the resulting <bpt id="p3">**</bpt>GetBlobResult<ept id="p3">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Note that the example above gets a blob as a stream resource (the default behavior).</source>
          <target state="new">Note that the example above gets a blob as a stream resource (the default behavior).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>However, you can use the <bpt id="p1">[</bpt>stream\_get\_contents<ept id="p1">][stream-get-contents]</ept> function to convert the returned stream to a string.</source>
          <target state="new">However, you can use the <bpt id="p1">[</bpt>stream\_get\_contents<ept id="p1">][stream-get-contents]</ept> function to convert the returned stream to a string.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Delete a blob</source>
          <target state="new">Delete a blob</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To delete a blob, pass the container name and blob name to <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteBlob<ept id="p1">**</ept>.</source>
          <target state="new">To delete a blob, pass the container name and blob name to <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteBlob<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Delete a blob container</source>
          <target state="new">Delete a blob container</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Finally, to delete a blob container, pass the container name to <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteContainer<ept id="p1">**</ept>.</source>
          <target state="new">Finally, to delete a blob container, pass the container name to <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteContainer<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now that you've learned the basics of the Azure blob service, follow these links to learn about more complex storage tasks.</source>
          <target state="new">Now that you've learned the basics of the Azure blob service, follow these links to learn about more complex storage tasks.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See the MSDN reference: <bpt id="p1">[</bpt>Azure Storage<ept id="p1">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept></source>
          <target state="new">See the MSDN reference: <bpt id="p1">[</bpt>Azure Storage<ept id="p1">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure Storage team blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></source>
          <target state="new">Visit the <bpt id="p1">[</bpt>Azure Storage team blog<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See the PHP block blob example at <bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php&gt;</ept>.</source>
          <target state="new">See the PHP block blob example at <bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See the PHP page blob example at <bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php&gt;</ept></source>
          <target state="new">See the PHP page blob example at <bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f17013d26cb5e1e20552690b60cb2e6bcb2838</xliffext:olfilehash>
  </header>
</xliff>