{
  "nodes": [
    {
      "content": "Release notes for Application Insights for Windows",
      "pos": [
        28,
        78
      ]
    },
    {
      "content": "The latest updates.",
      "pos": [
        98,
        117
      ]
    },
    {
      "content": "Release Notes for Application Insights SDK for Windows Phone and Store",
      "pos": [
        436,
        506
      ]
    },
    {
      "pos": [
        508,
        746
      ],
      "content": "The <bpt id=\"p1\">[</bpt>Application Insights SDK<ept id=\"p1\">](app-insights-windows-get-started.md)</ept> sends telemetry about your live app to <bpt id=\"p2\">[</bpt>Application Insights<ept id=\"p2\">](http://azure.microsoft.com/services/application-insights/)</ept>, where you can analyze its usage and performance."
    },
    {
      "content": "To install the SDK in your application",
      "pos": [
        754,
        792
      ]
    },
    {
      "pos": [
        794,
        908
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Get started with Application Insights for Windows Phone and Store apps<ept id=\"p1\">](app-insights-windows-get-started.md)</ept>."
    },
    {
      "content": "To upgrade to the latest SDK",
      "pos": [
        915,
        943
      ]
    },
    {
      "content": "Take a copy of ApplicationInsights.config, to keep any customizations you have done.",
      "pos": [
        948,
        1032
      ]
    },
    {
      "pos": [
        1035,
        1119
      ],
      "content": "In Solution Explorer, right-click your project and choose <bpt id=\"p1\">**</bpt>Manage NuGet packages<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Set the filter to show installed packages.",
      "pos": [
        1122,
        1164
      ]
    },
    {
      "content": "Select the installed Application Insights packages and choose Upgrade.",
      "pos": [
        1168,
        1238
      ]
    },
    {
      "content": "Compare the old and new versions of ApplicationInsights.config.",
      "pos": [
        1241,
        1304
      ]
    },
    {
      "content": "Merge back any customizations you made to the old version.",
      "pos": [
        1305,
        1363
      ]
    },
    {
      "content": "Rebuild your solution.",
      "pos": [
        1366,
        1388
      ]
    },
    {
      "content": "Version 1.0.0",
      "pos": [
        1393,
        1406
      ]
    },
    {
      "content": "Windows App SDK",
      "pos": [
        1412,
        1427
      ]
    },
    {
      "content": "New initialization for Windows Apps.",
      "pos": [
        1431,
        1467
      ]
    },
    {
      "content": "New <ph id=\"ph1\">`WindowsAppInitializer`</ph> class with <ph id=\"ph2\">`InitializeAsync()`</ph> method allows for bootstrapping initialization of SDK collection.",
      "pos": [
        1468,
        1592
      ]
    },
    {
      "content": "This change allow more precise control and significant app initialization performance improvements over previous ApplicationInsights.config technique.",
      "pos": [
        1593,
        1743
      ]
    },
    {
      "content": "DeveloperMode is no longer automatically set.",
      "pos": [
        1746,
        1791
      ]
    },
    {
      "content": "To change DeveloperMode behavior you must specify in code.",
      "pos": [
        1792,
        1850
      ]
    },
    {
      "content": "NuGet package no longer injects ApplicationInsights.config.",
      "pos": [
        1853,
        1912
      ]
    },
    {
      "content": "Recommend to use the new WindowsAppInitializer when manually adding NuGet package.",
      "pos": [
        1913,
        1995
      ]
    },
    {
      "pos": [
        1998,
        2140
      ],
      "content": "ApplicationInsights.config only reads <ph id=\"ph1\">`&lt;InstrumentationKey&gt;`</ph>, all other settings are ignored in preference for WindowsAppInitializer settings."
    },
    {
      "content": "Store Market will be auto collected by SDK.",
      "pos": [
        2143,
        2186
      ]
    },
    {
      "content": "Lots of bug fixes, stability improvements, and performance enhancements.",
      "pos": [
        2189,
        2261
      ]
    },
    {
      "content": "Core SDK",
      "pos": [
        2267,
        2275
      ]
    },
    {
      "content": "ApplicationInsights.config file is no longer requiered.",
      "pos": [
        2279,
        2334
      ]
    },
    {
      "content": "And not added by the NuGet package.",
      "pos": [
        2335,
        2370
      ]
    },
    {
      "content": "Configuration can be fully specified in code.",
      "pos": [
        2371,
        2416
      ]
    },
    {
      "content": "NuGet package will no longer add a targets file to your solution.",
      "pos": [
        2419,
        2484
      ]
    },
    {
      "content": "This removes the automatic setting of DeveloperMode during a debug build.",
      "pos": [
        2485,
        2558
      ]
    },
    {
      "content": "DeveloperMode should be manually set in code.",
      "pos": [
        2559,
        2604
      ]
    },
    {
      "content": "Version 0.17",
      "pos": [
        2609,
        2621
      ]
    },
    {
      "content": "Windows App SDK",
      "pos": [
        2627,
        2642
      ]
    },
    {
      "content": "Windows App SDK now supports Universal Windows Apps created against Windows 10 technical preview and with VS 2015 RC.",
      "pos": [
        2646,
        2763
      ]
    },
    {
      "content": "Core SDK",
      "pos": [
        2769,
        2777
      ]
    },
    {
      "content": "TelemetryClient defaults to initialize with the InMemoryChannel.",
      "pos": [
        2781,
        2845
      ]
    },
    {
      "content": "New API added, <ph id=\"ph1\">`TelemetryClient.Flush()`</ph>.",
      "pos": [
        2848,
        2889
      ]
    },
    {
      "content": "This Flush method will trigger an immediate blocking upload of all telemetry logged to that client.",
      "pos": [
        2890,
        2989
      ]
    },
    {
      "content": "This enables manual triggering of upload before process shutdown.",
      "pos": [
        2990,
        3055
      ]
    },
    {
      "content": "NuGet package added a .Net 4.5 target.",
      "pos": [
        3058,
        3096
      ]
    },
    {
      "content": "This target has no external dependencies (removed BCL and EventSource dependencies).",
      "pos": [
        3097,
        3181
      ]
    },
    {
      "content": "Version 0.16",
      "pos": [
        3186,
        3198
      ]
    },
    {
      "content": "2015-04-28 preview",
      "pos": [
        3201,
        3219
      ]
    },
    {
      "pos": [
        3223,
        3361
      ],
      "content": "SDK now supports DNX target platform to enable monitoring of <bpt id=\"p1\">[</bpt>.NET Core framework<ept id=\"p1\">](http://www.dotnetfoundation.org/NETCore5)</ept> applications."
    },
    {
      "content": "Instances of <ph id=\"ph1\">```TelemetryClient```</ph> do not cache Instrumentation Key anymore.",
      "pos": [
        3364,
        3440
      ]
    },
    {
      "content": "Now if instrumentation key wasn't set in <ph id=\"ph1\">```TelemetryClient```</ph> explicitly <ph id=\"ph2\">```InstrumentationKey```</ph> will return null.",
      "pos": [
        3441,
        3557
      ]
    },
    {
      "content": "It fixes an issue when you set <ph id=\"ph1\">```TelemetryConfiguration.Active.InstrumentationKey```</ph> after some telemetry was already collected, telemetry modules like dependency collector, web requests data collection and performance counters collector will use new instrumentation key.",
      "pos": [
        3558,
        3830
      ]
    },
    {
      "content": "Version 0.15",
      "pos": [
        3835,
        3847
      ]
    },
    {
      "content": "New property <ph id=\"ph1\">```Operation.SyntheticSource```</ph> now available on <ph id=\"ph2\">```TelemetryContext```</ph>.",
      "pos": [
        3851,
        3936
      ]
    },
    {
      "content": "Now you can mark your telemetry items as \"not a real user traffic\" and specify how this traffic was generated.",
      "pos": [
        3937,
        4047
      ]
    },
    {
      "content": "As an example by setting this property you can distinguish traffic from your test automation from load test traffic.",
      "pos": [
        4048,
        4164
      ]
    },
    {
      "content": "Channel logic was moved to the separate NuGet called Microsoft.ApplicationInsights.PersistenceChannel.",
      "pos": [
        4167,
        4269
      ]
    },
    {
      "content": "Default channel is now called InMemoryChannel",
      "pos": [
        4270,
        4315
      ]
    },
    {
      "pos": [
        4318,
        4418
      ],
      "content": "New method <ph id=\"ph1\">```TelemetryClient.Flush```</ph> allows to flush telemetry items from the buffer synchronously"
    },
    {
      "content": "Version 0.13",
      "pos": [
        4423,
        4435
      ]
    },
    {
      "content": "No release notes for older versions available.",
      "pos": [
        4437,
        4483
      ]
    },
    {
      "content": "test",
      "pos": [
        4485,
        4489
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Release notes for Application Insights for Windows\" \n    description=\"The latest updates.\" \n    services=\"application-insights\" \n    documentationCenter=\"\"\n    authors=\"alancameronwills\" \n    manager=\"douge\"/>\n<tags \n    ms.service=\"application-insights\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"ibiza\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"06/18/2015\" \n    ms.author=\"sergkanz\"/>\n \n# Release Notes for Application Insights SDK for Windows Phone and Store\n\nThe [Application Insights SDK](app-insights-windows-get-started.md) sends telemetry about your live app to [Application Insights](http://azure.microsoft.com/services/application-insights/), where you can analyze its usage and performance.\n\n\n#### To install the SDK in your application\n\nSee [Get started with Application Insights for Windows Phone and Store apps](app-insights-windows-get-started.md).\n\n#### To upgrade to the latest SDK \n\n* Take a copy of ApplicationInsights.config, to keep any customizations you have done.\n* In Solution Explorer, right-click your project and choose **Manage NuGet packages**.\n* Set the filter to show installed packages. \n* Select the installed Application Insights packages and choose Upgrade.\n* Compare the old and new versions of ApplicationInsights.config. Merge back any customizations you made to the old version.\n* Rebuild your solution.\n\n## Version 1.0.0\n\n### Windows App SDK\n\n- New initialization for Windows Apps. New `WindowsAppInitializer` class with `InitializeAsync()` method allows for bootstrapping initialization of SDK collection. This change allow more precise control and significant app initialization performance improvements over previous ApplicationInsights.config technique.\n- DeveloperMode is no longer automatically set. To change DeveloperMode behavior you must specify in code.\n- NuGet package no longer injects ApplicationInsights.config. Recommend to use the new WindowsAppInitializer when manually adding NuGet package.\n- ApplicationInsights.config only reads `<InstrumentationKey>`, all other settings are ignored in preference for WindowsAppInitializer settings.\n- Store Market will be auto collected by SDK.\n- Lots of bug fixes, stability improvements, and performance enhancements.\n\n### Core SDK\n\n- ApplicationInsights.config file is no longer requiered. And not added by the NuGet package. Configuration can be fully specified in code.\n- NuGet package will no longer add a targets file to your solution. This removes the automatic setting of DeveloperMode during a debug build. DeveloperMode should be manually set in code.\n\n## Version 0.17\n\n### Windows App SDK\n\n- Windows App SDK now supports Universal Windows Apps created against Windows 10 technical preview and with VS 2015 RC.\n\n### Core SDK\n\n- TelemetryClient defaults to initialize with the InMemoryChannel.\n- New API added, `TelemetryClient.Flush()`. This Flush method will trigger an immediate blocking upload of all telemetry logged to that client. This enables manual triggering of upload before process shutdown.\n- NuGet package added a .Net 4.5 target. This target has no external dependencies (removed BCL and EventSource dependencies).\n\n## Version 0.16 \n\n2015-04-28 preview\n\n- SDK now supports DNX target platform to enable monitoring of [.NET Core framework](http://www.dotnetfoundation.org/NETCore5) applications.\n- Instances of ```TelemetryClient``` do not cache Instrumentation Key anymore. Now if instrumentation key wasn't set in ```TelemetryClient``` explicitly ```InstrumentationKey``` will return null. It fixes an issue when you set ```TelemetryConfiguration.Active.InstrumentationKey``` after some telemetry was already collected, telemetry modules like dependency collector, web requests data collection and performance counters collector will use new instrumentation key.\n\n## Version 0.15\n\n- New property ```Operation.SyntheticSource``` now available on ```TelemetryContext```. Now you can mark your telemetry items as \"not a real user traffic\" and specify how this traffic was generated. As an example by setting this property you can distinguish traffic from your test automation from load test traffic.\n- Channel logic was moved to the separate NuGet called Microsoft.ApplicationInsights.PersistenceChannel. Default channel is now called InMemoryChannel\n- New method ```TelemetryClient.Flush``` allows to flush telemetry items from the buffer synchronously\n\n## Version 0.13\n\nNo release notes for older versions available. \ntest\n"
}