{
  "nodes": [
    {
      "content": "Get started with Azure Notification Hubs | Microsoft Azure",
      "pos": [
        27,
        85
      ]
    },
    {
      "content": "In this tutorial, you learn how to use Azure Notification Hubs to push notifications to a Chrome App.",
      "pos": [
        104,
        205
      ]
    },
    {
      "content": "Get started with Notification Hubs",
      "pos": [
        537,
        571
      ]
    },
    {
      "content": "This topic shows you how to use Azure Notification Hubs to send push notifications to a Chrome App.",
      "pos": [
        689,
        788
      ]
    },
    {
      "content": "One of the key benefits of using Chrome App notifications is that the notifications show up within the context of the Google Chrome browser.",
      "pos": [
        790,
        930
      ]
    },
    {
      "content": "You don't need to have the Chrome App running or open in the browser (though the Chrome browser itself must be running).",
      "pos": [
        931,
        1051
      ]
    },
    {
      "content": "You also get a consolidated view of all your notifications in the Chrome Notifications window.",
      "pos": [
        1052,
        1146
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This is not a generic in-browser push notification and is specific to Chrome Appsâ€”see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Chrome Apps Overview]</ept> for details.",
      "pos": [
        1149,
        1283
      ]
    },
    {
      "content": "Chrome Apps were previously known as \"Packaged Apps\" and are different from simpler \"Hosted Apps\".",
      "pos": [
        1284,
        1382
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Installable Web Apps]</ept> for the difference.",
      "pos": [
        1383,
        1429
      ]
    },
    {
      "content": "Chrome Apps can also run on mobile (Android and iOS) via Apache Cordova.",
      "pos": [
        1430,
        1502
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt><ept id=\"p1\">Chrome Apps on Mobile]</ept> to learn more.",
      "pos": [
        1503,
        1545
      ]
    },
    {
      "content": "In this tutorial, we will create a Chrome app that receives push notifications by using Google Cloud Messaging (GCM).",
      "pos": [
        1547,
        1664
      ]
    },
    {
      "content": "When you complete the tutorial, you will be able to broadcast push notifications to all the Chrome users who have installed this Chrome App.",
      "pos": [
        1665,
        1805
      ]
    },
    {
      "content": "The tutorial walks you through these basic steps to enable push notifications:",
      "pos": [
        1807,
        1885
      ]
    },
    {
      "content": "Enable Google Cloud Messaging",
      "pos": [
        1890,
        1919
      ]
    },
    {
      "content": "Configure your notification hub",
      "pos": [
        1935,
        1966
      ]
    },
    {
      "content": "Connect your Chrome App to the notification hub",
      "pos": [
        1987,
        2034
      ]
    },
    {
      "content": "Send a notification to your Chrome App",
      "pos": [
        2053,
        2091
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        2103,
        2113
      ]
    },
    {
      "content": "This tutorial demonstrates the simple broadcast scenario in using Notification Hubs.",
      "pos": [
        2129,
        2213
      ]
    },
    {
      "content": "Configuring GCM and Azure Notification Hubs is identical to configuring for Android, since <bpt id=\"p1\">[</bpt><ept id=\"p1\">Google Cloud Messaging for Chrome]</ept> has been deprecated and the same GCM now supports both Android devices and Chrome instances.",
      "pos": [
        2214,
        2433
      ]
    },
    {
      "content": "Be sure to follow along with the tutorials in the \"Next steps\" section to see how to use notification hubs to address specific users and groups of devices.",
      "pos": [
        2435,
        2590
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To complete this tutorial, you must have an active Azure account.",
      "pos": [
        2593,
        2671
      ]
    },
    {
      "content": "If you don't have an account, you can create a free trial account in just a couple of minutes.",
      "pos": [
        2672,
        2766
      ]
    },
    {
      "content": "For details, see <bpt id=\"p1\">[</bpt>Azure Free Trial<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%notification-hubs-chrome-get-started%2F)</ept>.",
      "pos": [
        2767,
        2992
      ]
    },
    {
      "pos": [
        2996,
        3046
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enable Google Cloud Messaging"
    },
    {
      "content": "Navigate to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Google Cloud Console]</ept> website, sign in with your Google account credentials, and then click the <bpt id=\"p2\">**</bpt>Create Project<ept id=\"p2\">**</ept> button.",
      "pos": [
        3051,
        3190
      ]
    },
    {
      "content": "Provide an appropriate <bpt id=\"p1\">**</bpt>Project Name<ept id=\"p1\">**</ept>, and then click the <bpt id=\"p2\">**</bpt>Create<ept id=\"p2\">**</ept> button.",
      "pos": [
        3191,
        3269
      ]
    },
    {
      "content": "![][1]",
      "pos": [
        3275,
        3281
      ]
    },
    {
      "content": "Make a note of the <bpt id=\"p1\">**</bpt>Project Number<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Projects<ept id=\"p2\">**</ept> page for the project that you just created.",
      "pos": [
        3286,
        3387
      ]
    },
    {
      "content": "You will use this as the <bpt id=\"p1\">**</bpt>GCM Sender ID<ept id=\"p1\">**</ept> in the Chrome App to register with GCM.",
      "pos": [
        3388,
        3470
      ]
    },
    {
      "content": "![][2]",
      "pos": [
        3476,
        3482
      ]
    },
    {
      "content": "In the left pane, click <bpt id=\"p1\">**</bpt>APIs &amp; auth<ept id=\"p1\">**</ept>, and then scroll down and click the toggle to enable <bpt id=\"p2\">**</bpt>Google Cloud Messaging for Android<ept id=\"p2\">**</ept>.",
      "pos": [
        3487,
        3619
      ]
    },
    {
      "content": "You don't have to enable <bpt id=\"p1\">**</bpt>Google Cloud Messaging for Chrome<ept id=\"p1\">**</ept>.",
      "pos": [
        3620,
        3683
      ]
    },
    {
      "content": "![][3]",
      "pos": [
        3689,
        3695
      ]
    },
    {
      "pos": [
        3700,
        3791
      ],
      "content": "In the left pane, click <bpt id=\"p1\">**</bpt>Credentials<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Create New Key<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Server Key<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Create<ept id=\"p4\">**</ept>."
    },
    {
      "content": "![][4]",
      "pos": [
        3797,
        3803
      ]
    },
    {
      "content": "Make a note of the server <bpt id=\"p1\">**</bpt>API Key<ept id=\"p1\">**</ept>.",
      "pos": [
        3808,
        3846
      ]
    },
    {
      "content": "You will configure this in your notification hub next, to enable it to send push notifications to GCM.",
      "pos": [
        3847,
        3949
      ]
    },
    {
      "content": "![][5]",
      "pos": [
        3955,
        3961
      ]
    },
    {
      "pos": [
        3965,
        4022
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configure-hub\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Configure your notification hub"
    },
    {
      "pos": [
        4027,
        4116
      ],
      "content": "Sign in to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept>, and then click <bpt id=\"p2\">**</bpt>+ NEW<ept id=\"p2\">**</ept> at the bottom left of the screen."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>App Services<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>Service Bus<ept id=\"p2\">**</ept> &gt; <bpt id=\"p3\">**</bpt>Notification Hub<ept id=\"p3\">**</ept> &gt; <bpt id=\"p4\">**</bpt>Quick Create<ept id=\"p4\">**</ept>.",
      "pos": [
        4121,
        4204
      ]
    },
    {
      "content": "Type a name for your notification hub, select your desired region, and then click <bpt id=\"p1\">**</bpt>Create a new Notification Hub<ept id=\"p1\">**</ept>.",
      "pos": [
        4205,
        4321
      ]
    },
    {
      "content": "![][6]",
      "pos": [
        4327,
        4333
      ]
    },
    {
      "content": "Go to the notification hub that you just created.",
      "pos": [
        4338,
        4387
      ]
    },
    {
      "content": "Click the namespace that houses your notification hub (usually <bpt id=\"p1\">**</bpt><bpt id=\"p2\">*</bpt>notification hub name<ept id=\"p2\">*</ept>-ns<ept id=\"p1\">**</ept>).",
      "pos": [
        4388,
        4483
      ]
    },
    {
      "content": "![][7]",
      "pos": [
        4489,
        4495
      ]
    },
    {
      "pos": [
        4500,
        4547
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Notification Hubs<ept id=\"p1\">**</ept> tab at the top."
    },
    {
      "content": "![][8]",
      "pos": [
        4553,
        4559
      ]
    },
    {
      "pos": [
        4564,
        4603
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab at the top."
    },
    {
      "content": "![][9]",
      "pos": [
        4609,
        4615
      ]
    },
    {
      "pos": [
        4620,
        4797
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab, scroll down to the <bpt id=\"p2\">**</bpt>google cloud messaging settings<ept id=\"p2\">**</ept>, enter the <bpt id=\"p3\">**</bpt>API Key<ept id=\"p3\">**</ept> value that you obtained in the previous section, and then click <bpt id=\"p4\">**</bpt>Save<ept id=\"p4\">**</ept>."
    },
    {
      "content": "![][10]",
      "pos": [
        4803,
        4810
      ]
    },
    {
      "pos": [
        4815,
        4912
      ],
      "content": "Select the <bpt id=\"p1\">**</bpt>Dashboard<ept id=\"p1\">**</ept> tab at the top, and then click <bpt id=\"p2\">**</bpt>Connection Information<ept id=\"p2\">**</ept> at the bottom."
    },
    {
      "content": "![][11]",
      "pos": [
        4918,
        4925
      ]
    },
    {
      "pos": [
        4930,
        5145
      ],
      "content": "Take note of <bpt id=\"p1\">**</bpt>DefaultListenSharedAccessSignature<ept id=\"p1\">**</ept> (which you will need on the Chrome App to register with the notification hub) and <bpt id=\"p2\">**</bpt>DefaultFullSharedAccessSignature<ept id=\"p2\">**</ept> (which you will need to send notifications)."
    },
    {
      "content": "![][12]",
      "pos": [
        5151,
        5158
      ]
    },
    {
      "content": "Your notification hub is now configured to work with GCM, and you have the required connection strings for further configuration.",
      "pos": [
        5160,
        5289
      ]
    },
    {
      "pos": [
        5293,
        5364
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"connect-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Connect your Chrome App to the notification hub"
    },
    {
      "content": "Create a new Chrome App",
      "pos": [
        5369,
        5392
      ]
    },
    {
      "content": "The sample below is based on <bpt id=\"p1\">[</bpt><ept id=\"p1\">Chrome App GCM Sample]</ept> and uses the recommended way to create a Chrome App.",
      "pos": [
        5394,
        5499
      ]
    },
    {
      "content": "In the sections below, we will highlight the steps related to Azure Notification Hubs.",
      "pos": [
        5500,
        5586
      ]
    },
    {
      "content": "We recommend that you download the source for this Chrome App from <bpt id=\"p1\">[</bpt><ept id=\"p1\">Chrome App Notification Hub Sample]</ept>.",
      "pos": [
        5587,
        5691
      ]
    },
    {
      "content": "The Chrome App is created via JavaScript, and you can use any of your preferred word editors for creating it.",
      "pos": [
        5693,
        5802
      ]
    },
    {
      "content": "Below is what this Chrome App will look like.",
      "pos": [
        5803,
        5848
      ]
    },
    {
      "pos": [
        5866,
        5938
      ],
      "content": "Create a folder and name it <bpt id=\"p1\">**</bpt>ChromePushApp<ept id=\"p1\">**</ept> or anything that you want."
    },
    {
      "content": "Download <bpt id=\"p1\">**</bpt>cryto-js library<ept id=\"p1\">**</ept> from <bpt id=\"p2\">[</bpt><ept id=\"p2\">crypto-js library]</ept> in this folder.",
      "pos": [
        5943,
        6013
      ]
    },
    {
      "content": "This library folder will contain two subfolders: <bpt id=\"p1\">**</bpt>components<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>rollups<ept id=\"p2\">**</ept>.",
      "pos": [
        6014,
        6094
      ]
    },
    {
      "content": "Create a <bpt id=\"p1\">**</bpt>manifest.json<ept id=\"p1\">**</ept> file.",
      "pos": [
        6099,
        6131
      ]
    },
    {
      "content": "All Chrome Apps are backed by a manifest file that describes the app metadata and, in particular, the permissions that are available to the app.",
      "pos": [
        6132,
        6276
      ]
    },
    {
      "pos": [
        6716,
        7098
      ],
      "content": "Note the **permissions** element, which specifies that this Chrome App be able to receive push notifications from GCM. It must also specify the Azure Notification Hubs URI where the Chrome App will make a REST call to register.\n This uses an icon file, gcm_128.png, that you will find at the source that's reused from the original GCM sample. You can use any image that you want.",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Note the **permissions** element, which specifies that this Chrome App be able to receive push notifications from GCM. It must also specify the Azure Notification Hubs URI where the Chrome App will make a REST call to register.",
          "pos": [
            0,
            227
          ],
          "nodes": [
            {
              "content": "Note the <bpt id=\"p1\">**</bpt>permissions<ept id=\"p1\">**</ept> element, which specifies that this Chrome App be able to receive push notifications from GCM.",
              "pos": [
                0,
                118
              ]
            },
            {
              "content": "It must also specify the Azure Notification Hubs URI where the Chrome App will make a REST call to register.",
              "pos": [
                119,
                227
              ]
            }
          ]
        },
        {
          "content": " This uses an icon file, gcm_128.png, that you will find at the source that's reused from the original GCM sample. You can use any image that you want.",
          "pos": [
            228,
            379
          ],
          "nodes": [
            {
              "content": "This uses an icon file, gcm_128.png, that you will find at the source that's reused from the original GCM sample.",
              "pos": [
                1,
                114
              ]
            },
            {
              "content": "You can use any image that you want.",
              "pos": [
                115,
                151
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        7103,
        7166
      ],
      "content": "Create a file called <bpt id=\"p1\">**</bpt>background.js<ept id=\"p1\">**</ept> with the following code:"
    },
    {
      "pos": [
        8957,
        9124
      ],
      "content": "This is the file that pops up the Chrome App window HTML (<bpt id=\"p1\">**</bpt>register.html<ept id=\"p1\">**</ept>) and also defines the handler <bpt id=\"p2\">**</bpt>messageReceived<ept id=\"p2\">**</ept> to handle the incoming push notification."
    },
    {
      "content": "Create a file called <bpt id=\"p1\">**</bpt>register.html<ept id=\"p1\">**</ept> that defines the UI of the Chrome App.",
      "pos": [
        9129,
        9206
      ]
    },
    {
      "content": "Note that this sample uses <bpt id=\"p1\">*</bpt>CryptoJS v3.1.2<ept id=\"p1\">*</ept>.",
      "pos": [
        9207,
        9252
      ]
    },
    {
      "content": "If you downloaded any other version, then fix the script src path.",
      "pos": [
        9253,
        9319
      ]
    },
    {
      "content": "Create a file called <bpt id=\"p1\">**</bpt>register.js<ept id=\"p1\">**</ept> with the code below.",
      "pos": [
        10330,
        10387
      ]
    },
    {
      "content": "This file specifies the script behind <bpt id=\"p1\">**</bpt>register.html<ept id=\"p1\">**</ept>.",
      "pos": [
        10388,
        10444
      ]
    },
    {
      "content": "Chrome Apps do not allow inline execution, so you have to create a separate backing script for your UI.",
      "pos": [
        10445,
        10548
      ]
    },
    {
      "content": "The above script has the following takeaways:",
      "pos": [
        16590,
        16635
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>window.onload<ept id=\"p1\">*</ept> defines the button-click events of the two buttons on the UI.",
      "pos": [
        16642,
        16719
      ]
    },
    {
      "content": "One registers with GCM, and the other uses the registration ID that's returned after registration with GCM to register with Azure Notification Hubs.",
      "pos": [
        16720,
        16868
      ]
    },
    {
      "pos": [
        16875,
        16942
      ],
      "content": "<bpt id=\"p1\">*</bpt>updateLog<ept id=\"p1\">*</ept> is the function that defines a simple logging function."
    },
    {
      "pos": [
        16949,
        17091
      ],
      "content": "<bpt id=\"p1\">*</bpt>registerWithGCM<ept id=\"p1\">*</ept> is the first button-click handler, which makes the <bpt id=\"p2\">**</bpt>chrome.gcm.register<ept id=\"p2\">**</ept> call to GCM to register this Chrome App instance."
    },
    {
      "pos": [
        17098,
        17204
      ],
      "content": "<bpt id=\"p1\">*</bpt>registerCallback<ept id=\"p1\">*</ept> is the callback function that gets called when the above GCM registration call returns."
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>registerWithNH<ept id=\"p1\">*</ept> is the second button-click handler, which registers with Notification Hubs.",
      "pos": [
        17211,
        17303
      ]
    },
    {
      "content": "It gets <bpt id=\"p1\">**</bpt>hubName<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>connectionString<ept id=\"p2\">**</ept> (which the user has specified) and crafts the Notification Hubs Registration REST API call.",
      "pos": [
        17304,
        17440
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>splitConnectionString<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>generateSaSToken<ept id=\"p2\">*</ept> are a JavaScript implementation of creating a SaS token that must be sent in all REST API calls.",
      "pos": [
        17447,
        17590
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Common Concepts<ept id=\"p1\">](http://msdn.microsoft.com/library/dn495627.aspx)</ept>.",
      "pos": [
        17591,
        17684
      ]
    },
    {
      "pos": [
        17691,
        17764
      ],
      "content": "<bpt id=\"p1\">*</bpt>sendNHRegistrationRequest<ept id=\"p1\">*</ept> is the function that makes an HTTP REST call."
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>registrationPayload<ept id=\"p1\">*</ept> defines the registration XML payload.",
      "pos": [
        17771,
        17830
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create Registration NH REST API]</ept>.",
      "pos": [
        17831,
        17891
      ]
    },
    {
      "content": "We update the registration ID in it with what we received from GCM.",
      "pos": [
        17892,
        17959
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>client<ept id=\"p1\">*</ept> is an instance of <bpt id=\"p2\">**</bpt>XMLHttpRequest<ept id=\"p2\">**</ept> that we use to make the HTTP POST request.",
      "pos": [
        17966,
        18054
      ]
    },
    {
      "content": "Note that we update the <bpt id=\"p1\">**</bpt>Authorization<ept id=\"p1\">**</ept> header with <bpt id=\"p2\">**</bpt>sasToken<ept id=\"p2\">**</ept>.",
      "pos": [
        18055,
        18122
      ]
    },
    {
      "content": "Successful completion of this call will register this Chrome App instance with Azure Notification Hubs.",
      "pos": [
        18123,
        18226
      ]
    },
    {
      "content": "You should see the following view for your folder at the end of this:",
      "pos": [
        18229,
        18298
      ]
    },
    {
      "content": "![][21]",
      "pos": [
        18303,
        18310
      ]
    },
    {
      "content": "Set up and test your Chrome App",
      "pos": [
        18315,
        18346
      ]
    },
    {
      "content": "Open your Chrome browser.",
      "pos": [
        18351,
        18376
      ]
    },
    {
      "content": "Open <bpt id=\"p1\">**</bpt>Chrome extensions<ept id=\"p1\">**</ept> and enable <bpt id=\"p2\">**</bpt>Developer mode<ept id=\"p2\">**</ept>.",
      "pos": [
        18377,
        18434
      ]
    },
    {
      "content": "![][16]",
      "pos": [
        18440,
        18447
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Load unpacked extension<ept id=\"p1\">**</ept> and navigate to the folder where you created the files.",
      "pos": [
        18452,
        18541
      ]
    },
    {
      "content": "You can also optionally use the <bpt id=\"p1\">**</bpt>Chrome Apps &amp; Extensions Developer Tool<ept id=\"p1\">**</ept>.",
      "pos": [
        18542,
        18618
      ]
    },
    {
      "content": "This tool is a Chrome App in itself (installed from the Chrome Web Store) and provides advanced debugging capabilities for your Chrome App development.",
      "pos": [
        18619,
        18770
      ]
    },
    {
      "content": "![][17]",
      "pos": [
        18776,
        18783
      ]
    },
    {
      "content": "If the Chrome App is created without any errors, then you will see your Chrome App show up.",
      "pos": [
        18788,
        18879
      ]
    },
    {
      "content": "![][18]",
      "pos": [
        18885,
        18892
      ]
    },
    {
      "content": "Enter the <bpt id=\"p1\">**</bpt>Project Number<ept id=\"p1\">**</ept> that you got earlier from the <bpt id=\"p2\">**</bpt>Google Cloud Console<ept id=\"p2\">**</ept> as the sender ID, and click <bpt id=\"p3\">**</bpt>Register with GCM<ept id=\"p3\">**</ept>.",
      "pos": [
        18897,
        19031
      ]
    },
    {
      "content": "You must see the message <bpt id=\"p1\">**</bpt>Registration with GCM succeeded.<ept id=\"p1\">**</ept>",
      "pos": [
        19032,
        19093
      ]
    },
    {
      "content": "![][19]",
      "pos": [
        19099,
        19106
      ]
    },
    {
      "content": "Enter your <bpt id=\"p1\">**</bpt>Notification Hub Name<ept id=\"p1\">**</ept> and the <bpt id=\"p2\">**</bpt>DefaultListenSharedAccessSignature<ept id=\"p2\">**</ept> that you obtained from the Azure portal earlier, and click <bpt id=\"p3\">**</bpt>Register with Azure Notification Hub<ept id=\"p3\">**</ept>.",
      "pos": [
        19111,
        19295
      ]
    },
    {
      "content": "You must see the message <bpt id=\"p1\">**</bpt>Notification Hub Registration successful!<ept id=\"p1\">**</ept> and the details of the registration response, which contains the Azure Notification Hubs registration ID.",
      "pos": [
        19296,
        19472
      ]
    },
    {
      "content": "![][20]",
      "pos": [
        19478,
        19485
      ]
    },
    {
      "pos": [
        19491,
        19548
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"send\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Send a notification to your Chrome App"
    },
    {
      "content": "In this tutorial, you send notifications by using a .NET console application.",
      "pos": [
        19550,
        19627
      ]
    },
    {
      "content": "However, you can send notifications by using Notification Hubs from any backend via the <ph id=\"ph1\">&lt;a href=\"http://msdn.microsoft.com/library/windowsazure/dn223264.aspx\"&gt;</ph>REST interface<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        19628,
        19806
      ]
    },
    {
      "content": "For an example of how to send notifications from an Azure Mobile Services backend that's integrated with Notification Hubs, see \"Get started with push notifications in Mobile Services\" (<bpt id=\"p1\">[</bpt>.NET backend<ept id=\"p1\">](../mobile-services-javascript-backend-android-get-started-push.md)</ept> | <bpt id=\"p2\">[</bpt>JavaScript backend<ept id=\"p2\">](../mobile-services-javascript-backend-android-get-started-push.md)</ept>).",
      "pos": [
        19808,
        20167
      ]
    },
    {
      "content": "For an example of how to send notifications by using the REST APIs, see \"How to use Notification Hubs from Java/PHP/Python\" (<bpt id=\"p1\">[</bpt>Java<ept id=\"p1\">](notification-hubs-java-backend-how-to.md)</ept> | <bpt id=\"p2\">[</bpt>PHP<ept id=\"p2\">](notification-hubs-php-backend-how-to.md)</ept> | <bpt id=\"p3\">[</bpt>Python<ept id=\"p3\">](notification-hubs-python-backend-how-to.md)</ept>).",
      "pos": [
        20170,
        20449
      ]
    },
    {
      "content": "In Visual Studio, from the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> and then <bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.",
      "pos": [
        20454,
        20532
      ]
    },
    {
      "content": "Under <bpt id=\"p1\">**</bpt>Visual C#<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Windows<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Console Application<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>OK<ept id=\"p4\">**</ept>.",
      "pos": [
        20533,
        20623
      ]
    },
    {
      "content": "This creates a new console application project.",
      "pos": [
        20625,
        20672
      ]
    },
    {
      "content": "From the <bpt id=\"p1\">**</bpt>Tools<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Library Package Manager<ept id=\"p2\">**</ept> and then <bpt id=\"p3\">**</bpt>Package Manager Console<ept id=\"p3\">**</ept>.",
      "pos": [
        20677,
        20773
      ]
    },
    {
      "content": "This displays the Package Manager Console.",
      "pos": [
        20774,
        20816
      ]
    },
    {
      "content": "In the console window, execute the following command:",
      "pos": [
        20821,
        20874
      ]
    },
    {
      "pos": [
        20929,
        21094
      ],
      "content": "This adds a reference to the Azure Service Bus SDK with the <ph id=\"ph1\">&lt;a href=\"http://nuget.org/packages/  WindowsAzure.ServiceBus/\"&gt;</ph>WindowsAzure.ServiceBus NuGet package<ph id=\"ph2\">&lt;/a&gt;</ph>."
    },
    {
      "pos": [
        21099,
        21168
      ],
      "content": "Open the file <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> and add the following <ph id=\"ph1\">`using`</ph> statement:"
    },
    {
      "pos": [
        21224,
        21275
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Program<ept id=\"p1\">**</ept> class, add the following method:"
    },
    {
      "content": "Make sure to replace the <bpt id=\"p1\">*</bpt>hub name<ept id=\"p1\">*</ept> placeholder with the name of the notification hub that appears in the portal on the <bpt id=\"p2\">**</bpt>Notification Hubs<ept id=\"p2\">**</ept> tab.",
      "pos": [
        21676,
        21822
      ]
    },
    {
      "content": "Also, replace the connection string placeholder with the connection string called <bpt id=\"p1\">**</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">**</ept> that you obtained in the section \"Configure your notification hub.\"",
      "pos": [
        21823,
        22009
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Make sure that you use the connection string with <bpt id=\"p1\">**</bpt>Full<ept id=\"p1\">**</ept> access, not <bpt id=\"p2\">**</bpt>Listen<ept id=\"p2\">**</ept> access.",
      "pos": [
        22016,
        22118
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Listen<ept id=\"p1\">**</ept> access string does not have permissions to send notifications.",
      "pos": [
        22119,
        22196
      ]
    },
    {
      "pos": [
        22201,
        22248
      ],
      "content": "Add the following lines in the <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> method:"
    },
    {
      "content": "Make sure that your Chrome browser is open.",
      "pos": [
        22317,
        22360
      ]
    },
    {
      "content": "Your Chrome App doesn't need to be opened for this.",
      "pos": [
        22361,
        22412
      ]
    },
    {
      "content": "You should see the following notification pop up on your desktop.",
      "pos": [
        22413,
        22478
      ]
    },
    {
      "content": "![][13]",
      "pos": [
        22484,
        22491
      ]
    },
    {
      "content": "You can also see all your notifications by using the Chrome Notifications window on the taskbar (in Windows) when Chrome is running.",
      "pos": [
        22496,
        22628
      ]
    },
    {
      "content": "![][14]",
      "pos": [
        22634,
        22641
      ]
    },
    {
      "pos": [
        22646,
        22682
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "content": "In this simple example, you broadcasted notifications to your Chrome App.",
      "pos": [
        22684,
        22757
      ]
    },
    {
      "content": "Learn more about Notification Hubs in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Notification Hubs Overview]</ept>.",
      "pos": [
        22758,
        22825
      ]
    },
    {
      "content": "To target specific users, refer to the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Notification Hubs Notify Users]</ept>.",
      "pos": [
        22826,
        22913
      ]
    },
    {
      "content": "If you want to segment your users by interest groups, you can read <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure Notification Hubs breaking news]</ept>.",
      "pos": [
        22914,
        23021
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with Azure Notification Hubs | Microsoft Azure\"\n    description=\"In this tutorial, you learn how to use Azure Notification Hubs to push notifications to a Chrome App.\"\n    services=\"notification-hubs\"\n    documentationCenter=\"\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-chrome\"\n    ms.devlang=\"JavaScript\"\n    ms.topic=\"hero-article\"\n    ms.date=\"06/16/2015\"\n    ms.author=\"wesmc\"/>\n\n# Get started with Notification Hubs\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\n\nThis topic shows you how to use Azure Notification Hubs to send push notifications to a Chrome App.\n\nOne of the key benefits of using Chrome App notifications is that the notifications show up within the context of the Google Chrome browser. You don't need to have the Chrome App running or open in the browser (though the Chrome browser itself must be running). You also get a consolidated view of all your notifications in the Chrome Notifications window.\n\n>[AZURE.NOTE] This is not a generic in-browser push notification and is specific to Chrome Appsâ€”see [Chrome Apps Overview] for details. Chrome Apps were previously known as \"Packaged Apps\" and are different from simpler \"Hosted Apps\". See [Installable Web Apps] for the difference. Chrome Apps can also run on mobile (Android and iOS) via Apache Cordova. See [Chrome Apps on Mobile] to learn more.\n\nIn this tutorial, we will create a Chrome app that receives push notifications by using Google Cloud Messaging (GCM). When you complete the tutorial, you will be able to broadcast push notifications to all the Chrome users who have installed this Chrome App.\n\nThe tutorial walks you through these basic steps to enable push notifications:\n\n* [Enable Google Cloud Messaging](#register)\n* [Configure your notification hub](#configure-hub)\n* [Connect your Chrome App to the notification hub](#connect-app)\n* [Send a notification to your Chrome App](#send)\n* [Next steps](#next-steps)\n\nThis tutorial demonstrates the simple broadcast scenario in using Notification Hubs. Configuring GCM and Azure Notification Hubs is identical to configuring for Android, since [Google Cloud Messaging for Chrome] has been deprecated and the same GCM now supports both Android devices and Chrome instances.\n\nBe sure to follow along with the tutorials in the \"Next steps\" section to see how to use notification hubs to address specific users and groups of devices.\n\n>[AZURE.NOTE] To complete this tutorial, you must have an active Azure account. If you don't have an account, you can create a free trial account in just a couple of minutes. For details, see [Azure Free Trial](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%notification-hubs-chrome-get-started%2F).\n\n##<a id=\"register\"></a>Enable Google Cloud Messaging\n\n1. Navigate to the [Google Cloud Console] website, sign in with your Google account credentials, and then click the **Create Project** button. Provide an appropriate **Project Name**, and then click the **Create** button.\n\n    ![][1]\n\n2. Make a note of the **Project Number** on the **Projects** page for the project that you just created. You will use this as the **GCM Sender ID** in the Chrome App to register with GCM.\n\n    ![][2]\n\n3. In the left pane, click **APIs & auth**, and then scroll down and click the toggle to enable **Google Cloud Messaging for Android**. You don't have to enable **Google Cloud Messaging for Chrome**.\n\n    ![][3]\n\n4. In the left pane, click **Credentials** > **Create New Key** > **Server Key** > **Create**.\n\n    ![][4]\n\n5. Make a note of the server **API Key**. You will configure this in your notification hub next, to enable it to send push notifications to GCM.\n\n    ![][5]\n\n##<a id=\"configure-hub\"></a>Configure your notification hub\n\n1. Sign in to the [Azure portal], and then click **+ NEW** at the bottom left of the screen.\n\n2. Click **App Services** > **Service Bus** > **Notification Hub** > **Quick Create**. Type a name for your notification hub, select your desired region, and then click **Create a new Notification Hub**.\n\n    ![][6]\n\n4. Go to the notification hub that you just created. Click the namespace that houses your notification hub (usually ***notification hub name*-ns**).\n\n    ![][7]\n\n5. Click the **Notification Hubs** tab at the top.\n\n    ![][8]\n\n6. Click the **Configure** tab at the top.\n\n    ![][9]\n\n7. On the **Configure** tab, scroll down to the **google cloud messaging settings**, enter the **API Key** value that you obtained in the previous section, and then click **Save**.\n\n    ![][10]\n\n8. Select the **Dashboard** tab at the top, and then click **Connection Information** at the bottom.\n\n    ![][11]\n\n9. Take note of **DefaultListenSharedAccessSignature** (which you will need on the Chrome App to register with the notification hub) and **DefaultFullSharedAccessSignature** (which you will need to send notifications).\n\n    ![][12]\n\nYour notification hub is now configured to work with GCM, and you have the required connection strings for further configuration.\n\n##<a id=\"connect-app\"></a>Connect your Chrome App to the notification hub\n\n###Create a new Chrome App\n\nThe sample below is based on [Chrome App GCM Sample] and uses the recommended way to create a Chrome App. In the sections below, we will highlight the steps related to Azure Notification Hubs. We recommend that you download the source for this Chrome App from [Chrome App Notification Hub Sample].\n\nThe Chrome App is created via JavaScript, and you can use any of your preferred word editors for creating it. Below is what this Chrome App will look like.\n\n    ![][15]\n\n2. Create a folder and name it **ChromePushApp** or anything that you want.\n\n3. Download **cryto-js library** from [crypto-js library] in this folder. This library folder will contain two subfolders: **components** and **rollups**.\n\n4. Create a **manifest.json** file. All Chrome Apps are backed by a manifest file that describes the app metadata and, in particular, the permissions that are available to the app.\n\n        {\n          \"name\": \"NH-GCM Notifications\",\n          \"description\": \"Chrome platform app.\",\n          \"manifest_version\": 2,\n          \"version\": \"0.1\",\n          \"app\": {\n            \"background\": {\n              \"scripts\": [\"background.js\"]\n            }\n          },\n          \"permissions\": [\"gcm\", \"storage\", \"notifications\", \"https://*.servicebus.windows.net/*\"],\n          \"icons\": { \"128\": \"gcm_128.png\" }\n        }\n\n    Note the **permissions** element, which specifies that this Chrome App be able to receive push notifications from GCM. It must also specify the Azure Notification Hubs URI where the Chrome App will make a REST call to register.\n    This uses an icon file, gcm_128.png, that you will find at the source that's reused from the original GCM sample. You can use any image that you want.\n\n5. Create a file called **background.js** with the following code:\n\n        // Returns a new notification ID used in the notification.\n        function getNotificationId() {\n          var id = Math.floor(Math.random() * 9007199254740992) + 1;\n          return id.toString();\n        }\n\n        function messageReceived(message) {\n          // A message is an object with a data property that\n          // consists of key-value pairs.\n\n          // Concatenate all key-value pairs to form a display string.\n          var messageString = \"\";\n          for (var key in message.data) {\n            if (messageString != \"\")\n              messageString += \", \"\n            messageString += key + \":\" + message.data[key];\n          }\n          console.log(\"Message received: \" + messageString);\n\n          // Pop up a notification to show the GCM message.\n          chrome.notifications.create(getNotificationId(), {\n            title: 'GCM Message',\n            iconUrl: 'gcm_128.png',\n            type: 'basic',\n            message: messageString\n          }, function() {});\n        }\n\n        var registerWindowCreated = false;\n\n        function firstTimeRegistration() {\n          chrome.storage.local.get(\"registered\", function(result) {\n\n            registerWindowCreated = true;\n            chrome.app.window.create(\n              \"register.html\",\n              {  width: 520,\n                 height: 500,\n                 frame: 'chrome'\n              },\n              function(appWin) {}\n            );\n          });\n        }\n\n        // Set up a listener for GCM message event.\n        chrome.gcm.onMessage.addListener(messageReceived);\n\n        // Set up listeners to trigger the first-time registration.\n        chrome.runtime.onInstalled.addListener(firstTimeRegistration);\n        chrome.runtime.onStartup.addListener(firstTimeRegistration);\n\n    This is the file that pops up the Chrome App window HTML (**register.html**) and also defines the handler **messageReceived** to handle the incoming push notification.\n\n6. Create a file called **register.html** that defines the UI of the Chrome App. Note that this sample uses *CryptoJS v3.1.2*. If you downloaded any other version, then fix the script src path.\n\n        <html>\n\n        <head>\n        <title>GCM Registration</title>\n        <script src=\"register.js\"></script>\n        <script src=\"CryptoJS v3.1.2/rollups/hmac-sha256.js\"></script>\n        <script src=\"CryptoJS v3.1.2/components/enc-base64-min.js\"></script>\n        </head>\n\n        <body>\n\n        Sender ID:<br/><input id=\"senderId\" type=\"TEXT\" size=\"20\"><br/>\n        <button id=\"registerWithGCM\">Register with GCM</button>\n        <br/>\n        <br/>\n        <br/>\n\n        Notification Hub Name:<br/><input id=\"hubName\" type=\"TEXT\" style=\"width:400px\"><br/><br/>\n        Connection String:<br/><textarea id=\"connectionString\" type=\"TEXT\" style=\"width:400px;height:60px\"></textarea>\n\n        <br/>\n\n        <button id=\"registerWithNH\" disabled=\"true\">Register with Azure Notification Hubs</button>\n\n        <br/>\n        <br/>\n\n        <textarea id=\"console\" type=\"TEXT\" readonly style=\"width:500px;height:200px;background-color:#e5e5e5;padding:5px\"></textarea>\n\n        </body>\n\n        </html>\n\n7. Create a file called **register.js** with the code below. This file specifies the script behind **register.html**. Chrome Apps do not allow inline execution, so you have to create a separate backing script for your UI.\n\n        var registrationId = \"\";\n        var hubName        = \"\", connectionString = \"\";\n        var originalUri    = \"\", targetUri = \"\", endpoint = \"\", sasKeyName = \"\", sasKeyValue = \"\", sasToken = \"\";\n\n        window.onload = function() {\n           document.getElementById(\"registerWithGCM\").onclick = registerWithGCM;  \n           document.getElementById(\"registerWithNH\").onclick = registerWithNH;\n           updateLog(\"You have not registered yet. Please provider sender ID and register with GCM and then with  Notification Hubs.\");\n        }\n\n        function updateLog(status) {\n          currentStatus = document.getElementById(\"console\").innerHTML;\n          if (currentStatus != \"\") {\n            currentStatus = currentStatus + \"\\n\\n\";\n          }\n\n          document.getElementById(\"console\").innerHTML = currentStatus  + status;\n        }\n\n        function registerWithGCM() {\n          var senderId = document.getElementById(\"senderId\").value.trim();\n          chrome.gcm.register([senderId], registerCallback);\n\n          // Prevent register button from being clicked again before the registration finishes.\n          document.getElementById(\"registerWithGCM\").disabled = true;\n        }\n\n        function registerCallback(regId) {\n          registrationId = regId;\n          document.getElementById(\"registerWithGCM\").disabled = false;\n\n          if (chrome.runtime.lastError) {\n            // When the registration fails, handle the error and retry the\n            // registration later.\n            updateLog(\"Registration failed: \" + chrome.runtime.lastError.message);\n            return;\n          }\n\n          updateLog(\"Registration with GCM succeeded.\");\n          document.getElementById(\"registerWithNH\").disabled = false;\n\n          // Mark that the first-time registration is done.\n          chrome.storage.local.set({registered: true});\n        }\n\n        function registerWithNH() {\n          hubName = document.getElementById(\"hubName\").value.trim();\n          connectionString = document.getElementById(\"connectionString\").value.trim();\n          splitConnectionString();\n          generateSaSToken();\n          sendNHRegistrationRequest();\n        }\n\n        // From http://msdn.microsoft.com/library/dn495627.aspx\n        function splitConnectionString()\n        {\n          var parts = connectionString.split(';');\n          if (parts.length != 3)\n          throw \"Error parsing connection string\";\n\n          parts.forEach(function(part) {\n            if (part.indexOf('Endpoint') == 0) {\n            endpoint = 'https' + part.substring(11);\n            } else if (part.indexOf('SharedAccessKeyName') == 0) {\n            sasKeyName = part.substring(20);\n            } else if (part.indexOf('SharedAccessKey') == 0) {\n            sasKeyValue = part.substring(16);\n            }\n          });\n\n          originalUri = endpoint + hubName;\n        }\n\n        function generateSaSToken()\n        {\n          targetUri = encodeURIComponent(originalUri.toLowerCase()).toLowerCase();\n          var expiresInMins = 10; // 10 minute expiration\n\n          // Set expiration in seconds.\n          var expireOnDate = new Date();\n          expireOnDate.setMinutes(expireOnDate.getMinutes() + expiresInMins);\n          var expires = Date.UTC(expireOnDate.getUTCFullYear(), expireOnDate\n            .getUTCMonth(), expireOnDate.getUTCDate(), expireOnDate\n            .getUTCHours(), expireOnDate.getUTCMinutes(), expireOnDate\n            .getUTCSeconds()) / 1000;\n          var tosign = targetUri + '\\n' + expires;\n\n          // Using CryptoJS.\n          var signature = CryptoJS.HmacSHA256(tosign, sasKeyValue);\n          var base64signature = signature.toString(CryptoJS.enc.Base64);\n          var base64UriEncoded = encodeURIComponent(base64signature);\n\n          // Construct authorization string.\n          sasToken = \"SharedAccessSignature sr=\" + targetUri + \"&sig=\"\n                          + base64UriEncoded + \"&se=\" + expires + \"&skn=\" + sasKeyName;\n        }\n\n        function sendNHRegistrationRequest()\n        {\n          var registrationPayload =\n          \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n          \"<entry xmlns=\\\"http://www.w3.org/2005/Atom\\\">\" +\n              \"<content type=\\\"application/xml\\\">\" +\n                  \"<GcmRegistrationDescription xmlns:i=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\\\">\" +\n                      \"<GcmRegistrationId>{GCMRegistrationId}</GcmRegistrationId>\" +\n                  \"</GcmRegistrationDescription>\" +\n              \"</content>\" +\n          \"</entry>\";\n\n          // Update the payload with the registration ID obtained earlier.\n          registrationPayload = registrationPayload.replace(\"{GCMRegistrationId}\", registrationId);\n\n          var url = originalUri + \"/registrations/?api-version=2014-09\";\n          var client = new XMLHttpRequest();\n\n          client.onload = function () {\n            if (client.readyState == 4) {\n              if (client.status == 200) {\n                updateLog(\"Notification Hub Registration succesful!\");\n                updateLog(client.responseText);\n              } else {\n                updateLog(\"Notification Hub Registration did not succeed!\");\n                updateLog(\"HTTP Status: \" + client.status + \" : \" + client.statusText);\n                updateLog(\"HTTP Response: \" + \"\\n\" + client.responseText);\n              }\n            }\n          };\n\n          client.onerror = function () {\n                updateLog(\"ERROR - Notification Hub Registration did not succeed!\");\n          }\n\n          client.open(\"POST\", url, true);\n          client.setRequestHeader(\"Content-Type\", \"application/atom+xml;type=entry;charset=utf-8\");\n          client.setRequestHeader(\"Authorization\", sasToken);\n          client.setRequestHeader(\"x-ms-version\", \"2014-09\");\n\n          try {\n              client.send(registrationPayload);\n          }\n          catch(err) {\n              updateLog(err.message);\n          }\n        }\n\n    The above script has the following takeaways:\n    - *window.onload* defines the button-click events of the two buttons on the UI. One registers with GCM, and the other uses the registration ID that's returned after registration with GCM to register with Azure Notification Hubs.\n    - *updateLog* is the function that defines a simple logging function.\n    - *registerWithGCM* is the first button-click handler, which makes the **chrome.gcm.register** call to GCM to register this Chrome App instance.\n    - *registerCallback* is the callback function that gets called when the above GCM registration call returns.\n    - *registerWithNH* is the second button-click handler, which registers with Notification Hubs. It gets **hubName** and **connectionString** (which the user has specified) and crafts the Notification Hubs Registration REST API call.\n    - *splitConnectionString* and *generateSaSToken* are a JavaScript implementation of creating a SaS token that must be sent in all REST API calls. For more information, see [Common Concepts](http://msdn.microsoft.com/library/dn495627.aspx).\n    - *sendNHRegistrationRequest* is the function that makes an HTTP REST call.\n    - *registrationPayload* defines the registration XML payload. For more information, see [Create Registration NH REST API]. We update the registration ID in it with what we received from GCM.\n    - *client* is an instance of **XMLHttpRequest** that we use to make the HTTP POST request. Note that we update the **Authorization** header with **sasToken**. Successful completion of this call will register this Chrome App instance with Azure Notification Hubs.\n\n\nYou should see the following view for your folder at the end of this:\n    ![][21]\n\n###Set up and test your Chrome App\n\n1. Open your Chrome browser. Open **Chrome extensions** and enable **Developer mode**.\n\n    ![][16]\n\n2. Click **Load unpacked extension** and navigate to the folder where you created the files. You can also optionally use the **Chrome Apps & Extensions Developer Tool**. This tool is a Chrome App in itself (installed from the Chrome Web Store) and provides advanced debugging capabilities for your Chrome App development.\n\n    ![][17]\n\n3. If the Chrome App is created without any errors, then you will see your Chrome App show up.\n\n    ![][18]\n\n4. Enter the **Project Number** that you got earlier from the **Google Cloud Console** as the sender ID, and click **Register with GCM**. You must see the message **Registration with GCM succeeded.**\n\n    ![][19]\n\n5. Enter your **Notification Hub Name** and the **DefaultListenSharedAccessSignature** that you obtained from the Azure portal earlier, and click **Register with Azure Notification Hub**. You must see the message **Notification Hub Registration successful!** and the details of the registration response, which contains the Azure Notification Hubs registration ID.\n\n    ![][20]  \n\n##<a name=\"send\"></a>Send a notification to your Chrome App\n\nIn this tutorial, you send notifications by using a .NET console application. However, you can send notifications by using Notification Hubs from any backend via the <a href=\"http://msdn.microsoft.com/library/windowsazure/dn223264.aspx\">REST interface</a>.\n\nFor an example of how to send notifications from an Azure Mobile Services backend that's integrated with Notification Hubs, see \"Get started with push notifications in Mobile Services\" ([.NET backend](../mobile-services-javascript-backend-android-get-started-push.md) | [JavaScript backend](../mobile-services-javascript-backend-android-get-started-push.md)).  \nFor an example of how to send notifications by using the REST APIs, see \"How to use Notification Hubs from Java/PHP/Python\" ([Java](notification-hubs-java-backend-how-to.md) | [PHP](notification-hubs-php-backend-how-to.md) | [Python](notification-hubs-python-backend-how-to.md)).\n\n1. In Visual Studio, from the **File** menu, select **New** and then **Project**. Under **Visual C#**, click **Windows** and **Console Application**, and then click **OK**.  This creates a new console application project.\n\n2. From the **Tools** menu, click **Library Package Manager** and then **Package Manager Console**. This displays the Package Manager Console.\n\n3. In the console window, execute the following command:\n\n        Install-Package WindowsAzure.ServiceBus\n\n    This adds a reference to the Azure Service Bus SDK with the <a href=\"http://nuget.org/packages/  WindowsAzure.ServiceBus/\">WindowsAzure.ServiceBus NuGet package</a>.\n\n4. Open the file **Program.cs** and add the following `using` statement:\n\n        using Microsoft.ServiceBus.Notifications;\n\n5. In the **Program** class, add the following method:\n\n        private static async void SendNotificationAsync()\n        {\n            NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"<connection string with full access>\", \"<hub name>\");\n            String message = \"{\\\"data\\\":{\\\"message\\\":\\\"Hello Chrome from Azure Notification Hubs\\\"}}\";\n            await hub.SendGcmNativeNotificationAsync(message);\n        }\n\n    Make sure to replace the *hub name* placeholder with the name of the notification hub that appears in the portal on the **Notification Hubs** tab. Also, replace the connection string placeholder with the connection string called **DefaultFullSharedAccessSignature** that you obtained in the section \"Configure your notification hub.\"\n\n    >[AZURE.NOTE] Make sure that you use the connection string with **Full** access, not **Listen** access. The **Listen** access string does not have permissions to send notifications.\n\n5. Add the following lines in the **Main** method:\n\n         SendNotificationAsync();\n         Console.ReadLine();\n\n6. Make sure that your Chrome browser is open. Your Chrome App doesn't need to be opened for this. You should see the following notification pop up on your desktop.\n\n    ![][13]\n\n7. You can also see all your notifications by using the Chrome Notifications window on the taskbar (in Windows) when Chrome is running.\n\n    ![][14]\n\n## <a name=\"next-steps\"> </a>Next steps\n\nIn this simple example, you broadcasted notifications to your Chrome App.\nLearn more about Notification Hubs in [Notification Hubs Overview].\nTo target specific users, refer to the tutorial [Azure Notification Hubs Notify Users]. If you want to segment your users by interest groups, you can read [Azure Notification Hubs breaking news].\n\n<!-- Images. -->\n[1]: ./media/notification-hubs-chrome-get-started/GoogleConsoleCreateProject.PNG\n[2]: ./media/notification-hubs-chrome-get-started/GoogleProjectNumber.png\n[3]: ./media/notification-hubs-chrome-get-started/EnableGCM.png\n[4]: ./media/notification-hubs-chrome-get-started/CreateServerKey.png\n[5]: ./media/notification-hubs-chrome-get-started/ServerKey.png\n[6]: ./media/notification-hubs-chrome-get-started/CreateNH.png\n[7]: ./media/notification-hubs-chrome-get-started/NHNamespace.png\n[8]: ./media/notification-hubs-chrome-get-started/NamespaceConfigure.png\n[9]: ./media/notification-hubs-chrome-get-started/NHConfigure.png\n[10]: ./media/notification-hubs-chrome-get-started/NHConfigureGCM.png\n[11]: ./media/notification-hubs-chrome-get-started/NHDashboard.png\n[12]: ./media/notification-hubs-chrome-get-started/NHConnString.png\n[13]: ./media/notification-hubs-chrome-get-started/ChromeNotification.png\n[14]: ./media/notification-hubs-chrome-get-started/ChromeNotificationWindow.png\n[15]: ./media/notification-hubs-chrome-get-started/ChromeApp.png\n[16]: ./media/notification-hubs-chrome-get-started/ChromeExtensions.png\n[17]: ./media/notification-hubs-chrome-get-started/ChromeLoadExtension.png\n[18]: ./media/notification-hubs-chrome-get-started/ChromeAppLoaded.png\n[19]: ./media/notification-hubs-chrome-get-started/ChromeAppGCM.png\n[20]: ./media/notification-hubs-chrome-get-started/ChromeAppNH.png\n[21]: ./media/notification-hubs-chrome-get-started/FinalFolderView.png\n\n<!-- URLs. -->\n[Chrome App Notification Hub Sample]: http://google.com\n[Google Cloud Console]: http://cloud.google.com/console\n[Azure portal]: https://manage.windowsazure.com/\n[Notification Hubs Overview]: http://msdn.microsoft.com/library/jj927170.aspx\n[Chrome Apps Overview]: https://developer.chrome.com/apps/about_apps\n[Chrome App GCM Sample]: https://github.com/GoogleChrome/chrome-app-samples/tree/master/samples/gcm-notifications\n[Installable Web Apps]: https://developers.google.com/chrome/apps/docs/\n[Chrome Apps on Mobile]: https://developer.chrome.com/apps/chrome_apps_on_mobile\n[Create Registration NH REST API]: http://msdn.microsoft.com/library/azure/dn223265.aspx\n[crypto-js library]: http://code.google.com/p/crypto-js/\n[GCM with Chrome Apps]: https://developer.chrome.com/apps/cloudMessaging\n[Google Cloud Messaging for Chrome]: https://developer.chrome.com/apps/cloudMessagingV1\n[Azure Notification Hubs Notify Users]: notification-hubs-aspnet-backend-windows-dotnet-notify-users.md\n[Azure Notification Hubs breaking news]: notification-hubs-windows-store-dotnet-send-breaking-news.md\n"
}