{
  "nodes": [
    {
      "content": "How to use Blob storage from .NET | Microsoft Azure",
      "pos": [
        27,
        78
      ]
    },
    {
      "content": "Learn about Azure Blob storage, and how to create a container and to upload, download, list, and delete blob content.",
      "pos": [
        97,
        214
      ]
    },
    {
      "content": "How to use Blob storage from .NET",
      "pos": [
        516,
        549
      ]
    },
    {
      "content": "Overview",
      "pos": [
        652,
        660
      ]
    },
    {
      "content": "This guide will demonstrate how to perform common scenarios using the",
      "pos": [
        662,
        731
      ]
    },
    {
      "content": "Azure Blob storage service.",
      "pos": [
        732,
        759
      ]
    },
    {
      "content": "The samples are written in C\\# and",
      "pos": [
        760,
        794
      ]
    },
    {
      "content": "use the Azure Storage Client Library for .NET.",
      "pos": [
        795,
        841
      ]
    },
    {
      "content": "The scenarios covered include",
      "pos": [
        842,
        871
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>uploading<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>listing<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>downloading<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>deleting<ept id=\"p4\">**</ept> blobs.",
      "pos": [
        872,
        940
      ]
    },
    {
      "content": "Programmatically access Blob storage",
      "pos": [
        1399,
        1435
      ]
    },
    {
      "content": "Namespace declarations",
      "pos": [
        1541,
        1563
      ]
    },
    {
      "content": "Add the following namespace declarations to the top of any C\\# file",
      "pos": [
        1564,
        1631
      ]
    },
    {
      "content": "in which you wish to programmatically access Azure Storage:",
      "pos": [
        1632,
        1691
      ]
    },
    {
      "pos": [
        1864,
        1938
      ],
      "content": "Make sure you reference the <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly."
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> type allows you to retrieve objects that represent",
      "pos": [
        2050,
        2122
      ]
    },
    {
      "content": "containers and blobs stored within the Blob Storage Service.",
      "pos": [
        2123,
        2183
      ]
    },
    {
      "content": "The",
      "pos": [
        2184,
        2187
      ]
    },
    {
      "content": "following code creates a <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> object using the storage",
      "pos": [
        2188,
        2257
      ]
    },
    {
      "content": "account object we retrieved above:",
      "pos": [
        2258,
        2292
      ]
    },
    {
      "content": "Create a container",
      "pos": [
        2371,
        2389
      ]
    },
    {
      "content": "This example shows how to create a container if it does not already exist:",
      "pos": [
        2507,
        2581
      ]
    },
    {
      "content": "By default, the new container is private and you must specify your",
      "pos": [
        3109,
        3175
      ]
    },
    {
      "content": "storage access key to download blobs from this",
      "pos": [
        3176,
        3222
      ]
    },
    {
      "content": "container.",
      "pos": [
        3223,
        3233
      ]
    },
    {
      "content": "If you want to make the files within the container available",
      "pos": [
        3234,
        3294
      ]
    },
    {
      "content": "to everyone, you can set the container to be public using the following",
      "pos": [
        3295,
        3366
      ]
    },
    {
      "content": "code:",
      "pos": [
        3367,
        3372
      ]
    },
    {
      "content": "Anyone on the Internet can see blobs in a public container, but you can",
      "pos": [
        3506,
        3577
      ]
    },
    {
      "content": "modify or delete them only if you have the appropriate access key.",
      "pos": [
        3578,
        3644
      ]
    },
    {
      "content": "Upload a blob into a container",
      "pos": [
        3649,
        3679
      ]
    },
    {
      "content": "Azure Blob Storage supports block blobs and page blobs.",
      "pos": [
        3681,
        3736
      ]
    },
    {
      "content": "In the majority of cases, block blob is the recommended type to use.",
      "pos": [
        3738,
        3806
      ]
    },
    {
      "content": "To upload a file to a block blob, get a container reference and use it to get",
      "pos": [
        3808,
        3885
      ]
    },
    {
      "content": "a block blob reference.",
      "pos": [
        3886,
        3909
      ]
    },
    {
      "content": "Once you have a blob reference, you can upload any",
      "pos": [
        3910,
        3960
      ]
    },
    {
      "content": "stream of data to it by calling the <bpt id=\"p1\">**</bpt>UploadFromStream<ept id=\"p1\">**</ept> method.",
      "pos": [
        3961,
        4025
      ]
    },
    {
      "content": "This operation will create the blob if it didn't previously exist,",
      "pos": [
        4026,
        4092
      ]
    },
    {
      "content": "or overwrite it if it does exist.",
      "pos": [
        4093,
        4126
      ]
    },
    {
      "content": "The following example shows how to upload a blob into a container and assumes that the container was already created.",
      "pos": [
        4129,
        4246
      ]
    },
    {
      "content": "List the blobs in a container",
      "pos": [
        5036,
        5065
      ]
    },
    {
      "content": "To list the blobs in a container, first get a container reference.",
      "pos": [
        5067,
        5133
      ]
    },
    {
      "content": "You",
      "pos": [
        5134,
        5137
      ]
    },
    {
      "content": "can then use the container's <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> method to retrieve the blobs and/or directories",
      "pos": [
        5138,
        5228
      ]
    },
    {
      "content": "within it.",
      "pos": [
        5229,
        5239
      ]
    },
    {
      "content": "To access the rich set of properties and methods for a",
      "pos": [
        5240,
        5294
      ]
    },
    {
      "content": "returned <bpt id=\"p1\">**</bpt>IListBlobItem<ept id=\"p1\">**</ept>, you must cast it to a <bpt id=\"p2\">**</bpt>CloudBlockBlob<ept id=\"p2\">**</ept>,",
      "pos": [
        5295,
        5364
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>CloudPageBlob<ept id=\"p1\">**</ept>, or <bpt id=\"p2\">**</bpt>CloudBlobDirectory<ept id=\"p2\">**</ept> object.",
      "pos": [
        5365,
        5417
      ]
    },
    {
      "content": "If the type is unknown, you can use a",
      "pos": [
        5419,
        5456
      ]
    },
    {
      "content": "type check to determine which to cast it to.",
      "pos": [
        5457,
        5501
      ]
    },
    {
      "content": "The following code",
      "pos": [
        5503,
        5521
      ]
    },
    {
      "content": "demonstrates how to retrieve and output the URI of each item in",
      "pos": [
        5522,
        5585
      ]
    },
    {
      "content": "the <ph id=\"ph1\">`photos`</ph> container:",
      "pos": [
        5586,
        5609
      ]
    },
    {
      "content": "As shown above, you can name blobs with path information in their names.",
      "pos": [
        6903,
        6975
      ]
    },
    {
      "content": "This creates a virtual directory structure that you can organize and traverse as you would a traditional file system.",
      "pos": [
        6976,
        7093
      ]
    },
    {
      "content": "Note that the directory structure is virtual only - the only resources available in Blob storage are containers and blobs.",
      "pos": [
        7094,
        7216
      ]
    },
    {
      "content": "However, the storage client library offers a <bpt id=\"p1\">**</bpt>CloudBlobDirectory<ept id=\"p1\">**</ept> object to refer to a virtual directory and simplify the process of working with blobs that are organized in this way.",
      "pos": [
        7217,
        7402
      ]
    },
    {
      "pos": [
        7404,
        7489
      ],
      "content": "For example, consider the following set of block blobs in a container named <ph id=\"ph1\">`photos`</ph>:"
    },
    {
      "content": "When you call <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> on the 'photos' container (as in the above sample), a hierarchical listing is returned.",
      "pos": [
        7735,
        7850
      ]
    },
    {
      "content": "It contains both <bpt id=\"p1\">**</bpt>CloudBlobDirectory<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>CloudBlockBlob<ept id=\"p2\">**</ept> objects, representing the directories and blobs in the container, respectively.",
      "pos": [
        7851,
        7993
      ]
    },
    {
      "content": "The resulting output looks like:",
      "pos": [
        7994,
        8026
      ]
    },
    {
      "content": "Optionally, you can set the <bpt id=\"p1\">**</bpt>UseFlatBlobListing<ept id=\"p1\">**</ept> parameter of of the <bpt id=\"p2\">**</bpt>ListBlobs<ept id=\"p2\">**</ept> method to",
      "pos": [
        8269,
        8363
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.",
      "pos": [
        8364,
        8373
      ]
    },
    {
      "content": "In this case, every blob in the container is returned as a <bpt id=\"p1\">**</bpt>CloudBlockBlob<ept id=\"p1\">**</ept> object.",
      "pos": [
        8374,
        8459
      ]
    },
    {
      "content": "The call to <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> to return a flat listing looks like this:",
      "pos": [
        8460,
        8527
      ]
    },
    {
      "content": "and the results look like this:",
      "pos": [
        8696,
        8727
      ]
    },
    {
      "content": "Download blobs",
      "pos": [
        9607,
        9621
      ]
    },
    {
      "content": "To download blobs, first retrieve a blob reference and then call the <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> method.",
      "pos": [
        9623,
        9720
      ]
    },
    {
      "content": "The following",
      "pos": [
        9721,
        9734
      ]
    },
    {
      "content": "example uses the <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> method to transfer the blob",
      "pos": [
        9735,
        9800
      ]
    },
    {
      "content": "contents to a stream object that you can then persist to a local file.",
      "pos": [
        9801,
        9871
      ]
    },
    {
      "pos": [
        10626,
        10727
      ],
      "content": "You can also use the <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> method to download the contents of a blob as a text string."
    },
    {
      "content": "Delete blobs",
      "pos": [
        11524,
        11536
      ]
    },
    {
      "content": "To delete a blob, first get a blob reference and then call the",
      "pos": [
        11538,
        11600
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> method on it.",
      "pos": [
        11601,
        11625
      ]
    },
    {
      "content": "List blobs in pages asynchronously",
      "pos": [
        12265,
        12299
      ]
    },
    {
      "content": "If you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results.",
      "pos": [
        12301,
        12466
      ]
    },
    {
      "content": "This example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.",
      "pos": [
        12467,
        12613
      ]
    },
    {
      "pos": [
        12615,
        12803
      ],
      "content": "This example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the <ph id=\"ph1\">`useFlatBlobListing`</ph> parameter of the <bpt id=\"p1\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p1\">**</ept> method to <ph id=\"ph2\">`false`</ph>."
    },
    {
      "content": "Because the sample method calls an asynchronous method, it must be prefaced with the <ph id=\"ph1\">`async`</ph> keyword, and it must return a <bpt id=\"p1\">**</bpt>Task<ept id=\"p1\">**</ept> object.",
      "pos": [
        12805,
        12944
      ]
    },
    {
      "content": "The await keyword specified for the <bpt id=\"p1\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p1\">**</ept> method suspends execution of the sample method until the listing task completes.",
      "pos": [
        12945,
        13089
      ]
    },
    {
      "content": "Writing to an append blob",
      "pos": [
        14485,
        14510
      ]
    },
    {
      "content": "An append blob is a new type of blob, introduced with version 5.x of the Azure storage client library for .NET.",
      "pos": [
        14512,
        14623
      ]
    },
    {
      "content": "An append blob is optimized for append operations, such as logging.",
      "pos": [
        14624,
        14691
      ]
    },
    {
      "content": "Like a block blob, an append blob is comprised of blocks, but when you add a new block to an append blob, it is always appended to the end of the blob.",
      "pos": [
        14692,
        14843
      ]
    },
    {
      "content": "You cannot update or delete an existing block in an append blob.",
      "pos": [
        14844,
        14908
      ]
    },
    {
      "content": "The block IDs for an append blob are not exposed as they are for a block blob.",
      "pos": [
        14909,
        14987
      ]
    },
    {
      "content": "Each block in an append blob can be a different size, up to a maximum of 4 MB, and an append blob can include a maximum of 50,000 blocks.",
      "pos": [
        14991,
        15128
      ]
    },
    {
      "content": "The maximum size of an append blob is therefore slightly more than 195 GB (4 MB X 50,000 blocks).",
      "pos": [
        15129,
        15226
      ]
    },
    {
      "content": "The example below creates a new append blob and appends some data to it, simulating a simple logging operation.",
      "pos": [
        15228,
        15339
      ]
    },
    {
      "pos": [
        16906,
        17100
      ],
      "content": "See <bpt id=\"p1\">[</bpt>Understanding Block Blobs, Page Blobs, and Append Blobs<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ee691964.aspx)</ept> for more information about the differences between the three types of blobs."
    },
    {
      "content": "Next steps",
      "pos": [
        17105,
        17115
      ]
    },
    {
      "content": "Now that you've learned the basics of blob storage, follow these links",
      "pos": [
        17117,
        17187
      ]
    },
    {
      "content": "to learn about more complex storage tasks.",
      "pos": [
        17188,
        17230
      ]
    },
    {
      "content": "View the Blob service reference documentation for complete details about available APIs:",
      "pos": [
        17240,
        17328
      ]
    },
    {
      "content": "Storage Client Library for .NET reference<ph id=\"ph1\">&lt;/a&gt;</ph><ph id=\"ph2\">\n    </ph>",
      "pos": [
        17412,
        17462
      ]
    },
    {
      "content": "REST API reference",
      "pos": [
        17535,
        17553
      ]
    },
    {
      "content": "Learn about more advanced tasks you can perform with Azure Storage at <ph id=\"ph1\">&lt;a href=\"http://msdn.microsoft.com/library/azure/gg433040.aspx\"&gt;</ph>Storing and Accessing Data in Azure<ph id=\"ph2\">&lt;/a&gt;</ph>.",
      "pos": [
        17581,
        17755
      ]
    },
    {
      "content": "Learn how to simplify the code you write to work with Azure Storage by using the <ph id=\"ph1\">&lt;a href=\"../websites-dotnet-webjobs-sdk/\"&gt;</ph>Azure WebJobs SDK.",
      "pos": [
        17765,
        17906
      ]
    },
    {
      "content": "View more feature guides to learn about additional options for storing data in Azure.",
      "pos": [
        17916,
        18001
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/storage-dotnet-how-to-use-tables/\"&gt;</ph>Table Storage<ph id=\"ph2\">&lt;/a&gt;</ph> to store structured data.",
      "pos": [
        18017,
        18132
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/storage-dotnet-how-to-use-queues/\"&gt;</ph>Queue Storage<ph id=\"ph2\">&lt;/a&gt;</ph> to store unstructured data.",
      "pos": [
        18146,
        18263
      ]
    },
    {
      "content": "Use <ph id=\"ph1\">&lt;a href=\"/documentation/articles/sql-database-dotnet-how-to-use/\"&gt;</ph>SQL Database<ph id=\"ph2\">&lt;/a&gt;</ph> to store relational data.",
      "pos": [
        18277,
        18389
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Blob storage from .NET | Microsoft Azure\"\n    description=\"Learn about Azure Blob storage, and how to create a container and to upload, download, list, and delete blob content.\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\" \n    ms.date=\"08/04/2015\"\n    ms.author=\"tamram\"/>\n\n\n# How to use Blob storage from .NET\n\n[AZURE.INCLUDE [storage-selector-blob-include](../../includes/storage-selector-blob-include.md)]\n\n## Overview\n\nThis guide will demonstrate how to perform common scenarios using the\nAzure Blob storage service. The samples are written in C\\# and\nuse the Azure Storage Client Library for .NET. The scenarios covered include\n**uploading**, **listing**, **downloading**, and **deleting** blobs.\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../../includes/storage-configure-connection-string-include.md)]\n\n## Programmatically access Blob storage\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../../includes/storage-dotnet-obtain-assembly.md)]\n\n### Namespace declarations\nAdd the following namespace declarations to the top of any C\\# file\nin which you wish to programmatically access Azure Storage:\n\n    using Microsoft.WindowsAzure;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Blob;\n\nMake sure you reference the `Microsoft.WindowsAzure.Storage.dll` assembly.\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../../includes/storage-dotnet-retrieve-conn-string.md)]\n\nA **CloudBlobClient** type allows you to retrieve objects that represent\ncontainers and blobs stored within the Blob Storage Service. The\nfollowing code creates a **CloudBlobClient** object using the storage\naccount object we retrieved above:\n\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n## Create a container\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../../includes/storage-container-naming-rules-include.md)]\n\nThis example shows how to create a container if it does not already exist:\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve a reference to a container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Create the container if it doesn't already exist.\n    container.CreateIfNotExists();\n\nBy default, the new container is private and you must specify your\nstorage access key to download blobs from this\ncontainer. If you want to make the files within the container available\nto everyone, you can set the container to be public using the following\ncode:\n\n    container.SetPermissions(\n        new BlobContainerPermissions { PublicAccess =\n        BlobContainerPublicAccessType.Blob });\n\nAnyone on the Internet can see blobs in a public container, but you can\nmodify or delete them only if you have the appropriate access key.\n\n## Upload a blob into a container\n\nAzure Blob Storage supports block blobs and page blobs.  In the majority of cases, block blob is the recommended type to use.\n\nTo upload a file to a block blob, get a container reference and use it to get\na block blob reference. Once you have a blob reference, you can upload any\nstream of data to it by calling the **UploadFromStream** method. This operation will create the blob if it didn't previously exist,\nor overwrite it if it does exist. \n\nThe following example shows how to upload a blob into a container and assumes that the container was already created.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob\");\n\n    // Create or overwrite the \"myblob\" blob with contents from a local file.\n    using (var fileStream = System.IO.File.OpenRead(@\"path\\myfile\"))\n    {\n        blockBlob.UploadFromStream(fileStream);\n    }\n\n## List the blobs in a container\n\nTo list the blobs in a container, first get a container reference. You\ncan then use the container's **ListBlobs** method to retrieve the blobs and/or directories\nwithin it. To access the rich set of properties and methods for a\nreturned **IListBlobItem**, you must cast it to a **CloudBlockBlob**,\n**CloudPageBlob**, or **CloudBlobDirectory** object.  If the type is unknown, you can use a\ntype check to determine which to cast it to.  The following code\ndemonstrates how to retrieve and output the URI of each item in\nthe `photos` container:\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"photos\");\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, false))\n    {\n        if (item.GetType() == typeof(CloudBlockBlob))\n        {\n            CloudBlockBlob blob = (CloudBlockBlob)item;\n\n            Console.WriteLine(\"Block blob of length {0}: {1}\", blob.Properties.Length, blob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudPageBlob))\n        {\n            CloudPageBlob pageBlob = (CloudPageBlob)item;\n\n            Console.WriteLine(\"Page blob of length {0}: {1}\", pageBlob.Properties.Length, pageBlob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudBlobDirectory))\n        {\n            CloudBlobDirectory directory = (CloudBlobDirectory)item;\n\n            Console.WriteLine(\"Directory: {0}\", directory.Uri);\n        }\n    }\n\nAs shown above, you can name blobs with path information in their names. This creates a virtual directory structure that you can organize and traverse as you would a traditional file system. Note that the directory structure is virtual only - the only resources available in Blob storage are containers and blobs. However, the storage client library offers a **CloudBlobDirectory** object to refer to a virtual directory and simplify the process of working with blobs that are organized in this way.\n\nFor example, consider the following set of block blobs in a container named `photos`:\n\n    photo1.jpg\n    2010/architecture/description.txt\n    2010/architecture/photo3.jpg\n    2010/architecture/photo4.jpg\n    2011/architecture/photo5.jpg\n    2011/architecture/photo6.jpg\n    2011/architecture/description.txt\n    2011/photo7.jpg\n\nWhen you call **ListBlobs** on the 'photos' container (as in the above sample), a hierarchical listing is returned. It contains both **CloudBlobDirectory** and **CloudBlockBlob** objects, representing the directories and blobs in the container, respectively. The resulting output looks like:\n\n    Directory: https://<accountname>.blob.core.windows.net/photos/2010/\n    Directory: https://<accountname>.blob.core.windows.net/photos/2011/\n    Block blob of length 505623: https://<accountname>.blob.core.windows.net/photos/photo1.jpg\n\n\nOptionally, you can set the **UseFlatBlobListing** parameter of of the **ListBlobs** method to\n**true**. In this case, every blob in the container is returned as a **CloudBlockBlob** object. The call to **ListBlobs** to return a flat listing looks like this:\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, true))\n    {\n       ...\n    }\n\nand the results look like this:\n\n    Block blob of length 4: https://<accountname>.blob.core.windows.net/photos/2010/architecture/description.txt\n    Block blob of length 314618: https://<accountname>.blob.core.windows.net/photos/2010/architecture/photo3.jpg\n    Block blob of length 522713: https://<accountname>.blob.core.windows.net/photos/2010/architecture/photo4.jpg\n    Block blob of length 4: https://<accountname>.blob.core.windows.net/photos/2011/architecture/description.txt\n    Block blob of length 419048: https://<accountname>.blob.core.windows.net/photos/2011/architecture/photo5.jpg\n    Block blob of length 506388: https://<accountname>.blob.core.windows.net/photos/2011/architecture/photo6.jpg\n    Block blob of length 399751: https://<accountname>.blob.core.windows.net/photos/2011/photo7.jpg\n    Block blob of length 505623: https://<accountname>.blob.core.windows.net/photos/photo1.jpg\n\n\n## Download blobs\n\nTo download blobs, first retrieve a blob reference and then call the **DownloadToStream** method. The following\nexample uses the **DownloadToStream** method to transfer the blob\ncontents to a stream object that you can then persist to a local file.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"photo1.jpg\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"photo1.jpg\");\n\n    // Save blob contents to a file.\n    using (var fileStream = System.IO.File.OpenWrite(@\"path\\myfile\"))\n    {\n        blockBlob.DownloadToStream(fileStream);\n    }\n\nYou can also use the **DownloadToStream** method to download the contents of a blob as a text string.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob.txt\"\n    CloudBlockBlob blockBlob2 = container.GetBlockBlobReference(\"myblob.txt\");\n\n    string text;\n    using (var memoryStream = new MemoryStream())\n    {\n        blockBlob2.DownloadToStream(memoryStream);\n        text = System.Text.Encoding.UTF8.GetString(memoryStream.ToArray());\n    }\n\n## Delete blobs\n\nTo delete a blob, first get a blob reference and then call the\n**Delete** method on it.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob.txt\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob.txt\");\n\n    // Delete the blob.\n    blockBlob.Delete();\n\n\n## List blobs in pages asynchronously\n\nIf you are listing a large number of blobs, or you want to control the number of results you return in one listing operation, you can list blobs in pages of results. This example shows how to return results in pages asynchronously, so that execution is not blocked while waiting to return a large set of results.\n\nThis example shows a flat blob listing, but you can also perform a hierarchical listing, by setting the `useFlatBlobListing` parameter of the **ListBlobsSegmentedAsync** method to `false`.\n\nBecause the sample method calls an asynchronous method, it must be prefaced with the `async` keyword, and it must return a **Task** object. The await keyword specified for the **ListBlobsSegmentedAsync** method suspends execution of the sample method until the listing task completes.\n\n    async public static Task ListBlobsSegmentedInFlatListing(CloudBlobContainer container)\n    {\n        //List blobs to the console window, with paging.\n        Console.WriteLine(\"List blobs in pages:\");\n\n        int i = 0;\n        BlobContinuationToken continuationToken = null;\n        BlobResultSegment resultSegment = null;\n\n        //Call ListBlobsSegmentedAsync and enumerate the result segment returned, while the continuation token is non-null.\n        //When the continuation token is null, the last page has been returned and execution can exit the loop.\n        do\n        {\n            //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter,\n            //or by calling a different overload.\n            resultSegment = await container.ListBlobsSegmentedAsync(\"\", true, BlobListingDetails.All, 10, continuationToken, null, null);\n            if (resultSegment.Results.Count<IListBlobItem>() > 0) { Console.WriteLine(\"Page {0}:\", ++i); }\n            foreach (var blobItem in resultSegment.Results)\n            {\n                Console.WriteLine(\"\\t{0}\", blobItem.StorageUri.PrimaryUri);\n            }\n            Console.WriteLine();\n\n            //Get the continuation token.\n            continuationToken = resultSegment.ContinuationToken;\n        }\n        while (continuationToken != null);\n    }\n\n## Writing to an append blob\n\nAn append blob is a new type of blob, introduced with version 5.x of the Azure storage client library for .NET. An append blob is optimized for append operations, such as logging. Like a block blob, an append blob is comprised of blocks, but when you add a new block to an append blob, it is always appended to the end of the blob. You cannot update or delete an existing block in an append blob. The block IDs for an append blob are not exposed as they are for a block blob. \n \nEach block in an append blob can be a different size, up to a maximum of 4 MB, and an append blob can include a maximum of 50,000 blocks. The maximum size of an append blob is therefore slightly more than 195 GB (4 MB X 50,000 blocks).\n\nThe example below creates a new append blob and appends some data to it, simulating a simple logging operation.\n\n    //Parse the connection string for the storage account.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    //Create service client for credentialed access to the Blob service.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    //Get a reference to a container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"my-append-blobs\");\n\n    //Create the container if it does not already exist. \n    container.CreateIfNotExists();\n\n    //Get a reference to an append blob.\n    CloudAppendBlob appendBlob = container.GetAppendBlobReference(\"append-blob.log\");\n\n    //Create the append blob. Note that if the blob already exists, the CreateOrReplace() method will overwrite it.\n    //You can check whether the blob exists to avoid overwriting it by using CloudAppendBlob.Exists().\n    appendBlob.CreateOrReplace();\n\n    int numBlocks = 10;\n\n    //Generate an array of random bytes.\n    Random rnd = new Random();\n    byte[] bytes = new byte[numBlocks];\n    rnd.NextBytes(bytes);\n        \n    //Simulate a logging operation by writing text data and byte data to the end of the append blob.\n    for (int i = 0; i < numBlocks; i++)\n    {\n        appendBlob.AppendText(String.Format(\"Timestamp: {0} \\tLog Entry: {1}{2}\",\n            DateTime.Now.ToUniversalTime().ToString(), bytes[i], Environment.NewLine));\n    }\n\n    //Read the append blob to the console window.\n    Console.WriteLine(appendBlob.DownloadText());\n\nSee [Understanding Block Blobs, Page Blobs, and Append Blobs](https://msdn.microsoft.com/library/azure/ee691964.aspx) for more information about the differences between the three types of blobs.\n\n## Next steps\n\nNow that you've learned the basics of blob storage, follow these links\nto learn about more complex storage tasks.\n<ul>\n<li>View the Blob service reference documentation for complete details about available APIs:\n  <ul>\n    <li><a href=\"http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409\">Storage Client Library for .NET reference</a>\n    </li>\n    <li><a href=\"http://msdn.microsoft.com/library/azure/dd179355\">REST API reference</a></li>\n  </ul>\n</li>\n<li>Learn about more advanced tasks you can perform with Azure Storage at <a href=\"http://msdn.microsoft.com/library/azure/gg433040.aspx\">Storing and Accessing Data in Azure</a>.</li>\n<li>Learn how to simplify the code you write to work with Azure Storage by using the <a href=\"../websites-dotnet-webjobs-sdk/\">Azure WebJobs SDK.</li>\n<li>View more feature guides to learn about additional options for storing data in Azure.\n  <ul>\n    <li>Use <a href=\"/documentation/articles/storage-dotnet-how-to-use-tables/\">Table Storage</a> to store structured data.</li>\n    <li>Use <a href=\"/documentation/articles/storage-dotnet-how-to-use-queues/\">Queue Storage</a> to store unstructured data.</li>\n    <li>Use <a href=\"/documentation/articles/sql-database-dotnet-how-to-use/\">SQL Database</a> to store relational data.</li>\n  </ul>\n</li>\n</ul>\n\n  [Blob5]: ./media/storage-dotnet-how-to-use-blobs/blob5.png\n  [Blob6]: ./media/storage-dotnet-how-to-use-blobs/blob6.png\n  [Blob7]: ./media/storage-dotnet-how-to-use-blobs/blob7.png\n  [Blob8]: ./media/storage-dotnet-how-to-use-blobs/blob8.png\n  [Blob9]: ./media/storage-dotnet-how-to-use-blobs/blob9.png\n\n  [Azure Storage]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n  [Configuring Connection Strings]: http://msdn.microsoft.com/library/azure/ee758697.aspx\n  [.NET client library reference]: http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409\n  [REST API reference]: http://msdn.microsoft.com/library/azure/dd179355\n "
}