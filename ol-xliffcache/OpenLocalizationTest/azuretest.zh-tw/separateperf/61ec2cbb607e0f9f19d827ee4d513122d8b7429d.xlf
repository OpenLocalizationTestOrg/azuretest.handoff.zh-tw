<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defining and Managing State</source>
          <target state="new">Defining and Managing State</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to define and manage service state in Service Fabric</source>
          <target state="new">How to define and manage service state in Service Fabric</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service State</source>
          <target state="new">Service State</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service State<ept id="p1">**</ept> is the data the service requires in order to function.</source>
          <target state="new"><bpt id="p1">**</bpt>Service State<ept id="p1">**</ept> is the data the service requires in order to function.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is the data structures and variables that the service reads and writes in order to do work.</source>
          <target state="new">It is the data structures and variables that the service reads and writes in order to do work.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example: Consider a simple calculator service.</source>
          <target state="new">For example: Consider a simple calculator service.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This service takes two numbers and returns their sum.</source>
          <target state="new">This service takes two numbers and returns their sum.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is a purely stateless service that has no data associated with it.</source>
          <target state="new">This is a purely stateless service that has no data associated with it.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Now, consider the same calculator but in addition to computing sum it also has a method to return the last sum it had computed.</source>
          <target state="new">Now, consider the same calculator but in addition to computing sum it also has a method to return the last sum it had computed.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This service is now stateful - it contains some state that it writes to (when it computes a new sum) and reads from (when it returns the last computed sum).</source>
          <target state="new">This service is now stateful - it contains some state that it writes to (when it computes a new sum) and reads from (when it returns the last computed sum).</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In Service Fabric, the first service is called a Stateless Service.</source>
          <target state="new">In Service Fabric, the first service is called a Stateless Service.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The second service is called a Stateful Service.</source>
          <target state="new">The second service is called a Stateful Service.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Storing Service State</source>
          <target state="new">Storing Service State</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>State can either be externalized or co-located with the code that is manipulating the state.</source>
          <target state="new">State can either be externalized or co-located with the code that is manipulating the state.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Externalization of state is typically done by using an external database or store.</source>
          <target state="new">Externalization of state is typically done by using an external database or store.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In our calculator example, this could be a SQL database where the current result is stored in a table.</source>
          <target state="new">In our calculator example, this could be a SQL database where the current result is stored in a table.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Every request to compute the sum performs an update on this row.</source>
          <target state="new">Every request to compute the sum performs an update on this row.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>State can also be co-located with the code that manipulates this code.</source>
          <target state="new">State can also be co-located with the code that manipulates this code.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Stateful services in Service Fabric are built using this model.</source>
          <target state="new">Stateful services in Service Fabric are built using this model.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Service Fabric provides the infrastructure to ensure this state is highly available and fault tolerant in the event of failures.</source>
          <target state="new">Service Fabric provides the infrastructure to ensure this state is highly available and fault tolerant in the event of failures.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For information on Service Fabric concepts, see the following:</source>
          <target state="new">For information on Service Fabric concepts, see the following:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric Services</source>
          <target state="new">Availability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Scalability of Service Fabric Services</source>
          <target state="new">Scalability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Partitioning Service Fabric Services</source>
          <target state="new">Partitioning Service Fabric Services</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61ec2cbb607e0f9f19d827ee4d513122d8b7429d</xliffext:olfilehash>
  </header>
</xliff>