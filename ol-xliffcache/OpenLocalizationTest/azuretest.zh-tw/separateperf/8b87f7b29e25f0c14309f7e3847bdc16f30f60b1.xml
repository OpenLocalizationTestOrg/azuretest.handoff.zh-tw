{
  "nodes": [
    {
      "content": "Managing Media Services Assets across Multiple Storage Accounts",
      "pos": [
        28,
        91
      ]
    },
    {
      "content": "This articles give you guidance on how to manage media services assets across multiple storage accounts.",
      "pos": [
        111,
        215
      ]
    },
    {
      "content": "Managing Media Services Assets across Multiple Storage Accounts",
      "pos": [
        528,
        591
      ]
    },
    {
      "content": "Starting with Microsoft Azure Media Services 2.2, you can attach multiple storage accounts to a single Media Services account.",
      "pos": [
        593,
        719
      ]
    },
    {
      "content": "Ability to attach multiple storage accounts to a Media Services account provides the following benefits:",
      "pos": [
        720,
        824
      ]
    },
    {
      "content": "Load balancing your assets across multiple storage accounts.",
      "pos": [
        825,
        885
      ]
    },
    {
      "content": "Scaling Media Services for large amounts of content processing (as currently a single storage account has a max limit of 500 TB).",
      "pos": [
        887,
        1016
      ]
    },
    {
      "content": "This topic demonstrates how to attach multiple storage accounts to a Media Services account using <bpt id=\"p1\">[</bpt>Azure Service Management REST API<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ee460799.aspx)</ept>.",
      "pos": [
        1019,
        1209
      ]
    },
    {
      "content": "It also shows how to specify different storage accounts when creating assets using the Media Services SDK.",
      "pos": [
        1210,
        1316
      ]
    },
    {
      "content": "Considerations",
      "pos": [
        1321,
        1335
      ]
    },
    {
      "content": "When attaching multiple storage accounts to your Media Services account, the following considerations apply:",
      "pos": [
        1337,
        1445
      ]
    },
    {
      "content": "All storage accounts attached to a Media Services account must be in the same data center as the Media Services account.",
      "pos": [
        1449,
        1569
      ]
    },
    {
      "content": "Currently, once a storage account is attached to the specified Media Services account, it cannot be detached.",
      "pos": [
        1572,
        1681
      ]
    },
    {
      "content": "Primary storage account is the one indicated during Media Services account creation time.",
      "pos": [
        1684,
        1773
      ]
    },
    {
      "content": "Currently, you cannot change the default storage account.",
      "pos": [
        1774,
        1831
      ]
    },
    {
      "content": "Other considerations:",
      "pos": [
        1834,
        1855
      ]
    },
    {
      "content": "Media Services uses the value of the <bpt id=\"p1\">**</bpt>IAssetFile.Name<ept id=\"p1\">**</ept> property when building URLs for the streaming content (for example, http://{WAMSAccount}.origin.mediaservices.windows.net/{GUID}/{IAssetFile.Name}/streamingParameters.) For this reason, percent-encoding is not allowed.",
      "pos": [
        1857,
        2132
      ]
    },
    {
      "content": "The value of the Name property cannot have any of the following <bpt id=\"p1\">[</bpt>percent-encoding-reserved characters<ept id=\"p1\">](http://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters)</ept>: !*'();:@&amp;=+$,/?%#[]\".",
      "pos": [
        2133,
        2342
      ]
    },
    {
      "content": "Also, there can only be one ‘.’",
      "pos": [
        2343,
        2374
      ]
    },
    {
      "content": "for the file name extension.",
      "pos": [
        2375,
        2403
      ]
    },
    {
      "content": "To attach a Storage Account with Azure Service Management REST API",
      "pos": [
        2407,
        2473
      ]
    },
    {
      "content": "Currently, the only way to attach multiple storage accounts is by using <bpt id=\"p1\">[</bpt>Azure Service Management REST API<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/ee460799.aspx)</ept>.",
      "pos": [
        2475,
        2639
      ]
    },
    {
      "content": "The code sample in the <bpt id=\"p1\">[</bpt>How to: Use Media Services Management REST API<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn167656.aspx)</ept> topic defines the <bpt id=\"p2\">**</bpt>AttachStorageAccountToMediaServiceAccount<ept id=\"p2\">**</ept> method that attaches a storage account to the specified Media Services account.",
      "pos": [
        2640,
        2911
      ]
    },
    {
      "content": "The code in the same topic defines the <bpt id=\"p1\">**</bpt>ListStorageAccountDetails<ept id=\"p1\">**</ept> method that lists all the storage accounts attached to the specified Media Services account.",
      "pos": [
        2912,
        3073
      ]
    },
    {
      "content": "To manage Media Services assets across multiple Storage Accounts",
      "pos": [
        3078,
        3142
      ]
    },
    {
      "content": "The following code uses the latest Media Services SDK to perform the following tasks:",
      "pos": [
        3144,
        3229
      ]
    },
    {
      "content": "Display all the storage accounts associated with the specified Media Services account.",
      "pos": [
        3234,
        3320
      ]
    },
    {
      "content": "Retrieve the name of the default storage account.",
      "pos": [
        3324,
        3373
      ]
    },
    {
      "content": "Create a new asset in the default storage account.",
      "pos": [
        3377,
        3427
      ]
    },
    {
      "content": "Create an output asset of the encoding job in the specified storage account.",
      "pos": [
        3431,
        3507
      ]
    },
    {
      "content": "test",
      "pos": [
        13433,
        13437
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Managing Media Services Assets across Multiple Storage Accounts\" \n    description=\"This articles give you guidance on how to manage media services assets across multiple storage accounts.\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"media-services\" \n    ms.workload=\"media\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"08/11/2015\" \n    ms.author=\"juliako\"/>\n\n\n#Managing Media Services Assets across Multiple Storage Accounts\n\nStarting with Microsoft Azure Media Services 2.2, you can attach multiple storage accounts to a single Media Services account. Ability to attach multiple storage accounts to a Media Services account provides the following benefits:\nLoad balancing your assets across multiple storage accounts.\n\nScaling Media Services for large amounts of content processing (as currently a single storage account has a max limit of 500 TB). \n\nThis topic demonstrates how to attach multiple storage accounts to a Media Services account using [Azure Service Management REST API](https://msdn.microsoft.com/library/azure/ee460799.aspx). It also shows how to specify different storage accounts when creating assets using the Media Services SDK. \n\n##Considerations\n\nWhen attaching multiple storage accounts to your Media Services account, the following considerations apply:\n\n- All storage accounts attached to a Media Services account must be in the same data center as the Media Services account.\n- Currently, once a storage account is attached to the specified Media Services account, it cannot be detached.\n- Primary storage account is the one indicated during Media Services account creation time. Currently, you cannot change the default storage account. \n\nOther considerations:\n\nMedia Services uses the value of the **IAssetFile.Name** property when building URLs for the streaming content (for example, http://{WAMSAccount}.origin.mediaservices.windows.net/{GUID}/{IAssetFile.Name}/streamingParameters.) For this reason, percent-encoding is not allowed. The value of the Name property cannot have any of the following [percent-encoding-reserved characters](http://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters): !*'();:@&=+$,/?%#[]\". Also, there can only be one ‘.’ for the file name extension.\n\n##To attach a Storage Account with Azure Service Management REST API\n\nCurrently, the only way to attach multiple storage accounts is by using [Azure Service Management REST API](https://msdn.microsoft.com/library/azure/ee460799.aspx). The code sample in the [How to: Use Media Services Management REST API](https://msdn.microsoft.com/library/azure/dn167656.aspx) topic defines the **AttachStorageAccountToMediaServiceAccount** method that attaches a storage account to the specified Media Services account. The code in the same topic defines the **ListStorageAccountDetails** method that lists all the storage accounts attached to the specified Media Services account.\n\n\n##To manage Media Services assets across multiple Storage Accounts\n\nThe following code uses the latest Media Services SDK to perform the following tasks:\n\n1. Display all the storage accounts associated with the specified Media Services account.\n1. Retrieve the name of the default storage account.\n1. Create a new asset in the default storage account.\n1. Create an output asset of the encoding job in the specified storage account.\n    \n        using Microsoft.WindowsAzure.MediaServices.Client;\n        using System;\n        using System.Collections.Generic;\n        using System.Configuration;\n        using System.IO;\n        using System.Linq;\n        using System.Text;\n        using System.Threading;\n        using System.Threading.Tasks;\n        \n        namespace MultipleStorageAccounts\n        {\n            class Program\n            {\n                // Location of the media file that you want to encode. \n                private static readonly string _singleInputFilePath =\n                    Path.GetFullPath(@\"../..\\supportFiles\\multifile\\interview2.wmv\");\n        \n                private static readonly string MediaServicesAccountName = \n                    ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n                private static readonly string MediaServicesAccountKey = \n                    ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n        \n                private static CloudMediaContext _context;\n                private static MediaServicesCredentials _cachedCredentials = null;\n    \n                static void Main(string[] args)\n                {\n    \n                    // Create and cache the Media Services credentials in a static class variable.\n                    _cachedCredentials = new MediaServicesCredentials(\n                                    MediaServicesAccountName,\n                                    MediaServicesAccountKey);\n                    // Used the cached credentials to create CloudMediaContext.\n                    _context = new CloudMediaContext(_cachedCredentials);\n    \n        \n                    // Display the storage accounts associated with \n                    // the specified Media Services account:\n                    foreach (var sa in _context.StorageAccounts)\n                        Console.WriteLine(sa.Name);\n        \n                    // Retrieve the name of the default storage account.\n                    var defaultStorageName = _context.StorageAccounts.Where(s => s.IsDefault == true).FirstOrDefault();\n                    Console.WriteLine(\"Name: {0}\", defaultStorageName.Name);\n                    Console.WriteLine(\"IsDefault: {0}\", defaultStorageName.IsDefault);\n        \n                    // Retrieve the name of a storage account that is not the default one.\n                    var notDefaultStroageName = _context.StorageAccounts.Where(s => s.IsDefault == false).FirstOrDefault();\n                    Console.WriteLine(\"Name: {0}\", notDefaultStroageName.Name);\n                    Console.WriteLine(\"IsDefault: {0}\", notDefaultStroageName.IsDefault);\n                    \n                    // Create the original asset in the default storage account.\n                    IAsset asset = CreateAssetAndUploadSingleFile(AssetCreationOptions.None, \n                        defaultStorageName.Name, _singleInputFilePath);\n                    Console.WriteLine(\"Created the asset in the {0} storage account\", asset.StorageAccountName);\n                    \n                    // Create an output asset of the encoding job in the other storage account.\n                    IAsset outputAsset = CreateEncodingJob(asset, notDefaultStroageName.Name, _singleInputFilePath);\n                    if(outputAsset!=null)\n                        Console.WriteLine(\"Created the output asset in the {0} storage account\", outputAsset.StorageAccountName);\n        \n                }\n        \n                static public IAsset CreateAssetAndUploadSingleFile(AssetCreationOptions assetCreationOptions, string storageName, string singleFilePath)\n                {\n                    var assetName = \"UploadSingleFile_\" + DateTime.UtcNow.ToString();\n                    \n                    // If you are creating an asset in the default storage account, you can omit the StorageName parameter.\n                    var asset = _context.Assets.Create(assetName, storageName, assetCreationOptions);\n        \n                    var fileName = Path.GetFileName(singleFilePath);\n        \n                    var assetFile = asset.AssetFiles.Create(fileName);\n        \n                    Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\n        \n                    assetFile.Upload(singleFilePath);\n                    \n                    Console.WriteLine(\"Done uploading {0}\", assetFile.Name);\n        \n                    return asset;\n                }\n        \n                static IAsset CreateEncodingJob(IAsset asset, string storageName, string inputMediaFilePath)\n                {\n                    // Declare a new job.\n                    IJob job = _context.Jobs.Create(\"My encoding job\");\n                    // Get a media processor reference, and pass to it the name of the \n                    // processor to use for the specific task.\n                    IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n        \n                    // Create a task with the encoding details, using a string preset.\n                    ITask task = job.Tasks.AddNew(\"My encoding task\",\n                        processor,\n                        \"H264 Broadband 720p\",\n                        Microsoft.WindowsAzure.MediaServices.Client.TaskOptions.ProtectedConfiguration);\n        \n                    // Specify the input asset to be encoded.\n                    task.InputAssets.Add(asset);\n                    // Add an output asset to contain the results of the job. \n                    // This output is specified as AssetCreationOptions.None, which \n                    // means the output asset is not encrypted. \n                    task.OutputAssets.AddNew(\"Output asset\", storageName,\n                        AssetCreationOptions.None);\n        \n                    // Use the following event handler to check job progress.  \n                    job.StateChanged += new\n                            EventHandler<JobStateChangedEventArgs>(StateChanged);\n        \n                    // Launch the job.\n                    job.Submit();\n        \n                    // Check job execution and wait for job to finish. \n                    Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\n                    progressJobTask.Wait();\n        \n                    // Get an updated job reference.\n                    job = GetJob(job.Id);\n        \n                    // If job state is Error the event handling \n                    // method for job progress should log errors.  Here we check \n                    // for error state and exit if needed.\n                    if (job.State == JobState.Error)\n                    {\n                        Console.WriteLine(\"\\nExiting method due to job error.\");\n                        return null;\n                    }\n        \n                    // Get a reference to the output asset from the job.\n                    IAsset outputAsset = job.OutputMediaAssets[0];\n        \n                    return outputAsset;\n                }\n        \n        \n                private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n                {\n                    var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n                        ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n        \n                    if (processor == null)\n                        throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n        \n                    return processor;\n                }\n        \n                private static void StateChanged(object sender, JobStateChangedEventArgs e)\n                {\n                    Console.WriteLine(\"Job state changed event:\");\n                    Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n                    Console.WriteLine(\"  Current state: \" + e.CurrentState);\n        \n                    switch (e.CurrentState)\n                    {\n                        case JobState.Finished:\n                            Console.WriteLine();\n                            Console.WriteLine(\"********************\");\n                            Console.WriteLine(\"Job is finished.\");\n                            Console.WriteLine(\"Please wait while local tasks or downloads complete...\");\n                            Console.WriteLine(\"********************\");\n                            Console.WriteLine();\n                            Console.WriteLine();\n                            break;\n                        case JobState.Canceling:\n                        case JobState.Queued:\n                        case JobState.Scheduled:\n                        case JobState.Processing:\n                            Console.WriteLine(\"Please wait...\\n\");\n                            break;\n                        case JobState.Canceled:\n                        case JobState.Error:\n                            // Cast sender as a job.\n                            IJob job = (IJob)sender;\n                            // Display or log error details as needed.\n                            Console.WriteLine(\"An error occurred in {0}\", job.Id);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n        \n                static IJob GetJob(string jobId)\n                {\n                    // Use a Linq select query to get an updated \n                    // reference by Id. \n                    var jobInstance =\n                        from j in _context.Jobs\n                        where j.Id == jobId\n                        select j;\n                    // Return the job reference as an Ijob. \n                    IJob job = jobInstance.FirstOrDefault();\n        \n                    return job;\n                }\n            }\n        }\n \ntest\n"
}