<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reliable Actors Events</source>
          <target state="new">Reliable Actors Events</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Events for Service Fabric Reliable Actors.</source>
          <target state="new">Introduction to Events for Service Fabric Reliable Actors.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Actor Events</source>
          <target state="new">Actor Events</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Actor events provide a way to send best effort notifications from the Actor to the clients.</source>
          <target state="new">Actor events provide a way to send best effort notifications from the Actor to the clients.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Actor events are designed for Actor-Client communication and should NOT be used for Actor-to-Actor communication.</source>
          <target state="new">Actor events are designed for Actor-Client communication and should NOT be used for Actor-to-Actor communication.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Following code snippets shows how to use actor events in your application.</source>
          <target state="new">Following code snippets shows how to use actor events in your application.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Define an interface that describes the events published by the actor.</source>
          <target state="new">Define an interface that describes the events published by the actor.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This interface must be derived from the <ph id="ph1">`IActorEvents`</ph> interface.</source>
          <target state="new">This interface must be derived from the <ph id="ph1">`IActorEvents`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The arguments of the methods must be <bpt id="p1">[</bpt>data contract serializable<ept id="p1">](service-fabric-reliable-actors-notes-on-actor-type-serialization.md)</ept>.</source>
          <target state="new">The arguments of the methods must be <bpt id="p1">[</bpt>data contract serializable<ept id="p1">](service-fabric-reliable-actors-notes-on-actor-type-serialization.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The methods must return void as event notifications are one-way and best effort.</source>
          <target state="new">The methods must return void as event notifications are one-way and best effort.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declare the events published by the actor in the actor interface.</source>
          <target state="new">Declare the events published by the actor in the actor interface.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>On the client side, implement the event handler.</source>
          <target state="new">On the client side, implement the event handler.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On the client, create a proxy to the actor that publishes the event and subscribe to its events.</source>
          <target state="new">On the client, create a proxy to the actor that publishes the event and subscribe to its events.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the event of failovers the actor may failover to a different process or node.</source>
          <target state="new">In the event of failovers the actor may failover to a different process or node.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The actor proxy manages the active subscriptions and automatically re-subscribes them.</source>
          <target state="new">The actor proxy manages the active subscriptions and automatically re-subscribes them.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can control the re-subscription interval through the <ph id="ph1">`ActorProxyEventExtensions.SubscribeAsync&lt;TEvent&gt;`</ph> API.</source>
          <target state="new">You can control the re-subscription interval through the <ph id="ph1">`ActorProxyEventExtensions.SubscribeAsync&lt;TEvent&gt;`</ph> API.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To unsubscribe use the <ph id="ph1">`ActorProxyEventExtensions.UnsubscribeAsync&lt;TEvent&gt;`</ph> API.</source>
          <target state="new">To unsubscribe use the <ph id="ph1">`ActorProxyEventExtensions.UnsubscribeAsync&lt;TEvent&gt;`</ph> API.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the actor, simply publish the events as they happen.</source>
          <target state="new">On the actor, simply publish the events as they happen.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If there are subscribers subscribed to the event, the Actors runtime will send them the notification.</source>
          <target state="new">If there are subscribers subscribed to the event, the Actors runtime will send them the notification.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52d6a6ffed3ce4ff416cb44e56eb8d8089e727eb</xliffext:olfilehash>
  </header>
</xliff>