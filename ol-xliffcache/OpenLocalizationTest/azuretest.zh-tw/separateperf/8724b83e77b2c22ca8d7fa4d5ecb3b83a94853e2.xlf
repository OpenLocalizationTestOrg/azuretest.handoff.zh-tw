<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multi-shard querying</source>
          <target state="new">Multi-shard querying</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Run queries across shards using the elastic database client library.</source>
          <target state="new">Run queries across shards using the elastic database client library.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multi-shard querying</source>
          <target state="new">Multi-shard querying</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multi-shard querying<ept id="p1">**</ept> is used for tasks such as data collection/reporting that require running a query that stretches across several shards.</source>
          <target state="new"><bpt id="p1">**</bpt>Multi-shard querying<ept id="p1">**</ept> is used for tasks such as data collection/reporting that require running a query that stretches across several shards.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>(Contrast this to <bpt id="p1">[</bpt>data-dependent routing<ept id="p1">](sql-database-elastic-scale-data-dependent-routing.md)</ept>, which performs all work on a single shard.) To use SQL Server Management Studio, see <bpt id="p2">[</bpt>Getting started with Elastic Database query<ept id="p2">](sql-database-elastic-query-getting-started.md)</ept>.</source>
          <target state="new">(Contrast this to <bpt id="p1">[</bpt>data-dependent routing<ept id="p1">](sql-database-elastic-scale-data-dependent-routing.md)</ept>, which performs all work on a single shard.) To use SQL Server Management Studio, see <bpt id="p2">[</bpt>Getting started with Elastic Database query<ept id="p2">](sql-database-elastic-query-getting-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The elastic database client library introduces a new namespace called <bpt id="p1">**</bpt>Microsoft.Azure.SqlDatabase.ElasticScale.Query<ept id="p1">**</ept> that provides the ability to query multiple shards using a single query and result.</source>
          <target state="new">The elastic database client library introduces a new namespace called <bpt id="p1">**</bpt>Microsoft.Azure.SqlDatabase.ElasticScale.Query<ept id="p1">**</ept> that provides the ability to query multiple shards using a single query and result.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It provides a querying abstraction over a collection of shards.</source>
          <target state="new">It provides a querying abstraction over a collection of shards.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.</source>
          <target state="new">It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The main entry point into multi-shard querying is the <bpt id="p1">**</bpt>MultiShardConnection<ept id="p1">**</ept> class.</source>
          <target state="new">The main entry point into multi-shard querying is the <bpt id="p1">**</bpt>MultiShardConnection<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As with data-dependent routing, the API follows the familiar experience of the <bpt id="p1">**</bpt><bpt id="p2">[</bpt>System.Data.SqlClient<ept id="p2">](http://msdn.microsoft.com/library/System.Data.SqlClient(v=vs.110).aspx)</ept><ept id="p1">**</ept> classes and methods.</source>
          <target state="new">As with data-dependent routing, the API follows the familiar experience of the <bpt id="p1">**</bpt><bpt id="p2">[</bpt>System.Data.SqlClient<ept id="p2">](http://msdn.microsoft.com/library/System.Data.SqlClient(v=vs.110).aspx)</ept><ept id="p1">**</ept> classes and methods.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>SqlClient<ept id="p1">**</ept> library, the first step is to create a <bpt id="p2">**</bpt>SqlConnection<ept id="p2">**</ept>, then create a <bpt id="p3">**</bpt>SqlCommand<ept id="p3">**</ept> for the connection, then execute the command through one of the <bpt id="p4">**</bpt>Execute<ept id="p4">**</ept> methods.</source>
          <target state="new">With the <bpt id="p1">**</bpt>SqlClient<ept id="p1">**</ept> library, the first step is to create a <bpt id="p2">**</bpt>SqlConnection<ept id="p2">**</ept>, then create a <bpt id="p3">**</bpt>SqlCommand<ept id="p3">**</ept> for the connection, then execute the command through one of the <bpt id="p4">**</bpt>Execute<ept id="p4">**</ept> methods.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finally, <bpt id="p1">**</bpt>SqlDataReader<ept id="p1">**</ept> iterates through the result sets returned from the command execution.</source>
          <target state="new">Finally, <bpt id="p1">**</bpt>SqlDataReader<ept id="p1">**</ept> iterates through the result sets returned from the command execution.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The experience with the multi-shard query APIs follows these steps:</source>
          <target state="new">The experience with the multi-shard query APIs follows these steps:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">**</bpt>MultiShardConnection<ept id="p1">**</ept>.</source>
          <target state="new">Create a <bpt id="p1">**</bpt>MultiShardConnection<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">**</bpt>MultiShardCommand<ept id="p1">**</ept> for a <bpt id="p2">**</bpt>MultiShardConnection<ept id="p2">**</ept>.</source>
          <target state="new">Create a <bpt id="p1">**</bpt>MultiShardCommand<ept id="p1">**</ept> for a <bpt id="p2">**</bpt>MultiShardConnection<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Execute the command.</source>
          <target state="new">Execute the command.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consume the results through the <bpt id="p1">**</bpt>MultiShardDataReader<ept id="p1">**</ept>.</source>
          <target state="new">Consume the results through the <bpt id="p1">**</bpt>MultiShardDataReader<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A key difference is the construction of multi-shard connections.</source>
          <target state="new">A key difference is the construction of multi-shard connections.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">**</bpt>SqlConnection<ept id="p1">**</ept> operates on a single database, the <bpt id="p2">**</bpt>MultiShardConnection<ept id="p2">**</ept> takes a <bpt id="p3">***</bpt>collection of shards<ept id="p3">***</ept> as its input.</source>
          <target state="new">Where <bpt id="p1">**</bpt>SqlConnection<ept id="p1">**</ept> operates on a single database, the <bpt id="p2">**</bpt>MultiShardConnection<ept id="p2">**</ept> takes a <bpt id="p3">***</bpt>collection of shards<ept id="p3">***</ept> as its input.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One can populate the collection of shards from a shard map.</source>
          <target state="new">One can populate the collection of shards from a shard map.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The query is then executed on the collection of shards using <bpt id="p1">**</bpt>UNION ALL<ept id="p1">**</ept> semantics to assemble a single overall result.</source>
          <target state="new">The query is then executed on the collection of shards using <bpt id="p1">**</bpt>UNION ALL<ept id="p1">**</ept> semantics to assemble a single overall result.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Optionally, the name of the shard where the row originates from can be added to the output using the <bpt id="p1">**</bpt>ExecutionOptions<ept id="p1">**</ept> property on command.</source>
          <target state="new">Optionally, the name of the shard where the row originates from can be added to the output using the <bpt id="p1">**</bpt>ExecutionOptions<ept id="p1">**</ept> property on command.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code illustrates the usage of multi-shard querying using a given <bpt id="p1">**</bpt>ShardMap<ept id="p1">**</ept> named <bpt id="p2">*</bpt>myShardMap<ept id="p2">*</ept>.</source>
          <target state="new">The following code illustrates the usage of multi-shard querying using a given <bpt id="p1">**</bpt>ShardMap<ept id="p1">**</ept> named <bpt id="p2">*</bpt>myShardMap<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note the call to <bpt id="p1">**</bpt>myShardMap.GetShards()<ept id="p1">**</ept>.</source>
          <target state="new">Note the call to <bpt id="p1">**</bpt>myShardMap.GetShards()<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases.</source>
          <target state="new">This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to <bpt id="p1">**</bpt>myShardMap.GetShards()<ept id="p1">**</ept>.</source>
          <target state="new">The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to <bpt id="p1">**</bpt>myShardMap.GetShards()<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.</source>
          <target state="new">In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried.</source>
          <target state="new">A limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check.</source>
          <target state="new">While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This can lead to multi-shard queries running on databases that have since been removed from the shard map.</source>
          <target state="new">This can lead to multi-shard queries running on databases that have since been removed from the shard map.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Multi-shard queries and split-merge operations</source>
          <target state="new">Multi-shard queries and split-merge operations</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Multi-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations.</source>
          <target state="new">Multi-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query.</source>
          <target state="new">This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.</source>
          <target state="new">Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8724b83e77b2c22ca8d7fa4d5ecb3b83a94853e2</xliffext:olfilehash>
  </header>
</xliff>