{
  "nodes": [
    {
      "content": "PHP Web and Worker Roles | Microsoft Azure",
      "pos": [
        27,
        69
      ]
    },
    {
      "content": "A guide to creating PHP Web and Worker roles in an Azure Cloud Service, and configuring the PHP runtime.",
      "pos": [
        88,
        192
      ]
    },
    {
      "content": "How to create PHP web and worker roles",
      "pos": [
        491,
        529
      ]
    },
    {
      "content": "Overview",
      "pos": [
        534,
        542
      ]
    },
    {
      "content": "This guide will show you how to create PHP web or worker roles in a Windows development environment, choose a specific version of PHP from the \"built-in\" versions available, change the PHP configuration, enable extensions, and finally, how to deploy to Azure.",
      "pos": [
        544,
        803
      ]
    },
    {
      "content": "It also describes how to configure a web or worker role to use a PHP runtime (with custom configuration and extensions) that you provide.",
      "pos": [
        804,
        941
      ]
    },
    {
      "content": "What are PHP web and worker roles?",
      "pos": [
        946,
        980
      ]
    },
    {
      "content": "Azure provides three compute models for running applications: Azure App Service, Azure Virtual Machines, and Azure Cloud Services.",
      "pos": [
        981,
        1111
      ]
    },
    {
      "content": "All three models support PHP.",
      "pos": [
        1112,
        1141
      ]
    },
    {
      "content": "Cloud Services, which include web and worker roles, provide <bpt id=\"p1\">*</bpt>Platform as a Service (PaaS)<ept id=\"p1\">*</ept>.",
      "pos": [
        1142,
        1233
      ]
    },
    {
      "content": "Within a cloud service, a web role provides a dedicated Internet Information Services (IIS) web server to host front-end web applications, while a worker role can run asynchronous, long-running or perpetual tasks independent of user interaction or input.",
      "pos": [
        1234,
        1488
      ]
    },
    {
      "pos": [
        1490,
        1633
      ],
      "content": "For more information about these options, see <bpt id=\"p1\">[</bpt>Compute Hosting Options Provided by Azure<ept id=\"p1\">](./cloud-services/fundamentals-application-models.md)</ept>."
    },
    {
      "content": "Download the Azure SDK for PHP",
      "pos": [
        1638,
        1668
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure SDK for PHP]</ept> consists of several components.",
      "pos": [
        1670,
        1725
      ]
    },
    {
      "content": "This article will use two of them: Azure PowerShell and the Azure Emulators.",
      "pos": [
        1726,
        1802
      ]
    },
    {
      "content": "These two components can be installed via the Microsoft Web Platform Installer.",
      "pos": [
        1803,
        1882
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>How to install and configure Azure PowerShell<ept id=\"p1\">](powershell-install-configure.md)</ept>.",
      "pos": [
        1883,
        1990
      ]
    },
    {
      "content": "How to: Create a Cloud Services project",
      "pos": [
        1995,
        2034
      ]
    },
    {
      "content": "The first step in creating a PHP web or worker role is to create an Azure Service project.",
      "pos": [
        2036,
        2126
      ]
    },
    {
      "content": "an Azure Service project serves as a logical container for web and worker roles, and contains the project's <bpt id=\"p1\">[</bpt><ept id=\"p1\">service definition (.csdef)]</ept> and <bpt id=\"p2\">[</bpt><ept id=\"p2\">service configuration (.cscfg)]</ept> files.",
      "pos": [
        2127,
        2308
      ]
    },
    {
      "content": "To create a new Azure Servcie project, run Azure PowerShell as an administrator, and execute the following command:",
      "pos": [
        2310,
        2425
      ]
    },
    {
      "pos": [
        2473,
        2570
      ],
      "content": "This command will create a new directory (<ph id=\"ph1\">`myProject`</ph>) to which you can add web and worker roles."
    },
    {
      "content": "How to: Add PHP web or worker roles",
      "pos": [
        2575,
        2610
      ]
    },
    {
      "content": "To add a PHP web role to a project, run the following command from within the project's root directory:",
      "pos": [
        2612,
        2715
      ]
    },
    {
      "content": "For a worker role, use this command:",
      "pos": [
        2768,
        2804
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The <ph id=\"ph2\">`roleName`</ph> parameter is optional.",
      "pos": [
        2862,
        2912
      ]
    },
    {
      "content": "If it is omitted, the role name will be automatically generated.",
      "pos": [
        2913,
        2977
      ]
    },
    {
      "content": "The first web role created will be <ph id=\"ph1\">`WebRole1`</ph>, the second <ph id=\"ph2\">`WebRole2`</ph>, and so on.",
      "pos": [
        2978,
        3058
      ]
    },
    {
      "content": "The first worker role created will be <ph id=\"ph1\">`WorkerRole1`</ph>, the second <ph id=\"ph2\">`WorkerRole2`</ph>, and so on.",
      "pos": [
        3059,
        3148
      ]
    },
    {
      "content": "How to: Specify the built-in PHP Version",
      "pos": [
        3153,
        3193
      ]
    },
    {
      "content": "When you add a PHP web or worker role to a project, the project's configuration files are modified so that PHP will be installed on each web or worker instance of your application when it is deployed.",
      "pos": [
        3195,
        3395
      ]
    },
    {
      "content": "To see the version of PHP that will be installed by default, run the following command:",
      "pos": [
        3396,
        3483
      ]
    },
    {
      "content": "The output from the command above will look similar to what is shown below.",
      "pos": [
        3542,
        3617
      ]
    },
    {
      "content": "In this example, the <ph id=\"ph1\">`IsDefault`</ph> flag is set to <ph id=\"ph2\">`true`</ph> for PHP 5.3.17, indicating that it will be the default PHP version installed.",
      "pos": [
        3618,
        3750
      ]
    },
    {
      "content": "You can set the PHP runtime version to any of the PHP versions that are listed.",
      "pos": [
        4315,
        4394
      ]
    },
    {
      "content": "For example, to set the PHP version (for a role with name <ph id=\"ph1\">`roleName`</ph>) to 5.4.0, use the following command:",
      "pos": [
        4395,
        4501
      ]
    },
    {
      "pos": [
        4574,
        4675
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> More PHP versions may be available in the future, and the available versions may change."
    },
    {
      "content": "How to: Customize the built-in PHP runtime",
      "pos": [
        4680,
        4722
      ]
    },
    {
      "pos": [
        4724,
        4915
      ],
      "content": "You have complete control over the configuration of the PHP runtime that is installed when you follow the steps above, including modification of <ph id=\"ph1\">`php.ini`</ph> settings and enabling of extensions."
    },
    {
      "content": "To customize the built-in PHP runtime, follow these steps:",
      "pos": [
        4917,
        4975
      ]
    },
    {
      "content": "Add a new folder, named <ph id=\"ph1\">`php`</ph>, to the <ph id=\"ph2\">`bin`</ph> directory of your web role.",
      "pos": [
        4980,
        5051
      ]
    },
    {
      "content": "For a worker role, add it to the role's root directory.",
      "pos": [
        5052,
        5107
      ]
    },
    {
      "content": "In the <ph id=\"ph1\">`php`</ph> folder, create another folder called <ph id=\"ph2\">`ext`</ph>.",
      "pos": [
        5111,
        5167
      ]
    },
    {
      "content": "Put any <ph id=\"ph1\">`.dll`</ph> extension files (e.g. <ph id=\"ph2\">`php_mongo.dll`</ph>) you want to enable in this folder.",
      "pos": [
        5168,
        5256
      ]
    },
    {
      "content": "Add a <ph id=\"ph1\">`php.ini`</ph> file to the <ph id=\"ph2\">`php`</ph> folder.",
      "pos": [
        5260,
        5301
      ]
    },
    {
      "content": "Enable any custom extensions and set any PHP directives in this file.",
      "pos": [
        5302,
        5371
      ]
    },
    {
      "content": "For example, if you wanted to turn <ph id=\"ph1\">`display_errors`</ph> on and enable the <ph id=\"ph2\">`php_mongo.dll`</ph> extension, the contents of your <ph id=\"ph3\">`php.ini`</ph> file would be as follows:",
      "pos": [
        5372,
        5525
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Any settings that you don't explicity set in the <ph id=\"ph2\">`php.ini`</ph> file that you provide will automatically be set to their default values.",
      "pos": [
        5588,
        5732
      ]
    },
    {
      "content": "However, keep in mind that you can add a complete <ph id=\"ph1\">`php.ini`</ph> file.",
      "pos": [
        5733,
        5798
      ]
    },
    {
      "content": "How to: Use your own PHP runtime",
      "pos": [
        5803,
        5835
      ]
    },
    {
      "content": "In some cases, instead of selecting a built-in PHP runtime and configuring it as described above, you may want to provide your own PHP runtime.",
      "pos": [
        5836,
        5979
      ]
    },
    {
      "content": "For example, you can use the same PHP runtime in a web or worker role that you use in your development environment, making it easier to ensure that application will not change behavior in your production environment.",
      "pos": [
        5980,
        6196
      ]
    },
    {
      "content": "Configuring a web role to use your own PHP runtime",
      "pos": [
        6202,
        6252
      ]
    },
    {
      "content": "To configure a web role to use a PHP runtime that you provide, follow the steps below.",
      "pos": [
        6254,
        6340
      ]
    },
    {
      "content": "Create an Azure Service project and add a PHP web role as described previously in this topic.",
      "pos": [
        6345,
        6438
      ]
    },
    {
      "pos": [
        6442,
        6627
      ],
      "content": "Create a <ph id=\"ph1\">`php`</ph> folder in the <ph id=\"ph2\">`bin`</ph> folder that is in your web role's root directory, then add your PHP runtime (all binaries, configuration files, subfolders, etc.) to the <ph id=\"ph3\">`php`</ph> folder."
    },
    {
      "content": "(OPTIONAL) If your PHP runtime uses the <bpt id=\"p1\">[</bpt>Microsoft Drivers for PHP for SQL Server<ept id=\"p1\">][sqlsrv drivers]</ept>, you will need to configure your web role to install <bpt id=\"p2\">[</bpt>SQL Server Native Client 2012<ept id=\"p2\">][sql native client]</ept> when it is provisioned.",
      "pos": [
        6631,
        6857
      ]
    },
    {
      "content": "To do this, add the <ph id=\"ph1\">`sqlncli.msi`</ph> installer to the <ph id=\"ph2\">`bin`</ph> folder in your web role's root directory.",
      "pos": [
        6858,
        6956
      ]
    },
    {
      "content": "You can download the installer here: <bpt id=\"p1\">[</bpt><ept id=\"p1\">sqlncli.msi x64 installer]</ept>.",
      "pos": [
        6957,
        7022
      ]
    },
    {
      "content": "The startup script described in the next step will silently run the installer when the role is provisioned.",
      "pos": [
        7023,
        7130
      ]
    },
    {
      "content": "If your PHP runtime does not use the Microsoft Drivers for PHP for SQL Server, you can remove the following line from the script shown in the next step:",
      "pos": [
        7131,
        7283
      ]
    },
    {
      "content": "The next step is to define a startup task that configures <bpt id=\"p1\">[</bpt>Internet Information Services (IIS)<ept id=\"p1\">][iis.net]</ept> to use your PHP runtime to handle requests for <ph id=\"ph1\">`.php`</ph> pages.",
      "pos": [
        7355,
        7520
      ]
    },
    {
      "content": "To do this, open the <ph id=\"ph1\">`setup_web.cmd`</ph> file (in the <ph id=\"ph2\">`bin`</ph> file of your web role's root directory) in a text editor and replace its contents with the following script:",
      "pos": [
        7521,
        7685
      ]
    },
    {
      "content": "Add your application files to your web role's root directory.",
      "pos": [
        9028,
        9089
      ]
    },
    {
      "content": "This will be the web server's root directory.",
      "pos": [
        9090,
        9135
      ]
    },
    {
      "pos": [
        9140,
        9268
      ],
      "content": "Publish your application as described in the <bpt id=\"p1\">[</bpt>How to: Publish your application<ept id=\"p1\">](#how-to-publish-your-application)</ept> section below."
    },
    {
      "pos": [
        9272,
        9454
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The <ph id=\"ph2\">`download.ps1`</ph> script (in the <ph id=\"ph3\">`bin`</ph> folder of the web role's root directory) can be deleted after following the steps described above for using your own PHP runtime."
    },
    {
      "content": "Configuring a worker role to use your own PHP runtime",
      "pos": [
        9460,
        9513
      ]
    },
    {
      "content": "To configure a worker role to use a PHP runtime that you provide, follow the steps below.",
      "pos": [
        9515,
        9604
      ]
    },
    {
      "content": "Create an Azure Service project and add a PHP worker role as described previously in this topic.",
      "pos": [
        9609,
        9705
      ]
    },
    {
      "pos": [
        9709,
        9868
      ],
      "content": "Create a <ph id=\"ph1\">`php`</ph> folder in the worker role's root directory, then add your PHP runtime (all binaries, configuration files, subfolders, etc.) to the <ph id=\"ph2\">`php`</ph> folder."
    },
    {
      "content": "(OPTIONAL) If your PHP runtime uses <bpt id=\"p1\">[</bpt>Microsoft Drivers for PHP for SQL Server<ept id=\"p1\">][sqlsrv drivers]</ept>, you will need to configure your worker role to install <bpt id=\"p2\">[</bpt>SQL Server Native Client 2012<ept id=\"p2\">][sql native client]</ept> when it is provisioned.",
      "pos": [
        9872,
        10097
      ]
    },
    {
      "content": "To do this, add the <ph id=\"ph1\">`sqlncli.msi`</ph> installer to the worker role's root directory.",
      "pos": [
        10098,
        10178
      ]
    },
    {
      "content": "You can download the installer here: <bpt id=\"p1\">[</bpt><ept id=\"p1\">sqlncli.msi x64 installer]</ept>.",
      "pos": [
        10179,
        10244
      ]
    },
    {
      "content": "The startup script described in the next step will silently run the installer when the role is provisioned.",
      "pos": [
        10245,
        10352
      ]
    },
    {
      "content": "If your PHP runtime does not use the Microsoft Drivers for PHP for SQL Server, you can remove the following line from the script shown in the next step:",
      "pos": [
        10353,
        10505
      ]
    },
    {
      "content": "The next step is to define a startup task that adds your <ph id=\"ph1\">`php.exe`</ph> executable to the worker role's PATH environment variable when the role is provisioned.",
      "pos": [
        10577,
        10731
      ]
    },
    {
      "content": "To do this, open the <ph id=\"ph1\">`setup_worker.cmd`</ph> file (in the worker role's root directory) in a text editor and replace its contents with the following script:",
      "pos": [
        10732,
        10883
      ]
    },
    {
      "content": "Add your application files to your worker role's root directory.",
      "pos": [
        11409,
        11473
      ]
    },
    {
      "pos": [
        11478,
        11606
      ],
      "content": "Publish your application as described in the <bpt id=\"p1\">[</bpt>How to: Publish your application<ept id=\"p1\">](#how-to-publish-your-application)</ept> section below."
    },
    {
      "content": "How to: Run your application in the Compute and Storage Emulators",
      "pos": [
        11611,
        11676
      ]
    },
    {
      "content": "The Azure emulators provide a local environment in which you can test your Azure application before deploying it to the cloud.",
      "pos": [
        11678,
        11804
      ]
    },
    {
      "content": "There are some differences between the emulators and the Azure environment.",
      "pos": [
        11805,
        11880
      ]
    },
    {
      "content": "To understand this better, see <bpt id=\"p1\">[</bpt>Use the Azure Storage Emulator for Development and Testing<ept id=\"p1\">](./storage/storage-use-emulator.md)</ept>.",
      "pos": [
        11881,
        12008
      ]
    },
    {
      "content": "Note that you must have PHP installed locally to use the Compute Emulator.",
      "pos": [
        12010,
        12084
      ]
    },
    {
      "content": "The Compute Emulator will use your local PHP installation to run your application.",
      "pos": [
        12085,
        12167
      ]
    },
    {
      "content": "To run your project in the emulators, execute the following command from your project's root directory:",
      "pos": [
        12169,
        12272
      ]
    },
    {
      "content": "You will see out put similar to this:",
      "pos": [
        12316,
        12353
      ]
    },
    {
      "pos": [
        12466,
        12646
      ],
      "content": "You can see your application running in the emulator by opening a web browser and browsing to local address shown in the output (<ph id=\"ph1\">`http://127.0.0.1:81`</ph> in the example output above)."
    },
    {
      "content": "To stop the emulators, execute this command:",
      "pos": [
        12648,
        12692
      ]
    },
    {
      "content": "How to: Publish your application",
      "pos": [
        12738,
        12770
      ]
    },
    {
      "content": "To publish your application, you need to first import your publish settings  with the <bpt id=\"p1\">**</bpt>Import-PublishSettingsFile<ept id=\"p1\">**</ept> cmdlet, then you can publish your application with the <bpt id=\"p2\">[</bpt>Publish-AzureServiceProject<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/dn495166.aspx)</ept> cmdlet.",
      "pos": [
        12772,
        13037
      ]
    },
    {
      "content": "For information about signing in, see <bpt id=\"p1\">[</bpt>How to install and configure Azure PowerShell<ept id=\"p1\">](powershell-install-configure.md)</ept>.",
      "pos": [
        13038,
        13157
      ]
    },
    {
      "content": "test",
      "pos": [
        13718,
        13722
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"PHP Web and Worker Roles | Microsoft Azure\"\n    description=\"A guide to creating PHP Web and Worker roles in an Azure Cloud Service, and configuring the PHP runtime.\"\n    services=\"\"\n    documentationCenter=\"php\"\n    authors=\"tfitzmac\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"cloud-services\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"PHP\"\n    ms.topic=\"article\"\n    ms.date=\"09/01/2015\"\n    ms.author=\"tomfitz\"/>\n\n#How to create PHP web and worker roles\n\n## Overview\n\nThis guide will show you how to create PHP web or worker roles in a Windows development environment, choose a specific version of PHP from the \"built-in\" versions available, change the PHP configuration, enable extensions, and finally, how to deploy to Azure. It also describes how to configure a web or worker role to use a PHP runtime (with custom configuration and extensions) that you provide.\n\n## What are PHP web and worker roles?\nAzure provides three compute models for running applications: Azure App Service, Azure Virtual Machines, and Azure Cloud Services. All three models support PHP. Cloud Services, which include web and worker roles, provide *Platform as a Service (PaaS)*. Within a cloud service, a web role provides a dedicated Internet Information Services (IIS) web server to host front-end web applications, while a worker role can run asynchronous, long-running or perpetual tasks independent of user interaction or input.\n\nFor more information about these options, see [Compute Hosting Options Provided by Azure](./cloud-services/fundamentals-application-models.md).\n\n## Download the Azure SDK for PHP\n\nThe [Azure SDK for PHP] consists of several components. This article will use two of them: Azure PowerShell and the Azure Emulators. These two components can be installed via the Microsoft Web Platform Installer. For more information, see [How to install and configure Azure PowerShell](powershell-install-configure.md).\n\n## How to: Create a Cloud Services project\n\nThe first step in creating a PHP web or worker role is to create an Azure Service project. an Azure Service project serves as a logical container for web and worker roles, and contains the project's [service definition (.csdef)] and [service configuration (.cscfg)] files.\n\nTo create a new Azure Servcie project, run Azure PowerShell as an administrator, and execute the following command:\n\n    PS C:\\>New-AzureServiceProject myProject\n\nThis command will create a new directory (`myProject`) to which you can add web and worker roles.\n\n## How to: Add PHP web or worker roles\n\nTo add a PHP web role to a project, run the following command from within the project's root directory:\n\n    PS C:\\myProject> Add-AzurePHPWebRole roleName\n\nFor a worker role, use this command:\n\n    PS C:\\myProject> Add-AzurePHPWorkerRole roleName\n\n> [AZURE.NOTE] The `roleName` parameter is optional. If it is omitted, the role name will be automatically generated. The first web role created will be `WebRole1`, the second `WebRole2`, and so on. The first worker role created will be `WorkerRole1`, the second `WorkerRole2`, and so on.\n\n## How to: Specify the built-in PHP Version\n\nWhen you add a PHP web or worker role to a project, the project's configuration files are modified so that PHP will be installed on each web or worker instance of your application when it is deployed. To see the version of PHP that will be installed by default, run the following command:\n\n    PS C:\\myProject> Get-AzureServiceProjectRoleRuntime\n\nThe output from the command above will look similar to what is shown below. In this example, the `IsDefault` flag is set to `true` for PHP 5.3.17, indicating that it will be the default PHP version installed.\n\n    Runtime Version     PackageUri                      IsDefault\n    ------- -------     ----------                      ---------\n    Node 0.6.17         http://nodertncu.blob.core...   False\n    Node 0.6.20         http://nodertncu.blob.core...   True\n    Node 0.8.4          http://nodertncu.blob.core...   False\n    IISNode 0.1.21      http://nodertncu.blob.core...   True\n    Cache 1.8.0         http://nodertncu.blob.core...   True\n    PHP 5.3.17          http://nodertncu.blob.core...   True\n    PHP 5.4.0           http://nodertncu.blob.core...   False\n\nYou can set the PHP runtime version to any of the PHP versions that are listed. For example, to set the PHP version (for a role with name `roleName`) to 5.4.0, use the following command:\n\n    PS C:\\myProject> Set-AzureServiceProjectRole roleName php 5.4.0\n\n> [AZURE.NOTE] More PHP versions may be available in the future, and the available versions may change.\n\n## How to: Customize the built-in PHP runtime\n\nYou have complete control over the configuration of the PHP runtime that is installed when you follow the steps above, including modification of `php.ini` settings and enabling of extensions.\n\nTo customize the built-in PHP runtime, follow these steps:\n\n1. Add a new folder, named `php`, to the `bin` directory of your web role. For a worker role, add it to the role's root directory.\n2. In the `php` folder, create another folder called `ext`. Put any `.dll` extension files (e.g. `php_mongo.dll`) you want to enable in this folder.\n3. Add a `php.ini` file to the `php` folder. Enable any custom extensions and set any PHP directives in this file. For example, if you wanted to turn `display_errors` on and enable the `php_mongo.dll` extension, the contents of your `php.ini` file would be as follows:\n\n        display_errors=On\n        extension=php_mongo.dll\n\n> [AZURE.NOTE] Any settings that you don't explicity set in the `php.ini` file that you provide will automatically be set to their default values. However, keep in mind that you can add a complete `php.ini` file.\n\n## How to: Use your own PHP runtime\nIn some cases, instead of selecting a built-in PHP runtime and configuring it as described above, you may want to provide your own PHP runtime. For example, you can use the same PHP runtime in a web or worker role that you use in your development environment, making it easier to ensure that application will not change behavior in your production environment.\n\n### Configuring a web role to use your own PHP runtime\n\nTo configure a web role to use a PHP runtime that you provide, follow the steps below.\n\n1. Create an Azure Service project and add a PHP web role as described previously in this topic.\n2. Create a `php` folder in the `bin` folder that is in your web role's root directory, then add your PHP runtime (all binaries, configuration files, subfolders, etc.) to the `php` folder.\n3. (OPTIONAL) If your PHP runtime uses the [Microsoft Drivers for PHP for SQL Server][sqlsrv drivers], you will need to configure your web role to install [SQL Server Native Client 2012][sql native client] when it is provisioned. To do this, add the `sqlncli.msi` installer to the `bin` folder in your web role's root directory. You can download the installer here: [sqlncli.msi x64 installer]. The startup script described in the next step will silently run the installer when the role is provisioned. If your PHP runtime does not use the Microsoft Drivers for PHP for SQL Server, you can remove the following line from the script shown in the next step:\n\n        msiexec /i sqlncli.msi /qn IACCEPTSQLNCLILICENSETERMS=YES\n\n4. The next step is to define a startup task that configures [Internet Information Services (IIS)][iis.net] to use your PHP runtime to handle requests for `.php` pages. To do this, open the `setup_web.cmd` file (in the `bin` file of your web role's root directory) in a text editor and replace its contents with the following script:\n\n        @ECHO ON\n        cd \"%~dp0\"\n\n        if \"%EMULATED%\"==\"true\" exit /b 0\n\n        msiexec /i sqlncli.msi /qn IACCEPTSQLNCLILICENSETERMS=YES\n\n        SET PHP_FULL_PATH=%~dp0php\\php-cgi.exe\n        SET NEW_PATH=%PATH%;%RoleRoot%\\base\\x86\n\n        %WINDIR%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/fastCgi /+\"[fullPath='%PHP_FULL_PATH%',maxInstances='12',idleTimeout='60000',activityTimeout='3600',requestTimeout='60000',instanceMaxRequests='10000',protocol='NamedPipe',flushNamedPipe='False']\" /commit:apphost\n        %WINDIR%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/fastCgi /+\"[fullPath='%PHP_FULL_PATH%'].environmentVariables.[name='PATH',value='%NEW_PATH%']\" /commit:apphost\n        %WINDIR%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/fastCgi /+\"[fullPath='%PHP_FULL_PATH%'].environmentVariables.[name='PHP_FCGI_MAX_REQUESTS',value='10000']\" /commit:apphost\n        %WINDIR%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/handlers /+\"[name='PHP',path='*.php',verb='GET,HEAD,POST',modules='FastCgiModule',scriptProcessor='%PHP_FULL_PATH%',resourceType='Either',requireAccess='Script']\" /commit:apphost\n        %WINDIR%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/fastCgi /\"[fullPath='%PHP_FULL_PATH%'].queueLength:50000\"\n\n5. Add your application files to your web role's root directory. This will be the web server's root directory.\n\n6. Publish your application as described in the [How to: Publish your application](#how-to-publish-your-application) section below.\n\n> [AZURE.NOTE] The `download.ps1` script (in the `bin` folder of the web role's root directory) can be deleted after following the steps described above for using your own PHP runtime.\n\n### Configuring a worker role to use your own PHP runtime\n\nTo configure a worker role to use a PHP runtime that you provide, follow the steps below.\n\n1. Create an Azure Service project and add a PHP worker role as described previously in this topic.\n2. Create a `php` folder in the worker role's root directory, then add your PHP runtime (all binaries, configuration files, subfolders, etc.) to the `php` folder.\n3. (OPTIONAL) If your PHP runtime uses [Microsoft Drivers for PHP for SQL Server][sqlsrv drivers], you will need to configure your worker role to install [SQL Server Native Client 2012][sql native client] when it is provisioned. To do this, add the `sqlncli.msi` installer to the worker role's root directory. You can download the installer here: [sqlncli.msi x64 installer]. The startup script described in the next step will silently run the installer when the role is provisioned. If your PHP runtime does not use the Microsoft Drivers for PHP for SQL Server, you can remove the following line from the script shown in the next step:\n\n        msiexec /i sqlncli.msi /qn IACCEPTSQLNCLILICENSETERMS=YES\n\n4. The next step is to define a startup task that adds your `php.exe` executable to the worker role's PATH environment variable when the role is provisioned. To do this, open the `setup_worker.cmd` file (in the worker role's root directory) in a text editor and replace its contents with the following script:\n\n        @echo on\n\n        cd \"%~dp0\"\n\n        echo Granting permissions for Network Service to the web root directory...\n        icacls ..\\ /grant \"Network Service\":(OI)(CI)W\n        if %ERRORLEVEL% neq 0 goto error\n        echo OK\n\n        if \"%EMULATED%\"==\"true\" exit /b 0\n\n        msiexec /i sqlncli.msi /qn IACCEPTSQLNCLILICENSETERMS=YES\n\n        setx Path \"%PATH%;%~dp0php\" /M\n\n        if %ERRORLEVEL% neq 0 goto error\n\n        echo SUCCESS\n        exit /b 0\n\n        :error\n\n        echo FAILED\n        exit /b -1\n\n5. Add your application files to your worker role's root directory.\n\n6. Publish your application as described in the [How to: Publish your application](#how-to-publish-your-application) section below.\n\n## How to: Run your application in the Compute and Storage Emulators\n\nThe Azure emulators provide a local environment in which you can test your Azure application before deploying it to the cloud. There are some differences between the emulators and the Azure environment. To understand this better, see [Use the Azure Storage Emulator for Development and Testing](./storage/storage-use-emulator.md).\n\nNote that you must have PHP installed locally to use the Compute Emulator. The Compute Emulator will use your local PHP installation to run your application.\n\nTo run your project in the emulators, execute the following command from your project's root directory:\n\n    PS C:\\MyProject> Start-AzureEmulator\n\nYou will see out put similar to this:\n\n    Creating local package...\n    Starting Emulator...\n    Role is running at http://127.0.0.1:81\n    Started\n\nYou can see your application running in the emulator by opening a web browser and browsing to local address shown in the output (`http://127.0.0.1:81` in the example output above).\n\nTo stop the emulators, execute this command:\n\n    PS C:\\MyProject> Stop-AzureEmulator\n\n## How to: Publish your application\n\nTo publish your application, you need to first import your publish settings  with the **Import-PublishSettingsFile** cmdlet, then you can publish your application with the [Publish-AzureServiceProject](https://msdn.microsoft.com/library/azure/dn495166.aspx) cmdlet. For information about signing in, see [How to install and configure Azure PowerShell](powershell-install-configure.md).\n\n[Azure SDK for PHP]: /develop/php/common-tasks/download-php-sdk/\n[install ps and emulators]: http://go.microsoft.com/fwlink/p/?linkid=320376&clcid=0x409\n[service definition (.csdef)]: http://msdn.microsoft.com/library/windowsazure/ee758711.aspx\n[service configuration (.cscfg)]: http://msdn.microsoft.com/library/windowsazure/ee758710.aspx\n[iis.net]: http://www.iis.net/\n[sql native client]: http://msdn.microsoft.com/sqlserver/aa937733.aspx\n[sqlsrv drivers]: http://php.net/sqlsrv\n[sqlncli.msi x64 installer]: http://go.microsoft.com/fwlink/?LinkID=239648\n\n\ntest\n"
}