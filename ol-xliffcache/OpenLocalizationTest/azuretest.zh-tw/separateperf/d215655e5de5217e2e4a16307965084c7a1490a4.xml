{
  "nodes": [
    {
      "content": "Troubleshooting resource group deployments in Azure",
      "pos": [
        26,
        77
      ]
    },
    {
      "content": "Describes common problems deploying resources in Azure, and shows how to use the Azure portal, the Azure Command-Line Interface for Mac, Linux, and Windows (Azure CLI), and PowerShell to examine deployments and detect issues.",
      "pos": [
        95,
        320
      ]
    },
    {
      "content": "Troubleshooting resource group deployments in Azure",
      "pos": [
        644,
        695
      ]
    },
    {
      "content": "Deployments can fail for any number of reasons.",
      "pos": [
        697,
        744
      ]
    },
    {
      "content": "It is far better to prevent deployment errors by checking a few things in advance.",
      "pos": [
        745,
        827
      ]
    },
    {
      "content": "This document describes tools and operations to prevent simple mistakes, to download template files, and to examine deployment logs.",
      "pos": [
        828,
        960
      ]
    },
    {
      "content": "It also discusses the main areas to think about when examining deployment logs for failures.",
      "pos": [
        961,
        1053
      ]
    },
    {
      "content": "Useful tools to interact with Azure",
      "pos": [
        1058,
        1093
      ]
    },
    {
      "content": "When you work with your Azure resources from the command-line, you will collect tools that help you do your work.",
      "pos": [
        1094,
        1207
      ]
    },
    {
      "content": "Azure resource group templates are JSON documents, and the Azure Resource Manager API accepts and returns JSON, so JSON parsing tools are some of the first things you will use to help you navigate information about your resources and to design or interact with templates and template parameter files.",
      "pos": [
        1208,
        1508
      ]
    },
    {
      "content": "Mac, Linux, and Windows tools",
      "pos": [
        1514,
        1543
      ]
    },
    {
      "content": "If you use the Azure Command-Line Interface for Mac, Linux, and Windows, you are probably familiar with standard download tools such as <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt>curl<ept id=\"p2\">](http://curl.haxx.se/)</ept><ept id=\"p1\">**</ept> and <bpt id=\"p3\">**</bpt><bpt id=\"p4\">[</bpt>wget<ept id=\"p4\">](https://www.gnu.org/software/wget/)</ept><ept id=\"p3\">**</ept>, or <bpt id=\"p5\">**</bpt><bpt id=\"p6\">[</bpt>Resty<ept id=\"p6\">](https://github.com/beders/Resty)</ept><ept id=\"p5\">**</ept>, and JSON utilities such as <bpt id=\"p7\">**</bpt><bpt id=\"p8\">[</bpt>jq<ept id=\"p8\">](http://stedolan.github.io/jq/download/)</ept><ept id=\"p7\">**</ept>, <bpt id=\"p9\">**</bpt><bpt id=\"p10\">[</bpt>jsawk<ept id=\"p10\">](https://github.com/micha/jsawk)</ept><ept id=\"p9\">**</ept>, and language libraries that handle JSON well.",
      "pos": [
        1544,
        1981
      ]
    },
    {
      "content": "(Many of these tools also have ports for Windows, such as <bpt id=\"p1\">[</bpt>wget<ept id=\"p1\">](http://gnuwin32.sourceforge.net/packages/wget.htm)</ept>; in fact, there are several ways to get Linux and other open-source software tools running on Windows as well.)",
      "pos": [
        1982,
        2209
      ]
    },
    {
      "content": "This topic includes some Azure CLI commands that you can use with <bpt id=\"p1\">**</bpt>jq<ept id=\"p1\">**</ept> to obtain precisely the information that you want more efficiently.",
      "pos": [
        2211,
        2351
      ]
    },
    {
      "content": "You should choose the toolset that you are comfortable with to help you understand your Azure resource usage.",
      "pos": [
        2352,
        2461
      ]
    },
    {
      "content": "Windows PowerShell",
      "pos": [
        2467,
        2485
      ]
    },
    {
      "content": "Windows PowerShell has several basic commands to perform the same procedures.",
      "pos": [
        2487,
        2564
      ]
    },
    {
      "pos": [
        2568,
        2746
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt>Invoke-WebRequest<ept id=\"p2\">](https://technet.microsoft.com/library/hh849901%28v=wps.640%29)</ept><ept id=\"p1\">**</ept> cmdlet to download files such as resource group templates or parameters JSON files."
    },
    {
      "pos": [
        2749,
        3086
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt>ConvertFrom-Json<ept id=\"p2\">](https://technet.microsoft.com/library/hh849898%28v=wps.640%29.aspx)</ept><ept id=\"p1\">**</ept> cmdlet to convert a JSON string to a custom object (<bpt id=\"p3\">[</bpt>PSCustomObject<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/desktop/system.management.automation.pscustomobject%28v=vs.85%29.aspx)</ept>) that has a property for each field in the JSON string."
    },
    {
      "content": "Preventing errors in the Azure CLI for Mac, Linux, and Windows",
      "pos": [
        3091,
        3153
      ]
    },
    {
      "content": "The Azure CLI has several commands to help prevent errors and detect what went wrong when errors occur.",
      "pos": [
        3155,
        3258
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>azure location list<ept id=\"p1\">**</ept>.",
      "pos": [
        3262,
        3286
      ]
    },
    {
      "content": "This command gets the locations that support each type of resource, such as the provider for virtual machines.",
      "pos": [
        3287,
        3397
      ]
    },
    {
      "content": "Before you enter a location for a resource, use this command to verify that the location supports the resource type.",
      "pos": [
        3398,
        3514
      ]
    },
    {
      "content": "Because the list of locations can be long, and there are many providers, you can use tools to examine providers and locations before you use a location that isn't available yet.",
      "pos": [
        3520,
        3697
      ]
    },
    {
      "content": "The following script uses <bpt id=\"p1\">**</bpt>jq<ept id=\"p1\">**</ept> to discover the locations where the resource provider for Azure virtual machines is available.",
      "pos": [
        3698,
        3825
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>azure group template validate <ph id=\"ph1\">&lt;resource group&gt;</ph><ept id=\"p1\">**</ept>.",
      "pos": [
        4096,
        4147
      ]
    },
    {
      "content": "This command validates your templates and template parameters before you use them.",
      "pos": [
        4148,
        4230
      ]
    },
    {
      "content": "Enter a custom or gallery template and the template parameter values that  you plan to use.",
      "pos": [
        4231,
        4322
      ]
    },
    {
      "content": "The following example shows how to validate a template and any required parameters.",
      "pos": [
        4328,
        4411
      ]
    },
    {
      "content": "The Azure CLI prompts you for parameter values that are required.",
      "pos": [
        4412,
        4477
      ]
    },
    {
      "content": "Getting information to fix deployment issues with the Azure CLI",
      "pos": [
        4955,
        5018
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>azure group log show <ph id=\"ph1\">&lt;resource group&gt;</ph><ept id=\"p1\">**</ept>: This command gets the entries in the log for each deployment of the resource group.",
      "pos": [
        5022,
        5148
      ]
    },
    {
      "content": "If something goes wrong, begin by examining the deployment logs.",
      "pos": [
        5149,
        5213
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>--last-deployment<ept id=\"p1\">**</ept> option to retrieve only the log for the most recent deployment.",
      "pos": [
        7939,
        8032
      ]
    },
    {
      "content": "The following script uses the <bpt id=\"p1\">**</bpt>--json<ept id=\"p1\">**</ept> option and <bpt id=\"p2\">**</bpt>jq<ept id=\"p2\">**</ept> to search the log for deployment failures.",
      "pos": [
        8033,
        8134
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>--verbose and -vv options<ept id=\"p1\">**</ept>:  Use the <bpt id=\"p2\">**</bpt>--verbose<ept id=\"p2\">**</ept> option to set the mode to verbose, to display the steps the operations go through on <ph id=\"ph1\">`stdout`</ph>.",
      "pos": [
        11112,
        11260
      ]
    },
    {
      "content": "For a complete request history, include the steps that <bpt id=\"p1\">**</bpt>--verbose<ept id=\"p1\">**</ept> enables, use the <bpt id=\"p2\">**</bpt>-vv<ept id=\"p2\">**</ept> option.",
      "pos": [
        11261,
        11362
      ]
    },
    {
      "content": "The messages often provide vital clues about the cause of any failures.",
      "pos": [
        11363,
        11434
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Your Azure credentials have not been set up or have expired<ept id=\"p1\">**</ept>:  To refresh the credentials in your Azure CLI session, just type <ph id=\"ph1\">`azure login`</ph>.",
      "pos": [
        11438,
        11582
      ]
    },
    {
      "content": "For help with authentication errors, make sure that you have <bpt id=\"p1\">[</bpt>configured the Azure CLI correctly<ept id=\"p1\">](../xplat-cli-connect.md)</ept>.",
      "pos": [
        11583,
        11706
      ]
    },
    {
      "content": "Preventing errors in Windows PowerShell",
      "pos": [
        11711,
        11750
      ]
    },
    {
      "content": "The AzureResourceManager module includes cmdlets that help you to prevent errors.",
      "pos": [
        11752,
        11833
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Get-AzureLocation<ept id=\"p1\">**</ept>: This cmdlet gets the locations that support each type of resource.",
      "pos": [
        11838,
        11927
      ]
    },
    {
      "content": "Before you enter a location for a resource, use this cmdlet to verify that the location supports the resource type.",
      "pos": [
        11928,
        12043
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Test-AzureResourceGroupTemplate<ept id=\"p1\">**</ept>: Test your template and template parameter before you use them.",
      "pos": [
        12048,
        12147
      ]
    },
    {
      "content": "Enter a custom or gallery template and the template parameter values that you plan to use.",
      "pos": [
        12148,
        12238
      ]
    },
    {
      "content": "This cmdlet tests whether the template is internally consistent and whether your parameter value set matches the template.",
      "pos": [
        12239,
        12361
      ]
    },
    {
      "content": "Getting information to fix deployment issues in Windows PowerShell",
      "pos": [
        12366,
        12432
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Get-AzureResourceGroupLog<ept id=\"p1\">**</ept>: This cmdlet gets the entries in the log for each  deployment of the resource group.",
      "pos": [
        12436,
        12550
      ]
    },
    {
      "content": "If something goes wrong, begin by examining the deployment logs.",
      "pos": [
        12551,
        12615
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Verbose and Debug<ept id=\"p1\">**</ept>:  The cmdlets in the AzureResourceManager module call REST APIs that do the actual work.",
      "pos": [
        12619,
        12729
      ]
    },
    {
      "content": "To see the messages that the APIs return, set the $DebugPreference variable to \"Continue\" and use the Verbose common parameter in your commands.",
      "pos": [
        12730,
        12874
      ]
    },
    {
      "content": "The messages often provide vital clues about the cause of any failures.",
      "pos": [
        12875,
        12946
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Your Azure credentials have not been set up or have expired<ept id=\"p1\">**</ept>:  To refresh the credentials in your Windows PowerShell session, use the <bpt id=\"p2\">**</bpt>Add-AzureAccount<ept id=\"p2\">**</ept> cmdlet.",
      "pos": [
        12950,
        13115
      ]
    },
    {
      "content": "The credentials in a publish settings file are not sufficient for the cmdlets in the AzureResourceManager module.",
      "pos": [
        13116,
        13229
      ]
    },
    {
      "content": "Authentication, subscription, role, and quota issues",
      "pos": [
        13234,
        13286
      ]
    },
    {
      "content": "There can be one or more of several issues preventing successful deployment involving authentication and authorization and Azure Active Directory.",
      "pos": [
        13288,
        13434
      ]
    },
    {
      "content": "Regardless how you manage your Azure resource groups, the identity you use to sign in to your account must be either Azure Active Directory objects or Service Principals, which are also called work or school accounts, or organizational Ids.",
      "pos": [
        13435,
        13675
      ]
    },
    {
      "content": "But Azure Active Directory enables you or your administrator to control which identities can access what resources with a great degree of precision.",
      "pos": [
        13677,
        13825
      ]
    },
    {
      "content": "If your deployments are failing, examine the requests themselves for signs of authentication or authorization issues, and examine the deployment logs for your resource group.",
      "pos": [
        13826,
        14000
      ]
    },
    {
      "content": "You might find that while you have permissions for some resources, you do not have permissions for others.",
      "pos": [
        14001,
        14107
      ]
    },
    {
      "content": "Using the Azure CLI, you can examine Azure Active Directory tenants and users using the <ph id=\"ph1\">`azure ad`</ph> commands.",
      "pos": [
        14108,
        14216
      ]
    },
    {
      "content": "(For a complete list of Azure CLI commands, see <bpt id=\"p1\">[</bpt>Using the Azure CLI for Mac, Linux, and Windows with Azure Resource Manager<ept id=\"p1\">](azure-cli-arm-commands.md)</ept>.)",
      "pos": [
        14217,
        14371
      ]
    },
    {
      "content": "You might also have issues when a deployment hits a default quota, which could be per resource group, subscriptions, accounts, and other scopes.",
      "pos": [
        14373,
        14517
      ]
    },
    {
      "content": "Confirm to your satisfaction that you have the resources available to deploy correctly.",
      "pos": [
        14518,
        14605
      ]
    },
    {
      "content": "For complete quota information, see <bpt id=\"p1\">[</bpt>Azure subscription and service limits, quotas, and constraints<ept id=\"p1\">](../azure-subscription-service-limits.md)</ept>.",
      "pos": [
        14606,
        14748
      ]
    },
    {
      "content": "To examine your own subscription's quotas for cores, you should use the <ph id=\"ph1\">`azure vm list-usage`</ph> command in the Azure CLI and the <bpt id=\"p1\">**</bpt>Get-AzureVMUsage<ept id=\"p1\">**</ept> cmdlet in PowerShell.",
      "pos": [
        14750,
        14919
      ]
    },
    {
      "content": "The following shows the command in the Azure CLI, and illustrates that the core quota for a free trial account is 4:",
      "pos": [
        14920,
        15036
      ]
    },
    {
      "content": "If you were to try to deploy a template that creates more than 4 cores into the West US region on the above subscription, you would get a deployment error that might look something like this (either in the portal or by investigating the deployment logs):",
      "pos": [
        15304,
        15558
      ]
    },
    {
      "content": "In these cases, you should go to the portal and file a support issue to raise your quota for the region into which you want to deploy.",
      "pos": [
        15831,
        15965
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Remember that for resource groups, the quota is for each individual region, not for the entire subscription.",
      "pos": [
        15969,
        16090
      ]
    },
    {
      "content": "If you need to deploy 30 cores in West US, you have to ask for 30 Resource Manager cores in West US.",
      "pos": [
        16091,
        16191
      ]
    },
    {
      "content": "If you need to deploy 30 cores in any of the regions to which you have access, you should ask for 30 resource Manager cores in all regions.",
      "pos": [
        16192,
        16331
      ]
    },
    {
      "content": "To be specific about cores, for example, you can check the regions for which you should request the appropriate quota amount by using the following command, which pipes out to <bpt id=\"p1\">**</bpt>jq<ept id=\"p1\">**</ept> for json parsing.",
      "pos": [
        16341,
        16541
      ]
    },
    {
      "content": "Azure CLI and PowerShell mode issues",
      "pos": [
        17031,
        17067
      ]
    },
    {
      "content": "You might have the experience that Azure resources deployed using the service management API or using the portal are not visible using the Resource Manager API or the Azure portal.",
      "pos": [
        17069,
        17249
      ]
    },
    {
      "content": "It is important to manage resources using the same Resource Manager API or portal that you used to create them.",
      "pos": [
        17250,
        17361
      ]
    },
    {
      "content": "If a resource has disappeared, check to see if it is available using the other management API or portal.",
      "pos": [
        17362,
        17466
      ]
    },
    {
      "content": "Azure resource provider registration issues",
      "pos": [
        17471,
        17514
      ]
    },
    {
      "content": "Resources are managed by resource providers, and an account or subscription might be enabled to use a particular provider.",
      "pos": [
        17516,
        17638
      ]
    },
    {
      "content": "If you are enabled to use a provider, it must also be registered for use.",
      "pos": [
        17639,
        17712
      ]
    },
    {
      "content": "Most providers are registered automatically by the Azure portal or the command-line interface you are using, but not all.",
      "pos": [
        17713,
        17834
      ]
    },
    {
      "pos": [
        17836,
        17998
      ],
      "content": "To see whether the provider is registered for use using the Azure CLI, use the <ph id=\"ph1\">`azure provider list`</ph> command (the following is a truncated example of the output)."
    },
    {
      "content": "Again, if you want more information about providers, including their regional availability, type <ph id=\"ph1\">`azure provider list --json`</ph>.",
      "pos": [
        19037,
        19163
      ]
    },
    {
      "content": "The following selects only the first one in the list to view:",
      "pos": [
        19164,
        19225
      ]
    },
    {
      "pos": [
        19903,
        20053
      ],
      "content": "If a provider requires registration, use the <ph id=\"ph1\">`azure provider register &lt;namespace&gt;`</ph> command, where the <bpt id=\"p1\">*</bpt>namespace<ept id=\"p1\">*</ept> value comes from the preceding list."
    },
    {
      "content": "Understanding when a deployment succeeds for custom templates",
      "pos": [
        20058,
        20119
      ]
    },
    {
      "content": "If you are using templates that you created, it's important to understand that the Azure Resource Manager system reports success on a deployment when all providers return from deployment successfully.",
      "pos": [
        20121,
        20321
      ]
    },
    {
      "content": "This means that all of your template items were deployed for your usage.",
      "pos": [
        20322,
        20394
      ]
    },
    {
      "content": "Note however, that this does not necessarily mean that your resource group is \"active and ready for your users\".",
      "pos": [
        20396,
        20508
      ]
    },
    {
      "content": "For example, most deployments request the deployment to download upgrades, wait on other, non-template resources, or to install complex scripts or some other executable activity that Azure does not know about because it is not an activity that a provider is tracking.",
      "pos": [
        20509,
        20776
      ]
    },
    {
      "content": "In these cases, it can be some time before your resources are ready for real-world use.",
      "pos": [
        20777,
        20864
      ]
    },
    {
      "content": "As a result, you should expect that the deployment status succeeds some time before your deployment can be used.",
      "pos": [
        20865,
        20977
      ]
    },
    {
      "content": "You can prevent Azure from reporting deployment success, however, by creating a custom script for your custom template -- using the <bpt id=\"p1\">[</bpt>CustomScriptExtension<ept id=\"p1\">](http://azure.microsoft.com/blog/2014/08/20/automate-linux-vm-customization-tasks-using-customscript-extension/)</ept> for example -- that knows how to monitor the entire deployment for system-wide readiness and returns successfully only when users can interact with the entire deployment.",
      "pos": [
        20979,
        21417
      ]
    },
    {
      "content": "If you want to ensure that your extension is the last to run, use the <bpt id=\"p1\">**</bpt>dependsOn<ept id=\"p1\">**</ept> property in your template.",
      "pos": [
        21418,
        21528
      ]
    },
    {
      "content": "An example can be seen <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn790564.aspx)</ept>.",
      "pos": [
        21529,
        21615
      ]
    },
    {
      "content": "Merging templates",
      "pos": [
        21620,
        21637
      ]
    },
    {
      "content": "At times you might need to merge two templates together, or you might need to launch a child template from a parent.",
      "pos": [
        21639,
        21755
      ]
    },
    {
      "content": "This can be accomplished through the use of a deployment resource within the master template to deploy a child template.",
      "pos": [
        21756,
        21876
      ]
    },
    {
      "content": "Crossing resource groups",
      "pos": [
        22611,
        22635
      ]
    },
    {
      "content": "Often you might want to use a resource from outside of the current resource group where a template is getting deployed.",
      "pos": [
        22637,
        22756
      ]
    },
    {
      "content": "The most common case for this behavior is using a Storage account or virtual network in an alternate resource group.",
      "pos": [
        22757,
        22873
      ]
    },
    {
      "content": "This is often needed so that the deletion of the resource group which contains the virtual machines will not result in the deletion of the VHD blobs or a VNet that is used by multiple resource groups.",
      "pos": [
        22874,
        23074
      ]
    },
    {
      "content": "The following example shows how a resource from an external resource group can be used:",
      "pos": [
        23075,
        23162
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        24533,
        24543
      ]
    },
    {
      "content": "To master the creation of templates, read through the <bpt id=\"p1\">[</bpt>Authoring Azure Resource Manager templates<ept id=\"p1\">](../resource-group-authoring-templates.md)</ept>, and walk through the <bpt id=\"p2\">[</bpt>Azure quickstart templates repository<ept id=\"p2\">](https://github.com/Azure/azure-quickstart-templates)</ept> for deployable examples.",
      "pos": [
        24545,
        24825
      ]
    },
    {
      "content": "An examples of the <bpt id=\"p1\">**</bpt>dependsOn<ept id=\"p1\">**</ept> property is the <bpt id=\"p2\">[</bpt>Create a VM with multiple NICs and RDP accessible<ept id=\"p2\">](https://github.com/Azure/azure-quickstart-templates/tree/master/201-1-vm-loadbalancer-2-nics)</ept>.",
      "pos": [
        24826,
        25021
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Troubleshooting resource group deployments in Azure\"\n   description=\"Describes common problems deploying resources in Azure, and shows how to use the Azure portal, the Azure Command-Line Interface for Mac, Linux, and Windows (Azure CLI), and PowerShell to examine deployments and detect issues.\"\n   services=\"virtual-machines\"\n   documentationCenter=\"\"\n   authors=\"squillace\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"virtual-machines\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"command-line-interface\"\n   ms.workload=\"infrastructure\"\n   ms.date=\"08/26/2015\"\n   ms.author=\"rasquill\"/>\n\n# Troubleshooting resource group deployments in Azure\n\nDeployments can fail for any number of reasons. It is far better to prevent deployment errors by checking a few things in advance. This document describes tools and operations to prevent simple mistakes, to download template files, and to examine deployment logs. It also discusses the main areas to think about when examining deployment logs for failures.\n\n## Useful tools to interact with Azure\nWhen you work with your Azure resources from the command-line, you will collect tools that help you do your work. Azure resource group templates are JSON documents, and the Azure Resource Manager API accepts and returns JSON, so JSON parsing tools are some of the first things you will use to help you navigate information about your resources and to design or interact with templates and template parameter files.\n\n### Mac, Linux, and Windows tools\nIf you use the Azure Command-Line Interface for Mac, Linux, and Windows, you are probably familiar with standard download tools such as **[curl](http://curl.haxx.se/)** and **[wget](https://www.gnu.org/software/wget/)**, or **[Resty](https://github.com/beders/Resty)**, and JSON utilities such as **[jq](http://stedolan.github.io/jq/download/)**, **[jsawk](https://github.com/micha/jsawk)**, and language libraries that handle JSON well. (Many of these tools also have ports for Windows, such as [wget](http://gnuwin32.sourceforge.net/packages/wget.htm); in fact, there are several ways to get Linux and other open-source software tools running on Windows as well.)\n\nThis topic includes some Azure CLI commands that you can use with **jq** to obtain precisely the information that you want more efficiently. You should choose the toolset that you are comfortable with to help you understand your Azure resource usage.\n\n### Windows PowerShell\n\nWindows PowerShell has several basic commands to perform the same procedures.\n\n- Use the **[Invoke-WebRequest](https://technet.microsoft.com/library/hh849901%28v=wps.640%29)** cmdlet to download files such as resource group templates or parameters JSON files.\n- Use the **[ConvertFrom-Json](https://technet.microsoft.com/library/hh849898%28v=wps.640%29.aspx)** cmdlet to convert a JSON string to a custom object ([PSCustomObject](https://msdn.microsoft.com/library/windows/desktop/system.management.automation.pscustomobject%28v=vs.85%29.aspx)) that has a property for each field in the JSON string.\n\n## Preventing errors in the Azure CLI for Mac, Linux, and Windows\n\nThe Azure CLI has several commands to help prevent errors and detect what went wrong when errors occur.\n\n- **azure location list**. This command gets the locations that support each type of resource, such as the provider for virtual machines. Before you enter a location for a resource, use this command to verify that the location supports the resource type.\n\n    Because the list of locations can be long, and there are many providers, you can use tools to examine providers and locations before you use a location that isn't available yet. The following script uses **jq** to discover the locations where the resource provider for Azure virtual machines is available.\n\n        azure location list --json | jq '.[] | select(.name == \"Microsoft.Compute/virtualMachines\")'\n        {\n          \"name\": \"Microsoft.Compute/virtualMachines\",\n          \"location\": \"East US,West US,West Europe,East Asia,Southeast Asia,North Europe\"\n        }\n\n- **azure group template validate <resource group>**. This command validates your templates and template parameters before you use them. Enter a custom or gallery template and the template parameter values that  you plan to use.\n\n    The following example shows how to validate a template and any required parameters. The Azure CLI prompts you for parameter values that are required.\n\n        azure group template validate \\\n        > --template-uri \"https://contoso.com/templates/azuredeploy.json\" \\\n        > resource-group\n        info:    Executing command group template validate\n        info:    Supply values for the following parameters\n        adminUserName: UserName\n        adminPassword: PassWord\n        + Initializing template configurations and parameters\n        + Validating the template\n        info:    group template validate command OK\n\n## Getting information to fix deployment issues with the Azure CLI\n\n- **azure group log show <resource group>**: This command gets the entries in the log for each deployment of the resource group. If something goes wrong, begin by examining the deployment logs.\n\n        info:    Executing command group log show\n        info:    Getting group logs\n        data:    ----------\n        data:    EventId:              <guid>\n        data:    Authorization:\n        data:                          action: Microsoft.Network/networkInterfaces/write\n        data:                          role:   Subscription Admin\n        data:                          scope:  /subscriptions/xxxxxxxxxxx/resourcegroups/templates/\n                                               providers/Microsoft.Network/\n                                               networkInterfaces/myNic\n        data:    ResourceUri:          /subscriptions/xxxxxxxxxxxx/resourcegroups/templates/providers/\n                                       Microsoft.Network/networkInterfaces/myNic\n        data:    SubscriptionId:       <guid>\n        data:    EventTimestamp (UTC): Wed Apr 22 2015 05:53:31 GMT+0000 (UTC)\n        data:    OperationName:        Microsoft.Network/networkInterfaces/write\n        data:    OperationId:          <guid>\n        data:    Status:               Started\n        data:    SubStatus:\n        data:    Caller:\n        data:    CorrelationId:        <guid>\n        data:    Description:\n        data:    HttpRequest:          clientRequestId: <guid>\n                                       clientIpAddress: 000.000.00.000\n                                       method:          PUT\n\n        data:    Level:                Informational\n        data:    ResourceGroup:        templates\n        data:    ResourceProvider:     Microsoft.Network\n        data:    EventSource:          Microsoft Resources\n        data:    Properties:           requestbody: {\"location\":\"West US\",\"properties\n                                       \":{\"ipConfigurations\":[{\"\n                                       name\":\"ipconfig1\",\"properties\":{\"\n                                       privateIPAllocationMethod\n\n                                       \":\"Dynamic\",\"publicIPAddress\":{\"id\":\"/\n                                       subscriptions/\n                                       <guid>/\n                                       resourceGroups/\n                                       templates/providers/Microsoft.Network/\n                                       publicIPAddresses/\n                                       myPublicIP\"},\"subnet\":{\"idThe AzureResourceManager module includes cmdlets that \":\"/subscriptions/\n                                       <guid>/resourceGroups/templates/\n                                       providers/\n                                       Microsoft.Network/virtualNetworks/myVNET/subnets/\n                                       Subnet-1\n                                       \"}}}]}}\n\nUse the **--last-deployment** option to retrieve only the log for the most recent deployment. The following script uses the **--json** option and **jq** to search the log for deployment failures.\n\n        azure group log show templates --json | jq '.[] | select(.status.value == \"Failed\")'\n\n        {\n          \"claims\": {\n            \"aud\": \"https://management.core.windows.net/\",\n            \"iss\": \"https://sts.windows.net/<guid>/\",\n            \"iat\": \"1429678549\",\n            \"nbf\": \"1429678549\",\n            \"exp\": \"1429682449\",\n            \"ver\": \"1.0\",\n            \"http://schemas.microsoft.com/identity/claims/tenantid\": \"<guid>\",\n            \"http://schemas.microsoft.com/identity/claims/objectidentifier\": \"<guid>\",\n            \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\": \"ahmet@contoso.onmicrosoft.com\",\n            \"puid\": \"XXXXXXXXXXXXXX\",\n            \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\": \"<hash string>\",\n            \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\": \"ahmet\",\n            \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\": \"\",\n            \"name\": \"Friendly Name\",\n            \"http://schemas.microsoft.com/claims/authnmethodsreferences\": \"pwd\",\n            \"groups\": \"<guid>\",\n            \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\": \"ahmet@contoso.onmicrosoft.com\",\n            \"appid\": \"<guid>\",\n            \"appidacr\": \"0\",\n            \"http://schemas.microsoft.com/identity/claims/scope\": \"user_impersonation\",\n            \"http://schemas.microsoft.com/claims/authnclassreference\": \"1\"\n          },\n          \"properties\": {},\n          \"authorization\": {\n            \"action\": \"Microsoft.Resources/subscriptions/resourcegroups/deployments/write\",\n            \"role\": \"Subscription Admin\",\n            \"scope\": \"/subscriptions/<guid>/resourcegroups/templates/deployments/basic-vm-version-0.1\"\n          },\n          \"eventChannels\": \"Operation\",\n          \"eventDataId\": \"<guid>\",\n          \"correlationId\": \"<guid>\",\n          \"eventName\": {\n            \"value\": \"EndRequest\",\n            \"localizedValue\": \"End request\"\n          },\n          \"eventSource\": {\n            \"value\": \"Microsoft.Resources\",\n            \"localizedValue\": \"Microsoft Resources\"\n          },\n          \"level\": \"Error\",\n          \"resourceGroupName\": \"templates\",\n          \"resourceProviderName\": {\n            \"value\": \"Microsoft.Resources\",\n            \"localizedValue\": \"Microsoft Resources\"\n          },\n          \"resourceUri\": \"/subscriptions/<guid>/resourcegroups/templates/deployments/basic-vm-version-0.1\",\n          \"operationId\": \"<guid>\",\n          \"operationName\": {\n            \"value\": \"Microsoft.Resources/subscriptions/resourcegroups/deployments/write\",\n            \"localizedValue\": \"Update deployment\"\n          },\n          \"status\": {\n            \"value\": \"Failed\",\n            \"localizedValue\": \"Failed\"\n          },\n          \"subStatus\": {},\n          \"eventTimestamp\": \"2015-04-22T05:53:40.8150293Z\",\n          \"submissionTimestamp\": \"2015-04-22T05:54:00.6728843Z\",10037FFE8E80BB65\n          \"subscriptionId\": \"<guid>\"\n        }\n\n\n- **--verbose and -vv options**:  Use the **--verbose** option to set the mode to verbose, to display the steps the operations go through on `stdout`. For a complete request history, include the steps that **--verbose** enables, use the **-vv** option. The messages often provide vital clues about the cause of any failures.\n\n- **Your Azure credentials have not been set up or have expired**:  To refresh the credentials in your Azure CLI session, just type `azure login`. For help with authentication errors, make sure that you have [configured the Azure CLI correctly](../xplat-cli-connect.md).\n\n## Preventing errors in Windows PowerShell\n\nThe AzureResourceManager module includes cmdlets that help you to prevent errors.\n\n\n- **Get-AzureLocation**: This cmdlet gets the locations that support each type of resource. Before you enter a location for a resource, use this cmdlet to verify that the location supports the resource type.\n\n\n- **Test-AzureResourceGroupTemplate**: Test your template and template parameter before you use them. Enter a custom or gallery template and the template parameter values that you plan to use. This cmdlet tests whether the template is internally consistent and whether your parameter value set matches the template.\n\n## Getting information to fix deployment issues in Windows PowerShell\n\n- **Get-AzureResourceGroupLog**: This cmdlet gets the entries in the log for each  deployment of the resource group. If something goes wrong, begin by examining the deployment logs.\n\n- **Verbose and Debug**:  The cmdlets in the AzureResourceManager module call REST APIs that do the actual work. To see the messages that the APIs return, set the $DebugPreference variable to \"Continue\" and use the Verbose common parameter in your commands. The messages often provide vital clues about the cause of any failures.\n\n- **Your Azure credentials have not been set up or have expired**:  To refresh the credentials in your Windows PowerShell session, use the **Add-AzureAccount** cmdlet. The credentials in a publish settings file are not sufficient for the cmdlets in the AzureResourceManager module.\n\n## Authentication, subscription, role, and quota issues\n\nThere can be one or more of several issues preventing successful deployment involving authentication and authorization and Azure Active Directory. Regardless how you manage your Azure resource groups, the identity you use to sign in to your account must be either Azure Active Directory objects or Service Principals, which are also called work or school accounts, or organizational Ids.\n\nBut Azure Active Directory enables you or your administrator to control which identities can access what resources with a great degree of precision. If your deployments are failing, examine the requests themselves for signs of authentication or authorization issues, and examine the deployment logs for your resource group. You might find that while you have permissions for some resources, you do not have permissions for others. Using the Azure CLI, you can examine Azure Active Directory tenants and users using the `azure ad` commands. (For a complete list of Azure CLI commands, see [Using the Azure CLI for Mac, Linux, and Windows with Azure Resource Manager](azure-cli-arm-commands.md).)\n\nYou might also have issues when a deployment hits a default quota, which could be per resource group, subscriptions, accounts, and other scopes. Confirm to your satisfaction that you have the resources available to deploy correctly. For complete quota information, see [Azure subscription and service limits, quotas, and constraints](../azure-subscription-service-limits.md).\n\nTo examine your own subscription's quotas for cores, you should use the `azure vm list-usage` command in the Azure CLI and the **Get-AzureVMUsage** cmdlet in PowerShell. The following shows the command in the Azure CLI, and illustrates that the core quota for a free trial account is 4:\n\n    azure vm list-usage\n    info:    Executing command vm list-usage\n    Location: westus\n    data:    Name   Unit   CurrentValue  Limit\n    data:    -----  -----  ------------  -----\n    data:    Cores  Count  0             4\n    info:    vm list-usage command OK\n\nIf you were to try to deploy a template that creates more than 4 cores into the West US region on the above subscription, you would get a deployment error that might look something like this (either in the portal or by investigating the deployment logs):\n\n    statusCode:Conflict\n    serviceRequestId:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    statusMessage:{\"error\":{\"code\":\"OperationNotAllowed\",\"message\":\"Operation results in exceeding quota limits of Core. Maximum allowed: 4, Current in use: 4, Additional requested: 2.\"}}\n\nIn these cases, you should go to the portal and file a support issue to raise your quota for the region into which you want to deploy.\n\n> [AZURE.NOTE] Remember that for resource groups, the quota is for each individual region, not for the entire subscription. If you need to deploy 30 cores in West US, you have to ask for 30 Resource Manager cores in West US. If you need to deploy 30 cores in any of the regions to which you have access, you should ask for 30 resource Manager cores in all regions.\n<!-- -->\nTo be specific about cores, for example, you can check the regions for which you should request the appropriate quota amount by using the following command, which pipes out to **jq** for json parsing.\n<!-- -->\n        azure provider show Microsoft.Compute --json | jq '.resourceTypes[] | select(.name == \"virtualMachines\") | { name,apiVersions, locations}'\n        {\n          \"name\": \"virtualMachines\",\n          \"apiVersions\": [\n            \"2015-05-01-preview\",\n            \"2014-12-01-preview\"\n          ],\n          \"locations\": [\n            \"East US\",\n            \"West US\",\n            \"West Europe\",\n            \"East Asia\",\n            \"Southeast Asia\"\n          ]\n        }\n\n\n## Azure CLI and PowerShell mode issues\n\nYou might have the experience that Azure resources deployed using the service management API or using the portal are not visible using the Resource Manager API or the Azure portal. It is important to manage resources using the same Resource Manager API or portal that you used to create them. If a resource has disappeared, check to see if it is available using the other management API or portal.\n\n## Azure resource provider registration issues\n\nResources are managed by resource providers, and an account or subscription might be enabled to use a particular provider. If you are enabled to use a provider, it must also be registered for use. Most providers are registered automatically by the Azure portal or the command-line interface you are using, but not all.\n\nTo see whether the provider is registered for use using the Azure CLI, use the `azure provider list` command (the following is a truncated example of the output).\n\n        azure provider list\n        info:    Executing command provider list\n        + Getting ARM registered providers\n        data:    Namespace                        Registered\n        data:    -------------------------------  -------------\n        data:    Microsoft.Compute                Registered\n        data:    Microsoft.Network                Registered  \n        data:    Microsoft.Storage                Registered\n        data:    microsoft.visualstudio           Registered\n        data:    Microsoft.Authorization          Registered\n        data:    Microsoft.Automation             NotRegistered\n        data:    Microsoft.Backup                 NotRegistered\n        data:    Microsoft.BizTalkServices        NotRegistered\n        data:    Microsoft.Features               Registered\n        data:    Microsoft.Search                 NotRegistered\n        data:    Microsoft.ServiceBus             NotRegistered\n        data:    Microsoft.Sql                    Registered\n        info:    provider list command OK\n\nAgain, if you want more information about providers, including their regional availability, type `azure provider list --json`. The following selects only the first one in the list to view:\n\n        azure provider list --json | jq '.[0]'\n        {\n          \"resourceTypes\": [\n            {\n              \"apiVersions\": [\n                \"2014-02-14\"\n              ],\n              \"locations\": [\n                \"North Central US\",\n                \"East US\",\n                \"West US\",\n                \"North Europe\",\n                \"West Europe\",\n                \"East Asia\"\n              ],\n              \"properties\": {},\n              \"name\": \"service\"\n            }\n          ],\n          \"id\": \"/subscriptions/<guid>/providers/Microsoft.ApiManagement\",\n          \"namespace\": \"Microsoft.ApiManagement\",\n          \"registrationState\": \"Registered\"\n        }\n\n\nIf a provider requires registration, use the `azure provider register <namespace>` command, where the *namespace* value comes from the preceding list.\n\n## Understanding when a deployment succeeds for custom templates\n\nIf you are using templates that you created, it's important to understand that the Azure Resource Manager system reports success on a deployment when all providers return from deployment successfully. This means that all of your template items were deployed for your usage.\n\nNote however, that this does not necessarily mean that your resource group is \"active and ready for your users\". For example, most deployments request the deployment to download upgrades, wait on other, non-template resources, or to install complex scripts or some other executable activity that Azure does not know about because it is not an activity that a provider is tracking. In these cases, it can be some time before your resources are ready for real-world use. As a result, you should expect that the deployment status succeeds some time before your deployment can be used.\n\nYou can prevent Azure from reporting deployment success, however, by creating a custom script for your custom template -- using the [CustomScriptExtension](http://azure.microsoft.com/blog/2014/08/20/automate-linux-vm-customization-tasks-using-customscript-extension/) for example -- that knows how to monitor the entire deployment for system-wide readiness and returns successfully only when users can interact with the entire deployment. If you want to ensure that your extension is the last to run, use the **dependsOn** property in your template. An example can be seen [here](https://msdn.microsoft.com/library/azure/dn790564.aspx).\n\n## Merging templates\n\nAt times you might need to merge two templates together, or you might need to launch a child template from a parent. This can be accomplished through the use of a deployment resource within the master template to deploy a child template.\n\n\n    {\n            \"name\": \"instance01\",\n            \"type\": \"Microsoft.Resources/deployments\",\n            \"apiVersion\": \"2015-01-01\",\n            \"properties\": {\n                \"mode\": \"Incremental\",\n                \"templateLink\": {\n                    \"uri\": \"https://mystore.blob.windows.net/azurermtemplates/my-child-template.json\",\n                    \"contentVersion\": \"1.0.0.0\"\n                },\n                \"parameters\": {\n                    \"storageAccountName\": { \"value\": \"[variables('stgAcctName1')]\" },\n                    \"adminUsername\": { \"value\": \"[parameters('adminUsername')]\" },\n                    \"adminPassword\": { \"value\": \"[parameters('adminPassword')]\" }\n                }\n            }\n    }\n\n\n## Crossing resource groups\n\nOften you might want to use a resource from outside of the current resource group where a template is getting deployed. The most common case for this behavior is using a Storage account or virtual network in an alternate resource group. This is often needed so that the deletion of the resource group which contains the virtual machines will not result in the deletion of the VHD blobs or a VNet that is used by multiple resource groups. The following example shows how a resource from an external resource group can be used:\n\n\n    {\n      \"$schema\": \"http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json\",\n      \"contentVersion\": \"1.0.0.0\",\n      \"parameters\": {\n          \"virtualNetworkName\": {\n              \"type\": \"string\"\n          },\n          \"virtualNetworkResourceGroup\": {\n              \"type\": \"string\"\n          },\n          \"subnet1Name\": {\n              \"type\": \"string\"\n          },\n          \"nicName\": {\n              \"type\": \"string\"\n          }\n      },\n      \"variables\": {\n          \"vnetID\": \"[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]\",\n          \"subnet1Ref\": \"[concat(variables('vnetID'),'/subnets/', parameters('subnet1Name'))]\"\n      },\n      \"resources\": [\n      {\n          \"apiVersion\": \"2015-05-01-preview\",\n          \"type\": \"Microsoft.Network/networkInterfaces\",\n          \"name\": \"[parameters('nicName')]\",\n          \"location\": \"[parameters('location')]\",\n          \"properties\": {\n              \"ipConfigurations\": [{\n                  \"name\": \"ipconfig1\",\n                  \"properties\": {\n                      \"privateIPAllocationMethod\": \"Dynamic\",\n                      \"subnet\": {\n                          \"id\": \"[variables('subnet1Ref')]\"\n                      }\n                  }\n              }]\n           }\n      }]\n\n    }\n\n## Next steps\n\nTo master the creation of templates, read through the [Authoring Azure Resource Manager templates](../resource-group-authoring-templates.md), and walk through the [Azure quickstart templates repository](https://github.com/Azure/azure-quickstart-templates) for deployable examples. An examples of the **dependsOn** property is the [Create a VM with multiple NICs and RDP accessible](https://github.com/Azure/azure-quickstart-templates/tree/master/201-1-vm-loadbalancer-2-nics).\n\n<!--Image references-->\n\n<!--Reference style links - using these makes the source content way more readable than using inline links-->\n"
}