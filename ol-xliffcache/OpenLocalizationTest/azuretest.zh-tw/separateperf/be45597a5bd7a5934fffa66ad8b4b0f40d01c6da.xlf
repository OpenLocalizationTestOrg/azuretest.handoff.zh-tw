<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Service Fabric Actors Distributed Networks and Graphs design pattern</source>
          <target state="new">Azure Service Fabric Actors Distributed Networks and Graphs design pattern</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Design pattern on how Service Fabric Actors can be used to model application as distributed networks and graphs</source>
          <target state="new">Design pattern on how Service Fabric Actors can be used to model application as distributed networks and graphs</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reliable Actors design pattern: distributed networks and graphs</source>
          <target state="new">Reliable Actors design pattern: distributed networks and graphs</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric Reliable Actors is a natural fit for modeling complex solutions involving relations and modeling those relations as objects.</source>
          <target state="new">Service Fabric Reliable Actors is a natural fit for modeling complex solutions involving relations and modeling those relations as objects.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>![][1]</source>
          <target state="new">![][1]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>As the diagram illustrates it is straightforward to model a user as an actor instance (node in the network).</source>
          <target state="new">As the diagram illustrates it is straightforward to model a user as an actor instance (node in the network).</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the “Friends Feed” (sometimes referred as the "follower" problem) allows users to view status updates from people they are connected to, similar to how Facebook and Twitter work.</source>
          <target state="new">For example, the “Friends Feed” (sometimes referred as the "follower" problem) allows users to view status updates from people they are connected to, similar to how Facebook and Twitter work.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Actor model provides flexibility to approach the materialization problem.</source>
          <target state="new">The Actor model provides flexibility to approach the materialization problem.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We can populate the Friends Feed at event time, updating the Friends Feed of all my friends at the moment an update is posted, as illustrated below:</source>
          <target state="new">We can populate the Friends Feed at event time, updating the Friends Feed of all my friends at the moment an update is posted, as illustrated below:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>![][2]</source>
          <target state="new">![][2]</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Smart Cache code sample – Social Network Friends Feed (event time)</source>
          <target state="new">Smart Cache code sample – Social Network Friends Feed (event time)</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Sample code populating Friends Feed:</source>
          <target state="new">Sample code populating Friends Feed:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Alternatively we can model our Actors to fan out and compile the Friends Feed at the query timer, in other words when the user asks for their friends feed.</source>
          <target state="new">Alternatively we can model our Actors to fan out and compile the Friends Feed at the query timer, in other words when the user asks for their friends feed.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Another method we can use is materializing the Friends Feed on a timer, for example, every 5 minutes.</source>
          <target state="new">Another method we can use is materializing the Friends Feed on a timer, for example, every 5 minutes.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Or, we can optimize the model and combine both event time and query time processing with a timer-based model depending on user habits, such as how often they login or post an update.</source>
          <target state="new">Or, we can optimize the model and combine both event time and query time processing with a timer-based model depending on user habits, such as how often they login or post an update.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When modelling an actor in a social network, one should also consider “super users,” users with millions of followers.</source>
          <target state="new">When modelling an actor in a social network, one should also consider “super users,” users with millions of followers.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Developers should model the state and behaviour of such users differently to meet the demand.</source>
          <target state="new">Developers should model the state and behaviour of such users differently to meet the demand.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Similarly, if we want to model an activity that connects many user actors to a single activity actor (hub and spoke) that can be done as well.</source>
          <target state="new">Similarly, if we want to model an activity that connects many user actors to a single activity actor (hub and spoke) that can be done as well.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Group chat or game hosting scenarios are two examples.</source>
          <target state="new">Group chat or game hosting scenarios are two examples.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let’s take the group chat example; a set of participants create a group chat actor that can distribute messages from one participant to the group as in the example below:</source>
          <target state="new">Let’s take the group chat example; a set of participants create a group chat actor that can distribute messages from one participant to the group as in the example below:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Smart Cache code sample – GroupChat</source>
          <target state="new">Smart Cache code sample – GroupChat</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All it really does is leverage Reliable Actors' ability to allow any actor to address any other actor in the cluster by id and communicate with it without needing to worry about placement, addressing, caching, messaging, serialization, or routing.</source>
          <target state="new">All it really does is leverage Reliable Actors' ability to allow any actor to address any other actor in the cluster by id and communicate with it without needing to worry about placement, addressing, caching, messaging, serialization, or routing.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="new">Next Steps</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Pattern: Smart Cache</source>
          <target state="new">Pattern: Smart Cache</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Pattern: Resource Governance</source>
          <target state="new">Pattern: Resource Governance</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pattern: Stateful Service Composition</source>
          <target state="new">Pattern: Stateful Service Composition</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Pattern: Internet of Things</source>
          <target state="new">Pattern: Internet of Things</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern: Distributed Computation</source>
          <target state="new">Pattern: Distributed Computation</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Some Anti-patterns</source>
          <target state="new">Some Anti-patterns</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Introduction to Service Fabric Actors</source>
          <target state="new">Introduction to Service Fabric Actors</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be45597a5bd7a5934fffa66ad8b4b0f40d01c6da</xliffext:olfilehash>
  </header>
</xliff>