{
  "nodes": [
    {
      "content": "Monitor your workload using DMVs | Microsoft Azure",
      "pos": [
        26,
        76
      ]
    },
    {
      "content": "Learn how to monitor your workload using DMVs.",
      "pos": [
        94,
        140
      ]
    },
    {
      "content": "Monitor your workload using DMVs",
      "pos": [
        448,
        480
      ]
    },
    {
      "content": "This article describes how to use Dynamic Management Views (DMVs) to monitor your workload and investigate query execution in Azure SQL Data Warehouse.",
      "pos": [
        482,
        633
      ]
    },
    {
      "content": "Permissions",
      "pos": [
        641,
        652
      ]
    },
    {
      "content": "In SQL Data Warehouse, querying a dynamic management view requires <bpt id=\"p1\">**</bpt>VIEW DATABASE STATE<ept id=\"p1\">**</ept> permissions.",
      "pos": [
        654,
        757
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>VIEW DATABASE STATE<ept id=\"p1\">**</ept> permission returns information about all objects within the current database.",
      "pos": [
        758,
        863
      ]
    },
    {
      "content": "To grant the <bpt id=\"p1\">**</bpt>VIEW DATABASE STATE<ept id=\"p1\">**</ept> permission to a specific database user, run the following query:",
      "pos": [
        864,
        965
      ]
    },
    {
      "content": "Monitor Connections",
      "pos": [
        1028,
        1047
      ]
    },
    {
      "content": "You can use the <bpt id=\"p1\">*</bpt>sys.dm_pdw_nodes_exec_connections<ept id=\"p1\">*</ept> view to retrieve information about the connections established to your Azure SQL Data Warehouse database.",
      "pos": [
        1049,
        1206
      ]
    },
    {
      "content": "In addition, the <bpt id=\"p1\">*</bpt>sys.dm_exec_sessions<ept id=\"p1\">*</ept> view is helpful when retrieving information about all active user connections.",
      "pos": [
        1207,
        1325
      ]
    },
    {
      "content": "Use the following query to retrieve the information on the current connection.",
      "pos": [
        1434,
        1512
      ]
    },
    {
      "content": "Investigate Query Execution",
      "pos": [
        1696,
        1723
      ]
    },
    {
      "content": "You might encounter situations where your query is not completing or is running longer than expected.",
      "pos": [
        1724,
        1825
      ]
    },
    {
      "content": "In such cases you can use the following steps to collect data and narrow down the issue.",
      "pos": [
        1826,
        1914
      ]
    },
    {
      "content": "STEP 1: Find the query to investigate",
      "pos": [
        1922,
        1959
      ]
    },
    {
      "content": "Save the Request ID of the query.",
      "pos": [
        2174,
        2207
      ]
    },
    {
      "content": "STEP 2: Check if the query is waiting for resources",
      "pos": [
        2217,
        2268
      ]
    },
    {
      "content": "The results of the above query will show you the wait state of your request.",
      "pos": [
        2804,
        2880
      ]
    },
    {
      "pos": [
        2884,
        2985
      ],
      "content": "If the query is waiting on resources from another query, then the state will be <bpt id=\"p1\">**</bpt>AcquireResources<ept id=\"p1\">**</ept>."
    },
    {
      "content": "If the query has all the required resources and is not waiting, then the state will be <bpt id=\"p1\">**</bpt>Granted<ept id=\"p1\">**</ept>.",
      "pos": [
        2988,
        3087
      ]
    },
    {
      "content": "In this case, proceed to look at the query steps.",
      "pos": [
        3088,
        3137
      ]
    },
    {
      "content": "STEP 3: Find the longest running step of the query",
      "pos": [
        3146,
        3196
      ]
    },
    {
      "content": "Use the Request ID to retrieve a list of all the distributed query steps.",
      "pos": [
        3198,
        3271
      ]
    },
    {
      "content": "Find the long-running step by looking at the total elapsed time.",
      "pos": [
        3272,
        3336
      ]
    },
    {
      "content": "Save the Step Index of the long-running step.",
      "pos": [
        3551,
        3596
      ]
    },
    {
      "pos": [
        3598,
        3663
      ],
      "content": "Check the <bpt id=\"p1\">*</bpt>operation_type<ept id=\"p1\">*</ept> column of the long-running query step:"
    },
    {
      "pos": [
        3667,
        3758
      ],
      "content": "Proceed with Step 4a for <bpt id=\"p1\">**</bpt>SQL operations<ept id=\"p1\">**</ept>: OnOperation, RemoteOperation, ReturnOperation."
    },
    {
      "pos": [
        3761,
        3934
      ],
      "content": "Proceed with Step 4b for <bpt id=\"p1\">**</bpt>Data Movement operations<ept id=\"p1\">**</ept>: ShuffleMoveOperation, BroadcastMoveOperation, TrimMoveOperation, PartitionMoveOperation, MoveOperation, CopyOperation."
    },
    {
      "content": "STEP 4a: Find the execution progress of a SQL Step",
      "pos": [
        3943,
        3993
      ]
    },
    {
      "content": "Use the Request ID and the Step Index to retrieve information about the SQL Server query distribution as a part of the SQL Step in the query.",
      "pos": [
        3995,
        4136
      ]
    },
    {
      "content": "Save the Node ID and SPID.",
      "pos": [
        4137,
        4163
      ]
    },
    {
      "content": "Use the following query to retrieve the SQL Server execution plan for the SQL Step on a particular node.",
      "pos": [
        4385,
        4489
      ]
    },
    {
      "content": "STEP 4b: Find the execution progress of a DMS Step",
      "pos": [
        4722,
        4772
      ]
    },
    {
      "content": "Use the Request ID and the Step Index to retrieve information about the Data Movement Step running on each distribution.",
      "pos": [
        4774,
        4894
      ]
    },
    {
      "pos": [
        5146,
        5281
      ],
      "content": "Check the <bpt id=\"p1\">*</bpt>total_elapsed_time<ept id=\"p1\">*</ept> column to see if a particular distribution is taking significantly longer than others for data movement."
    },
    {
      "content": "For the long-running distribution, check the <bpt id=\"p1\">*</bpt>rows_processed<ept id=\"p1\">*</ept> column to see if the number of rows being moved from that distribution is significantly larger than others.",
      "pos": [
        5285,
        5454
      ]
    },
    {
      "content": "This shows that your query has data skew.",
      "pos": [
        5455,
        5496
      ]
    },
    {
      "content": "Investigate Data Skew",
      "pos": [
        5505,
        5526
      ]
    },
    {
      "content": "The result of this query will show you the number of table rows that are stored in each of the 60 distributions of your database.",
      "pos": [
        5631,
        5760
      ]
    },
    {
      "content": "For optimal performance, the rows in your distributed table should be spread evenly across all the distributions.",
      "pos": [
        5761,
        5874
      ]
    },
    {
      "content": "To learn more, see <bpt id=\"p1\">[</bpt>table design<ept id=\"p1\">][]</ept>.",
      "pos": [
        5875,
        5911
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        5918,
        5928
      ]
    },
    {
      "pos": [
        5929,
        6004
      ],
      "content": "For more tips on managing your SQL Data Warehouse, see <bpt id=\"p1\">[</bpt>manage overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Monitor your workload using DMVs | Microsoft Azure\"\n   description=\"Learn how to monitor your workload using DMVs.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"sahaj08\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"08/06/2015\"\n   ms.author=\"sahajs\"/>\n\n# Monitor your workload using DMVs\n\nThis article describes how to use Dynamic Management Views (DMVs) to monitor your workload and investigate query execution in Azure SQL Data Warehouse.\n\n\n\n\n## Permissions\n\nIn SQL Data Warehouse, querying a dynamic management view requires **VIEW DATABASE STATE** permissions. The **VIEW DATABASE STATE** permission returns information about all objects within the current database.\nTo grant the **VIEW DATABASE STATE** permission to a specific database user, run the following query:\n\n```\n\nGRANT VIEW DATABASE STATE TO database_user;\n\n```\n\n\n\n\n## Monitor Connections\n\nYou can use the *sys.dm_pdw_nodes_exec_connections* view to retrieve information about the connections established to your Azure SQL Data Warehouse database. In addition, the *sys.dm_exec_sessions* view is helpful when retrieving information about all active user connections.\n\n```\n\nSELECT * FROM sys.dm_pdw_nodes_exec_connections;\nSELECT * FROM sys.dm_pdw_nodes_exec_sessions;\n\n```\n\n\nUse the following query to retrieve the information on the current connection.\n\n```\n\nSELECT * \nFROM sys.dm_pdw_nodes_exec_connections AS c \n   JOIN sys.dm_pdw_nodes_exec_sessions AS s \n   ON c.session_id = s.session_id \nWHERE c.session_id = @@SPID;\n\n```\n\n\n\n\n\n## Investigate Query Execution\nYou might encounter situations where your query is not completing or is running longer than expected. In such cases you can use the following steps to collect data and narrow down the issue.\n\n\n\n### STEP 1: Find the query to investigate\n\n```\n\n-- Monitor running queries\nSELECT * FROM sys.dm_pdw_exec_requests WHERE status = 'Running';\n\n-- Find the longest running queries\nSELECT * FROM sys.dm_pdw_exec_requests ORDER BY total_elapsed_time DESC;\n\n```\n\nSave the Request ID of the query.\n\n\n  \n### STEP 2: Check if the query is waiting for resources\n\n```\n\n-- Find waiting tasks for your session.\n-- Replace request_id with value from Step 1.\n\nSELECT waits.session_id,\n      waits.request_id,  \n      requests.command,\n      requests.status, \n      requests.start_time,  \n      waits.type,  \n      waits.object_type, \n      waits.object_name,  \n      waits.state  \nFROM   sys.dm_pdw_waits waits \n   JOIN  sys.dm_pdw_exec_requests requests\n   ON waits.request_id=requests.request_id \nWHERE waits.request_id = 'QID33188'\nORDER BY waits.object_name, waits.object_type, waits.state;\n\n```\n\n\nThe results of the above query will show you the wait state of your request.\n\n- If the query is waiting on resources from another query, then the state will be **AcquireResources**.\n- If the query has all the required resources and is not waiting, then the state will be **Granted**. In this case, proceed to look at the query steps.\n\n\n\n\n### STEP 3: Find the longest running step of the query\n\nUse the Request ID to retrieve a list of all the distributed query steps. Find the long-running step by looking at the total elapsed time. \n\n```\n\n-- Find the distributed query plan steps for a specific query.\n-- Replace request_id with value from Step 1.\n \nSELECT * FROM sys.dm_pdw_request_steps\nWHERE request_id = 'QID33209'\nORDER BY step_index;\n\n```\n\nSave the Step Index of the long-running step.\n\nCheck the *operation_type* column of the long-running query step:\n\n- Proceed with Step 4a for **SQL operations**: OnOperation, RemoteOperation, ReturnOperation.\n- Proceed with Step 4b for **Data Movement operations**: ShuffleMoveOperation, BroadcastMoveOperation, TrimMoveOperation, PartitionMoveOperation, MoveOperation, CopyOperation.\n\n\n\n\n### STEP 4a: Find the execution progress of a SQL Step\n\nUse the Request ID and the Step Index to retrieve information about the SQL Server query distribution as a part of the SQL Step in the query. Save the Node ID and SPID.\n\n```\n\n-- Find the distribution run times for a SQL step.\n-- Replace request_id and step_index with values from Step 1 and 3.\n\nSELECT * FROM sys.dm_pdw_sql_requests\nWHERE request_id = 'QID33209' AND step_index = 2;\n\n```\n\n\nUse the following query to retrieve the SQL Server execution plan for the SQL Step on a particular node.\n\n```\n\n-- Find the SQL Server execution plan for a query running on a specific SQL Data Warehouse Compute or Control node. \n-- Replace node_id and spid with values from previous query.\n\nDBCC PDW_SHOWEXECUTIONPLAN(1, 78);\n\n```\n\n\n\n### STEP 4b: Find the execution progress of a DMS Step\n\nUse the Request ID and the Step Index to retrieve information about the Data Movement Step running on each distribution. \n\n```\n\n-- Find the information about all the workers completing a Data Movement Step.\n-- Replace request_id and step_index with values from Step 1 and 3.\n \nSELECT * FROM sys.dm_pdw_dms_workers\nWHERE request_id = 'QID33209' AND step_index = 2;\n\n```\n\n- Check the *total_elapsed_time* column to see if a particular distribution is taking significantly longer than others for data movement. \n- For the long-running distribution, check the *rows_processed* column to see if the number of rows being moved from that distribution is significantly larger than others. This shows that your query has data skew.\n\n\n\n\n\n## Investigate Data Skew\n\n```\n\n-- Find data skew for a distributed table\nDBCC PDW_SHOWSPACEUSED(\"dbo.FactInternetSales\");\n\n```\n\n\nThe result of this query will show you the number of table rows that are stored in each of the 60 distributions of your database. For optimal performance, the rows in your distributed table should be spread evenly across all the distributions.\nTo learn more, see [table design][].\n\n\n\n## Next steps\nFor more tips on managing your SQL Data Warehouse, see [manage overview][].\n\n<!--Image references-->\n\n<!--Article references-->\n[manage overview]: sql-data-warehouse-overview-manage.md\n[table design]: sql-data-warehouse-develop-table-design.md\n\n<!--MSDN references-->\n\n\n"
}