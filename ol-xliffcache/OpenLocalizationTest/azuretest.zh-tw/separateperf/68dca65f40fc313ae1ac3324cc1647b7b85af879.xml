{
  "nodes": [
    {
      "content": "How to use Table storage from Ruby | Microsoft Azure",
      "pos": [
        28,
        80
      ]
    },
    {
      "content": "Learn how to use the table storage service in Azure.",
      "pos": [
        100,
        152
      ]
    },
    {
      "content": "Code samples are written using the Ruby API.",
      "pos": [
        153,
        197
      ]
    },
    {
      "content": "How to use Table storage from Ruby",
      "pos": [
        508,
        542
      ]
    },
    {
      "content": "Overview",
      "pos": [
        647,
        655
      ]
    },
    {
      "content": "This guide shows you how to perform common scenarios using the Microsoft",
      "pos": [
        657,
        729
      ]
    },
    {
      "content": "Azure Table service.",
      "pos": [
        730,
        750
      ]
    },
    {
      "content": "The samples are written written using the",
      "pos": [
        751,
        792
      ]
    },
    {
      "content": "Ruby API.",
      "pos": [
        793,
        802
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating and deleting a\ntable, inserting and querying entities in a table<ept id=\"p1\">**</ept>.",
      "pos": [
        803,
        911
      ]
    },
    {
      "content": "Create a Ruby Application",
      "pos": [
        1116,
        1141
      ]
    },
    {
      "content": "Create a Ruby application.",
      "pos": [
        1143,
        1169
      ]
    },
    {
      "content": "For instructions,",
      "pos": [
        1170,
        1187
      ]
    },
    {
      "content": "see <bpt id=\"p1\">[</bpt>Create a Ruby Application on Azure<ept id=\"p1\">](/develop/ruby/tutorials/web-app-with-linux-vm/)</ept>.",
      "pos": [
        1189,
        1278
      ]
    },
    {
      "content": "Configure Your Application to Access Storage",
      "pos": [
        1283,
        1327
      ]
    },
    {
      "content": "To use Azure storage, you need to download and use the Ruby azure package,",
      "pos": [
        1329,
        1403
      ]
    },
    {
      "content": "which includes a set of convenience libraries that communicate with the storage REST services.",
      "pos": [
        1405,
        1499
      ]
    },
    {
      "content": "Use RubyGems to obtain the package",
      "pos": [
        1505,
        1539
      ]
    },
    {
      "pos": [
        1544,
        1646
      ],
      "content": "Use a command-line interface such as <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows), <bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac), or <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix)."
    },
    {
      "pos": [
        1651,
        1736
      ],
      "content": "Type <bpt id=\"p1\">**</bpt>gem install azure<ept id=\"p1\">**</ept> in the command window to install the gem and dependencies."
    },
    {
      "content": "Import the package",
      "pos": [
        1742,
        1760
      ]
    },
    {
      "content": "Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:",
      "pos": [
        1762,
        1871
      ]
    },
    {
      "content": "Setup an Azure Storage Connection",
      "pos": [
        1897,
        1930
      ]
    },
    {
      "content": "The azure module will read the environment variables <bpt id=\"p1\">**</bpt>AZURE\\_STORAGE\\_ACCOUNT<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>AZURE\\_STORAGE\\_ACCESS\\_KEY<ept id=\"p2\">**</ept>",
      "pos": [
        1932,
        2048
      ]
    },
    {
      "content": "for information required to connect to your Azure storage account.",
      "pos": [
        2050,
        2116
      ]
    },
    {
      "content": "If these environment variables are not set, you must specify the account information before using <bpt id=\"p1\">**</bpt>Azure::TableService<ept id=\"p1\">**</ept> with the following code:",
      "pos": [
        2117,
        2263
      ]
    },
    {
      "content": "To obtain these values:",
      "pos": [
        2409,
        2432
      ]
    },
    {
      "pos": [
        2437,
        2510
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](https://manage.windowsazure.com/)</ept>."
    },
    {
      "content": "Navigate to the storage account you want to use.",
      "pos": [
        2515,
        2563
      ]
    },
    {
      "pos": [
        2568,
        2627
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>MANAGE KEYS<ept id=\"p1\">**</ept> at the bottom of the navigation pane."
    },
    {
      "content": "In the pop up dialog, you will see the storage account name, primary access key and secondary access key.",
      "pos": [
        2632,
        2737
      ]
    },
    {
      "content": "For access key, you can either the primary one or the secondary one.",
      "pos": [
        2738,
        2806
      ]
    },
    {
      "content": "How to Create a Table",
      "pos": [
        2811,
        2832
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Azure::TableService<ept id=\"p1\">**</ept> object lets you work with tabls and entities.",
      "pos": [
        2834,
        2907
      ]
    },
    {
      "content": "To create a table, use the <bpt id=\"p1\">**</bpt>create\\_table()<ept id=\"p1\">**</ept> method.",
      "pos": [
        2908,
        2962
      ]
    },
    {
      "content": "The following example creates a table or print out the error if there is any.",
      "pos": [
        2963,
        3040
      ]
    },
    {
      "content": "How to Add an Entity to a Table",
      "pos": [
        3191,
        3222
      ]
    },
    {
      "content": "To add an entity, first create a hash object that defines your entity properties.",
      "pos": [
        3224,
        3305
      ]
    },
    {
      "content": "Note that for every entity you mustspecify a <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>.",
      "pos": [
        3306,
        3383
      ]
    },
    {
      "content": "These are the unique identifiers of your entities, and are values that can be queried much faster than your other properties.",
      "pos": [
        3384,
        3509
      ]
    },
    {
      "content": "Azure Storage Service uses <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> to automatically distribute the table's entities over many storage nodes.",
      "pos": [
        3510,
        3627
      ]
    },
    {
      "content": "Entities with the same <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> are stored on the same node.",
      "pos": [
        3628,
        3696
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> is the unique ID of the entity within the partition it belongs to.",
      "pos": [
        3697,
        3778
      ]
    },
    {
      "content": "How To: Update an Entity",
      "pos": [
        3950,
        3974
      ]
    },
    {
      "content": "There are multiple methods available to update an existing entity:",
      "pos": [
        3976,
        4042
      ]
    },
    {
      "pos": [
        4046,
        4110
      ],
      "content": "<bpt id=\"p1\">**</bpt>update\\_entity():<ept id=\"p1\">**</ept> Update an existing entity by replacing it."
    },
    {
      "pos": [
        4113,
        4217
      ],
      "content": "<bpt id=\"p1\">**</bpt>merge\\_entity():<ept id=\"p1\">**</ept> Updates an existing entity by merging new property values into the existing entity."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>insert\\_or\\_merge\\_entity():<ept id=\"p1\">**</ept> Updates an existing entity by replacing it.",
      "pos": [
        4220,
        4296
      ]
    },
    {
      "content": "If no entity exists, a new one will be inserted:",
      "pos": [
        4297,
        4345
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>insert\\_or\\_replace\\_entity():<ept id=\"p1\">**</ept> Updates an existing entity by merging new property values into the existing entity.",
      "pos": [
        4348,
        4466
      ]
    },
    {
      "content": "If no entity exists, a new one will be inserted.",
      "pos": [
        4467,
        4515
      ]
    },
    {
      "pos": [
        4517,
        4598
      ],
      "content": "The following example demonstrates updating an entity using <bpt id=\"p1\">**</bpt>update\\_entity()<ept id=\"p1\">**</ept>:"
    },
    {
      "content": "With <bpt id=\"p1\">**</bpt>update\\_entity()<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>merge\\_entity()<ept id=\"p2\">**</ept>, if the entity that is being updated doesn't exist then the update operation will fail.",
      "pos": [
        4787,
        4924
      ]
    },
    {
      "content": "Therefore if you wish to store an entity regardless of whether it already exists, you should instead use <bpt id=\"p1\">**</bpt>insert\\_or\\_replace\\_entity()<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>insert\\_or\\_merge\\_entity()<ept id=\"p2\">**</ept>.",
      "pos": [
        4925,
        5099
      ]
    },
    {
      "content": "How to: Work with Groups of Entities",
      "pos": [
        5104,
        5140
      ]
    },
    {
      "content": "Sometimes it makes sense to submit multiple operations together in a batch to ensure atomic processing by the server.",
      "pos": [
        5142,
        5259
      ]
    },
    {
      "content": "To accomplish that, you first create a <bpt id=\"p1\">**</bpt>Batch<ept id=\"p1\">**</ept> object and then use the <bpt id=\"p2\">**</bpt>execute\\_batch()<ept id=\"p2\">**</ept> method on <bpt id=\"p3\">**</bpt>TableService<ept id=\"p3\">**</ept>.",
      "pos": [
        5260,
        5381
      ]
    },
    {
      "content": "The following example demonstrates submitting two entities with RowKey 2 and 3 in a batch.",
      "pos": [
        5382,
        5472
      ]
    },
    {
      "content": "Notice that it only works for entities with the same PartitionKey.",
      "pos": [
        5473,
        5539
      ]
    },
    {
      "content": "How to: Query for an Entity",
      "pos": [
        5850,
        5877
      ]
    },
    {
      "pos": [
        5879,
        6003
      ],
      "content": "To query an entity in a table, use the <bpt id=\"p1\">**</bpt>get\\_entity()<ept id=\"p1\">**</ept> method, by passing the table name, <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>."
    },
    {
      "content": "How to: Query a Set of Entities",
      "pos": [
        6100,
        6131
      ]
    },
    {
      "content": "To query a set of entities in a table, create a query hash object and use the <bpt id=\"p1\">**</bpt>query\\_entities()<ept id=\"p1\">**</ept> method.",
      "pos": [
        6133,
        6240
      ]
    },
    {
      "content": "The following example demonstrates getting all the entities with the same <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>:",
      "pos": [
        6241,
        6332
      ]
    },
    {
      "pos": [
        6476,
        6638
      ],
      "content": "<bpt id=\"p1\">**</bpt>Notice<ept id=\"p1\">**</ept> that if the result set is too large for a single query to return, a continuation token will be returned which you can use to retrieve subsequent pages."
    },
    {
      "content": "How To: Query a Subset of Entity Properties",
      "pos": [
        6643,
        6686
      ]
    },
    {
      "content": "A query to a table can retrieve just a few properties from an entity.",
      "pos": [
        6688,
        6757
      ]
    },
    {
      "content": "This technique, called \"projection\", reduces bandwidth and can improve query performance, especially for large entities.",
      "pos": [
        6758,
        6878
      ]
    },
    {
      "content": "Use the select clause and pass the names of the properties you would like to bring over to the client.",
      "pos": [
        6879,
        6981
      ]
    },
    {
      "content": "How To: Delete an Entity",
      "pos": [
        7159,
        7183
      ]
    },
    {
      "content": "To delete an entity, use the <bpt id=\"p1\">**</bpt>delete\\_entity()<ept id=\"p1\">**</ept> method.",
      "pos": [
        7185,
        7242
      ]
    },
    {
      "content": "You need to pas in the name of the table which contains the entity, the PartitionKey and RowKey of the entity.",
      "pos": [
        7243,
        7353
      ]
    },
    {
      "content": "How to: Delete a Table",
      "pos": [
        7441,
        7463
      ]
    },
    {
      "pos": [
        7465,
        7572
      ],
      "content": "To delete a table, use the <bpt id=\"p1\">**</bpt>delete\\_table()<ept id=\"p1\">**</ept> method and pass in the name of the table you want to delete."
    },
    {
      "content": "Next Steps",
      "pos": [
        7632,
        7642
      ]
    },
    {
      "content": "Now that you've learned the basics of table storage, follow these links to learn about more complex storage tasks.",
      "pos": [
        7644,
        7758
      ]
    },
    {
      "pos": [
        7762,
        7856
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Azure Storage<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept>"
    },
    {
      "pos": [
        7859,
        7940
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage Team Blog<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>"
    },
    {
      "pos": [
        7943,
        8045
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure SDK for Ruby<ept id=\"p1\">](http://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> repository on GitHub"
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Table storage from Ruby | Microsoft Azure\" \n    description=\"Learn how to use the table storage service in Azure. Code samples are written using the Ruby API.\" \n    services=\"storage\" \n    documentationCenter=\"ruby\" \n    authors=\"tfitzmac\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.workload=\"storage\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"ruby\" \n    ms.topic=\"article\" \n    ms.date=\"07/29/2015\" \n    ms.author=\"tomfitz\"/>\n\n\n# How to use Table storage from Ruby\n\n[AZURE.INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\n\n## Overview\n\nThis guide shows you how to perform common scenarios using the Microsoft\nAzure Table service. The samples are written written using the\nRuby API. The scenarios covered include **creating and deleting a\ntable, inserting and querying entities in a table**.\n\n[AZURE.INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a Ruby Application\n\nCreate a Ruby application. For instructions, \nsee [Create a Ruby Application on Azure](/develop/ruby/tutorials/web-app-with-linux-vm/).\n\n## Configure Your Application to Access Storage\n\nTo use Azure storage, you need to download and use the Ruby azure package, \nwhich includes a set of convenience libraries that communicate with the storage REST services.\n\n### Use RubyGems to obtain the package\n\n1. Use a command-line interface such as **PowerShell** (Windows), **Terminal** (Mac), or **Bash** (Unix).\n\n2. Type **gem install azure** in the command window to install the gem and dependencies.\n\n### Import the package\n\nUse your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:\n\n    require \"azure\"\n\n## Setup an Azure Storage Connection\n\nThe azure module will read the environment variables **AZURE\\_STORAGE\\_ACCOUNT** and **AZURE\\_STORAGE\\_ACCESS\\_KEY** \nfor information required to connect to your Azure storage account. If these environment variables are not set, you must specify the account information before using **Azure::TableService** with the following code:\n\n    Azure.config.storage_account_name = \"<your azure storage account>\"\n    Azure.config.storage_access_key = \"<your azure storage access key>\"\n\nTo obtain these values:\n\n1. Log into the [Azure Management Portal](https://manage.windowsazure.com/).\n\n2. Navigate to the storage account you want to use.\n\n3. Click **MANAGE KEYS** at the bottom of the navigation pane.\n\n4. In the pop up dialog, you will see the storage account name, primary access key and secondary access key. For access key, you can either the primary one or the secondary one.\n\n## How to Create a Table\n\nThe **Azure::TableService** object lets you work with tabls and entities. To create a table, use the **create\\_table()** method. The following example creates a table or print out the error if there is any.\n\n    azure_table_service = Azure::TableService.new\n    begin\n      azure_table_service.create_table(\"testtable\")\n    rescue\n      puts $!\n    end\n\n## How to Add an Entity to a Table\n\nTo add an entity, first create a hash object that defines your entity properties. Note that for every entity you mustspecify a **PartitionKey** and **RowKey**. These are the unique identifiers of your entities, and are values that can be queried much faster than your other properties. Azure Storage Service uses **PartitionKey** to automatically distribute the table's entities over many storage nodes. Entities with the same **PartitionKey** are stored on the same node. The **RowKey** is the unique ID of the entity within the partition it belongs to. \n\n    entity = { \"content\" => \"test entity\", \n      :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\n    azure_table_service.insert_entity(\"testtable\", entity)\n\n## How To: Update an Entity\n\nThere are multiple methods available to update an existing entity:\n\n* **update\\_entity():** Update an existing entity by replacing it.\n* **merge\\_entity():** Updates an existing entity by merging new property values into the existing entity.\n* **insert\\_or\\_merge\\_entity():** Updates an existing entity by replacing it. If no entity exists, a new one will be inserted:\n* **insert\\_or\\_replace\\_entity():** Updates an existing entity by merging new property values into the existing entity. If no entity exists, a new one will be inserted.\n\nThe following example demonstrates updating an entity using **update\\_entity()**:\n\n    entity = { \"content\" => \"test entity with updated content\", \n      :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\n    azure_table_service.update_entity(\"testtable\", entity)\n\nWith **update\\_entity()** and **merge\\_entity()**, if the entity that is being updated doesn't exist then the update operation will fail. Therefore if you wish to store an entity regardless of whether it already exists, you should instead use **insert\\_or\\_replace\\_entity()** or **insert\\_or\\_merge\\_entity()**.\n\n## How to: Work with Groups of Entities\n\nSometimes it makes sense to submit multiple operations together in a batch to ensure atomic processing by the server. To accomplish that, you first create a **Batch** object and then use the **execute\\_batch()** method on **TableService**. The following example demonstrates submitting two entities with RowKey 2 and 3 in a batch. Notice that it only works for entities with the same PartitionKey.\n\n    azure_table_service = Azure::TableService.new\n    batch = Azure::Storage::Table::Batch.new(\"testtable\", \n      \"test-partition-key\") do\n      insert \"2\", { \"content\" => \"new content 2\" }\n      insert \"3\", { \"content\" => \"new content 3\" }\n    end\n    results = azure_table_service.execute_batch(batch)\n\n## How to: Query for an Entity\n\nTo query an entity in a table, use the **get\\_entity()** method, by passing the table name, **PartitionKey** and **RowKey**.\n\n    result = azure_table_service.get_entity(\"testtable\", \"test-partition-key\", \n      \"1\")\n\n## How to: Query a Set of Entities\n\nTo query a set of entities in a table, create a query hash object and use the **query\\_entities()** method. The following example demonstrates getting all the entities with the same **PartitionKey**:\n\n    query = { :filter => \"PartitionKey eq 'test-partition-key'\" }\n    result, token = azure_table_service.query_entities(\"testtable\", query)\n\n**Notice** that if the result set is too large for a single query to return, a continuation token will be returned which you can use to retrieve subsequent pages.\n\n## How To: Query a Subset of Entity Properties\n\nA query to a table can retrieve just a few properties from an entity. This technique, called \"projection\", reduces bandwidth and can improve query performance, especially for large entities. Use the select clause and pass the names of the properties you would like to bring over to the client.\n\n    query = { :filter => \"PartitionKey eq 'test-partition-key'\", \n      :select => [\"content\"] }\n    result, token = azure_table_service.query_entities(\"testtable\", query)\n\n## How To: Delete an Entity\n\nTo delete an entity, use the **delete\\_entity()** method. You need to pas in the name of the table which contains the entity, the PartitionKey and RowKey of the entity.\n\n        azure_table_service.delete_entity(\"testtable\", \"test-partition-key\", \"1\")\n\n## How to: Delete a Table\n\nTo delete a table, use the **delete\\_table()** method and pass in the name of the table you want to delete.\n\n        azure_table_service.delete_table(\"testtable\")\n\n## Next Steps\n\nNow that you've learned the basics of table storage, follow these links to learn about more complex storage tasks.\n\n- See the MSDN Reference: [Azure Storage](http://msdn.microsoft.com/library/azure/gg433040.aspx)\n- Visit the [Azure Storage Team Blog](http://blogs.msdn.com/b/windowsazurestorage/)\n- Visit the [Azure SDK for Ruby](http://github.com/WindowsAzure/azure-sdk-for-ruby) repository on GitHub\n \n"
}