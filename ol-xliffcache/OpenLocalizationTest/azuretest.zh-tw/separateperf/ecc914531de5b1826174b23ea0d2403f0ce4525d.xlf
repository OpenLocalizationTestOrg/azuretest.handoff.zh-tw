<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Create EAI Logic App using VETR | Microsoft Azure</source>
          <target state="new">Create EAI Logic App using VETR | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic covers the Validate, Encode and Transform features of BizTalk XML services.</source>
          <target state="new">This topic covers the Validate, Encode and Transform features of BizTalk XML services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create EAI Logic App Using VETR</source>
          <target state="new">Create EAI Logic App Using VETR</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination.</source>
          <target state="new">Most Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Such scenarios often have a common set of requirements:</source>
          <target state="new">Such scenarios often have a common set of requirements:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Ensure that data from different systems are correctly formatted</source>
          <target state="new">Ensure that data from different systems are correctly formatted</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Perform “look-up” on incoming data to make decisions</source>
          <target state="new">Perform “look-up” on incoming data to make decisions</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)</source>
          <target state="new">Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Route data to desired application or system</source>
          <target state="new">Route data to desired application or system</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This article shows you a common integration pattern: "one-way message mediation" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity.</source>
          <target state="new">This article shows you a common integration pattern: "one-way message mediation" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Usually the source and destination are data sources.</source>
          <target state="new">Usually the source and destination are data sources.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Consider a website that accepts orders.</source>
          <target state="new">Consider a website that accepts orders.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Users post orders to the system using HTTP.</source>
          <target state="new">Users post orders to the system using HTTP.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing.</source>
          <target state="new">Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The system takes orders off the queue, expecting it in a particular format.</source>
          <target state="new">The system takes orders off the queue, expecting it in a particular format.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Thus, the end-to-end flow is:</source>
          <target state="new">Thus, the end-to-end flow is:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>Validate<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Transform<ept id="p3">**</ept> &gt; <bpt id="p4">**</bpt>Service Bus<ept id="p4">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> &gt; <bpt id="p2">**</bpt>Validate<ept id="p2">**</ept> &gt; <bpt id="p3">**</bpt>Transform<ept id="p3">**</ept> &gt; <bpt id="p4">**</bpt>Service Bus<ept id="p4">**</ept></target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>![Basic VETR Flow][1]</source>
          <target state="new">![Basic VETR Flow][1]</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following BizTalk API Apps help build this pattern:</source>
          <target state="new">The following BizTalk API Apps help build this pattern:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP Trigger<ept id="p1">**</ept> - Source to trigger message event</source>
          <target state="new"><bpt id="p1">**</bpt>HTTP Trigger<ept id="p1">**</ept> - Source to trigger message event</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Validate<ept id="p1">**</ept> - Validates correctness of incoming data</source>
          <target state="new"><bpt id="p1">**</bpt>Validate<ept id="p1">**</ept> - Validates correctness of incoming data</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> - Transforms data from incoming format to format required by downstream system</source>
          <target state="new"><bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> - Transforms data from incoming format to format required by downstream system</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service Bus Connector<ept id="p1">**</ept> - Destination entity where data is sent</source>
          <target state="new"><bpt id="p1">**</bpt>Service Bus Connector<ept id="p1">**</ept> - Destination entity where data is sent</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Constructing basic VETR pattern</source>
          <target state="new">Constructing basic VETR pattern</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The basics</source>
          <target state="new">The basics</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the Azure Management Portal, click the <bpt id="p1">**</bpt>+New<ept id="p1">**</ept> button at the bottom-left of the screen and click <bpt id="p2">**</bpt>Logic App<ept id="p2">**</ept>.</source>
          <target state="new">In the Azure Management Portal, click the <bpt id="p1">**</bpt>+New<ept id="p1">**</ept> button at the bottom-left of the screen and click <bpt id="p2">**</bpt>Logic App<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Choose a name, location, subscription, resource group, and location that works.</source>
          <target state="new">Choose a name, location, subscription, resource group, and location that works.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.</source>
          <target state="new">Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Next, let's add triggers and actions.</source>
          <target state="new">Next, let's add triggers and actions.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add HTTP Trigger</source>
          <target state="new">Add HTTP Trigger</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> from the gallery to create a new listener.</source>
          <target state="new">Select <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> from the gallery to create a new listener.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call it <bpt id="p1">**</bpt>HTTP1<ept id="p1">**</ept>.</source>
          <target state="new">Call it <bpt id="p1">**</bpt>HTTP1<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Send response automatically?<ept id="p1">**</ept> setting as false.</source>
          <target state="new">Leave <bpt id="p1">**</bpt>Send response automatically?<ept id="p1">**</ept> setting as false.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Configure the trigger action by setting <bpt id="p1">_</bpt>HTTP Method<ept id="p1">_</ept> to <bpt id="p2">_</bpt>POST<ept id="p2">_</ept> and setting <bpt id="p3">_</bpt>Relative URL<ept id="p3">_</ept> to <bpt id="p4">_</bpt>/OneWayPipeline<ept id="p4">_</ept>.</source>
          <target state="new">Configure the trigger action by setting <bpt id="p1">_</bpt>HTTP Method<ept id="p1">_</ept> to <bpt id="p2">_</bpt>POST<ept id="p2">_</ept> and setting <bpt id="p3">_</bpt>Relative URL<ept id="p3">_</ept> to <bpt id="p4">_</bpt>/OneWayPipeline<ept id="p4">_</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>![HTTP Trigger][2]</source>
          <target state="new">![HTTP Trigger][2]</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add Validate Action</source>
          <target state="new">Add Validate Action</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.</source>
          <target state="new">Now, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add <bpt id="p1">**</bpt>BizTalk XML Validator<ept id="p1">**</ept> from the gallery and name it <bpt id="p2">_</bpt>(Validate1)<ept id="p2">_</ept> to create an instance.</source>
          <target state="new">Add <bpt id="p1">**</bpt>BizTalk XML Validator<ept id="p1">**</ept> from the gallery and name it <bpt id="p2">_</bpt>(Validate1)<ept id="p2">_</ept> to create an instance.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Configure an XSD schema to validate the incoming XML messages.</source>
          <target state="new">Configure an XSD schema to validate the incoming XML messages.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">_</bpt>Validate<ept id="p1">_</ept> action and select <bpt id="p2">_</bpt>triggers(‘httplistener’).outputs.Content<ept id="p2">_</ept> as the value for the <bpt id="p3">_</bpt>inputXml<ept id="p3">_</ept> parameter.</source>
          <target state="new">Select the <bpt id="p1">_</bpt>Validate<ept id="p1">_</ept> action and select <bpt id="p2">_</bpt>triggers(‘httplistener’).outputs.Content<ept id="p2">_</ept> as the value for the <bpt id="p3">_</bpt>inputXml<ept id="p3">_</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now, the validate action is the first action after the HTTP listener.</source>
          <target state="new">Now, the validate action is the first action after the HTTP listener.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Similarly, let's add the rest of the actions.</source>
          <target state="new">Similarly, let's add the rest of the actions.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>![BizTalk XML Validator][3]</source>
          <target state="new">![BizTalk XML Validator][3]</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add Transform action</source>
          <target state="new">Add Transform action</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Let's configure transforms to normalize the incoming data.</source>
          <target state="new">Let's configure transforms to normalize the incoming data.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add <bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> from the gallery.</source>
          <target state="new">Add <bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> from the gallery.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To configure a transform to transform the incoming XML messages, select the <bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> action as the action to carry out when this API is called and select <ph id="ph1">```triggers(‘httplistener’).outputs.Content```</ph> as the value for <bpt id="p2">_</bpt>inputXml<ept id="p2">_</ept>.</source>
          <target state="new">To configure a transform to transform the incoming XML messages, select the <bpt id="p1">**</bpt>Transform<ept id="p1">**</ept> action as the action to carry out when this API is called and select <ph id="ph1">```triggers(‘httplistener’).outputs.Content```</ph> as the value for <bpt id="p2">_</bpt>inputXml<ept id="p2">_</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.</source>
          <target state="new">Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Lastly, the Transform runs only if Validate succeeds.</source>
          <target state="new">Lastly, the Transform runs only if Validate succeeds.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To configure this condition, click the gear icon on the top right and select <bpt id="p1">_</bpt>Add a condition to be met<ept id="p1">_</ept>.</source>
          <target state="new">To configure this condition, click the gear icon on the top right and select <bpt id="p1">_</bpt>Add a condition to be met<ept id="p1">_</ept>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Set the condition to <ph id="ph1">```equals(actions('xmlvalidator').status,'Succeeded')```</ph></source>
          <target state="new">Set the condition to <ph id="ph1">```equals(actions('xmlvalidator').status,'Succeeded')```</ph></target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>![BizTalk Transforms][4]</source>
          <target state="new">![BizTalk Transforms][4]</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add Service Bus Connector</source>
          <target state="new">Add Service Bus Connector</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Next, let's add the destination--a Service Bus Queu--to write data to.</source>
          <target state="new">Next, let's add the destination--a Service Bus Queu--to write data to.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Service Bus Connector<ept id="p1">**</ept> from the gallery.</source>
          <target state="new">Add a <bpt id="p1">**</bpt>Service Bus Connector<ept id="p1">**</ept> from the gallery.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> to <bpt id="p2">_</bpt>Servicebus1<ept id="p2">_</ept>, set *<bpt id="p3">*</bpt>Connection String<ept id="p3">*</ept> to the connection string to your service bus instance, set <bpt id="p4">**</bpt>Entity Name<ept id="p4">**</ept> to <bpt id="p5">_</bpt>Queue<ept id="p5">_</ept>, and skip <bpt id="p6">**</bpt>Subscription name<ept id="p6">**</ept>.</source>
          <target state="new">Set the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> to <bpt id="p2">_</bpt>Servicebus1<ept id="p2">_</ept>, set *<bpt id="p3">*</bpt>Connection String<ept id="p3">*</ept> to the connection string to your service bus instance, set <bpt id="p4">**</bpt>Entity Name<ept id="p4">**</ept> to <bpt id="p5">_</bpt>Queue<ept id="p5">_</ept>, and skip <bpt id="p6">**</bpt>Subscription name<ept id="p6">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Send Message<ept id="p1">**</ept> action and set the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> field for the action to <bpt id="p3">_</bpt>actions('transformservice').outputs.OutputXml<ept id="p3">_</ept></source>
          <target state="new">Select the <bpt id="p1">**</bpt>Send Message<ept id="p1">**</ept> action and set the <bpt id="p2">**</bpt>Message<ept id="p2">**</ept> field for the action to <bpt id="p3">_</bpt>actions('transformservice').outputs.OutputXml<ept id="p3">_</ept></target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>![Service Bus][5]</source>
          <target state="new">![Service Bus][5]</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Send HTTP Response</source>
          <target state="new">Send HTTP Response</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Once pipeline processing is done, send back an HTTP response for both success and failure with the following steps:</source>
          <target state="new">Once pipeline processing is done, send back an HTTP response for both success and failure with the following steps:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add an <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> from the gallery and select the <bpt id="p2">**</bpt>Send HTTP Response<ept id="p2">**</ept> action.</source>
          <target state="new">Add an <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> from the gallery and select the <bpt id="p2">**</bpt>Send HTTP Response<ept id="p2">**</ept> action.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Set <bpt id="p1">**</bpt>Response Content<ept id="p1">**</ept> to <bpt id="p2">*</bpt>Pipeline processing completed<ept id="p2">*</ept>, <bpt id="p3">**</bpt>Response Status Code<ept id="p3">**</ept> to <bpt id="p4">*</bpt>200<ept id="p4">*</ept> to indicate HTTP 200 OK, and <bpt id="p5">**</bpt>Condition<ept id="p5">**</ept> to the expression <ph id="ph1">```@equals(actions('servicebusconnector').status,'Succeeded')```</ph></source>
          <target state="new">Set <bpt id="p1">**</bpt>Response Content<ept id="p1">**</ept> to <bpt id="p2">*</bpt>Pipeline processing completed<ept id="p2">*</ept>, <bpt id="p3">**</bpt>Response Status Code<ept id="p3">**</ept> to <bpt id="p4">*</bpt>200<ept id="p4">*</ept> to indicate HTTP 200 OK, and <bpt id="p5">**</bpt>Condition<ept id="p5">**</ept> to the expression <ph id="ph1">```@equals(actions('servicebusconnector').status,'Succeeded')```</ph></target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Repeat the above steps to send an HTTP response on failure as well.</source>
          <target state="new">Repeat the above steps to send an HTTP response on failure as well.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Change <bpt id="p1">**</bpt>Condition<ept id="p1">**</ept> to <ph id="ph1">```@not(equals(actions('servicebusconnector').status,'Succeeded')).```</ph></source>
          <target state="new">Change <bpt id="p1">**</bpt>Condition<ept id="p1">**</ept> to <ph id="ph1">```@not(equals(actions('servicebusconnector').status,'Succeeded')).```</ph></target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Completion</source>
          <target state="new">Completion</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Every time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created.</source>
          <target state="new">Every time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To manage any such logic apps you create, click <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> in the Azure Management Portal and click <bpt id="p2">**</bpt>Logic Apps<ept id="p2">**</ept>.</source>
          <target state="new">To manage any such logic apps you create, click <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> in the Azure Management Portal and click <bpt id="p2">**</bpt>Logic Apps<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Click on your app to see more information.</source>
          <target state="new">Click on your app to see more information.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecc914531de5b1826174b23ea0d2403f0ce4525d</xliffext:olfilehash>
  </header>
</xliff>