{
  "nodes": [
    {
      "content": "How to use Azure Blob storage from Python | Microsoft Azure",
      "pos": [
        27,
        86
      ]
    },
    {
      "content": "Learn how to use the Azure Blob storage from Python to upload, list, download, and delete blobs.",
      "pos": [
        105,
        201
      ]
    },
    {
      "content": "How to use Azure Blob storage from Python",
      "pos": [
        509,
        550
      ]
    },
    {
      "content": "Overview",
      "pos": [
        653,
        661
      ]
    },
    {
      "content": "This article will show you how to perform common scenarios using Blob storage.",
      "pos": [
        663,
        741
      ]
    },
    {
      "content": "The samples are written in Python and use the <bpt id=\"p1\">[</bpt>Python Azure Storage package<ept id=\"p1\">][]</ept>.",
      "pos": [
        742,
        821
      ]
    },
    {
      "content": "The scenarios covered include uploading, listing,",
      "pos": [
        822,
        871
      ]
    },
    {
      "content": "downloading, and deleting blobs.",
      "pos": [
        872,
        904
      ]
    },
    {
      "content": "Create a container",
      "pos": [
        1107,
        1125
      ]
    },
    {
      "pos": [
        1129,
        1270
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you need to install Python or the <bpt id=\"p1\">[</bpt>Python Azure package<ept id=\"p1\">][]</ept>, see the <bpt id=\"p2\">[</bpt>Python Installation Guide<ept id=\"p2\">](../python-how-to-install.md)</ept>."
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> object lets you work with containers and blobs.",
      "pos": [
        1272,
        1339
      ]
    },
    {
      "content": "The",
      "pos": [
        1340,
        1343
      ]
    },
    {
      "content": "following code creates a <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> object.",
      "pos": [
        1344,
        1392
      ]
    },
    {
      "content": "Add the following near",
      "pos": [
        1393,
        1415
      ]
    },
    {
      "content": "the top of any Python file in which you wish to programmatically access Azure Storage.",
      "pos": [
        1416,
        1502
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> object using the storage account name and account key.",
      "pos": [
        1552,
        1651
      ]
    },
    {
      "content": "Replace 'myaccount' and 'mykey' with the real account and key.",
      "pos": [
        1653,
        1715
      ]
    },
    {
      "pos": [
        1912,
        2024
      ],
      "content": "In the following code example, you can use a <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> object to create the container if it doesn't exist."
    },
    {
      "content": "By default, the new container is private, so you must specify your storage access key (as you did earlier) to download blobs from this container.",
      "pos": [
        2076,
        2221
      ]
    },
    {
      "content": "If you want to make the files within the container available to everyone, you can create the container and pass the public access level using the following code.",
      "pos": [
        2222,
        2383
      ]
    },
    {
      "content": "Alternatively, you can modify a container after you have created it using the following code.",
      "pos": [
        2472,
        2565
      ]
    },
    {
      "content": "After this change, anyone on the Internet can see blobs in a public",
      "pos": [
        2655,
        2722
      ]
    },
    {
      "content": "container, but only you can modify or delete them.",
      "pos": [
        2723,
        2773
      ]
    },
    {
      "content": "Upload a blob into a container",
      "pos": [
        2778,
        2808
      ]
    },
    {
      "content": "To upload data to a blob, use the <bpt id=\"p1\">**</bpt>put\\_block\\_blob\\_from\\_path<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>put\\_block\\_blob\\_from\\_file<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>put\\_block\\_blob\\_from\\_bytes<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>put\\_block\\_blob\\_from\\_text<ept id=\"p4\">**</ept> methods.",
      "pos": [
        2810,
        2990
      ]
    },
    {
      "content": "They are high-level methods that perform the necessary chunking when the size of the data exceeds 64 MB.",
      "pos": [
        2991,
        3095
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>put\\_block\\_blob\\_from\\_path<ept id=\"p1\">**</ept> uploads the contents of a file from the specified path, and <bpt id=\"p2\">**</bpt>put\\_block\\_blob\\_from\\_file<ept id=\"p2\">**</ept> uploads the contents from an already opened file/stream.",
      "pos": [
        3097,
        3279
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>put\\_block\\_blob\\_from\\_bytes<ept id=\"p1\">**</ept> uploads an array of bytes, and <bpt id=\"p2\">**</bpt>put\\_block\\_blob\\_from\\_text<ept id=\"p2\">**</ept> uploads the specified text value using the specified encoding (defaults to UTF-8).",
      "pos": [
        3280,
        3460
      ]
    },
    {
      "pos": [
        3462,
        3557
      ],
      "content": "The following example uploads the contents of the <bpt id=\"p1\">**</bpt>sunset.png<ept id=\"p1\">**</ept> file into the <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> blob."
    },
    {
      "content": "List the blobs in a container",
      "pos": [
        3718,
        3747
      ]
    },
    {
      "content": "To list the blobs in a container, use the <bpt id=\"p1\">**</bpt>list\\_blobs<ept id=\"p1\">**</ept> method.",
      "pos": [
        3749,
        3814
      ]
    },
    {
      "content": "Each",
      "pos": [
        3815,
        3819
      ]
    },
    {
      "content": "call to <bpt id=\"p1\">**</bpt>list\\_blobs<ept id=\"p1\">**</ept> will return a segment of results.",
      "pos": [
        3820,
        3877
      ]
    },
    {
      "content": "To get all results,",
      "pos": [
        3878,
        3897
      ]
    },
    {
      "content": "check the <bpt id=\"p1\">**</bpt>next\\_marker<ept id=\"p1\">**</ept> of the results and call <bpt id=\"p2\">**</bpt>list\\_blobs<ept id=\"p2\">**</ept> again as",
      "pos": [
        3898,
        3973
      ]
    },
    {
      "content": "needed.",
      "pos": [
        3974,
        3981
      ]
    },
    {
      "content": "The following code outputs the <bpt id=\"p1\">**</bpt>name<ept id=\"p1\">**</ept> of each blob in a container",
      "pos": [
        3982,
        4049
      ]
    },
    {
      "content": "to the console.",
      "pos": [
        4050,
        4065
      ]
    },
    {
      "content": "Download blobs",
      "pos": [
        4353,
        4367
      ]
    },
    {
      "content": "Each segment of results can contain a variable number of blobs up to a maximum",
      "pos": [
        4369,
        4447
      ]
    },
    {
      "content": "of 5000.",
      "pos": [
        4448,
        4456
      ]
    },
    {
      "content": "If <bpt id=\"p1\">**</bpt>next\\_marker<ept id=\"p1\">**</ept> exists for a particular segment, there may be",
      "pos": [
        4457,
        4522
      ]
    },
    {
      "content": "more blobs in the container.",
      "pos": [
        4523,
        4551
      ]
    },
    {
      "content": "To download data from a blob, use <bpt id=\"p1\">**</bpt>get\\_blob\\_to\\_path<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>get\\_blob\\_to\\_file<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>get\\_blob\\_to\\_bytes<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>get\\_blob\\_to\\_text<ept id=\"p4\">**</ept>.",
      "pos": [
        4553,
        4690
      ]
    },
    {
      "content": "They are high-level methods that perform the necessary chunking when the size of the data exceeds 64 MB.",
      "pos": [
        4691,
        4795
      ]
    },
    {
      "pos": [
        4797,
        4954
      ],
      "content": "The following example demonstrates using <bpt id=\"p1\">**</bpt>get\\_blob\\_to\\_path<ept id=\"p1\">**</ept> to download the contents of the <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> blob and store it to the <bpt id=\"p3\">**</bpt>out-sunset.png<ept id=\"p3\">**</ept> file."
    },
    {
      "content": "Delete a blob",
      "pos": [
        5037,
        5050
      ]
    },
    {
      "pos": [
        5052,
        5100
      ],
      "content": "Finally, to delete a blob, call <bpt id=\"p1\">**</bpt>delete_blob<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Next steps",
      "pos": [
        5160,
        5170
      ]
    },
    {
      "content": "Now that you have learned the basics of Blob storage, follow these links",
      "pos": [
        5172,
        5244
      ]
    },
    {
      "content": "to learn about more complex storage tasks.",
      "pos": [
        5245,
        5287
      ]
    },
    {
      "pos": [
        5293,
        5356
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Storing and Accessing Data in Azure<ept id=\"p1\">][]</ept>"
    },
    {
      "pos": [
        5361,
        5398
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt>Azure Storage Team Blog<ept id=\"p1\">][]</ept>"
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Azure Blob storage from Python | Microsoft Azure\"\n    description=\"Learn how to use the Azure Blob storage from Python to upload, list, download, and delete blobs.\"\n    services=\"storage\"\n    documentationCenter=\"python\"\n    authors=\"emgerner-msft\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"python\"\n    ms.topic=\"article\"\n    ms.date=\"08/25/2015\"\n    ms.author=\"emgerner\"/>\n\n# How to use Azure Blob storage from Python\n\n[AZURE.INCLUDE [storage-selector-blob-include](../../includes/storage-selector-blob-include.md)]\n\n## Overview\n\nThis article will show you how to perform common scenarios using Blob storage. The samples are written in Python and use the [Python Azure Storage package][]. The scenarios covered include uploading, listing,\ndownloading, and deleting blobs.\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n## Create a container\n\n> [AZURE.NOTE] If you need to install Python or the [Python Azure package][], see the [Python Installation Guide](../python-how-to-install.md).\n\nThe **BlobService** object lets you work with containers and blobs. The\nfollowing code creates a **BlobService** object. Add the following near\nthe top of any Python file in which you wish to programmatically access Azure Storage.\n\n    from azure.storage.blob import BlobService\n\nThe following code creates a **BlobService** object using the storage account name and account key.  Replace 'myaccount' and 'mykey' with the real account and key.\n\n    blob_service = BlobService(account_name='myaccount', account_key='mykey')\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../../includes/storage-container-naming-rules-include.md)]\n\nIn the following code example, you can use a **BlobService** object to create the container if it doesn't exist.\n\n    blob_service.create_container('mycontainer')\n\nBy default, the new container is private, so you must specify your storage access key (as you did earlier) to download blobs from this container. If you want to make the files within the container available to everyone, you can create the container and pass the public access level using the following code.\n\n    blob_service.create_container('mycontainer', x_ms_blob_public_access='container')\n\nAlternatively, you can modify a container after you have created it using the following code.\n\n    blob_service.set_container_acl('mycontainer', x_ms_blob_public_access='container')\n\nAfter this change, anyone on the Internet can see blobs in a public\ncontainer, but only you can modify or delete them.\n\n## Upload a blob into a container\n\nTo upload data to a blob, use the **put\\_block\\_blob\\_from\\_path**, **put\\_block\\_blob\\_from\\_file**, **put\\_block\\_blob\\_from\\_bytes** or **put\\_block\\_blob\\_from\\_text** methods. They are high-level methods that perform the necessary chunking when the size of the data exceeds 64 MB.\n\n**put\\_block\\_blob\\_from\\_path** uploads the contents of a file from the specified path, and **put\\_block\\_blob\\_from\\_file** uploads the contents from an already opened file/stream. **put\\_block\\_blob\\_from\\_bytes** uploads an array of bytes, and **put\\_block\\_blob\\_from\\_text** uploads the specified text value using the specified encoding (defaults to UTF-8).\n\nThe following example uploads the contents of the **sunset.png** file into the **myblob** blob.\n\n    blob_service.put_block_blob_from_path(\n        'mycontainer',\n        'myblob',\n        'sunset.png',\n        x_ms_blob_content_type='image/png'\n    )\n\n## List the blobs in a container\n\nTo list the blobs in a container, use the **list\\_blobs** method. Each\ncall to **list\\_blobs** will return a segment of results. To get all results,\ncheck the **next\\_marker** of the results and call **list\\_blobs** again as\nneeded. The following code outputs the **name** of each blob in a container\nto the console.\n\n    blobs = []\n    marker = None\n    while True:\n        batch = blob_service.list_blobs('mycontainer', marker=marker)\n        blobs.extend(batch)\n        if not batch.next_marker:\n            break\n        marker = batch.next_marker\n    for blob in blobs:\n        print(blob.name)\n\n## Download blobs\n\nEach segment of results can contain a variable number of blobs up to a maximum\nof 5000. If **next\\_marker** exists for a particular segment, there may be\nmore blobs in the container.\n\nTo download data from a blob, use **get\\_blob\\_to\\_path**, **get\\_blob\\_to\\_file**, **get\\_blob\\_to\\_bytes**, or **get\\_blob\\_to\\_text**. They are high-level methods that perform the necessary chunking when the size of the data exceeds 64 MB.\n\nThe following example demonstrates using **get\\_blob\\_to\\_path** to download the contents of the **myblob** blob and store it to the **out-sunset.png** file.\n\n    blob_service.get_blob_to_path('mycontainer', 'myblob', 'out-sunset.png')\n\n## Delete a blob\n\nFinally, to delete a blob, call **delete_blob**.\n\n    blob_service.delete_blob('mycontainer', 'myblob')\n\n## Next steps\n\nNow that you have learned the basics of Blob storage, follow these links\nto learn about more complex storage tasks.\n\n-   See the MSDN Reference: [Storing and Accessing Data in Azure][]\n-   Visit the [Azure Storage Team Blog][]\n\n[Storing and Accessing Data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n[Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n[Python Azure package]: https://pypi.python.org/pypi/azure\n[Python Azure Storage package]: https://pypi.python.org/pypi/azure-storage  \n"
}