{
  "nodes": [
    {
      "content": "How to use Service Bus topics (Node.js) | Microsoft Azure",
      "pos": [
        28,
        85
      ]
    },
    {
      "content": "Learn how to use Service Bus topics and subscriptions in Azure from a Node.js app.",
      "pos": [
        105,
        187
      ]
    },
    {
      "content": "How to Use Service Bus topics and subscriptions",
      "pos": [
        508,
        555
      ]
    },
    {
      "content": "This guide describes how to use Service Bus topics and subscriptions",
      "pos": [
        557,
        625
      ]
    },
    {
      "content": "from Node.js applications.",
      "pos": [
        626,
        652
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>creating\ntopics and subscriptions, creating subscription filters, sending\nmessages<ept id=\"p1\">**</ept> to a topic, <bpt id=\"p2\">**</bpt>receiving messages from a subscription<ept id=\"p2\">**</ept>, and",
      "pos": [
        653,
        829
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>deleting topics and subscriptions<ept id=\"p1\">**</ept>.",
      "pos": [
        830,
        868
      ]
    },
    {
      "content": "For more information on topics",
      "pos": [
        869,
        899
      ]
    },
    {
      "content": "and subscriptions, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#next-steps)</ept> section.",
      "pos": [
        900,
        961
      ]
    },
    {
      "content": "Create a Node.js application",
      "pos": [
        1054,
        1082
      ]
    },
    {
      "content": "Create a blank Node.js application.",
      "pos": [
        1084,
        1119
      ]
    },
    {
      "content": "For instructions on creating a Node.js application, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Create and deploy a Node.js application to an Azure Web Site]</ept>, <bpt id=\"p2\">[</bpt>Node.js Cloud Service<ept id=\"p2\">][Node.js Cloud Service]</ept> (using Windows PowerShell), or Web Site with WebMatrix.",
      "pos": [
        1120,
        1342
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        1347,
        1392
      ]
    },
    {
      "content": "To use Service Bus, download the Node.js azure package.",
      "pos": [
        1394,
        1449
      ]
    },
    {
      "content": "This package includes a set of libraries that",
      "pos": [
        1450,
        1495
      ]
    },
    {
      "content": "communicate with the Service Bus REST services.",
      "pos": [
        1496,
        1543
      ]
    },
    {
      "content": "Use Node Package Manager (NPM) to obtain the package",
      "pos": [
        1549,
        1601
      ]
    },
    {
      "pos": [
        1607,
        1775
      ],
      "content": "Use a command-line interface such as <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows,) <bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac,) or <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix), navigate to the folder where you created your sample application."
    },
    {
      "pos": [
        1781,
        1879
      ],
      "content": "Type **npm install azure** in the command window, which should\nresult in the following output:",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "Type <bpt id=\"p1\">**</bpt>npm install azure<ept id=\"p1\">**</ept> in the command window, which should",
          "pos": [
            0,
            62
          ]
        },
        {
          "content": "result in the following output:",
          "pos": [
            63,
            94
          ]
        }
      ]
    },
    {
      "pos": [
        2410,
        2631
      ],
      "content": "You can manually run the **ls** command to verify that a\n**node\\_modules** folder was created. Inside that folder find the\n**azure** package, which contains the libraries you need to access\nService Bus topics.",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "You can manually run the <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> command to verify that a",
          "pos": [
            0,
            56
          ]
        },
        {
          "content": "**node\\_modules** folder was created. Inside that folder find the",
          "pos": [
            57,
            122
          ],
          "nodes": [
            {
              "content": "<bpt id=\"p1\">**</bpt>node\\_modules<ept id=\"p1\">**</ept> folder was created.",
              "pos": [
                0,
                37
              ]
            },
            {
              "content": "Inside that folder find the",
              "pos": [
                38,
                65
              ]
            }
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>azure<ept id=\"p1\">**</ept> package, which contains the libraries you need to access",
          "pos": [
            123,
            189
          ]
        },
        {
          "content": "Service Bus topics.",
          "pos": [
            190,
            209
          ]
        }
      ]
    },
    {
      "content": "Import the module",
      "pos": [
        2637,
        2654
      ]
    },
    {
      "content": "Using Notepad or another text editor, add the following to the top of",
      "pos": [
        2656,
        2725
      ]
    },
    {
      "content": "the <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> file of the application:",
      "pos": [
        2726,
        2768
      ]
    },
    {
      "content": "Set up a Service Bus connection",
      "pos": [
        2809,
        2840
      ]
    },
    {
      "content": "The azure module will read the environment variables AZURE\\_SERVICEBUS\\_NAMESPACE and AZURE\\_SERVICEBUS\\_ACCESS\\_KEY for information required to connect to your Azure Service Bus.",
      "pos": [
        2842,
        3021
      ]
    },
    {
      "content": "If these environment variables are not set, you must specify the account information when calling <bpt id=\"p1\">**</bpt>createServiceBusService<ept id=\"p1\">**</ept>.",
      "pos": [
        3022,
        3148
      ]
    },
    {
      "pos": [
        3150,
        3295
      ],
      "content": "For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Cloud Service with Storage]</ept>."
    },
    {
      "pos": [
        3297,
        3438
      ],
      "content": "For an example of setting the environment variables in the management portal for an Azure Website, see <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Web Application with Storage]</ept>"
    },
    {
      "content": "How to create a topic",
      "pos": [
        3443,
        3464
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object lets you work with topics.",
      "pos": [
        3466,
        3525
      ]
    },
    {
      "content": "The",
      "pos": [
        3526,
        3529
      ]
    },
    {
      "content": "following code creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        3530,
        3584
      ]
    },
    {
      "content": "Add it near the",
      "pos": [
        3585,
        3600
      ]
    },
    {
      "content": "top of the <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> file, after the statement to import the azure",
      "pos": [
        3601,
        3671
      ]
    },
    {
      "content": "module:",
      "pos": [
        3672,
        3679
      ]
    },
    {
      "content": "By calling <bpt id=\"p1\">**</bpt>createTopicIfNotExists<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept>",
      "pos": [
        3743,
        3809
      ]
    },
    {
      "content": "object, the specified topic will be returned (if it exists,) or a new",
      "pos": [
        3810,
        3879
      ]
    },
    {
      "content": "topic with the specified name will be created.",
      "pos": [
        3880,
        3926
      ]
    },
    {
      "content": "The following code uses",
      "pos": [
        3927,
        3950
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>createTopicIfNotExists<ept id=\"p1\">**</ept> to create or connect to the topic named",
      "pos": [
        3951,
        4017
      ]
    },
    {
      "content": "'MyTopic':",
      "pos": [
        4018,
        4028
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>createServiceBusService<ept id=\"p1\">**</ept> also supports additional options, which",
      "pos": [
        4237,
        4304
      ]
    },
    {
      "content": "allow you to override default topic settings such as message time to",
      "pos": [
        4305,
        4373
      ]
    },
    {
      "content": "live or maximum topic size.",
      "pos": [
        4374,
        4401
      ]
    },
    {
      "content": "The following example shows demonstrates",
      "pos": [
        4402,
        4442
      ]
    },
    {
      "content": "setting the maximum topic size to 5GB a time to live of 1 minute:",
      "pos": [
        4443,
        4508
      ]
    },
    {
      "content": "Filters",
      "pos": [
        4805,
        4812
      ]
    },
    {
      "content": "Optional filtering operations can be applied to operations performed using <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept>.",
      "pos": [
        4814,
        4911
      ]
    },
    {
      "content": "Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:",
      "pos": [
        4912,
        5046
      ]
    },
    {
      "content": "After doing its preprocessing on the request options, the method needs to call \"next\" passing a callback with the following signature:",
      "pos": [
        5096,
        5230
      ]
    },
    {
      "content": "In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.",
      "pos": [
        5286,
        5554
      ]
    },
    {
      "content": "Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>.",
      "pos": [
        5556,
        5705
      ]
    },
    {
      "content": "The following creates a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object that uses the <bpt id=\"p2\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p2\">**</ept>:",
      "pos": [
        5706,
        5806
      ]
    },
    {
      "content": "How to create subscriptions",
      "pos": [
        5969,
        5996
      ]
    },
    {
      "content": "Topic subscriptions are also created with the <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept>",
      "pos": [
        5998,
        6065
      ]
    },
    {
      "content": "object.",
      "pos": [
        6066,
        6073
      ]
    },
    {
      "content": "Subscriptions are named and can have an optional filter that",
      "pos": [
        6074,
        6134
      ]
    },
    {
      "content": "restricts the set of messages delivered to the subscription's virtual",
      "pos": [
        6135,
        6204
      ]
    },
    {
      "content": "queue.",
      "pos": [
        6205,
        6211
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Subscriptions are persistent and will continue to exist until",
      "pos": [
        6215,
        6289
      ]
    },
    {
      "content": "either they, or the topic they are associated with, are deleted.",
      "pos": [
        6290,
        6354
      ]
    },
    {
      "content": "If your",
      "pos": [
        6355,
        6362
      ]
    },
    {
      "content": "application contains logic to create a subscription, it should first",
      "pos": [
        6363,
        6431
      ]
    },
    {
      "content": "check if the subscription already exists by using the",
      "pos": [
        6432,
        6485
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>getSubscription<ept id=\"p1\">**</ept> method.",
      "pos": [
        6486,
        6513
      ]
    },
    {
      "content": "Create a subscription with the default (MatchAll) filter",
      "pos": [
        6519,
        6575
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> filter is the default filter that is used if no filter",
      "pos": [
        6577,
        6648
      ]
    },
    {
      "content": "is specified when a new subscription is created.",
      "pos": [
        6649,
        6697
      ]
    },
    {
      "content": "When the <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept>",
      "pos": [
        6698,
        6719
      ]
    },
    {
      "content": "filter is used, all messages published to the topic are placed in the",
      "pos": [
        6720,
        6789
      ]
    },
    {
      "content": "subscription's virtual queue.",
      "pos": [
        6790,
        6819
      ]
    },
    {
      "content": "The following example creates a",
      "pos": [
        6820,
        6851
      ]
    },
    {
      "content": "subscription named 'AllMessages' and uses the default <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept>",
      "pos": [
        6852,
        6918
      ]
    },
    {
      "content": "filter.",
      "pos": [
        6919,
        6926
      ]
    },
    {
      "content": "Create subscriptions with filters",
      "pos": [
        7089,
        7122
      ]
    },
    {
      "content": "You can also create filters that allow you to scope which messages sent",
      "pos": [
        7124,
        7195
      ]
    },
    {
      "content": "to a topic should show up within a specific topic subscription.",
      "pos": [
        7196,
        7259
      ]
    },
    {
      "content": "The most flexible type of filter supported by subscriptions is the",
      "pos": [
        7261,
        7327
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept>, which implements a subset of SQL92.",
      "pos": [
        7328,
        7378
      ]
    },
    {
      "content": "SQL filters operate",
      "pos": [
        7379,
        7398
      ]
    },
    {
      "content": "on the properties of the messages that are published to the topic.",
      "pos": [
        7399,
        7465
      ]
    },
    {
      "content": "For",
      "pos": [
        7466,
        7469
      ]
    },
    {
      "content": "more details about the expressions that can be used with a SQL filter,",
      "pos": [
        7470,
        7540
      ]
    },
    {
      "content": "review the <bpt id=\"p1\">[</bpt>SqlFilter.SqlExpression<ept id=\"p1\">][SqlFilter.SqlExpression]</ept> syntax.",
      "pos": [
        7541,
        7610
      ]
    },
    {
      "content": "Filters can be added to a subscription by using the <bpt id=\"p1\">**</bpt>createRule<ept id=\"p1\">**</ept>",
      "pos": [
        7612,
        7678
      ]
    },
    {
      "content": "method of the <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        7679,
        7722
      ]
    },
    {
      "content": "This method allows you to",
      "pos": [
        7723,
        7748
      ]
    },
    {
      "content": "add new filters to an existing subscription.",
      "pos": [
        7749,
        7793
      ]
    },
    {
      "content": "Since the default filter is applied automatically to all new",
      "pos": [
        7813,
        7873
      ]
    },
    {
      "content": "subscriptions, you must first remove the default filter or the",
      "pos": [
        7874,
        7936
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> will override any other filters you may specify.",
      "pos": [
        7937,
        7998
      ]
    },
    {
      "content": "You can",
      "pos": [
        7999,
        8006
      ]
    },
    {
      "content": "remove the default rule by using the <bpt id=\"p1\">**</bpt>deleteRule<ept id=\"p1\">**</ept> method of the",
      "pos": [
        8007,
        8072
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        8073,
        8102
      ]
    },
    {
      "content": "The example below creates a subscription named 'HighMessages' with a",
      "pos": [
        8104,
        8172
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept> that only selects messages that have a custom",
      "pos": [
        8173,
        8232
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>messagenumber<ept id=\"p1\">**</ept> property greater than 3:",
      "pos": [
        8233,
        8275
      ]
    },
    {
      "content": "Similarly, the following example creates a subscription named",
      "pos": [
        9210,
        9271
      ]
    },
    {
      "content": "'LowMessages' with a <bpt id=\"p1\">**</bpt>SqlFilter<ept id=\"p1\">**</ept> that only selects messages that have",
      "pos": [
        9272,
        9343
      ]
    },
    {
      "content": "a <bpt id=\"p1\">**</bpt>messagenumber<ept id=\"p1\">**</ept> property less than or equal to 3:",
      "pos": [
        9344,
        9397
      ]
    },
    {
      "content": "When a message is now sent to 'MyTopic', it will always be delivered to",
      "pos": [
        10329,
        10400
      ]
    },
    {
      "content": "receivers subscribed to the 'AllMessages' topic subscription, and",
      "pos": [
        10401,
        10466
      ]
    },
    {
      "content": "selectively delivered to receivers subscribed to the 'HighMessages' and",
      "pos": [
        10467,
        10538
      ]
    },
    {
      "content": "'LowMessages' topic subscriptions (depending upon the message content).",
      "pos": [
        10539,
        10610
      ]
    },
    {
      "content": "How to send messages to a topic",
      "pos": [
        10615,
        10646
      ]
    },
    {
      "content": "To send a message to a Service Bus topic, your application must use the",
      "pos": [
        10648,
        10719
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>sendTopicMessage<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> object.",
      "pos": [
        10720,
        10784
      ]
    },
    {
      "content": "Messages sent to Service Bus Topics are <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects.",
      "pos": [
        10785,
        10853
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set of standard properties (such as",
      "pos": [
        10854,
        10924
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>TimeToLive<ept id=\"p2\">**</ept>), a dictionary that is used to hold custom",
      "pos": [
        10925,
        10996
      ]
    },
    {
      "content": "application specific properties, and a body of string data.",
      "pos": [
        10997,
        11056
      ]
    },
    {
      "content": "An",
      "pos": [
        11057,
        11059
      ]
    },
    {
      "content": "application can set the body of the message by passing a string value to",
      "pos": [
        11060,
        11132
      ]
    },
    {
      "content": "the <bpt id=\"p1\">**</bpt>sendTopicMessage<ept id=\"p1\">**</ept> and any required standard properties will be",
      "pos": [
        11133,
        11202
      ]
    },
    {
      "content": "populated by default values.",
      "pos": [
        11203,
        11231
      ]
    },
    {
      "content": "The following example demonstrates how to send five test messages to",
      "pos": [
        11233,
        11301
      ]
    },
    {
      "content": "'MyTopic'.",
      "pos": [
        11302,
        11312
      ]
    },
    {
      "content": "Note that the <bpt id=\"p1\">**</bpt>messagenumber<ept id=\"p1\">**</ept> property value of each",
      "pos": [
        11313,
        11367
      ]
    },
    {
      "content": "message varies on the iteration of the loop (this will determine which",
      "pos": [
        11368,
        11438
      ]
    },
    {
      "content": "subscriptions receive it):",
      "pos": [
        11439,
        11465
      ]
    },
    {
      "content": "Service Bus topics support a maximum message size of 256 MB (the header,",
      "pos": [
        11864,
        11936
      ]
    },
    {
      "content": "which includes the standard and custom application properties, can have",
      "pos": [
        11937,
        12008
      ]
    },
    {
      "content": "a maximum size of 64 MB).",
      "pos": [
        12009,
        12034
      ]
    },
    {
      "content": "There is no limit on the number of messages",
      "pos": [
        12035,
        12078
      ]
    },
    {
      "content": "held in a topic but there is a cap on the total size of the messages",
      "pos": [
        12079,
        12147
      ]
    },
    {
      "content": "held by a topic.",
      "pos": [
        12148,
        12164
      ]
    },
    {
      "content": "This topic size is defined at creation time, with an",
      "pos": [
        12165,
        12217
      ]
    },
    {
      "content": "upper limit of 5 GB.",
      "pos": [
        12218,
        12238
      ]
    },
    {
      "content": "How to receive messages from a subscription",
      "pos": [
        12243,
        12286
      ]
    },
    {
      "content": "Messages are received from a subscription using the",
      "pos": [
        12288,
        12339
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>receiveSubscriptionMessage<ept id=\"p1\">**</ept> method on the <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept>",
      "pos": [
        12340,
        12406
      ]
    },
    {
      "content": "object.",
      "pos": [
        12407,
        12414
      ]
    },
    {
      "content": "By default, messages are deleted from the subscription as they",
      "pos": [
        12415,
        12477
      ]
    },
    {
      "content": "are read; however, you can read (peek) and lock the message without",
      "pos": [
        12478,
        12545
      ]
    },
    {
      "content": "deleting it from the subscription by setting the optional parameter",
      "pos": [
        12546,
        12613
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.",
      "pos": [
        12614,
        12641
      ]
    },
    {
      "content": "The default behavior of reading and deleting the message as part of the",
      "pos": [
        12643,
        12714
      ]
    },
    {
      "content": "receive operation is the simplest model, and works best for scenarios in",
      "pos": [
        12715,
        12787
      ]
    },
    {
      "content": "which an application can tolerate not processing a message in the event",
      "pos": [
        12788,
        12859
      ]
    },
    {
      "content": "of a failure.",
      "pos": [
        12860,
        12873
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the",
      "pos": [
        12874,
        12926
      ]
    },
    {
      "content": "consumer issues the receive request and then crashes before processing",
      "pos": [
        12927,
        12997
      ]
    },
    {
      "content": "it.",
      "pos": [
        12998,
        13001
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed,",
      "pos": [
        13002,
        13069
      ]
    },
    {
      "content": "then when the application restarts and begins consuming messages again,",
      "pos": [
        13070,
        13141
      ]
    },
    {
      "content": "it will have missed the message that was consumed prior to the crash.",
      "pos": [
        13142,
        13211
      ]
    },
    {
      "content": "If the <bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> parameter is set to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, the receive becomes",
      "pos": [
        13213,
        13284
      ]
    },
    {
      "content": "a two stage operation, which makes it possible to support applications",
      "pos": [
        13285,
        13355
      ]
    },
    {
      "content": "that cannot tolerate missing messages.",
      "pos": [
        13356,
        13394
      ]
    },
    {
      "content": "When Service Bus receives a",
      "pos": [
        13395,
        13422
      ]
    },
    {
      "content": "request, it finds the next message to be consumed, locks it to prevent",
      "pos": [
        13423,
        13493
      ]
    },
    {
      "content": "other consumers receiving it, and then returns it to the application.",
      "pos": [
        13494,
        13563
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it",
      "pos": [
        13564,
        13631
      ]
    },
    {
      "content": "reliably for future processing), it completes the second stage of the",
      "pos": [
        13632,
        13701
      ]
    },
    {
      "content": "receive process by calling <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method and providing the",
      "pos": [
        13702,
        13771
      ]
    },
    {
      "content": "message to be deleted as a parameter.",
      "pos": [
        13772,
        13809
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method will",
      "pos": [
        13810,
        13843
      ]
    },
    {
      "content": "mark the message as being consumed and remove it from the subscription.",
      "pos": [
        13844,
        13915
      ]
    },
    {
      "content": "The example below demonstrates how messages can be received and",
      "pos": [
        13917,
        13980
      ]
    },
    {
      "content": "processed using <bpt id=\"p1\">**</bpt>receiveSubscriptionMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        13981,
        14028
      ]
    },
    {
      "content": "The example first",
      "pos": [
        14029,
        14046
      ]
    },
    {
      "content": "receives and deletes a message from the 'LowMessages' subscription, and",
      "pos": [
        14047,
        14118
      ]
    },
    {
      "content": "then receives a message from the 'HighMessages' subscription using",
      "pos": [
        14119,
        14185
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>isPeekLock<ept id=\"p1\">**</ept> set to true.",
      "pos": [
        14186,
        14213
      ]
    },
    {
      "content": "It then deletes the message using",
      "pos": [
        14214,
        14247
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept>:",
      "pos": [
        14248,
        14266
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        15006,
        15063
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from",
      "pos": [
        15065,
        15135
      ]
    },
    {
      "content": "errors in your application or difficulties processing a message.",
      "pos": [
        15136,
        15200
      ]
    },
    {
      "content": "If a",
      "pos": [
        15201,
        15205
      ]
    },
    {
      "content": "receiver application is unable to process the message for some reason,",
      "pos": [
        15206,
        15276
      ]
    },
    {
      "content": "then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the",
      "pos": [
        15277,
        15329
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object.",
      "pos": [
        15330,
        15359
      ]
    },
    {
      "content": "This will cause Service Bus to unlock the",
      "pos": [
        15360,
        15401
      ]
    },
    {
      "content": "message within the subscription and make it available to be received",
      "pos": [
        15402,
        15470
      ]
    },
    {
      "content": "again, either by the same consuming application or by another consuming",
      "pos": [
        15471,
        15542
      ]
    },
    {
      "content": "application.",
      "pos": [
        15543,
        15555
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the",
      "pos": [
        15557,
        15624
      ]
    },
    {
      "content": "subscription, and if the application fails to process the message before",
      "pos": [
        15625,
        15697
      ]
    },
    {
      "content": "the lock timeout expires (e.g., if the application crashes), then",
      "pos": [
        15698,
        15763
      ]
    },
    {
      "content": "Service Bus will unlock the message automatically and make it available",
      "pos": [
        15764,
        15835
      ]
    },
    {
      "content": "to be received again.",
      "pos": [
        15836,
        15857
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message",
      "pos": [
        15859,
        15929
      ]
    },
    {
      "content": "but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method is called, then the message will",
      "pos": [
        15930,
        16002
      ]
    },
    {
      "content": "be redelivered to the application when it restarts.",
      "pos": [
        16003,
        16054
      ]
    },
    {
      "content": "This is often called",
      "pos": [
        16055,
        16075
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be processed at",
      "pos": [
        16076,
        16148
      ]
    },
    {
      "content": "least once but in certain situations the same message may be",
      "pos": [
        16149,
        16209
      ]
    },
    {
      "content": "redelivered.",
      "pos": [
        16210,
        16222
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then",
      "pos": [
        16223,
        16281
      ]
    },
    {
      "content": "application developers should add additional logic to their application",
      "pos": [
        16282,
        16353
      ]
    },
    {
      "content": "to handle duplicate message delivery.",
      "pos": [
        16354,
        16391
      ]
    },
    {
      "content": "This is often achieved using the",
      "pos": [
        16392,
        16424
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>MessageId<ept id=\"p1\">**</ept> property of the message, which will remain constant across",
      "pos": [
        16425,
        16497
      ]
    },
    {
      "content": "delivery attempts.",
      "pos": [
        16498,
        16516
      ]
    },
    {
      "content": "How to delete topics and subscriptions",
      "pos": [
        16521,
        16559
      ]
    },
    {
      "content": "Topics and subscriptions are persistent, and must be explicitly deleted",
      "pos": [
        16561,
        16632
      ]
    },
    {
      "content": "either through the Azure Management portal or programmatically.",
      "pos": [
        16633,
        16696
      ]
    },
    {
      "content": "The example below demonstrates how to delete the topic named 'MyTopic':",
      "pos": [
        16697,
        16768
      ]
    },
    {
      "content": "Deleting a topic will also delete any subscriptions that are registered",
      "pos": [
        16906,
        16977
      ]
    },
    {
      "content": "with the topic.",
      "pos": [
        16978,
        16993
      ]
    },
    {
      "content": "Subscriptions can also be deleted independently.",
      "pos": [
        16994,
        17042
      ]
    },
    {
      "content": "The",
      "pos": [
        17043,
        17046
      ]
    },
    {
      "content": "following code demonstrates how to delete a subscription named",
      "pos": [
        17047,
        17109
      ]
    },
    {
      "content": "'HighMessages' from the 'MyTopic' topic:",
      "pos": [
        17110,
        17150
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        17313,
        17323
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus topics, follow these",
      "pos": [
        17325,
        17395
      ]
    },
    {
      "content": "links to learn more.",
      "pos": [
        17396,
        17416
      ]
    },
    {
      "pos": [
        17422,
        17484
      ],
      "content": "See the MSDN Reference: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        17489,
        17521
      ],
      "content": "API reference for <bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        17526,
        17578
      ],
      "content": "Visit the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure SDK for Node]</ept> repository on GitHub."
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use Service Bus topics (Node.js) | Microsoft Azure\" \n    description=\"Learn how to use Service Bus topics and subscriptions in Azure from a Node.js app.\" \n    services=\"service-bus\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"07/02/2015\" \n    ms.author=\"mwasson\"/>\n\n\n# How to Use Service Bus topics and subscriptions\n\nThis guide describes how to use Service Bus topics and subscriptions\nfrom Node.js applications. The scenarios covered include **creating\ntopics and subscriptions, creating subscription filters, sending\nmessages** to a topic, **receiving messages from a subscription**, and\n**deleting topics and subscriptions**. For more information on topics\nand subscriptions, see the [Next steps](#next-steps) section.\n\n[AZURE.INCLUDE [howto-service-bus-topics](../../includes/howto-service-bus-topics.md)]\n\n## Create a Node.js application\n\nCreate a blank Node.js application. For instructions on creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], [Node.js Cloud Service][Node.js Cloud Service] (using Windows PowerShell), or Web Site with WebMatrix.\n\n## Configure your application to use Service Bus\n\nTo use Service Bus, download the Node.js azure package. This package includes a set of libraries that\ncommunicate with the Service Bus REST services.\n\n### Use Node Package Manager (NPM) to obtain the package\n\n1.  Use a command-line interface such as **PowerShell** (Windows,) **Terminal** (Mac,) or **Bash** (Unix), navigate to the folder where you created your sample application.\n\n2.  Type **npm install azure** in the command window, which should\n    result in the following output:\n\n         azure@0.7.5 node_modules\\azure\n        ├── dateformat@1.0.2-1.2.3\n        ├── xmlbuilder@0.4.2\n        ├── node-uuid@1.2.0\n        ├── mime@1.2.9\n        ├── underscore@1.4.4\n        ├── validator@1.1.1\n        ├── tunnel@0.0.2\n        ├── wns@0.5.3\n        ├── xml2js@0.2.7 (sax@0.5.2)\n        └── request@2.21.0 (json-stringify-safe@4.0.0, forever-agent@0.5.0, aws-sign@0.3.0, tunnel-agent@0.3.0, oauth-sign@0.3.0, qs@0.6.5, cookie-jar@0.3.0, node-uuid@1.4.0, http-signature@0.9.11, form-data@0.0.8, hawk@0.13.1)\n\n3.  You can manually run the **ls** command to verify that a\n    **node\\_modules** folder was created. Inside that folder find the\n    **azure** package, which contains the libraries you need to access\n    Service Bus topics.\n\n### Import the module\n\nUsing Notepad or another text editor, add the following to the top of\nthe **server.js** file of the application:\n\n    var azure = require('azure');\n\n### Set up a Service Bus connection\n\nThe azure module will read the environment variables AZURE\\_SERVICEBUS\\_NAMESPACE and AZURE\\_SERVICEBUS\\_ACCESS\\_KEY for information required to connect to your Azure Service Bus. If these environment variables are not set, you must specify the account information when calling **createServiceBusService**.\n\nFor an example of setting the environment variables in a configuration file for an Azure Cloud Service, see [Node.js Cloud Service with Storage].\n\nFor an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]\n\n## How to create a topic\n\nThe **ServiceBusService** object lets you work with topics. The\nfollowing code creates a **ServiceBusService** object. Add it near the\ntop of the **server.js** file, after the statement to import the azure\nmodule:\n\n    var serviceBusService = azure.createServiceBusService();\n\nBy calling **createTopicIfNotExists** on the **ServiceBusService**\nobject, the specified topic will be returned (if it exists,) or a new\ntopic with the specified name will be created. The following code uses\n**createTopicIfNotExists** to create or connect to the topic named\n'MyTopic':\n\n    serviceBusService.createTopicIfNotExists('MyTopic',function(error){\n        if(!error){\n            // Topic was created or exists\n            console.log('topic created or exists.');\n        }\n    });\n\n**createServiceBusService** also supports additional options, which\nallow you to override default topic settings such as message time to\nlive or maximum topic size. The following example shows demonstrates\nsetting the maximum topic size to 5GB a time to live of 1 minute:\n\n    var topicOptions = {\n            MaxSizeInMegabytes: '5120',\n            DefaultMessageTimeToLive: 'PT1M'\n        };\n\n    serviceBusService.createTopicIfNotExists('MyTopic', topicOptions, function(error){\n        if(!error){\n            // topic was created or exists\n        }\n    });\n\n### Filters\n\nOptional filtering operations can be applied to operations performed using **ServiceBusService**. Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:\n\n        function handle (requestOptions, next)\n\nAfter doing its preprocessing on the request options, the method needs to call \"next\" passing a callback with the following signature:\n\n        function (returnObject, finalCallback, next)\n\nIn this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.\n\nTwo filters that implement retry logic are included with the Azure SDK for Node.js, **ExponentialRetryPolicyFilter** and **LinearRetryPolicyFilter**. The following creates a **ServiceBusService** object that uses the **ExponentialRetryPolicyFilter**:\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var serviceBusService = azure.createServiceBusService().withFilter(retryOperations);\n\n## How to create subscriptions\n\nTopic subscriptions are also created with the **ServiceBusService**\nobject. Subscriptions are named and can have an optional filter that\nrestricts the set of messages delivered to the subscription's virtual\nqueue.\n\n> [AZURE.NOTE] Subscriptions are persistent and will continue to exist until\neither they, or the topic they are associated with, are deleted. If your\napplication contains logic to create a subscription, it should first\ncheck if the subscription already exists by using the\n**getSubscription** method.\n\n### Create a subscription with the default (MatchAll) filter\n\nThe **MatchAll** filter is the default filter that is used if no filter\nis specified when a new subscription is created. When the **MatchAll**\nfilter is used, all messages published to the topic are placed in the\nsubscription's virtual queue. The following example creates a\nsubscription named 'AllMessages' and uses the default **MatchAll**\nfilter.\n\n    serviceBusService.createSubscription('MyTopic','AllMessages',function(error){\n        if(!error){\n            // subscription created\n        }\n    });\n\n### Create subscriptions with filters\n\nYou can also create filters that allow you to scope which messages sent\nto a topic should show up within a specific topic subscription.\n\nThe most flexible type of filter supported by subscriptions is the\n**SqlFilter**, which implements a subset of SQL92. SQL filters operate\non the properties of the messages that are published to the topic. For\nmore details about the expressions that can be used with a SQL filter,\nreview the [SqlFilter.SqlExpression][SqlFilter.SqlExpression] syntax.\n\nFilters can be added to a subscription by using the **createRule**\nmethod of the **ServiceBusService** object. This method allows you to\nadd new filters to an existing subscription.\n\n> [AZURE.NOTE]\n\n> Since the default filter is applied automatically to all new\nsubscriptions, you must first remove the default filter or the\n**MatchAll** will override any other filters you may specify. You can\nremove the default rule by using the **deleteRule** method of the\n**ServiceBusService** object.\n\nThe example below creates a subscription named 'HighMessages' with a\n**SqlFilter** that only selects messages that have a custom\n**messagenumber** property greater than 3:\n\n    serviceBusService.createSubscription('MyTopic', 'HighMessages', function (error){\n        if(!error){\n            // subscription created\n            rule.create();\n        }\n    });\n    var rule={\n        deleteDefault: function(){\n            serviceBusService.deleteRule('MyTopic',\n                'HighMessages', \n                azure.Constants.ServiceBusConstants.DEFAULT_RULE_NAME, \n                rule.handleError);\n        },\n        create: function(){\n            var ruleOptions = {\n                sqlExpressionFilter: 'messagenumber > 3'\n            };\n            rule.deleteDefault();\n            serviceBusService.createRule('MyTopic', \n                'HighMessages', \n                'HighMessageFilter', \n                ruleOptions, \n                rule.handleError);\n        },\n        handleError: function(error){\n            if(error){\n                console.log(error)\n            }\n        }\n    }\n\nSimilarly, the following example creates a subscription named\n'LowMessages' with a **SqlFilter** that only selects messages that have\na **messagenumber** property less than or equal to 3:\n\n    serviceBusService.createSubscription('MyTopic', 'LowMessages', function (error){\n        if(!error){\n            // subscription created\n            rule.create();\n        }\n    });\n    var rule={\n        deleteDefault: function(){\n            serviceBusService.deleteRule('MyTopic',\n                'LowMessages', \n                azure.Constants.ServiceBusConstants.DEFAULT_RULE_NAME, \n                rule.handleError);\n        },\n        create: function(){\n            var ruleOptions = {\n                sqlExpressionFilter: 'messagenumber <= 3'\n            };\n            rule.deleteDefault();\n            serviceBusService.createRule('MyTopic', \n                'LowMessages', \n                'LowMessageFilter', \n                ruleOptions, \n                rule.handleError);\n        },\n        handleError: function(error){\n            if(error){\n                console.log(error)\n            }\n        }\n    }\n\nWhen a message is now sent to 'MyTopic', it will always be delivered to\nreceivers subscribed to the 'AllMessages' topic subscription, and\nselectively delivered to receivers subscribed to the 'HighMessages' and\n'LowMessages' topic subscriptions (depending upon the message content).\n\n## How to send messages to a topic\n\nTo send a message to a Service Bus topic, your application must use the\n**sendTopicMessage** method of the **ServiceBusService** object.\nMessages sent to Service Bus Topics are **BrokeredMessage** objects.\n**BrokeredMessage** objects have a set of standard properties (such as\n**Label** and **TimeToLive**), a dictionary that is used to hold custom\napplication specific properties, and a body of string data. An\napplication can set the body of the message by passing a string value to\nthe **sendTopicMessage** and any required standard properties will be\npopulated by default values.\n\nThe following example demonstrates how to send five test messages to\n'MyTopic'. Note that the **messagenumber** property value of each\nmessage varies on the iteration of the loop (this will determine which\nsubscriptions receive it):\n\n    var message = {\n        body: '',\n        customProperties: {\n            messagenumber: 0\n        }\n    }\n\n    for (i = 0;i < 5;i++) {\n        message.customProperties.messagenumber=i;\n        message.body='This is Message #'+i;\n        serviceBusService.sendTopicMessage(topic, message, function(error) {\n          if (error) {\n            console.log(error);\n          }\n        });\n    }\n\nService Bus topics support a maximum message size of 256 MB (the header,\nwhich includes the standard and custom application properties, can have\na maximum size of 64 MB). There is no limit on the number of messages\nheld in a topic but there is a cap on the total size of the messages\nheld by a topic. This topic size is defined at creation time, with an\nupper limit of 5 GB.\n\n## How to receive messages from a subscription\n\nMessages are received from a subscription using the\n**receiveSubscriptionMessage** method on the **ServiceBusService**\nobject. By default, messages are deleted from the subscription as they\nare read; however, you can read (peek) and lock the message without\ndeleting it from the subscription by setting the optional parameter\n**isPeekLock** to **true**.\n\nThe default behavior of reading and deleting the message as part of the\nreceive operation is the simplest model, and works best for scenarios in\nwhich an application can tolerate not processing a message in the event\nof a failure. To understand this, consider a scenario in which the\nconsumer issues the receive request and then crashes before processing\nit. Because Service Bus will have marked the message as being consumed,\nthen when the application restarts and begins consuming messages again,\nit will have missed the message that was consumed prior to the crash.\n\nIf the **isPeekLock** parameter is set to **true**, the receive becomes\na two stage operation, which makes it possible to support applications\nthat cannot tolerate missing messages. When Service Bus receives a\nrequest, it finds the next message to be consumed, locks it to prevent\nother consumers receiving it, and then returns it to the application.\nAfter the application finishes processing the message (or stores it\nreliably for future processing), it completes the second stage of the\nreceive process by calling **deleteMessage** method and providing the\nmessage to be deleted as a parameter. The **deleteMessage** method will\nmark the message as being consumed and remove it from the subscription.\n\nThe example below demonstrates how messages can be received and\nprocessed using **receiveSubscriptionMessage**. The example first\nreceives and deletes a message from the 'LowMessages' subscription, and\nthen receives a message from the 'HighMessages' subscription using\n**isPeekLock** set to true. It then deletes the message using\n**deleteMessage**:\n\n    serviceBusService.receiveSubscriptionMessage('MyTopic', 'LowMessages', function(error, receivedMessage){\n        if(!error){\n            // Message received and deleted\n            console.log(receivedMessage);\n        }\n    });\n    serviceBusService.receiveSubscriptionMessage('MyTopic', 'HighMessages', { isPeekLock: true }, function(error, lockedMessage){\n        if(!error){\n            // Message received and locked\n            console.log(lockedMessage);\n            serviceBusService.deleteMessage(lockedMessage, function (deleteError){\n                if(!deleteError){\n                    // Message deleted\n                    console.log('message has been deleted.');\n                }\n            }\n        }\n    });\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from\nerrors in your application or difficulties processing a message. If a\nreceiver application is unable to process the message for some reason,\nthen it can call the **unlockMessage** method on the\n**ServiceBusService** object. This will cause Service Bus to unlock the\nmessage within the subscription and make it available to be received\nagain, either by the same consuming application or by another consuming\napplication.\n\nThere is also a timeout associated with a message locked within the\nsubscription, and if the application fails to process the message before\nthe lock timeout expires (e.g., if the application crashes), then\nService Bus will unlock the message automatically and make it available\nto be received again.\n\nIn the event that the application crashes after processing the message\nbut before the **deleteMessage** method is called, then the message will\nbe redelivered to the application when it restarts. This is often called\n**At Least Once Processing**, that is, each message will be processed at\nleast once but in certain situations the same message may be\nredelivered. If the scenario cannot tolerate duplicate processing, then\napplication developers should add additional logic to their application\nto handle duplicate message delivery. This is often achieved using the\n**MessageId** property of the message, which will remain constant across\ndelivery attempts.\n\n## How to delete topics and subscriptions\n\nTopics and subscriptions are persistent, and must be explicitly deleted\neither through the Azure Management portal or programmatically.\nThe example below demonstrates how to delete the topic named 'MyTopic':\n\n    serviceBusService.deleteTopic('MyTopic', function (error) {\n        if (error) {\n            console.log(error);\n        }\n    });\n\nDeleting a topic will also delete any subscriptions that are registered\nwith the topic. Subscriptions can also be deleted independently. The\nfollowing code demonstrates how to delete a subscription named\n'HighMessages' from the 'MyTopic' topic:\n\n    serviceBusService.deleteSubscription('MyTopic', 'HighMessages', function (error) {\n        if(error) {\n            console.log(error);\n        }\n    });\n\n## Next Steps\n\nNow that you've learned the basics of Service Bus topics, follow these\nlinks to learn more.\n\n-   See the MSDN Reference: [Queues, Topics, and Subscriptions][].\n-   API reference for [SqlFilter][].\n-   Visit the [Azure SDK for Node] repository on GitHub.\n\n  [Azure SDK for Node]: https://github.com/WindowsAzure/azure-sdk-for-node\n  [Azure Management Portal]: http://manage.windowsazure.com\n  [SqlFilter.SqlExpression]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n  [Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n  [SqlFilter]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.sqlfilter.aspx\n  [Node.js Cloud Service]: ../cloud-services/cloud-services-nodejs-develop-deploy-app.md\n  [Create and deploy a Node.js application to an Azure Web Site]: ../app-service-web/web-sites-nodejs-develop-deploy-mac.md\n  [Node.js Cloud Service with Storage]: /develop/nodejs/tutorials/web-app-with-storage/\n  [Node.js Web Application with Storage]: /develop/nodejs/tutorials/web-site-with-storage/\n \n"
}