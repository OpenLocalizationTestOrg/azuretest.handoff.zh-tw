{
  "nodes": [
    {
      "pos": [
        3,
        65
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Update the app to call the custom API"
    },
    {
      "content": "We will add a button labelled \"Complete All\" next to the existing button, and move both buttons down a line.",
      "pos": [
        70,
        178
      ]
    },
    {
      "content": "In Android Studio, open the <bpt id=\"p1\">*</bpt>res\\layout\\activity_to_do.xml<ept id=\"p1\">*</ept> file in your quickstart project, locate the <bpt id=\"p2\">**</bpt>LinearLayout<ept id=\"p2\">**</ept> element that contains the <bpt id=\"p3\">**</bpt>Button<ept id=\"p3\">**</ept> element named <ph id=\"ph1\">`buttonAddToDo`</ph>.",
      "pos": [
        179,
        367
      ]
    },
    {
      "content": "Copy the <bpt id=\"p1\">**</bpt>LinearLayout<ept id=\"p1\">**</ept> and paste it immediately following the original one.",
      "pos": [
        368,
        446
      ]
    },
    {
      "content": "Delete the <bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept> element from the first <bpt id=\"p2\">**</bpt>LinearLayout<ept id=\"p2\">**</ept>.",
      "pos": [
        447,
        509
      ]
    },
    {
      "pos": [
        514,
        661
      ],
      "content": "In the second <bpt id=\"p1\">**</bpt>LinearLayout<ept id=\"p1\">**</ept>, delete the <bpt id=\"p2\">**</bpt>EditText<ept id=\"p2\">**</ept> element, and add the following  code immediately following the existing <bpt id=\"p3\">**</bpt>Button<ept id=\"p3\">**</ept> element:"
    },
    {
      "content": "This adds a new button to the page, on a separate line, next to the existing button.",
      "pos": [
        933,
        1017
      ]
    },
    {
      "pos": [
        1022,
        1070
      ],
      "content": "The second <bpt id=\"p1\">**</bpt>LinearLayout<ept id=\"p1\">**</ept> now looks like this:"
    },
    {
      "content": "Open the res\\values\\string.xml file and add the following line of code:",
      "pos": [
        1867,
        1938
      ]
    },
    {
      "content": "In Project Explorer, right click the project name in the <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept> folder (<ph id=\"ph1\">`com.example.{your projects name}`</ph>), choose <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> then <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.",
      "pos": [
        2012,
        2150
      ]
    },
    {
      "content": "In the dialog, enter <bpt id=\"p1\">**</bpt>MarkAllResult<ept id=\"p1\">**</ept> in the class name field, choose OK, and replace the resulting class definition with the following code:",
      "pos": [
        2151,
        2293
      ]
    },
    {
      "content": "This class is used to hold the row count value returned by the custom API.",
      "pos": [
        2687,
        2761
      ]
    },
    {
      "pos": [
        2767,
        2923
      ],
      "content": "Locate the <bpt id=\"p1\">**</bpt>refreshItemsFromTable<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>ToDoActivity.java<ept id=\"p2\">**</ept> file, and make sure that the first line of code in the <ph id=\"ph1\">`try`</ph> block looks like this:"
    },
    {
      "content": "This filters the items so that completed items are not returned by the query.",
      "pos": [
        3045,
        3122
      ]
    },
    {
      "pos": [
        3127,
        3224
      ],
      "content": "Make sure that <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> contains the following imports at the beginning of the file:"
    },
    {
      "pos": [
        3420,
        3480
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> file, add the following method:"
    },
    {
      "content": "public void completeItem(View view) {",
      "pos": [
        3486,
        3523
      ]
    },
    {
      "content": "This method handles the <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> event for the new button.",
      "pos": [
        4217,
        4276
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>invokeApi<ept id=\"p1\">**</ept> method is called on the client, which sends a POST request to the new custom API.",
      "pos": [
        4277,
        4376
      ]
    },
    {
      "content": "The result returned by the custom API is displayed in a message dialog, as are any errors.",
      "pos": [
        4377,
        4467
      ]
    },
    {
      "content": "Test the app",
      "pos": [
        4472,
        4484
      ]
    },
    {
      "pos": [
        4489,
        4609
      ],
      "content": "From the <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Run app<ept id=\"p2\">**</ept> to start the project in the Android emulator, or in a connected Android device."
    },
    {
      "content": "This executes your app, built with the Android SDK, that uses the client library to send a query that returns items from your mobile service.",
      "pos": [
        4615,
        4756
      ]
    },
    {
      "pos": [
        4762,
        4834
      ],
      "content": "In the app, type some text in <bpt id=\"p1\">**</bpt>Insert a TodoItem<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Repeat the previous step until you have added several todo items to the list.",
      "pos": [
        4839,
        4916
      ]
    },
    {
      "pos": [
        4921,
        4955
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Complete All<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "A message dialog is displayed that indicates the number of items marked complete and the filtered query is executed again, which clears all items from the list.",
      "pos": [
        5059,
        5219
      ]
    }
  ],
  "content": "\n##<a name=\"update-app\"></a>Update the app to call the custom API\n\n1. We will add a button labelled \"Complete All\" next to the existing button, and move both buttons down a line. In Android Studio, open the *res\\layout\\activity_to_do.xml* file in your quickstart project, locate the **LinearLayout** element that contains the **Button** element named `buttonAddToDo`. Copy the **LinearLayout** and paste it immediately following the original one. Delete the **Button** element from the first **LinearLayout**.\n\n2. In the second **LinearLayout**, delete the **EditText** element, and add the following  code immediately following the existing **Button** element: \n\n        <Button\n            android:id=\"@+id/buttonCompleteItem\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"completeItem\"\n            android:text=\"@string/complete_button_text\" />\n\n    This adds a new button to the page, on a separate line, next to the existing button.\n\n3. The second **LinearLayout** now looks like this:\n\n         <LinearLayout\n            android:layout_width=\"match_parent\" \n            android:layout_height=\"wrap_content\" \n            android:background=\"#71BCFA\"\n            android:padding=\"6dip\"  >\n            <Button\n                android:id=\"@+id/buttonAddToDo\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"addItem\"\n                android:text=\"@string/add_button_text\" />\n            <Button\n                android:id=\"@+id/buttonCompleteItem\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"completeItem\"\n                android:text=\"@string/complete_button_text\" />\n        </LinearLayout>\n    \n\n4. Open the res\\values\\string.xml file and add the following line of code:\n\n        <string name=\"complete_button_text\">Complete All</string>\n\n\n\n5. In Project Explorer, right click the project name in the *src* folder (`com.example.{your projects name}`), choose **New** then **Class**. In the dialog, enter **MarkAllResult** in the class name field, choose OK, and replace the resulting class definition with the following code:\n\n        import com.google.gson.annotations.SerializedName;\n        \n        public class MarkAllResult {\n            @SerializedName(\"count\")\n            public int mCount;\n            \n            public int getCount() {\n                return mCount;\n            }\n        \n            public void setCount(int count) {\n                    this.mCount = count;\n            }\n        }\n\n    This class is used to hold the row count value returned by the custom API. \n\n6. Locate the **refreshItemsFromTable** method in the **ToDoActivity.java** file, and make sure that the first line of code in the `try` block looks like this:\n\n        final MobileServiceList<ToDoItem> result = mToDoTable.where().field(\"complete\").eq(false).execute().get();\n\n    This filters the items so that completed items are not returned by the query.\n\n7. Make sure that **ToDoActivity.java** contains the following imports at the beginning of the file:\n\n        import com.google.common.util.concurrent.FutureCallback;\n        import com.google.common.util.concurrent.Futures;\n        import com.google.common.util.concurrent.ListenableFuture;\n\n8. In the **ToDoActivity.java** file, add the following method:\n\n    public void completeItem(View view) {\n        \n        ListenableFuture<MarkAllResult> result = mClient.invokeApi( \"completeAll2\", MarkAllResult.class ); \n            \n            Futures.addCallback(result, new FutureCallback<MarkAllResult>() {\n                @Override\n                public void onFailure(Throwable exc) {\n                    createAndShowDialog((Exception) exc, \"Error\");\n                }\n                \n                @Override\n                public void onSuccess(MarkAllResult result) {\n                    createAndShowDialog(result.getCount() + \" item(s) marked as complete.\", \"Completed Items\");\n                    refreshItemsFromTable();    \n                }\n            });\n        }\n    \n    This method handles the **Click** event for the new button. The **invokeApi** method is called on the client, which sends a POST request to the new custom API. The result returned by the custom API is displayed in a message dialog, as are any errors.\n\n## Test the app\n\n1. From the **Run** menu, click **Run app** to start the project in the Android emulator, or in a connected Android device.\n\n    This executes your app, built with the Android SDK, that uses the client library to send a query that returns items from your mobile service.\n\n\n2. In the app, type some text in **Insert a TodoItem**, then click **Add**.\n\n3. Repeat the previous step until you have added several todo items to the list.\n\n4. Click the **Complete All** button.\n\n    ![](./media/mobile-services-android-call-custom-api/mobile-custom-api-android-completed.png)\n\n    A message dialog is displayed that indicates the number of items marked complete and the filtered query is executed again, which clears all items from the list."
}