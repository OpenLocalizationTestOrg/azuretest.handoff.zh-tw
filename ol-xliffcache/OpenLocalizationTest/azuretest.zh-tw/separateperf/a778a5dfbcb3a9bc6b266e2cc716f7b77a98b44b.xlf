<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with the Mobile Services Android Client Library</source>
          <target state="new">Working with the Mobile Services Android Client Library</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to use an Android client for Azure Mobile Services.</source>
          <target state="new">Learn how to use an Android client for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to use the Android client library for Mobile Services</source>
          <target state="new">How to use the Android client library for Mobile Services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This guide shows you how to perform common scenarios using the Android client for Azure Mobile Services.</source>
          <target state="new">This guide shows you how to perform common scenarios using the Android client for Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The scenarios covered include querying for data; inserting, updating, and deleting data, authenticating users, handling errors, and customizing the client.</source>
          <target state="new">The scenarios covered include querying for data; inserting, updating, and deleting data, authenticating users, handling errors, and customizing the client.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are new to Mobile Services, you should first complete the quickstart tutorial [Get started with Mobile Services].</source>
          <target state="new">If you are new to Mobile Services, you should first complete the quickstart tutorial [Get started with Mobile Services].</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Successfully completing that tutorial ensures that you will have  installed Android Studio; it will help you configure your account and create your first mobile service, and install the Mobile Services SDK, which supports Android version 2.2 or later, but we recommend building against Android version 4.2 or later.</source>
          <target state="new">Successfully completing that tutorial ensures that you will have  installed Android Studio; it will help you configure your account and create your first mobile service, and install the Mobile Services SDK, which supports Android version 2.2 or later, but we recommend building against Android version 4.2 or later.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can find the Javadocs API reference for the Android client library <bpt id="p1">[</bpt>here<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298735)</ept>.</source>
          <target state="new">You can find the Javadocs API reference for the Android client library <bpt id="p1">[</bpt>here<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298735)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="setup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Setup and Prerequisites</source>
          <target state="new"><ph id="ph1">&lt;a name="setup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Setup and Prerequisites</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>We assume that you have created a mobile service and a table.</source>
          <target state="new">We assume that you have created a mobile service and a table.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Create a table<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298592)</ept>.</source>
          <target state="new">For more information see <bpt id="p1">[</bpt>Create a table<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298592)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the code used in this topic, we assume the table is named <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, and that it has the following columns:</source>
          <target state="new">In the code used in this topic, we assume the table is named <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, and that it has the following columns:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="new">id</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>text</source>
          <target state="new">text</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="new">complete</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The corresponding typed client side object is the following:</source>
          <target state="new">The corresponding typed client side object is the following:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in the insert or update request.</source>
          <target state="new">When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in the insert or update request.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dynamic schema<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296271)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Dynamic schema<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296271)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the Mobile Services client</source>
          <target state="new"><ph id="ph1">&lt;a name="create-client"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create the Mobile Services client</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code creates the <bpt id="p1">[</bpt>MobileServiceClient<ept id="p1">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept> object that is used to access your mobile service.</source>
          <target state="new">The following code creates the <bpt id="p1">[</bpt>MobileServiceClient<ept id="p1">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept> object that is used to access your mobile service.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The code goes in the <ph id="ph1">`onCreate`</ph> method of the Activity class specified in <bpt id="p1">*</bpt>AndroidManifest.xml<ept id="p1">*</ept> as a <bpt id="p2">**</bpt>MAIN<ept id="p2">**</ept> action and <bpt id="p3">**</bpt>LAUNCHER<ept id="p3">**</ept> category.</source>
          <target state="new">The code goes in the <ph id="ph1">`onCreate`</ph> method of the Activity class specified in <bpt id="p1">*</bpt>AndroidManifest.xml<ept id="p1">*</ept> as a <bpt id="p2">**</bpt>MAIN<ept id="p2">**</ept> action and <bpt id="p3">**</bpt>LAUNCHER<ept id="p3">**</ept> category.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the code above, replace <ph id="ph1">`MobileServiceUrl`</ph> and <ph id="ph2">`AppKey`</ph> with the mobile service URL and application key, in that order.</source>
          <target state="new">In the code above, replace <ph id="ph1">`MobileServiceUrl`</ph> and <ph id="ph2">`AppKey`</ph> with the mobile service URL and application key, in that order.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Both of these are available on the Azure Management Portal, by selecting your mobile service and then clicking on <bpt id="p1">*</bpt>Dashboard<ept id="p1">*</ept>.</source>
          <target state="new">Both of these are available on the Azure Management Portal, by selecting your mobile service and then clicking on <bpt id="p1">*</bpt>Dashboard<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</source>
          <target state="new"><ph id="ph1">&lt;a name="instantiating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create a table reference</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The easiest way to query or modify data in the mobile service is by using the <bpt id="p1">*</bpt>typed programming model<ept id="p1">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id="p2">*</bpt>untyped<ept id="p2">*</ept> model).</source>
          <target state="new">The easiest way to query or modify data in the mobile service is by using the <bpt id="p1">*</bpt>typed programming model<ept id="p1">*</ept>, since Java is a strongly typed language (later on we will discuss the <bpt id="p2">*</bpt>untyped<ept id="p2">*</ept> model).</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This model provides seamless serialization and deserialization to JSON using the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library when sending data between the client and the mobile service: the developer doesn't have to do anything, the framework handles it all.</source>
          <target state="new">This model provides seamless serialization and deserialization to JSON using the <bpt id="p1">[</bpt>gson<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> library when sending data between the client and the mobile service: the developer doesn't have to do anything, the framework handles it all.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first thing you do to query or modify data is to create a <bpt id="p1">[</bpt>MobileServiceTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept> object by calling the <bpt id="p2">**</bpt>getTable<ept id="p2">**</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ept id="p3">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.</source>
          <target state="new">The first thing you do to query or modify data is to create a <bpt id="p1">[</bpt>MobileServiceTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296835)</ept> object by calling the <bpt id="p2">**</bpt>getTable<ept id="p2">**</ept> method on the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>MobileServiceClient<ept id="p4">**</ept><ept id="p3">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We will look at two overloads of this method:</source>
          <target state="new">We will look at two overloads of this method:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the following code, <bpt id="p1">*</bpt>mClient<ept id="p1">*</ept> is a reference to your mobile service client.</source>
          <target state="new">In the following code, <bpt id="p1">*</bpt>mClient<ept id="p1">*</ept> is a reference to your mobile service client.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>first overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept> is used where the class name and the table name are the same:</source>
          <target state="new">The <bpt id="p1">[</bpt>first overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296839)</ept> is used where the class name and the table name are the same:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>2nd overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept> is used when the table name is different from the type name.</source>
          <target state="new">The <bpt id="p1">[</bpt>2nd overload<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296840)</ept> is used when the table name is different from the type name.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>The API structure</source>
          <target state="new"><ph id="ph1">&lt;a name="api"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>The API structure</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Since version 2.0 of the client library, mobile services table operations use the <bpt id="p1">[</bpt>Future<ept id="p1">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> and <bpt id="p2">[</bpt>AsyncTask<ept id="p2">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> objects in all of the asynchronous operations such as methods involving queries and operations like inserts, updates and deletes.</source>
          <target state="new">Since version 2.0 of the client library, mobile services table operations use the <bpt id="p1">[</bpt>Future<ept id="p1">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> and <bpt id="p2">[</bpt>AsyncTask<ept id="p2">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> objects in all of the asynchronous operations such as methods involving queries and operations like inserts, updates and deletes.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This makes it easier to perform multiple operations (while on a background thread) without having to deal with multiple nested callbacks.</source>
          <target state="new">This makes it easier to perform multiple operations (while on a background thread) without having to deal with multiple nested callbacks.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from a mobile service</source>
          <target state="new"><ph id="ph1">&lt;a name="querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Query data from a mobile service</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This section describes how to issue queries to the mobile service.</source>
          <target state="new">This section describes how to issue queries to the mobile service.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Subsections describe diffent aspects such as sorting, filtering, and paging.</source>
          <target state="new">Subsections describe diffent aspects such as sorting, filtering, and paging.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Finally, we discuss how you can concatenate these operations together.</source>
          <target state="new">Finally, we discuss how you can concatenate these operations together.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="showAll"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all Items from a Table</source>
          <target state="new"><ph id="ph1">&lt;a name="showAll"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all Items from a Table</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code returns all items in the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table.</source>
          <target state="new">The following code returns all items in the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It displays them in the UI by adding the items to an adapter.</source>
          <target state="new">It displays them in the UI by adding the items to an adapter.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This code is similar to what is in the the quickstart tutorial [Get started with Mobile Services].</source>
          <target state="new">This code is similar to what is in the the quickstart tutorial [Get started with Mobile Services].</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Queries like this one use the <bpt id="p1">[</bpt>AsyncTask<ept id="p1">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> object.</source>
          <target state="new">Queries like this one use the <bpt id="p1">[</bpt>AsyncTask<ept id="p1">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> object.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>result<ept id="p1">*</ept> variable returns the result set from the query, and the code following the <ph id="ph1">`mToDoTable.execute().get()`</ph> statement shows how to display the individual rows.</source>
          <target state="new">The <bpt id="p1">*</bpt>result<ept id="p1">*</ept> variable returns the result set from the query, and the code following the <ph id="ph1">`mToDoTable.execute().get()`</ph> statement shows how to display the individual rows.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="filtering"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Filter returned data</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code returns all items from the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table whose <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> field equals <bpt id="p3">*</bpt>false<ept id="p3">*</ept>.</source>
          <target state="new">The following code returns all items from the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table whose <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> field equals <bpt id="p3">*</bpt>false<ept id="p3">*</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You start a filter with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>where<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296867)</ept> method call on the table reference.</source>
          <target state="new">You start a filter with a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>where<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296867)</ept> method call on the table reference.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is followed by a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>field<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296869)</ept> method call followed by a method call that specifies the logical predicate.</source>
          <target state="new">This is followed by a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>field<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296869)</ept> method call followed by a method call that specifies the logical predicate.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Possible predicate methods include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>eq<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298461)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ne<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298462)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>gt<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298463)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ge<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298464)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>lt<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298465)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>le<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298466)</ept> etc.</source>
          <target state="new">Possible predicate methods include <bpt id="p1">[</bpt><bpt id="p2">**</bpt>eq<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298461)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ne<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298462)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>gt<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298463)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ge<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298464)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>lt<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298465)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>le<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298466)</ept> etc.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This is sufficient for comparing number and string fields to specific values.</source>
          <target state="new">This is sufficient for comparing number and string fields to specific values.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>But you can do a lot more.</source>
          <target state="new">But you can do a lot more.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, you can filter on dates.</source>
          <target state="new">For example, you can filter on dates.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can compare the entire date field, but you can also compare parts of the date, with methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>year<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298467)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>month<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298468)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>day<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298469)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>hour<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298470)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>minute<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298471)</ept> and <bpt id="p11">[</bpt><bpt id="p12">**</bpt>second<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298472)</ept>.</source>
          <target state="new">You can compare the entire date field, but you can also compare parts of the date, with methods such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>year<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298467)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>month<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298468)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>day<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298469)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>hour<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298470)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>minute<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298471)</ept> and <bpt id="p11">[</bpt><bpt id="p12">**</bpt>second<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298472)</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following partial code adds a filter for items whose <bpt id="p1">*</bpt>due date<ept id="p1">*</ept> equals 2013.</source>
          <target state="new">The following partial code adds a filter for items whose <bpt id="p1">*</bpt>due date<ept id="p1">*</ept> equals 2013.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can do a wide variety of complex filters on string fields with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>startsWith<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298473)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>endsWith<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298474)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>concat<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298475)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>subString<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298477)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>indexOf<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298488)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>replace<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298491)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>toLower<ept id="p14">**</ept><ept id="p13">](http://go.microsoft.com/fwlink/p/?LinkId=298492)</ept>, <bpt id="p15">[</bpt><bpt id="p16">**</bpt>toUpper<ept id="p16">**</ept><ept id="p15">](http://go.microsoft.com/fwlink/p/?LinkId=298493)</ept>, <bpt id="p17">[</bpt><bpt id="p18">**</bpt>trim<ept id="p18">**</ept><ept id="p17">](http://go.microsoft.com/fwlink/p/?LinkId=298495)</ept>, and <bpt id="p19">[</bpt><bpt id="p20">**</bpt>length<ept id="p20">**</ept><ept id="p19">](http://go.microsoft.com/fwlink/p/?LinkId=298496)</ept>.</source>
          <target state="new">You can do a wide variety of complex filters on string fields with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>startsWith<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298473)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>endsWith<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298474)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>concat<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298475)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>subString<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298477)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>indexOf<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298488)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>replace<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298491)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>toLower<ept id="p14">**</ept><ept id="p13">](http://go.microsoft.com/fwlink/p/?LinkId=298492)</ept>, <bpt id="p15">[</bpt><bpt id="p16">**</bpt>toUpper<ept id="p16">**</ept><ept id="p15">](http://go.microsoft.com/fwlink/p/?LinkId=298493)</ept>, <bpt id="p17">[</bpt><bpt id="p18">**</bpt>trim<ept id="p18">**</ept><ept id="p17">](http://go.microsoft.com/fwlink/p/?LinkId=298495)</ept>, and <bpt id="p19">[</bpt><bpt id="p20">**</bpt>length<ept id="p20">**</ept><ept id="p19">](http://go.microsoft.com/fwlink/p/?LinkId=298496)</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following partial code filters for table rows where the <bpt id="p1">*</bpt>text<ept id="p1">*</ept> column starts with "PRI0".</source>
          <target state="new">The following partial code filters for table rows where the <bpt id="p1">*</bpt>text<ept id="p1">*</ept> column starts with "PRI0".</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Number fields also allow a wide variety of more complex filters with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>add<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298497)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>sub<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298499)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>mul<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298500)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>div<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298502)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>mod<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298503)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>floor<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298505)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>ceiling<ept id="p14">**</ept><ept id="p13">](http://go.microsoft.com/fwlink/p/?LinkId=298506)</ept>, and <bpt id="p15">[</bpt><bpt id="p16">**</bpt>round<ept id="p16">**</ept><ept id="p15">](http://go.microsoft.com/fwlink/p/?LinkId=298507)</ept>.</source>
          <target state="new">Number fields also allow a wide variety of more complex filters with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>add<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298497)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>sub<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298499)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>mul<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298500)</ept>, <bpt id="p7">[</bpt><bpt id="p8">**</bpt>div<ept id="p8">**</ept><ept id="p7">](http://go.microsoft.com/fwlink/p/?LinkId=298502)</ept>, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>mod<ept id="p10">**</ept><ept id="p9">](http://go.microsoft.com/fwlink/p/?LinkId=298503)</ept>, <bpt id="p11">[</bpt><bpt id="p12">**</bpt>floor<ept id="p12">**</ept><ept id="p11">](http://go.microsoft.com/fwlink/p/?LinkId=298505)</ept>, <bpt id="p13">[</bpt><bpt id="p14">**</bpt>ceiling<ept id="p14">**</ept><ept id="p13">](http://go.microsoft.com/fwlink/p/?LinkId=298506)</ept>, and <bpt id="p15">[</bpt><bpt id="p16">**</bpt>round<ept id="p16">**</ept><ept id="p15">](http://go.microsoft.com/fwlink/p/?LinkId=298507)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following partial code filters for table rows where the <bpt id="p1">*</bpt>duration<ept id="p1">*</ept> is an even number.</source>
          <target state="new">The following partial code filters for table rows where the <bpt id="p1">*</bpt>duration<ept id="p1">*</ept> is an even number.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can combine predicates with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>and<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298512)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>or<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298514)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>not<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298515)</ept>.</source>
          <target state="new">You can combine predicates with methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>and<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298512)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>or<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298514)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>not<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=298515)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This partial code combines two of the above examples.</source>
          <target state="new">This partial code combines two of the above examples.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>And you can group and nest logical operators, as shown in this partial code:</source>
          <target state="new">And you can group and nest logical operators, as shown in this partial code:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more detailed discussion and examples of filtering, see <bpt id="p1">[</bpt>Exploring the richness of the Mobile Services Android client query model<ept id="p1">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>.</source>
          <target state="new">For more detailed discussion and examples of filtering, see <bpt id="p1">[</bpt>Exploring the richness of the Mobile Services Android client query model<ept id="p1">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</source>
          <target state="new"><ph id="ph1">&lt;a name="sorting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Sort returned data</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following code returns all items from a table of <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept> sorted ascending by the <bpt id="p2">*</bpt>text<ept id="p2">*</ept> field.</source>
          <target state="new">The following code returns all items from a table of <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept> sorted ascending by the <bpt id="p2">*</bpt>text<ept id="p2">*</ept> field.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile mervice table that you created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile mervice table that you created previously.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The first parameter of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>orderBy<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298519)</ept> method is a string equal to the name of the field on which to sort.</source>
          <target state="new">The first parameter of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>orderBy<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298519)</ept> method is a string equal to the name of the field on which to sort.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The second parameter uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>QueryOrder<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298521)</ept> enumeration to specify whether to sort ascending or descending.</source>
          <target state="new">The second parameter uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>QueryOrder<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298521)</ept> enumeration to specify whether to sort ascending or descending.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Note that if you are filtering using the <bpt id="p1">***</bpt>where<ept id="p1">***</ept> method, the <bpt id="p2">***</bpt>where<ept id="p2">***</ept> method must be invoked prior to the <bpt id="p3">***</bpt>orderBy<ept id="p3">***</ept> method.</source>
          <target state="new">Note that if you are filtering using the <bpt id="p1">***</bpt>where<ept id="p1">***</ept> method, the <bpt id="p2">***</bpt>where<ept id="p2">***</ept> method must be invoked prior to the <bpt id="p3">***</bpt>orderBy<ept id="p3">***</ept> method.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</source>
          <target state="new"><ph id="ph1">&lt;a name="paging"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return data in pages</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The first example shows how to select the top 5 items from a table.</source>
          <target state="new">The first example shows how to select the top 5 items from a table.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The query returns the items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>.</source>
          <target state="new">The query returns the items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that you created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that you created previously.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Next, we define a query that skips the first 5 items, and then returns the next 5.</source>
          <target state="new">Next, we define a query that skips the first 5 items, and then returns the next 5.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</source>
          <target state="new"><ph id="ph1">&lt;a name="selecting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Select specific columns</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following code illustrates how to return all items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>, but only displays the <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> and <bpt id="p3">*</bpt>text<ept id="p3">*</ept> fields.</source>
          <target state="new">The following code illustrates how to return all items from a table of  <bpt id="p1">*</bpt>ToDoItems<ept id="p1">*</ept>, but only displays the <bpt id="p2">*</bpt>complete<ept id="p2">*</ept> and <bpt id="p3">*</bpt>text<ept id="p3">*</ept> fields.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</source>
          <target state="new"><bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is the reference to the mobile service table that we created previously.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Here the parameters to the select function are the string names of the table's columns that you want to return.</source>
          <target state="new">Here the parameters to the select function are the string names of the table's columns that you want to return.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>select<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290689)</ept> method needs to follow methods like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>where<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=296296)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>orderBy<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=296313)</ept>, if they are present.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>select<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=290689)</ept> method needs to follow methods like <bpt id="p3">[</bpt><bpt id="p4">**</bpt>where<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=296296)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>orderBy<ept id="p6">**</ept><ept id="p5">](http://go.microsoft.com/fwlink/p/?LinkId=296313)</ept>, if they are present.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It can be followed by methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>top<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298731)</ept>.</source>
          <target state="new">It can be followed by methods like <bpt id="p1">[</bpt><bpt id="p2">**</bpt>top<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298731)</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="chaining"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Concatenate query methods</source>
          <target state="new"><ph id="ph1">&lt;a name="chaining"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Concatenate query methods</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The methods used in querying mobile mervice tables can be concatenated.</source>
          <target state="new">The methods used in querying mobile mervice tables can be concatenated.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This allows you to do things like select specific columns of filtered rows that are sorted and paged.</source>
          <target state="new">This allows you to do things like select specific columns of filtered rows that are sorted and paged.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can create quite complex logical filters.</source>
          <target state="new">You can create quite complex logical filters.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>What makes this work is that the query methods you use return <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298551)</ept> objects, which can in turn have additional methods invoked on them.</source>
          <target state="new">What makes this work is that the query methods you use return <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298551)</ept> objects, which can in turn have additional methods invoked on them.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To end the series of methods and actually run the query, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>execute<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298554)</ept> method.</source>
          <target state="new">To end the series of methods and actually run the query, you call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>execute<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298554)</ept> method.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Here's a code sample where <bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is a reference to the mobile services <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table.</source>
          <target state="new">Here's a code sample where <bpt id="p1">*</bpt>mToDoTable<ept id="p1">*</ept> is a reference to the mobile services <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The main requirement in chaining methods together is that the <bpt id="p1">*</bpt>where<ept id="p1">*</ept> method and predicates need to come first.</source>
          <target state="new">The main requirement in chaining methods together is that the <bpt id="p1">*</bpt>where<ept id="p1">*</ept> method and predicates need to come first.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>After that, you can call subsequent methods in the order that best meets the needs of your application.</source>
          <target state="new">After that, you can call subsequent methods in the order that best meets the needs of your application.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into a mobile service</source>
          <target state="new"><ph id="ph1">&lt;a name="inserting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert data into a mobile service</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following code shows how to insert a new row into a table.</source>
          <target state="new">The following code shows how to insert a new row into a table.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>First you instantiate an instance of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> class and set its properties.</source>
          <target state="new">First you instantiate an instance of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> class and set its properties.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Next you execute the following code:</source>
          <target state="new">Next you execute the following code:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This code inserts the new item, and adds it to the adapter so it displays in the UI.</source>
          <target state="new">This code inserts the new item, and adds it to the adapter so it displays in the UI.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Mobile Services supports unique custom string values for the table id.</source>
          <target state="new">Mobile Services supports unique custom string values for the table id.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This allows applications to use custom values such as email addresses or usernames for the id column of a Mobile Services table.</source>
          <target state="new">This allows applications to use custom values such as email addresses or usernames for the id column of a Mobile Services table.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For example if you wanted to identify each record by an email address, you could use the following JSON object.</source>
          <target state="new">For example if you wanted to identify each record by an email address, you could use the following JSON object.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If a string id value is not provided when inserting new records into a table, Mobile Services will generate a unique value for the id.</source>
          <target state="new">If a string id value is not provided when inserting new records into a table, Mobile Services will generate a unique value for the id.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Supporting string ids provides the following advantages to developers</source>
          <target state="new">Supporting string ids provides the following advantages to developers</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Ids can be generated without making a roundtrip to the database.</source>
          <target state="new">Ids can be generated without making a roundtrip to the database.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Records are easier to merge from different tables or databases.</source>
          <target state="new">Records are easier to merge from different tables or databases.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Ids values can integrate better with an application's logic.</source>
          <target state="new">Ids values can integrate better with an application's logic.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You can also use server scripts to set id values.</source>
          <target state="new">You can also use server scripts to set id values.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The script example below generates a custom GUID and assigns it to a new record's id.</source>
          <target state="new">The script example below generates a custom GUID and assigns it to a new record's id.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's id.</source>
          <target state="new">This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's id.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If an application provides a value for an id, Mobile Services will store it as is.</source>
          <target state="new">If an application provides a value for an id, Mobile Services will store it as is.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This includes leading or trailing white spaces.</source>
          <target state="new">This includes leading or trailing white spaces.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>White space will not be trimmed from value.</source>
          <target state="new">White space will not be trimmed from value.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The value for the <ph id="ph1">`id`</ph> must be unique and it must not include characters from the following sets:</source>
          <target state="new">The value for the <ph id="ph1">`id`</ph> must be unique and it must not include characters from the following sets:</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Control characters: [0x0000-0x001F] and [0x007F-0x009F].</source>
          <target state="new">Control characters: [0x0000-0x001F] and [0x007F-0x009F].</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see [ASCII control codes C0 and C1].</source>
          <target state="new">For more information, see [ASCII control codes C0 and C1].</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Printable characters: <bpt id="p1">**</bpt>"<ept id="p1">**</ept>(0x0022), <bpt id="p2">**</bpt>\+<ept id="p2">**</ept> (0x002B), <bpt id="p3">**</bpt>/<ept id="p3">**</ept> (0x002F), <bpt id="p4">**</bpt>?<ept id="p4">**</ept> (0x003F), <bpt id="p5">**</bpt>\\<ept id="p5">**</ept> (0x005C), <bpt id="p6">**</bpt>`<ept id="p6">**</ept> (0x0060)</source>
          <target state="new">Printable characters: <bpt id="p1">**</bpt>"<ept id="p1">**</ept>(0x0022), <bpt id="p2">**</bpt>\+<ept id="p2">**</ept> (0x002B), <bpt id="p3">**</bpt>/<ept id="p3">**</ept> (0x002F), <bpt id="p4">**</bpt>?<ept id="p4">**</ept> (0x003F), <bpt id="p5">**</bpt>\\<ept id="p5">**</ept> (0x005C), <bpt id="p6">**</bpt>`<ept id="p6">**</ept> (0x0060)</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The ids "." and ".."</source>
          <target state="new">The ids "." and ".."</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can alternatively use integer Ids for your tables.</source>
          <target state="new">You can alternatively use integer Ids for your tables.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In order to use an integer Id you must create your table with the <ph id="ph1">`mobile table create`</ph> command using the <ph id="ph2">`--integerId`</ph> option.</source>
          <target state="new">In order to use an integer Id you must create your table with the <ph id="ph1">`mobile table create`</ph> command using the <ph id="ph2">`--integerId`</ph> option.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This command is used with the Command-line Interface (CLI) for Azure.</source>
          <target state="new">This command is used with the Command-line Interface (CLI) for Azure.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information on using the CLI, see [CLI to manage Mobile Services tables].</source>
          <target state="new">For more information on using the CLI, see [CLI to manage Mobile Services tables].</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="updating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Update data in a mobile service</source>
          <target state="new"><ph id="ph1">&lt;a name="updating"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Update data in a mobile service</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following code shows how to update data in a table.</source>
          <target state="new">The following code shows how to update data in a table.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">*</bpt>item<ept id="p1">*</ept> is a reference to a row in the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table, which has had some changes made to it.</source>
          <target state="new">In this example, <bpt id="p1">*</bpt>item<ept id="p1">*</ept> is a reference to a row in the <bpt id="p2">*</bpt>ToDoItem<ept id="p2">*</ept> table, which has had some changes made to it.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following method updates the table and the UI adapter.</source>
          <target state="new">The following method updates the table and the UI adapter.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a mobile service</source>
          <target state="new"><ph id="ph1">&lt;a name="deleting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete data in a mobile service</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The following code shows how to delete data from a table.</source>
          <target state="new">The following code shows how to delete data from a table.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It deletes an existing item from the ToDoItem table that has had the <bpt id="p1">**</bpt>Completed<ept id="p1">**</ept> check box on the UI checked.</source>
          <target state="new">It deletes an existing item from the ToDoItem table that has had the <bpt id="p1">**</bpt>Completed<ept id="p1">**</ept> check box on the UI checked.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following code illustrates another way to do this.</source>
          <target state="new">The following code illustrates another way to do this.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>It deletes an existing item in the ToDoItem table by specifying the value of the id field of the row to delete (assumed to equal "2FA404AB-E458-44CD-BC1B-3BC847EF0902").</source>
          <target state="new">It deletes an existing item in the ToDoItem table by specifying the value of the id field of the row to delete (assumed to equal "2FA404AB-E458-44CD-BC1B-3BC847EF0902").</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In an actual app you would pick up the ID somehow and pass it in as a variable.</source>
          <target state="new">In an actual app you would pick up the ID somehow and pass it in as a variable.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Here, to simplify testing, you can go into the Azure Mobile Services portal for your service, click <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> and copy an ID that you wish to test with.</source>
          <target state="new">Here, to simplify testing, you can go into the Azure Mobile Services portal for your service, click <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> and copy an ID that you wish to test with.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="lookup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up a specific item</source>
          <target state="new"><ph id="ph1">&lt;a name="lookup"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Look up a specific item</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Sometimes you want to look up a specific item by its <bpt id="p1">*</bpt>id<ept id="p1">*</ept>, unlike querying where you typically get a collection of items that satisfy some criteria.</source>
          <target state="new">Sometimes you want to look up a specific item by its <bpt id="p1">*</bpt>id<ept id="p1">*</ept>, unlike querying where you typically get a collection of items that satisfy some criteria.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The following code shows how to do this, for an <bpt id="p1">*</bpt>id<ept id="p1">*</ept> value of <ph id="ph1">`0380BAFB-BCFF-443C-B7D5-30199F730335`</ph>.</source>
          <target state="new">The following code shows how to do this, for an <bpt id="p1">*</bpt>id<ept id="p1">*</ept> value of <ph id="ph1">`0380BAFB-BCFF-443C-B7D5-30199F730335`</ph>.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In an actual app you would pick up the ID somehow and pass it in as a variable.</source>
          <target state="new">In an actual app you would pick up the ID somehow and pass it in as a variable.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Here, to simplify testing, you can go to the Azure Mobile Services portal for your service, click the <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> tab and copy an ID that you wish to test with.</source>
          <target state="new">Here, to simplify testing, you can go to the Azure Mobile Services portal for your service, click the <bpt id="p1">**</bpt>Data<ept id="p1">**</ept> tab and copy an ID that you wish to test with.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="untyped"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Work with untyped data</source>
          <target state="new"><ph id="ph1">&lt;a name="untyped"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Work with untyped data</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your mobile service table contains a large number of columns and you only need to reference a few of them.</source>
          <target state="new">The untyped programming model gives you exact control over the JSON serialization, and there are some scenarios where you may wish to use it, for example, if your mobile service table contains a large number of columns and you only need to reference a few of them.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Using the typed model requires you to define all of the mobile service table's columns in your data class.</source>
          <target state="new">Using the typed model requires you to define all of the mobile service table's columns in your data class.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>But with the untyped model you only define the columns you need to use.</source>
          <target state="new">But with the untyped model you only define the columns you need to use.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Most of the API calls for accessing data are similar to the typed programming calls.</source>
          <target state="new">Most of the API calls for accessing data are similar to the typed programming calls.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The main difference is that in the untyped model you invoke methods on the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept> object, instead of the <bpt id="p2">**</bpt>MobileServiceTable<ept id="p2">**</ept> object.</source>
          <target state="new">The main difference is that in the untyped model you invoke methods on the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept> object, instead of the <bpt id="p2">**</bpt>MobileServiceTable<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_instance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create an instance of an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_instance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Create an instance of an untyped table</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id="p1">[</bpt>MobileServicesJsonTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298733)</ept> object.</source>
          <target state="new">Similar to the typed model, you start by getting a table reference, but in this case it's a <bpt id="p1">[</bpt>MobileServicesJsonTable<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298733)</ept> object.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>You get the reference by calling the <bpt id="p1">[</bpt>getTable()<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298734)</ept> method on an instance of the Mobile Services client.</source>
          <target state="new">You get the reference by calling the <bpt id="p1">[</bpt>getTable()<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298734)</ept> method on an instance of the Mobile Services client.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>First you define the variable:</source>
          <target state="new">First you define the variable:</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Once you create an instance of the Mobile Services client in the <bpt id="p1">**</bpt>onCreate<ept id="p1">**</ept> method (here, the <bpt id="p2">*</bpt>mClient<ept id="p2">*</ept> variable), you next create an instance of a <bpt id="p3">**</bpt>MobileServiceJsonTable<ept id="p3">**</ept>, with the following code.</source>
          <target state="new">Once you create an instance of the Mobile Services client in the <bpt id="p1">**</bpt>onCreate<ept id="p1">**</ept> method (here, the <bpt id="p2">*</bpt>mClient<ept id="p2">*</ept> variable), you next create an instance of a <bpt id="p3">**</bpt>MobileServiceJsonTable<ept id="p3">**</ept>, with the following code.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Once you have created an instance of the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.</source>
          <target state="new">Once you have created an instance of the <bpt id="p1">**</bpt>MobileServiceJsonTable<ept id="p1">**</ept>, you can call almost all of the methods on it that you can with the typed programming model.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>However in some cases the methods take an untyped parameter, as we see in the following examples.</source>
          <target state="new">However in some cases the methods take an untyped parameter, as we see in the following examples.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_insert"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert into an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_insert"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Insert into an untyped table</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following code shows how to do an insert.</source>
          <target state="new">The following code shows how to do an insert.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The first step is to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>JsonObject<ept id="p2">**</ept><ept id="p1">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library.</source>
          <target state="new">The first step is to create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>JsonObject<ept id="p2">**</ept><ept id="p1">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>, which is part of the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The next step is to insert the object.</source>
          <target state="new">The next step is to insert the object.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The callback function passed to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>insert<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298535)</ept> method is an instance of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TableJsonOperationCallback<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298532)</ept> class.</source>
          <target state="new">The callback function passed to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>insert<ept id="p2">**</ept><ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=298535)</ept> method is an instance of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>TableJsonOperationCallback<ept id="p4">**</ept><ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=298532)</ept> class.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Note how the parameter of the <bpt id="p1">*</bpt>insert<ept id="p1">*</ept> method is a JsonObject.</source>
          <target state="new">Note how the parameter of the <bpt id="p1">*</bpt>insert<ept id="p1">*</ept> method is a JsonObject.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you need to get the ID of the inserted object, use this method call:</source>
          <target state="new">If you need to get the ID of the inserted object, use this method call:</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_delete"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete from an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_delete"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Delete from an untyped table</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following code shows how to delete an instance, in this case, the same instance of a <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept> that was created in the prior <bpt id="p2">*</bpt>insert<ept id="p2">*</ept> example.</source>
          <target state="new">The following code shows how to delete an instance, in this case, the same instance of a <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept> that was created in the prior <bpt id="p2">*</bpt>insert<ept id="p2">*</ept> example.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept>.</source>
          <target state="new">Note that the code is the same as with the typed case, but the method has a different signature since it references an <bpt id="p1">**</bpt>JsonObject<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can also delete an instance directly by using its ID:</source>
          <target state="new">You can also delete an instance directly by using its ID:</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="json_get"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all rows from an untyped table</source>
          <target state="new"><ph id="ph1">&lt;a name="json_get"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Return all rows from an untyped table</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following code shows how to retrieve an entire table.</source>
          <target state="new">The following code shows how to retrieve an entire table.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.</source>
          <target state="new">Since you are using a JSON Table, you can selectively retrieve only some of the table's columns.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.</source>
          <target state="new">You can do filtering, sorting and paging by concatenating  methods that have the same names as those used in the typed programming model.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind data to the user interface</source>
          <target state="new"><ph id="ph1">&lt;a name="binding"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Bind data to the user interface</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Data binding involves three components:</source>
          <target state="new">Data binding involves three components:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>the data source</source>
          <target state="new">the data source</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>the screen layout</source>
          <target state="new">the screen layout</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>and the adapter that ties the two together.</source>
          <target state="new">and the adapter that ties the two together.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In our sample code, we return the data from the mobile service table <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> into an array.</source>
          <target state="new">In our sample code, we return the data from the mobile service table <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> into an array.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This is one very common pattern for data applications: database queries typically return a collection of rows which the client gets in a list or array.</source>
          <target state="new">This is one very common pattern for data applications: database queries typically return a collection of rows which the client gets in a list or array.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In this sample the array is the data source.</source>
          <target state="new">In this sample the array is the data source.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The code specifies a screen layout that defines the view of the data that will appear on the device.</source>
          <target state="new">The code specifies a screen layout that defines the view of the data that will appear on the device.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>And the two are bound together with an adapter, which in this code is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p1">*</ept> class.</source>
          <target state="new">And the two are bound together with an adapter, which in this code is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p1">*</ept> class.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="layout"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the Layout</source>
          <target state="new"><ph id="ph1">&lt;a name="layout"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the Layout</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The layout is defined by several snippets of XML code.</source>
          <target state="new">The layout is defined by several snippets of XML code.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Given an existing layout, let's assume the following code represents the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> we want to populate with our server data.</source>
          <target state="new">Given an existing layout, let's assume the following code represents the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept> we want to populate with our server data.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In the above code the <bpt id="p1">*</bpt>listitem<ept id="p1">*</ept> attribute specifies the id of the layout for an individual row in the list.</source>
          <target state="new">In the above code the <bpt id="p1">*</bpt>listitem<ept id="p1">*</ept> attribute specifies the id of the layout for an individual row in the list.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Here is that code, which specifies a check box and its associated text.</source>
          <target state="new">Here is that code, which specifies a check box and its associated text.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This gets instantiated once for each item in the list.</source>
          <target state="new">This gets instantiated once for each item in the list.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A more complex layout would specify additional fields in the display.</source>
          <target state="new">A more complex layout would specify additional fields in the display.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This code is in the <bpt id="p1">*</bpt>row_list_to_do.xml<ept id="p1">*</ept> file.</source>
          <target state="new">This code is in the <bpt id="p1">*</bpt>row_list_to_do.xml<ept id="p1">*</ept> file.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the adapter</source>
          <target state="new"><ph id="ph1">&lt;a name="adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Define the adapter</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Since the data source of our view is an array of <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, we subclass our adapter from a <bpt id="p2">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p2">*</ept> class.</source>
          <target state="new">Since the data source of our view is an array of <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept>, we subclass our adapter from a <bpt id="p2">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id="p2">*</ept> class.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This subclass will produce a View for every <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> using the <bpt id="p2">*</bpt>row_list_to_do<ept id="p2">*</ept> layout.</source>
          <target state="new">This subclass will produce a View for every <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> using the <bpt id="p2">*</bpt>row_list_to_do<ept id="p2">*</ept> layout.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In our code we define the following class which is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id="p1">*</ept> class:</source>
          <target state="new">In our code we define the following class which is an extension of the <bpt id="p1">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id="p1">*</ept> class:</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You must override the adapter's <bpt id="p1">*</bpt>getView<ept id="p1">*</ept> method.</source>
          <target state="new">You must override the adapter's <bpt id="p1">*</bpt>getView<ept id="p1">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This sample code is one example of how to do this: details will vary with your application.</source>
          <target state="new">This sample code is one example of how to do this: details will vary with your application.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>We create an instance of this class in our Activity as follows:</source>
          <target state="new">We create an instance of this class in our Activity as follows:</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.</source>
          <target state="new">Note that the second parameter to the ToDoItemAdapter constructor is a reference to the layout.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The call to the constructor is followed by the following code which first gets a reference to the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and next calls <bpt id="p2">*</bpt>setAdapter<ept id="p2">*</ept> to configure itself to use the adapter we just created:</source>
          <target state="new">The call to the constructor is followed by the following code which first gets a reference to the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and next calls <bpt id="p2">*</bpt>setAdapter<ept id="p2">*</ept> to configure itself to use the adapter we just created:</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="use-adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use the adapter</source>
          <target state="new"><ph id="ph1">&lt;a name="use-adapter"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Use the adapter</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>You are now ready to use data binding.</source>
          <target state="new">You are now ready to use data binding.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following code shows how to get the items in the mobile service table, clear the apapter, and then call the adapter's <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method to fill it with the returned items.</source>
          <target state="new">The following code shows how to get the items in the mobile service table, clear the apapter, and then call the adapter's <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method to fill it with the returned items.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>You must also call the adapter any time you modify the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table if you want to display the results of doing that.</source>
          <target state="new">You must also call the adapter any time you modify the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table if you want to display the results of doing that.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.</source>
          <target state="new">Since modifications are done on a record by record basis, you will be dealing with a single row instead of a collection.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When you insert an item you call the <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method on the adapter, when deleting, you call the <bpt id="p2">*</bpt>remove<ept id="p2">*</ept> method.</source>
          <target state="new">When you insert an item you call the <bpt id="p1">*</bpt>add<ept id="p1">*</ept> method on the adapter, when deleting, you call the <bpt id="p2">*</bpt>remove<ept id="p2">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="authentication"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Authenticate users</source>
          <target state="new"><ph id="ph1">&lt;a name="authentication"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Authenticate users</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</source>
          <target state="new">Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
          <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>You can also use the identity of authenticated users to implement authorization rules in your backend.</source>
          <target state="new">You can also use the identity of authenticated users to implement authorization rules in your backend.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Get started with authentication<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Get started with authentication<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Two authentication flows are supported: a <bpt id="p1">*</bpt>server<ept id="p1">*</ept> flow and a <bpt id="p2">*</bpt>client<ept id="p2">*</ept> flow.</source>
          <target state="new">Two authentication flows are supported: a <bpt id="p1">*</bpt>server<ept id="p1">*</ept> flow and a <bpt id="p2">*</bpt>client<ept id="p2">*</ept> flow.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</source>
          <target state="new">The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.</source>
          <target state="new">The client flow allows for deeper integration with device-specific capabilities such as single-sign-on as it relies on provider-specific device-specific SDKs.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Three steps are required to enable authentication in your app:</source>
          <target state="new">Three steps are required to enable authentication in your app:</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Register your app for authentication with a provider, and configure Mobile Services</source>
          <target state="new">Register your app for authentication with a provider, and configure Mobile Services</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Restrict table permissions to authenticated users only</source>
          <target state="new">Restrict table permissions to authenticated users only</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Add authentication code to your app</source>
          <target state="new">Add authentication code to your app</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Mobile Services supports the following existing identity providers that you can use to authenticate users:</source>
          <target state="new">Mobile Services supports the following existing identity providers that you can use to authenticate users:</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Microsoft Account</source>
          <target state="new">Microsoft Account</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Facebook</source>
          <target state="new">Facebook</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Twitter</source>
          <target state="new">Twitter</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Google</source>
          <target state="new">Google</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Azure Active Directory</source>
          <target state="new">Azure Active Directory</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
          <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>You can also use the ID of an authenticated user to modify requests.</source>
          <target state="new">You can also use the ID of an authenticated user to modify requests.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>These first two tasks are done using the <bpt id="p1">[</bpt>Azure Management Portal<ept id="p1">](https://manage.windowsazure.com/)</ept>.</source>
          <target state="new">These first two tasks are done using the <bpt id="p1">[</bpt>Azure Management Portal<ept id="p1">](https://manage.windowsazure.com/)</ept>.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Get started with authentication<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Get started with authentication<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=296316)</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Add authentication code to your app</source>
          <target state="new"><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Add authentication code to your app</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Add the following import statements to your app's activity file.</source>
          <target state="new">Add the following import statements to your app's activity file.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>onCreate<ept id="p1">**</ept> method of the activity class, add the following line of code after the code that creates the <ph id="ph1">`MobileServiceClient`</ph> object: we assume that the reference to the <ph id="ph2">`MobileServiceClient`</ph> object is <bpt id="p2">*</bpt>mClient<ept id="p2">*</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>onCreate<ept id="p1">**</ept> method of the activity class, add the following line of code after the code that creates the <ph id="ph1">`MobileServiceClient`</ph> object: we assume that the reference to the <ph id="ph2">`MobileServiceClient`</ph> object is <bpt id="p2">*</bpt>mClient<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This code authenticates the user using a Google login.</source>
          <target state="new">This code authenticates the user using a Google login.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A dialog is displayed which displays the ID of the authenticated user.</source>
          <target state="new">A dialog is displayed which displays the ID of the authenticated user.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>You cannot proceed without a positive authentication.</source>
          <target state="new">You cannot proceed without a positive authentication.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> If you are using an identity provider other than Google, change the value passed to the <bpt id="p1">**</bpt>login<ept id="p1">**</ept> method above to one of the following: <bpt id="p2">_</bpt>MicrosoftAccount<ept id="p2">_</ept>, <bpt id="p3">_</bpt>Facebook<ept id="p3">_</ept>, <bpt id="p4">_</bpt>Twitter<ept id="p4">_</ept>, or <bpt id="p5">_</bpt>WindowsAzureActiveDirectory<ept id="p5">_</ept>.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> If you are using an identity provider other than Google, change the value passed to the <bpt id="p1">**</bpt>login<ept id="p1">**</ept> method above to one of the following: <bpt id="p2">_</bpt>MicrosoftAccount<ept id="p2">_</ept>, <bpt id="p3">_</bpt>Facebook<ept id="p3">_</ept>, <bpt id="p4">_</bpt>Twitter<ept id="p4">_</ept>, or <bpt id="p5">_</bpt>WindowsAzureActiveDirectory<ept id="p5">_</ept>.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>When you run the app, sign in with your chosen identity provider.</source>
          <target state="new">When you run the app, sign in with your chosen identity provider.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Cache authentication tokens</source>
          <target state="new"><ph id="ph1">&lt;a name="caching"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Cache authentication tokens</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This section shows how to cache an authentication token.</source>
          <target state="new">This section shows how to cache an authentication token.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Do this to prevent users from having to authenticate again if app is "hibernated" while the token is still valid.</source>
          <target state="new">Do this to prevent users from having to authenticate again if app is "hibernated" while the token is still valid.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Caching authentication tokens requires you to store the User ID and authentication token locally on the device.</source>
          <target state="new">Caching authentication tokens requires you to store the User ID and authentication token locally on the device.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.</source>
          <target state="new">The next time the app starts, you check the cache, and if these values are present, you can skip the log in procedure and re-hydrate the client with this data.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.</source>
          <target state="new">However this data is sensitive, and it should be stored encrypted for safety in case the phone gets stolen.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The following code snippet demonstrates obtaining a token for a Microsoft Account log in.</source>
          <target state="new">The following code snippet demonstrates obtaining a token for a Microsoft Account log in.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The token is cached and reloaded if the cache is found.</source>
          <target state="new">The token is cached and reloaded if the cache is found.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>So what happens if your token expires?</source>
          <target state="new">So what happens if your token expires?</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>In this case, when you try to use it to connect, you will get a <bpt id="p1">*</bpt>401 unauthorized<ept id="p1">*</ept> response.</source>
          <target state="new">In this case, when you try to use it to connect, you will get a <bpt id="p1">*</bpt>401 unauthorized<ept id="p1">*</ept> response.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The user must then log in to obtain new tokens.</source>
          <target state="new">The user must then log in to obtain new tokens.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.</source>
          <target state="new">You can avoid having to write code to handle this in every place in your app that calls your mobile service by using filters, which allow you to intercept calls to and responses from Mobile Services.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.</source>
          <target state="new">The filter code will then test the response for a 401, trigger the sign-in process if needed, and then resume the request that generated the 401.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</source>
          <target state="new"><ph id="ph1">&lt;a name="customizing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize the client</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>There are several ways for you to customize the default behavior of the Mobile Services client.</source>
          <target state="new">There are several ways for you to customize the default behavior of the Mobile Services client.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</source>
          <target state="new"><ph id="ph1">&lt;a name="headers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize request headers</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>You might want to attach a custom header to every outgoing request.</source>
          <target state="new">You might want to attach a custom header to every outgoing request.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>You can accomplish that by configuring a <bpt id="p1">**</bpt>ServiceFilter<ept id="p1">**</ept> like this:</source>
          <target state="new">You can accomplish that by configuring a <bpt id="p1">**</bpt>ServiceFilter<ept id="p1">**</ept> like this:</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</source>
          <target state="new"><ph id="ph1">&lt;a name="serialization"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Customize serialization</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Mobile Services assumes by default that the table names, column names and data types on the server all match exactly what is on the client.</source>
          <target state="new">Mobile Services assumes by default that the table names, column names and data types on the server all match exactly what is on the client.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>But there can be any number of reasons why the server and client names might not match.</source>
          <target state="new">But there can be any number of reasons why the server and client names might not match.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>One example might be if you have an existing client that you want to change so that it uses Mobile Services instead of a competitor's product.</source>
          <target state="new">One example might be if you have an existing client that you want to change so that it uses Mobile Services instead of a competitor's product.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>You might want to do the following kinds of customizations:</source>
          <target state="new">You might want to do the following kinds of customizations:</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The column names used in the mobile-  service table don't match the names you are using in the client</source>
          <target state="new">The column names used in the mobile-  service table don't match the names you are using in the client</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Use a mobile service table that has a different name than the class it maps to in the client</source>
          <target state="new">Use a mobile service table that has a different name than the class it maps to in the client</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Turn on automatic property capitalization</source>
          <target state="new">Turn on automatic property capitalization</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Add complex properties to an object</source>
          <target state="new">Add complex properties to an object</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="columns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different client and server names</source>
          <target state="new"><ph id="ph1">&lt;a name="columns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different client and server names</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Suppose that your Java client code uses standard Java-style names for the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> object properties, such as the following.</source>
          <target state="new">Suppose that your Java client code uses standard Java-style names for the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> object properties, such as the following.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>mId</source>
          <target state="new">mId</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>mText</source>
          <target state="new">mText</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>mComplete</source>
          <target state="new">mComplete</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>mDuration</source>
          <target state="new">mDuration</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>You must serialize the client names into JSON names that match the column names of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table on the server.</source>
          <target state="new">You must serialize the client names into JSON names that match the column names of the <bpt id="p1">*</bpt>ToDoItem<ept id="p1">*</ept> table on the server.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The following code, which makes use of the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library does this.</source>
          <target state="new">The following code, which makes use of the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library does this.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="table"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different table names between client and mobile services</source>
          <target state="new"><ph id="ph1">&lt;a name="table"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Map different table names between client and mobile services</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the</source>
          <target state="new">Mapping the client table name to a different mobile services table name is easy, we just use one of the overrides of the</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=296840" target="_blank"&gt;</ph>getTable()<ph id="ph2">&lt;/a&gt;</ph> function, as seen in the following code.</source>
          <target state="new"><ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=296840" target="_blank"&gt;</ph>getTable()<ph id="ph2">&lt;/a&gt;</ph> function, as seen in the following code.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="conversions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Automate column name mappings</source>
          <target state="new"><ph id="ph1">&lt;a name="conversions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Automate column name mappings</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.</source>
          <target state="new">Mapping column names for a narrow table with only a few columns isn't a big deal, as we saw in the prior section.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>But suppose our table has a lot of columns, say 20 or 30.</source>
          <target state="new">But suppose our table has a lot of columns, say 20 or 30.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>It turns out that we can call the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.</source>
          <target state="new">It turns out that we can call the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> API and specify a conversion strategy that will apply to every column, and avoid having to annotate every single column name.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>To do this we use the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.</source>
          <target state="new">To do this we use the <ph id="ph1">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph2">&lt;/a&gt;</ph> library which the Android client library uses behind the scenes to serialize Java objects to JSON data, which is sent to Azure Mobile Services.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The following code uses the <bpt id="p1">*</bpt>setFieldNamingStrategy()<ept id="p1">*</ept> method, in which we define a <bpt id="p2">*</bpt>FieldNamingStrategy()<ept id="p2">*</ept> method.</source>
          <target state="new">The following code uses the <bpt id="p1">*</bpt>setFieldNamingStrategy()<ept id="p1">*</ept> method, in which we define a <bpt id="p2">*</bpt>FieldNamingStrategy()<ept id="p2">*</ept> method.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This method says to delete the initial character (an "m"), and then lower-case the next character, for every field name.</source>
          <target state="new">This method says to delete the initial character (an "m"), and then lower-case the next character, for every field name.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This code also enables pretty-printing of the output JSON.</source>
          <target state="new">This code also enables pretty-printing of the output JSON.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This code must be executed prior to any method calls on the Mobile Services client object.</source>
          <target state="new">This code must be executed prior to any method calls on the Mobile Services client object.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="complex"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Store an object or array property into a table</source>
          <target state="new"><ph id="ph1">&lt;a name="complex"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>How to: Store an object or array property into a table</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.</source>
          <target state="new">So far all of our serialization examples have involved primitive types such as integers and strings which easily serialize into JSON and into the mobile services table.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.</source>
          <target state="new">Suppose we want to add a complex object to our client type, which doesn't automatically serialize to JSON and to the table.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For example we might want to add an array of strings to the client object.</source>
          <target state="new">For example we might want to add an array of strings to the client object.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.</source>
          <target state="new">It is now up to us to specify how to do the serialization, and how to store the array into the mobile services table.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>To see an example of how to do this, check out the blog post <ph id="ph1">&lt;a href="http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson" target="_blank"&gt;</ph>Customizing serialization using the <ph id="ph2">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph3">&lt;/a&gt;</ph> library in the Mobile Services Android client<ph id="ph4">&lt;/a&gt;</ph>.</source>
          <target state="new">To see an example of how to do this, check out the blog post <ph id="ph1">&lt;a href="http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson" target="_blank"&gt;</ph>Customizing serialization using the <ph id="ph2">&lt;a href=" http://go.microsoft.com/fwlink/p/?LinkId=290801" target="_blank"&gt;</ph>gson<ph id="ph3">&lt;/a&gt;</ph> library in the Mobile Services Android client<ph id="ph4">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.</source>
          <target state="new">This general method can be used whenever we have a complex object that is not automatically serializable into JSON and the mobile services table.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a778a5dfbcb3a9bc6b266e2cc716f7b77a98b44b</xliffext:olfilehash>
  </header>
</xliff>