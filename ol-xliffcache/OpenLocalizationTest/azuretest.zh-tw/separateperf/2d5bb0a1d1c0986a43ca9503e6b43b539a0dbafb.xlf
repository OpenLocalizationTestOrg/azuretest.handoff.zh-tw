<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Receive messages with EventProcessorHost</source>
          <target state="new">Receive messages with EventProcessorHost</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>[EventProcessorHost] is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs.</source>
          <target state="new">[EventProcessorHost] is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Using [EventProcessorHost], you can split events across multiple receivers, even when hosted in different nodes.</source>
          <target state="new">Using [EventProcessorHost], you can split events across multiple receivers, even when hosted in different nodes.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This example shows how to use [EventProcessorHost] for a single receiver.</source>
          <target state="new">This example shows how to use [EventProcessorHost] for a single receiver.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The [Scaled out event processing] sample shows how to use [EventProcessorHost] with multiple receivers.</source>
          <target state="new">The [Scaled out event processing] sample shows how to use [EventProcessorHost] with multiple receivers.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In order to use [EventProcessorHost], you must have an [Azure Storage account]:</source>
          <target state="new">In order to use [EventProcessorHost], you must have an [Azure Storage account]:</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Log on to the [Azure portal], and click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> at the bottom of the screen.</source>
          <target state="new">Log on to the [Azure portal], and click <bpt id="p1">**</bpt>NEW<ept id="p1">**</ept> at the bottom of the screen.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Data Services<ept id="p1">**</ept>, then <bpt id="p2">**</bpt>Storage<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Quick Create<ept id="p3">**</ept>, and then type a name for your storage account.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Data Services<ept id="p1">**</ept>, then <bpt id="p2">**</bpt>Storage<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>Quick Create<ept id="p3">**</ept>, and then type a name for your storage account.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Select your desired region, and then click <bpt id="p1">**</bpt>Create Storage Account<ept id="p1">**</ept>.</source>
          <target state="new">Select your desired region, and then click <bpt id="p1">**</bpt>Create Storage Account<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Click the newly created storage account, and then click <bpt id="p1">**</bpt>Manage Access Keys<ept id="p1">**</ept>:</source>
          <target state="new">Click the newly created storage account, and then click <bpt id="p1">**</bpt>Manage Access Keys<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Copy the access key to use later in this tutorial.</source>
          <target state="new">Copy the access key to use later in this tutorial.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a new Visual C# Desktop App project using the <bpt id="p1">**</bpt>Console  Application<ept id="p1">**</ept> project template.</source>
          <target state="new">In Visual Studio, create a new Visual C# Desktop App project using the <bpt id="p1">**</bpt>Console  Application<ept id="p1">**</ept> project template.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept>.</source>
          <target state="new">Name the project <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</source>
          <target state="new">In Solution Explorer, right-click the solution, and then click <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> dialog box appears.</source>
          <target state="new">The <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> dialog box appears.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Search for <ph id="ph1">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</source>
          <target state="new">Search for <ph id="ph1">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>, click <bpt id="p1">**</bpt>Install<ept id="p1">**</ept>, and accept the terms of use.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</source>
          <target state="new">This downloads, installs, and adds a reference to the <bpt id="p1">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</source>
          <target state="new">Right-click the <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept> project, click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Class<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name the new class <bpt id="p1">**</bpt>SimpleEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</source>
          <target state="new">Name the new class <bpt id="p1">**</bpt>SimpleEventProcessor<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to create the class.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add the following statements at the top of the SimpleEventProcessor.cs file:</source>
          <target state="new">Add the following statements at the top of the SimpleEventProcessor.cs file:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Then, substitute the following code for the body of the class:</source>
          <target state="new">Then, substitute the following code for the body of the class:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This class will be called by the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> to process events received from the Event Hub.</source>
          <target state="new">This class will be called by the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> to process events received from the Event Hub.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`SimpleEventProcessor`</ph> class uses a stopwatch to periodically call the checkpoint method on the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> context.</source>
          <target state="new">Note that the <ph id="ph1">`SimpleEventProcessor`</ph> class uses a stopwatch to periodically call the checkpoint method on the <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> context.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.</source>
          <target state="new">This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <ph id="ph1">`using`</ph> statements at the top:</source>
          <target state="new">In the <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> class, add the following <ph id="ph1">`using`</ph> statements at the top:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Then, modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the Event Hub name and connection string, and the storage account and key that you copied in the previous sections:</source>
          <target state="new">Then, modify the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method to the <bpt id="p2">**</bpt>Program<ept id="p2">**</ept> class as shown below, substituting the Event Hub name and connection string, and the storage account and key that you copied in the previous sections:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single instance of [EventProcessorHost].</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This tutorial uses a single instance of [EventProcessorHost].</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To increase throughput, it is recommended that you run multiple instances of [EventProcessorHost], as shown in the [Scaled out event processing] sample.</source>
          <target state="new">To increase throughput, it is recommended that you run multiple instances of [EventProcessorHost], as shown in the [Scaled out event processing] sample.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In those cases, the various instances  automatically coordinate with each other in order to load balance the received events.</source>
          <target state="new">In those cases, the various instances  automatically coordinate with each other in order to load balance the received events.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you want multiple receivers to each process <bpt id="p1">*</bpt>all<ept id="p1">*</ept> the events, you must use the <bpt id="p2">**</bpt>ConsumerGroup<ept id="p2">**</ept> concept.</source>
          <target state="new">If you want multiple receivers to each process <bpt id="p1">*</bpt>all<ept id="p1">*</ept> the events, you must use the <bpt id="p2">**</bpt>ConsumerGroup<ept id="p2">**</ept> concept.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When receiving events from different machines, it might be useful to specify names for [EventProcessorHost] instances based on the machines (or roles) in which they are deployed.</source>
          <target state="new">When receiving events from different machines, it might be useful to specify names for [EventProcessorHost] instances based on the machines (or roles) in which they are deployed.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about these topics, refer to the [Event Hubs Overview] and <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> topics.</source>
          <target state="new">For more information about these topics, refer to the [Event Hubs Overview] and <bpt id="p1">[</bpt><ept id="p1">Event Hubs Programming Guide]</ept> topics.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d5bb0a1d1c0986a43ca9503e6b43b539a0dbafb</xliffext:olfilehash>
  </header>
</xliff>