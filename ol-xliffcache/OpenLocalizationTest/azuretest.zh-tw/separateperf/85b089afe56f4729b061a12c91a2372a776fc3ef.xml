{
  "nodes": [
    {
      "content": "How to Use the Engagement API on iOS",
      "pos": [
        27,
        63
      ]
    },
    {
      "content": "Latest iOS SDK - How to Use the Engagement API on iOS",
      "pos": [
        82,
        135
      ]
    },
    {
      "content": "How to Use the Engagement API on iOS",
      "pos": [
        461,
        497
      ]
    },
    {
      "content": "This document is an add-on to the document How to Integrate Engagement on iOS: it provides in depth details about how to use the Engagement API to report your application statistics.",
      "pos": [
        499,
        681
      ]
    },
    {
      "pos": [
        683,
        955
      ],
      "content": "Keep in mind that if you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your custom <ph id=\"ph1\">`UIViewController`</ph> objects inherit from the corresponding <ph id=\"ph2\">`EngagementViewController`</ph> class."
    },
    {
      "pos": [
        957,
        1243
      ],
      "content": "If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <ph id=\"ph1\">`EngagementViewController`</ph> classes, then you need to use the Engagement API."
    },
    {
      "content": "The Engagement API is provided by the <ph id=\"ph1\">`EngagementAgent`</ph> class.",
      "pos": [
        1245,
        1307
      ]
    },
    {
      "content": "An instance of this class can be retrieved by calling the <ph id=\"ph1\">`[EngagementAgent shared]`</ph> static method (note that the <ph id=\"ph2\">`EngagementAgent`</ph> object returned is a singleton).",
      "pos": [
        1308,
        1472
      ]
    },
    {
      "pos": [
        1474,
        1674
      ],
      "content": "Before any API calls, the <ph id=\"ph1\">`EngagementAgent`</ph> object must be initialized by calling the method <ph id=\"ph2\">`[EngagementAgent init:@\"Endpoint={YOUR_APP_COLLECTION.DOMAIN};SdkKey={YOUR_SDK_KEY};AppId={YOUR_APPID}\"];`</ph>"
    },
    {
      "content": "Engagement concepts",
      "pos": [
        1678,
        1697
      ]
    },
    {
      "pos": [
        1699,
        1818
      ],
      "content": "The following parts refine the common <bpt id=\"p1\">[</bpt>Mobile Engagement Concepts<ept id=\"p1\">](mobile-engagement-concepts.md)</ept> for the iOS platform."
    },
    {
      "pos": [
        1824,
        1848
      ],
      "content": "<ph id=\"ph1\">`Session`</ph> and <ph id=\"ph2\">`Activity`</ph>"
    },
    {
      "pos": [
        1850,
        2128
      ],
      "content": "An <bpt id=\"p1\">*</bpt>activity<ept id=\"p1\">*</ept> is usually associated with one screen of the application, that is to say the <bpt id=\"p2\">*</bpt>activity<ept id=\"p2\">*</ept> starts when the screen is displayed and stops when the screen is closed: this is the case when the Engagement SDK is integrated by using the <ph id=\"ph1\">`EngagementViewController`</ph> classes."
    },
    {
      "content": "But <bpt id=\"p1\">*</bpt>activities<ept id=\"p1\">*</ept> can also be controlled manually by using the Engagement API.",
      "pos": [
        2130,
        2207
      ]
    },
    {
      "content": "This allows to split a given screen in several sub parts to get more details about the usage of this screen (for example to known how often and how long dialogs are used inside this screen).",
      "pos": [
        2208,
        2398
      ]
    },
    {
      "content": "Reporting Activities",
      "pos": [
        2402,
        2422
      ]
    },
    {
      "content": "User starts a new Activity",
      "pos": [
        2428,
        2454
      ]
    },
    {
      "content": "You need to call <ph id=\"ph1\">`startActivity()`</ph> each time the user activity changes.",
      "pos": [
        2540,
        2611
      ]
    },
    {
      "content": "The first call to this function starts a new user session.",
      "pos": [
        2612,
        2670
      ]
    },
    {
      "content": "User ends his current Activity",
      "pos": [
        2676,
        2706
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph> You should <bpt id=\"p1\">**</bpt>NEVER<ept id=\"p1\">**</ept> call this function by yourself, except if you want to split one use of your application into several sessions: a call to this function would end the current session immediately, so, a subsequent call to <ph id=\"ph2\">`startActivity()`</ph> would start a new session.",
      "pos": [
        2763,
        3047
      ]
    },
    {
      "content": "This function is automatically called by the SDK when your application is closed.",
      "pos": [
        3048,
        3129
      ]
    },
    {
      "content": "Reporting Events",
      "pos": [
        3133,
        3149
      ]
    },
    {
      "content": "Session events",
      "pos": [
        3155,
        3169
      ]
    },
    {
      "content": "Session events are usually used to report the actions performed by a user during his session.",
      "pos": [
        3171,
        3264
      ]
    },
    {
      "content": "Example without extra data:",
      "pos": [
        3268,
        3295
      ]
    },
    {
      "content": "Example with extra data:",
      "pos": [
        3722,
        3746
      ]
    },
    {
      "content": "Standalone events",
      "pos": [
        4438,
        4455
      ]
    },
    {
      "content": "Contrary to session events, standalone events can be used outside of the context of a session.",
      "pos": [
        4457,
        4551
      ]
    },
    {
      "content": "Example:",
      "pos": [
        4555,
        4563
      ]
    },
    {
      "content": "Reporting Errors",
      "pos": [
        4648,
        4664
      ]
    },
    {
      "content": "Session errors",
      "pos": [
        4670,
        4684
      ]
    },
    {
      "content": "Session errors are usually used to report the errors impacting the user during his session.",
      "pos": [
        4686,
        4777
      ]
    },
    {
      "content": "Example:",
      "pos": [
        4781,
        4789
      ]
    },
    {
      "content": "Standalone errors",
      "pos": [
        5145,
        5162
      ]
    },
    {
      "content": "Contrary to session errors, standalone errors can be used outside of the context of a session.",
      "pos": [
        5164,
        5258
      ]
    },
    {
      "content": "Example:",
      "pos": [
        5262,
        5270
      ]
    },
    {
      "content": "Reporting Jobs",
      "pos": [
        5350,
        5364
      ]
    },
    {
      "content": "Example:",
      "pos": [
        5368,
        5376
      ]
    },
    {
      "content": "Suppose you want to report the duration of your login process:",
      "pos": [
        5380,
        5442
      ]
    },
    {
      "content": "Report Errors during a Job",
      "pos": [
        5684,
        5710
      ]
    },
    {
      "content": "Errors can be related to a running job instead of being related to the current user session.",
      "pos": [
        5712,
        5804
      ]
    },
    {
      "content": "Example:",
      "pos": [
        5808,
        5816
      ]
    },
    {
      "content": "Suppose you want to report an error during your login process:",
      "pos": [
        5820,
        5882
      ]
    },
    {
      "content": "Events during a job",
      "pos": [
        6678,
        6697
      ]
    },
    {
      "content": "Events can be related to a running job instead of being related to the current user session.",
      "pos": [
        6699,
        6791
      ]
    },
    {
      "content": "Example:",
      "pos": [
        6795,
        6803
      ]
    },
    {
      "content": "Suppose we have a social network, and we use a job to report the total time during which the user is connected to the server.",
      "pos": [
        6807,
        6932
      ]
    },
    {
      "content": "The user can receive messages from his friends, this is a job event.",
      "pos": [
        6933,
        7001
      ]
    },
    {
      "content": "Extra parameters",
      "pos": [
        7458,
        7474
      ]
    },
    {
      "content": "Arbitrary data can be attached to events, errors, activities and jobs.",
      "pos": [
        7476,
        7546
      ]
    },
    {
      "content": "This data can be structured, it uses iOS's NSDictionary class.",
      "pos": [
        7548,
        7610
      ]
    },
    {
      "pos": [
        7612,
        7820
      ],
      "content": "Note that extras can contain <ph id=\"ph1\">`arrays(NSArray, NSMutableArray)`</ph>, <ph id=\"ph2\">`numbers(NSNumber class)`</ph>, <ph id=\"ph3\">`strings(NSString, NSMutableString)`</ph>, <ph id=\"ph4\">`urls(NSURL)`</ph>, <ph id=\"ph5\">`data(NSData, NSMutableData)`</ph> or other <ph id=\"ph6\">`NSDictionary`</ph> instances."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> The extra parameter is serialized in JSON.",
      "pos": [
        7824,
        7879
      ]
    },
    {
      "content": "If you want to pass different objects than the ones described above, you must implement the following method in your class:",
      "pos": [
        7880,
        8003
      ]
    },
    {
      "content": "The method should return a JSON representation of your object.",
      "pos": [
        8055,
        8117
      ]
    },
    {
      "content": "Example",
      "pos": [
        8123,
        8130
      ]
    },
    {
      "content": "Limits",
      "pos": [
        8434,
        8440
      ]
    },
    {
      "content": "Keys",
      "pos": [
        8447,
        8451
      ]
    },
    {
      "pos": [
        8453,
        8528
      ],
      "content": "Each key in the <ph id=\"ph1\">`NSDictionary`</ph> must match the following regular expression:"
    },
    {
      "content": "It means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).",
      "pos": [
        8556,
        8660
      ]
    },
    {
      "content": "Size",
      "pos": [
        8667,
        8671
      ]
    },
    {
      "pos": [
        8673,
        8771
      ],
      "content": "Extras are limited to <bpt id=\"p1\">**</bpt>1024<ept id=\"p1\">**</ept> characters per call (once encoded in JSON by the Engagement agent)."
    },
    {
      "content": "In the previous example, the JSON sent to the server is 58 characters long:",
      "pos": [
        8773,
        8848
      ]
    },
    {
      "content": "Reporting Application Information",
      "pos": [
        8916,
        8949
      ]
    },
    {
      "pos": [
        8951,
        9078
      ],
      "content": "You can manually report tracking information (or any other application specific information) using the <ph id=\"ph1\">`sendAppInfo:`</ph> function."
    },
    {
      "content": "Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device.",
      "pos": [
        9080,
        9205
      ]
    },
    {
      "pos": [
        9207,
        9392
      ],
      "content": "Like event extras, the <ph id=\"ph1\">`NSDictionary`</ph> class is used to abstract application information, note that arrays or sub-dictionaries will be treated as flat strings (using JSON serialization)."
    },
    {
      "content": "Example:",
      "pos": [
        9396,
        9404
      ]
    },
    {
      "content": "Limits",
      "pos": [
        9680,
        9686
      ]
    },
    {
      "content": "Keys",
      "pos": [
        9693,
        9697
      ]
    },
    {
      "pos": [
        9699,
        9774
      ],
      "content": "Each key in the <ph id=\"ph1\">`NSDictionary`</ph> must match the following regular expression:"
    },
    {
      "content": "It means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).",
      "pos": [
        9802,
        9906
      ]
    },
    {
      "content": "Size",
      "pos": [
        9913,
        9917
      ]
    },
    {
      "pos": [
        9919,
        10034
      ],
      "content": "Application information are limited to <bpt id=\"p1\">**</bpt>1024<ept id=\"p1\">**</ept> characters per call (once encoded in JSON by the Engagement agent)."
    },
    {
      "content": "In the previous example, the JSON sent to the server is 44 characters long:",
      "pos": [
        10036,
        10111
      ]
    },
    {
      "content": "test",
      "pos": [
        10163,
        10167
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to Use the Engagement API on iOS\"\n    description=\"Latest iOS SDK - How to Use the Engagement API on iOS\"\n    services=\"mobile-engagement\"\n    documentationCenter=\"mobile\"\n    authors=\"piyushjo\"\n    manager=\"dwrede\"\n    editor=\"\" />\n\n<tags\n    ms.service=\"mobile-engagement\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-ios\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/10/2015\"\n    ms.author=\"piyushjo\" />\n\n\n#How to Use the Engagement API on iOS\n\nThis document is an add-on to the document How to Integrate Engagement on iOS: it provides in depth details about how to use the Engagement API to report your application statistics.\n\nKeep in mind that if you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your custom `UIViewController` objects inherit from the corresponding `EngagementViewController` class.\n\nIf you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the `EngagementViewController` classes, then you need to use the Engagement API.\n\nThe Engagement API is provided by the `EngagementAgent` class. An instance of this class can be retrieved by calling the `[EngagementAgent shared]` static method (note that the `EngagementAgent` object returned is a singleton).\n\nBefore any API calls, the `EngagementAgent` object must be initialized by calling the method `[EngagementAgent init:@\"Endpoint={YOUR_APP_COLLECTION.DOMAIN};SdkKey={YOUR_SDK_KEY};AppId={YOUR_APPID}\"];`\n\n##Engagement concepts\n\nThe following parts refine the common [Mobile Engagement Concepts](mobile-engagement-concepts.md) for the iOS platform.\n\n### `Session` and `Activity`\n\nAn *activity* is usually associated with one screen of the application, that is to say the *activity* starts when the screen is displayed and stops when the screen is closed: this is the case when the Engagement SDK is integrated by using the `EngagementViewController` classes.\n\nBut *activities* can also be controlled manually by using the Engagement API. This allows to split a given screen in several sub parts to get more details about the usage of this screen (for example to known how often and how long dialogs are used inside this screen).\n\n##Reporting Activities\n\n### User starts a new Activity\n\n            [[EngagementAgent shared] startActivity:@\"MyUserActivity\" extras:nil];\n\nYou need to call `startActivity()` each time the user activity changes. The first call to this function starts a new user session.\n\n### User ends his current Activity\n\n            [[EngagementAgent shared] endActivity];\n\n> [AZURE.WARNING] You should **NEVER** call this function by yourself, except if you want to split one use of your application into several sessions: a call to this function would end the current session immediately, so, a subsequent call to `startActivity()` would start a new session. This function is automatically called by the SDK when your application is closed.\n\n##Reporting Events\n\n### Session events\n\nSession events are usually used to report the actions performed by a user during his session.\n\n**Example without extra data:**\n\n    @implementation MyViewController {\n       [...]\n       - (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration\n       {\n        [super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];\n            ...\n        [[EngagementAgent shared] sendSessionEvent:@\"will_rotate\" extras:nil];\n            ...\n       }\n       [...]\n    }\n\n**Example with extra data:**\n\n    @implementation MyViewController {\n       [...]\n       - (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration\n       {\n        [super willRotateToInterfaceOrientation:toInterfaceOrientation duration:duration];\n            ...\n        NSMutableDictionary* extras = [NSMutableDictionary dictionary];\n        [extras setObject:[NSNumber numberWithInt:toInterfaceOrientation] forKey:@\"to_orientation_id\"];\n        [extras setObject:[NSNumber numberWithDouble:duration] forKey:@\"duration\"];\n        [[EngagementAgent shared] sendSessionEvent:@\"will_rotate\" extras:extras];\n            ...\n       }\n       [...]\n    }\n\n### Standalone events\n\nContrary to session events, standalone events can be used outside of the context of a session.\n\n**Example:**\n\n    [[EngagementAgent shared] sendEvent:@\"received_notification\" extras:nil];\n\n##Reporting Errors\n\n### Session errors\n\nSession errors are usually used to report the errors impacting the user during his session.\n\n**Example:**\n\n    /** The user has entered invalid data in a form */\n    @implementation MyViewController {\n      [...]\n      -(void)onMyFormSubmitted:(MyForm*)form {\n        [...]\n        /* The user has entered an invalid email address */\n        [[EngagementAgent shared] sendSessionError:@\"sign_up_email\" extras:nil]\n        [...]\n      }\n      [...]\n    }\n\n### Standalone errors\n\nContrary to session errors, standalone errors can be used outside of the context of a session.\n\n**Example:**\n\n    [[EngagementAgent shared] sendError:@\"something_failed\" extras:nil];\n\n##Reporting Jobs\n\n**Example:**\n\nSuppose you want to report the duration of your login process:\n\n    [...]\n    -(void)signIn\n    {\n      /* Start job */\n      [[EngagementAgent shared] startJob:@\"sign_in\" extras:nil];\n\n      [... sign in ...]\n\n      /* End job */\n      [[EngagementAgent shared] endJob:@\"sign_in\"];\n    }\n    [...]\n\n### Report Errors during a Job\n\nErrors can be related to a running job instead of being related to the current user session.\n\n**Example:**\n\nSuppose you want to report an error during your login process:\n\n    [...]\n    -(void)signin\n    {\n      /* Start job */\n      [[EngagementAgent shared] startJob:@\"sign_in\" extras:nil];\n\n      BOOL success = NO;\n      while (!success) {\n        /* Try to sign in */\n        NSError* error = nil;\n        [self trySigin:&error];\n        success = error == nil;\n\n        /* If an error occured report it */\n        if(!success)\n        {\n          [[EngagementAgent shared] sendJobError:@\"sign_in_error\"\n                         jobName:@\"sign_in\"\n                          extras:[NSDictionary dictionaryWithObject:[error localizedDescription] forKey:@\"error\"]];\n\n          /* Retry after a moment */\n          [NSThread sleepForTimeInterval:20];\n        }\n      }\n\n      /* End job */\n      [[EngagementAgent shared] endJob:@\"sign_in\"];\n    };\n    [...]\n\n### Events during a job\n\nEvents can be related to a running job instead of being related to the current user session.\n\n**Example:**\n\nSuppose we have a social network, and we use a job to report the total time during which the user is connected to the server. The user can receive messages from his friends, this is a job event.\n\n    [...]\n    - (void) signin\n    {\n      [...Sign in code...]\n      [[EngagementAgent shared] startJob:@\"connection\" extras:nil];\n    }\n    [...]\n    - (void) signout\n    {\n      [...Sign out code...]\n      [[EngagementAgent shared] endJob:@\"connection\"];\n    }\n    [...]\n    - (void) onMessageReceived\n    {\n      [...Notify user...]\n      [[EngagementAgent shared] sendJobEvent:@\"connection\" jobName:@\"message_received\" extras:nil];\n    }\n    [...]\n\n##Extra parameters\n\nArbitrary data can be attached to events, errors, activities and jobs.\n\nThis data can be structured, it uses iOS's NSDictionary class.\n\nNote that extras can contain `arrays(NSArray, NSMutableArray)`, `numbers(NSNumber class)`, `strings(NSString, NSMutableString)`, `urls(NSURL)`, `data(NSData, NSMutableData)` or other `NSDictionary` instances.\n\n> [AZURE.NOTE] The extra parameter is serialized in JSON. If you want to pass different objects than the ones described above, you must implement the following method in your class:\n>\n             -(NSString*)JSONRepresentation;\n>\n> The method should return a JSON representation of your object.\n\n### Example\n\n    NSMutableDictionary* extras = [NSMutableDictionary dictionaryWithCapacity:2];\n    [extras setObject:[NSNumber numberWithInt:123] forKey:@\"video_id\"];\n    [extras setObject:@\"http://foobar.com/blog\" forKey:@\"ref_click\"];\n    [[EngagementAgent shared] sendEvent:@\"video_clicked\" extras:extras];\n\n### Limits\n\n#### Keys\n\nEach key in the `NSDictionary` must match the following regular expression:\n\n`^[a-zA-Z][a-zA-Z_0-9]*`\n\nIt means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).\n\n#### Size\n\nExtras are limited to **1024** characters per call (once encoded in JSON by the Engagement agent).\n\nIn the previous example, the JSON sent to the server is 58 characters long:\n\n    {\"ref_click\":\"http:\\/\\/foobar.com\\/blog\",\"video_id\":\"123\"}\n\n##Reporting Application Information\n\nYou can manually report tracking information (or any other application specific information) using the `sendAppInfo:` function.\n\nNote that these information can be sent incrementally: only the latest value for a given key will be kept for a given device.\n\nLike event extras, the `NSDictionary` class is used to abstract application information, note that arrays or sub-dictionaries will be treated as flat strings (using JSON serialization).\n\n**Example:**\n\n    NSMutableDictionary* appInfo = [NSMutableDictionary dictionaryWithCapacity:2];\n    [appInfo setObject:@\"female\" forKey:@\"gender\"];\n    [appInfo setObject:@\"1983-12-07\" forKey:@\"birthdate\"]; // December 7th 1983\n    [[EngagementAgent shared] sendAppInfo:appInfo];\n\n### Limits\n\n#### Keys\n\nEach key in the `NSDictionary` must match the following regular expression:\n\n`^[a-zA-Z][a-zA-Z_0-9]*`\n\nIt means that keys must start with at least one letter, followed by letters, digits or underscores (\\_).\n\n#### Size\n\nApplication information are limited to **1024** characters per call (once encoded in JSON by the Engagement agent).\n\nIn the previous example, the JSON sent to the server is 44 characters long:\n\n    {\"birthdate\":\"1983-12-07\",\"gender\":\"female\"}\n\ntest\n"
}