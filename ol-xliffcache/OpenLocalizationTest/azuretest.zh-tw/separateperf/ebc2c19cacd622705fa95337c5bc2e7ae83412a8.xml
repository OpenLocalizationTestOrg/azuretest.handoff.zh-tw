{
  "nodes": [
    {
      "content": "Register the current user for push notifications by using Web API | Microsoft Azure",
      "pos": [
        27,
        110
      ]
    },
    {
      "content": "Learn how to request push notification registration in an iOS app with Azure Notification Hubs when registeration is performed by ASP.NET Web API.",
      "pos": [
        129,
        275
      ]
    },
    {
      "content": "Register the current user for push notifications by using ASP.NET",
      "pos": [
        595,
        660
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        664,
        680
      ]
    },
    {
      "content": "Windows Store C",
      "pos": [
        684,
        699
      ]
    },
    {
      "content": "iOS",
      "pos": [
        781,
        784
      ]
    },
    {
      "content": "Overview",
      "pos": [
        857,
        865
      ]
    },
    {
      "content": "This topic shows you how to request push notification registration with Azure Notification Hubs when registration is performed by ASP.NET Web API.",
      "pos": [
        867,
        1013
      ]
    },
    {
      "content": "This topic extends the tutorial [Notify users with Notification Hubs].",
      "pos": [
        1014,
        1084
      ]
    },
    {
      "content": "You must have already completed the required steps in that tutorial to create the authenticated mobile service.",
      "pos": [
        1085,
        1196
      ]
    },
    {
      "content": "For more information on the notify users scenario, see [Notify users with Notification Hubs].",
      "pos": [
        1197,
        1290
      ]
    },
    {
      "content": "Update your app",
      "pos": [
        1294,
        1309
      ]
    },
    {
      "content": "In your MainStoryboard_iPhone.storyboard, add the following components from the object library:",
      "pos": [
        1316,
        1411
      ]
    },
    {
      "pos": [
        1419,
        1467
      ],
      "content": "<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>: \"Push to User with Notification Hubs\""
    },
    {
      "pos": [
        1474,
        1501
      ],
      "content": "<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>: \"InstallationId\""
    },
    {
      "pos": [
        1508,
        1525
      ],
      "content": "<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>: \"User\""
    },
    {
      "pos": [
        1532,
        1554
      ],
      "content": "<bpt id=\"p1\">**</bpt>Text Field<ept id=\"p1\">**</ept>: \"User\""
    },
    {
      "pos": [
        1561,
        1582
      ],
      "content": "<bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept>: \"Password\""
    },
    {
      "pos": [
        1589,
        1615
      ],
      "content": "<bpt id=\"p1\">**</bpt>Text Field<ept id=\"p1\">**</ept>: \"Password\""
    },
    {
      "pos": [
        1622,
        1641
      ],
      "content": "<bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept>: \"Login\""
    },
    {
      "content": "At this point, your storyboard looks like the following:",
      "pos": [
        1647,
        1703
      ]
    },
    {
      "pos": [
        1720,
        1916
      ],
      "content": "In the assistant editor, create outlets for all the switched controls and call them, connect the text fields with the View Controller (delegate), and create an <bpt id=\"p1\">**</bpt>Action<ept id=\"p1\">**</ept> for the <bpt id=\"p2\">**</bpt>login<ept id=\"p2\">**</ept> button."
    },
    {
      "content": "Your BreakingNewsViewController.h file should now contain the following code:",
      "pos": [
        1934,
        2011
      ]
    },
    {
      "pos": [
        2258,
        2375
      ],
      "content": "Create a class named <bpt id=\"p1\">**</bpt>DeviceInfo<ept id=\"p1\">**</ept>, and copy the following code into the interface section of the file DeviceInfo.h:"
    },
    {
      "content": "Copy the following code in the implementation section of the DeviceInfo.m file:",
      "pos": [
        2498,
        2577
      ]
    },
    {
      "content": "In PushToUserAppDelegate.h, add the following property singleton:",
      "pos": [
        4029,
        4094
      ]
    },
    {
      "pos": [
        4162,
        4261
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>didFinishLaunchingWithOptions<ept id=\"p1\">**</ept> method in PushToUserAppDelegate.m, add the following code:"
    },
    {
      "content": "The first line initializes the <bpt id=\"p1\">**</bpt>DeviceInfo<ept id=\"p1\">**</ept> singleton.",
      "pos": [
        4497,
        4553
      ]
    },
    {
      "content": "The second line starts the registration for push notifications, which is already present is you have already completed the [Get Started with Notification Hubs] tutorial.",
      "pos": [
        4554,
        4723
      ]
    },
    {
      "pos": [
        4728,
        4877
      ],
      "content": "In PushToUserAppDelegate.m, implement the method <bpt id=\"p1\">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id=\"p1\">**</ept> in your AppDelegate and add the following code:"
    },
    {
      "content": "This sets the device token for the request.",
      "pos": [
        4935,
        4978
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> At this point, there should not be any other code in this method.",
      "pos": [
        4986,
        5064
      ]
    },
    {
      "content": "If you already have a call to the <bpt id=\"p1\">**</bpt>registerNativeWithDeviceToken<ept id=\"p1\">**</ept> method that was added when you completed the <bpt id=\"p2\">[</bpt>Get Started with Notification Hubs<ept id=\"p2\">](/manage/services/notification-hubs/get-started-notification-hubs-ios/%20target=\"_blank\")</ept> tutorial, you must comment-out or remove that call.",
      "pos": [
        5065,
        5355
      ]
    },
    {
      "content": "In the PushToUserAppDelegate.m file, add the following handler method:",
      "pos": [
        5361,
        5431
      ]
    },
    {
      "content": "This method displays an alert in the UI when your app receives notifications while it is running.",
      "pos": [
        5892,
        5989
      ]
    },
    {
      "content": "Open the PushToUserViewController.m file, and return the keyboard in the following implementation:",
      "pos": [
        5994,
        6092
      ]
    },
    {
      "pos": [
        6345,
        6462
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>viewDidLoad<ept id=\"p1\">**</ept> method in the PushToUserViewController.m file, initialize the installationId label as follows:"
    },
    {
      "content": "Add the following properties in interface in PushToUserViewController.m:",
      "pos": [
        6646,
        6718
      ]
    },
    {
      "content": "Then, add the following implementation:",
      "pos": [
        6840,
        6879
      ]
    },
    {
      "pos": [
        8682,
        8757
      ],
      "content": "Copy the following code into the <bpt id=\"p1\">**</bpt>login<ept id=\"p1\">**</ept> handler method created by XCode:"
    },
    {
      "content": "This method gets both an installation ID and channel for push notifications and sends it, along with the device type, to the authenticated Web API method that creates a registration in Notification Hubs.",
      "pos": [
        10850,
        11053
      ]
    },
    {
      "content": "This Web API was defined in [Notify users with Notification Hubs].",
      "pos": [
        11054,
        11120
      ]
    },
    {
      "content": "Now that the client app has been updated, return to the [Notify users with Notification Hubs] and update the mobile service to send notifications by using Notification Hubs.",
      "pos": [
        11122,
        11295
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Register the current user for push notifications by using Web API | Microsoft Azure\"\n    description=\"Learn how to request push notification registration in an iOS app with Azure Notification Hubs when registeration is performed by ASP.NET Web API.\"\n    services=\"notification-hubs\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"article\"\n    ms.date=\"06/16/2015\"\n    ms.author=\"wesmc\"/>\n# Register the current user for push notifications by using ASP.NET\n\n> [AZURE.SELECTOR]\n- [Windows Store C#](notification-hubs-windows-store-aspnet-register-user-push-notifications.md)\n- [iOS](notification-hubs-ios-aspnet-register-user-push-notifications.md)\n\n\n\n##Overview\n\nThis topic shows you how to request push notification registration with Azure Notification Hubs when registration is performed by ASP.NET Web API. This topic extends the tutorial [Notify users with Notification Hubs]. You must have already completed the required steps in that tutorial to create the authenticated mobile service. For more information on the notify users scenario, see [Notify users with Notification Hubs].\n\n##Update your app  \n\n1. In your MainStoryboard_iPhone.storyboard, add the following components from the object library:\n\n    + **Label**: \"Push to User with Notification Hubs\"\n    + **Label**: \"InstallationId\"\n    + **Label**: \"User\"\n    + **Text Field**: \"User\"\n    + **Label**: \"Password\"\n    + **Text Field**: \"Password\"\n    + **Button**: \"Login\"\n\n    At this point, your storyboard looks like the following:\n\n    ![][0]\n\n2. In the assistant editor, create outlets for all the switched controls and call them, connect the text fields with the View Controller (delegate), and create an **Action** for the **login** button.\n\n    ![][1]\n\n    Your BreakingNewsViewController.h file should now contain the following code:\n\n        @property (weak, nonatomic) IBOutlet UILabel *installationId;\n        @property (weak, nonatomic) IBOutlet UITextField *User;\n        @property (weak, nonatomic) IBOutlet UITextField *Password;\n\n        - (IBAction)login:(id)sender;\n\n5. Create a class named **DeviceInfo**, and copy the following code into the interface section of the file DeviceInfo.h:\n\n        @property (readonly, nonatomic) NSString* installationId;\n        @property (nonatomic) NSData* deviceToken;\n\n6. Copy the following code in the implementation section of the DeviceInfo.m file:\n\n            @synthesize installationId = _installationId;\n\n            - (id)init {\n                if (!(self = [super init]))\n                    return nil;\n\n                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n                _installationId = [defaults stringForKey:@\"PushToUserInstallationId\"];\n                if(!_installationId) {\n                    CFUUIDRef newUUID = CFUUIDCreate(kCFAllocatorDefault);\n                    _installationId = (__bridge_transfer NSString *)CFUUIDCreateString(kCFAllocatorDefault, newUUID);\n                    CFRelease(newUUID);\n\n                    //store the install ID so we don't generate a new one next time\n                    [defaults setObject:_installationId forKey:@\"PushToUserInstallationId\"];\n                    [defaults synchronize];\n                }\n\n                return self;\n            }\n\n            - (NSString*)getDeviceTokenInHex {\n                const unsigned *tokenBytes = [[self deviceToken] bytes];\n                NSString *hexToken = [NSString stringWithFormat:@\"%08X%08X%08X%08X%08X%08X%08X%08X\",\n                                      ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                                      ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                                      ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n                return hexToken;\n            }\n\n7. In PushToUserAppDelegate.h, add the following property singleton:\n\n        @property (strong, nonatomic) DeviceInfo* deviceInfo;\n\n8. In the **didFinishLaunchingWithOptions** method in PushToUserAppDelegate.m, add the following code:\n\n        self.deviceInfo = [[DeviceInfo alloc] init];\n\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\n\n    The first line initializes the **DeviceInfo** singleton. The second line starts the registration for push notifications, which is already present is you have already completed the [Get Started with Notification Hubs] tutorial.\n\n9. In PushToUserAppDelegate.m, implement the method **didRegisterForRemoteNotificationsWithDeviceToken** in your AppDelegate and add the following code:\n\n        self.deviceInfo.deviceToken = deviceToken;\n\n    This sets the device token for the request.\n\n    > [AZURE.NOTE] At this point, there should not be any other code in this method. If you already have a call to the **registerNativeWithDeviceToken** method that was added when you completed the [Get Started with Notification Hubs](/manage/services/notification-hubs/get-started-notification-hubs-ios/%20target=\"_blank\") tutorial, you must comment-out or remove that call.\n\n10. In the PushToUserAppDelegate.m file, add the following handler method:\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:\n                                  [userInfo objectForKey:@\"inAppMessage\"] delegate:nil cancelButtonTitle:\n                                  @\"OK\" otherButtonTitles:nil, nil];\n            [alert show];\n        }\n\n     This method displays an alert in the UI when your app receives notifications while it is running.\n\n9. Open the PushToUserViewController.m file, and return the keyboard in the following implementation:\n\n        - (BOOL)textFieldShouldReturn:(UITextField *)theTextField {\n            if (theTextField == self.User || theTextField == self.Password) {\n                [theTextField resignFirstResponder];\n            }\n            return YES;\n        }\n\n9. In the **viewDidLoad** method in the PushToUserViewController.m file, initialize the installationId label as follows:\n\n        DeviceInfo* deviceInfo = [(PushToUserAppDelegate*)[[UIApplication sharedApplication]delegate] deviceInfo];\n        Self.installationId.text = deviceInfo.installationId;\n\n10. Add the following properties in interface in PushToUserViewController.m:\n\n        @property (readonly) NSOperationQueue* downloadQueue;\n        - (NSString*)base64forData:(NSData*)theData;\n\n11. Then, add the following implementation:\n\n            - (NSOperationQueue *)downloadQueue {\n                if (!_downloadQueue) {\n                    _downloadQueue = [[NSOperationQueue alloc] init];\n                    _downloadQueue.name = @\"Download Queue\";\n                    _downloadQueue.maxConcurrentOperationCount = 1;\n                }\n                return _downloadQueue;\n            }\n\n            // base64 encoding\n            - (NSString*)base64forData:(NSData*)theData\n            {\n                const uint8_t* input = (const uint8_t*)[theData bytes];\n                NSInteger length = [theData length];\n\n                static char table[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];\n                uint8_t* output = (uint8_t*)data.mutableBytes;\n\n                NSInteger i;\n                for (i=0; i < length; i += 3) {\n                    NSInteger value = 0;\n                    NSInteger j;\n                    for (j = i; j < (i + 3); j++) {\n                        value <<= 8;\n\n                        if (j < length) {\n                            value |= (0xFF & input[j]);\n                        }\n                    }\n\n                    NSInteger theIndex = (i / 3) * 4;\n                    output[theIndex + 0] =                    table[(value >> 18) & 0x3F];\n                    output[theIndex + 1] =                    table[(value >> 12) & 0x3F];\n                    output[theIndex + 2] = (i + 1) < length ? table[(value >> 6)  & 0x3F] : '=';\n                    output[theIndex + 3] = (i + 2) < length ? table[(value >> 0)  & 0x3F] : '=';\n                }\n\n                return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];\n            }\n\n\n12. Copy the following code into the **login** handler method created by XCode:\n\n            DeviceInfo* deviceInfo = [(PushToUserAppDelegate*)[[UIApplication sharedApplication]delegate] deviceInfo];\n\n            // build JSON\n            NSString* json = [NSString stringWithFormat:@\"{\\\"platform\\\":\\\"ios\\\", \\\"instId\\\":\\\"%@\\\", \\\"deviceToken\\\":\\\"%@\\\"}\", deviceInfo.installationId, [deviceInfo getDeviceTokenInHex]];\n\n            // build auth string\n            NSString* authString = [NSString stringWithFormat:@\"%@:%@\", self.User.text, self.Password.text];\n\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"http://nhnotifyuser.azurewebsites.net/api/register\"]];\n            [request setHTTPMethod:@\"POST\"];\n            [request setHTTPBody:[json dataUsingEncoding:NSUTF8StringEncoding]];\n            [request addValue:[@([json lengthOfBytesUsingEncoding:NSUTF8StringEncoding]) description] forHTTPHeaderField:@\"Content-Length\"];\n            [request addValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];\n            [request addValue:[NSString stringWithFormat:@\"Basic %@\",[self base64forData:[authString dataUsingEncoding:NSUTF8StringEncoding]]] forHTTPHeaderField:@\"Authorization\"];\n\n            // connect with POST\n            [NSURLConnection sendAsynchronousRequest:request queue:[self downloadQueue] completionHandler:^(NSURLResponse* response, NSData* data, NSError* error) {\n                // add UIAlert depending on response.\n                if (error != nil) {\n                    NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n                    if ([httpResponse statusCode] == 200) {\n                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Back-end registration\" message:@\"Registration successful\" delegate:nil cancelButtonTitle: @\"OK\" otherButtonTitles:nil, nil];\n                        [alert show];\n                    } else {\n                        NSLog(@\"status: %ld\", (long)[httpResponse statusCode]);\n                    }\n                } else {\n                    NSLog(@\"error: %@\", error);\n                }\n            }];\n\n    This method gets both an installation ID and channel for push notifications and sends it, along with the device type, to the authenticated Web API method that creates a registration in Notification Hubs. This Web API was defined in [Notify users with Notification Hubs].\n\nNow that the client app has been updated, return to the [Notify users with Notification Hubs] and update the mobile service to send notifications by using Notification Hubs.\n\n<!-- Anchors. -->\n\n<!-- Images. -->\n[0]: ./media/notification-hubs-ios-aspnet-register-user-push-notifications/notification-hub-user-aspnet-ios1.png\n[1]: ./media/notification-hubs-ios-aspnet-register-user-push-notifications/notification-hub-user-aspnet-ios2.png\n\n<!-- URLs. -->\n[Notify users with Notification Hubs]: /manage/services/notification-hubs/notify-users-aspnet\n\n[Azure Management Portal]: https://manage.windowsazure.com/\n[Get Started with Notification Hubs]: /manage/services/notification-hubs/get-started-notification-hubs-ios\n"
}