<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Embedding a MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js</source>
          <target state="new">Embedding a MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to embed an MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js.</source>
          <target state="new">This topic demonstrates how to embed an MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Embedding a MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js</source>
          <target state="new">Embedding a MPEG-DASH Adaptive Streaming Video in an HTML5 Application with DASH.js</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>MPEG-DASH is an ISO standard for the adaptive streaming of video content, which offers significant benefits for those who wish to deliver high-quality, adaptive video streaming output.</source>
          <target state="new">MPEG-DASH is an ISO standard for the adaptive streaming of video content, which offers significant benefits for those who wish to deliver high-quality, adaptive video streaming output.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With MPEG-DASH, the video stream will automatically drop to a lower definition when the network becomes congested.</source>
          <target state="new">With MPEG-DASH, the video stream will automatically drop to a lower definition when the network becomes congested.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This reduces the likelihood of the viewer seeing a "paused" video while the player downloads the next few seconds to play (aka buffering).</source>
          <target state="new">This reduces the likelihood of the viewer seeing a "paused" video while the player downloads the next few seconds to play (aka buffering).</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As network congestion reduces, the video player will in turn return to a higher quality stream.</source>
          <target state="new">As network congestion reduces, the video player will in turn return to a higher quality stream.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This ability to adapt the bandwidth required also results in a faster start time for video.</source>
          <target state="new">This ability to adapt the bandwidth required also results in a faster start time for video.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>That means that the first few seconds can be played in a fast-to-download lower quality segment and then step up to a higher quality once sufficient content has been buffered.</source>
          <target state="new">That means that the first few seconds can be played in a fast-to-download lower quality segment and then step up to a higher quality once sufficient content has been buffered.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Dash.js is an open source MPEG-DASH video player written in JavaScript.</source>
          <target state="new">Dash.js is an open source MPEG-DASH video player written in JavaScript.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Its goal is to provide a robust, cross-platform player that can be freely reused in applications that require video playback.</source>
          <target state="new">Its goal is to provide a robust, cross-platform player that can be freely reused in applications that require video playback.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It provides MPEG-DASH playback in any browser that supports the W3C Media Source Extensions (MSE), today that is Chrome and IE11 (other browsers have indicated their intent to support MSE).</source>
          <target state="new">It provides MPEG-DASH playback in any browser that supports the W3C Media Source Extensions (MSE), today that is Chrome and IE11 (other browsers have indicated their intent to support MSE).</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about DASH.js, js see the GitHub dash.js repository.</source>
          <target state="new">For more information about DASH.js, js see the GitHub dash.js repository.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creating a browser-based streaming video player</source>
          <target state="new">Creating a browser-based streaming video player</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To create a simple web page that displays a video player with the expected controls such a play, pause, rewind etc., you will need to:</source>
          <target state="new">To create a simple web page that displays a video player with the expected controls such a play, pause, rewind etc., you will need to:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create an HTML page</source>
          <target state="new">Create an HTML page</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Add the video tag</source>
          <target state="new">Add the video tag</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add the dash.js player</source>
          <target state="new">Add the dash.js player</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initialize the player</source>
          <target state="new">Initialize the player</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add some CSS style</source>
          <target state="new">Add some CSS style</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>View the results in a browser that implements MSE</source>
          <target state="new">View the results in a browser that implements MSE</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializing the player can be completed in just a handful of lines of JavaScript code.</source>
          <target state="new">Initializing the player can be completed in just a handful of lines of JavaScript code.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using dash.js, it really is that simple to embed MPEG-DASH video in your browser based applications.</source>
          <target state="new">Using dash.js, it really is that simple to embed MPEG-DASH video in your browser based applications.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creating the HTML Page</source>
          <target state="new">Creating the HTML Page</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first step is to create a standard HTML page containing the</source>
          <target state="new">The first step is to create a standard HTML page containing the</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>element, save this file as basicPlayer.html, as the following example illustrates:</source>
          <target state="new">element, save this file as basicPlayer.html, as the following example illustrates:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adding the DASH.js Player</source>
          <target state="new">Adding the DASH.js Player</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To add the dash.js reference implementation to the application, you’ll need to grab the dash.all.js file from the 1.0 release of dash.js project.</source>
          <target state="new">To add the dash.js reference implementation to the application, you’ll need to grab the dash.all.js file from the 1.0 release of dash.js project.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This should be saved in the JavaScript folder of your application.</source>
          <target state="new">This should be saved in the JavaScript folder of your application.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This file is a convenience file that pulls together all the necessary dash.js code into a single file.</source>
          <target state="new">This file is a convenience file that pulls together all the necessary dash.js code into a single file.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you have a look around the dash.js repository, you will find the individual files, test code and much more, but if all you want to do is use dash.js, then the dash.all.js file is what you need.</source>
          <target state="new">If you have a look around the dash.js repository, you will find the individual files, test code and much more, but if all you want to do is use dash.js, then the dash.all.js file is what you need.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To add the dash.js player to your applications, add a script tag to the head section of basicPlayer.html:</source>
          <target state="new">To add the dash.js player to your applications, add a script tag to the head section of basicPlayer.html:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, create a function to initialize the player when the page loads.</source>
          <target state="new">Next, create a function to initialize the player when the page loads.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the following script after the line in which you load dash.all.js:</source>
          <target state="new">Add the following script after the line in which you load dash.all.js:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This function first creates a DashContext.</source>
          <target state="new">This function first creates a DashContext.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is used to configure the application for a specific runtime environment.</source>
          <target state="new">This is used to configure the application for a specific runtime environment.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>From a technical point of view, it defines the classes that the dependency injection framework should use when constructing the application.</source>
          <target state="new">From a technical point of view, it defines the classes that the dependency injection framework should use when constructing the application.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In most cases, you will use Dash.di.DashContext.</source>
          <target state="new">In most cases, you will use Dash.di.DashContext.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next, instantiate the primary class of the dash.js framework, MediaPlayer.</source>
          <target state="new">Next, instantiate the primary class of the dash.js framework, MediaPlayer.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This class contains the core methods needed such as play and pause, manages the relationship with the video element and also manages the interpretation of the Media Presentation Description (MPD) file which describes the video to be played.</source>
          <target state="new">This class contains the core methods needed such as play and pause, manages the relationship with the video element and also manages the interpretation of the Media Presentation Description (MPD) file which describes the video to be played.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The startup() function of the MediaPlayer class is called to ensure that the player is ready to play video.</source>
          <target state="new">The startup() function of the MediaPlayer class is called to ensure that the player is ready to play video.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Amongst other things this function ensures that all the necessary classes (as defined by the context) have been loaded.</source>
          <target state="new">Amongst other things this function ensures that all the necessary classes (as defined by the context) have been loaded.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Once the player is ready, you can attach the video element to it using the attachView() function.</source>
          <target state="new">Once the player is ready, you can attach the video element to it using the attachView() function.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This enables the MediaPlayer to inject the video stream into the element and also control playback as necessary.</source>
          <target state="new">This enables the MediaPlayer to inject the video stream into the element and also control playback as necessary.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Pass the URL of the MPD file to the MediaPlayer so that it knows about the video it is expected to play.The setupVideo() function just created will need to be executed once the page has fully loaded.</source>
          <target state="new">Pass the URL of the MPD file to the MediaPlayer so that it knows about the video it is expected to play.The setupVideo() function just created will need to be executed once the page has fully loaded.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Do this by using the onload event of the body element.</source>
          <target state="new">Do this by using the onload event of the body element.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Change your</source>
          <target state="new">Change your</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>element to:</source>
          <target state="new">element to:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Finally, set the size of the video element using CSS.</source>
          <target state="new">Finally, set the size of the video element using CSS.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In an adaptive streaming environment, this is especially important because the size of the video being played may change as playback adapts to changing network conditions.</source>
          <target state="new">In an adaptive streaming environment, this is especially important because the size of the video being played may change as playback adapts to changing network conditions.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this simple demo simply force the video element to be 80% of the available browser window by adding the following CSS to the head section of the page:</source>
          <target state="new">In this simple demo simply force the video element to be 80% of the available browser window by adding the following CSS to the head section of the page:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Playing a Video</source>
          <target state="new">Playing a Video</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To play a video, point your browser at the basicPlayback.html file and click play on the video player displayed.</source>
          <target state="new">To play a video, point your browser at the basicPlayback.html file and click play on the video player displayed.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Develop video player applications</source>
          <target state="new">Develop video player applications</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GitHub dash.js repository<ept id="p1">](https://github.com/Dash-Industry-Forum/dash.js)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>GitHub dash.js repository<ept id="p1">](https://github.com/Dash-Industry-Forum/dash.js)</ept></target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ab5c18334b598b56ce2f2bb15b60b9e3c4e0eaf</xliffext:olfilehash>
  </header>
</xliff>