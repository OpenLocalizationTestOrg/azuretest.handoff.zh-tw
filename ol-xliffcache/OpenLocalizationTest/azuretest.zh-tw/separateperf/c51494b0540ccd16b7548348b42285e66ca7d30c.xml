{
  "nodes": [
    {
      "content": "Azure SQL Database - elastic database tools",
      "pos": [
        27,
        70
      ]
    },
    {
      "content": "Software as a Service (SaaS) developers can easily create elastic, scalable databases in the cloud using these tools",
      "pos": [
        89,
        205
      ]
    },
    {
      "content": "Elastic Database features overview",
      "pos": [
        509,
        543
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Elastic Database<ept id=\"p1\">**</ept> features enables you to use the virtually unlimited database resources of <bpt id=\"p2\">**</bpt>Azure SQL Database<ept id=\"p2\">**</ept> to create solutions for transactional workloads, and especially Software as a Service (SaaS) applications.",
      "pos": [
        545,
        769
      ]
    },
    {
      "content": "Elastic Database features are composed of the following:",
      "pos": [
        770,
        826
      ]
    },
    {
      "content": "Elastic Database tools: These two tools simplify development and management of sharded database solutions.",
      "pos": [
        830,
        936
      ]
    },
    {
      "content": "The tools are: the <bpt id=\"p1\">[</bpt>Elastic Database client library<ept id=\"p1\">](sql-database-elastic-database-client-library.md)</ept> and the <bpt id=\"p2\">[</bpt>Elastic Database split-merge tool<ept id=\"p2\">](sql-database-elastic-scale-overview-split-and-merge.md)</ept>.",
      "pos": [
        937,
        1139
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Elastic Database pools<ept id=\"p1\">](sql-database-elastic-pool-guidance.md)</ept> (preview): A pool is a collection of databases to which you can add or remove databases at any time.",
      "pos": [
        1143,
        1307
      ]
    },
    {
      "content": "The databases in the pool share a fixed amount of resources (known as database throughput units, or DTUs).",
      "pos": [
        1308,
        1414
      ]
    },
    {
      "content": "You pay a fixed price for the resources, which enables you to easily calculate costs while managing performance.",
      "pos": [
        1415,
        1527
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Elastic Database jobs<ept id=\"p1\">](sql-database-elastic-jobs-overview.md)</ept> (preview): Use jobs to manage large numbers of Azure SQL databases.",
      "pos": [
        1531,
        1661
      ]
    },
    {
      "content": "Easily perform administrative operations such as schema changes, credentials management, reference data updates, performance data collection or tenant (customer) telemetry collection using jobs.",
      "pos": [
        1662,
        1856
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>Elastic Database query<ept id=\"p1\">](sql-database-elastic-query-overview.md)</ept> (preview): Enables you to run a Transact-SQL query that spans multiple databases.",
      "pos": [
        1859,
        2005
      ]
    },
    {
      "content": "This enables connection to reporting tools such as Excel, PowerBI, Tableau, etc.",
      "pos": [
        2006,
        2086
      ]
    },
    {
      "pos": [
        2088,
        2217
      ],
      "content": "The graphic below shows an architecture that includes the <bpt id=\"p1\">**</bpt>Elastic Database features<ept id=\"p1\">**</ept> in relation to a collection of databases."
    },
    {
      "content": "Elastic Database tools",
      "pos": [
        2222,
        2244
      ]
    },
    {
      "pos": [
        2250,
        2356
      ],
      "content": "For a printable version of this graphic, go to <bpt id=\"p1\">[</bpt>Elastic database overview download<ept id=\"p1\">](http://aka.ms/axmybc)</ept>."
    },
    {
      "content": "In this graphic, colors of the database represent schemas.",
      "pos": [
        2358,
        2416
      ]
    },
    {
      "content": "Databases with the same color share the same schemas.",
      "pos": [
        2417,
        2470
      ]
    },
    {
      "pos": [
        2475,
        2556
      ],
      "content": "A set of <bpt id=\"p1\">**</bpt>Azure SQL databases<ept id=\"p1\">**</ept> are hosted on Azure using sharding architecture."
    },
    {
      "pos": [
        2561,
        2631
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Elastic Database client library<ept id=\"p1\">**</ept> is used to manage a shard set."
    },
    {
      "content": "A subset of the databases are put into an <bpt id=\"p1\">**</bpt>Elastic Database pool<ept id=\"p1\">**</ept>.",
      "pos": [
        2635,
        2703
      ]
    },
    {
      "content": "(See <bpt id=\"p1\">[</bpt>Tame explosive growth with elastic databases<ept id=\"p1\">](sql-database-elastic-pool.md)</ept>).",
      "pos": [
        2704,
        2787
      ]
    },
    {
      "pos": [
        2792,
        2861
      ],
      "content": "An <bpt id=\"p1\">**</bpt>Elastic Database job<ept id=\"p1\">**</ept> runs T-SQL scripts against all databases."
    },
    {
      "pos": [
        2865,
        2937
      ],
      "content": "The <bpt id=\"p1\">**</bpt>split-merge tool<ept id=\"p1\">**</ept> is used to move data from one shard to another."
    },
    {
      "pos": [
        2941,
        3042
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Elastic Database query<ept id=\"p1\">**</ept> allows you to write a query that spans all databases in the shard set."
    },
    {
      "content": "Promises and challenges",
      "pos": [
        3049,
        3072
      ]
    },
    {
      "content": "Achieving elasticity and scale for cloud applications has been straightforward for compute and blob storage--simply add or subtract units.",
      "pos": [
        3074,
        3212
      ]
    },
    {
      "content": "But it has remained a challenge for stateful data processing in relational databases.",
      "pos": [
        3213,
        3298
      ]
    },
    {
      "content": "We have seen these challenges emerge most prominently in the two following scenarios:",
      "pos": [
        3299,
        3384
      ]
    },
    {
      "content": "Growing and shrinking capacity for the relational database part of your workload.",
      "pos": [
        3388,
        3469
      ]
    },
    {
      "content": "Managing hotspots that may arise affecting a specific subset of data – such as a particularly busy end-customer (tenant).",
      "pos": [
        3472,
        3593
      ]
    },
    {
      "content": "Traditionally, scenarios like these have been addressed by investing in larger-scale database servers to support the application.",
      "pos": [
        3595,
        3724
      ]
    },
    {
      "content": "However, this option is limited in the cloud where all processing happens on predefined commodity hardware.",
      "pos": [
        3725,
        3832
      ]
    },
    {
      "content": "Instead, distributing data and processing across many identically-structured databases (a scale-out pattern known as \"sharding\") provides an alternative to traditional scale-up approaches both in terms of cost and elasticity.",
      "pos": [
        3833,
        4058
      ]
    },
    {
      "content": "Horizontal and vertical scaling",
      "pos": [
        4063,
        4094
      ]
    },
    {
      "content": "The figure below shows the horizontal and vertical dimensions of scaling, which are the basic ways the elastic databases can be scaled.",
      "pos": [
        4096,
        4231
      ]
    },
    {
      "content": "Horizontal versus Vertical Scaleout",
      "pos": [
        4235,
        4270
      ]
    },
    {
      "content": "Horizontal scaling refers to adding or removing databases in order to adjust capacity or overall performance.",
      "pos": [
        4276,
        4385
      ]
    },
    {
      "content": "This is also called “scaling out”.",
      "pos": [
        4386,
        4420
      ]
    },
    {
      "content": "Sharding, in which data is partitioned across a collection of identically structured databases, is a common way to implement horizontal scaling.",
      "pos": [
        4421,
        4565
      ]
    },
    {
      "content": "Vertical scaling refers to increasing or decreasing the performance level of an individual database—this is also known as “scaling up.”",
      "pos": [
        4569,
        4704
      ]
    },
    {
      "content": "Most cloud-scale database applications will use a combination of these two strategies.",
      "pos": [
        4706,
        4792
      ]
    },
    {
      "content": "For example, a Software as a Service application may use horizontal scaling to provision new end-customers and vertical scaling to allow each end-customer’s database to grow or shrink resources as needed by the workload.",
      "pos": [
        4793,
        5013
      ]
    },
    {
      "pos": [
        5017,
        5132
      ],
      "content": "Horizontal scaling is managed using the <bpt id=\"p1\">[</bpt>Elastic Database client library<ept id=\"p1\">](sql-database-elastic-client-overview.md)</ept>."
    },
    {
      "content": "Vertical scaling is accomplished using Azure PowerShell cmdlets to change the service tier, or by placing databases in an Elastic Database pool.",
      "pos": [
        5136,
        5280
      ]
    },
    {
      "content": "Single and multi-tenancy patterns",
      "pos": [
        5285,
        5318
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>Sharding<ept id=\"p1\">*</ept> is a technique to distribute large amounts of identically-structured data across a number of independent databases.",
      "pos": [
        5320,
        5446
      ]
    },
    {
      "content": "It is especially popular with cloud developers who are creating Software as a Service (SAAS) offerings for end customers or businesses.",
      "pos": [
        5447,
        5582
      ]
    },
    {
      "content": "These end customers are often referred to as “tenants”.",
      "pos": [
        5583,
        5638
      ]
    },
    {
      "content": "Sharding may be required for any number of reasons:",
      "pos": [
        5639,
        5690
      ]
    },
    {
      "content": "The total amount of data is too large to fit within the constraints of a single database",
      "pos": [
        5696,
        5784
      ]
    },
    {
      "content": "The transaction throughput of the overall workload exceeds the capabilities of a single database",
      "pos": [
        5787,
        5883
      ]
    },
    {
      "content": "Tenants may require physical isolation from each other, so separate databases are needed for each tenant",
      "pos": [
        5886,
        5990
      ]
    },
    {
      "content": "Different sections of a database may need to reside in different geographies for compliance, performance or geopolitical reasons.",
      "pos": [
        5993,
        6122
      ]
    },
    {
      "content": "In other scenarios, such as ingestion of data from distributed devices, sharding can be used to fill a set of databases that are organized temporally.",
      "pos": [
        6124,
        6274
      ]
    },
    {
      "content": "For example, a separate database can be dedicated to each day or week.",
      "pos": [
        6275,
        6345
      ]
    },
    {
      "content": "In that case, the sharding key can be an integer representing the date (present in all rows of the sharded tables) and queries retrieving information for a date range must be routed by the application to the subset of databases covering the range in question.",
      "pos": [
        6346,
        6605
      ]
    },
    {
      "content": "Sharding works best when every transaction in an application can be restricted to a single value of a sharding key.",
      "pos": [
        6607,
        6722
      ]
    },
    {
      "content": "That ensures that all transactions will be local to a specific database.",
      "pos": [
        6723,
        6795
      ]
    },
    {
      "content": "Some applications use the simplest approach of creating a separate database for each tenant.",
      "pos": [
        6797,
        6889
      ]
    },
    {
      "content": "This is the <bpt id=\"p1\">**</bpt>single tenant sharding pattern<ept id=\"p1\">**</ept> that provides isolation, backup/restore ability and resource scaling at the granularity of the tenant.",
      "pos": [
        6890,
        7039
      ]
    },
    {
      "content": "With single tenant sharding, each database is associated with a specific tenant ID value (or customer key value), but that key need not always be present in the data itself.",
      "pos": [
        7040,
        7213
      ]
    },
    {
      "content": "It is the application’s responsibility to route each request to the appropriate database – and the client library can simplify this.",
      "pos": [
        7214,
        7346
      ]
    },
    {
      "content": "Single tenant versus multi-tenant",
      "pos": [
        7350,
        7383
      ]
    },
    {
      "content": "Others scenarios pack multiple tenants together into databases, rather than isolating them into separate databases.",
      "pos": [
        7389,
        7504
      ]
    },
    {
      "content": "This is a typical <bpt id=\"p1\">**</bpt>multi-tenant sharding pattern<ept id=\"p1\">**</ept> – and it may be driven by the fact that an application manages large numbers of very small tenants.",
      "pos": [
        7505,
        7656
      ]
    },
    {
      "content": "In multi-tenant sharding, the rows in the database tables are all designed to carry a key identifying the tenant ID or sharding key.",
      "pos": [
        7657,
        7789
      ]
    },
    {
      "content": "Again, the application tier is responsible for routing a tenant’s request to the appropriate database, and this can be supported by the elastic database client library.",
      "pos": [
        7790,
        7958
      ]
    },
    {
      "content": "In addition, row-level security can be used to filter which rows each tenant can access – for details, see <bpt id=\"p1\">[</bpt>Multi-tenant applications with elastic database tools and row-level security<ept id=\"p1\">](sql-database-elastic-tools-multi-tenant-row-level-security.md)</ept>.",
      "pos": [
        7959,
        8208
      ]
    },
    {
      "content": "Redistributing data among databases may be needed with the multi-tenant sharding pattern, and this is facilitated by the elastic database split-merge tool.",
      "pos": [
        8209,
        8364
      ]
    },
    {
      "content": "Move data from multiple to single-tenancy databases",
      "pos": [
        8370,
        8421
      ]
    },
    {
      "content": "When creating a SaaS application, it is typical to offer prospective customers a trial version of the software.",
      "pos": [
        8422,
        8533
      ]
    },
    {
      "content": "In this case, it is cost-effective to use a multi-tenant database for the data.",
      "pos": [
        8534,
        8613
      ]
    },
    {
      "content": "However, when a prospect becomes a customer, a single-tenant database is better since it provides better performance.",
      "pos": [
        8614,
        8731
      ]
    },
    {
      "content": "If the customer had created data during the trial period, use the <bpt id=\"p1\">[</bpt>split-merge tool<ept id=\"p1\">](sql-database-elastic-scale-overview-split-and-merge)</ept> to move the data from the multi-tenant to the new single-tenant database.",
      "pos": [
        8732,
        8943
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        8948,
        8958
      ]
    },
    {
      "pos": [
        8960,
        9105
      ],
      "content": "For a sample app that demonstrates the client library, see <bpt id=\"p1\">[</bpt>Get started with Elastic Datbabase tools<ept id=\"p1\">](sql-database-elastic-scale-get-started.md)</ept>."
    },
    {
      "pos": [
        9107,
        9232
      ],
      "content": "To use the split-merge tool, you must <bpt id=\"p1\">[</bpt>configure security<ept id=\"p1\">](sql-database-elastic-scale-split-merge-security-configuration,md)</ept>."
    },
    {
      "pos": [
        9235,
        9476
      ],
      "content": "To see the specifics of the Elastic Database pool, see <bpt id=\"p1\">[</bpt>Price and performance considerations for an elastic database pool<ept id=\"p1\">](sql-database-elastic-pool-guidance.md)</ept>, or create a new pool with the <bpt id=\"p2\">[</bpt>tutorial<ept id=\"p2\">](sql-database-elastic-pool-portal.md)</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure SQL Database - elastic database tools\"\n    description=\"Software as a Service (SaaS) developers can easily create elastic, scalable databases in the cloud using these tools\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    manager=\"jeffreyg\"\n    authors=\"ddove\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"sql-database\"\n    ms.workload=\"sql-database\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/27/2015\"\n    ms.author=\"sidneyh\"/>\n\n# Elastic Database features overview\n\n**Elastic Database** features enables you to use the virtually unlimited database resources of **Azure SQL Database** to create solutions for transactional workloads, and especially Software as a Service (SaaS) applications. Elastic Database features are composed of the following:\n\n* Elastic Database tools: These two tools simplify development and management of sharded database solutions. The tools are: the [Elastic Database client library](sql-database-elastic-database-client-library.md) and the [Elastic Database split-merge tool](sql-database-elastic-scale-overview-split-and-merge.md). \n* [Elastic Database pools](sql-database-elastic-pool-guidance.md) (preview): A pool is a collection of databases to which you can add or remove databases at any time. The databases in the pool share a fixed amount of resources (known as database throughput units, or DTUs). You pay a fixed price for the resources, which enables you to easily calculate costs while managing performance. \n* [Elastic Database jobs](sql-database-elastic-jobs-overview.md) (preview): Use jobs to manage large numbers of Azure SQL databases. Easily perform administrative operations such as schema changes, credentials management, reference data updates, performance data collection or tenant (customer) telemetry collection using jobs.\n* [Elastic Database query](sql-database-elastic-query-overview.md) (preview): Enables you to run a Transact-SQL query that spans multiple databases. This enables connection to reporting tools such as Excel, PowerBI, Tableau, etc.\n\nThe graphic below shows an architecture that includes the **Elastic Database features** in relation to a collection of databases. \n\n![Elastic Database tools][1]\n\nFor a printable version of this graphic, go to [Elastic database overview download](http://aka.ms/axmybc).\n\nIn this graphic, colors of the database represent schemas. Databases with the same color share the same schemas.\n\n1. A set of **Azure SQL databases** are hosted on Azure using sharding architecture. \n2. The **Elastic Database client library** is used to manage a shard set.\n3. A subset of the databases are put into an **Elastic Database pool**. (See [Tame explosive growth with elastic databases](sql-database-elastic-pool.md)). \n4. An **Elastic Database job** runs T-SQL scripts against all databases.\n5. The **split-merge tool** is used to move data from one shard to another.\n6. The **Elastic Database query** allows you to write a query that spans all databases in the shard set.\n  \n## Promises and challenges\n\nAchieving elasticity and scale for cloud applications has been straightforward for compute and blob storage--simply add or subtract units. But it has remained a challenge for stateful data processing in relational databases. We have seen these challenges emerge most prominently in the two following scenarios:\n\n* Growing and shrinking capacity for the relational database part of your workload.\n* Managing hotspots that may arise affecting a specific subset of data – such as a particularly busy end-customer (tenant).\n\nTraditionally, scenarios like these have been addressed by investing in larger-scale database servers to support the application. However, this option is limited in the cloud where all processing happens on predefined commodity hardware. Instead, distributing data and processing across many identically-structured databases (a scale-out pattern known as \"sharding\") provides an alternative to traditional scale-up approaches both in terms of cost and elasticity.\n\n## Horizontal and vertical scaling\n\nThe figure below shows the horizontal and vertical dimensions of scaling, which are the basic ways the elastic databases can be scaled.\n\n![Horizontal versus Vertical Scaleout][2]\n\nHorizontal scaling refers to adding or removing databases in order to adjust capacity or overall performance. This is also called “scaling out”. Sharding, in which data is partitioned across a collection of identically structured databases, is a common way to implement horizontal scaling.  \n\nVertical scaling refers to increasing or decreasing the performance level of an individual database—this is also known as “scaling up.”\n\nMost cloud-scale database applications will use a combination of these two strategies. For example, a Software as a Service application may use horizontal scaling to provision new end-customers and vertical scaling to allow each end-customer’s database to grow or shrink resources as needed by the workload.\n\n* Horizontal scaling is managed using the [Elastic Database client library](sql-database-elastic-client-overview.md).\n\n* Vertical scaling is accomplished using Azure PowerShell cmdlets to change the service tier, or by placing databases in an Elastic Database pool.\n\n## Single and multi-tenancy patterns\n\n*Sharding* is a technique to distribute large amounts of identically-structured data across a number of independent databases. It is especially popular with cloud developers who are creating Software as a Service (SAAS) offerings for end customers or businesses. These end customers are often referred to as “tenants”. Sharding may be required for any number of reasons:  \n\n* The total amount of data is too large to fit within the constraints of a single database\n* The transaction throughput of the overall workload exceeds the capabilities of a single database\n* Tenants may require physical isolation from each other, so separate databases are needed for each tenant\n* Different sections of a database may need to reside in different geographies for compliance, performance or geopolitical reasons.\n\nIn other scenarios, such as ingestion of data from distributed devices, sharding can be used to fill a set of databases that are organized temporally. For example, a separate database can be dedicated to each day or week. In that case, the sharding key can be an integer representing the date (present in all rows of the sharded tables) and queries retrieving information for a date range must be routed by the application to the subset of databases covering the range in question.\n\nSharding works best when every transaction in an application can be restricted to a single value of a sharding key. That ensures that all transactions will be local to a specific database.\n\nSome applications use the simplest approach of creating a separate database for each tenant. This is the **single tenant sharding pattern** that provides isolation, backup/restore ability and resource scaling at the granularity of the tenant. With single tenant sharding, each database is associated with a specific tenant ID value (or customer key value), but that key need not always be present in the data itself. It is the application’s responsibility to route each request to the appropriate database – and the client library can simplify this.\n\n![Single tenant versus multi-tenant][4]\n\nOthers scenarios pack multiple tenants together into databases, rather than isolating them into separate databases. This is a typical **multi-tenant sharding pattern** – and it may be driven by the fact that an application manages large numbers of very small tenants. In multi-tenant sharding, the rows in the database tables are all designed to carry a key identifying the tenant ID or sharding key. Again, the application tier is responsible for routing a tenant’s request to the appropriate database, and this can be supported by the elastic database client library. In addition, row-level security can be used to filter which rows each tenant can access – for details, see [Multi-tenant applications with elastic database tools and row-level security](sql-database-elastic-tools-multi-tenant-row-level-security.md). Redistributing data among databases may be needed with the multi-tenant sharding pattern, and this is facilitated by the elastic database split-merge tool.\n\n### Move data from multiple to single-tenancy databases\nWhen creating a SaaS application, it is typical to offer prospective customers a trial version of the software. In this case, it is cost-effective to use a multi-tenant database for the data. However, when a prospect becomes a customer, a single-tenant database is better since it provides better performance. If the customer had created data during the trial period, use the [split-merge tool](sql-database-elastic-scale-overview-split-and-merge) to move the data from the multi-tenant to the new single-tenant database.\n\n## Next steps\n\nFor a sample app that demonstrates the client library, see [Get started with Elastic Datbabase tools](sql-database-elastic-scale-get-started.md).\n\nTo use the split-merge tool, you must [configure security](sql-database-elastic-scale-split-merge-security-configuration,md). \n\nTo see the specifics of the Elastic Database pool, see [Price and performance considerations for an elastic database pool](sql-database-elastic-pool-guidance.md), or create a new pool with the [tutorial](sql-database-elastic-pool-portal.md).  \n\n[AZURE.INCLUDE [elastic-scale-include](../../includes/elastic-scale-include.md)]\n\n<!--Anchors-->\n<!--Image references-->\n[1]:./media/sql-database-elastic-scale-introduction/tools.png\n[2]:./media/sql-database-elastic-scale-introduction/h_versus_vert.png\n[3]:./media/sql-database-elastic-scale-introduction/overview.png\n[4]:./media/sql-database-elastic-scale-introduction/single_v_multi_tenant.png\n"
}