{
  "nodes": [
    {
      "content": "Schedule Backend Tasks with Scheduler | Microsoft Azure",
      "pos": [
        27,
        82
      ]
    },
    {
      "content": "Use the Azure Mobile Services Scheduler to schedule jobs for your mobile app.",
      "pos": [
        101,
        178
      ]
    },
    {
      "content": "Schedule recurring jobs in Mobile Services",
      "pos": [
        503,
        545
      ]
    },
    {
      "content": "[AZURE.SELECTOR-LIST (Platform | Backend)]",
      "pos": [
        549,
        591
      ]
    },
    {
      "content": "(Any | .NET)",
      "pos": [
        595,
        607
      ]
    },
    {
      "content": "(Any | Javascript)",
      "pos": [
        672,
        690
      ]
    },
    {
      "content": "This topic shows you how to use the job scheduler functionality in the Management Portal to define server script code that is executed based on a schedule that you define.",
      "pos": [
        738,
        909
      ]
    },
    {
      "content": "In this case, the script periodically check with a remote service, in this case Twitter, and stores the results in a new table.",
      "pos": [
        910,
        1037
      ]
    },
    {
      "content": "Some other periodic tasks that can be scheduled include:",
      "pos": [
        1038,
        1094
      ]
    },
    {
      "content": "Archiving old or duplicate data records.",
      "pos": [
        1098,
        1138
      ]
    },
    {
      "content": "Requesting and storing external data, such as tweets, RSS entries, and location information.",
      "pos": [
        1141,
        1233
      ]
    },
    {
      "content": "Processing or resizing stored images.",
      "pos": [
        1236,
        1273
      ]
    },
    {
      "content": "This tutorial shows you how to use the job scheduler to create a scheduled job that requests tweet data from Twitter and stores the tweets in a new Updates table.",
      "pos": [
        1275,
        1437
      ]
    },
    {
      "pos": [
        1441,
        1539
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"get-oauth-credentials\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Register for access to Twitter v1.1 APIs and store credentials"
    },
    {
      "pos": [
        1661,
        1716
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-table\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create the new Updates table"
    },
    {
      "content": "Next, you need to create a new table in which to store tweets.",
      "pos": [
        1718,
        1780
      ]
    },
    {
      "pos": [
        1785,
        1882
      ],
      "content": "In the Management Portal, click the <bpt id=\"p1\">**</bpt>Data<ept id=\"p1\">**</ept> tab for your mobile service, then click <bpt id=\"p2\">**</bpt>+Create<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        1887,
        1949
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Table name<ept id=\"p1\">**</ept> type <bpt id=\"p2\">_</bpt>Updates<ept id=\"p2\">_</ept>, then click the check button."
    },
    {
      "pos": [
        1953,
        2001
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-job\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Create a new scheduled job"
    },
    {
      "content": "Now, you can create the scheduled job that accesses Twitter and stores tweet data in the new Updates table.",
      "pos": [
        2005,
        2112
      ]
    },
    {
      "pos": [
        2117,
        2169
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Scheduler<ept id=\"p1\">**</ept> tab, then click <bpt id=\"p2\">**</bpt>+Create<ept id=\"p2\">**</ept>."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>When you run your mobile service in <ph id=\"ph2\">&lt;em&gt;</ph>Free<ph id=\"ph3\">&lt;/em&gt;</ph> tier, you are only able to run one scheduled job at a time.",
      "pos": [
        2176,
        2297
      ]
    },
    {
      "content": "In paid tiers, you can run up to ten scheduled jobs at a time.",
      "pos": [
        2298,
        2360
      ]
    },
    {
      "pos": [
        2365,
        2496
      ],
      "content": "In the scheduler dialog, enter <bpt id=\"p1\">_</bpt>getUpdates<ept id=\"p1\">_</ept> for the <bpt id=\"p2\">**</bpt>Job Name<ept id=\"p2\">**</ept>, set the schedule interval and units, then click the check button."
    },
    {
      "pos": [
        2502,
        2546
      ],
      "content": "This creates a new job named <bpt id=\"p1\">**</bpt>getUpdates<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        2551,
        2688
      ],
      "content": "Click the new job you just created, click the <bpt id=\"p1\">**</bpt>Script<ept id=\"p1\">**</ept> tab and replace the placeholder function <bpt id=\"p2\">**</bpt>getUpdates<ept id=\"p2\">**</ept> with the following code:"
    },
    {
      "content": "This script calls the Twitter query API using stored credentials to request recent tweets that contain the hashtag <ph id=\"ph1\">`#mobileservices`</ph>.",
      "pos": [
        6022,
        6155
      ]
    },
    {
      "content": "Duplicate tweets and replies are removed from the results before they are stored in the table.",
      "pos": [
        6156,
        6250
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>This sample assumes that only a few rows are inserted into the table during each scheduled run.",
      "pos": [
        6257,
        6364
      ]
    },
    {
      "content": "In cases where many rows are inserted in a loop you may run out of connections when running on the Free tier.",
      "pos": [
        6365,
        6474
      ]
    },
    {
      "content": "In this case, you should perform inserts in batches.",
      "pos": [
        6475,
        6527
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>How to: Perform bulk inserts<ept id=\"p1\">](mobile-services-how-to-use-server-scripts.md#bulk-inserts)</ept>.",
      "pos": [
        6528,
        6644
      ]
    },
    {
      "pos": [
        6649,
        6687
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Run Once<ept id=\"p1\">**</ept> to test the script."
    },
    {
      "content": "This saves and executes the job while it remains disabled in the scheduler.",
      "pos": [
        6693,
        6768
      ]
    },
    {
      "pos": [
        6773,
        6921
      ],
      "content": "Click the back button, click <bpt id=\"p1\">**</bpt>Data<ept id=\"p1\">**</ept>, click the <bpt id=\"p2\">**</bpt>Updates<ept id=\"p2\">**</ept> table, click <bpt id=\"p3\">**</bpt>Browse<ept id=\"p3\">**</ept>, and verify that Twitter data has been inserted into the table."
    },
    {
      "pos": [
        6926,
        7015
      ],
      "content": "Click the back button, click <bpt id=\"p1\">**</bpt>Scheduler<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>getUpdates<ept id=\"p2\">**</ept>, then click <bpt id=\"p3\">**</bpt>Enable<ept id=\"p3\">**</ept>."
    },
    {
      "content": "This enables the job to run on the specified schedule, in this case every hour.",
      "pos": [
        7021,
        7100
      ]
    },
    {
      "content": "Congratulations, you have successfully created a new scheduled job in your mobile service.",
      "pos": [
        7102,
        7192
      ]
    },
    {
      "content": "This job will be executed as scheduled until you disable or modify it.",
      "pos": [
        7193,
        7263
      ]
    },
    {
      "pos": [
        7268,
        7301
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"nextsteps\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>See also"
    },
    {
      "pos": [
        7305,
        7408
      ],
      "content": "[Mobile Services server script reference]\n<br/>Learn more about registering and using server scripts.",
      "leadings": [
        "",
        "  "
      ],
      "nodes": [
        {
          "content": "[Mobile Services server script reference]",
          "pos": [
            0,
            41
          ]
        },
        {
          "content": "Learn more about registering and using server scripts.",
          "pos": [
            47,
            101
          ]
        }
      ]
    },
    {
      "content": "test",
      "pos": [
        8145,
        8149
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Schedule Backend Tasks with Scheduler | Microsoft Azure\"\n    description=\"Use the Azure Mobile Services Scheduler to schedule jobs for your mobile app.\"\n    services=\"mobile-services\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-multiple\"\n    ms.devlang=\"multiple\"\n    ms.topic=\"article\"\n    ms.date=\"06/16/2015\"\n    ms.author=\"glenga\"/>\n\n# Schedule recurring jobs in Mobile Services\n\n> [AZURE.SELECTOR-LIST (Platform | Backend)]\n- [(Any | .NET)](mobile-services-dotnet-backend-schedule-recurring-tasks.md)\n- [(Any | Javascript)](mobile-services-schedule-recurring-tasks.md)\n\nThis topic shows you how to use the job scheduler functionality in the Management Portal to define server script code that is executed based on a schedule that you define. In this case, the script periodically check with a remote service, in this case Twitter, and stores the results in a new table. Some other periodic tasks that can be scheduled include:\n\n+ Archiving old or duplicate data records.\n+ Requesting and storing external data, such as tweets, RSS entries, and location information.\n+ Processing or resizing stored images.\n\nThis tutorial shows you how to use the job scheduler to create a scheduled job that requests tweet data from Twitter and stores the tweets in a new Updates table.\n\n##<a name=\"get-oauth-credentials\"></a>Register for access to Twitter v1.1 APIs and store credentials\n\n[AZURE.INCLUDE [mobile-services-register-twitter-access](../../includes/mobile-services-register-twitter-access.md)]\n\n##<a name=\"create-table\"></a>Create the new Updates table\n\nNext, you need to create a new table in which to store tweets.\n\n2. In the Management Portal, click the **Data** tab for your mobile service, then click **+Create**.\n\n3. In **Table name** type _Updates_, then click the check button.\n\n##<a name=\"add-job\"></a>Create a new scheduled job  \n\nNow, you can create the scheduled job that accesses Twitter and stores tweet data in the new Updates table.\n\n2. Click the **Scheduler** tab, then click **+Create**.\n\n    >[AZURE.NOTE]When you run your mobile service in <em>Free</em> tier, you are only able to run one scheduled job at a time. In paid tiers, you can run up to ten scheduled jobs at a time.\n\n3. In the scheduler dialog, enter _getUpdates_ for the **Job Name**, set the schedule interval and units, then click the check button.\n\n    This creates a new job named **getUpdates**.\n\n4. Click the new job you just created, click the **Script** tab and replace the placeholder function **getUpdates** with the following code:\n\n        var updatesTable = tables.getTable('Updates');\n        var request = require('request');\n        var twitterUrl = \"https://api.twitter.com/1.1/search/tweets.json?q=%23mobileservices&result_type=recent\";\n\n        // Get the service configuration module.\n        var config = require('mobileservice-config');\n\n        // Get the stored Twitter consumer key and secret.\n        var consumerKey = config.twitterConsumerKey,\n            consumerSecret = config.twitterConsumerSecret\n        // Get the Twitter access token from app settings.\n        var accessToken= config.appSettings.TWITTER_ACCESS_TOKEN,\n            accessTokenSecret = config.appSettings.TWITTER_ACCESS_TOKEN_SECRET;\n\n        function getUpdates() {\n            // Check what is the last tweet we stored when the job last ran\n            // and ask Twitter to only give us more recent tweets\n            appendLastTweetId(\n                twitterUrl,\n                function twitterUrlReady(url){\n                    // Create a new request with OAuth credentials.\n                    request.get({\n                        url: url,\n                        oauth: {\n                            consumer_key: consumerKey,\n                            consumer_secret: consumerSecret,\n                            token: accessToken,\n                            token_secret: accessTokenSecret\n                        }},\n                        function (error, response, body) {\n                        if (!error && response.statusCode == 200) {\n                            var results = JSON.parse(body).statuses;\n                            if(results){\n                                console.log('Fetched ' + results.length + ' new results from Twitter');\n                                results.forEach(function (tweet){\n                                    if(!filterOutTweet(tweet)){\n                                        var update = {\n                                            twitterId: tweet.id,\n                                            text: tweet.text,\n                                            author: tweet.user.screen_name,\n                                            date: tweet.created_at\n                                        };\n                                        updatesTable.insert(update);\n                                    }\n                                });\n                            }\n                        } else {\n                            console.error('Could not contact Twitter');\n                        }\n                    });\n\n                });\n         }\n        // Find the largest (most recent) tweet ID we have already stored\n        // (if we have stored any) and ask Twitter to only return more\n        // recent ones\n        function appendLastTweetId(url, callback){\n            updatesTable\n            .orderByDescending('twitterId')\n            .read({success: function readUpdates(updates){\n                if(updates.length){\n                    callback(url + '&since_id=' + (updates[0].twitterId + 1));\n                } else {\n                    callback(url);\n                }\n            }});\n        }\n\n        function filterOutTweet(tweet){\n            // Remove retweets and replies\n            return (tweet.text.indexOf('RT') === 0 || tweet.to_user_id);\n        }\n\n\n    This script calls the Twitter query API using stored credentials to request recent tweets that contain the hashtag `#mobileservices`. Duplicate tweets and replies are removed from the results before they are stored in the table.\n\n    >[AZURE.NOTE]This sample assumes that only a few rows are inserted into the table during each scheduled run. In cases where many rows are inserted in a loop you may run out of connections when running on the Free tier. In this case, you should perform inserts in batches. For more information, see [How to: Perform bulk inserts](mobile-services-how-to-use-server-scripts.md#bulk-inserts).\n\n6. Click **Run Once** to test the script.\n\n    This saves and executes the job while it remains disabled in the scheduler.\n\n7. Click the back button, click **Data**, click the **Updates** table, click **Browse**, and verify that Twitter data has been inserted into the table.\n\n8. Click the back button, click **Scheduler**, select **getUpdates**, then click **Enable**.\n\n    This enables the job to run on the specified schedule, in this case every hour.\n\nCongratulations, you have successfully created a new scheduled job in your mobile service. This job will be executed as scheduled until you disable or modify it.\n\n## <a name=\"nextsteps\"> </a>See also\n\n* [Mobile Services server script reference]\n  <br/>Learn more about registering and using server scripts.\n\n<!-- Anchors. -->\n[Register for Twitter access and store credentials]: #get-oauth-credentials\n[Create the new Updates table]: #create-table\n[Create a new scheduled job]: #add-job\n[Next steps]: #next-steps\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Mobile Services server script reference]: http://go.microsoft.com/fwlink/?LinkId=262293\n[WindowsAzure.com]: http://www.windowsazure.com/\n[Azure Management Portal]: https://manage.windowsazure.com/\n[Register your apps for Twitter login with Mobile Services]: /develop/mobile/how-to-guides/register-for-twitter-authentication\n[Twitter Developers]: http://go.microsoft.com/fwlink/p/?LinkId=268300\n[App settings]: http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7\n\ntest\n"
}