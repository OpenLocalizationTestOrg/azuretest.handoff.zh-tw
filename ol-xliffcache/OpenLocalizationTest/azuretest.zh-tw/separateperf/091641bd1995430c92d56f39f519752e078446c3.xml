{
  "nodes": [
    {
      "content": "Connect to SQL Database by using Node.js on Windows",
      "pos": [
        28,
        79
      ]
    },
    {
      "content": "Presents a Node.js code sample you can use to connect to Azure SQL Database.",
      "pos": [
        99,
        175
      ]
    },
    {
      "content": "The sample runs on a Windows client computer.",
      "pos": [
        176,
        221
      ]
    },
    {
      "content": "Connect to SQL Database by using Node.js on Windows",
      "pos": [
        550,
        601
      ]
    },
    {
      "content": "This topic presents a Node.js code sample that you can use to connect to Azure SQL Database.",
      "pos": [
        769,
        861
      ]
    },
    {
      "content": "The Node.js program runs on a Windows client computer.",
      "pos": [
        862,
        916
      ]
    },
    {
      "content": "To manage the connection, the msnodesql driver is used.",
      "pos": [
        917,
        972
      ]
    },
    {
      "content": "Requirements",
      "pos": [
        978,
        990
      ]
    },
    {
      "content": "The following software items must exist on your client development computer.",
      "pos": [
        993,
        1069
      ]
    },
    {
      "content": "Node.js – <bpt id=\"p1\">[</bpt>Version 0.8.9 (32 bit version)<ept id=\"p1\">](http://blog.nodejs.org/2012/09/11/node-v0-8-9-stable/)</ept>.",
      "pos": [
        1075,
        1173
      ]
    },
    {
      "content": "Scroll and click the download for Window Installer for 32 bit x86, and not for Windows x64 Installer 64 bit.",
      "pos": [
        1174,
        1282
      ]
    },
    {
      "pos": [
        1285,
        1386
      ],
      "content": "<bpt id=\"p1\">[</bpt>Python 2.7.6<ept id=\"p1\">](https://www.python.org/download/releases/2.7.6/)</ept>, the installer for either x86 or x64."
    },
    {
      "pos": [
        1390,
        1760
      ],
      "content": "<bpt id=\"p1\">[</bpt>Visual C++ 2010<ept id=\"p1\">](https://app.vssps.visualstudio.com/profile/review?download=true&amp;family=VisualStudioCExpress&amp;release=VisualStudio2010&amp;type=web&amp;slcid=0x409&amp;context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MCwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjAsImF1IjpudWxsLCJjdiI6OTY4OTg2MzU1LCJmcyI6MCwic3UiOjAsImVyIjoxfQ2)</ept> - the Express edition is freely available from Microsoft."
    },
    {
      "pos": [
        1763,
        1949
      ],
      "content": "SQL Server Native Client 11.0 - available as Microsoft SQL Server 2012 Native Client found in the <bpt id=\"p1\">[</bpt>SQL Server 2012 Feature Pack<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=29065)</ept>."
    },
    {
      "content": "Install the required modules",
      "pos": [
        1956,
        1984
      ]
    },
    {
      "content": "Once you satisfy the requirements, make sure you are on Node.js version 0.8.9.",
      "pos": [
        1986,
        2064
      ]
    },
    {
      "content": "You can check this by using the following command from your command line terminal: node -v.",
      "pos": [
        2065,
        2156
      ]
    },
    {
      "content": "In a <bpt id=\"p1\">**</bpt>cmd.exe<ept id=\"p1\">**</ept> command line window, navigate to your project directory- for example C:\\NodeJSSQLProject.",
      "pos": [
        2161,
        2267
      ]
    },
    {
      "content": "Enter the following commands in the sequence shown.",
      "pos": [
        2268,
        2319
      ]
    },
    {
      "content": "Next navigate to node_modules\\msnodesql folder and run the <bpt id=\"p1\">**</bpt>msnodesql-0.2.1-v0.8-ia32<ept id=\"p1\">**</ept> executible.",
      "pos": [
        2362,
        2462
      ]
    },
    {
      "content": "Follow the steps from the installation wizard and hit finish when you are done.",
      "pos": [
        2463,
        2542
      ]
    },
    {
      "content": "At this point you should have the Node.js SQL Server driver installed.",
      "pos": [
        2543,
        2613
      ]
    },
    {
      "content": "Follow the next steps to get your connection string and then you should be able to connect to Azure SQL DB from your Node.js application.",
      "pos": [
        2614,
        2751
      ]
    },
    {
      "content": "Create a database and retrieve your connection string",
      "pos": [
        2758,
        2811
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>Get Started topic<ept id=\"p1\">](sql-database-get-started.md)</ept> to learn how to create a sample database and retrieve your connection string.",
      "pos": [
        2814,
        2948
      ]
    },
    {
      "content": "It is important you follow the guide to create an <bpt id=\"p1\">**</bpt>AdventureWorks database template<ept id=\"p1\">**</ept>.",
      "pos": [
        2949,
        3036
      ]
    },
    {
      "content": "The samples shown below will only work with the <bpt id=\"p1\">**</bpt>AdventureWorks schema<ept id=\"p1\">**</ept>.",
      "pos": [
        3037,
        3111
      ]
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        3118,
        3146
      ]
    },
    {
      "content": "Copy the following code in a .js file located in your project directory.",
      "pos": [
        3151,
        3223
      ]
    },
    {
      "content": "Now run your .js file by issuing the following command.",
      "pos": [
        3932,
        3987
      ]
    },
    {
      "content": "Execute an SQL SELECT statement",
      "pos": [
        4017,
        4048
      ]
    },
    {
      "content": "Insert a row, pass parameters, and retrieve the generated primary key",
      "pos": [
        5245,
        5314
      ]
    },
    {
      "content": "Transactions",
      "pos": [
        6471,
        6483
      ]
    },
    {
      "content": "The method <bpt id=\"p1\">**</bpt>conn.beginTransactions<ept id=\"p1\">**</ept> will not work in Azure SQL Database.",
      "pos": [
        6486,
        6560
      ]
    },
    {
      "content": "Instead, follow the code sample to perform transactions in SQL Database.",
      "pos": [
        6561,
        6633
      ]
    },
    {
      "content": "Stored procedures",
      "pos": [
        8011,
        8028
      ]
    },
    {
      "content": "For this code sample to work, you must first have or create a stored procedure that inputs no parameters.",
      "pos": [
        8031,
        8136
      ]
    },
    {
      "content": "You can create a stored procedure with a tool such as SQL Server Management Studio (SSMS.exe).",
      "pos": [
        8137,
        8231
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Connect to SQL Database by using Node.js on Windows\" \n    description=\"Presents a Node.js code sample you can use to connect to Azure SQL Database. The sample runs on a Windows client computer.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"meet-bhagdev\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"data-management\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"nodejs\" \n    ms.topic=\"article\" \n    ms.date=\"07/30/2015\" \n    ms.author=\"mebha\"/>\n\n\n# Connect to SQL Database by using Node.js on Windows\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\nThis topic presents a Node.js code sample that you can use to connect to Azure SQL Database. The Node.js program runs on a Windows client computer. To manage the connection, the msnodesql driver is used.\n\n\n## Requirements\n\n\nThe following software items must exist on your client development computer.\n\n\n-  Node.js – [Version 0.8.9 (32 bit version)](http://blog.nodejs.org/2012/09/11/node-v0-8-9-stable/). Scroll and click the download for Window Installer for 32 bit x86, and not for Windows x64 Installer 64 bit.\n- [Python 2.7.6](https://www.python.org/download/releases/2.7.6/), the installer for either x86 or x64. \n- [Visual C++ 2010](https://app.vssps.visualstudio.com/profile/review?download=true&family=VisualStudioCExpress&release=VisualStudio2010&type=web&slcid=0x409&context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MCwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjAsImF1IjpudWxsLCJjdiI6OTY4OTg2MzU1LCJmcyI6MCwic3UiOjAsImVyIjoxfQ2) - the Express edition is freely available from Microsoft.\n- SQL Server Native Client 11.0 - available as Microsoft SQL Server 2012 Native Client found in the [SQL Server 2012 Feature Pack](http://www.microsoft.com/download/details.aspx?id=29065).\n\n\n### Install the required modules\n\nOnce you satisfy the requirements, make sure you are on Node.js version 0.8.9. You can check this by using the following command from your command line terminal: node -v.\n<br>In a **cmd.exe** command line window, navigate to your project directory- for example C:\\NodeJSSQLProject. Enter the following commands in the sequence shown. \n\n    npm init\n    npm install msnodesql\n\nNext navigate to node_modules\\msnodesql folder and run the **msnodesql-0.2.1-v0.8-ia32** executible. Follow the steps from the installation wizard and hit finish when you are done. At this point you should have the Node.js SQL Server driver installed. Follow the next steps to get your connection string and then you should be able to connect to Azure SQL DB from your Node.js application. \n\n### Create a database and retrieve your connection string\n \nSee the [Get Started topic](sql-database-get-started.md) to learn how to create a sample database and retrieve your connection string. It is important you follow the guide to create an **AdventureWorks database template**. The samples shown below will only work with the **AdventureWorks schema**. \n\n\n## Connect to your SQL Database\n\n\n- Copy the following code in a .js file located in your project directory.\n\n\n        var http = require('http');\n        var sql = require('msnodesql');\n        var http = require('http');\n        var fs = require('fs');\n        var useTrustedConnection = false;\n        var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.windows.net;\" + \n        (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") + \n        \"Database={AdventureWorks};\"\n        sql.open(conn_str, function (err, conn) {\n            if (err) {\n                console.log(\"Error opening the connection!\");\n                return;\n            }\n            else\n                console.log(\"Successfuly connected\");\n        }); \n\n\n- Now run your .js file by issuing the following command.\n\n\n        node index.js\n\n\n## Execute an SQL SELECT statement\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.windows.net;\" + \n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") + \n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n    \n    \n        conn.queryRaw(\"SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query1!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(results.rows[i]);\n            }\n        });\n    });\n\n\n## Insert a row, pass parameters, and retrieve the generated primary key\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.windows.net;\" + \n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") + \n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n    \n    \n        conn.queryRaw(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express', 'SQLEXPRESS', 0, 0, CURRENT_TIMESTAMP)\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(\"Product ID Inserted : \"+results.rows[i]);\n            }\n        });\n    });\n\n\n## Transactions\n\n\nThe method **conn.beginTransactions** will not work in Azure SQL Database. Instead, follow the code sample to perform transactions in SQL Database.\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.windows.net;\" + \n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") + \n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n    \n    \n        conn.queryRaw(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New ', 'SQLEXPRESS New', 1, 1, CURRENT_TIMESTAMP)\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(\"Product ID Inserted : \"+results.rows[i]);\n            }\n        });\n        \n        conn.queryRaw(\"ROLLBACK TRANSACTION; \", function (err, results) {\n                if (err) {\n                console.log(\"Rollback failed\");\n                return;\n            }\n            });\n    });\n\n\n## Stored procedures\n\n\nFor this code sample to work, you must first have or create a stored procedure that inputs no parameters. You can create a stored procedure with a tool such as SQL Server Management Studio (SSMS.exe).\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.windows.net;\" + \n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") + \n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n        \n        conn.query(\"exec NameOfStoredProcedure\", function (err, results) {\n            if (err) {\n            console.log(\"Error running query8!\");\n            return;\n        }\n        });\n    });\n\n \n"
}