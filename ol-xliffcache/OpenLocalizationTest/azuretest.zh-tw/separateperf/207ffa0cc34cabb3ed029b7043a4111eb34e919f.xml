{
  "nodes": [
    {
      "content": "PHP on Windows to SQL DB | Microsoft Azure",
      "pos": [
        27,
        69
      ]
    },
    {
      "content": "Presents a sample PHP program that connects to Azure SQL Database from a Windows client, and provides links to the necessary software components needed by the client.",
      "pos": [
        88,
        254
      ]
    },
    {
      "content": "Connect to SQL Database by using PHP on Windows",
      "pos": [
        569,
        616
      ]
    },
    {
      "content": "This topic illustrates how you can connect to Azure SQL Database from a client application written in PHP that runs on Windows.",
      "pos": [
        784,
        911
      ]
    },
    {
      "content": "Create a database and retrieve your connection string",
      "pos": [
        1068,
        1121
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>Getting Started Topic<ept id=\"p1\">](sql-database-get-started.md)</ept> to learn how to create a sample database and retrieve your connection string.",
      "pos": [
        1124,
        1262
      ]
    },
    {
      "content": "It is important you follow the guide to create an <bpt id=\"p1\">**</bpt>AdventureWorks database template<ept id=\"p1\">**</ept>.",
      "pos": [
        1263,
        1350
      ]
    },
    {
      "content": "The samples shown below only work with the <bpt id=\"p1\">**</bpt>AdventureWorks schema<ept id=\"p1\">**</ept>.",
      "pos": [
        1351,
        1420
      ]
    },
    {
      "content": "Connect to your SQL Database database",
      "pos": [
        1427,
        1464
      ]
    },
    {
      "pos": [
        1467,
        1559
      ],
      "content": "This <bpt id=\"p1\">**</bpt>OpenConnection<ept id=\"p1\">**</ept> function is called near the top in all of the functions that follow."
    },
    {
      "content": "Execute a query and retrieve the result set",
      "pos": [
        2061,
        2104
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>sqlsrv_query()<ept id=\"p1\">](http://php.net/manual/en/function.sqlsrv-query.php)</ept> function can be used to retrieve a result set from a query against SQL Database.",
      "pos": [
        2106,
        2259
      ]
    },
    {
      "content": "This function essentially accepts any query and the connection object and returns a result set which can be iterated over with the use of <bpt id=\"p1\">[</bpt>sqlsrv_fetch_array()<ept id=\"p1\">](http://php.net/manual/en/function.sqlsrv-fetch-array.php)</ept>.",
      "pos": [
        2260,
        2479
      ]
    },
    {
      "content": "Insert a row, pass parameters, and retrieve the generated primary key",
      "pos": [
        3206,
        3275
      ]
    },
    {
      "pos": [
        3278,
        3544
      ],
      "content": "In SQL Database the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](https://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENCE<ept id=\"p2\">](https://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key<ept id=\"p3\">](https://msdn.microsoft.com/library/ms179610.aspx)</ept> values."
    },
    {
      "content": "Transactions",
      "pos": [
        4393,
        4405
      ]
    },
    {
      "content": "This code example demonstrates the use of transactions in which you:",
      "pos": [
        4408,
        4476
      ]
    },
    {
      "content": "-Begin a transaction",
      "pos": [
        4478,
        4498
      ]
    },
    {
      "content": "-Insert a row of data, Update another row of data",
      "pos": [
        4500,
        4549
      ]
    },
    {
      "content": "-Commit your transaction if the insert and update were successful and rollback the transaction if one of them was not",
      "pos": [
        4551,
        4668
      ]
    },
    {
      "content": "Further reading",
      "pos": [
        5972,
        5987
      ]
    },
    {
      "pos": [
        5990,
        6147
      ],
      "content": "For more information regarding PHP installation and usage, see <bpt id=\"p1\">[</bpt>Accessing SQL Server Databases with PHP<ept id=\"p1\">](http://technet.microsoft.com/library/cc793139.aspx)</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"PHP on Windows to SQL DB | Microsoft Azure\"\n    description=\"Presents a sample PHP program that connects to Azure SQL Database from a Windows client, and provides links to the necessary software components needed by the client.\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"meet-bhagdev\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.workload=\"data-management\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"php\"\n    ms.topic=\"article\"\n    ms.date=\"07/20/2015\"\n    ms.author=\"mebha\"/>\n\n\n# Connect to SQL Database by using PHP on Windows\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\nThis topic illustrates how you can connect to Azure SQL Database from a client application written in PHP that runs on Windows.\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-prerequisites-php-windows](../../includes/sql-database-develop-includes-prerequisites-php-windows.md)]\n\n\n## Create a database and retrieve your connection string\n\n\nSee the [Getting Started Topic](sql-database-get-started.md) to learn how to create a sample database and retrieve your connection string. It is important you follow the guide to create an **AdventureWorks database template**. The samples shown below only work with the **AdventureWorks schema**. \n\n\n## Connect to your SQL Database database\n\n\nThis **OpenConnection** function is called near the top in all of the functions that follow.\n\n\n    function OpenConnection()\n    {\n        try\n        {\n            $serverName = \"tcp:myserver.database.windows.net,1433\";\n            $connectionOptions = array(\"Database\"=>\"AdventureWorks\",\n                \"Uid\"=>\"MyUser\", \"PWD\"=>\"MyPassword\");\n            $conn = sqlsrv_connect($serverName, $connectionOptions);\n            if($conn == false)\n                die(FormatErrors(sqlsrv_errors()));\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n\n## Execute a query and retrieve the result set\n\nThe [sqlsrv_query()](http://php.net/manual/en/function.sqlsrv-query.php) function can be used to retrieve a result set from a query against SQL Database. This function essentially accepts any query and the connection object and returns a result set which can be iterated over with the use of [sqlsrv_fetch_array()](http://php.net/manual/en/function.sqlsrv-fetch-array.php).\n\n    function ReadData()\n    {\n        try\n        {\n            $conn = OpenConnection();\n            $tsql = \"SELECT [CompanyName] FROM SalesLT.Customer\";\n            $getProducts = sqlsrv_query($conn, $tsql);\n            if ($getProducts == FALSE)\n                die(FormatErrors(sqlsrv_errors()));\n            $productCount = 0;\n            while($row = sqlsrv_fetch_array($getProducts, SQLSRV_FETCH_ASSOC))\n            {\n                echo($row['CompanyName']);\n                echo(\"<br/>\");\n                $productCount++;\n            }\n            sqlsrv_free_stmt($getProducts);\n            sqlsrv_close($conn);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n    \n\n## Insert a row, pass parameters, and retrieve the generated primary key\n\n\nIn SQL Database the [IDENTITY](https://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENCE](https://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key](https://msdn.microsoft.com/library/ms179610.aspx) values. \n\n\n    function InsertData()\n    {\n        try\n        {\n            $conn = OpenConnection();\n\n            $tsql = \"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT            INSERTED.ProductID VALUES ('SQL Server 1', 'SQL Server 2', 0, 0, getdate())\";\n            //Insert query\n            $insertReview = sqlsrv_query($conn, $tsql);\n            if($insertReview == FALSE)\n                die(FormatErrors( sqlsrv_errors()));\n            echo \"Product Key inserted is :\";   \n            while($row = sqlsrv_fetch_array($insertReview, SQLSRV_FETCH_ASSOC))\n            {   \n                echo($row['ProductID']);\n            }\n            sqlsrv_free_stmt($insertReview);\n            sqlsrv_close($conn);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n## Transactions\n\n\nThis code example demonstrates the use of transactions in which you:\n\n-Begin a transaction\n\n-Insert a row of data, Update another row of data\n\n-Commit your transaction if the insert and update were successful and rollback the transaction if one of them was not\n\n\n    function Transactions()\n    {\n        try\n        {\n            $conn = OpenConnection();\n\n            if (sqlsrv_begin_transaction($conn) == FALSE)\n                die(FormatErrors(sqlsrv_errors()));\n\n            $tsql1 = \"INSERT INTO SalesLT.SalesOrderDetail (SalesOrderID,OrderQty,ProductID,UnitPrice) \n            VALUES (71774, 22, 709, 33)\";\n            $stmt1 = sqlsrv_query($conn, $tsql1);\n            \n            /* Set up and execute the second query. */\n            $tsql2 = \"UPDATE SalesLT.SalesOrderDetail SET OrderQty = (OrderQty + 1) WHERE ProductID = 709\";\n            $stmt2 = sqlsrv_query( $conn, $tsql2);\n            \n            /* If both queries were successful, commit the transaction. */\n            /* Otherwise, rollback the transaction. */\n            if($stmt1 && $stmt2)\n            {\n                   sqlsrv_commit($conn);\n                   echo(\"Transaction was commited\");\n            }\n            else\n            {\n                sqlsrv_rollback($conn);\n                echo \"Transaction was rolled back.\\n\";\n            }\n            /* Free statement and connection resources. */\n            sqlsrv_free_stmt( $stmt1);\n            sqlsrv_free_stmt( $stmt2);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n\n## Further reading\n\n\nFor more information regarding PHP installation and usage, see [Accessing SQL Server Databases with PHP](http://technet.microsoft.com/library/cc793139.aspx).\n\n \n"
}