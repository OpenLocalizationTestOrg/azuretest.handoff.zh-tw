<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Best practices for designing Azure Resource Manager templates</source>
          <target state="new">Best practices for designing Azure Resource Manager templates</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Show design patterns for Azure Resource Manager templates</source>
          <target state="new">Show design patterns for Azure Resource Manager templates</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Best practices for designing Azure Resource Manager templates</source>
          <target state="new">Best practices for designing Azure Resource Manager templates</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In our work with enterprises, system integrator (SIs), cloud service vendor (CSVs), and open source software (OSS) project teams, it's often necessary to quickly</source>
          <target state="new">In our work with enterprises, system integrator (SIs), cloud service vendor (CSVs), and open source software (OSS) project teams, it's often necessary to quickly</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>deploy environments, workloads, or scale units.</source>
          <target state="new">deploy environments, workloads, or scale units.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These deployments need to be supported, follow proven practices, and adhere to identified policies.</source>
          <target state="new">These deployments need to be supported, follow proven practices, and adhere to identified policies.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using a flexible</source>
          <target state="new">Using a flexible</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>approach based on Azure Resource Manager templates, you can deploy complex topologies quickly and consistently and then adapt these deployments easily as</source>
          <target state="new">approach based on Azure Resource Manager templates, you can deploy complex topologies quickly and consistently and then adapt these deployments easily as</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>core offerings evolve or to accommodate variants for outlier scenarios or customers.</source>
          <target state="new">core offerings evolve or to accommodate variants for outlier scenarios or customers.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic is part of a larger whitepaper.</source>
          <target state="new">This topic is part of a larger whitepaper.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To read the full paper, download [World Class ARM Templates Considerations and Proven Practices](http://download.microsoft.com/download/8/E/1/8E1DBEFA-CECE-4DC9-A813-93520A5D7CFE/World Class ARM Templates - Considerations and Proven Practices.pdf).</source>
          <target state="new">To read the full paper, download [World Class ARM Templates Considerations and Proven Practices](http://download.microsoft.com/download/8/E/1/8E1DBEFA-CECE-4DC9-A813-93520A5D7CFE/World Class ARM Templates - Considerations and Proven Practices.pdf).</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Templates combine the benefits of the underlying Azure Resource Manager with the adaptability and readability of JavaScript Object Notation (JSON).</source>
          <target state="new">Templates combine the benefits of the underlying Azure Resource Manager with the adaptability and readability of JavaScript Object Notation (JSON).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using</source>
          <target state="new">Using</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>templates, you can:</source>
          <target state="new">templates, you can:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Deploy topologies and their workloads consistently.</source>
          <target state="new">Deploy topologies and their workloads consistently.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Manage all your resources in an application together using resource groups.</source>
          <target state="new">Manage all your resources in an application together using resource groups.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Apply role-based access control (RBAC) to grant appropriate access to users, groups, and services.</source>
          <target state="new">Apply role-based access control (RBAC) to grant appropriate access to users, groups, and services.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use tagging associations to streamline tasks such as billing rollups.</source>
          <target state="new">Use tagging associations to streamline tasks such as billing rollups.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This article provides details on consumption scenarios, architecture, and implementation patterns identified during our design sessions and real-world template</source>
          <target state="new">This article provides details on consumption scenarios, architecture, and implementation patterns identified during our design sessions and real-world template</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>implementations with Azure Customer Advisory Team (AzureCAT) customers.</source>
          <target state="new">implementations with Azure Customer Advisory Team (AzureCAT) customers.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Far from academic, these are proven practices informed by the development of templates</source>
          <target state="new">Far from academic, these are proven practices informed by the development of templates</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>for 12 of the top Linux-based OSS technologies, including: Apache Kafka, Apache Spark, Cloudera, Couchbase, Hortonworks HDP, DataStax Enterprise powered by</source>
          <target state="new">for 12 of the top Linux-based OSS technologies, including: Apache Kafka, Apache Spark, Cloudera, Couchbase, Hortonworks HDP, DataStax Enterprise powered by</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Apache Cassandra, Elasticsearch, Jenkins, MongoDB, Nagios, PostgreSQL, Redis, and Nagios.</source>
          <target state="new">Apache Cassandra, Elasticsearch, Jenkins, MongoDB, Nagios, PostgreSQL, Redis, and Nagios.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The majority of these templates were developed with a well-known vendor of</source>
          <target state="new">The majority of these templates were developed with a well-known vendor of</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>a given distribution and influenced by the requirements of Microsoft’s enterprise and SI customers during recent projects.</source>
          <target state="new">a given distribution and influenced by the requirements of Microsoft’s enterprise and SI customers during recent projects.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This article shares these proven practices to help you architect world class Azure Resource Manager templates.</source>
          <target state="new">This article shares these proven practices to help you architect world class Azure Resource Manager templates.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In our work with customers, we have identified a number of Resource Manager template consumption experiences across enterprises, System Integrators (SI)s, and CSVs.</source>
          <target state="new">In our work with customers, we have identified a number of Resource Manager template consumption experiences across enterprises, System Integrators (SI)s, and CSVs.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following sections provides a high-level overview of common scenarios and patterns for different customer types.</source>
          <target state="new">The following sections provides a high-level overview of common scenarios and patterns for different customer types.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Enterprises and system integrators</source>
          <target state="new">Enterprises and system integrators</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Within large organizations, we commonly see two consumers of ARM templates: internal software development teams and corporate IT.</source>
          <target state="new">Within large organizations, we commonly see two consumers of ARM templates: internal software development teams and corporate IT.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The scenarios for the</source>
          <target state="new">The scenarios for the</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>SIs we’ve worked with have mapped to those of Enterprises, so the same considerations apply.</source>
          <target state="new">SIs we’ve worked with have mapped to those of Enterprises, so the same considerations apply.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Internal software development teams</source>
          <target state="new">Internal software development teams</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If your team develops software to support your business, templates provide an easy way to quickly deploy technologies for use in business-specific solutions.</source>
          <target state="new">If your team develops software to support your business, templates provide an easy way to quickly deploy technologies for use in business-specific solutions.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can also use templates to rapidly create training environments that enable team members to gain necessary skills.</source>
          <target state="new">You can also use templates to rapidly create training environments that enable team members to gain necessary skills.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use templates as-is or extend or compose them to accommodate your needs.</source>
          <target state="new">You can use templates as-is or extend or compose them to accommodate your needs.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using tagging within templates, you can provide a billing summary with</source>
          <target state="new">Using tagging within templates, you can provide a billing summary with</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>various views such as team, project, individual, and education.</source>
          <target state="new">various views such as team, project, individual, and education.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Businesses often want software development teams to create a template for consistent deployment of a solution while also offering constraints so certain</source>
          <target state="new">Businesses often want software development teams to create a template for consistent deployment of a solution while also offering constraints so certain</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>items within that environment remain fixed and can’t be overridden.</source>
          <target state="new">items within that environment remain fixed and can’t be overridden.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, a bank might require a template to include RBAC so a programmer can’t revise a</source>
          <target state="new">For example, a bank might require a template to include RBAC so a programmer can’t revise a</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>banking solution to send data to a personal storage account.</source>
          <target state="new">banking solution to send data to a personal storage account.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Corporate IT</source>
          <target state="new">Corporate IT</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Corporate IT organizations typically use templates for delivering cloud capacity and cloud-hosted capabilities.</source>
          <target state="new">Corporate IT organizations typically use templates for delivering cloud capacity and cloud-hosted capabilities.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Cloud capacity</source>
          <target state="new">Cloud capacity</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A common way for corporate IT groups to provide cloud capacity for teams within their organization is with “t-shirt sizes”, which are standard offering sizes</source>
          <target state="new">A common way for corporate IT groups to provide cloud capacity for teams within their organization is with “t-shirt sizes”, which are standard offering sizes</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>such as small, medium, and large.</source>
          <target state="new">such as small, medium, and large.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The t-shirt sized offerings can mix different resource types and quantities while providing a level of standardization that</source>
          <target state="new">The t-shirt sized offerings can mix different resource types and quantities while providing a level of standardization that</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>makes it possible to use templates.</source>
          <target state="new">makes it possible to use templates.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The templates deliver capacity in a consistent way that enforces corporate policies and uses tagging to provide</source>
          <target state="new">The templates deliver capacity in a consistent way that enforces corporate policies and uses tagging to provide</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>chargeback to consuming organizations.</source>
          <target state="new">chargeback to consuming organizations.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, you may need to provide development, test, or production environments within which the software development teams can deploy their solutions.</source>
          <target state="new">For example, you may need to provide development, test, or production environments within which the software development teams can deploy their solutions.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The environment has a predefined network topology and elements which the software development teams cannot change, such as rules governing access to the public</source>
          <target state="new">The environment has a predefined network topology and elements which the software development teams cannot change, such as rules governing access to the public</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>internet and packet inspection.</source>
          <target state="new">internet and packet inspection.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You may also have organization-specific roles for these environments with distinct access rights for the environment.</source>
          <target state="new">You may also have organization-specific roles for these environments with distinct access rights for the environment.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Cloud-hosted capabilities</source>
          <target state="new">Cloud-hosted capabilities</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can use templates to support cloud-hosted capabilities, including individual software packages or composite offerings that are offered to internal lines</source>
          <target state="new">You can use templates to support cloud-hosted capabilities, including individual software packages or composite offerings that are offered to internal lines</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>of business.</source>
          <target state="new">of business.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An example of a composite offering would be analytics-as-a-service—analytics, visualization, and other technologies—delivered in an optimized,</source>
          <target state="new">An example of a composite offering would be analytics-as-a-service—analytics, visualization, and other technologies—delivered in an optimized,</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>connected configuration on a predefined network topology.</source>
          <target state="new">connected configuration on a predefined network topology.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Cloud-hosted capabilities are affected by the security and role considerations established by the cloud capacity offering on which they’re built as described above.</source>
          <target state="new">Cloud-hosted capabilities are affected by the security and role considerations established by the cloud capacity offering on which they’re built as described above.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These capabilities are offered as is or as a managed service.</source>
          <target state="new">These capabilities are offered as is or as a managed service.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For the latter, access-constrained roles are required to enable access into the environment for</source>
          <target state="new">For the latter, access-constrained roles are required to enable access into the environment for</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>management purposes.</source>
          <target state="new">management purposes.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Cloud service vendors</source>
          <target state="new">Cloud service vendors</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>After talking to many CSVs, we have identified multiple approaches you can take to deploy services for your customers and associated requirements.</source>
          <target state="new">After talking to many CSVs, we have identified multiple approaches you can take to deploy services for your customers and associated requirements.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CSV-hosted offering</source>
          <target state="new">CSV-hosted offering</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you host your offering in your own Azure subscription, two hosting approaches are common: deploying a distinct deployment for every customer or deploying</source>
          <target state="new">If you host your offering in your own Azure subscription, two hosting approaches are common: deploying a distinct deployment for every customer or deploying</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>scale units that underpin a shared infrastructure used for all customers.</source>
          <target state="new">scale units that underpin a shared infrastructure used for all customers.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Distinct deployments for each customer.</source>
          <target state="new">Distinct deployments for each customer.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Distinct deployments per customer require fixed topologies of different known configurations.</source>
          <target state="new">Distinct deployments per customer require fixed topologies of different known configurations.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These may have different</source>
          <target state="new">These may have different</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>virtual machine (VM) sizes, varying numbers of nodes, and different amounts of associated storage.</source>
          <target state="new">virtual machine (VM) sizes, varying numbers of nodes, and different amounts of associated storage.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Tagging of deployments is used for roll-up billing of each customer.</source>
          <target state="new">Tagging of deployments is used for roll-up billing of each customer.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>RBAC may be enabled to allow customers access to aspects of their cloud environment.</source>
          <target state="new">RBAC may be enabled to allow customers access to aspects of their cloud environment.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Scale units in shared multi-tenant environments.</source>
          <target state="new">Scale units in shared multi-tenant environments.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A template can represent a scale unit for multi-tenant environments.</source>
          <target state="new">A template can represent a scale unit for multi-tenant environments.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In this case, the same infrastructure</source>
          <target state="new">In this case, the same infrastructure</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>is used to support all customers.</source>
          <target state="new">is used to support all customers.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The deployments represent a group of resources that deliver a level of capacity for the hosted offering, such as number of users</source>
          <target state="new">The deployments represent a group of resources that deliver a level of capacity for the hosted offering, such as number of users</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>and number of transactions.</source>
          <target state="new">and number of transactions.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>These scale units are increased or decreased as demand requires.</source>
          <target state="new">These scale units are increased or decreased as demand requires.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CSV offering injected into customer subscription</source>
          <target state="new">CSV offering injected into customer subscription</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You may want to deploy your software into subscriptions owned by end customers.</source>
          <target state="new">You may want to deploy your software into subscriptions owned by end customers.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can use templates to deploy distinct deployments into a customer’s Azure account.</source>
          <target state="new">You can use templates to deploy distinct deployments into a customer’s Azure account.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>These deployments use RBAC so you can update and manage the deployment within the customer’s account.</source>
          <target state="new">These deployments use RBAC so you can update and manage the deployment within the customer’s account.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Azure Marketplace</source>
          <target state="new">Azure Marketplace</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you want to advertise and sell your offerings through a marketplace, such as Azure Marketplace, you can develop templates to deliver distinct types of</source>
          <target state="new">If you want to advertise and sell your offerings through a marketplace, such as Azure Marketplace, you can develop templates to deliver distinct types of</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>deployments that will run in a customer’s Azure account.</source>
          <target state="new">deployments that will run in a customer’s Azure account.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This distinct deployments can be typically described as a t-shirt size (small, medium, large),</source>
          <target state="new">This distinct deployments can be typically described as a t-shirt size (small, medium, large),</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>product/audience type (community, developer, enterprise), or feature type (basic, high availability).</source>
          <target state="new">product/audience type (community, developer, enterprise), or feature type (basic, high availability).</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In some cases, these types will allow you to specify</source>
          <target state="new">In some cases, these types will allow you to specify</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>certain attributes of the deployment, such as VM type or number of disks.</source>
          <target state="new">certain attributes of the deployment, such as VM type or number of disks.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>OSS projects</source>
          <target state="new">OSS projects</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Within open source projects, Resource Manager templates enable a community to deploy a solution quickly using proven practices.</source>
          <target state="new">Within open source projects, Resource Manager templates enable a community to deploy a solution quickly using proven practices.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can store templates in a</source>
          <target state="new">You can store templates in a</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>GitHub repository so the community can revise them over time.</source>
          <target state="new">GitHub repository so the community can revise them over time.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>End users can then deploy these templates in their own Azure subscriptions.</source>
          <target state="new">End users can then deploy these templates in their own Azure subscriptions.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following sections identify the things you need to consider before designing your solution.</source>
          <target state="new">The following sections identify the things you need to consider before designing your solution.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Identifying what is outside and inside of a VM</source>
          <target state="new">Identifying what is outside and inside of a VM</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>As you design your template, it’s helpful to look at the requirements in terms of what’s outside and inside of the virtual machines (VMs):</source>
          <target state="new">As you design your template, it’s helpful to look at the requirements in terms of what’s outside and inside of the virtual machines (VMs):</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Outside means the VMs and other resources of your deployment, such as the network topology, tagging, references to the certs/secrets, and role-based access control.</source>
          <target state="new">Outside means the VMs and other resources of your deployment, such as the network topology, tagging, references to the certs/secrets, and role-based access control.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>All of these resources are part of your template.</source>
          <target state="new">All of these resources are part of your template.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Inside means the installed software and overall desired state configuration.</source>
          <target state="new">Inside means the installed software and overall desired state configuration.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Other mechanisms, such as VM extensions or scripts, are used in whole or in part.</source>
          <target state="new">Other mechanisms, such as VM extensions or scripts, are used in whole or in part.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>These mechanisms may be identified and executed by the template but aren’t in it.</source>
          <target state="new">These mechanisms may be identified and executed by the template but aren’t in it.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Common examples of activities you would do “inside the box” include -</source>
          <target state="new">Common examples of activities you would do “inside the box” include -</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Install or remove server roles and features</source>
          <target state="new">Install or remove server roles and features</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Install and configure software at the node or cluster level</source>
          <target state="new">Install and configure software at the node or cluster level</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Deploy websites on a web server</source>
          <target state="new">Deploy websites on a web server</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Deploy database schemas</source>
          <target state="new">Deploy database schemas</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Manage registry or other types of configuration settings</source>
          <target state="new">Manage registry or other types of configuration settings</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Manage files and directories</source>
          <target state="new">Manage files and directories</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Start, stop, and manage processes and services</source>
          <target state="new">Start, stop, and manage processes and services</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Manage local groups and user accounts</source>
          <target state="new">Manage local groups and user accounts</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Install and manage packages (.msi, .exe, yum, etc.)</source>
          <target state="new">Install and manage packages (.msi, .exe, yum, etc.)</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Manage environment variables</source>
          <target state="new">Manage environment variables</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Run native scripts (Windows PowerShell, bash, etc.)</source>
          <target state="new">Run native scripts (Windows PowerShell, bash, etc.)</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Desired state configuration (DSC)</source>
          <target state="new">Desired state configuration (DSC)</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Thinking about the internal state of your VMs beyond deployment, you’ll want to make sure this deployment doesn’t “drift” from the configuration that you have</source>
          <target state="new">Thinking about the internal state of your VMs beyond deployment, you’ll want to make sure this deployment doesn’t “drift” from the configuration that you have</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>defined and checked into source control.</source>
          <target state="new">defined and checked into source control.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This ensures your developers or operations staff don’t manually make ad-hoc changes to an environment that are not vetted,</source>
          <target state="new">This ensures your developers or operations staff don’t manually make ad-hoc changes to an environment that are not vetted,</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>tested or recorded in source control.</source>
          <target state="new">tested or recorded in source control.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is important, because the manual changes are not in source control, they are also not part of the standard deployment</source>
          <target state="new">This is important, because the manual changes are not in source control, they are also not part of the standard deployment</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>and will impact future automated deployments of the software.</source>
          <target state="new">and will impact future automated deployments of the software.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Beyond your internal employees, desired state configuration is also important from a security perspective.</source>
          <target state="new">Beyond your internal employees, desired state configuration is also important from a security perspective.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Hackers are regularly trying to compromise and exploit</source>
          <target state="new">Hackers are regularly trying to compromise and exploit</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>software systems.</source>
          <target state="new">software systems.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>When successful, its common to install files and otherwise change the state of a compromised system.</source>
          <target state="new">When successful, its common to install files and otherwise change the state of a compromised system.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Using desired state configuration, you can</source>
          <target state="new">Using desired state configuration, you can</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>identify deltas between the desired and actual state and restore a known configuration.</source>
          <target state="new">identify deltas between the desired and actual state and restore a known configuration.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>There are resource extensions for the most popular mechanisms for DSC - PowerShell DSC, Chef, and Puppet.</source>
          <target state="new">There are resource extensions for the most popular mechanisms for DSC - PowerShell DSC, Chef, and Puppet.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Each of these can deploy the initial state of your VM and</source>
          <target state="new">Each of these can deploy the initial state of your VM and</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>also be used to make sure the desired state is maintained.</source>
          <target state="new">also be used to make sure the desired state is maintained.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Common template scopes</source>
          <target state="new">Common template scopes</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In our experience, we’ve seen three key solution templates scopes emerge.</source>
          <target state="new">In our experience, we’ve seen three key solution templates scopes emerge.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>These three scopes – capacity, capability, and end-to-end solution – are described in</source>
          <target state="new">These three scopes – capacity, capability, and end-to-end solution – are described in</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>more detail below.</source>
          <target state="new">more detail below.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Capacity scope</source>
          <target state="new">Capacity scope</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A capacity scope delivers a set of resources in a standard topology that is pre-configured to be in compliance with regulations and policies.</source>
          <target state="new">A capacity scope delivers a set of resources in a standard topology that is pre-configured to be in compliance with regulations and policies.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The most common</source>
          <target state="new">The most common</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>example is deploying a standard development environment in an Enterprise IT or SI scenario.</source>
          <target state="new">example is deploying a standard development environment in an Enterprise IT or SI scenario.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Capability scope</source>
          <target state="new">Capability scope</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A capability scope is focused on deploying and configuring a topology for a given technology.</source>
          <target state="new">A capability scope is focused on deploying and configuring a topology for a given technology.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Common scenarios including technologies such as SQL Server,</source>
          <target state="new">Common scenarios including technologies such as SQL Server,</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Cassandra, Hadoop, etc.</source>
          <target state="new">Cassandra, Hadoop, etc.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>End-to-end solution scope</source>
          <target state="new">End-to-end solution scope</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>An End-to-End Solution Scope is targeted beyond a single capability, and instead focused on delivering an end to end solution comprised of multiple capabilities.</source>
          <target state="new">An End-to-End Solution Scope is targeted beyond a single capability, and instead focused on delivering an end to end solution comprised of multiple capabilities.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A solution-scoped template scope manifests itself as a set of one or more capability scoped templates with solution specific resources, logic, and desired state.</source>
          <target state="new">A solution-scoped template scope manifests itself as a set of one or more capability scoped templates with solution specific resources, logic, and desired state.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An example of a solution-scoped template is an end to end data pipeline solution template that might mix solution specific topology and state with</source>
          <target state="new">An example of a solution-scoped template is an end to end data pipeline solution template that might mix solution specific topology and state with</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>multiple capability scoped solution templates such as Kafka, Storm, and Hadoop.</source>
          <target state="new">multiple capability scoped solution templates such as Kafka, Storm, and Hadoop.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Choosing free-form vs. known configurations</source>
          <target state="new">Choosing free-form vs. known configurations</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You might initially think a template should give consumers the utmost flexibility, but many considerations affect the choice of whether to use free-form</source>
          <target state="new">You might initially think a template should give consumers the utmost flexibility, but many considerations affect the choice of whether to use free-form</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>configurations vs. known configurations.</source>
          <target state="new">configurations vs. known configurations.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This section identifies the key customer requirements and technical considerations that shaped the approach shared in</source>
          <target state="new">This section identifies the key customer requirements and technical considerations that shaped the approach shared in</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>this document.</source>
          <target state="new">this document.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Free-form configurations</source>
          <target state="new">Free-form configurations</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>On the surface, free-form configurations sound ideal.</source>
          <target state="new">On the surface, free-form configurations sound ideal.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>They allow you to select a VM type and provide an arbitrary number of nodes and attached disks for those nodes—and</source>
          <target state="new">They allow you to select a VM type and provide an arbitrary number of nodes and attached disks for those nodes—and</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>do so as parameters to a template.</source>
          <target state="new">do so as parameters to a template.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When you look closely, though, and consider templates that will deploy multiple virtual machines of different sizes, additional</source>
          <target state="new">When you look closely, though, and consider templates that will deploy multiple virtual machines of different sizes, additional</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>considerations appear that make the choice less appropriate in a number of scenarios.</source>
          <target state="new">considerations appear that make the choice less appropriate in a number of scenarios.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In the article <bpt id="p1">[</bpt>Virtual Machine and Cloud Service Sizes for Azure<ept id="p1">](http://msdn.microsoft.com/library/azure/dn641267.aspx)</ept> on the Azure website, the different VM</source>
          <target state="new">In the article <bpt id="p1">[</bpt>Virtual Machine and Cloud Service Sizes for Azure<ept id="p1">](http://msdn.microsoft.com/library/azure/dn641267.aspx)</ept> on the Azure website, the different VM</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>types and available sizes are identified, and each of the number of durable disks (2, 4, 8, 16, or 32) that can be attached.</source>
          <target state="new">types and available sizes are identified, and each of the number of durable disks (2, 4, 8, 16, or 32) that can be attached.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Each attached disk provides 500 IOPS</source>
          <target state="new">Each attached disk provides 500 IOPS</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>and multiples of these disks can be pooled for a multiplier of that number of IOPS.</source>
          <target state="new">and multiples of these disks can be pooled for a multiplier of that number of IOPS.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For example, 16 disks can be pooled to provide 8,000 IOPS.</source>
          <target state="new">For example, 16 disks can be pooled to provide 8,000 IOPS.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Pooling is done with</source>
          <target state="new">Pooling is done with</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>configuration in the operating system, using Microsoft Windows Storage Spaces or redundant array of inexpensive disks (RAID) in Linux.</source>
          <target state="new">configuration in the operating system, using Microsoft Windows Storage Spaces or redundant array of inexpensive disks (RAID) in Linux.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A free-form configuration enables the selection of a number of VM instances, a number of different VM types and sizes for those instances, a number of disks that</source>
          <target state="new">A free-form configuration enables the selection of a number of VM instances, a number of different VM types and sizes for those instances, a number of disks that</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>can vary based on the VM type, and one or more scripts to configure the VM contents.</source>
          <target state="new">can vary based on the VM type, and one or more scripts to configure the VM contents.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>It is common that a deployment may have multiple types of nodes, such as master and data nodes, so this flexibility is often provided for every node type.</source>
          <target state="new">It is common that a deployment may have multiple types of nodes, such as master and data nodes, so this flexibility is often provided for every node type.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>As you start to deploy clusters of any significance, you begin to work with multiples of all of these.</source>
          <target state="new">As you start to deploy clusters of any significance, you begin to work with multiples of all of these.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If you were deploying a Hadoop cluster, for example,</source>
          <target state="new">If you were deploying a Hadoop cluster, for example,</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>with 8 master nodes and 200 data nodes, and pooled 4 attached disks on each master node and pooled 16 attached disks per data node, you would have 208 VMs and</source>
          <target state="new">with 8 master nodes and 200 data nodes, and pooled 4 attached disks on each master node and pooled 16 attached disks per data node, you would have 208 VMs and</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>3,232 disks to manage.</source>
          <target state="new">3,232 disks to manage.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A storage account will throttle requests above its identified 20,000 transactions/second limit, so you should look at storage account partitioning and use</source>
          <target state="new">A storage account will throttle requests above its identified 20,000 transactions/second limit, so you should look at storage account partitioning and use</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>calculations to determine the appropriate number of storage accounts to accommodate this topology.</source>
          <target state="new">calculations to determine the appropriate number of storage accounts to accommodate this topology.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Given the multitude of combinations supported by the free-form</source>
          <target state="new">Given the multitude of combinations supported by the free-form</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>approach, dynamic calculations are required to determine the appropriate partitioning.</source>
          <target state="new">approach, dynamic calculations are required to determine the appropriate partitioning.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The Azure Resource Manager Template Language does not presently provide</source>
          <target state="new">The Azure Resource Manager Template Language does not presently provide</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>mathematical functions, so you must perform these calculations in code, generating a unique, hard-coded template with the appropriate details.</source>
          <target state="new">mathematical functions, so you must perform these calculations in code, generating a unique, hard-coded template with the appropriate details.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In enterprise IT and SI scenarios, someone must maintain the templates and provide support for the deployed topologies for one or more organizations.</source>
          <target state="new">In enterprise IT and SI scenarios, someone must maintain the templates and provide support for the deployed topologies for one or more organizations.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This additional overhead — different configurations and templates for each customer — is far from desirable.</source>
          <target state="new">This additional overhead — different configurations and templates for each customer — is far from desirable.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>You can use these templates to deploy environments in your customer’s Azure subscription, but both corporate IT teams and CSVs typically deploy them into their</source>
          <target state="new">You can use these templates to deploy environments in your customer’s Azure subscription, but both corporate IT teams and CSVs typically deploy them into their</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>own subscriptions, using a chargeback function to bill their customers.</source>
          <target state="new">own subscriptions, using a chargeback function to bill their customers.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In these scenarios, the goal is to deploy capacity for multiple customers across a pool</source>
          <target state="new">In these scenarios, the goal is to deploy capacity for multiple customers across a pool</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>of subscriptions and keep deployments densely populated into the subscriptions to minimize subscription sprawl—that is, more subscriptions to manage.</source>
          <target state="new">of subscriptions and keep deployments densely populated into the subscriptions to minimize subscription sprawl—that is, more subscriptions to manage.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>With truly</source>
          <target state="new">With truly</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>dynamic deployment sizes, achieving this type of density requires careful planning and additional development for scaffolding work on behalf of the organization.</source>
          <target state="new">dynamic deployment sizes, achieving this type of density requires careful planning and additional development for scaffolding work on behalf of the organization.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>In addition, you can’t create subscriptions via an API call but must do so manually through the portal.</source>
          <target state="new">In addition, you can’t create subscriptions via an API call but must do so manually through the portal.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>As the number of subscriptions increases, any resulting</source>
          <target state="new">As the number of subscriptions increases, any resulting</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>subscription sprawl requires human intervention—it can’t be automated.</source>
          <target state="new">subscription sprawl requires human intervention—it can’t be automated.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>With so much variability in the sizes of deployments, you would have to pre-provision a</source>
          <target state="new">With so much variability in the sizes of deployments, you would have to pre-provision a</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>number of subscriptions manually to ensure subscriptions are available.</source>
          <target state="new">number of subscriptions manually to ensure subscriptions are available.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Considering all these factors, a truly free-form configuration is less appealing than at first blush.</source>
          <target state="new">Considering all these factors, a truly free-form configuration is less appealing than at first blush.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Known configurations — the t-shirt sizing approach</source>
          <target state="new">Known configurations — the t-shirt sizing approach</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Rather than offer a template that provides total flexibility and countless variations, in our experience a common pattern is to provide the ability to select</source>
          <target state="new">Rather than offer a template that provides total flexibility and countless variations, in our experience a common pattern is to provide the ability to select</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>known configurations — in effect, standard t-shirt sizes such as sandbox, small, medium, and large.</source>
          <target state="new">known configurations — in effect, standard t-shirt sizes such as sandbox, small, medium, and large.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Other examples of t-shirt sizes are product offerings,</source>
          <target state="new">Other examples of t-shirt sizes are product offerings,</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>such as community edition or enterprise edition.</source>
          <target state="new">such as community edition or enterprise edition.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In other cases, it may be workload specific configurations of a technology – such as map reduce or no sql.</source>
          <target state="new">In other cases, it may be workload specific configurations of a technology – such as map reduce or no sql.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Many enterprise IT organizations, OSS vendors, and SIs make their offerings available today in this way in on-premises, virtualized environments</source>
          <target state="new">Many enterprise IT organizations, OSS vendors, and SIs make their offerings available today in this way in on-premises, virtualized environments</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>(enterprises) or as software-as-a-service (SaaS) offerings (CSVs and OSVs).</source>
          <target state="new">(enterprises) or as software-as-a-service (SaaS) offerings (CSVs and OSVs).</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>This approach provides good, known configurations of varying sizes that are preconfigured for customers.</source>
          <target state="new">This approach provides good, known configurations of varying sizes that are preconfigured for customers.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Without known configurations, end customers</source>
          <target state="new">Without known configurations, end customers</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>must determine cluster sizing on their own, factor in platform resource constraints, and do math to identify the resulting partitioning of storage accounts</source>
          <target state="new">must determine cluster sizing on their own, factor in platform resource constraints, and do math to identify the resulting partitioning of storage accounts</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>and other resources (due to cluster size and resource constraints).</source>
          <target state="new">and other resources (due to cluster size and resource constraints).</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Known configurations enable customers to easily select the right t-shirt size—that is,</source>
          <target state="new">Known configurations enable customers to easily select the right t-shirt size—that is,</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>a given deployment.</source>
          <target state="new">a given deployment.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>In addition to making a better experience for the customer, a small number of known configurations is easier to support and can help you</source>
          <target state="new">In addition to making a better experience for the customer, a small number of known configurations is easier to support and can help you</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>deliver a higher level of density.</source>
          <target state="new">deliver a higher level of density.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A known configuration approach focused on t-shirt sizes may also have varying number of nodes within a size.</source>
          <target state="new">A known configuration approach focused on t-shirt sizes may also have varying number of nodes within a size.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>For example, a small t-shirt size may be</source>
          <target state="new">For example, a small t-shirt size may be</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>between 3 and 10 nodes.</source>
          <target state="new">between 3 and 10 nodes.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The t-shirt size would be designed to accommodate up to 10 nodes and provide the consumer the ability to make free form selections up to</source>
          <target state="new">The t-shirt size would be designed to accommodate up to 10 nodes and provide the consumer the ability to make free form selections up to</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>the maximum size identified.</source>
          <target state="new">the maximum size identified.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A t-shirt size based on workload type, may be more free form in nature in terms of the number of nodes that can be deployed but will have workload distinct</source>
          <target state="new">A t-shirt size based on workload type, may be more free form in nature in terms of the number of nodes that can be deployed but will have workload distinct</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>node size and configuration of the software on the node.</source>
          <target state="new">node size and configuration of the software on the node.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>T-shirt sizes based on product offerings, such as community or Enterprise, may have distinct resource types and maximum number of nodes that can be deployed,</source>
          <target state="new">T-shirt sizes based on product offerings, such as community or Enterprise, may have distinct resource types and maximum number of nodes that can be deployed,</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>typically tied to licensing considerations or feature availability across the different offerings.</source>
          <target state="new">typically tied to licensing considerations or feature availability across the different offerings.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>You can also accommodate customers with unique variants using the JSON-based templates.</source>
          <target state="new">You can also accommodate customers with unique variants using the JSON-based templates.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>When dealing with outliers, you can incorporate the appropriate planning</source>
          <target state="new">When dealing with outliers, you can incorporate the appropriate planning</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>and considerations for development, support, and costing.</source>
          <target state="new">and considerations for development, support, and costing.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Based on the customer template consumption scenarios, requirements identified at the start of this document, and our hands-on experience creating numerous templates,</source>
          <target state="new">Based on the customer template consumption scenarios, requirements identified at the start of this document, and our hands-on experience creating numerous templates,</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>we identified a pattern for template decomposition.</source>
          <target state="new">we identified a pattern for template decomposition.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Capacity and capability-scoped solution templates</source>
          <target state="new">Capacity and capability-scoped solution templates</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Decomposition provides a modular approach to template development that supports reuse, extensibility, testing, and tooling.</source>
          <target state="new">Decomposition provides a modular approach to template development that supports reuse, extensibility, testing, and tooling.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>This section provides detail on how a</source>
          <target state="new">This section provides detail on how a</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>decomposition approach can be applied to templates with a Capacity or Capability scope.</source>
          <target state="new">decomposition approach can be applied to templates with a Capacity or Capability scope.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>In this approach, a main template receives parameter values from a template consumer, then links to several types of templates and scripts downstream as</source>
          <target state="new">In this approach, a main template receives parameter values from a template consumer, then links to several types of templates and scripts downstream as</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>shown below.</source>
          <target state="new">shown below.</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Parameters, static variables, and generated variables are used to provide values in and out of the linked templates.</source>
          <target state="new">Parameters, static variables, and generated variables are used to provide values in and out of the linked templates.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Template parameters</source>
          <target state="new">Template parameters</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Parameters are passed to a main template then to linked templates</source>
          <target state="new">Parameters are passed to a main template then to linked templates</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This following sections focus on the types of templates and scripts that a single template would be decomposed into and examines approaches for passing state</source>
          <target state="new">This following sections focus on the types of templates and scripts that a single template would be decomposed into and examines approaches for passing state</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>information among the templates.</source>
          <target state="new">information among the templates.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Each template and the script types in the image are described along with examples.</source>
          <target state="new">Each template and the script types in the image are described along with examples.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>For a contextual example, see</source>
          <target state="new">For a contextual example, see</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>"Putting it together: a sample implementation" later in this document.</source>
          <target state="new">"Putting it together: a sample implementation" later in this document.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Template metadata</source>
          <target state="new">Template metadata</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Template metadata (the metadata.json file) contains key/value pairs that describe a template in JSON, which can be read by humans and software systems.</source>
          <target state="new">Template metadata (the metadata.json file) contains key/value pairs that describe a template in JSON, which can be read by humans and software systems.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Template metadata</source>
          <target state="new">Template metadata</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Template metadata is described in the metadata.json file</source>
          <target state="new">Template metadata is described in the metadata.json file</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Software agents can retrieve the metadata.json file and publish the information and a link to the template in a web page or directory.</source>
          <target state="new">Software agents can retrieve the metadata.json file and publish the information and a link to the template in a web page or directory.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Elements</source>
          <target state="new">Elements</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>include <bpt id="p1">*</bpt>itemDisplayName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>description<ept id="p2">*</ept>, <bpt id="p3">*</bpt>summary<ept id="p3">*</ept>, <bpt id="p4">*</bpt>githubUsername<ept id="p4">*</ept>, and <bpt id="p5">*</bpt>dateUpdated<ept id="p5">*</ept>.</source>
          <target state="new">include <bpt id="p1">*</bpt>itemDisplayName<ept id="p1">*</ept>, <bpt id="p2">*</bpt>description<ept id="p2">*</ept>, <bpt id="p3">*</bpt>summary<ept id="p3">*</ept>, <bpt id="p4">*</bpt>githubUsername<ept id="p4">*</ept>, and <bpt id="p5">*</bpt>dateUpdated<ept id="p5">*</ept>.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>An example file is shown below in its entirety.</source>
          <target state="new">An example file is shown below in its entirety.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Main template</source>
          <target state="new">Main template</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The main template (the azuredeploy.json file) is called by an end user and is the template through which a set of user-defined parameters are presented.</source>
          <target state="new">The main template (the azuredeploy.json file) is called by an end user and is the template through which a set of user-defined parameters are presented.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Main template</source>
          <target state="new">Main template</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The main template receives parameters from a user</source>
          <target state="new">The main template receives parameters from a user</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The role of this template is to receive parameters from a user, use that information to populate a set of complex object variables, then execute the appropriate</source>
          <target state="new">The role of this template is to receive parameters from a user, use that information to populate a set of complex object variables, then execute the appropriate</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>set of related templates using template linking.</source>
          <target state="new">set of related templates using template linking.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>One parameter that is provided is a known configuration type also known as the t-shirt size parameter because of its standardized values such as small,</source>
          <target state="new">One parameter that is provided is a known configuration type also known as the t-shirt size parameter because of its standardized values such as small,</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>medium, or large.</source>
          <target state="new">medium, or large.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>In practice you can use this parameter in multiple ways.</source>
          <target state="new">In practice you can use this parameter in multiple ways.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>For details, see "Known configuration resources template" later in this document.</source>
          <target state="new">For details, see "Known configuration resources template" later in this document.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Some resources are deployed regardless of the known configuration specified by a user parameter.</source>
          <target state="new">Some resources are deployed regardless of the known configuration specified by a user parameter.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>These resources are provisioned using a single shared</source>
          <target state="new">These resources are provisioned using a single shared</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>resource template and are shared by other templates, so the shared resource template is run first.</source>
          <target state="new">resource template and are shared by other templates, so the shared resource template is run first.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Some resources are deployed optionally regardless of the specified known configuration.</source>
          <target state="new">Some resources are deployed optionally regardless of the specified known configuration.</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Shared resources template</source>
          <target state="new">Shared resources template</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This template delivers resources that are common across all known configurations.</source>
          <target state="new">This template delivers resources that are common across all known configurations.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>It contains the virtual network, availability sets, and other resources that</source>
          <target state="new">It contains the virtual network, availability sets, and other resources that</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>are required regardless of the known configuration template that is deployed.</source>
          <target state="new">are required regardless of the known configuration template that is deployed.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Template resources</source>
          <target state="new">Template resources</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Shared resources template</source>
          <target state="new">Shared resources template</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Resource names, such as the virtual network name, are based on the main template.</source>
          <target state="new">Resource names, such as the virtual network name, are based on the main template.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>You can specify them as a variable within that template or receive them as a</source>
          <target state="new">You can specify them as a variable within that template or receive them as a</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>parameter from the user, as required by your organization.</source>
          <target state="new">parameter from the user, as required by your organization.</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Optional resources template</source>
          <target state="new">Optional resources template</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The optional resources template contains resources that are programmatically deployed based on the value of a parameter or variable.</source>
          <target state="new">The optional resources template contains resources that are programmatically deployed based on the value of a parameter or variable.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Optional resources</source>
          <target state="new">Optional resources</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Optional resources template</source>
          <target state="new">Optional resources template</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, you can use an optional resources template to configure a jumpbox that enables indirect access to a deployed environment from the public</source>
          <target state="new">For example, you can use an optional resources template to configure a jumpbox that enables indirect access to a deployed environment from the public</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Internet.</source>
          <target state="new">Internet.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>You would use a parameter or variable to identify whether the jumpbox should be enabled and the <bpt id="p1">*</bpt>concat<ept id="p1">*</ept> function to build the target name for the</source>
          <target state="new">You would use a parameter or variable to identify whether the jumpbox should be enabled and the <bpt id="p1">*</bpt>concat<ept id="p1">*</ept> function to build the target name for the</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>template, such as <bpt id="p1">*</bpt>jumpbox_enabled.json<ept id="p1">*</ept>.</source>
          <target state="new">template, such as <bpt id="p1">*</bpt>jumpbox_enabled.json<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Template linking would use the resulting variable to install the jumpbox.</source>
          <target state="new">Template linking would use the resulting variable to install the jumpbox.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>You can link the optional resources template from multiple places:</source>
          <target state="new">You can link the optional resources template from multiple places:</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>When applicable to every deployment, create a parameter-driven link from the shared resources template.</source>
          <target state="new">When applicable to every deployment, create a parameter-driven link from the shared resources template.</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>When applicable to select known configurations—for example, only install on large deployments—create a parameter-driven or variable-driven link from the</source>
          <target state="new">When applicable to select known configurations—for example, only install on large deployments—create a parameter-driven or variable-driven link from the</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>known configuration template.</source>
          <target state="new">known configuration template.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Whether a given resource is optional may not be driven by the template consumer but instead by the template provider.</source>
          <target state="new">Whether a given resource is optional may not be driven by the template consumer but instead by the template provider.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>For example, you may need to satisfy a</source>
          <target state="new">For example, you may need to satisfy a</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>particular product requirement or product add-on (common for CSVs) or to enforce policies (common for SIs and enterprise IT groups).</source>
          <target state="new">particular product requirement or product add-on (common for CSVs) or to enforce policies (common for SIs and enterprise IT groups).</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>In these cases, you can use a</source>
          <target state="new">In these cases, you can use a</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>variable to identify whether the resource should be deployed.</source>
          <target state="new">variable to identify whether the resource should be deployed.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Known configuration resources template</source>
          <target state="new">Known configuration resources template</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>In the main template, a parameter can be exposed to allow the template consumer to specify a desired known configuration to deploy.</source>
          <target state="new">In the main template, a parameter can be exposed to allow the template consumer to specify a desired known configuration to deploy.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>In many cases, this known</source>
          <target state="new">In many cases, this known</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>configuration uses a t-shirt size approach with a set of fixed configuration sizes such as sandbox, small, medium, and large.</source>
          <target state="new">configuration uses a t-shirt size approach with a set of fixed configuration sizes such as sandbox, small, medium, and large.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Known configuration resources</source>
          <target state="new">Known configuration resources</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Known configuration resources template</source>
          <target state="new">Known configuration resources template</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The t-shirt size approach is commonly used, but the parameters can represent any set of known configurations.</source>
          <target state="new">The t-shirt size approach is commonly used, but the parameters can represent any set of known configurations.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>For example, you can specify a set of environments</source>
          <target state="new">For example, you can specify a set of environments</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>for an enterprise application such as Development, Test, and Product.</source>
          <target state="new">for an enterprise application such as Development, Test, and Product.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Or you could use it for a cloud service to represent different scale units, product versions,</source>
          <target state="new">Or you could use it for a cloud service to represent different scale units, product versions,</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>or product configurations such as Community, Developer, or Enterprise.</source>
          <target state="new">or product configurations such as Community, Developer, or Enterprise.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>As with the shared resource template, variables are passed to the known configurations template from either:</source>
          <target state="new">As with the shared resource template, variables are passed to the known configurations template from either:</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An end user—that is, the parameters sent to the main template.</source>
          <target state="new">An end user—that is, the parameters sent to the main template.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>An organization—that is, the variables in the main template that represent internal requirements or policies.</source>
          <target state="new">An organization—that is, the variables in the main template that represent internal requirements or policies.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Member resources template</source>
          <target state="new">Member resources template</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Within a known configuration, one or more member node types are often included.</source>
          <target state="new">Within a known configuration, one or more member node types are often included.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>For example, with Hadoop you would have master nodes and data nodes.</source>
          <target state="new">For example, with Hadoop you would have master nodes and data nodes.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>If you are installing MongoDB, you would have data nodes and an arbiter.</source>
          <target state="new">If you are installing MongoDB, you would have data nodes and an arbiter.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If you are deploying DataStax, you would have data nodes as well as a VM</source>
          <target state="new">If you are deploying DataStax, you would have data nodes as well as a VM</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>with OpsCenter installed.</source>
          <target state="new">with OpsCenter installed.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Members resources</source>
          <target state="new">Members resources</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Member resources template</source>
          <target state="new">Member resources template</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Each type of nodes can have different sizes of VMs, numbers of attached disks, scripts to install and set up the nodes, port configurations for the VM(s),</source>
          <target state="new">Each type of nodes can have different sizes of VMs, numbers of attached disks, scripts to install and set up the nodes, port configurations for the VM(s),</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>number of instances, and other details.</source>
          <target state="new">number of instances, and other details.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>So each node type gets its own member resource template, which contains the details for deploying and configuring an</source>
          <target state="new">So each node type gets its own member resource template, which contains the details for deploying and configuring an</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>infrastructure as well as executing scripts to deploy and configure software within the VM.</source>
          <target state="new">infrastructure as well as executing scripts to deploy and configure software within the VM.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>For VMs, typically two types of scripts are used, widely reusable and custom scripts.</source>
          <target state="new">For VMs, typically two types of scripts are used, widely reusable and custom scripts.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Widely reusable scripts</source>
          <target state="new">Widely reusable scripts</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Widely reusable scripts can be used across multiple types of templates.</source>
          <target state="new">Widely reusable scripts can be used across multiple types of templates.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>One of the better examples of these widely reusable scripts sets up RAID on Linux to</source>
          <target state="new">One of the better examples of these widely reusable scripts sets up RAID on Linux to</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>pool disks and gain a greater number of IOPS.</source>
          <target state="new">pool disks and gain a greater number of IOPS.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Regardless of the software being installed in the VM, this script provides reuse of proven practices for common scenarios.</source>
          <target state="new">Regardless of the software being installed in the VM, this script provides reuse of proven practices for common scenarios.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Reusable scripts</source>
          <target state="new">Reusable scripts</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Member resources templates can call widely reusable scripts</source>
          <target state="new">Member resources templates can call widely reusable scripts</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Custom scripts</source>
          <target state="new">Custom scripts</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Templates commonly call one or more scripts that install and configure software within VMs.</source>
          <target state="new">Templates commonly call one or more scripts that install and configure software within VMs.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A common pattern is seen with large topologies where multiple</source>
          <target state="new">A common pattern is seen with large topologies where multiple</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>instances of one or more member types are deployed.</source>
          <target state="new">instances of one or more member types are deployed.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>An installation script is initiated for every VM that can be run in parallel, followed by a setup script</source>
          <target state="new">An installation script is initiated for every VM that can be run in parallel, followed by a setup script</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>that is called after all VMs (or all VMs of a given member type) are deployed.</source>
          <target state="new">that is called after all VMs (or all VMs of a given member type) are deployed.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Custom scripts</source>
          <target state="new">Custom scripts</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Member resources templates can call scripts for a specific purpose such as VM configuration</source>
          <target state="new">Member resources templates can call scripts for a specific purpose such as VM configuration</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Capability-scoped solution template example - Redis</source>
          <target state="new">Capability-scoped solution template example - Redis</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To show how an implementation might work, let’s look at a practical example of building a template that will facilitate the deployment and configuration of</source>
          <target state="new">To show how an implementation might work, let’s look at a practical example of building a template that will facilitate the deployment and configuration of</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Redis in standard t-shirt sizes.</source>
          <target state="new">Redis in standard t-shirt sizes.</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>For the deployment, there will be set of shared resources (virtual network, storage account, availability sets) and an optional resource (jumpbox).</source>
          <target state="new">For the deployment, there will be set of shared resources (virtual network, storage account, availability sets) and an optional resource (jumpbox).</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>There are</source>
          <target state="new">There are</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>multiple known configurations represented as t-shirt sizes (small, medium, large) but each with a single node type.</source>
          <target state="new">multiple known configurations represented as t-shirt sizes (small, medium, large) but each with a single node type.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>There are also two purpose specific scripts</source>
          <target state="new">There are also two purpose specific scripts</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>(installation, configuration).</source>
          <target state="new">(installation, configuration).</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Creating the template files</source>
          <target state="new">Creating the template files</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>You would create a Main Template named azuredeploy.json.</source>
          <target state="new">You would create a Main Template named azuredeploy.json.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>You create Shared Resources Template named shared-resources.json</source>
          <target state="new">You create Shared Resources Template named shared-resources.json</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>You create an Optional Resource Template to enable the deployment of a jumpbox, named jumpbox_enabled.json</source>
          <target state="new">You create an Optional Resource Template to enable the deployment of a jumpbox, named jumpbox_enabled.json</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Redis will use just a single node type, so you’ll create a single Member Resource Template named node-resources.json.</source>
          <target state="new">Redis will use just a single node type, so you’ll create a single Member Resource Template named node-resources.json.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>With Redis, you’ll want to install each individual node and then, once all nodes are installed you’ll want to set up the cluster.</source>
          <target state="new">With Redis, you’ll want to install each individual node and then, once all nodes are installed you’ll want to set up the cluster.</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>You have scripts to</source>
          <target state="new">You have scripts to</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>accommodate both of these, redis-cluster-install.sh and redis-cluster-setup.sh.</source>
          <target state="new">accommodate both of these, redis-cluster-install.sh and redis-cluster-setup.sh.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Linking the templates</source>
          <target state="new">Linking the templates</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Using template linking, the main template links out to the shared resources template, which establishes the virtual network.</source>
          <target state="new">Using template linking, the main template links out to the shared resources template, which establishes the virtual network.</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Logic is added within the main template to enable consumers of the template to specify if a jumpbox should be deployed.</source>
          <target state="new">Logic is added within the main template to enable consumers of the template to specify if a jumpbox should be deployed.</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>enabled<ept id="p1">*</ept> value for the <bpt id="p2">*</bpt>EnableJumpbox<ept id="p2">*</ept></source>
          <target state="new">An <bpt id="p1">*</bpt>enabled<ept id="p1">*</ept> value for the <bpt id="p2">*</bpt>EnableJumpbox<ept id="p2">*</ept></target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>parameter indicates that the customer wants to deploy a jumpbox.</source>
          <target state="new">parameter indicates that the customer wants to deploy a jumpbox.</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>When this value is provided, the template concatenates <bpt id="p1">*</bpt>_enabled<ept id="p1">*</ept> as a suffix to a base template</source>
          <target state="new">When this value is provided, the template concatenates <bpt id="p1">*</bpt>_enabled<ept id="p1">*</ept> as a suffix to a base template</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>name for the jumpbox capability.</source>
          <target state="new">name for the jumpbox capability.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The main template applies the <bpt id="p1">*</bpt>large<ept id="p1">*</ept> parameter value as a suffix to a base template name for t-shirt sizes, and then uses that value in a template link out to</source>
          <target state="new">The main template applies the <bpt id="p1">*</bpt>large<ept id="p1">*</ept> parameter value as a suffix to a base template name for t-shirt sizes, and then uses that value in a template link out to</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>technology_on_os_large.json<ept id="p1">*</ept>.</source>
          <target state="new"><bpt id="p1">*</bpt>technology_on_os_large.json<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The topology would resemble this illustration.</source>
          <target state="new">The topology would resemble this illustration.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Redis template</source>
          <target state="new">Redis template</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Template structure for a Redis template</source>
          <target state="new">Template structure for a Redis template</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Configuring state</source>
          <target state="new">Configuring state</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>For the nodes in the cluster, there are two steps to configuring the state, both represented by Purpose Specific Scripts.</source>
          <target state="new">For the nodes in the cluster, there are two steps to configuring the state, both represented by Purpose Specific Scripts.</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>“redis-cluster-install.sh” will</source>
          <target state="new">“redis-cluster-install.sh” will</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>perform an installation of Redis and “redis-cluster-setup.sh” will set up the cluster.</source>
          <target state="new">perform an installation of Redis and “redis-cluster-setup.sh” will set up the cluster.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Supporting Different Size Deployments</source>
          <target state="new">Supporting Different Size Deployments</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Inside of variables, the t-shirt size template specifies the number of nodes of each type to deploy for the specified size (<bpt id="p1">*</bpt>large<ept id="p1">*</ept>).</source>
          <target state="new">Inside of variables, the t-shirt size template specifies the number of nodes of each type to deploy for the specified size (<bpt id="p1">*</bpt>large<ept id="p1">*</ept>).</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>It then deploys that number of</source>
          <target state="new">It then deploys that number of</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>VM instances using resource loops, providing unique names to resources by appending a node name with a numeric sequence number from <bpt id="p1">*</bpt>copyIndex()<ept id="p1">*</ept>.</source>
          <target state="new">VM instances using resource loops, providing unique names to resources by appending a node name with a numeric sequence number from <bpt id="p1">*</bpt>copyIndex()<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>It does this for</source>
          <target state="new">It does this for</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>both hot and warm zone VMs, as defined in the t-shirt name template</source>
          <target state="new">both hot and warm zone VMs, as defined in the t-shirt name template</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Decomposition and end-to-end solution scoped templates</source>
          <target state="new">Decomposition and end-to-end solution scoped templates</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>A solution template with an end-to-end solution scope is focused on delivering an end-to-end solution.</source>
          <target state="new">A solution template with an end-to-end solution scope is focused on delivering an end-to-end solution.</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>This will typically be a composition of multiple capability</source>
          <target state="new">This will typically be a composition of multiple capability</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>scoped templates with additional resources, logic and state.</source>
          <target state="new">scoped templates with additional resources, logic and state.</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>As highlighted in the image below, the same model used for capability scoped templates is extended for templates with an End-to-End Solution Scope.</source>
          <target state="new">As highlighted in the image below, the same model used for capability scoped templates is extended for templates with an End-to-End Solution Scope.</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>A Shared Resources Template and Optional Resources Templates serve the same function as in the capacity and capability scoped template approaches, but are</source>
          <target state="new">A Shared Resources Template and Optional Resources Templates serve the same function as in the capacity and capability scoped template approaches, but are</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>scoped for the end to end solution.</source>
          <target state="new">scoped for the end to end solution.</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>As end to end solution scoped templates also can typically have t-shirt sizes, the Known Configuration Resources template reflects what is required for a</source>
          <target state="new">As end to end solution scoped templates also can typically have t-shirt sizes, the Known Configuration Resources template reflects what is required for a</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>given known configuration of the solution.</source>
          <target state="new">given known configuration of the solution.</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The Known Configuration Resources Template will link to one or more capability scoped solution templates that are relevant to the end to end solution as well</source>
          <target state="new">The Known Configuration Resources Template will link to one or more capability scoped solution templates that are relevant to the end to end solution as well</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>as the Member Resource Templates that are required for the end to end solution.</source>
          <target state="new">as the Member Resource Templates that are required for the end to end solution.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>As the t-shirt size of the solution may be different than that of individual capability scoped template, variables within the Known Configuration Resources</source>
          <target state="new">As the t-shirt size of the solution may be different than that of individual capability scoped template, variables within the Known Configuration Resources</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Template are used to provide the appropriate values for downstream capability scoped solution templates to deploy the appropriate t-shirt size.</source>
          <target state="new">Template are used to provide the appropriate values for downstream capability scoped solution templates to deploy the appropriate t-shirt size.</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>End-to-end</source>
          <target state="new">End-to-end</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The model used for capacity or capability scoped solution templates can be readily extended for end to end solution template scopes</source>
          <target state="new">The model used for capacity or capability scoped solution templates can be readily extended for end to end solution template scopes</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Preparing templates for the Marketplace</source>
          <target state="new">Preparing templates for the Marketplace</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>The above approach readily accommodates scenarios where Enterprises, SIs, and CSVs want to either deploy the templates themselves or enable their customers to</source>
          <target state="new">The above approach readily accommodates scenarios where Enterprises, SIs, and CSVs want to either deploy the templates themselves or enable their customers to</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>deploy on their own.</source>
          <target state="new">deploy on their own.</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Another desired scenario is deploying a template via the marketplace.</source>
          <target state="new">Another desired scenario is deploying a template via the marketplace.</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>This decomposition approach will work for the marketplace as well, with some minor changes.</source>
          <target state="new">This decomposition approach will work for the marketplace as well, with some minor changes.</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>As mentioned previously, templates can be used to offer distinct deployment types for sale in the marketplace.</source>
          <target state="new">As mentioned previously, templates can be used to offer distinct deployment types for sale in the marketplace.</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Distinct deployment types may be</source>
          <target state="new">Distinct deployment types may be</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>t-shirt sizes (small, medium, large) , product/audience type (community, developer, enterprise), or feature type (basic, high availability).</source>
          <target state="new">t-shirt sizes (small, medium, large) , product/audience type (community, developer, enterprise), or feature type (basic, high availability).</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>As shown below, the existing end to end solution or capability scoped templates can be readily utilized to list the different known configurations in the marketplace.</source>
          <target state="new">As shown below, the existing end to end solution or capability scoped templates can be readily utilized to list the different known configurations in the marketplace.</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The parameters to the main template are first modified to remove the inbound parameter named tshirtSize.</source>
          <target state="new">The parameters to the main template are first modified to remove the inbound parameter named tshirtSize.</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>While the distinct deployment types map to the Known Configuration Resources Template, they also need the common resources and configuration found in</source>
          <target state="new">While the distinct deployment types map to the Known Configuration Resources Template, they also need the common resources and configuration found in</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>the Shared Resources Template and potentially those in Optional Resource Templates.</source>
          <target state="new">the Shared Resources Template and potentially those in Optional Resource Templates.</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>If you want to publish your template to the marketplace, you simply establish distinct copies of your Main template that replaces the previously available</source>
          <target state="new">If you want to publish your template to the marketplace, you simply establish distinct copies of your Main template that replaces the previously available</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>inbound parameter of tshirtSize to a variable embedded within the template.</source>
          <target state="new">inbound parameter of tshirtSize to a variable embedded within the template.</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Marketplace</source>
          <target state="new">Marketplace</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Adapting a solution scoped template for the marketplace</source>
          <target state="new">Adapting a solution scoped template for the marketplace</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>To see contextual examples of how to implement the design priciples presented in this topic, see <bpt id="p1">[</bpt>Contextual examples of best practices for implementing templates<ept id="p1">](best-practices-resource-manager-examples.md)</ept>.</source>
          <target state="new">To see contextual examples of how to implement the design priciples presented in this topic, see <bpt id="p1">[</bpt>Contextual examples of best practices for implementing templates<ept id="p1">](best-practices-resource-manager-examples.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>For recommendations about how to handle security in Azure Resource Manager, see <bpt id="p1">[</bpt>Security considerations for Azure Resource Manager<ept id="p1">](best-practices-resource-manager-security.md)</ept></source>
          <target state="new">For recommendations about how to handle security in Azure Resource Manager, see <bpt id="p1">[</bpt>Security considerations for Azure Resource Manager<ept id="p1">](best-practices-resource-manager-security.md)</ept></target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>To learn about sharing state into and out of templates, see <bpt id="p1">[</bpt>Sharing state in Azure Resource Manager templates<ept id="p1">](best-practices-resource-manager-state.md)</ept>.</source>
          <target state="new">To learn about sharing state into and out of templates, see <bpt id="p1">[</bpt>Sharing state in Azure Resource Manager templates<ept id="p1">](best-practices-resource-manager-state.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a336bc83de523e6d4011d607d560ccb4ceec5ed</xliffext:olfilehash>
  </header>
</xliff>