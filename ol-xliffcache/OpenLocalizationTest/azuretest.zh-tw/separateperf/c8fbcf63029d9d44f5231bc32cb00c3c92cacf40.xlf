<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade</source>
          <target state="new">Service Fabric Application Upgrade</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article provides an introduction to upgrading a Service Fabric application.</source>
          <target state="new">This article provides an introduction to upgrading a Service Fabric application.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service Fabric Application Upgrade</source>
          <target state="new">Service Fabric Application Upgrade</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A Service Fabric application is a collection of services.</source>
          <target state="new">A Service Fabric application is a collection of services.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>During an upgrade, Service Fabric compares the new <bpt id="p1">[</bpt>application manifest<ept id="p1">](service-fabric-application-model.md#describe-an-application)</ept>  with the previous version and determines which services in the application require updates.</source>
          <target state="new">During an upgrade, Service Fabric compares the new <bpt id="p1">[</bpt>application manifest<ept id="p1">](service-fabric-application-model.md#describe-an-application)</ept>  with the previous version and determines which services in the application require updates.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is determined by comparing the version numbers in the service manifests to the previous version.</source>
          <target state="new">This is determined by comparing the version numbers in the service manifests to the previous version.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a service has not changed, that service is not upgraded.</source>
          <target state="new">If a service has not changed, that service is not upgraded.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Rolling upgrades overview</source>
          <target state="new">Rolling upgrades overview</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In a rolling application upgrade, the upgrade is performed in stages.</source>
          <target state="new">In a rolling application upgrade, the upgrade is performed in stages.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At each stage, the upgrade is applied to a subset of nodes in the cluster, called an upgrade domain.</source>
          <target state="new">At each stage, the upgrade is applied to a subset of nodes in the cluster, called an upgrade domain.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As a result, the application remains available throughout the upgrade.</source>
          <target state="new">As a result, the application remains available throughout the upgrade.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>During the upgrade, the cluster may contain a mix of the old and new versions.</source>
          <target state="new">During the upgrade, the cluster may contain a mix of the old and new versions.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For that reason, the two versions must be forward and backward compatible.</source>
          <target state="new">For that reason, the two versions must be forward and backward compatible.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If they are not compatible, the application administrator is responsible for staging a multiple-phase upgrade to maintain availability.</source>
          <target state="new">If they are not compatible, the application administrator is responsible for staging a multiple-phase upgrade to maintain availability.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is done by doing an upgrade with an intermediate version of the application that is compatible with the previous version before upgrading to the final version.</source>
          <target state="new">This is done by doing an upgrade with an intermediate version of the application that is compatible with the previous version before upgrading to the final version.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Upgrade domains are specified in the cluster manifest when you configure the cluster.</source>
          <target state="new">Upgrade domains are specified in the cluster manifest when you configure the cluster.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You should not assume that upgrade domains will receive updates in a particular order.</source>
          <target state="new">You should not assume that upgrade domains will receive updates in a particular order.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An upgrade domain is a logical unit of deployment for an application.</source>
          <target state="new">An upgrade domain is a logical unit of deployment for an application.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Upgrade domains allow for the services to remain at high availability during an upgrade.</source>
          <target state="new">Upgrade domains allow for the services to remain at high availability during an upgrade.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Non-rolling upgrades are possible, if the upgrade is applied to all nodes in the cluster, which is the case when the application has only one upgrade domain.</source>
          <target state="new">Non-rolling upgrades are possible, if the upgrade is applied to all nodes in the cluster, which is the case when the application has only one upgrade domain.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is not recommended since the service will be down and not available at the time of upgrade.</source>
          <target state="new">This is not recommended since the service will be down and not available at the time of upgrade.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Additionally, Azure doesn't provide any guarantees when a cluster is set up with only one upgrade domain.</source>
          <target state="new">Additionally, Azure doesn't provide any guarantees when a cluster is set up with only one upgrade domain.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Health checks during upgrades</source>
          <target state="new">Health checks during upgrades</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an upgrade, health policies have to be set (or default values may be used).</source>
          <target state="new">For an upgrade, health policies have to be set (or default values may be used).</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An upgrade is termed successful when all upgrade domains are upgraded within the timeouts specified and all upgrade domains are deemed healthy.</source>
          <target state="new">An upgrade is termed successful when all upgrade domains are upgraded within the timeouts specified and all upgrade domains are deemed healthy.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A healthy upgrade domain means that the upgrade domain passes all the health checks specified in the health policy - for example, a health policy may mandate that all services within an application instance must be <ph id="ph1">&lt;em&gt;</ph>healthy<ph id="ph2">&lt;/em&gt;</ph>, as health is defined by Service Fabric.</source>
          <target state="new">A healthy upgrade domain means that the upgrade domain passes all the health checks specified in the health policy - for example, a health policy may mandate that all services within an application instance must be <ph id="ph1">&lt;em&gt;</ph>healthy<ph id="ph2">&lt;/em&gt;</ph>, as health is defined by Service Fabric.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Health policies and checks during upgrade by Service Fabric are Service and Application agnostic.</source>
          <target state="new">Health policies and checks during upgrade by Service Fabric are Service and Application agnostic.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>That is, no service specific tests are checked.</source>
          <target state="new">That is, no service specific tests are checked.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, your service have a minimal throughput requirement.</source>
          <target state="new">For example, your service have a minimal throughput requirement.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, Service Fabric does not have the information to test for that, and hence will not check throughput as defined for your application.</source>
          <target state="new">However, Service Fabric does not have the information to test for that, and hence will not check throughput as defined for your application.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Please refer to the <bpt id="p1">[</bpt>Health articles<ept id="p1">](service-fabric-health-introduction.md)</ept> for the checks that are performed - the checks during upgrade include if the application package was copied correctly, and if the instance was started and so on.</source>
          <target state="new">Please refer to the <bpt id="p1">[</bpt>Health articles<ept id="p1">](service-fabric-health-introduction.md)</ept> for the checks that are performed - the checks during upgrade include if the application package was copied correctly, and if the instance was started and so on.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The application health is an aggregation of the child entities of the application.</source>
          <target state="new">The application health is an aggregation of the child entities of the application.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In short, Service Fabric evaluates the health of the application through the health reported on the application as well as all the health of the services for the application.</source>
          <target state="new">In short, Service Fabric evaluates the health of the application through the health reported on the application as well as all the health of the services for the application.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The health of the application services are further evaluated by aggregating the health of their children such as the service replica.</source>
          <target state="new">The health of the application services are further evaluated by aggregating the health of their children such as the service replica.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Once the application health policy is satisfied, the upgrade can proceed or if the health policy is violated the application upgrade fails.</source>
          <target state="new">Once the application health policy is satisfied, the upgrade can proceed or if the health policy is violated the application upgrade fails.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Upgrade modes</source>
          <target state="new">Upgrade modes</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The common mode (and recommended) for upgrade is Monitored.</source>
          <target state="new">The common mode (and recommended) for upgrade is Monitored.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Monitored performs the upgrade on one upgrade domain, and if all health checks pass (per the policy specified), moves on to the next upgrade domain automatically, and so on.</source>
          <target state="new">Monitored performs the upgrade on one upgrade domain, and if all health checks pass (per the policy specified), moves on to the next upgrade domain automatically, and so on.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the health checks fail and/or timeouts reached, the upgrade is either rolled back for the upgrade domain, or the mode changed to UnmonitoredManual if that is the option selected at the time of upgrade.</source>
          <target state="new">If the health checks fail and/or timeouts reached, the upgrade is either rolled back for the upgrade domain, or the mode changed to UnmonitoredManual if that is the option selected at the time of upgrade.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>UnmonitoredManual would need manual intervention after every upgrade on an upgrade domain to kick off the upgrade on the next upgrade domain.</source>
          <target state="new">UnmonitoredManual would need manual intervention after every upgrade on an upgrade domain to kick off the upgrade on the next upgrade domain.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are no Service Fabric health checks that are performed, and is reliant on the intervener to perform the health or status checks before starting the upgrade in the next upgrade domain.</source>
          <target state="new">There are no Service Fabric health checks that are performed, and is reliant on the intervener to perform the health or status checks before starting the upgrade in the next upgrade domain.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Application Upgrade Flowchart</source>
          <target state="new">Application Upgrade Flowchart</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The flowchart below aids with the understanding of the upgrade process of a Service Fabric application.</source>
          <target state="new">The flowchart below aids with the understanding of the upgrade process of a Service Fabric application.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In particular, the flow describes how the timeouts including <bpt id="p1">*</bpt>HealthCheckStableDuration<ept id="p1">*</ept>, <bpt id="p2">*</bpt>HealthCheckRetryTimeout<ept id="p2">*</ept> and <bpt id="p3">*</bpt>UpgradeHealthCheckInterval<ept id="p3">*</ept> help control when the upgrade in one upgrade domain is considered a success or a failure.</source>
          <target state="new">In particular, the flow describes how the timeouts including <bpt id="p1">*</bpt>HealthCheckStableDuration<ept id="p1">*</ept>, <bpt id="p2">*</bpt>HealthCheckRetryTimeout<ept id="p2">*</ept> and <bpt id="p3">*</bpt>UpgradeHealthCheckInterval<ept id="p3">*</ept> help control when the upgrade in one upgrade domain is considered a success or a failure.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The upgrade process for a Service Fabric Application</source>
          <target state="new">The upgrade process for a Service Fabric Application</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Upgrade Tutorial</source>
          <target state="new">Upgrade Tutorial</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Upgrade Parameters</source>
          <target state="new">Upgrade Parameters</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data Serialization</source>
          <target state="new">Data Serialization</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Advanced Topics</source>
          <target state="new">Advanced Topics</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Troubleshooting Application Upgrade</source>
          <target state="new">Troubleshooting Application Upgrade</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8fbcf63029d9d44f5231bc32cb00c3c92cacf40</xliffext:olfilehash>
  </header>
</xliff>