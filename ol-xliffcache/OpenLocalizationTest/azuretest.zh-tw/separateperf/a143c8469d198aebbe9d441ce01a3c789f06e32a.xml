{
  "nodes": [
    {
      "content": "Migrate your SQL code to SQL Data Warehouse | Microsoft Azure",
      "pos": [
        26,
        87
      ]
    },
    {
      "content": "Tips for migrating your SQL code to Azure SQL Data Warehouse for developing solutions.",
      "pos": [
        105,
        191
      ]
    },
    {
      "content": "Migrate your SQL code to SQL Data Warehouse",
      "pos": [
        529,
        572
      ]
    },
    {
      "content": "In order to ensure your code is compliant with SQL Data Warehouse it is quite likely that you will need to make changes to your code base.",
      "pos": [
        574,
        712
      ]
    },
    {
      "content": "Some SQL Data Warehouse features can also significantly improve performance as they are designed to work directly in a distributed fashion.",
      "pos": [
        713,
        852
      ]
    },
    {
      "content": "However, to maintain performance and scale, some features are also not available.",
      "pos": [
        853,
        934
      ]
    },
    {
      "content": "Transact-SQL code changes",
      "pos": [
        939,
        964
      ]
    },
    {
      "content": "The following list summarizes the main features that are not supported in Azure SQL Data Warehouse.",
      "pos": [
        966,
        1065
      ]
    },
    {
      "content": "The links provided take you to workarounds for the unsupported feature:",
      "pos": [
        1066,
        1137
      ]
    },
    {
      "content": "ANSI joins on updates",
      "pos": [
        1142,
        1163
      ]
    },
    {
      "content": "ANSI joins on deletes",
      "pos": [
        1170,
        1191
      ]
    },
    {
      "content": "merge statement",
      "pos": [
        1198,
        1213
      ]
    },
    {
      "content": "cross-database joins",
      "pos": [
        1219,
        1239
      ]
    },
    {
      "content": "cursors",
      "pos": [
        1243,
        1250
      ]
    },
    {
      "content": "SELECT..INTO",
      "pos": [
        1257,
        1269
      ]
    },
    {
      "content": "INSERT..EXEC",
      "pos": [
        1276,
        1288
      ]
    },
    {
      "content": "output clause",
      "pos": [
        1294,
        1307
      ]
    },
    {
      "content": "inline user-defined functions",
      "pos": [
        1310,
        1339
      ]
    },
    {
      "content": "multi-statement functions",
      "pos": [
        1342,
        1367
      ]
    },
    {
      "content": "[recursive common table expressions (CTE)](#Recursive-common-table-expressions-(CTE)",
      "pos": [
        1370,
        1454
      ]
    },
    {
      "content": "updates through CTEs",
      "pos": [
        1458,
        1478
      ]
    },
    {
      "content": "CLR functions and procedures",
      "pos": [
        1505,
        1533
      ]
    },
    {
      "content": "$partition function",
      "pos": [
        1536,
        1555
      ]
    },
    {
      "content": "table variables",
      "pos": [
        1558,
        1573
      ]
    },
    {
      "content": "table value parameters",
      "pos": [
        1576,
        1598
      ]
    },
    {
      "content": "distributed transactions",
      "pos": [
        1601,
        1625
      ]
    },
    {
      "content": "commit / rollback work",
      "pos": [
        1628,
        1650
      ]
    },
    {
      "content": "save transaction",
      "pos": [
        1653,
        1669
      ]
    },
    {
      "content": "execution contexts (EXECUTE AS)",
      "pos": [
        1672,
        1703
      ]
    },
    {
      "content": "group by clause with rollup / cube / grouping sets options",
      "pos": [
        1707,
        1765
      ]
    },
    {
      "content": "nesting levels beyond 8",
      "pos": [
        1772,
        1795
      ]
    },
    {
      "content": "updating through views",
      "pos": [
        1802,
        1824
      ]
    },
    {
      "content": "use of select for variable assignment",
      "pos": [
        1831,
        1868
      ]
    },
    {
      "content": "no MAX data type for dynamic SQL strings",
      "pos": [
        1875,
        1915
      ]
    },
    {
      "content": "Happily most of these limitations can be worked around.",
      "pos": [
        1920,
        1975
      ]
    },
    {
      "content": "Explanations have been included in the relevant development articles referenced above.",
      "pos": [
        1976,
        2062
      ]
    },
    {
      "content": "Recursive common table expressions (CTE)",
      "pos": [
        2068,
        2108
      ]
    },
    {
      "content": "This is a complex scenario with no quick fix.",
      "pos": [
        2110,
        2155
      ]
    },
    {
      "content": "The CTE will need to be broken down and handled in steps.",
      "pos": [
        2156,
        2213
      ]
    },
    {
      "content": "You can typically use a fairly complex loop; populating a temporary table as you iterate over the recursive interim queries.",
      "pos": [
        2214,
        2338
      ]
    },
    {
      "content": "Once the temporary table is populated you can then return the data as a single result set.",
      "pos": [
        2339,
        2429
      ]
    },
    {
      "content": "A similar approach has been used to solve <ph id=\"ph1\">`GROUP BY WITH CUBE`</ph> in the <bpt id=\"p1\">[</bpt>group by clause with rollup / cube / grouping sets options<ept id=\"p1\">][]</ept> article.",
      "pos": [
        2430,
        2571
      ]
    },
    {
      "content": "Updates through CTEs",
      "pos": [
        2577,
        2597
      ]
    },
    {
      "content": "If the CTE is non-recursive then you can re-write the query to use sub-queries.",
      "pos": [
        2599,
        2678
      ]
    },
    {
      "content": "For recursive CTEs you will need to build up the resultset first as described above; then join the final resultset to the target table and perform the update.",
      "pos": [
        2679,
        2837
      ]
    },
    {
      "content": "System functions",
      "pos": [
        2843,
        2859
      ]
    },
    {
      "content": "There are also some system functions that are not supported.",
      "pos": [
        2861,
        2921
      ]
    },
    {
      "content": "Some of the main ones you might typically find used in data warehousing are:",
      "pos": [
        2922,
        2998
      ]
    },
    {
      "content": "NEWID()",
      "pos": [
        3002,
        3009
      ]
    },
    {
      "content": "NEWSEQUENTIALID()",
      "pos": [
        3012,
        3029
      ]
    },
    {
      "content": "@@NESTLEVEL()",
      "pos": [
        3032,
        3045
      ]
    },
    {
      "content": "@@IDENTITY()",
      "pos": [
        3048,
        3060
      ]
    },
    {
      "content": "@@ROWCOUNT()",
      "pos": [
        3063,
        3075
      ]
    },
    {
      "content": "ROWCOUNT_BIG",
      "pos": [
        3078,
        3090
      ]
    },
    {
      "content": "ERROR_LINE()",
      "pos": [
        3093,
        3105
      ]
    },
    {
      "content": "Again many of these issues can be worked around.",
      "pos": [
        3107,
        3155
      ]
    },
    {
      "content": "For example the code below is an alternative solution for retrieving @@ROWCOUNT information:",
      "pos": [
        3158,
        3250
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        3639,
        3649
      ]
    },
    {
      "pos": [
        3650,
        3730
      ],
      "content": "For advice on developing your code please refer to the <bpt id=\"p1\">[</bpt>development overview<ept id=\"p1\">][]</ept>."
    }
  ],
  "content": "<properties\n   pageTitle=\"Migrate your SQL code to SQL Data Warehouse | Microsoft Azure\"\n   description=\"Tips for migrating your SQL code to Azure SQL Data Warehouse for developing solutions.\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.devlang=\"NA\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"data-services\"\n   ms.date=\"06/25/2015\"\n   ms.author=\"JRJ@BigBangData.co.uk;barbkess\"/>\n\n# Migrate your SQL code to SQL Data Warehouse\n\nIn order to ensure your code is compliant with SQL Data Warehouse it is quite likely that you will need to make changes to your code base. Some SQL Data Warehouse features can also significantly improve performance as they are designed to work directly in a distributed fashion. However, to maintain performance and scale, some features are also not available.\n\n## Transact-SQL code changes\n\nThe following list summarizes the main features that are not supported in Azure SQL Data Warehouse. The links provided take you to workarounds for the unsupported feature:\n\n- [ANSI joins on updates][]\n- [ANSI joins on deletes][]\n- [merge statement][]\n- cross-database joins\n- [cursors][]\n- [SELECT..INTO][]\n- [INSERT..EXEC][]\n- output clause\n- inline user-defined functions\n- multi-statement functions\n- [recursive common table expressions (CTE)](#Recursive-common-table-expressions-(CTE)\n- [updates through CTEs](#Updates-through-CTEs)\n- CLR functions and procedures\n- $partition function\n- table variables\n- table value parameters\n- distributed transactions\n- commit / rollback work\n- save transaction\n- execution contexts (EXECUTE AS)\n- [group by clause with rollup / cube / grouping sets options][]\n- [nesting levels beyond 8][]\n- [updating through views][]\n- [use of select for variable assignment][]\n- [no MAX data type for dynamic SQL strings][]\n\nHappily most of these limitations can be worked around. Explanations have been included in the relevant development articles referenced above.\n\n### Recursive common table expressions (CTE)\n\nThis is a complex scenario with no quick fix. The CTE will need to be broken down and handled in steps. You can typically use a fairly complex loop; populating a temporary table as you iterate over the recursive interim queries. Once the temporary table is populated you can then return the data as a single result set. A similar approach has been used to solve `GROUP BY WITH CUBE` in the [group by clause with rollup / cube / grouping sets options][] article.\n\n### Updates through CTEs\n\nIf the CTE is non-recursive then you can re-write the query to use sub-queries. For recursive CTEs you will need to build up the resultset first as described above; then join the final resultset to the target table and perform the update.\n\n### System functions\n\nThere are also some system functions that are not supported. Some of the main ones you might typically find used in data warehousing are:\n\n- NEWID()\n- NEWSEQUENTIALID()\n- @@NESTLEVEL()\n- @@IDENTITY()\n- @@ROWCOUNT()\n- ROWCOUNT_BIG\n- ERROR_LINE()\n\nAgain many of these issues can be worked around. \n\nFor example the code below is an alternative solution for retrieving @@ROWCOUNT information:\n\n```\nSELECT  SUM(row_count) AS row_count \nFROM    sys.dm_pdw_sql_requests \nWHERE   row_count <> -1 \nAND     request_id IN \n                    (   SELECT TOP 1    request_id \n                        FROM            sys.dm_pdw_exec_requests \n                        WHERE           session_id = SESSION_ID() \n                        ORDER BY end_time DESC\n                    )\n;\n``` \n\n## Next steps\nFor advice on developing your code please refer to the [development overview][].\n\n<!--Image references-->\n\n<!--Article references-->\n[ANSI joins on updates]: sql-data-warehouse-develop-ctas.md\n[ANSI joins on deletes]: sql-data-warehouse-develop-ctas.md\n[merge statement]: sql-data-warehouse-develop-ctas.md\n[INSERT..EXEC]: sql-data-warehouse-develop-temporary-tables.md\n\n[cursors]: sql-data-warehouse-develop-loops.md\n[SELECT..INTO]: sql-data-warehouse-develop-ctas.md\n[group by clause with rollup / cube / grouping sets options]: sql-data-warehouse-develop-group-by-options.md\n[nesting levels beyond 8]: sql-data-warehouse-develop-transactions.md\n[updating through views]: sql-data-warehouse-develop-views.md\n[use of select for variable assignment]: sql-data-warehouse-develop-variable-assignment.md\n[no MAX data type for dynamic SQL strings]: sql-data-warehouse-develop-dynamic-sql.md\n[development overview]: sql-data-warehouse-overview-develop.md\n\n<!--MSDN references-->\n\n<!--Other Web references-->\n"
}