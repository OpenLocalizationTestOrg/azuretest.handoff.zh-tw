{
  "nodes": [
    {
      "content": "How to use Service Bus queues (Java) | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus queues in Azure.",
      "pos": [
        100,
        145
      ]
    },
    {
      "content": "Code samples written in Java.",
      "pos": [
        146,
        175
      ]
    },
    {
      "content": "How to use Service Bus queues",
      "pos": [
        466,
        495
      ]
    },
    {
      "content": "This guide describes how to use Service Bus queues.",
      "pos": [
        497,
        548
      ]
    },
    {
      "content": "The samples are",
      "pos": [
        549,
        564
      ]
    },
    {
      "content": "written in Java and use the <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept>.",
      "pos": [
        565,
        616
      ]
    },
    {
      "content": "The",
      "pos": [
        617,
        620
      ]
    },
    {
      "content": "scenarios covered include <bpt id=\"p1\">**</bpt>creating queues<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>sending and receiving\nmessages<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>deleting queues<ept id=\"p3\">**</ept>.",
      "pos": [
        621,
        728
      ]
    },
    {
      "content": "Configure your application to use Service Bus",
      "pos": [
        845,
        890
      ]
    },
    {
      "content": "Make sure you have installed the <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept> before building this sample.",
      "pos": [
        891,
        975
      ]
    },
    {
      "content": "If you are using Eclipse, you can install the <bpt id=\"p1\">[</bpt>Azure Toolkit for Eclipse<ept id=\"p1\">][]</ept> that includes the Azure SDK for Java.",
      "pos": [
        976,
        1089
      ]
    },
    {
      "content": "You can then add the <bpt id=\"p1\">**</bpt>Microsoft Azure Libraries for Java<ept id=\"p1\">**</ept> to your project:",
      "pos": [
        1090,
        1166
      ]
    },
    {
      "content": "Add the following import statements to the top of the Java file:",
      "pos": [
        1230,
        1294
      ]
    },
    {
      "content": "How to create a queue",
      "pos": [
        1569,
        1590
      ]
    },
    {
      "content": "Management operations for Service Bus queues can be performed via the",
      "pos": [
        1592,
        1661
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> class.",
      "pos": [
        1662,
        1691
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object is",
      "pos": [
        1692,
        1726
      ]
    },
    {
      "content": "constructed with an appropriate configuration that encapsulates the",
      "pos": [
        1727,
        1794
      ]
    },
    {
      "content": "SAS token with permissions to manage it, and the <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> class is",
      "pos": [
        1795,
        1875
      ]
    },
    {
      "content": "the sole point of communication with Azure.",
      "pos": [
        1876,
        1919
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> class provides methods to create, enumerate,",
      "pos": [
        1921,
        1991
      ]
    },
    {
      "content": "and delete queues.",
      "pos": [
        1992,
        2010
      ]
    },
    {
      "content": "The example below shows how a <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> object",
      "pos": [
        2011,
        2069
      ]
    },
    {
      "content": "can be used to create a queue named \"TestQueue\", with a namespace named \"HowToSample\":",
      "pos": [
        2070,
        2156
      ]
    },
    {
      "content": "There are methods on QueueInfo that allow properties of the queue to be",
      "pos": [
        2829,
        2900
      ]
    },
    {
      "content": "tuned (for example: to set the default \"time-to-live\" value to be",
      "pos": [
        2901,
        2966
      ]
    },
    {
      "content": "applied to messages sent to the queue).",
      "pos": [
        2967,
        3006
      ]
    },
    {
      "content": "The following example shows how",
      "pos": [
        3007,
        3038
      ]
    },
    {
      "content": "to create a queue named \"TestQueue\" with a maximum size of 5GB:",
      "pos": [
        3039,
        3102
      ]
    },
    {
      "content": "Note that you can use the <bpt id=\"p1\">**</bpt>listQueues<ept id=\"p1\">**</ept> method on <bpt id=\"p2\">**</bpt>ServiceBusContract<ept id=\"p2\">**</ept>",
      "pos": [
        3315,
        3388
      ]
    },
    {
      "content": "objects to check if a queue with a specified name already exists within",
      "pos": [
        3389,
        3460
      ]
    },
    {
      "content": "a service namespace.",
      "pos": [
        3461,
        3481
      ]
    },
    {
      "content": "How to send messages to a queue",
      "pos": [
        3486,
        3517
      ]
    },
    {
      "content": "To send a message to a Service Bus Queue, your application will obtain a",
      "pos": [
        3519,
        3591
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object.",
      "pos": [
        3592,
        3622
      ]
    },
    {
      "content": "The below code demonstrates how to send a",
      "pos": [
        3623,
        3664
      ]
    },
    {
      "content": "message for the \"TestQueue\" queue we created above within our",
      "pos": [
        3665,
        3726
      ]
    },
    {
      "content": "\"HowToSample\" service namespace:",
      "pos": [
        3727,
        3759
      ]
    },
    {
      "content": "Messages sent to (and received from ) Service Bus queues are instances",
      "pos": [
        4078,
        4148
      ]
    },
    {
      "content": "of the <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> class.",
      "pos": [
        4149,
        4182
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> objects have a set",
      "pos": [
        4183,
        4221
      ]
    },
    {
      "content": "of standard methods (such as <bpt id=\"p1\">**</bpt>getLabel<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>getTimeToLive<ept id=\"p2\">**</ept>,",
      "pos": [
        4222,
        4283
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>setLabel<ept id=\"p1\">**</ept>, and <bpt id=\"p2\">**</bpt>setTimeToLive<ept id=\"p2\">**</ept>), a dictionary that is used to hold",
      "pos": [
        4284,
        4355
      ]
    },
    {
      "content": "custom application specific properties, and a body of arbitrary",
      "pos": [
        4356,
        4419
      ]
    },
    {
      "content": "application data.",
      "pos": [
        4420,
        4437
      ]
    },
    {
      "content": "An application can set the body of the message by",
      "pos": [
        4438,
        4487
      ]
    },
    {
      "content": "passing any serializable object into the constructor of the",
      "pos": [
        4488,
        4547
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept>, and the appropriate serializer will then be used to",
      "pos": [
        4548,
        4620
      ]
    },
    {
      "content": "serialize the object.",
      "pos": [
        4621,
        4642
      ]
    },
    {
      "content": "Alternatively, a <bpt id=\"p1\">**</bpt>java.IO.InputStream<ept id=\"p1\">**</ept> can be",
      "pos": [
        4643,
        4690
      ]
    },
    {
      "content": "provided.",
      "pos": [
        4691,
        4700
      ]
    },
    {
      "content": "The following example demonstrates how to send five test messages to the",
      "pos": [
        4702,
        4774
      ]
    },
    {
      "content": "\"TestQueue\" <bpt id=\"p1\">**</bpt>MessageSender<ept id=\"p1\">**</ept> we obtained in the code snippet above:",
      "pos": [
        4775,
        4843
      ]
    },
    {
      "content": "Service Bus queues support a maximum message size of 256 KB (the header,",
      "pos": [
        5225,
        5297
      ]
    },
    {
      "content": "which includes the standard and custom application properties, can have",
      "pos": [
        5298,
        5369
      ]
    },
    {
      "content": "a maximum size of 64 KB).",
      "pos": [
        5370,
        5395
      ]
    },
    {
      "content": "There is no limit on the number of messages",
      "pos": [
        5396,
        5439
      ]
    },
    {
      "content": "held in a queue but there is a cap on the total size of the messages",
      "pos": [
        5440,
        5508
      ]
    },
    {
      "content": "held by a queue.",
      "pos": [
        5509,
        5525
      ]
    },
    {
      "content": "This queue size is defined at creation time, with an",
      "pos": [
        5526,
        5578
      ]
    },
    {
      "content": "upper limit of 5 GB.",
      "pos": [
        5579,
        5599
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        5604,
        5640
      ]
    },
    {
      "content": "The primary way to receive messages from a queue is to use a",
      "pos": [
        5642,
        5702
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> object.",
      "pos": [
        5703,
        5733
      ]
    },
    {
      "content": "Received messages can work in two",
      "pos": [
        5734,
        5767
      ]
    },
    {
      "content": "different modes: <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PeekLock<ept id=\"p2\">**</ept>.",
      "pos": [
        5768,
        5823
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, receive is a single-shot",
      "pos": [
        5825,
        5891
      ]
    },
    {
      "content": "operation - that is, when Service Bus receives a read request for a",
      "pos": [
        5892,
        5959
      ]
    },
    {
      "content": "message in a queue, it marks the message as being consumed and returns",
      "pos": [
        5960,
        6030
      ]
    },
    {
      "content": "it to the application.",
      "pos": [
        6031,
        6053
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode (which is the default",
      "pos": [
        6054,
        6101
      ]
    },
    {
      "content": "mode) is the simplest model and works best for scenarios in which an",
      "pos": [
        6102,
        6170
      ]
    },
    {
      "content": "application can tolerate not processing a message in the event of a",
      "pos": [
        6171,
        6238
      ]
    },
    {
      "content": "failure.",
      "pos": [
        6239,
        6247
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer",
      "pos": [
        6248,
        6309
      ]
    },
    {
      "content": "issues the receive request and then crashes before processing it.",
      "pos": [
        6310,
        6375
      ]
    },
    {
      "content": "Because Service Bus will have marked the message as being consumed, then",
      "pos": [
        6376,
        6448
      ]
    },
    {
      "content": "when the application restarts and begins consuming messages again, it",
      "pos": [
        6449,
        6518
      ]
    },
    {
      "content": "will have missed the message that was consumed prior to the crash.",
      "pos": [
        6519,
        6585
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode, receive becomes a two stage operation, which makes",
      "pos": [
        6587,
        6659
      ]
    },
    {
      "content": "it possible to support applications that cannot tolerate missing",
      "pos": [
        6660,
        6724
      ]
    },
    {
      "content": "messages.",
      "pos": [
        6725,
        6734
      ]
    },
    {
      "content": "When Service Bus receives a request, it finds the next message",
      "pos": [
        6735,
        6797
      ]
    },
    {
      "content": "to be consumed, locks it to prevent other consumers receiving it, and",
      "pos": [
        6798,
        6867
      ]
    },
    {
      "content": "then returns it to the application.",
      "pos": [
        6868,
        6903
      ]
    },
    {
      "content": "After the application finishes",
      "pos": [
        6904,
        6934
      ]
    },
    {
      "content": "processing the message (or stores it reliably for future processing), it",
      "pos": [
        6935,
        7007
      ]
    },
    {
      "content": "completes the second stage of the receive process by calling <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept>",
      "pos": [
        7008,
        7079
      ]
    },
    {
      "content": "on the received message.",
      "pos": [
        7080,
        7104
      ]
    },
    {
      "content": "When Service Bus sees the <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> call, it",
      "pos": [
        7105,
        7150
      ]
    },
    {
      "content": "will mark the message as being consumed and remove it from the queue.",
      "pos": [
        7151,
        7220
      ]
    },
    {
      "content": "The example below demonstrates how messages can be received and",
      "pos": [
        7222,
        7285
      ]
    },
    {
      "content": "processed using <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (not the default mode).",
      "pos": [
        7286,
        7343
      ]
    },
    {
      "content": "The example",
      "pos": [
        7344,
        7355
      ]
    },
    {
      "content": "below does an infinite loop and processes messages as they arrive into",
      "pos": [
        7356,
        7426
      ]
    },
    {
      "content": "our \"TestQueue\":",
      "pos": [
        7427,
        7443
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        9353,
        9410
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from",
      "pos": [
        9412,
        9482
      ]
    },
    {
      "content": "errors in your application or difficulties processing a message.",
      "pos": [
        9483,
        9547
      ]
    },
    {
      "content": "If a",
      "pos": [
        9548,
        9552
      ]
    },
    {
      "content": "receiver application is unable to process the message for some reason,",
      "pos": [
        9553,
        9623
      ]
    },
    {
      "content": "then it can call the <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> method on the received message",
      "pos": [
        9624,
        9693
      ]
    },
    {
      "content": "(instead of the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> method).",
      "pos": [
        9694,
        9736
      ]
    },
    {
      "content": "This will cause Service Bus",
      "pos": [
        9737,
        9764
      ]
    },
    {
      "content": "to unlock the message within the queue and make it available to be",
      "pos": [
        9765,
        9831
      ]
    },
    {
      "content": "received again, either by the same consuming application or by another",
      "pos": [
        9832,
        9902
      ]
    },
    {
      "content": "consuming application.",
      "pos": [
        9903,
        9925
      ]
    },
    {
      "content": "There is also a timeout associated with a message locked within the",
      "pos": [
        9927,
        9994
      ]
    },
    {
      "content": "queue, and if the application fails to process the message before the",
      "pos": [
        9995,
        10064
      ]
    },
    {
      "content": "lock timeout expires (e.g., if the application crashes), then Service",
      "pos": [
        10065,
        10134
      ]
    },
    {
      "content": "Bus will unlock the message automatically and make it available to be",
      "pos": [
        10135,
        10204
      ]
    },
    {
      "content": "received again.",
      "pos": [
        10205,
        10220
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message",
      "pos": [
        10222,
        10292
      ]
    },
    {
      "content": "but before the <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> request is issued, then the message",
      "pos": [
        10293,
        10361
      ]
    },
    {
      "content": "will be redelivered to the application when it restarts.",
      "pos": [
        10362,
        10418
      ]
    },
    {
      "content": "This is often",
      "pos": [
        10419,
        10432
      ]
    },
    {
      "content": "called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>, that is, each message will be",
      "pos": [
        10433,
        10499
      ]
    },
    {
      "content": "processed at least once but in certain situations the same message may",
      "pos": [
        10500,
        10570
      ]
    },
    {
      "content": "be redelivered.",
      "pos": [
        10571,
        10586
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing,",
      "pos": [
        10587,
        10640
      ]
    },
    {
      "content": "then application developers should add additional logic to their",
      "pos": [
        10641,
        10705
      ]
    },
    {
      "content": "application to handle duplicate message delivery.",
      "pos": [
        10706,
        10755
      ]
    },
    {
      "content": "This is often achieved",
      "pos": [
        10756,
        10778
      ]
    },
    {
      "content": "using the <bpt id=\"p1\">**</bpt>getMessageId<ept id=\"p1\">**</ept> method of the message, which will remain",
      "pos": [
        10779,
        10846
      ]
    },
    {
      "content": "constant across delivery attempts.",
      "pos": [
        10847,
        10881
      ]
    },
    {
      "content": "Next Steps",
      "pos": [
        10886,
        10896
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus queues, see the MSDN",
      "pos": [
        10898,
        10968
      ]
    },
    {
      "content": "topic <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions<ept id=\"p1\">][]</ept> for more information.",
      "pos": [
        10969,
        11034
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus queues (Java) | Microsoft Azure\"\n    description=\"Learn how to use Service Bus queues in Azure. Code samples written in Java.\"\n    services=\"service-bus\"\n    documentationCenter=\"java\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    />\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"Java\"\n    ms.topic=\"article\"\n    ms.date=\"06/19/2015\"\n    ms.author=\"sethm\"/>\n\n# How to use Service Bus queues\n\nThis guide describes how to use Service Bus queues. The samples are\nwritten in Java and use the [Azure SDK for Java][]. The\nscenarios covered include **creating queues**, **sending and receiving\nmessages**, and **deleting queues**.\n\n[AZURE.INCLUDE [service-bus-java-how-to-create-queue](../../includes/service-bus-java-how-to-create-queue.md)]\n\n## Configure your application to use Service Bus\nMake sure you have installed the [Azure SDK for Java][] before building this sample. If you are using Eclipse, you can install the [Azure Toolkit for Eclipse][] that includes the Azure SDK for Java. You can then add the **Microsoft Azure Libraries for Java** to your project:\n![](media/service-bus-java-how-to-use-queues/eclipselibs.png)\n\nAdd the following import statements to the top of the Java file:\n\n    // Include the following imports to use Service Bus APIs\n    import com.microsoft.windowsazure.services.servicebus.*;\n    import com.microsoft.windowsazure.services.servicebus.models.*;\n    import com.microsoft.windowsazure.core.*;\n    import javax.xml.datatype.*;\n\n## How to create a queue\n\nManagement operations for Service Bus queues can be performed via the\n**ServiceBusContract** class. A **ServiceBusContract** object is\nconstructed with an appropriate configuration that encapsulates the\nSAS token with permissions to manage it, and the **ServiceBusContract** class is\nthe sole point of communication with Azure.\n\nThe **ServiceBusService** class provides methods to create, enumerate,\nand delete queues. The example below shows how a **ServiceBusService** object\ncan be used to create a queue named \"TestQueue\", with a namespace named \"HowToSample\":\n\n        Configuration config =\n            ServiceBusConfiguration.configureWithSASAuthentication(\n                    \"HowToSample\",\n                    \"RootManageSharedAccessKey\",\n                    \"SAS_key_value\",\n                    \".servicebus.windows.net\"\n                    );\n\n    ServiceBusContract service = ServiceBusService.create(config);\n    QueueInfo queueInfo = new QueueInfo(\"TestQueue\");\n    try\n    {\n        CreateQueueResult result = service.createQueue(queueInfo);\n    }\n    catch (ServiceException e)\n    {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\nThere are methods on QueueInfo that allow properties of the queue to be\ntuned (for example: to set the default \"time-to-live\" value to be\napplied to messages sent to the queue). The following example shows how\nto create a queue named \"TestQueue\" with a maximum size of 5GB:\n\n    long maxSizeInMegabytes = 5120;\n    QueueInfo queueInfo = new QueueInfo(\"TestQueue\");\n    queueInfo.setMaxSizeInMegabytes(maxSizeInMegabytes);\n    CreateQueueResult result = service.createQueue(queueInfo);\n\nNote that you can use the **listQueues** method on **ServiceBusContract**\nobjects to check if a queue with a specified name already exists within\na service namespace.\n\n## How to send messages to a queue\n\nTo send a message to a Service Bus Queue, your application will obtain a\n**ServiceBusContract** object. The below code demonstrates how to send a\nmessage for the \"TestQueue\" queue we created above within our\n\"HowToSample\" service namespace:\n\n    try\n    {\n        BrokeredMessage message = new BrokeredMessage(\"MyMessage\");\n        service.sendQueueMessage(\"TestQueue\", message);\n    }\n    catch (ServiceException e)\n    {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\nMessages sent to (and received from ) Service Bus queues are instances\nof the **BrokeredMessage** class. **BrokeredMessage** objects have a set\nof standard methods (such as **getLabel**, **getTimeToLive**,\n**setLabel**, and **setTimeToLive**), a dictionary that is used to hold\ncustom application specific properties, and a body of arbitrary\napplication data. An application can set the body of the message by\npassing any serializable object into the constructor of the\n**BrokeredMessage**, and the appropriate serializer will then be used to\nserialize the object. Alternatively, a **java.IO.InputStream** can be\nprovided.\n\nThe following example demonstrates how to send five test messages to the\n\"TestQueue\" **MessageSender** we obtained in the code snippet above:\n\n    for (int i=0; i<5; i++)\n    {\n         // Create message, passing a string message for the body.\n         BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n         // Set an additional app-specific property.\n         message.setProperty(\"MyProperty\", i);\n         // Send message to the queue\n         service.sendQueueMessage(\"TestQueue\", message);\n    }\n\nService Bus queues support a maximum message size of 256 KB (the header,\nwhich includes the standard and custom application properties, can have\na maximum size of 64 KB). There is no limit on the number of messages\nheld in a queue but there is a cap on the total size of the messages\nheld by a queue. This queue size is defined at creation time, with an\nupper limit of 5 GB.\n\n## How to receive messages from a queue\n\nThe primary way to receive messages from a queue is to use a\n**ServiceBusContract** object. Received messages can work in two\ndifferent modes: **ReceiveAndDelete** and **PeekLock**.\n\nWhen using the **ReceiveAndDelete** mode, receive is a single-shot\noperation - that is, when Service Bus receives a read request for a\nmessage in a queue, it marks the message as being consumed and returns\nit to the application. **ReceiveAndDelete** mode (which is the default\nmode) is the simplest model and works best for scenarios in which an\napplication can tolerate not processing a message in the event of a\nfailure. To understand this, consider a scenario in which the consumer\nissues the receive request and then crashes before processing it.\nBecause Service Bus will have marked the message as being consumed, then\nwhen the application restarts and begins consuming messages again, it\nwill have missed the message that was consumed prior to the crash.\n\nIn **PeekLock** mode, receive becomes a two stage operation, which makes\nit possible to support applications that cannot tolerate missing\nmessages. When Service Bus receives a request, it finds the next message\nto be consumed, locks it to prevent other consumers receiving it, and\nthen returns it to the application. After the application finishes\nprocessing the message (or stores it reliably for future processing), it\ncompletes the second stage of the receive process by calling **Delete**\non the received message. When Service Bus sees the **Delete** call, it\nwill mark the message as being consumed and remove it from the queue.\n\nThe example below demonstrates how messages can be received and\nprocessed using **PeekLock** mode (not the default mode). The example\nbelow does an infinite loop and processes messages as they arrive into\nour \"TestQueue\":\n\n        try\n    {\n        ReceiveMessageOptions opts = ReceiveMessageOptions.DEFAULT;\n        opts.setReceiveMode(ReceiveMode.PEEK_LOCK);\n\n        while(true)  {\n             ReceiveQueueMessageResult resultQM =\n                    service.receiveQueueMessage(\"TestQueue\", opts);\n            BrokeredMessage message = resultQM.getValue();\n            if (message != null && message.getMessageId() != null)\n            {\n                System.out.println(\"MessageID: \" + message.getMessageId());\n                // Display the queue message.\n                System.out.print(\"From queue: \");\n                byte[] b = new byte[200];\n                String s = null;\n                int numRead = message.getBody().read(b);\n                while (-1 != numRead)\n                {\n                    s = new String(b);\n                    s = s.trim();\n                    System.out.print(s);\n                    numRead = message.getBody().read(b);\n                }\n                System.out.println();\n                System.out.println(\"Custom Property: \" +\n                    message.getProperty(\"MyProperty\"));\n                // Remove message from queue.\n                System.out.println(\"Deleting this message.\");\n                //service.deleteMessage(message);\n            }  \n            else  \n            {\n                System.out.println(\"Finishing up - no more messages.\");\n                break;\n                // Added to handle no more messages.\n                // Could instead wait for more messages to be added.\n            }\n        }\n    }\n    catch (ServiceException e) {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n    catch (Exception e) {\n        System.out.print(\"Generic exception encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from\nerrors in your application or difficulties processing a message. If a\nreceiver application is unable to process the message for some reason,\nthen it can call the **unlockMessage** method on the received message\n(instead of the **deleteMessage** method). This will cause Service Bus\nto unlock the message within the queue and make it available to be\nreceived again, either by the same consuming application or by another\nconsuming application.\n\nThere is also a timeout associated with a message locked within the\nqueue, and if the application fails to process the message before the\nlock timeout expires (e.g., if the application crashes), then Service\nBus will unlock the message automatically and make it available to be\nreceived again.\n\nIn the event that the application crashes after processing the message\nbut before the **deleteMessage** request is issued, then the message\nwill be redelivered to the application when it restarts. This is often\ncalled **At Least Once Processing**, that is, each message will be\nprocessed at least once but in certain situations the same message may\nbe redelivered. If the scenario cannot tolerate duplicate processing,\nthen application developers should add additional logic to their\napplication to handle duplicate message delivery. This is often achieved\nusing the **getMessageId** method of the message, which will remain\nconstant across delivery attempts.\n\n## Next Steps\n\nNow that you've learned the basics of Service Bus queues, see the MSDN\ntopic [Queues, Topics, and Subscriptions][] for more information.\n\n  [Azure SDK for Java]: http://azure.microsoft.com/develop/java/\n  [Azure Toolkit for Eclipse]: https://msdn.microsoft.com/en-us/library/azure/hh694271.aspx\n  [What are Service Bus Queues?]: #what-are-service-bus-queues\n  [Create a Service Namespace]: #create-a-service-namespace\n  [Obtain the Default Management Credentials for the Namespace]: #obtain-default-credentials\n  [Configure Your Application to Use Service Bus]: #bkmk_ConfigApp\n  [How to: Create a Security Token Provider]: #bkmk_HowToCreateQueue\n  [How to: Send Messages to a Queue]: #bkmk_HowToSendMsgs\n  [How to: Receive Messages from a Queue]: #bkmk_HowToReceiveMsgs\n  [How to: Handle Application Crashes and Unreadable Messages]: #bkmk_HowToHandleAppCrashes\n  [Next Steps]: #bkmk_NextSteps\n  [Azure Management Portal]: http://manage.windowsazure.com/\n  [Queues, Topics, and Subscriptions]: http://msdn.microsoft.com/library/windowsazure/hh367516.aspx\n \n"
}