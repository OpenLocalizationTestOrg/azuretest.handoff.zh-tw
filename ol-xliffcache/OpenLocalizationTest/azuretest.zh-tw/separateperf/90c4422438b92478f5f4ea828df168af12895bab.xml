{
  "nodes": [
    {
      "content": "Optimize your Hive queries for faster execution in HDInsight | Microsoft Azure",
      "pos": [
        26,
        104
      ]
    },
    {
      "content": "Learn how to optimize your Hive queries for Hadoop in HDInsight.",
      "pos": [
        122,
        186
      ]
    },
    {
      "content": "Optimize Hive queries for Hadoop in HDInsight",
      "pos": [
        502,
        547
      ]
    },
    {
      "content": "By default, Hadoop clusters are not optimized for performance.",
      "pos": [
        549,
        611
      ]
    },
    {
      "content": "This article covers a few of the most common Hive performance optimization methods that you can apply to our queries.",
      "pos": [
        612,
        729
      ]
    },
    {
      "pos": [
        817,
        909
      ],
      "content": "<bpt id=\"p1\">[</bpt>Optimize Hive queries for Hadoop in HDInsight<ept id=\"p1\">](hdinsight-hadoop-optimize-hive-query-v1.md)</ept>."
    },
    {
      "content": "Scale out worker nodes",
      "pos": [
        913,
        935
      ]
    },
    {
      "content": "Increasing the number of worker nodes in a cluster can leverage more mappers and reducers to be run in parallel.",
      "pos": [
        937,
        1049
      ]
    },
    {
      "content": "There are two ways you can increase scale out in HDInsight:",
      "pos": [
        1050,
        1109
      ]
    },
    {
      "content": "At the provision time, you can specify the number of worker nodes using the Azure preview portal, Azure PowerShell or Cross-platform command line interface.",
      "pos": [
        1113,
        1269
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Provision HDInsight clusters<ept id=\"p1\">](hdinsight-provision-clusters.md)</ept>.",
      "pos": [
        1271,
        1361
      ]
    },
    {
      "content": "The following screen show the worker node configuration on the Azure preview portal:",
      "pos": [
        1362,
        1446
      ]
    },
    {
      "content": "scaleout_1",
      "pos": [
        1454,
        1464
      ]
    },
    {
      "content": "At the run time, you can also scale out a cluster without recreating one.",
      "pos": [
        1505,
        1578
      ]
    },
    {
      "content": "This is shown below.",
      "pos": [
        1579,
        1599
      ]
    },
    {
      "content": "scaleout_1",
      "pos": [
        1602,
        1612
      ]
    },
    {
      "pos": [
        1651,
        1805
      ],
      "content": "For more details on the different virtual machines supported by HDInsight, see <bpt id=\"p1\">[</bpt>HDInsight pricing<ept id=\"p1\">](http://azure.microsoft.com/pricing/details/hdinsight/)</ept>."
    },
    {
      "content": "Enable Tez",
      "pos": [
        1809,
        1819
      ]
    },
    {
      "pos": [
        1821,
        1929
      ],
      "content": "<bpt id=\"p1\">[</bpt>Apache Tez<ept id=\"p1\">](http://hortonworks.com/hadoop/tez/)</ept> is an alternative execution engine to the MapReduce engine:"
    },
    {
      "content": "tez_1",
      "pos": [
        1933,
        1938
      ]
    },
    {
      "content": "Tez is faster because:",
      "pos": [
        1973,
        1995
      ]
    },
    {
      "content": "Execute Directed Acyclic Graph (DAG) as a single job in the MapReduce engine, the DAG that is expressed requires each set of mappers to be followed by one set of reducers.",
      "pos": [
        1999,
        2170
      ]
    },
    {
      "content": "This causes multiple MapReduce jobs to be spun off for each Hive query.",
      "pos": [
        2171,
        2242
      ]
    },
    {
      "content": "Tez does not have such constraint and can process complex DAG as one job thus minimizing job startup overhead.",
      "pos": [
        2243,
        2353
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Avoids unnecessary writes<ept id=\"p1\">**</ept> Due to multiple jobs being spun for the same Hive query in the MapReduce engine, the output of each job is written to HDFS for intermediate data.",
      "pos": [
        2356,
        2531
      ]
    },
    {
      "content": "Since Tez minimizes number of jobs for each Hive query it is able to avoid unnecessary write.",
      "pos": [
        2532,
        2625
      ]
    },
    {
      "pos": [
        2628,
        2799
      ],
      "content": "<bpt id=\"p1\">**</bpt>Minimizes start-up delays<ept id=\"p1\">**</ept> Tez is better able to minimize start-up delay by reducing the number of mappers it needs to start and also improving optimization throughout."
    },
    {
      "pos": [
        2802,
        2938
      ],
      "content": "<bpt id=\"p1\">**</bpt>Reuses containers<ept id=\"p1\">**</ept> Whenever possible Tez is able to reuse containers to ensure that latency due to starting up containers is reduced."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Continuous optimization techniques<ept id=\"p1\">**</ept> Traditionally optimization was done during compilation phase.",
      "pos": [
        2941,
        3041
      ]
    },
    {
      "content": "However more information about the inputs is available that allow for better optimization during runtime.",
      "pos": [
        3042,
        3147
      ]
    },
    {
      "content": "Tez uses continous optimization techniques that allows it to optimize the plan further into the runtime phase.",
      "pos": [
        3148,
        3258
      ]
    },
    {
      "pos": [
        3260,
        3344
      ],
      "content": "For more details on these concepts, click <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://hortonworks.com/hadoop/tez/)</ept>"
    },
    {
      "content": "You can make any Hive query Tez enabled by prefixing the query with the setting below:",
      "pos": [
        3346,
        3432
      ]
    },
    {
      "content": "Tez must be enabled at the provision time.",
      "pos": [
        3470,
        3512
      ]
    },
    {
      "content": "The following is a sample Azure PowerShell script for provisioning a Hadoop cluster with Tez enabled:",
      "pos": [
        3513,
        3614
      ]
    },
    {
      "content": "Hive partitioning",
      "pos": [
        4984,
        5001
      ]
    },
    {
      "content": "I/O operation is the major performance bottleneck for running Hive queries.",
      "pos": [
        5003,
        5078
      ]
    },
    {
      "content": "The performance can be improved if the amount of data that needs to be read can be reduced.",
      "pos": [
        5079,
        5170
      ]
    },
    {
      "content": "By default, Hive queries scan entire Hive tables.",
      "pos": [
        5171,
        5220
      ]
    },
    {
      "content": "This is great for queries like table scans, however for queries that only need to scan a small amount of data (e.g. queries with filtering), this creates unnecessary overhead.",
      "pos": [
        5221,
        5396
      ]
    },
    {
      "content": "Hive partitioning allows Hive queries to access only the necessary amount of data in Hive tables.",
      "pos": [
        5397,
        5494
      ]
    },
    {
      "content": "Hive partitioning is implemented by reorganizing the raw data into new directories with each partition having its own directory - where the partition is defined by the user.",
      "pos": [
        5496,
        5669
      ]
    },
    {
      "content": "The following diagram illustrates partitioning a Hive table by the column <bpt id=\"p1\">*</bpt>Year<ept id=\"p1\">*</ept>.",
      "pos": [
        5670,
        5751
      ]
    },
    {
      "content": "A new directory is created for each year.",
      "pos": [
        5752,
        5793
      ]
    },
    {
      "content": "partitioning",
      "pos": [
        5797,
        5809
      ]
    },
    {
      "content": "Some partitioning considerations:",
      "pos": [
        5852,
        5885
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Do not under-partition<ept id=\"p1\">**</ept> - Partitioning on columns with only a few values can cause very few partitions.",
      "pos": [
        5889,
        5995
      ]
    },
    {
      "content": "For example, partitioning on gender will only create two partitions to be created (male and female), thus only reduce the latency by a maximum of half.",
      "pos": [
        5996,
        6147
      ]
    },
    {
      "pos": [
        6151,
        6405
      ],
      "content": "<bpt id=\"p1\">**</bpt>Do not over-partition<ept id=\"p1\">**</ept> - On the other extreme, creating a partition on a column with a unique value (e.g. userid) will cause multiple partitions causing a lot of stress on the cluster namenode as it will have to handle the large amount of directories."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Avoid data skew<ept id=\"p1\">**</ept> - Choose your partitioning key wisely so that all partitions are even size.",
      "pos": [
        6409,
        6504
      ]
    },
    {
      "content": "An example is partitioning on <bpt id=\"p1\">*</bpt>State<ept id=\"p1\">*</ept> may cause the number of records under California to be almost 30x that of Vermont due to the difference in population.",
      "pos": [
        6505,
        6661
      ]
    },
    {
      "pos": [
        6663,
        6724
      ],
      "content": "To create a partition table, use the <bpt id=\"p1\">*</bpt>Partitioned By<ept id=\"p1\">*</ept> clause:"
    },
    {
      "content": "Once the partitioned table is created, you can either create static partitioning or dynamic partitioning.",
      "pos": [
        7229,
        7334
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Static partitioning<ept id=\"p1\">**</ept> means that you have already sharded data in the appropriate directories and you can ask Hive partitions manually based on the directory location.",
      "pos": [
        7338,
        7507
      ]
    },
    {
      "content": "This is shown in the code snippet below.",
      "pos": [
        7508,
        7548
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Dynamic partitioning<ept id=\"p1\">**</ept> means that you want Hive to create partitions automatically for you.",
      "pos": [
        7928,
        8021
      ]
    },
    {
      "content": "Since we have already created the partitioning table from the staging table, all we need to do is insert data to the partitioned table as shown below:",
      "pos": [
        8022,
        8172
      ]
    },
    {
      "pos": [
        8910,
        9058
      ],
      "content": "For more details, see <bpt id=\"p1\">[</bpt>Partitioned Tables<ept id=\"p1\">](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-PartitionedTables)</ept>."
    },
    {
      "content": "Use the ORCFile format",
      "pos": [
        9062,
        9084
      ]
    },
    {
      "content": "Hive supports different file formats.",
      "pos": [
        9086,
        9123
      ]
    },
    {
      "content": "For example:",
      "pos": [
        9124,
        9136
      ]
    },
    {
      "pos": [
        9140,
        9211
      ],
      "content": "<bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept>: this is the default file format and works with most scenarios"
    },
    {
      "pos": [
        9214,
        9265
      ],
      "content": "<bpt id=\"p1\">**</bpt>Avro<ept id=\"p1\">**</ept>: works well for interoperability scenarios"
    },
    {
      "pos": [
        9268,
        9312
      ],
      "content": "<bpt id=\"p1\">**</bpt>ORC/Parquet<ept id=\"p1\">**</ept>: best suited for performance"
    },
    {
      "content": "ORC (Optimized Row Columnar) format is a highly efficient way to store Hive data.",
      "pos": [
        9314,
        9395
      ]
    },
    {
      "content": "Compared to other formats, ORC has the following advantages:",
      "pos": [
        9396,
        9456
      ]
    },
    {
      "content": "support for complex types including DateTime and complex and semi-structured types",
      "pos": [
        9460,
        9542
      ]
    },
    {
      "content": "up to 70% compression",
      "pos": [
        9545,
        9566
      ]
    },
    {
      "content": "indexes every 10,000 rows which allow skipping rows",
      "pos": [
        9569,
        9620
      ]
    },
    {
      "content": "a significant drop in run-time execution",
      "pos": [
        9623,
        9663
      ]
    },
    {
      "pos": [
        9665,
        9744
      ],
      "content": "To enable ORC format, you first create a table with the clause <bpt id=\"p1\">*</bpt>Stored as ORC<ept id=\"p1\">*</ept>:"
    },
    {
      "content": "Next, you insert data to the ORC table from the staging table.",
      "pos": [
        10194,
        10256
      ]
    },
    {
      "content": "For example:",
      "pos": [
        10257,
        10269
      ]
    },
    {
      "pos": [
        10946,
        11058
      ],
      "content": "You can read more on the ORC format <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC)</ept>."
    },
    {
      "content": "Vectorization",
      "pos": [
        11062,
        11075
      ]
    },
    {
      "content": "Vectorization allows Hive to process a batch of 1024 rows together instead of processing one row at a time.",
      "pos": [
        11077,
        11184
      ]
    },
    {
      "content": "This means that simple operations are done faster because less internal code needs to run.",
      "pos": [
        11185,
        11275
      ]
    },
    {
      "content": "To enable vectorization prefix your Hive query with the following setting:",
      "pos": [
        11277,
        11351
      ]
    },
    {
      "pos": [
        11404,
        11536
      ],
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Vectorized query execution<ept id=\"p1\">](https://cwiki.apache.org/confluence/display/Hive/Vectorized+Query+Execution)</ept>."
    },
    {
      "content": "Other optimization methods",
      "pos": [
        11541,
        11567
      ]
    },
    {
      "content": "There are more optimization methods that you can consider, for example:",
      "pos": [
        11569,
        11640
      ]
    },
    {
      "pos": [
        11644,
        11759
      ],
      "content": "<bpt id=\"p1\">**</bpt>Hive bucketing:<ept id=\"p1\">**</ept> a technique that allows to cluster or segment large sets of data to optimize query performance."
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Join optimization:<ept id=\"p1\">**</ept> optimization of Hive's query execution planning to improve the efficiency of joins and reduce the need for user hints.",
      "pos": [
        11762,
        11903
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Join optimization<ept id=\"p1\">](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+JoinOptimization#LanguageManualJoinOptimization-JoinOptimization)</ept>.",
      "pos": [
        11904,
        12080
      ]
    },
    {
      "content": "increase Reducers",
      "pos": [
        12085,
        12102
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Next steps",
      "pos": [
        12108,
        12141
      ]
    },
    {
      "content": "In this article, you have learned several common Hive query optimization methods.",
      "pos": [
        12142,
        12223
      ]
    },
    {
      "content": "To learn more, see the following articles:",
      "pos": [
        12224,
        12266
      ]
    },
    {
      "content": "Use Apache Hive in HDInsight",
      "pos": [
        12271,
        12299
      ]
    },
    {
      "content": "Analyze flight delay data by using Hive in HDInsight",
      "pos": [
        12332,
        12384
      ]
    },
    {
      "content": "Analyze Twitter data using Hive in HDInsight",
      "pos": [
        12429,
        12473
      ]
    },
    {
      "content": "Analyze sensor data using the Hive Query Console on Hadoop in HDInsight",
      "pos": [
        12513,
        12584
      ]
    },
    {
      "content": "Use Hive with HDInsight to analyze logs from websites",
      "pos": [
        12628,
        12681
      ]
    },
    {
      "content": "test",
      "pos": [
        13119,
        13123
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Optimize your Hive queries for faster execution in HDInsight | Microsoft Azure\"\n   description=\"Learn how to optimize your Hive queries for Hadoop in HDInsight.\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"rashimg\"\n   manager=\"mwinkle\"\n   editor=\"cgronlun\"\n    tags=\"azure-portal\"/>\n\n<tags\n   ms.service=\"hdinsight\"\n   ms.devlang=\"na\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"na\"\n   ms.workload=\"big-data\"\n   ms.date=\"07/28/2015\"\n   ms.author=\"rashimg\"/>\n\n\n# Optimize Hive queries for Hadoop in HDInsight\n\nBy default, Hadoop clusters are not optimized for performance. This article covers a few of the most common Hive performance optimization methods that you can apply to our queries.\n\n[AZURE.INCLUDE [preview-portal](../../includes/hdinsight-azure-preview-portal.md)]\n\n* [Optimize Hive queries for Hadoop in HDInsight](hdinsight-hadoop-optimize-hive-query-v1.md).\n\n##Scale out worker nodes\n\nIncreasing the number of worker nodes in a cluster can leverage more mappers and reducers to be run in parallel. There are two ways you can increase scale out in HDInsight:\n\n- At the provision time, you can specify the number of worker nodes using the Azure preview portal, Azure PowerShell or Cross-platform command line interface.  For more information, see [Provision HDInsight clusters](hdinsight-provision-clusters.md). The following screen show the worker node configuration on the Azure preview portal:\n\n    ![scaleout_1][image-hdi-optimize-hive-scaleout_1]\n\n- At the run time, you can also scale out a cluster without recreating one. This is shown below.\n![scaleout_1][image-hdi-optimize-hive-scaleout_2]\n\nFor more details on the different virtual machines supported by HDInsight, see [HDInsight pricing](http://azure.microsoft.com/pricing/details/hdinsight/).\n\n##Enable Tez\n\n[Apache Tez](http://hortonworks.com/hadoop/tez/) is an alternative execution engine to the MapReduce engine:\n\n![tez_1][image-hdi-optimize-hive-tez_1]\n\n\nTez is faster because:\n\n- Execute Directed Acyclic Graph (DAG) as a single job in the MapReduce engine, the DAG that is expressed requires each set of mappers to be followed by one set of reducers. This causes multiple MapReduce jobs to be spun off for each Hive query. Tez does not have such constraint and can process complex DAG as one job thus minimizing job startup overhead.\n- **Avoids unnecessary writes** Due to multiple jobs being spun for the same Hive query in the MapReduce engine, the output of each job is written to HDFS for intermediate data. Since Tez minimizes number of jobs for each Hive query it is able to avoid unnecessary write.\n- **Minimizes start-up delays** Tez is better able to minimize start-up delay by reducing the number of mappers it needs to start and also improving optimization throughout.\n- **Reuses containers** Whenever possible Tez is able to reuse containers to ensure that latency due to starting up containers is reduced.\n- **Continuous optimization techniques** Traditionally optimization was done during compilation phase. However more information about the inputs is available that allow for better optimization during runtime. Tez uses continous optimization techniques that allows it to optimize the plan further into the runtime phase.\n\nFor more details on these concepts, click [here](http://hortonworks.com/hadoop/tez/)\n\nYou can make any Hive query Tez enabled by prefixing the query with the setting below:\n\n    set hive.execution.engine=tez;\n\nTez must be enabled at the provision time. The following is a sample Azure PowerShell script for provisioning a Hadoop cluster with Tez enabled:\n\n\n    $clusterName = \"[HDInsightClusterName]\"\n    $location = \"[AzureDataCenter]\" #i.e. West US\n    $dataNodes = 32 # number of worker nodes in the cluster\n\n    $defaultStorageAccountName = \"[DefaultStorageAccountName]\"\n    $defaultStorageContainerName = \"[DefaultBlobContainerName]\"\n    $defaultStorageAccountKey = $defaultStorageAccountKey = Get-AzureStorageKey $defaultStorageAccountName.ToLower() | %{ $_.Primary }\n\n    $hdiUserName = \"[HTTPUserName]\"\n    $hdiPassword = \"[HTTPUserPassword]\"\n\n    $hdiSecurePassword = ConvertTo-SecureString $hdiPassword -AsPlainText -Force\n    $hdiCredential = New-Object System.Management.Automation.PSCredential($hdiUserName, $hdiSecurePassword)\n\n    $hiveConfig = new-object 'Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.DataObjects.AzureHDInsightHiveConfiguration'\n    $hiveConfig.Configuration = @{ \"hive.execution.engine\"=\"tez\" }\n\n    New-AzureHDInsightClusterConfig -ClusterSizeInNodes $dataNodes -HeadNodeVMSize Standard_D14 -DataNodeVMSize Standard_D14 |\n    Set-AzureHDInsightDefaultStorage -StorageAccountName \"$defaultStorageAccountName.blob.core.windows.net\" -StorageAccountKey $defaultStorageAccountKey -StorageContainerName $defaultStorageContainerName |\n    Add-AzureHDInsightConfigValues -Hive $hiveConfig |\n    New-AzureHDInsightCluster -Name $clusterName -Location $location -Credential $hdiCredential\n\n## Hive partitioning\n\nI/O operation is the major performance bottleneck for running Hive queries. The performance can be improved if the amount of data that needs to be read can be reduced. By default, Hive queries scan entire Hive tables. This is great for queries like table scans, however for queries that only need to scan a small amount of data (e.g. queries with filtering), this creates unnecessary overhead. Hive partitioning allows Hive queries to access only the necessary amount of data in Hive tables.\n\nHive partitioning is implemented by reorganizing the raw data into new directories with each partition having its own directory - where the partition is defined by the user. The following diagram illustrates partitioning a Hive table by the column *Year*. A new directory is created for each year.\n\n![partitioning][image-hdi-optimize-hive-partitioning_1]\n\nSome partitioning considerations:\n\n- **Do not under-partition** - Partitioning on columns with only a few values can cause very few partitions. For example, partitioning on gender will only create two partitions to be created (male and female), thus only reduce the latency by a maximum of half.\n\n- **Do not over-partition** - On the other extreme, creating a partition on a column with a unique value (e.g. userid) will cause multiple partitions causing a lot of stress on the cluster namenode as it will have to handle the large amount of directories.\n\n- **Avoid data skew** - Choose your partitioning key wisely so that all partitions are even size. An example is partitioning on *State* may cause the number of records under California to be almost 30x that of Vermont due to the difference in population.\n\nTo create a partition table, use the *Partitioned By* clause:\n\n    CREATE TABLE lineitem_part\n        (L_ORDERKEY INT, L_PARTKEY INT, L_SUPPKEY INT,L_LINENUMBER INT,\n         L_QUANTITY DOUBLE, L_EXTENDEDPRICE DOUBLE, L_DISCOUNT DOUBLE,\n         L_TAX DOUBLE, L_RETURNFLAG STRING, L_LINESTATUS STRING,\n         L_SHIPDATE_PS STRING, L_COMMITDATE STRING, L_RECEIPTDATE        STRING, L_SHIPINSTRUCT STRING, L_SHIPMODE STRING,\n         L_COMMENT STRING)\n    PARTITIONED BY(L_SHIPDATE STRING)\n    ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t'\n    STORED AS TEXTFILE;\n\nOnce the partitioned table is created, you can either create static partitioning or dynamic partitioning.\n\n- **Static partitioning** means that you have already sharded data in the appropriate directories and you can ask Hive partitions manually based on the directory location. This is shown in the code snippet below.\n\n        INSERT OVERWRITE TABLE lineitem_part\n        PARTITION (L_SHIPDATE = ‘5/23/1996 12:00:00 AM’)\n        SELECT * FROM lineitem \n        WHERE lineitem.L_SHIPDATE = ‘5/23/1996 12:00:00 AM’\n\n        ALTER TABLE lineitem_part ADD PARTITION (L_SHIPDATE = ‘5/23/1996 12:00:00 AM’))\n        LOCATION ‘wasb://sampledata@ignitedemo.blob.core.windows.net/partitions/5_23_1996/'\n\n- **Dynamic partitioning** means that you want Hive to create partitions automatically for you. Since we have already created the partitioning table from the staging table, all we need to do is insert data to the partitioned table as shown below:\n\n        SET hive.exec.dynamic.partition = true;\n        SET hive.exec.dynamic.partition.mode = nonstrict;\n        INSERT INTO TABLE lineitem_part\n        PARTITION (L_SHIPDATE)\n        SELECT L_ORDERKEY as L_ORDERKEY, L_PARTKEY as L_PARTKEY , \n             L_SUPPKEY as L_SUPPKEY, L_LINENUMBER as L_LINENUMBER,\n             L_QUANTITY as L_QUANTITY, L_EXTENDEDPRICE as L_EXTENDEDPRICE,\n             L_DISCOUNT as L_DISCOUNT, L_TAX as L_TAX, L_RETURNFLAG as       L_RETURNFLAG, L_LINESTATUS as L_LINESTATUS, L_SHIPDATE as       L_SHIPDATE_PS, L_COMMITDATE as L_COMMITDATE, L_RECEIPTDATE as   L_RECEIPTDATE, L_SHIPINSTRUCT as L_SHIPINSTRUCT, L_SHIPMODE as      L_SHIPMODE, L_COMMENT as L_COMMENT, L_SHIPDATE as L_SHIPDATE FROM lineitem;\n\nFor more details, see [Partitioned Tables](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-PartitionedTables).\n\n##Use the ORCFile format\n\nHive supports different file formats. For example:\n\n- **Text**: this is the default file format and works with most scenarios\n- **Avro**: works well for interoperability scenarios\n- **ORC/Parquet**: best suited for performance\n\nORC (Optimized Row Columnar) format is a highly efficient way to store Hive data. Compared to other formats, ORC has the following advantages:\n\n- support for complex types including DateTime and complex and semi-structured types\n- up to 70% compression\n- indexes every 10,000 rows which allow skipping rows\n- a significant drop in run-time execution\n\nTo enable ORC format, you first create a table with the clause *Stored as ORC*:\n\n    CREATE TABLE lineitem_orc_part\n        (L_ORDERKEY INT, L_PARTKEY INT,L_SUPPKEY INT, L_LINENUMBER INT,\n         L_QUANTITY DOUBLE, L_EXTENDEDPRICE DOUBLE, L_DISCOUNT DOUBLE,\n         L_TAX DOUBLE, L_RETURNFLAG STRING, L_LINESTATUS STRING,\n         L_SHIPDATE_PS STRING, L_COMMITDATE STRING, L_RECEIPTDATE STRING,\n         L_SHIPINSTRUCT STRING, L_SHIPMODE STRING, L_COMMENT     STRING)\n    PARTITIONED BY(L_SHIPDATE STRING)\n    STORED AS ORC;\n\nNext, you insert data to the ORC table from the staging table. For example:\n\n    INSERT INTO TABLE lineitem_orc\n    SELECT L_ORDERKEY as L_ORDERKEY, \n           L_PARTKEY as L_PARTKEY , \n           L_SUPPKEY as L_SUPPKEY,\n           L_LINENUMBER as L_LINENUMBER,\n           L_QUANTITY as L_QUANTITY, \n           L_EXTENDEDPRICE as L_EXTENDEDPRICE,\n           L_DISCOUNT as L_DISCOUNT,\n           L_TAX as L_TAX,\n           L_RETURNFLAG as L_RETURNFLAG,\n           L_LINESTATUS as L_LINESTATUS,\n           L_SHIPDATE as L_SHIPDATE,\n           L_COMMITDATE as L_COMMITDATE,\n           L_RECEIPTDATE as L_RECEIPTDATE, \n           L_SHIPINSTRUCT as L_SHIPINSTRUCT,\n           L_SHIPMODE as L_SHIPMODE,\n           L_COMMENT as L_COMMENT\n    FROM lineitem;\n\nYou can read more on the ORC format [here](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC).\n\n##Vectorization\n\nVectorization allows Hive to process a batch of 1024 rows together instead of processing one row at a time. This means that simple operations are done faster because less internal code needs to run.\n\nTo enable vectorization prefix your Hive query with the following setting:\n\n    set hive.vectorized.execution.enabled = true;\n\nFor more information, see [Vectorized query execution](https://cwiki.apache.org/confluence/display/Hive/Vectorized+Query+Execution).\n\n\n##Other optimization methods\n\nThere are more optimization methods that you can consider, for example:\n\n- **Hive bucketing:** a technique that allows to cluster or segment large sets of data to optimize query performance.\n- **Join optimization:** optimization of Hive's query execution planning to improve the efficiency of joins and reduce the need for user hints. For more information, see [Join optimization](https://cwiki.apache.org/confluence/display/Hive/LanguageManual+JoinOptimization#LanguageManualJoinOptimization-JoinOptimization).\n- **increase Reducers**\n\n##<a id=\"nextsteps\"></a> Next steps\nIn this article, you have learned several common Hive query optimization methods. To learn more, see the following articles:\n\n- [Use Apache Hive in HDInsight](../hdinsight-using-hive.md)\n- [Analyze flight delay data by using Hive in HDInsight](hdinsight-analyze-flight-delay-data.md)\n- [Analyze Twitter data using Hive in HDInsight](hdinsight-analyze-twitter-data.md)\n- [Analyze sensor data using the Hive Query Console on Hadoop in HDInsight](hdinsight-hive-analyze-sensor-data.md)\n- [Use Hive with HDInsight to analyze logs from websites](../hdinsight-hive-analyze-web-site-log.md)\n\n\n[image-hdi-optimize-hive-scaleout_1]: ./media/hdinsight-hadoop-optimize-hive-query/scaleout_1.png\n[image-hdi-optimize-hive-scaleout_2]: ./media/hdinsight-hadoop-optimize-hive-query/scaleout_2.png\n[image-hdi-optimize-hive-tez_1]: ./media/hdinsight-hadoop-optimize-hive-query/tez_1.png\n[image-hdi-optimize-hive-partitioning_1]: ./media/hdinsight-hadoop-optimize-hive-query/partitioning_1.png\n\ntest\n"
}