{
  "nodes": [
    {
      "content": "How to use Queue storage from .NET | Microsoft Azure",
      "pos": [
        27,
        79
      ]
    },
    {
      "content": "Learn how to use Microsoft Azure Queue storage to create and delete queues and insert, peek, get, and delete queue messages.",
      "pos": [
        98,
        222
      ]
    },
    {
      "content": "How to use Queue storage from .NET",
      "pos": [
        523,
        557
      ]
    },
    {
      "content": "Overview",
      "pos": [
        662,
        670
      ]
    },
    {
      "content": "This guide will show you how to perform common scenarios using the",
      "pos": [
        672,
        738
      ]
    },
    {
      "content": "Azure Queue storage service.",
      "pos": [
        739,
        767
      ]
    },
    {
      "content": "The samples are written in C\\# code",
      "pos": [
        768,
        803
      ]
    },
    {
      "content": "and use the Azure Storage Client for .NET.",
      "pos": [
        804,
        846
      ]
    },
    {
      "content": "The scenarios covered include <bpt id=\"p1\">**</bpt>inserting<ept id=\"p1\">**</ept>,",
      "pos": [
        847,
        891
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>peeking<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>getting<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>deleting<ept id=\"p3\">**</ept> queue messages, as well as",
      "pos": [
        892,
        961
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>creating and deleting queues<ept id=\"p1\">**</ept>.",
      "pos": [
        962,
        995
      ]
    },
    {
      "content": "Programmatically access Queue storage",
      "pos": [
        1456,
        1493
      ]
    },
    {
      "content": "Namespace declarations",
      "pos": [
        1599,
        1621
      ]
    },
    {
      "content": "Add the following code namespace declarations to the top of any C\\# file",
      "pos": [
        1622,
        1694
      ]
    },
    {
      "content": "in which you wish to programmatically access Azure Storage:",
      "pos": [
        1695,
        1754
      ]
    },
    {
      "pos": [
        1894,
        1968
      ],
      "content": "Make sure you reference the <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> assembly."
    },
    {
      "content": "Create a queue",
      "pos": [
        2083,
        2097
      ]
    },
    {
      "content": "A <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> object lets you get reference objects for queues.",
      "pos": [
        2099,
        2171
      ]
    },
    {
      "content": "The following code creates a <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> object.",
      "pos": [
        2172,
        2229
      ]
    },
    {
      "content": "All code in",
      "pos": [
        2230,
        2241
      ]
    },
    {
      "content": "this guide uses a storage connection string stored in the Azure",
      "pos": [
        2242,
        2305
      ]
    },
    {
      "content": "application's service configuration.",
      "pos": [
        2306,
        2342
      ]
    },
    {
      "content": "There are also other ways to create",
      "pos": [
        2343,
        2378
      ]
    },
    {
      "content": "a <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> object.",
      "pos": [
        2379,
        2412
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>CloudStorageAccount<ept id=\"p1\">][]</ept>",
      "pos": [
        2413,
        2440
      ]
    },
    {
      "content": "documentation for details.",
      "pos": [
        2441,
        2467
      ]
    },
    {
      "content": "Use the <bpt id=\"p1\">**</bpt>queueClient<ept id=\"p1\">**</ept> object to get a reference to the queue you want",
      "pos": [
        2775,
        2846
      ]
    },
    {
      "content": "to use.",
      "pos": [
        2847,
        2854
      ]
    },
    {
      "content": "You can create the queue if it doesn't exist.",
      "pos": [
        2855,
        2900
      ]
    },
    {
      "content": "Insert a message into a queue",
      "pos": [
        3094,
        3123
      ]
    },
    {
      "content": "To insert a message into an existing queue, first create a new",
      "pos": [
        3125,
        3187
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        3188,
        3210
      ]
    },
    {
      "content": "Next, call the <bpt id=\"p1\">**</bpt>AddMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        3211,
        3248
      ]
    },
    {
      "content": "A",
      "pos": [
        3249,
        3250
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept> can be created from either a string (in UTF-8",
      "pos": [
        3251,
        3318
      ]
    },
    {
      "content": "format) or a <bpt id=\"p1\">**</bpt>byte<ept id=\"p1\">**</ept> array.",
      "pos": [
        3319,
        3347
      ]
    },
    {
      "content": "Here is code which creates a queue (if it",
      "pos": [
        3348,
        3389
      ]
    },
    {
      "content": "doesn't exist) and inserts the message 'Hello, World':",
      "pos": [
        3390,
        3444
      ]
    },
    {
      "content": "Peek at the next message",
      "pos": [
        4100,
        4124
      ]
    },
    {
      "content": "You can peek at the message in the front of a queue without removing it",
      "pos": [
        4126,
        4197
      ]
    },
    {
      "content": "from the queue by calling the <bpt id=\"p1\">**</bpt>PeekMessage<ept id=\"p1\">**</ept> method.",
      "pos": [
        4198,
        4251
      ]
    },
    {
      "content": "Change the contents of a queued message",
      "pos": [
        4831,
        4870
      ]
    },
    {
      "content": "You can change the contents of a message in-place in the queue.",
      "pos": [
        4872,
        4935
      ]
    },
    {
      "content": "If the",
      "pos": [
        4936,
        4942
      ]
    },
    {
      "content": "message represents a work task, you could use this feature to update the",
      "pos": [
        4943,
        5015
      ]
    },
    {
      "content": "status of the work task.",
      "pos": [
        5016,
        5040
      ]
    },
    {
      "content": "The following code updates the queue message",
      "pos": [
        5041,
        5085
      ]
    },
    {
      "content": "with new contents, and sets the visibility timeout to extend another 60",
      "pos": [
        5086,
        5157
      ]
    },
    {
      "content": "seconds.",
      "pos": [
        5158,
        5166
      ]
    },
    {
      "content": "This saves the state of work associated with the message, and",
      "pos": [
        5167,
        5228
      ]
    },
    {
      "content": "gives the client another minute to continue working on the message.",
      "pos": [
        5229,
        5296
      ]
    },
    {
      "content": "You",
      "pos": [
        5297,
        5300
      ]
    },
    {
      "content": "could use this technique to track multi-step workflows on queue",
      "pos": [
        5301,
        5364
      ]
    },
    {
      "content": "messages, without having to start over from the beginning if a",
      "pos": [
        5365,
        5427
      ]
    },
    {
      "content": "processing step fails due to hardware or software failure.",
      "pos": [
        5428,
        5486
      ]
    },
    {
      "content": "Typically,",
      "pos": [
        5487,
        5497
      ]
    },
    {
      "content": "you would keep a retry count as well, and if the message is retried more",
      "pos": [
        5498,
        5570
      ]
    },
    {
      "content": "than <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> times, you would delete it.",
      "pos": [
        5571,
        5607
      ]
    },
    {
      "content": "This protects against a message",
      "pos": [
        5608,
        5639
      ]
    },
    {
      "content": "that triggers an application error each time it is processed.",
      "pos": [
        5640,
        5701
      ]
    },
    {
      "content": "De-queue the next message",
      "pos": [
        6469,
        6494
      ]
    },
    {
      "content": "Your code de-queues a message from a queue in two steps.",
      "pos": [
        6496,
        6552
      ]
    },
    {
      "content": "When you call",
      "pos": [
        6553,
        6566
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GetMessage<ept id=\"p1\">**</ept>, you get the next message in a queue.",
      "pos": [
        6567,
        6619
      ]
    },
    {
      "content": "A message returned",
      "pos": [
        6620,
        6638
      ]
    },
    {
      "content": "from <bpt id=\"p1\">**</bpt>GetMessage<ept id=\"p1\">**</ept> becomes invisible to any other code reading messages",
      "pos": [
        6639,
        6711
      ]
    },
    {
      "content": "from this queue.",
      "pos": [
        6712,
        6728
      ]
    },
    {
      "content": "By default, this message stays invisible for 30",
      "pos": [
        6729,
        6776
      ]
    },
    {
      "content": "seconds.",
      "pos": [
        6777,
        6785
      ]
    },
    {
      "content": "To finish removing the message from the queue, you must also",
      "pos": [
        6786,
        6846
      ]
    },
    {
      "content": "call <bpt id=\"p1\">**</bpt>DeleteMessage<ept id=\"p1\">**</ept>.",
      "pos": [
        6847,
        6870
      ]
    },
    {
      "content": "This two-step process of removing a message",
      "pos": [
        6871,
        6914
      ]
    },
    {
      "content": "assures that if your code fails to process a message due to hardware or",
      "pos": [
        6915,
        6986
      ]
    },
    {
      "content": "software failure, another instance of your code can get the same message",
      "pos": [
        6987,
        7059
      ]
    },
    {
      "content": "and try again.",
      "pos": [
        7060,
        7074
      ]
    },
    {
      "content": "Your code calls <bpt id=\"p1\">**</bpt>DeleteMessage<ept id=\"p1\">**</ept> right after the message",
      "pos": [
        7075,
        7132
      ]
    },
    {
      "content": "has been processed.",
      "pos": [
        7133,
        7152
      ]
    },
    {
      "content": "Use Async-Await pattern with common Queue storage APIs",
      "pos": [
        7781,
        7835
      ]
    },
    {
      "content": "This example shows how to use the Async-Await pattern with common Queue storage APIs.",
      "pos": [
        7837,
        7922
      ]
    },
    {
      "content": "The sample calls the asynchronous version of each of the given methods, as indicated by the <bpt id=\"p1\">*</bpt>Async<ept id=\"p1\">*</ept> suffix of each method.",
      "pos": [
        7923,
        8045
      ]
    },
    {
      "content": "When an async method is used, the async-await pattern suspends local execution until the call completes.",
      "pos": [
        8046,
        8150
      ]
    },
    {
      "content": "This behavior allows the current thread to do other work, which helps avoid performance bottlenecks and improves the overall responsiveness of your application.",
      "pos": [
        8151,
        8311
      ]
    },
    {
      "content": "For more details on using the Async-Await pattern in .NET see <bpt id=\"p1\">[</bpt>Async and Await (C# and Visual Basic)<ept id=\"p1\">](https://msdn.microsoft.com/library/hh191443.aspx)</ept>",
      "pos": [
        8312,
        8463
      ]
    },
    {
      "content": "Leverage additional options for de-queuing messages",
      "pos": [
        9297,
        9348
      ]
    },
    {
      "content": "There are two ways you can customize message retrieval from a queue.",
      "pos": [
        9350,
        9418
      ]
    },
    {
      "content": "First, you can get a batch of messages (up to 32).",
      "pos": [
        9419,
        9469
      ]
    },
    {
      "content": "Second, you can set a",
      "pos": [
        9470,
        9491
      ]
    },
    {
      "content": "longer or shorter invisibility timeout, allowing your code more or less",
      "pos": [
        9492,
        9563
      ]
    },
    {
      "content": "time to fully process each message.",
      "pos": [
        9564,
        9599
      ]
    },
    {
      "content": "The following code example uses the",
      "pos": [
        9600,
        9635
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept> method to get 20 messages in one call.",
      "pos": [
        9636,
        9690
      ]
    },
    {
      "content": "Then it processes",
      "pos": [
        9691,
        9708
      ]
    },
    {
      "content": "each message using a <bpt id=\"p1\">**</bpt>foreach<ept id=\"p1\">**</ept> loop.",
      "pos": [
        9709,
        9747
      ]
    },
    {
      "content": "It also sets the invisibility",
      "pos": [
        9748,
        9777
      ]
    },
    {
      "content": "timeout to five minutes for each message.",
      "pos": [
        9778,
        9819
      ]
    },
    {
      "content": "Note that the 5 minutes starts",
      "pos": [
        9820,
        9850
      ]
    },
    {
      "content": "for all messages at the same time, so after 5 minutes have passed since",
      "pos": [
        9851,
        9922
      ]
    },
    {
      "content": "the call to <bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept>, any messages which have not been deleted",
      "pos": [
        9923,
        9992
      ]
    },
    {
      "content": "will become visible again.",
      "pos": [
        9993,
        10019
      ]
    },
    {
      "content": "Get the queue length",
      "pos": [
        10675,
        10695
      ]
    },
    {
      "content": "You can get an estimate of the number of messages in a queue.",
      "pos": [
        10697,
        10758
      ]
    },
    {
      "content": "The",
      "pos": [
        10759,
        10762
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> method asks the Queue service to",
      "pos": [
        10763,
        10815
      ]
    },
    {
      "content": "retrieve the queue attributes, including the message count.",
      "pos": [
        10816,
        10875
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ApproximateMethodCount<ept id=\"p1\">**</ept>",
      "pos": [
        10876,
        10906
      ]
    },
    {
      "content": "property returns the last value retrieved by the",
      "pos": [
        10907,
        10955
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> method, without calling the Queue service.",
      "pos": [
        10956,
        11018
      ]
    },
    {
      "content": "Delete a queue",
      "pos": [
        11731,
        11745
      ]
    },
    {
      "content": "To delete a queue and all the messages contained in it, call the",
      "pos": [
        11747,
        11811
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> method on the queue object.",
      "pos": [
        11812,
        11850
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        12315,
        12325
      ]
    },
    {
      "content": "Now that you've learned the basics of Queue storage, follow these links",
      "pos": [
        12327,
        12398
      ]
    },
    {
      "content": "to learn about more complex storage tasks.",
      "pos": [
        12399,
        12441
      ]
    },
    {
      "content": "View the Queue service reference documentation for complete details about available APIs:",
      "pos": [
        12445,
        12534
      ]
    },
    {
      "content": "Storage Client Library for .NET reference",
      "pos": [
        12542,
        12583
      ]
    },
    {
      "content": "REST API reference",
      "pos": [
        12651,
        12669
      ]
    },
    {
      "pos": [
        12723,
        12885
      ],
      "content": "Learn about more advanced tasks you can perform with Azure Storage at <bpt id=\"p1\">[</bpt>Storing and Accessing Data in Azure<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/gg433040.aspx)</ept>"
    },
    {
      "pos": [
        12888,
        13022
      ],
      "content": "Learn how to simplify the code you write to work with Azure Storage by using the <bpt id=\"p1\">[</bpt>Azure WebJobs SDK<ept id=\"p1\">](../websites-dotnet-webjobs-sdk/)</ept>."
    },
    {
      "content": "View more feature guides to learn about additional options for storing data in Azure.",
      "pos": [
        13025,
        13110
      ]
    },
    {
      "pos": [
        13117,
        13199
      ],
      "content": "Use <bpt id=\"p1\">[</bpt>Table Storage<ept id=\"p1\">](storage-dotnet-how-to-use-tables.md)</ept> to store structured data."
    },
    {
      "pos": [
        13207,
        13289
      ],
      "content": "Use <bpt id=\"p1\">[</bpt>Blob Storage<ept id=\"p1\">](storage-dotnet-how-to-use-blobs.md)</ept> to store unstructured data."
    },
    {
      "pos": [
        13296,
        13375
      ],
      "content": "Use <bpt id=\"p1\">[</bpt>SQL Database<ept id=\"p1\">](sql-database-dotnet-how-to-use.md)</ept> to store relational data."
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Queue storage from .NET | Microsoft Azure\"\n    description=\"Learn how to use Microsoft Azure Queue storage to create and delete queues and insert, peek, get, and delete queue messages.\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.workload=\"storage\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"hero-article\" \n    ms.date=\"08/04/2015\"\n    ms.author=\"tamram\"/>\n\n# How to use Queue storage from .NET\n\n[AZURE.INCLUDE [storage-selector-queue-include](../../includes/storage-selector-queue-include.md)]\n\n## Overview\n\nThis guide will show you how to perform common scenarios using the\nAzure Queue storage service. The samples are written in C\\# code\nand use the Azure Storage Client for .NET. The scenarios covered include **inserting**,\n**peeking**, **getting**, and **deleting** queue messages, as well as\n**creating and deleting queues**.\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../../includes/storage-configure-connection-string-include.md)]\n\n## Programmatically access Queue storage\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../../includes/storage-dotnet-obtain-assembly.md)]\n\n### Namespace declarations\nAdd the following code namespace declarations to the top of any C\\# file\nin which you wish to programmatically access Azure Storage:\n\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Queue;\n\nMake sure you reference the `Microsoft.WindowsAzure.Storage.dll` assembly.\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../../includes/storage-dotnet-retrieve-conn-string.md)]\n\n## Create a queue\n\nA **CloudQueueClient** object lets you get reference objects for queues.\nThe following code creates a **CloudQueueClient** object. All code in\nthis guide uses a storage connection string stored in the Azure\napplication's service configuration. There are also other ways to create\na **CloudStorageAccount** object. See [CloudStorageAccount][]\ndocumentation for details.\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\nUse the **queueClient** object to get a reference to the queue you want\nto use. You can create the queue if it doesn't exist.\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Create the queue if it doesn't already exist\n    queue.CreateIfNotExists();\n\n## Insert a message into a queue\n\nTo insert a message into an existing queue, first create a new\n**CloudQueueMessage**. Next, call the **AddMessage** method. A\n**CloudQueueMessage** can be created from either a string (in UTF-8\nformat) or a **byte** array. Here is code which creates a queue (if it\ndoesn't exist) and inserts the message 'Hello, World':\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Create the queue if it doesn't already exist.\n    queue.CreateIfNotExists();\n\n    // Create a message and add it to the queue.\n    CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n    queue.AddMessage(message);\n\n## Peek at the next message\n\nYou can peek at the message in the front of a queue without removing it\nfrom the queue by calling the **PeekMessage** method.\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Peek at the next message\n    CloudQueueMessage peekedMessage = queue.PeekMessage();\n\n    // Display message.\n    Console.WriteLine(peekedMessage.AsString);\n\n## Change the contents of a queued message\n\nYou can change the contents of a message in-place in the queue. If the\nmessage represents a work task, you could use this feature to update the\nstatus of the work task. The following code updates the queue message\nwith new contents, and sets the visibility timeout to extend another 60\nseconds. This saves the state of work associated with the message, and\ngives the client another minute to continue working on the message. You\ncould use this technique to track multi-step workflows on queue\nmessages, without having to start over from the beginning if a\nprocessing step fails due to hardware or software failure. Typically,\nyou would keep a retry count as well, and if the message is retried more\nthan *n* times, you would delete it. This protects against a message\nthat triggers an application error each time it is processed.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Get the message from the queue and update the message contents.\n    CloudQueueMessage message = queue.GetMessage();\n    message.SetMessageContent(\"Updated contents.\") ;\n    queue.UpdateMessage(message,\n        TimeSpan.FromSeconds(0.0),  // Make it visible immediately.\n        MessageUpdateFields.Content | MessageUpdateFields.Visibility);\n\n## De-queue the next message\n\nYour code de-queues a message from a queue in two steps. When you call\n**GetMessage**, you get the next message in a queue. A message returned\nfrom **GetMessage** becomes invisible to any other code reading messages\nfrom this queue. By default, this message stays invisible for 30\nseconds. To finish removing the message from the queue, you must also\ncall **DeleteMessage**. This two-step process of removing a message\nassures that if your code fails to process a message due to hardware or\nsoftware failure, another instance of your code can get the same message\nand try again. Your code calls **DeleteMessage** right after the message\nhas been processed.\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Get the next message\n    CloudQueueMessage retrievedMessage = queue.GetMessage();\n\n    //Process the message in less than 30 seconds, and then delete the message\n    queue.DeleteMessage(retrievedMessage);\n\n## Use Async-Await pattern with common Queue storage APIs\n\nThis example shows how to use the Async-Await pattern with common Queue storage APIs. The sample calls the asynchronous version of each of the given methods, as indicated by the *Async* suffix of each method. When an async method is used, the async-await pattern suspends local execution until the call completes. This behavior allows the current thread to do other work, which helps avoid performance bottlenecks and improves the overall responsiveness of your application. For more details on using the Async-Await pattern in .NET see [Async and Await (C# and Visual Basic)](https://msdn.microsoft.com/library/hh191443.aspx)\n\n    // Create the queue if it doesn't already exist\n    if(await queue.CreateIfNotExistsAsync())\n    {\n        Console.WriteLine(\"Queue '{0}' Created\", queue.Name);\n    }\n    else\n    {\n        Console.WriteLine(\"Queue '{0}' Exists\", queue.Name);\n    }\n\n    // Create a message to put in the queue\n    CloudQueueMessage cloudQueueMessage = new CloudQueueMessage(\"My message\");\n\n    // Async enqueue the message\n    await queue.AddMessageAsync(cloudQueueMessage);\n    Console.WriteLine(\"Message added\");\n\n    // Async dequeue the message\n    CloudQueueMessage retrievedMessage = await queue.GetMessageAsync();\n    Console.WriteLine(\"Retrieved message with content '{0}'\", retrievedMessage.AsString);\n\n    // Async delete the message\n    await queue.DeleteMessageAsync(retrievedMessage);\n    Console.WriteLine(\"Deleted message\");\n\n## Leverage additional options for de-queuing messages\n\nThere are two ways you can customize message retrieval from a queue.\nFirst, you can get a batch of messages (up to 32). Second, you can set a\nlonger or shorter invisibility timeout, allowing your code more or less\ntime to fully process each message. The following code example uses the\n**GetMessages** method to get 20 messages in one call. Then it processes\neach message using a **foreach** loop. It also sets the invisibility\ntimeout to five minutes for each message. Note that the 5 minutes starts\nfor all messages at the same time, so after 5 minutes have passed since\nthe call to **GetMessages**, any messages which have not been deleted\nwill become visible again.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    foreach (CloudQueueMessage message in queue.GetMessages(20, TimeSpan.FromMinutes(5)))\n    {\n        // Process all messages in less than 5 minutes, deleting each message after processing.\n        queue.DeleteMessage(message);\n    }\n\n## Get the queue length\n\nYou can get an estimate of the number of messages in a queue. The\n**FetchAttributes** method asks the Queue service to\nretrieve the queue attributes, including the message count. The **ApproximateMethodCount**\nproperty returns the last value retrieved by the\n**FetchAttributes** method, without calling the Queue service.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Fetch the queue attributes.\n    queue.FetchAttributes();\n\n    // Retrieve the cached approximate message count.\n    int? cachedMessageCount = queue.ApproximateMessageCount;\n\n    // Display number of messages.\n    Console.WriteLine(\"Number of messages in queue: \" + cachedMessageCount);\n\n## Delete a queue\n\nTo delete a queue and all the messages contained in it, call the\n**Delete** method on the queue object.\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Delete the queue.\n    queue.Delete();\n\n## Next steps\n\nNow that you've learned the basics of Queue storage, follow these links\nto learn about more complex storage tasks.\n\n- View the Queue service reference documentation for complete details about available APIs:\n    - [Storage Client Library for .NET reference](http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409)\n    - [REST API reference](http://msdn.microsoft.com/library/azure/dd179355)\n- Learn about more advanced tasks you can perform with Azure Storage at [Storing and Accessing Data in Azure](http://msdn.microsoft.com/library/azure/gg433040.aspx)\n- Learn how to simplify the code you write to work with Azure Storage by using the [Azure WebJobs SDK](../websites-dotnet-webjobs-sdk/).\n- View more feature guides to learn about additional options for storing data in Azure.\n    - Use [Table Storage](storage-dotnet-how-to-use-tables.md) to store structured data. \n    - Use [Blob Storage](storage-dotnet-how-to-use-blobs.md) to store unstructured data.\n    - Use [SQL Database](sql-database-dotnet-how-to-use.md) to store relational data.\n\n  [Download and install the Azure SDK for .NET]: /develop/net/\n  [.NET client library reference]: http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409\n  [Creating a Azure Project in Visual Studio]: http://msdn.microsoft.com/library/azure/ee405487.aspx\n  [CloudStorageAccount]: http://msdn.microsoft.com/library/azure/microsoft.windowsazure.cloudstorageaccount_methods.aspx\n  [Storing and Accessing Data in Azure]: http://msdn.microsoft.com/library/azure/gg433040.aspx\n  [Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\n  [Configuring Connection Strings]: http://msdn.microsoft.com/library/azure/ee758697.aspx\n  [OData]: http://nuget.org/packages/Microsoft.Data.OData/5.0.2\n  [Edm]: http://nuget.org/packages/Microsoft.Data.Edm/5.0.2\n  [Spatial]: http://nuget.org/packages/System.Spatial/5.0.2\n \n"
}