{
  "nodes": [
    {
      "content": "Use SQL Database from .NET (C#)",
      "pos": [
        28,
        59
      ]
    },
    {
      "content": "Use the sample code in this quick start to build a modern application with C# and backed by a powerful relational database in the cloud with Azure SQL Database.",
      "pos": [
        79,
        239
      ]
    },
    {
      "content": "Using SQL Database from .NET (C#)",
      "pos": [
        561,
        594
      ]
    },
    {
      "content": "Requirements",
      "pos": [
        766,
        778
      ]
    },
    {
      "content": ".NET Framework",
      "pos": [
        784,
        798
      ]
    },
    {
      "content": ".NET Framework is pre-installed with Windows.",
      "pos": [
        800,
        845
      ]
    },
    {
      "content": "For Linux and Mac OS X you can download .NET Framework from the <bpt id=\"p1\">[</bpt>Mono Project<ept id=\"p1\">](http://www.mono-project.com/)</ept>.",
      "pos": [
        846,
        955
      ]
    },
    {
      "content": "A SQL Database",
      "pos": [
        961,
        975
      ]
    },
    {
      "pos": [
        977,
        1109
      ],
      "content": "See the <bpt id=\"p1\">[</bpt>getting started page<ept id=\"p1\">](sql-database-get-started.md)</ept> to learn how to create a sample database and get your connection string."
    },
    {
      "content": "Connect to your SQL Database",
      "pos": [
        1116,
        1144
      ]
    },
    {
      "pos": [
        1146,
        1306
      ],
      "content": "The <bpt id=\"p1\">[</bpt>System.Data.SqlClient.SqlConnection class<ept id=\"p1\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx)</ept> is used to connect to SQL Database."
    },
    {
      "content": "Execute a query and retrieve the result set",
      "pos": [
        1685,
        1728
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>System.Data.SqlClient.SqlCommand<ept id=\"p1\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.aspx)</ept> and <bpt id=\"p2\">[</bpt>SqlDataReader<ept id=\"p2\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqldatareader.aspx)</ept> classes can be used to retrieve a result set from a query against SQL Database.",
      "pos": [
        1731,
        2020
      ]
    },
    {
      "content": "Note that System.Data.SqlClient also supports retrieving data into an offline <bpt id=\"p1\">[</bpt>System.Data.DataSet<ept id=\"p1\">](https://msdn.microsoft.com/library/system.data.dataset.aspx)</ept>.",
      "pos": [
        2021,
        2182
      ]
    },
    {
      "content": "Inserting a row, passing parameters, and retrieving the generated primary key value",
      "pos": [
        3405,
        3488
      ]
    },
    {
      "content": "In SQL Database the <bpt id=\"p1\">[</bpt>IDENTITY<ept id=\"p1\">](https://msdn.microsoft.com/library/ms186775.aspx)</ept> property and the <bpt id=\"p2\">[</bpt>SEQUENECE<ept id=\"p2\">](https://msdn.microsoft.com/library/ff878058.aspx)</ept> object can be used to auto-generate <bpt id=\"p3\">[</bpt>primary key<ept id=\"p3\">](https://msdn.microsoft.com/library/ms179610.aspx)</ept> values.",
      "pos": [
        3491,
        3758
      ]
    },
    {
      "content": "In this example you will see how to execute an <bpt id=\"p1\">[</bpt>insert-statement<ept id=\"p1\">](https://msdn.microsoft.com/library/ms174335.aspx)</ept>, safely pass parameters which protects from <bpt id=\"p2\">[</bpt>SQL injection<ept id=\"p2\">](https://msdn.microsoft.com/magazine/cc163917.aspx)</ept>, and retrieve the auto-generated primary key value.",
      "pos": [
        3759,
        4037
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>ExecuteScalar<ept id=\"p1\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.executescalar.aspx)</ept> method in the <bpt id=\"p2\">[</bpt>System.Data.SqlClient.SqlCommand<ept id=\"p2\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.aspx)</ept> class can be used to execute a statement and retrieve the first column and row returned by this statement.",
      "pos": [
        4041,
        4378
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>OUTPUT<ept id=\"p1\">](https://msdn.microsoft.com/library/ms177564.aspx)</ept> clause of the INSERT statement can be used to return the inserted values as a result set to the calling application.",
      "pos": [
        4379,
        4558
      ]
    },
    {
      "content": "Note that OUTPUT is also supported by the <bpt id=\"p1\">[</bpt>UPDATE<ept id=\"p1\">](https://msdn.microsoft.com/library/ms177523.aspx)</ept>, <bpt id=\"p2\">[</bpt>DELETE<ept id=\"p2\">](https://msdn.microsoft.com/library/ms189835.aspx)</ept> and <bpt id=\"p3\">[</bpt>MERGE<ept id=\"p3\">](https://msdn.microsoft.com/library/bb510625.aspx)</ept> statements.",
      "pos": [
        4559,
        4793
      ]
    },
    {
      "content": "If more than one row is inserted you should use the <bpt id=\"p1\">[</bpt>ExecuteReader<ept id=\"p1\">](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.executereader.aspx)</ept> method to retrieve the inserted values for all rows.",
      "pos": [
        4794,
        5002
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Use SQL Database from .NET (C#)\" \n    description=\"Use the sample code in this quick start to build a modern application with C# and backed by a powerful relational database in the cloud with Azure SQL Database.\"\n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"tobbox\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.workload=\"sql-database\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"python\" \n    ms.topic=\"article\" \n    ms.date=\"07/16/2015\" \n    ms.author=\"tobiast\"/>\n\n\n# Using SQL Database from .NET (C#) \n\n\n[AZURE.INCLUDE [sql-database-develop-includes-selector-language-platform-depth](../../includes/sql-database-develop-includes-selector-language-platform-depth.md)]\n\n\n## Requirements\n\n### .NET Framework\n\n.NET Framework is pre-installed with Windows. For Linux and Mac OS X you can download .NET Framework from the [Mono Project](http://www.mono-project.com/).\n\n### A SQL Database\n\nSee the [getting started page](sql-database-get-started.md) to learn how to create a sample database and get your connection string.  \n\n## Connect to your SQL Database\n\nThe [System.Data.SqlClient.SqlConnection class](https://msdn.microsoft.com/library/system.data.sqlclient.sqlconnection.aspx) is used to connect to SQL Database.  \n    \n```\nusing System.Data.SqlClient;\n\nclass Sample\n{\n  static void Main()\n  {\n      using(var conn = new SqlConnection(\"Server=tcp:yourserver.database.windows.net,1433;Database=yourdatabase;User ID=yourlogin@yourserver;Password={your_password_here};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\"))\n      {\n          conn.Open();  \n      }\n  }\n}   \n```\n\n## Execute a query and retrieve the result set \n\nThe [System.Data.SqlClient.SqlCommand](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.aspx) and [SqlDataReader](https://msdn.microsoft.com/library/system.data.sqlclient.sqldatareader.aspx) classes can be used to retrieve a result set from a query against SQL Database. Note that System.Data.SqlClient also supports retrieving data into an offline [System.Data.DataSet](https://msdn.microsoft.com/library/system.data.dataset.aspx).   \n    \n```\nusing System;\nusing System.Data.SqlClient;\n\nclass Sample\n{\n    static void Main()\n    {\n      using(var conn = new SqlConnection(\"Server=tcp:yourserver.database.windows.net,1433;Database=yourdatabase;User ID=yourlogin@yourserver;Password={your_password_here};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\"))\n        {\n            var cmd = conn.CreateCommand();\n            cmd.CommandText = @\"\n                    SELECT \n                        c.CustomerID\n                        ,c.CompanyName\n                        ,COUNT(soh.SalesOrderID) AS OrderCount\n                    FROM SalesLT.Customer AS c\n                    LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID\n                    GROUP BY c.CustomerID, c.CompanyName\n                    ORDER BY OrderCount DESC;\";\n\n            conn.Open();    \n        \n            using(var reader = cmd.ExecuteReader())\n            {\n                while(reader.Read())\n                {\n                    Console.WriteLine(\"ID: {0} Name: {1} Order Count: {2}\", reader.GetInt32(0), reader.GetString(1), reader.GetInt32(2));\n                }\n            }                   \n        }\n    }\n}\n\n```\n\n## Inserting a row, passing parameters, and retrieving the generated primary key value \n\nIn SQL Database the [IDENTITY](https://msdn.microsoft.com/library/ms186775.aspx) property and the [SEQUENECE](https://msdn.microsoft.com/library/ff878058.aspx) object can be used to auto-generate [primary key](https://msdn.microsoft.com/library/ms179610.aspx) values. In this example you will see how to execute an [insert-statement](https://msdn.microsoft.com/library/ms174335.aspx), safely pass parameters which protects from [SQL injection](https://msdn.microsoft.com/magazine/cc163917.aspx), and retrieve the auto-generated primary key value.  \n\nThe [ExecuteScalar](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.executescalar.aspx) method in the [System.Data.SqlClient.SqlCommand](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.aspx) class can be used to execute a statement and retrieve the first column and row returned by this statement. The [OUTPUT](https://msdn.microsoft.com/library/ms177564.aspx) clause of the INSERT statement can be used to return the inserted values as a result set to the calling application. Note that OUTPUT is also supported by the [UPDATE](https://msdn.microsoft.com/library/ms177523.aspx), [DELETE](https://msdn.microsoft.com/library/ms189835.aspx) and [MERGE](https://msdn.microsoft.com/library/bb510625.aspx) statements. If more than one row is inserted you should use the [ExecuteReader](https://msdn.microsoft.com/library/system.data.sqlclient.sqlcommand.executereader.aspx) method to retrieve the inserted values for all rows.\n    \n```\nclass Sample\n{\n    static void Main()\n    {\n        using(var conn = new SqlConnection(\"Server=tcp:yourserver.database.windows.net,1433;Database=yourdatabase;User ID=yourlogin@yourserver;Password={your_password_here};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;\"))\n        {\n            var cmd = conn.CreateCommand();\n            cmd.CommandText = @\"\n                INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) \n                OUTPUT INSERTED.ProductID\n                VALUES (@Name, @Number, @Cost, @Price, CURRENT_TIMESTAMP)\";\n\n            cmd.Parameters.AddWithValue(\"@Name\", \"SQL Server Express\");\n            cmd.Parameters.AddWithValue(\"@Number\", \"SQLEXPRESS1\");\n            cmd.Parameters.AddWithValue(\"@Cost\", 0);\n            cmd.Parameters.AddWithValue(\"@Price\", 0);\n\n            conn.Open();\n\n            int insertedProductId = (int)cmd.ExecuteScalar();\n\n            Console.WriteLine(\"Product ID {0} inserted.\", insertedProductId);\n        }\n    }\n}\n```\n\n \n"
}