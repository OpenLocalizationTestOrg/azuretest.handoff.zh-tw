<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Policies in Azure API Management</source>
          <target state="new">Policies in Azure API Management</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create, edit, and configure policies in API Management.</source>
          <target state="new">Learn how to create, edit, and configure policies in API Management.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Policies in Azure API Management</source>
          <target state="new">Policies in Azure API Management</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Azure API Management, policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration.</source>
          <target state="new">In Azure API Management, policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Policies are a collection of Statements that are executed sequentially on the request or response of an API.</source>
          <target state="new">Policies are a collection of Statements that are executed sequentially on the request or response of an API.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Popular Statements include format conversion from XML to JSON and call rate limiting to restrict the amount of incoming calls from a developer.</source>
          <target state="new">Popular Statements include format conversion from XML to JSON and call rate limiting to restrict the amount of incoming calls from a developer.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Many more policies are available out of the box.</source>
          <target state="new">Many more policies are available out of the box.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept> for a full list of policy statements and their settings.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept> for a full list of policy statements and their settings.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Policies are applied inside the proxy which sits between the API consumer and the managed API.</source>
          <target state="new">Policies are applied inside the proxy which sits between the API consumer and the managed API.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The proxy receives all requests and usually forwards them unaltered to the underlying API.</source>
          <target state="new">The proxy receives all requests and usually forwards them unaltered to the underlying API.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However a policy can apply changes to both the inbound request and outbound response.</source>
          <target state="new">However a policy can apply changes to both the inbound request and outbound response.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Policy expressions can be used as attribute values or text values in any of the API Management policies, unless the policy specifies otherwise.</source>
          <target state="new">Policy expressions can be used as attribute values or text values in any of the API Management policies, unless the policy specifies otherwise.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some policies such as the <bpt id="p1">[</bpt>Control flow<ept id="p1">][]</ept> and <bpt id="p2">[</bpt>Set variable<ept id="p2">][]</ept> policies are based on policy expressions.</source>
          <target state="new">Some policies such as the <bpt id="p1">[</bpt>Control flow<ept id="p1">][]</ept> and <bpt id="p2">[</bpt>Set variable<ept id="p2">][]</ept> policies are based on policy expressions.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Advanced policies<ept id="p1">][]</ept> and <bpt id="p2">[</bpt>Policy expressions<ept id="p2">][]</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Advanced policies<ept id="p1">][]</ept> and <bpt id="p2">[</bpt>Policy expressions<ept id="p2">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="scopes"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>How to configure policies</source>
          <target state="new"><ph id="ph1">&lt;a name="scopes"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>How to configure policies</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Policies can be configured globally or at the scope of a <bpt id="p1">[</bpt>Product<ept id="p1">][]</ept>, <bpt id="p2">[</bpt>API<ept id="p2">][]</ept> or <bpt id="p3">[</bpt>Operation<ept id="p3">][]</ept>.</source>
          <target state="new">Policies can be configured globally or at the scope of a <bpt id="p1">[</bpt>Product<ept id="p1">][]</ept>, <bpt id="p2">[</bpt>API<ept id="p2">][]</ept> or <bpt id="p3">[</bpt>Operation<ept id="p3">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To configure a policy, navigate to the Policies editor in the Publisher Portal.</source>
          <target state="new">To configure a policy, navigate to the Policies editor in the Publisher Portal.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Policies menu</source>
          <target state="new">Policies menu</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The policies editor consists of three main sections: the policy scope (top), the policy definition where policies are edited (left) and the statements list (right):</source>
          <target state="new">The policies editor consists of three main sections: the policy scope (top), the policy definition where policies are edited (left) and the statements list (right):</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Policies editor</source>
          <target state="new">Policies editor</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To begin configuring a policy you must first select the scope at which the policy should apply.</source>
          <target state="new">To begin configuring a policy you must first select the scope at which the policy should apply.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the screenshot below the Starter product is selected.</source>
          <target state="new">In the screenshot below the Starter product is selected.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the square symbol next to the policy name indicates that a policy is already applied at this level.</source>
          <target state="new">Note that the square symbol next to the policy name indicates that a policy is already applied at this level.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="new">Scope</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Since a policy has already been applied, the configuration is shown in the definition view.</source>
          <target state="new">Since a policy has already been applied, the configuration is shown in the definition view.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Configure</source>
          <target state="new">Configure</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The policy is displayed read-only at first.</source>
          <target state="new">The policy is displayed read-only at first.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In order to edit the definition click the <bpt id="p1">**</bpt>Configure Policy<ept id="p1">**</ept> action.</source>
          <target state="new">In order to edit the definition click the <bpt id="p1">**</bpt>Configure Policy<ept id="p1">**</ept> action.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Edit</source>
          <target state="new">Edit</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The policy definition is a simple XML document that describes a sequence of inbound and outbound statements.</source>
          <target state="new">The policy definition is a simple XML document that describes a sequence of inbound and outbound statements.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The XML can be edited directly in the definition window.</source>
          <target state="new">The XML can be edited directly in the definition window.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A list of statements is provided to the right and statements applicable to the current scope are enabled and highlighted; as demonstrated by the Limit Call Rate statement in the screenshot above.</source>
          <target state="new">A list of statements is provided to the right and statements applicable to the current scope are enabled and highlighted; as demonstrated by the Limit Call Rate statement in the screenshot above.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Clicking an enabled statement will add the appropriate XML at the location of the cursor in the definition view.</source>
          <target state="new">Clicking an enabled statement will add the appropriate XML at the location of the cursor in the definition view.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A full list of policy statements and their settings are available in the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept>.</source>
          <target state="new">A full list of policy statements and their settings are available in the <bpt id="p1">[</bpt>Policy Reference<ept id="p1">][]</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, to add a new statement to restrict incoming requests to specified IP addresses, place the cursor just inside the content of the "inbound" XML element and click the Restrict caller IPs statement.</source>
          <target state="new">For example, to add a new statement to restrict incoming requests to specified IP addresses, place the cursor just inside the content of the "inbound" XML element and click the Restrict caller IPs statement.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Restriction policies</source>
          <target state="new">Restriction policies</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This will add an XML snippet to the "inbound" element that provides guidance on how to configure the statement.</source>
          <target state="new">This will add an XML snippet to the "inbound" element that provides guidance on how to configure the statement.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To limit inbound requests and accept only those from an IP address of 1.2.3.4 modify the XML as follows:</source>
          <target state="new">To limit inbound requests and accept only those from an IP address of 1.2.3.4 modify the XML as follows:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Save</source>
          <target state="new">Save</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When complete configuring the statements for the policy, click Save and the changes will be propagated to the API Management proxy immediately.</source>
          <target state="new">When complete configuring the statements for the policy, click Save and the changes will be propagated to the API Management proxy immediately.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="sections"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Understanding policy configuration</source>
          <target state="new"><ph id="ph1">&lt;a name="sections"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>Understanding policy configuration</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A policy is a series of statements that execute in order for a request and a response.</source>
          <target state="new">A policy is a series of statements that execute in order for a request and a response.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The configuration is divided appropriately into an inbound (request) and outbound (policy) as shown in the configuration.</source>
          <target state="new">The configuration is divided appropriately into an inbound (request) and outbound (policy) as shown in the configuration.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Since policies can be specified at different levels (global, product, api and operation) then the configuration provides a way for you to specify the order in which this definition's statements execute with respect to the parent policy.</source>
          <target state="new">Since policies can be specified at different levels (global, product, api and operation) then the configuration provides a way for you to specify the order in which this definition's statements execute with respect to the parent policy.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, if you have a policy at the global level and a policy configured for an API, then whenever that particular API is used - both policies will be applied.</source>
          <target state="new">For example, if you have a policy at the global level and a policy configured for an API, then whenever that particular API is used - both policies will be applied.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>API Management allows for deterministic ordering of combined policy statements via the base element.</source>
          <target state="new">API Management allows for deterministic ordering of combined policy statements via the base element.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the example policy definition above, the cross-domain statement would execute before any higher policies which would in turn, be followed by the find-and-replace policy.</source>
          <target state="new">In the example policy definition above, the cross-domain statement would execute before any higher policies which would in turn, be followed by the find-and-replace policy.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note: A global policy has no parent policy and using the <ph id="ph1">`&lt;base&gt;`</ph> element in it has no effect.</source>
          <target state="new">Note: A global policy has no parent policy and using the <ph id="ph1">`&lt;base&gt;`</ph> element in it has no effect.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Check out following video on policy expressions.</source>
          <target state="new">Check out following video on policy expressions.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8e67575308b8c7a7769259a35e29c963e5d54b5</xliffext:olfilehash>
  </header>
</xliff>