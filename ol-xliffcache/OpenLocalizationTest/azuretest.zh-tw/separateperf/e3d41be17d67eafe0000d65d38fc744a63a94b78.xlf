<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Retry service specific guidance | Microsoft Azure</source>
          <target state="new">Retry service specific guidance | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service specific guidance for setting the retry mechanism.</source>
          <target state="new">Service specific guidance for setting the retry mechanism.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Retry service specific guidance</source>
          <target state="new">Retry service specific guidance</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Most Azure services and client SDKs include a retry mechanism.</source>
          <target state="new">Most Azure services and client SDKs include a retry mechanism.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, these differ because each service has different characteristics and requirements, and so each retry mechanism is tuned to a specific service.</source>
          <target state="new">However, these differ because each service has different characteristics and requirements, and so each retry mechanism is tuned to a specific service.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This guide summarizes the retry mechanism features for the majority of Azure services, and includes information to help you use, adapt, or extend the retry mechanism for that service.</source>
          <target state="new">This guide summarizes the retry mechanism features for the majority of Azure services, and includes information to help you use, adapt, or extend the retry mechanism for that service.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For general guidance on handling transient faults, and retrying connections and operations against services and resources, see <bpt id="p1">[</bpt>Retry guidance<ept id="p1">](best-practices-retry-general.md)</ept>.</source>
          <target state="new">For general guidance on handling transient faults, and retrying connections and operations against services and resources, see <bpt id="p1">[</bpt>Retry guidance<ept id="p1">](best-practices-retry-general.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table summarizes the retry features for the Azure services described in this guidance.</source>
          <target state="new">The following table summarizes the retry features for the Azure services described in this guidance.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="new">Service</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Retry capabilities</source>
          <target state="new">Retry capabilities</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Policy configuration</source>
          <target state="new">Policy configuration</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="new">Scope</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Telemetry features</source>
          <target state="new">Telemetry features</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>AzureStorage</source>
          <target state="new">AzureStorage</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Native in client</source>
          <target state="new">Native in client</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="new">Programmatic</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Client and individual operations</source>
          <target state="new">Client and individual operations</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>TraceSource</source>
          <target state="new">TraceSource</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>SQL Database with Entity Framework</source>
          <target state="new">SQL Database with Entity Framework</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Native in client</source>
          <target state="new">Native in client</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="new">Programmatic</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Global per AppDomain</source>
          <target state="new">Global per AppDomain</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="new">None</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>SQL Database with ADO.NET</source>
          <target state="new">SQL Database with ADO.NET</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Topaz*</source>
          <target state="new">Topaz*</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Declarative and programmatic</source>
          <target state="new">Declarative and programmatic</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Single statements or blocks of code</source>
          <target state="new">Single statements or blocks of code</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Custom</source>
          <target state="new">Custom</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Service Bus</source>
          <target state="new">Service Bus</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Native in client</source>
          <target state="new">Native in client</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="new">Programmatic</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Namespace Manager, Messaging Factory, and Client</source>
          <target state="new">Namespace Manager, Messaging Factory, and Client</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>ETW</source>
          <target state="new">ETW</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Cache</source>
          <target state="new">Cache</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Native in client</source>
          <target state="new">Native in client</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="new">Programmatic</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="new">Client</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>TextWriter</source>
          <target state="new">TextWriter</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>DocumentDB</source>
          <target state="new">DocumentDB</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Native in service</source>
          <target state="new">Native in service</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Non-configurable</source>
          <target state="new">Non-configurable</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Global</source>
          <target state="new">Global</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>TraceSource</source>
          <target state="new">TraceSource</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Search</source>
          <target state="new">Search</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Topaz* (with custom detection strategy)</source>
          <target state="new">Topaz* (with custom detection strategy)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Declarative and programmatic</source>
          <target state="new">Declarative and programmatic</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Blocks of code</source>
          <target state="new">Blocks of code</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Custom</source>
          <target state="new">Custom</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Active Directory</source>
          <target state="new">Active Directory</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Topaz* (with custom detection strategy)</source>
          <target state="new">Topaz* (with custom detection strategy)</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Declarative and programmatic</source>
          <target state="new">Declarative and programmatic</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Blocks of code</source>
          <target state="new">Blocks of code</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Custom</source>
          <target state="new">Custom</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>*Topaz in the friendly name for the Transient Fault Handling Application Block that is included in <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/dn440719.aspx"&gt;</ph>Enterprise Library 6.0<ph id="ph2">&lt;/a&gt;</ph>.</source>
          <target state="new">*Topaz in the friendly name for the Transient Fault Handling Application Block that is included in <ph id="ph1">&lt;a href="http://msdn.microsoft.com/library/dn440719.aspx"&gt;</ph>Enterprise Library 6.0<ph id="ph2">&lt;/a&gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can use a custom detection strategy with Topaz for most types of services, as described in this guidance.</source>
          <target state="new">You can use a custom detection strategy with Topaz for most types of services, as described in this guidance.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Default strategies for Topaz are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</source>
          <target state="new">Default strategies for Topaz are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that the block is now an open-sourced framework and is not directly supported by Microsoft.</source>
          <target state="new">Note that the block is now an open-sourced framework and is not directly supported by Microsoft.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> For most of the Azure built-in retry mechanisms, there is currently no way apply a different retry policy for different types of error or exception beyond the functionality include in the retry policy.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> For most of the Azure built-in retry mechanisms, there is currently no way apply a different retry policy for different types of error or exception beyond the functionality include in the retry policy.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, the best guidance available at the time of writing is to configure a policy that provides the optimum average performance and availability.</source>
          <target state="new">Therefore, the best guidance available at the time of writing is to configure a policy that provides the optimum average performance and availability.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>One way to fine-tune the policy is to analyze log files to determine the type of transient faults that are occurring.</source>
          <target state="new">One way to fine-tune the policy is to analyze log files to determine the type of transient faults that are occurring.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, if the majority of errors are related to network connectivity issues, you might attempt an immediate retry rather than wait a long time for the first retry.</source>
          <target state="new">For example, if the majority of errors are related to network connectivity issues, you might attempt an immediate retry rather than wait a long time for the first retry.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Azure Storage retry guidelines</source>
          <target state="new">Azure Storage retry guidelines</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Azure storage services include table and blob storage, files, and storage queues.</source>
          <target state="new">Azure storage services include table and blob storage, files, and storage queues.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retries occur at the individual REST operation level and are an integral part of the client API implementation.</source>
          <target state="new">Retries occur at the individual REST operation level and are an integral part of the client API implementation.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The client storage SDK uses classes that implement the <bpt id="p1">[</bpt>IExtendedRetryPolicy Interface<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.retrypolicies.iextendedretrypolicy.aspx)</ept>.</source>
          <target state="new">The client storage SDK uses classes that implement the <bpt id="p1">[</bpt>IExtendedRetryPolicy Interface<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.retrypolicies.iextendedretrypolicy.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There are different implementations of the interface.</source>
          <target state="new">There are different implementations of the interface.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Storage clients can choose from policies specifically designed for accessing tables, blobs, and queues.</source>
          <target state="new">Storage clients can choose from policies specifically designed for accessing tables, blobs, and queues.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each implementation uses a different retry strategy that essentially defines the retry interval and other details.</source>
          <target state="new">Each implementation uses a different retry strategy that essentially defines the retry interval and other details.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The built-in classes provide support for linear (constant delay) and exponential with randomization retry intervals.</source>
          <target state="new">The built-in classes provide support for linear (constant delay) and exponential with randomization retry intervals.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>There is also a no retry policy for use when another process is handling retries at a higher level.</source>
          <target state="new">There is also a no retry policy for use when another process is handling retries at a higher level.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>However, you can implement your own retry classes if you have specific requirements not provided by the built-in classes.</source>
          <target state="new">However, you can implement your own retry classes if you have specific requirements not provided by the built-in classes.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Alternate retries switch between primary and secondary storage service location if you are using read access geo-redundant storage (RA-GRS) and the result of the request is a retryable error.</source>
          <target state="new">Alternate retries switch between primary and secondary storage service location if you are using read access geo-redundant storage (RA-GRS) and the result of the request is a retryable error.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Azure Storage Redundancy Options<ept id="p1">](http://msdn.microsoft.com/library/azure/dn727290.aspx)</ept> for more information.</source>
          <target state="new">See <bpt id="p1">[</bpt>Azure Storage Redundancy Options<ept id="p1">](http://msdn.microsoft.com/library/azure/dn727290.aspx)</ept> for more information.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Policy configuration (Azure storage)</source>
          <target state="new">Policy configuration (Azure storage)</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Retry policies are configured programmatically.</source>
          <target state="new">Retry policies are configured programmatically.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A typical procedure is to create and populate a <bpt id="p1">**</bpt>TableRequestOptions<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BlobRequestOptions<ept id="p2">**</ept>, <bpt id="p3">**</bpt>FileRequestOptions<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>QueueRequestOptions<ept id="p4">**</ept> instance.</source>
          <target state="new">A typical procedure is to create and populate a <bpt id="p1">**</bpt>TableRequestOptions<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BlobRequestOptions<ept id="p2">**</ept>, <bpt id="p3">**</bpt>FileRequestOptions<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>QueueRequestOptions<ept id="p4">**</ept> instance.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The request options instance can then be set on the client, and all operations with the client will use the specified request options.</source>
          <target state="new">The request options instance can then be set on the client, and all operations with the client will use the specified request options.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You can override the client request options by passing a populated instance of the request options class as a parameter to operation methods.</source>
          <target state="new">You can override the client request options by passing a populated instance of the request options class as a parameter to operation methods.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You use an <bpt id="p1">**</bpt>OperationContext<ept id="p1">**</ept> instance to specify the code to execute when a retry occurs and when an operation has completed.</source>
          <target state="new">You use an <bpt id="p1">**</bpt>OperationContext<ept id="p1">**</ept> instance to specify the code to execute when a retry occurs and when an operation has completed.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This code can collect information about the operation for use in logs and telemetry.</source>
          <target state="new">This code can collect information about the operation for use in logs and telemetry.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In addition to indicating whether a failure is suitable for retry, the extended retry policies return a <bpt id="p1">**</bpt>RetryContext<ept id="p1">**</ept> object that indicates the number of retries, the results of the last request, whether the next retry will happen in the primary or secondary location (see table below for details).</source>
          <target state="new">In addition to indicating whether a failure is suitable for retry, the extended retry policies return a <bpt id="p1">**</bpt>RetryContext<ept id="p1">**</ept> object that indicates the number of retries, the results of the last request, whether the next retry will happen in the primary or secondary location (see table below for details).</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The properties of the <bpt id="p1">**</bpt>RetryContext<ept id="p1">**</ept> object can be used to decide if and when to attempt a retry.</source>
          <target state="new">The properties of the <bpt id="p1">**</bpt>RetryContext<ept id="p1">**</ept> object can be used to decide if and when to attempt a retry.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more details, see <bpt id="p1">[</bpt>IExtendedRetryPolicy.Evaluate Method<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.retrypolicies.iextendedretrypolicy.evaluate.aspx)</ept>.</source>
          <target state="new">For more details, see <bpt id="p1">[</bpt>IExtendedRetryPolicy.Evaluate Method<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.retrypolicies.iextendedretrypolicy.evaluate.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following table shows the default settings for the built-in retry policies.</source>
          <target state="new">The following table shows the default settings for the built-in retry policies.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="new">Setting</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="new">Default value</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="new">Meaning</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Table / Blob / File</source>
          <target state="new">Table / Blob / File</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>QueueRequestOptions</source>
          <target state="new">QueueRequestOptions</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>MaximumExecutionTime</source>
          <target state="new">MaximumExecutionTime</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ServerTimeout</source>
          <target state="new">ServerTimeout</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>LocationMode</source>
          <target state="new">LocationMode</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>RetryPolicy</source>
          <target state="new">RetryPolicy</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>120 seconds</source>
          <target state="new">120 seconds</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="new">None</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>ExponentialPolicy</source>
          <target state="new">ExponentialPolicy</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Maximum execution time for the request, including all potential retry attempts.</source>
          <target state="new">Maximum execution time for the request, including all potential retry attempts.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Server timeout interval for the request (value is rounded to seconds).</source>
          <target state="new">Server timeout interval for the request (value is rounded to seconds).</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If not specified, it will use the default value for all requests to the server.</source>
          <target state="new">If not specified, it will use the default value for all requests to the server.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Usually, the best option is to omit this setting so that the server default is used.</source>
          <target state="new">Usually, the best option is to omit this setting so that the server default is used.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If the storage account is created with the Read access geo-redundant storage (RA-GRS) replication option, you can use the location mode to indicate which location should receive the request.</source>
          <target state="new">If the storage account is created with the Read access geo-redundant storage (RA-GRS) replication option, you can use the location mode to indicate which location should receive the request.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, if <bpt id="p1">**</bpt>PrimaryThenSecondary<ept id="p1">**</ept> is specified, requests are always sent to the primary location first.</source>
          <target state="new">For example, if <bpt id="p1">**</bpt>PrimaryThenSecondary<ept id="p1">**</ept> is specified, requests are always sent to the primary location first.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If a request fails, it is sent to the secondary location.</source>
          <target state="new">If a request fails, it is sent to the secondary location.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See below for details of each option.</source>
          <target state="new">See below for details of each option.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Exponential policy</source>
          <target state="new">Exponential policy</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>maxAttempt</source>
          <target state="new">maxAttempt</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>deltaBackoff</source>
          <target state="new">deltaBackoff</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>MinBackoff</source>
          <target state="new">MinBackoff</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>MaxBackoff</source>
          <target state="new">MaxBackoff</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>4 seconds</source>
          <target state="new">4 seconds</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>3 seconds</source>
          <target state="new">3 seconds</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>30 seconds</source>
          <target state="new">30 seconds</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Number of retry attempts.</source>
          <target state="new">Number of retry attempts.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Back-off interval between retries.</source>
          <target state="new">Back-off interval between retries.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Multiples of this timespan, including a random element, will be used for subsequent retry attempts.</source>
          <target state="new">Multiples of this timespan, including a random element, will be used for subsequent retry attempts.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Added to all retry intervals computed from deltaBackoff.</source>
          <target state="new">Added to all retry intervals computed from deltaBackoff.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This value cannot be changed.</source>
          <target state="new">This value cannot be changed.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>MaxBackoff is used if the computed retry interval is greater than MaxBackoff.</source>
          <target state="new">MaxBackoff is used if the computed retry interval is greater than MaxBackoff.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This value cannot be changed.</source>
          <target state="new">This value cannot be changed.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Linear policy</source>
          <target state="new">Linear policy</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>maxAttempt</source>
          <target state="new">maxAttempt</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>deltaBackoff</source>
          <target state="new">deltaBackoff</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>30 seconds</source>
          <target state="new">30 seconds</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Number of retry attempts.</source>
          <target state="new">Number of retry attempts.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Back-off interval between retries.</source>
          <target state="new">Back-off interval between retries.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when accessing Azure storage services using the storage client API:</source>
          <target state="new">Consider the following guidelines when accessing Azure storage services using the storage client API:</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Use the built-in retry policies from the Microsoft.WindowsAzure.Storage.RetryPolicies namespace where they are appropriate for your requirements.</source>
          <target state="new">Use the built-in retry policies from the Microsoft.WindowsAzure.Storage.RetryPolicies namespace where they are appropriate for your requirements.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In most cases, these policies will be sufficient.</source>
          <target state="new">In most cases, these policies will be sufficient.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>ExponentialRetry<ept id="p1">**</ept> policy in batch operations, background tasks, or non-interactive scenarios.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>ExponentialRetry<ept id="p1">**</ept> policy in batch operations, background tasks, or non-interactive scenarios.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In these scenarios, you can typically allow more time for the service to recover—with a consequently increased chance of the operation eventually succeeding.</source>
          <target state="new">In these scenarios, you can typically allow more time for the service to recover—with a consequently increased chance of the operation eventually succeeding.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Consider specifying the <bpt id="p1">**</bpt>MaximumExecutionTime<ept id="p1">**</ept> property of the <bpt id="p2">**</bpt>RequestOptions<ept id="p2">**</ept> parameter to limit the total execution time, but take into account the type and size of the operation when choosing a timeout value.</source>
          <target state="new">Consider specifying the <bpt id="p1">**</bpt>MaximumExecutionTime<ept id="p1">**</ept> property of the <bpt id="p2">**</bpt>RequestOptions<ept id="p2">**</ept> parameter to limit the total execution time, but take into account the type and size of the operation when choosing a timeout value.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If you need to implement a custom retry, avoid creating wrappers around the storage client classes.</source>
          <target state="new">If you need to implement a custom retry, avoid creating wrappers around the storage client classes.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Instead, use the capabilities to extend the existing policies through the <bpt id="p1">**</bpt>IExtendedRetryPolicy<ept id="p1">**</ept> interface.</source>
          <target state="new">Instead, use the capabilities to extend the existing policies through the <bpt id="p1">**</bpt>IExtendedRetryPolicy<ept id="p1">**</ept> interface.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If you are using read access geo-redundant storage (RA-GRS) you can use the <bpt id="p1">**</bpt>LocationMode<ept id="p1">**</ept> to specify that retry attempts will access the secondary read-only copy of the store should the primary access fail.</source>
          <target state="new">If you are using read access geo-redundant storage (RA-GRS) you can use the <bpt id="p1">**</bpt>LocationMode<ept id="p1">**</ept> to specify that retry attempts will access the secondary read-only copy of the store should the primary access fail.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>However, when using this option you must ensure that your application can work successfully with data that may be stale if the replication from the primary store has not yet completed.</source>
          <target state="new">However, when using this option you must ensure that your application can work successfully with data that may be stale if the replication from the primary store has not yet completed.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Consider starting with following settings for retrying operations.</source>
          <target state="new">Consider starting with following settings for retrying operations.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</source>
          <target state="new">These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Sample target E2E</source>
          <target state="new">Sample target E2E</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>max latency</source>
          <target state="new">max latency</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Retry policy</source>
          <target state="new">Retry policy</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new">Settings</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="new">Values</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="new">How it works</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Interactive, UI,</source>
          <target state="new">Interactive, UI,</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>or foreground</source>
          <target state="new">or foreground</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>2 seconds</source>
          <target state="new">2 seconds</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Linear</source>
          <target state="new">Linear</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>maxAttempt</source>
          <target state="new">maxAttempt</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>deltaBackoff</source>
          <target state="new">deltaBackoff</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>500 ms</source>
          <target state="new">500 ms</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 500 ms</source>
          <target state="new">Attempt 1 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay 500 ms</source>
          <target state="new">Attempt 2 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay 500 ms</source>
          <target state="new">Attempt 3 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="new">Background</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>or batch</source>
          <target state="new">or batch</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>30 seconds</source>
          <target state="new">30 seconds</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Exponential</source>
          <target state="new">Exponential</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>maxAttempt</source>
          <target state="new">maxAttempt</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>deltaBackoff</source>
          <target state="new">deltaBackoff</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="new">5</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>4 seconds</source>
          <target state="new">4 seconds</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay ~3 sec</source>
          <target state="new">Attempt 1 - delay ~3 sec</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay ~7 sec</source>
          <target state="new">Attempt 2 - delay ~7 sec</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay ~15 sec</source>
          <target state="new">Attempt 3 - delay ~15 sec</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Telemetry</source>
          <target state="new">Telemetry</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Retry attempts are logged to a <bpt id="p1">**</bpt>TraceSource<ept id="p1">**</ept>.</source>
          <target state="new">Retry attempts are logged to a <bpt id="p1">**</bpt>TraceSource<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You must configure a <bpt id="p1">**</bpt>TraceListener<ept id="p1">**</ept> to capture the events and write them to a suitable destination log.</source>
          <target state="new">You must configure a <bpt id="p1">**</bpt>TraceListener<ept id="p1">**</ept> to capture the events and write them to a suitable destination log.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>TextWriterTraceListener<ept id="p1">**</ept> or <bpt id="p2">**</bpt>XmlWriterTraceListener<ept id="p2">**</ept> to write the data to a log file, the <bpt id="p3">**</bpt>EventLogTraceListener<ept id="p3">**</ept> to write to the Windows Event Log, or the <bpt id="p4">**</bpt>EventProviderTraceListener<ept id="p4">**</ept> to write trace data to the ETW subsystem.</source>
          <target state="new">You can use the <bpt id="p1">**</bpt>TextWriterTraceListener<ept id="p1">**</ept> or <bpt id="p2">**</bpt>XmlWriterTraceListener<ept id="p2">**</ept> to write the data to a log file, the <bpt id="p3">**</bpt>EventLogTraceListener<ept id="p3">**</ept> to write to the Windows Event Log, or the <bpt id="p4">**</bpt>EventProviderTraceListener<ept id="p4">**</ept> to write trace data to the ETW subsystem.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You can also configure auto-flushing of the buffer, and the verbosity of events that will be logged (for example, Error, Warning, Informational, and Verbose).</source>
          <target state="new">You can also configure auto-flushing of the buffer, and the verbosity of events that will be logged (for example, Error, Warning, Informational, and Verbose).</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Client-side Logging with the .NET Storage Client Library<ept id="p1">](http://msdn.microsoft.com/library/azure/dn782839.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Client-side Logging with the .NET Storage Client Library<ept id="p1">](http://msdn.microsoft.com/library/azure/dn782839.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Operations can receive an <bpt id="p1">**</bpt>OperationContext<ept id="p1">**</ept> instance, which exposes a <bpt id="p2">**</bpt>Retrying<ept id="p2">**</ept> event that can be used to attach custom telemetry logic.</source>
          <target state="new">Operations can receive an <bpt id="p1">**</bpt>OperationContext<ept id="p1">**</ept> instance, which exposes a <bpt id="p2">**</bpt>Retrying<ept id="p2">**</ept> event that can be used to attach custom telemetry logic.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>OperationContext.Retrying Event<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.operationcontext.retrying.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>OperationContext.Retrying Event<ept id="p1">](http://msdn.microsoft.com/library/microsoft.windowsazure.storage.operationcontext.retrying.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Examples (Azure storage)</source>
          <target state="new">Examples (Azure storage)</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create two <bpt id="p1">**</bpt>TableRequestOptions<ept id="p1">**</ept> instances with different retry settings; one for interactive requests and one for background requests.</source>
          <target state="new">The following code example shows how to create two <bpt id="p1">**</bpt>TableRequestOptions<ept id="p1">**</ept> instances with different retry settings; one for interactive requests and one for background requests.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The example then sets these two retry policies on the client so that they apply for all requests, and also sets the interactive strategy on a specific request so that it overrides the default settings applied to the client.</source>
          <target state="new">The example then sets these two retry policies on the client so that they apply for all requests, and also sets the interactive strategy on a specific request so that it overrides the default settings applied to the client.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Azure Storage Client Library Retry Policy Recommendations</source>
          <target state="new">Azure Storage Client Library Retry Policy Recommendations</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Storage Client Library 2.0 – Implementing Retry Policies</source>
          <target state="new">Storage Client Library 2.0 – Implementing Retry Policies</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>SQL Database using Entity Framework 6 retry guidelines</source>
          <target state="new">SQL Database using Entity Framework 6 retry guidelines</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>SQL Database is a hosted SQL database available in a range of sizes and as both a standard (shared) and premium (non-shared) service.</source>
          <target state="new">SQL Database is a hosted SQL database available in a range of sizes and as both a standard (shared) and premium (non-shared) service.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Entity Framework is an object-relational mapper that enables .NET developers to work with relational data using domain-specific objects.</source>
          <target state="new">Entity Framework is an object-relational mapper that enables .NET developers to work with relational data using domain-specific objects.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>It eliminates the need for most of the data-access code that developers usually need to write.</source>
          <target state="new">It eliminates the need for most of the data-access code that developers usually need to write.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Retry support is provided when accessing SQL Database using Entity Framework 6.0 and higher through a mechanism called <bpt id="p1">[</bpt>Connection Resiliency / Retry Logic<ept id="p1">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>.</source>
          <target state="new">Retry support is provided when accessing SQL Database using Entity Framework 6.0 and higher through a mechanism called <bpt id="p1">[</bpt>Connection Resiliency / Retry Logic<ept id="p1">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A full specification is available in the <bpt id="p1">[</bpt>.NET Entity Framework wiki<ept id="p1">](https://entityframework.codeplex.com/wikipage?title=Connection%20Resiliency%20Spec)</ept> on Codeplex.</source>
          <target state="new">A full specification is available in the <bpt id="p1">[</bpt>.NET Entity Framework wiki<ept id="p1">](https://entityframework.codeplex.com/wikipage?title=Connection%20Resiliency%20Spec)</ept> on Codeplex.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The main features of the retry mechanism are:</source>
          <target state="new">The main features of the retry mechanism are:</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The primary abstraction is the <bpt id="p1">**</bpt>IDbExecutionStrategy<ept id="p1">**</ept> interface.</source>
          <target state="new">The primary abstraction is the <bpt id="p1">**</bpt>IDbExecutionStrategy<ept id="p1">**</ept> interface.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This interface:</source>
          <target state="new">This interface:</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Defines synchronous and asynchronous <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>* methods.</source>
          <target state="new">Defines synchronous and asynchronous <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>* methods.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Defines classes that can be used directly or can be configured on a database context as a default strategy, mapped to provider name, or mapped to a provider name and server name.</source>
          <target state="new">Defines classes that can be used directly or can be configured on a database context as a default strategy, mapped to provider name, or mapped to a provider name and server name.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>When configured on a context, retries occur at the level of individual database operations, of which there might be several for a given context operation.</source>
          <target state="new">When configured on a context, retries occur at the level of individual database operations, of which there might be several for a given context operation.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Defines when to retry a failed connection, and how.</source>
          <target state="new">Defines when to retry a failed connection, and how.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>It includes several built-in implementations of the <bpt id="p1">**</bpt>IDbExecutionStrategy<ept id="p1">**</ept> interface:</source>
          <target state="new">It includes several built-in implementations of the <bpt id="p1">**</bpt>IDbExecutionStrategy<ept id="p1">**</ept> interface:</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Default - no retrying.</source>
          <target state="new">Default - no retrying.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Default for SQL Database (automatic) - no retrying, but inspects exceptions and wraps them with suggestion to use the SQL Database strategy.</source>
          <target state="new">Default for SQL Database (automatic) - no retrying, but inspects exceptions and wraps them with suggestion to use the SQL Database strategy.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Default for SQL Database - exponential (inherited from base class) plus SQL Database detection logic.</source>
          <target state="new">Default for SQL Database - exponential (inherited from base class) plus SQL Database detection logic.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>It implements an exponential back-off strategy that includes randomization.</source>
          <target state="new">It implements an exponential back-off strategy that includes randomization.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The built-in retry classes are stateful and are not thread safe.</source>
          <target state="new">The built-in retry classes are stateful and are not thread safe.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>However, they can be reused after the current operation is completed.</source>
          <target state="new">However, they can be reused after the current operation is completed.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If the specified retry count is exceeded, the results are wrapped in a new exception.</source>
          <target state="new">If the specified retry count is exceeded, the results are wrapped in a new exception.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>It does not bubble up the current exception.</source>
          <target state="new">It does not bubble up the current exception.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Policy configuration (SQL Database using Entity Framework 6)</source>
          <target state="new">Policy configuration (SQL Database using Entity Framework 6)</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Retry support is provided when accessing SQL Database using Entity Framework 6.0 and higher.</source>
          <target state="new">Retry support is provided when accessing SQL Database using Entity Framework 6.0 and higher.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Retry policies are configured programmatically.</source>
          <target state="new">Retry policies are configured programmatically.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The configuration cannot be changed on a per-operation basis.</source>
          <target state="new">The configuration cannot be changed on a per-operation basis.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>When configuring a strategy on the context as the default, you specify a function that creates a new strategy on demand.</source>
          <target state="new">When configuring a strategy on the context as the default, you specify a function that creates a new strategy on demand.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The following code shows how you can create a retry configuration class that extends the <bpt id="p1">**</bpt>DbConfiguration<ept id="p1">**</ept> base class.</source>
          <target state="new">The following code shows how you can create a retry configuration class that extends the <bpt id="p1">**</bpt>DbConfiguration<ept id="p1">**</ept> base class.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>You can then specify this as the default retry strategy for all operations using the <bpt id="p1">**</bpt>SetConfiguration<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>DbConfiguration<ept id="p2">**</ept> instance when the application starts.</source>
          <target state="new">You can then specify this as the default retry strategy for all operations using the <bpt id="p1">**</bpt>SetConfiguration<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>DbConfiguration<ept id="p2">**</ept> instance when the application starts.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>By default, EF will automatically discover and use the configuration class.</source>
          <target state="new">By default, EF will automatically discover and use the configuration class.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>You can specify the retry configuration class for a context by annotating the context class with a <bpt id="p1">**</bpt>DbConfigurationType<ept id="p1">**</ept> attribute.</source>
          <target state="new">You can specify the retry configuration class for a context by annotating the context class with a <bpt id="p1">**</bpt>DbConfigurationType<ept id="p1">**</ept> attribute.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>However, if you have only one configuration class, EF will use it without the need to annotate the context.</source>
          <target state="new">However, if you have only one configuration class, EF will use it without the need to annotate the context.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If you need to use different retry strategies for specific operations, or disable retries for specific operations, you can create a configuration class that allows you to suspend or swap strategies by setting a flag in the <bpt id="p1">**</bpt>CallContext<ept id="p1">**</ept>.</source>
          <target state="new">If you need to use different retry strategies for specific operations, or disable retries for specific operations, you can create a configuration class that allows you to suspend or swap strategies by setting a flag in the <bpt id="p1">**</bpt>CallContext<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The configuration class can use this flag to switch strategies, or disable the strategy you provide and use a default strategy.</source>
          <target state="new">The configuration class can use this flag to switch strategies, or disable the strategy you provide and use a default strategy.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Suspend Execution Strategy<ept id="p1">](http://msdn.microsoft.com/dn307226#transactions_workarounds)</ept> in the page Limitations with Retrying Execution Strategies (EF6 onwards).</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Suspend Execution Strategy<ept id="p1">](http://msdn.microsoft.com/dn307226#transactions_workarounds)</ept> in the page Limitations with Retrying Execution Strategies (EF6 onwards).</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Another technique for using specific retry strategies for individual operations is to create an instance of the required strategy class and supply the desired settings through parameters.</source>
          <target state="new">Another technique for using specific retry strategies for individual operations is to create an instance of the required strategy class and supply the desired settings through parameters.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>You then invoke its <bpt id="p1">**</bpt>ExecuteAsync<ept id="p1">**</ept> method.</source>
          <target state="new">You then invoke its <bpt id="p1">**</bpt>ExecuteAsync<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The simplest way to use a <bpt id="p1">**</bpt>DbConfiguration<ept id="p1">**</ept> class is to locate it in the same assembly as the <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> class.</source>
          <target state="new">The simplest way to use a <bpt id="p1">**</bpt>DbConfiguration<ept id="p1">**</ept> class is to locate it in the same assembly as the <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>However, this is not appropriate when the same context is required in different scenarios, such as different interactive and background retry strategies.</source>
          <target state="new">However, this is not appropriate when the same context is required in different scenarios, such as different interactive and background retry strategies.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If the different contexts execute in separate AppDomains, you can use the built-in support for specifying configuration classes in the configuration file or set it explicitly using code.</source>
          <target state="new">If the different contexts execute in separate AppDomains, you can use the built-in support for specifying configuration classes in the configuration file or set it explicitly using code.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>If the different contexts must execute in the same AppDomain, a custom solution will be required.</source>
          <target state="new">If the different contexts must execute in the same AppDomain, a custom solution will be required.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Code-Based Configuration (EF6 onwards)<ept id="p1">](http://msdn.microsoft.com/data/jj680699.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Code-Based Configuration (EF6 onwards)<ept id="p1">](http://msdn.microsoft.com/data/jj680699.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The following table shows the default settings for the built-in retry policy when using EF6.</source>
          <target state="new">The following table shows the default settings for the built-in retry policy when using EF6.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when accessing SQL Database using EF6:</source>
          <target state="new">Consider the following guidelines when accessing SQL Database using EF6:</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Choose the appropriate service option (shared or premium).</source>
          <target state="new">Choose the appropriate service option (shared or premium).</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A shared instance may suffer longer than usual connection delays and throttling due to the usage by other tenants of the shared server.</source>
          <target state="new">A shared instance may suffer longer than usual connection delays and throttling due to the usage by other tenants of the shared server.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If predictable performance and reliable low latency operations are required, consider choosing the premium option.</source>
          <target state="new">If predictable performance and reliable low latency operations are required, consider choosing the premium option.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A fixed interval strategy is not recommended for use with Azure SQL Database.</source>
          <target state="new">A fixed interval strategy is not recommended for use with Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Instead, use an exponential back-off strategy because the service may be overloaded, and longer delays allow more time for it to recover.</source>
          <target state="new">Instead, use an exponential back-off strategy because the service may be overloaded, and longer delays allow more time for it to recover.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Choose a suitable value for the connection and command timeouts when defining connections.</source>
          <target state="new">Choose a suitable value for the connection and command timeouts when defining connections.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Base the timeout on both your business logic design and through testing.</source>
          <target state="new">Base the timeout on both your business logic design and through testing.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>You may need to modify this value over time as the volumes of data or the business processes change.</source>
          <target state="new">You may need to modify this value over time as the volumes of data or the business processes change.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Too short a timeout may result in premature failures of connections when the database is busy.</source>
          <target state="new">Too short a timeout may result in premature failures of connections when the database is busy.</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Too long a timeout may prevent the retry logic working correctly by waiting too long before detecting a failed connection.</source>
          <target state="new">Too long a timeout may prevent the retry logic working correctly by waiting too long before detecting a failed connection.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The value of the timeout is a component of the end-to-end latency, although you cannot easily determine how many commands will execute when saving the context.</source>
          <target state="new">The value of the timeout is a component of the end-to-end latency, although you cannot easily determine how many commands will execute when saving the context.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You can change the default timeout by setting the <bpt id="p1">**</bpt>CommandTimeout<ept id="p1">**</ept> property of the <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> instance.</source>
          <target state="new">You can change the default timeout by setting the <bpt id="p1">**</bpt>CommandTimeout<ept id="p1">**</ept> property of the <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> instance.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Entity Framework supports retry configurations defined in configuration files.</source>
          <target state="new">Entity Framework supports retry configurations defined in configuration files.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>However, for maximum flexibility on Azure you should consider creating the configuration programmatically within the application.</source>
          <target state="new">However, for maximum flexibility on Azure you should consider creating the configuration programmatically within the application.</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The specific parameters for the retry policies, such as the number of retries and the retry intervals, can be stored in the service configuration file and used at runtime to create the appropriate policies.</source>
          <target state="new">The specific parameters for the retry policies, such as the number of retries and the retry intervals, can be stored in the service configuration file and used at runtime to create the appropriate policies.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This allows the settings to be changed within requiring the application to be restarted.</source>
          <target state="new">This allows the settings to be changed within requiring the application to be restarted.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Consider starting with following settings for retrying operations.</source>
          <target state="new">Consider starting with following settings for retrying operations.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>You cannot specify the delay between retry attempts (it is fixed and generated as an exponential sequence).</source>
          <target state="new">You cannot specify the delay between retry attempts (it is fixed and generated as an exponential sequence).</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>You can specify only the maximum values, as shown here; unless you create a custom retry strategy.</source>
          <target state="new">You can specify only the maximum values, as shown here; unless you create a custom retry strategy.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</source>
          <target state="new">These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Sample target E2E</source>
          <target state="new">Sample target E2E</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>max latency</source>
          <target state="new">max latency</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Retry policy</source>
          <target state="new">Retry policy</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new">Settings</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="new">Values</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="new">How it works</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Interactive, UI,</source>
          <target state="new">Interactive, UI,</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>or foreground</source>
          <target state="new">or foreground</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>2 seconds</source>
          <target state="new">2 seconds</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Exponential</source>
          <target state="new">Exponential</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>MaxRetryCount</source>
          <target state="new">MaxRetryCount</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>MaxDelay</source>
          <target state="new">MaxDelay</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>750 ms</source>
          <target state="new">750 ms</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay 750 ms</source>
          <target state="new">Attempt 2 - delay 750 ms</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Attempt 3 – delay 750 ms</source>
          <target state="new">Attempt 3 – delay 750 ms</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="new">Background</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>or batch</source>
          <target state="new">or batch</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>30 seconds</source>
          <target state="new">30 seconds</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Exponential</source>
          <target state="new">Exponential</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>MaxRetryCount</source>
          <target state="new">MaxRetryCount</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>MaxDelay</source>
          <target state="new">MaxDelay</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="new">5</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>12 seconds</source>
          <target state="new">12 seconds</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay ~1 sec</source>
          <target state="new">Attempt 2 - delay ~1 sec</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay ~3 sec</source>
          <target state="new">Attempt 3 - delay ~3 sec</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Attempt 4 - delay ~7 sec</source>
          <target state="new">Attempt 4 - delay ~7 sec</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Attempt 5 - delay 12 sec</source>
          <target state="new">Attempt 5 - delay 12 sec</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The end-to-end latency targets assume the default timeout for connections to the service.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The end-to-end latency targets assume the default timeout for connections to the service.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If you specify longer connection timeouts, the end-to-end latency will be extended by this additional time for every retry attempt.</source>
          <target state="new">If you specify longer connection timeouts, the end-to-end latency will be extended by this additional time for every retry attempt.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Examples (SQL Database using Entity Framework 6)</source>
          <target state="new">Examples (SQL Database using Entity Framework 6)</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The following code example defines a simple data access solution that uses Entity Framework.</source>
          <target state="new">The following code example defines a simple data access solution that uses Entity Framework.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>It sets a specific retry strategy by defining an instance of a class named <bpt id="p1">**</bpt>BlogConfiguration<ept id="p1">**</ept> that extends <bpt id="p2">**</bpt>DbConfiguration<ept id="p2">**</ept>.</source>
          <target state="new">It sets a specific retry strategy by defining an instance of a class named <bpt id="p1">**</bpt>BlogConfiguration<ept id="p1">**</ept> that extends <bpt id="p2">**</bpt>DbConfiguration<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>More examples of using the Entity Framework retry mechanism can be found in <bpt id="p1">[</bpt>Connection Resiliency / Retry Logic<ept id="p1">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>.</source>
          <target state="new">More examples of using the Entity Framework retry mechanism can be found in <bpt id="p1">[</bpt>Connection Resiliency / Retry Logic<ept id="p1">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Azure SQL Database Performance and Elasticity Guide</source>
          <target state="new">Azure SQL Database Performance and Elasticity Guide</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>SQL Database using ADO.NET retry guidelines</source>
          <target state="new">SQL Database using ADO.NET retry guidelines</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>SQL Database is a hosted SQL database available in a range of sizes and as both a standard (shared) and premium (non-shared) service.</source>
          <target state="new">SQL Database is a hosted SQL database available in a range of sizes and as both a standard (shared) and premium (non-shared) service.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>SQL Database has no built-in support for retries when accessed using ADO.NET.</source>
          <target state="new">SQL Database has no built-in support for retries when accessed using ADO.NET.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>However, the return codes from requests can be used to determine why a request failed.</source>
          <target state="new">However, the return codes from requests can be used to determine why a request failed.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The page <bpt id="p1">[</bpt>Azure SQL Database Throttling<ept id="p1">](http://msdn.microsoft.com/library/dn338079.aspx)</ept> explains how throttling can prevent connections, the return codes for specific situations, and how you can handle these and retry operations.</source>
          <target state="new">The page <bpt id="p1">[</bpt>Azure SQL Database Throttling<ept id="p1">](http://msdn.microsoft.com/library/dn338079.aspx)</ept> explains how throttling can prevent connections, the return codes for specific situations, and how you can handle these and retry operations.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>You can use the Transient Fault Handling Application Block (Topaz) with the Nuget package EnterpriseLibrary.TransientFaultHandling.Data (class <bpt id="p1">**</bpt>SqlAzureTransientErrorDetectionStrategy<ept id="p1">**</ept>) to implement a retry mechanism for SQL Database.</source>
          <target state="new">You can use the Transient Fault Handling Application Block (Topaz) with the Nuget package EnterpriseLibrary.TransientFaultHandling.Data (class <bpt id="p1">**</bpt>SqlAzureTransientErrorDetectionStrategy<ept id="p1">**</ept>) to implement a retry mechanism for SQL Database.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The block also provides the <bpt id="p1">**</bpt>ReliableSqlConnection<ept id="p1">**</ept> class, which implements the old ADO.NET 1.0 API (<bpt id="p2">**</bpt>IDbConnection<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>DbConnection<ept id="p3">**</ept>) and performs retries and connection management internally.</source>
          <target state="new">The block also provides the <bpt id="p1">**</bpt>ReliableSqlConnection<ept id="p1">**</ept> class, which implements the old ADO.NET 1.0 API (<bpt id="p2">**</bpt>IDbConnection<ept id="p2">**</ept> instead of <bpt id="p3">**</bpt>DbConnection<ept id="p3">**</ept>) and performs retries and connection management internally.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>While convenient, this requires you to use a different set of methods for invoking operations with retries, and so is not a simple direct replacement.</source>
          <target state="new">While convenient, this requires you to use a different set of methods for invoking operations with retries, and so is not a simple direct replacement.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>It does not support asynchronous execution, which is recommended when implementing and using Azure services.</source>
          <target state="new">It does not support asynchronous execution, which is recommended when implementing and using Azure services.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>In addition, because this class uses ADO.NET 1.0, it does not benefit from the recent improvements and updates to ADO.NET.</source>
          <target state="new">In addition, because this class uses ADO.NET 1.0, it does not benefit from the recent improvements and updates to ADO.NET.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Policy configuration (SQL Database using ADO.NET)</source>
          <target state="new">Policy configuration (SQL Database using ADO.NET)</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The Transient Fault Handling Application Block supports both file-based and programmatic configuration.</source>
          <target state="new">The Transient Fault Handling Application Block supports both file-based and programmatic configuration.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>In general, you should use programmatic configuration for maximum flexibility (see the notes in the following section for more information).</source>
          <target state="new">In general, you should use programmatic configuration for maximum flexibility (see the notes in the following section for more information).</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The following code, which would be executed once at application startup, creates and populates a <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept> with a list of four retry strategies suitable for use with Azure SQL Database.</source>
          <target state="new">The following code, which would be executed once at application startup, creates and populates a <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept> with a list of four retry strategies suitable for use with Azure SQL Database.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>It also sets the default strategies for the <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept>.</source>
          <target state="new">It also sets the default strategies for the <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>These are the strategies that will be used for connections and commands if an alternative is not specified when creating a connection or command.</source>
          <target state="new">These are the strategies that will be used for connections and commands if an alternative is not specified when creating a connection or command.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For information about how you can use the retry policies you have configured when you access Azure SQL Database, see the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-sql-database-using-ado-net-)</ept> section below.</source>
          <target state="new">For information about how you can use the retry policies you have configured when you access Azure SQL Database, see the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-sql-database-using-ado-net-)</ept> section below.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Default strategies for the Transient Fault Handling Application Block are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</source>
          <target state="new">Default strategies for the Transient Fault Handling Application Block are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when accessing SQL Database using ADO.NET:</source>
          <target state="new">Consider the following guidelines when accessing SQL Database using ADO.NET:</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Choose the appropriate service option (shared or premium).</source>
          <target state="new">Choose the appropriate service option (shared or premium).</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>A shared instance may suffer longer than usual connection delays and throttling due to the usage by other tenants of the shared server.</source>
          <target state="new">A shared instance may suffer longer than usual connection delays and throttling due to the usage by other tenants of the shared server.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>If more predictable performance and reliable low latency operations are required, consider choosing the premium option.</source>
          <target state="new">If more predictable performance and reliable low latency operations are required, consider choosing the premium option.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Ensure that you perform retries at the appropriate level or scope to avoid non-idempotent operations causing inconsistency in the data.</source>
          <target state="new">Ensure that you perform retries at the appropriate level or scope to avoid non-idempotent operations causing inconsistency in the data.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Ideally, all operations should be idempotent so that they can be repeated without causing inconsistency.</source>
          <target state="new">Ideally, all operations should be idempotent so that they can be repeated without causing inconsistency.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Where this is not the case, the retry should be performed at a level or scope that allows all related changes to be undone if one operation fails; for example, from within a transactional scope.</source>
          <target state="new">Where this is not the case, the retry should be performed at a level or scope that allows all related changes to be undone if one operation fails; for example, from within a transactional scope.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx#Idempotent_Guarantee)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx#Idempotent_Guarantee)</ept>.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A fixed interval strategy is not recommended for use with Azure SQL Database except for interactive scenarios where there are only a few retries at very short intervals.</source>
          <target state="new">A fixed interval strategy is not recommended for use with Azure SQL Database except for interactive scenarios where there are only a few retries at very short intervals.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Instead, consider using an exponential back-off strategy for the majority of scenarios.</source>
          <target state="new">Instead, consider using an exponential back-off strategy for the majority of scenarios.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Choose a suitable value for the connection and command timeouts when defining connections.</source>
          <target state="new">Choose a suitable value for the connection and command timeouts when defining connections.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Too short a timeout may result in premature failures of connections when the database is busy.</source>
          <target state="new">Too short a timeout may result in premature failures of connections when the database is busy.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Too long a timeout may prevent the retry logic working correctly by waiting too long before detecting a failed connection.</source>
          <target state="new">Too long a timeout may prevent the retry logic working correctly by waiting too long before detecting a failed connection.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The value of the timeout is a component of the end-to-end latency; it is effectively added to the retry delay specified in the retry policy for every retry attempt.</source>
          <target state="new">The value of the timeout is a component of the end-to-end latency; it is effectively added to the retry delay specified in the retry policy for every retry attempt.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Close the connection after a certain number of retries, even when using an exponential back off retry logic, and retry the operation on a new connection.</source>
          <target state="new">Close the connection after a certain number of retries, even when using an exponential back off retry logic, and retry the operation on a new connection.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Retrying the same operation multiple times on the same connection can be a factor that contributes to connection problems.</source>
          <target state="new">Retrying the same operation multiple times on the same connection can be a factor that contributes to connection problems.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>For an example of this technique, see <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx)</ept>.</source>
          <target state="new">For an example of this technique, see <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>When connection pooling is in use (the default) there is a chance that the same connection will be chosen from the pool, even after closing and reopening a connection.</source>
          <target state="new">When connection pooling is in use (the default) there is a chance that the same connection will be chosen from the pool, even after closing and reopening a connection.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>If this is the case, a technique to resolve it is to call the <bpt id="p1">**</bpt>ClearPool<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>SqlConnection<ept id="p2">**</ept> class to mark the connection as not reusable.</source>
          <target state="new">If this is the case, a technique to resolve it is to call the <bpt id="p1">**</bpt>ClearPool<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>SqlConnection<ept id="p2">**</ept> class to mark the connection as not reusable.</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>However, you should do this only after several connection attempts have failed, and only when encountering the specific class of transient failures such as SQL timeouts (error code -2) related to faulty connections.</source>
          <target state="new">However, you should do this only after several connection attempts have failed, and only when encountering the specific class of transient failures such as SQL timeouts (error code -2) related to faulty connections.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>If the data access code uses transactions initiated as <bpt id="p1">**</bpt>TransactionScope<ept id="p1">**</ept> instances, the retry logic should reopen the connection and initiate a new transaction scope.</source>
          <target state="new">If the data access code uses transactions initiated as <bpt id="p1">**</bpt>TransactionScope<ept id="p1">**</ept> instances, the retry logic should reopen the connection and initiate a new transaction scope.</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>For this reason, the retryable code block should encompass the entire scope of the transaction.</source>
          <target state="new">For this reason, the retryable code block should encompass the entire scope of the transaction.</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The Transient Fault Handling Application Block supports retry configurations entirely defined in configuration files.</source>
          <target state="new">The Transient Fault Handling Application Block supports retry configurations entirely defined in configuration files.</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>However, for maximum flexibility on Azure you should consider creating the configuration programmatically within the application.</source>
          <target state="new">However, for maximum flexibility on Azure you should consider creating the configuration programmatically within the application.</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The specific parameters for the retry policies, such as the number of retries and the retry intervals, can be stored in the service configuration file and used at runtime to create the appropriate policies.</source>
          <target state="new">The specific parameters for the retry policies, such as the number of retries and the retry intervals, can be stored in the service configuration file and used at runtime to create the appropriate policies.</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>This allows the settings to be changed within requiring the application to be restarted.</source>
          <target state="new">This allows the settings to be changed within requiring the application to be restarted.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Consider starting with following settings for retrying operations.</source>
          <target state="new">Consider starting with following settings for retrying operations.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</source>
          <target state="new">These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Sample target E2E</source>
          <target state="new">Sample target E2E</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>max latency</source>
          <target state="new">max latency</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Retry strategy</source>
          <target state="new">Retry strategy</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new">Settings</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="new">Values</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="new">How it works</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Interactive, UI,</source>
          <target state="new">Interactive, UI,</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>or foreground</source>
          <target state="new">or foreground</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>2 sec</source>
          <target state="new">2 sec</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>FixedInterval</source>
          <target state="new">FixedInterval</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Retry count</source>
          <target state="new">Retry count</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Retry interval</source>
          <target state="new">Retry interval</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>First fast retry</source>
          <target state="new">First fast retry</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>500 ms</source>
          <target state="new">500 ms</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay 500 ms</source>
          <target state="new">Attempt 2 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay 500 ms</source>
          <target state="new">Attempt 3 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="new">Background</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>or batch</source>
          <target state="new">or batch</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>30 sec</source>
          <target state="new">30 sec</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>ExponentialBackoff</source>
          <target state="new">ExponentialBackoff</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Retry count</source>
          <target state="new">Retry count</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Min back-off</source>
          <target state="new">Min back-off</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Max back-off</source>
          <target state="new">Max back-off</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Delta back-off</source>
          <target state="new">Delta back-off</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>First fast retry</source>
          <target state="new">First fast retry</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="new">5</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>0 sec</source>
          <target state="new">0 sec</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>60 sec</source>
          <target state="new">60 sec</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>2 sec</source>
          <target state="new">2 sec</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="new">false</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay ~2 sec</source>
          <target state="new">Attempt 2 - delay ~2 sec</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay ~6 sec</source>
          <target state="new">Attempt 3 - delay ~6 sec</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Attempt 4 - delay ~14 sec</source>
          <target state="new">Attempt 4 - delay ~14 sec</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Attempt 5 - delay ~30 sec</source>
          <target state="new">Attempt 5 - delay ~30 sec</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> The end-to-end latency targets assume the default timeout for connections to the service.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> The end-to-end latency targets assume the default timeout for connections to the service.</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If you specify longer connection timeouts, the end-to-end latency will be extended by this additional time for every retry attempt.</source>
          <target state="new">If you specify longer connection timeouts, the end-to-end latency will be extended by this additional time for every retry attempt.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Examples (SQL Database using ADO.NET)</source>
          <target state="new">Examples (SQL Database using ADO.NET)</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>This section describes how you can use the Transient Fault Handling Application Block to access Azure SQL Database using a set of retry policies you have configured in the <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept> (as shown in the previous section <bpt id="p2">[</bpt>Policy configuration<ept id="p2">](#policy-configuration-sql-database-using-ado-net-)</ept>.</source>
          <target state="new">This section describes how you can use the Transient Fault Handling Application Block to access Azure SQL Database using a set of retry policies you have configured in the <bpt id="p1">**</bpt>RetryManager<ept id="p1">**</ept> (as shown in the previous section <bpt id="p2">[</bpt>Policy configuration<ept id="p2">](#policy-configuration-sql-database-using-ado-net-)</ept>.</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The simplest approach to using the block is through the <bpt id="p1">**</bpt>ReliableSqlConnection<ept id="p1">**</ept> class, or by calling the extension methods such as <bpt id="p2">**</bpt>OpenWithRetry<ept id="p2">**</ept> on a connection (see <bpt id="p3">[</bpt>The Transient Fault Handling Application Block<ept id="p3">](http://msdn.microsoft.com/library/hh680934.aspx)</ept> for more information).</source>
          <target state="new">The simplest approach to using the block is through the <bpt id="p1">**</bpt>ReliableSqlConnection<ept id="p1">**</ept> class, or by calling the extension methods such as <bpt id="p2">**</bpt>OpenWithRetry<ept id="p2">**</ept> on a connection (see <bpt id="p3">[</bpt>The Transient Fault Handling Application Block<ept id="p3">](http://msdn.microsoft.com/library/hh680934.aspx)</ept> for more information).</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>However, in the current version of the Transient Fault Handling Application Block these approaches do not indigenously support asynchronous operations against SQL Database.</source>
          <target state="new">However, in the current version of the Transient Fault Handling Application Block these approaches do not indigenously support asynchronous operations against SQL Database.</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Good practice demands that you use only asynchronous techniques to access Azure services such as SQL Database, and so you should consider the following techniques to use the Transient Fault Handling Application Block with SQL Database.</source>
          <target state="new">Good practice demands that you use only asynchronous techniques to access Azure services such as SQL Database, and so you should consider the following techniques to use the Transient Fault Handling Application Block with SQL Database.</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>You can use the simplified asynchronous support in version 5 of the C# language to create asynchronous versions of the methods provided by the block.</source>
          <target state="new">You can use the simplified asynchronous support in version 5 of the C# language to create asynchronous versions of the methods provided by the block.</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>For example, the following code shows how you might create an asynchronous version of the <bpt id="p1">**</bpt>ExecuteReaderWithRetry<ept id="p1">**</ept> extension method.</source>
          <target state="new">For example, the following code shows how you might create an asynchronous version of the <bpt id="p1">**</bpt>ExecuteReaderWithRetry<ept id="p1">**</ept> extension method.</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The changes and additions to the original code are highlighted.</source>
          <target state="new">The changes and additions to the original code are highlighted.</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The source code for Topaz is available on GitHub at <bpt id="p1">[</bpt>Transient Fault Handling Application Block ("Topaz")<ept id="p1">](http://topaz.codeplex.com/SourceControl/latest)</ept>.</source>
          <target state="new">The source code for Topaz is available on GitHub at <bpt id="p1">[</bpt>Transient Fault Handling Application Block ("Topaz")<ept id="p1">](http://topaz.codeplex.com/SourceControl/latest)</ept>.</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>This new asynchronous extension method can be used in the same way as the synchronous versions included in the block.</source>
          <target state="new">This new asynchronous extension method can be used in the same way as the synchronous versions included in the block.</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>However, this approach deals only with individual operations or commands, and not with blocks of statements where there can be properly defined transactional boundaries.</source>
          <target state="new">However, this approach deals only with individual operations or commands, and not with blocks of statements where there can be properly defined transactional boundaries.</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>In addition, it does not address the situation of removing faulty connections from the connection pool so that they are not selected for subsequent attempts.</source>
          <target state="new">In addition, it does not address the situation of removing faulty connections from the connection pool so that they are not selected for subsequent attempts.</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>A synchronous example of resolving these issues can be found in <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx#Timeouts_amp_Connection_Management)</ept>.</source>
          <target state="new">A synchronous example of resolving these issues can be found in <bpt id="p1">[</bpt>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling<ept id="p1">](http://social.technet.microsoft.com/wiki/contents/articles/18665.cloud-service-fundamentals-data-access-layer-transient-fault-handling.aspx#Timeouts_amp_Connection_Management)</ept>.</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>In addition to retrying arbitrary sequences of database instructions, it clears the connection pool to remove invalid connections, and instruments the entire process.</source>
          <target state="new">In addition to retrying arbitrary sequences of database instructions, it clears the connection pool to remove invalid connections, and instruments the entire process.</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>While the code shown in this example is synchronous, it is relatively easy to convert it to asynchronous code.</source>
          <target state="new">While the code shown in this example is synchronous, it is relatively easy to convert it to asynchronous code.</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>For detailed information about using the Transient Fault Handling Application Block, see:</source>
          <target state="new">For detailed information about using the Transient Fault Handling Application Block, see:</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Using the Transient Fault Handling Application Block with SQL Azure</source>
          <target state="new">Using the Transient Fault Handling Application Block with SQL Azure</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Perseverance, Secret of All Triumphs: Using the Transient Fault Handling Application Block</source>
          <target state="new">Perseverance, Secret of All Triumphs: Using the Transient Fault Handling Application Block</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Cloud Service Fundamentals Data Access Layer – Transient Fault Handling</source>
          <target state="new">Cloud Service Fundamentals Data Access Layer – Transient Fault Handling</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>For general guidance on getting the most from SQL Database, see:</source>
          <target state="new">For general guidance on getting the most from SQL Database, see:</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Azure SQL Database Performance and Elasticity Guide</source>
          <target state="new">Azure SQL Database Performance and Elasticity Guide</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Minimizing Connection Pool errors in SQL Azure</source>
          <target state="new">Minimizing Connection Pool errors in SQL Azure</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Service Bus retry guidelines</source>
          <target state="new">Service Bus retry guidelines</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Service Bus is a cloud messaging platform that provides loosely coupled message exchange with improved scale and resiliency for components of an application, whether hosted in the cloud or on-premises.</source>
          <target state="new">Service Bus is a cloud messaging platform that provides loosely coupled message exchange with improved scale and resiliency for components of an application, whether hosted in the cloud or on-premises.</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Service Bus implements retries using implementations of the <bpt id="p1">[</bpt>RetryPolicy<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.retrypolicy.aspx)</ept> base class.</source>
          <target state="new">Service Bus implements retries using implementations of the <bpt id="p1">[</bpt>RetryPolicy<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.retrypolicy.aspx)</ept> base class.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>All of the Service Bus clients expose a <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> property that can be set to one of the implementations of the <bpt id="p2">**</bpt>RetryPolicy<ept id="p2">**</ept> base class.</source>
          <target state="new">All of the Service Bus clients expose a <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> property that can be set to one of the implementations of the <bpt id="p2">**</bpt>RetryPolicy<ept id="p2">**</ept> base class.</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The built-in implementations are:</source>
          <target state="new">The built-in implementations are:</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>RetryExponential Class<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.retryexponential.aspx)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt>RetryExponential Class<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.retryexponential.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>This exposes properties that control the back-off interval, the retry count, and the <bpt id="p1">**</bpt>TerminationTimeBuffer<ept id="p1">**</ept> property that is used to limit the total time for the operation to complete.</source>
          <target state="new">This exposes properties that control the back-off interval, the retry count, and the <bpt id="p1">**</bpt>TerminationTimeBuffer<ept id="p1">**</ept> property that is used to limit the total time for the operation to complete.</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>NoRetry Class<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.noretry.aspx)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt>NoRetry Class<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.noretry.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>This is used when retries at the Service Bus API level are not required, such as when retries are managed by another process as part of a batch or multiple step operation.</source>
          <target state="new">This is used when retries at the Service Bus API level are not required, such as when retries are managed by another process as part of a batch or multiple step operation.</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Service Bus actions can return a range of exceptions, as listed in <bpt id="p1">[</bpt>Appendix: Messaging Exceptions<ept id="p1">](http://msdn.microsoft.com/library/hh418082.aspx)</ept>.</source>
          <target state="new">Service Bus actions can return a range of exceptions, as listed in <bpt id="p1">[</bpt>Appendix: Messaging Exceptions<ept id="p1">](http://msdn.microsoft.com/library/hh418082.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The list provides information about which if these indicate that retrying the operation is appropriate.</source>
          <target state="new">The list provides information about which if these indicate that retrying the operation is appropriate.</target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>ServerBusyException<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.messaging.serverbusyexception.aspx)</ept> indicates that the client should wait for a period of time, then retry the operation.</source>
          <target state="new">For example, a <bpt id="p1">[</bpt>ServerBusyException<ept id="p1">](http://msdn.microsoft.com/library/microsoft.servicebus.messaging.serverbusyexception.aspx)</ept> indicates that the client should wait for a period of time, then retry the operation.</target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The occurrence of a <bpt id="p1">**</bpt>ServerBusyException<ept id="p1">**</ept> also causes Service Bus to switch to a different mode, in which an extra 10-second delay is added to the computed retry delays.</source>
          <target state="new">The occurrence of a <bpt id="p1">**</bpt>ServerBusyException<ept id="p1">**</ept> also causes Service Bus to switch to a different mode, in which an extra 10-second delay is added to the computed retry delays.</target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>This mode is reset after a short period.</source>
          <target state="new">This mode is reset after a short period.</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>The exceptions returned from Service Bus expose the <bpt id="p1">**</bpt>IsTransient<ept id="p1">**</ept> property that indicates if the client should retry the operation.</source>
          <target state="new">The exceptions returned from Service Bus expose the <bpt id="p1">**</bpt>IsTransient<ept id="p1">**</ept> property that indicates if the client should retry the operation.</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The built-in <bpt id="p1">**</bpt>RetryExponential<ept id="p1">**</ept> policy relies on the <bpt id="p2">**</bpt>IsTransient<ept id="p2">**</ept> property in the <bpt id="p3">**</bpt>MessagingException<ept id="p3">**</ept> class, which is the base class for all Service Bus exceptions.</source>
          <target state="new">The built-in <bpt id="p1">**</bpt>RetryExponential<ept id="p1">**</ept> policy relies on the <bpt id="p2">**</bpt>IsTransient<ept id="p2">**</ept> property in the <bpt id="p3">**</bpt>MessagingException<ept id="p3">**</ept> class, which is the base class for all Service Bus exceptions.</target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>If you create custom implementations of the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> base class you could use a combination of the exception type and the <bpt id="p2">**</bpt>IsTransient<ept id="p2">**</ept> property to provide more fine-grained control over retry actions.</source>
          <target state="new">If you create custom implementations of the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> base class you could use a combination of the exception type and the <bpt id="p2">**</bpt>IsTransient<ept id="p2">**</ept> property to provide more fine-grained control over retry actions.</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>For example, you could detect a <bpt id="p1">**</bpt>QuotaExceededException<ept id="p1">**</ept> and take action to drain the queue before retrying sending a message to it.</source>
          <target state="new">For example, you could detect a <bpt id="p1">**</bpt>QuotaExceededException<ept id="p1">**</ept> and take action to drain the queue before retrying sending a message to it.</target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Policy configuration (Service bus)</source>
          <target state="new">Policy configuration (Service bus)</target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Retry policies are set programmatically, and can be set as a default policy for a <bpt id="p1">**</bpt>NamespaceManager<ept id="p1">**</ept> and for a <bpt id="p2">**</bpt>MessagingFactory<ept id="p2">**</ept>, or individually for each messaging client.</source>
          <target state="new">Retry policies are set programmatically, and can be set as a default policy for a <bpt id="p1">**</bpt>NamespaceManager<ept id="p1">**</ept> and for a <bpt id="p2">**</bpt>MessagingFactory<ept id="p2">**</ept>, or individually for each messaging client.</target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>To set the default retry policy for a messaging session you set the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>NamespaceManager<ept id="p2">**</ept>.</source>
          <target state="new">To set the default retry policy for a messaging session you set the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>NamespaceManager<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Note that this code uses named parameters for clarity.</source>
          <target state="new">Note that this code uses named parameters for clarity.</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Alternatively you can omit the names because none of the parameters is optional.</source>
          <target state="new">Alternatively you can omit the names because none of the parameters is optional.</target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>To set the default retry policy for all clients created from a messaging factory, you set the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>MessagingFactory<ept id="p2">**</ept>.</source>
          <target state="new">To set the default retry policy for all clients created from a messaging factory, you set the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> of the <bpt id="p2">**</bpt>MessagingFactory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>To set the retry policy for a messaging client, or to override its default policy, you set its <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> property using an instance of the required policy class:</source>
          <target state="new">To set the retry policy for a messaging client, or to override its default policy, you set its <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> property using an instance of the required policy class:</target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The retry policy cannot be set at the individual operation level.</source>
          <target state="new">The retry policy cannot be set at the individual operation level.</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>It applies to all operations for the messaging client.</source>
          <target state="new">It applies to all operations for the messaging client.</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The following table shows the default settings for the built-in retry policy.</source>
          <target state="new">The following table shows the default settings for the built-in retry policy.</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when using Service Bus:</source>
          <target state="new">Consider the following guidelines when using Service Bus:</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>When using the built-in <bpt id="p1">**</bpt>RetryExponential<ept id="p1">**</ept> implementation, do not implement a fallback operation as the policy reacts to Server Busy exceptions and automatically switches to an appropriate retry mode.</source>
          <target state="new">When using the built-in <bpt id="p1">**</bpt>RetryExponential<ept id="p1">**</ept> implementation, do not implement a fallback operation as the policy reacts to Server Busy exceptions and automatically switches to an appropriate retry mode.</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Service Bus supports a feature called Paired Namespaces, which implements automatic failover to a backup queue in a separate namespace if the queue in the primary namespace fails.</source>
          <target state="new">Service Bus supports a feature called Paired Namespaces, which implements automatic failover to a backup queue in a separate namespace if the queue in the primary namespace fails.</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Messages from the secondary queue can be sent back to the primary queue when it recovers.</source>
          <target state="new">Messages from the secondary queue can be sent back to the primary queue when it recovers.</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>This feature helps to address transient failures.</source>
          <target state="new">This feature helps to address transient failures.</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Messaging Patterns and High Availability<ept id="p1">](http://msdn.microsoft.com/library/azure/dn292562.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Asynchronous Messaging Patterns and High Availability<ept id="p1">](http://msdn.microsoft.com/library/azure/dn292562.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Consider starting with following settings for retrying operations.</source>
          <target state="new">Consider starting with following settings for retrying operations.</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</source>
          <target state="new">These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Telemetry</source>
          <target state="new">Telemetry</target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Service Bus logs retries as ETW events using an <bpt id="p1">**</bpt>EventSource<ept id="p1">**</ept>.</source>
          <target state="new">Service Bus logs retries as ETW events using an <bpt id="p1">**</bpt>EventSource<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>You must attach an <bpt id="p1">**</bpt>EventListener<ept id="p1">**</ept> to the event source to capture the events and view them in Performance Viewer, or write them to a suitable destination log.</source>
          <target state="new">You must attach an <bpt id="p1">**</bpt>EventListener<ept id="p1">**</ept> to the event source to capture the events and view them in Performance Viewer, or write them to a suitable destination log.</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>You could use the <bpt id="p1">[</bpt>Semantic Logging Application Block<ept id="p1">](http://msdn.microsoft.com/library/dn775006.aspx)</ept> to do this.</source>
          <target state="new">You could use the <bpt id="p1">[</bpt>Semantic Logging Application Block<ept id="p1">](http://msdn.microsoft.com/library/dn775006.aspx)</ept> to do this.</target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The retry events are of the following form:</source>
          <target state="new">The retry events are of the following form:</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Examples (Service bus)</source>
          <target state="new">Examples (Service bus)</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The following code example shows how to set the retry policy for:</source>
          <target state="new">The following code example shows how to set the retry policy for:</target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>A namespace manager.</source>
          <target state="new">A namespace manager.</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The policy applies to all operations on that manager, and cannot be overridden for individual operations.</source>
          <target state="new">The policy applies to all operations on that manager, and cannot be overridden for individual operations.</target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A messaging factory.</source>
          <target state="new">A messaging factory.</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The policy applies to all clients created from that factory, and cannot be overridden when creating individual clients.</source>
          <target state="new">The policy applies to all clients created from that factory, and cannot be overridden when creating individual clients.</target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>An individual messaging client.</source>
          <target state="new">An individual messaging client.</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>After a client has been created, you can set the retry policy for that client.</source>
          <target state="new">After a client has been created, you can set the retry policy for that client.</target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The policy applies to all operations on that client.</source>
          <target state="new">The policy applies to all operations on that client.</target>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Asynchronous Messaging Patterns and High Availability</source>
          <target state="new">Asynchronous Messaging Patterns and High Availability</target>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Cache (Redis) retry guidelines</source>
          <target state="new">Cache (Redis) retry guidelines</target>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Azure Redis Cache is a fast data access and low latency cache service based on the popular open source Redis Cache.</source>
          <target state="new">Azure Redis Cache is a fast data access and low latency cache service based on the popular open source Redis Cache.</target>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>It is secure, managed by Microsoft, and is accessible from any application in Azure.</source>
          <target state="new">It is secure, managed by Microsoft, and is accessible from any application in Azure.</target>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The guidance in this section is based on using the StackExchange.Redis client to access the cache.</source>
          <target state="new">The guidance in this section is based on using the StackExchange.Redis client to access the cache.</target>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>A list of other suitable clients can be found on the <bpt id="p1">[</bpt>Redis website<ept id="p1">](http://redis.io/clients)</ept>, and these may have different retry mechanisms.</source>
          <target state="new">A list of other suitable clients can be found on the <bpt id="p1">[</bpt>Redis website<ept id="p1">](http://redis.io/clients)</ept>, and these may have different retry mechanisms.</target>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Note that the StackExchange.Redis client uses multiplexing through a single connection.</source>
          <target state="new">Note that the StackExchange.Redis client uses multiplexing through a single connection.</target>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>The recommended usage is to create an instance of the client at application startup and use this instance for all operations against the cache.</source>
          <target state="new">The recommended usage is to create an instance of the client at application startup and use this instance for all operations against the cache.</target>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>For this reason, the connection to the cache is made only once, and so all of the guidance in this section is related to the retry policy for this initial connection—and not for each operation that accesses the cache.</source>
          <target state="new">For this reason, the connection to the cache is made only once, and so all of the guidance in this section is related to the retry policy for this initial connection—and not for each operation that accesses the cache.</target>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The StackExchange.Redis client uses a connection manager class that is configured through a set of options.</source>
          <target state="new">The StackExchange.Redis client uses a connection manager class that is configured through a set of options.</target>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>These options include a <bpt id="p1">**</bpt>ConnectRetry<ept id="p1">**</ept> property that specifies the number of times a failed connection to the cache will be retried.</source>
          <target state="new">These options include a <bpt id="p1">**</bpt>ConnectRetry<ept id="p1">**</ept> property that specifies the number of times a failed connection to the cache will be retried.</target>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>However, the retry policy in used only for the initial connect action, and it does not wait between retries.</source>
          <target state="new">However, the retry policy in used only for the initial connect action, and it does not wait between retries.</target>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Policy configuration (Azure Redis Cache)</source>
          <target state="new">Policy configuration (Azure Redis Cache)</target>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Retry policies are configured programmatically by setting the options for the client before connecting to the cache.</source>
          <target state="new">Retry policies are configured programmatically by setting the options for the client before connecting to the cache.</target>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This can be done by creating an instance of the <bpt id="p1">**</bpt>ConfigurationOptions<ept id="p1">**</ept> class, populating its properties, and passing it to the <bpt id="p2">**</bpt>Connect<ept id="p2">**</ept> method.</source>
          <target state="new">This can be done by creating an instance of the <bpt id="p1">**</bpt>ConfigurationOptions<ept id="p1">**</ept> class, populating its properties, and passing it to the <bpt id="p2">**</bpt>Connect<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>ConnectTimeout<ept id="p1">**</ept> property specifies the maximum waiting time in milliseconds), not the delay between retries.</source>
          <target state="new">Note that the <bpt id="p1">**</bpt>ConnectTimeout<ept id="p1">**</ept> property specifies the maximum waiting time in milliseconds), not the delay between retries.</target>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify the options as a string, and pass this to the <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept> method.</source>
          <target state="new">Alternatively, you can specify the options as a string, and pass this to the <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>It is also possible to specify options directly when you connect to the cache.</source>
          <target state="new">It is also possible to specify options directly when you connect to the cache.</target>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The following table shows the default settings for the built-in retry policy.</source>
          <target state="new">The following table shows the default settings for the built-in retry policy.</target>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="new">Setting</target>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default value<ept id="p1">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>Default value<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>(v 1.0.331)</source>
          <target state="new">(v 1.0.331)</target>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="new">Meaning</target>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>ConfigurationOptions</source>
          <target state="new">ConfigurationOptions</target>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>ConnectRetry</source>
          <target state="new">ConnectRetry</target>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>ConnectTimeout</source>
          <target state="new">ConnectTimeout</target>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>SyncTimeout</source>
          <target state="new">SyncTimeout</target>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Maximum 5000 ms plus SyncTimeout</source>
          <target state="new">Maximum 5000 ms plus SyncTimeout</target>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>1000</source>
          <target state="new">1000</target>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The number of times to repeat connect attempts during the initial connection operation.</source>
          <target state="new">The number of times to repeat connect attempts during the initial connection operation.</target>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>Timeout (ms) for connect operations.</source>
          <target state="new">Timeout (ms) for connect operations.</target>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Not a delay between retry attempts.</source>
          <target state="new">Not a delay between retry attempts.</target>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Time (ms) to allow for synchronous operations.</source>
          <target state="new">Time (ms) to allow for synchronous operations.</target>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> SyncTimeout contributes to the end-to-end latency of an operation.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> SyncTimeout contributes to the end-to-end latency of an operation.</target>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>However, in general, using synchronous operations is not recommended.</source>
          <target state="new">However, in general, using synchronous operations is not recommended.</target>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Pipelines and Multiplexers<ept id="p1">](http://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/PipelinesMultiplexers.md)</ept>.</source>
          <target state="new">For more information see <bpt id="p1">[</bpt>Pipelines and Multiplexers<ept id="p1">](http://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/PipelinesMultiplexers.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when using Azure Redis Cache:</source>
          <target state="new">Consider the following guidelines when using Azure Redis Cache:</target>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The StackExchange Redis client manages its own retries, but only when establishing a connection to the cache when the application first starts.</source>
          <target state="new">The StackExchange Redis client manages its own retries, but only when establishing a connection to the cache when the application first starts.</target>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>You can configure the connection timeout and the number of retry attempts to establish this connection, but the retry policy does not apply to operations against the cache.</source>
          <target state="new">You can configure the connection timeout and the number of retry attempts to establish this connection, but the retry policy does not apply to operations against the cache.</target>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The retry mechanism has no delay between retry attempts.</source>
          <target state="new">The retry mechanism has no delay between retry attempts.</target>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>It simply retries a failed connection after the specified connection timeout expires, and for the specified number of times.</source>
          <target state="new">It simply retries a failed connection after the specified connection timeout expires, and for the specified number of times.</target>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Instead of using a large number of retry attempts, consider falling back by accessing the original data source instead.</source>
          <target state="new">Instead of using a large number of retry attempts, consider falling back by accessing the original data source instead.</target>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Telemetry</source>
          <target state="new">Telemetry</target>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>You can collect information about connections (but not other operations) using a <bpt id="p1">**</bpt>TextWriter<ept id="p1">**</ept>.</source>
          <target state="new">You can collect information about connections (but not other operations) using a <bpt id="p1">**</bpt>TextWriter<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>An example of the output this generates is shown below.</source>
          <target state="new">An example of the output this generates is shown below.</target>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Examples (Azure Redis Cache)</source>
          <target state="new">Examples (Azure Redis Cache)</target>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The following code example shows how you can configure the connection timeout setting and the number of retries when initializing the StackExchange.Redis client to access Azure Redis Cache at application startup.</source>
          <target state="new">The following code example shows how you can configure the connection timeout setting and the number of retries when initializing the StackExchange.Redis client to access Azure Redis Cache at application startup.</target>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Note that the connection timeout is the period of time that you are willing to wait for connection to the cache; it is not the delay between retry attempts.</source>
          <target state="new">Note that the connection timeout is the period of time that you are willing to wait for connection to the cache; it is not the delay between retry attempts.</target>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>This example shows how to set the configuration using an instance of the <bpt id="p1">**</bpt>ConfigurationOptions<ept id="p1">**</ept>.</source>
          <target state="new">This example shows how to set the configuration using an instance of the <bpt id="p1">**</bpt>ConfigurationOptions<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This example shows how to set the configuration by specifying the options as a string.</source>
          <target state="new">This example shows how to set the configuration by specifying the options as a string.</target>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Configuration<ept id="p1">](http://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md#configuration)</ept> on the project website.</source>
          <target state="new">For more examples, see <bpt id="p1">[</bpt>Configuration<ept id="p1">](http://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md#configuration)</ept> on the project website.</target>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Redis website</source>
          <target state="new">Redis website</target>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>DocumentDB (pre-release) retry guidelines</source>
          <target state="new">DocumentDB (pre-release) retry guidelines</target>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>DocumentDB is a fully-managed document database-as-a-service with rich query and indexing capabilities over a schema-free JSON data model.</source>
          <target state="new">DocumentDB is a fully-managed document database-as-a-service with rich query and indexing capabilities over a schema-free JSON data model.</target>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>It offers configurable and reliable performance, native JavaScript transactional processing, and is built for the cloud with elastic scale.</source>
          <target state="new">It offers configurable and reliable performance, native JavaScript transactional processing, and is built for the cloud with elastic scale.</target>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>The pre-release version of the DocumentDB client includes an internal and non-configurable retry mechanism (this may change in subsequent releases).</source>
          <target state="new">The pre-release version of the DocumentDB client includes an internal and non-configurable retry mechanism (this may change in subsequent releases).</target>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The default settings for this vary depending on the context of its use.</source>
          <target state="new">The default settings for this vary depending on the context of its use.</target>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Some operations use an exponential back-off strategy with hard-coded parameters.</source>
          <target state="new">Some operations use an exponential back-off strategy with hard-coded parameters.</target>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Others specify only how many retries should be attempted, and use the retry delay in the <bpt id="p1">[</bpt>DocumentClientException<ept id="p1">](http://msdn.microsoft.com/library/microsoft.azure.documents.documentclientexception.retryafter.aspx)</ept> instance that is returned from the service.</source>
          <target state="new">Others specify only how many retries should be attempted, and use the retry delay in the <bpt id="p1">[</bpt>DocumentClientException<ept id="p1">](http://msdn.microsoft.com/library/microsoft.azure.documents.documentclientexception.retryafter.aspx)</ept> instance that is returned from the service.</target>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>A delay of five seconds is used if no delay is specified.</source>
          <target state="new">A delay of five seconds is used if no delay is specified.</target>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Policy configuration (DocumentDB)</source>
          <target state="new">Policy configuration (DocumentDB)</target>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="new">None.</target>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>All of the classes used to implement retries are internal.</source>
          <target state="new">All of the classes used to implement retries are internal.</target>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The retry parameters are either constants or are set using parameters to the class constructors.</source>
          <target state="new">The retry parameters are either constants or are set using parameters to the class constructors.</target>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The following table shows the default settings for the built-in retry policy.</source>
          <target state="new">The following table shows the default settings for the built-in retry policy.</target>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new">Settings</target>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="new">Values</target>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="new">How it works</target>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>RetryPolicy (internal)</source>
          <target state="new">RetryPolicy (internal)</target>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>MaxRetryAttemptsOnQuery</source>
          <target state="new">MaxRetryAttemptsOnQuery</target>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>MaxRetryAttemptsOnRequest</source>
          <target state="new">MaxRetryAttemptsOnRequest</target>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="new">0</target>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>The number of retry attempts for document queries.</source>
          <target state="new">The number of retry attempts for document queries.</target>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This value cannot be changed.</source>
          <target state="new">This value cannot be changed.</target>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The number of retry attempts for other requests.</source>
          <target state="new">The number of retry attempts for other requests.</target>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>This value cannot be changed.</source>
          <target state="new">This value cannot be changed.</target>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when using DocumentDB:</source>
          <target state="new">Consider the following guidelines when using DocumentDB:</target>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>You cannot change the default retry policy.</source>
          <target state="new">You cannot change the default retry policy.</target>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>See [TBD] for more information about the default settings.</source>
          <target state="new">See [TBD] for more information about the default settings.</target>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Telemetry</source>
          <target state="new">Telemetry</target>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Retry attempts are logged as unstructured trace messages through a .NET <bpt id="p1">**</bpt>TraceSource<ept id="p1">**</ept>.</source>
          <target state="new">Retry attempts are logged as unstructured trace messages through a .NET <bpt id="p1">**</bpt>TraceSource<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>You must configure a <bpt id="p1">**</bpt>TraceListener<ept id="p1">**</ept> to capture the events and write them to a suitable destination log.</source>
          <target state="new">You must configure a <bpt id="p1">**</bpt>TraceListener<ept id="p1">**</ept> to capture the events and write them to a suitable destination log.</target>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Search retry guidelines</source>
          <target state="new">Search retry guidelines</target>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Azure Search can be used to add powerful and sophisticated search capabilities to a website or application, quickly and easily tune search results, and construct rich and fine-tuned ranking models.</source>
          <target state="new">Azure Search can be used to add powerful and sophisticated search capabilities to a website or application, quickly and easily tune search results, and construct rich and fine-tuned ranking models.</target>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>There is no built-in retry mechanism for Search as the typical usage is though HTTP requests.</source>
          <target state="new">There is no built-in retry mechanism for Search as the typical usage is though HTTP requests.</target>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>To implement retries you can use a generic implementation of a REST client, and make decisions on when and if to retry the operation based on the response from the service.</source>
          <target state="new">To implement retries you can use a generic implementation of a REST client, and make decisions on when and if to retry the operation based on the response from the service.</target>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>General REST and retry guidelines<ept id="p1">](#general-rest-and-retry-guidelines)</ept> later in this guidance.</source>
          <target state="new">For more information, see the section <bpt id="p1">[</bpt>General REST and retry guidelines<ept id="p1">](#general-rest-and-retry-guidelines)</ept> later in this guidance.</target>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when using Azure Search:</source>
          <target state="new">Consider the following guidelines when using Azure Search:</target>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Use the status code returned by the service to determine the type of failure.</source>
          <target state="new">Use the status code returned by the service to determine the type of failure.</target>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>The status codes are defined in <bpt id="p1">[</bpt>HTTP status codes (Azure Search)<ept id="p1">](http://msdn.microsoft.com/library/dn798925.aspx)</ept>.</source>
          <target state="new">The status codes are defined in <bpt id="p1">[</bpt>HTTP status codes (Azure Search)<ept id="p1">](http://msdn.microsoft.com/library/dn798925.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The status code 503 (Service Unavailable) indicates that the service is under heavy load and the request cannot be processed immediately.</source>
          <target state="new">The status code 503 (Service Unavailable) indicates that the service is under heavy load and the request cannot be processed immediately.</target>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>The appropriate action is to retry the operation only after allowing time for the service to recover.</source>
          <target state="new">The appropriate action is to retry the operation only after allowing time for the service to recover.</target>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Retrying after too short a delay interval is likely to prolong the unavailability.</source>
          <target state="new">Retrying after too short a delay interval is likely to prolong the unavailability.</target>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>See the section <bpt id="p1">[</bpt>General REST and retry guidelines<ept id="p1">](#general-rest-and-retry-guidelines)</ept> later in this guidance for general information about retrying REST operations.</source>
          <target state="new">See the section <bpt id="p1">[</bpt>General REST and retry guidelines<ept id="p1">](#general-rest-and-retry-guidelines)</ept> later in this guidance for general information about retrying REST operations.</target>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Azure Search REST API</source>
          <target state="new">Azure Search REST API</target>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Azure Active Directory retry guidelines</source>
          <target state="new">Azure Active Directory retry guidelines</target>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Azure Active Directory (AD) is a comprehensive identity and access management cloud solution that combines core directory services, advanced identity governance, security, and application access management.</source>
          <target state="new">Azure Active Directory (AD) is a comprehensive identity and access management cloud solution that combines core directory services, advanced identity governance, security, and application access management.</target>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Azure AD also offers developers an identity management platform to deliver access control to their applications, based on centralized policy and rules.</source>
          <target state="new">Azure AD also offers developers an identity management platform to deliver access control to their applications, based on centralized policy and rules.</target>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Retry mechanism</source>
          <target state="new">Retry mechanism</target>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>There is no built-in retry mechanism for Azure Active Directory in the Active Directory Authentication Library (ADAL).</source>
          <target state="new">There is no built-in retry mechanism for Azure Active Directory in the Active Directory Authentication Library (ADAL).</target>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>You can use the Transient Fault Handling Application Block to implement a retry strategy that contains a custom detection mechanism for the exceptions returned by Active Directory.</source>
          <target state="new">You can use the Transient Fault Handling Application Block to implement a retry strategy that contains a custom detection mechanism for the exceptions returned by Active Directory.</target>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Policy configuration (Azure Active Directory)</source>
          <target state="new">Policy configuration (Azure Active Directory)</target>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>When using the Transient Fault Handling Application Block with Azure Active Directory you create a <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> instance based on a class that defines the detection strategy you want to use.</source>
          <target state="new">When using the Transient Fault Handling Application Block with Azure Active Directory you create a <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> instance based on a class that defines the detection strategy you want to use.</target>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>You then call the <bpt id="p1">**</bpt>ExecuteAction<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ExecuteAsync<ept id="p2">**</ept> method of the retry policy, passing in the operation you want to execute.</source>
          <target state="new">You then call the <bpt id="p1">**</bpt>ExecuteAction<ept id="p1">**</ept> or <bpt id="p2">**</bpt>ExecuteAsync<ept id="p2">**</ept> method of the retry policy, passing in the operation you want to execute.</target>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>The detection strategy class receives exceptions when a failure occurs, and must detect whether this is likely to be a transient fault or a more permanent failure.</source>
          <target state="new">The detection strategy class receives exceptions when a failure occurs, and must detect whether this is likely to be a transient fault or a more permanent failure.</target>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Typically it will do this by examining the exception type and status code.</source>
          <target state="new">Typically it will do this by examining the exception type and status code.</target>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>For example, a Service Unavailable response indicates that a retry attempt should be made.</source>
          <target state="new">For example, a Service Unavailable response indicates that a retry attempt should be made.</target>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The Transient Fault Handling Application Block does not include a detection strategy class that is suitable for use with the ADAL client, but an example of a custom detection strategy is provided in the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-azure-active-directory-)</ept> section below.</source>
          <target state="new">The Transient Fault Handling Application Block does not include a detection strategy class that is suitable for use with the ADAL client, but an example of a custom detection strategy is provided in the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-azure-active-directory-)</ept> section below.</target>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Using a custom detection strategy is no different from using one supplied with the block.</source>
          <target state="new">Using a custom detection strategy is no different from using one supplied with the block.</target>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Default strategies for the Transient Fault Handling Application Block are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</source>
          <target state="new">Default strategies for the Transient Fault Handling Application Block are shown in the section <bpt id="p1">[</bpt>Transient Fault Handling Application Block (Topaz) strategies<ept id="p1">](#transient-fault-handling-application-block-topaz-strategies)</ept> at the end of this guidance.</target>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Retry usage guidance</source>
          <target state="new">Retry usage guidance</target>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Consider the following guidelines when using Azure Active Directory:</source>
          <target state="new">Consider the following guidelines when using Azure Active Directory:</target>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>If you are using the REST API for Azure Active Directory, you should retry the operation only if the result is an error in the 5xx range (such as 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable, and 504 Gateway Timeout).</source>
          <target state="new">If you are using the REST API for Azure Active Directory, you should retry the operation only if the result is an error in the 5xx range (such as 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable, and 504 Gateway Timeout).</target>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Do not retry for any other errors.</source>
          <target state="new">Do not retry for any other errors.</target>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>If you are using the Active Directory Authentication Library (ADAL), HTTP codes are not readily accessible.</source>
          <target state="new">If you are using the Active Directory Authentication Library (ADAL), HTTP codes are not readily accessible.</target>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>You will need to create a custom detection strategy that includes logic to check the properties of the ADAL-specific exceptions.</source>
          <target state="new">You will need to create a custom detection strategy that includes logic to check the properties of the ADAL-specific exceptions.</target>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-azure-active-directory-)</ept> section below.</source>
          <target state="new">See the <bpt id="p1">[</bpt>Examples<ept id="p1">](#examples-azure-active-directory-)</ept> section below.</target>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>An exponential back-off policy is recommended for use in batch scenarios with Azure Active Directory.</source>
          <target state="new">An exponential back-off policy is recommended for use in batch scenarios with Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Consider starting with following settings for retrying operations.</source>
          <target state="new">Consider starting with following settings for retrying operations.</target>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</source>
          <target state="new">These are general purpose settings, and you should monitor the operations and fine tune the values to suit your own scenario.</target>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="new">Context</target>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Sample target E2E</source>
          <target state="new">Sample target E2E</target>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>max latency</source>
          <target state="new">max latency</target>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Retry strategy</source>
          <target state="new">Retry strategy</target>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new">Settings</target>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="new">Values</target>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="new">How it works</target>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Interactive, UI,</source>
          <target state="new">Interactive, UI,</target>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>or foreground</source>
          <target state="new">or foreground</target>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>2 sec</source>
          <target state="new">2 sec</target>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>FixedInterval</source>
          <target state="new">FixedInterval</target>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Retry count</source>
          <target state="new">Retry count</target>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Retry interval</source>
          <target state="new">Retry interval</target>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>First fast retry</source>
          <target state="new">First fast retry</target>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="new">3</target>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>500 ms</source>
          <target state="new">500 ms</target>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay 500 ms</source>
          <target state="new">Attempt 2 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay 500 ms</source>
          <target state="new">Attempt 3 - delay 500 ms</target>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Background or</source>
          <target state="new">Background or</target>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>batch</source>
          <target state="new">batch</target>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>60 sec</source>
          <target state="new">60 sec</target>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>ExponentialBackoff</source>
          <target state="new">ExponentialBackoff</target>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Retry count</source>
          <target state="new">Retry count</target>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Min back-off</source>
          <target state="new">Min back-off</target>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Max back-off</source>
          <target state="new">Max back-off</target>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Delta back-off</source>
          <target state="new">Delta back-off</target>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>First fast retry</source>
          <target state="new">First fast retry</target>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="new">5</target>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>0 sec</source>
          <target state="new">0 sec</target>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>60 sec</source>
          <target state="new">60 sec</target>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>2 sec</source>
          <target state="new">2 sec</target>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="new">false</target>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Attempt 1 - delay 0 sec</source>
          <target state="new">Attempt 1 - delay 0 sec</target>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Attempt 2 - delay ~2 sec</source>
          <target state="new">Attempt 2 - delay ~2 sec</target>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Attempt 3 - delay ~6 sec</source>
          <target state="new">Attempt 3 - delay ~6 sec</target>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Attempt 4 - delay ~14 sec</source>
          <target state="new">Attempt 4 - delay ~14 sec</target>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Attempt 5 - delay ~30 sec</source>
          <target state="new">Attempt 5 - delay ~30 sec</target>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Examples (Azure Active Directory)</source>
          <target state="new">Examples (Azure Active Directory)</target>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The following code example shows how you can use the Transient Fault Handling Application Block (Topaz) to define a custom transient error detection strategy suitable for use with the ADAL client.</source>
          <target state="new">The following code example shows how you can use the Transient Fault Handling Application Block (Topaz) to define a custom transient error detection strategy suitable for use with the ADAL client.</target>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>The code creates a new <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> instance based on a custom detection strategy of type <bpt id="p2">**</bpt>AdalDetectionStrategy<ept id="p2">**</ept>, as defined in the code listing below.</source>
          <target state="new">The code creates a new <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> instance based on a custom detection strategy of type <bpt id="p2">**</bpt>AdalDetectionStrategy<ept id="p2">**</ept>, as defined in the code listing below.</target>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Custom detection strategies for Topaz implement the <bpt id="p1">**</bpt>ITransientErrorDetectionStrategy<ept id="p1">**</ept> interface and return true if a retry should be attempted, or <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the failure appears to be non-transient and a retry should not be attempted.</source>
          <target state="new">Custom detection strategies for Topaz implement the <bpt id="p1">**</bpt>ITransientErrorDetectionStrategy<ept id="p1">**</ept> interface and return true if a retry should be attempted, or <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the failure appears to be non-transient and a retry should not be attempted.</target>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>For information about retrying Active Directory Graph API operations and the error codes returned see:</source>
          <target state="new">For information about retrying Active Directory Graph API operations and the error codes returned see:</target>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Code Sample: Retry Logic</source>
          <target state="new">Code Sample: Retry Logic</target>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Azure AD Graph Error Codes</source>
          <target state="new">Azure AD Graph Error Codes</target>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a Custom Detection Strategy<ept id="p1">](http://msdn.microsoft.com/library/hh680940.aspx)</ept> (Topaz)</source>
          <target state="new"><bpt id="p1">[</bpt>Implementing a Custom Detection Strategy<ept id="p1">](http://msdn.microsoft.com/library/hh680940.aspx)</ept> (Topaz)</target>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing a Custom Retry Strategy<ept id="p1">](http://msdn.microsoft.com/library/hh680943.aspx)</ept> (Topaz)</source>
          <target state="new"><bpt id="p1">[</bpt>Implementing a Custom Retry Strategy<ept id="p1">](http://msdn.microsoft.com/library/hh680943.aspx)</ept> (Topaz)</target>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Token Issuance and Retry Guidelines</source>
          <target state="new">Token Issuance and Retry Guidelines</target>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>General REST and retry guidelines</source>
          <target state="new">General REST and retry guidelines</target>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Consider the following when accessing Azure or third party services:</source>
          <target state="new">Consider the following when accessing Azure or third party services:</target>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Use a systematic approach to managing retries, perhaps as reusable code, so that you can apply a consistent methodology across all clients and all solutions.</source>
          <target state="new">Use a systematic approach to managing retries, perhaps as reusable code, so that you can apply a consistent methodology across all clients and all solutions.</target>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Consider using a retry framework such as the Transient Fault Handling Application Block to manage retries if the target service or client has no built-in retry mechanism.</source>
          <target state="new">Consider using a retry framework such as the Transient Fault Handling Application Block to manage retries if the target service or client has no built-in retry mechanism.</target>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>This will help you implement a consistent retry behavior, and it may provide a suitable default retry strategy for the target service.</source>
          <target state="new">This will help you implement a consistent retry behavior, and it may provide a suitable default retry strategy for the target service.</target>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>However, you may need to create custom retry code for services that have non-standard behavior, that do not rely on exceptions to indicate transient failures, or if you want to use a <bpt id="p1">**</bpt>Retry-Response<ept id="p1">**</ept> reply to manage retry behavior.</source>
          <target state="new">However, you may need to create custom retry code for services that have non-standard behavior, that do not rely on exceptions to indicate transient failures, or if you want to use a <bpt id="p1">**</bpt>Retry-Response<ept id="p1">**</ept> reply to manage retry behavior.</target>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>The transient detection logic will depend on the actual client API you use to invoke the REST calls.</source>
          <target state="new">The transient detection logic will depend on the actual client API you use to invoke the REST calls.</target>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Some clients, such as the newer <bpt id="p1">**</bpt>HttpClient<ept id="p1">**</ept> class, will not throw exceptions for completed requests with a non-success HTTP status code.</source>
          <target state="new">Some clients, such as the newer <bpt id="p1">**</bpt>HttpClient<ept id="p1">**</ept> class, will not throw exceptions for completed requests with a non-success HTTP status code.</target>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>This improves performance but prevents the use of the Transient Fault Handling Application Block.</source>
          <target state="new">This improves performance but prevents the use of the Transient Fault Handling Application Block.</target>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>In this case you could wrap the call to the REST API with code that produces exceptions for non-success HTTP status codes, which can then be processed by the block.</source>
          <target state="new">In this case you could wrap the call to the REST API with code that produces exceptions for non-success HTTP status codes, which can then be processed by the block.</target>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use a different mechanism to drive the retries.</source>
          <target state="new">Alternatively, you can use a different mechanism to drive the retries.</target>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The HTTP status code returned from the service can help to indicate whether the failure is transient.</source>
          <target state="new">The HTTP status code returned from the service can help to indicate whether the failure is transient.</target>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>You may need to examine the exceptions generated by a client or the retry framework to access the status code or to determine the equivalent exception type.</source>
          <target state="new">You may need to examine the exceptions generated by a client or the retry framework to access the status code or to determine the equivalent exception type.</target>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The following HTTP codes typically indicate that a retry is appropriate:</source>
          <target state="new">The following HTTP codes typically indicate that a retry is appropriate:</target>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>408 Request Timeout</source>
          <target state="new">408 Request Timeout</target>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>500 Internal Server Error</source>
          <target state="new">500 Internal Server Error</target>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>502 Bad Gateway</source>
          <target state="new">502 Bad Gateway</target>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>503 Service Unavailable</source>
          <target state="new">503 Service Unavailable</target>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>504 Gateway Timeout</source>
          <target state="new">504 Gateway Timeout</target>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>If you base your retry logic on exceptions, the following typically indicate a transient failure where no connection could be established:</source>
          <target state="new">If you base your retry logic on exceptions, the following typically indicate a transient failure where no connection could be established:</target>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>WebExceptionStatus.ConnectionClosed</source>
          <target state="new">WebExceptionStatus.ConnectionClosed</target>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>WebExceptionStatus.ConnectFailure</source>
          <target state="new">WebExceptionStatus.ConnectFailure</target>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>WebExceptionStatus.Timeout</source>
          <target state="new">WebExceptionStatus.Timeout</target>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>WebExceptionStatus.RequestCanceled</source>
          <target state="new">WebExceptionStatus.RequestCanceled</target>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>In the case of a service unavailable status, the service might indicate the appropriate delay before retrying in the <bpt id="p1">**</bpt>Retry-After<ept id="p1">**</ept> response header or a different custom header (as in the DocumentDB service).</source>
          <target state="new">In the case of a service unavailable status, the service might indicate the appropriate delay before retrying in the <bpt id="p1">**</bpt>Retry-After<ept id="p1">**</ept> response header or a different custom header (as in the DocumentDB service).</target>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Services might also send additional information as custom headers, or embedded in the content of the response.</source>
          <target state="new">Services might also send additional information as custom headers, or embedded in the content of the response.</target>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>The Transient Fault Handling Application Block cannot use the standard or any custom “retry-after” headers.</source>
          <target state="new">The Transient Fault Handling Application Block cannot use the standard or any custom “retry-after” headers.</target>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Do not retry for status codes representing client errors (errors in the 4xx range) except for a 408 Request Timeout.</source>
          <target state="new">Do not retry for status codes representing client errors (errors in the 4xx range) except for a 408 Request Timeout.</target>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Thoroughly test your retry strategies and mechanisms under a range of conditions, such as different network states and varying system loadings.</source>
          <target state="new">Thoroughly test your retry strategies and mechanisms under a range of conditions, such as different network states and varying system loadings.</target>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Retry strategies</source>
          <target state="new">Retry strategies</target>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The following are the typical types of retry strategy intervals:</source>
          <target state="new">The following are the typical types of retry strategy intervals:</target>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exponential<ept id="p1">**</ept>: A retry policy that performs a specified number of retries, using a randomized exponential back off approach to determine the interval between retries.</source>
          <target state="new"><bpt id="p1">**</bpt>Exponential<ept id="p1">**</ept>: A retry policy that performs a specified number of retries, using a randomized exponential back off approach to determine the interval between retries.</target>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Incremental<ept id="p1">**</ept>: A retry strategy with a specified number of retry attempts and an incremental time interval between retries.</source>
          <target state="new"><bpt id="p1">**</bpt>Incremental<ept id="p1">**</ept>: A retry strategy with a specified number of retry attempts and an incremental time interval between retries.</target>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LinearRetry<ept id="p1">**</ept>: A retry policy that performs a specified number of retries, using a specified fixed time interval between retries.</source>
          <target state="new"><bpt id="p1">**</bpt>LinearRetry<ept id="p1">**</ept>: A retry policy that performs a specified number of retries, using a specified fixed time interval between retries.</target>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>More information</source>
          <target state="new">More information</target>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Circuit breaker strategies</source>
          <target state="new">Circuit breaker strategies</target>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Transient Fault Handling Application Block (Topaz) strategies</source>
          <target state="new">Transient Fault Handling Application Block (Topaz) strategies</target>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>The Transient Fault Handling Application Block has the following default strategies.</source>
          <target state="new">The Transient Fault Handling Application Block has the following default strategies.</target>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Strategy</source>
          <target state="new">Strategy</target>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="new">Setting</target>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="new">Default value</target>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="new">Meaning</target>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Exponential</source>
          <target state="new">Exponential</target>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>retryCount</source>
          <target state="new">retryCount</target>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>minBackoff</source>
          <target state="new">minBackoff</target>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>maxBackoff</source>
          <target state="new">maxBackoff</target>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>deltaBackoff</source>
          <target state="new">deltaBackoff</target>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>fastFirstRetry</source>
          <target state="new">fastFirstRetry</target>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="new">10</target>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>1 second</source>
          <target state="new">1 second</target>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>30 seconds</source>
          <target state="new">30 seconds</target>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>10 seconds</source>
          <target state="new">10 seconds</target>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>The number of retry attempts.</source>
          <target state="new">The number of retry attempts.</target>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The minimum back-off time.</source>
          <target state="new">The minimum back-off time.</target>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>The higher of this value or the computed back-off will be used as the retry delay.</source>
          <target state="new">The higher of this value or the computed back-off will be used as the retry delay.</target>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The minimum back-off time.</source>
          <target state="new">The minimum back-off time.</target>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>The lower of this value or the computed back-off will be used as the retry delay.</source>
          <target state="new">The lower of this value or the computed back-off will be used as the retry delay.</target>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>The value used to calculate a random delta for the exponential delay between retries.</source>
          <target state="new">The value used to calculate a random delta for the exponential delay between retries.</target>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Whether the first retry attempt will be made immediately.</source>
          <target state="new">Whether the first retry attempt will be made immediately.</target>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Incremental</source>
          <target state="new">Incremental</target>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>retryCount</source>
          <target state="new">retryCount</target>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>initialInterval</source>
          <target state="new">initialInterval</target>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>increment</source>
          <target state="new">increment</target>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>fastFirstRetry</source>
          <target state="new">fastFirstRetry</target>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="new">10</target>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>1 second</source>
          <target state="new">1 second</target>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>1 second</source>
          <target state="new">1 second</target>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>The number of retry attempts.</source>
          <target state="new">The number of retry attempts.</target>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The initial interval that will apply for the first retry.</source>
          <target state="new">The initial interval that will apply for the first retry.</target>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The incremental time value that will be used to calculate the progressive delay between retries.</source>
          <target state="new">The incremental time value that will be used to calculate the progressive delay between retries.</target>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Whether the first retry attempt will be made immediately.</source>
          <target state="new">Whether the first retry attempt will be made immediately.</target>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Linear (fixed interval)</source>
          <target state="new">Linear (fixed interval)</target>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>retryCount</source>
          <target state="new">retryCount</target>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>retryInterval</source>
          <target state="new">retryInterval</target>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>fastFirstRetry</source>
          <target state="new">fastFirstRetry</target>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>10</source>
          <target state="new">10</target>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>1 second</source>
          <target state="new">1 second</target>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new">true</target>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>The number of retry attempts.</source>
          <target state="new">The number of retry attempts.</target>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>The delay between retries.</source>
          <target state="new">The delay between retries.</target>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Whether first retry attempt will be made immediately.</source>
          <target state="new">Whether first retry attempt will be made immediately.</target>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>For examples of using the Transient Fault Handling Application Block, see the Examples sections earlier in this guidance for Azure SQL Database using ADO.NET and Azure Active Directory.</source>
          <target state="new">For examples of using the Transient Fault Handling Application Block, see the Examples sections earlier in this guidance for Azure SQL Database using ADO.NET and Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3d41be17d67eafe0000d65d38fc744a63a94b78</xliffext:olfilehash>
  </header>
</xliff>