<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric Services</source>
          <target state="new">Availability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes fault detection, failover, recovery for services</source>
          <target state="new">Describes fault detection, failover, recovery for services</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric services</source>
          <target state="new">Availability of Service Fabric services</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service Fabric services can be either stateful or stateless.</source>
          <target state="new">Service Fabric services can be either stateful or stateless.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article gives an overview of how Service Fabric maintains availability of a service in the event of failures.</source>
          <target state="new">This article gives an overview of how Service Fabric maintains availability of a service in the event of failures.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric stateless services</source>
          <target state="new">Availability of Service Fabric stateless services</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A stateless service is an application service that does not have any <bpt id="p1">[</bpt>local persistent state<ept id="p1">](service-fabric-concepts-state.md)</ept>.</source>
          <target state="new">A stateless service is an application service that does not have any <bpt id="p1">[</bpt>local persistent state<ept id="p1">](service-fabric-concepts-state.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a stateless service requires defining an instance count which is the number of instances of the stateless service that should be running in the cluster.</source>
          <target state="new">Creating a stateless service requires defining an instance count which is the number of instances of the stateless service that should be running in the cluster.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These are the number of copies of the application logic that will be instantiated in the cluster.</source>
          <target state="new">These are the number of copies of the application logic that will be instantiated in the cluster.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Increasing the number of instances is the recommended way of scaling out stateless services.</source>
          <target state="new">Increasing the number of instances is the recommended way of scaling out stateless services.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a fault is detected on any instance of the stateless service a new instance is created on some other eligible node in the cluster.</source>
          <target state="new">When a fault is detected on any instance of the stateless service a new instance is created on some other eligible node in the cluster.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Availability of Service Fabric stateful services</source>
          <target state="new">Availability of Service Fabric stateful services</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A Stateful Service has some state that is associated with it.</source>
          <target state="new">A Stateful Service has some state that is associated with it.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Service Fabric, a stateful service is modeled as a set of replicas.</source>
          <target state="new">In Service Fabric, a stateful service is modeled as a set of replicas.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each replica is an instance of the code of the service that has a copy of the state.</source>
          <target state="new">Each replica is an instance of the code of the service that has a copy of the state.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Read and Write operations are performed at one replica (called the Primary).</source>
          <target state="new">Read and Write operations are performed at one replica (called the Primary).</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Changes to state due to write operations are <bpt id="p1">*</bpt>replicated<ept id="p1">*</ept> to multiple other replicas (called the Active Secondaries).</source>
          <target state="new">Changes to state due to write operations are <bpt id="p1">*</bpt>replicated<ept id="p1">*</ept> to multiple other replicas (called the Active Secondaries).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This combination of Primary and Active Secondary replicas is the replica set of the service.</source>
          <target state="new">This combination of Primary and Active Secondary replicas is the replica set of the service.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There can be only one Primary that is servicing read and write requests.</source>
          <target state="new">There can be only one Primary that is servicing read and write requests.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There can be multiple Active Secondary replicas.</source>
          <target state="new">There can be multiple Active Secondary replicas.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The number of Active Secondary replicas is configurable and a higher number of replicas allows for tolerating a greater number of concurrent software and hardware failures.</source>
          <target state="new">The number of Active Secondary replicas is configurable and a higher number of replicas allows for tolerating a greater number of concurrent software and hardware failures.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the event of a fault (when the Primary replica goes down), Service Fabric makes one of the Active Secondary replicas the new Primary replica.</source>
          <target state="new">In the event of a fault (when the Primary replica goes down), Service Fabric makes one of the Active Secondary replicas the new Primary replica.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This Active Secondary replica already has the updated version of the state (via <bpt id="p1">*</bpt>replication<ept id="p1">*</ept>) and can continue processing further read and write operations.</source>
          <target state="new">This Active Secondary replica already has the updated version of the state (via <bpt id="p1">*</bpt>replication<ept id="p1">*</ept>) and can continue processing further read and write operations.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This concept of a replica being a Primary or a Active Secondary is known as the replica role.</source>
          <target state="new">This concept of a replica being a Primary or a Active Secondary is known as the replica role.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Replica Roles</source>
          <target state="new">Replica Roles</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Role of a replica is used to manage the lifecycle of the state being managed by that replica.</source>
          <target state="new">The Role of a replica is used to manage the lifecycle of the state being managed by that replica.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A replica whose role is primary is servicing read requests.</source>
          <target state="new">A replica whose role is primary is servicing read requests.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is also servicing write requests by updating its state and replicating the changes to the Active Secondaries in its replica set.</source>
          <target state="new">It is also servicing write requests by updating its state and replicating the changes to the Active Secondaries in its replica set.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An Active Secondary is responsible for receiving state changes that the Primary replica has replicated and updating its view of the state.</source>
          <target state="new">An Active Secondary is responsible for receiving state changes that the Primary replica has replicated and updating its view of the state.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Higher level programming models such as the <bpt id="p1">[</bpt>Reliable Actors framework<ept id="p1">](service-fabric-reliable-actors-introduction.md)</ept> abstract away the concept of replica role from the developer.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Higher level programming models such as the <bpt id="p1">[</bpt>Reliable Actors framework<ept id="p1">](service-fabric-reliable-actors-introduction.md)</ept> abstract away the concept of replica role from the developer.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For information on Service Fabric concepts, see the following:</source>
          <target state="new">For information on Service Fabric concepts, see the following:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Scalability of Service Fabric Services</source>
          <target state="new">Scalability of Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Partitioning Service Fabric Services</source>
          <target state="new">Partitioning Service Fabric Services</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Defining and Managing State</source>
          <target state="new">Defining and Managing State</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec0acde17b61ea884204e309e50f15522b175dbd</xliffext:olfilehash>
  </header>
</xliff>