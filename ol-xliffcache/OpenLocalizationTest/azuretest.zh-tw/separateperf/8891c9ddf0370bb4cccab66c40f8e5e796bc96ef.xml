{
  "nodes": [
    {
      "content": "Common startup tasks for Cloud Services | Microsoft Azure",
      "pos": [
        24,
        81
      ]
    },
    {
      "content": "Provides some examples of common startup tasks you may want to perform in your cloud services web role or worker role.",
      "pos": [
        97,
        215
      ]
    },
    {
      "content": "Common Cloud Service startup tasks",
      "pos": [
        474,
        508
      ]
    },
    {
      "content": "This article provides some examples of common startup tasks you may want to perform in your cloud service.",
      "pos": [
        510,
        616
      ]
    },
    {
      "content": "You can use startup tasks to perform operations before a role starts.",
      "pos": [
        617,
        686
      ]
    },
    {
      "content": "Operations that you might want to perform include installing a component, registering COM components, setting registry keys, or starting a long running process.",
      "pos": [
        687,
        847
      ]
    },
    {
      "pos": [
        850,
        1010
      ],
      "content": "See <bpt id=\"p1\">[</bpt>this article<ept id=\"p1\">](cloud-services-startup-tasks.md)</ept> to understand how startup tasks work, and specifically how to create the entries that define a startup task."
    },
    {
      "content": "Many of the tasks here use the",
      "pos": [
        1012,
        1042
      ]
    },
    {
      "pos": [
        1046,
        1156
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Startup tasks are not applicable to Virtual Machines, only to Cloud Service Web and Worker roles."
    },
    {
      "content": "Define environment variables before a role starts",
      "pos": [
        1162,
        1211
      ]
    },
    {
      "pos": [
        1213,
        1362
      ],
      "content": "You can define environment variables for an entire role by adding the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Runtime]</ept> element to the definition of the role in the service definition file."
    },
    {
      "pos": [
        1741,
        1905
      ],
      "content": "If you need environment variables defined for a specific task, that isn't shared by other tasks, you can use the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Environment]</ept> element inside of the <bpt id=\"p2\">[</bpt><ept id=\"p2\">Task]</ept> element."
    },
    {
      "content": "Variables can also use a <bpt id=\"p1\">[</bpt>valid Azure XPath value<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/hh404006.aspx)</ept> to reference something about the deployment.",
      "pos": [
        2406,
        2557
      ]
    },
    {
      "content": "Instead of using the <ph id=\"ph1\">`value`</ph> attribute, define a <bpt id=\"p1\">[</bpt><ept id=\"p1\">RoleInstanceValue]</ept> child element.",
      "pos": [
        2558,
        2641
      ]
    },
    {
      "content": "Configure IIS startup with AppCmd.exe",
      "pos": [
        2841,
        2878
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>AppCmd.exe<ept id=\"p1\">](https://technet.microsoft.com/library/jj635852.aspx)</ept> command line tool can be used to manage IIS settings at startup on Azure.",
      "pos": [
        2880,
        3023
      ]
    },
    {
      "content": "<bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept> provides convenient, command line access to configuration settings for use in startup tasks on Azure.",
      "pos": [
        3024,
        3138
      ]
    },
    {
      "content": "Using <bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept>, Website settings can be added, modified, or removed for applications and sites.",
      "pos": [
        3139,
        3238
      ]
    },
    {
      "pos": [
        3240,
        3334
      ],
      "content": "However, there are a few things to watch out for in the use of <bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept> as a startup task:"
    },
    {
      "content": "Startup tasks can be run more than once between reboots.",
      "pos": [
        3338,
        3394
      ]
    },
    {
      "content": "This can happen if the role recycles, for instance.",
      "pos": [
        3395,
        3446
      ]
    },
    {
      "content": "Some <bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept> actions can generate errors if they are performed more than once.",
      "pos": [
        3449,
        3532
      ]
    },
    {
      "content": "Attempting to add a section to <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> twice could generate an error.",
      "pos": [
        3533,
        3607
      ]
    },
    {
      "content": "Startup tasks fail if they return a non-zero exit code or <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept>.",
      "pos": [
        3610,
        3683
      ]
    },
    {
      "content": "This can happen if <bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept> generates an error.",
      "pos": [
        3684,
        3735
      ]
    },
    {
      "content": "For the reasons listed, it is often wise to check the <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept> after calling <bpt id=\"p2\">*</bpt>AppCmd.exe<ept id=\"p2\">*</ept>, which is easy to do if you wrap the call to <bpt id=\"p3\">*</bpt>AppCmd.exe<ept id=\"p3\">*</ept> with a <bpt id=\"p4\">*</bpt>.cmd<ept id=\"p4\">*</ept> file.",
      "pos": [
        3737,
        3910
      ]
    },
    {
      "content": "If you detect a known <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept> response, you can ignore it, otherwise return it.",
      "pos": [
        3911,
        3997
      ]
    },
    {
      "content": "This is demonstrated in the example below.",
      "pos": [
        3998,
        4040
      ]
    },
    {
      "pos": [
        4042,
        4215
      ],
      "content": "The errorlevels returned by <bpt id=\"p1\">*</bpt>AppCmd.exe<ept id=\"p1\">*</ept> are listed in the winerror.h file, and can also be seen on <bpt id=\"p2\">[</bpt>MSDN<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/ms681382.aspx)</ept>."
    },
    {
      "content": "Example",
      "pos": [
        4221,
        4228
      ]
    },
    {
      "pos": [
        4230,
        4361
      ],
      "content": "This example adds a compression section and a compression entry for JSON to the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> file, with error handling and logging."
    },
    {
      "pos": [
        4363,
        4661
      ],
      "content": "The relevant sections of the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ServiceDefinition.csdef]</ept> file are shown here, which include setting the <bpt id=\"p2\">[</bpt>executionContext<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/gg557552.aspx#Task)</ept> attribute to <ph id=\"ph1\">`elevated`</ph> to give <bpt id=\"p3\">*</bpt>AppCmd.exe<ept id=\"p3\">*</ept> sufficient permissions to change the settings in the <bpt id=\"p4\">*</bpt>Web.config<ept id=\"p4\">*</ept> file:"
    },
    {
      "content": "The Startup.cmd batch file uses AppCmd.exe to add a compression section and a compression entry for JSON to the <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> file.",
      "pos": [
        4998,
        5128
      ]
    },
    {
      "content": "The expected <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept> of 183 is set to zero using the VERIFY.EXE command line program.",
      "pos": [
        5129,
        5221
      ]
    },
    {
      "content": "Unexpected errorlevels are logged to StartupErrorLog.txt.",
      "pos": [
        5222,
        5279
      ]
    },
    {
      "content": "Add firewall rules",
      "pos": [
        7035,
        7053
      ]
    },
    {
      "content": "In Azure, there are effectively two firewalls.",
      "pos": [
        7055,
        7101
      ]
    },
    {
      "content": "The first firewall controls connections between the virtual machine and the outside world.",
      "pos": [
        7102,
        7192
      ]
    },
    {
      "content": "This is controlled by the <bpt id=\"p1\">[</bpt><ept id=\"p1\">EndPoints]</ept> element in the <bpt id=\"p2\">[</bpt><ept id=\"p2\">ServiceDefinition.csdef]</ept> file.",
      "pos": [
        7193,
        7277
      ]
    },
    {
      "content": "The second firewall controls connections between the virtual machine and the processes within that virtual machine.",
      "pos": [
        7279,
        7394
      ]
    },
    {
      "content": "This is controlled by the <ph id=\"ph1\">`netsh advfirewall firewall`</ph> command line tool, and is the focus of this article.",
      "pos": [
        7395,
        7502
      ]
    },
    {
      "content": "Azure creates firewall rules for the processes started within your roles.",
      "pos": [
        7504,
        7577
      ]
    },
    {
      "content": "For example, when you start a service or program, Azure automatically creates the necessary firewall rules to allow that service to communicate with the Internet.",
      "pos": [
        7578,
        7740
      ]
    },
    {
      "content": "However, if you create a service that is started by a process outside your role (for example, a COM+ service, or a program that starts by using the Windows Scheduler), you will need to manually create a firewall rule to allow access to that service.",
      "pos": [
        7741,
        7990
      ]
    },
    {
      "content": "These firewall rules can be created by using a startup task.",
      "pos": [
        7991,
        8051
      ]
    },
    {
      "content": "A startup task that creates a firewall rule must have an <bpt id=\"p1\">[</bpt>executionContext<ept id=\"p1\">][Task]</ept> of <bpt id=\"p2\">**</bpt>elevated<ept id=\"p2\">**</ept>.",
      "pos": [
        8053,
        8151
      ]
    },
    {
      "content": "Add the following startup task to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ServiceDefinition.csdef]</ept> file.",
      "pos": [
        8152,
        8221
      ]
    },
    {
      "content": "To add the firewall rule, you must use the appropriate <ph id=\"ph1\">`netsh advfirewall firewall`</ph> commands in your startup batch file.",
      "pos": [
        8567,
        8687
      ]
    },
    {
      "content": "In this example, the startup task requires security and encryption for TCP port 80.",
      "pos": [
        8688,
        8771
      ]
    },
    {
      "content": "Block a specific IP address",
      "pos": [
        9189,
        9216
      ]
    },
    {
      "pos": [
        9218,
        9445
      ],
      "content": "You can restrict an Azure web role access to a set of specified IP addresses by modifying your IIS <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> file and creating a command file which unlocks the <bpt id=\"p2\">**</bpt>ipSecurity<ept id=\"p2\">**</ept> section of the <bpt id=\"p3\">**</bpt>ApplicationHost.config<ept id=\"p3\">**</ept> file."
    },
    {
      "content": "First, create a command file that runs when your role starts which unlocks the <bpt id=\"p1\">**</bpt>ipSecurity<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">**</bpt>ApplicationHost.config<ept id=\"p2\">**</ept> file.",
      "pos": [
        9447,
        9588
      ]
    },
    {
      "content": "Create a new folder at the root level of your web role called <bpt id=\"p1\">**</bpt>startup<ept id=\"p1\">**</ept> and, within this folder, create a batch file called <bpt id=\"p2\">**</bpt>startup.cmd<ept id=\"p2\">**</ept>.",
      "pos": [
        9589,
        9731
      ]
    },
    {
      "content": "Set the properties of this file to <bpt id=\"p1\">**</bpt>Copy Always<ept id=\"p1\">**</ept> to ensure that it will be deployed.",
      "pos": [
        9732,
        9818
      ]
    },
    {
      "pos": [
        9820,
        9889
      ],
      "content": "Add the following startup task to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ServiceDefinition.csdef]</ept> file."
    },
    {
      "pos": [
        10208,
        10253
      ],
      "content": "Add this command to the <bpt id=\"p1\">**</bpt>startup.cmd<ept id=\"p1\">**</ept> file:"
    },
    {
      "pos": [
        10357,
        10512
      ],
      "content": "This causes the <bpt id=\"p1\">**</bpt>startup.cmd<ept id=\"p1\">**</ept> batch file to be run every time the web role is initialized, ensuring that the required <bpt id=\"p2\">**</bpt>ipSecurity<ept id=\"p2\">**</ept> section is unlocked."
    },
    {
      "pos": [
        10514,
        10763
      ],
      "content": "Finally, modify the <bpt id=\"p1\">[</bpt>system.webServer section<ept id=\"p1\">](http://www.iis.net/configreference/system.webserver/security/ipsecurity#005)</ept> your web role’s <bpt id=\"p2\">**</bpt>web.config<ept id=\"p2\">**</ept> file to add a list of IP addresses that are granted access, as shown in the following example:"
    },
    {
      "pos": [
        10765,
        10846
      ],
      "content": "This sample config <bpt id=\"p1\">**</bpt>allows<ept id=\"p1\">**</ept> all IPs to access the server except the two defined"
    },
    {
      "pos": [
        11243,
        11334
      ],
      "content": "This sample config <bpt id=\"p1\">**</bpt>denies<ept id=\"p1\">**</ept> all IPs from accessing the server except for the two defined."
    },
    {
      "content": "Create a PowerShell startup task",
      "pos": [
        11754,
        11786
      ]
    },
    {
      "pos": [
        11788,
        11939
      ],
      "content": "Windows PowerShell scripts cannot be called directly from the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ServiceDefinition.csdef]</ept> file, but they can be invoked from within a startup batch file."
    },
    {
      "content": "PowerShell, by default, will not run an unsigned script.",
      "pos": [
        11941,
        11997
      ]
    },
    {
      "content": "Unless you sign your scripts, you need to configure Windows PowerShell to run unsigned scripts.",
      "pos": [
        11998,
        12093
      ]
    },
    {
      "content": "To run unsigned scripts, <bpt id=\"p1\">**</bpt>ExecutionPolicy<ept id=\"p1\">**</ept> must be set to <bpt id=\"p2\">**</bpt>Unrestricted<ept id=\"p2\">**</ept>.",
      "pos": [
        12094,
        12171
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>ExecutionPolicy<ept id=\"p1\">**</ept> setting that you use is based on the version of Windows PowerShell.",
      "pos": [
        12172,
        12263
      ]
    },
    {
      "content": "If you're using a Guest OS that is runs PowerShell 2.0 or 1.0 you can force version 2 to run, and if unavailable, use version 1.",
      "pos": [
        12510,
        12638
      ]
    },
    {
      "content": "Create files in local storage from a startup task",
      "pos": [
        13217,
        13266
      ]
    },
    {
      "content": "You can use a local storage resource to store files created by your startup task which will be accessed later by your application.",
      "pos": [
        13268,
        13398
      ]
    },
    {
      "content": "To create the local storage resource, add a <bpt id=\"p1\">[</bpt><ept id=\"p1\">LocalResources]</ept> section to the <bpt id=\"p2\">[</bpt><ept id=\"p2\">ServiceDefinition.csdef]</ept> file and then add the <bpt id=\"p3\">[</bpt><ept id=\"p3\">LocalStorage]</ept> child element.",
      "pos": [
        13400,
        13553
      ]
    },
    {
      "content": "Give the local storage resource a unique name and an appropriate size for your startup task.",
      "pos": [
        13554,
        13646
      ]
    },
    {
      "content": "To use a local storage resource in your startup task, you need to create an environment variable to reference the local storage resource location.",
      "pos": [
        13648,
        13794
      ]
    },
    {
      "content": "Then the Startup task and the application will be able to read and write files to the local storage resource.",
      "pos": [
        13795,
        13904
      ]
    },
    {
      "pos": [
        13906,
        13983
      ],
      "content": "The relevant sections of the <bpt id=\"p1\">**</bpt>ServiceDefinition.csdef<ept id=\"p1\">**</ept> file are shown here:"
    },
    {
      "pos": [
        14823,
        14989
      ],
      "content": "As an example, this <bpt id=\"p1\">**</bpt>Startup.cmd<ept id=\"p1\">**</ept> batch file uses the <bpt id=\"p2\">**</bpt>PathToStartupStorage<ept id=\"p2\">**</ept> environment variable to create the file <bpt id=\"p3\">**</bpt>MyTest.txt<ept id=\"p3\">**</ept> on the local storage location."
    },
    {
      "content": "You can access local storage from the Azure SDK by using the <bpt id=\"p1\">[</bpt>GetLocalResource<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.getlocalresource.aspx)</ept> method.",
      "pos": [
        15555,
        15760
      ]
    },
    {
      "content": "Standard file read and write operations will then work to read and write the contents of the local storage resource.",
      "pos": [
        15761,
        15877
      ]
    },
    {
      "content": "Differentiate between running in the Emulator and the Cloud",
      "pos": [
        16135,
        16194
      ]
    },
    {
      "content": "You can have your startup task perform different steps when it is operating in the cloud compared to when it is in the compute emulator.",
      "pos": [
        16196,
        16332
      ]
    },
    {
      "content": "For example, you may want to use a fresh copy of your SQL data only when running in the emulator.",
      "pos": [
        16333,
        16430
      ]
    },
    {
      "content": "Or you may want to do some sort of performance optimizations for the cloud that you don't need to do when running in the emulator.",
      "pos": [
        16431,
        16561
      ]
    },
    {
      "pos": [
        16563,
        16797
      ],
      "content": "This ability to perform different actions on the compute emulator and the cloud can be accomplished by creating an environment variable in the <bpt id=\"p1\">[</bpt><ept id=\"p1\">ServiceDefinition.csdef]</ept> file, then testing the environment variable in your startup task."
    },
    {
      "content": "To create the environment variable, add the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Variable]</ept>/<bpt id=\"p2\">[</bpt><ept id=\"p2\">RoleInstanceValue]</ept> element and create an XPath value of <ph id=\"ph1\">`/RoleEnvironment/Deployment/@emulated`</ph>.",
      "pos": [
        16799,
        16951
      ]
    },
    {
      "content": "The value of the <bpt id=\"p1\">**</bpt>%ComputeEmulatorRunning%<ept id=\"p1\">**</ept> environment variable will be <ph id=\"ph1\">`\"true\"`</ph> when running on the compute emulator, and <ph id=\"ph2\">`\"false\"`</ph> when running on the cloud.",
      "pos": [
        16952,
        17114
      ]
    },
    {
      "content": "Any task run can now use the <bpt id=\"p1\">**</bpt>%ComputeEmulatorRunning%<ept id=\"p1\">**</ept> environment variable to perform different actions based on whether or not the role is running in the cloud or the emulator.",
      "pos": [
        17596,
        17777
      ]
    },
    {
      "content": "Here is a .cmd shell script that checks for that environment variable.",
      "pos": [
        17778,
        17848
      ]
    },
    {
      "content": "Detect that your task has already run",
      "pos": [
        18224,
        18261
      ]
    },
    {
      "content": "The role may recycle without a reboot causing your startup tasks to run again.",
      "pos": [
        18263,
        18341
      ]
    },
    {
      "content": "There is flag to indicate a task has already run on the hosting VM.",
      "pos": [
        18342,
        18409
      ]
    },
    {
      "content": "You may have some tasks where it doesn't matter that they run multiple times.",
      "pos": [
        18410,
        18487
      ]
    },
    {
      "content": "However you may run into a situation where you need to prevent a task from running more than once.",
      "pos": [
        18488,
        18586
      ]
    },
    {
      "content": "The simplest way to detect that a task has already run is to create a file in the <bpt id=\"p1\">**</bpt>%TEMP%<ept id=\"p1\">**</ept> folder when the task is successful and look for it at the start of the task.",
      "pos": [
        18588,
        18757
      ]
    },
    {
      "content": "Here is a sample cmd shell script that does that for you.",
      "pos": [
        18758,
        18815
      ]
    },
    {
      "content": "Task best practices",
      "pos": [
        19883,
        19902
      ]
    },
    {
      "content": "Here are some best practices you should follow when configuring task for your web or worker role.",
      "pos": [
        19903,
        20000
      ]
    },
    {
      "content": "Always log startup activities",
      "pos": [
        20006,
        20035
      ]
    },
    {
      "content": "Visual Studio does not provide a debugger to step through batch files, so it's good to get as much data on the operation of batch files as possible.",
      "pos": [
        20037,
        20185
      ]
    },
    {
      "content": "Logging the output of batch files, both <bpt id=\"p1\">**</bpt>stdout<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>stderr<ept id=\"p2\">**</ept>, can give you important information when trying to debug and fix batch files.",
      "pos": [
        20186,
        20329
      ]
    },
    {
      "content": "To log both <bpt id=\"p1\">**</bpt>stdout<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>stderr<ept id=\"p2\">**</ept> to the StartupLog.txt file in the directory pointed to by the <bpt id=\"p3\">**</bpt>%TEMP%<ept id=\"p3\">**</ept> environment variable, add the text <ph id=\"ph1\">`&gt;&gt;  \"%TEMP%\\\\StartupLog.txt\" 2&gt;&amp;1`</ph> to the end of specific lines you want to log.",
      "pos": [
        20330,
        20557
      ]
    },
    {
      "content": "For example, to execute setup.exe in the <bpt id=\"p1\">**</bpt>%PathToApp1Install%<ept id=\"p1\">**</ept> directory:",
      "pos": [
        20558,
        20633
      ]
    },
    {
      "content": "If you want to log all output from the startup task without adding <ph id=\"ph1\">`&gt;&gt; \"%TEMP%\\StartupLog.txt\" 2&gt;&amp;1`</ph>to the end of each line, two startup batch files are needed.",
      "pos": [
        20704,
        20864
      ]
    },
    {
      "content": "The first batch file will call the second batch file with redirection to log all of the activities of the second batch file.",
      "pos": [
        20865,
        20989
      ]
    },
    {
      "content": "This is necessary for proper redirection to occur.",
      "pos": [
        20990,
        21040
      ]
    },
    {
      "content": "The following shows how to redirect all output from a startup batch file.",
      "pos": [
        21042,
        21115
      ]
    },
    {
      "content": "In this example, the ServerDefinition.csdef file creates a startup task that calls Startup1.cmd.",
      "pos": [
        21116,
        21212
      ]
    },
    {
      "content": "Startup1.cmd calls Startup2.cmd, redirecting all output to %TEMP%\\\\StartupLog.txt.",
      "pos": [
        21213,
        21295
      ]
    },
    {
      "content": "ServiceDefinition.cmd:",
      "pos": [
        21297,
        21319
      ]
    },
    {
      "content": "Startup1.cmd:",
      "pos": [
        21439,
        21452
      ]
    },
    {
      "content": "Startup2.cmd:",
      "pos": [
        22458,
        22471
      ]
    },
    {
      "content": "Set executionContext appropriately for startup tasks",
      "pos": [
        22900,
        22952
      ]
    },
    {
      "content": "Set privileges appropriately for the startup task.",
      "pos": [
        22954,
        23004
      ]
    },
    {
      "content": "Sometimes startup tasks must run with elevated privileges even though the role runs with normal privileges.",
      "pos": [
        23005,
        23112
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>executionContext<ept id=\"p1\">][Task]</ept> attribute sets the privilege level of the startup task.",
      "pos": [
        23114,
        23198
      ]
    },
    {
      "content": "Using <ph id=\"ph1\">`executionContext=\"limited\"`</ph> means the startup task will have the same privilege level as the role.",
      "pos": [
        23199,
        23304
      ]
    },
    {
      "content": "Using <ph id=\"ph1\">`executionContext=\"elevated\"`</ph> means the startup task will have administrator privileges, which allows the startup task to perform administrator tasks without giving administrator privileges to your role.",
      "pos": [
        23305,
        23514
      ]
    },
    {
      "content": "An example of a startup task that requires elevated privileges is a startup task that uses <bpt id=\"p1\">**</bpt>AppCmd.exe<ept id=\"p1\">**</ept> to configure IIS.",
      "pos": [
        23516,
        23639
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>AppCmd.exe<ept id=\"p1\">**</ept> requires <ph id=\"ph1\">`executionContext=\"elevated\"`</ph>.",
      "pos": [
        23640,
        23694
      ]
    },
    {
      "content": "Use the appropriate taskType",
      "pos": [
        23700,
        23728
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>taskType<ept id=\"p1\">][Task]</ept> attribute determines the way the startup task will be executed.",
      "pos": [
        23730,
        23814
      ]
    },
    {
      "content": "There are three values: <bpt id=\"p1\">**</bpt>simple<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>background<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>foreground<ept id=\"p3\">**</ept>.",
      "pos": [
        23815,
        23886
      ]
    },
    {
      "content": "The background and foreground tasks are started asynchronously, and then the simple tasks are executed synchronously one at a time.",
      "pos": [
        23887,
        24018
      ]
    },
    {
      "content": "With <bpt id=\"p1\">**</bpt>simple<ept id=\"p1\">**</ept> startup tasks, you can set the order in which the tasks will occur by the order in which the tasks are listed in the ServiceDefinition.csdef file.",
      "pos": [
        24020,
        24182
      ]
    },
    {
      "content": "If a <bpt id=\"p1\">**</bpt>simple<ept id=\"p1\">**</ept> task ends with a non-zero exit code, then the startup procedure will stop and the role will not start.",
      "pos": [
        24183,
        24301
      ]
    },
    {
      "content": "The difference between <bpt id=\"p1\">**</bpt>background<ept id=\"p1\">**</ept> startup tasks and <bpt id=\"p2\">**</bpt>foreground<ept id=\"p2\">**</ept> startup tasks is that <bpt id=\"p3\">**</bpt>foreground<ept id=\"p3\">**</ept> tasks will keep the role running until the <bpt id=\"p4\">**</bpt>foreground<ept id=\"p4\">**</ept> task ends.",
      "pos": [
        24303,
        24479
      ]
    },
    {
      "content": "This also means that if the <bpt id=\"p1\">**</bpt>foreground<ept id=\"p1\">**</ept> task hangs or crashes, the role will not recycle until the <bpt id=\"p2\">**</bpt>foreground<ept id=\"p2\">**</ept> task is forced closed.",
      "pos": [
        24480,
        24619
      ]
    },
    {
      "content": "For this reason, <bpt id=\"p1\">**</bpt>background<ept id=\"p1\">**</ept> tasks are recommended for asynchronous startup tasks unless you need that feature of the <bpt id=\"p2\">**</bpt>foreground<ept id=\"p2\">**</ept> task.",
      "pos": [
        24620,
        24761
      ]
    },
    {
      "content": "End batch files with EXIT /B 0",
      "pos": [
        24767,
        24797
      ]
    },
    {
      "content": "The role will only start if the <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept> from each of your simple startup task is zero.",
      "pos": [
        24799,
        24892
      ]
    },
    {
      "content": "Not all programs set the <bpt id=\"p1\">**</bpt>errorlevel<ept id=\"p1\">**</ept> (exit code) correctly, so the batch file should end with an <ph id=\"ph1\">`EXIT /B 0`</ph> if everything ran correctly.",
      "pos": [
        24893,
        25033
      ]
    },
    {
      "pos": [
        25035,
        25137
      ],
      "content": "A missing <ph id=\"ph1\">`EXIT /B 0`</ph> at the end of a startup batch file is a common cause of roles that do not start."
    },
    {
      "content": "Expect startup tasks to run more than once",
      "pos": [
        25143,
        25185
      ]
    },
    {
      "content": "Not all role recycles include a reboot, but all role recycles include running all startup tasks.",
      "pos": [
        25187,
        25283
      ]
    },
    {
      "content": "This means that startup tasks must be able to run multiple times between reboots without any problems.",
      "pos": [
        25284,
        25386
      ]
    },
    {
      "content": "This is discussed <bpt id=\"p1\">[</bpt>above<ept id=\"p1\">](#detect-that-your-task-has-already-run)</ept>.",
      "pos": [
        25387,
        25453
      ]
    },
    {
      "content": "Use local storage to store files that must be accessed in the role",
      "pos": [
        25459,
        25525
      ]
    },
    {
      "content": "If you want to copy or create a file during your startup task that is then accessible to your role, then that file must be placed in local storage.",
      "pos": [
        25527,
        25674
      ]
    },
    {
      "content": "See the <bpt id=\"p1\">[</bpt>section<ept id=\"p1\">](#create-files-in-local-storage-from-a-startup-task)</ept> above.",
      "pos": [
        25675,
        25751
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        25756,
        25766
      ]
    },
    {
      "pos": [
        25768,
        25849
      ],
      "content": "Review the cloud <bpt id=\"p1\">[</bpt>service model and package<ept id=\"p1\">](cloud-services-model-and-package.md)</ept>"
    },
    {
      "pos": [
        25851,
        25918
      ],
      "content": "Learn more about how <bpt id=\"p1\">[</bpt>Tasks<ept id=\"p1\">](cloud-services-startup-tasks.md)</ept> work."
    },
    {
      "pos": [
        25920,
        26014
      ],
      "content": "<bpt id=\"p1\">[</bpt>Create and deploy<ept id=\"p1\">](cloud-services-how-to-create-deploy-portal.md)</ept> your cloud service package."
    },
    {
      "content": "test",
      "pos": [
        26017,
        26021
      ]
    }
  ],
  "content": "<properties \npageTitle=\"Common startup tasks for Cloud Services | Microsoft Azure\" \ndescription=\"Provides some examples of common startup tasks you may want to perform in your cloud services web role or worker role.\" \nservices=\"cloud-services\" \ndocumentationCenter=\"\" \nauthors=\"Thraka\" \nmanager=\"timlt\" \neditor=\"\"/>\n<tags \nms.service=\"cloud-services\" \nms.workload=\"tbd\" \nms.tgt_pltfrm=\"na\" \nms.devlang=\"na\" \nms.topic=\"article\" \nms.date=\"08/24/2015\" \nms.author=\"adegeo\"/>\n\n# Common Cloud Service startup tasks\n\nThis article provides some examples of common startup tasks you may want to perform in your cloud service. You can use startup tasks to perform operations before a role starts. Operations that you might want to perform include installing a component, registering COM components, setting registry keys, or starting a long running process. \n\nSee [this article](cloud-services-startup-tasks.md) to understand how startup tasks work, and specifically how to create the entries that define a startup task.\n\nMany of the tasks here use the \n\n>[AZURE.NOTE] Startup tasks are not applicable to Virtual Machines, only to Cloud Service Web and Worker roles.\n\n\n## Define environment variables before a role starts\n\nYou can define environment variables for an entire role by adding the [Runtime] element to the definition of the role in the service definition file.\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        <Runtime>\n            <Environment>\n                <Variable name=\"MyEnvironmentVariable\" value=\"MyVariableValue\" />\n            </Environment>\n        </Runtime>\n    </WebRole>\n</ServiceDefinition>\n```\n\nIf you need environment variables defined for a specific task, that isn't shared by other tasks, you can use the [Environment] element inside of the [Task] element.\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        <Startup>\n            <Task commandLine=\"Startup.cmd\" executionContext=\"limited\" taskType=\"simple\">\n                <Environment>\n                    <Variable name=\"MyEnvironmentVariable\" value=\"MyVariableValue\" />\n                </Environment>\n            </Task>\n        </Startup>\n    </WebRole>\n</ServiceDefinition>\n```\n\nVariables can also use a [valid Azure XPath value](https://msdn.microsoft.com/library/azure/hh404006.aspx) to reference something about the deployment. Instead of using the `value` attribute, define a [RoleInstanceValue] child element.\n\n```xml\n<Variable name=\"PathToStartupStorage\">\n    <RoleInstanceValue xpath=\"/RoleEnvironment/CurrentInstance/LocalResources/LocalResource[@name='StartupLocalStorage']/@path\" />\n</Variable>\n```\n\n\n## Configure IIS startup with AppCmd.exe\n\nThe [AppCmd.exe](https://technet.microsoft.com/library/jj635852.aspx) command line tool can be used to manage IIS settings at startup on Azure. *AppCmd.exe* provides convenient, command line access to configuration settings for use in startup tasks on Azure. Using *AppCmd.exe*, Website settings can be added, modified, or removed for applications and sites.\n\nHowever, there are a few things to watch out for in the use of *AppCmd.exe* as a startup task:\n\n- Startup tasks can be run more than once between reboots. This can happen if the role recycles, for instance.\n- Some *AppCmd.exe* actions can generate errors if they are performed more than once. Attempting to add a section to *Web.config* twice could generate an error.\n- Startup tasks fail if they return a non-zero exit code or **errorlevel**. This can happen if *AppCmd.exe* generates an error.\n\nFor the reasons listed, it is often wise to check the **errorlevel** after calling *AppCmd.exe*, which is easy to do if you wrap the call to *AppCmd.exe* with a *.cmd* file. If you detect a known **errorlevel** response, you can ignore it, otherwise return it. This is demonstrated in the example below.\n\nThe errorlevels returned by *AppCmd.exe* are listed in the winerror.h file, and can also be seen on [MSDN](https://msdn.microsoft.com/library/windows/desktop/ms681382.aspx).\n\n### Example\n\nThis example adds a compression section and a compression entry for JSON to the *Web.config* file, with error handling and logging.\n\nThe relevant sections of the [ServiceDefinition.csdef] file are shown here, which include setting the [executionContext](https://msdn.microsoft.com/library/azure/gg557552.aspx#Task) attribute to `elevated` to give *AppCmd.exe* sufficient permissions to change the settings in the *Web.config* file:\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        <Startup>\n            <Task commandLine=\"Startup.cmd\" executionContext=\"elevated\" taskType=\"simple\" />\n        </Startup>\n    </WebRole>\n</ServiceDefinition>\n```\n\nThe Startup.cmd batch file uses AppCmd.exe to add a compression section and a compression entry for JSON to the *Web.config* file. The expected **errorlevel** of 183 is set to zero using the VERIFY.EXE command line program. Unexpected errorlevels are logged to StartupErrorLog.txt.\n\n    REM   *** Add a compression section to the Web.config file. ***\n    %windir%\\system32\\inetsrv\\appcmd set config /section:urlCompression /doDynamicCompression:True /commit:apphost >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    \n    REM   ERRORLEVEL 183 occurs when trying to add a section that already exists. This error is expected if this\n    REM   batch file were executed twice. This can occur and must be accounted for in a Azure startup\n    REM   task. To handle this situation, set the ERRORLEVEL to zero by using the Verify command. The Verify\n    REM   command will safely set the ERRORLEVEL to zero.\n    IF %ERRORLEVEL% EQU 183 DO VERIFY > NUL\n    \n    REM   If the ERRORLEVEL is not zero at this point, some other error occurred.\n    IF %ERRORLEVEL% NEQ 0 (\n        ECHO Error adding a compression section to the Web.config file. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n        GOTO ErrorExit\n    )\n    \n    REM   *** Add compression for json. ***\n    %windir%\\system32\\inetsrv\\appcmd set config  -section:system.webServer/httpCompression /+\"dynamicTypes.[mimeType='application/json; charset=utf-8',enabled='True']\" /commit:apphost >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    IF %ERRORLEVEL% EQU 183 VERIFY > NUL\n    IF %ERRORLEVEL% NEQ 0 (\n        ECHO Error adding the JSON compression type to the Web.config file. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n        GOTO ErrorExit\n    )\n    \n    REM   *** Exit batch file. ***\n    EXIT /b 0\n    \n    REM   *** Log error and exit ***\n    :ErrorExit\n    REM   Report the date, time, and ERRORLEVEL of the error.\n    DATE /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    TIME /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    ECHO An error occurred during startup. ERRORLEVEL = %ERRORLEVEL% >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    EXIT %ERRORLEVEL%\n\n\n## Add firewall rules\n\nIn Azure, there are effectively two firewalls. The first firewall controls connections between the virtual machine and the outside world. This is controlled by the [EndPoints] element in the [ServiceDefinition.csdef] file.\n\nThe second firewall controls connections between the virtual machine and the processes within that virtual machine. This is controlled by the `netsh advfirewall firewall` command line tool, and is the focus of this article.\n\nAzure creates firewall rules for the processes started within your roles. For example, when you start a service or program, Azure automatically creates the necessary firewall rules to allow that service to communicate with the Internet. However, if you create a service that is started by a process outside your role (for example, a COM+ service, or a program that starts by using the Windows Scheduler), you will need to manually create a firewall rule to allow access to that service. These firewall rules can be created by using a startup task.\n\nA startup task that creates a firewall rule must have an [executionContext][Task] of **elevated**. Add the following startup task to the [ServiceDefinition.csdef] file.\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        <Startup>\n            <Task commandLine=\"AddFirewallRules.cmd\" executionContext=\"elevated\" taskType=\"simple\" />\n        </Startup>\n    </WebRole>\n</ServiceDefinition>\n```\n\nTo add the firewall rule, you must use the appropriate `netsh advfirewall firewall` commands in your startup batch file. In this example, the startup task requires security and encryption for TCP port 80.\n\n    REM   Add a firewall rule in a startup task.\n    \n    REM   Add an inbound rule requiring security and encryption for TCP port 80 traffic.\n    netsh advfirewall firewall add rule name=\"Require Encryption for Inbound TCP/80\" protocol=TCP dir=in localport=80 security=authdynenc action=allow >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    \n    REM   If an error occurred, return the errorlevel.\n    EXIT /B %errorlevel%\n\n\n## Block a specific IP address\n\nYou can restrict an Azure web role access to a set of specified IP addresses by modifying your IIS **web.config** file and creating a command file which unlocks the **ipSecurity** section of the **ApplicationHost.config** file.\n\nFirst, create a command file that runs when your role starts which unlocks the **ipSecurity** section of the **ApplicationHost.config** file. Create a new folder at the root level of your web role called **startup** and, within this folder, create a batch file called **startup.cmd**. Set the properties of this file to **Copy Always** to ensure that it will be deployed.\n\nAdd the following startup task to the [ServiceDefinition.csdef] file.\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        <Startup>\n            <Task commandLine=\"startup.cmd\" executionContext=\"elevated\" />\n        </Startup>\n    </WebRole>\n</ServiceDefinition>\n```\n\nAdd this command to the **startup.cmd** file:\n\n    %windir%\\system32\\inetsrv\\AppCmd.exe unlock config -section:system.webServer/security/ipSecurity\n\nThis causes the **startup.cmd** batch file to be run every time the web role is initialized, ensuring that the required **ipSecurity** section is unlocked.\n\nFinally, modify the [system.webServer section](http://www.iis.net/configreference/system.webserver/security/ipsecurity#005) your web role’s **web.config** file to add a list of IP addresses that are granted access, as shown in the following example:\n\nThis sample config **allows** all IPs to access the server except the two defined\n\n```xml\n<system.webServer>\n    <security>\n    <!--Unlisted IP addresses are denied access-->\n    <ipSecurity>\n        <!--The following IP addresses are granted access-->\n        <add allowed=\"false\" ipAddress=\"192.168.100.1\" subnetMask=\"255.255.0.0\" />\n        <add allowed=\"false\" ipAddress=\"192.168.100.2\" subnetMask=\"255.255.0.0\" />\n    </ipSecurity>\n    </security>\n</system.webServer>\n```\n\nThis sample config **denies** all IPs from accessing the server except for the two defined.\n\n```xml\n<system.webServer>\n    <security>\n    <!--Unlisted IP addresses are denied access-->\n    <ipSecurity allowUnlisted=\"false\">\n        <!--The following IP addresses are granted access-->\n        <add allowed=\"true\" ipAddress=\"192.168.100.1\" subnetMask=\"255.255.0.0\" />\n        <add allowed=\"true\" ipAddress=\"192.168.100.2\" subnetMask=\"255.255.0.0\" />\n    </ipSecurity>\n    </security>\n</system.webServer>\n```\n\n## Create a PowerShell startup task\n\nWindows PowerShell scripts cannot be called directly from the [ServiceDefinition.csdef] file, but they can be invoked from within a startup batch file.\n\nPowerShell, by default, will not run an unsigned script. Unless you sign your scripts, you need to configure Windows PowerShell to run unsigned scripts. To run unsigned scripts, **ExecutionPolicy** must be set to **Unrestricted**. The **ExecutionPolicy** setting that you use is based on the version of Windows PowerShell.\n\n    REM   Run an unsigned PowerShell script and log the output\n    PowerShell -ExecutionPolicy Unrestricted .\\startup.ps1 >> \"%TEMP%\\StartupLog.txt\" 2>&1\n        \n    REM   If an error occurred, return the errorlevel.\n    EXIT /B %errorlevel%\n\n\nIf you're using a Guest OS that is runs PowerShell 2.0 or 1.0 you can force version 2 to run, and if unavailable, use version 1.\n\n    REM   Attempt to set the execution policy by using PowerShell version 2.0 syntax.\n    PowerShell -Version 2.0 -ExecutionPolicy Unrestricted .\\startup.ps1 >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n    REM   If PowerShell version 2.0 isn't available. Set the execution policy by using the PowerShell\n    IF %ERRORLEVEL% EQU -393216 (\n\n       PowerShell -Command \"Set-ExecutionPolicy Unrestricted\" >> \"%TEMP%\\StartupLog.txt\" 2>&1\n       PowerShell .\\startup.ps1 >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    )\n\n    REM   If an error occurred, return the errorlevel.\n    EXIT /B %errorlevel%\n\n## Create files in local storage from a startup task\n\nYou can use a local storage resource to store files created by your startup task which will be accessed later by your application.\n\nTo create the local storage resource, add a [LocalResources] section to the [ServiceDefinition.csdef] file and then add the [LocalStorage] child element. Give the local storage resource a unique name and an appropriate size for your startup task.\n\nTo use a local storage resource in your startup task, you need to create an environment variable to reference the local storage resource location. Then the Startup task and the application will be able to read and write files to the local storage resource.\n\nThe relevant sections of the **ServiceDefinition.csdef** file are shown here:\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n        ...\n        \n        <LocalResources>\n          <LocalStorage name=\"StartupLocalStorage\" sizeInMB=\"5\"/>\n        </LocalResources>\n        \n        ...\n        \n        <Runtime>\n            <Environment>\n                <Variable name=\"PathToStartupStorage\">\n                    <RoleInstanceValue xpath=\"/RoleEnvironment/CurrentInstance/LocalResources/LocalResource[@name='StartupLocalStorage']/@path\" />\n                </Variable>\n            </Environment>\n        </Runtime>\n        \n        ...\n        \n        <Startup>\n          <Task commandLine=\"Startup.cmd\" executionContext=\"limited\" taskType=\"simple\" />\n        </Startup>\n    </WebRole>\n</ServiceDefinition>\n```\n\nAs an example, this **Startup.cmd** batch file uses the **PathToStartupStorage** environment variable to create the file **MyTest.txt** on the local storage location.\n\n    REM   Create a simple text file.\n\n    ECHO This text will go into the MyTest.txt file which will be in the    >  \"%PathToStartupStorage%\\MyTest.txt\"\n    ECHO path pointed to by the PathToStartupStorage environment variable.  >> \"%PathToStartupStorage%\\MyTest.txt\"\n    ECHO The contents of the PathToStartupStorage environment variable is   >> \"%PathToStartupStorage%\\MyTest.txt\"\n    ECHO \"%PathToStartupStorage%\".                                          >> \"%PathToStartupStorage%\\MyTest.txt\"\n\n    REM   Exit the batch file with ERRORLEVEL 0.\n\n    EXIT /b 0\n\nYou can access local storage from the Azure SDK by using the [GetLocalResource](https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.getlocalresource.aspx) method. Standard file read and write operations will then work to read and write the contents of the local storage resource. \n\n```csharp\nstring localStoragePath = Microsoft.WindowsAzure.ServiceRuntime.RoleEnvironment.GetLocalResource(\"StartupLocalStorage\").RootPath;\n\nstring fileContent = System.IO.File.ReadAllText(System.IO.Path.Combine(localStoragePath, \"MyTest.txt\"));\n```\n\n\n## Differentiate between running in the Emulator and the Cloud\n\nYou can have your startup task perform different steps when it is operating in the cloud compared to when it is in the compute emulator. For example, you may want to use a fresh copy of your SQL data only when running in the emulator. Or you may want to do some sort of performance optimizations for the cloud that you don't need to do when running in the emulator.\n\nThis ability to perform different actions on the compute emulator and the cloud can be accomplished by creating an environment variable in the [ServiceDefinition.csdef] file, then testing the environment variable in your startup task.\n\nTo create the environment variable, add the [Variable]/[RoleInstanceValue] element and create an XPath value of `/RoleEnvironment/Deployment/@emulated`. The value of the **%ComputeEmulatorRunning%** environment variable will be `\"true\"` when running on the compute emulator, and `\"false\"` when running on the cloud.\n\n\n```xml\n<ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\n    <WebRole name=\"WebRole1\">\n\n        ...\n        \n        <Runtime>\n            <Environment>\n                <Variable name=\"ComputeEmulatorRunning\">\n                    <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\n                </Variable>\n            </Environment>\n        </Runtime>\n\n    </WebRole>\n</ServiceDefinition>\n```\n\nAny task run can now use the **%ComputeEmulatorRunning%** environment variable to perform different actions based on whether or not the role is running in the cloud or the emulator. Here is a .cmd shell script that checks for that environment variable.\n\n    REM   Check if this task is running on the compute emulator.\n\n    IF \"%ComputeEmulatorRunning%\" == \"true\" (\n        REM   This task is running on the compute emulator. Perform tasks that must be run only in the compute emulator.\n        \n    ) ELSE (\n        REM   This task is running on the cloud. Perform tasks that must be run only in the cloud.\n        \n    )\n\n\n## Detect that your task has already run\n\nThe role may recycle without a reboot causing your startup tasks to run again. There is flag to indicate a task has already run on the hosting VM. You may have some tasks where it doesn't matter that they run multiple times. However you may run into a situation where you need to prevent a task from running more than once.\n\nThe simplest way to detect that a task has already run is to create a file in the **%TEMP%** folder when the task is successful and look for it at the start of the task. Here is a sample cmd shell script that does that for you.\n\n    REM   If Task1_Success.txt exists, then Application 1 is already installed.\n    IF EXIST \"%RoleRoot%\\Task1_Success.txt\" (\n      ECHO Application 1 is already installed. Exiting. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n      GOTO Finish\n    )\n\n    REM   Run your real exe task\n    ECHO Running XYZ >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    \"%PathToApp1Install%\\setup.exe\" >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n    IF %ERRORLEVEL% EQU 0 (\n      REM   The application installed without error. Create a file to indicate that the task\n      REM   does not need to be run again.\n\n      ECHO This line will create a file to indicate that Application 1 installed correctly. > \"%RoleRoot%\\Task1_Success.txt\"\n      \n    ) ELSE (\n      REM   An error occurred. Log the error and exit with the error code.\n\n      DATE /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n      TIME /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n      ECHO  An error occurred running task 1. Errorlevel = %ERRORLEVEL%. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n      EXIT %ERRORLEVEL%\n    )\n\n    :Finish\n\n    REM   Exit normally.\n    EXIT /B 0\n\n\n## Task best practices\nHere are some best practices you should follow when configuring task for your web or worker role.\n\n### Always log startup activities\n\nVisual Studio does not provide a debugger to step through batch files, so it's good to get as much data on the operation of batch files as possible. Logging the output of batch files, both **stdout** and **stderr**, can give you important information when trying to debug and fix batch files. To log both **stdout** and **stderr** to the StartupLog.txt file in the directory pointed to by the **%TEMP%** environment variable, add the text `>>  \"%TEMP%\\\\StartupLog.txt\" 2>&1` to the end of specific lines you want to log. For example, to execute setup.exe in the **%PathToApp1Install%** directory:\n\n    \"%PathToApp1Install%\\setup.exe\" >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\nIf you want to log all output from the startup task without adding `>> \"%TEMP%\\StartupLog.txt\" 2>&1`to the end of each line, two startup batch files are needed. The first batch file will call the second batch file with redirection to log all of the activities of the second batch file. This is necessary for proper redirection to occur.\n\nThe following shows how to redirect all output from a startup batch file. In this example, the ServerDefinition.csdef file creates a startup task that calls Startup1.cmd. Startup1.cmd calls Startup2.cmd, redirecting all output to %TEMP%\\\\StartupLog.txt.\n\nServiceDefinition.cmd:\n\n```xml\n<Startup>\n    <Task commandLine=\"Startup1.cmd\" executionContext=\"limited\" taskType=\"simple\" />\n</Startup>\n```\n\nStartup1.cmd:\n\n    REM   Startup1.cmd calls the main startup batch file, Startup2.cmd, redirecting all output\n    REM   to the StartupLog.txt log file.\n\n    REM   Log the startup date and time.\n    ECHO Startup1.cmd: >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    ECHO Current date and time: >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    DATE /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    TIME /T >> \"%TEMP%\\StartupLog.txt\" 2>&1\n    ECHO Starting up Startup2.cmd. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n    REM   Call the Startup2.cmd batch file, redirecting all output to the StartupLog.txt log file.\n    START /B /WAIT Startup2.cmd >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n    REM   Log the completion of Startup1.cmd.\n    ECHO Returned to Startup1.cmd. >> \"%TEMP%\\StartupLog.txt\" 2>&1\n\n    IF ERRORLEVEL EQU 0 (\n       REM   No errors occurred. Exit Startup1.cmd normally.\n       EXIT /B 0\n    ) ELSE (\n       REM   Log the error.\n       ECHO An error occurred. The ERRORLEVEL = %ERRORLEVEL%.  >> \"%TEMP%\\StartupLog.txt\" 2>&1\n       EXIT %ERRORLEVEL%\n    )\n\nStartup2.cmd:\n\n    REM   This is the batch file where the startup steps should be performed. Because of the\n    REM   way Startup2.cmd was called, all commands and their outputs will be stored in the\n    REM   StartupLog.txt file in the directory pointed to by the TEMP environment variable.\n\n    REM   If an error occurs, the following command will pass the ERRORLEVEL back to the\n    REM   calling batch file.\n    EXIT /B %ERRORLEVEL%\n\n### Set executionContext appropriately for startup tasks\n\nSet privileges appropriately for the startup task. Sometimes startup tasks must run with elevated privileges even though the role runs with normal privileges.\n\nThe [executionContext][Task] attribute sets the privilege level of the startup task. Using `executionContext=\"limited\"` means the startup task will have the same privilege level as the role. Using `executionContext=\"elevated\"` means the startup task will have administrator privileges, which allows the startup task to perform administrator tasks without giving administrator privileges to your role.\n\nAn example of a startup task that requires elevated privileges is a startup task that uses **AppCmd.exe** to configure IIS. **AppCmd.exe** requires `executionContext=\"elevated\"`.\n\n### Use the appropriate taskType\n\nThe [taskType][Task] attribute determines the way the startup task will be executed. There are three values: **simple**, **background**, and **foreground**. The background and foreground tasks are started asynchronously, and then the simple tasks are executed synchronously one at a time.\n\nWith **simple** startup tasks, you can set the order in which the tasks will occur by the order in which the tasks are listed in the ServiceDefinition.csdef file. If a **simple** task ends with a non-zero exit code, then the startup procedure will stop and the role will not start.\n\nThe difference between **background** startup tasks and **foreground** startup tasks is that **foreground** tasks will keep the role running until the **foreground** task ends. This also means that if the **foreground** task hangs or crashes, the role will not recycle until the **foreground** task is forced closed. For this reason, **background** tasks are recommended for asynchronous startup tasks unless you need that feature of the **foreground** task.\n\n### End batch files with EXIT /B 0\n\nThe role will only start if the **errorlevel** from each of your simple startup task is zero. Not all programs set the **errorlevel** (exit code) correctly, so the batch file should end with an `EXIT /B 0` if everything ran correctly.\n\nA missing `EXIT /B 0` at the end of a startup batch file is a common cause of roles that do not start.\n\n### Expect startup tasks to run more than once\n\nNot all role recycles include a reboot, but all role recycles include running all startup tasks. This means that startup tasks must be able to run multiple times between reboots without any problems. This is discussed [above](#detect-that-your-task-has-already-run).\n\n### Use local storage to store files that must be accessed in the role\n\nIf you want to copy or create a file during your startup task that is then accessible to your role, then that file must be placed in local storage. See the [section](#create-files-in-local-storage-from-a-startup-task) above.\n\n## Next steps\n\nReview the cloud [service model and package](cloud-services-model-and-package.md)\n\nLearn more about how [Tasks](cloud-services-startup-tasks.md) work.\n\n[Create and deploy](cloud-services-how-to-create-deploy-portal.md) your cloud service package.\n\n\n[ServiceDefinition.csdef]: cloud-services-model-and-package.md#csdef\n[Task]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Task\n[Runtime]: https://msdn.microsoft.com/en-us/library/azure/gg557552.aspx#Runtime\n[Startup]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Startup\n[Runtime]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Runtime\n[Environment]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Environment\n[Variable]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Variable\n[RoleInstanceValue]: https://msdn.microsoft.com/library/azure/gg557552.aspx#RoleInstanceValue\n[RoleEnvironment]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.aspx\n[Endpoints]: https://msdn.microsoft.com/library/azure/gg557552.aspx#Endpoints\n[LocalStorage]: https://msdn.microsoft.com/library/azure/gg557552.aspx#LocalStorage\n[LocalResources]: https://msdn.microsoft.com/library/azure/gg557552.aspx#LocalResources\n[RoleInstanceValue]: https://msdn.microsoft.com/library/azure/gg557552.aspx#RoleInstanceValue\ntest\n"
}