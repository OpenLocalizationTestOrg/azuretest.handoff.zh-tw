{
  "nodes": [
    {
      "content": "How to use Service Bus queues (.NET) | Microsoft Azure",
      "pos": [
        27,
        81
      ]
    },
    {
      "content": "Learn how to use Service Bus queues in Azure.",
      "pos": [
        100,
        145
      ]
    },
    {
      "content": "Code samples written in C# using the .NET API.",
      "pos": [
        146,
        192
      ]
    },
    {
      "content": "How to use Azure Service Bus queues",
      "pos": [
        506,
        541
      ]
    },
    {
      "content": "This article describes how to use Service Bus queues.",
      "pos": [
        543,
        596
      ]
    },
    {
      "content": "The samples are written in C\\# and use the .NET API.",
      "pos": [
        597,
        649
      ]
    },
    {
      "content": "The scenarios covered include creating queues and sending and receiving messages.",
      "pos": [
        650,
        731
      ]
    },
    {
      "content": "For more information about queues, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#Next-steps)</ept> section.",
      "pos": [
        732,
        809
      ]
    },
    {
      "content": "Configure the application to use Service Bus",
      "pos": [
        980,
        1024
      ]
    },
    {
      "content": "When you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.",
      "pos": [
        1026,
        1174
      ]
    },
    {
      "content": "Add the Service Bus NuGet package",
      "pos": [
        1179,
        1212
      ]
    },
    {
      "content": "The Service Bus <bpt id=\"p1\">**</bpt>NuGet<ept id=\"p1\">**</ept> package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        1214,
        1369
      ]
    },
    {
      "content": "The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express.",
      "pos": [
        1370,
        1503
      ]
    },
    {
      "content": "The Service Bus NuGet package is the easiest way",
      "pos": [
        1504,
        1552
      ]
    },
    {
      "content": "to get the Service Bus API and to configure your application with all of the Service Bus dependencies.",
      "pos": [
        1553,
        1655
      ]
    },
    {
      "content": "To install the NuGet package in your application, do the following:",
      "pos": [
        1657,
        1724
      ]
    },
    {
      "pos": [
        1730,
        1817
      ],
      "content": "In Solution Explorer, right-click <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Manage NuGet Packages<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Search for \"Service Bus\" and select the <bpt id=\"p1\">**</bpt>Microsoft Azure Service Bus<ept id=\"p1\">**</ept> item.",
      "pos": [
        1822,
        1899
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept> to complete the installation, then close this dialog box.",
      "pos": [
        1900,
        1975
      ]
    },
    {
      "content": "You are now ready to write code for Service Bus.",
      "pos": [
        1989,
        2037
      ]
    },
    {
      "content": "How to set up a Service Bus connection string",
      "pos": [
        2042,
        2087
      ]
    },
    {
      "content": "Service Bus uses a connection string to store endpoints and credentials.",
      "pos": [
        2089,
        2161
      ]
    },
    {
      "content": "You can put your connection string in a configuration file, rather than hard-coding it:",
      "pos": [
        2162,
        2249
      ]
    },
    {
      "content": "When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).",
      "pos": [
        2253,
        2413
      ]
    },
    {
      "content": "When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).",
      "pos": [
        2416,
        2596
      ]
    },
    {
      "pos": [
        2598,
        2741
      ],
      "content": "In both cases, you can retrieve your connection string using the <ph id=\"ph1\">`CloudConfigurationManager.GetSetting`</ph> method, as shown later in this article."
    },
    {
      "content": "Configuring your connection string when using Cloud Services",
      "pos": [
        2747,
        2807
      ]
    },
    {
      "content": "The service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application.",
      "pos": [
        2809,
        3008
      ]
    },
    {
      "content": "For example, add a <ph id=\"ph1\">`Setting`</ph> label to your service definition (.csdef) file, as shown in the next example.",
      "pos": [
        3009,
        3115
      ]
    },
    {
      "content": "You then specify values in the service configuration (.cscfg) file, as shown in the next example.",
      "pos": [
        3409,
        3506
      ]
    },
    {
      "content": "Use the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as described in the previous section.",
      "pos": [
        3954,
        4085
      ]
    },
    {
      "content": "Configuring your connection string when using websites or Azure Virtual Machines",
      "pos": [
        4091,
        4171
      ]
    },
    {
      "content": "When using websites or Virtual Machines, it is recommended that you use the .NET configuration system (for example, <bpt id=\"p1\">**</bpt>Web.config<ept id=\"p1\">**</ept>).",
      "pos": [
        4173,
        4305
      ]
    },
    {
      "content": "You store the connection string using the <ph id=\"ph1\">`&lt;appSettings&gt;`</ph> element.",
      "pos": [
        4306,
        4372
      ]
    },
    {
      "content": "Use the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.",
      "pos": [
        4679,
        4790
      ]
    },
    {
      "content": "How to create a queue",
      "pos": [
        4795,
        4816
      ]
    },
    {
      "content": "You can perform management operations for Service Bus queues using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`NamespaceManager`</ph> class<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept>.",
      "pos": [
        4818,
        5001
      ]
    },
    {
      "content": "This class provides methods to create, enumerate, and delete queues.",
      "pos": [
        5002,
        5070
      ]
    },
    {
      "content": "This example constructs a <ph id=\"ph1\">`NamespaceManager`</ph> object using the Azure <ph id=\"ph2\">`CloudConfigurationManager`</ph> class",
      "pos": [
        5072,
        5173
      ]
    },
    {
      "content": "with a connection string consisting of the base address of a Service Bus service namespace and the appropriate",
      "pos": [
        5174,
        5284
      ]
    },
    {
      "content": "SAS credentials with permissions to manage it.",
      "pos": [
        5285,
        5331
      ]
    },
    {
      "content": "This connection string is of the form shown in the next example.",
      "pos": [
        5332,
        5396
      ]
    },
    {
      "content": "Use the following example, given the configuration settings in the previous section.",
      "pos": [
        5534,
        5618
      ]
    },
    {
      "content": "There are overloads of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`CreateQueue`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.createqueue.aspx)</ept> method that enable you to tune properties",
      "pos": [
        6007,
        6188
      ]
    },
    {
      "content": "of the queue (for example, to set the default \"time-to-live\" value to be applied to messages sent to the queue).",
      "pos": [
        6189,
        6301
      ]
    },
    {
      "content": "These settings are applied by using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`QueueDescription`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queuedescription.aspx)</ept> class.",
      "pos": [
        6302,
        6464
      ]
    },
    {
      "content": "The following example shows how to create a queue named \"TestQueue\" with a maximum size of 5 GB and a default message time-to-live of 1 minute.",
      "pos": [
        6465,
        6608
      ]
    },
    {
      "pos": [
        7170,
        7520
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You can use the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`QueueExists`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.queueexists.aspx)</ept> method on <bpt id=\"p2\">[</bpt><ph id=\"ph3\">`NamespaceManager`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> objects to check if a queue with a specified name already exists within a service namespace."
    },
    {
      "content": "How to send messages to a queue",
      "pos": [
        7525,
        7556
      ]
    },
    {
      "content": "To send a message to a Service Bus queue, your application creates a",
      "pos": [
        7558,
        7626
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`QueueClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> object using the connection string.",
      "pos": [
        7627,
        7768
      ]
    },
    {
      "pos": [
        7770,
        8141
      ],
      "content": "The following code demonstrates how to create a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`QueueClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> object for the \"TestQueue\" queue you just created using the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`CreateFromConnectionString`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx)</ept> API call."
    },
    {
      "content": "Messages sent to (and received from) Service Bus queues are instances of the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`BrokeredMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> class.",
      "pos": [
        8407,
        8604
      ]
    },
    {
      "content": "<ph id=\"ph1\">`BrokeredMessage`</ph> objects have a set of standard properties (such as <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`Label`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph3\">`TimeToLive`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>), a dictionary",
      "pos": [
        8605,
        8922
      ]
    },
    {
      "content": "that is used to hold custom application specific properties, and a body of arbitrary application data.",
      "pos": [
        8923,
        9025
      ]
    },
    {
      "content": "An application can set the body of the message by passing any serializable object into the constructor of the<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`BrokeredMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> object, and the appropriate <bpt id=\"p2\">**</bpt>DataContractSerializer<ept id=\"p2\">**</ept> will then be used to serialize the object.",
      "pos": [
        9026,
        9346
      ]
    },
    {
      "content": "Alternatively, a",
      "pos": [
        9347,
        9363
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>System.IO.Stream<ept id=\"p1\">**</ept> can be provided.",
      "pos": [
        9364,
        9401
      ]
    },
    {
      "pos": [
        9403,
        9639
      ],
      "content": "The following example demonstrates how to send five test messages to the \"TestQueue\" <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`QueueClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> object obtained in the previous code example."
    },
    {
      "content": "Service Bus queues support a <bpt id=\"p1\">[</bpt>maximum message size of 256 Kb<ept id=\"p1\">](service-bus-quotas.md)</ept> (the header, which includes  the standard and custom application properties, can have a maximum size of 64 KB).",
      "pos": [
        10060,
        10256
      ]
    },
    {
      "content": "There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.",
      "pos": [
        10257,
        10386
      ]
    },
    {
      "content": "This queue size is defined at creation time, with an upper limit of 5 GB.",
      "pos": [
        10387,
        10460
      ]
    },
    {
      "content": "If partitioning is enabled, the upper limit is higher.",
      "pos": [
        10461,
        10515
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Partitioning Messaging Entities<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn520246.aspx)</ept>.",
      "pos": [
        10516,
        10632
      ]
    },
    {
      "content": "How to receive messages from a queue",
      "pos": [
        10637,
        10673
      ]
    },
    {
      "content": "The recommended way to receive messages from a queue is to use a <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`QueueClient`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> object.",
      "pos": [
        10675,
        10853
      ]
    },
    {
      "content": "<ph id=\"ph1\">`QueueClient`</ph> objects can work in two different modes: <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`ReceiveAndDelete`</ph> and <ph id=\"ph3\">`PeekLock`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>.",
      "pos": [
        10854,
        11035
      ]
    },
    {
      "content": "When using the <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> mode, the receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a queue, it marks the message as consumed, and returns it to the application.",
      "pos": [
        11037,
        11264
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.",
      "pos": [
        11265,
        11425
      ]
    },
    {
      "content": "To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.",
      "pos": [
        11426,
        11553
      ]
    },
    {
      "content": "Because Service Bus will have marked",
      "pos": [
        11554,
        11590
      ]
    },
    {
      "content": "the message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.",
      "pos": [
        11591,
        11752
      ]
    },
    {
      "content": "In <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode (which is the default mode), the receive becomes a two-stage operation, which makes it possible to support applications that cannot tolerate missing messages.",
      "pos": [
        11754,
        11933
      ]
    },
    {
      "content": "When Service Bus receives a request,",
      "pos": [
        11934,
        11970
      ]
    },
    {
      "content": "it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.",
      "pos": [
        11971,
        12102
      ]
    },
    {
      "content": "After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.",
      "pos": [
        12103,
        12408
      ]
    },
    {
      "content": "When Service Bus sees the <ph id=\"ph1\">`Complete`</ph> call, it marks the message as consumed, and removes it from the queue.",
      "pos": [
        12409,
        12516
      ]
    },
    {
      "content": "The following example demonstrates how messages can be received and processed using the default <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> mode.",
      "pos": [
        12518,
        12632
      ]
    },
    {
      "content": "To specify a different <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ReceiveMode`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> value, you can use another overload of",
      "pos": [
        12633,
        12800
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`CreateFromConnectionString`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx)</ept>.",
      "pos": [
        12801,
        12949
      ]
    },
    {
      "content": "This example uses the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`OnMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx)</ept> callback",
      "pos": [
        12950,
        13094
      ]
    },
    {
      "content": "to process messages as they arrive into <bpt id=\"p1\">**</bpt>TestQueue<ept id=\"p1\">**</ept>.",
      "pos": [
        13095,
        13149
      ]
    },
    {
      "content": "This example configures the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`OnMessage`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx)</ept> callback using an <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`OnMessageOptions`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> object.",
      "pos": [
        14183,
        14466
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`AutoComplete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept>",
      "pos": [
        14467,
        14591
      ]
    },
    {
      "content": "is set to <bpt id=\"p1\">**</bpt>false<ept id=\"p1\">**</ept> to enable manual control over when to call <bpt id=\"p2\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> on the received message.",
      "pos": [
        14592,
        14795
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`AutoRenewTimeout`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages.",
      "pos": [
        14796,
        15096
      ]
    },
    {
      "content": "This property value reduces the number of times the client makes chargeable calls that do not retrieve messages.",
      "pos": [
        15097,
        15209
      ]
    },
    {
      "content": "How to handle application crashes and unreadable messages",
      "pos": [
        15214,
        15271
      ]
    },
    {
      "content": "Service Bus provides functionality to help you gracefully recover from errors in your application or with difficulties processing a message.",
      "pos": [
        15273,
        15413
      ]
    },
    {
      "content": "If a receiver application is unable to process the message for some reason, then it can call the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Abandon`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> method on the received message (instead of the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`Complete`</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> method).",
      "pos": [
        15414,
        15796
      ]
    },
    {
      "content": "This causes Service Bus to unlock the message within the queue and make it available to be received again,",
      "pos": [
        15797,
        15903
      ]
    },
    {
      "content": "either by the same consuming application or by another consuming application.",
      "pos": [
        15904,
        15981
      ]
    },
    {
      "content": "There is also a time-out associated with a message locked within the queue, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.",
      "pos": [
        15983,
        16282
      ]
    },
    {
      "content": "In the event that the application crashes after processing the message but before the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Complete`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> request is issued, the message will be redelivered to the application when it restarts.",
      "pos": [
        16284,
        16573
      ]
    },
    {
      "content": "This is often called <bpt id=\"p1\">**</bpt>At Least Once Processing<ept id=\"p1\">**</ept>; that is, each message is processed at least once but in certain situations the same message may be redelivered.",
      "pos": [
        16574,
        16736
      ]
    },
    {
      "content": "If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.",
      "pos": [
        16737,
        16905
      ]
    },
    {
      "content": "This is often achieved using the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`MessageId`</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> property of the message, which remains constant across delivery attempts.",
      "pos": [
        16906,
        17130
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        17135,
        17145
      ]
    },
    {
      "content": "Now that you've learned the basics of Service Bus queues, follow these links to learn more.",
      "pos": [
        17147,
        17238
      ]
    },
    {
      "pos": [
        17244,
        17305
      ],
      "content": "See the MSDN overview: <bpt id=\"p1\">[</bpt>Queues, Topics, and Subscriptions.<ept id=\"p1\">][]</ept>"
    },
    {
      "pos": [
        17310,
        17451
      ],
      "content": "Build a working application that sends and receives messages to and from a Service Bus queue: <bpt id=\"p1\">[</bpt><ept id=\"p1\">Service Bus Brokered Messaging .NET Tutorial]</ept>."
    },
    {
      "pos": [
        17456,
        17541
      ],
      "content": "Service Bus samples: Download from <bpt id=\"p1\">[</bpt>Azure Samples<ept id=\"p1\">][]</ept> or see the overview on <bpt id=\"p2\">[</bpt>MSDN<ept id=\"p2\">][]</ept>."
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Service Bus queues (.NET) | Microsoft Azure\"\n    description=\"Learn how to use Service Bus queues in Azure. Code samples written in C# using the .NET API.\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.workload=\"tbd\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"get-started-article\"\n    ms.date=\"07/02/2015\"\n    ms.author=\"sethm\"/>\n\n# How to use Azure Service Bus queues\n\nThis article describes how to use Service Bus queues. The samples are written in C\\# and use the .NET API. The scenarios covered include creating queues and sending and receiving messages. For more information about queues, see the [Next steps](#Next-steps) section.\n\n[AZURE.INCLUDE [create-account-note](../../includes/create-account-note.md)]\n\n[AZURE.INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\n\n## Configure the application to use Service Bus\n\nWhen you create an application that uses Service Bus, you must add a reference to the Service Bus assembly and include the corresponding namespaces.\n\n## Add the Service Bus NuGet package\n\nThe Service Bus **NuGet** package is the easiest way to get the Service Bus API and to configure your application with all of the Service Bus dependencies. The NuGet Visual Studio extension makes it easy to install and update libraries and tools in Visual Studio and Visual Studio Express. The Service Bus NuGet package is the easiest way\nto get the Service Bus API and to configure your application with all of the Service Bus dependencies.\n\nTo install the NuGet package in your application, do the following:\n\n1.  In Solution Explorer, right-click **References**, then click **Manage NuGet Packages**.\n2.  Search for \"Service Bus\" and select the **Microsoft Azure Service Bus** item. Click **Install** to complete the installation, then close this dialog box.\n\n    ![][7]\n\nYou are now ready to write code for Service Bus.\n\n## How to set up a Service Bus connection string\n\nService Bus uses a connection string to store endpoints and credentials. You can put your connection string in a configuration file, rather than hard-coding it:\n\n- When using Azure Cloud Services, it is recommended that you store your connection string using the Azure service configuration system (.csdef and .cscfg files).\n- When using Azure websites or Azure Virtual Machines, it is recommended that you store your connection string using the .NET configuration system (for example, the Web.config file).\n\nIn both cases, you can retrieve your connection string using the `CloudConfigurationManager.GetSetting` method, as shown later in this article.\n\n### Configuring your connection string when using Cloud Services\n\nThe service configuration mechanism is unique to Azure Cloud Services projects and enables you to dynamically change configuration settings from the Azure portal without redeploying your application. For example, add a `Setting` label to your service definition (.csdef) file, as shown in the next example.\n\n    <ServiceDefinition name=\"Azure1\">\n    ...\n        <WebRole name=\"MyRole\" vmsize=\"Small\">\n            <ConfigurationSettings>\n                <Setting name=\"Microsoft.ServiceBus.ConnectionString\" />\n            </ConfigurationSettings>\n        </WebRole>\n    ...\n    </ServiceDefinition>\n\nYou then specify values in the service configuration (.cscfg) file, as shown in the next example.\n\n    <ServiceConfiguration serviceName=\"Azure1\">\n    ...\n        <Role name=\"MyRole\">\n            <ConfigurationSettings>\n                <Setting name=\"Microsoft.ServiceBus.ConnectionString\"\n                         value=\"Endpoint=sb://yourServiceNamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n            </ConfigurationSettings>\n        </Role>\n    ...\n    </ServiceConfiguration>\n\nUse the Shared Access Signature (SAS) key name and key values retrieved from the Azure portal as described in the previous section.\n\n### Configuring your connection string when using websites or Azure Virtual Machines\n\nWhen using websites or Virtual Machines, it is recommended that you use the .NET configuration system (for example, **Web.config**). You store the connection string using the `<appSettings>` element.\n\n    <configuration>\n        <appSettings>\n            <add key=\"Microsoft.ServiceBus.ConnectionString\"\n                 value=\"Endpoint=sb://yourServiceNamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n        </appSettings>\n    </configuration>\n\nUse the SAS name and key values that you retrieved from the Azure portal, as described in the previous section.\n\n## How to create a queue\n\nYou can perform management operations for Service Bus queues using the [`NamespaceManager` class](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.aspx). This class provides methods to create, enumerate, and delete queues.\n\nThis example constructs a `NamespaceManager` object using the Azure `CloudConfigurationManager` class\nwith a connection string consisting of the base address of a Service Bus service namespace and the appropriate\nSAS credentials with permissions to manage it. This connection string is of the form shown in the next example.\n\n    Endpoint=sb://yourServiceNamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedSecretValue=yourKey\n\nUse the following example, given the configuration settings in the previous section.\n\n    // Create the queue if it does not exist already.\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n        NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.QueueExists(\"TestQueue\"))\n    {\n        namespaceManager.CreateQueue(\"TestQueue\");\n    }\n\nThere are overloads of the [`CreateQueue`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.createqueue.aspx) method that enable you to tune properties\nof the queue (for example, to set the default \"time-to-live\" value to be applied to messages sent to the queue). These settings are applied by using the [`QueueDescription`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queuedescription.aspx) class. The following example shows how to create a queue named \"TestQueue\" with a maximum size of 5 GB and a default message time-to-live of 1 minute.\n\n    // Configure queue settings.\n    QueueDescription qd = new QueueDescription(\"TestQueue\");\n    qd.MaxSizeInMegabytes = 5120;\n    qd.DefaultMessageTimeToLive = new TimeSpan(0, 1, 0);\n\n    // Create a new queue with custom settings.\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n        NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.QueueExists(\"TestQueue\"))\n    {\n        namespaceManager.CreateQueue(qd);\n    }\n\n> [AZURE.NOTE] You can use the [`QueueExists`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.queueexists.aspx) method on [`NamespaceManager`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.namespacemanager.aspx) objects to check if a queue with a specified name already exists within a service namespace.\n\n## How to send messages to a queue\n\nTo send a message to a Service Bus queue, your application creates a\n[`QueueClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx) object using the connection string.\n\nThe following code demonstrates how to create a [`QueueClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx) object for the \"TestQueue\" queue you just created using the [`CreateFromConnectionString`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx) API call.\n\n    string connectionString =\n        CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    QueueClient Client =\n        QueueClient.CreateFromConnectionString(connectionString, \"TestQueue\");\n\n    Client.Send(new BrokeredMessage());\n\nMessages sent to (and received from) Service Bus queues are instances of the [`BrokeredMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) class. `BrokeredMessage` objects have a set of standard properties (such as [`Label`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx) and [`TimeToLive`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)), a dictionary\nthat is used to hold custom application specific properties, and a body of arbitrary application data. An application can set the body of the message by passing any serializable object into the constructor of the[`BrokeredMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) object, and the appropriate **DataContractSerializer** will then be used to serialize the object. Alternatively, a\n**System.IO.Stream** can be provided.\n\nThe following example demonstrates how to send five test messages to the \"TestQueue\" [`QueueClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx) object obtained in the previous code example.\n\n     for (int i=0; i<5; i++)\n     {\n       // Create message, passing a string message for the body.\n       BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n\n       // Set some addtional custom app-specific properties.\n       message.Properties[\"TestProperty\"] = \"TestValue\";\n       message.Properties[\"Message number\"] = i;\n\n       // Send message to the queue.\n       Client.Send(message);\n     }\n\nService Bus queues support a [maximum message size of 256 Kb](service-bus-quotas.md) (the header, which includes  the standard and custom application properties, can have a maximum size of 64 KB). There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue. This queue size is defined at creation time, with an upper limit of 5 GB. If partitioning is enabled, the upper limit is higher. For more information, see [Partitioning Messaging Entities](https://msdn.microsoft.com/library/azure/dn520246.aspx).\n\n## How to receive messages from a queue\n\nThe recommended way to receive messages from a queue is to use a [`QueueClient`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.aspx) object. `QueueClient` objects can work in two different modes: [`ReceiveAndDelete` and `PeekLock`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx).\n\nWhen using the **ReceiveAndDelete** mode, the receive is a single-shot operation - that is, when Service Bus receives a read request for a message in a queue, it marks the message as consumed, and returns it to the application. **ReceiveAndDelete** is the simplest model and works best for scenarios in which an application can tolerate not processing a message in the event of a failure. To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it. Because Service Bus will have marked\nthe message as consumed, when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.\n\nIn **PeekLock** mode (which is the default mode), the receive becomes a two-stage operation, which makes it possible to support applications that cannot tolerate missing messages. When Service Bus receives a request,\nit finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application. After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) on the received message. When Service Bus sees the `Complete` call, it marks the message as consumed, and removes it from the queue.\n\nThe following example demonstrates how messages can be received and processed using the default **PeekLock** mode. To specify a different [`ReceiveMode`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.receivemode.aspx) value, you can use another overload of\n[`CreateFromConnectionString`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx). This example uses the [`OnMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx) callback\nto process messages as they arrive into **TestQueue**.\n\n    string connectionString =\n      CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n    QueueClient Client =\n      QueueClient.CreateFromConnectionString(connectionString, \"TestQueue\");\n\n    // Configure the callback options.\n    OnMessageOptions options = new OnMessageOptions();\n    options.AutoComplete = false;\n    options.AutoRenewTimeout = TimeSpan.FromMinutes(1);\n\n    // Callback to handle received messages.\n    Client.OnMessage((message) =>\n    {\n        try\n        {\n            // Process message from queue.\n            Console.WriteLine(\"Body: \" + message.GetBody<string>());\n            Console.WriteLine(\"MessageID: \" + message.MessageId);\n            Console.WriteLine(\"Test Property: \" +\n            message.Properties[\"TestProperty\"]);\n\n            // Remove message from queue.\n            message.Complete();\n        }\n            catch (Exception)\n        {\n            // Indicates a problem, unlock message in queue.\n            message.Abandon();\n        }\n    }, options);\n\nThis example configures the [`OnMessage`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx) callback using an [`OnMessageOptions`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx) object. [`AutoComplete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)\nis set to **false** to enable manual control over when to call [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) on the received message. [`AutoRenewTimeout`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx) is set to 1 minute, which causes the client to wait for up to one minute for a message before the call times out and the client makes a new call to check for messages. This property value reduces the number of times the client makes chargeable calls that do not retrieve messages.\n\n## How to handle application crashes and unreadable messages\n\nService Bus provides functionality to help you gracefully recover from errors in your application or with difficulties processing a message. If a receiver application is unable to process the message for some reason, then it can call the [`Abandon`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx) method on the received message (instead of the [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) method). This causes Service Bus to unlock the message within the queue and make it available to be received again,\neither by the same consuming application or by another consuming application.\n\nThere is also a time-out associated with a message locked within the queue, and if the application fails to process the message before the lock time-out expires (for example, if the application crashes), then Service Bus unlocks the message automatically and makes it available to be received again.\n\nIn the event that the application crashes after processing the message but before the [`Complete`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) request is issued, the message will be redelivered to the application when it restarts. This is often called **At Least Once Processing**; that is, each message is processed at least once but in certain situations the same message may be redelivered. If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery. This is often achieved using the [`MessageId`](https://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx) property of the message, which remains constant across delivery attempts.\n\n## Next steps\n\nNow that you've learned the basics of Service Bus queues, follow these links to learn more.\n\n-   See the MSDN overview: [Queues, Topics, and Subscriptions.][]\n-   Build a working application that sends and receives messages to and from a Service Bus queue: [Service Bus Brokered Messaging .NET Tutorial].\n-   Service Bus samples: Download from [Azure Samples][] or see the overview on [MSDN][].\n\n  [What are Service Bus Queues]: #what-queues\n  [Create a Service Namespace]: #create-namespace\n  [Obtain the Default Management Credentials for the Namespace]: #obtain-creds\n  [Configure Your Application to Use Service Bus]: #configure-app\n  [How to: Set Up a Service Bus Connection String]: #set-up-connstring\n  [How to: Configure your Connection String]: #config-connstring\n  [How to: Create a Queue]: #create-queue\n  [How to: Send Messages to a Queue]: #send-messages\n  [How to: Receive Messages from a Queue]: #receive-messages\n  [How to: Handle Application Crashes and Unreadable Messages]: #handle-crashes\n  [Azure portal]: http://manage.windowsazure.com\n  [7]: ./media/service-bus-dotnet-how-to-use-queues/getting-started-multi-tier-13.png\n  [Queues, Topics, and Subscriptions.]: http://msdn.microsoft.com/library/azure/hh367516.aspx\n  [Service Bus Brokered Messaging .NET Tutorial]: http://msdn.microsoft.com/library/azure/hh367512.aspx\n  [Azure Samples]: https://code.msdn.microsoft.com/windowsazure/site/search?query=service%20bus&f%5B0%5D.Value=service%20bus&f%5B0%5D.Type=SearchText&ac=2\n  [MSDN]: https://msdn.microsoft.com/library/azure/dn194201.aspx\n"
}