{
  "nodes": [
    {
      "content": "How to use AMQP 1.0 with the .NET Service Bus API | Microsoft Azure",
      "pos": [
        28,
        95
      ]
    },
    {
      "content": "Learn how to use Advanced Message Queuing Protodol (AMQP) 1.0 with the Azure .NET Service Bus API.",
      "pos": [
        115,
        213
      ]
    },
    {
      "content": "How to use AMQP 1.0 with the Service Bus .NET API",
      "pos": [
        535,
        584
      ]
    },
    {
      "content": "The Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that you can use to build robust, cross-platform, messaging applications.",
      "pos": [
        586,
        765
      ]
    },
    {
      "content": "Support for AMQP 1.0 in Service Bus means that you can use the queuing and publish/subscribe brokered messaging features from a range of platforms using an efficient binary protocol.",
      "pos": [
        767,
        949
      ]
    },
    {
      "content": "Furthermore, you can build applications comprised of components built using a mix of languages, frameworks, and operating systems.",
      "pos": [
        950,
        1080
      ]
    },
    {
      "content": "This how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from .NET applications using the Service Bus .NET API.",
      "pos": [
        1082,
        1256
      ]
    },
    {
      "content": "There is a companion how-to guide that explains how to do the same using the standard Java Message Service (JMS) API.",
      "pos": [
        1257,
        1374
      ]
    },
    {
      "content": "You can use these two guides together to learn about cross-platform messaging using AMQP 1.0.",
      "pos": [
        1375,
        1468
      ]
    },
    {
      "content": "Get started with Service Bus",
      "pos": [
        1473,
        1501
      ]
    },
    {
      "content": "This guide assumes that you already have a Service Bus namespace containing a queue named \"queue1.\"",
      "pos": [
        1503,
        1602
      ]
    },
    {
      "content": "If you do not, then you can create the namespace and queue using the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](http://manage.windowsazure.com)</ept>.",
      "pos": [
        1603,
        1730
      ]
    },
    {
      "content": "For more information about how to create Service Bus namespaces and queues, see the How-To Guide titled \"<bpt id=\"p1\">[</bpt>How to Use Service Bus Queues.<ept id=\"p1\">](https://azure.microsoft.com/develop/net/how-to-guides/service-bus-queues/)</ept>\"",
      "pos": [
        1731,
        1944
      ]
    },
    {
      "content": "Download the Service Bus SDK",
      "pos": [
        1949,
        1977
      ]
    },
    {
      "content": "AMQP 1.0 support is available in Service Bus SDK version 2.1 or later.",
      "pos": [
        1979,
        2049
      ]
    },
    {
      "content": "You can download the latest SDK from NuGet at <bpt id=\"p1\">[</bpt>http://nuget.org/packages/WindowsAzure.ServiceBus/<ept id=\"p1\">](http://nuget.org/packages/WindowsAzure.ServiceBus/)</ept>.",
      "pos": [
        2050,
        2201
      ]
    },
    {
      "content": "Code .NET applications",
      "pos": [
        2206,
        2228
      ]
    },
    {
      "content": "By default, the Service Bus .NET client library communicates with the Service Bus service using a dedicated SOAP-based protocol.",
      "pos": [
        2230,
        2358
      ]
    },
    {
      "content": "To use AMQP 1.0 instead of the default protocol requires explicit configuration on the Service Bus connection string as described in the next section.",
      "pos": [
        2359,
        2509
      ]
    },
    {
      "content": "Other than this change, application code remains basically unchanged when using AMQP 1.0.",
      "pos": [
        2510,
        2599
      ]
    },
    {
      "content": "In the current release there are a few API features that are not supported when using AMQP.",
      "pos": [
        2601,
        2692
      ]
    },
    {
      "content": "These unsupported features are listed later in the section \"Unsupported features and restrictions.\"",
      "pos": [
        2693,
        2792
      ]
    },
    {
      "content": "Some of the advanced configuration settings also have a different meaning when using AMQP.",
      "pos": [
        2793,
        2883
      ]
    },
    {
      "content": "None of these settings are used in this short how-to guide but more details are available in the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.",
      "pos": [
        2884,
        3071
      ]
    },
    {
      "content": "Configure via App.config",
      "pos": [
        3077,
        3101
      ]
    },
    {
      "content": "It is recommended practice for applications to use the App.config configuration file to store settings.",
      "pos": [
        3103,
        3206
      ]
    },
    {
      "content": "For Service Bus applications, you can use App.config to store the Service Bus <bpt id=\"p1\">**</bpt>ConnectionString<ept id=\"p1\">**</ept>.",
      "pos": [
        3207,
        3306
      ]
    },
    {
      "content": "This sample application also uses App.config to store the name of the Service Bus messaging entity that it uses.",
      "pos": [
        3307,
        3419
      ]
    },
    {
      "content": "A sample App.config file is shown below:",
      "pos": [
        3421,
        3461
      ]
    },
    {
      "content": "Configure the Service Bus connection string",
      "pos": [
        3879,
        3922
      ]
    },
    {
      "content": "The value of the <bpt id=\"p1\">**</bpt>Microsoft.ServiceBus.ConnectionString<ept id=\"p1\">**</ept> setting is the Service Bus connection string that is used to configure the connection to Service Bus.",
      "pos": [
        3924,
        4084
      ]
    },
    {
      "content": "The format is as follows:",
      "pos": [
        4085,
        4110
      ]
    },
    {
      "content": "Where [namespace] and [SAS key] are obtained from the Azure Management Portal.",
      "pos": [
        4257,
        4335
      ]
    },
    {
      "content": "For more information, see [How to Use Service Bus Queues][].",
      "pos": [
        4336,
        4396
      ]
    },
    {
      "content": "When using AMQP, the connection string is appended with \";TransportType=Amqp\", which tells the client library to make its connection to Service Bus using AMQP 1.0.",
      "pos": [
        4398,
        4561
      ]
    },
    {
      "content": "Configure the entity name",
      "pos": [
        4567,
        4592
      ]
    },
    {
      "pos": [
        4594,
        4783
      ],
      "content": "This sample application uses the <ph id=\"ph1\">`EntityName`</ph> setting in the <bpt id=\"p1\">**</bpt>appSettings<ept id=\"p1\">**</ept> section of the App.config file to configure the name of the queue with which the application exchanges messages."
    },
    {
      "content": "A simple .NET application using a Service Bus queue",
      "pos": [
        4789,
        4840
      ]
    },
    {
      "content": "The following example sends and receives messages to and from a Service Bus queue.",
      "pos": [
        4842,
        4924
      ]
    },
    {
      "content": "Run the application",
      "pos": [
        9316,
        9335
      ]
    },
    {
      "content": "Running the application produces output of the form:",
      "pos": [
        9337,
        9389
      ]
    },
    {
      "content": "Cross-platform messaging between JMS and .NET",
      "pos": [
        9932,
        9977
      ]
    },
    {
      "content": "This guide showed how to send messages to Service Bus using .NET and also how to receive those messages using .NET.",
      "pos": [
        9979,
        10094
      ]
    },
    {
      "content": "However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.",
      "pos": [
        10095,
        10286
      ]
    },
    {
      "pos": [
        10288,
        10578
      ],
      "content": "Using the sample .NET application described above and a similar Java application taken from a companion guide, <bpt id=\"p1\">[</bpt>How to use the Java Message Service (JMS) API with Service Bus &amp; AMQP 1.0<ept id=\"p1\">](service-bus-java-how-to-use-jms-api-amqp.md)</ept>, it's possible to exchange messages between .NET and Java."
    },
    {
      "pos": [
        10581,
        10784
      ],
      "content": "For more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/jj841071.aspx)</ept>."
    },
    {
      "content": "JMS to .NET",
      "pos": [
        10790,
        10801
      ]
    },
    {
      "content": "To demonstrate JMS to .NET messaging:",
      "pos": [
        10803,
        10840
      ]
    },
    {
      "content": "Start the .NET sample application without any command-line arguments.",
      "pos": [
        10844,
        10913
      ]
    },
    {
      "content": "Start the Java sample application with the \"sendonly\" command-line argument.",
      "pos": [
        10916,
        10992
      ]
    },
    {
      "content": "In this mode, the application will not receive messages from the queue, it will only send.",
      "pos": [
        10993,
        11083
      ]
    },
    {
      "pos": [
        11086,
        11184
      ],
      "content": "Press <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> a few times in the Java application console, which will cause messages to be sent."
    },
    {
      "content": "These messages are received by the .NET application.",
      "pos": [
        11187,
        11239
      ]
    },
    {
      "content": "Output from JMS application",
      "pos": [
        11245,
        11272
      ]
    },
    {
      "content": "Output from .NET application",
      "pos": [
        11576,
        11604
      ]
    },
    {
      "content": ".NET to JMS",
      "pos": [
        11893,
        11904
      ]
    },
    {
      "content": "To demonstrate .NET to JMS messaging:",
      "pos": [
        11906,
        11943
      ]
    },
    {
      "content": "Start the .NET sample application with the \"sendonly\" command line argument.",
      "pos": [
        11947,
        12023
      ]
    },
    {
      "content": "In this mode, the application will not receive messages from the queue, it will only send.",
      "pos": [
        12024,
        12114
      ]
    },
    {
      "content": "Start the Java sample application without any command line arguments.",
      "pos": [
        12117,
        12186
      ]
    },
    {
      "pos": [
        12189,
        12287
      ],
      "content": "Press <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> a few times in the .NET application console, which will cause messages to be sent."
    },
    {
      "content": "These messages are received by the Java application.",
      "pos": [
        12290,
        12342
      ]
    },
    {
      "content": "Output from .NET application",
      "pos": [
        12349,
        12377
      ]
    },
    {
      "content": "Output from JMS application",
      "pos": [
        12706,
        12733
      ]
    },
    {
      "content": "Unsupported features and restrictions",
      "pos": [
        13080,
        13117
      ]
    },
    {
      "content": "The following features of the .NET Service Bus API are not currently supported when using AMQP:",
      "pos": [
        13119,
        13214
      ]
    },
    {
      "content": "Transactions",
      "pos": [
        13218,
        13230
      ]
    },
    {
      "content": "Send via transfer destination",
      "pos": [
        13233,
        13262
      ]
    },
    {
      "content": "Receive by message sequence number",
      "pos": [
        13265,
        13299
      ]
    },
    {
      "content": "Message and session browse",
      "pos": [
        13302,
        13328
      ]
    },
    {
      "content": "Session state",
      "pos": [
        13331,
        13344
      ]
    },
    {
      "content": "Batch-based APIs",
      "pos": [
        13347,
        13363
      ]
    },
    {
      "content": "Scaled-out receive",
      "pos": [
        13366,
        13384
      ]
    },
    {
      "content": "Runtime manipulation of subscription rules",
      "pos": [
        13387,
        13429
      ]
    },
    {
      "content": "Session lock renewal",
      "pos": [
        13432,
        13452
      ]
    },
    {
      "content": "Some minor differences in behavior",
      "pos": [
        13455,
        13489
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/jj841071.aspx)</ept>.",
      "pos": [
        13491,
        13617
      ]
    },
    {
      "content": "This topic includes a detailed list of unsupported APIs.",
      "pos": [
        13618,
        13674
      ]
    },
    {
      "content": "Summary",
      "pos": [
        13679,
        13686
      ]
    },
    {
      "content": "This how-to guide showed how to access the Service Bus brokered messaging features (queues and publish/subscribe topics) from .NET using AMQP 1.0 and the Service Bus .NET API.",
      "pos": [
        13688,
        13863
      ]
    },
    {
      "content": "You can also use Service Bus AMQP 1.0 from other languages including Java, C, Python, and PHP.",
      "pos": [
        13865,
        13959
      ]
    },
    {
      "content": "Components built using these languages can exchange messages reliably and at full fidelity using AMQP 1.0 in Service Bus.",
      "pos": [
        13960,
        14081
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/jj841071.aspx)</ept>.",
      "pos": [
        14082,
        14208
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        14213,
        14223
      ]
    },
    {
      "content": "AMQP 1.0 support in Azure Service Bus",
      "pos": [
        14228,
        14265
      ]
    },
    {
      "content": "How to use the Java Message Service (JMS) API with Service Bus &amp; AMQP 1.0",
      "pos": [
        14300,
        14373
      ]
    },
    {
      "content": "Service Bus AMQP 1.0 Developer's Guide",
      "pos": [
        14423,
        14461
      ]
    },
    {
      "content": "How to Use Service Bus Queues",
      "pos": [
        14521,
        14550
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use AMQP 1.0 with the .NET Service Bus API | Microsoft Azure\" \n    description=\"Learn how to use Advanced Message Queuing Protodol (AMQP) 1.0 with the Azure .NET Service Bus API.\" \n    services=\"service-bus\" \n    documentationCenter=\".net\" \n    authors=\"sethmanheim\" \n    manager=\"timlt\" \n    editor=\"mattshel\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"dotnet\" \n    ms.topic=\"article\" \n    ms.date=\"07/02/2015\" \n    ms.author=\"sethm\"/>\n\n# How to use AMQP 1.0 with the Service Bus .NET API\n\nThe Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that you can use to build robust, cross-platform, messaging applications.\n\nSupport for AMQP 1.0 in Service Bus means that you can use the queuing and publish/subscribe brokered messaging features from a range of platforms using an efficient binary protocol. Furthermore, you can build applications comprised of components built using a mix of languages, frameworks, and operating systems.\n\nThis how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from .NET applications using the Service Bus .NET API. There is a companion how-to guide that explains how to do the same using the standard Java Message Service (JMS) API. You can use these two guides together to learn about cross-platform messaging using AMQP 1.0.\n\n## Get started with Service Bus\n\nThis guide assumes that you already have a Service Bus namespace containing a queue named \"queue1.\" If you do not, then you can create the namespace and queue using the [Azure Management Portal](http://manage.windowsazure.com). For more information about how to create Service Bus namespaces and queues, see the How-To Guide titled \"[How to Use Service Bus Queues.](https://azure.microsoft.com/develop/net/how-to-guides/service-bus-queues/)\"\n\n## Download the Service Bus SDK\n\nAMQP 1.0 support is available in Service Bus SDK version 2.1 or later. You can download the latest SDK from NuGet at [http://nuget.org/packages/WindowsAzure.ServiceBus/](http://nuget.org/packages/WindowsAzure.ServiceBus/).\n\n## Code .NET applications\n\nBy default, the Service Bus .NET client library communicates with the Service Bus service using a dedicated SOAP-based protocol. To use AMQP 1.0 instead of the default protocol requires explicit configuration on the Service Bus connection string as described in the next section. Other than this change, application code remains basically unchanged when using AMQP 1.0.\n\nIn the current release there are a few API features that are not supported when using AMQP. These unsupported features are listed later in the section \"Unsupported features and restrictions.\" Some of the advanced configuration settings also have a different meaning when using AMQP. None of these settings are used in this short how-to guide but more details are available in the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/jj841071.aspx).\n\n### Configure via App.config\n\nIt is recommended practice for applications to use the App.config configuration file to store settings. For Service Bus applications, you can use App.config to store the Service Bus **ConnectionString**. This sample application also uses App.config to store the name of the Service Bus messaging entity that it uses.\n\nA sample App.config file is shown below:\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n        <appSettings>\n            <add key=\"Microsoft.ServiceBus.ConnectionString\"\n                 value=\"Endpoint=sb://[namespace].servicebus.windows.net;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[SAS key];TransportType=Amqp\" />\n            <add key=\"EntityName\" value=\"queue1\" />\n        </appSettings>\n    </configuration>\n\n### Configure the Service Bus connection string\n\nThe value of the **Microsoft.ServiceBus.ConnectionString** setting is the Service Bus connection string that is used to configure the connection to Service Bus. The format is as follows:\n\n    Endpoint=sb://[namespace].servicebus.windows.net;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[SAS key];TransportType=Amqp\n\nWhere [namespace] and [SAS key] are obtained from the Azure Management Portal. For more information, see [How to Use Service Bus Queues][].\n\nWhen using AMQP, the connection string is appended with \";TransportType=Amqp\", which tells the client library to make its connection to Service Bus using AMQP 1.0.\n\n### Configure the entity name\n\nThis sample application uses the `EntityName` setting in the **appSettings** section of the App.config file to configure the name of the queue with which the application exchanges messages.\n\n### A simple .NET application using a Service Bus queue\n\nThe following example sends and receives messages to and from a Service Bus queue.\n\n    // SimpleSenderReceiver.cs\n    \n    using System;\n    using System.Configuration;\n    using System.Threading;\n    using Microsoft.ServiceBus.Messaging;\n    \n    namespace SimpleSenderReceiver\n    {\n        class SimpleSenderReceiver\n        {\n            private static string connectionString;\n            private static string entityName;\n            private static Boolean runReceiver = true;\n            private MessagingFactory factory;\n            private MessageSender sender;\n            private MessageReceiver receiver;\n            private MessageListener messageListener;\n            private Thread listenerThread;\n    \n            static void Main(string[] args)\n            {\n                try\n                {\n                    if ((args.Length > 0) && args[0].ToLower().Equals(\"sendonly\"))\n                        runReceiver = false;\n                    \n                    string ConnectionStringKey = \"Microsoft.ServiceBus.ConnectionString\";\n                    string entityNameKey = \"EntityName\";\n                    entityName = ConfigurationManager.AppSettings[entityNameKey];\n                    connectionString = ConfigurationManager.AppSettings[ConnectionStringKey];\n                    SimpleSenderReceiver simpleSenderReceiver = new SimpleSenderReceiver();\n    \n                    Console.WriteLine(\"Press [enter] to send a message. \" +\n                        \"Type 'exit' + [enter] to quit.\");\n    \n                    while (true)\n                    {\n                        string s = Console.ReadLine();\n                        if (s.ToLower().Equals(\"exit\"))\n                        {\n                            simpleSenderReceiver.Close();\n                            System.Environment.Exit(0);\n                        }\n                        else\n                            simpleSenderReceiver.SendMessage();\n                    }\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(\"Caught exception: \" + e.Message);\n                }\n            }\n    \n            public SimpleSenderReceiver()\n            {\n                factory = MessagingFactory.CreateFromConnectionString(connectionString);\n                sender = factory.CreateMessageSender(entityName);\n    \n                if (runReceiver)\n                {\n                    receiver = factory.CreateMessageReceiver(entityName);\n                    messageListener = new MessageListener(receiver);\n                    listenerThread = new Thread(messageListener.Listen);\n                    listenerThread.Start();\n                }\n            }\n    \n            public void Close()\n            {\n                messageListener.RequestStop();\n                listenerThread.Join();\n                factory.Close();\n            }\n    \n            private void SendMessage()\n            {\n                BrokeredMessage message = \n                    new BrokeredMessage(\"Test AMQP message from .NET\");\n                sender.Send(message);\n                Console.WriteLine(\"Sent message with MessageID = \" \n                    + message.MessageId);\n            }\n    \n        }\n    \n        public class MessageListener\n        {\n            private MessageReceiver messageReceiver;\n            public MessageListener(MessageReceiver receiver)\n            {\n                messageReceiver = receiver;\n            }\n    \n            public void Listen()\n            {\n                while (!_shouldStop)\n                {\n                    try\n                    {\n                        BrokeredMessage message = \n                            messageReceiver.Receive(new TimeSpan(0, 0, 10));\n                        if (message != null)\n                        {\n                            Console.WriteLine(\"Received message with MessageID = \" + \n                                message.MessageId);\n                            message.Complete();\n                        }\n                    }\n                    catch (Exception e)\n                    {\n                        Console.WriteLine(\"Caught exception: \" + e.Message);\n                        break;\n                    }\n                }\n            }\n    \n            public void RequestStop()\n            {\n                _shouldStop = true;\n            }\n    \n            private volatile bool _shouldStop;\n        }\n    }\n\n### Run the application\n\nRunning the application produces output of the form:\n\n    > SimpleSenderReceiver.exe\n    Press [enter] to send a message. Type 'exit' + [enter] to quit.\n    \n    Sent message with MessageID = fb7f5d3733704e4ba4bd55f759d9d7cf\n    Received message with MessageID = fb7f5d3733704e4ba4bd55f759d9d7cf\n    \n    Sent message with MessageID = d00e2e088f06416da7956b58310f7a06\n    Received message with MessageID = d00e2e088f06416da7956b58310f7a06\n    \n    Received message with MessageID = f27f79ec124548c196fd0db8544bca49\n    Sent message with MessageID = f27f79ec124548c196fd0db8544bca49\n    exit\n\n## Cross-platform messaging between JMS and .NET\n\nThis guide showed how to send messages to Service Bus using .NET and also how to receive those messages using .NET. However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.\n\nUsing the sample .NET application described above and a similar Java application taken from a companion guide, [How to use the Java Message Service (JMS) API with Service Bus & AMQP 1.0](service-bus-java-how-to-use-jms-api-amqp.md), it's possible to exchange messages between .NET and Java. \n\nFor more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/azure/jj841071.aspx).\n\n### JMS to .NET\n\nTo demonstrate JMS to .NET messaging:\n\n* Start the .NET sample application without any command-line arguments.\n* Start the Java sample application with the \"sendonly\" command-line argument. In this mode, the application will not receive messages from the queue, it will only send.\n* Press **Enter** a few times in the Java application console, which will cause messages to be sent.\n* These messages are received by the .NET application.\n\n### Output from JMS application\n\n    > java SimpleSenderReceiver sendonly\n    Press [enter] to send a message. Type 'exit' + [enter] to quit.\n    Sent message with JMSMessageID = ID:4364096528752411591\n    Sent message with JMSMessageID = ID:459252991689389983\n    Sent message with JMSMessageID = ID:1565011046230456854\n    exit\n\n### Output from .NET application\n\n    > SimpleSenderReceiver.exe  \n    Press [enter] to send a message. Type 'exit' + [enter] to quit.\n    Received message with MessageID = 4364096528752411591\n    Received message with MessageID = 459252991689389983\n    Received message with MessageID = 1565011046230456854\n    exit\n\n## .NET to JMS\n\nTo demonstrate .NET to JMS messaging:\n\n* Start the .NET sample application with the \"sendonly\" command line argument. In this mode, the application will not receive messages from the queue, it will only send.\n* Start the Java sample application without any command line arguments.\n* Press **Enter** a few times in the .NET application console, which will cause messages to be sent.\n* These messages are received by the Java application.\n\n#### Output from .NET application\n\n    > SimpleSenderReceiver.exe sendonly\n    Press [enter] to send a message. Type 'exit' + [enter] to quit.\n    Sent message with MessageID = d64e681a310a48a1ae0ce7b017bf1cf3  \n    Sent message with MessageID = 98a39664995b4f74b32e2a0ecccc46bb\n    Sent message with MessageID = acbca67f03c346de9b7893026f97ddeb\n    exit\n\n\n#### Output from JMS application\n\n    > java SimpleSenderReceiver \n    Press [enter] to send a message. Type 'exit' + [enter] to quit.\n    Received message with JMSMessageID = ID:d64e681a310a48a1ae0ce7b017bf1cf3\n    Received message with JMSMessageID = ID:98a39664995b4f74b32e2a0ecccc46bb\n    Received message with JMSMessageID = ID:acbca67f03c346de9b7893026f97ddeb\n    exit\n\n## Unsupported features and restrictions\n\nThe following features of the .NET Service Bus API are not currently supported when using AMQP:\n\n* Transactions\n* Send via transfer destination\n* Receive by message sequence number\n* Message and session browse\n* Session state\n* Batch-based APIs\n* Scaled-out receive\n* Runtime manipulation of subscription rules\n* Session lock renewal\n* Some minor differences in behavior\n\nFor more information, see the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/azure/jj841071.aspx). This topic includes a detailed list of unsupported APIs.\n\n## Summary\n\nThis how-to guide showed how to access the Service Bus brokered messaging features (queues and publish/subscribe topics) from .NET using AMQP 1.0 and the Service Bus .NET API.\n\nYou can also use Service Bus AMQP 1.0 from other languages including Java, C, Python, and PHP. Components built using these languages can exchange messages reliably and at full fidelity using AMQP 1.0 in Service Bus. For more information, see the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/azure/jj841071.aspx).\n\n## Next steps\n\n* [AMQP 1.0 support in Azure Service Bus](service-bus-amqp-overview.md)\n* [How to use the Java Message Service (JMS) API with Service Bus & AMQP 1.0](service-bus-java-how-to-use-jms-api-amqp.md)\n* [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/azure/jj841071.aspx)\n* [How to Use Service Bus Queues](service-bus-dotnet-how-to-use-queues.md)\n \n"
}