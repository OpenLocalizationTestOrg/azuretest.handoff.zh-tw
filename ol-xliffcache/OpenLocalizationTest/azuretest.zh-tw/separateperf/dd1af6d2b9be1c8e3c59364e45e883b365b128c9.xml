{
  "nodes": [
    {
      "content": "Use Azure Key Vault from a Web Application | Microsoft Azure",
      "pos": [
        28,
        88
      ]
    },
    {
      "content": "Use this tutorial to help you learn how to use Azure Key Vault from a web application.",
      "pos": [
        108,
        194
      ]
    },
    {
      "content": "Use Azure Key Vault from a Web Application",
      "pos": [
        519,
        561
      ]
    },
    {
      "content": "Introduction",
      "pos": [
        568,
        580
      ]
    },
    {
      "content": "Use this tutorial to help you learn how to use Azure Key Vault from a web application in Azure.",
      "pos": [
        583,
        678
      ]
    },
    {
      "content": "It walks you through the process of accessing a secret from an Azure Key Vault so that it can be used in your web application.",
      "pos": [
        679,
        805
      ]
    },
    {
      "pos": [
        807,
        849
      ],
      "content": "<bpt id=\"p1\">**</bpt>Estimated time to complete:<ept id=\"p1\">**</ept> 15 minutes"
    },
    {
      "pos": [
        852,
        951
      ],
      "content": "For overview information about Azure Key Vault, see <bpt id=\"p1\">[</bpt>What is Azure Key Vault?<ept id=\"p1\">](key-vault-whatis.md)</ept>"
    },
    {
      "content": "Prerequisites",
      "pos": [
        956,
        969
      ]
    },
    {
      "content": "To complete this tutorial, you must have the following:",
      "pos": [
        972,
        1027
      ]
    },
    {
      "content": "A URI to a secret in an Azure Key Vault",
      "pos": [
        1031,
        1070
      ]
    },
    {
      "content": "A Client ID and a Client Secret for a web application registered with Azure Active Directory that has access to your Key Vault",
      "pos": [
        1073,
        1199
      ]
    },
    {
      "content": "A web application.",
      "pos": [
        1202,
        1220
      ]
    },
    {
      "content": "We will be showing the steps for an ASP.NET MVC application deployed in Azure as a Web App.",
      "pos": [
        1221,
        1312
      ]
    },
    {
      "pos": [
        1317,
        1565
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>  It is essential that you have completed the steps listed in <bpt id=\"p1\">[</bpt>Get Started with Azure Key Vault<ept id=\"p1\">](key-vault-get-started.md)</ept> for this tutorial so that you have the URI to a secret and the Client ID and Client Secret for a web application."
    },
    {
      "content": "The web application that will be accessing the Key Vault is the one that is registered in Azure Active Directory and has been given access to your Key Vault.",
      "pos": [
        1568,
        1725
      ]
    },
    {
      "content": "If this is not the case, go back to Register an Application in the Get Started tutorial and repeat the steps listed.",
      "pos": [
        1726,
        1842
      ]
    },
    {
      "content": "This tutorial is designed for web developers that understand the basics of creating web applications on Azure.",
      "pos": [
        1845,
        1955
      ]
    },
    {
      "content": "For more information about Azure Web Apps, see <bpt id=\"p1\">[</bpt>Web Apps overview<ept id=\"p1\">](../app-service-web-overview.md)</ept>.",
      "pos": [
        1956,
        2055
      ]
    },
    {
      "pos": [
        2062,
        2101
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"packages\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Add Nuget Packages"
    },
    {
      "content": "There are three packages that your web application needs to have installed.",
      "pos": [
        2105,
        2180
      ]
    },
    {
      "content": "Active Directory Authentication Library - contains methods for interacting with Azure Active Directory and managing user identity",
      "pos": [
        2185,
        2314
      ]
    },
    {
      "content": "Azure Key Vault Library - contains methods for interacting with Azure Key Vault",
      "pos": [
        2317,
        2396
      ]
    },
    {
      "content": "All three of these packages can be installed using the Package Manager Console using the Install-Package command.",
      "pos": [
        2399,
        2512
      ]
    },
    {
      "pos": [
        2718,
        2757
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"webconfig\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Modify Web.Config"
    },
    {
      "content": "There are three application settings that need to be added to the web.config file as follows.",
      "pos": [
        2761,
        2854
      ]
    },
    {
      "content": "If you are not going to host your application as an Azure Web App, then you should add the actual ClientId, Client Secret, and Secret URI values to the web.config.",
      "pos": [
        3179,
        3342
      ]
    },
    {
      "content": "Otherwise leave these dummy values because we will be adding the actual values in the Azure Portal for an additional level of security.",
      "pos": [
        3343,
        3478
      ]
    },
    {
      "pos": [
        3485,
        3539
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"gettoken\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Add Method to Get an Access Token"
    },
    {
      "content": "In order to use the Key Vault API you need an access token.",
      "pos": [
        3543,
        3602
      ]
    },
    {
      "content": "The Key Vault Client handles calls to the Key Vault API but you need to supply it with a function that gets the access token.",
      "pos": [
        3603,
        3728
      ]
    },
    {
      "content": "Following is the code to get an access token from Azure Active Directory.",
      "pos": [
        3732,
        3805
      ]
    },
    {
      "content": "This code can go anywhere in your application.",
      "pos": [
        3806,
        3852
      ]
    },
    {
      "content": "I like to add a Utils or EncryptionHelper class.",
      "pos": [
        3853,
        3901
      ]
    },
    {
      "pos": [
        4846,
        5429
      ],
      "content": "[AZURE.NOTE] Using a Client Secret\nUsing a Client ID and Client Secret is the easiest way to authenticate an Azure AD application. And using it in your web application allows for a separation of duties and more control over your key management. But it does rely on putting the Client Secret in your configuration settings which for some can be as risky as putting the secret that you want to protect in your configuration settings. See below for a discussion on how to use a Client ID and Certificate instead of Client ID and Client Secret to authenticate the Azure AD application.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Using a Client Secret",
          "pos": [
            0,
            34
          ]
        },
        {
          "content": "Using a Client ID and Client Secret is the easiest way to authenticate an Azure AD application. And using it in your web application allows for a separation of duties and more control over your key management. But it does rely on putting the Client Secret in your configuration settings which for some can be as risky as putting the secret that you want to protect in your configuration settings. See below for a discussion on how to use a Client ID and Certificate instead of Client ID and Client Secret to authenticate the Azure AD application.",
          "pos": [
            35,
            581
          ],
          "nodes": [
            {
              "content": "Using a Client ID and Client Secret is the easiest way to authenticate an Azure AD application.",
              "pos": [
                0,
                95
              ]
            },
            {
              "content": "And using it in your web application allows for a separation of duties and more control over your key management.",
              "pos": [
                96,
                209
              ]
            },
            {
              "content": "But it does rely on putting the Client Secret in your configuration settings which for some can be as risky as putting the secret that you want to protect in your configuration settings.",
              "pos": [
                210,
                396
              ]
            },
            {
              "content": "See below for a discussion on how to use a Client ID and Certificate instead of Client ID and Client Secret to authenticate the Azure AD application.",
              "pos": [
                397,
                546
              ]
            }
          ]
        }
      ]
    },
    {
      "pos": [
        5437,
        5498
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"appstart\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Retrieve the secret on Application Start"
    },
    {
      "content": "Now we need code to call the Key Vault API and retrieve the secret.",
      "pos": [
        5502,
        5569
      ]
    },
    {
      "content": "The following code can be put anywhere as long as it is called before you need to use it.",
      "pos": [
        5570,
        5659
      ]
    },
    {
      "content": "I have put this code in the Application Start event in the Global.asax so that it runs once on start and makes the secret available for the application.",
      "pos": [
        5660,
        5812
      ]
    },
    {
      "pos": [
        6337,
        6411
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"portalsettings\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Add App Settings in the Azure Portal (optional)"
    },
    {
      "content": "If you have an Azure Web App you can now add the actual values for the AppSettings in the Azure Portal.",
      "pos": [
        6415,
        6518
      ]
    },
    {
      "content": "By doing this, the actual values will not be in the web.config but protected via the Portal where you have separate access control capabilities.",
      "pos": [
        6519,
        6663
      ]
    },
    {
      "content": "These values will be substituted for the values that you entered in your web.config.",
      "pos": [
        6664,
        6748
      ]
    },
    {
      "content": "Make sure that the names are the same.",
      "pos": [
        6749,
        6787
      ]
    },
    {
      "content": "![Application Settings displayed in Azure Portal][1]",
      "pos": [
        6789,
        6841
      ]
    },
    {
      "content": "Authenticate with a Certificate instead of a Client Secret",
      "pos": [
        6847,
        6905
      ]
    },
    {
      "content": "Another way to authenticate an Azure AD application is by using a Client ID and a Certificate instead of a Client ID and Client Secret.",
      "pos": [
        6907,
        7042
      ]
    },
    {
      "content": "Following are the steps to use a Certificate in an Azure Web App:",
      "pos": [
        7043,
        7108
      ]
    },
    {
      "content": "Get or Create a Certificate",
      "pos": [
        7113,
        7140
      ]
    },
    {
      "content": "Associate the Certificate with an Azure AD application",
      "pos": [
        7144,
        7198
      ]
    },
    {
      "content": "Add code to your Web App to use the Certificate",
      "pos": [
        7202,
        7249
      ]
    },
    {
      "content": "Add a Certificate to your Web App",
      "pos": [
        7253,
        7286
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Get or Create a Certificate<ept id=\"p1\">**</ept>",
      "pos": [
        7289,
        7320
      ]
    },
    {
      "content": "For our purposes we will make a test certificate.",
      "pos": [
        7321,
        7370
      ]
    },
    {
      "content": "Here are a couple of commands that you can use in a Developer Command Prompt to create a certificate.",
      "pos": [
        7371,
        7472
      ]
    },
    {
      "content": "Change directory to where you want the cert files to be created.",
      "pos": [
        7473,
        7537
      ]
    },
    {
      "content": "Make note of the end date and the password for the .pfx (in this example: 07/31/2016 and test123).",
      "pos": [
        7704,
        7802
      ]
    },
    {
      "content": "You will need them below.",
      "pos": [
        7803,
        7828
      ]
    },
    {
      "pos": [
        7831,
        7986
      ],
      "content": "For more information on creating a test certificate, see <bpt id=\"p1\">[</bpt>How to: Create Your Own Test Certificate<ept id=\"p1\">](https://msdn.microsoft.com/en-in/library/ff699202.aspx)</ept>"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Associate the Certificate with an Azure AD application<ept id=\"p1\">**</ept>",
      "pos": [
        7989,
        8047
      ]
    },
    {
      "content": "Now that you have a certificate, you need to associate it with an Azure AD application.",
      "pos": [
        8048,
        8135
      ]
    },
    {
      "content": "But the Azure Management Portal does not support this right now.",
      "pos": [
        8136,
        8200
      ]
    },
    {
      "content": "Instead you have to use Powershell.",
      "pos": [
        8201,
        8236
      ]
    },
    {
      "content": "Following are the commands that you need to run:",
      "pos": [
        8237,
        8285
      ]
    },
    {
      "content": "After you have run these commands, you can see the application in Azure AD.",
      "pos": [
        9025,
        9100
      ]
    },
    {
      "content": "If you don't see the application at first, search for \"Applications my company owns\" instead of \"Applications my company uses\".",
      "pos": [
        9101,
        9228
      ]
    },
    {
      "pos": [
        9231,
        9426
      ],
      "content": "To learn more about Azure AD Application Objects and ServicePrincipal Objects, see <bpt id=\"p1\">[</bpt>Application Objects and Service Principal Objects<ept id=\"p1\">](../active-directory/active-directory-application-objects.md)</ept>"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Add code to your Web App to use the Certificate<ept id=\"p1\">**</ept>",
      "pos": [
        9430,
        9481
      ]
    },
    {
      "content": "Now we will add code to your Web App to access the cert and use it for authentication.",
      "pos": [
        9482,
        9568
      ]
    },
    {
      "content": "First there is code to access the cert.",
      "pos": [
        9571,
        9610
      ]
    },
    {
      "content": "Note that the StoreLocation is CurrentUser instead of LocalMachine.",
      "pos": [
        10352,
        10419
      ]
    },
    {
      "content": "And that we are supplying 'false' to the Find method because we are using a test cert.",
      "pos": [
        10420,
        10506
      ]
    },
    {
      "content": "Next is code that uses the CertificateHelper and creates a ClientAssertionCertificate which is needed for authentication.",
      "pos": [
        10509,
        10630
      ]
    },
    {
      "content": "Here is the new code to get the access token.",
      "pos": [
        11018,
        11063
      ]
    },
    {
      "content": "This replaces the GetToken method above.",
      "pos": [
        11064,
        11104
      ]
    },
    {
      "content": "I have given it a different name for convenience.",
      "pos": [
        11105,
        11154
      ]
    },
    {
      "content": "I have put all of this code into my Web App project's Utils class for ease of use.",
      "pos": [
        11471,
        11553
      ]
    },
    {
      "content": "The last code change is in the Application_Start method.",
      "pos": [
        11556,
        11612
      ]
    },
    {
      "content": "First we need to call the GetCert() method to load the ClientAssertionCertificate.",
      "pos": [
        11613,
        11695
      ]
    },
    {
      "content": "And then we change the callback method that we supply when creating a new KeyVaultClient.",
      "pos": [
        11696,
        11785
      ]
    },
    {
      "content": "Note that this replaces the code that we had above.",
      "pos": [
        11786,
        11837
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Add a Certificate to your Web App<ept id=\"p1\">**</ept>",
      "pos": [
        11961,
        11998
      ]
    },
    {
      "content": "Adding a Certificate to your Web App is a simple two-step process.",
      "pos": [
        11999,
        12065
      ]
    },
    {
      "content": "First, go to the Azure Portal and navigate to your Web App.",
      "pos": [
        12066,
        12125
      ]
    },
    {
      "content": "On the Settings blade for your Web App, click on the entry for \"Custom domains and SSL\".",
      "pos": [
        12126,
        12214
      ]
    },
    {
      "content": "On the blade that opens you will be able to upload the Certificate that you created above, KVWebApp.pfx, make sure that you remember the password for the pfx.",
      "pos": [
        12215,
        12373
      ]
    },
    {
      "content": "![Adding a Certificate to a Web App in the Azure Portal][2]",
      "pos": [
        12376,
        12435
      ]
    },
    {
      "content": "The last thing that you need to do is to add an Application Setting to your Web App that has the name WEBSITE\\_LOAD\\_CERTIFICATES and a value of *.",
      "pos": [
        12438,
        12585
      ]
    },
    {
      "content": "This will ensure that all Certificates are loaded.",
      "pos": [
        12586,
        12636
      ]
    },
    {
      "content": "If you wanted to load only the Certificates that you have uploaded, then you can enter a comma-separated list of their thumbprints.",
      "pos": [
        12637,
        12768
      ]
    },
    {
      "pos": [
        12771,
        12977
      ],
      "content": "To learn more about adding a Certificate to a Web App, see <bpt id=\"p1\">[</bpt>Using Certificates in Azure Websites Applications<ept id=\"p1\">](https://azure.microsoft.com/blog/2014/10/27/using-certificates-in-azure-websites-applications/)</ept>"
    },
    {
      "pos": [
        12984,
        13011
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"next\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "pos": [
        13017,
        13147
      ],
      "content": "For programming references, see <bpt id=\"p1\">[</bpt>Azure Key Vault C# Client API Reference<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn903628.aspx)</ept>."
    },
    {
      "content": "test",
      "pos": [
        13320,
        13324
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Use Azure Key Vault from a Web Application | Microsoft Azure\" \n    description=\"Use this tutorial to help you learn how to use Azure Key Vault from a web application.\" \n    services=\"key-vault\" \n    documentationCenter=\"\" \n    authors=\"adamhurwitz\" \n    manager=\"\"\n    tags=\"azure-resource-manager\"//>\n\n<tags \n    ms.service=\"key-vault\" \n    ms.workload=\"identity\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"06/24/2015\" \n    ms.author=\"adhurwit\"/>\n\n# Use Azure Key Vault from a Web Application #\n\n## Introduction  \nUse this tutorial to help you learn how to use Azure Key Vault from a web application in Azure. It walks you through the process of accessing a secret from an Azure Key Vault so that it can be used in your web application.\n\n**Estimated time to complete:** 15 minutes\n\n\nFor overview information about Azure Key Vault, see [What is Azure Key Vault?](key-vault-whatis.md)\n\n## Prerequisites \n\nTo complete this tutorial, you must have the following:\n\n- A URI to a secret in an Azure Key Vault\n- A Client ID and a Client Secret for a web application registered with Azure Active Directory that has access to your Key Vault\n- A web application. We will be showing the steps for an ASP.NET MVC application deployed in Azure as a Web App. \n\n> [AZURE.NOTE]  It is essential that you have completed the steps listed in [Get Started with Azure Key Vault](key-vault-get-started.md) for this tutorial so that you have the URI to a secret and the Client ID and Client Secret for a web application. \n\nThe web application that will be accessing the Key Vault is the one that is registered in Azure Active Directory and has been given access to your Key Vault. If this is not the case, go back to Register an Application in the Get Started tutorial and repeat the steps listed. \n\nThis tutorial is designed for web developers that understand the basics of creating web applications on Azure. For more information about Azure Web Apps, see [Web Apps overview](../app-service-web-overview.md).\n\n\n\n## <a id=\"packages\"></a>Add Nuget Packages ##\nThere are three packages that your web application needs to have installed. \n\n- Active Directory Authentication Library - contains methods for interacting with Azure Active Directory and managing user identity\n- Azure Key Vault Library - contains methods for interacting with Azure Key Vault\n\n\nAll three of these packages can be installed using the Package Manager Console using the Install-Package command. \n\n    // this is currently the latest stable version of ADAL\n    Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory -Version 2.16.204221202\n\n    Install-Package Microsoft.Azure.KeyVault \n\n\n## <a id=\"webconfig\"></a>Modify Web.Config ##\nThere are three application settings that need to be added to the web.config file as follows. \n\n    <!-- ClientId and ClientSecret refer to the web application registration with Azure Active Directory -->\n    <add key=\"ClientId\" value=\"clientid\" />\n    <add key=\"ClientSecret\" value=\"clientsecret\" />\n\n    <!-- SecretUri is the URI for the secret in Azure Key Vault -->\n    <add key=\"SecretUri\" value=\"secreturi\" />\n\n\nIf you are not going to host your application as an Azure Web App, then you should add the actual ClientId, Client Secret, and Secret URI values to the web.config. Otherwise leave these dummy values because we will be adding the actual values in the Azure Portal for an additional level of security. \n\n\n## <a id=\"gettoken\"></a>Add Method to Get an Access Token ##\nIn order to use the Key Vault API you need an access token. The Key Vault Client handles calls to the Key Vault API but you need to supply it with a function that gets the access token.  \n\nFollowing is the code to get an access token from Azure Active Directory. This code can go anywhere in your application. I like to add a Utils or EncryptionHelper class.  \n\n    //add these using statements\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System.Web.Configuration;\n    \n    //this is an optional property to hold the secret after it is retrieved\n    public static string EncryptSecret { get; set; }\n\n    //the method that will be provided to the KeyVaultClient\n    public async static Task<string> GetToken(string authority, string resource, string scope)\n    {\n        var authContext = new AuthenticationContext(authority);\n        ClientCredential clientCred = new ClientCredential(WebConfigurationManager.AppSettings[\"ClientId\"],\n                    WebConfigurationManager.AppSettings[\"ClientSecret\"]);\n        AuthenticationResult result = await authContext.AcquireTokenAsync(resource, clientCred);\n        \n        if (result == null)\n            throw new InvalidOperationException(\"Failed to obtain the JWT token\");\n        \n        return result.AccessToken;\n    }\n\n> [AZURE.NOTE] Using a Client Secret\n> Using a Client ID and Client Secret is the easiest way to authenticate an Azure AD application. And using it in your web application allows for a separation of duties and more control over your key management. But it does rely on putting the Client Secret in your configuration settings which for some can be as risky as putting the secret that you want to protect in your configuration settings. See below for a discussion on how to use a Client ID and Certificate instead of Client ID and Client Secret to authenticate the Azure AD application. \n\n\n\n## <a id=\"appstart\"></a>Retrieve the secret on Application Start ##\nNow we need code to call the Key Vault API and retrieve the secret. The following code can be put anywhere as long as it is called before you need to use it. I have put this code in the Application Start event in the Global.asax so that it runs once on start and makes the secret available for the application. \n\n    //add these using statements\n    using Microsoft.Azure.KeyVault;\n    using System.Web.Configuration;\n\n    // I put my GetToken method in a Utils class. Change for wherever you placed your method. \n    var kv = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(Utils.GetToken));\n\n    var sec = kv.GetSecretAsync(WebConfigurationManager.AppSettings[\"SecretUri\"]).Result.Value;\n    \n    //I put a variable in a Utils class to hold the secret for general  application use. \n    Utils.EncryptSecret = sec;\n\n\n\n## <a id=\"portalsettings\"></a>Add App Settings in the Azure Portal (optional) ##\nIf you have an Azure Web App you can now add the actual values for the AppSettings in the Azure Portal. By doing this, the actual values will not be in the web.config but protected via the Portal where you have separate access control capabilities. These values will be substituted for the values that you entered in your web.config. Make sure that the names are the same.\n\n![Application Settings displayed in Azure Portal][1]\n\n\n## Authenticate with a Certificate instead of a Client Secret \nAnother way to authenticate an Azure AD application is by using a Client ID and a Certificate instead of a Client ID and Client Secret. Following are the steps to use a Certificate in an Azure Web App:\n\n1. Get or Create a Certificate\n2. Associate the Certificate with an Azure AD application\n3. Add code to your Web App to use the Certificate\n4. Add a Certificate to your Web App\n\n\n**Get or Create a Certificate**\nFor our purposes we will make a test certificate. Here are a couple of commands that you can use in a Developer Command Prompt to create a certificate. Change directory to where you want the cert files to be created. \n\n    makecert -sv mykey.pvk -n \"cn=KVWebApp\" KVWebApp.cer -b 07/31/2015 -e 07/31/2016 -r\n    pvk2pfx -pvk mykey.pvk -spc KVWebApp.cer -pfx KVWebApp.pfx -po test123\n\nMake note of the end date and the password for the .pfx (in this example: 07/31/2016 and test123). You will need them below. \n\nFor more information on creating a test certificate, see [How to: Create Your Own Test Certificate](https://msdn.microsoft.com/en-in/library/ff699202.aspx)\n\n\n**Associate the Certificate with an Azure AD application**\nNow that you have a certificate, you need to associate it with an Azure AD application. But the Azure Management Portal does not support this right now. Instead you have to use Powershell. Following are the commands that you need to run:\n\n    $x509 = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n    \n    PS C:\\> $x509.Import(\"C:\\data\\KVWebApp.cer\")\n    \n    PS C:\\> $credValue = [System.Convert]::ToBase64String($x509.GetRawCertData())\n    \n    PS C:\\> $now = [System.DateTime]::Now\n    \n    # this is where the end date from the cert above is used\n    PS C:\\> $yearfromnow = [System.DateTime]::Parse(\"2016-07-31\") \n    \n    PS C:\\> $adapp = New-AzureADApplication -DisplayName \"KVWebApp\" -HomePage \"http://kvwebapp\" -IdentifierUris \"http://kvwebapp\" -KeyValue $credValue -KeyType \"AsymmetricX509Cert\" -KeyUsage \"Verify\" -StartDate $now -EndDate $yearfromnow\n    \n    PS C:\\> $sp = New-AzureADServicePrincipal -ApplicationId $adapp.ApplicationId\n\nAfter you have run these commands, you can see the application in Azure AD. If you don't see the application at first, search for \"Applications my company owns\" instead of \"Applications my company uses\". \n\nTo learn more about Azure AD Application Objects and ServicePrincipal Objects, see [Application Objects and Service Principal Objects](../active-directory/active-directory-application-objects.md)\n\n\n\n**Add code to your Web App to use the Certificate**\nNow we will add code to your Web App to access the cert and use it for authentication. \n\nFirst there is code to access the cert. \n\n    public static class CertificateHelper\n    {\n        public static X509Certificate2 FindCertificateByThumbprint(string findValue)\n        {\n            X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);\n            try\n            {\n                store.Open(OpenFlags.ReadOnly);\n                X509Certificate2Collection col = store.Certificates.Find(X509FindType.FindByThumbprint, \n                    findValue, false); // Don't validate certs, since the test root isn't installed.\n                if (col == null || col.Count == 0)\n                    return null;\n                return col[0];\n            }\n            finally\n            {\n                store.Close();\n            }\n        }\n    }\n\n\nNote that the StoreLocation is CurrentUser instead of LocalMachine. And that we are supplying 'false' to the Find method because we are using a test cert.\n\n\nNext is code that uses the CertificateHelper and creates a ClientAssertionCertificate which is needed for authentication. \n\n    public static ClientAssertionCertificate AssertionCert { get; set; }\n\n    public static void GetCert()\n    {\n        var clientAssertionCertPfx = CertificateHelper.FindCertificateByThumbprint(WebConfigurationManager.AppSettings[\"thumbprint\"]);\n        AssertionCert = new ClientAssertionCertificate(WebConfigurationManager.AppSettings[\"clientid\"], clientAssertionCertPfx);\n    }\n\n\nHere is the new code to get the access token. This replaces the GetToken method above. I have given it a different name for convenience. \n\n    public static async Task<string> GetAccessToken(string authority, string resource, string scope)\n    {\n        var context = new AuthenticationContext(authority, TokenCache.DefaultShared);\n        var result = await context.AcquireTokenAsync(resource, AssertionCert);\n        return result.AccessToken;\n    }\n\nI have put all of this code into my Web App project's Utils class for ease of use. \n\nThe last code change is in the Application_Start method. First we need to call the GetCert() method to load the ClientAssertionCertificate. And then we change the callback method that we supply when creating a new KeyVaultClient. Note that this replaces the code that we had above. \n\n    Utils.GetCert();\n    var kv = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(Utils.GetAccessToken));\n\n\n**Add a Certificate to your Web App**\nAdding a Certificate to your Web App is a simple two-step process. First, go to the Azure Portal and navigate to your Web App. On the Settings blade for your Web App, click on the entry for \"Custom domains and SSL\". On the blade that opens you will be able to upload the Certificate that you created above, KVWebApp.pfx, make sure that you remember the password for the pfx. \n\n![Adding a Certificate to a Web App in the Azure Portal][2]\n\n\nThe last thing that you need to do is to add an Application Setting to your Web App that has the name WEBSITE\\_LOAD\\_CERTIFICATES and a value of *. This will ensure that all Certificates are loaded. If you wanted to load only the Certificates that you have uploaded, then you can enter a comma-separated list of their thumbprints. \n\nTo learn more about adding a Certificate to a Web App, see [Using Certificates in Azure Websites Applications](https://azure.microsoft.com/blog/2014/10/27/using-certificates-in-azure-websites-applications/)\n\n\n\n## <a id=\"next\"></a>Next steps ##\n\n\nFor programming references, see [Azure Key Vault C# Client API Reference](https://msdn.microsoft.com/library/azure/dn903628.aspx).\n\n\n<!--Image references-->\n[1]: ./media/key-vault-use-from-web-application/PortalAppSettings.png\n[2]: ./media/key-vault-use-from-web-application/PortalAddCertificate.png\n \n\ntest\n"
}