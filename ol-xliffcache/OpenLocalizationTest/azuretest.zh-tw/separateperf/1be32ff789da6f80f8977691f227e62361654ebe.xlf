<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to Use CoreOS | Microsoft Azure</source>
          <target state="new">How to Use CoreOS | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Describes CoreOS, how to create a CoreOS virtual machine cluster on Azure, and its basic usage.</source>
          <target state="new">Describes CoreOS, how to create a CoreOS virtual machine cluster on Azure, and its basic usage.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to Use CoreOS on Azure</source>
          <target state="new">How to Use CoreOS on Azure</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes <bpt id="p1">[</bpt><ept id="p1">CoreOS]</ept> and shows how to create a cluster of three CoreOS virtual machines on Azure as a quick start to understanding this operating system.</source>
          <target state="new">This topic describes <bpt id="p1">[</bpt><ept id="p1">CoreOS]</ept> and shows how to create a cluster of three CoreOS virtual machines on Azure as a quick start to understanding this operating system.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It uses the very basic elements of CoreOS deployments and examples from <bpt id="p1">[</bpt><ept id="p1">CoreOS with Azure]</ept>, <bpt id="p2">[</bpt><ept id="p2">Tim Park's CoreOS Tutorial]</ept>, and <bpt id="p3">[</bpt><ept id="p3">Patrick Chanezon's CoreOS Tutorial]</ept> to demonstrate the absolute minimum requirements to both understand the basic structure of a CoreOS deployment and get a cluster of three virtual machines running successfully.</source>
          <target state="new">It uses the very basic elements of CoreOS deployments and examples from <bpt id="p1">[</bpt><ept id="p1">CoreOS with Azure]</ept>, <bpt id="p2">[</bpt><ept id="p2">Tim Park's CoreOS Tutorial]</ept>, and <bpt id="p3">[</bpt><ept id="p3">Patrick Chanezon's CoreOS Tutorial]</ept> to demonstrate the absolute minimum requirements to both understand the basic structure of a CoreOS deployment and get a cluster of three virtual machines running successfully.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This article shows you how to use the Azure command-line interface with Service Management commands to create the CoreOS VMs.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This article shows you how to use the Azure command-line interface with Service Management commands to create the CoreOS VMs.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To get started with CoreOS in Azure Resource Manager, try this <bpt id="p1">[</bpt>quickstart template<ept id="p1">](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/)</ept>.</source>
          <target state="new">To get started with CoreOS in Azure Resource Manager, try this <bpt id="p1">[</bpt>quickstart template<ept id="p1">](https://azure.microsoft.com/documentation/templates/coreos-with-fleet-multivm/)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='intro'&gt;</ph>CoreOS, clusters, and Linux containers<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='intro'&gt;</ph>CoreOS, clusters, and Linux containers<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CoreOS is a lightweight version of Linux designed to support rapid creation of potentially very large clusters of VMs that use Linux containers as the only packaging mechanism, including <bpt id="p1">[</bpt><ept id="p1">Docker]</ept> containers.</source>
          <target state="new">CoreOS is a lightweight version of Linux designed to support rapid creation of potentially very large clusters of VMs that use Linux containers as the only packaging mechanism, including <bpt id="p1">[</bpt><ept id="p1">Docker]</ept> containers.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>CoreOS is intended to support:</source>
          <target state="new">CoreOS is intended to support:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>a very high level of automation</source>
          <target state="new">a very high level of automation</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>easier and more consistent application deployment</source>
          <target state="new">easier and more consistent application deployment</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>scalability at the application level and system level</source>
          <target state="new">scalability at the application level and system level</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>At a high level, the CoreOS features that support these goals are:</source>
          <target state="new">At a high level, the CoreOS features that support these goals are:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One package system: CoreOS runs only Linux container images that run in Linux containers for speed, uniformity, and ease of deployment</source>
          <target state="new">One package system: CoreOS runs only Linux container images that run in Linux containers for speed, uniformity, and ease of deployment</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Operating system updates that are performed atomically so that operating systems are updated as a single entity and can be easily rolled back to a known state</source>
          <target state="new">Operating system updates that are performed atomically so that operating systems are updated as a single entity and can be easily rolled back to a known state</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Built-in <bpt id="p1">[</bpt>etcd<ept id="p1">](https://github.com/coreos/etcd)</ept> and <bpt id="p2">[</bpt>fleet<ept id="p2">](https://github.com/coreos/fleet)</ept> daemons (services) for dynamic VM and cluster communication and management</source>
          <target state="new">Built-in <bpt id="p1">[</bpt>etcd<ept id="p1">](https://github.com/coreos/etcd)</ept> and <bpt id="p2">[</bpt>fleet<ept id="p2">](https://github.com/coreos/fleet)</ept> daemons (services) for dynamic VM and cluster communication and management</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is a very general description of CoreOS and its features.</source>
          <target state="new">This is a very general description of CoreOS and its features.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more complete information about CoreOS, see the <bpt id="p1">[</bpt><ept id="p1">CoreOS Overview]</ept>.</source>
          <target state="new">For more complete information about CoreOS, see the <bpt id="p1">[</bpt><ept id="p1">CoreOS Overview]</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='security'&gt;</ph>Security considerations<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='security'&gt;</ph>Security considerations<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Currently, CoreOS assumes that those who can SSH into the cluster have permission to manage it.</source>
          <target state="new">Currently, CoreOS assumes that those who can SSH into the cluster have permission to manage it.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The result is that without modification, CoreOS clusters are outstanding for test and development environments, but you should apply further security measures in any production environment.</source>
          <target state="new">The result is that without modification, CoreOS clusters are outstanding for test and development environments, but you should apply further security measures in any production environment.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='usingcoreos'&gt;</ph>How to use CoreOS on Azure<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='usingcoreos'&gt;</ph>How to use CoreOS on Azure<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This section describes how to create an Azure cloud cervice with three CoreOS virtual machines in it using the <bpt id="p1">[</bpt><ept id="p1">Azure Command-line Interface (Azure CLI)]</ept>.</source>
          <target state="new">This section describes how to create an Azure cloud cervice with three CoreOS virtual machines in it using the <bpt id="p1">[</bpt><ept id="p1">Azure Command-line Interface (Azure CLI)]</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The basic steps are as follows:</source>
          <target state="new">The basic steps are as follows:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create the SSH certificates and keys to secure communication with the CoreOS virtual machine</source>
          <target state="new">Create the SSH certificates and keys to secure communication with the CoreOS virtual machine</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Obtain your cluster's etcd id for intercommunication</source>
          <target state="new">Obtain your cluster's etcd id for intercommunication</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create a cloud-config file in <bpt id="p1">[</bpt><ept id="p1">YAML]</ept> format</source>
          <target state="new">Create a cloud-config file in <bpt id="p1">[</bpt><ept id="p1">YAML]</ept> format</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the Azure CLI to create a new Azure cloud service and three CoreOS VMs</source>
          <target state="new">Use the Azure CLI to create a new Azure cloud service and three CoreOS VMs</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Test your CoreOS cluster from an Azure VM</source>
          <target state="new">Test your CoreOS cluster from an Azure VM</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Test your CoreOS cluster from localhost</source>
          <target state="new">Test your CoreOS cluster from localhost</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create public and private keys for communication</source>
          <target state="new">Create public and private keys for communication</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use the instructions in <bpt id="p1">[</bpt>How to Use SSH with Linux on Azure<ept id="p1">](virtual-machines-linux-use-ssh-key.md)</ept> to create a public and private key for SSH.</source>
          <target state="new">Use the instructions in <bpt id="p1">[</bpt>How to Use SSH with Linux on Azure<ept id="p1">](virtual-machines-linux-use-ssh-key.md)</ept> to create a public and private key for SSH.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>(The basic steps are in the instructions below.) You are going to use these keys to connect to VMs in the cluster to verify that they are working and can communicate with each other.</source>
          <target state="new">(The basic steps are in the instructions below.) You are going to use these keys to connect to VMs in the cluster to verify that they are working and can communicate with each other.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> This topic assumes that you do not have these keys, and requires you to create <ph id="ph2">`myPrivateKey.pem`</ph> and <ph id="ph3">`myCert.pem`</ph> files for clarity.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> This topic assumes that you do not have these keys, and requires you to create <ph id="ph2">`myPrivateKey.pem`</ph> and <ph id="ph3">`myCert.pem`</ph> files for clarity.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you already have a public and private key pair saved to <ph id="ph1">`~/.ssh/id_rsa`</ph>, you can just type <ph id="ph2">`openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem`</ph> to obtain the .pem file that you need to upload to Azure.</source>
          <target state="new">If you already have a public and private key pair saved to <ph id="ph1">`~/.ssh/id_rsa`</ph>, you can just type <ph id="ph2">`openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem`</ph> to obtain the .pem file that you need to upload to Azure.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In a working directory, type <ph id="ph1">`openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem`</ph> to create the private key and an the X.509 certificate associated with it.</source>
          <target state="new">In a working directory, type <ph id="ph1">`openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem`</ph> to create the private key and an the X.509 certificate associated with it.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To assert that the private key's owner can read or write the file, type <ph id="ph1">`chmod 600 myPrivateKey.key`</ph>.</source>
          <target state="new">To assert that the private key's owner can read or write the file, type <ph id="ph1">`chmod 600 myPrivateKey.key`</ph>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You should now have both a <ph id="ph1">`myPrivateKey.key`</ph> and a <ph id="ph2">`myCert.pem`</ph> file in your working directory.</source>
          <target state="new">You should now have both a <ph id="ph1">`myPrivateKey.key`</ph> and a <ph id="ph2">`myCert.pem`</ph> file in your working directory.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Obtain your cluster's etcd id</source>
          <target state="new">Obtain your cluster's etcd id</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CoreOS's <ph id="ph1">`etcd`</ph> daemon requires a discovery id to query for all nodes in the cluster automatically.</source>
          <target state="new">CoreOS's <ph id="ph1">`etcd`</ph> daemon requires a discovery id to query for all nodes in the cluster automatically.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To retrieve your discovery id and save it to an <ph id="ph1">`etcdid`</ph> file, type</source>
          <target state="new">To retrieve your discovery id and save it to an <ph id="ph1">`etcdid`</ph> file, type</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Create a cloud-config file</source>
          <target state="new">Create a cloud-config file</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Still in the same working directory, create a file with your favorite text editor with the following text and save it as <ph id="ph1">`cloud-config.yaml`</ph>.</source>
          <target state="new">Still in the same working directory, create a file with your favorite text editor with the following text and save it as <ph id="ph1">`cloud-config.yaml`</ph>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(You can save it as any file name you want, but when you create your VMs in the next step, you'll need to reference this file's name in your <bpt id="p1">**</bpt>--custom-data<ept id="p1">**</ept> option for the <bpt id="p2">**</bpt>azure vm create<ept id="p2">**</ept> command.)</source>
          <target state="new">(You can save it as any file name you want, but when you create your VMs in the next step, you'll need to reference this file's name in your <bpt id="p1">**</bpt>--custom-data<ept id="p1">**</ept> option for the <bpt id="p2">**</bpt>azure vm create<ept id="p2">**</ept> command.)</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Remember to type <ph id="ph2">`cat etcdid`</ph> to retrieve the etcd discovery id from the <ph id="ph3">`etcdid`</ph> file you created above and replace <ph id="ph4">`&lt;token&gt;`</ph> in the following <ph id="ph5">`cloud-config.yaml`</ph> file with the generated number from your <ph id="ph6">`etcdid`</ph> file.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Remember to type <ph id="ph2">`cat etcdid`</ph> to retrieve the etcd discovery id from the <ph id="ph3">`etcdid`</ph> file you created above and replace <ph id="ph4">`&lt;token&gt;`</ph> in the following <ph id="ph5">`cloud-config.yaml`</ph> file with the generated number from your <ph id="ph6">`etcdid`</ph> file.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you are unable to validate your cluster at the end, this may be one of the steps you overlooked!</source>
          <target state="new">If you are unable to validate your cluster at the end, this may be one of the steps you overlooked!</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>(For more complete information about the cloud-config file, see <bpt id="p1">[</bpt>Using Cloud-Config<ept id="p1">](https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/)</ept> in the CoreOS documentation.)</source>
          <target state="new">(For more complete information about the cloud-config file, see <bpt id="p1">[</bpt>Using Cloud-Config<ept id="p1">](https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/)</ept> in the CoreOS documentation.)</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the Azure CLI to create a new CoreOS VM</source>
          <target state="new">Use the Azure CLI to create a new CoreOS VM</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">

1.</ph> Install the [Azure Command-line Interface (Azure CLI)] if you have not already done so, and either login using a work or school ID, or download a .publishsettings file and import that into your account.</source>
          <target state="new"><ph id="ph1">

1.</ph> Install the [Azure Command-line Interface (Azure CLI)] if you have not already done so, and either login using a work or school ID, or download a .publishsettings file and import that into your account.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="new">2.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Locate your CoreOS image.</source>
          <target state="new">Locate your CoreOS image.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To locate the images available at any time, type <ph id="ph1">`azure vm image list | grep CoreOS`</ph> and you should see a list of results similar to:

    data:    2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0              Public    Linux

3.</source>
          <target state="new">To locate the images available at any time, type <ph id="ph1">`azure vm image list | grep CoreOS`</ph> and you should see a list of results similar to:

    data:    2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0              Public    Linux

3.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a cloud service for your basic cluster by typing</source>
          <target state="new">Create a cloud service for your basic cluster by typing</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>`azure service create</source>
          <target state="new">`azure service create</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>` where</source>
          <target state="new">` where</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>is the name for your CoreOS cloud service.</source>
          <target state="new">is the name for your CoreOS cloud service.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This sample uses the name <bpt id="p1">**</bpt><ph id="ph1">`coreos-cluster`</ph><ept id="p1">**</ept>; you will need to reuse the name that you choose to create your CoreOS VM instances inside the cloud service.</source>
          <target state="new">This sample uses the name <bpt id="p1">**</bpt><ph id="ph1">`coreos-cluster`</ph><ept id="p1">**</ept>; you will need to reuse the name that you choose to create your CoreOS VM instances inside the cloud service.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>One note: If you observe your work so far in the [preview portal](https://portal.azure.com), you'll find your cloud service name is both a resource group and domain, as the following image shows:

    ![][CloudServiceInNewPortal]

4.</source>
          <target state="new">One note: If you observe your work so far in the [preview portal](https://portal.azure.com), you'll find your cloud service name is both a resource group and domain, as the following image shows:

    ![][CloudServiceInNewPortal]

4.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Connect to your cloud service and create a new CoreOS VM inside by using the <bpt id="p1">**</bpt>azure vm create<ept id="p1">**</ept> command.</source>
          <target state="new">Connect to your cloud service and create a new CoreOS VM inside by using the <bpt id="p1">**</bpt>azure vm create<ept id="p1">**</ept> command.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You'll pass the location of your X.509 certificate in the <bpt id="p1">**</bpt>--ssh-cert<ept id="p1">**</ept> option.</source>
          <target state="new">You'll pass the location of your X.509 certificate in the <bpt id="p1">**</bpt>--ssh-cert<ept id="p1">**</ept> option.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Create your first VM image by typing the following, remembering to replace <bpt id="p1">**</bpt>coreos-cluster<ept id="p1">**</ept> with the cloud service name that you created:

    ```
azure vm create --custom-data=cloud-config.yaml --ssh=22 --ssh-cert=./myCert.pem --no-ssh-password --vm-name=node-1 --connect=coreos-cluster --location="West US" 2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0 core
```

5.</source>
          <target state="new">Create your first VM image by typing the following, remembering to replace <bpt id="p1">**</bpt>coreos-cluster<ept id="p1">**</ept> with the cloud service name that you created:

    ```
azure vm create --custom-data=cloud-config.yaml --ssh=22 --ssh-cert=./myCert.pem --no-ssh-password --vm-name=node-1 --connect=coreos-cluster --location="West US" 2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0 core
```

5.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Create the second node by repeating the command in step 4, replacing the <bpt id="p1">**</bpt>--vm-name<ept id="p1">**</ept> value with <bpt id="p2">**</bpt>node-2<ept id="p2">**</ept> and the <bpt id="p3">**</bpt>--ssh<ept id="p3">**</ept> port value with 2022.</source>
          <target state="new">Create the second node by repeating the command in step 4, replacing the <bpt id="p1">**</bpt>--vm-name<ept id="p1">**</ept> value with <bpt id="p2">**</bpt>node-2<ept id="p2">**</ept> and the <bpt id="p3">**</bpt>--ssh<ept id="p3">**</ept> port value with 2022.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>6.</source>
          <target state="new">6.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Create the third node by repeating the command in step 4, replacing the <bpt id="p1">**</bpt>--vm-name<ept id="p1">**</ept> value with <bpt id="p2">**</bpt>node-3<ept id="p2">**</ept> and the <bpt id="p3">**</bpt>--ssh<ept id="p3">**</ept> port value with 3022.</source>
          <target state="new">Create the third node by repeating the command in step 4, replacing the <bpt id="p1">**</bpt>--vm-name<ept id="p1">**</ept> value with <bpt id="p2">**</bpt>node-3<ept id="p2">**</ept> and the <bpt id="p3">**</bpt>--ssh<ept id="p3">**</ept> port value with 3022.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can see from the shot below how the CoreOS cluster appears in the portal.</source>
          <target state="new">You can see from the shot below how the CoreOS cluster appears in the portal.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>![][EmptyCoreOSCluster]

### Test your CoreOS cluster from an Azure VM

To test your cluster, make sure you are in your working directory and then connect to <bpt id="p1">**</bpt>node-1<ept id="p1">**</ept> using <bpt id="p2">**</bpt>ssh<ept id="p2">**</ept>, passing the private key by typing:

    ssh core@coreos-cluster.cloudapp.net -p 22 -i ./myPrivateKey.key

Once connected, type <ph id="ph1">`sudo fleetctl list-machines`</ph> to see whether the cluster has already identified all VMs in the cluster.</source>
          <target state="new">![][EmptyCoreOSCluster]

### Test your CoreOS cluster from an Azure VM

To test your cluster, make sure you are in your working directory and then connect to <bpt id="p1">**</bpt>node-1<ept id="p1">**</ept> using <bpt id="p2">**</bpt>ssh<ept id="p2">**</ept>, passing the private key by typing:

    ssh core@coreos-cluster.cloudapp.net -p 22 -i ./myPrivateKey.key

Once connected, type <ph id="ph1">`sudo fleetctl list-machines`</ph> to see whether the cluster has already identified all VMs in the cluster.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You should receive a response similar to the following:


    core@node-1 ~ $ sudo fleetctl list-machines
    MACHINE     IP      METADATA
    442e6cfb... 100.71.168.115  -
    a05e2d7c... 100.71.168.87   -
    f7de6717... 100.71.188.96   -


### Test your CoreOS cluster from localhost

Finally, let's test your CoreOS cluster from your local Linux client.</source>
          <target state="new">You should receive a response similar to the following:


    core@node-1 ~ $ sudo fleetctl list-machines
    MACHINE     IP      METADATA
    442e6cfb... 100.71.168.115  -
    a05e2d7c... 100.71.168.87   -
    f7de6717... 100.71.188.96   -


### Test your CoreOS cluster from localhost

Finally, let's test your CoreOS cluster from your local Linux client.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You might be able to install <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> by using <bpt id="p2">**</bpt>npm<ept id="p2">**</ept>, or you might want to install <bpt id="p3">**</bpt>fleet<ept id="p3">**</ept> and build <bpt id="p4">**</bpt>fleetctl<ept id="p4">**</ept> yourself on your local client.</source>
          <target state="new">You might be able to install <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> by using <bpt id="p2">**</bpt>npm<ept id="p2">**</ept>, or you might want to install <bpt id="p3">**</bpt>fleet<ept id="p3">**</ept> and build <bpt id="p4">**</bpt>fleetctl<ept id="p4">**</ept> yourself on your local client.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> requires <bpt id="p2">**</bpt>golang<ept id="p2">**</ept>, so you may need to install that first by typing:

<ph id="ph1">`sudo apt-get install golang`</ph>

Then clone the <bpt id="p3">**</bpt>fleet<ept id="p3">**</ept> repository from github by typing:

<ph id="ph2">`git clone https://github.com/coreos/fleet.git`</ph>

Build <bpt id="p4">**</bpt>fleet<ept id="p4">**</ept> by changing to the <ph id="ph3">`fleet`</ph> directory and type

<ph id="ph4">`./build`</ph>

And finally place <bpt id="p5">**</bpt>fleet<ept id="p5">**</ept> for easy use (depending upon your configuration you may or may not need to <bpt id="p6">**</bpt>sudo<ept id="p6">**</ept>):

<ph id="ph5">`cp bin/fleetctl /usr/local/bin`</ph>

Make sure <bpt id="p7">**</bpt>fleet<ept id="p7">**</ept> has access to your <ph id="ph6">`myPrivateKey.key`</ph> in the working directory by typing:

<ph id="ph7">`ssh-add ./myPrivateKey.key`</ph><ph id="ph8">

&gt; [AZURE.NOTE]</ph> If you are already using the <ph id="ph9">`~/.ssh/id_rsa`</ph> key, then add that with <ph id="ph10">`ssh-add ~/.ssh/id_rsa`</ph>.</source>
          <target state="new"><bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> requires <bpt id="p2">**</bpt>golang<ept id="p2">**</ept>, so you may need to install that first by typing:

<ph id="ph1">`sudo apt-get install golang`</ph>

Then clone the <bpt id="p3">**</bpt>fleet<ept id="p3">**</ept> repository from github by typing:

<ph id="ph2">`git clone https://github.com/coreos/fleet.git`</ph>

Build <bpt id="p4">**</bpt>fleet<ept id="p4">**</ept> by changing to the <ph id="ph3">`fleet`</ph> directory and type

<ph id="ph4">`./build`</ph>

And finally place <bpt id="p5">**</bpt>fleet<ept id="p5">**</ept> for easy use (depending upon your configuration you may or may not need to <bpt id="p6">**</bpt>sudo<ept id="p6">**</ept>):

<ph id="ph5">`cp bin/fleetctl /usr/local/bin`</ph>

Make sure <bpt id="p7">**</bpt>fleet<ept id="p7">**</ept> has access to your <ph id="ph6">`myPrivateKey.key`</ph> in the working directory by typing:

<ph id="ph7">`ssh-add ./myPrivateKey.key`</ph><ph id="ph8">

&gt; [AZURE.NOTE]</ph> If you are already using the <ph id="ph9">`~/.ssh/id_rsa`</ph> key, then add that with <ph id="ph10">`ssh-add ~/.ssh/id_rsa`</ph>.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Now you are ready to test remotely using the same <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> command you used from <bpt id="p2">**</bpt>node-1<ept id="p2">**</ept>, but passing some remote arguments:

<ph id="ph1">`fleetctl --tunnel coreos-cluster.cloudapp.net:22 list-machines`</ph>

The results should be exactly the same:


    MACHINE     IP      METADATA
    442e6cfb... 100.71.168.115  -
    a05e2d7c... 100.71.168.87   -
    f7de6717... 100.71.188.96   -

## Next steps

You should now have a running three-node CoreOS cluster on Azure.</source>
          <target state="new">Now you are ready to test remotely using the same <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> command you used from <bpt id="p2">**</bpt>node-1<ept id="p2">**</ept>, but passing some remote arguments:

<ph id="ph1">`fleetctl --tunnel coreos-cluster.cloudapp.net:22 list-machines`</ph>

The results should be exactly the same:


    MACHINE     IP      METADATA
    442e6cfb... 100.71.168.115  -
    a05e2d7c... 100.71.168.87   -
    f7de6717... 100.71.188.96   -

## Next steps

You should now have a running three-node CoreOS cluster on Azure.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>From here, you can explore how to create more complex clusters and use Docker and create more interesting applications.</source>
          <target state="new">From here, you can explore how to create more complex clusters and use Docker and create more interesting applications.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To try a couple of quick examples, see [Get Started with Fleet on CoreOS on Azure].</source>
          <target state="new">To try a couple of quick examples, see [Get Started with Fleet on CoreOS on Azure].</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1be32ff789da6f80f8977691f227e62361654ebe</xliffext:olfilehash>
  </header>
</xliff>