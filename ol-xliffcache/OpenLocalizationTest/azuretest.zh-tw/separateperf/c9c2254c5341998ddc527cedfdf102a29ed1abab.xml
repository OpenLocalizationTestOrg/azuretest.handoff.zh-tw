{
  "nodes": [
    {
      "content": "How to use Access Control (Java) | Microsoft Azure",
      "pos": [
        27,
        77
      ]
    },
    {
      "content": "Learn how to develop and use Access Control with Java in Azure.",
      "pos": [
        96,
        159
      ]
    },
    {
      "content": "How to Authenticate Web Users with Azure Access Control Service Using Eclipse",
      "pos": [
        484,
        561
      ]
    },
    {
      "content": "This guide will show you how to use the Azure Access Control Service (ACS) within the Azure Plugin for Eclipse with Java (by Microsoft Open Technologies).",
      "pos": [
        563,
        717
      ]
    },
    {
      "content": "For more information on ACS, see the <bpt id=\"p1\">[</bpt>Next steps<ept id=\"p1\">](#next_steps)</ept> section.",
      "pos": [
        718,
        789
      ]
    },
    {
      "pos": [
        793,
        1022
      ],
      "content": "[AZURE.NOTE]\nThe Azure Access Services Control Filter (by Microsoft Open Technologies) is a community technology preview. As pre-release software, it is not formally supported by Microsoft Open Technologies, Inc. nor Microsoft.",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "The Azure Access Services Control Filter (by Microsoft Open Technologies) is a community technology preview. As pre-release software, it is not formally supported by Microsoft Open Technologies, Inc. nor Microsoft.",
          "pos": [
            13,
            227
          ],
          "nodes": [
            {
              "content": "The Azure Access Services Control Filter (by Microsoft Open Technologies) is a community technology preview.",
              "pos": [
                0,
                108
              ]
            },
            {
              "content": "As pre-release software, it is not formally supported by Microsoft Open Technologies, Inc. nor Microsoft.",
              "pos": [
                109,
                214
              ]
            }
          ]
        }
      ]
    },
    {
      "content": "What is ACS?",
      "pos": [
        1027,
        1039
      ]
    },
    {
      "content": "Most developers are not identity experts and generally do not want to",
      "pos": [
        1041,
        1110
      ]
    },
    {
      "content": "spend time developing authentication and authorization mechanisms for",
      "pos": [
        1111,
        1180
      ]
    },
    {
      "content": "their applications and services.",
      "pos": [
        1181,
        1213
      ]
    },
    {
      "content": "ACS is an Azure service that",
      "pos": [
        1214,
        1242
      ]
    },
    {
      "content": "provides an easy way of authenticating users who need to access your web",
      "pos": [
        1243,
        1315
      ]
    },
    {
      "content": "applications and services without having to factor complex",
      "pos": [
        1316,
        1374
      ]
    },
    {
      "content": "authentication logic into your code.",
      "pos": [
        1375,
        1411
      ]
    },
    {
      "content": "The following features are available in ACS:",
      "pos": [
        1413,
        1457
      ]
    },
    {
      "content": "Integration with Windows Identity Foundation (WIF).",
      "pos": [
        1463,
        1514
      ]
    },
    {
      "content": "Support for popular web identity providers (IPs) including Windows Live ID, Google, Yahoo!, and Facebook.",
      "pos": [
        1519,
        1624
      ]
    },
    {
      "content": "Support for Active Directory Federation Services (AD FS) 2.0.",
      "pos": [
        1629,
        1690
      ]
    },
    {
      "content": "An Open Data Protocol (OData)-based management service that provides programmatic access to ACS settings.",
      "pos": [
        1695,
        1800
      ]
    },
    {
      "content": "A Management Portal that allows administrative access to the ACS settings.",
      "pos": [
        1805,
        1879
      ]
    },
    {
      "pos": [
        1881,
        1948
      ],
      "content": "For more information about ACS, see <bpt id=\"p1\">[</bpt>Access Control Service 2.0<ept id=\"p1\">][]</ept>."
    },
    {
      "content": "Concepts",
      "pos": [
        1953,
        1961
      ]
    },
    {
      "content": "Azure ACS is built on the principals of claims-based identity -",
      "pos": [
        1963,
        2026
      ]
    },
    {
      "content": "a consistent approach to creating authentication mechanisms for",
      "pos": [
        2027,
        2090
      ]
    },
    {
      "content": "applications running on-premises or in the cloud.",
      "pos": [
        2091,
        2140
      ]
    },
    {
      "content": "Claims-based identity",
      "pos": [
        2141,
        2162
      ]
    },
    {
      "content": "provides a common way for applications and services to acquire the",
      "pos": [
        2163,
        2229
      ]
    },
    {
      "content": "identity information they need about users inside their organization, in",
      "pos": [
        2230,
        2302
      ]
    },
    {
      "content": "other organizations, and on the Internet.",
      "pos": [
        2303,
        2344
      ]
    },
    {
      "content": "To complete the tasks in this guide, you should understand the following",
      "pos": [
        2346,
        2418
      ]
    },
    {
      "content": "concepts:",
      "pos": [
        2419,
        2428
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Client<ept id=\"p1\">**</ept> - In the context of this how-to guide, this is a browser that",
      "pos": [
        2430,
        2502
      ]
    },
    {
      "content": "is attempting to gain access to your web application.",
      "pos": [
        2503,
        2556
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Relying party (RP) application<ept id=\"p1\">**</ept> - An RP application is a website or",
      "pos": [
        2558,
        2628
      ]
    },
    {
      "content": "service that outsources authentication to one external authority.",
      "pos": [
        2629,
        2694
      ]
    },
    {
      "content": "In",
      "pos": [
        2695,
        2697
      ]
    },
    {
      "content": "identity jargon, we say that the RP trusts that authority.",
      "pos": [
        2698,
        2756
      ]
    },
    {
      "content": "This guide",
      "pos": [
        2757,
        2767
      ]
    },
    {
      "content": "explains how to configure your application to trust ACS.",
      "pos": [
        2768,
        2824
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Token<ept id=\"p1\">**</ept> - A token is a collection of security data that is usually",
      "pos": [
        2826,
        2894
      ]
    },
    {
      "content": "issued upon successful authentication of a user.",
      "pos": [
        2895,
        2943
      ]
    },
    {
      "content": "It contains a set of <bpt id=\"p1\">*</bpt>claims<ept id=\"p1\">*</ept>, attributes of the authenticated user.",
      "pos": [
        2944,
        3012
      ]
    },
    {
      "content": "A claim can represent a",
      "pos": [
        3013,
        3036
      ]
    },
    {
      "content": "user's name, an identifier for a role a user belongs to, a user's age,",
      "pos": [
        3037,
        3107
      ]
    },
    {
      "content": "and so on.",
      "pos": [
        3108,
        3118
      ]
    },
    {
      "content": "A token is usually digitally signed, which means it can",
      "pos": [
        3119,
        3174
      ]
    },
    {
      "content": "always be sourced back to its issuer, and its content cannot be tampered",
      "pos": [
        3175,
        3247
      ]
    },
    {
      "content": "with.",
      "pos": [
        3248,
        3253
      ]
    },
    {
      "content": "A user gains access to a RP application by presenting a valid",
      "pos": [
        3254,
        3315
      ]
    },
    {
      "content": "token issued by an authority that the RP application trusts.",
      "pos": [
        3316,
        3376
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Identity Provider (IP)<ept id=\"p1\">**</ept> - An IP is an authority that authenticates",
      "pos": [
        3378,
        3447
      ]
    },
    {
      "content": "user identities and issues security tokens.",
      "pos": [
        3448,
        3491
      ]
    },
    {
      "content": "The actual work of issuing",
      "pos": [
        3492,
        3518
      ]
    },
    {
      "content": "tokens is implemented though a special service called Security Token",
      "pos": [
        3519,
        3587
      ]
    },
    {
      "content": "Service (STS).",
      "pos": [
        3588,
        3602
      ]
    },
    {
      "content": "Typical examples of IPs include Windows Live ID,",
      "pos": [
        3603,
        3651
      ]
    },
    {
      "content": "Facebook, business user repositories (like Active Directory), and so on.",
      "pos": [
        3652,
        3724
      ]
    },
    {
      "content": "When ACS is configured to trust an IP, the system will accept and",
      "pos": [
        3725,
        3790
      ]
    },
    {
      "content": "validate tokens issued by that IP.",
      "pos": [
        3791,
        3825
      ]
    },
    {
      "content": "ACS can trust multiple IPs at once,",
      "pos": [
        3826,
        3861
      ]
    },
    {
      "content": "which means that when your application trusts ACS, you can instantly",
      "pos": [
        3862,
        3930
      ]
    },
    {
      "content": "offer your application to all the authenticated users from all the IPs",
      "pos": [
        3931,
        4001
      ]
    },
    {
      "content": "that ACS trusts on your behalf.",
      "pos": [
        4002,
        4033
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Federation Provider (FP)<ept id=\"p1\">**</ept> - IPs have direct knowledge of users,",
      "pos": [
        4035,
        4101
      ]
    },
    {
      "content": "and authenticate them using their credentials and issue claims about what",
      "pos": [
        4102,
        4175
      ]
    },
    {
      "content": "they know about them.",
      "pos": [
        4176,
        4197
      ]
    },
    {
      "content": "A Federation Provider (FP) is a different kind of",
      "pos": [
        4198,
        4247
      ]
    },
    {
      "content": "authority: rather than authenticating users directly, it acts as an",
      "pos": [
        4248,
        4315
      ]
    },
    {
      "content": "intermediary and brokers authentication between one RP and one or more",
      "pos": [
        4316,
        4386
      ]
    },
    {
      "content": "IPs.",
      "pos": [
        4387,
        4391
      ]
    },
    {
      "content": "Both IPs and FPs issue security tokens, hence they both use",
      "pos": [
        4392,
        4451
      ]
    },
    {
      "content": "Security Token Services (STS).",
      "pos": [
        4452,
        4482
      ]
    },
    {
      "content": "ACS is one FP.",
      "pos": [
        4483,
        4497
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ACS Rule Engine<ept id=\"p1\">**</ept> - The logic used to transform incoming tokens from",
      "pos": [
        4499,
        4569
      ]
    },
    {
      "content": "trusted IPs to tokens meant to be consumed by the RP is codified in form",
      "pos": [
        4570,
        4642
      ]
    },
    {
      "content": "of simple claims transformation rules.",
      "pos": [
        4643,
        4681
      ]
    },
    {
      "content": "ACS features a rule engine that",
      "pos": [
        4682,
        4713
      ]
    },
    {
      "content": "takes care of applying whatever transformation logic you specified for",
      "pos": [
        4714,
        4784
      ]
    },
    {
      "content": "your RP.",
      "pos": [
        4785,
        4793
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>ACS Namespace<ept id=\"p1\">**</ept> - A namespace is a top level partition of ACS that you",
      "pos": [
        4795,
        4867
      ]
    },
    {
      "content": "use for organizing your settings.",
      "pos": [
        4868,
        4901
      ]
    },
    {
      "content": "A namespace holds a list of IPs you",
      "pos": [
        4902,
        4937
      ]
    },
    {
      "content": "trust, the RP applications you want to serve, the rules that you expect",
      "pos": [
        4938,
        5009
      ]
    },
    {
      "content": "the rule engine to process incoming tokens with, and so on.",
      "pos": [
        5010,
        5069
      ]
    },
    {
      "content": "A namespace",
      "pos": [
        5070,
        5081
      ]
    },
    {
      "content": "exposes various endpoints that will be used by the application and the",
      "pos": [
        5082,
        5152
      ]
    },
    {
      "content": "developer to get ACS to perform its function.",
      "pos": [
        5153,
        5198
      ]
    },
    {
      "content": "The following figure shows how ACS authentication works with a web",
      "pos": [
        5200,
        5266
      ]
    },
    {
      "content": "application:",
      "pos": [
        5267,
        5279
      ]
    },
    {
      "content": "ACS flow diagram",
      "pos": [
        5283,
        5299
      ]
    },
    {
      "content": "The client (in this case a browser) requests a page from the RP.",
      "pos": [
        5316,
        5380
      ]
    },
    {
      "content": "Since the request is not yet authenticated, the RP redirects the user to the authority that it trusts, which is ACS.",
      "pos": [
        5385,
        5501
      ]
    },
    {
      "content": "The ACS presents the user with the choice of IPs that were specified for this RP.",
      "pos": [
        5502,
        5583
      ]
    },
    {
      "content": "The user selects the appropriate IP.",
      "pos": [
        5584,
        5620
      ]
    },
    {
      "content": "The client browses to the IP's authentication page, and prompts the user to log on.",
      "pos": [
        5625,
        5708
      ]
    },
    {
      "content": "After the client is authenticated (for example, the identity credentials are entered), the IP issues a security token.",
      "pos": [
        5713,
        5831
      ]
    },
    {
      "content": "After issuing a security token, the IP redirects the client to ACS and the client sends the security token issued by the IP to ACS.",
      "pos": [
        5836,
        5967
      ]
    },
    {
      "content": "ACS validates the security token issued by the IP, inputs the identity claims in this token into the ACS rules engine, calculates the output identity claims, and issues a new security token that contains these output claims.",
      "pos": [
        5972,
        6196
      ]
    },
    {
      "content": "ACS redirects the client to the RP.",
      "pos": [
        6201,
        6236
      ]
    },
    {
      "content": "The client sends the new security token issued by ACS to the RP.",
      "pos": [
        6237,
        6301
      ]
    },
    {
      "content": "The RP validates the signature on the security token issued by ACS, validates the claims in this token, and returns the page that was originally requested.",
      "pos": [
        6302,
        6457
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        6462,
        6475
      ]
    },
    {
      "content": "To complete the tasks in this guide, you will need the following:",
      "pos": [
        6477,
        6542
      ]
    },
    {
      "content": "A Java Developer Kit (JDK), v 1.6 or later.",
      "pos": [
        6546,
        6589
      ]
    },
    {
      "content": "Eclipse IDE for Java EE Developers, Indigo or later.",
      "pos": [
        6592,
        6644
      ]
    },
    {
      "content": "This can be downloaded from <bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">http://www.eclipse.org/downloads/&gt;</ept>.",
      "pos": [
        6645,
        6709
      ]
    },
    {
      "content": "A distribution of a Java-based web server or application server, such as Apache Tomcat, GlassFish, JBoss Application Server, or Jetty.",
      "pos": [
        6713,
        6847
      ]
    },
    {
      "pos": [
        6850,
        6948
      ],
      "content": "an Azure subscription, which can be acquired from <bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">http://www.microsoft.com/windowsazure/offers/&gt;</ept>."
    },
    {
      "content": "The Azure Plugin for Eclipse with Java (by Microsoft Open Technologies), April 2014 release.",
      "pos": [
        6951,
        7043
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Installing the Azure Plugin for Eclipse with Java (by Microsoft Open Technologies)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windowsazure/hh690946.aspx)</ept>.",
      "pos": [
        7044,
        7223
      ]
    },
    {
      "content": "An X.509 certificate to use with your application.",
      "pos": [
        7226,
        7276
      ]
    },
    {
      "content": "You will need this certificate in both public certificate (.cer) and Personal Information Exchange (.PFX) format.",
      "pos": [
        7277,
        7390
      ]
    },
    {
      "content": "(Options for creating this certificate will be described later in this tutorial).",
      "pos": [
        7391,
        7472
      ]
    },
    {
      "pos": [
        7475,
        7684
      ],
      "content": "Familiarity with the Azure compute emulator and deployment techniques discussed at <bpt id=\"p1\">[</bpt>Creating a Hello World Application for Azure in Eclipse<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx)</ept>."
    },
    {
      "content": "Create an ACS Namespace",
      "pos": [
        7689,
        7712
      ]
    },
    {
      "content": "To begin using Access Control Service (ACS) in Azure, you must",
      "pos": [
        7714,
        7776
      ]
    },
    {
      "content": "create an ACS namespace.",
      "pos": [
        7777,
        7801
      ]
    },
    {
      "content": "The namespace provides a unique scope for",
      "pos": [
        7802,
        7843
      ]
    },
    {
      "content": "addressing ACS resources from within your application.",
      "pos": [
        7844,
        7898
      ]
    },
    {
      "pos": [
        7903,
        7944
      ],
      "content": "Log into the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">][]</ept>."
    },
    {
      "pos": [
        7948,
        7975
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Active Directory<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        7980,
        8119
      ],
      "content": "To create a new Access Control namespace, click <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>App Services<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Access Control<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Quick Create<ept id=\"p4\">**</ept>."
    },
    {
      "content": "Enter a name for the namespace.",
      "pos": [
        8124,
        8155
      ]
    },
    {
      "content": "Azure verifies that the name is unique.",
      "pos": [
        8156,
        8195
      ]
    },
    {
      "content": "Select the region in which the namespace is used.",
      "pos": [
        8199,
        8248
      ]
    },
    {
      "content": "For the best performance, use the region in which you are deploying your application.",
      "pos": [
        8249,
        8334
      ]
    },
    {
      "content": "If you have more than one subscription, select the subscription that you want to use for the ACS namespace.",
      "pos": [
        8338,
        8445
      ]
    },
    {
      "pos": [
        8449,
        8466
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Azure creates and activates the namespace.",
      "pos": [
        8468,
        8510
      ]
    },
    {
      "content": "Wait until the status of the new namespace is <bpt id=\"p1\">**</bpt>Active<ept id=\"p1\">**</ept> before continuing.",
      "pos": [
        8511,
        8586
      ]
    },
    {
      "content": "Add identity providers",
      "pos": [
        8592,
        8614
      ]
    },
    {
      "content": "In this task, you add IPs to use with your RP application for",
      "pos": [
        8616,
        8677
      ]
    },
    {
      "content": "authentication.",
      "pos": [
        8678,
        8693
      ]
    },
    {
      "content": "For demonstration purposes, this task shows how to add",
      "pos": [
        8694,
        8748
      ]
    },
    {
      "content": "Windows Live as an IP, but you could use any of the IPs listed in the ACS",
      "pos": [
        8749,
        8822
      ]
    },
    {
      "content": "Management Portal.",
      "pos": [
        8823,
        8841
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">][]</ept>, click <bpt id=\"p2\">**</bpt>Active Directory<ept id=\"p2\">**</ept>, select an Access Control namespace, and then click <bpt id=\"p3\">**</bpt>Manage<ept id=\"p3\">**</ept>.",
      "pos": [
        8848,
        8974
      ]
    },
    {
      "content": "The ACS Management Portal opens.",
      "pos": [
        8975,
        9007
      ]
    },
    {
      "pos": [
        9012,
        9099
      ],
      "content": "In the left navigation pane of the ACS Management Portal, click <bpt id=\"p1\">**</bpt>Identity providers<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Windows Live ID is enabled by default, and cannot be deleted.",
      "pos": [
        9104,
        9165
      ]
    },
    {
      "content": "For purposes of this tutorial, only Windows Live ID is used.",
      "pos": [
        9166,
        9226
      ]
    },
    {
      "content": "This screen, however, is where you could add other IPs, by clicking the <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> button.",
      "pos": [
        9227,
        9314
      ]
    },
    {
      "content": "Windows Live ID is now enabled as an IP for your ACS namespace.",
      "pos": [
        9316,
        9379
      ]
    },
    {
      "content": "Next, you",
      "pos": [
        9380,
        9389
      ]
    },
    {
      "content": "specify your Java web application (to be created later) as an RP.",
      "pos": [
        9390,
        9455
      ]
    },
    {
      "content": "Add a relying party application",
      "pos": [
        9460,
        9491
      ]
    },
    {
      "content": "In this task, you configure ACS to recognize your Java web",
      "pos": [
        9493,
        9551
      ]
    },
    {
      "content": "application as a valid RP application.",
      "pos": [
        9552,
        9590
      ]
    },
    {
      "pos": [
        9596,
        9663
      ],
      "content": "On the ACS Management Portal, click <bpt id=\"p1\">**</bpt>Relying party applications<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        9668,
        9726
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Relying Party Applications<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        9731,
        9795
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Add Relying Party Application<ept id=\"p1\">**</ept> page, do the following:"
    },
    {
      "pos": [
        9804,
        9904
      ],
      "content": "In **Name**, type the name of the RP. For purposes of this tutorial, type **Azure Web\nApp**.",
      "leadings": [
        "",
        "        "
      ],
      "nodes": [
        {
          "content": "In <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>, type the name of the RP.",
          "pos": [
            0,
            37
          ]
        },
        {
          "content": "For purposes of this tutorial, type <bpt id=\"p1\">**</bpt>Azure Web\nApp<ept id=\"p1\">**</ept>.",
          "pos": [
            38,
            92
          ]
        }
      ]
    },
    {
      "pos": [
        9913,
        9961
      ],
      "content": "In <bpt id=\"p1\">**</bpt>Mode<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Enter settings manually<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        9970,
        10184
      ],
      "content": "In **Realm**, type the URI to which the security token issued by ACS applies. For this task, type **http://localhost:8080/**.\n![Relying party realm for use in compute emulator][relying_party_realm_emulator]",
      "leadings": [
        "",
        "        "
      ],
      "nodes": [
        {
          "content": "In **Realm**, type the URI to which the security token issued by ACS applies. For this task, type **http://localhost:8080/**.",
          "pos": [
            0,
            125
          ],
          "nodes": [
            {
              "content": "In <bpt id=\"p1\">**</bpt>Realm<ept id=\"p1\">**</ept>, type the URI to which the security token issued by ACS applies.",
              "pos": [
                0,
                77
              ]
            },
            {
              "content": "For this task, type <bpt id=\"p1\">**</bpt>http://localhost:8080/<ept id=\"p1\">**</ept>.",
              "pos": [
                78,
                125
              ]
            }
          ]
        },
        {
          "content": "![Relying party realm for use in compute emulator][relying_party_realm_emulator]",
          "pos": [
            126,
            206
          ]
        }
      ]
    },
    {
      "pos": [
        10193,
        10436
      ],
      "content": "In **Return URL,** type the URL to which ACS returns the security token. For this task, type **http://localhost:8080/MyACSHelloWorld/index.jsp**\n![Relying party return URL for use in compute emulator][relying_party_return_url_emulator]",
      "leadings": [
        "",
        "        "
      ],
      "nodes": [
        {
          "content": "In **Return URL,** type the URL to which ACS returns the security token. For this task, type **http://localhost:8080/MyACSHelloWorld/index.jsp**",
          "pos": [
            0,
            144
          ],
          "nodes": [
            {
              "content": "In <bpt id=\"p1\">**</bpt>Return URL,<ept id=\"p1\">**</ept> type the URL to which ACS returns the security token.",
              "pos": [
                0,
                72
              ]
            },
            {
              "content": "For this task, type <bpt id=\"p1\">**</bpt>http://localhost:8080/MyACSHelloWorld/index.jsp<ept id=\"p1\">**</ept>",
              "pos": [
                73,
                144
              ]
            }
          ]
        },
        {
          "content": "![Relying party return URL for use in compute emulator][relying_party_return_url_emulator]",
          "pos": [
            145,
            235
          ]
        }
      ]
    },
    {
      "content": "Accept the default values in the rest of the fields.",
      "pos": [
        10445,
        10497
      ]
    },
    {
      "pos": [
        10503,
        10518
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>."
    },
    {
      "content": "You have now successfully configured your Java web application when it is run in the Azure compute emulator (at",
      "pos": [
        10520,
        10631
      ]
    },
    {
      "content": "http://localhost:8080/) to be an RP in your ACS namespace.",
      "pos": [
        10632,
        10690
      ]
    },
    {
      "content": "Next, create",
      "pos": [
        10691,
        10703
      ]
    },
    {
      "content": "the rules that ACS uses to process claims for the RP.",
      "pos": [
        10704,
        10757
      ]
    },
    {
      "content": "Create rules",
      "pos": [
        10762,
        10774
      ]
    },
    {
      "content": "In this task, you define the rules that drive how claims are passed from",
      "pos": [
        10776,
        10848
      ]
    },
    {
      "content": "IPs to your RP.",
      "pos": [
        10849,
        10864
      ]
    },
    {
      "content": "For the purpose of this guide, we will simply configure",
      "pos": [
        10865,
        10920
      ]
    },
    {
      "content": "ACS to copy the input claim types and values directly in the output",
      "pos": [
        10921,
        10988
      ]
    },
    {
      "content": "token, without filtering or modifying them.",
      "pos": [
        10989,
        11032
      ]
    },
    {
      "pos": [
        11038,
        11100
      ],
      "content": "On the ACS Management Portal main page, click <bpt id=\"p1\">**</bpt>Rule groups<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        11105,
        11181
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Rule Groups<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Default Rule Group for Azure Web App<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        11186,
        11238
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Edit Rule Group<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Generate<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        11243,
        11375
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Generate Rules: Default Rule Group for Azure Web App<ept id=\"p1\">**</ept> page, ensure Windows Live ID is checked and then click <bpt id=\"p2\">**</bpt>Generate<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        11384,
        11432
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Edit Rule Group<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Save<ept id=\"p2\">**</ept>."
    },
    {
      "content": "Upload a certificate to your ACS namespace",
      "pos": [
        11437,
        11479
      ]
    },
    {
      "content": "In this task, you upload a .PFX certificate that will be used to sign token requests created by your ACS namespace.",
      "pos": [
        11481,
        11596
      ]
    },
    {
      "pos": [
        11602,
        11674
      ],
      "content": "On the ACS Management Portal main page, click <bpt id=\"p1\">**</bpt>Certificates and keys<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        11679,
        11756
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Certificates and Keys<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> above <bpt id=\"p3\">**</bpt>Token Signing<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        11761,
        11814
      ],
      "content": "On the <bpt id=\"p1\">**</bpt>Add Token-Signing Certificate or Key<ept id=\"p1\">**</ept> page:"
    },
    {
      "pos": [
        11822,
        11989
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Used for<ept id=\"p1\">**</ept> section, click <bpt id=\"p2\">**</bpt>Relying Party Application<ept id=\"p2\">**</ept> and select <bpt id=\"p3\">**</bpt>Azure Web App<ept id=\"p3\">**</ept> (which you previously set as the name of your relying party application)."
    },
    {
      "pos": [
        11997,
        12051
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Type<ept id=\"p1\">**</ept> section, select <bpt id=\"p2\">**</bpt>X.509 Certificate<ept id=\"p2\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Certificate<ept id=\"p1\">**</ept> section, click the browse button and navigate to the X.509 certificate file that you want to use.",
      "pos": [
        12059,
        12179
      ]
    },
    {
      "content": "This will be a .PFX file.",
      "pos": [
        12180,
        12205
      ]
    },
    {
      "content": "Select the file, click <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept>,  and then enter the certificate password in the <bpt id=\"p2\">**</bpt>Password<ept id=\"p2\">**</ept> text box.",
      "pos": [
        12206,
        12309
      ]
    },
    {
      "content": "Note that for testing purposes, you may use a self-signed-certificate.",
      "pos": [
        12310,
        12380
      ]
    },
    {
      "content": "To create a self-signed certificate, use the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> button in the <bpt id=\"p2\">**</bpt>ACS Filter Library<ept id=\"p2\">**</ept> dialog (described later), or use the <bpt id=\"p3\">**</bpt>encutil.exe<ept id=\"p3\">**</ept> utility from the <bpt id=\"p4\">[</bpt>project website<ept id=\"p4\">][]</ept> of the Azure Starter Kit for Java (by Microsoft Open Technologies).",
      "pos": [
        12381,
        12628
      ]
    },
    {
      "pos": [
        12636,
        12830
      ],
      "content": "Ensure that **Make Primary** is checked. Your **Add Token-Signing Certificate or Key** page should look similar to the following.\n ![Add token-signing certificate][add_token_signing_cert]",
      "leadings": [
        "",
        "       "
      ],
      "nodes": [
        {
          "content": "Ensure that **Make Primary** is checked. Your **Add Token-Signing Certificate or Key** page should look similar to the following.",
          "pos": [
            0,
            129
          ],
          "nodes": [
            {
              "content": "Ensure that <bpt id=\"p1\">**</bpt>Make Primary<ept id=\"p1\">**</ept> is checked.",
              "pos": [
                0,
                40
              ]
            },
            {
              "content": "Your <bpt id=\"p1\">**</bpt>Add Token-Signing Certificate or Key<ept id=\"p1\">**</ept> page should look similar to the following.",
              "pos": [
                41,
                129
              ]
            }
          ]
        },
        {
          "content": "![Add token-signing certificate][add_token_signing_cert]",
          "pos": [
            131,
            187
          ]
        }
      ]
    },
    {
      "pos": [
        12838,
        12935
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> to save your settings and close the <bpt id=\"p2\">**</bpt>Add Token-Signing Certificate or Key<ept id=\"p2\">**</ept> page."
    },
    {
      "content": "Next, review the information in the Application Integration page and",
      "pos": [
        12937,
        13005
      ]
    },
    {
      "content": "copy the URI that you will need to configure your Java web",
      "pos": [
        13006,
        13064
      ]
    },
    {
      "content": "application to use ACS.",
      "pos": [
        13065,
        13088
      ]
    },
    {
      "content": "Review the Application Integration page",
      "pos": [
        13093,
        13132
      ]
    },
    {
      "content": "You can find all the information and the code necessary to configure",
      "pos": [
        13134,
        13202
      ]
    },
    {
      "content": "your Java web application (the RP application) to work with ACS on",
      "pos": [
        13203,
        13269
      ]
    },
    {
      "content": "the Application Integration page of the ACS Management Portal.",
      "pos": [
        13270,
        13332
      ]
    },
    {
      "content": "You will",
      "pos": [
        13333,
        13341
      ]
    },
    {
      "content": "need this information when configuring your Java web application for",
      "pos": [
        13342,
        13410
      ]
    },
    {
      "content": "federated authentication.",
      "pos": [
        13411,
        13436
      ]
    },
    {
      "pos": [
        13442,
        13506
      ],
      "content": "On the ACS Management Portal, click <bpt id=\"p1\">**</bpt>Application integration<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        13513,
        13576
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Application Integration<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Login Pages<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        13581,
        13645
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Login Page Integration<ept id=\"p1\">**</ept> page, click <bpt id=\"p2\">**</bpt>Azure Web App<ept id=\"p2\">**</ept>."
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>Login Page Integration: Azure Web App<ept id=\"p1\">**</ept> page, the URL listed in <bpt id=\"p2\">**</bpt>Option 1: Link to an ACS-hosted login page<ept id=\"p2\">**</ept> will be used in your Java web application.",
      "pos": [
        13647,
        13809
      ]
    },
    {
      "content": "You will need this value when you add the Azure Access Control Services Filter library to your Java application.",
      "pos": [
        13810,
        13922
      ]
    },
    {
      "content": "Create a Java web application",
      "pos": [
        13927,
        13956
      ]
    },
    {
      "content": "Within Eclipse, at the menu click <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Dynamic Web Project<ept id=\"p3\">**</ept>.",
      "pos": [
        13960,
        14058
      ]
    },
    {
      "content": "(If you don't see <bpt id=\"p1\">**</bpt>Dynamic Web Project<ept id=\"p1\">**</ept> listed as an available project after clicking <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>New<ept id=\"p3\">**</ept>, then do the following: click <bpt id=\"p4\">**</bpt>File<ept id=\"p4\">**</ept>, click <bpt id=\"p5\">**</bpt>New<ept id=\"p5\">**</ept>, click <bpt id=\"p6\">**</bpt>Project<ept id=\"p6\">**</ept>, expand <bpt id=\"p7\">**</bpt>Web<ept id=\"p7\">**</ept>, click <bpt id=\"p8\">**</bpt>Dynamic Web Project<ept id=\"p8\">**</ept>, and click <bpt id=\"p9\">**</bpt>Next<ept id=\"p9\">**</ept>.) For purposes of this tutorial, name the project <bpt id=\"p10\">**</bpt>MyACSHelloWorld<ept id=\"p10\">**</ept>.",
      "pos": [
        14059,
        14375
      ]
    },
    {
      "content": "(Ensure you use this name, subsequent steps in this tutorial expect your WAR file to be named MyACSHelloWorld).",
      "pos": [
        14376,
        14487
      ]
    },
    {
      "content": "Your screen will appear similar to the following:",
      "pos": [
        14488,
        14537
      ]
    },
    {
      "content": "![Create a Hello World project for ACS exampple][create_acs_hello_world]",
      "pos": [
        14543,
        14615
      ]
    },
    {
      "pos": [
        14621,
        14638
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Within Eclipse's Project Explorer view, expand <bpt id=\"p1\">**</bpt>MyACSHelloWorld<ept id=\"p1\">**</ept>.",
      "pos": [
        14642,
        14709
      ]
    },
    {
      "content": "Right-click <bpt id=\"p1\">**</bpt>WebContent<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>JSP File<ept id=\"p3\">**</ept>.",
      "pos": [
        14710,
        14781
      ]
    },
    {
      "content": "In the <bpt id=\"p1\">**</bpt>New JSP File<ept id=\"p1\">**</ept> dialog, name the file <bpt id=\"p2\">**</bpt>index.jsp<ept id=\"p2\">**</ept>.",
      "pos": [
        14785,
        14845
      ]
    },
    {
      "content": "Keep the parent folder as MyACSHelloWorld/WebContent, as shown in the following:",
      "pos": [
        14846,
        14926
      ]
    },
    {
      "content": "![Add a JSP file for ACS example][add_jsp_file_acs]",
      "pos": [
        14932,
        14983
      ]
    },
    {
      "pos": [
        14989,
        15004
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        15009,
        15100
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Select JSP Template<ept id=\"p1\">**</ept> dialog, select <bpt id=\"p2\">**</bpt>New JSP File (html)<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>Finish<ept id=\"p3\">**</ept>."
    },
    {
      "content": "When the index.jsp file opens in Eclipse, add in text to display <bpt id=\"p1\">**</bpt>Hello ACS World!<ept id=\"p1\">**</ept> within the existing <ph id=\"ph1\">`&lt;body&gt;`</ph> element.",
      "pos": [
        15104,
        15227
      ]
    },
    {
      "content": "Your updated <ph id=\"ph1\">`&lt;body&gt;`</ph> content should appear as the following:",
      "pos": [
        15228,
        15289
      ]
    },
    {
      "content": "Save index.jsp.",
      "pos": [
        15387,
        15402
      ]
    },
    {
      "content": "Add the ACS Filter library to your application",
      "pos": [
        15409,
        15455
      ]
    },
    {
      "pos": [
        15460,
        15586
      ],
      "content": "In Eclipse's Project Explorer, right-click <bpt id=\"p1\">**</bpt>MyACSHelloWorld<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Build Path<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Configure Build Path<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        15590,
        15653
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Java Build Path<ept id=\"p1\">**</ept> dialog, click the <bpt id=\"p2\">**</bpt>Libraries<ept id=\"p2\">**</ept> tab."
    },
    {
      "pos": [
        15657,
        15679
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Add Library<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Azure Access Control Services Filter (by MS Open Tech)<ept id=\"p1\">**</ept> and then click <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>.",
      "pos": [
        15683,
        15772
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Azure Access Control Services Filter<ept id=\"p1\">**</ept> dialog is displayed.",
      "pos": [
        15773,
        15838
      ]
    },
    {
      "content": "(The <bpt id=\"p1\">**</bpt>Location<ept id=\"p1\">**</ept> field may have a different path, depending on where you installed Eclipse, and the version number could be different, depending on software updates.)",
      "pos": [
        15840,
        16007
      ]
    },
    {
      "content": "![Add ACS Filter library][add_acs_filter_lib]",
      "pos": [
        16013,
        16058
      ]
    },
    {
      "pos": [
        16063,
        16313
      ],
      "content": "Using a browser opened to the <bpt id=\"p1\">**</bpt>Login Page Integration<ept id=\"p1\">**</ept> page of the Management Portal, copy the URL listed in the <bpt id=\"p2\">**</bpt>Option 1: Link to an ACS-hosted login page<ept id=\"p2\">**</ept> field and paste it into the <bpt id=\"p3\">**</bpt>ACS Authentication Endpoint<ept id=\"p3\">**</ept> field of the Eclipse dialog."
    },
    {
      "pos": [
        16317,
        16530
      ],
      "content": "Using a browser opened to the <bpt id=\"p1\">**</bpt>Edit Relying Party Application<ept id=\"p1\">**</ept> page of the Management Portal, copy the URL listed in the <bpt id=\"p2\">**</bpt>Realm<ept id=\"p2\">**</ept> field and paste it into the <bpt id=\"p3\">**</bpt>Relying Party Realm<ept id=\"p3\">**</ept> field of the Eclipse dialog."
    },
    {
      "content": "Within the <bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> section of the Eclipse dialog, if you want to use an existing certificate, click <bpt id=\"p2\">**</bpt>Browse<ept id=\"p2\">**</ept>, navigate to the certificate you want to use, select it, and click <bpt id=\"p3\">**</bpt>Open<ept id=\"p3\">**</ept>.",
      "pos": [
        16534,
        16726
      ]
    },
    {
      "content": "Or, if you want to create a new certificate, click <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> to display the <bpt id=\"p2\">**</bpt>New Certificate<ept id=\"p2\">**</ept> dialog, then specify the password, name of the .cer file, and name of the .pfx file for the new certificate.",
      "pos": [
        16727,
        16929
      ]
    },
    {
      "content": "Check <bpt id=\"p1\">**</bpt>Embed the certificate in the WAR file<ept id=\"p1\">**</ept>.",
      "pos": [
        16933,
        16981
      ]
    },
    {
      "content": "Embedding the certificate in this manner includes it in your deployment without requiring you to manually add it as a component.",
      "pos": [
        16982,
        17110
      ]
    },
    {
      "content": "(If instead you must store your certificate externally from your WAR file, you could add the certificate as a role component and uncheck <bpt id=\"p1\">**</bpt>Embed the certificate in the WAR file<ept id=\"p1\">**</ept>.)",
      "pos": [
        17111,
        17291
      ]
    },
    {
      "content": "[Optional] Keep <bpt id=\"p1\">**</bpt>Require HTTPS connections<ept id=\"p1\">**</ept> checked.",
      "pos": [
        17295,
        17349
      ]
    },
    {
      "content": "If you set this option, you'll need to access your application using the HTTPS protocol.",
      "pos": [
        17350,
        17438
      ]
    },
    {
      "content": "If you don't want to require HTTPS connections, uncheck this option.",
      "pos": [
        17439,
        17507
      ]
    },
    {
      "pos": [
        17512,
        17624
      ],
      "content": "For a deployment to the compute emulator, your <bpt id=\"p1\">**</bpt>Azure ACS Filter<ept id=\"p1\">**</ept> settings will look similar to the following."
    },
    {
      "content": "![Azure ACS Filter settings for a deployment to the compute emulator][add_acs_filter_lib_emulator]",
      "pos": [
        17630,
        17728
      ]
    },
    {
      "pos": [
        17734,
        17751
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        17756,
        17852
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept> when presented with with a dialog box stating that a web.xml file will be created."
    },
    {
      "pos": [
        17857,
        17910
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to close the <bpt id=\"p2\">**</bpt>Java Build Path<ept id=\"p2\">**</ept> dialog."
    },
    {
      "content": "Deploy to the compute emulator",
      "pos": [
        17915,
        17945
      ]
    },
    {
      "pos": [
        17950,
        18068
      ],
      "content": "In Eclipse's Project Explorer, right-click <bpt id=\"p1\">**</bpt>MyACSHelloWorld<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Azure<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Package for Azure<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        18072,
        18140
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Project name<ept id=\"p1\">**</ept>, type <bpt id=\"p2\">**</bpt>MyAzureACSProject<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>Next<ept id=\"p3\">**</ept>."
    },
    {
      "content": "Select a JDK and application server.",
      "pos": [
        18144,
        18180
      ]
    },
    {
      "content": "(These steps are covered in detail in the <bpt id=\"p1\">[</bpt>Creating a Hello World Application for Azure in Eclipse<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx)</ept> tutorial).",
      "pos": [
        18181,
        18359
      ]
    },
    {
      "pos": [
        18363,
        18380
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        18384,
        18427
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Run in Azure Emulator<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "After your Java web application starts in the compute emulator, close all instances of your browser (so that any current browser sessions do not interfere with your ACS login test).",
      "pos": [
        18431,
        18612
      ]
    },
    {
      "content": "Run your application by opening <bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">http://localhost:8080/MyACSHelloWorld/&gt;</ept> in your browser (or <bpt id=\"p2\">&lt;</bpt><ept id=\"p2\">https://localhost:8080/MyACSHelloWorld/&gt;</ept> if you checked <bpt id=\"p3\">**</bpt>Require HTTPS connections<ept id=\"p3\">**</ept>).",
      "pos": [
        18616,
        18797
      ]
    },
    {
      "content": "You should be prompted for a Windows Live ID login, then you should be taken to the return URL specified for your relying party application.",
      "pos": [
        18798,
        18938
      ]
    },
    {
      "pos": [
        18944,
        19035
      ],
      "content": "When you have finished viewing your application, click the <bpt id=\"p1\">**</bpt>Reset Azure Emulator<ept id=\"p1\">**</ept> button."
    },
    {
      "content": "Deploy to Azure",
      "pos": [
        19040,
        19055
      ]
    },
    {
      "content": "To deploy to Azure, you'll need to change the relying party realm and return URL for your ACS namespace.",
      "pos": [
        19057,
        19161
      ]
    },
    {
      "content": "Within the Azure Management Portal, in the <bpt id=\"p1\">**</bpt>Edit Relying Party Application<ept id=\"p1\">**</ept> page, modify <bpt id=\"p2\">**</bpt>Realm<ept id=\"p2\">**</ept> to be the URL of your deployed site.",
      "pos": [
        19166,
        19303
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>example<ept id=\"p1\">**</ept> with the DNS name you specified for your deployment.",
      "pos": [
        19304,
        19376
      ]
    },
    {
      "content": "![Relying party realm for use in production][relying_party_realm_production]",
      "pos": [
        19382,
        19458
      ]
    },
    {
      "content": "Modify <bpt id=\"p1\">**</bpt>Return URL<ept id=\"p1\">**</ept> to be the URL of your application.",
      "pos": [
        19463,
        19519
      ]
    },
    {
      "content": "Replace <bpt id=\"p1\">**</bpt>example<ept id=\"p1\">**</ept> with the DNS name you specified for your deployment.",
      "pos": [
        19520,
        19592
      ]
    },
    {
      "content": "![Relying party return URL for use in production][relying_party_return_url_production]",
      "pos": [
        19598,
        19684
      ]
    },
    {
      "pos": [
        19689,
        19769
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> to save your updated replying party realm and return URL changes."
    },
    {
      "pos": [
        19773,
        19872
      ],
      "content": "Keep the <bpt id=\"p1\">**</bpt>Login Page Integration<ept id=\"p1\">**</ept> page open in your browser, you'll need to copy from it shortly."
    },
    {
      "pos": [
        19876,
        20002
      ],
      "content": "In Eclipse's Project Explorer, right-click <bpt id=\"p1\">**</bpt>MyACSHelloWorld<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Build Path<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Configure Build Path<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        20006,
        20107
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Libraries<ept id=\"p1\">**</ept> tab, click <bpt id=\"p2\">**</bpt>Azure Access Control Services Filter<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Edit<ept id=\"p3\">**</ept>."
    },
    {
      "pos": [
        20111,
        20361
      ],
      "content": "Using a browser opened to the <bpt id=\"p1\">**</bpt>Login Page Integration<ept id=\"p1\">**</ept> page of the Management Portal, copy the URL listed in the <bpt id=\"p2\">**</bpt>Option 1: Link to an ACS-hosted login page<ept id=\"p2\">**</ept> field and paste it into the <bpt id=\"p3\">**</bpt>ACS Authentication Endpoint<ept id=\"p3\">**</ept> field of the Eclipse dialog."
    },
    {
      "pos": [
        20365,
        20578
      ],
      "content": "Using a browser opened to the <bpt id=\"p1\">**</bpt>Edit Relying Party Application<ept id=\"p1\">**</ept> page of the Management Portal, copy the URL listed in the <bpt id=\"p2\">**</bpt>Realm<ept id=\"p2\">**</ept> field and paste it into the <bpt id=\"p3\">**</bpt>Relying Party Realm<ept id=\"p3\">**</ept> field of the Eclipse dialog."
    },
    {
      "content": "Within the <bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> section of the Eclipse dialog, if you want to use an existing certificate, click <bpt id=\"p2\">**</bpt>Browse<ept id=\"p2\">**</ept>, navigate to the certificate you want to use, select it, and click <bpt id=\"p3\">**</bpt>Open<ept id=\"p3\">**</ept>.",
      "pos": [
        20582,
        20774
      ]
    },
    {
      "content": "Or, if you want to create a new certificate, click <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> to display the <bpt id=\"p2\">**</bpt>New Certificate<ept id=\"p2\">**</ept> dialog, then specify the password, name of the .cer file, and name of the .pfx file for the new certificate.",
      "pos": [
        20775,
        20977
      ]
    },
    {
      "pos": [
        20982,
        21097
      ],
      "content": "Keep <bpt id=\"p1\">**</bpt>Embed the certificate in the WAR file<ept id=\"p1\">**</ept> checked, assuming you want to embed the certificate in the WAR file."
    },
    {
      "content": "[Optional] Keep <bpt id=\"p1\">**</bpt>Require HTTPS connections<ept id=\"p1\">**</ept> checked.",
      "pos": [
        21102,
        21156
      ]
    },
    {
      "content": "If you set this option, you'll need to access your application using the HTTPS protocol.",
      "pos": [
        21157,
        21245
      ]
    },
    {
      "content": "If you don't want to require HTTPS connections, uncheck this option.",
      "pos": [
        21246,
        21314
      ]
    },
    {
      "content": "For a deployment to Azure, your Azure ACS Filter settings will look similar to the following.",
      "pos": [
        21319,
        21412
      ]
    },
    {
      "content": "![Azure ACS Filter settings for a production deployment][add_acs_filter_lib_production]",
      "pos": [
        21418,
        21505
      ]
    },
    {
      "pos": [
        21511,
        21565
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> to close the <bpt id=\"p2\">**</bpt>Edit Library<ept id=\"p2\">**</ept> dialog."
    },
    {
      "pos": [
        21570,
        21638
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> to close the <bpt id=\"p2\">**</bpt>Properties for MyACSHelloWorld<ept id=\"p2\">**</ept> dialog."
    },
    {
      "content": "In Eclipse, click the <bpt id=\"p1\">**</bpt>Publish to Azure Cloud<ept id=\"p1\">**</ept> button.",
      "pos": [
        21643,
        21699
      ]
    },
    {
      "content": "Respond to the prompts, similar as done in the <bpt id=\"p1\">**</bpt>To deploy your application to Azure<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">[</bpt>Creating a Hello World Application for Azure in Eclipse<ept id=\"p2\">](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx)</ept> topic.",
      "pos": [
        21700,
        21934
      ]
    },
    {
      "content": "After your web application has been deployed, close any open browser sessions, run your web application, and you should be prompted to sign in with Windows Live ID credentials, followed by being sent to the return URL of your relying party application.",
      "pos": [
        21937,
        22189
      ]
    },
    {
      "pos": [
        22191,
        22465
      ],
      "content": "When you are done using your ACS Hello World application, remember to delete the deployment (you can learn how to delete a deployment in the <bpt id=\"p1\">[</bpt>Creating a Hello World Application for Azure in Eclipse<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx)</ept> topic)."
    },
    {
      "pos": [
        22471,
        22506
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next_steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "content": "For an examination of the Security Assertion Markup Language (SAML) returned by ACS to your application, see <bpt id=\"p1\">[</bpt>How to view SAML returned by the Azure Access Control Service<ept id=\"p1\">][]</ept>.",
      "pos": [
        22508,
        22683
      ]
    },
    {
      "content": "To further explore ACS's functionality and to experiment with more sophisticated scenarios, see <bpt id=\"p1\">[</bpt>Access Control Service 2.0<ept id=\"p1\">][]</ept>.",
      "pos": [
        22684,
        22811
      ]
    },
    {
      "content": "Also, this example used the <bpt id=\"p1\">**</bpt>Embed the certificate in the WAR file<ept id=\"p1\">**</ept> option.",
      "pos": [
        22813,
        22890
      ]
    },
    {
      "content": "This option makes it simple to deploy the certificate.",
      "pos": [
        22891,
        22945
      ]
    },
    {
      "content": "If instead you want to keep your signing certificate separate from your WAR file, you can use the following technique:",
      "pos": [
        22946,
        23064
      ]
    },
    {
      "content": "Within the <bpt id=\"p1\">**</bpt>Security<ept id=\"p1\">**</ept> section of the <bpt id=\"p2\">**</bpt>Azure Access Control Services Filter<ept id=\"p2\">**</ept> dialog, type <bpt id=\"p3\">**</bpt>${env.JAVA_HOME}/mycert.cer<ept id=\"p3\">**</ept> and uncheck <bpt id=\"p4\">**</bpt>Embed the certificate in the WAR file<ept id=\"p4\">**</ept>.",
      "pos": [
        23069,
        23248
      ]
    },
    {
      "content": "(Adjust mycert.cer if your certificate file name is different.) Click <bpt id=\"p1\">**</bpt>Finish<ept id=\"p1\">**</ept> to close the dialog.",
      "pos": [
        23249,
        23350
      ]
    },
    {
      "pos": [
        23354,
        23570
      ],
      "content": "Copy the certificate as a component in your deployment: In Eclipse's Project Explorer, expand <bpt id=\"p1\">**</bpt>MyAzureACSProject<ept id=\"p1\">**</ept>, right-click <bpt id=\"p2\">**</bpt>WorkerRole1<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Properties<ept id=\"p3\">**</ept>, expand <bpt id=\"p4\">**</bpt>Azure Role<ept id=\"p4\">**</ept>, and click <bpt id=\"p5\">**</bpt>Components<ept id=\"p5\">**</ept>."
    },
    {
      "pos": [
        23574,
        23588
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        23592,
        23628
      ],
      "content": "Within the <bpt id=\"p1\">**</bpt>Add Component<ept id=\"p1\">**</ept> dialog:"
    },
    {
      "pos": [
        23636,
        23662
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Import<ept id=\"p1\">**</ept> section:"
    },
    {
      "pos": [
        23674,
        23745
      ],
      "content": "Use the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> button to navigate to the certificate you want to use."
    },
    {
      "pos": [
        23758,
        23790
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Method<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>copy<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        23798,
        23865
      ],
      "content": "For <bpt id=\"p1\">**</bpt>As Name<ept id=\"p1\">**</ept>, click on the text box and accept the default name."
    },
    {
      "pos": [
        23873,
        23899
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>Deploy<ept id=\"p1\">**</ept> section:"
    },
    {
      "pos": [
        23911,
        23943
      ],
      "content": "For <bpt id=\"p1\">**</bpt>Method<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>copy<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        23955,
        23998
      ],
      "content": "For <bpt id=\"p1\">**</bpt>To directory<ept id=\"p1\">**</ept>, type <bpt id=\"p2\">**</bpt>%JAVA_HOME%<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        24006,
        24073
      ],
      "content": "Your <bpt id=\"p1\">**</bpt>Add Component<ept id=\"p1\">**</ept> dialog should look similar to the following."
    },
    {
      "content": "![Add certificate component][add_cert_component]",
      "pos": [
        24083,
        24131
      ]
    },
    {
      "pos": [
        24140,
        24153
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>."
    },
    {
      "content": "At this point, your certificate would be included in your deployment.",
      "pos": [
        24155,
        24224
      ]
    },
    {
      "content": "Note that regardless of whether you embed the certificate in the WAR file or add it as a component to your deployment, you need to upload the certificate to your namespace as described in the <bpt id=\"p1\">[</bpt>Upload a certificate to your ACS namespace<ept id=\"p1\">][]</ept> section.",
      "pos": [
        24225,
        24472
      ]
    },
    {
      "content": "test",
      "pos": [
        27225,
        27229
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"How to use Access Control (Java) | Microsoft Azure\"\n    description=\"Learn how to develop and use Access Control with Java in Azure.\"\n    services=\"active-directory\" \n    documentationCenter=\"java\"\n    authors=\"rmcmurray\"\n    manager=\"wpickett\"\n    editor=\"jimbe\" />\n\n<tags\n    ms.service=\"active-directory\"\n    ms.workload=\"identity\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"Java\"\n    ms.topic=\"article\"\n    ms.date=\"06/03/2015\"\n    ms.author=\"robmcm\" />\n\n# How to Authenticate Web Users with Azure Access Control Service Using Eclipse\n\nThis guide will show you how to use the Azure Access Control Service (ACS) within the Azure Plugin for Eclipse with Java (by Microsoft Open Technologies). For more information on ACS, see the [Next steps](#next_steps) section.\n\n> [AZURE.NOTE]\n> The Azure Access Services Control Filter (by Microsoft Open Technologies) is a community technology preview. As pre-release software, it is not formally supported by Microsoft Open Technologies, Inc. nor Microsoft.\n\n## What is ACS?\n\nMost developers are not identity experts and generally do not want to\nspend time developing authentication and authorization mechanisms for\ntheir applications and services. ACS is an Azure service that\nprovides an easy way of authenticating users who need to access your web\napplications and services without having to factor complex\nauthentication logic into your code.\n\nThe following features are available in ACS:\n\n-   Integration with Windows Identity Foundation (WIF).\n-   Support for popular web identity providers (IPs) including Windows Live ID, Google, Yahoo!, and Facebook.\n-   Support for Active Directory Federation Services (AD FS) 2.0.\n-   An Open Data Protocol (OData)-based management service that provides programmatic access to ACS settings.\n-   A Management Portal that allows administrative access to the ACS settings.\n\nFor more information about ACS, see [Access Control Service 2.0][].\n\n## Concepts\n\nAzure ACS is built on the principals of claims-based identity -\na consistent approach to creating authentication mechanisms for\napplications running on-premises or in the cloud. Claims-based identity\nprovides a common way for applications and services to acquire the\nidentity information they need about users inside their organization, in\nother organizations, and on the Internet.\n\nTo complete the tasks in this guide, you should understand the following\nconcepts:\n\n**Client** - In the context of this how-to guide, this is a browser that\nis attempting to gain access to your web application.\n\n**Relying party (RP) application** - An RP application is a website or\nservice that outsources authentication to one external authority. In\nidentity jargon, we say that the RP trusts that authority. This guide\nexplains how to configure your application to trust ACS.\n\n**Token** - A token is a collection of security data that is usually\nissued upon successful authentication of a user. It contains a set of *claims*, attributes of the authenticated user. A claim can represent a\nuser's name, an identifier for a role a user belongs to, a user's age,\nand so on. A token is usually digitally signed, which means it can\nalways be sourced back to its issuer, and its content cannot be tampered\nwith. A user gains access to a RP application by presenting a valid\ntoken issued by an authority that the RP application trusts.\n\n**Identity Provider (IP)** - An IP is an authority that authenticates\nuser identities and issues security tokens. The actual work of issuing\ntokens is implemented though a special service called Security Token\nService (STS). Typical examples of IPs include Windows Live ID,\nFacebook, business user repositories (like Active Directory), and so on.\nWhen ACS is configured to trust an IP, the system will accept and\nvalidate tokens issued by that IP. ACS can trust multiple IPs at once,\nwhich means that when your application trusts ACS, you can instantly\noffer your application to all the authenticated users from all the IPs\nthat ACS trusts on your behalf.\n\n**Federation Provider (FP)** - IPs have direct knowledge of users,\nand authenticate them using their credentials and issue claims about what\nthey know about them. A Federation Provider (FP) is a different kind of\nauthority: rather than authenticating users directly, it acts as an\nintermediary and brokers authentication between one RP and one or more\nIPs. Both IPs and FPs issue security tokens, hence they both use\nSecurity Token Services (STS). ACS is one FP.\n\n**ACS Rule Engine** - The logic used to transform incoming tokens from\ntrusted IPs to tokens meant to be consumed by the RP is codified in form\nof simple claims transformation rules. ACS features a rule engine that\ntakes care of applying whatever transformation logic you specified for\nyour RP.\n\n**ACS Namespace** - A namespace is a top level partition of ACS that you\nuse for organizing your settings. A namespace holds a list of IPs you\ntrust, the RP applications you want to serve, the rules that you expect\nthe rule engine to process incoming tokens with, and so on. A namespace\nexposes various endpoints that will be used by the application and the\ndeveloper to get ACS to perform its function.\n\nThe following figure shows how ACS authentication works with a web\napplication:\n\n![ACS flow diagram][acs_flow]\n\n1.  The client (in this case a browser) requests a page from the RP.\n2.  Since the request is not yet authenticated, the RP redirects the user to the authority that it trusts, which is ACS. The ACS presents the user with the choice of IPs that were specified for this RP. The user selects the appropriate IP.\n3.  The client browses to the IP's authentication page, and prompts the user to log on.\n4.  After the client is authenticated (for example, the identity credentials are entered), the IP issues a security token.\n5.  After issuing a security token, the IP redirects the client to ACS and the client sends the security token issued by the IP to ACS.\n6.  ACS validates the security token issued by the IP, inputs the identity claims in this token into the ACS rules engine, calculates the output identity claims, and issues a new security token that contains these output claims.\n7.  ACS redirects the client to the RP. The client sends the new security token issued by ACS to the RP. The RP validates the signature on the security token issued by ACS, validates the claims in this token, and returns the page that was originally requested.\n\n## Prerequisites\n\nTo complete the tasks in this guide, you will need the following:\n\n- A Java Developer Kit (JDK), v 1.6 or later.\n- Eclipse IDE for Java EE Developers, Indigo or later. This can be downloaded from <http://www.eclipse.org/downloads/>. \n- A distribution of a Java-based web server or application server, such as Apache Tomcat, GlassFish, JBoss Application Server, or Jetty.\n- an Azure subscription, which can be acquired from <http://www.microsoft.com/windowsazure/offers/>.\n- The Azure Plugin for Eclipse with Java (by Microsoft Open Technologies), April 2014 release. For more information, see [Installing the Azure Plugin for Eclipse with Java (by Microsoft Open Technologies)](http://msdn.microsoft.com/en-us/library/windowsazure/hh690946.aspx).\n- An X.509 certificate to use with your application. You will need this certificate in both public certificate (.cer) and Personal Information Exchange (.PFX) format. (Options for creating this certificate will be described later in this tutorial).\n- Familiarity with the Azure compute emulator and deployment techniques discussed at [Creating a Hello World Application for Azure in Eclipse](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx).\n\n## Create an ACS Namespace\n\nTo begin using Access Control Service (ACS) in Azure, you must\ncreate an ACS namespace. The namespace provides a unique scope for\naddressing ACS resources from within your application.\n\n1. Log into the [Azure Management Portal][].\n2. Click **Active Directory**. \n3. To create a new Access Control namespace, click **New**, click **App Services**, click **Access Control**, and then click **Quick Create**. \n4. Enter a name for the namespace. Azure verifies that the name is unique.\n5. Select the region in which the namespace is used. For the best performance, use the region in which you are deploying your application.\n6. If you have more than one subscription, select the subscription that you want to use for the ACS namespace.\n7. Click **Create**.\n\nAzure creates and activates the namespace. Wait until the status of the new namespace is **Active** before continuing. \n\n## Add identity providers\n\nIn this task, you add IPs to use with your RP application for\nauthentication. For demonstration purposes, this task shows how to add\nWindows Live as an IP, but you could use any of the IPs listed in the ACS\nManagement Portal.\n\n\n1.  In the [Azure Management Portal][], click **Active Directory**, select an Access Control namespace, and then click **Manage**. The ACS Management Portal opens.\n2.  In the left navigation pane of the ACS Management Portal, click **Identity providers**.\n3.  Windows Live ID is enabled by default, and cannot be deleted. For purposes of this tutorial, only Windows Live ID is used. This screen, however, is where you could add other IPs, by clicking the **Add** button.\n\nWindows Live ID is now enabled as an IP for your ACS namespace. Next, you\nspecify your Java web application (to be created later) as an RP.\n\n## Add a relying party application\n\nIn this task, you configure ACS to recognize your Java web\napplication as a valid RP application.\n\n1.  On the ACS Management Portal, click **Relying party applications**.\n2.  On the **Relying Party Applications** page, click **Add**.\n3.  On the **Add Relying Party Application** page, do the following:\n    1.  In **Name**, type the name of the RP. For purposes of this tutorial, type **Azure Web\n        App**.\n    2.  In **Mode**, select **Enter settings manually**.\n    3.  In **Realm**, type the URI to which the security token issued by ACS applies. For this task, type **http://localhost:8080/**.\n        ![Relying party realm for use in compute emulator][relying_party_realm_emulator]\n    4.  In **Return URL,** type the URL to which ACS returns the security token. For this task, type **http://localhost:8080/MyACSHelloWorld/index.jsp**\n        ![Relying party return URL for use in compute emulator][relying_party_return_url_emulator]\n    5.  Accept the default values in the rest of the fields.\n\n4.  Click **Save**.\n\nYou have now successfully configured your Java web application when it is run in the Azure compute emulator (at\nhttp://localhost:8080/) to be an RP in your ACS namespace. Next, create\nthe rules that ACS uses to process claims for the RP.\n\n## Create rules\n\nIn this task, you define the rules that drive how claims are passed from\nIPs to your RP. For the purpose of this guide, we will simply configure\nACS to copy the input claim types and values directly in the output\ntoken, without filtering or modifying them.\n\n1.  On the ACS Management Portal main page, click **Rule groups**.\n2.  On the **Rule Groups** page, click **Default Rule Group for Azure Web App**.\n3.  On the **Edit Rule Group** page, click **Generate**.\n4.  On the **Generate Rules: Default Rule Group for Azure Web App** page, ensure Windows Live ID is checked and then click **Generate**.    \n5.  On the **Edit Rule Group** page, click **Save**.\n\n## Upload a certificate to your ACS namespace\n\nIn this task, you upload a .PFX certificate that will be used to sign token requests created by your ACS namespace.\n\n1.  On the ACS Management Portal main page, click **Certificates and keys**.\n2.  On the **Certificates and Keys** page, click **Add** above **Token Signing**.\n3.  On the **Add Token-Signing Certificate or Key** page:\n    1. In the **Used for** section, click **Relying Party Application** and select **Azure Web App** (which you previously set as the name of your relying party application).\n    2. In the **Type** section, select **X.509 Certificate**.\n    3. In the **Certificate** section, click the browse button and navigate to the X.509 certificate file that you want to use. This will be a .PFX file. Select the file, click **Open**,  and then enter the certificate password in the **Password** text box. Note that for testing purposes, you may use a self-signed-certificate. To create a self-signed certificate, use the **New** button in the **ACS Filter Library** dialog (described later), or use the **encutil.exe** utility from the [project website][] of the Azure Starter Kit for Java (by Microsoft Open Technologies).\n    4. Ensure that **Make Primary** is checked. Your **Add Token-Signing Certificate or Key** page should look similar to the following.\n        ![Add token-signing certificate][add_token_signing_cert]\n    5. Click **Save** to save your settings and close the **Add Token-Signing Certificate or Key** page.\n\nNext, review the information in the Application Integration page and\ncopy the URI that you will need to configure your Java web\napplication to use ACS.\n\n## Review the Application Integration page\n\nYou can find all the information and the code necessary to configure\nyour Java web application (the RP application) to work with ACS on\nthe Application Integration page of the ACS Management Portal. You will\nneed this information when configuring your Java web application for\nfederated authentication.\n\n1.  On the ACS Management Portal, click **Application integration**.  \n2.  In the **Application Integration** page, click **Login Pages**.\n3.  In the **Login Page Integration** page, click **Azure Web App**.\n\nIn the **Login Page Integration: Azure Web App** page, the URL listed in **Option 1: Link to an ACS-hosted login page** will be used in your Java web application. You will need this value when you add the Azure Access Control Services Filter library to your Java application.\n\n## Create a Java web application\n1. Within Eclipse, at the menu click **File**, click **New**, and then click **Dynamic Web Project**. (If you don't see **Dynamic Web Project** listed as an available project after clicking **File**, **New**, then do the following: click **File**, click **New**, click **Project**, expand **Web**, click **Dynamic Web Project**, and click **Next**.) For purposes of this tutorial, name the project **MyACSHelloWorld**. (Ensure you use this name, subsequent steps in this tutorial expect your WAR file to be named MyACSHelloWorld). Your screen will appear similar to the following:\n\n    ![Create a Hello World project for ACS exampple][create_acs_hello_world]\n\n    Click **Finish**.\n2. Within Eclipse's Project Explorer view, expand **MyACSHelloWorld**. Right-click **WebContent**, click **New**, and then click **JSP File**.\n3. In the **New JSP File** dialog, name the file **index.jsp**. Keep the parent folder as MyACSHelloWorld/WebContent, as shown in the following:\n\n    ![Add a JSP file for ACS example][add_jsp_file_acs]\n\n    Click **Next**.\n\n4. In the **Select JSP Template** dialog, select **New JSP File (html)** and click **Finish**.\n5. When the index.jsp file opens in Eclipse, add in text to display **Hello ACS World!** within the existing `<body>` element. Your updated `<body>` content should appear as the following:\n\n        <body>\n          <b><% out.println(\"Hello ACS World!\"); %></b>\n        </body>\n    \n    Save index.jsp.\n  \n## Add the ACS Filter library to your application\n\n1. In Eclipse's Project Explorer, right-click **MyACSHelloWorld**, click **Build Path**, and then click **Configure Build Path**.\n2. In the **Java Build Path** dialog, click the **Libraries** tab.\n3. Click **Add Library**.\n4. Click **Azure Access Control Services Filter (by MS Open Tech)** and then click **Next**. The **Azure Access Control Services Filter** dialog is displayed.  (The **Location** field may have a different path, depending on where you installed Eclipse, and the version number could be different, depending on software updates.)\n\n    ![Add ACS Filter library][add_acs_filter_lib]\n\n5. Using a browser opened to the **Login Page Integration** page of the Management Portal, copy the URL listed in the **Option 1: Link to an ACS-hosted login page** field and paste it into the **ACS Authentication Endpoint** field of the Eclipse dialog.\n6. Using a browser opened to the **Edit Relying Party Application** page of the Management Portal, copy the URL listed in the **Realm** field and paste it into the **Relying Party Realm** field of the Eclipse dialog.\n7. Within the **Security** section of the Eclipse dialog, if you want to use an existing certificate, click **Browse**, navigate to the certificate you want to use, select it, and click **Open**. Or, if you want to create a new certificate, click **New** to display the **New Certificate** dialog, then specify the password, name of the .cer file, and name of the .pfx file for the new certificate.\n8. Check **Embed the certificate in the WAR file**. Embedding the certificate in this manner includes it in your deployment without requiring you to manually add it as a component. (If instead you must store your certificate externally from your WAR file, you could add the certificate as a role component and uncheck **Embed the certificate in the WAR file**.)\n9. [Optional] Keep **Require HTTPS connections** checked. If you set this option, you'll need to access your application using the HTTPS protocol. If you don't want to require HTTPS connections, uncheck this option.\n10. For a deployment to the compute emulator, your **Azure ACS Filter** settings will look similar to the following.\n\n    ![Azure ACS Filter settings for a deployment to the compute emulator][add_acs_filter_lib_emulator]\n\n11. Click **Finish**.\n12. Click **Yes** when presented with with a dialog box stating that a web.xml file will be created.\n13. Click **OK** to close the **Java Build Path** dialog.\n\n## Deploy to the compute emulator\n\n1. In Eclipse's Project Explorer, right-click **MyACSHelloWorld**, click **Azure**, and then click **Package for Azure**.\n2. For **Project name**, type **MyAzureACSProject** and click **Next**.\n3. Select a JDK and application server. (These steps are covered in detail in the [Creating a Hello World Application for Azure in Eclipse](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx) tutorial).\n4. Click **Finish**.\n5. Click the **Run in Azure Emulator** button.\n6. After your Java web application starts in the compute emulator, close all instances of your browser (so that any current browser sessions do not interfere with your ACS login test).\n7. Run your application by opening <http://localhost:8080/MyACSHelloWorld/> in your browser (or <https://localhost:8080/MyACSHelloWorld/> if you checked **Require HTTPS connections**). You should be prompted for a Windows Live ID login, then you should be taken to the return URL specified for your relying party application.\n99.  When you have finished viewing your application, click the **Reset Azure Emulator** button.\n\n## Deploy to Azure\n\nTo deploy to Azure, you'll need to change the relying party realm and return URL for your ACS namespace.\n\n1. Within the Azure Management Portal, in the **Edit Relying Party Application** page, modify **Realm** to be the URL of your deployed site. Replace **example** with the DNS name you specified for your deployment.\n\n    ![Relying party realm for use in production][relying_party_realm_production]\n\n2. Modify **Return URL** to be the URL of your application. Replace **example** with the DNS name you specified for your deployment.\n\n    ![Relying party return URL for use in production][relying_party_return_url_production]\n\n3. Click **Save** to save your updated replying party realm and return URL changes.\n4. Keep the **Login Page Integration** page open in your browser, you'll need to copy from it shortly.\n5. In Eclipse's Project Explorer, right-click **MyACSHelloWorld**, click **Build Path**, and then click **Configure Build Path**.\n6. Click the **Libraries** tab, click **Azure Access Control Services Filter**, and then click **Edit**.\n7. Using a browser opened to the **Login Page Integration** page of the Management Portal, copy the URL listed in the **Option 1: Link to an ACS-hosted login page** field and paste it into the **ACS Authentication Endpoint** field of the Eclipse dialog.\n8. Using a browser opened to the **Edit Relying Party Application** page of the Management Portal, copy the URL listed in the **Realm** field and paste it into the **Relying Party Realm** field of the Eclipse dialog.\n9. Within the **Security** section of the Eclipse dialog, if you want to use an existing certificate, click **Browse**, navigate to the certificate you want to use, select it, and click **Open**. Or, if you want to create a new certificate, click **New** to display the **New Certificate** dialog, then specify the password, name of the .cer file, and name of the .pfx file for the new certificate.\n10. Keep **Embed the certificate in the WAR file** checked, assuming you want to embed the certificate in the WAR file.\n11. [Optional] Keep **Require HTTPS connections** checked. If you set this option, you'll need to access your application using the HTTPS protocol. If you don't want to require HTTPS connections, uncheck this option.\n12. For a deployment to Azure, your Azure ACS Filter settings will look similar to the following.\n\n    ![Azure ACS Filter settings for a production deployment][add_acs_filter_lib_production]\n\n13. Click **Finish** to close the **Edit Library** dialog.\n14. Click **OK** to close the **Properties for MyACSHelloWorld** dialog.\n15. In Eclipse, click the **Publish to Azure Cloud** button. Respond to the prompts, similar as done in the **To deploy your application to Azure** section of the [Creating a Hello World Application for Azure in Eclipse](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx) topic. \n\nAfter your web application has been deployed, close any open browser sessions, run your web application, and you should be prompted to sign in with Windows Live ID credentials, followed by being sent to the return URL of your relying party application.\n\nWhen you are done using your ACS Hello World application, remember to delete the deployment (you can learn how to delete a deployment in the [Creating a Hello World Application for Azure in Eclipse](http://msdn.microsoft.com/en-us/library/windowsazure/hh690944.aspx) topic).\n\n\n## <a name=\"next_steps\"></a>Next steps\n\nFor an examination of the Security Assertion Markup Language (SAML) returned by ACS to your application, see [How to view SAML returned by the Azure Access Control Service][]. To further explore ACS's functionality and to experiment with more sophisticated scenarios, see [Access Control Service 2.0][].\n\nAlso, this example used the **Embed the certificate in the WAR file** option. This option makes it simple to deploy the certificate. If instead you want to keep your signing certificate separate from your WAR file, you can use the following technique:\n\n1. Within the **Security** section of the **Azure Access Control Services Filter** dialog, type **${env.JAVA_HOME}/mycert.cer** and uncheck **Embed the certificate in the WAR file**. (Adjust mycert.cer if your certificate file name is different.) Click **Finish** to close the dialog.\n2. Copy the certificate as a component in your deployment: In Eclipse's Project Explorer, expand **MyAzureACSProject**, right-click **WorkerRole1**, click **Properties**, expand **Azure Role**, and click **Components**.\n3. Click **Add**.\n4. Within the **Add Component** dialog:\n    1. In the **Import** section:\n        1. Use the **File** button to navigate to the certificate you want to use. \n        2. For **Method**, select **copy**.\n    2. For **As Name**, click on the text box and accept the default name.\n    3. In the **Deploy** section:\n        1. For **Method**, select **copy**.\n        2. For **To directory**, type **%JAVA_HOME%**.\n    4. Your **Add Component** dialog should look similar to the following.\n\n        ![Add certificate component][add_cert_component]\n\n    5. Click **OK**.\n\nAt this point, your certificate would be included in your deployment. Note that regardless of whether you embed the certificate in the WAR file or add it as a component to your deployment, you need to upload the certificate to your namespace as described in the [Upload a certificate to your ACS namespace][] section.\n\n[What is ACS?]: #what-is\n[Concepts]: #concepts\n[Prerequisites]: #pre\n[Create a Java web application]: #create-java-app\n[Create an ACS Namespace]: #create-namespace\n[Add Identity Providers]: #add-IP\n[Add a Relying Party Application]: #add-RP\n[Create Rules]: #create-rules\n[Upload a certificate to your ACS namespace]: #upload-certificate\n[Review the Application Integration Page]: #review-app-int\n[Configure Trust between ACS and Your ASP.NET Web Application]: #config-trust\n[Add the ACS Filter library to your application]: #add_acs_filter_library\n[Deploy to the compute emulator]: #deploy_compute_emulator\n[Deploy to Azure]: #deploy_azure\n[Next steps]: #next_steps\n[project website]: http://wastarterkit4java.codeplex.com/releases/view/61026\n[How to view SAML returned by the Azure Access Control Service]: /en-us/develop/java/how-to-guides/view-saml-returned-by-acs/\n[Access Control Service 2.0]: http://go.microsoft.com/fwlink/?LinkID=212360\n[Windows Identity Foundation]: http://www.microsoft.com/download/en/details.aspx?id=17331\n[Windows Identity Foundation SDK]: http://www.microsoft.com/download/en/details.aspx?id=4451\n[Azure Management Portal]: https://manage.windowsazure.com\n[acs_flow]: ./media/active-directory-java-authenticate-users-access-control-eclipse/ACSFlow.png\n\n<!-- Eclipse-specific -->\n[add_acs_filter_lib]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddACSFilterLibrary.png\n[add_acs_filter_lib_emulator]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddACSFilterLibraryEmulator.png\n[add_acs_filter_lib_production]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddACSFilterLibraryProduction.png\n\n[relying_party_realm_emulator]: ./media/active-directory-java-authenticate-users-access-control-eclipse/RelyingPartyRealmEmulator.png\n[relying_party_return_url_emulator]: ./media/active-directory-java-authenticate-users-access-control-eclipse/RelyingPartyReturnURLEmulator.png\n[relying_party_realm_production]: ./media/active-directory-java-authenticate-users-access-control-eclipse/RelyingPartyRealmProduction.png\n[relying_party_return_url_production]: ./media/active-directory-java-authenticate-users-access-control-eclipse/RelyingPartyReturnURLProduction.png\n[add_cert_component]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddCertificateComponent.png\n[add_jsp_file_acs]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddJSPFileACS.png\n[create_acs_hello_world]: ./media/active-directory-java-authenticate-users-access-control-eclipse/CreateACSHelloWorld.png\n[add_token_signing_cert]: ./media/active-directory-java-authenticate-users-access-control-eclipse/AddTokenSigningCertificate.png\n \n\ntest\n"
}