{
  "nodes": [
    {
      "content": "Use Mobile Services to upload images to blob storage (Android) | Mobile Services",
      "pos": [
        28,
        108
      ]
    },
    {
      "content": "Learn how to use Mobile Services to upload images to Azure Storage and access the images from your Android app.",
      "pos": [
        128,
        239
      ]
    },
    {
      "content": "Upload images to Azure Storage from an Android  device",
      "pos": [
        579,
        633
      ]
    },
    {
      "content": "This topic shows how to enable your Android Azure Mobile Services app to upload images to Azure Storage.",
      "pos": [
        773,
        877
      ]
    },
    {
      "content": "Mobile Services uses a SQL Database to store data.",
      "pos": [
        880,
        930
      ]
    },
    {
      "content": "However, it's more efficient to store binary large object (BLOB) data in Azure Storage.",
      "pos": [
        931,
        1018
      ]
    },
    {
      "content": "In this tutorial you enable the Mobile Services quickstart app to take pictures with the Android camera, and upload the images to Azure Storage.",
      "pos": [
        1019,
        1163
      ]
    },
    {
      "content": "What you need to get started",
      "pos": [
        1170,
        1198
      ]
    },
    {
      "content": "Before you start this tutorial, you must first complete the Mobile Services quickstart: [Get started with Mobile Services].",
      "pos": [
        1200,
        1323
      ]
    },
    {
      "content": "This tutorial also requires the following:",
      "pos": [
        1326,
        1368
      ]
    },
    {
      "pos": [
        1372,
        1436
      ],
      "content": "An <bpt id=\"p1\">[</bpt>Azure Storage account<ept id=\"p1\">](../storage-create-storage-account.md)</ept>"
    },
    {
      "content": "An Android device with a camera",
      "pos": [
        1439,
        1470
      ]
    },
    {
      "content": "How the app works",
      "pos": [
        1475,
        1492
      ]
    },
    {
      "content": "Uploading the photo image is a multistep process:",
      "pos": [
        1494,
        1543
      ]
    },
    {
      "content": "First you take a photo, and insert a TodoItem row into the SQL database that contains  new meta-data fields used by Azure Storage.",
      "pos": [
        1547,
        1677
      ]
    },
    {
      "pos": [
        1680,
        1778
      ],
      "content": "A new mobile service SQL <bpt id=\"p1\">**</bpt>insert<ept id=\"p1\">**</ept> script asks Azure Storage for a Shared Access Signature (SAS)."
    },
    {
      "content": "That script returns the SAS and a URI for the blob to the client.",
      "pos": [
        1781,
        1846
      ]
    },
    {
      "content": "The client uploads the photo, using the SAS and blob URI.",
      "pos": [
        1849,
        1906
      ]
    },
    {
      "content": "So what is a SAS?",
      "pos": [
        1908,
        1925
      ]
    },
    {
      "content": "It's not safe to store the credentials needed to upload data to the Azure Storage service inside your client app.",
      "pos": [
        1927,
        2040
      ]
    },
    {
      "content": "Instead, you store these credentials in your mobile service and use them to generate a Shared Access Signature (SAS) that grants permission to upload a new image.",
      "pos": [
        2041,
        2203
      ]
    },
    {
      "content": "The SAS, a credential with a 5 minute expiration, is returned securely by Mobile Services to the client app.",
      "pos": [
        2204,
        2312
      ]
    },
    {
      "content": "The app then uses this temporary credential to upload the image.",
      "pos": [
        2313,
        2377
      ]
    },
    {
      "content": "For more information, see <bpt id=\"p1\">[</bpt>Shared Access Signatures, Part 1: Understanding the SAS Model<ept id=\"p1\">](storage-dotnet-shared-access-signature-part-1.md)</ept>",
      "pos": [
        2378,
        2517
      ]
    },
    {
      "pos": [
        2520,
        2668
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">[</bpt>Here<ept id=\"p1\">](https://github.com/Azure/mobile-services-samples/tree/master/UploadImages)</ept> is the completed client source code part of this app."
    },
    {
      "content": "Update the registered insert script in the Management Portal",
      "pos": [
        2673,
        2733
      ]
    },
    {
      "content": "Update the quickstart app to capture and upload images.",
      "pos": [
        2855,
        2910
      ]
    },
    {
      "content": "Reference the Azure Storage Android client library",
      "pos": [
        2916,
        2966
      ]
    },
    {
      "pos": [
        2971,
        3092
      ],
      "content": "To add the reference to the library, in the <bpt id=\"p1\">**</bpt>app<ept id=\"p1\">**</ept> &gt; <bpt id=\"p2\">**</bpt>build.gradle<ept id=\"p2\">**</ept> file, add this line to the <ph id=\"ph1\">`dependencies`</ph> section:"
    },
    {
      "pos": [
        3177,
        3245
      ],
      "content": "Change the <ph id=\"ph1\">`minSdkVersion`</ph> value to 15 (required by the camera API)."
    },
    {
      "pos": [
        3250,
        3300
      ],
      "content": "Press the <bpt id=\"p1\">**</bpt>Sync Project with Gradle Files<ept id=\"p1\">**</ept> icon."
    },
    {
      "content": "Update the manifest file for camera and storage",
      "pos": [
        3306,
        3353
      ]
    },
    {
      "pos": [
        3358,
        3457
      ],
      "content": "Specify your app requires having a camera available by adding this line to <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        3563,
        3673
      ],
      "content": "Specify your app needs permission to write to external storage by adding this line to <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept>:"
    },
    {
      "pos": [
        3765,
        3929
      ],
      "content": "Note that Android external storage is not necessarily an SD card: for more see <bpt id=\"p1\">[</bpt>Saving Files<ept id=\"p1\">](http://developer.android.com/training/basics/data-storage/files.html)</ept>."
    },
    {
      "content": "Update resource files for the new user interface",
      "pos": [
        3935,
        3983
      ]
    },
    {
      "pos": [
        3988,
        4093
      ],
      "content": "Add titles for new buttons by adding the following to the <bpt id=\"p1\">**</bpt>strings.xml<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">*</bpt>values<ept id=\"p2\">*</ept> directory:"
    },
    {
      "pos": [
        4220,
        4351
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>activity_to_do.xml<ept id=\"p1\">**</ept> file in the <bpt id=\"p2\">**</bpt>res =&gt; layout<ept id=\"p2\">**</ept> folder,  add this code before the existing code for the <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept> button."
    },
    {
      "pos": [
        4614,
        4673
      ],
      "content": "Replace the <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> button element with the following code:"
    },
    {
      "content": "Add code for photo capture",
      "pos": [
        4936,
        4962
      ]
    },
    {
      "pos": [
        4967,
        5053
      ],
      "content": "In <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> add this code to create a <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> object with a unique name."
    },
    {
      "content": "Add this code to start the Android camera app.",
      "pos": [
        5723,
        5769
      ]
    },
    {
      "content": "You can then take pictures, and when one looks OK, press <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>, which will store it in the file you just created.",
      "pos": [
        5770,
        5886
      ]
    },
    {
      "content": "Add code to upload photo file to blob storage",
      "pos": [
        7040,
        7085
      ]
    },
    {
      "pos": [
        7091,
        7196
      ],
      "content": "First we add some new meta-data fields to the <ph id=\"ph1\">`ToDoItem`</ph> object by adding this code to <bpt id=\"p1\">**</bpt>ToDoItem.java<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Replace the 0-parameter constructor with this code:",
      "pos": [
        9601,
        9652
      ]
    },
    {
      "content": "Replace the multi-parameter constructor with this code:",
      "pos": [
        9879,
        9934
      ]
    },
    {
      "pos": [
        10641,
        10780
      ],
      "content": "In the <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> file, replace the <bpt id=\"p2\">**</bpt>addItem<ept id=\"p2\">**</ept> method in <bpt id=\"p3\">**</bpt>ToDoActivity.java<ept id=\"p3\">**</ept>  with the following code that uploads the image."
    },
    {
      "content": "This code sends a request to the mobile service to insert a new TodoItem.",
      "pos": [
        13430,
        13503
      ]
    },
    {
      "content": "The response contains the SAS, which is then used to upload the image from local storage to a blob in Azure storage.",
      "pos": [
        13504,
        13620
      ]
    },
    {
      "content": "Test uploading the images",
      "pos": [
        13627,
        13652
      ]
    },
    {
      "content": "In Android Studio press <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept>.",
      "pos": [
        13658,
        13690
      ]
    },
    {
      "content": "In the dialogue, choose the device to use.",
      "pos": [
        13691,
        13733
      ]
    },
    {
      "pos": [
        13738,
        13817
      ],
      "content": "When the app UI appears, enter text in the textbox labeled <bpt id=\"p1\">**</bpt>Add a ToDo item<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Press <bpt id=\"p1\">**</bpt>Take Photo<ept id=\"p1\">**</ept>.",
      "pos": [
        13822,
        13843
      ]
    },
    {
      "content": "When the camera app starts, take a photo.",
      "pos": [
        13844,
        13885
      ]
    },
    {
      "content": "Press the check mark to accept the photo.",
      "pos": [
        13886,
        13927
      ]
    },
    {
      "content": "Press <bpt id=\"p1\">**</bpt>Upload<ept id=\"p1\">**</ept>.",
      "pos": [
        13932,
        13949
      ]
    },
    {
      "content": "Note how the ToDoItem has been added to the list, as usual.",
      "pos": [
        13950,
        14009
      ]
    },
    {
      "pos": [
        14014,
        14155
      ],
      "content": "In the Microsoft Azure portal, go to your storage account and press the <bpt id=\"p1\">**</bpt>Containers<ept id=\"p1\">**</ept> tab, and press the name of your container in the list."
    },
    {
      "content": "A list of your uploaded blob files will appear.",
      "pos": [
        14160,
        14207
      ]
    },
    {
      "content": "Select one and press <bpt id=\"p1\">**</bpt>Download<ept id=\"p1\">**</ept>.",
      "pos": [
        14208,
        14242
      ]
    },
    {
      "content": "The image that you uploaded now appears in a browser window.",
      "pos": [
        14247,
        14307
      ]
    },
    {
      "pos": [
        14313,
        14349
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "content": "Now that you have been able to securely upload images by integrating your mobile service with the Blob service, check out some of the other backend service and integration topics:",
      "pos": [
        14351,
        14530
      ]
    },
    {
      "content": "[Send email from Mobile Services with SendGrid]",
      "pos": [
        14534,
        14581
      ]
    },
    {
      "content": "Learn how to add email functionality to your Mobile Service using the SendGrid email service.",
      "pos": [
        14586,
        14679
      ]
    },
    {
      "content": "This topic demonstrates how to add server side scripts to send email using SendGrid.",
      "pos": [
        14680,
        14764
      ]
    },
    {
      "content": "[Schedule backend jobs in Mobile Services]",
      "pos": [
        14768,
        14810
      ]
    },
    {
      "content": "Learn how to use the Mobile Services job scheduler functionality to define server script code that is executed on a schedule that you define.",
      "pos": [
        14814,
        14955
      ]
    },
    {
      "content": "[Mobile Services server script reference]",
      "pos": [
        14959,
        15000
      ]
    },
    {
      "content": "Reference topics for using server scripts to perform server-side tasks and integration with other Azure components and external resources.",
      "pos": [
        15004,
        15142
      ]
    },
    {
      "content": "[Mobile Services .NET How-to Conceptual Reference]",
      "pos": [
        15147,
        15197
      ]
    },
    {
      "content": "Learn more about how to use Mobile Services with .NET",
      "pos": [
        15201,
        15254
      ]
    },
    {
      "content": "test",
      "pos": [
        16659,
        16663
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Use Mobile Services to upload images to blob storage (Android) | Mobile Services\" \n    description=\"Learn how to use Mobile Services to upload images to Azure Storage and access the images from your Android app.\" \n    services=\"mobile-services\" \n    documentationCenter=\"android\" \n    authors=\"RickSaling\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.workload=\"mobile\" \n    ms.tgt_pltfrm=\"mobile-android\" \n    ms.devlang=\"java\" \n    ms.topic=\"article\" \n    ms.date=\"09/02/2015\" \n    ms.author=\"ricksal\"/>\n\n# Upload images to Azure Storage from an Android  device\n\n[AZURE.INCLUDE [mobile-services-selector-upload-data-blob-storage](../../includes/mobile-services-selector-upload-data-blob-storage.md)]\n\nThis topic shows how to enable your Android Azure Mobile Services app to upload images to Azure Storage. \n\nMobile Services uses a SQL Database to store data. However, it's more efficient to store binary large object (BLOB) data in Azure Storage. In this tutorial you enable the Mobile Services quickstart app to take pictures with the Android camera, and upload the images to Azure Storage. \n\n\n## What you need to get started\n\nBefore you start this tutorial, you must first complete the Mobile Services quickstart: [Get started with Mobile Services]. \n\nThis tutorial also requires the following:\n\n+ An [Azure Storage account](../storage-create-storage-account.md)\n+ An Android device with a camera\n\n## How the app works\n\nUploading the photo image is a multistep process:\n\n- First you take a photo, and insert a TodoItem row into the SQL database that contains  new meta-data fields used by Azure Storage.\n- A new mobile service SQL **insert** script asks Azure Storage for a Shared Access Signature (SAS).\n- That script returns the SAS and a URI for the blob to the client.\n- The client uploads the photo, using the SAS and blob URI.\n\nSo what is a SAS?\n\nIt's not safe to store the credentials needed to upload data to the Azure Storage service inside your client app. Instead, you store these credentials in your mobile service and use them to generate a Shared Access Signature (SAS) that grants permission to upload a new image. The SAS, a credential with a 5 minute expiration, is returned securely by Mobile Services to the client app. The app then uses this temporary credential to upload the image. For more information, see [Shared Access Signatures, Part 1: Understanding the SAS Model](storage-dotnet-shared-access-signature-part-1.md)\n\n>[AZURE.NOTE] [Here](https://github.com/Azure/mobile-services-samples/tree/master/UploadImages) is the completed client source code part of this app.\n\n## Update the registered insert script in the Management Portal\n\n[AZURE.INCLUDE [mobile-services-configure-blob-storage](../../includes/mobile-services-configure-blob-storage.md)]\n\n\n## Update the quickstart app to capture and upload images.\n\n### Reference the Azure Storage Android client library\n\n1. To add the reference to the library, in the **app** > **build.gradle** file, add this line to the `dependencies` section:\n\n        compile 'com.microsoft.azure.android:azure-storage-android:0.6.0@aar'\n\n\n2. Change the `minSdkVersion` value to 15 (required by the camera API).\n\n3. Press the **Sync Project with Gradle Files** icon.\n\n### Update the manifest file for camera and storage\n\n1. Specify your app requires having a camera available by adding this line to **AndroidManifest.xml**:\n\n        <uses-feature android:name=\"android.hardware.camera\"\n            android:required=\"true\" />\n\n2. Specify your app needs permission to write to external storage by adding this line to **AndroidManifest.xml**:\n\n        <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    Note that Android external storage is not necessarily an SD card: for more see [Saving Files](http://developer.android.com/training/basics/data-storage/files.html).\n\n### Update resource files for the new user interface\n\n1. Add titles for new buttons by adding the following to the **strings.xml** file in the *values* directory:\n\n        <string name=\"preview_button_text\">Take Photo</string>\n        <string name=\"upload_button_text\">Upload</string>\n\n2. In the **activity_to_do.xml** file in the **res => layout** folder,  add this code before the existing code for the **Add** button.\n\n         <Button\n             android:id=\"@+id/buttonPreview\"\n             android:layout_width=\"120dip\"\n             android:layout_height=\"wrap_content\"\n             android:onClick=\"takePicture\"\n             android:text=\"@string/preview_button_text\" />\n\n3. Replace the **Add** button element with the following code:\n\n         <Button\n             android:id=\"@+id/buttonUpload\"\n             android:layout_width=\"100dip\"\n             android:layout_height=\"wrap_content\"\n             android:onClick=\"uploadPhoto\"\n             android:text=\"@string/upload_button_text\" />\n\n\n### Add code for photo capture\n\n1. In **ToDoActivity.java** add this code to create a **File** object with a unique name.\n\n        // Create a File object for storing the photo\n        private File createImageFile() throws IOException {\n            // Create an image file name\n            String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n            String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n            File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\n            File image = File.createTempFile(\n                    imageFileName,  /* prefix */\n                    \".jpg\",         /* suffix */\n                    storageDir      /* directory */\n            );\n            return image;\n        }\n\n5. Add this code to start the Android camera app. You can then take pictures, and when one looks OK, press **Save**, which will store it in the file you just created.\n\n        // Run an Intent to start up the Android camera\n        static final int REQUEST_TAKE_PHOTO = 1;\n        public Uri mPhotoFileUri = null;\n        public File mPhotoFile = null;\n        \n        public void takePicture(View view) {\n            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            // Ensure that there's a camera activity to handle the intent\n            if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n                // Create the File where the photo should go\n                try {\n                    mPhotoFile = createImageFile();\n                } catch (IOException ex) {\n                    // Error occurred while creating the File\n                    //\n                }\n                // Continue only if the File was successfully created\n                if (mPhotoFile != null) {\n                    mPhotoFileUri = Uri.fromFile(mPhotoFile);\n                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mPhotoFileUri);\n                    startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n                }\n            }\n        }\n\n### Add code to upload photo file to blob storage\n\n\n1. First we add some new meta-data fields to the `ToDoItem` object by adding this code to **ToDoItem.java**.\n\n        /**\n         *  imageUri - points to location in storage where photo will go\n         */\n        @com.google.gson.annotations.SerializedName(\"imageUri\")\n        private String mImageUri;\n    \n        /**\n         * Returns the item ImageUri\n         */\n        public String getImageUri() {\n            return mImageUri;\n        }\n    \n        /**\n         * Sets the item ImageUri\n         *\n         * @param ImageUri\n         *            Uri to set\n         */\n        public final void setImageUri(String ImageUri) {\n            mImageUri = ImageUri;\n        }\n    \n        /**\n         * ContainerName - like a directory, holds blobs\n         */\n        @com.google.gson.annotations.SerializedName(\"containerName\")\n        private String mContainerName;\n    \n        /**\n         * Returns the item ContainerName\n         */\n        public String getContainerName() {\n            return mContainerName;\n        }\n    \n        /**\n         * Sets the item ContainerName\n         *\n         * @param ContainerName\n         *            Uri to set\n         */\n        public final void setContainerName(String ContainerName) {\n            mContainerName = ContainerName;\n        }\n    \n        /**\n         *  ResourceName\n         */\n        @com.google.gson.annotations.SerializedName(\"resourceName\")\n        private String mResourceName;\n    \n        /**\n         * Returns the item ResourceName\n         */\n        public String getResourceName() {\n            return mResourceName;\n        }\n    \n        /**\n         * Sets the item ResourceName\n         *\n         * @param ResourceName\n         *            Uri to set\n         */\n        public final void setResourceName(String ResourceName) {\n            mResourceName = ResourceName;\n        }\n    \n        /**\n         *  SasQueryString - permission to write to storage\n         */\n        @com.google.gson.annotations.SerializedName(\"sasQueryString\")\n        private String mSasQueryString;\n    \n        /**\n         * Returns the item SasQueryString\n         */\n        public String getSasQueryString() {\n            return mSasQueryString;\n        }\n    \n        /**\n         * Sets the item SasQueryString\n         *\n         * @param SasQueryString\n         *            Uri to set\n         */\n        public final void setSasQueryString(String SasQueryString) {\n            mSasQueryString = SasQueryString;\n        }\n\n2. Replace the 0-parameter constructor with this code:\n\n        /**\n         * ToDoItem constructor\n         */\n        public ToDoItem() {\n            mContainerName = \"\";\n            mResourceName = \"\";\n            mImageUri = \"\";\n            mSasQueryString = \"\";\n        }\n\n3. Replace the multi-parameter constructor with this code:\n\n        /**\n         * Initializes a new ToDoItem\n         *\n         * @param text\n         *            The item text\n         * @param id\n         *            The item id\n         */\n        public ToDoItem(String text,\n                        String id,\n                        String containerName,\n                        String resourceName,\n                        String imageUri,\n                        String sasQueryString) {\n            this.setText(text);\n            this.setId(id);\n            this.setContainerName(containerName);\n            this.setResourceName(resourceName);\n            this.setImageUri(imageUri);\n            this.setSasQueryString(sasQueryString);\n        }\n\n\n4. In the **ToDoActivity.java** file, replace the **addItem** method in **ToDoActivity.java**  with the following code that uploads the image.\n\n        /**\n         * Add a new item\n         *\n         * @param view\n         *            The view that originated the call\n         */\n        public void uploadPhoto(View view) {\n            if (mClient == null) {\n                return;\n            }\n    \n            // Create a new item\n            final ToDoItem item = new ToDoItem();\n    \n            item.setText(mTextNewToDo.getText().toString());\n            item.setComplete(false);\n            item.setContainerName(\"todoitemimages\");\n    \n            // Use a unigue GUID to avoid collisions.\n            UUID uuid = UUID.randomUUID();\n            String uuidInString = uuid.toString();\n            item.setResourceName(uuidInString);\n    \n            // Send the item to be inserted. When blob properties are set this\n            // generates an SAS in the response.\n            AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>(){\n                @Override\n                protected Void doInBackground(Void... params) {\n                    try {\n                            final ToDoItem entity = addItemInTable(item);\n        \n                            // If we have a returned SAS, then upload the blob.\n                            if (entity.getSasQueryString() != null) {\n        \n                           // Get the URI generated that contains the SAS\n                            // and extract the storage credentials.\n                            StorageCredentials cred = \n                                new StorageCredentialsSharedAccessSignature(entity.getSasQueryString());\n                            URI imageUri = new URI(entity.getImageUri());\n    \n                            // Upload the new image as a BLOB from a stream.\n                            CloudBlockBlob blobFromSASCredential =\n                                    new CloudBlockBlob(imageUri, cred);\n    \n                            blobFromSASCredential.uploadFromFile(mPhotoFileUri.getPath());\n                        }\n    \n                        runOnUiThread(new Runnable() {\n                            @Override\n                            public void run() {\n                                if(!entity.isComplete()){\n                                    mAdapter.add(entity);\n                                }\n                            }\n                        });\n                    } catch (final Exception e) {\n                        createAndShowDialogFromTask(e, \"Error\");\n                    }\n                    return null;\n                }\n            };\n    \n            runAsyncTask(task);\n    \n            mTextNewToDo.setText(\"\");\n        }\n    \n\nThis code sends a request to the mobile service to insert a new TodoItem. The response contains the SAS, which is then used to upload the image from local storage to a blob in Azure storage. \n\n\n## Test uploading the images \n\n1. In Android Studio press **Run**. In the dialogue, choose the device to use.\n\n2. When the app UI appears, enter text in the textbox labeled **Add a ToDo item**.\n\n3. Press **Take Photo**. When the camera app starts, take a photo. Press the check mark to accept the photo.\n\n4. Press **Upload**. Note how the ToDoItem has been added to the list, as usual.\n\n5. In the Microsoft Azure portal, go to your storage account and press the **Containers** tab, and press the name of your container in the list.\n\n6. A list of your uploaded blob files will appear. Select one and press **Download**.\n\n7. The image that you uploaded now appears in a browser window.\n\n\n## <a name=\"next-steps\"> </a>Next steps\n\nNow that you have been able to securely upload images by integrating your mobile service with the Blob service, check out some of the other backend service and integration topics:\n\n+ [Send email from Mobile Services with SendGrid]\n \n  Learn how to add email functionality to your Mobile Service using the SendGrid email service. This topic demonstrates how to add server side scripts to send email using SendGrid.\n\n+ [Schedule backend jobs in Mobile Services]\n\n  Learn how to use the Mobile Services job scheduler functionality to define server script code that is executed on a schedule that you define.\n\n+ [Mobile Services server script reference]\n\n  Reference topics for using server scripts to perform server-side tasks and integration with other Azure components and external resources.\n \n+ [Mobile Services .NET How-to Conceptual Reference]\n\n  Learn more about how to use Mobile Services with .NET\n  \n \n<!-- Anchors. -->\n[Install the Storage Client library]: #install-storage-client\n[Update the client app to capture images]: #add-select-images\n[Update the insert script to generate an SAS]: #update-scripts\n[Upload images to test the app]: #test\n[Next Steps]:#next-steps\n\n<!-- Images. -->\n\n[2]: ./media/mobile-services-windows-store-dotnet-upload-data-blob-storage/mobile-add-storage-nuget-package-dotnet.png\n\n\n<!-- URLs. -->\n[Send email from Mobile Services with SendGrid]: store-sendgrid-mobile-services-send-email-scripts.md\n[Schedule backend jobs in Mobile Services]: mobile-services-schedule-recurring-tasks.md\n[Send push notifications to Windows Store apps using Service Bus from a .NET back-end]: http://go.microsoft.com/fwlink/?LinkId=277073&clcid=0x409\n[Mobile Services server script reference]: mobile-services-how-to-use-server-scripts.md\n[Get started with Mobile Services]: mobile-services-javascript-backend-windows-store-dotnet-get-started.md\n\n[Azure Management Portal]: https://manage.windowsazure.com/\n[How To Create a Storage Account]: ../storage-create-storage-account.md\n[Azure Storage Client library for Store apps]: http://go.microsoft.com/fwlink/p/?LinkId=276866 \n[Mobile Services .NET How-to Conceptual Reference]: mobile-services-windows-dotnet-how-to-use-client-library.md\n[App settings]: http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7\n \n\ntest\n"
}