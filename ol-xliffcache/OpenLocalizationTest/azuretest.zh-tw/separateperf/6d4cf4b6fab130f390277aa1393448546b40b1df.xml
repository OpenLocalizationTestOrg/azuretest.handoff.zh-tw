{
  "nodes": [
    {
      "content": "Logs, exceptions and custom diagnostics for ASP.NET in Application Insights",
      "pos": [
        28,
        103
      ]
    },
    {
      "content": "Diagnose issues in ASP.NET web apps by searching requests, exceptions and logs generated with Trace, NLog, or Log4Net.",
      "pos": [
        123,
        241
      ]
    },
    {
      "content": "Logs, exceptions and custom diagnostics for ASP.NET in Application Insights",
      "pos": [
        560,
        635
      ]
    },
    {
      "content": "[Application Insights][start] includes a powerful [Diagnostic Search][diagnostic] tool that enables you to explore and drill in to telemetry sent by the Application Insights SDK from your application.",
      "pos": [
        637,
        837
      ]
    },
    {
      "content": "Many events such as user page views are automatically sent by the SDK.",
      "pos": [
        838,
        908
      ]
    },
    {
      "content": "You can also write code to send custom events, exception reports, and traces.",
      "pos": [
        910,
        987
      ]
    },
    {
      "content": "And if you already use a logging framework such as log4J, log4net, NLog, or System.Diagnostics.Trace, you can capture those logs and include them in the search.",
      "pos": [
        988,
        1148
      ]
    },
    {
      "content": "This makes it easy to correlate log traces with user actions, exceptions and other events.",
      "pos": [
        1149,
        1239
      ]
    },
    {
      "pos": [
        1244,
        1296
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"send\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Before you write custom telemetry"
    },
    {
      "content": "If you haven't yet [set up Application Insights for your project][start], do that now.",
      "pos": [
        1298,
        1384
      ]
    },
    {
      "content": "When you run your application, it will send some telemetry that will show up in Diagnostic Search, including requests received by the server, page views logged at the client, and uncaught exceptions.",
      "pos": [
        1386,
        1585
      ]
    },
    {
      "content": "Open Diagnostic Search to see the telemetry that the SDK automatically sends.",
      "pos": [
        1587,
        1664
      ]
    },
    {
      "content": "The details vary from one application type to another.",
      "pos": [
        1820,
        1874
      ]
    },
    {
      "content": "You can click through any individual event to get more detail.",
      "pos": [
        1875,
        1937
      ]
    },
    {
      "pos": [
        1941,
        1975
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"events\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Custom events"
    },
    {
      "content": "Custom events show up both in [Diagnostic Search][diagnostic] and in [Metric Explorer][metrics].",
      "pos": [
        1977,
        2073
      ]
    },
    {
      "content": "You can send them from devices, web pages and server applications.",
      "pos": [
        2074,
        2140
      ]
    },
    {
      "content": "They can be used both for diagnostic purposes and to [understand usage patterns][track].",
      "pos": [
        2141,
        2229
      ]
    },
    {
      "content": "A custom event has a name, and can also carry properties that you can filter on, together with numeric measurements.",
      "pos": [
        2231,
        2347
      ]
    },
    {
      "content": "JavaScript at client",
      "pos": [
        2349,
        2369
      ]
    },
    {
      "content": "C# at server",
      "pos": [
        2632,
        2644
      ]
    },
    {
      "content": "VB at server",
      "pos": [
        3033,
        3045
      ]
    },
    {
      "content": "Run your app and view the results.",
      "pos": [
        3494,
        3528
      ]
    },
    {
      "content": "Open Diagnostic Search.",
      "pos": [
        3530,
        3553
      ]
    },
    {
      "content": "Select Custom Event and select a particular event name.",
      "pos": [
        3555,
        3610
      ]
    },
    {
      "content": "Filter the data more by entering a search term on a property value.",
      "pos": [
        3695,
        3762
      ]
    },
    {
      "content": "Drill into an individual event to see its detailed properties.",
      "pos": [
        3850,
        3912
      ]
    },
    {
      "pos": [
        4000,
        4031
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"pages\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Page views"
    },
    {
      "content": "Page view telemetry is sent by the trackPageView() call in [the JavaScript snippet you insert in your web pages][usage].",
      "pos": [
        4033,
        4153
      ]
    },
    {
      "content": "Its main purpose is to contribute to the counts of page views that you see on the overview page.",
      "pos": [
        4154,
        4250
      ]
    },
    {
      "content": "Usually it is called once in each HTML page, but you can insert more calls - for example, if you have a single-page app and you want to log a new page whenever the user gets more data.",
      "pos": [
        4252,
        4436
      ]
    },
    {
      "content": "It's sometimes useful to attach properties that you can use as filters in diagnostic search:",
      "pos": [
        4520,
        4612
      ]
    },
    {
      "pos": [
        4765,
        4801
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"trace\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Trace telemetry"
    },
    {
      "content": "Trace telemetry is code that you insert specifically to create diagnostic logs.",
      "pos": [
        4803,
        4882
      ]
    },
    {
      "content": "For example, you could insert calls like this:",
      "pos": [
        4885,
        4931
      ]
    },
    {
      "content": "Install an adapter for your logging framework",
      "pos": [
        5070,
        5115
      ]
    },
    {
      "content": "You can also search logs generated with a logging framework - log4Net, NLog or System.Diagnostics.Trace.",
      "pos": [
        5117,
        5221
      ]
    },
    {
      "content": "If you plan to use log4Net or NLog, install it in your project.",
      "pos": [
        5227,
        5290
      ]
    },
    {
      "pos": [
        5295,
        5379
      ],
      "content": "In Solution Explorer, right-click your project and choose <bpt id=\"p1\">**</bpt>Manage NuGet Packages<ept id=\"p1\">**</ept>."
    },
    {
      "pos": [
        5383,
        5480
      ],
      "content": "Select Online &gt; All, select <bpt id=\"p1\">**</bpt>Include Prerelease<ept id=\"p1\">**</ept> and search for \"Microsoft.ApplicationInsights\""
    },
    {
      "content": "Get the prerelease version of the appropriate adapter",
      "pos": [
        5488,
        5541
      ]
    },
    {
      "content": "Select the appropriate package - one of:",
      "pos": [
        5616,
        5656
      ]
    },
    {
      "content": "Microsoft.ApplicationInsights.TraceListener (to capture System.Diagnostics.Trace calls)",
      "pos": [
        5661,
        5748
      ]
    },
    {
      "content": "Microsoft.ApplicationInsights.NLogTarget",
      "pos": [
        5753,
        5793
      ]
    },
    {
      "content": "Microsoft.ApplicationInsights.Log4NetAppender",
      "pos": [
        5798,
        5843
      ]
    },
    {
      "content": "The NuGet package installs the necessary assemblies, and also modifies web.config or app.config.",
      "pos": [
        5845,
        5941
      ]
    },
    {
      "pos": [
        5948,
        5996
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"pepper\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Insert diagnostic log calls"
    },
    {
      "content": "If you use System.Diagnostics.Trace, a typical call would be:",
      "pos": [
        5998,
        6059
      ]
    },
    {
      "content": "If you prefer log4net or NLog:",
      "pos": [
        6135,
        6165
      ]
    },
    {
      "content": "Run your app in debug mode, or deploy it.",
      "pos": [
        6215,
        6256
      ]
    },
    {
      "content": "You'll see the messages in Diagnostic Search when you select the Trace filter.",
      "pos": [
        6258,
        6336
      ]
    },
    {
      "pos": [
        6342,
        6377
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"exceptions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Exceptions"
    },
    {
      "content": "Getting exception reports in Application Insights provides a very powerful experience, especially since you can navigate between the failed requests and the exceptions, and read the exception stack.",
      "pos": [
        6379,
        6577
      ]
    },
    {
      "content": "In some cases, you need to [insert a few lines of code][exceptions] to make sure your exceptions are being caught automatically.",
      "pos": [
        6579,
        6707
      ]
    },
    {
      "content": "You can also write explicit code to send exception telemetry:",
      "pos": [
        6709,
        6770
      ]
    },
    {
      "content": "JavaScript",
      "pos": [
        6772,
        6782
      ]
    },
    {
      "content": "C",
      "pos": [
        6971,
        6972
      ]
    },
    {
      "content": "VB",
      "pos": [
        7429,
        7431
      ]
    },
    {
      "content": "The properties and measurements parameters are optional, but are useful for filtering and adding extra information.",
      "pos": [
        7895,
        8010
      ]
    },
    {
      "content": "For example, if you have an app that can run several games, you could find all the exception reports related to a particular game.",
      "pos": [
        8011,
        8141
      ]
    },
    {
      "content": "You can add as many items as you like to each dictionary.",
      "pos": [
        8142,
        8199
      ]
    },
    {
      "content": "Viewing exceptions",
      "pos": [
        8206,
        8224
      ]
    },
    {
      "content": "You'll see a summary of exceptions reported on the Overview blade, and you can click through to see more details.",
      "pos": [
        8226,
        8339
      ]
    },
    {
      "content": "For example:",
      "pos": [
        8340,
        8352
      ]
    },
    {
      "pos": [
        8355,
        8437
      ],
      "content": "<ph id=\"ph1\">![](./media/app-insights-search-diagnostic-logs/appinsights-039-1exceptions.png)</ph>[]"
    },
    {
      "content": "Click on any exception type to see specific occurrences:",
      "pos": [
        8439,
        8495
      ]
    },
    {
      "pos": [
        8497,
        8573
      ],
      "content": "<ph id=\"ph1\">![](./media/app-insights-search-diagnostic-logs/appinsights-333facets.png)</ph>[]"
    },
    {
      "content": "You can also open Diagnostic Search directly, filter on exceptions, and choose the exception type that you want to see.",
      "pos": [
        8575,
        8694
      ]
    },
    {
      "content": "Reporting unhandled exceptions",
      "pos": [
        8700,
        8730
      ]
    },
    {
      "content": "Application Insights reports unhandled exceptions where it can, from devices, [web browsers][usage], or web servers, whether instrumented by [Status Monitor][redfield] or [Application Insights SDK][greenbrown].",
      "pos": [
        8732,
        8942
      ]
    },
    {
      "content": "However, it isn't always able to do this in some cases because the .NET framework catches the exceptions.",
      "pos": [
        8945,
        9050
      ]
    },
    {
      "content": "To make sure you see all exceptions, you therefore have to write a small exception handler.",
      "pos": [
        9052,
        9143
      ]
    },
    {
      "content": "The best procedure varies with the technology.",
      "pos": [
        9144,
        9190
      ]
    },
    {
      "content": "See [Exception telemetry for ASP.NET][exceptions] for details.",
      "pos": [
        9191,
        9253
      ]
    },
    {
      "content": "Correlating with a build",
      "pos": [
        9260,
        9284
      ]
    },
    {
      "content": "When you read diagnostic logs, it's likely that your source code will have changed since the live code was deployed.",
      "pos": [
        9286,
        9402
      ]
    },
    {
      "content": "It's therefore useful to put build information, such as the URL of the current version, into a property along with each exception or trace.",
      "pos": [
        9404,
        9543
      ]
    },
    {
      "content": "Instead of adding the property separately to every exception call, you can set the information in the default context.",
      "pos": [
        9546,
        9664
      ]
    },
    {
      "content": "In the app initializer such as Global.asax.cs:",
      "pos": [
        9910,
        9956
      ]
    },
    {
      "pos": [
        10130,
        10173
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"requests\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Server Web Requests"
    },
    {
      "content": "Request telemetry is sent automatically when you [install Status Monitor on your web server][redfield], or when you [add Application Insights to your web project][greenbrown].",
      "pos": [
        10175,
        10350
      ]
    },
    {
      "content": "It also feeds into the request and response time charts in Metric Explorer and on the Overview page.",
      "pos": [
        10351,
        10451
      ]
    },
    {
      "content": "If you want to send additional events, you can use the TrackRequest() API.",
      "pos": [
        10453,
        10527
      ]
    },
    {
      "pos": [
        10532,
        10561
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"questions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Q &amp; A"
    },
    {
      "pos": [
        10567,
        10642
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"emptykey\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>I get an error \"Instrumentation key cannot be empty\""
    },
    {
      "content": "Looks like you installed the logging adapter Nuget package without installing Application Insights.",
      "pos": [
        10644,
        10743
      ]
    },
    {
      "content": "In Solution Explorer, right-click <ph id=\"ph1\">`ApplicationInsights.config`</ph> and choose <bpt id=\"p1\">**</bpt>Update Application Insights<ept id=\"p1\">**</ept>.",
      "pos": [
        10745,
        10851
      ]
    },
    {
      "content": "You'll get a dialog that invites you to sign in to Azure and either create an Application Insights resource, or re-use an existing one.",
      "pos": [
        10852,
        10987
      ]
    },
    {
      "content": "That should fix it.",
      "pos": [
        10988,
        11007
      ]
    },
    {
      "pos": [
        11013,
        11060
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"limits\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>How much data is retained?"
    },
    {
      "content": "Up to 500 events per second from each application.",
      "pos": [
        11062,
        11112
      ]
    },
    {
      "content": "Events are retained for seven days.",
      "pos": [
        11113,
        11148
      ]
    },
    {
      "pos": [
        11153,
        11181
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Next steps"
    },
    {
      "content": "[Set up availability and responsiveness tests][availability]",
      "pos": [
        11185,
        11245
      ]
    },
    {
      "content": "[Troubleshooting][qna]",
      "pos": [
        11248,
        11270
      ]
    },
    {
      "content": "test",
      "pos": [
        11808,
        11812
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Logs, exceptions and custom diagnostics for ASP.NET in Application Insights\" \n    description=\"Diagnose issues in ASP.NET web apps by searching requests, exceptions and logs generated with Trace, NLog, or Log4Net.\" \n    services=\"application-insights\" \n    documentationCenter=\"\"\n    authors=\"alancameronwills\" \n    manager=\"keboyd\"/>\n\n<tags \n    ms.service=\"application-insights\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"ibiza\" \n    ms.devlang=\"na\" \n    ms.topic=\"article\" \n    ms.date=\"04/02/2015\" \n    ms.author=\"awills\"/>\n \n# Logs, exceptions and custom diagnostics for ASP.NET in Application Insights\n\n[Application Insights][start] includes a powerful [Diagnostic Search][diagnostic] tool that enables you to explore and drill in to telemetry sent by the Application Insights SDK from your application. Many events such as user page views are automatically sent by the SDK.\n\nYou can also write code to send custom events, exception reports, and traces. And if you already use a logging framework such as log4J, log4net, NLog, or System.Diagnostics.Trace, you can capture those logs and include them in the search. This makes it easy to correlate log traces with user actions, exceptions and other events.\n\n## <a name=\"send\"></a>Before you write custom telemetry\n\nIf you haven't yet [set up Application Insights for your project][start], do that now.\n\nWhen you run your application, it will send some telemetry that will show up in Diagnostic Search, including requests received by the server, page views logged at the client, and uncaught exceptions.\n\nOpen Diagnostic Search to see the telemetry that the SDK automatically sends.\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-45diagnostic.png)\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-31search.png)\n\nThe details vary from one application type to another. You can click through any individual event to get more detail.\n\n##<a name=\"events\"></a>Custom events\n\nCustom events show up both in [Diagnostic Search][diagnostic] and in [Metric Explorer][metrics]. You can send them from devices, web pages and server applications. They can be used both for diagnostic purposes and to [understand usage patterns][track].\n\nA custom event has a name, and can also carry properties that you can filter on, together with numeric measurements.\n\nJavaScript at client\n\n    appInsights.trackEvent(\"WinGame\",\n         // String properties:\n         {Game: currentGame.name, Difficulty: currentGame.difficulty},\n         // Numeric measurements:\n         {Score: currentGame.score, Opponents: currentGame.opponentCount}\n         );\n\nC# at server\n\n    // Set up some properties:\n    var properties = new Dictionary <string, string> \n       {{\"game\", currentGame.Name}, {\"difficulty\", currentGame.Difficulty}};\n    var measurements = new Dictionary <string, double>\n       {{\"Score\", currentGame.Score}, {\"Opponents\", currentGame.OpponentCount}};\n\n    // Send the event:\n    telemetry.TrackEvent(\"WinGame\", properties, measurements);\n\n\nVB at server\n\n    ' Set up some properties:\n    Dim properties = New Dictionary (Of String, String)\n    properties.Add(\"game\", currentGame.Name)\n    properties.Add(\"difficulty\", currentGame.Difficulty)\n\n    Dim measurements = New Dictionary (Of String, Double)\n    measurements.Add(\"Score\", currentGame.Score)\n    measurements.Add(\"Opponents\", currentGame.OpponentCount)\n\n    ' Send the event:\n    telemetry.TrackEvent(\"WinGame\", properties, measurements)\n\n### Run your app and view the results.\n\nOpen Diagnostic Search.\n\nSelect Custom Event and select a particular event name.\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-332filterCustom.png)\n\n\nFilter the data more by entering a search term on a property value.  \n\n![](./media/app-insights-search-diagnostic-logs/appinsights-23-customevents-5.png)\n\nDrill into an individual event to see its detailed properties.\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-23-customevents-4.png)\n\n##<a name=\"pages\"></a> Page views\n\nPage view telemetry is sent by the trackPageView() call in [the JavaScript snippet you insert in your web pages][usage]. Its main purpose is to contribute to the counts of page views that you see on the overview page.\n\nUsually it is called once in each HTML page, but you can insert more calls - for example, if you have a single-page app and you want to log a new page whenever the user gets more data.\n\n    appInsights.trackPageView(pageSegmentName, \"http://fabrikam.com/page.htm\"); \n\nIt's sometimes useful to attach properties that you can use as filters in diagnostic search:\n\n    appInsights.trackPageView(pageSegmentName, \"http://fabrikam.com/page.htm\",\n     {Game: currentGame.name, Difficulty: currentGame.difficulty});\n\n\n##<a name=\"trace\"></a> Trace telemetry\n\nTrace telemetry is code that you insert specifically to create diagnostic logs. \n\nFor example, you could insert calls like this:\n\n    var telemetry = new Microsoft.ApplicationInsights.TelemetryClient();\n    telemetry.TrackTrace(\"Slow response - database01\");\n\n\n####  Install an adapter for your logging framework\n\nYou can also search logs generated with a logging framework - log4Net, NLog or System.Diagnostics.Trace. \n\n1. If you plan to use log4Net or NLog, install it in your project. \n2. In Solution Explorer, right-click your project and choose **Manage NuGet Packages**.\n3. Select Online > All, select **Include Prerelease** and search for \"Microsoft.ApplicationInsights\"\n\n    ![Get the prerelease version of the appropriate adapter](./media/app-insights-search-diagnostic-logs/appinsights-36nuget.png)\n\n4. Select the appropriate package - one of:\n  + Microsoft.ApplicationInsights.TraceListener (to capture System.Diagnostics.Trace calls)\n  + Microsoft.ApplicationInsights.NLogTarget\n  + Microsoft.ApplicationInsights.Log4NetAppender\n\nThe NuGet package installs the necessary assemblies, and also modifies web.config or app.config.\n\n#### <a name=\"pepper\"></a>Insert diagnostic log calls\n\nIf you use System.Diagnostics.Trace, a typical call would be:\n\n    System.Diagnostics.Trace.TraceWarning(\"Slow response - database01\");\n\nIf you prefer log4net or NLog:\n\n    logger.Warn(\"Slow response - database01\");\n\nRun your app in debug mode, or deploy it.\n\nYou'll see the messages in Diagnostic Search when you select the Trace filter.\n\n### <a name=\"exceptions\"></a>Exceptions\n\nGetting exception reports in Application Insights provides a very powerful experience, especially since you can navigate between the failed requests and the exceptions, and read the exception stack.\n\nIn some cases, you need to [insert a few lines of code][exceptions] to make sure your exceptions are being caught automatically.\n\nYou can also write explicit code to send exception telemetry:\n\nJavaScript\n\n    try \n    { ...\n    }\n    catch (ex)\n    {\n      appInsights.TrackException(ex, \"handler loc\",\n        {Game: currentGame.Name, \n         State: currentGame.State.ToString()});\n    }\n\nC#\n\n    var telemetry = new TelemetryClient();\n    ...\n    try \n    { ...\n    }\n    catch (Exception ex)\n    {\n       // Set up some properties:\n       var properties = new Dictionary <string, string> \n         {{\"Game\", currentGame.Name}};\n\n       var measurements = new Dictionary <string, double>\n         {{\"Users\", currentGame.Users.Count}};\n\n       // Send the exception telemetry:\n       telemetry.TrackException(ex, properties, measurements);\n    }\n\nVB\n\n    Dim telemetry = New TelemetryClient\n    ...\n    Try\n      ...\n    Catch ex as Exception\n      ' Set up some properties:\n      Dim properties = New Dictionary (Of String, String)\n      properties.Add(\"Game\", currentGame.Name)\n\n      Dim measurements = New Dictionary (Of String, Double)\n      measurements.Add(\"Users\", currentGame.Users.Count)\n  \n      ' Send the exception telemetry:\n      telemetry.TrackException(ex, properties, measurements)\n    End Try\n\nThe properties and measurements parameters are optional, but are useful for filtering and adding extra information. For example, if you have an app that can run several games, you could find all the exception reports related to a particular game. You can add as many items as you like to each dictionary.\n\n#### Viewing exceptions\n\nYou'll see a summary of exceptions reported on the Overview blade, and you can click through to see more details. For example:\n\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-039-1exceptions.png)[]\n\nClick on any exception type to see specific occurrences:\n\n![](./media/app-insights-search-diagnostic-logs/appinsights-333facets.png)[]\n\nYou can also open Diagnostic Search directly, filter on exceptions, and choose the exception type that you want to see.\n\n### Reporting unhandled exceptions\n\nApplication Insights reports unhandled exceptions where it can, from devices, [web browsers][usage], or web servers, whether instrumented by [Status Monitor][redfield] or [Application Insights SDK][greenbrown]. \n\nHowever, it isn't always able to do this in some cases because the .NET framework catches the exceptions.  To make sure you see all exceptions, you therefore have to write a small exception handler. The best procedure varies with the technology. See [Exception telemetry for ASP.NET][exceptions] for details. \n\n### Correlating with a build\n\nWhen you read diagnostic logs, it's likely that your source code will have changed since the live code was deployed.\n\nIt's therefore useful to put build information, such as the URL of the current version, into a property along with each exception or trace. \n\nInstead of adding the property separately to every exception call, you can set the information in the default context. \n\n    // Telemetry initializer class\n    public class MyTelemetryInitializer : IContextInitializer\n    {\n        public void Initialize (TelemetryContext context)\n        {\n            context.Properties[\"AppVersion\"] = \"v2.1\";\n        }\n    }\n\nIn the app initializer such as Global.asax.cs:\n\n    protected void Application_Start()\n    {\n        // ...\n        TelemetryConfiguration.Active.ContextInitializers\n        .Add(new MyTelemetryInitializer());\n    }\n\n###<a name=\"requests\"></a> Server Web Requests\n\nRequest telemetry is sent automatically when you [install Status Monitor on your web server][redfield], or when you [add Application Insights to your web project][greenbrown]. It also feeds into the request and response time charts in Metric Explorer and on the Overview page.\n\nIf you want to send additional events, you can use the TrackRequest() API.\n\n## <a name=\"questions\"></a>Q & A\n\n### <a name=\"emptykey\"></a>I get an error \"Instrumentation key cannot be empty\"\n\nLooks like you installed the logging adapter Nuget package without installing Application Insights.\n\nIn Solution Explorer, right-click `ApplicationInsights.config` and choose **Update Application Insights**. You'll get a dialog that invites you to sign in to Azure and either create an Application Insights resource, or re-use an existing one. That should fix it.\n\n### <a name=\"limits\"></a>How much data is retained?\n\nUp to 500 events per second from each application. Events are retained for seven days.\n\n## <a name=\"add\"></a>Next steps\n\n* [Set up availability and responsiveness tests][availability]\n* [Troubleshooting][qna]\n\n\n\n\n\n<!--Link references-->\n\n[availability]: app-insights-monitor-web-app-availability.md\n[diagnostic]: app-insights-diagnostic-search.md\n[exceptions]: app-insights-web-failures-exceptions.md\n[greenbrown]: app-insights-start-monitoring-app-health-usage.md\n[metrics]: app-insights-metrics-explorer.md\n[qna]: app-insights-troubleshoot-faq.md\n[redfield]: app-insights-monitor-performance-live-website-now.md\n[start]: app-insights-get-started.md\n[track]: app-insights-api-custom-events-metrics.md\n[usage]: app-insights-web-track-usage.md\n\n \ntest\n"
}