{
  "nodes": [
    {
      "content": "Service Fabric application deployment",
      "pos": [
        26,
        63
      ]
    },
    {
      "content": "How to deploy and remove applications in Service Fabric",
      "pos": [
        81,
        136
      ]
    },
    {
      "content": "Deploy an application",
      "pos": [
        429,
        450
      ]
    },
    {
      "content": "Once an [application type has been packaged][10], it's ready for deployment into a Service Fabric cluster.",
      "pos": [
        452,
        558
      ]
    },
    {
      "content": "Deployment involves the following three steps:",
      "pos": [
        559,
        605
      ]
    },
    {
      "content": "Uploading the application package",
      "pos": [
        610,
        643
      ]
    },
    {
      "content": "Registering the application type",
      "pos": [
        647,
        679
      ]
    },
    {
      "content": "Creating the application instance",
      "pos": [
        683,
        716
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> If you use Visual Studio for deploying and debugging applications on your local development cluster, all of the steps described below are handled automatically by invoking the PowerShell scripts found in the Scripts folder of the application project.",
      "pos": [
        719,
        982
      ]
    },
    {
      "content": "This article provides background on what those scripts are doing so that you can perform the same operations outside of Visual Studio.",
      "pos": [
        983,
        1117
      ]
    },
    {
      "content": "Upload the application package",
      "pos": [
        1122,
        1152
      ]
    },
    {
      "content": "Uploading the application package puts it in a location accessible by internal Service Fabric components and can be performed through PowerShell.",
      "pos": [
        1154,
        1299
      ]
    },
    {
      "content": "Before running any PowerShell commands in this article, always start by first connecting to the Service Fabric cluster using <bpt id=\"p1\">**</bpt>Connect-ServiceFabricCluster<ept id=\"p1\">**</ept>.",
      "pos": [
        1300,
        1458
      ]
    },
    {
      "content": "Suppose you have a folder named <bpt id=\"p1\">*</bpt>MyApplicationType<ept id=\"p1\">*</ept> containing the necessary application manifest, service manifest(s), and code/config/data package(s), then the <bpt id=\"p2\">**</bpt>Copy-ServiceFabricApplicationPackage<ept id=\"p2\">**</ept> command will upload the package.",
      "pos": [
        1460,
        1695
      ]
    },
    {
      "content": "For example:",
      "pos": [
        1696,
        1708
      ]
    },
    {
      "content": "Register the application package",
      "pos": [
        2355,
        2387
      ]
    },
    {
      "content": "Registering the application package, makes the application type and version declared in the application manifest available for use.",
      "pos": [
        2389,
        2520
      ]
    },
    {
      "content": "The system will read the package uploaded in the previous step, verify the package (equivalent to running <bpt id=\"p1\">**</bpt>Test-ServiceFabricApplicationPackage<ept id=\"p1\">**</ept> locally), process the package contents, and copy the processed package to an internal system location.",
      "pos": [
        2521,
        2770
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Register-ServiceFabricApplicationType<ept id=\"p1\">**</ept> command  returns only after the application package has been successfully copied by the system.",
      "pos": [
        3061,
        3202
      ]
    },
    {
      "content": "How long this takes depends on the contents of the application package.",
      "pos": [
        3203,
        3274
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>-TimeoutSec<ept id=\"p1\">**</ept> parameter can be used to supply a longer timeout if needed (the default timeout is 60 seconds).",
      "pos": [
        3275,
        3390
      ]
    },
    {
      "pos": [
        3392,
        3505
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Get-ServiceFabricApplicationType<ept id=\"p1\">**</ept> command will list all successfully registered application type versions."
    },
    {
      "content": "Create the application",
      "pos": [
        3510,
        3532
      ]
    },
    {
      "content": "An application can be instantiated using any application type version that has been registered successfully using the <bpt id=\"p1\">**</bpt>New-ServiceFabricApplication<ept id=\"p1\">**</ept> command.",
      "pos": [
        3534,
        3693
      ]
    },
    {
      "content": "The name of each application must start with the <bpt id=\"p1\">*</bpt>fabric:<ept id=\"p1\">*</ept> scheme and be unique for each application instance.",
      "pos": [
        3694,
        3804
      ]
    },
    {
      "content": "If there were any default services defined in the application manifest of the target application type, then those will also be created at this time.",
      "pos": [
        3805,
        3953
      ]
    },
    {
      "pos": [
        4814,
        4955
      ],
      "content": "The <bpt id=\"p1\">**</bpt>Get-ServiceFabricApplication<ept id=\"p1\">**</ept> command lists all applications instances that were successfully created along with their overall status."
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Get-ServiceFabricService<ept id=\"p1\">**</ept> command lists all service instances that were successfully created within a given application instance.",
      "pos": [
        4957,
        5093
      ]
    },
    {
      "content": "Default services (if any) will be listed here.",
      "pos": [
        5094,
        5140
      ]
    },
    {
      "content": "Multiple application instances can be created for any given version of a registered application type.",
      "pos": [
        5142,
        5243
      ]
    },
    {
      "content": "Each application instance will run in isolation, with its own work directory and process.",
      "pos": [
        5244,
        5333
      ]
    },
    {
      "content": "Remove an application",
      "pos": [
        5338,
        5359
      ]
    },
    {
      "content": "When an application instance is no longer needed, it can be permanently removed using the <bpt id=\"p1\">**</bpt>Remove-ServiceFabricApplication<ept id=\"p1\">**</ept> command.",
      "pos": [
        5361,
        5495
      ]
    },
    {
      "content": "This will automatically remove all services belonging to the application as well, permanently removing all service state.",
      "pos": [
        5496,
        5617
      ]
    },
    {
      "content": "This operation cannot be reversed and application state cannot be recovered.",
      "pos": [
        5618,
        5694
      ]
    },
    {
      "content": "When a particular version of an application type is no longer needed, it should be unregistered using the <bpt id=\"p1\">**</bpt>Unregister-ServiceFabricApplicationType<ept id=\"p1\">**</ept> command.",
      "pos": [
        5951,
        6109
      ]
    },
    {
      "content": "Unregistering unused types will release storage space used by the application package contents of that type on the Image Store.",
      "pos": [
        6110,
        6237
      ]
    },
    {
      "content": "An application type can be unregistered as long as there are no applications instantiated against it or pending application upgrades referencing it.",
      "pos": [
        6238,
        6386
      ]
    },
    {
      "content": "Troubleshooting",
      "pos": [
        7183,
        7198
      ]
    },
    {
      "content": "Copy-ServiceFabricApplicationPackage asks for an ImageStoreConnectionString",
      "pos": [
        7204,
        7279
      ]
    },
    {
      "content": "The Service Fabric SDK environment should already have the correct defaults set up.",
      "pos": [
        7281,
        7364
      ]
    },
    {
      "content": "But if needed, the ImageStoreConnectionString for all commands should match the value being used by the Service Fabric cluster, which can be found in the cluster manifest retrieved using the <bpt id=\"p1\">**</bpt>Get-ServiceFabricClusterManifest<ept id=\"p1\">**</ept> command:",
      "pos": [
        7365,
        7601
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        8448,
        8458
      ]
    },
    {
      "content": "Service Fabric Application Upgrade",
      "pos": [
        8461,
        8495
      ]
    },
    {
      "content": "Service Fabric Health Introduction",
      "pos": [
        8538,
        8572
      ]
    },
    {
      "content": "Diagnose and troubleshoot a Service Fabric service",
      "pos": [
        8615,
        8665
      ]
    },
    {
      "content": "Model an application in Service Fabric",
      "pos": [
        8724,
        8762
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"Service Fabric application deployment\"\n   description=\"How to deploy and remove applications in Service Fabric\"\n   services=\"service-fabric\"\n   documentationCenter=\".net\"\n   authors=\"alexwun\"\n   manager=\"timlt\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"service-fabric\"\n   ms.devlang=\"dotnet\"\n   ms.topic=\"article\"\n   ms.tgt_pltfrm=\"NA\"\n   ms.workload=\"NA\"\n   ms.date=\"06/03/2015\"\n   ms.author=\"alexwun\"/>\n\n# Deploy an application\n\nOnce an [application type has been packaged][10], it's ready for deployment into a Service Fabric cluster. Deployment involves the following three steps:\n\n1. Uploading the application package\n2. Registering the application type\n3. Creating the application instance\n\n>[AZURE.NOTE] If you use Visual Studio for deploying and debugging applications on your local development cluster, all of the steps described below are handled automatically by invoking the PowerShell scripts found in the Scripts folder of the application project. This article provides background on what those scripts are doing so that you can perform the same operations outside of Visual Studio.\n\n## Upload the application package\n\nUploading the application package puts it in a location accessible by internal Service Fabric components and can be performed through PowerShell. Before running any PowerShell commands in this article, always start by first connecting to the Service Fabric cluster using **Connect-ServiceFabricCluster**.\n\nSuppose you have a folder named *MyApplicationType* containing the necessary application manifest, service manifest(s), and code/config/data package(s), then the **Copy-ServiceFabricApplicationPackage** command will upload the package. For example:\n\n~~~\nPS D:\\temp> dir\n\n    Directory: D:\\temp\n\nMode                LastWriteTime     Length Name\n----                -------------     ------ ----\nd----         3/19/2015   8:11 PM            MyApplicationType\n\nPS D:\\temp> tree /f .\\MyApplicationType\n\nD:\\TEMP\\MYAPPLICATIONTYPE\n│   ApplicationManifest.xml\n│\n└───MyServiceManifest\n    │   ServiceManifest.xml\n    │\n    ├───MyCode\n    │       MyServiceHost.exe\n    │       MySetup.bat\n    │\n    ├───MyConfig\n    │       Settings.xml\n    │\n    └───MyData\n            init.dat\n\nPS D:\\temp> Copy-ServiceFabricApplicationPackage MyApplicationType\nCopy application package succeeded\n\nPS D:\\temp>\n~~~\n\n## Register the application package\n\nRegistering the application package, makes the application type and version declared in the application manifest available for use. The system will read the package uploaded in the previous step, verify the package (equivalent to running **Test-ServiceFabricApplicationPackage** locally), process the package contents, and copy the processed package to an internal system location.\n\n~~~\nPS D:\\temp> Register-ServiceFabricApplicationType MyApplicationType\nRegister application type succeeded\n\nPS D:\\temp> Get-ServiceFabricApplicationType\n\nApplicationTypeName    : MyApplicationType\nApplicationTypeVersion : AppManifestVersion1\nDefaultParameters      : {}\n\nPS D:\\temp>\n~~~\n\nThe **Register-ServiceFabricApplicationType** command  returns only after the application package has been successfully copied by the system. How long this takes depends on the contents of the application package. The **-TimeoutSec** parameter can be used to supply a longer timeout if needed (the default timeout is 60 seconds).\n\nThe **Get-ServiceFabricApplicationType** command will list all successfully registered application type versions.\n\n## Create the application\n\nAn application can be instantiated using any application type version that has been registered successfully using the **New-ServiceFabricApplication** command. The name of each application must start with the *fabric:* scheme and be unique for each application instance. If there were any default services defined in the application manifest of the target application type, then those will also be created at this time.\n\n~~~\nPS D:\\temp> New-ServiceFabricApplication fabric:/MyApp MyApplicationType AppManifestVersion1\n\nApplicationName        : fabric:/MyApp\nApplicationTypeName    : MyApplicationType\nApplicationTypeVersion : AppManifestVersion1\nApplicationParameters  : {}\n\nPS D:\\temp> Get-ServiceFabricApplication  \n\nApplicationName        : fabric:/MyApp\nApplicationTypeName    : MyApplicationType\nApplicationTypeVersion : AppManifestVersion1\nApplicationStatus      : Ready\nHealthState            : OK\nApplicationParameters  : {}\n\nPS D:\\temp> Get-ServiceFabricApplication | Get-ServiceFabricService\n\nServiceName            : fabric:/MyApp/MyService\nServiceKind            : Stateless\nServiceTypeName        : MyServiceType\nIsServiceGroup         : False\nServiceManifestVersion : SvcManifestVersion1\nServiceStatus          : Active\nHealthState            : Ok\n\nPS D:\\temp>\n~~~\n\nThe **Get-ServiceFabricApplication** command lists all applications instances that were successfully created along with their overall status.\n\nThe **Get-ServiceFabricService** command lists all service instances that were successfully created within a given application instance. Default services (if any) will be listed here.\n\nMultiple application instances can be created for any given version of a registered application type. Each application instance will run in isolation, with its own work directory and process.\n\n## Remove an application\n\nWhen an application instance is no longer needed, it can be permanently removed using the **Remove-ServiceFabricApplication** command. This will automatically remove all services belonging to the application as well, permanently removing all service state. This operation cannot be reversed and application state cannot be recovered.\n\n~~~\nPS D:\\temp> Remove-ServiceFabricApplication fabric:/MyApp\n\nConfirm\nContinue with this operation?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"):\nRemove application instance succeeded\n\nPS D:\\temp> Get-ServiceFabricApplication\nPS D:\\temp>\n~~~\n\nWhen a particular version of an application type is no longer needed, it should be unregistered using the **Unregister-ServiceFabricApplicationType** command. Unregistering unused types will release storage space used by the application package contents of that type on the Image Store. An application type can be unregistered as long as there are no applications instantiated against it or pending application upgrades referencing it.\n\n~~~\nPS D:\\temp> Get-ServiceFabricApplicationType\n\nApplicationTypeName    : DemoAppType\nApplicationTypeVersion : v1\nDefaultParameters      : {}\n\nApplicationTypeName    : DemoAppType\nApplicationTypeVersion : v2\nDefaultParameters      : {}\n\nApplicationTypeName    : MyApplicationType\nApplicationTypeVersion : AppManifestVersion1\nDefaultParameters      : {}\n\nPS D:\\temp> Unregister-ServiceFabricApplicationType MyApplicationType AppManifestVersion1\nUnregister application type succeeded\n\nPS D:\\temp> Get-ServiceFabricApplicationType\n\nApplicationTypeName    : DemoAppType\nApplicationTypeVersion : v1\nDefaultParameters      : {}\n\nApplicationTypeName    : DemoAppType\nApplicationTypeVersion : v2\nDefaultParameters      : {}\n\nPS D:\\temp>\n~~~\n\n<!--\n## Next steps\n\nTODO [Upgrade applications][11]\n-->\n\n## Troubleshooting\n\n### Copy-ServiceFabricApplicationPackage asks for an ImageStoreConnectionString\n\nThe Service Fabric SDK environment should already have the correct defaults set up. But if needed, the ImageStoreConnectionString for all commands should match the value being used by the Service Fabric cluster, which can be found in the cluster manifest retrieved using the **Get-ServiceFabricClusterManifest** command:\n\n~~~\nPS D:\\temp> Copy-ServiceFabricApplicationPackage .\\MyApplicationType\n\ncmdlet Copy-ServiceFabricApplicationPackage at command pipeline position 1\nSupply values for the following parameters:\nImageStoreConnectionString:\n\nPS D:\\temp> Get-ServiceFabricClusterManifest\n<ClusterManifest xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Name=\"Server-Default-SingleNode\" Version=\"1.0\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\">\n\n    [...]\n\n    <Section Name=\"Management\">\n      <Parameter Name=\"ImageStoreConnectionString\" Value=\"file:D:\\ServiceFabric\\Data\\ImageStore\" />\n    </Section>\n\n    [...]\n\nPS D:\\temp> Copy-ServiceFabricApplicationPackage .\\MyApplicationType -ImageStoreConnectionString file:D:\\ServiceFabric\\Data\\ImageStore\nCopy application package succeeded\n\nPS D:\\temp>\n~~~\n\n## Next steps\n\n[Service Fabric Application Upgrade](service-fabric-application-upgrade.md)\n\n[Service Fabric Health Introduction](service-fabric-health-introduction.md)\n\n[Diagnose and troubleshoot a Service Fabric service](service-fabric-diagnose-monitor-your-service-index.md)\n\n[Model an application in Service Fabric](service-fabric-application-model.md)\n\n<!--Link references--In actual articles, you only need a single period before the slash-->\n[10]: service-fabric-application-model.md\n[11]: service-fabric-application-upgrade.md\n "
}