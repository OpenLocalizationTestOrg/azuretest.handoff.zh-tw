{
  "nodes": [
    {
      "content": "A new insert script is registered that generates an SAS when a new Todo item is inserted.",
      "pos": [
        0,
        89
      ]
    },
    {
      "pos": [
        94,
        227
      ],
      "content": "If you haven't yet created your storage account, see <bpt id=\"p1\">[</bpt>How To Create a Storage Account<ept id=\"p1\">](../storage/storage-create-storage-account.md)</ept>."
    },
    {
      "pos": [
        232,
        331
      ],
      "content": "In the Management Portal, click <bpt id=\"p1\">**</bpt>Storage<ept id=\"p1\">**</ept>, click the storage account, then click <bpt id=\"p2\">**</bpt>Manage Keys<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        337,
        400
      ],
      "content": "Make a note of the <bpt id=\"p1\">**</bpt>Storage Account Name<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Access Key<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        499,
        714
      ],
      "content": "In your mobile service, click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab, scroll down to <bpt id=\"p2\">**</bpt>App settings<ept id=\"p2\">**</ept> and enter a <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Value<ept id=\"p4\">**</ept> pair for each of the following that you obtained from the storage account, then click <bpt id=\"p5\">**</bpt>Save<ept id=\"p5\">**</ept>."
    },
    {
      "content": "The storage account access key is stored encrypted in app settings.",
      "pos": [
        879,
        946
      ]
    },
    {
      "content": "You can access this key from any server script at runtime.",
      "pos": [
        947,
        1005
      ]
    },
    {
      "content": "For more information, see [App settings].",
      "pos": [
        1006,
        1047
      ]
    },
    {
      "content": "In the Configure tab, make sure that <bpt id=\"p1\">[</bpt>Dynamic schema<ept id=\"p1\">](http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7)</ept> is enabled.",
      "pos": [
        1052,
        1202
      ]
    },
    {
      "content": "You need dynamic schema enabled to be able to add new columns to the TodoItem table.",
      "pos": [
        1203,
        1287
      ]
    },
    {
      "content": "Dynamic schema should not be enabled in any production service.",
      "pos": [
        1288,
        1351
      ]
    },
    {
      "pos": [
        1356,
        1417
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Data<ept id=\"p1\">**</ept> tab and then click the <bpt id=\"p2\">**</bpt>TodoItem<ept id=\"p2\">**</ept> table."
    },
    {
      "pos": [
        1424,
        1562
      ],
      "content": "In <bpt id=\"p1\">**</bpt>todoitem<ept id=\"p1\">**</ept>, click the <bpt id=\"p2\">**</bpt>Script<ept id=\"p2\">**</ept> tab and select <bpt id=\"p3\">**</bpt>Insert<ept id=\"p3\">**</ept>, replace the insert function with the following code, then click <bpt id=\"p4\">**</bpt>Save<ept id=\"p4\">**</ept>:"
    },
    {
      "content": "This replaces the function that is invoked when an insert occurs in the TodoItem table with a new script.",
      "pos": [
        4089,
        4194
      ]
    },
    {
      "content": "This new script generates a new SAS for the insert, which is valid for 5 minutes, and assigns the value of the generated SAS to the <ph id=\"ph1\">`sasQueryString`</ph> property of the returned item.",
      "pos": [
        4195,
        4374
      ]
    },
    {
      "content": "The <ph id=\"ph1\">`imageUri`</ph> property is also set to the resource path of the new BLOB to enable image display during binding in the client UI.",
      "pos": [
        4375,
        4504
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This code creates an SAS for an individual BLOB.",
      "pos": [
        4511,
        4572
      ]
    },
    {
      "content": "If you need to upload multiple blobs to a container using the same SAS, you can instead call the <bpt id=\"p1\">[</bpt>generateSharedAccessSignature method<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=390455)</ept><ph id=\"ph1\">&lt;/a&gt;</ph> with an empty blob resource name, like this:",
      "pos": [
        4573,
        4804
      ]
    },
    {
      "content": "Next, you will update the quickstart app to add image upload functionality by using the SAS generated on insert.",
      "pos": [
        4922,
        5034
      ]
    }
  ],
  "content": "A new insert script is registered that generates an SAS when a new Todo item is inserted.\n\n0. If you haven't yet created your storage account, see [How To Create a Storage Account](../storage/storage-create-storage-account.md).\n\n1. In the Management Portal, click **Storage**, click the storage account, then click **Manage Keys**. \n\n2. Make a note of the **Storage Account Name** and **Access Key**.\n\n    ![](./media/mobile-services-configure-blob-storage/mobile-blob-storage-account-keys.png)\n\n3. In your mobile service, click the **Configure** tab, scroll down to **App settings** and enter a **Name** and **Value** pair for each of the following that you obtained from the storage account, then click **Save**.\n\n    + `STORAGE_ACCOUNT_NAME`\n    + `STORAGE_ACCOUNT_ACCESS_KEY`\n\n    ![](./media/mobile-services-configure-blob-storage/mobile-blob-storage-app-settings.png)\n\n    The storage account access key is stored encrypted in app settings. You can access this key from any server script at runtime. For more information, see [App settings].\n\n4. In the Configure tab, make sure that [Dynamic schema](http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7) is enabled. You need dynamic schema enabled to be able to add new columns to the TodoItem table. Dynamic schema should not be enabled in any production service.\n\n4. Click the **Data** tab and then click the **TodoItem** table. \n\n5.  In **todoitem**, click the **Script** tab and select **Insert**, replace the insert function with the following code, then click **Save**:\n\n        var azure = require('azure');\n        var qs = require('querystring');\n        var appSettings = require('mobileservice-config').appSettings;\n        \n        function insert(item, user, request) {\n            // Get storage account settings from app settings. \n            var accountName = appSettings.STORAGE_ACCOUNT_NAME;\n            var accountKey = appSettings.STORAGE_ACCOUNT_ACCESS_KEY;\n            var host = accountName + '.blob.core.windows.net';\n        \n            if ((typeof item.containerName !== \"undefined\") && (\n            item.containerName !== null)) {\n                // Set the BLOB store container name on the item, which must be lowercase.\n                item.containerName = item.containerName.toLowerCase();\n        \n                // If it does not already exist, create the container \n                // with public read access for blobs.        \n                var blobService = azure.createBlobService(accountName, accountKey, host);\n                blobService.createContainerIfNotExists(item.containerName, {\n                    publicAccessLevel: 'blob'\n                }, function(error) {\n                    if (!error) {\n        \n                        // Provide write access to the container for the next 5 mins.        \n                        var sharedAccessPolicy = {\n                            AccessPolicy: {\n                                Permissions: azure.Constants.BlobConstants.SharedAccessPermissions.WRITE,\n                                Expiry: new Date(new Date().getTime() + 5 * 60 * 1000)\n                            }\n                        };\n        \n                        // Generate the upload URL with SAS for the new image.\n                        var sasQueryUrl = \n                        blobService.generateSharedAccessSignature(item.containerName, \n                        item.resourceName, sharedAccessPolicy);\n        \n                        // Set the query string.\n                        item.sasQueryString = qs.stringify(sasQueryUrl.queryString);\n        \n                        // Set the full path on the new new item, \n                        // which is used for data binding on the client. \n                        item.imageUri = sasQueryUrl.baseUrl + sasQueryUrl.path;\n        \n                    } else {\n                        console.error(error);\n                    }\n                    request.execute();\n                });\n            } else {\n                request.execute();\n            }\n        }\n\n    This replaces the function that is invoked when an insert occurs in the TodoItem table with a new script. This new script generates a new SAS for the insert, which is valid for 5 minutes, and assigns the value of the generated SAS to the `sasQueryString` property of the returned item. The `imageUri` property is also set to the resource path of the new BLOB to enable image display during binding in the client UI.\n\n    >[AZURE.NOTE] This code creates an SAS for an individual BLOB. If you need to upload multiple blobs to a container using the same SAS, you can instead call the [generateSharedAccessSignature method](http://go.microsoft.com/fwlink/?LinkId=390455)</a> with an empty blob resource name, like this: \n    >                 \n    >     blobService.generateSharedAccessSignature(containerName, '', sharedAccessPolicy);\n\nNext, you will update the quickstart app to add image upload functionality by using the SAS generated on insert.\n \n<!-- Anchors. -->\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[App settings]: http://msdn.microsoft.com/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7\n"
}