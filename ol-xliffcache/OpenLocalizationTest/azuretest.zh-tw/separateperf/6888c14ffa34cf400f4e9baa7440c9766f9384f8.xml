{
  "nodes": [
    {
      "content": "Enable remote debugging with continuous delivery",
      "pos": [
        27,
        75
      ]
    },
    {
      "content": "Learn how to enable remote debugging when using continuous delivery to deploy to Azure",
      "pos": [
        94,
        180
      ]
    },
    {
      "content": "Enable remote debugging when using continuous delivery to publish to Azure",
      "pos": [
        515,
        589
      ]
    },
    {
      "pos": [
        591,
        758
      ],
      "content": "You can enable remote debugging in Azure when you use <bpt id=\"p1\">[</bpt>continuous delivery<ept id=\"p1\">](cloud-services-dotnet-continuous-delivery.md)</ept> to publish to Azure by following these steps."
    },
    {
      "content": "In this topic:",
      "pos": [
        760,
        774
      ]
    },
    {
      "content": "Enabling remote debugging for cloud services",
      "pos": [
        777,
        821
      ]
    },
    {
      "content": "Enabling remote debugging for virtual machines",
      "pos": [
        840,
        886
      ]
    },
    {
      "pos": [
        909,
        980
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cloudservice\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enabling remote debugging for cloud services"
    },
    {
      "pos": [
        985,
        1141
      ],
      "content": "On the build agent, set up the initial environment for Azure as outlined in <bpt id=\"p1\">[</bpt>Command-Line Build for Azure<ept id=\"p1\">](http://msdn.microsoft.com/library/hh535755.aspx)</ept>."
    },
    {
      "content": "Because the remote debug runtime (msvsmon.exe) is required for the package, install the <bpt id=\"p1\">[</bpt>Remote Tools for Visual Studio 2015 RC<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=46874)</ept> (or the <bpt id=\"p2\">[</bpt>Remote Tools for Visual Studio 2013 Update 5 RC<ept id=\"p2\">](https://www.microsoft.com/en-us/download/details.aspx?id=46870)</ept> if you’re using Visual Studio 2013).",
      "pos": [
        1145,
        1489
      ]
    },
    {
      "content": "As an alternative, you can copy the remote debug binaries from a system that has Visual Studio installed.",
      "pos": [
        1490,
        1595
      ]
    },
    {
      "content": "Create a certificate as outlined in <bpt id=\"p1\">[</bpt>Create a Service Certificate for Azure<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/gg432987.aspx)</ept>.",
      "pos": [
        1599,
        1731
      ]
    },
    {
      "content": "Keep the .pfx and RDP certificate thumbprint and upload the certificate to the target cloud service.",
      "pos": [
        1732,
        1832
      ]
    },
    {
      "content": "Use the following options in the MSBuild command line to build and package with remote debug enabled.",
      "pos": [
        1836,
        1937
      ]
    },
    {
      "content": "(Substitute actual paths to your system and project files for the angle-bracketed items.)",
      "pos": [
        1938,
        2027
      ]
    },
    {
      "pos": [
        2345,
        2458
      ],
      "content": "<ph id=\"ph1\">`VSX64RemoteDebuggerPath`</ph> is the path to the folder containing msvsmon.exe in the Remote Tools for Visual Studio."
    },
    {
      "content": "Publish to the target cloud service by using the package and .cscfg file generated in the previous step.",
      "pos": [
        2463,
        2567
      ]
    },
    {
      "content": "Import the certificate (.pfx file) to the machine that has Visual Studio with Azure SDK for .NET installed.",
      "pos": [
        2571,
        2678
      ]
    },
    {
      "pos": [
        2683,
        2758
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"virtualmachine\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Enabling remote debugging for virtual machines"
    },
    {
      "content": "Create an Azure virtual machine.",
      "pos": [
        2763,
        2795
      ]
    },
    {
      "content": "See <bpt id=\"p1\">[</bpt>Create a Virtual Machine Running Windows Server<ept id=\"p1\">](../virtual-machines-windows-tutorial.md)</ept> or <bpt id=\"p2\">[</bpt>Creating Azure Virtual Machines in Visual Studio<ept id=\"p2\">](http://msdn.microsoft.com/library/azure/dn569263.aspx)</ept>.",
      "pos": [
        2796,
        3000
      ]
    },
    {
      "content": "On the <bpt id=\"p1\">[</bpt>Azure portal page<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=269851)</ept>, view the virtual machine dashboard to see the virtual machine’s “RDP Certificate Thumbprint”.",
      "pos": [
        3004,
        3174
      ]
    },
    {
      "content": "This is used for the <ph id=\"ph1\">`ServerThumbprint`</ph> value in the extension configuration.",
      "pos": [
        3175,
        3252
      ]
    },
    {
      "pos": [
        3256,
        3442
      ],
      "content": "Create a client certificate as outlined in <bpt id=\"p1\">[</bpt>Create a Service Certificate for Azure<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/gg432987.aspx)</ept> (keep the .pfx and RDP certificate thumbprint)."
    },
    {
      "pos": [
        3446,
        3586
      ],
      "content": "Install <bpt id=\"p1\">[</bpt>Azure Powershell<ept id=\"p1\">](http://go.microsoft.com/?linkid=9811175&amp;clcid=0x409)</ept> (version 0.7.4 or later) from the Microsoft Download Center."
    },
    {
      "content": "Run the following script to enable the RemoteDebug extension.",
      "pos": [
        3590,
        3651
      ]
    },
    {
      "content": "Replace the paths and personal data with your own, such as your subscription name, service name, and thumbprint.",
      "pos": [
        3652,
        3764
      ]
    },
    {
      "content": "(NOTE: This script is configured for Visual Studio 2015 RC.",
      "pos": [
        3765,
        3824
      ]
    },
    {
      "content": "If you’re using Visual Studio 2013, use \"RemoteDebugVS2013\" for ReferenceName and ExtensionName.)",
      "pos": [
        3825,
        3922
      ]
    },
    {
      "pos": [
        3928,
        3954
      ],
      "content": "<pre>\n Add-AzureAccount",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Add-AzureAccount",
          "pos": [
            7,
            23
          ]
        }
      ]
    },
    {
      "content": "Select-AzureSubscription \"My Microsoft Subscription\"",
      "pos": [
        3960,
        4012
      ]
    },
    {
      "content": "$vm = Get-AzureVM -ServiceName \"mytestvm1\" -Name \"mytestvm1\"",
      "pos": [
        4018,
        4078
      ]
    },
    {
      "pos": [
        4084,
        4235
      ],
      "content": "$endpoints = @(\n ,@{Name=\"RDConnVS2013\"; PublicPort=30400; PrivatePort=30398}\n ,@{Name=\"RDFwdrVS2013\"; PublicPort=31400; PrivatePort=31398}\n )",
      "leadings": [
        "",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "$endpoints = @(",
          "pos": [
            0,
            15
          ]
        },
        {
          "content": ",@{Name=\"RDConnVS2013\"; PublicPort=30400; PrivatePort=30398}",
          "pos": [
            17,
            77
          ]
        },
        {
          "content": ",@{Name=\"RDFwdrVS2013\"; PublicPort=31400; PrivatePort=31398}",
          "pos": [
            79,
            139
          ]
        },
        {
          "content": ")",
          "pos": [
            141,
            142
          ]
        }
      ]
    },
    {
      "pos": [
        4241,
        4416
      ],
      "content": "foreach($endpoint in $endpoints)\n {\n Add-AzureEndpoint -VM $vm -Name $endpoint.Name -Protocol tcp -PublicPort $endpoint.PublicPort -LocalPort $endpoint.PrivatePort\n }",
      "leadings": [
        "",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "foreach($endpoint in $endpoints)",
          "pos": [
            0,
            32
          ]
        },
        {
          "content": "{",
          "pos": [
            34,
            35
          ]
        },
        {
          "content": "Add-AzureEndpoint -VM $vm -Name $endpoint.Name -Protocol tcp -PublicPort $endpoint.PublicPort -LocalPort $endpoint.PrivatePort",
          "pos": [
            37,
            163
          ]
        },
        {
          "content": "}",
          "pos": [
            165,
            166
          ]
        }
      ]
    },
    {
      "pos": [
        4422,
        4963
      ],
      "content": "$referenceName = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug.RemoteDebugVS2015\"\n $publisher = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug\"\n $extensionName = \"RemoteDebugVS2015\"\n $version = \"1.*\"\n $publicConfiguration = \"<PublicConfig><Connector.Enabled>true</Connector.Enabled><ClientThumbprint>56D7D1B25B472268E332F7FC0C87286458BFB6B2</ClientThumbprint><ServerThumbprint>E7DCB00CB916C468CC3228261D6E4EE45C8ED3C6</ServerThumbprint><ConnectorPort>30398</ConnectorPort><ForwarderPort>31398</ForwarderPort></PublicConfig>\"",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "$referenceName = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug.RemoteDebugVS2015\"",
          "pos": [
            0,
            84
          ]
        },
        {
          "content": "$publisher = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug\"",
          "pos": [
            86,
            148
          ]
        },
        {
          "content": "$extensionName = \"RemoteDebugVS2015\"",
          "pos": [
            150,
            186
          ]
        },
        {
          "content": "$version = \"1.*\"",
          "pos": [
            188,
            204
          ]
        },
        {
          "content": "$publicConfiguration = \"",
          "pos": [
            206,
            230
          ]
        },
        {
          "content": "&lt;Connector.Enabled&gt;true&lt;/Connector.Enabled&gt;",
          "pos": [
            244,
            287
          ]
        },
        {
          "content": "56D7D1B25B472268E332F7FC0C87286458BFB6B2",
          "pos": [
            305,
            345
          ]
        },
        {
          "content": "E7DCB00CB916C468CC3228261D6E4EE45C8ED3C6",
          "pos": [
            382,
            422
          ]
        },
        {
          "content": "30398",
          "pos": [
            456,
            461
          ]
        },
        {
          "content": "31398",
          "pos": [
            492,
            497
          ]
        },
        {
          "content": "\"",
          "pos": [
            528,
            529
          ]
        }
      ]
    },
    {
      "pos": [
        4969,
        5167
      ],
      "content": "$vm | Set-AzureVMExtension `\n -ReferenceName $referenceName `\n -Publisher $publisher `\n -ExtensionName $extensionName `\n -Version $version `\n -PublicConfiguration $publicConfiguration",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "$vm | Set-AzureVMExtension <ph id=\"ph1\">`\n -ReferenceName $referenceName `</ph>",
          "pos": [
            0,
            61
          ]
        },
        {
          "content": "-Publisher $publisher <ph id=\"ph1\">`\n -ExtensionName $extensionName `</ph>",
          "pos": [
            63,
            119
          ]
        },
        {
          "content": "-Version $version `",
          "pos": [
            121,
            140
          ]
        },
        {
          "content": "-PublicConfiguration $publicConfiguration",
          "pos": [
            142,
            183
          ]
        }
      ]
    },
    {
      "pos": [
        5173,
        5530
      ],
      "content": "foreach($extension in $vm.VM.ResourceExtensionReferences)\n {\n if(($extension.ReferenceName -eq $referenceName) `\n -and ($extension.Publisher -eq $publisher) `\n -and ($extension.Name -eq $extensionName) `\n -and ($extension.Version -eq $version))\n {\n $extension.ResourceExtensionParameterValues[0].Key = 'config.txt'\n break\n }\n }",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "foreach($extension in $vm.VM.ResourceExtensionReferences)",
          "pos": [
            0,
            57
          ]
        },
        {
          "content": "{",
          "pos": [
            59,
            60
          ]
        },
        {
          "content": "if(($extension.ReferenceName -eq $referenceName) <ph id=\"ph1\">`\n -and ($extension.Publisher -eq $publisher) `</ph>",
          "pos": [
            62,
            158
          ]
        },
        {
          "content": "-and ($extension.Name -eq $extensionName) `",
          "pos": [
            160,
            203
          ]
        },
        {
          "content": "-and ($extension.Version -eq $version))",
          "pos": [
            205,
            244
          ]
        },
        {
          "content": "{",
          "pos": [
            246,
            247
          ]
        },
        {
          "content": "$extension.ResourceExtensionParameterValues[0].Key = 'config.txt'",
          "pos": [
            249,
            314
          ]
        },
        {
          "content": "break",
          "pos": [
            316,
            321
          ]
        },
        {
          "content": "}",
          "pos": [
            323,
            324
          ]
        },
        {
          "content": "}",
          "pos": [
            326,
            327
          ]
        }
      ]
    },
    {
      "pos": [
        5536,
        5567
      ],
      "content": "$vm | Update-AzureVM\n </pre>",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "$vm | Update-AzureVM",
          "pos": [
            0,
            20
          ]
        }
      ]
    },
    {
      "content": "Import the certificate (.pfx) to the machine that has Visual Studio with Azure SDK for .NET installed.",
      "pos": [
        5572,
        5674
      ]
    },
    {
      "content": "test",
      "pos": [
        5677,
        5681
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Enable remote debugging with continuous delivery\"\n    description=\"Learn how to enable remote debugging when using continuous delivery to deploy to Azure\"\n    services=\"cloud-services\"\n    documentationCenter=\".net\"\n    authors=\"kempb\"\n    manager=\"douge\"\n    editor=\"tglee\"/>\n\n<tags\n    ms.service=\"cloud-services\"\n    ms.workload=\"infrastructure-services\"\n    ms.tgt_pltfrm=\"vm-multiple\"\n    ms.devlang=\"dotnet\"\n    ms.topic=\"article\"\n    ms.date=\"06/09/2015\"\n    ms.author=\"kempb\"/>\n# Enable remote debugging when using continuous delivery to publish to Azure\n\nYou can enable remote debugging in Azure when you use [continuous delivery](cloud-services-dotnet-continuous-delivery.md) to publish to Azure by following these steps.\n\nIn this topic:\n\n[Enabling remote debugging for cloud services](#cloudservice)\n\n[Enabling remote debugging for virtual machines](#virtualmachine)\n\n## <a name=\"cloudservice\"></a>Enabling remote debugging for cloud services\n\n1. On the build agent, set up the initial environment for Azure as outlined in [Command-Line Build for Azure](http://msdn.microsoft.com/library/hh535755.aspx).\n2. Because the remote debug runtime (msvsmon.exe) is required for the package, install the [Remote Tools for Visual Studio 2015 RC](http://www.microsoft.com/download/details.aspx?id=46874) (or the [Remote Tools for Visual Studio 2013 Update 5 RC](https://www.microsoft.com/en-us/download/details.aspx?id=46870) if you’re using Visual Studio 2013). As an alternative, you can copy the remote debug binaries from a system that has Visual Studio installed.\n3. Create a certificate as outlined in [Create a Service Certificate for Azure](http://msdn.microsoft.com/library/azure/gg432987.aspx). Keep the .pfx and RDP certificate thumbprint and upload the certificate to the target cloud service.\n4. Use the following options in the MSBuild command line to build and package with remote debug enabled. (Substitute actual paths to your system and project files for the angle-bracketed items.)\n\n        msbuild /TARGET:PUBLISH /PROPERTY:Configuration=Debug;EnableRemoteDebugger=true;VSX64RemoteDebuggerPath=\"<remote tools path>\";RemoteDebuggerConnectorCertificateThumbprint=\"<thumbprint of the certificate added to the cloud service>\";RemoteDebuggerConnectorVersion=\"2.6\" \"<path to your VS solution file>\"\n\n    `VSX64RemoteDebuggerPath` is the path to the folder containing msvsmon.exe in the Remote Tools for Visual Studio.\n\n5. Publish to the target cloud service by using the package and .cscfg file generated in the previous step.\n6. Import the certificate (.pfx file) to the machine that has Visual Studio with Azure SDK for .NET installed.\n\n## <a name=\"virtualmachine\"></a>Enabling remote debugging for virtual machines\n\n1. Create an Azure virtual machine. See [Create a Virtual Machine Running Windows Server](../virtual-machines-windows-tutorial.md) or [Creating Azure Virtual Machines in Visual Studio](http://msdn.microsoft.com/library/azure/dn569263.aspx).\n2. On the [Azure portal page](http://go.microsoft.com/fwlink/p/?LinkID=269851), view the virtual machine dashboard to see the virtual machine’s “RDP Certificate Thumbprint”. This is used for the `ServerThumbprint` value in the extension configuration.\n3. Create a client certificate as outlined in [Create a Service Certificate for Azure](http://msdn.microsoft.com/library/azure/gg432987.aspx) (keep the .pfx and RDP certificate thumbprint).\n4. Install [Azure Powershell](http://go.microsoft.com/?linkid=9811175&clcid=0x409) (version 0.7.4 or later) from the Microsoft Download Center.\n5. Run the following script to enable the RemoteDebug extension. Replace the paths and personal data with your own, such as your subscription name, service name, and thumbprint. (NOTE: This script is configured for Visual Studio 2015 RC. If you’re using Visual Studio 2013, use \"RemoteDebugVS2013\" for ReferenceName and ExtensionName.)\n\n    <pre>\n    Add-AzureAccount\n\n    Select-AzureSubscription \"My Microsoft Subscription\"\n\n    $vm = Get-AzureVM -ServiceName \"mytestvm1\" -Name \"mytestvm1\"\n\n    $endpoints = @(\n    ,@{Name=\"RDConnVS2013\"; PublicPort=30400; PrivatePort=30398}\n    ,@{Name=\"RDFwdrVS2013\"; PublicPort=31400; PrivatePort=31398}\n    )\n\n    foreach($endpoint in $endpoints)\n    {\n    Add-AzureEndpoint -VM $vm -Name $endpoint.Name -Protocol tcp -PublicPort $endpoint.PublicPort -LocalPort $endpoint.PrivatePort\n    }\n\n    $referenceName = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug.RemoteDebugVS2015\"\n    $publisher = \"Microsoft.VisualStudio.WindowsAzure.RemoteDebug\"\n    $extensionName = \"RemoteDebugVS2015\"\n    $version = \"1.*\"\n    $publicConfiguration = \"<PublicConfig><Connector.Enabled>true</Connector.Enabled><ClientThumbprint>56D7D1B25B472268E332F7FC0C87286458BFB6B2</ClientThumbprint><ServerThumbprint>E7DCB00CB916C468CC3228261D6E4EE45C8ED3C6</ServerThumbprint><ConnectorPort>30398</ConnectorPort><ForwarderPort>31398</ForwarderPort></PublicConfig>\"\n\n    $vm | Set-AzureVMExtension `\n    -ReferenceName $referenceName `\n    -Publisher $publisher `\n    -ExtensionName $extensionName `\n    -Version $version `\n    -PublicConfiguration $publicConfiguration\n\n    foreach($extension in $vm.VM.ResourceExtensionReferences)\n    {\n    if(($extension.ReferenceName -eq $referenceName) `\n    -and ($extension.Publisher -eq $publisher) `\n    -and ($extension.Name -eq $extensionName) `\n    -and ($extension.Version -eq $version))\n    {\n    $extension.ResourceExtensionParameterValues[0].Key = 'config.txt'\n    break\n    }\n    }\n\n    $vm | Update-AzureVM\n    </pre>\n\n6. Import the certificate (.pfx) to the machine that has Visual Studio with Azure SDK for .NET installed.\n \ntest\n"
}