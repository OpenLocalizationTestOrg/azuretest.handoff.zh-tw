<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In order to support the offline features of mobile services, we used the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface and initialized <ph id="ph2">`MobileServiceClient.SyncContext`</ph> with a local store.</source>
          <target state="new">In order to support the offline features of mobile services, we used the <ph id="ph1">`IMobileServiceSyncTable`</ph> interface and initialized <ph id="ph2">`MobileServiceClient.SyncContext`</ph> with a local store.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this case the local store was a SQLite database.</source>
          <target state="new">In this case the local store was a SQLite database.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</source>
          <target state="new">The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When we wanted to synchronize the local store with the server, we used the <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph> and <ph id="ph2">`MobileServiceClient.SyncContext.PushAsync`</ph> methods.</source>
          <target state="new">When we wanted to synchronize the local store with the server, we used the <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph> and <ph id="ph2">`MobileServiceClient.SyncContext.PushAsync`</ph> methods.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To push changes to the server, we called <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</source>
          <target state="new">To push changes to the server, we called <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</source>
          <target state="new">This method is a member of <ph id="ph1">`IMobileServicesSyncContext`</ph> instead of the sync table because it will push changes across all tables.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</source>
          <target state="new">Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To pull data from a table on the server to the app, we called <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph>.</source>
          <target state="new">To pull data from a table on the server to the app, we called <ph id="ph1">`IMobileServiceSyncTable.PullAsync`</ph>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A pull always issues a push first.</source>
          <target state="new">A pull always issues a push first.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is to ensure all tables in the local store along with relationships remain consistent.</source>
          <target state="new">This is to ensure all tables in the local store along with relationships remain consistent.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are also overloads of <ph id="ph1">`PullAsync()`</ph> that allow a query to be specified in order to filter the data that is stored on the client.</source>
          <target state="new">There are also overloads of <ph id="ph1">`PullAsync()`</ph> that allow a query to be specified in order to filter the data that is stored on the client.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If a query is not passed, <ph id="ph1">`PullAsync()`</ph> will pull all rows in the corresponding table (or query).</source>
          <target state="new">If a query is not passed, <ph id="ph1">`PullAsync()`</ph> will pull all rows in the corresponding table (or query).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can pass the query to filter only the changes your app needs to sync with.</source>
          <target state="new">You can pass the query to filter only the changes your app needs to sync with.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To enable incremental sync, pass a query ID to <ph id="ph1">`PullAsync()`</ph>.</source>
          <target state="new">To enable incremental sync, pass a query ID to <ph id="ph1">`PullAsync()`</ph>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The query ID is used to store the last updated timestamp from the results of the last pull operation.</source>
          <target state="new">The query ID is used to store the last updated timestamp from the results of the last pull operation.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The query ID should be a descriptive string that is unique for each logical query in your app.</source>
          <target state="new">The query ID should be a descriptive string that is unique for each logical query in your app.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the query has a parameter, then the same parameter value has to be part of the query ID.</source>
          <target state="new">If the query has a parameter, then the same parameter value has to be part of the query ID.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For instance, if you are filtering on userid, it needs to be part of the query ID:</source>
          <target state="new">For instance, if you are filtering on userid, it needs to be part of the query ID:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to opt out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</source>
          <target state="new">If you want to opt out of incremental sync, pass <ph id="ph1">`null`</ph> as the query ID.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, all records will be retrieved on every call to <ph id="ph1">`PullAsync`</ph>, which is potentially inefficient.</source>
          <target state="new">In this case, all records will be retrieved on every call to <ph id="ph1">`PullAsync`</ph>, which is potentially inefficient.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</source>
          <target state="new">To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Otherwise, your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</source>
          <target state="new">Otherwise, your app should periodically call <ph id="ph1">`IMobileServiceSyncTable.PurgeAsync()`</ph> to purge the local store.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91788f8bcfd8655e6a25cd07ee4e53fdf89ec42b</xliffext:olfilehash>
  </header>
</xliff>