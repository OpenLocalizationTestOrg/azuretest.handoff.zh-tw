{
  "nodes": [
    {
      "content": "Azure AD Connect Sync: Functions Reference",
      "pos": [
        27,
        69
      ]
    },
    {
      "content": "Reference of declarative provisioning expressions in Azure AD Connect Sync.",
      "pos": [
        88,
        163
      ]
    },
    {
      "content": "Azure AD Connect Sync: Functions Reference",
      "pos": [
        475,
        517
      ]
    },
    {
      "content": "In Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization.",
      "pos": [
        520,
        627
      ]
    },
    {
      "content": "The Syntax of the functions is expressed using the following format:",
      "pos": [
        633,
        701
      ]
    },
    {
      "content": "If a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.",
      "pos": [
        771,
        860
      ]
    },
    {
      "content": "The functions are strongly typed and they verify that the type passed in matches the documented type.",
      "pos": [
        866,
        967
      ]
    },
    {
      "content": "An error is thrown if the type does not match.",
      "pos": [
        972,
        1018
      ]
    },
    {
      "content": "The types are expressed with the following syntax:",
      "pos": [
        1020,
        1070
      ]
    },
    {
      "pos": [
        1074,
        1090
      ],
      "content": "<bpt id=\"p1\">**</bpt>bin<ept id=\"p1\">**</ept> – Binary"
    },
    {
      "pos": [
        1093,
        1111
      ],
      "content": "<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept> – Boolean"
    },
    {
      "pos": [
        1114,
        1136
      ],
      "content": "<bpt id=\"p1\">**</bpt>dt<ept id=\"p1\">**</ept> – UTC Date/Time"
    },
    {
      "pos": [
        1139,
        1180
      ],
      "content": "<bpt id=\"p1\">**</bpt>enum<ept id=\"p1\">**</ept> – Enumeration of known constants"
    },
    {
      "pos": [
        1183,
        1247
      ],
      "content": "<bpt id=\"p1\">**</bpt>exp<ept id=\"p1\">**</ept> – Expression, which is expected to evaluate to a Boolean"
    },
    {
      "pos": [
        1250,
        1281
      ],
      "content": "<bpt id=\"p1\">**</bpt>mvbin<ept id=\"p1\">**</ept> – Multi Valued Binary"
    },
    {
      "pos": [
        1284,
        1318
      ],
      "content": "<bpt id=\"p1\">**</bpt>mvstr<ept id=\"p1\">**</ept> – Multi Valued Reference"
    },
    {
      "pos": [
        1321,
        1338
      ],
      "content": "<bpt id=\"p1\">**</bpt>num<ept id=\"p1\">**</ept> – Numeric"
    },
    {
      "pos": [
        1341,
        1374
      ],
      "content": "<bpt id=\"p1\">**</bpt>ref<ept id=\"p1\">**</ept> – Single Valued Reference"
    },
    {
      "pos": [
        1377,
        1407
      ],
      "content": "<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept> – Single Valued String"
    },
    {
      "pos": [
        1410,
        1456
      ],
      "content": "<bpt id=\"p1\">**</bpt>var<ept id=\"p1\">**</ept> – A variant of (almost) any other type"
    },
    {
      "pos": [
        1459,
        1492
      ],
      "content": "<bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept> – doesn’t return a value"
    },
    {
      "content": "Functions Reference",
      "pos": [
        1499,
        1518
      ]
    },
    {
      "content": "Conversion:",
      "pos": [
        1533,
        1544
      ]
    },
    {
      "pos": [
        1548,
        2161
      ],
      "content": "<bpt id=\"p1\">[</bpt>CBool<ept id=\"p1\">](#cbool)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>CDate<ept id=\"p2\">](#cdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>CGuid<ept id=\"p3\">](#cguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>ConvertFromBase64<ept id=\"p4\">](#convertfrombase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>ConvertToBase64<ept id=\"p5\">](#converttobase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>ConvertFromUTF8Hex<ept id=\"p6\">](#convertfromutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>ConvertToUTF8Hex<ept id=\"p7\">](#converttoutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>CNum<ept id=\"p8\">](#cnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p9\">[</bpt>CRef<ept id=\"p9\">](#cref)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p10\">[</bpt>CStr<ept id=\"p10\">](#cstr)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p11\">[</bpt>StringFromGuid<ept id=\"p11\">](#StringFromGuid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p12\">[</bpt>StringFromSid<ept id=\"p12\">](#stringfromsid)</ept>"
    },
    {
      "content": "Date / Time:",
      "pos": [
        2165,
        2177
      ]
    },
    {
      "pos": [
        2181,
        2405
      ],
      "content": "<bpt id=\"p1\">[</bpt>DateAdd<ept id=\"p1\">](#dateadd)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>DateFromNum<ept id=\"p2\">](#datefromnum)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>FormatDateTime<ept id=\"p3\">](#formatdatetime)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>Now<ept id=\"p4\">](#now)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>NumFromDate<ept id=\"p5\">](#numfromdate)</ept>"
    },
    {
      "content": "Directory",
      "pos": [
        2409,
        2418
      ]
    },
    {
      "pos": [
        2422,
        2574
      ],
      "content": "<bpt id=\"p1\">[</bpt>DNComponent<ept id=\"p1\">](#dncomponent)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>DNComponentRev<ept id=\"p2\">](#dncomponentrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>EscapeDNComponent<ept id=\"p3\">](#escapedncomponent)</ept>"
    },
    {
      "content": "Insprection:",
      "pos": [
        2578,
        2590
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>IsBitSet<ept id=\"p1\">](#isbitset)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>IsDate<ept id=\"p2\">](#isdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>IsEmpty<ept id=\"p3\">](#isempty)</ept>",
      "pos": [
        2594,
        2704
      ]
    },
    {
      "content": "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p1\">[</bpt>IsGuid<ept id=\"p1\">](#isguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>IsNull<ept id=\"p2\">](#isnull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>IsNullOrEmpty<ept id=\"p3\">](#isnullorempty)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>IsNumeric<ept id=\"p4\">](#isnumeric)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>IsPresent<ept id=\"p5\">](#ispresent)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>IsString<ept id=\"p6\">](#isstring)</ept>",
      "pos": [
        2705,
        2993
      ]
    },
    {
      "content": "Math:",
      "pos": [
        2998,
        3003
      ]
    },
    {
      "pos": [
        3007,
        3114
      ],
      "content": "<bpt id=\"p1\">[</bpt>BitAnd<ept id=\"p1\">](#bitand)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>BitOr<ept id=\"p2\">](#bitor)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>RandomNum<ept id=\"p3\">](#randomnum)</ept>"
    },
    {
      "content": "Multi-valued",
      "pos": [
        3118,
        3130
      ]
    },
    {
      "pos": [
        3134,
        3431
      ],
      "content": "<bpt id=\"p1\">[</bpt>Contains<ept id=\"p1\">](#contains)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>Count<ept id=\"p2\">](#count)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Item<ept id=\"p3\">](#item)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>ItemOrNull<ept id=\"p4\">](#itemornull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Join<ept id=\"p5\">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>RemoveDuplicates<ept id=\"p6\">](#removeduplicates)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>Split<ept id=\"p7\">](#split)</ept>"
    },
    {
      "content": "Program Flow:",
      "pos": [
        3435,
        3448
      ]
    },
    {
      "pos": [
        3452,
        3548
      ],
      "content": "<bpt id=\"p1\">[</bpt>Error<ept id=\"p1\">](#error)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>IIF<ept id=\"p2\">](#iif)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Switch<ept id=\"p3\">](#switch)</ept>"
    },
    {
      "content": "Text",
      "pos": [
        3553,
        3557
      ]
    },
    {
      "pos": [
        3561,
        4294
      ],
      "content": "<bpt id=\"p1\">[</bpt>GUID<ept id=\"p1\">](#guid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>InStr<ept id=\"p2\">](#instr)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>InStrRev<ept id=\"p3\">](#instrrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>LCase<ept id=\"p4\">](#lcase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Left<ept id=\"p5\">](#left)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>Len<ept id=\"p6\">](#len)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>LTrim<ept id=\"p7\">](#ltrim)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>Mid<ept id=\"p8\">](#mid)</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p9\">[</bpt>PadLeft<ept id=\"p9\">](#padleft)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p10\">[</bpt>PadRight<ept id=\"p10\">](#padright)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p11\">[</bpt>PCase<ept id=\"p11\">](#pcase)</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p12\">[</bpt>Replace<ept id=\"p12\">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p13\">[</bpt>ReplaceChars<ept id=\"p13\">](#replacechars)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p14\">[</bpt>Right<ept id=\"p14\">](#right)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p15\">[</bpt>RTrim<ept id=\"p15\">](rtrim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p16\">[</bpt>Trim<ept id=\"p16\">](#trim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p17\">[</bpt>UCase<ept id=\"p17\">](#ucase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p18\">[</bpt>Word<ept id=\"p18\">](#word)</ept>"
    },
    {
      "content": "BitAnd",
      "pos": [
        4311,
        4317
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        4319,
        4335
      ]
    },
    {
      "content": "The BitAnd function sets specified bits on a value.",
      "pos": [
        4341,
        4392
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        4395,
        4406
      ]
    },
    {
      "content": "value1, value2: numeric values which should be AND’ed together",
      "pos": [
        4452,
        4514
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        4517,
        4529
      ]
    },
    {
      "content": "This function converts both parameters to the binary representation and sets a bit to:",
      "pos": [
        4534,
        4620
      ]
    },
    {
      "pos": [
        4625,
        4696
      ],
      "content": "0 - if one or both of the corresponding bits in <bpt id=\"p1\">*</bpt>mask<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>flag<ept id=\"p2\">*</ept> are 0"
    },
    {
      "content": "1 - if both of the corresponding bits are 1.",
      "pos": [
        4699,
        4743
      ]
    },
    {
      "content": "In other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1.",
      "pos": [
        4746,
        4848
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        4852,
        4864
      ]
    },
    {
      "content": "Returns 7 because hexadecimal “F” AND “F7” evaluate to this value.",
      "pos": [
        4894,
        4960
      ]
    },
    {
      "content": "BitOr",
      "pos": [
        4978,
        4983
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        4985,
        5001
      ]
    },
    {
      "content": "The BitOr function sets specified bits on a value.",
      "pos": [
        5007,
        5057
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        5060,
        5071
      ]
    },
    {
      "content": "value1, value2: numeric values that should be OR’ed together",
      "pos": [
        5116,
        5176
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        5179,
        5191
      ]
    },
    {
      "content": "This function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0.",
      "pos": [
        5197,
        5399
      ]
    },
    {
      "content": "In other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0.",
      "pos": [
        5405,
        5508
      ]
    },
    {
      "content": "CBool",
      "pos": [
        5526,
        5531
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        5533,
        5549
      ]
    },
    {
      "content": "The CBool function returns a Boolean based on the evaluated expression",
      "pos": [
        5554,
        5624
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        5626,
        5637
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        5674,
        5686
      ]
    },
    {
      "content": "If the expression evaluates to a nonzero value then CBool returns True else it returns False.",
      "pos": [
        5691,
        5784
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        5787,
        5799
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CBool([attrib1] = [attrib2])`</ph>",
      "pos": [
        5804,
        5834
      ]
    },
    {
      "content": "Returns True if both attributes have the same value.",
      "pos": [
        5841,
        5893
      ]
    },
    {
      "content": "CDate",
      "pos": [
        5915,
        5920
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        5922,
        5938
      ]
    },
    {
      "content": "The CDate function returns a UTC DateTime from a string.",
      "pos": [
        5943,
        5999
      ]
    },
    {
      "content": "DateTime is not a native attribute type in Sync but is used by some functions.",
      "pos": [
        6000,
        6078
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        6080,
        6091
      ]
    },
    {
      "content": "Value: A string with a date, time, and optionally time zone",
      "pos": [
        6121,
        6180
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        6182,
        6194
      ]
    },
    {
      "content": "The returned string is always in UTC.",
      "pos": [
        6199,
        6236
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        6239,
        6251
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CDate([employeeStartTime])`</ph>",
      "pos": [
        6256,
        6284
      ]
    },
    {
      "content": "Returns a DateTime based on the employee’s start time",
      "pos": [
        6290,
        6343
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CDate(\"2013-01-10 4:00 PM -8\")`</ph>",
      "pos": [
        6345,
        6377
      ]
    },
    {
      "content": "Returns a DateTime representing \"2013-01-11 12:00 AM\"",
      "pos": [
        6383,
        6436
      ]
    },
    {
      "content": "CGuid",
      "pos": [
        6457,
        6462
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        6464,
        6480
      ]
    },
    {
      "content": "The CGuid function converts the string representation of a GUID to its binary representation.",
      "pos": [
        6486,
        6579
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        6582,
        6593
      ]
    },
    {
      "content": "A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
      "pos": [
        6628,
        6742
      ]
    },
    {
      "content": "Contains",
      "pos": [
        6763,
        6771
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        6773,
        6789
      ]
    },
    {
      "content": "The Contains function finds a string inside a multi-valued attribute",
      "pos": [
        6795,
        6863
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        6866,
        6877
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num Contains (mvstring attribute, str search)`</ph> - case sensitive",
      "pos": [
        6883,
        6947
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num Contains (mvref attribute, str search)`</ph> - case sensitive",
      "pos": [
        7019,
        7080
      ]
    },
    {
      "content": "attribute: the multi-valued attribute to search.",
      "pos": [
        7084,
        7132
      ]
    },
    {
      "content": "search: string to find in the attribute.",
      "pos": [
        7139,
        7179
      ]
    },
    {
      "content": "Casetype: CaseInsensitive or CaseSensitive.",
      "pos": [
        7186,
        7229
      ]
    },
    {
      "content": "Returns index in the multi-valued attribute where the string was found.",
      "pos": [
        7235,
        7306
      ]
    },
    {
      "content": "0 is returned if the string is not found.",
      "pos": [
        7307,
        7348
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        7352,
        7364
      ]
    },
    {
      "content": "For multi-valued string attributes the search will find substrings in the values.",
      "pos": [
        7370,
        7451
      ]
    },
    {
      "content": "For reference attributes, the searched string must exactly match the value to be considered a match.",
      "pos": [
        7456,
        7556
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        7560,
        7572
      ]
    },
    {
      "content": "If the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.",
      "pos": [
        7683,
        7837
      ]
    },
    {
      "content": "ConvertFromBase64",
      "pos": [
        7859,
        7876
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        7878,
        7894
      ]
    },
    {
      "content": "The ConvertFromBase64 function converts the specified base64 encoded value to a regular string.",
      "pos": [
        7900,
        7995
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        7998,
        8009
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str ConvertFromBase64(str source)`</ph> - assumes Unicode for encoding",
      "pos": [
        8015,
        8081
      ]
    },
    {
      "content": "source: Base64 encoded string",
      "pos": [
        8141,
        8170
      ]
    },
    {
      "content": "Encoding: Unicode, ASCII, UTF8",
      "pos": [
        8177,
        8207
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>",
      "pos": [
        8209,
        8220
      ]
    },
    {
      "pos": [
        8333,
        8370
      ],
      "content": "Both examples return \"<bpt id=\"p1\">*</bpt>Hello world!<ept id=\"p1\">*</ept>\""
    },
    {
      "content": "ConvertFromUTF8Hex",
      "pos": [
        8392,
        8410
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        8412,
        8428
      ]
    },
    {
      "content": "The ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.",
      "pos": [
        8434,
        8524
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        8527,
        8538
      ]
    },
    {
      "content": "source: UTF8 2-byte encoded sting",
      "pos": [
        8584,
        8617
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        8620,
        8632
      ]
    },
    {
      "content": "The difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.",
      "pos": [
        8638,
        8758
      ]
    },
    {
      "content": "This format is used by Azure Active Directory as DN.",
      "pos": [
        8763,
        8815
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        8818,
        8830
      ]
    },
    {
      "content": "Returns \"<bpt id=\"p1\">*</bpt>Hello world!<ept id=\"p1\">*</ept>\"",
      "pos": [
        8889,
        8913
      ]
    },
    {
      "content": "ConvertToBase64",
      "pos": [
        8935,
        8950
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        8952,
        8968
      ]
    },
    {
      "content": "The ConvertToBase64 function converts a string to a Unicode base64 string.",
      "pos": [
        8974,
        9048
      ]
    },
    {
      "content": "Converts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.",
      "pos": [
        9053,
        9172
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        9174,
        9185
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        9227,
        9239
      ]
    },
    {
      "content": "<ph id=\"ph1\">`ConvertToBase64(\"Hello world!\")`</ph>",
      "pos": [
        9246,
        9279
      ]
    },
    {
      "content": "Returns \"SABlAGwAbABvACAAdwBvAHIAbABkACEA\"",
      "pos": [
        9285,
        9327
      ]
    },
    {
      "content": "ConvertToUTF8Hex",
      "pos": [
        9349,
        9365
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        9367,
        9383
      ]
    },
    {
      "content": "The ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.",
      "pos": [
        9389,
        9465
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        9468,
        9479
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        9522,
        9534
      ]
    },
    {
      "content": "The output format of this function is used by Azure Active Directory as DN attribute format.",
      "pos": [
        9540,
        9632
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        9635,
        9647
      ]
    },
    {
      "content": "<ph id=\"ph1\">`ConvertToUTF8Hex(\"Hello world!\")`</ph>",
      "pos": [
        9653,
        9687
      ]
    },
    {
      "content": "Returns 48656C6C6F20776F726C6421",
      "pos": [
        9693,
        9725
      ]
    },
    {
      "content": "Count",
      "pos": [
        9747,
        9752
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        9754,
        9770
      ]
    },
    {
      "content": "The Count function returns the number of elements in a multi-valued attribute",
      "pos": [
        9776,
        9853
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        9856,
        9867
      ]
    },
    {
      "content": "CNum",
      "pos": [
        9923,
        9927
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        9929,
        9945
      ]
    },
    {
      "content": "The CNum function takes a string and returns a numeric data type.",
      "pos": [
        9952,
        10017
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        10020,
        10031
      ]
    },
    {
      "content": "CRef",
      "pos": [
        10080,
        10084
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        10086,
        10102
      ]
    },
    {
      "content": "Converts a string to a reference attribute",
      "pos": [
        10109,
        10151
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        10154,
        10165
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        10196,
        10208
      ]
    },
    {
      "content": "CStr",
      "pos": [
        10329,
        10333
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        10335,
        10351
      ]
    },
    {
      "content": "The CStr function converts to a string data type.",
      "pos": [
        10358,
        10407
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        10410,
        10421
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str CStr(num value)`</ph>",
      "pos": [
        10427,
        10448
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str CStr(ref value)`</ph>",
      "pos": [
        10454,
        10475
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str CStr(bool value)`</ph>",
      "pos": [
        10481,
        10503
      ]
    },
    {
      "content": "value: Can be a numeric value, reference attribute, or Boolean.",
      "pos": [
        10512,
        10575
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        10579,
        10591
      ]
    },
    {
      "content": "Could return “cn=Joe,dc=contoso,dc=com”",
      "pos": [
        10615,
        10654
      ]
    },
    {
      "content": "DateAdd",
      "pos": [
        10676,
        10683
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        10685,
        10701
      ]
    },
    {
      "content": "Returns a Date containing a date to which a specified time interval has been added.",
      "pos": [
        10708,
        10791
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        10794,
        10805
      ]
    },
    {
      "content": "interval: String expression that is the interval of time you want to add.",
      "pos": [
        10862,
        10935
      ]
    },
    {
      "content": "The string must have one of the following values:",
      "pos": [
        10936,
        10985
      ]
    },
    {
      "content": "yyyy Year",
      "pos": [
        10989,
        10998
      ]
    },
    {
      "content": "q Quarter",
      "pos": [
        11002,
        11011
      ]
    },
    {
      "content": "m Month",
      "pos": [
        11015,
        11022
      ]
    },
    {
      "content": "y Day of year",
      "pos": [
        11026,
        11039
      ]
    },
    {
      "content": "d Day",
      "pos": [
        11043,
        11048
      ]
    },
    {
      "content": "w Weekday",
      "pos": [
        11052,
        11061
      ]
    },
    {
      "content": "ww Week",
      "pos": [
        11065,
        11072
      ]
    },
    {
      "content": "h Hour",
      "pos": [
        11076,
        11082
      ]
    },
    {
      "content": "n Minute",
      "pos": [
        11086,
        11094
      ]
    },
    {
      "content": "s Second",
      "pos": [
        11098,
        11106
      ]
    },
    {
      "content": "value: The number of units you want to add.",
      "pos": [
        11109,
        11152
      ]
    },
    {
      "content": "It can be positive (to get dates in the future) or negative (to get dates in the past).",
      "pos": [
        11153,
        11240
      ]
    },
    {
      "content": "date: DateTime representing date to which the interval is added.",
      "pos": [
        11244,
        11308
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        11311,
        11323
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DateAdd(\"m\", 3, CDate(\"2001-01-01\"))`</ph>",
      "pos": [
        11330,
        11368
      ]
    },
    {
      "content": "Adds 3 months and returns a DateTime representing \"2001-04-01”",
      "pos": [
        11374,
        11436
      ]
    },
    {
      "content": "DateFromNum",
      "pos": [
        11458,
        11469
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        11471,
        11487
      ]
    },
    {
      "content": "The DateFromNum function converts a value in AD’s date format to a DateTime type.",
      "pos": [
        11493,
        11574
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        11577,
        11588
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        11624,
        11636
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DateFromNum([lastLogonTimestamp])`</ph>",
      "pos": [
        11643,
        11678
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DateFromNum(129699324000000000)`</ph>",
      "pos": [
        11684,
        11717
      ]
    },
    {
      "content": "Returns a DateTime representing 2012-01-01 23:00:00",
      "pos": [
        11723,
        11774
      ]
    },
    {
      "content": "DNComponent",
      "pos": [
        11795,
        11806
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        11808,
        11824
      ]
    },
    {
      "content": "The DNComponent function returns the value of a specified DN component going from left.",
      "pos": [
        11831,
        11918
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        11921,
        11932
      ]
    },
    {
      "content": "dn: the reference attribute to interpret",
      "pos": [
        11989,
        12029
      ]
    },
    {
      "content": "ComponentNumber: The component in the DN to return",
      "pos": [
        12032,
        12082
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        12085,
        12097
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DNComponent([dn],1)`</ph>",
      "pos": [
        12104,
        12125
      ]
    },
    {
      "content": "If dn is “cn=Joe,ou=…, it returns Joe",
      "pos": [
        12132,
        12169
      ]
    },
    {
      "content": "DNComponentRev",
      "pos": [
        12190,
        12204
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        12206,
        12222
      ]
    },
    {
      "content": "The DNComponentRev function returns the value of a specified DN component going from right (the end).",
      "pos": [
        12229,
        12330
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        12333,
        12344
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str DNComponentRev(ref dn, num ComponentNumber)`</ph>",
      "pos": [
        12351,
        12400
      ]
    },
    {
      "content": "dn: the reference attribute to interpret",
      "pos": [
        12474,
        12514
      ]
    },
    {
      "content": "ComponentNumber - The component in the DN to return",
      "pos": [
        12517,
        12568
      ]
    },
    {
      "content": "Options: DC – Ignore all components with “dc=”",
      "pos": [
        12571,
        12617
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        12620,
        12632
      ]
    },
    {
      "content": "<ph id=\"ph1\">`If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)`</ph>",
      "pos": [
        12639,
        12728
      ]
    },
    {
      "content": "<ph id=\"ph1\">`DNComponentRev([dn],1,”DC”)`</ph>",
      "pos": [
        12735,
        12764
      ]
    },
    {
      "content": "Both return US.",
      "pos": [
        12770,
        12785
      ]
    },
    {
      "content": "Error",
      "pos": [
        12807,
        12812
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        12814,
        12830
      ]
    },
    {
      "content": "The Error function is used to return a custom error.",
      "pos": [
        12837,
        12889
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        12892,
        12903
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        12943,
        12955
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))`</ph>",
      "pos": [
        12962,
        13040
      ]
    },
    {
      "content": "If the attribute accountName is not present, throw an error on the object.",
      "pos": [
        13046,
        13120
      ]
    },
    {
      "content": "EscapeDNComponent",
      "pos": [
        13142,
        13159
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        13161,
        13177
      ]
    },
    {
      "content": "The EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.",
      "pos": [
        13184,
        13291
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        13294,
        13305
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        13349,
        13361
      ]
    },
    {
      "content": "<ph id=\"ph1\">`EscapeDNComponent(“cn=” &amp; [displayName]) &amp; “,” &amp; %ForestLDAP%`</ph>",
      "pos": [
        13368,
        13431
      ]
    },
    {
      "content": "Makes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.",
      "pos": [
        13437,
        13574
      ]
    },
    {
      "content": "FormatDateTime",
      "pos": [
        13596,
        13610
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        13612,
        13628
      ]
    },
    {
      "content": "The FormatDateTime function is used to format a DateTime to a string with a specified format",
      "pos": [
        13634,
        13726
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        13729,
        13740
      ]
    },
    {
      "content": "value: a value in the DateTime format",
      "pos": [
        13793,
        13830
      ]
    },
    {
      "content": "format: a string representing the format to convert to.",
      "pos": [
        13838,
        13893
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        13896,
        13908
      ]
    },
    {
      "content": "The possible values for the format can be found here: <bpt id=\"p1\">[</bpt>User-Defined Date/Time Formats (Format Function)<ept id=\"p1\">](http://msdn2.microsoft.com/library/73ctwf33\\(VS.90\\).aspx)</ept>",
      "pos": [
        13915,
        14078
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        14082,
        14094
      ]
    },
    {
      "content": "<ph id=\"ph1\">`FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)`</ph>",
      "pos": [
        14103,
        14153
      ]
    },
    {
      "content": "Results in “2007-12-25”.",
      "pos": [
        14159,
        14183
      ]
    },
    {
      "content": "<ph id=\"ph1\">`FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)`</ph>",
      "pos": [
        14185,
        14248
      ]
    },
    {
      "content": "Can result in “20140905081453.0Z”",
      "pos": [
        14254,
        14287
      ]
    },
    {
      "content": "GUID",
      "pos": [
        14309,
        14313
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        14315,
        14331
      ]
    },
    {
      "content": "The function GUID generates a new random GUID",
      "pos": [
        14338,
        14383
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        14386,
        14397
      ]
    },
    {
      "content": "IIF",
      "pos": [
        14437,
        14440
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        14442,
        14458
      ]
    },
    {
      "content": "The IIF function returns one of a set of possible values based on a specified condition.",
      "pos": [
        14466,
        14554
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        14557,
        14568
      ]
    },
    {
      "content": "condition: any value or expression that can be evaluated to true or false.",
      "pos": [
        14638,
        14712
      ]
    },
    {
      "content": "valueIfTrue: a value that will be returned if condition evaluates to true.",
      "pos": [
        14715,
        14789
      ]
    },
    {
      "content": "valueIfFalse: a value that will be returned if condition evaluates to false.",
      "pos": [
        14792,
        14868
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        14870,
        14882
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IIF([employeeType]=“Intern”,”t-“&amp;[alias],[alias])`</ph>",
      "pos": [
        14889,
        14940
      ]
    },
    {
      "content": "Returns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.",
      "pos": [
        14946,
        15075
      ]
    },
    {
      "content": "InStr",
      "pos": [
        15097,
        15102
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        15104,
        15120
      ]
    },
    {
      "content": "The InStr function finds the first occurrence of a substring in a string",
      "pos": [
        15127,
        15199
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        15202,
        15213
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num InStr(str stringcheck, str stringmatch)`</ph>",
      "pos": [
        15222,
        15267
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num InStr(str stringcheck, str stringmatch, num start)`</ph>",
      "pos": [
        15273,
        15329
      ]
    },
    {
      "content": "stringcheck: string to be searched",
      "pos": [
        15411,
        15445
      ]
    },
    {
      "content": "stringmatch: string to be found",
      "pos": [
        15453,
        15484
      ]
    },
    {
      "content": "start: starting position to find the substring",
      "pos": [
        15492,
        15538
      ]
    },
    {
      "content": "compare: vbTextCompare or vbBinaryCompare",
      "pos": [
        15546,
        15587
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        15590,
        15602
      ]
    },
    {
      "content": "Returns the position where the substring was found or 0 if not found.",
      "pos": [
        15609,
        15678
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        15681,
        15693
      ]
    },
    {
      "content": "<ph id=\"ph1\">`InStr(\"The quick brown fox\",\"quick\")`</ph>",
      "pos": [
        15700,
        15738
      ]
    },
    {
      "content": "Evalues to 5",
      "pos": [
        15744,
        15756
      ]
    },
    {
      "content": "<ph id=\"ph1\">`InStr(\"repEated\",\"e\",3,vbBinaryCompare)`</ph>",
      "pos": [
        15759,
        15800
      ]
    },
    {
      "content": "Evaluates to 7",
      "pos": [
        15806,
        15820
      ]
    },
    {
      "content": "InStrRev",
      "pos": [
        15842,
        15850
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        15852,
        15868
      ]
    },
    {
      "content": "The InStrRev function finds the last occurrence of a substring in a string",
      "pos": [
        15875,
        15949
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        15952,
        15963
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num InstrRev(str stringcheck, str stringmatch)`</ph>",
      "pos": [
        15970,
        16018
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num InstrRev(str stringcheck, str stringmatch, num start)`</ph>",
      "pos": [
        16024,
        16083
      ]
    },
    {
      "content": "stringcheck: string to be searched",
      "pos": [
        16166,
        16200
      ]
    },
    {
      "content": "stringmatch: string to be found",
      "pos": [
        16208,
        16239
      ]
    },
    {
      "content": "start: starting position to find the substring",
      "pos": [
        16247,
        16293
      ]
    },
    {
      "content": "compare: vbTextCompare or vbBinaryCompare",
      "pos": [
        16301,
        16342
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        16344,
        16356
      ]
    },
    {
      "content": "Returns the position where the substring was found or 0 if not found.",
      "pos": [
        16363,
        16432
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        16434,
        16446
      ]
    },
    {
      "content": "<ph id=\"ph1\">`InStrRev(\"abbcdbbbef\",\"bb\")`</ph>",
      "pos": [
        16453,
        16482
      ]
    },
    {
      "content": "Returns 7",
      "pos": [
        16488,
        16497
      ]
    },
    {
      "content": "IsBitSet",
      "pos": [
        16519,
        16527
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        16529,
        16545
      ]
    },
    {
      "content": "The function IsBitSet Tests if a bit is set or not",
      "pos": [
        16552,
        16602
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        16605,
        16616
      ]
    },
    {
      "content": "value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated",
      "pos": [
        16664,
        16759
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        16762,
        16774
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IsBitSet(&amp;HF,4)`</ph>",
      "pos": [
        16781,
        16798
      ]
    },
    {
      "content": "Returns True because bit “4” is set in the hexadecimal value “F”",
      "pos": [
        16804,
        16868
      ]
    },
    {
      "content": "IsDate",
      "pos": [
        16889,
        16895
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        16897,
        16913
      ]
    },
    {
      "content": "The IsDate function evaluates to True if the expression can be evaluates as a DateTime type.",
      "pos": [
        16920,
        17012
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        17015,
        17026
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        17065,
        17077
      ]
    },
    {
      "content": "Used to determine if CDate() will be successful.",
      "pos": [
        17084,
        17132
      ]
    },
    {
      "content": "IsEmpty",
      "pos": [
        17152,
        17159
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        17161,
        17177
      ]
    },
    {
      "content": "The IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.",
      "pos": [
        17185,
        17301
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        17304,
        17315
      ]
    },
    {
      "content": "IsGuid",
      "pos": [
        17372,
        17378
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        17380,
        17396
      ]
    },
    {
      "content": "The IsGuid function evaluated to true if the string could be converted to a GUID.",
      "pos": [
        17403,
        17484
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        17487,
        17498
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        17531,
        17543
      ]
    },
    {
      "content": "A GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
      "pos": [
        17550,
        17691
      ]
    },
    {
      "content": "Used to determine if CGuid() will be successful.",
      "pos": [
        17693,
        17741
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        17744,
        17756
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)`</ph>",
      "pos": [
        17763,
        17819
      ]
    },
    {
      "content": "If the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.",
      "pos": [
        17825,
        17920
      ]
    },
    {
      "content": "IsNull",
      "pos": [
        17941,
        17947
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        17949,
        17965
      ]
    },
    {
      "content": "The IsNull function returns true if the expression evaluates to Null.",
      "pos": [
        17972,
        18041
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        18045,
        18056
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        18095,
        18107
      ]
    },
    {
      "content": "For an attribute, a Null is expressed by the absence of the attribute.",
      "pos": [
        18114,
        18184
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        18188,
        18200
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IsNull([displayName])`</ph>",
      "pos": [
        18207,
        18230
      ]
    },
    {
      "content": "Returns True if the attribute is not present in the CS or MV.",
      "pos": [
        18236,
        18297
      ]
    },
    {
      "content": "IsNullOrEmpty",
      "pos": [
        18318,
        18331
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        18333,
        18349
      ]
    },
    {
      "content": "The IsNullOrEmpty function returns true if the expression is null or an empty string.",
      "pos": [
        18356,
        18441
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        18444,
        18455
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        18501,
        18513
      ]
    },
    {
      "content": "For an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.",
      "pos": [
        18520,
        18630
      ]
    },
    {
      "content": "The inverse of this function is named IsPresent.",
      "pos": [
        18635,
        18683
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        18686,
        18698
      ]
    },
    {
      "content": "<ph id=\"ph1\">`IsNull([displayName])`</ph>",
      "pos": [
        18705,
        18728
      ]
    },
    {
      "content": "Returns True if the attribute is not present or is an empty string in the CS or MV.",
      "pos": [
        18734,
        18817
      ]
    },
    {
      "content": "IsNumeric",
      "pos": [
        18839,
        18848
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        18850,
        18866
      ]
    },
    {
      "content": "The IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.",
      "pos": [
        18873,
        18987
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        18990,
        19001
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        19043,
        19055
      ]
    },
    {
      "content": "Used to determine if CNum() will be successful to parse the expression.",
      "pos": [
        19062,
        19133
      ]
    },
    {
      "content": "IsString",
      "pos": [
        19153,
        19161
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        19163,
        19179
      ]
    },
    {
      "content": "The IsString function evaluates to True if the expression can be evaluated to a string type.",
      "pos": [
        19185,
        19277
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        19280,
        19291
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        19331,
        19343
      ]
    },
    {
      "content": "Used to determine if CStr() will be successful to parse the expression.",
      "pos": [
        19350,
        19421
      ]
    },
    {
      "content": "IsPresent",
      "pos": [
        19442,
        19451
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        19453,
        19469
      ]
    },
    {
      "content": "The IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.",
      "pos": [
        19476,
        19587
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        19590,
        19601
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        19643,
        19655
      ]
    },
    {
      "content": "The inverse of this function is named IsNullOrEmpty.",
      "pos": [
        19662,
        19714
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        19717,
        19729
      ]
    },
    {
      "content": "Item",
      "pos": [
        19896,
        19900
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        19902,
        19918
      ]
    },
    {
      "content": "The Item function returns one item from a multi-valued string/attribute.",
      "pos": [
        19925,
        19997
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        20001,
        20012
      ]
    },
    {
      "content": "attribute: multi-valued attribute",
      "pos": [
        20061,
        20094
      ]
    },
    {
      "content": "index: index to an item in the multi-valued string.",
      "pos": [
        20102,
        20153
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        20156,
        20168
      ]
    },
    {
      "content": "The Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.",
      "pos": [
        20175,
        20328
      ]
    },
    {
      "content": "Throws an error if index is out of bounds.",
      "pos": [
        20330,
        20372
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        20375,
        20387
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)`</ph>",
      "pos": [
        20394,
        20457
      ]
    },
    {
      "content": "Returns the primary email address.",
      "pos": [
        20464,
        20498
      ]
    },
    {
      "content": "ItemOrNull",
      "pos": [
        20520,
        20530
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        20532,
        20548
      ]
    },
    {
      "content": "The ItemOrNull function returns one item from a multi-valued string/attribute.",
      "pos": [
        20555,
        20633
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        20637,
        20648
      ]
    },
    {
      "content": "attribute: multi-valued attribute",
      "pos": [
        20703,
        20736
      ]
    },
    {
      "content": "index: index to an item in the multi-valued string.",
      "pos": [
        20744,
        20795
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        20798,
        20810
      ]
    },
    {
      "content": "The ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.",
      "pos": [
        20817,
        20976
      ]
    },
    {
      "content": "Returns a Null value if index is out of bounds.",
      "pos": [
        20978,
        21025
      ]
    },
    {
      "content": "Join",
      "pos": [
        21046,
        21050
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        21052,
        21068
      ]
    },
    {
      "content": "The Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.",
      "pos": [
        21075,
        21208
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        21211,
        21222
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str Join(mvstr attribute)`</ph>",
      "pos": [
        21229,
        21256
      ]
    },
    {
      "content": "attribute: Multi-valued attribute containing strings to be joined.",
      "pos": [
        21308,
        21374
      ]
    },
    {
      "content": "delimiter: Any string, used to separate the substrings in the returned string.",
      "pos": [
        21382,
        21460
      ]
    },
    {
      "content": "If omitted, the space character (\" \") is used.",
      "pos": [
        21461,
        21507
      ]
    },
    {
      "content": "If Delimiter is a zero-length string (\"\") or Nothing, all items in the list are concatenated with no delimiters.",
      "pos": [
        21508,
        21620
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks<ept id=\"p1\">**</ept>",
      "pos": [
        21623,
        21634
      ]
    },
    {
      "content": "There is parity between the Join and Split functions.",
      "pos": [
        21640,
        21693
      ]
    },
    {
      "content": "The Join function takes an array of strings and joins them using a delimiter string, to return a single string.",
      "pos": [
        21694,
        21805
      ]
    },
    {
      "content": "The Split function takes a string and separates it at the delimiter, to return an array of strings.",
      "pos": [
        21806,
        21905
      ]
    },
    {
      "content": "However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.",
      "pos": [
        21906,
        22063
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        22066,
        22078
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Join([proxyAddresses],”,”)`</ph>",
      "pos": [
        22085,
        22113
      ]
    },
    {
      "content": "Could return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”",
      "pos": [
        22119,
        22180
      ]
    },
    {
      "content": "LCase",
      "pos": [
        22202,
        22207
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        22209,
        22225
      ]
    },
    {
      "content": "The LCase function converts all characters in a string to lower case.",
      "pos": [
        22232,
        22301
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        22304,
        22315
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        22347,
        22359
      ]
    },
    {
      "content": "<ph id=\"ph1\">`LCase(“TeSt”)`</ph>",
      "pos": [
        22366,
        22381
      ]
    },
    {
      "content": "Returns “test”.",
      "pos": [
        22387,
        22402
      ]
    },
    {
      "content": "Left",
      "pos": [
        22424,
        22428
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        22430,
        22446
      ]
    },
    {
      "content": "The Left function returns a specified number of characters from the left of a string.",
      "pos": [
        22453,
        22538
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        22541,
        22552
      ]
    },
    {
      "content": "string: the string to return characters from",
      "pos": [
        22599,
        22643
      ]
    },
    {
      "content": "NumChars: a number identifying the number of characters to return from the beginning (left) of string",
      "pos": [
        22651,
        22752
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        22755,
        22767
      ]
    },
    {
      "content": "A string containing the first numChars characters in string:",
      "pos": [
        22774,
        22834
      ]
    },
    {
      "content": "If numChars = 0, return empty string.",
      "pos": [
        22839,
        22876
      ]
    },
    {
      "content": "If numChars &lt; 0, return input string.",
      "pos": [
        22879,
        22916
      ]
    },
    {
      "content": "If string is null, return empty string.",
      "pos": [
        22919,
        22958
      ]
    },
    {
      "content": "If string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.",
      "pos": [
        22960,
        23123
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        23126,
        23138
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Left(“John Doe”, 3)`</ph>",
      "pos": [
        23145,
        23166
      ]
    },
    {
      "content": "Returns “Joh”.",
      "pos": [
        23172,
        23186
      ]
    },
    {
      "content": "Len",
      "pos": [
        23207,
        23210
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        23212,
        23228
      ]
    },
    {
      "content": "The Len function returns number of characters in a string.",
      "pos": [
        23235,
        23293
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        23296,
        23307
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        23337,
        23349
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Len(“John Doe”)`</ph>",
      "pos": [
        23355,
        23372
      ]
    },
    {
      "content": "Returns 8",
      "pos": [
        23378,
        23387
      ]
    },
    {
      "content": "LTrim",
      "pos": [
        23408,
        23413
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        23415,
        23431
      ]
    },
    {
      "content": "The LTrim function removes leading white spaces from a string.",
      "pos": [
        23438,
        23500
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        23503,
        23514
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        23546,
        23558
      ]
    },
    {
      "content": "<ph id=\"ph1\">`LTrim(“ Test ”)`</ph>",
      "pos": [
        23564,
        23581
      ]
    },
    {
      "content": "Returns “Test ”",
      "pos": [
        23587,
        23602
      ]
    },
    {
      "content": "Mid",
      "pos": [
        23624,
        23627
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        23629,
        23645
      ]
    },
    {
      "content": "The Mid function returns a specified number of characters from a specified position in a string.",
      "pos": [
        23652,
        23748
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        23751,
        23762
      ]
    },
    {
      "content": "string: the string to return characters from",
      "pos": [
        23819,
        23863
      ]
    },
    {
      "content": "start: a number identifying the starting position in string to return characters from",
      "pos": [
        23871,
        23956
      ]
    },
    {
      "content": "NumChars: a number identifying the number of characters to return from position in string",
      "pos": [
        23959,
        24048
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        24052,
        24064
      ]
    },
    {
      "content": "Return numChars characters starting from position start in string.",
      "pos": [
        24071,
        24137
      ]
    },
    {
      "content": "A string containing numChars characters from position start in string:",
      "pos": [
        24142,
        24212
      ]
    },
    {
      "content": "If numChars = 0, return empty string.",
      "pos": [
        24217,
        24254
      ]
    },
    {
      "content": "If numChars &lt; 0, return input string.",
      "pos": [
        24257,
        24294
      ]
    },
    {
      "content": "If start &gt; the length of string, return input string.",
      "pos": [
        24297,
        24350
      ]
    },
    {
      "content": "If start &lt;= 0, return input string.",
      "pos": [
        24353,
        24388
      ]
    },
    {
      "content": "If string is null, return empty string.",
      "pos": [
        24391,
        24430
      ]
    },
    {
      "content": "If there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.",
      "pos": [
        24432,
        24560
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        24563,
        24575
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Mid(“John Doe”, 3, 5)`</ph>",
      "pos": [
        24584,
        24607
      ]
    },
    {
      "content": "Returns “hn Do”.",
      "pos": [
        24613,
        24629
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Mid(“John Doe”, 6, 999)`</ph>",
      "pos": [
        24631,
        24656
      ]
    },
    {
      "content": "Returns “Doe”",
      "pos": [
        24662,
        24675
      ]
    },
    {
      "content": "Now",
      "pos": [
        24697,
        24700
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        24702,
        24718
      ]
    },
    {
      "content": "The Now function returns a DateTime specifying the current date and time, according your computer's system date and time.",
      "pos": [
        24725,
        24846
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        24849,
        24860
      ]
    },
    {
      "content": "NumFromDate",
      "pos": [
        24898,
        24909
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        24911,
        24927
      ]
    },
    {
      "content": "The NumFromDate function returns a date in AD’s date format.",
      "pos": [
        24934,
        24994
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        24997,
        25008
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        25046,
        25058
      ]
    },
    {
      "content": "<ph id=\"ph1\">`NumFromDate(CDate(\"2012-01-01 23:00:00\"))`</ph>",
      "pos": [
        25065,
        25108
      ]
    },
    {
      "content": "Returns 129699324000000000",
      "pos": [
        25114,
        25140
      ]
    },
    {
      "content": "PadLeft",
      "pos": [
        25162,
        25169
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        25171,
        25187
      ]
    },
    {
      "content": "The PadLeft function left-pads a string to a specified length using a provided padding character.",
      "pos": [
        25194,
        25291
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        25294,
        25305
      ]
    },
    {
      "content": "string: the string to pad.",
      "pos": [
        25371,
        25397
      ]
    },
    {
      "content": "length: An integer representing the desired length of string.",
      "pos": [
        25405,
        25466
      ]
    },
    {
      "content": "padCharacter: A string consisting of a single character to use as the pad character",
      "pos": [
        25474,
        25557
      ]
    },
    {
      "content": "Remarks",
      "pos": [
        25577,
        25584
      ]
    },
    {
      "content": "If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.",
      "pos": [
        25590,
        25748
      ]
    },
    {
      "content": "PadCharacter can be a space character, but it cannot be a null value.",
      "pos": [
        25751,
        25820
      ]
    },
    {
      "content": "If the length of string is equal to or greater than length, string is returned unchanged.",
      "pos": [
        25823,
        25912
      ]
    },
    {
      "content": "If string has a length greater than or equal to length, a string identical to string is returned.",
      "pos": [
        25915,
        26012
      ]
    },
    {
      "content": "If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.",
      "pos": [
        26015,
        26157
      ]
    },
    {
      "content": "If string is null, the function returns an empty string.",
      "pos": [
        26160,
        26216
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        26218,
        26230
      ]
    },
    {
      "content": "<ph id=\"ph1\">`PadLeft(“User”, 10, “0”)`</ph>",
      "pos": [
        26237,
        26263
      ]
    },
    {
      "content": "Returns “000000User”.",
      "pos": [
        26269,
        26290
      ]
    },
    {
      "content": "PadRight",
      "pos": [
        26312,
        26320
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        26322,
        26338
      ]
    },
    {
      "content": "The PadRight function right-pads a string to a specified length using a provided padding character.",
      "pos": [
        26345,
        26444
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        26447,
        26458
      ]
    },
    {
      "content": "string: the string to pad.",
      "pos": [
        26525,
        26551
      ]
    },
    {
      "content": "length: An integer representing the desired length of string.",
      "pos": [
        26555,
        26616
      ]
    },
    {
      "content": "padCharacter: A string consisting of a single character to use as the pad character",
      "pos": [
        26619,
        26702
      ]
    },
    {
      "content": "Remarks:",
      "pos": [
        26707,
        26715
      ]
    },
    {
      "content": "If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.",
      "pos": [
        26723,
        26876
      ]
    },
    {
      "content": "padCharacter can be a space character, but it cannot be a null value.",
      "pos": [
        26879,
        26948
      ]
    },
    {
      "content": "If the length of string is equal to or greater than length, string is returned unchanged.",
      "pos": [
        26951,
        27040
      ]
    },
    {
      "content": "If string has a length greater than or equal to length, a string identical to string is returned.",
      "pos": [
        27043,
        27140
      ]
    },
    {
      "content": "If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.",
      "pos": [
        27143,
        27285
      ]
    },
    {
      "content": "If string is null, the function returns an empty string.",
      "pos": [
        27288,
        27344
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        27348,
        27360
      ]
    },
    {
      "content": "<ph id=\"ph1\">`PadRight(“User”, 10, “0”)`</ph>",
      "pos": [
        27367,
        27394
      ]
    },
    {
      "content": "Returns “User000000”.",
      "pos": [
        27400,
        27421
      ]
    },
    {
      "content": "PCase",
      "pos": [
        27443,
        27448
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        27450,
        27466
      ]
    },
    {
      "content": "The PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.",
      "pos": [
        27473,
        27630
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        27633,
        27644
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        27676,
        27688
      ]
    },
    {
      "content": "<ph id=\"ph1\">`PCase(“TEsT”)`</ph>",
      "pos": [
        27695,
        27710
      ]
    },
    {
      "content": "Returns “Test”.",
      "pos": [
        27717,
        27732
      ]
    },
    {
      "content": "RandomNum",
      "pos": [
        27754,
        27763
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        27765,
        27781
      ]
    },
    {
      "content": "The RandomNum function returns a random number between a specified interval.",
      "pos": [
        27788,
        27864
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        27867,
        27878
      ]
    },
    {
      "content": "start: a number identifying the lower limit of the random value to generate",
      "pos": [
        27924,
        27999
      ]
    },
    {
      "content": "end: a number identifying the upper limit of the random value to generate",
      "pos": [
        28007,
        28080
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        28083,
        28095
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Random(100,999)`</ph>",
      "pos": [
        28102,
        28119
      ]
    },
    {
      "content": "Returns 734.",
      "pos": [
        28126,
        28138
      ]
    },
    {
      "content": "RemoveDuplicates",
      "pos": [
        28160,
        28176
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        28178,
        28194
      ]
    },
    {
      "content": "The RemoveDuplicates function takes a multi-valued string and make sure each value is unique.",
      "pos": [
        28201,
        28294
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        28297,
        28308
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        28360,
        28372
      ]
    },
    {
      "content": "<ph id=\"ph1\">`RemoveDuplicates([proxyAddresses])`</ph>",
      "pos": [
        28379,
        28415
      ]
    },
    {
      "content": "Returns a sanitized proxyAddress attribute where all duplicate values have been removed.",
      "pos": [
        28421,
        28509
      ]
    },
    {
      "content": "Replace",
      "pos": [
        28531,
        28538
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        28540,
        28556
      ]
    },
    {
      "content": "The Replace function replaces all occurrences of a string to another string.",
      "pos": [
        28563,
        28639
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        28642,
        28653
      ]
    },
    {
      "content": "string: A string to replace values in.",
      "pos": [
        28717,
        28755
      ]
    },
    {
      "content": "OldValue: The string to search for and to replace.",
      "pos": [
        28763,
        28813
      ]
    },
    {
      "content": "NewValue: The string to replace to.",
      "pos": [
        28821,
        28856
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        28860,
        28872
      ]
    },
    {
      "content": "The function recognizes the following special monikers:",
      "pos": [
        28879,
        28934
      ]
    },
    {
      "content": "\\n – New Line",
      "pos": [
        28938,
        28951
      ]
    },
    {
      "content": "\\r – Carriage Return",
      "pos": [
        28955,
        28975
      ]
    },
    {
      "content": "\\t – Tab",
      "pos": [
        28978,
        28986
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        28990,
        29002
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Replace([address],”\\r\\n”,”, “)`</ph>",
      "pos": [
        29011,
        29043
      ]
    },
    {
      "content": "Replaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”",
      "pos": [
        29050,
        29143
      ]
    },
    {
      "content": "ReplaceChars",
      "pos": [
        29165,
        29177
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        29179,
        29195
      ]
    },
    {
      "content": "The ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.",
      "pos": [
        29202,
        29302
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        29304,
        29315
      ]
    },
    {
      "content": "string: A string to replace characters in.",
      "pos": [
        29376,
        29418
      ]
    },
    {
      "content": "ReplacePattern: a string containing a dictionary with characters to replace.",
      "pos": [
        29421,
        29497
      ]
    },
    {
      "content": "The format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with.",
      "pos": [
        29501,
        29651
      ]
    },
    {
      "content": "Remarks:",
      "pos": [
        29658,
        29666
      ]
    },
    {
      "content": "The function takes each occurrence of defined sources and replaces them with the targets.",
      "pos": [
        29674,
        29763
      ]
    },
    {
      "content": "The source must be exactly one (unicode) character.",
      "pos": [
        29767,
        29818
      ]
    },
    {
      "content": "The source cannot be empty or longer than one character (parsing error).",
      "pos": [
        29822,
        29894
      ]
    },
    {
      "content": "The target can have multiple characters, e.g. ö:oe, β:ss.",
      "pos": [
        29897,
        29954
      ]
    },
    {
      "content": "The target can be empty indicating that the character should be removed.",
      "pos": [
        29957,
        30029
      ]
    },
    {
      "content": "The source is case sensitive and must be an exact match.",
      "pos": [
        30033,
        30089
      ]
    },
    {
      "content": "The , (comma) and : (colon) are reserved characters and cannot be replaced using this function.",
      "pos": [
        30092,
        30187
      ]
    },
    {
      "content": "Spaces and other white characters in the ReplacePattern string are ignored.",
      "pos": [
        30191,
        30266
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        30270,
        30282
      ]
    },
    {
      "content": "'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'",
      "pos": [
        30289,
        30335
      ]
    },
    {
      "content": "<ph id=\"ph1\">`ReplaceChars(”Räksmörgås”,%ReplaceString%)`</ph>",
      "pos": [
        30338,
        30382
      ]
    },
    {
      "content": "Returns Raksmorgas",
      "pos": [
        30388,
        30406
      ]
    },
    {
      "content": "<ph id=\"ph1\">`ReplaceChars(“O’Neil”,%ReplaceString%)`</ph>",
      "pos": [
        30408,
        30448
      ]
    },
    {
      "content": "Returns “ONeil”, the single tick is defined to be removed.",
      "pos": [
        30454,
        30512
      ]
    },
    {
      "content": "Right",
      "pos": [
        30533,
        30538
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        30540,
        30556
      ]
    },
    {
      "content": "The Right function returns a specified number of characters from the right (end) of a string.",
      "pos": [
        30563,
        30656
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        30659,
        30670
      ]
    },
    {
      "content": "string: the string to return characters from",
      "pos": [
        30718,
        30762
      ]
    },
    {
      "content": "NumChars: a number identifying the number of characters to return from the end (right) of string",
      "pos": [
        30766,
        30862
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        30865,
        30877
      ]
    },
    {
      "content": "NumChars characters are returned from the last position of string.",
      "pos": [
        30883,
        30949
      ]
    },
    {
      "content": "A string containing the last numChars characters in string:",
      "pos": [
        30951,
        31010
      ]
    },
    {
      "content": "If numChars = 0, return empty string.",
      "pos": [
        31014,
        31051
      ]
    },
    {
      "content": "If numChars &lt; 0, return input string.",
      "pos": [
        31054,
        31091
      ]
    },
    {
      "content": "If string is null, return empty string.",
      "pos": [
        31094,
        31133
      ]
    },
    {
      "content": "If string contains fewer characters than the number specified in NumChars, a string identical to string is returned.",
      "pos": [
        31135,
        31251
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        31253,
        31265
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Right(“John Doe”, 3)`</ph>",
      "pos": [
        31272,
        31294
      ]
    },
    {
      "content": "Returns “Doe”.",
      "pos": [
        31300,
        31314
      ]
    },
    {
      "content": "RTrim",
      "pos": [
        31335,
        31340
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        31342,
        31358
      ]
    },
    {
      "content": "The RTrim function removes trailing white spaces from a string.",
      "pos": [
        31365,
        31428
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        31431,
        31442
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        31473,
        31485
      ]
    },
    {
      "content": "<ph id=\"ph1\">`RTrim(“ Test ”)`</ph>",
      "pos": [
        31492,
        31509
      ]
    },
    {
      "content": "Returns “ Test”.",
      "pos": [
        31516,
        31532
      ]
    },
    {
      "content": "Split",
      "pos": [
        31552,
        31557
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        31559,
        31575
      ]
    },
    {
      "content": "The Split function takes a string separated with a delimiter and makes it a multi-valued string.",
      "pos": [
        31582,
        31678
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        31682,
        31693
      ]
    },
    {
      "content": "<ph id=\"ph1\">`mvstr Split(str value, str delimiter)`</ph> &lt;br?",
      "pos": [
        31700,
        31744
      ]
    },
    {
      "content": "value: the string with a delimiter character to separate.",
      "pos": [
        31799,
        31856
      ]
    },
    {
      "content": "delimiter: single character to be used as the delimiter.",
      "pos": [
        31859,
        31915
      ]
    },
    {
      "content": "limit: maximum number of values which will be returned.",
      "pos": [
        31919,
        31974
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        31977,
        31989
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)`</ph>",
      "pos": [
        31996,
        32056
      ]
    },
    {
      "content": "Returns a multi-valued string with 2 elements useful for the proxyAddress attribute",
      "pos": [
        32062,
        32145
      ]
    },
    {
      "content": "StringFromGuid",
      "pos": [
        32166,
        32180
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        32182,
        32198
      ]
    },
    {
      "content": "The StringFromGuid function takes a binary GUID and converts it to a string",
      "pos": [
        32204,
        32279
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        32282,
        32293
      ]
    },
    {
      "content": "StringFromSid",
      "pos": [
        32350,
        32363
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        32365,
        32381
      ]
    },
    {
      "content": "The StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.",
      "pos": [
        32388,
        32534
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        32537,
        32548
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str StringFromSid(bin ObjectSID)`</ph>",
      "pos": [
        32555,
        32589
      ]
    },
    {
      "content": "Switch",
      "pos": [
        32654,
        32660
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        32662,
        32678
      ]
    },
    {
      "content": "The Switch function is used to return a single value based on evaluated conditions.",
      "pos": [
        32685,
        32768
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        32770,
        32781
      ]
    },
    {
      "content": "expr: Variant expression you want to evaluate.",
      "pos": [
        32878,
        32924
      ]
    },
    {
      "content": "value: Value to be returned if the corresponding expression is True.",
      "pos": [
        32928,
        32996
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        32999,
        33011
      ]
    },
    {
      "content": "The Switch function argument list consists of pairs of expressions and values.",
      "pos": [
        33018,
        33096
      ]
    },
    {
      "content": "The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned.",
      "pos": [
        33097,
        33230
      ]
    },
    {
      "content": "If the parts aren't properly paired, a run-time error occurs.",
      "pos": [
        33231,
        33292
      ]
    },
    {
      "content": "For example, if expr1 is True, Switch returns value1.",
      "pos": [
        33295,
        33348
      ]
    },
    {
      "content": "If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.",
      "pos": [
        33349,
        33423
      ]
    },
    {
      "content": "Switch returns a Nothing if:",
      "pos": [
        33425,
        33453
      ]
    },
    {
      "content": "None of the expressions are True.",
      "pos": [
        33456,
        33489
      ]
    },
    {
      "content": "The first True expression has a corresponding value that is Null.",
      "pos": [
        33492,
        33557
      ]
    },
    {
      "content": "Switch evaluates all of the expressions, even though it returns only one of them.",
      "pos": [
        33559,
        33640
      ]
    },
    {
      "content": "For this reason, you should watch for undesirable side effects.",
      "pos": [
        33641,
        33704
      ]
    },
    {
      "content": "For example, if the evaluation of any expression results in a division by zero error, an error occurs.",
      "pos": [
        33705,
        33807
      ]
    },
    {
      "content": "Value can also be the Error function which would return a custom string.",
      "pos": [
        33809,
        33881
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        33883,
        33895
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Switch([city] = \"London\", \"English\", [city] = \"Rome\", \"Italian\", [city] = \"Paris\", \"French\", True, Error(“Unknown city”))`</ph>",
      "pos": [
        33902,
        34025
      ]
    },
    {
      "content": "Returns the language spoken in some major cities, otherwise returns an Error.",
      "pos": [
        34031,
        34108
      ]
    },
    {
      "content": "Trim",
      "pos": [
        34128,
        34132
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        34134,
        34150
      ]
    },
    {
      "content": "The Trim function removes leading and trailing white spaces from a string.",
      "pos": [
        34157,
        34231
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        34234,
        34245
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str Trim(str value)`</ph>",
      "pos": [
        34252,
        34273
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        34307,
        34319
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Trim(“ Test ”)`</ph>",
      "pos": [
        34326,
        34342
      ]
    },
    {
      "content": "Returns “Test”.",
      "pos": [
        34348,
        34363
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Trim([proxyAddresses])`</ph>",
      "pos": [
        34365,
        34389
      ]
    },
    {
      "content": "Removes leading and trailing spaces for each value in the proxyAddress attribute.",
      "pos": [
        34395,
        34476
      ]
    },
    {
      "content": "UCase",
      "pos": [
        34496,
        34501
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        34503,
        34519
      ]
    },
    {
      "content": "The UCase function converts all characters in a string to upper case.",
      "pos": [
        34525,
        34594
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        34596,
        34607
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        34640,
        34652
      ]
    },
    {
      "content": "<ph id=\"ph1\">`UCase(“TeSt”)`</ph>",
      "pos": [
        34659,
        34674
      ]
    },
    {
      "content": "Returns “TEST”.",
      "pos": [
        34680,
        34695
      ]
    },
    {
      "content": "Word",
      "pos": [
        34717,
        34721
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Description:<ept id=\"p1\">**</ept>",
      "pos": [
        34723,
        34739
      ]
    },
    {
      "content": "The Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.",
      "pos": [
        34746,
        34889
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Syntax:<ept id=\"p1\">**</ept>",
      "pos": [
        34892,
        34903
      ]
    },
    {
      "content": "string: the string to return a word from.",
      "pos": [
        34968,
        35009
      ]
    },
    {
      "content": "WordNumber: a number identifying which word number should be returned.",
      "pos": [
        35012,
        35082
      ]
    },
    {
      "content": "delimiters: a string representing the delimiter(s) that should be used to identify words",
      "pos": [
        35086,
        35174
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Remarks:<ept id=\"p1\">**</ept>",
      "pos": [
        35177,
        35189
      ]
    },
    {
      "content": "Each string of characters in string separated by the one of the characters in delimiters are identified as words:",
      "pos": [
        35196,
        35309
      ]
    },
    {
      "content": "If number &lt; 1, returns empty string.",
      "pos": [
        35314,
        35350
      ]
    },
    {
      "content": "If string is null, returns empty string.",
      "pos": [
        35353,
        35393
      ]
    },
    {
      "content": "If string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.",
      "pos": [
        35395,
        35529
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept>",
      "pos": [
        35533,
        35545
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Word(“The quick brown fox”,3,” “)`</ph>",
      "pos": [
        35552,
        35587
      ]
    },
    {
      "content": "Returns “brown”",
      "pos": [
        35593,
        35608
      ]
    },
    {
      "content": "<ph id=\"ph1\">`Word(“This,string!has&amp;many seperators”,3,”,!&amp;#”)`</ph>",
      "pos": [
        35610,
        35660
      ]
    },
    {
      "content": "Would return “has”",
      "pos": [
        35666,
        35684
      ]
    },
    {
      "content": "Additional Resources",
      "pos": [
        35690,
        35710
      ]
    },
    {
      "content": "Understanding Declarative Provisioning Expressions",
      "pos": [
        35715,
        35765
      ]
    },
    {
      "content": "Azure AD Connect Sync: Customizing Synchronization options",
      "pos": [
        35857,
        35915
      ]
    },
    {
      "content": "Integrating your on-premises identities with Azure Active Directory",
      "pos": [
        35963,
        36030
      ]
    },
    {
      "content": "test",
      "pos": [
        36093,
        36097
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure AD Connect Sync: Functions Reference\"\n    description=\"Reference of declarative provisioning expressions in Azure AD Connect Sync.\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"markusvi\"\n    manager=\"swadhwa\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"active-directory\"\n    ms.workload=\"identity\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"07/27/2015\"\n    ms.author=\"markusvi\"/>\n\n\n# Azure AD Connect Sync: Functions Reference\n\n\nIn Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization. <br>\nThe Syntax of the functions is expressed using the following format: <br>\n`<output type> FunctionName(<input type> <position name>, ..)`\n\nIf a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.<br> \nThe functions are strongly typed and they verify that the type passed in matches the documented type.<br>\nAn error is thrown if the type does not match.\n\nThe types are expressed with the following syntax:\n\n- **bin** – Binary\n- **bool** – Boolean\n- **dt** – UTC Date/Time\n- **enum** – Enumeration of known constants\n- **exp** – Expression, which is expected to evaluate to a Boolean\n- **mvbin** – Multi Valued Binary\n- **mvstr** – Multi Valued Reference\n- **num** – Numeric\n- **ref** – Single Valued Reference\n- **str** – Single Valued String\n- **var** – A variant of (almost) any other type\n- **void** – doesn’t return a value\n\n\n\n## Functions Reference\n\n----------\n**Conversion:**\n\n[CBool](#cbool) &nbsp;&nbsp;&nbsp;&nbsp; [CDate](#cdate) &nbsp;&nbsp;&nbsp;&nbsp; [CGuid](#cguid) &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; [ConvertFromBase64](#convertfrombase64) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertToBase64](#converttobase64) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertFromUTF8Hex](#convertfromutf8hex) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertToUTF8Hex](#converttoutf8hex) &nbsp;&nbsp;&nbsp;&nbsp; [CNum](#cnum)  &nbsp;&nbsp;&nbsp;&nbsp; [CRef](#cref) &nbsp;&nbsp;&nbsp;&nbsp; [CStr](#cstr)  &nbsp;&nbsp;&nbsp;&nbsp; [StringFromGuid](#StringFromGuid) &nbsp;&nbsp;&nbsp;&nbsp; [StringFromSid](#stringfromsid)\n\n**Date / Time:**\n\n[DateAdd](#dateadd) &nbsp;&nbsp;&nbsp;&nbsp; [DateFromNum](#datefromnum)  &nbsp;&nbsp;&nbsp;&nbsp; [FormatDateTime](#formatdatetime)  &nbsp;&nbsp;&nbsp;&nbsp; [Now](#now)  &nbsp;&nbsp;&nbsp;&nbsp; [NumFromDate](#numfromdate)\n\n**Directory**\n\n[DNComponent](#dncomponent)  &nbsp;&nbsp;&nbsp;&nbsp; [DNComponentRev](#dncomponentrev) &nbsp;&nbsp;&nbsp;&nbsp; [EscapeDNComponent](#escapedncomponent)\n\n**Insprection:**\n\n[IsBitSet](#isbitset)  &nbsp;&nbsp;&nbsp;&nbsp; [IsDate](#isdate) &nbsp;&nbsp;&nbsp;&nbsp; [IsEmpty](#isempty)\n&nbsp;&nbsp;&nbsp;&nbsp; [IsGuid](#isguid) &nbsp;&nbsp;&nbsp;&nbsp; [IsNull](#isnull) &nbsp;&nbsp;&nbsp;&nbsp; [IsNullOrEmpty](#isnullorempty) &nbsp;&nbsp;&nbsp;&nbsp; [IsNumeric](#isnumeric)  &nbsp;&nbsp;&nbsp;&nbsp; [IsPresent](#ispresent) &nbsp;&nbsp;&nbsp;&nbsp; [IsString](#isstring) \n\n**Math:**\n\n[BitAnd](#bitand) &nbsp;&nbsp;&nbsp;&nbsp; [BitOr](#bitor) &nbsp;&nbsp;&nbsp;&nbsp; [RandomNum](#randomnum)\n\n**Multi-valued**\n\n[Contains](#contains) &nbsp;&nbsp;&nbsp;&nbsp; [Count](#count) &nbsp;&nbsp;&nbsp;&nbsp; [Item](#item)   &nbsp;&nbsp;&nbsp;&nbsp; [ItemOrNull](#itemornull) &nbsp;&nbsp;&nbsp;&nbsp; [Join](#join) &nbsp;&nbsp;&nbsp;&nbsp; [RemoveDuplicates](#removeduplicates) &nbsp;&nbsp;&nbsp;&nbsp; [Split](#split)\n\n**Program Flow:**\n\n[Error](#error) &nbsp;&nbsp;&nbsp;&nbsp; [IIF](#iif)  &nbsp;&nbsp;&nbsp;&nbsp; [Switch](#switch)\n\n\n**Text**\n\n[GUID](#guid) &nbsp;&nbsp;&nbsp;&nbsp; [InStr](#instr) &nbsp;&nbsp;&nbsp;&nbsp; [InStrRev](#instrrev) &nbsp;&nbsp;&nbsp;&nbsp; [LCase](#lcase) &nbsp;&nbsp;&nbsp;&nbsp; [Left](#left) &nbsp;&nbsp;&nbsp;&nbsp; [Len](#len) &nbsp;&nbsp;&nbsp;&nbsp; [LTrim](#ltrim)  &nbsp;&nbsp;&nbsp;&nbsp; [Mid](#mid)  &nbsp;&nbsp;&nbsp;&nbsp; [PadLeft](#padleft) &nbsp;&nbsp;&nbsp;&nbsp; [PadRight](#padright) &nbsp;&nbsp;&nbsp;&nbsp; [PCase](#pcase)   &nbsp;&nbsp;&nbsp;&nbsp; [Replace](#replace) &nbsp;&nbsp;&nbsp;&nbsp; [ReplaceChars](#replacechars) &nbsp;&nbsp;&nbsp;&nbsp; [Right](#right) &nbsp;&nbsp;&nbsp;&nbsp; [RTrim](rtrim) &nbsp;&nbsp;&nbsp;&nbsp; [Trim](#trim) &nbsp;&nbsp;&nbsp;&nbsp; [UCase](#ucase) &nbsp;&nbsp;&nbsp;&nbsp; [Word](#word)\n\n----------\n### BitAnd\n\n**Description:**<br> \nThe BitAnd function sets specified bits on a value.\n \n**Syntax:**<br> \n`num BitAnd(num value1, num value2)`\n\n- value1, value2: numeric values which should be AND’ed together\n \n**Remarks:**<br>\nThis function converts both parameters to the binary representation and sets a bit to:\n \n- 0 - if one or both of the corresponding bits in *mask* and *flag* are 0\n- 1 - if both of the corresponding bits are 1. \n\nIn other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1. \n \n**Example:**<br> \n`BitAnd(&HF, &HF7)`<br>\nReturns 7 because hexadecimal “F” AND “F7” evaluate to this value.\n \n----------\n### BitOr\n\n**Description:** <br>\nThe BitOr function sets specified bits on a value. \n\n**Syntax:** <br>\n`num BitOr(num value1, num value2)`\n\n- value1, value2: numeric values that should be OR’ed together \n\n**Remarks:** <br>\nThis function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0. <br>\nIn other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0. \n\n----------\n### CBool\n\n**Description:**<br>\nThe CBool function returns a Boolean based on the evaluated expression\n\n**Syntax:** <br>\n`bool CBool(exp Expression)` \n\n**Remarks:**<br>\nIf the expression evaluates to a nonzero value then CBool returns True else it returns False.\n\n\n**Example:**<br>\n`CBool([attrib1] = [attrib2])` <br>\n\nReturns True if both attributes have the same value.\n \n \n\n\n----------\n### CDate\n\n**Description:**<br>\nThe CDate function returns a UTC DateTime from a string. DateTime is not a native attribute type in Sync but is used by some functions.\n\n**Syntax:**<br>\n`dt CDate(str value)`\n\n- Value: A string with a date, time, and optionally time zone\n\n**Remarks:**<br>\nThe returned string is always in UTC. \n\n**Example:**<br>\n`CDate([employeeStartTime])` <br>\nReturns a DateTime based on the employee’s start time\n\n`CDate(\"2013-01-10 4:00 PM -8\")` <br>\nReturns a DateTime representing \"2013-01-11 12:00 AM\"\n \n\n\n\n----------\n### CGuid\n\n**Description:**<br> \nThe CGuid function converts the string representation of a GUID to its binary representation.\n \n**Syntax:**<br> \n`bin CGuid(str GUID)GUID`\n\n- A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n \n\n\n\n----------\n### Contains\n\n**Description:**<br> \nThe Contains function finds a string inside a multi-valued attribute\n \n**Syntax:**<br> \n`num Contains (mvstring attribute, str search)` - case sensitive<br>\n`num Contains (mvstring attribute, str search, enum Casetype)`<br>\n`num Contains (mvref attribute, str search)` - case sensitive\n\n- attribute: the multi-valued attribute to search.<br>\n- search: string to find in the attribute.<br>\n- Casetype: CaseInsensitive or CaseSensitive.<br>\n\nReturns index in the multi-valued attribute where the string was found. 0 is returned if the string is not found.\n \n\n**Remarks:**<br> \nFor multi-valued string attributes the search will find substrings in the values.<br>\nFor reference attributes, the searched string must exactly match the value to be considered a match. \n \n**Example:**<br> \n`IIF(Contains([proxyAddresses],”SMTP:”)>0,[proxyAddresses],Error(“No primary SMTP address found.”))`<br>\nIf the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.\n \n \n\n\n----------\n### ConvertFromBase64\n\n**Description:**<br> \nThe ConvertFromBase64 function converts the specified base64 encoded value to a regular string.\n \n**Syntax:**<br> \n`str ConvertFromBase64(str source)` - assumes Unicode for encoding <br>\n`str ConvertFromBase64(str source, enum Encoding)`\n\n- source: Base64 encoded string<br>\n- Encoding: Unicode, ASCII, UTF8\n\n**Example**<br> \n`ConvertFromBase64(\"SABlAGwAbABvACAAdwBvAHIAbABkACEA\")`<br>\n`ConvertFromBase64(\"SGVsbG8gd29ybGQh\", UTF8)`\n\nBoth examples return \"*Hello world!*\"\n \n \n\n\n----------\n### ConvertFromUTF8Hex\n\n**Description:**<br> \nThe ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.\n \n**Syntax:**<br> \n`str ConvertFromUTF8Hex(str source)`\n\n- source: UTF8 2-byte encoded sting\n \n**Remarks:**<br> \nThe difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.<br>\nThis format is used by Azure Active Directory as DN.\n \n**Example:**<br> \n`ConvertFromUTF8Hex(\"48656C6C6F20776F726C6421\")`<br>\nReturns \"*Hello world!*\"\n \n \n\n\n----------\n### ConvertToBase64\n\n**Description:** <br>\nThe ConvertToBase64 function converts a string to a Unicode base64 string.<br>\nConverts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.\n\n**Syntax:** <br>\n`str ConvertToBase64(str source)`\n \n**Example:** <br> \n`ConvertToBase64(\"Hello world!\")` <br>\nReturns \"SABlAGwAbABvACAAdwBvAHIAbABkACEA\"\n \n \n\n\n----------\n### ConvertToUTF8Hex\n\n**Description:**<br> \nThe ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.\n \n**Syntax:**<br> \n`str ConvertToUTF8Hex(str source)`\n \n**Remarks:**<br> \nThe output format of this function is used by Azure Active Directory as DN attribute format.\n \n**Example:** <br>\n`ConvertToUTF8Hex(\"Hello world!\")` <br>\nReturns 48656C6C6F20776F726C6421\n \n \n\n\n----------\n### Count\n\n**Description:**<br> \nThe Count function returns the number of elements in a multi-valued attribute\n \n**Syntax:** <br> \n`num Count(mvstr attribute)`\n \n\n\n\n----------\n### CNum\n\n**Description:** <br> \nThe CNum function takes a string and returns a numeric data type.\n \n**Syntax:** <br> \n`num CNum(str value)`\n \n\n\n\n----------\n### CRef\n\n**Description:** <br> \nConverts a string to a reference attribute\n \n**Syntax:** <br> \n`ref CRef(str value)`\n \n**Example:** <br> \n`CRef(“CN=LC Services,CN=Microsoft,CN=lcspool01, CN=Pools,CN=RTC Service,” & %Forest.LDAP%)`\n \n \n\n\n----------\n### CStr\n\n**Description:** <br> \nThe CStr function converts to a string data type.\n \n**Syntax:** <br>\n`str CStr(num value)` <br>\n`str CStr(ref value)` <br>\n`str CStr(bool value)` <br>\n\n- value: Can be a numeric value, reference attribute, or Boolean. \n \n**Example:** <br>\n`CStr([dn]) <br>`\nCould return “cn=Joe,dc=contoso,dc=com”\n \n \n\n\n----------\n### DateAdd\n\n**Description:** <br> \nReturns a Date containing a date to which a specified time interval has been added.\n \n**Syntax:** <br> \n`dt DateAdd(str interval, num value, dt date)`\n\n- interval: String expression that is the interval of time you want to add. The string must have one of the following values:\n - yyyy Year\n - q Quarter\n - m Month\n - y Day of year\n - d Day\n - w Weekday\n - ww Week\n - h Hour\n - n Minute\n - s Second\n- value: The number of units you want to add. It can be positive (to get dates in the future) or negative (to get dates in the past). \n- date: DateTime representing date to which the interval is added.\n \n**Example:** <br> \n`DateAdd(\"m\", 3, CDate(\"2001-01-01\"))` <br>\nAdds 3 months and returns a DateTime representing \"2001-04-01”\n \n \n\n\n----------\n### DateFromNum\n\n**Description:** <br>\nThe DateFromNum function converts a value in AD’s date format to a DateTime type.\n \n**Syntax:** <br>\n`dt DateFromNum(num value)`\n \n**Example:** <br> \n`DateFromNum([lastLogonTimestamp])` <br>\n`DateFromNum(129699324000000000)` <br>\nReturns a DateTime representing 2012-01-01 23:00:00\n \n\n\n\n----------\n### DNComponent\n\n**Description:** <br> \nThe DNComponent function returns the value of a specified DN component going from left.\n \n**Syntax:** <br> \n`str DNComponent(ref dn, num ComponentNumber)`\n\n- dn: the reference attribute to interpret\n- ComponentNumber: The component in the DN to return\n \n**Example:** <br> \n`DNComponent([dn],1)`  <br>\nIf dn is “cn=Joe,ou=…, it returns Joe\n \n\n\n\n----------\n### DNComponentRev\n\n**Description:** <br> \nThe DNComponentRev function returns the value of a specified DN component going from right (the end).\n \n**Syntax:** <br> \n`str DNComponentRev(ref dn, num ComponentNumber)` <br>\n`str DNComponentRev(ref dn, num ComponentNumber, enum Options)` \n\n- dn: the reference attribute to interpret\n- ComponentNumber - The component in the DN to return\n- Options: DC – Ignore all components with “dc=”\n \n**Example:** <br> \n`If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)` <br>  `DNComponentRev([dn],1,”DC”)` <br>\nBoth return US.\n \n \n\n\n----------\n### Error\n\n**Description:** <br> \nThe Error function is used to return a custom error.\n \n**Syntax:** <br> \n`void Error(str ErrorMessage)`\n \n**Example:** <br> \n`IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))` <br>\nIf the attribute accountName is not present, throw an error on the object.\n \n \n\n\n----------\n### EscapeDNComponent\n\n**Description:** <br> \nThe EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.\n \n**Syntax:** <br> \n`str EscapeDNComponent(str value)`\n \n**Example:** <br> \n`EscapeDNComponent(“cn=” & [displayName]) & “,” & %ForestLDAP%` <br>\nMakes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.\n \n \n\n\n----------\n### FormatDateTime\n\n**Description:** <br>\nThe FormatDateTime function is used to format a DateTime to a string with a specified format\n \n**Syntax:** <br> \n`str FormatDateTime(dt value, str format)`\n\n- value: a value in the DateTime format <br>\n- format: a string representing the format to convert to.\n \n**Remarks:** <br> \nThe possible values for the format can be found here: [User-Defined Date/Time Formats (Format Function)](http://msdn2.microsoft.com/library/73ctwf33\\(VS.90\\).aspx) \n \n**Example:** <br> \n \n`FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)` <br>\nResults in “2007-12-25”.\n\n`FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)` <br>\nCan result in “20140905081453.0Z”\n \n \n\n\n----------\n### GUID\n\n**Description:** <br> \nThe function GUID generates a new random GUID\n \n**Syntax:** <br> \n`str GUID()`\n \n\n\n\n----------\n### IIF\n\n**Description:** <br>  \nThe IIF function returns one of a set of possible values based on a specified condition.\n \n**Syntax:** <br> \n`var IIF(exp condition, var valueIfTrue, var valueIfFalse)`\n\n- condition: any value or expression that can be evaluated to true or false.\n- valueIfTrue: a value that will be returned if condition evaluates to true.\n- valueIfFalse: a value that will be returned if condition evaluates to false.\n\n**Example:** <br> \n`IIF([employeeType]=“Intern”,”t-“&[alias],[alias])` <br>\nReturns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.\n \n \n\n\n----------\n### InStr\n\n**Description:** <br> \nThe InStr function finds the first occurrence of a substring in a string\n \n**Syntax:** <br> \n \n`num InStr(str stringcheck, str stringmatch)` <br>\n`num InStr(str stringcheck, str stringmatch, num start)` <br>\n`num InStr(str stringcheck, str stringmatch, num start , enum compare)` \n\n- stringcheck: string to be searched <br>\n- stringmatch: string to be found <br>\n- start: starting position to find the substring <br>\n- compare: vbTextCompare or vbBinaryCompare\n \n**Remarks:** <br> \nReturns the position where the substring was found or 0 if not found. \n\n**Example:** <br> \n`InStr(\"The quick brown fox\",\"quick\")` <br>\nEvalues to 5 \n\n`InStr(\"repEated\",\"e\",3,vbBinaryCompare)` <br>\nEvaluates to 7\n \n \n\n\n----------\n### InStrRev\n\n**Description:** <br> \nThe InStrRev function finds the last occurrence of a substring in a string\n \n**Syntax:** <br> \n`num InstrRev(str stringcheck, str stringmatch)` <br>\n`num InstrRev(str stringcheck, str stringmatch, num start)` <br>\n`num InstrRev(str stringcheck, str stringmatch, num start, enum compare)`\n\n- stringcheck: string to be searched <br>\n- stringmatch: string to be found <br>\n- start: starting position to find the substring <br>\n- compare: vbTextCompare or vbBinaryCompare\n\n**Remarks:** <br> \nReturns the position where the substring was found or 0 if not found.\n\n**Example:** <br> \n`InStrRev(\"abbcdbbbef\",\"bb\")` <br>\nReturns 7\n \n \n\n\n----------\n### IsBitSet\n\n**Description:** <br> \nThe function IsBitSet Tests if a bit is set or not\n \n**Syntax:** <br> \n`bool IsBitSet(num value, num flag)` \n\n- value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated\n \n**Example:** <br> \n`IsBitSet(&HF,4)` <br>\nReturns True because bit “4” is set in the hexadecimal value “F”\n \n\n\n\n----------\n### IsDate\n\n**Description:** <br> \nThe IsDate function evaluates to True if the expression can be evaluates as a DateTime type.\n \n**Syntax:** <br> \n`bool IsDate(var Expression)`\n \n**Remarks:** <br> \nUsed to determine if CDate() will be successful.\n \n\n\n\n----------\n###IsEmpty\n\n**Description:** <br>  \nThe IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.\n \n**Syntax:** <br> \n`bool IsEmpty(var Expression)`\n \n\n\n\n----------\n###IsGuid\n\n**Description:** <br> \nThe IsGuid function evaluated to true if the string could be converted to a GUID.\n \n**Syntax:** <br> \n`bool IsGuid(str GUID)`\n \n**Remarks:** <br> \nA GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n\nUsed to determine if CGuid() will be successful.\n \n**Example:** <br> \n`IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)` <br>\nIf the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.\n \n \n\n\n----------\n###IsNull\n\n**Description:** <br> \nThe IsNull function returns true if the expression evaluates to Null. \n \n**Syntax:** <br> \n`bool IsNull(var Expression)`\n \n**Remarks:** <br> \nFor an attribute, a Null is expressed by the absence of the attribute. \n \n**Example:** <br> \n`IsNull([displayName])` <br>\nReturns True if the attribute is not present in the CS or MV.\n \n \n\n\n----------\n###IsNullOrEmpty\n\n**Description:** <br> \nThe IsNullOrEmpty function returns true if the expression is null or an empty string.\n \n**Syntax:** <br> \n`bool IsNullOrEmpty(var Expression)`\n \n**Remarks:** <br> \nFor an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.<br>\nThe inverse of this function is named IsPresent.\n \n**Example:** <br> \n`IsNull([displayName])` <br>\nReturns True if the attribute is not present or is an empty string in the CS or MV.\n \n \n\n\n----------\n### IsNumeric\n\n**Description:** <br> \nThe IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.\n \n**Syntax:** <br> \n`bool IsNumeric(var Expression)`\n \n**Remarks:** <br> \nUsed to determine if CNum() will be successful to parse the expression.\n\n\n\n\n----------\n### IsString\n\n**Description:** <br>\nThe IsString function evaluates to True if the expression can be evaluated to a string type.\n \n**Syntax:** <br>\n`bool IsString(var expression)`\n \n**Remarks:** <br> \nUsed to determine if CStr() will be successful to parse the expression.\n \n\n\n\n----------\n### IsPresent\n\n**Description:** <br> \nThe IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.\n \n**Syntax:** <br> \n`bool IsPresent(var expression)`\n \n**Remarks:** <br> \nThe inverse of this function is named IsNullOrEmpty.\n \n**Example:** <br> \n \n`Switch(IsPresent([directManager]),[directManager], IsPresent([skiplevelManager]),[skiplevelManager], IsPresent([director]),[director])`\n  \n\n\n\n----------\n### Item\n\n**Description:** <br> \nThe Item function returns one item from a multi-valued string/attribute. \n \n**Syntax:** <br> \n`var Item(mvstr attribute, num index)`\n\n- attribute: multi-valued attribute <br>\n- index: index to an item in the multi-valued string.\n \n**Remarks:** <br> \nThe Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.\n\nThrows an error if index is out of bounds.\n \n**Example:** <br> \n`Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)`  <br>\nReturns the primary email address.\n \n \n\n\n----------\n### ItemOrNull\n\n**Description:** <br> \nThe ItemOrNull function returns one item from a multi-valued string/attribute. \n \n**Syntax:** <br> \n`var ItemOrNull(mvstr attribute, num index)`\n\n- attribute: multi-valued attribute <br>\n- index: index to an item in the multi-valued string.\n \n**Remarks:** <br> \nThe ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.\n\nReturns a Null value if index is out of bounds.\n \n\n\n\n----------\n### Join\n\n**Description:** <br> \nThe Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.\n \n**Syntax:** <br> \n`str Join(mvstr attribute)` <br>\n`str Join(mvstr attribute, str Delimiter)`\n\n- attribute: Multi-valued attribute containing strings to be joined. <br>\n- delimiter: Any string, used to separate the substrings in the returned string. If omitted, the space character (\" \") is used. If Delimiter is a zero-length string (\"\") or Nothing, all items in the list are concatenated with no delimiters.\n \n**Remarks**<br> \nThere is parity between the Join and Split functions. The Join function takes an array of strings and joins them using a delimiter string, to return a single string. The Split function takes a string and separates it at the delimiter, to return an array of strings. However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.\n \n**Example:** <br> \n`Join([proxyAddresses],”,”)` <br>\nCould return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”\n \n \n\n\n----------\n### LCase\n\n**Description:** <br> \nThe LCase function converts all characters in a string to lower case.\n \n**Syntax:** <br> \n`str LCase(str value)`\n \n**Example:** <br> \n`LCase(“TeSt”)` <br>\nReturns “test”.\n \n \n\n\n----------\n### Left\n\n**Description:** <br> \nThe Left function returns a specified number of characters from the left of a string.\n \n**Syntax:** <br> \n`str Left(str string, num NumChars)`\n\n- string: the string to return characters from <br>\n- NumChars: a number identifying the number of characters to return from the beginning (left) of string\n \n**Remarks:** <br> \nA string containing the first numChars characters in string: \n\n- If numChars = 0, return empty string.\n- If numChars < 0, return input string.\n- If string is null, return empty string.\n\nIf string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.\n \n**Example:** <br> \n`Left(“John Doe”, 3)` <br>\nReturns “Joh”.\n \n\n\n\n----------\n### Len\n\n**Description:** <br> \nThe Len function returns number of characters in a string.\n \n**Syntax:** <br> \n`num Len(str value)`\n \n**Example:** <br>\n`Len(“John Doe”)` <br>\nReturns 8\n \n\n\n\n----------\n### LTrim\n\n**Description:** <br> \nThe LTrim function removes leading white spaces from a string.\n \n**Syntax:** <br> \n`str LTrim(str value)`\n \n**Example:** <br>\n`LTrim(“ Test ”)` <br>\nReturns “Test ”\n \n \n\n\n----------\n### Mid\n\n**Description:** <br> \nThe Mid function returns a specified number of characters from a specified position in a string.\n \n**Syntax:** <br> \n`str Mid(str string, num start, num NumChars)`\n\n- string: the string to return characters from <br>\n- start: a number identifying the starting position in string to return characters from\n- NumChars: a number identifying the number of characters to return from position in string\n \n\n**Remarks:** <br> \nReturn numChars characters starting from position start in string.<br>\nA string containing numChars characters from position start in string: \n\n- If numChars = 0, return empty string.\n- If numChars < 0, return input string.\n- If start > the length of string, return input string.\n- If start <= 0, return input string.\n- If string is null, return empty string.\n\nIf there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.\n \n**Example:** <br> \n \n`Mid(“John Doe”, 3, 5)` <br>\nReturns “hn Do”.\n\n`Mid(“John Doe”, 6, 999)` <br>\nReturns “Doe”\n \n \n\n\n----------\n### Now\n\n**Description:** <br> \nThe Now function returns a DateTime specifying the current date and time, according your computer's system date and time.\n \n**Syntax:** <br> \n`dt Now()`\n \n\n\n\n----------\n### NumFromDate\n\n**Description:** <br> \nThe NumFromDate function returns a date in AD’s date format.\n \n**Syntax:** <br> \n`num NumFromDate(dt value)`\n \n\n**Example:** <br> \n`NumFromDate(CDate(\"2012-01-01 23:00:00\"))` <br>\nReturns 129699324000000000\n \n \n\n\n----------\n### PadLeft\n\n**Description:** <br> \nThe PadLeft function left-pads a string to a specified length using a provided padding character.\n \n**Syntax:** <br> \n`str PadLeft(str string, num length, str padCharacter)`\n\n- string: the string to pad. <br>\n- length: An integer representing the desired length of string. <br>\n- padCharacter: A string consisting of a single character to use as the pad character\n \n\n\n----------\n### Remarks \n \n- If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.\n- PadCharacter can be a space character, but it cannot be a null value.\n- If the length of string is equal to or greater than length, string is returned unchanged.\n- If string has a length greater than or equal to length, a string identical to string is returned.\n- If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.\n- If string is null, the function returns an empty string.\n\n**Example:** <br> \n`PadLeft(“User”, 10, “0”)` <br>\nReturns “000000User”.\n \n \n\n\n----------\n### PadRight\n\n**Description:** <br> \nThe PadRight function right-pads a string to a specified length using a provided padding character.\n \n**Syntax:** <br> \n`str PadRight(str string, num length, str padCharacter)`\n\n- string: the string to pad. \n- length: An integer representing the desired length of string.\n- padCharacter: A string consisting of a single character to use as the pad character\n \n**Remarks:** \n \n- If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.\n- padCharacter can be a space character, but it cannot be a null value.\n- If the length of string is equal to or greater than length, string is returned unchanged.\n- If string has a length greater than or equal to length, a string identical to string is returned.\n- If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.\n- If string is null, the function returns an empty string.\n \n\n**Example:** <br> \n`PadRight(“User”, 10, “0”)` <br>\nReturns “User000000”.\n \n \n\n\n----------\n### PCase\n\n**Description:** <br> \nThe PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.\n \n**Syntax:** <br> \n`String PCase(string)`\n \n**Example:** <br> \n`PCase(“TEsT”)` <br> \nReturns “Test”.\n \n \n\n\n----------\n### RandomNum\n\n**Description:** <br> \nThe RandomNum function returns a random number between a specified interval.\n \n**Syntax:** <br> \n`num RandomNum(num start, num end)`\n\n- start: a number identifying the lower limit of the random value to generate <br>\n- end: a number identifying the upper limit of the random value to generate\n \n**Example:** <br> \n`Random(100,999)` <br> \nReturns 734.\n \n \n\n\n----------\n### RemoveDuplicates\n\n**Description:** <br> \nThe RemoveDuplicates function takes a multi-valued string and make sure each value is unique.\n \n**Syntax:** <br>  \n`mvstr RemoveDuplicates(mvstr attribute)`\n \n**Example:** <br> \n`RemoveDuplicates([proxyAddresses])` <br>\nReturns a sanitized proxyAddress attribute where all duplicate values have been removed.\n \n \n\n\n----------\n### Replace\n\n**Description:** <br> \nThe Replace function replaces all occurrences of a string to another string.\n \n**Syntax:** <br> \n`str Replace(str string, str OldValue, str NewValue)`\n\n- string: A string to replace values in. <br>\n- OldValue: The string to search for and to replace. <br>\n- NewValue: The string to replace to.\n \n\n**Remarks:** <br> \nThe function recognizes the following special monikers:\n\n- \\n – New Line \n- \\r – Carriage Return\n- \\t – Tab\n \n\n**Example:** <br> \n \n`Replace([address],”\\r\\n”,”, “)` <br> \nReplaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”\n \n \n\n\n----------\n### ReplaceChars\n\n**Description:** <br> \nThe ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.\n\n**Syntax:** <br> \n`str ReplaceChars(str string, str ReplacePattern)`\n\n- string: A string to replace characters in.\n- ReplacePattern: a string containing a dictionary with characters to replace. \n \nThe format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with. \n \n\n**Remarks:** \n \n- The function takes each occurrence of defined sources and replaces them with the targets. \n- The source must be exactly one (unicode) character. \n- The source cannot be empty or longer than one character (parsing error).\n- The target can have multiple characters, e.g. ö:oe, β:ss.\n- The target can be empty indicating that the character should be removed. \n- The source is case sensitive and must be an exact match.\n- The , (comma) and : (colon) are reserved characters and cannot be replaced using this function. \n- Spaces and other white characters in the ReplacePattern string are ignored.\n \n\n**Example:** <br> \n'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o' \n\n`ReplaceChars(”Räksmörgås”,%ReplaceString%)` <br>\nReturns Raksmorgas\n\n`ReplaceChars(“O’Neil”,%ReplaceString%)` <br>\nReturns “ONeil”, the single tick is defined to be removed.\n \n\n\n\n----------\n### Right\n\n**Description:** <br> \nThe Right function returns a specified number of characters from the right (end) of a string.\n \n**Syntax:** <br> \n`str Right(str string, num NumChars)`\n\n- string: the string to return characters from \n- NumChars: a number identifying the number of characters to return from the end (right) of string\n \n**Remarks:** <br>\nNumChars characters are returned from the last position of string.\n\nA string containing the last numChars characters in string:\n\n- If numChars = 0, return empty string.\n- If numChars < 0, return input string.\n- If string is null, return empty string.\n\nIf string contains fewer characters than the number specified in NumChars, a string identical to string is returned.\n\n**Example:** <br> \n`Right(“John Doe”, 3)` <br>\nReturns “Doe”.\n \n\n\n\n----------\n### RTrim\n\n**Description:** <br> \nThe RTrim function removes trailing white spaces from a string.\n \n**Syntax:** <br> \n`str RTrim(str value)`\n\n**Example:** <br> \n`RTrim(“ Test ”)` <br> \nReturns “ Test”.\n\n\n\n\n----------\n### Split\n\n**Description:** <br> \nThe Split function takes a string separated with a delimiter and makes it a multi-valued string.\n \n\n**Syntax:** <br> \n`mvstr Split(str value, str delimiter)` <br?\n`mvstr Split(str value, str delimiter, num limit)`\n\n- value: the string with a delimiter character to separate.\n- delimiter: single character to be used as the delimiter. \n- limit: maximum number of values which will be returned.\n \n**Example:** <br> \n`Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)` <br>\nReturns a multi-valued string with 2 elements useful for the proxyAddress attribute\n \n\n\n\n----------\n### StringFromGuid\n\n**Description:** <br>\nThe StringFromGuid function takes a binary GUID and converts it to a string\n \n**Syntax:** <br>\n`str StringFromGuid(bin GUID)`\n \n\n\n\n----------\n### StringFromSid\n\n**Description:** <br> \nThe StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.\n \n**Syntax:** <br> \n`str StringFromSid(bin ObjectSID)` <br>\n`mvstr StringFromSid(mvbin ObjectSID)`\n \n\n\n\n----------\n### Switch\n\n**Description:** <br> \nThe Switch function is used to return a single value based on evaluated conditions.\n\n**Syntax:** <br> \n`var Switch(exp expr1, var value1[, exp expr2, var value … [, exp expr, var valueN]])`\n\n- expr: Variant expression you want to evaluate. \n- value: Value to be returned if the corresponding expression is True.\n \n**Remarks:** <br> \nThe Switch function argument list consists of pairs of expressions and values. The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned. If the parts aren't properly paired, a run-time error occurs. \n\nFor example, if expr1 is True, Switch returns value1. If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.\n\nSwitch returns a Nothing if:\n- None of the expressions are True.\n- The first True expression has a corresponding value that is Null.\n\nSwitch evaluates all of the expressions, even though it returns only one of them. For this reason, you should watch for undesirable side effects. For example, if the evaluation of any expression results in a division by zero error, an error occurs.\n\nValue can also be the Error function which would return a custom string.\n\n**Example:** <br> \n`Switch([city] = \"London\", \"English\", [city] = \"Rome\", \"Italian\", [city] = \"Paris\", \"French\", True, Error(“Unknown city”))` <br>\nReturns the language spoken in some major cities, otherwise returns an Error.\n\n\n\n\n----------\n### Trim\n\n**Description:** <br> \nThe Trim function removes leading and trailing white spaces from a string.\n \n**Syntax:** <br> \n`str Trim(str value)` <br>\n`mvstr Trim(mvstr value)`\n \n**Example:** <br> \n`Trim(“ Test ”)` <br>\nReturns “Test”.\n\n`Trim([proxyAddresses])` <br>\nRemoves leading and trailing spaces for each value in the proxyAddress attribute.\n\n\n\n\n----------\n### UCase\n\n**Description:** <br>\nThe UCase function converts all characters in a string to upper case.\n\n**Syntax:** <br> \n`str UCase(str string)`\n \n**Example:** <br> \n`UCase(“TeSt”)` <br>\nReturns “TEST”.\n \n \n\n\n----------\n### Word\n\n**Description:** <br> \nThe Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.\n \n**Syntax:** <br> \n`str Word(str string, num WordNumber, str delimiters)`\n\n- string: the string to return a word from.\n- WordNumber: a number identifying which word number should be returned. \n- delimiters: a string representing the delimiter(s) that should be used to identify words\n \n**Remarks:** <br> \nEach string of characters in string separated by the one of the characters in delimiters are identified as words: \n\n- If number < 1, returns empty string.\n- If string is null, returns empty string.\n\nIf string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.\n \n\n**Example:** <br> \n`Word(“The quick brown fox”,3,” “)` <br>\nReturns “brown”\n\n`Word(“This,string!has&many seperators”,3,”,!&#”)` <br>\nWould return “has”\n\n\n## Additional Resources\n\n* [Understanding Declarative Provisioning Expressions](active-directory-aadconnectsync-understanding-declarative-provisioning-expressions.md)\n* [Azure AD Connect Sync: Customizing Synchronization options](active-directory-aadconnectsync-whatis.md)\n* [Integrating your on-premises identities with Azure Active Directory](active-directory-aadconnect.md)\n \n \n<!--Image references-->\n\ntest\n"
}