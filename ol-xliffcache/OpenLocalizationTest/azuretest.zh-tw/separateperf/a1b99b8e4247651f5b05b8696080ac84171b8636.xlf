<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="zh-tw">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Choosing a framework</source>
          <target state="new">Choosing a framework</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Fabric offers two high-level frameworks for building services: the actor framework and the services framework.</source>
          <target state="new">Service Fabric offers two high-level frameworks for building services: the actor framework and the services framework.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Understanding the value of each will help you make the right architectural decisions for your application.</source>
          <target state="new">Understanding the value of each will help you make the right architectural decisions for your application.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Choosing a framework for your service</source>
          <target state="new">Choosing a framework for your service</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Service Fabric offers two high-level frameworks for building services: the Reliable Actors APIs and the Reliable Services APIs.</source>
          <target state="new">Service Fabric offers two high-level frameworks for building services: the Reliable Actors APIs and the Reliable Services APIs.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>While both are built on the same Service Fabric core, they make different tradeoffs between simplicity and flexibility in terms of concurrency, partitioning, and communication.</source>
          <target state="new">While both are built on the same Service Fabric core, they make different tradeoffs between simplicity and flexibility in terms of concurrency, partitioning, and communication.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is useful to understand both models so that you can choose the appropriate framework for a particular service within your application.</source>
          <target state="new">It is useful to understand both models so that you can choose the appropriate framework for a particular service within your application.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Comparing the Reliable Actors APIs and the Reliable Services APIs</source>
          <target state="new">Comparing the Reliable Actors APIs and the Reliable Services APIs</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reliable Actors APIs</source>
          <target state="new">Reliable Actors APIs</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reliable Services APIs</source>
          <target state="new">Reliable Services APIs</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Your problem space involves many small independent units of state and logic</source>
          <target state="new">Your problem space involves many small independent units of state and logic</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You need to maintain logic across multiple components</source>
          <target state="new">You need to maintain logic across multiple components</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You want to work with single-threaded objects while still being able to scale and maintain consistency</source>
          <target state="new">You want to work with single-threaded objects while still being able to scale and maintain consistency</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You want to use reliable collections (like .NET Dictionary and Queue) to store and manage your state</source>
          <target state="new">You want to use reliable collections (like .NET Dictionary and Queue) to store and manage your state</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You want the framework to manage the concurrency and granularity of state</source>
          <target state="new">You want the framework to manage the concurrency and granularity of state</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You want to control the granularity and concurrency of your state</source>
          <target state="new">You want to control the granularity and concurrency of your state</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You want the platform to manage communication for you</source>
          <target state="new">You want the platform to manage communication for you</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You want to manage the communication and control the partitioning scheme for your service</source>
          <target state="new">You want to manage the communication and control the partitioning scheme for your service</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Keep in mind that it is perfectly reasonable to use different frameworks for different services within your app.</source>
          <target state="new">Keep in mind that it is perfectly reasonable to use different frameworks for different services within your app.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For instance, you might have a stateful service that aggregates data generated by a number of actors.</source>
          <target state="new">For instance, you might have a stateful service that aggregates data generated by a number of actors.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn more about the Reliable Actors APIs</source>
          <target state="new">Learn more about the Reliable Actors APIs</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Learn more about the Reliable Services APIs</source>
          <target state="new">Learn more about the Reliable Services APIs</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1b99b8e4247651f5b05b8696080ac84171b8636</xliffext:olfilehash>
  </header>
</xliff>