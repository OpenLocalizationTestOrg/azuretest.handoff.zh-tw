{
  "nodes": [
    {
      "content": "Get started with Azure Notification Hubs | Microsoft Azure",
      "pos": [
        27,
        85
      ]
    },
    {
      "content": "In this tutorial, you learn how to use Azure Notification Hubs to push notifications to an iOS application.",
      "pos": [
        104,
        211
      ]
    },
    {
      "content": "Get started with Notification Hubs",
      "pos": [
        545,
        579
      ]
    },
    {
      "content": "Overview",
      "pos": [
        699,
        707
      ]
    },
    {
      "content": "This tutorial shows you how to use Azure Notification Hubs to send push notifications to an iOS application.",
      "pos": [
        709,
        817
      ]
    },
    {
      "content": "You'll create a blank iOS app that receives push notifications by using the Apple Push Notification service (APNs).",
      "pos": [
        818,
        933
      ]
    },
    {
      "content": "When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app.",
      "pos": [
        934,
        1068
      ]
    },
    {
      "content": "This tutorial demonstrates the simple broadcast scenario in using Notification Hubs.",
      "pos": [
        1070,
        1154
      ]
    },
    {
      "content": "Prerequisites",
      "pos": [
        1158,
        1171
      ]
    },
    {
      "content": "This tutorial requires the following:",
      "pos": [
        1173,
        1210
      ]
    },
    {
      "content": "Mobile Services iOS SDK",
      "pos": [
        1215,
        1238
      ]
    },
    {
      "content": "Xcode 6",
      "pos": [
        1243,
        1250
      ]
    },
    {
      "content": "An iOS 8 (or later version) capable device",
      "pos": [
        1269,
        1311
      ]
    },
    {
      "content": "iOS Developer Program membership",
      "pos": [
        1314,
        1346
      ]
    },
    {
      "pos": [
        1353,
        1543
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Because of configuration requirements for push notifications, you must deploy and test push notifications on an iOS capable device (iPhone or iPad) instead of the iOS Simulator."
    },
    {
      "content": "Completing this tutorial is a prerequisite for all other Notification Hubs tutorials for iOS apps.",
      "pos": [
        1545,
        1643
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> To complete this tutorial, you must have an active Azure account.",
      "pos": [
        1647,
        1725
      ]
    },
    {
      "content": "If you don't have an account, you can create a free trial account in just a couple of minutes.",
      "pos": [
        1726,
        1820
      ]
    },
    {
      "content": "For details, see <bpt id=\"p1\">[</bpt>Azure Free Trial<ept id=\"p1\">](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fnotification-hubs-ios-get-started)</ept>.",
      "pos": [
        1821,
        2042
      ]
    },
    {
      "content": "Configure your notification hub",
      "pos": [
        2184,
        2215
      ]
    },
    {
      "content": "This section walks you through creating and configuring a new notification hub by using the push certificate that you created.",
      "pos": [
        2217,
        2343
      ]
    },
    {
      "content": "If you want to use a notification hub that you have already created, you can skip steps 2â€“5.",
      "pos": [
        2344,
        2436
      ]
    },
    {
      "content": "In Keychain Access, right-click the new push certificate that you created in the <bpt id=\"p1\">**</bpt>Certificates<ept id=\"p1\">**</ept> category.",
      "pos": [
        2442,
        2549
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Export<ept id=\"p1\">**</ept>, name the file, select the <bpt id=\"p2\">**</bpt>.p12<ept id=\"p2\">**</ept> format, and then click <bpt id=\"p3\">**</bpt>Save<ept id=\"p3\">**</ept>.",
      "pos": [
        2550,
        2635
      ]
    },
    {
      "content": "![][1]",
      "pos": [
        2641,
        2647
      ]
    },
    {
      "content": "Make a note of the file name and location of the exported certificate.",
      "pos": [
        2653,
        2723
      ]
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> This tutorial creates a QuickStart.p12 file.",
      "pos": [
        2730,
        2787
      ]
    },
    {
      "content": "Your file name and location might be different.",
      "pos": [
        2788,
        2835
      ]
    },
    {
      "pos": [
        2840,
        2918
      ],
      "content": "Sign in to the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure portal]</ept>, and click <bpt id=\"p2\">**</bpt>+NEW<ept id=\"p2\">**</ept> at the bottom of the screen."
    },
    {
      "pos": [
        2923,
        3030
      ],
      "content": "Click <bpt id=\"p1\">**</bpt>App Services<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Service Bus<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Notification Hub<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Quick Create<ept id=\"p4\">**</ept>."
    },
    {
      "content": "![][2]",
      "pos": [
        3036,
        3042
      ]
    },
    {
      "pos": [
        3047,
        3163
      ],
      "content": "Type a name for your notification hub, select your desired region, and then click <bpt id=\"p1\">**</bpt>Create a new Notification Hub<ept id=\"p1\">**</ept>."
    },
    {
      "content": "![][3]",
      "pos": [
        3169,
        3175
      ]
    },
    {
      "pos": [
        3180,
        3285
      ],
      "content": "Click the namespace that you just created (usually <bpt id=\"p1\">**</bpt><bpt id=\"p2\">*</bpt>notification hub name<ept id=\"p2\">*</ept>-ns<ept id=\"p1\">**</ept>) to open its dashboard."
    },
    {
      "content": "![][4]",
      "pos": [
        3291,
        3297
      ]
    },
    {
      "pos": [
        3302,
        3408
      ],
      "content": "Click the <bpt id=\"p1\">**</bpt>Notification Hubs<ept id=\"p1\">**</ept> tab at the top, and then click the notification hub that you just created."
    },
    {
      "content": "![][5]",
      "pos": [
        3414,
        3420
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Configure<ept id=\"p1\">**</ept> tab at the top, and then click the <bpt id=\"p2\">**</bpt>Upload<ept id=\"p2\">**</ept> button in the Apple notification settings to upload the certificate thumbprint.",
      "pos": [
        3425,
        3574
      ]
    },
    {
      "content": "Then select the <bpt id=\"p1\">**</bpt>.p12<ept id=\"p1\">**</ept> certificate that you exported earlier, and the password for the certificate.",
      "pos": [
        3575,
        3676
      ]
    },
    {
      "content": "Make sure to select whether you want to use the <bpt id=\"p1\">**</bpt>Production<ept id=\"p1\">**</ept> (if you want to send push notifications to users who purchased your app from the store) or the <bpt id=\"p2\">**</bpt>Sandbox<ept id=\"p2\">**</ept> (during development) push service.",
      "pos": [
        3677,
        3881
      ]
    },
    {
      "content": "![][6]",
      "pos": [
        3887,
        3893
      ]
    },
    {
      "content": "Click the <bpt id=\"p1\">**</bpt>Dashboard<ept id=\"p1\">**</ept> tab at the top, and then click <bpt id=\"p2\">**</bpt>View Connection String<ept id=\"p2\">**</ept>.",
      "pos": [
        3898,
        3980
      ]
    },
    {
      "content": "Take note of the two connection strings.",
      "pos": [
        3981,
        4021
      ]
    },
    {
      "content": "![][7]",
      "pos": [
        4027,
        4033
      ]
    },
    {
      "content": "Your notification hub is now configured to work with APNs, and you have the connection strings to register your app and send notifications.",
      "pos": [
        4035,
        4174
      ]
    },
    {
      "content": "Connect your app to the notification hub",
      "pos": [
        4178,
        4218
      ]
    },
    {
      "pos": [
        4223,
        4310
      ],
      "content": "In Xcode, create a new iOS project and select the <bpt id=\"p1\">**</bpt>Single View Application<ept id=\"p1\">**</ept> template."
    },
    {
      "content": "![][8]",
      "pos": [
        4316,
        4322
      ]
    },
    {
      "pos": [
        4327,
        4531
      ],
      "content": "When setting the options for your new project, make sure to use the same <bpt id=\"p1\">**</bpt>Product Name<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Organization Identifier<ept id=\"p2\">**</ept> that you used when you previously set the bundle ID on the Apple Developer portal."
    },
    {
      "content": "![][11]",
      "pos": [
        4537,
        4544
      ]
    },
    {
      "content": "Under <bpt id=\"p1\">**</bpt>Targets<ept id=\"p1\">**</ept>, click your project name, click the <bpt id=\"p2\">**</bpt>Build Settings<ept id=\"p2\">**</ept> tab and expand <bpt id=\"p3\">**</bpt>Code Signing Identity<ept id=\"p3\">**</ept>, and then under <bpt id=\"p4\">**</bpt>Debug<ept id=\"p4\">**</ept>, set your code-signing identity.",
      "pos": [
        4549,
        4721
      ]
    },
    {
      "content": "Toggle <bpt id=\"p1\">**</bpt>Levels<ept id=\"p1\">**</ept> from <bpt id=\"p2\">**</bpt>Basic<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>All<ept id=\"p3\">**</ept>, and set <bpt id=\"p4\">**</bpt>Provisioning Profile<ept id=\"p4\">**</ept> to the provisioning profile that you created previously.",
      "pos": [
        4722,
        4856
      ]
    },
    {
      "content": "If you don't see the new provisioning profile that you created in Xcode, try refreshing the profiles for your signing identity.",
      "pos": [
        4862,
        4989
      ]
    },
    {
      "content": "Click <bpt id=\"p1\">**</bpt>Xcode<ept id=\"p1\">**</ept> on the menu bar, click <bpt id=\"p2\">**</bpt>Preferences<ept id=\"p2\">**</ept>, click the <bpt id=\"p3\">**</bpt>Account<ept id=\"p3\">**</ept> tab, click the <bpt id=\"p4\">**</bpt>View Details<ept id=\"p4\">**</ept> button, click your signing identity, and then click the refresh button in the bottom-right corner.",
      "pos": [
        4990,
        5198
      ]
    },
    {
      "content": "![][9]",
      "pos": [
        5204,
        5210
      ]
    },
    {
      "content": "Download version 1.2.4 of the <bpt id=\"p1\">[</bpt><ept id=\"p1\">Mobile Services iOS SDK]</ept> and unzip the file.",
      "pos": [
        5215,
        5290
      ]
    },
    {
      "content": "In Xcode, right-click your project and click the <bpt id=\"p1\">**</bpt>Add Files to<ept id=\"p1\">**</ept> option to add the <bpt id=\"p2\">**</bpt>WindowsAzureMessaging.framework<ept id=\"p2\">**</ept> folder to your Xcode project.",
      "pos": [
        5291,
        5440
      ]
    },
    {
      "content": "Select <bpt id=\"p1\">**</bpt>Copy items if needed<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.",
      "pos": [
        5441,
        5497
      ]
    },
    {
      "content": "![][10]",
      "pos": [
        5503,
        5510
      ]
    },
    {
      "content": "Open your AppDelegate.h file add the following import directive:",
      "pos": [
        5515,
        5579
      ]
    },
    {
      "content": "In your AppDelegate.m file, add the following code in the <ph id=\"ph1\">`didFinishLaunchingWithOptions`</ph> method based on your version of iOS.",
      "pos": [
        5650,
        5776
      ]
    },
    {
      "content": "This code registers your device handle with APNs:",
      "pos": [
        5777,
        5826
      ]
    },
    {
      "content": "For iOS 8:",
      "pos": [
        5832,
        5842
      ]
    },
    {
      "content": "For iOS versions prior to 8:",
      "pos": [
        6258,
        6286
      ]
    },
    {
      "content": "In the same file, add the following methods and replace the string literal placeholders with your <bpt id=\"p1\">*</bpt>hub name<ept id=\"p1\">*</ept> and the <bpt id=\"p2\">*</bpt>DefaultListenSharedAccessSignature<ept id=\"p2\">*</ept> that you noted earlier.",
      "pos": [
        6469,
        6646
      ]
    },
    {
      "content": "This code gives the device token to the notification hub so that the notification hub can send notifications:",
      "pos": [
        6647,
        6756
      ]
    },
    {
      "pos": [
        7790,
        7914
      ],
      "content": "In the same file, add the following method to display a <bpt id=\"p1\">**</bpt>UIAlert<ept id=\"p1\">**</ept> if the notification is received while the app is active:"
    },
    {
      "content": "Build and run the app on your device to verify that there are no failures.",
      "pos": [
        8190,
        8264
      ]
    },
    {
      "content": "Send notifications",
      "pos": [
        8269,
        8287
      ]
    },
    {
      "content": "You can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.",
      "pos": [
        8290,
        8456
      ]
    },
    {
      "content": "![][30]",
      "pos": [
        8457,
        8464
      ]
    },
    {
      "content": "![][31]",
      "pos": [
        8616,
        8623
      ]
    },
    {
      "content": "In Xcode, open Main.storyboard and add the following UI components from the object library to allow the user to send push notifications in the app:",
      "pos": [
        8628,
        8775
      ]
    },
    {
      "content": "A label with no label text.",
      "pos": [
        8783,
        8810
      ]
    },
    {
      "content": "It will be used to report errors in sending notifications.",
      "pos": [
        8811,
        8869
      ]
    },
    {
      "content": "The <bpt id=\"p1\">**</bpt>Lines<ept id=\"p1\">**</ept> property should be set to <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> so that it will automatically size constrained to the right and left margins and the top of the view.",
      "pos": [
        8870,
        9017
      ]
    },
    {
      "content": "A text field with <bpt id=\"p1\">**</bpt>Placeholder<ept id=\"p1\">**</ept> text set to <bpt id=\"p2\">**</bpt>Enter Notification Message<ept id=\"p2\">**</ept>.",
      "pos": [
        9024,
        9101
      ]
    },
    {
      "content": "Constrain the field just below the label as shown below.",
      "pos": [
        9102,
        9158
      ]
    },
    {
      "content": "Set the View Controller as the outlet delegate.",
      "pos": [
        9159,
        9206
      ]
    },
    {
      "pos": [
        9213,
        9318
      ],
      "content": "A button titled <bpt id=\"p1\">**</bpt>Send Notification<ept id=\"p1\">**</ept> constrained just below the text field and in the horizontal center."
    },
    {
      "content": "The view should look as follows:",
      "pos": [
        9324,
        9356
      ]
    },
    {
      "content": "![][32]",
      "pos": [
        9362,
        9369
      ]
    },
    {
      "content": "Open your ViewController.h file and add the following <ph id=\"ph1\">`#import`</ph> and <ph id=\"ph2\">`#define`</ph> statements.",
      "pos": [
        9375,
        9464
      ]
    },
    {
      "content": "Replace the placeholder string literal with your actual <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> connection string and <bpt id=\"p2\">*</bpt>hub name<ept id=\"p2\">*</ept>.",
      "pos": [
        9465,
        9589
      ]
    },
    {
      "content": "Add outlets for the label and text field connected your view, and update your <ph id=\"ph1\">`interface`</ph> definition to support <ph id=\"ph2\">`UITextFieldDelegate`</ph> and <ph id=\"ph3\">`NSXMLParserDelegate`</ph>.",
      "pos": [
        9838,
        9998
      ]
    },
    {
      "content": "Add the three property declarations shown below to help support calling the REST API and parsing the response.",
      "pos": [
        9999,
        10109
      ]
    },
    {
      "content": "Your ViewController.h file should look as follows:",
      "pos": [
        10115,
        10165
      ]
    },
    {
      "content": "Open ViewController.m and add the following code to parse your <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> connection string.",
      "pos": [
        10959,
        11075
      ]
    },
    {
      "content": "As mentioned in the <bpt id=\"p1\">[</bpt>REST API reference<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn495627.aspx)</ept>, this parsed information will be used to generate a SaS token for the <bpt id=\"p2\">**</bpt>Authorization<ept id=\"p2\">**</ept> request header.",
      "pos": [
        11076,
        11275
      ]
    },
    {
      "content": "In ViewController.m, update the <ph id=\"ph1\">`viewDidLoad`</ph> method to parse the connection string when the view loads.",
      "pos": [
        12433,
        12537
      ]
    },
    {
      "content": "Also add the utility methods shown below.",
      "pos": [
        12538,
        12579
      ]
    },
    {
      "pos": [
        13291,
        13526
      ],
      "content": "In ViewController.m, add the following code to generate the SaS authorization token that will be provided in the <bpt id=\"p1\">**</bpt>Authorization<ept id=\"p1\">**</ept> header, as mentioned in the <bpt id=\"p2\">[</bpt>REST API Reference<ept id=\"p2\">](http://msdn.microsoft.com/library/azure/dn495627.aspx)</ept>."
    },
    {
      "pos": [
        15647,
        15821
      ],
      "content": "Ctrl+drag from the <bpt id=\"p1\">**</bpt>Send Notification<ept id=\"p1\">**</ept> button to ViewController.m to add an action for the <bpt id=\"p2\">**</bpt>Touch Down<ept id=\"p2\">**</ept> event that executes the REST API call by using the following code."
    },
    {
      "content": "In ViewController.m, add the following delegate method to support closing the keyboard for the text field.",
      "pos": [
        18423,
        18529
      ]
    },
    {
      "content": "Ctrl+drag from the text field to the View Controller icon in the interface designer to set the view controller as the outlet delegate.",
      "pos": [
        18530,
        18664
      ]
    },
    {
      "pos": [
        18882,
        18993
      ],
      "content": "In ViewController.m, add the following delegate methods to support parsing the response by using <ph id=\"ph1\">`NSXMLParser`</ph>."
    },
    {
      "content": "Build the project and verify that there are no errors.",
      "pos": [
        20271,
        20325
      ]
    },
    {
      "pos": [
        20329,
        20442
      ],
      "content": "You can find all the possible notification payloads in the Apple <bpt id=\"p1\">[</bpt><ept id=\"p1\">Local and Push Notification Programming Guide]</ept>."
    },
    {
      "content": "Test your app",
      "pos": [
        20448,
        20461
      ]
    },
    {
      "content": "To test push notifications on iOS, you must deploy the app to a device.",
      "pos": [
        20463,
        20534
      ]
    },
    {
      "content": "You cannot send Apple push notifications by using the iOS Simulator.",
      "pos": [
        20535,
        20603
      ]
    },
    {
      "pos": [
        20608,
        20681
      ],
      "content": "Run the app and verify that registration succeeds, and then press <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>."
    },
    {
      "content": "![][33]",
      "pos": [
        20687,
        20694
      ]
    },
    {
      "content": "Touch inside the text field to enter a notification message.",
      "pos": [
        20699,
        20759
      ]
    },
    {
      "content": "Then press the <bpt id=\"p1\">**</bpt>Send<ept id=\"p1\">**</ept> button on the keyboard or the <bpt id=\"p2\">**</bpt>Send Notification<ept id=\"p2\">**</ept> button in the view to send the notification message.",
      "pos": [
        20760,
        20888
      ]
    },
    {
      "content": "![][34]",
      "pos": [
        20894,
        20901
      ]
    },
    {
      "content": "The notification is sent to all devices that are registered to receive the notification.",
      "pos": [
        20906,
        20994
      ]
    },
    {
      "content": "![][35]",
      "pos": [
        21000,
        21007
      ]
    },
    {
      "content": "If you have any problems or recommendations for improving this tutorial for all readers, please leave us a comment in the Disqus section below.",
      "pos": [
        21009,
        21152
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        21157,
        21167
      ]
    },
    {
      "content": "In this simple example, you broadcasted notifications to all your iOS devices.",
      "pos": [
        21169,
        21247
      ]
    },
    {
      "content": "In order to target specific users, refer to the tutorial <bpt id=\"p1\">[</bpt><ept id=\"p1\">Use Notification Hubs to push notifications to users]</ept>.",
      "pos": [
        21248,
        21360
      ]
    },
    {
      "content": "If you want to segment your users by interest groups, you can read <bpt id=\"p1\">[</bpt><ept id=\"p1\">Use Notification Hubs to send breaking news]</ept>.",
      "pos": [
        21361,
        21474
      ]
    },
    {
      "content": "Learn more about how to use Notification Hubs in <bpt id=\"p1\">[</bpt><ept id=\"p1\">Notification Hubs Guidance]</ept>.",
      "pos": [
        21475,
        21553
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Get started with Azure Notification Hubs | Microsoft Azure\"\n    description=\"In this tutorial, you learn how to use Azure Notification Hubs to push notifications to an iOS application.\"\n    services=\"notification-hubs\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.workload=\"mobile\"\n    ms.tgt_pltfrm=\"mobile-ios\"\n    ms.devlang=\"objective-c\"\n    ms.topic=\"hero-article\" \n    ms.date=\"09/02/2015\"\n    ms.author=\"wesmc\"/>\n\n# Get started with Notification Hubs\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\n\n##Overview\n\nThis tutorial shows you how to use Azure Notification Hubs to send push notifications to an iOS application. You'll create a blank iOS app that receives push notifications by using the Apple Push Notification service (APNs). When you're finished, you'll be able to use your notification hub to broadcast push notifications to all the devices running your app.\n\nThis tutorial demonstrates the simple broadcast scenario in using Notification Hubs.\n\n##Prerequisites\n\nThis tutorial requires the following:\n\n+ [Mobile Services iOS SDK]\n+ [Xcode 6][Install Xcode]\n+ An iOS 8 (or later version) capable device\n+ iOS Developer Program membership\n\n   > [AZURE.NOTE] Because of configuration requirements for push notifications, you must deploy and test push notifications on an iOS capable device (iPhone or iPad) instead of the iOS Simulator.\n\nCompleting this tutorial is a prerequisite for all other Notification Hubs tutorials for iOS apps.\n\n> [AZURE.NOTE] To complete this tutorial, you must have an active Azure account. If you don't have an account, you can create a free trial account in just a couple of minutes. For details, see [Azure Free Trial](http://azure.microsoft.com/pricing/free-trial/?WT.mc_id=A0E0E5C02&amp;returnurl=http%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fdocumentation%2Farticles%2Fnotification-hubs-ios-get-started).\n\n[AZURE.INCLUDE [Notification Hubs Enable Apple Push Notifications](../../includes/notification-hubs-enable-apple-push-notifications.md)]\n\n##Configure your notification hub\n\nThis section walks you through creating and configuring a new notification hub by using the push certificate that you created. If you want to use a notification hub that you have already created, you can skip steps 2â€“5.\n\n\n1. In Keychain Access, right-click the new push certificate that you created in the **Certificates** category. Click **Export**, name the file, select the **.p12** format, and then click **Save**.\n\n    ![][1]\n\n    Make a note of the file name and location of the exported certificate.\n\n    >[AZURE.NOTE] This tutorial creates a QuickStart.p12 file. Your file name and location might be different.\n\n2. Sign in to the [Azure portal], and click **+NEW** at the bottom of the screen.\n\n3. Click **App Services**, click **Service Bus**, click **Notification Hub**, and then click **Quick Create**.\n\n    ![][2]\n\n4. Type a name for your notification hub, select your desired region, and then click **Create a new Notification Hub**.\n\n    ![][3]\n\n5. Click the namespace that you just created (usually ***notification hub name*-ns**) to open its dashboard.\n\n    ![][4]\n\n6. Click the **Notification Hubs** tab at the top, and then click the notification hub that you just created.\n\n    ![][5]\n\n7. Click the **Configure** tab at the top, and then click the **Upload** button in the Apple notification settings to upload the certificate thumbprint. Then select the **.p12** certificate that you exported earlier, and the password for the certificate. Make sure to select whether you want to use the **Production** (if you want to send push notifications to users who purchased your app from the store) or the **Sandbox** (during development) push service.\n\n    ![][6]\n\n8. Click the **Dashboard** tab at the top, and then click **View Connection String**. Take note of the two connection strings.\n\n    ![][7]\n\nYour notification hub is now configured to work with APNs, and you have the connection strings to register your app and send notifications.\n\n##Connect your app to the notification hub\n\n1. In Xcode, create a new iOS project and select the **Single View Application** template.\n\n    ![][8]\n\n2. When setting the options for your new project, make sure to use the same **Product Name** and **Organization Identifier** that you used when you previously set the bundle ID on the Apple Developer portal.\n\n    ![][11]\n\n3. Under **Targets**, click your project name, click the **Build Settings** tab and expand **Code Signing Identity**, and then under **Debug**, set your code-signing identity. Toggle **Levels** from **Basic** to **All**, and set **Provisioning Profile** to the provisioning profile that you created previously.\n\n    If you don't see the new provisioning profile that you created in Xcode, try refreshing the profiles for your signing identity. Click **Xcode** on the menu bar, click **Preferences**, click the **Account** tab, click the **View Details** button, click your signing identity, and then click the refresh button in the bottom-right corner.\n\n    ![][9]\n\n4. Download version 1.2.4 of the [Mobile Services iOS SDK] and unzip the file. In Xcode, right-click your project and click the **Add Files to** option to add the **WindowsAzureMessaging.framework** folder to your Xcode project. Select **Copy items if needed**, and then click **Add**.\n\n    ![][10]\n\n5. Open your AppDelegate.h file add the following import directive:\n\n         #import <WindowsAzureMessaging/WindowsAzureMessaging.h>\n\n6. In your AppDelegate.m file, add the following code in the `didFinishLaunchingWithOptions` method based on your version of iOS. This code registers your device handle with APNs:\n\n    For iOS 8:\n\n        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound |\n                                                UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n\n    For iOS versions prior to 8:\n\n         [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\n\n\n7. In the same file, add the following methods and replace the string literal placeholders with your *hub name* and the *DefaultListenSharedAccessSignature* that you noted earlier. This code gives the device token to the notification hub so that the notification hub can send notifications:\n\n        - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *) deviceToken {\n            SBNotificationHub* hub = [[SBNotificationHub alloc] initWithConnectionString:@\"<Enter your listen connection string>\"\n                                        notificationHubPath:@\"<Enter your hub name>\"];\n\n            [hub registerNativeWithDeviceToken:deviceToken tags:nil completion:^(NSError* error) {\n                if (error != nil) {\n                    NSLog(@\"Error registering for notifications: %@\", error);\n                }\n                else {\n                    [self MessageBox:@\"Registration Status\" message:@\"Registered\"];\n                }\n            }];\n        }\n\n        -(void)MessageBox:(NSString *)title message:(NSString *)messageText\n        {\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:messageText delegate:self\n                cancelButtonTitle:@\"OK\" otherButtonTitles: nil];\n            [alert show];\n        }\n\n\n8. In the same file, add the following method to display a **UIAlert** if the notification is received while the app is active:\n\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification: (NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            [self MessageBox:@\"Notification\" message:[[userInfo objectForKey:@\"aps\"] valueForKey:@\"alert\"]];\n        }\n\n8. Build and run the app on your device to verify that there are no failures.\n\n## Send notifications\n\n\nYou can test receiving notifications in your app by sending notifications in the Azure portal via the debug tab on the notification hub, as shown in the screen below.\n![][30]\n\n[AZURE.INCLUDE [notification-hubs-sending-notifications-from-the-portal](../../includes/notification-hubs-sending-notifications-from-the-portal.md)]\n\n![][31]\n\n1. In Xcode, open Main.storyboard and add the following UI components from the object library to allow the user to send push notifications in the app:\n\n    - A label with no label text. It will be used to report errors in sending notifications. The **Lines** property should be set to **0** so that it will automatically size constrained to the right and left margins and the top of the view.\n    - A text field with **Placeholder** text set to **Enter Notification Message**. Constrain the field just below the label as shown below. Set the View Controller as the outlet delegate.\n    - A button titled **Send Notification** constrained just below the text field and in the horizontal center.\n\n    The view should look as follows:\n\n    ![][32]\n\n\n2. Open your ViewController.h file and add the following `#import` and `#define` statements. Replace the placeholder string literal with your actual *DefaultFullSharedAccessSignature* connection string and *hub name*.\n\n\n        #import <CommonCrypto/CommonHMAC.h>\n\n        #define API_VERSION @\"?api-version=2015-01\"\n        #define HUBFULLACCESS @\"<Enter Your DefaultFullSharedAccess Connection string>\"\n        #define HUBNAME @\"<Enter the name of your hub>\"\n\n\n3. Add outlets for the label and text field connected your view, and update your `interface` definition to support `UITextFieldDelegate` and `NSXMLParserDelegate`. Add the three property declarations shown below to help support calling the REST API and parsing the response.\n\n    Your ViewController.h file should look as follows:\n\n        #import <UIKit/UIKit.h>\n        #import <CommonCrypto/CommonHMAC.h>\n\n        #define API_VERSION @\"?api-version=2015-01\"\n        #define HUBFULLACCESS @\"<Enter Your DefaultFullSharedAccess Connection string>\"\n        #define HUBNAME @\"<Enter the name of your hub>\"\n\n        @interface ViewController : UIViewController <UITextFieldDelegate, NSXMLParserDelegate>\n        {\n            NSXMLParser *xmlParser;\n        }\n\n        // Make sure these outlets are connected to your UI by ctrl+dragging\n        @property (weak, nonatomic) IBOutlet UITextField *notificationMessage;\n        @property (weak, nonatomic) IBOutlet UILabel *sendResults;\n\n        @property (copy, nonatomic) NSString *statusResult;\n        @property (copy, nonatomic) NSString *currentElement;\n\n        @end\n\n\n4. Open ViewController.m and add the following code to parse your *DefaultFullSharedAccessSignature* connection string. As mentioned in the [REST API reference](http://msdn.microsoft.com/library/azure/dn495627.aspx), this parsed information will be used to generate a SaS token for the **Authorization** request header.\n\n        NSString *HubEndpoint;\n        NSString *HubSasKeyName;\n        NSString *HubSasKeyValue;\n\n        -(void)ParseConnectionString\n        {\n            NSArray *parts = [HUBFULLACCESS componentsSeparatedByString:@\";\"];\n            NSString *part;\n\n            if ([parts count] != 3)\n            {\n                NSException* parseException = [NSException exceptionWithName:@\"ConnectionStringParseException\"\n                    reason:@\"Invalid full shared access connection string\" userInfo:nil];\n\n                @throw parseException;\n            }\n\n            for (part in parts)\n            {\n                if ([part hasPrefix:@\"Endpoint\"])\n                {\n                    HubEndpoint = [NSString stringWithFormat:@\"https%@\",[part substringFromIndex:11]];\n                }\n                else if ([part hasPrefix:@\"SharedAccessKeyName\"])\n                {\n                    HubSasKeyName = [part substringFromIndex:20];\n                }\n                else if ([part hasPrefix:@\"SharedAccessKey\"])\n                {\n                    HubSasKeyValue = [part substringFromIndex:16];\n                }\n            }\n        }\n\n5. In ViewController.m, update the `viewDidLoad` method to parse the connection string when the view loads. Also add the utility methods shown below.  \n\n\n        - (void)viewDidLoad\n        {\n            [super viewDidLoad];\n            [self ParseConnectionString];\n        }\n\n        -(NSString *)CF_URLEncodedString:(NSString *)inputString\n        {\n           return (__bridge NSString *)CFURLCreateStringByAddingPercentEscapes(NULL, (CFStringRef)inputString,\n                NULL, (CFStringRef)@\"!*'();:@&=+$,/?%#[]\", kCFStringEncodingUTF8);\n        }\n\n        -(void)MessageBox:(NSString *)title message:(NSString *)messageText\n        {\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:messageText delegate:self\n                cancelButtonTitle:@\"OK\" otherButtonTitles: nil];\n            [alert show];\n        }\n\n\n\n\n\n6. In ViewController.m, add the following code to generate the SaS authorization token that will be provided in the **Authorization** header, as mentioned in the [REST API Reference](http://msdn.microsoft.com/library/azure/dn495627.aspx).\n\n        -(NSString*) generateSasToken:(NSString*)uri\n        {\n            NSString *targetUri;\n            NSString* utf8LowercasedUri = NULL;\n            NSString *signature = NULL;\n            NSString *token = NULL;\n\n            @try\n            {\n                // Add expiration\n                uri = [uri lowercaseString];\n                utf8LowercasedUri = [self CF_URLEncodedString:uri];\n                targetUri = [utf8LowercasedUri lowercaseString];\n                NSTimeInterval expiresOnDate = [[NSDate date] timeIntervalSince1970];\n                int expiresInMins = 60; // 1 hour\n                expiresOnDate += expiresInMins * 60;\n                UInt64 expires = trunc(expiresOnDate);\n                NSString* toSign = [NSString stringWithFormat:@\"%@\\n%qu\", targetUri, expires];\n\n                // Get an hmac_sha1 Mac instance and initialize with the signing key\n                const char *cKey  = [HubSasKeyValue cStringUsingEncoding:NSUTF8StringEncoding];\n                const char *cData = [toSign cStringUsingEncoding:NSUTF8StringEncoding];\n                unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];\n                CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);\n                NSData *rawHmac = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\n                signature = [self CF_URLEncodedString:[rawHmac base64EncodedStringWithOptions:0]];\n\n                // Construct authorization token string\n                token = [NSString stringWithFormat:@\"SharedAccessSignature sr=%@&sig=%@&se=%qu&skn=%@\",\n                    targetUri, signature, expires, HubSasKeyName];\n            }\n            @catch (NSException *exception)\n            {\n                [self MessageBox:@\"Exception Generating SaS Token\" message:[exception reason]];\n            }\n            @finally\n            {\n                if (utf8LowercasedUri != NULL)\n                    CFRelease((CFStringRef)utf8LowercasedUri);\n                if (signature != NULL)\n                CFRelease((CFStringRef)signature);\n            }\n\n            return token;\n        }\n\n\n7. Ctrl+drag from the **Send Notification** button to ViewController.m to add an action for the **Touch Down** event that executes the REST API call by using the following code.\n\n        - (IBAction)SendNotificationMessage:(id)sender\n        {\n            self.sendResults.text = @\"\";\n            [self SendNotificationRESTAPI];\n        }\n\n        - (void)SendNotificationRESTAPI\n        {\n            NSURLSession* session = [NSURLSession\n                             sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\n                             delegate:nil delegateQueue:nil];\n\n            // Apple Notification format of the notification message\n            NSString *json = [NSString stringWithFormat:@\"{\\\"aps\\\":{\\\"alert\\\":\\\"%@\\\"}}\",\n                                self.notificationMessage.text];\n\n            // Construct the message's REST endpoint\n            NSURL* url = [NSURL URLWithString:[NSString stringWithFormat:@\"%@%@/messages/%@\", HubEndpoint,\n                                                HUBNAME, API_VERSION]];\n\n            // Generate the token to be used in the authorization header\n            NSString* authorizationToken = [self generateSasToken:[url absoluteString]];\n\n            //Create the request to add the APNs notification message to the hub\n            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n            [request setHTTPMethod:@\"POST\"];\n            [request setValue:@\"application/json;charset=utf-8\" forHTTPHeaderField:@\"Content-Type\"];\n\n            // Signify Apple notification format\n            [request setValue:@\"apple\" forHTTPHeaderField:@\"ServiceBusNotification-Format\"];\n\n            //Authenticate the notification message POST request with the SaS token\n            [request setValue:authorizationToken forHTTPHeaderField:@\"Authorization\"];\n\n            //Add the notification message body\n            [request setHTTPBody:[json dataUsingEncoding:NSUTF8StringEncoding]];\n\n            // Send the REST request\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request\n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (error || httpResponse.statusCode != 200)\n                {\n                    NSLog(@\"\\nError status: %d\\nError: %@\", httpResponse.statusCode, error);\n                }\n                if (data != NULL)\n                {\n                    xmlParser = [[NSXMLParser alloc] initWithData:data];\n                    [xmlParser setDelegate:self];\n                    [xmlParser parse];\n                }\n            }];\n            [dataTask resume];\n        }\n\n\n8. In ViewController.m, add the following delegate method to support closing the keyboard for the text field. Ctrl+drag from the text field to the View Controller icon in the interface designer to set the view controller as the outlet delegate.\n\n        //===[ Implement UITextFieldDelegate methods ]===\n\n        -(BOOL)textFieldShouldReturn:(UITextField *)textField\n        {\n            [textField resignFirstResponder];\n            return YES;\n        }\n\n\n9. In ViewController.m, add the following delegate methods to support parsing the response by using `NSXMLParser`.\n\n        //===[ Implement NSXMLParserDelegate methods ]===\n\n        -(void)parserDidStartDocument:(NSXMLParser *)parser\n        {\n            self.statusResult = @\"\";\n        }\n\n        -(void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName\n            namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName\n            attributes:(NSDictionary *)attributeDict\n        {\n            NSString * element = [elementName lowercaseString];\n            NSLog(@\"*** New element parsed : %@ ***\",element);\n\n            if ([element isEqualToString:@\"code\"] | [element isEqualToString:@\"detail\"])\n            {\n                self.currentElement = element;\n            }\n        }\n\n        -(void) parser:(NSXMLParser *)parser foundCharacters:(NSString *)parsedString\n        {\n            self.statusResult = [self.statusResult stringByAppendingString:\n                [NSString stringWithFormat:@\"%@ : %@\\n\", self.currentElement, parsedString]];\n        }\n\n        -(void)parserDidEndDocument:(NSXMLParser *)parser\n        {\n            // Set the status label text on the UI thread\n            dispatch_async(dispatch_get_main_queue(),\n            ^{\n                [self.sendResults setText:self.statusResult];\n            });\n        }\n\n\n\n10. Build the project and verify that there are no errors.\n\n\n\nYou can find all the possible notification payloads in the Apple [Local and Push Notification Programming Guide].\n\n\n\n##Test your app\n\nTo test push notifications on iOS, you must deploy the app to a device. You cannot send Apple push notifications by using the iOS Simulator.\n\n1. Run the app and verify that registration succeeds, and then press **OK**.\n\n    ![][33]\n\n2. Touch inside the text field to enter a notification message. Then press the **Send** button on the keyboard or the **Send Notification** button in the view to send the notification message.\n\n    ![][34]\n\n3. The notification is sent to all devices that are registered to receive the notification.\n\n    ![][35]\n\nIf you have any problems or recommendations for improving this tutorial for all readers, please leave us a comment in the Disqus section below.\n\n\n##Next steps\n\nIn this simple example, you broadcasted notifications to all your iOS devices. In order to target specific users, refer to the tutorial [Use Notification Hubs to push notifications to users]. If you want to segment your users by interest groups, you can read [Use Notification Hubs to send breaking news]. Learn more about how to use Notification Hubs in [Notification Hubs Guidance].\n\n\n\n<!-- Images. -->\n\n[1]: ./media/notification-hubs-ios-get-started/notification-hubs-export-cert-p12.png\n[2]: ./media/notification-hubs-ios-get-started/notification-hubs-create-from-portal.png\n[3]: ./media/notification-hubs-ios-get-started/notification-hubs-create-from-portal2.png\n[4]: ./media/notification-hubs-ios-get-started/notification-hubs-select-from-portal.png\n[5]: ./media/notification-hubs-ios-get-started/notification-hubs-select-from-portal2.png\n[6]: ./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png\n[7]: ./media/notification-hubs-ios-get-started/notification-hubs-connection-strings.png\n[8]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app.png\n[9]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app2.png\n[10]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app3.png\n[11]: ./media/notification-hubs-ios-get-started/notification-hubs-xcode-product-name.png\n\n[30]: ./media/notification-hubs-ios-get-started/notification-hubs-debug-hub-ios.png\n\n[31]: ./media/notification-hubs-ios-get-started/notification-hubs-ios-ui.png\n[32]: ./media/notification-hubs-ios-get-started/notification-hubs-storyboard-view.png\n[33]: ./media/notification-hubs-ios-get-started/notification-hubs-test1.png\n[34]: ./media/notification-hubs-ios-get-started/notification-hubs-test2.png\n[35]: ./media/notification-hubs-ios-get-started/notification-hubs-test3.png\n\n\n\n<!-- URLs. -->\n[Mobile Services iOS SDK]: http://go.microsoft.com/fwLink/?LinkID=266533\n[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\n[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\n[Live SDK for Windows]: http://go.microsoft.com/fwlink/p/?LinkId=262253\n\n[Get started with Mobile Services]: /develop/mobile/tutorials/get-started-ios\n[Azure portal]: https://manage.windowsazure.com/\n[Notification Hubs Guidance]: http://msdn.microsoft.com/library/jj927170.aspx\n[Install Xcode]: https://go.microsoft.com/fwLink/p/?LinkID=266532\n[iOS Provisioning Portal]: http://go.microsoft.com/fwlink/p/?LinkId=272456\n\n[Get started with push notifications in Mobile Services]: ../mobile-services-javascript-backend-ios-get-started-push.md\n[Use Notification Hubs to push notifications to users]: notification-hubs-aspnet-backend-ios-notify-users.md\n[Use Notification Hubs to send breaking news]: notification-hubs-ios-send-breaking-news.md\n\n[Local and Push Notification Programming Guide]: http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1\n"
}