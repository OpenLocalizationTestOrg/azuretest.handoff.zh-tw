{
  "nodes": [
    {
      "content": "Use Logic App features",
      "pos": [
        28,
        50
      ]
    },
    {
      "content": "Learn how to use the advanced features of logic apps.",
      "pos": [
        70,
        123
      ]
    },
    {
      "content": "Use Logic Apps features",
      "pos": [
        459,
        482
      ]
    },
    {
      "content": "In the [previous topic][Create a new logic app], you created your first logic app.",
      "pos": [
        484,
        566
      ]
    },
    {
      "content": "Now we will show you how to build a more complete process using App Services Logic Apps.",
      "pos": [
        567,
        655
      ]
    },
    {
      "content": "This topic introduces the following new Logic Apps concepts:",
      "pos": [
        656,
        716
      ]
    },
    {
      "content": "Conditional logic, which executes an action only when a certain condition is met.",
      "pos": [
        720,
        801
      ]
    },
    {
      "content": "Repeating actions.",
      "pos": [
        804,
        822
      ]
    },
    {
      "content": "Code view to edit an existing logic app.",
      "pos": [
        825,
        865
      ]
    },
    {
      "content": "Options for starting a workflow.",
      "pos": [
        868,
        900
      ]
    },
    {
      "content": "Before you complete this topic, you should complete the steps in [Create a new logic app].",
      "pos": [
        902,
        992
      ]
    },
    {
      "content": "In the [Azure portal], browse to your logic app and click <bpt id=\"p1\">**</bpt>Triggers and Actions<ept id=\"p1\">**</ept> in the summary to edit the logic app definition.",
      "pos": [
        993,
        1124
      ]
    },
    {
      "content": "Reference material",
      "pos": [
        1129,
        1147
      ]
    },
    {
      "content": "You may find the follow documents useful:",
      "pos": [
        1149,
        1190
      ]
    },
    {
      "pos": [
        1194,
        1330
      ],
      "content": "<bpt id=\"p1\">[</bpt>Management and runtime REST APIs<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn948513.aspx)</ept> - including how to invoke Logic apps directly"
    },
    {
      "pos": [
        1333,
        1471
      ],
      "content": "<bpt id=\"p1\">[</bpt>Language reference<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn948512.aspx)</ept> - a comprehensive list of all supported functions/expressions"
    },
    {
      "pos": [
        1474,
        1614
      ],
      "content": "<bpt id=\"p1\">[</bpt>Trigger and action types<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/dn948511.aspx)</ept> - the different types of actions and the inputs they take"
    },
    {
      "pos": [
        1617,
        1745
      ],
      "content": "<bpt id=\"p1\">[</bpt>Overview of App Service<ept id=\"p1\">](app-service-value-prop-what-is.md)</ept> - description of what components to choose when to build a solution"
    },
    {
      "content": "Adding conditional logic and a repeat",
      "pos": [
        1750,
        1787
      ]
    },
    {
      "content": "Although the original flow works, there are some areas that could be improved.",
      "pos": [
        1789,
        1867
      ]
    },
    {
      "content": "First, the action only sends you the top tweet returned.",
      "pos": [
        1868,
        1924
      ]
    },
    {
      "content": "Logically, you would want to receive all of the tweets with the keyword.",
      "pos": [
        1925,
        1997
      ]
    },
    {
      "content": "To repeat an action for a list of items, such as the returned tweets, you must use the <ph id=\"ph1\">`repeat`</ph> property.",
      "pos": [
        1998,
        2103
      ]
    },
    {
      "content": "Repeating",
      "pos": [
        2109,
        2118
      ]
    },
    {
      "content": "Repeat takes a list of items and executes the action for each item in that list.",
      "pos": [
        2119,
        2199
      ]
    },
    {
      "content": "The following steps update the existing action to use repeats, which makes more sense for a list of tweets.",
      "pos": [
        2200,
        2307
      ]
    },
    {
      "pos": [
        2312,
        2403
      ],
      "content": "Return to the workflow you created and click the <bpt id=\"p1\">**</bpt>Definition<ept id=\"p1\">**</ept> link in the <bpt id=\"p2\">**</bpt>Essentials<ept id=\"p2\">**</ept>."
    },
    {
      "pos": [
        2409,
        2473
      ],
      "content": "To edit the <bpt id=\"p1\">**</bpt>Dropbox connector<ept id=\"p1\">**</ept> action, click the pencil icon."
    },
    {
      "pos": [
        2478,
        2536
      ],
      "content": "Click on the gear icon, and select <bpt id=\"p1\">**</bpt>Repeat over a list<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Next to the <bpt id=\"p1\">**</bpt>Repeat<ept id=\"p1\">**</ept> box click the <ph id=\"ph1\">`...`</ph> and select <bpt id=\"p2\">**</bpt>Body<ept id=\"p2\">**</ept>.",
      "pos": [
        2543,
        2606
      ]
    },
    {
      "content": "This will input:",
      "pos": [
        2607,
        2623
      ]
    },
    {
      "content": "Into the text box.",
      "pos": [
        2664,
        2682
      ]
    },
    {
      "content": "This function outputs a list of tweets.",
      "pos": [
        2683,
        2722
      ]
    },
    {
      "content": "Select all of the text in the <bpt id=\"p1\">**</bpt>Content<ept id=\"p1\">**</ept> text box and delete it.",
      "pos": [
        2728,
        2793
      ]
    },
    {
      "content": "Then, click the <ph id=\"ph1\">`...`</ph> and select <bpt id=\"p1\">**</bpt>Tweet Text<ept id=\"p1\">**</ept>.",
      "pos": [
        2794,
        2842
      ]
    },
    {
      "content": "This will insert the <bpt id=\"p1\">**</bpt>repeatItem()<ept id=\"p1\">**</ept> function, which returns each element in the list.",
      "pos": [
        2843,
        2930
      ]
    },
    {
      "content": "Finally, note that the outputs of repeating actions are special.",
      "pos": [
        2933,
        2997
      ]
    },
    {
      "content": "If you wanted to reference the results of the Dropbox operation, for example, you could <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> do the normal <ph id=\"ph1\">`@actions('dropboxconnector').outputs.body`</ph>, you would instead do: <ph id=\"ph2\">`@actions('dropboxconnector').outputs.repeatItems`</ph>.",
      "pos": [
        2998,
        3224
      ]
    },
    {
      "content": "This returns a list of all of the times that the operation ran, along with the outputs of each.",
      "pos": [
        3225,
        3320
      ]
    },
    {
      "content": "For example, <ph id=\"ph1\">`@first(actions('dropboxconnector').outputs.repeatItems).outputs.body.FilePath`</ph> will return the path of the first file uploaded.",
      "pos": [
        3321,
        3462
      ]
    },
    {
      "content": "Conditional",
      "pos": [
        3468,
        3479
      ]
    },
    {
      "content": "This logic app still results in a lot of files being uploaded to Dropbox.",
      "pos": [
        3480,
        3553
      ]
    },
    {
      "content": "The following steps add additional logic to make sure that you only receive a file when the tweet has a certain number of retweets.",
      "pos": [
        3554,
        3685
      ]
    },
    {
      "pos": [
        3691,
        3777
      ],
      "content": "Click the gear icon at the top of the action and select <bpt id=\"p1\">**</bpt>Add a condition to be met<ept id=\"p1\">**</ept>."
    },
    {
      "content": "In the text box, type the following:",
      "pos": [
        3782,
        3818
      ]
    },
    {
      "content": "The function <bpt id=\"p1\">**</bpt>greater<ept id=\"p1\">**</ept> compares two values and only allows the action to be executed when the first value is greater than the second value.",
      "pos": [
        3878,
        4019
      ]
    },
    {
      "content": "You access a given property as a dot (.) followed by the property name, such as <ph id=\"ph1\">`.Retweet_Count`</ph> above.",
      "pos": [
        4020,
        4123
      ]
    },
    {
      "content": "Click the check mark to save the Dropbox action.",
      "pos": [
        4129,
        4177
      ]
    },
    {
      "content": "Using the code view to edit a Logic App",
      "pos": [
        4182,
        4221
      ]
    },
    {
      "content": "In addition to the designer, you can directly edit the code that defines a logic app, as follows.",
      "pos": [
        4223,
        4320
      ]
    },
    {
      "pos": [
        4326,
        4379
      ],
      "content": "Click on the <bpt id=\"p1\">**</bpt>Code view<ept id=\"p1\">**</ept> button in the command bar."
    },
    {
      "content": "This opens a full editor that shows the definition you just edited.",
      "pos": [
        4386,
        4453
      ]
    },
    {
      "content": "Code view",
      "pos": [
        4461,
        4470
      ]
    },
    {
      "content": "By using the text editor, you can copy and paste any number of actions within the same logic app or between logic apps.",
      "pos": [
        4540,
        4659
      ]
    },
    {
      "content": "You can also easily add or remove entire sections from the definition, and you can also share definitions with others.",
      "pos": [
        4660,
        4778
      ]
    },
    {
      "pos": [
        4783,
        4847
      ],
      "content": "After you make your changes in code view, simply click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>."
    },
    {
      "content": "Parameters",
      "pos": [
        4854,
        4864
      ]
    },
    {
      "content": "There are some capabilities of Logic Apps that can only be used in the code view.",
      "pos": [
        4865,
        4946
      ]
    },
    {
      "content": "One example of these is parameters.",
      "pos": [
        4947,
        4982
      ]
    },
    {
      "content": "Parameters make it easy to re-use values throughout your logic app.",
      "pos": [
        4983,
        5050
      ]
    },
    {
      "content": "For example, if you have an email address that you want use in several actions, you should define it as a parameter.",
      "pos": [
        5051,
        5167
      ]
    },
    {
      "content": "The following updates your existing logic app to use parameters for the query term.",
      "pos": [
        5169,
        5252
      ]
    },
    {
      "pos": [
        5257,
        5349
      ],
      "content": "In the code view, locate the <ph id=\"ph1\">`parameters : {}`</ph> object and insert the following topic object:"
    },
    {
      "pos": [
        5466,
        5737
      ],
      "content": "Scroll to the `twitterconnector` action, locate the query value and replace it with `#@{parameters('topic')}`.\n You could also use the  **concat** function to join together two or more strings, for example: `@concat('#',parameters('topic'))` is identical to the above.",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "Scroll to the <ph id=\"ph1\">`twitterconnector`</ph> action, locate the query value and replace it with <ph id=\"ph2\">`#@{parameters('topic')}`</ph>.",
          "pos": [
            0,
            110
          ]
        },
        {
          "content": "You could also use the  <bpt id=\"p1\">**</bpt>concat<ept id=\"p1\">**</ept> function to join together two or more strings, for example: <ph id=\"ph1\">`@concat('#',parameters('topic'))`</ph> is identical to the above.",
          "pos": [
            112,
            268
          ]
        }
      ]
    },
    {
      "pos": [
        5744,
        5829
      ],
      "content": "Finally, go to the <ph id=\"ph1\">`dropboxconnector`</ph> action and add the topic parameter, as follows:"
    },
    {
      "content": "Parameters are a good way to pull out values that you are likely to change a lot.",
      "pos": [
        5899,
        5980
      ]
    },
    {
      "content": "They are especially useful when you need to override parameters in different environments.",
      "pos": [
        5981,
        6071
      ]
    },
    {
      "content": "For more information on how to override parameters based on environment, see our <bpt id=\"p1\">[</bpt>REST API documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=525617&amp;clcid=0x409)</ept>.",
      "pos": [
        6072,
        6237
      ]
    },
    {
      "pos": [
        6239,
        6395
      ],
      "content": "Now, when you click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>, every hour you will get any new tweets that have more than 5 retweets delivered to a folder called <bpt id=\"p2\">**</bpt>tweets<ept id=\"p2\">**</ept> in your Dropbox."
    },
    {
      "pos": [
        6397,
        6516
      ],
      "content": "To learn more about Logic App definitions, see <bpt id=\"p1\">[</bpt>author Logic App definitions<ept id=\"p1\">](app-service-logic-author-definitions.md)</ept>."
    },
    {
      "content": "Starting a logic app workflow",
      "pos": [
        6521,
        6550
      ]
    },
    {
      "content": "There are several different options for starting the workflow defined in you logic app.",
      "pos": [
        6551,
        6638
      ]
    },
    {
      "content": "A workflow can always be started on-demand in the [Azure portal].",
      "pos": [
        6639,
        6704
      ]
    },
    {
      "content": "Recurrence triggers",
      "pos": [
        6710,
        6729
      ]
    },
    {
      "content": "A recurrence trigger run at an interval that you specify.",
      "pos": [
        6730,
        6787
      ]
    },
    {
      "content": "When the trigger has conditional logic, the trigger determines whether or not the workflow needs to run.",
      "pos": [
        6788,
        6892
      ]
    },
    {
      "content": "A trigger indicates it should run by returning a <ph id=\"ph1\">`200`</ph> status code.",
      "pos": [
        6893,
        6960
      ]
    },
    {
      "content": "When is does not need to run, it returns <ph id=\"ph1\">`202`</ph> status code.",
      "pos": [
        6961,
        7020
      ]
    },
    {
      "content": "Callback using REST APIs",
      "pos": [
        7026,
        7050
      ]
    },
    {
      "content": "Services can call a logic app endpoint to start a workflow.",
      "pos": [
        7051,
        7110
      ]
    },
    {
      "content": "You can find the endpoint to access by navigating to the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> blade from the <bpt id=\"p2\">**</bpt>Settings<ept id=\"p2\">**</ept> command bar button in your logic app.",
      "pos": [
        7111,
        7248
      ]
    },
    {
      "content": "You can use this callback to invoke a logic app from inside your custom application.",
      "pos": [
        7251,
        7335
      ]
    },
    {
      "content": "You need to use <bpt id=\"p1\">**</bpt>Basic<ept id=\"p1\">**</ept> authentication.",
      "pos": [
        7336,
        7377
      ]
    },
    {
      "content": "The username of <ph id=\"ph1\">`default`</ph> is created for you, and the password is the <bpt id=\"p1\">**</bpt>Primary Access Key<ept id=\"p1\">**</ept> field on the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> blade.",
      "pos": [
        7378,
        7505
      ]
    },
    {
      "content": "For example:",
      "pos": [
        7506,
        7518
      ]
    },
    {
      "content": "You can pass outputs to the workflow and reference them in the workflow.",
      "pos": [
        7826,
        7898
      ]
    },
    {
      "content": "For example, with the above trigger, if you include <ph id=\"ph1\">`@triggers().outputs.property`</ph> you will get <ph id=\"ph2\">`value`</ph>.",
      "pos": [
        7899,
        8003
      ]
    },
    {
      "pos": [
        8005,
        8115
      ],
      "content": "For more information, see <bpt id=\"p1\">[</bpt>the REST documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=525617&amp;clcid=0x409)</ept>."
    },
    {
      "content": "Manual execution",
      "pos": [
        8122,
        8138
      ]
    },
    {
      "content": "You can define a logic app that does not have a trigger.",
      "pos": [
        8139,
        8195
      ]
    },
    {
      "content": "In this case the workflow must be started on-demand.",
      "pos": [
        8196,
        8248
      ]
    },
    {
      "content": "This kind of logic app is best suited for a process that only needs to run intermittently.",
      "pos": [
        8249,
        8339
      ]
    },
    {
      "content": "To create a logic app without a trigger, check the <bpt id=\"p1\">**</bpt>Run this logic manually<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Start logic<ept id=\"p2\">**</ept> box in the designer.",
      "pos": [
        8340,
        8462
      ]
    },
    {
      "pos": [
        8465,
        8543
      ],
      "content": "To start logic app on-demand, click the <bpt id=\"p1\">**</bpt>Run now<ept id=\"p1\">**</ept> button on the command bar."
    },
    {
      "content": "[Cre",
      "pos": [
        8568,
        8572
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Use Logic App features\" \n    description=\"Learn how to use the advanced features of logic apps.\" \n    authors=\"stepsic-microsoft-com\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"app-service\\logic\" \n    documentationCenter=\"\"/>\n\n<tags\n    ms.service=\"app-service-logic\"\n    ms.workload=\"integration\"\n    ms.tgt_pltfrm=\"na\"\n    ms.devlang=\"na\"\n    ms.topic=\"article\"\n    ms.date=\"08/19/2015\"\n    ms.author=\"stepsic\"/>\n    \n# Use Logic Apps features\n\nIn the [previous topic][Create a new logic app], you created your first logic app. Now we will show you how to build a more complete process using App Services Logic Apps. This topic introduces the following new Logic Apps concepts:\n\n- Conditional logic, which executes an action only when a certain condition is met.\n- Repeating actions.\n- Code view to edit an existing logic app.\n- Options for starting a workflow.\n\nBefore you complete this topic, you should complete the steps in [Create a new logic app]. In the [Azure portal], browse to your logic app and click **Triggers and Actions** in the summary to edit the logic app definition.\n\n## Reference material\n\nYou may find the follow documents useful:\n\n- [Management and runtime REST APIs](https://msdn.microsoft.com/library/azure/dn948513.aspx) - including how to invoke Logic apps directly\n- [Language reference](https://msdn.microsoft.com/library/azure/dn948512.aspx) - a comprehensive list of all supported functions/expressions\n- [Trigger and action types](https://msdn.microsoft.com/library/azure/dn948511.aspx) - the different types of actions and the inputs they take\n- [Overview of App Service](app-service-value-prop-what-is.md) - description of what components to choose when to build a solution\n\n## Adding conditional logic and a repeat\n\nAlthough the original flow works, there are some areas that could be improved. First, the action only sends you the top tweet returned. Logically, you would want to receive all of the tweets with the keyword. To repeat an action for a list of items, such as the returned tweets, you must use the `repeat` property.\n\n### Repeating\nRepeat takes a list of items and executes the action for each item in that list. The following steps update the existing action to use repeats, which makes more sense for a list of tweets.\n\n1. Return to the workflow you created and click the **Definition** link in the **Essentials**. \n\n2. To edit the **Dropbox connector** action, click the pencil icon.\n\n3. Click on the gear icon, and select **Repeat over a list**. \n \n2. Next to the **Repeat** box click the `...` and select **Body**. This will input:\n\n        @body('twitterconnector')\n\n    Into the text box. This function outputs a list of tweets. \n\n3. Select all of the text in the **Content** text box and delete it. Then, click the `...` and select **Tweet Text**. This will insert the **repeatItem()** function, which returns each element in the list. \n\nFinally, note that the outputs of repeating actions are special. If you wanted to reference the results of the Dropbox operation, for example, you could *not* do the normal `@actions('dropboxconnector').outputs.body`, you would instead do: `@actions('dropboxconnector').outputs.repeatItems`. This returns a list of all of the times that the operation ran, along with the outputs of each. For example, `@first(actions('dropboxconnector').outputs.repeatItems).outputs.body.FilePath` will return the path of the first file uploaded.\n\n### Conditional\nThis logic app still results in a lot of files being uploaded to Dropbox. The following steps add additional logic to make sure that you only receive a file when the tweet has a certain number of retweets. \n\n1. Click the gear icon at the top of the action and select **Add a condition to be met**.\n\n2. In the text box, type the following:\n\n        @greater(repeatItem().Retweet_Count , 5)\n    \n    The function **greater** compares two values and only allows the action to be executed when the first value is greater than the second value. You access a given property as a dot (.) followed by the property name, such as `.Retweet_Count` above. \n\n3. Click the check mark to save the Dropbox action.\n\n## Using the code view to edit a Logic App\n\nIn addition to the designer, you can directly edit the code that defines a logic app, as follows. \n\n1. Click on the **Code view** button in the command bar. \n\n    This opens a full editor that shows the definition you just edited.\n\n    ![Code view](./media/app-service-logic-use-logic-app-features/codeview.png)\n\n    By using the text editor, you can copy and paste any number of actions within the same logic app or between logic apps. You can also easily add or remove entire sections from the definition, and you can also share definitions with others.\n\n2. After you make your changes in code view, simply click **Save**. \n\n### Parameters\nThere are some capabilities of Logic Apps that can only be used in the code view. One example of these is parameters. Parameters make it easy to re-use values throughout your logic app. For example, if you have an email address that you want use in several actions, you should define it as a parameter.\n\nThe following updates your existing logic app to use parameters for the query term.\n\n1. In the code view, locate the `parameters : {}` object and insert the following topic object:\n\n        \"topic\" : {\n            \"type\" : \"string\",\n            \"defaultValue\" : \"MicrosoftAzure\"\n        }\n    \n2. Scroll to the `twitterconnector` action, locate the query value and replace it with `#@{parameters('topic')}`.\n    You could also use the  **concat** function to join together two or more strings, for example: `@concat('#',parameters('topic'))` is identical to the above. \n \n3. Finally, go to the `dropboxconnector` action and add the topic parameter, as follows:\n\n        /tweets/@{parameters('topic')}/@{repeatItem().TweetID}.txt\n\nParameters are a good way to pull out values that you are likely to change a lot. They are especially useful when you need to override parameters in different environments. For more information on how to override parameters based on environment, see our [REST API documentation](http://go.microsoft.com/fwlink/?LinkID=525617&clcid=0x409).\n\nNow, when you click **Save**, every hour you will get any new tweets that have more than 5 retweets delivered to a folder called **tweets** in your Dropbox.\n\nTo learn more about Logic App definitions, see [author Logic App definitions](app-service-logic-author-definitions.md).\n\n## Starting a logic app workflow\nThere are several different options for starting the workflow defined in you logic app. A workflow can always be started on-demand in the [Azure portal].\n\n### Recurrence triggers\nA recurrence trigger run at an interval that you specify. When the trigger has conditional logic, the trigger determines whether or not the workflow needs to run. A trigger indicates it should run by returning a `200` status code. When is does not need to run, it returns `202` status code.\n\n### Callback using REST APIs\nServices can call a logic app endpoint to start a workflow. You can find the endpoint to access by navigating to the **Properties** blade from the **Settings** command bar button in your logic app. \n\nYou can use this callback to invoke a logic app from inside your custom application. You need to use **Basic** authentication. The username of `default` is created for you, and the password is the **Primary Access Key** field on the **Properties** blade. For example: \n\n        POST https://<< your endpoint >>/run?api-version=2015-02-01-preview\n        Content-type: application/json\n        Authorization: Basic << base-64 encoded string of default:<access key> >>\n        {\n            \"name\" : \"nameOfTrigger\",\n            \"outputs\" : { \"property\" : \"value\" }\n        }\n\nYou can pass outputs to the workflow and reference them in the workflow. For example, with the above trigger, if you include `@triggers().outputs.property` you will get `value`.\n\nFor more information, see [the REST documentation](http://go.microsoft.com/fwlink/?LinkID=525617&clcid=0x409). \n\n### Manual execution\nYou can define a logic app that does not have a trigger. In this case the workflow must be started on-demand. This kind of logic app is best suited for a process that only needs to run intermittently. To create a logic app without a trigger, check the **Run this logic manually** in the **Start logic** box in the designer. \n\nTo start logic app on-demand, click the **Run now** button on the command bar. \n\n<!-- Shared links -->\n[Create a new logic app]: app-service-logic-create-a-logic-app.md\n[Azure portal]: https://portal.azure.com \ntest\n"
}