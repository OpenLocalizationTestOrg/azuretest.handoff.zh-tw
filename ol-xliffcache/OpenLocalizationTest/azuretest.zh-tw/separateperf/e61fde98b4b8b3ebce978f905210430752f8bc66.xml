{
  "nodes": [
    {
      "content": "How to use AMQP 1.0 with the Java Service Bus API | Microsoft Azure",
      "pos": [
        28,
        95
      ]
    },
    {
      "content": "Learn how to use the Java Message Service (JMS) with Azure Service Bus and Advanced Message Queuing Protodol (AMQP) 1.0.",
      "pos": [
        199,
        319
      ]
    },
    {
      "content": "How to use the Java Message Service (JMS) API with Service Bus and AMQP 1.0",
      "pos": [
        652,
        727
      ]
    },
    {
      "content": "The Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that can be used to build robust, cross-platform, messaging applications.",
      "pos": [
        729,
        908
      ]
    },
    {
      "content": "AMQP 1.0 support was added to Azure Service Bus in October 2012 and transitioned to General Availability (GA) in May 2013.",
      "pos": [
        909,
        1031
      ]
    },
    {
      "content": "The addition of AMQP 1.0 means that it’s now possible to leverage the queuing and publish/subscribe brokered messaging features of Service Bus from a range of platforms using an efficient binary protocol.",
      "pos": [
        1033,
        1237
      ]
    },
    {
      "content": "Furthermore, you can build applications comprised of components built using a mix of languages, frameworks and operating systems.",
      "pos": [
        1238,
        1367
      ]
    },
    {
      "content": "This how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from Java applications using the popular Java Message Service (JMS) API standard.",
      "pos": [
        1369,
        1570
      ]
    },
    {
      "content": "Get started with Service Bus",
      "pos": [
        1575,
        1603
      ]
    },
    {
      "content": "This guide assumes that you already have a Service Bus namespace containing a queue named \"queue1.\"",
      "pos": [
        1605,
        1704
      ]
    },
    {
      "content": "If you do not, then you can create the namespace and queue using the <bpt id=\"p1\">[</bpt>Azure Management Portal<ept id=\"p1\">](http://manage.windowsazure.com)</ept>.",
      "pos": [
        1705,
        1832
      ]
    },
    {
      "content": "For more information about how to create Service Bus namespaces and queues, see <bpt id=\"p1\">[</bpt>How to Use Service Bus Queues<ept id=\"p1\">](service-bus-dotnet-how-to-use-queues.md)</ept>.",
      "pos": [
        1833,
        1986
      ]
    },
    {
      "content": "Downloading the AMQP 1.0 JMS client library",
      "pos": [
        1992,
        2035
      ]
    },
    {
      "pos": [
        2037,
        2293
      ],
      "content": "For information about where to download the latest version of the Apache Qpid JMS AMQP 1.0 client library, visit <bpt id=\"p1\">[</bpt>http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html<ept id=\"p1\">](http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html)</ept>."
    },
    {
      "content": "You must add the following four JAR files from the Apache Qpid JMS AMQP 1.0 distribution archive to the Java CLASSPATH when building and running JMS applications with Service Bus:",
      "pos": [
        2295,
        2474
      ]
    },
    {
      "content": "geronimo-jms\\_1.1\\_spec-1.0.jar",
      "pos": [
        2481,
        2512
      ]
    },
    {
      "content": "qpid-amqp-1-0-client-[version].jar",
      "pos": [
        2518,
        2552
      ]
    },
    {
      "content": "qpid-amqp-1-0-client-jms-[version].jar",
      "pos": [
        2558,
        2596
      ]
    },
    {
      "content": "qpid-amqp-1-0-common-[version].jar",
      "pos": [
        2602,
        2636
      ]
    },
    {
      "content": "Coding Java applications",
      "pos": [
        2641,
        2665
      ]
    },
    {
      "content": "Java Naming and Directory Interface (JNDI)",
      "pos": [
        2671,
        2713
      ]
    },
    {
      "content": "JMS uses the Java Naming and Directory Interface (JNDI) to create a separation between logical names and physical names.",
      "pos": [
        2715,
        2835
      ]
    },
    {
      "content": "Two types of JMS objects are resolved using JNDI: ConnectionFactory and Destination.",
      "pos": [
        2836,
        2920
      ]
    },
    {
      "content": "JNDI uses a provider model into which you can plug different directory services to handle name resolution duties.",
      "pos": [
        2921,
        3034
      ]
    },
    {
      "content": "The Apache Qpid JMS AMQP 1.0 library comes with a simple properties file-based JNDI Provider that is configured using a properties file of the following format:",
      "pos": [
        3035,
        3195
      ]
    },
    {
      "content": "Configuring the ConnectionFactory",
      "pos": [
        3611,
        3644
      ]
    },
    {
      "pos": [
        3646,
        3764
      ],
      "content": "The entry used to define a <bpt id=\"p1\">**</bpt>ConnectionFactory<ept id=\"p1\">**</ept> in the Qpid Properties File JNDI Provider is of the following format:"
    },
    {
      "pos": [
        3823,
        3897
      ],
      "content": "Where <bpt id=\"p1\">**</bpt>[jndi_name]<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>[ConnectionURL]<ept id=\"p2\">**</ept> have the following meanings:"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>[jndi_name]<ept id=\"p1\">**</ept>: The logical name of the ConnectionFactory.",
      "pos": [
        3901,
        3960
      ]
    },
    {
      "content": "This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.",
      "pos": [
        3961,
        4069
      ]
    },
    {
      "pos": [
        4072,
        4178
      ],
      "content": "<bpt id=\"p1\">**</bpt>[ConnectionURL]<ept id=\"p1\">**</ept>: A URL that provides the JMS library with the information required to the AMQP broker."
    },
    {
      "pos": [
        4180,
        4230
      ],
      "content": "The format of the <bpt id=\"p1\">**</bpt>ConnectionURL<ept id=\"p1\">**</ept> is as follows:"
    },
    {
      "pos": [
        4306,
        4391
      ],
      "content": "Where <bpt id=\"p1\">**</bpt>[namespace]<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>[username]<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>[password]<ept id=\"p3\">**</ept> have the following meanings:"
    },
    {
      "pos": [
        4395,
        4438
      ],
      "content": "<bpt id=\"p1\">**</bpt>[namespace]<ept id=\"p1\">**</ept>: The Service Bus namespace."
    },
    {
      "pos": [
        4441,
        4485
      ],
      "content": "<bpt id=\"p1\">**</bpt>[username]<ept id=\"p1\">**</ept>: The Service Bus issuer name."
    },
    {
      "pos": [
        4488,
        4551
      ],
      "content": "<bpt id=\"p1\">**</bpt>[password]<ept id=\"p1\">**</ept>: URL-encoded form of the Service Bus issuer key."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> You must URL-encode the password manually.",
      "pos": [
        4555,
        4610
      ]
    },
    {
      "content": "A useful URL-encoding utility is available at <bpt id=\"p1\">[</bpt>http://www.w3schools.com/tags/ref_urlencode.asp<ept id=\"p1\">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>.",
      "pos": [
        4611,
        4756
      ]
    },
    {
      "content": "Configuring Destinations",
      "pos": [
        4763,
        4787
      ]
    },
    {
      "content": "The entry used to define a destination in the Qpid Properties File JNDI Provider is of the following format:",
      "pos": [
        4789,
        4897
      ]
    },
    {
      "content": "or",
      "pos": [
        4943,
        4945
      ]
    },
    {
      "pos": [
        4992,
        5068
      ],
      "content": "Where <bpt id=\"p1\">**</bpt>[jndi\\_name]<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>[physical\\_name]<ept id=\"p2\">**</ept> have the following meanings:"
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>[jndi_name]<ept id=\"p1\">**</ept>: The logical name of the destination.",
      "pos": [
        5072,
        5125
      ]
    },
    {
      "content": "This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.",
      "pos": [
        5126,
        5234
      ]
    },
    {
      "pos": [
        5237,
        5345
      ],
      "content": "<bpt id=\"p1\">**</bpt>[physical_name]<ept id=\"p1\">**</ept>: The name of the Service Bus entity to which the application sends or receives messages."
    },
    {
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> When receiving from a Service Bus topic subscription, the physical name specified in JNDI should be the name of the topic.",
      "pos": [
        5349,
        5484
      ]
    },
    {
      "content": "The subscription name is provided when the durable subscription is created in the JMS application code.",
      "pos": [
        5485,
        5588
      ]
    },
    {
      "content": "The <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/jj841071.aspx)</ept> provides more details on working with Service Bus topic subscriptions from JMS.",
      "pos": [
        5589,
        5762
      ]
    },
    {
      "content": "Writing the JMS application",
      "pos": [
        5768,
        5795
      ]
    },
    {
      "content": "There are no special APIs or options required when using JMS with Service Bus.",
      "pos": [
        5797,
        5875
      ]
    },
    {
      "content": "However, there are a few restrictions that will be covered later.",
      "pos": [
        5876,
        5941
      ]
    },
    {
      "content": "As with any JMS application, the first thing required is configuration of the JNDI environment, to be able to resolve a <bpt id=\"p1\">**</bpt>ConnectionFactory<ept id=\"p1\">**</ept> and destinations.",
      "pos": [
        5942,
        6101
      ]
    },
    {
      "content": "Configuring the JNDI InitialContext",
      "pos": [
        6108,
        6143
      ]
    },
    {
      "content": "The JNDI environment is configured by passing a hashtable of configuration information into the constructor of the javax.naming.InitialContext class.",
      "pos": [
        6145,
        6294
      ]
    },
    {
      "content": "The two required elements in the hashtable are the class name of the Initial Context Factory and the Provider URL.",
      "pos": [
        6295,
        6409
      ]
    },
    {
      "content": "The following code shows how to configure the JNDI environment to use the Qpid properties file based JNDI Provider with a properties file named <bpt id=\"p1\">**</bpt>servicebus.properties<ept id=\"p1\">**</ept>.",
      "pos": [
        6410,
        6580
      ]
    },
    {
      "content": "A simple JMS application using a Service Bus queue",
      "pos": [
        6885,
        6935
      ]
    },
    {
      "content": "The following example program sends JMS TextMessages to a Service Bus queue with the JNDI logical name of QUEUE, and receives the messages back.",
      "pos": [
        6937,
        7081
      ]
    },
    {
      "content": "Running the application",
      "pos": [
        10945,
        10968
      ]
    },
    {
      "content": "Running the application produces the following output:",
      "pos": [
        10970,
        11024
      ]
    },
    {
      "content": "Cross-platform messaging between JMS and .NET",
      "pos": [
        11496,
        11541
      ]
    },
    {
      "content": "This guide showed how to send and receive messages to and from Service Bus using JMS.",
      "pos": [
        11543,
        11628
      ]
    },
    {
      "content": "However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.",
      "pos": [
        11629,
        11820
      ]
    },
    {
      "pos": [
        11822,
        12086
      ],
      "content": "Using the sample JMS application described above and a similar .NET application taken from a companion guide, <bpt id=\"p1\">[</bpt>How to use AMQP 1.0 with the .NET Service Bus .NET API<ept id=\"p1\">](service-bus-dotnet-advanced-message-queuing.md)</ept>, you can exchange messages between .NET and Java."
    },
    {
      "pos": [
        12089,
        12286
      ],
      "content": "For more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>."
    },
    {
      "content": "JMS to .NET",
      "pos": [
        12292,
        12303
      ]
    },
    {
      "content": "To demonstrate JMS to .NET messaging:",
      "pos": [
        12305,
        12342
      ]
    },
    {
      "content": "Start the .NET sample application without any command-line arguments.",
      "pos": [
        12346,
        12415
      ]
    },
    {
      "content": "Start the Java sample application with the “sendonly” command-line argument.",
      "pos": [
        12418,
        12494
      ]
    },
    {
      "content": "In this mode, the application will not receive messages from the queue, it will only send.",
      "pos": [
        12495,
        12585
      ]
    },
    {
      "pos": [
        12588,
        12686
      ],
      "content": "Press <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> a few times in the Java application console, which will cause messages to be sent."
    },
    {
      "content": "These messages are received by the .NET application.",
      "pos": [
        12689,
        12741
      ]
    },
    {
      "content": "Output from JMS application",
      "pos": [
        12748,
        12775
      ]
    },
    {
      "content": "Output from .NET application",
      "pos": [
        13064,
        13092
      ]
    },
    {
      "content": ".NET to JMS",
      "pos": [
        13366,
        13377
      ]
    },
    {
      "content": "To demonstrate .NET to JMS messaging:",
      "pos": [
        13379,
        13416
      ]
    },
    {
      "content": "Start the .NET sample application with the “sendonly” command-line argument.",
      "pos": [
        13420,
        13496
      ]
    },
    {
      "content": "In this mode, the application will not receive messages from the queue, it will only send.",
      "pos": [
        13497,
        13587
      ]
    },
    {
      "content": "Start the Java sample application without any command-line arguments.",
      "pos": [
        13590,
        13659
      ]
    },
    {
      "pos": [
        13662,
        13760
      ],
      "content": "Press <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept> a few times in the .NET application console, which will cause messages to be sent."
    },
    {
      "content": "These messages are received by the Java application.",
      "pos": [
        13763,
        13815
      ]
    },
    {
      "content": "Output from .NET application",
      "pos": [
        13822,
        13850
      ]
    },
    {
      "content": "Output from JMS application",
      "pos": [
        14162,
        14189
      ]
    },
    {
      "content": "Unsupported features and restrictions",
      "pos": [
        14520,
        14557
      ]
    },
    {
      "content": "The following restrictions exist when using JMS over AMQP 1.0 with Service Bus, namely:",
      "pos": [
        14559,
        14646
      ]
    },
    {
      "content": "Only one <bpt id=\"p1\">**</bpt>MessageProducer<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MessageConsumer<ept id=\"p2\">**</ept> is allowed per <bpt id=\"p3\">**</bpt>Session<ept id=\"p3\">**</ept>.",
      "pos": [
        14650,
        14729
      ]
    },
    {
      "content": "If you need to create multiple <bpt id=\"p1\">**</bpt>MessageProducers<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>MessageConsumers<ept id=\"p2\">**</ept> in an application, create a dedicated <bpt id=\"p3\">**</bpt>Session<ept id=\"p3\">**</ept> for each of them.",
      "pos": [
        14730,
        14873
      ]
    },
    {
      "content": "Volatile topic subscriptions are not currently supported.",
      "pos": [
        14876,
        14933
      ]
    },
    {
      "pos": [
        14936,
        14985
      ],
      "content": "<bpt id=\"p1\">**</bpt>MessageSelectors<ept id=\"p1\">**</ept> are not currently supported."
    },
    {
      "pos": [
        14988,
        15162
      ],
      "content": "Temporary destinations, i.e., <bpt id=\"p1\">**</bpt>TemporaryQueue<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>TemporaryTopic<ept id=\"p2\">**</ept> are not currently supported, along with the <bpt id=\"p3\">**</bpt>QueueRequestor<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>TopicRequestor<ept id=\"p4\">**</ept> APIs that use them."
    },
    {
      "content": "Transacted sessions and distributed transactions are not supported.",
      "pos": [
        15165,
        15232
      ]
    },
    {
      "content": "Summary",
      "pos": [
        15237,
        15244
      ]
    },
    {
      "content": "This how-to guide showed how to use Service Bus brokered messaging features (queues and publish/subscribe topics) from Java using the popular JMS API and AMQP 1.0.",
      "pos": [
        15246,
        15409
      ]
    },
    {
      "content": "You can also use Service Bus AMQP 1.0 from other languages, including .NET, C, Python, and PHP.",
      "pos": [
        15411,
        15506
      ]
    },
    {
      "content": "Components built using these different languages can exchange messages reliably and at full fidelity using the AMQP 1.0 support in Service Bus.",
      "pos": [
        15507,
        15650
      ]
    },
    {
      "content": "For more information, see the <bpt id=\"p1\">[</bpt>Service Bus AMQP 1.0 Developer's Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/jj841071.aspx)</ept>.",
      "pos": [
        15651,
        15771
      ]
    },
    {
      "content": "Next steps",
      "pos": [
        15776,
        15786
      ]
    },
    {
      "content": "AMQP 1.0 support in Azure Service Bus",
      "pos": [
        15791,
        15828
      ]
    },
    {
      "content": "How to use AMQP 1.0 with the Service Bus .NET API",
      "pos": [
        15863,
        15912
      ]
    },
    {
      "content": "Service Bus AMQP 1.0 Developer's Guide",
      "pos": [
        15965,
        16003
      ]
    },
    {
      "content": "How to Use Service Bus Queues",
      "pos": [
        16057,
        16086
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"How to use AMQP 1.0 with the Java Service Bus API | Microsoft Azure\" \n    metakeywords=\"Java Messsage AMQP, Service Bus AMQP, download AMQP JMS library\" \n    description=\"Learn how to use the Java Message Service (JMS) with Azure Service Bus and Advanced Message Queuing Protodol (AMQP) 1.0.\" \n    authors=\"sethmanheim\" \n    documentationCenter=\"java\" \n    writer=\"sethm\" \n    manager=\"timlt\" \n    editor=\"\" \n    services=\"service-bus\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.workload=\"tbd\" \n    ms.tgt_pltfrm=\"na\" \n    ms.devlang=\"java\" \n    ms.topic=\"article\" \n    ms.date=\"07/21/2015\" \n    ms.author=\"sethm\"/>\n\n\n# How to use the Java Message Service (JMS) API with Service Bus and AMQP 1.0\n\nThe Advanced Message Queuing Protocol (AMQP) 1.0 is an efficient, reliable, wire-level messaging protocol that can be used to build robust, cross-platform, messaging applications. AMQP 1.0 support was added to Azure Service Bus in October 2012 and transitioned to General Availability (GA) in May 2013.\n\nThe addition of AMQP 1.0 means that it’s now possible to leverage the queuing and publish/subscribe brokered messaging features of Service Bus from a range of platforms using an efficient binary protocol. Furthermore, you can build applications comprised of components built using a mix of languages, frameworks and operating systems.\n\nThis how-to guide explains how to use the Service Bus brokered messaging features (queues and publish/subscribe topics) from Java applications using the popular Java Message Service (JMS) API standard.\n\n## Get started with Service Bus\n\nThis guide assumes that you already have a Service Bus namespace containing a queue named \"queue1.\" If you do not, then you can create the namespace and queue using the [Azure Management Portal](http://manage.windowsazure.com). For more information about how to create Service Bus namespaces and queues, see [How to Use Service Bus Queues](service-bus-dotnet-how-to-use-queues.md).\n\n### Downloading the AMQP 1.0 JMS client library\n\nFor information about where to download the latest version of the Apache Qpid JMS AMQP 1.0 client library, visit [http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html](http://people.apache.org/~rgodfrey/qpid-java-amqp-1-0-client-jms.html).\n\nYou must add the following four JAR files from the Apache Qpid JMS AMQP 1.0 distribution archive to the Java CLASSPATH when building and running JMS applications with Service Bus:\n\n*    geronimo-jms\\_1.1\\_spec-1.0.jar\n*    qpid-amqp-1-0-client-[version].jar\n*    qpid-amqp-1-0-client-jms-[version].jar\n*    qpid-amqp-1-0-common-[version].jar\n\n## Coding Java applications\n\n### Java Naming and Directory Interface (JNDI)\n\nJMS uses the Java Naming and Directory Interface (JNDI) to create a separation between logical names and physical names. Two types of JMS objects are resolved using JNDI: ConnectionFactory and Destination. JNDI uses a provider model into which you can plug different directory services to handle name resolution duties. The Apache Qpid JMS AMQP 1.0 library comes with a simple properties file-based JNDI Provider that is configured using a properties file of the following format:\n\n```\n# servicebus.properties – sample JNDI configuration\n    \n# Register a ConnectionFactory in JNDI using the form:\n# connectionfactory.[jndi_name] = [ConnectionURL]\nconnectionfactory.SBCF = amqps://[username]:[password]@[namespace].servicebus.windows.net\n    \n# Register some queues in JNDI using the form\n# queue.[jndi_name] = [physical_name]\n# topic.[jndi_name] = [physical_name]\nqueue.QUEUE = queue1\n```\n\n#### Configuring the ConnectionFactory\n\nThe entry used to define a **ConnectionFactory** in the Qpid Properties File JNDI Provider is of the following format:\n\n```\nconnectionfactory.[jndi_name] = [ConnectionURL]\n```\n\nWhere **[jndi_name]** and **[ConnectionURL]** have the following meanings:\n\n- **[jndi_name]**: The logical name of the ConnectionFactory. This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.\n- **[ConnectionURL]**: A URL that provides the JMS library with the information required to the AMQP broker.\n\nThe format of the **ConnectionURL** is as follows:\n\n```\namqps://[username]:[password]@[namespace].servicebus.windows.net\n```\n\nWhere **[namespace]**, **[username]** and **[password]** have the following meanings:\n\n- **[namespace]**: The Service Bus namespace.\n- **[username]**: The Service Bus issuer name.\n- **[password]**: URL-encoded form of the Service Bus issuer key.\n\n> [AZURE.NOTE] You must URL-encode the password manually. A useful URL-encoding utility is available at [http://www.w3schools.com/tags/ref_urlencode.asp](http://www.w3schools.com/tags/ref_urlencode.asp).\n\n#### Configuring Destinations\n\nThe entry used to define a destination in the Qpid Properties File JNDI Provider is of the following format:\n\n```\nqueue.[jndi_name] = [physical_name]\n```\nor\n\n```\ntopic.[jndi_name] = [physical_name]\n```\n\nWhere **[jndi\\_name]** and **[physical\\_name]** have the following meanings:\n\n- **[jndi_name]**: The logical name of the destination. This is the name that will be resolved in the Java application using the JNDI IntialContext.lookup() method.\n- **[physical_name]**: The name of the Service Bus entity to which the application sends or receives messages.\n\n> [AZURE.NOTE] When receiving from a Service Bus topic subscription, the physical name specified in JNDI should be the name of the topic. The subscription name is provided when the durable subscription is created in the JMS application code. The [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/jj841071.aspx) provides more details on working with Service Bus topic subscriptions from JMS.\n\n### Writing the JMS application\n\nThere are no special APIs or options required when using JMS with Service Bus. However, there are a few restrictions that will be covered later. As with any JMS application, the first thing required is configuration of the JNDI environment, to be able to resolve a **ConnectionFactory** and destinations.\n\n#### Configuring the JNDI InitialContext\n\nThe JNDI environment is configured by passing a hashtable of configuration information into the constructor of the javax.naming.InitialContext class. The two required elements in the hashtable are the class name of the Initial Context Factory and the Provider URL. The following code shows how to configure the JNDI environment to use the Qpid properties file based JNDI Provider with a properties file named **servicebus.properties**.\n\n```\nHashtable<String, String> env = new Hashtable<String, String>(); \nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactory\"); \nenv.put(Context.PROVIDER_URL, \"servicebus.properties\"); \nInitialContext context = new InitialContext(env);\n``` \n\n### A simple JMS application using a Service Bus queue\n\nThe following example program sends JMS TextMessages to a Service Bus queue with the JNDI logical name of QUEUE, and receives the messages back.\n\n    // SimpleSenderReceiver.java\n    \n    import javax.jms.*;\n    import javax.naming.Context;\n    import javax.naming.InitialContext;\n    import java.io.BufferedReader;\n    import java.io.InputStreamReader;\n    import java.util.Hashtable;\n    import java.util.Random;\n    \n    public class SimpleSenderReceiver implements MessageListener {\n        private static boolean runReceiver = true;\n        private Connection connection;\n        private Session sendSession;\n        private Session receiveSession;\n        private MessageProducer sender;\n        private MessageConsumer receiver;\n        private static Random randomGenerator = new Random();\n    \n        public SimpleSenderReceiver() throws Exception {\n            // Configure JNDI environment\n            Hashtable<String, String> env = new Hashtable<String, String>();\n            env.put(Context.INITIAL_CONTEXT_FACTORY, \n                    \"org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactory\");\n            env.put(Context.PROVIDER_URL, \"servicebus.properties\");\n            Context context = new InitialContext(env);\n    \n            // Lookup ConnectionFactory and Queue\n            ConnectionFactory cf = (ConnectionFactory) context.lookup(\"SBCF\");\n            Destination queue = (Destination) context.lookup(\"QUEUE\");\n    \n            // Create Connection\n            connection = cf.createConnection();\n    \n            // Create sender-side Session and MessageProducer\n            sendSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            sender = sendSession.createProducer(queue);\n    \n            if (runReceiver) {\n                // Create receiver-side Session, MessageConsumer,and MessageListener\n                receiveSession = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);\n                receiver = receiveSession.createConsumer(queue);\n                receiver.setMessageListener(this);\n                connection.start();\n            }\n        }\n    \n        public static void main(String[] args) {\n            try {\n    \n                if ((args.length > 0) && args[0].equalsIgnoreCase(\"sendonly\")) {\n                    runReceiver = false;\n                }\n    \n                SimpleSenderReceiver simpleSenderReceiver = new SimpleSenderReceiver();\n                System.out.println(\"Press [enter] to send a message. Type 'exit' + [enter] to quit.\");\n                BufferedReader commandLine = new java.io.BufferedReader(new InputStreamReader(System.in));\n    \n                while (true) {\n                    String s = commandLine.readLine();\n                    if (s.equalsIgnoreCase(\"exit\")) {\n                        simpleSenderReceiver.close();\n                        System.exit(0);\n                    } else {\n                        simpleSenderReceiver.sendMessage();\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    \n        private void sendMessage() throws JMSException {\n            TextMessage message = sendSession.createTextMessage();\n            message.setText(\"Test AMQP message from JMS\");\n            long randomMessageID = randomGenerator.nextLong() >>>1;\n            message.setJMSMessageID(\"ID:\" + randomMessageID);\n            sender.send(message);\n            System.out.println(\"Sent message with JMSMessageID = \" + message.getJMSMessageID());\n        }\n    \n        public void close() throws JMSException {\n            connection.close();\n        }\n    \n        public void onMessage(Message message) {\n            try {\n                System.out.println(\"Received message with JMSMessageID = \" + message.getJMSMessageID());\n                message.acknowledge();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }   \n\n### Running the application\n\nRunning the application produces the following output:\n\n```\n> java SimpleSenderReceiver\nPress [enter] to send a message. Type 'exit' + [enter] to quit.\n    \nSent message with JMSMessageID = ID:2867600614942270318\nReceived message with JMSMessageID = ID:2867600614942270318\n    \nSent message with JMSMessageID = ID:7578408152750301483\nReceived message with JMSMessageID = ID:7578408152750301483\n    \nSent message with JMSMessageID = ID:956102171969368961\nReceived message with JMSMessageID = ID:956102171969368961\nexit\n```\n\n## Cross-platform messaging between JMS and .NET\n\nThis guide showed how to send and receive messages to and from Service Bus using JMS. However, one of the key benefits of AMQP 1.0 is that it enables applications to be built from components written in different languages, with messages exchanged reliably and at full fidelity.\n\nUsing the sample JMS application described above and a similar .NET application taken from a companion guide, [How to use AMQP 1.0 with the .NET Service Bus .NET API](service-bus-dotnet-advanced-message-queuing.md), you can exchange messages between .NET and Java. \n\nFor more information about the details of cross-platform messaging using Service Bus and AMQP 1.0, see the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/jj841071.aspx).\n\n### JMS to .NET\n\nTo demonstrate JMS to .NET messaging:\n\n* Start the .NET sample application without any command-line arguments.\n* Start the Java sample application with the “sendonly” command-line argument. In this mode, the application will not receive messages from the queue, it will only send.\n* Press **Enter** a few times in the Java application console, which will cause messages to be sent.\n* These messages are received by the .NET application.\n\n#### Output from JMS application\n\n```\n> java SimpleSenderReceiver sendonly\nPress [enter] to send a message. Type 'exit' + [enter] to quit.\nSent message with JMSMessageID = ID:4364096528752411591\nSent message with JMSMessageID = ID:459252991689389983\nSent message with JMSMessageID = ID:1565011046230456854\nexit\n```\n\n#### Output from .NET application\n\n```\n> SimpleSenderReceiver.exe  \nPress [enter] to send a message. Type 'exit' + [enter] to quit.\nReceived message with MessageID = 4364096528752411591\nReceived message with MessageID = 459252991689389983\nReceived message with MessageID = 1565011046230456854\nexit\n```\n\n### .NET to JMS\n\nTo demonstrate .NET to JMS messaging:\n\n* Start the .NET sample application with the “sendonly” command-line argument. In this mode, the application will not receive messages from the queue, it will only send.\n* Start the Java sample application without any command-line arguments.\n* Press **Enter** a few times in the .NET application console, which will cause messages to be sent.\n* These messages are received by the Java application.\n\n#### Output from .NET application\n\n```\n> SimpleSenderReceiver.exe sendonly\nPress [enter] to send a message. Type 'exit' + [enter] to quit.\nSent message with MessageID = d64e681a310a48a1ae0ce7b017bf1cf3  \nSent message with MessageID = 98a39664995b4f74b32e2a0ecccc46bb\nSent message with MessageID = acbca67f03c346de9b7893026f97ddeb\nexit\n```\n\n#### Output from JMS application\n\n```\n> java SimpleSenderReceiver \nPress [enter] to send a message. Type 'exit' + [enter] to quit.\nReceived message with JMSMessageID = ID:d64e681a310a48a1ae0ce7b017bf1cf3\nReceived message with JMSMessageID = ID:98a39664995b4f74b32e2a0ecccc46bb\nReceived message with JMSMessageID = ID:acbca67f03c346de9b7893026f97ddeb\nexit\n```\n\n## Unsupported features and restrictions\n\nThe following restrictions exist when using JMS over AMQP 1.0 with Service Bus, namely:\n\n* Only one **MessageProducer** or **MessageConsumer** is allowed per **Session**. If you need to create multiple **MessageProducers** or **MessageConsumers** in an application, create a dedicated **Session** for each of them.\n* Volatile topic subscriptions are not currently supported.\n* **MessageSelectors** are not currently supported.\n* Temporary destinations, i.e., **TemporaryQueue**, **TemporaryTopic** are not currently supported, along with the **QueueRequestor** and **TopicRequestor** APIs that use them.\n* Transacted sessions and distributed transactions are not supported.\n\n## Summary\n\nThis how-to guide showed how to use Service Bus brokered messaging features (queues and publish/subscribe topics) from Java using the popular JMS API and AMQP 1.0.\n\nYou can also use Service Bus AMQP 1.0 from other languages, including .NET, C, Python, and PHP. Components built using these different languages can exchange messages reliably and at full fidelity using the AMQP 1.0 support in Service Bus. For more information, see the [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/jj841071.aspx).\n\n## Next steps\n\n* [AMQP 1.0 support in Azure Service Bus](service-bus-amqp-overview.md)\n* [How to use AMQP 1.0 with the Service Bus .NET API](service-bus-dotnet-advanced-message-queuing.md)\n* [Service Bus AMQP 1.0 Developer's Guide](http://msdn.microsoft.com/library/jj841071.aspx)\n* [How to Use Service Bus Queues](service-bus-dotnet-how-to-use-queues.md)\n \n"
}